public void Serialize(LittleEndianOutput @out) {@out.WriteShort(field_1_vcenter);}
public void AddAll(BlockList<T> src){if (src.Size == 0) return;int srcDirIdx = 0;for (; srcDirIdx < src.TailDirIdx; srcDirIdx++)AddAll(src.Directory[srcDirIdx], 0, BLOCK_SIZE);if (src.TailBlkIdx != 0)AddAll(src.TailBlock, 0, src.TailBlkIdx);}
public void WriteByte(byte b){if (upto == blockSize){if (currentBlock != null){AddBlock(currentBlock);}currentBlock = new byte[blockSize];upto = 0;}currentBlock[upto++] = b;}
public ObjectId GetObjectId() { return objectId; }
public DeleteDomainEntryResult DeleteDomainEntry(DeleteDomainEntryRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteDomainEntry(request); }
public long RamBytesUsed() => (termOffsets != null ? termOffsets.RamBytesUsed() : 0) + (termsDictOffsets != null ? termsDictOffsets.RamBytesUsed() : 0);
public string GetFullMessage(){byte[] raw = buffer;int msgB = RawParseUtils.TagMessage(raw, 0);if (msgB < 0){return "";}return RawParseUtils.Decode(GuessEncoding(), raw, msgB, raw.Length);}
public POIFSFileSystem() : this(true){_header.BATCount = 1;_header.BATArray = new int[] { 1 };BATBlock bb = BATBlock.CreateEmptyBATBlock(bigBlockSize, false);bb.OurBlockIndex = 1;_bat_blocks.Add(bb);SetNextBlock(0, POIFSConstants.END_OF_CHAIN);SetNextBlock(1, POIFSConstants.FAT_SECTOR_BLOCK);_property_table.StartBlock = 0;}
public void init(int address) { slice = pool.buffers[address >> ByteBlockPool.BYTE_BLOCK_SHIFT]; Debug.Assert(slice != null); upto = address & ByteBlockPool.BYTE_BLOCK_MASK; offset0 = address; Debug.Assert(upto < slice.Length); }
public SubmoduleAddCommand SetPath(string path) { this.path = path; return this; }
public ListIngestionsResult ListIngestions(ListIngestionsRequest request) { request = BeforeClientExecution(request); return ExecuteListIngestions(request); }
public QueryParserTokenManager(CharStream stream, int lexState) : this(stream){SwitchTo(lexState);}
public GetShardIteratorResult GetShardIterator(GetShardIteratorRequest request) { request = BeforeClientExecution(request); return ExecuteGetShardIterator(request); }
public ModifyStrategyRequest() : base("aegis", "2016-11-11", "ModifyStrategy", "vipaegis"){SetMethod(MethodType.POST);}
public bool Ready(){lock (lockObject){if (inputStream == null){throw new IOException("StreamReader is closed");}try{return remainingBytes > 0 || inputStream.Available > 0;}catch (IOException e){return false;}}}
public EscherOptRecord GetOptRecord() { return _optRecord; }
public lock (this){if (buffer == null){throw new ArgumentNullException("buffer", "buffer == null");}Array.CheckOffsetAndLength(offset, length, buffer.Length);if (length == 0){return 0;}int copylen = count - pos < length ? count - pos : length;for (int i = 0; i < copylen; i++){buffer[offset + i] = (byte)this.buffer[pos + i];}pos += copylen;return copylen;}
public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp) { this.sentenceOp = sentenceOp; }
public void print(string str) { write(str ?? string.Empty); }
public class NotImplementedFunctionException : Exception{public string FunctionName { get; }public NotImplementedFunctionException(string functionName, Exception cause) : base(functionName, cause){this.FunctionName = functionName;}}
public V next() { return base.NextEntry().Value; }
public void ReadBytes(byte[] b, int offset, int len, bool useBuffer){int available = bufferLength - bufferPosition;if (len <= available){if (len > 0){Array.Copy(buffer, bufferPosition, b, offset, len);}bufferPosition += len;}else{if (available > 0){Array.Copy(buffer, bufferPosition, b, offset, available);offset += available;len -= available;bufferPosition += available;}if (useBuffer && len < bufferSize){Refill();if (bufferLength < len){Array.Copy(buffer, 0, b, offset, bufferLength);throw new EndOfStreamException("read past EOF: " + this);}else{Array.Copy(buffer, 0, b, offset, len);bufferPosition = len;}}else{long after = bufferStart + bufferPosition + len;if (after > Length()){throw new EndOfStreamException("read past EOF: " + this);}ReadInternal(b, offset, len);bufferStart = after;bufferPosition = 0;bufferLength = 0;}}}
public TagQueueResult tagQueue(TagQueueRequest request) { request = beforeClientExecution(request); return executeTagQueue(request); }
public void Remove() => throw new NotSupportedException();
public CacheSubnetGroup ModifyCacheSubnetGroup(ModifyCacheSubnetGroupRequest request) { request = BeforeClientExecution(request); return ExecuteModifyCacheSubnetGroup(request); }
public void setParams(string params) {base.setParams(params); language = country = variant = ""; string[] tokens = params.Split(','); if (tokens.Length > 0) language = tokens[0]; if (tokens.Length > 1) country = tokens[1]; if (tokens.Length > 2) variant = tokens[2]; }
public DeleteDocumentationVersionResult DeleteDocumentationVersion(DeleteDocumentationVersionRequest request){request = BeforeClientExecution(request);return ExecuteDeleteDocumentationVersion(request);}
public bool Equals(object obj) {if (!(obj is FacetLabel)) {return false;}FacetLabel other = (FacetLabel) obj;if (length != other.length) {return false;}for (int i = length - 1; i >= 0; i--) {if (!components[i].Equals(other.components[i])) {return false;}}return true;}
public GetInstanceAccessDetailsResult GetInstanceAccessDetails(GetInstanceAccessDetailsRequest request){request = BeforeClientExecution(request);return ExecuteGetInstanceAccessDetails(request);}
public HSSFPolygon CreatePolygon(HSSFChildAnchor anchor){HSSFPolygon shape = new HSSFPolygon(this, anchor);shape.SetParent(this);shape.SetAnchor(anchor);shapes.Add(shape);OnCreate(shape);return shape;}
public string GetSheetName(int sheetIndex) { return GetBoundSheetRec(sheetIndex).GetSheetname(); }
public GetDashboardResult GetDashboard(GetDashboardRequest request) { request = BeforeClientExecution(request); return ExecuteGetDashboard(request); }
public AssociateSigninDelegateGroupsWithAccountResult AssociateSigninDelegateGroupsWithAccount(AssociateSigninDelegateGroupsWithAccountRequest request) { request = BeforeClientExecution(request); return ExecuteAssociateSigninDelegateGroupsWithAccount(request); }
public void AddMultipleBlanks(MulBlankRecord mbr){for (int j = 0; j < mbr.GetNumColumns(); j++){BlankRecord br = new BlankRecord();br.SetColumn((short)(j + mbr.GetFirstColumn()));br.SetRow(mbr.GetRow());br.SetXFIndex(mbr.GetXFAt(j));InsertCell(br);}}
public static string Quote(string str){StringBuilder sb = new StringBuilder();sb.Append("\\Q");int apos = 0;int k;while ((k = str.IndexOf("\\E", apos)) >= 0){sb.Append(str.Substring(apos, k + 2)).Append("\\\\E\\Q");apos = k + 2;}return sb.Append(str.Substring(apos)).Append("\\E").ToString();}
public byte[] PutInt(int value) { throw new ReadOnlyBufferException(); }
public ArrayPtg(object[,] values2d){int nColumns = values2d.GetLength(1);int nRows = values2d.GetLength(0);_nColumns = (short)nColumns;_nRows = (short)nRows;object[] vv = new object[_nColumns * _nRows];for (int r = 0; r < nRows; r++){object[] rowData = values2d[r];for (int c = 0; c < nColumns; c++){vv[GetValueIndex(c, r)] = rowData[c];}}_arrayValues = vv;_reserved0Int = 0;_reserved1Short = 0;_reserved2Byte = 0;}
public GetIceServerConfigResult GetIceServerConfig(GetIceServerConfigRequest request) { request = BeforeClientExecution(request); return ExecuteGetIceServerConfig(request); }
public string ToString() { return GetType().Name + " [" + GetValueAsString() + "]"; }
public string ToString(string field) { return "ToChildBlockJoinQuery (" + parentQuery.ToString() + ")"; }
public void IncRef() => refCount.IncrementAndGet();
public UpdateConfigurationSetSendingEnabledResult UpdateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) { request = BeforeClientExecution(request); return ExecuteUpdateConfigurationSetSendingEnabled(request); }
public int GetNextXBATChainOffset() { return GetXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE; }
public void MultiplyByPowerOfTen(int pow10) {TenPower tp = TenPower.GetInstance(Math.Abs(pow10));if (pow10 < 0) {MulShift(tp.Divisor, tp.DivisorShift);} else {MulShift(tp.Multiplicand, tp.MultiplierShift);}}
public string ToString(){StringBuilder b = new StringBuilder();int l = Length;b.Append(Path.DirectorySeparatorChar);for (int i = 0; i < l; i++){b.Append(GetComponent(i));if (i < l - 1){b.Append(Path.DirectorySeparatorChar);}}return b.ToString();}
public InstanceProfileCredentialsProvider WithFetcher(ECSMetadataServiceCredentialsFetcher fetcher) { this.fetcher = fetcher; this.fetcher.SetRoleName(roleName); return this; }
public void SetProgressMonitor(ProgressMonitor pm) { progressMonitor = pm; }
public void reset() { if (!first()) { ptr = 0; if (!eof()) parseEntry(); } }
public E Previous() { if (iterator.PreviousIndex() >= start) { return iterator.Previous(); } throw new NoSuchElementException(); }
public string GetNewPrefix() { return this.newPrefix; }
public int IndexOfValue(int value) {for (int i = 0; i < mSize; i++)if (mValues[i] == value)return i;return -1;}
public List<CharsRef> UniqueStems(char[] word, int length){List<CharsRef> stems = Stem(word, length);if (stems.Count < 2){return stems;}HashSet<CharsRef> terms = new HashSet<CharsRef>(8, dictionary.IgnoreCase);List<CharsRef> deduped = new List<CharsRef>();foreach (CharsRef s in stems){if (!terms.Contains(s)){deduped.Add(s);terms.Add(s);}}return deduped;}
public GetGatewayResponsesResult GetGatewayResponses(GetGatewayResponsesRequest request) { request = BeforeClientExecution(request); return ExecuteGetGatewayResponses(request); }
public void SetPosition(long pos) { currentBlockIndex = (int)(pos >> blockBits); currentBlock = blocks[currentBlockIndex]; currentBlockUpto = (int)(pos & blockMask); }
public long Skip(long n) { int s = (int)Math.Min(Available(), Math.Max(0, n)); ptr += s; return s; }
public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig) { SetBootstrapActionConfig(bootstrapActionConfig); }
public void Serialize(BinaryWriter writer){writer.Write((short)field_1_row);writer.Write((short)field_2_col);writer.Write((short)field_3_flags);writer.Write((short)field_4_shapeid);writer.Write((short)field_6_author.Length);writer.Write(field_5_hasMultibyte ? (byte)0x01 : (byte)0x00);if (field_5_hasMultibyte){StringUtil.PutUnicodeLE(field_6_author, writer);}else{StringUtil.PutCompressedUnicode(field_6_author, writer);}if (field_7_padding != null){writer.Write((byte)field_7_padding.Value);}}
public int LastIndexOf(string @string) { return LastIndexOf(@string, count); }
public bool Add(E obj) { return AddLastImpl(obj); }
public void UnsetSection(string section, string subsection){ConfigSnapshot src, res;do{src = state.Get();res = UnsetSection(src, section, subsection);} while (!state.CompareAndSet(src, res));}
public string GetTagName() { return tagName; }
public void AddSubRecord(int index, SubRecord element) { subrecords.Insert(index, element); }
public bool Remove(object o) { lock (mutex) { return delegate().Remove(o); } }
public DoubleMetaphoneFilter Create(TokenStream input) { return new DoubleMetaphoneFilter(input, maxCodeLength, inject); }
public long Length() { return InCoreLength(); }
public void SetValue(bool newValue) { value = newValue; }
public Pair(ContentSource oldSource, ContentSource newSource) { this.oldSource = oldSource; this.newSource = newSource; }
public int Get(int i) { if (count <= i) throw new IndexOutOfRangeException(i); return entries[i]; }
public CreateRepoRequest() : base("cr", "2016-06-07", "CreateRepo", "cr"){SetUriPattern("/repos");SetMethod(MethodType.PUT);}
public bool IsDeltaBaseAsOffset() { return deltaBaseAsOffset; }
public void Remove(){if (expectedModCount == list.modCount){if (lastLink != null){Link<ET> next = lastLink.next;Link<ET> previous = lastLink.previous;next.previous = previous;previous.next = next;if (lastLink == link){pos--;}link = previous;lastLink = null;expectedModCount++;list.size--;list.modCount++;}else{throw new InvalidOperationException();}}else{throw new InvalidOperationException();}}
public MergeShardsResult MergeShards(MergeShardsRequest request) { request = BeforeClientExecution(request); return ExecuteMergeShards(request); }
public AllocateHostedConnectionResult AllocateHostedConnection(AllocateHostedConnectionRequest request) { request = BeforeClientExecution(request); return ExecuteAllocateHostedConnection(request); }
public int GetBeginIndex() { return start; }
public static readonly WeightedTerm[] GetTerms(Query query) => GetTerms(query, false);
public byte[] Compact() { throw new ReadOnlyBufferException(); }
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations){for (int i = 0; i < iterations; ++i){long byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = byte0 >> 2;long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 4) | (byte1 >> 4);long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 2) | (byte2 >> 6);values[valuesOffset++] = byte2 & 63;}}
public string GetHumanishName(){string s = GetPath();if ("/".Equals(s) || "".Equals(s))s = GetHost();if (s == null)throw new ArgumentException();string[] elements;if ("file".Equals(Scheme) || LOCAL_FILE.IsMatch(s))elements = s.Split(new char[] { Path.DirectorySeparatorChar, '/' }, StringSplitOptions.None);elseelements = s.Split('/', StringSplitOptions.RemoveEmptyEntries);if (elements.Length == 0)throw new ArgumentException();string result = elements[elements.Length - 1];if (Constants.DOT_GIT.Equals(result))result = elements[elements.Length - 2];else if (result.EndsWith(Constants.DOT_GIT_EXT))result = result.Substring(0, result.Length - Constants.DOT_GIT_EXT.Length());return result;}
public DescribeNotebookInstanceLifecycleConfigResult DescribeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeNotebookInstanceLifecycleConfig(request); }
public string GetAccessKeySecret() { return this.accessKeySecret; }
public CreateVpnConnectionResult CreateVpnConnection(CreateVpnConnectionRequest request) { request = BeforeClientExecution(request); return ExecuteCreateVpnConnection(request); }
public DescribeVoicesResult DescribeVoices(DescribeVoicesRequest request){request = BeforeClientExecution(request);return ExecuteDescribeVoices(request);}
public ListMonitoringExecutionsResult ListMonitoringExecutions(ListMonitoringExecutionsRequest request) { request = BeforeClientExecution(request); return ExecuteListMonitoringExecutions(request); }
public DescribeJobRequest(string vaultName, string jobId) { setVaultName(vaultName); setJobId(jobId); }
public EscherRecord GetEscherRecord(int index) { return escherRecords[index]; }
public GetApisResult GetApis(GetApisRequest request) { request = BeforeClientExecution(request); return ExecuteGetApis(request); }
public DeleteSmsChannelResult deleteSmsChannel(DeleteSmsChannelRequest request) { request = beforeClientExecution(request); return executeDeleteSmsChannel(request); }
public TrackingRefUpdate GetTrackingRefUpdate() { return trackingRefUpdate; }
public void Print(bool b) {Print(b.ToString());}
public QueryNode getChild() { return getChildren()[0]; }
public NotIgnoredFilter(int workdirTreeIndex) { this.index = workdirTreeIndex; }
public AreaRecord(RecordInputStream @in) { field_1_formatFlags = @in.readShort(); }
public GetThumbnailRequest() : base("CloudPhoto", "2017-07-11", "GetThumbnail", "cloudphoto"){SetProtocol(ProtocolType.HTTPS);}
public DescribeTransitGatewayVpcAttachmentsResult DescribeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest request){request = BeforeClientExecution(request);return ExecuteDescribeTransitGatewayVpcAttachments(request);}
public PutVoiceConnectorStreamingConfigurationResult PutVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request) { request = BeforeClientExecution(request); return ExecutePutVoiceConnectorStreamingConfiguration(request); }
public OrdRange GetOrdRange(string dim) { return prefixToOrdRange[dim]; }
public string ToString(){string symbol = "";if (startIndex >= 0 && startIndex < GetInputStream().Size){symbol = GetInputStream().GetText(new Interval(startIndex, startIndex));symbol = Utils.EscapeWhitespace(symbol, false);}return string.Format(System.Globalization.CultureInfo.CurrentCulture, "{0}('{1}')", LexerNoViableAltException.GetType().Name, symbol);}
public E Peek() { return PeekFirstImpl(); }
public CreateWorkspacesResult CreateWorkspaces(CreateWorkspacesRequest request){request = BeforeClientExecution(request);return ExecuteCreateWorkspaces(request);}
public NumberFormatIndexRecord Clone() => Copy();
public DescribeRepositoriesResult DescribeRepositories(DescribeRepositoriesRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeRepositories(request); }
public SparseIntArray(int initialCapacity){initialCapacity = ArrayUtils.idealIntArraySize(initialCapacity);mKeys = new int[initialCapacity];mValues = new int[initialCapacity];mSize = 0;}
public HyphenatedWordsFilter Create(TokenStream input) { return new HyphenatedWordsFilter(input); }
public CreateDistributionWithTagsResult CreateDistributionWithTags(CreateDistributionWithTagsRequest request) { request = BeforeClientExecution(request); return ExecuteCreateDistributionWithTags(request); }
public RandomAccessFile(string fileName, string mode) : this(new FileInfo(fileName), mode) { }
public DeleteWorkspaceImageResult DeleteWorkspaceImage(DeleteWorkspaceImageRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteWorkspaceImage(request); }
public static string ToHex(long value){StringBuilder sb = new StringBuilder(16);WriteHex(sb, value, 16, "");return sb.ToString();}
public UpdateDistributionResult UpdateDistribution(UpdateDistributionRequest request) { request = BeforeClientExecution(request); return ExecuteUpdateDistribution(request); }
public HSSFColor getColor(short index){if (index == HSSFColorPredefined.AUTOMATIC.GetIndex()){return HSSFColorPredefined.AUTOMATIC.GetColor();}byte[] b = _palette.GetColor(index);return (b == null) ? null : new CustomColor(index, b);}
public IValue Evaluate(IValue[] operands, int srcRow, int srcCol) => throw new NotImplementedFunctionException(_functionName);
public void Serialize(BinaryWriter output) {output.Write((short)field_1_number_crn_records);output.Write((short)field_2_sheet_table_index);}
public DescribeDBEngineVersionsResult DescribeDBEngineVersions() { return DescribeDBEngineVersions(new DescribeDBEngineVersionsRequest()); }
public FormatRun(short character, short fontIndex) { this._character = character; this._fontIndex = fontIndex; }
public static byte[] ToBigEndianUtf16Bytes(char[] chars, int offset, int length){byte[] result = new byte[length * 2];int end = offset + length;int resultIndex = 0;for (int i = offset; i < end; ++i){char ch = chars[i];result[resultIndex++] = (byte)(ch >> 8);result[resultIndex++] = (byte)ch;}return result;}
public UploadArchiveResult UploadArchive(UploadArchiveRequest request) { request = BeforeClientExecution(request); return ExecuteUploadArchive(request); }
public List<Token> GetHiddenTokensToLeft(int tokenIndex) { return GetHiddenTokensToLeft(tokenIndex, -1); }
public bool Equals(object obj) {if (this == obj) return true;if (!base.Equals(obj)) return false;if (GetType() != obj.GetType()) return false;AutomatonQuery other = (AutomatonQuery)obj;if (!compiled.Equals(other.compiled)) return false;if (term == null) {if (other.term != null) return false;} else if (!term.Equals(other.term)) return false;return true;}
public SpanQuery MakeSpanClause(){SpanQuery[] spanQueries = new SpanQuery[size()];IEnumerator<SpanQuery> sqi = weightBySpanQuery.Keys.GetEnumerator();int i = 0;while (sqi.MoveNext()){SpanQuery sq = sqi.Current;float boost = weightBySpanQuery[sq];if (boost != 1f){sq = new SpanBoostQuery(sq, boost);}spanQueries[i++] = sq;}if (spanQueries.Length == 1){return spanQueries[0];}else{return new SpanOrQuery(spanQueries);}}
public StashCreateCommand StashCreate() { return new StashCreateCommand(repo); }
public FieldInfo fieldInfo(string fieldName) { return byName[fieldName]; }
public DescribeEventSourceResult DescribeEventSource(DescribeEventSourceRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeEventSource(request); }
public GetDocumentAnalysisResult GetDocumentAnalysis(GetDocumentAnalysisRequest request) { request = BeforeClientExecution(request); return ExecuteGetDocumentAnalysis(request); }
public CancelUpdateStackResult CancelUpdateStack(CancelUpdateStackRequest request){request = BeforeClientExecution(request);return ExecuteCancelUpdateStack(request);}
public ModifyLoadBalancerAttributesResult ModifyLoadBalancerAttributes(ModifyLoadBalancerAttributesRequest request){request = BeforeClientExecution(request);return ExecuteModifyLoadBalancerAttributes(request);}
public SetInstanceProtectionResult SetInstanceProtection(SetInstanceProtectionRequest request) { request = BeforeClientExecution(request); return ExecuteSetInstanceProtection(request); }
public ModifyDBProxyResult ModifyDBProxy(ModifyDBProxyRequest request) { request = BeforeClientExecution(request); return ExecuteModifyDBProxy(request); }
public void Add(char[] output, int offset, int len, int endOffset, int posLength){if (count == outputs.Length){outputs = ArrayUtil.Grow(outputs, count + 1);}if (count == endOffsets.Length){int[] next = new int[ArrayUtil.Oversize(1 + count, sizeof(int))];Array.Copy(endOffsets, 0, next, 0, count);endOffsets = next;}if (count == posLengths.Length){int[] next = new int[ArrayUtil.Oversize(1 + count, sizeof(int))];Array.Copy(posLengths, 0, next, 0, count);posLengths = next;}if (outputs[count] == null){outputs[count] = new CharsRefBuilder();}outputs[count].CopyChars(output, offset, len);endOffsets[count] = endOffset;posLengths[count] = posLength;count++;}
public FetchLibrariesRequest() : base("CloudPhoto", "2017-07-11", "FetchLibraries", "cloudphoto"){SetProtocol(ProtocolType.HTTPS);}
public bool Exists() { return fs.Exists(objects); }
public FilterOutputStream(OutputStream out) { this.out = out; }
public ScaleClusterRequest() : base("CS", "2015-12-15", "ScaleCluster", "csk"){SetUriPattern("/clusters/{ClusterId}");SetMethod(MethodType.PUT);}
public DataValidationConstraint CreateTimeConstraint(int operatorType, string formula1, string formula2) { return DVConstraint.CreateTimeConstraint(operatorType, formula1, formula2); }
public ListObjectParentPathsResult listObjectParentPaths(ListObjectParentPathsRequest request){request = beforeClientExecution(request);return executeListObjectParentPaths(request);}
public DescribeCacheSubnetGroupsResult DescribeCacheSubnetGroups(DescribeCacheSubnetGroupsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeCacheSubnetGroups(request); }
public void SetSharedFormula(bool flag) { field_5_options = sharedFormula.SetShortBoolean(field_5_options, flag); }
public bool IsReuseObjects() { return reuseObjects; }
public ErrorNode AddErrorNode(Token badToken){ErrorNodeImpl t = new ErrorNodeImpl(badToken);AddAnyChild(t);t.SetParent(this);return t;}
public LatvianStemFilterFactory(Dictionary<string, string> args) : base(args){if (!args.Any()){throw new ArgumentException("Unknown parameters: " + string.Join(", ", args));}}
public EventSubscription RemoveSourceIdentifierFromSubscription(RemoveSourceIdentifierFromSubscriptionRequest request) { request = BeforeClientExecution(request); return ExecuteRemoveSourceIdentifierFromSubscription(request); }
public static TokenFilterFactory ForName(string name, Dictionary<string, string> args) { return loader.NewInstance(name, args); }
public AddAlbumPhotosRequest() : base("CloudPhoto", "2017-07-11", "AddAlbumPhotos", "cloudphoto"){SetProtocol(ProtocolType.HTTPS);}
public GetThreatIntelSetResult GetThreatIntelSet(GetThreatIntelSetRequest request) { request = BeforeClientExecution(request); return ExecuteGetThreatIntelSet(request); }
public RevFilter Clone() { return new Binary(a.Clone(), b.Clone()); }
public bool Equals(object o) { return o is ArmenianStemmer; }
public bool HasArray() => ProtectedHasArray();
public UpdateContributorInsightsResult updateContributorInsights(UpdateContributorInsightsRequest request){request = beforeClientExecution(request);return executeUpdateContributorInsights(request);}
public void UnwriteProtectWorkbook() { records.Remove(fileShare); records.Remove(writeProtect); fileShare = null; writeProtect = null; }
public SolrSynonymParser(bool dedup, bool expand, Analyzer analyzer) : base(dedup, analyzer){this.expand = expand;}
public RequestSpotInstancesResult RequestSpotInstances(RequestSpotInstancesRequest request) { request = BeforeClientExecution(request); return ExecuteRequestSpotInstances(request); }
public byte[] GetObjectData() { return FindObjectRecord().GetObjectData(); }
public GetContactAttributesResult GetContactAttributes(GetContactAttributesRequest request) { request = BeforeClientExecution(request); return ExecuteGetContactAttributes(request); }
public string ToString() { return GetKey() + ": " + GetValue(); }
public ListTextTranslationJobsResult ListTextTranslationJobs(ListTextTranslationJobsRequest request) { request = BeforeClientExecution(request); return ExecuteListTextTranslationJobs(request); }
public GetContactMethodsResult getContactMethods(GetContactMethodsRequest request){request = beforeClientExecution(request);return executeGetContactMethods(request);}
public static short LookupIndexByName(string name){FunctionMetadata fd = GetInstance().GetFunctionByNameInternal(name);if (fd == null){fd = GetInstanceCetab().GetFunctionByNameInternal(name);if (fd == null){return -1;}}return (short)fd.GetIndex();}
public DescribeAnomalyDetectorsResult DescribeAnomalyDetectors(DescribeAnomalyDetectorsRequest request){request = BeforeClientExecution(request);return ExecuteDescribeAnomalyDetectors(request);}
public static string InsertId(string message, ObjectId changeId) { return InsertId(message, changeId, false); }
public long GetObjectSize(AnyObjectId objectId, int typeHint) throws MissingObjectException, IncorrectObjectTypeException, IOException {long sz = db.GetObjectSize(this, objectId);if (sz < 0) {if (typeHint == OBJ_ANY)throw new MissingObjectException(objectId.Copy(), JGitText.Get().UnknownObjectType2);throw new MissingObjectException(objectId.Copy(), typeHint);}return sz;}
public ImportInstallationMediaResult ImportInstallationMedia(ImportInstallationMediaRequest request) { request = BeforeClientExecution(request); return ExecuteImportInstallationMedia(request); }
public PutLifecycleEventHookExecutionStatusResult PutLifecycleEventHookExecutionStatus(PutLifecycleEventHookExecutionStatusRequest request) { request = BeforeClientExecution(request); return ExecutePutLifecycleEventHookExecutionStatus(request); }
public NumberPtg(LittleEndianInput @in) : this(@in.ReadDouble()) { }
public GetFieldLevelEncryptionConfigResult GetFieldLevelEncryptionConfig(GetFieldLevelEncryptionConfigRequest request) { request = BeforeClientExecution(request); return ExecuteGetFieldLevelEncryptionConfig(request); }
public DescribeDetectorResult DescribeDetector(DescribeDetectorRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeDetector(request); }
public ReportInstanceStatusResult ReportInstanceStatus(ReportInstanceStatusRequest request) { request = BeforeClientExecution(request); return ExecuteReportInstanceStatus(request); }
public DeleteAlarmResult DeleteAlarm(DeleteAlarmRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteAlarm(request); }
public TokenStream Create(TokenStream input) { return new PortugueseStemFilter(input); }
public FtCblsSubRecord() { reserved = new byte[ENCODED_SIZE]; }
public override bool Remove(object obj) { lock (mutex) { return c.Remove(obj); } }
public GetDedicatedIpResult getDedicatedIp(GetDedicatedIpRequest request){request = beforeClientExecution(request);return executeGetDedicatedIp(request);}
public string ToString() { return precedence + " >= _p"; }
public ListStreamProcessorsResult ListStreamProcessors(ListStreamProcessorsRequest request){request = BeforeClientExecution(request);return ExecuteListStreamProcessors(request);}
public DeleteLoadBalancerPolicyRequest(string loadBalancerName, string policyName){SetLoadBalancerName(loadBalancerName);SetPolicyName(policyName);}
public WindowProtectRecord(int options) { _options = options; }
public UnbufferedCharStream(int bufferSize) { n = 0; data = new int[bufferSize]; }
public GetOperationsResult getOperations(GetOperationsRequest request){request = beforeClientExecution(request);return executeGetOperations(request);}
public void copyRawTo(byte[] b, int o) { NB.encodeInt32(b, o, w1); NB.encodeInt32(b, o + 4, w2); NB.encodeInt32(b, o + 8, w3); NB.encodeInt32(b, o + 12, w4); NB.encodeInt32(b, o + 16, w5); }
public WindowOneRecord(RecordInputStream in) {field_1_h_hold = in.ReadShort();field_2_v_hold = in.ReadShort();field_3_width = in.ReadShort();field_4_height = in.ReadShort();field_5_options = in.ReadShort();field_6_active_sheet = in.ReadShort();field_7_first_visible_tab = in.ReadShort();field_8_num_selected_tabs = in.ReadShort();field_9_tab_width_ratio = in.ReadShort();}
public StopWorkspacesResult stopWorkspaces(StopWorkspacesRequest request) { request = beforeClientExecution(request); return executeStopWorkspaces(request); }
public void Close(){if (isOpen){isOpen = false;try{Dump();}finally{try{channel.Truncate(fileLength);}finally{try{channel.Close();}finally{fos.Close();}}}}}
public DescribeMatchmakingRuleSetsResult DescribeMatchmakingRuleSets(DescribeMatchmakingRuleSetsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeMatchmakingRuleSets(request); }
public string GetPronunciation(int wordId, char[] surface, int off, int len) { return null; }
public string GetPath() { return pathStr; }
public static double DevSq(double[] v){double r = double.NaN;if (v != null && v.Length >= 1){double m = 0;double s = 0;int n = v.Length;for (int i = 0; i < n; i++){s += v[i];}m = s / n;s = 0;for (int i = 0; i < n; i++){s += (v[i] - m) * (v[i] - m);}r = (n == 1) ? 0 : s;}return r;}
public DescribeResizeResult DescribeResize(DescribeResizeRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeResize(request); }
public bool HasPassedThroughNonGreedyDecision() { return passedThroughNonGreedyDecision; }
public int End() => End(0);
public void Traverse(CellHandler handler){int firstRow = range.GetFirstRow();int lastRow = range.GetLastRow();int firstColumn = range.GetFirstColumn();int lastColumn = range.GetLastColumn();int width = lastColumn - firstColumn + 1;SimpleCellWalkContext ctx = new SimpleCellWalkContext();Row currentRow = null;Cell currentCell = null;for (ctx.RowNumber = firstRow; ctx.RowNumber <= lastRow; ++ctx.RowNumber){currentRow = sheet.GetRow(ctx.RowNumber);if (currentRow == null){continue;}for (ctx.ColNumber = firstColumn; ctx.ColNumber <= lastColumn; ++ctx.ColNumber){currentCell = currentRow.GetCell(ctx.ColNumber);if (currentCell == null){continue;}if (IsEmpty(currentCell) && !traverseEmptyCells){continue;}long rowSize = ArithmeticUtils.MulAndCheck((long)ArithmeticUtils.SubAndCheck(ctx.RowNumber, firstRow), (long)width);ctx.OrdinalNumber = ArithmeticUtils.AddAndCheck(rowSize, (ctx.ColNumber - firstColumn + 1));handler.OnCell(currentCell, ctx);}}}
public int GetReadIndex() { return pos; }
public int CompareTo(ScoreTerm other) {if (this.boost == other.boost)return other.bytes.Get().CompareTo(this.bytes.Get());elsereturn float.Compare(this.boost, other.boost);}
public int Normalize(char[] s, int len){for (int i = 0; i < len; i++){switch (s[i]){case FARSI_YEH:case YEH_BARREE:s[i] = YEH;break;case KEHEH:s[i] = KAF;break;case HEH_YEH:case HEH_GOAL:s[i] = HEH;break;case HAMZA_ABOVE:len = Delete(s, i, len);i--;break;default:break;}}return len;}
public void Serialize(LittleEndianOutput @out) {@out.WriteShort(_options);}
public DiagnosticErrorListener(bool exactOnly) { this.exactOnly = exactOnly; }
public KeySchemaElement(string attributeName, KeyType keyType) { SetAttributeName(attributeName); SetKeyType(keyType.ToString()); }
public GetAssignmentResult GetAssignment(GetAssignmentRequest request){request = BeforeClientExecution(request);return ExecuteGetAssignment(request);}
public bool HasObject(AnyObjectId id) { return FindOffset(id) != -1; }
public GroupingSearch SetAllGroups(bool allGroups) { this.allGroups = allGroups; return this; }
public void SetMultiValued(string dimName, bool v){DimConfig ft = fieldTypes[dimName];if (ft == null){ft = new DimConfig();fieldTypes[dimName] = ft;}ft.multiValued = v;}
public int GetCellsVal(){IEnumerator<char> i = cells.Keys.GetEnumerator();int size = 0;while (i.MoveNext()){char c = i.Current;Cell e = At(c);if (e.cmd >= 0){size++;}}return size;}
public DeleteVoiceConnectorResult DeleteVoiceConnector(DeleteVoiceConnectorRequest request){request = BeforeClientExecution(request);return ExecuteDeleteVoiceConnector(request);}
public DeleteLifecyclePolicyResult DeleteLifecyclePolicy(DeleteLifecyclePolicyRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteLifecyclePolicy(request); }
public void Write(byte[] b){int len = b.Length;CheckPosition(len);Array.Copy(b, 0, _buf, _writeIndex, len);_writeIndex += len;}
public RebaseResult GetRebaseResult() { return this.rebaseResult; }
public static int getNearestSetSize(int maxNumberOfValuesExpected, float desiredSaturation){for (int i = 0; i < usableBitSetSizes.Length; i++){int numSetBitsAtDesiredSaturation = (int)(usableBitSetSizes[i] * desiredSaturation);int estimatedNumUniqueValues = getEstimatedNumberUniqueValuesAllowingForCollisions(usableBitSetSizes[i], numSetBitsAtDesiredSaturation);if (estimatedNumUniqueValues > maxNumberOfValuesExpected){return usableBitSetSizes[i];}}return -1;}
public DescribeDashboardResult DescribeDashboard(DescribeDashboardRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeDashboard(request); }
public CreateSegmentResult CreateSegment(CreateSegmentRequest request) { request = BeforeClientExecution(request); return ExecuteCreateSegment(request); }
public string ToString(){StringBuilder buffer = new StringBuilder();buffer.Append("[DBCELL]\n");buffer.Append("    .rowoffset = ").Append(HexDump.IntToHex(field_1_row_offset)).Append("\n");for (int k = 0; k < field_2_cell_offsets.Length; k++){buffer.Append("    .cell_").Append(k).Append(" = ").Append(HexDump.ShortToHex(field_2_cell_offsets[k])).Append("\n");}buffer.Append("[/DBCELL]\n");return buffer.ToString();}
public List<string> GetUndeletedList() { return undeletedList; }
public string ToString() { return "[INTERFACEEND/]\n"; }
public MergeScheduler Clone() { return this; }
public PlainTextDictionary(Reader reader) { in = new StreamReader(reader); }
public StringBuilder Append(string csq) {if (csq == null) {AppendNull();} else {Append0(csq, 0, csq.Length);}return this;}
public ListAssociatedStacksResult ListAssociatedStacks(ListAssociatedStacksRequest request){request = BeforeClientExecution(request);return ExecuteListAssociatedStacks(request);}
public static double avedev(double[] v) {double r = 0;double m = 0;double s = 0;for (int i = 0, iSize = v.Length; i < iSize; i++) {s += v[i];}m = s / v.Length;s = 0;for (int i = 0, iSize = v.Length; i < iSize; i++) {s += Math.Abs(v[i] - m);}r = s / v.Length;return r;}
public DescribeByoipCidrsResult DescribeByoipCidrs(DescribeByoipCidrsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeByoipCidrs(request); }
public GetDiskResult GetDisk(GetDiskRequest request) { request = BeforeClientExecution(request); return ExecuteGetDisk(request); }
public DBClusterParameterGroup CreateDBClusterParameterGroup(CreateDBClusterParameterGroupRequest request) { request = BeforeClientExecution(request); return ExecuteCreateDBClusterParameterGroup(request); }
public static CharBuffer Wrap(char[] array, int start, int charCount){Array.CheckOffsetAndLength(array.Length, start, charCount);CharBuffer buf = new ReadWriteCharArrayBuffer(array);buf.Position = start;buf.Limit = start + charCount;return buf;}
public SubmoduleStatusType GetType() { return type; }
public DescribeGameServerGroupResult DescribeGameServerGroup(DescribeGameServerGroupRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeGameServerGroup(request); }
public Pattern pattern() { return pattern; }
public V setValue<V>(V @object) { throw new NotSupportedException(); }
public StringBuilder Stem(CharSequence word) {CharSequence cmd = stemmer.GetLastOnPath(word);if (cmd == null)return null;buffer.Clear();buffer.Append(word);Diff.Apply(buffer, cmd);if (buffer.Length > 0)return buffer;elsereturn null;}
public RenameFaceRequest() : base("CloudPhoto", "2017-07-11", "RenameFace", "cloudphoto"){setProtocol(ProtocolType.HTTPS);}
public char RequireChar(Dictionary<string, string> args, string name) => Require(args, name)[0];
public static string ToStringTree(Tree t) => ToStringTree(t, null);
public string ToString() { return "<deleted/>"; }
public GetRepoWebhookLogListRequest() : base("cr", "2016-06-07", "GetRepoWebhookLogList", "cr"){SetUriPattern("/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]/logs");SetMethod(MethodType.GET);}
public GetJobUnlockCodeResult GetJobUnlockCode(GetJobUnlockCodeRequest request) { request = BeforeClientExecution(request); return ExecuteGetJobUnlockCode(request); }
public RemoveTagsRequest(string resourceId) { SetResourceId(resourceId); }
public short GetGB2312Id(char ch){try{byte[] buffer = Encoding.GetEncoding("GB2312").GetBytes(new string(ch, 1));if (buffer.Length != 2){return -1;}int b0 = (buffer[0] & 0x0FF) - 161;int b1 = (buffer[1] & 0x0FF) - 161;return (short)(b0 * 94 + b1);}catch (Exception e){throw new Exception(e.Message);}}
public BatchRefUpdate AddCommand(IEnumerable<ReceiveCommand> cmd) { commands.AddRange(cmd); return this; }
public short CheckExternSheet(int sheetNumber){return (short)getOrCreateLinkTable().CheckExternSheet(sheetNumber);}
public override bool Equals(object obj) { return c.Equals(obj); }
public BooleanQuery Build(QueryNode queryNode){AnyQueryNode andNode = (AnyQueryNode)queryNode;BooleanQuery.Builder bQuery = new BooleanQuery.Builder();List<QueryNode> children = andNode.Children;if (children != null){foreach (QueryNode child in children){object obj = child.GetTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);if (obj != null){Query query = (Query)obj;try{bQuery.Add(query, BooleanClause.Occur.Should);}catch (TooManyClauses ex){throw new QueryNodeException(new MessageImpl(QueryParserMessages.EMPTY_MESSAGE), ex);}}}}bQuery.MinimumNumberShouldMatch = andNode.MinimumMatchingElements;return bQuery.Build();}
public DescribeStreamProcessorResult DescribeStreamProcessor(DescribeStreamProcessorRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeStreamProcessor(request); }
public DescribeDashboardPermissionsResult DescribeDashboardPermissions(DescribeDashboardPermissionsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeDashboardPermissions(request); }
public Ref Peel(Ref ref){try{return GetRefDatabase().Peel(ref);}catch (IOException e){return ref;}}
public long RamBytesUsed() { return RamUsageEstimator.AlignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER + 2 * sizeof(int) + RamUsageEstimator.NUM_BYTES_OBJECT_REF) + RamUsageEstimator.SizeOf(blocks); }
public GetDomainSuggestionsResult GetDomainSuggestions(GetDomainSuggestionsRequest request){request = BeforeClientExecution(request);return ExecuteGetDomainSuggestions(request);}
public DescribeStackEventsResult DescribeStackEvents(DescribeStackEventsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeStackEvents(request); }
public void setRule(int idx, ConditionalFormattingRule cfRule) { setRule(idx, (HSSFConditionalFormattingRule)cfRule); }
public CreateResolverRuleResult CreateResolverRule(CreateResolverRuleRequest request) { request = BeforeClientExecution(request); return ExecuteCreateResolverRule(request); }
public SeriesIndexRecord(RecordInputStream in) { field_1_index = in.ReadShort(); }
public GetStylesRequest() : base("lubancloud", "2018-05-09", "GetStyles", "luban"){SetMethod(MethodType.POST);}
public void Serialize(LittleEndianOutput @out) {@out.WriteShort(field_1_gridset_flag);}
public bool Equals(object obj) {if (this == obj) {return true;}if (obj == null) {return false;}if (GetType() != obj.GetType()) {return false;}Toffs other = (Toffs)obj;if (GetStartOffset() != other.GetStartOffset()) {return false;}if (GetEndOffset() != other.GetEndOffset()) {return false;}return true;}
public CreateGatewayGroupResult CreateGatewayGroup(CreateGatewayGroupRequest request) { request = BeforeClientExecution(request); return ExecuteCreateGatewayGroup(request); }
public CreateParticipantConnectionResult CreateParticipantConnection(CreateParticipantConnectionRequest request) { request = BeforeClientExecution(request); return ExecuteCreateParticipantConnection(request); }
public static double Irr(double[] income) => Irr(income, 0.1);
public RegisterWorkspaceDirectoryResult registerWorkspaceDirectory(RegisterWorkspaceDirectoryRequest request) { request = beforeClientExecution(request); return executeRegisterWorkspaceDirectory(request); }
public RevertCommand Include(AnyObjectId commit) => Include(commit.Name, commit);
public ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval inumberVE){ValueEval veText1;try{veText1 = OperandResolver.GetSingleValue(inumberVE, srcRowIndex, srcColumnIndex);}catch (EvaluationException e){return e.GetErrorEval();}string iNumber = OperandResolver.CoerceValueToString(veText1);Match m = COMPLEX_NUMBER_PATTERN.Match(iNumber);bool result = m.Success;string imaginary = "";if (result){string imaginaryGroup = m.Groups[5].Value;bool hasImaginaryPart = imaginaryGroup.Equals("i") || imaginaryGroup.Equals("j");if (imaginaryGroup.Length == 0){return new StringEval("0");}if (hasImaginaryPart){string sign = "";string imaginarySign = m.Groups[GROUP3_IMAGINARY_SIGN].Value;if (imaginarySign.Length != 0 && !(imaginarySign.Equals("+"))){sign = imaginarySign;}string groupImaginaryNumber = m.Groups[GROUP4_IMAGINARY_INTEGER_OR_DOUBLE].Value;if (groupImaginaryNumber.Length != 0){imaginary = sign + groupImaginaryNumber;}else{imaginary = sign + "1";}}else{return ErrorEval.NumError;}}else{return ErrorEval.NumError;}return new StringEval(imaginary);}
public E PollLast() {var entry = backingMap.PollLastEntry();return (entry == null) ? null : entry.Key;}
public int ReadUShort() { int ch1 = ReadUByte(); int ch2 = ReadUByte(); return (ch2 << 8) + (ch1 << 0); }
public ModifySnapshotAttributeRequest(string snapshotId, SnapshotAttributeName attribute, OperationType operationType){SetSnapshotId(snapshotId);SetAttribute(attribute.ToString());SetOperationType(operationType.ToString());}
public ListBonusPaymentsResult ListBonusPayments(ListBonusPaymentsRequest request) { request = BeforeClientExecution(request); return ExecuteListBonusPayments(request); }
public V get(CharSequence cs) { if (cs == null) throw new ArgumentNullException(); return default(V); }
public TokenFilter Create(TokenStream input){CommonGramsFilter commonGrams = (CommonGramsFilter) base.Create(input);return new CommonGramsQueryFilter(commonGrams);}
public string GetPath() { return path; }
public InitiateMultipartUploadResult InitiateMultipartUpload(InitiateMultipartUploadRequest request) { request = BeforeClientExecution(request); return ExecuteInitiateMultipartUpload(request); }
public StringBuilder Insert(int offset, int i) {Insert0(offset, i.ToString()); return this;}
public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {long block = blocks[blocksOffset++];for (int shift = 62; shift >= 0; shift -= 2) {values[valuesOffset++] = (int)((block >> shift) & 3);}}}
public TokenStream Create(TokenStream input) { return new ElisionFilter(input, articles); }
public bool Eat(Row inRow, int[] remap) {int sum = 0;foreach (var c in inRow.cells.Values) {sum += c.cnt;if (c.ref >= 0) {if (remap[c.ref] == 0) {c.ref = -1;}}}int frame = sum / 10;bool live = false;foreach (var c in inRow.cells.Values) {if (c.cnt < frame && c.cmd >= 0) {c.cnt = 0;c.cmd = -1;}if (c.cmd >= 0 || c.ref >= 0) {live |= true;}}return !live;}
public Token GetToken(int index){Token t = jj_lookingAhead ? jj_scanpos : token;for (int i = 0; i < index; i++){if (t.next != null) t = t.next;else t = t.next = token_source.GetNextToken();}return t;}
public string ToString() {StringBuilder sb = new StringBuilder();sb.Append(GetType().Name).Append(" [ARRAY]\n");sb.Append(" range=").Append(GetRange()).Append("\n");sb.Append(" options=").Append(HexDump.ShortToHex(_options)).Append("\n");sb.Append(" notUsed=").Append(HexDump.IntToHex(_field3notUsed)).Append("\n");sb.Append(" formula:\n");Ptg[] ptgs = _formula.GetTokens();for (int i = 0; i < ptgs.Length; i++) {Ptg ptg = ptgs[i];sb.Append(ptg).Append(ptg.GetRVAType()).Append("\n");}sb.Append("]");return sb.ToString();}
public GetFolderResult GetFolder(GetFolderRequest request) { request = BeforeClientExecution(request); return ExecuteGetFolder(request); }
public override void Add(int location, E @object){throw new System.NotImplementedException();}
public PositiveScoresOnlyCollector(Collector in) : base(in) {}
public CreateRepoBuildRuleRequest() : base("cr", "2016-06-07", "CreateRepoBuildRule", "cr"){SetUriPattern("/repos/{RepoNamespace}/{RepoName}/rules");SetMethod(MethodType.PUT);}
public BaseRef(AreaEval ae){_refEval = null;_areaEval = ae;_firstRowIndex = ae.GetFirstRow();_firstColumnIndex = ae.GetFirstColumn();_height = ae.GetLastRow() - ae.GetFirstRow() + 1;_width = ae.GetLastColumn() - ae.GetFirstColumn() + 1;}
public DrawingManager2(EscherDggRecord dgg) { this.dgg = dgg; }
public void reset() { if (!first()) reset(raw); }
public sealed CharsetDecoder Reset() { status = INIT; implReset(); return this; }
public BufferedReader(Reader in, int size) : base(in){if (size <= 0){throw new ArgumentException("size <= 0");}this.in = in;buf = new char[size];}
public DescribeCodeRepositoryResult DescribeCodeRepository(DescribeCodeRepositoryRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeCodeRepository(request); }
public DBSubnetGroup CreateDBSubnetGroup(CreateDBSubnetGroupRequest request) { request = BeforeClientExecution(request); return ExecuteCreateDBSubnetGroup(request); }
public RenameBranchCommand SetOldName(string oldName) { checkCallable(); this.oldName = oldName; return this; }
public DeleteBranchCommand SetForce(bool force) { CheckCallable(); this.force = force; return this; }
public StopCompilationJobResult stopCompilationJob(StopCompilationJobRequest request){request = beforeClientExecution(request);return executeStopCompilationJob(request);}
public void IncrementSecondaryProgressBy(int diff) { SetSecondaryProgress(mSecondaryProgress + diff); }
public byte[] Clear() => bytesStart = null;
public string GetRawPath() { return path; }
public GetUserSourceAccountRequest() : base("cr", "2016-06-07", "GetUserSourceAccount", "cr"){SetUriPattern("/users/sourceAccount");SetMethod(MethodType.GET);}
public CreateExportJobResult CreateExportJob(CreateExportJobRequest request) { request = BeforeClientExecution(request); return ExecuteCreateExportJob(request); }
public CreateDedicatedIpPoolResult CreateDedicatedIpPool(CreateDedicatedIpPoolRequest request){request = BeforeClientExecution(request);return ExecuteCreateDedicatedIpPool(request);}
public bool Equals(object obj) {if (this == obj) {return true;}if (obj == null) {return false;}if (obj is HSSFCellStyle other) {if (_format == null) {if (other._format != null) {return false;}} else if (!_format.Equals(other._format)) {return false;}if (_index != other._index) {return false;}return true;}return false;}
public ReleaseHostsResult ReleaseHosts(ReleaseHostsRequest request) { request = BeforeClientExecution(request); return ExecuteReleaseHosts(request); }
public bool Equals(object obj) {if (this == obj) {return true;}if (obj is Set) {Set s = (Set)obj;try {return Size() == s.Size() && ContainsAll(s);} catch (NullReferenceException ignored) {return false;} catch (InvalidCastException ignored) {return false;}}return false;}
public void SetRefLogMessage(string msg, bool appendStatus){customRefLog = true;if (msg == null && !appendStatus){DisableRefLog();}else if (msg == null && appendStatus){refLogMessage = "";refLogIncludeResult = true;}else{refLogMessage = msg;refLogIncludeResult = appendStatus;}}
public StreamIDRecord(RecordInputStream in) { idstm = in.ReadShort(); }
public RecognizeCarRequest() : base("visionai-poc", "2020-04-08", "RecognizeCar"){SetMethod(MethodType.POST);}
public static ByteOrder Order() { return BitConverter.IsLittleEndian ? ByteOrder.LittleEndian : ByteOrder.BigEndian; }
public int GetAheadCount() { return aheadCount; }
public bool IsNewFragment() { return false; }
public GetCloudFrontOriginAccessIdentityConfigResult GetCloudFrontOriginAccessIdentityConfig(GetCloudFrontOriginAccessIdentityConfigRequest request) { request = BeforeClientExecution(request); return ExecuteGetCloudFrontOriginAccessIdentityConfig(request); }
public bool Matches(int symbol, int minVocabSymbol, int maxVocabSymbol) { return label == symbol; }
public DeleteTransitGatewayResult DeleteTransitGateway(DeleteTransitGatewayRequest request){request = BeforeClientExecution(request);return ExecuteDeleteTransitGateway(request);}
public static byte[] Grow(byte[] array, int minSize){Debug.Assert(minSize >= 0, "size must be positive (got " + minSize + "): likely integer overflow?");if (array.Length < minSize){return GrowExact(array, Oversize(minSize, sizeof(byte)));}else{return array;}}private static int Oversize(int size, int elementSize){// Assuming a simple implementation of Oversize for demonstration purposesreturn size * elementSize;}private static byte[] GrowExact(byte[] array, int newSize){// Assuming a simple implementation of GrowExact for demonstration purposesbyte[] newArray = new byte[newSize];Buffer.BlockCopy(array, 0, newArray, 0, Math.Min(array.Length, newSize));return newArray;}
public class CreateTransactionRequest : BaseRequest {public CreateTransactionRequest() {super("CloudPhoto", "2017-07-11", "CreateTransaction", "cloudphoto");setProtocol(ProtocolType.HTTPS);}}
public BatchRefUpdate SetRefLogIdent(PersonIdent pi) { refLogIdent = pi; return this; }
public GetLaunchTemplateDataResult GetLaunchTemplateData(GetLaunchTemplateDataRequest request) { request = BeforeClientExecution(request); return ExecuteGetLaunchTemplateData(request); }
public ParseInfo(ProfilingATNSimulator atnSimulator) { this.atnSimulator = atnSimulator; }
public SimpleQQParser(string[] qqNames, string indexField) { this.qqNames = qqNames; this.indexField = indexField; }
public DBCluster PromoteReadReplicaDBCluster(PromoteReadReplicaDBClusterRequest request) { request = BeforeClientExecution(request); return ExecutePromoteReadReplicaDBCluster(request); }
public DescribeCapacityReservationsResult DescribeCapacityReservations(DescribeCapacityReservationsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeCapacityReservations(request); }
public string ToString() => $"IndexSearcher({reader}; executor={executor}; sliceExecutionControlPlane {sliceExecutor})";
public bool IncrementToken() { return false; }
public void Serialize(BinaryWriter writer) {writer.Write((short)(main + 1));writer.Write((short)subFrom);writer.Write((short)subTo);}
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations){if (bitsPerValue > 32){throw new NotSupportedException("Cannot decode " + bitsPerValue + "-bits values into an int[]");}for (int i = 0; i < iterations; ++i){long block = readLong(blocks, blocksOffset);blocksOffset += 8;valuesOffset = decode(block, values, valuesOffset);}}
public bool IsExpectedToken(int symbol){ATN atn = GetInterpreter().Atn;ParserRuleContext ctx = _ctx;ATNState s = atn.States[GetState()];IntervalSet following = atn.NextTokens(s);if (following.Contains(symbol)){return true;}if (!following.Contains(Token.Epsilon)){return false;}while (ctx != null && ctx.InvokingState >= 0 && following.Contains(Token.Epsilon)){ATNState invokingState = atn.States[ctx.InvokingState];RuleTransition rt = (RuleTransition)invokingState.Transition(0);following = atn.NextTokens(rt.FollowState);if (following.Contains(symbol)){return true;}ctx = (ParserRuleContext)ctx.Parent;}if (following.Contains(Token.Epsilon) && symbol == Token.Eof){return true;}return false;}
public UpdateStreamResult updateStream(UpdateStreamRequest request) { request = beforeClientExecution(request); return executeUpdateStream(request); }
public ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0){try{OperandResolver.GetSingleValue(arg0, srcRowIndex, srcColumnIndex);return ErrorEval.NA;}catch (EvaluationException e){int result = TranslateErrorCodeToErrorTypeValue(e.ErrorEval.ErrorCode);return new NumberEval(result);}}
public string ToString() { return GetType().Name + " [" + _index + " " + _name + "]"; }
public ListAssignmentsForHITResult ListAssignmentsForHIT(ListAssignmentsForHITRequest request) { request = BeforeClientExecution(request); return ExecuteListAssignmentsForHIT(request); }
public DeleteAccessControlRuleResult DeleteAccessControlRule(DeleteAccessControlRuleRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteAccessControlRule(request); }
public Arc<long> GetFirstArc(Arc<long> arc) { return fst.GetFirstArc(arc); }
public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations){for (int i = 0; i < iterations; ++i){long block = blocks[blocksOffset++];for (int shift = 48; shift >= 0; shift -= 16){values[valuesOffset++] = (int)((block >> shift) & 65535);}}}
public class MyClass {private readonly object lockObject = new object();private byte[] buf;private int pos;private Stream in;public long Skip(long charCount) {if (charCount < 0) {throw new ArgumentException("charCount < 0: " + charCount);}lock (lockObject) {CheckNotClosed();if (charCount == 0) {return 0;}long inSkipped;int availableFromBuffer = buf.Length - pos;if (availableFromBuffer > 0) {long requiredFromIn = charCount - availableFromBuffer;if (requiredFromIn <= 0) {pos += (int)charCount;return charCount;}pos += availableFromBuffer;inSkipped = in.Skip(requiredFromIn);} else {inSkipped = in.Skip(charCount);}return inSkipped + availableFromBuffer;}}private void CheckNotClosed() {// Implementation of CheckNotClosed method}}
public Dictionary<string, Ref> GetRefsMap() { return advertisedRefs; }
public UpdateApiKeyResult UpdateApiKey(UpdateApiKeyRequest request) { request = BeforeClientExecution(request); return ExecuteUpdateApiKey(request); }
public ObjectStream OpenStream(){PackInputStream packIn;DfsReader ctx = db.NewReader();try{try{packIn = new PackInputStream(pack, objectOffset + headerLength, ctx);ctx = null;}catch (IOException packGone){ObjectId obj = pack.GetReverseIdx(ctx).FindObject(objectOffset);return ctx.Open(obj, type).OpenStream();}}finally{if (ctx != null){ctx.Close();}}int bufsz = 8192;InputStream inStream = new BufferedInputStream(new InflaterInputStream(packIn, packIn.Ctx.Inflater(), bufsz), bufsz);return new ObjectStream.Filter(type, size, inStream);}
public ArrayList() { array = EmptyArray.OBJECT; }
public UpdateDetectorVersionResult updateDetectorVersion(UpdateDetectorVersionRequest request){request = beforeClientExecution(request);return executeUpdateDetectorVersion(request);}
public void resize() { resize(double.MaxValue); }
public RevFlagSet(IEnumerable<RevFlag> s) : this() { AddRange(s); }
public int size() { return size; }
public long GetLong(){int newPosition = position + SizeOf.LONG;if (newPosition > limit){throw new BufferUnderflowException();}long result = Memory.PEEK_LONG(backingArray, offset + position, order);position = newPosition;return result;}
public StringBuilder Insert(int offset, long l) { Insert0(offset, Long.ToString(l)); return this; }
public TurkishLowerCaseFilter(TokenStream input) : base(input){}
public class ParseTreeMatch {public ParseTreeMatch(ParseTree tree, ParseTreePattern pattern, MultiMap<string, ParseTree> labels, ParseTree mismatchedNode) {// Constructor implementation}}public class MultiMap<TKey, TValue> : Dictionary<TKey, List<TValue>> {public void Add(TKey key, TValue value) {if (!ContainsKey(key)) {this[key] = new List<TValue>();}this[key].Add(value);}}public class ParseTree {// Class implementation}public class ParseTreePattern {private ParseTree _patternTree;public ParseTree getPatternTree() {return _patternTree;}public ParseTreePattern(ParseTree patternTree) {_patternTree = patternTree;}}public class Parser {public ParseTreeMatch match(ParseTree tree, ParseTreePattern pattern) {MultiMap<string, ParseTree> labels = new MultiMap<string, ParseTree>();ParseTree mismatchedNode = matchImpl(tree, pattern.getPatternTree(), labels);return new ParseTreeMatch(tree, pattern, labels, mismatchedNode);}private ParseTree matchImpl(ParseTree tree, ParseTree patternTree, MultiMap<string, ParseTree> labels) {// Implementation of matchImplreturn null;}}
public void AddIfNoOverlap(WeightedPhraseInfo wpi){foreach (WeightedPhraseInfo existWpi in GetPhraseList()){if (existWpi.IsOffsetOverlap(wpi)){existWpi.GetTermsInfos().AddRange(wpi.GetTermsInfos());return;}}GetPhraseList().Add(wpi);}
public ThreeWayMerger newMerger(Repository db) { return new InCoreMerger(db); }
public float DocScore(int docId, string field, int numPayloadsSeen, float payloadScore) => numPayloadsSeen > 0 ? (payloadScore / numPayloadsSeen) : 1;
public IEnumerable<ParseTree> evaluate(ParseTree t) { return Trees.FindAllRuleNodes(t, ruleIndex); }
public string ToString(){StringBuilder buffer = new StringBuilder();buffer.Append("[CFRULE]\n");buffer.Append("    .condition_type   =" + GetConditionType() + "\n");buffer.Append("    OPTION FLAGS=0x" + Integer.ToHexString(GetOptions()) + "\n");if (ContainsFontFormattingBlock()){buffer.Append(_fontFormatting + "\n");}if (ContainsBorderFormattingBlock()){buffer.Append(_borderFormatting + "\n");}if (ContainsPatternFormattingBlock()){buffer.Append(_patternFormatting + "\n");}buffer.Append("    Formula 1 =" + Arrays.ToString(GetFormula1().GetTokens()) + "\n");buffer.Append("    Formula 2 =" + Arrays.ToString(GetFormula2().GetTokens()) + "\n");buffer.Append("[/CFRULE]\n");return buffer.ToString();}
public DescribeServiceUpdatesResult DescribeServiceUpdates(DescribeServiceUpdatesRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeServiceUpdates(request); }
public string GetNameName(int index) { return GetNameAt(index).GetNameName(); }
public DescribeLocationsResult DescribeLocations() { return DescribeLocations(new DescribeLocationsRequest()); }
public string ToString() { return $"<phraseslop value='{GetValueString()}'>\n{GetChild().ToString()}\n</phraseslop>"; }
public DirCacheEntry GetDirCacheEntry() { return currentSubtree == null ? currentEntry : null; }
public class IntBuffer : IDisposable{private int[] buffer;private int position;private int limit;public IntBuffer(int capacity){buffer = new int[capacity];position = 0;limit = capacity;}public void Put(int value){if (position >= limit){throw new InvalidOperationException("Buffer overflow");}buffer[position++] = value;}public IntBuffer Put(int[] src, int srcOffset, int intCount){if ((srcOffset | intCount | (srcOffset + intCount)) < 0 || src.Length - srcOffset < intCount){throw new ArgumentException("Invalid arguments");}if (intCount > Remaining()){throw new InvalidOperationException("Buffer overflow");}for (int i = srcOffset; i < srcOffset + intCount; ++i){Put(src[i]);}return this;}public int Remaining(){return limit - position;}public void Dispose(){// Implement dispose logic if needed}}
public void TrimToSize(){int s = size;if (s == array.Length){return;}if (s == 0){array = Array.Empty<object>();}else{object[] newArray = new object[s];Array.Copy(array, 0, newArray, 0, s);array = newArray;}modCount++;}
public DescribeLocalGatewayVirtualInterfacesResult DescribeLocalGatewayVirtualInterfaces(DescribeLocalGatewayVirtualInterfacesRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeLocalGatewayVirtualInterfaces(request); }
public TokenStream Create(TokenStream input) { return new RussianLightStemFilter(input); }
public int[] ToArray(int[] a){int[] rval;if (a.Length == _limit){Array.Copy(_array, 0, a, 0, _limit);rval = a;}else{rval = ToArray();}return rval;}
public BasicSessionCredentials(string accessKeyId, string accessKeySecret, string sessionToken, long roleSessionDurationSeconds){if (accessKeyId == null){throw new ArgumentException("Access key ID cannot be null.");}if (accessKeySecret == null){throw new ArgumentException("Access key secret cannot be null.");}this.accessKeyId = accessKeyId;this.accessKeySecret = accessKeySecret;this.sessionToken = sessionToken;this.roleSessionDurationSeconds = roleSessionDurationSeconds;this.sessionStartedTimeInMilliSeconds = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();}
public readonly Span<short> Get(Span<short> dst, int dstOffset, int shortCount){if (shortCount > Remaining()){throw new InvalidOperationException();}System.Buffer.BlockCopy(backingArray, (offset + position) * sizeof(short), dst, dstOffset * sizeof(short), shortCount * sizeof(short));position += shortCount;return this;}
public ActivateEventSourceResult ActivateEventSource(ActivateEventSourceRequest request){request = BeforeClientExecution(request);return ExecuteActivateEventSource(request);}
public DescribeReceiptRuleSetResult DescribeReceiptRuleSet(DescribeReceiptRuleSetRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeReceiptRuleSet(request); }
public Filter(string name) { setName(name); }
public DoubleBuffer Put(double c) { throw new ReadOnlyBufferException(); }
public CreateTrafficPolicyInstanceResult CreateTrafficPolicyInstance(CreateTrafficPolicyInstanceRequest request) { request = BeforeClientExecution(request); return ExecuteCreateTrafficPolicyInstance(request); }
public JapaneseIterationMarkCharFilter(Reader input, bool normalizeKanji, bool normalizeKana) : base(input){this.normalizeKanji = normalizeKanji;this.normalizeKana = normalizeKana;buffer.Reset(input);}
public void WriteLong(long v) {WriteInt((int)(v >> 0));WriteInt((int)(v >> 32));}
public class FileResolver {public Dictionary<string, object> exports;public List<object> exportBase;public FileResolver() {exports = new ConcurrentDictionary<string, object>();exportBase = new List<object>();}}
public IValueEval GetRef3DEval(Ref3DPxg rptg){SheetRangeEvaluator sre = CreateExternSheetRefEvaluator(rptg.GetSheetName(), rptg.GetLastSheetName(), rptg.GetExternalWorkbookNumber());return new LazyRefEval(rptg.Row, rptg.Column, sre);}
public DeleteDatasetResult DeleteDataset(DeleteDatasetRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteDataset(request); }
public StartRelationalDatabaseResult StartRelationalDatabase(StartRelationalDatabaseRequest request){request = BeforeClientExecution(request);return ExecuteStartRelationalDatabase(request);}
public DescribeReservedCacheNodesOfferingsResponse DescribeReservedCacheNodesOfferings() {return DescribeReservedCacheNodesOfferings(new DescribeReservedCacheNodesOfferingsRequest());}
public double pmt(double r, int nper, double pv, double fv, int type) { return -r * (pv * Math.Pow(1 + r, nper) + fv) / ((1 + r * type) * (Math.Pow(1 + r, nper) - 1)); }
public DescribeDocumentVersionsResult DescribeDocumentVersions(DescribeDocumentVersionsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeDocumentVersions(request); }
public ListPublishingDestinationsResult ListPublishingDestinations(ListPublishingDestinationsRequest request) { request = BeforeClientExecution(request); return ExecuteListPublishingDestinations(request); }
public DeleteAccountAliasRequest(string accountAlias) { SetAccountAlias(accountAlias); }
public static long[] Grow(long[] array) => Grow(array, 1 + array.Length);
public string outputToString(object output){if (!(output is List<object>)){return outputs.outputToString((object)output);}else{List<object> outputList = (List<object>)output;StringBuilder b = new StringBuilder();b.Append('[');for (int i = 0; i < outputList.Count; i++){if (i > 0){b.Append(", ");}b.Append(outputs.outputToString(outputList[i]));}b.Append(']');return b.ToString();}}
public void notifyDeleteCell(Cell cell) { _bookEvaluator.notifyDeleteCell(new HSSFEvaluationCell((HSSFCell)cell)); }
public StringBuilder Replace(int start, int end, string str) {Replace0(start, end, str); return this;}
public SetIdentityPoolConfigurationResponse SetIdentityPoolConfiguration(SetIdentityPoolConfigurationRequest request){request = BeforeClientExecution(request);return ExecuteSetIdentityPoolConfiguration(request);}
public class Program {public static double KthSmallest(double[] v, int k) {double r = double.NaN;int index = k - 1;if (v != null && v.Length > index && index >= 0) {Array.Sort(v);r = v[index];}return r;}}
public void Set(int index, long value) {int o = index >> 5;int b = index & 31;int shift = b << 1;blocks[o] = (blocks[o] & ~(3L << shift)) | (value << shift);}
public string ToString() {if (GetChildren() == null || GetChildren().Count == 0)return "<boolean operation='and'/>";StringBuilder sb = new StringBuilder();sb.Append("<boolean operation='and'>");foreach (QueryNode child in GetChildren()) {sb.Append("\n");sb.Append(child.ToString());}sb.Append("\n</boolean>");return sb.ToString();}
public int SumTokenSizes(int fromIx, int toIx){int result = 0;for (int i = fromIx; i < toIx; i++){result += _ptgs[i].GetSize();}return result;}
public void SetReadonly(bool readonly){if (this.readonly && !readonly)throw new InvalidOperationException("can't alter readonly IntervalSet");this.readonly = readonly;}
public void ClearConsumingCell(FormulaCellCacheEntry cce) {if (!_consumingCells.Remove(cce)) {throw new InvalidOperationException("Specified formula cell is not consumed by this cell");}}
public override List<E> SubList(int start, int end){lock (mutex){return new SynchronizedRandomAccessList<E>(list.SubList(start, end), mutex);}}
public FileHeader GetFileHeader() { return file; }
public AttachLoadBalancersResult AttachLoadBalancers(AttachLoadBalancersRequest request){request = BeforeClientExecution(request);return ExecuteAttachLoadBalancers(request);}
public InitiateJobRequest(string accountId, string vaultName, JobParameters jobParameters){SetAccountId(accountId);SetVaultName(vaultName);SetJobParameters(jobParameters);}
public string ToString() { return "SPL"; }
public ReplaceableAttribute(string name, string value, bool replace) {SetName(name);SetValue(value);SetReplace(replace);}
public final void Add(IndexableField field) { fields.Add(field); }
public DeleteStackSetResult DeleteStackSet(DeleteStackSetRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteStackSet(request); }
public GetRepoBuildRuleListRequest() : base("cr", "2016-06-07", "GetRepoBuildRuleList", "cr"){SetUriPattern("/repos/{RepoNamespace}/{RepoName}/rules");SetMethod(MethodType.GET);}
public SparseArray(int initialCapacity) { initialCapacity = ArrayUtils.idealIntArraySize(initialCapacity); mKeys = new int[initialCapacity]; mValues = new object[initialCapacity]; mSize = 0; }
public InvokeServiceRequest() : base("industry-brain", "2018-07-12", "InvokeService"){SetMethod(MethodType.POST);}
public ListAlbumPhotosRequest() : base("CloudPhoto", "2017-07-11", "ListAlbumPhotos", "cloudphoto"){SetProtocol(ProtocolType.HTTPS);}
public bool HasPrevious() { return link != list.VoidLink; }
public DeleteHsmConfigurationResult DeleteHsmConfiguration(DeleteHsmConfigurationRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteHsmConfiguration(request); }
public CreateLoadBalancerRequest(string loadBalancerName) { setLoadBalancerName(loadBalancerName); }
public string GetUserInfo() { return Decode(userInfo); }
public TagAttendeeResult TagAttendee(TagAttendeeRequest request) { request = BeforeClientExecution(request); return ExecuteTagAttendee(request); }
public string GetRefName() { return name; }
public SpanNearQuery Build() => new SpanNearQuery(clauses.ToArray(), slop, ordered);
public bool IsSubTotal(int rowIndex, int columnIndex) { return false; }
public DescribeDBProxiesResult DescribeDBProxies(DescribeDBProxiesRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeDBProxies(request); }
public GetVoiceConnectorProxyResult GetVoiceConnectorProxy(GetVoiceConnectorProxyRequest request) { request = BeforeClientExecution(request); return ExecuteGetVoiceConnectorProxy(request); }
public WindowCacheConfig FromConfig(Config rc){SetPackedGitUseStrongRefs(rc.GetBoolean(CONFIG_CORE_SECTION, CONFIG_KEY_PACKED_GIT_USE_STRONGREFS, isPackedGitUseStrongRefs()));SetPackedGitOpenFiles(rc.GetInt(CONFIG_CORE_SECTION, null, CONFIG_KEY_PACKED_GIT_OPENFILES, GetPackedGitOpenFiles()));SetPackedGitLimit(rc.GetLong(CONFIG_CORE_SECTION, null, CONFIG_KEY_PACKED_GIT_LIMIT, GetPackedGitLimit()));SetPackedGitWindowSize(rc.GetInt(CONFIG_CORE_SECTION, null, CONFIG_KEY_PACKED_GIT_WINDOWSIZE, GetPackedGitWindowSize()));SetPackedGitMMAP(rc.GetBoolean(CONFIG_CORE_SECTION, null, CONFIG_KEY_PACKED_GIT_MMAP, isPackedGitMMAP()));SetDeltaBaseCacheLimit(rc.GetInt(CONFIG_CORE_SECTION, null, CONFIG_KEY_DELTA_BASE_CACHE_LIMIT, GetDeltaBaseCacheLimit()));long maxMem = GC.GetTotalMemory(false);long sft = rc.GetLong(CONFIG_CORE_SECTION, null, CONFIG_KEY_STREAM_FILE_TRESHOLD, GetStreamFileThreshold());sft = Math.Min(sft, maxMem / 4);sft = Math.Min(sft, int.MaxValue);SetStreamFileThreshold((int)sft);return this;}
public static DateTime GetJavaDate(double date) { return GetJavaDate(date, false, null, false); }
public StartPersonTrackingResult StartPersonTracking(StartPersonTrackingRequest request) { request = BeforeClientExecution(request); return ExecuteStartPersonTracking(request); }
public override int Size { get { return totalSize; } }
public GetRouteResult GetRoute(GetRouteRequest request) { request = BeforeClientExecution(request); return ExecuteGetRoute(request); }
public DeleteClusterResult DeleteCluster(DeleteClusterRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteCluster(request); }
public string ToString(){StringBuilder buffer = new StringBuilder();buffer.Append("[MMS]\n");buffer.Append("    .addMenu        = ").Append(Convert.ToString(GetAddMenuCount(), 16)).Append("\n");buffer.Append("    .delMenu        = ").Append(Convert.ToString(GetDelMenuCount(), 16)).Append("\n");buffer.Append("[/MMS]\n");return buffer.ToString();}
public FileBasedConfig(Config baseConfig, File cfgLocation, FS fs) : base(baseConfig){configFile = cfgLocation;this.fs = fs;this.snapshot = FileSnapshot.DIRTY;this.hash = ObjectId.zeroId();}
public int Following(int pos){if (pos < text.BeginIndex || pos > text.EndIndex){throw new ArgumentException("offset out of bounds");}else if (0 == sentenceStarts.Length){text.Index = text.BeginIndex;return DONE;}else if (pos >= sentenceStarts[sentenceStarts.Length - 1]){text.Index = text.EndIndex;currentSentence = sentenceStarts.Length - 1;return DONE;}else{currentSentence = (sentenceStarts.Length - 1) / 2;MoveToSentenceAt(pos, 0, sentenceStarts.Length - 2);text.Index = sentenceStarts[++currentSentence];return Current();}}
public UpdateParameterGroupResult UpdateParameterGroup(UpdateParameterGroupRequest request){request = BeforeClientExecution(request);return ExecuteUpdateParameterGroup(request);}
public SeriesChartGroupIndexRecord clone() { return copy(); }
public static double CalcDistanceFromErrPct(Shape shape, double distErrPct, SpatialContext ctx){if (distErrPct < 0 || distErrPct > 0.5){throw new ArgumentException($"distErrPct {distErrPct} must be between [0 to 0.5]");}if (distErrPct == 0 || shape is Point){return 0;}Rectangle bbox = shape.GetBoundingBox();Point ctr = bbox.GetCenter();double y = (ctr.Y >= 0 ? bbox.MaxY : bbox.MinY);double diagonalDist = ctx.GetDistCalc().Distance(ctr, bbox.MaxX, y);return diagonalDist * distErrPct;}
public int CodePointAt(int index) {if (index < 0 || index >= count) {throw IndexAndLength(index);}return char.GetNumericValue(value[index]);}
public void SetPasswordVerifier(int passwordVerifier) { this.passwordVerifier = passwordVerifier; }
public ListVaultsRequest(string accountId) { setAccountId(accountId); }
public SquashMessageFormatter() { dateFormatter = new GitDateFormatter(Format.DEFAULT); }
public GetVideoCoverRequest() : base("CloudPhoto", "2017-07-11", "GetVideoCover", "cloudphoto"){SetProtocol(ProtocolType.HTTPS);}
public int LastIndexOf(object obj){int pos = size;Link<E> link = voidLink.Previous;if (obj != null){while (link != voidLink){pos--;if (obj.Equals(link.Data)){return pos;}link = link.Previous;}}else{while (link != voidLink){pos--;if (link.Data == null){return pos;}link = link.Previous;}}return -1;}
public DescribeSpotFleetRequestsResult DescribeSpotFleetRequests(DescribeSpotFleetRequestsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeSpotFleetRequests(request); }
public IndexFacesResult IndexFaces(IndexFacesRequest request) { request = BeforeClientExecution(request); return ExecuteIndexFaces(request); }
public RuleBasedBreakIterator GetBreakIterator(int script){switch (script){case UScript.JAPANESE:return (RuleBasedBreakIterator)cjkBreakIterator.Clone();case UScript.MYANMAR:if (myanmarAsWords){return (RuleBasedBreakIterator)defaultBreakIterator.Clone();}else{return (RuleBasedBreakIterator)myanmarSyllableIterator.Clone();}default:return (RuleBasedBreakIterator)defaultBreakIterator.Clone();}}
public string ToString(){StringBuilder b = new StringBuilder();b.Append("[DCONREF]\n");b.Append("    .ref\n");b.Append("        .firstrow   = ").Append(firstRow).Append("\n");b.Append("        .lastrow    = ").Append(lastRow).Append("\n");b.Append("        .firstcol   = ").Append(firstCol).Append("\n");b.Append("        .lastcol    = ").Append(lastCol).Append("\n");b.Append("    .cch            = ").Append(charCount).Append("\n");b.Append("    .stFile\n");b.Append("        .h          = ").Append(charType).Append("\n");b.Append("        .rgb        = ").Append(GetReadablePath()).Append("\n");b.Append("[/DCONREF]\n");return b.ToString();}
public int GetPackedGitOpenFiles() { return packedGitOpenFiles; }
public string ToString() {StringBuilder buffer = new StringBuilder();buffer.Append("[FEATURE HEADER]\n");buffer.Append("[/FEATURE HEADER]\n");return buffer.ToString();}
public static byte[] GetToUnicodeLE(string str) { return Encoding.Unicode.GetBytes(str); }
public static List<string> GetFooterLines(string keyName) { return GetFooterLines(new FooterKey(keyName)); }
public void Refresh() { base.Refresh(); ClearReferences(); }
public float Get(int index) { CheckIndex(index); return byteBuffer.GetFloat(index * sizeof(float)); }
public DeleteDetectorResult DeleteDetector(DeleteDetectorRequest request){request = BeforeClientExecution(request);return ExecuteDeleteDetector(request);}
public int[] Grow() { Debug.Assert(bytesStart != null); return bytesStart = ArrayUtil.Grow(bytesStart, bytesStart.Length + 1); }
public ListExclusionsResult ListExclusions(ListExclusionsRequest request) { request = BeforeClientExecution(request); return ExecuteListExclusions(request); }
public static SpatialStrategy GetSpatialStrategy(int roundNumber){SpatialStrategy result = spatialStrategyCache.Get(roundNumber);if (result == null){throw new InvalidOperationException("Strategy should have been init'ed by SpatialDocMaker by now");}return result;}
public DBCluster RestoreDBClusterToPointInTime(RestoreDBClusterToPointInTimeRequest request) { request = BeforeClientExecution(request); return ExecuteRestoreDBClusterToPointInTime(request); }
public void Serialize(LittleEndianOutput @out){@out.WriteShort(field_1_categoryDataType);@out.WriteShort(field_2_valuesDataType);@out.WriteShort(field_3_numCategories);@out.WriteShort(field_4_numValues);@out.WriteShort(field_5_bubbleSeriesType);@out.WriteShort(field_6_numBubbleValues);}
public PostAgentProfileResult postAgentProfile(PostAgentProfileRequest request) { request = beforeClientExecution(request); return executePostAgentProfile(request); }
public ParseTreePattern CompileParseTreePattern(string pattern, int patternRuleIndex) {if (GetTokenStream() != null) {TokenSource tokenSource = GetTokenStream().GetTokenSource();if (tokenSource is Lexer) {Lexer lexer = (Lexer)tokenSource;return CompileParseTreePattern(pattern, patternRuleIndex, lexer);}}throw new NotSupportedException("Parser can't discover a lexer to use");}
public BacktrackDBClusterResult BacktrackDBCluster(BacktrackDBClusterRequest request) { request = BeforeClientExecution(request); return ExecuteBacktrackDBCluster(request); }
public string getName() { return strategyName; }
public void copyTo(byte[] b, int o) { formatHexByte(b, o + 0, w1); formatHexByte(b, o + 8, w2); formatHexByte(b, o + 16, w3); formatHexByte(b, o + 24, w4); formatHexByte(b, o + 32, w5); }
public static class Program{public static List<int> LineMap(byte[] buf, int ptr, int end){List<int> map = new List<int>((end - ptr) / 36);map.AddRange(Enumerable.Repeat(int.MinValue, (end - ptr) / 36 + 1));for (; ptr < end; ptr = NextLF(buf, ptr)){map.Add(ptr);}map.Add(end);return map;}private static int NextLF(byte[] buf, int ptr){// Assuming NextLF is a method that returns the next line feed position// Replace this with the actual implementation of NextLFthrow new NotImplementedException();}}
public HashSet<object> GetAdditionalHaves() { return new HashSet<object>(); }
public long RamBytesUsed() {long sizeInBytes = BASE_RAM_BYTES_USED + fields.Count * 2 * RamUsageEstimator.NUM_BYTES_OBJECT_REF;foreach (SimpleTextTerms simpleTextTerms in termsCache.Values) {sizeInBytes += (simpleTextTerms != null) ? simpleTextTerms.RamBytesUsed() : 0;}return sizeInBytes;}
public string ToXml(string tab){StringBuilder builder = new StringBuilder();builder.Append(tab).Append("<").Append(GetRecordName()).Append(">\n");foreach (EscherRecord escherRecord in GetEscherRecords()){builder.Append(escherRecord.ToXml(tab + "\t"));}builder.Append(tab).Append("</").Append(GetRecordName()).Append(">\n");return builder.ToString();}
public TokenStream Create(TokenStream input) { return new GalicianMinimalStemFilter(input); }
public string ToString() {StringBuilder r = new StringBuilder();r.Append("Commit");r.Append("={\n");r.Append("tree ");r.Append(treeId != null ? treeId.Name : "NOT_SET");r.Append("\n");foreach (ObjectId p in parentIds) {r.Append("parent ");r.Append(p.Name);r.Append("\n");}r.Append("author ");r.Append(author != null ? author.ToString() : "NOT_SET");r.Append("\n");r.Append("committer ");r.Append(committer != null ? committer.ToString() : "NOT_SET");r.Append("\n");r.Append("gpgSignature ");r.Append(gpgSignature != null ? gpgSignature.ToString() : "NOT_SET");r.Append("\n");if (encoding != null && !References.IsSameObject(encoding, UTF_8)) {r.Append("encoding ");r.Append(encoding.Name);r.Append("\n");}r.Append("\n");r.Append(message != null ? message : "");r.Append("}");return r.ToString();}
public IndicNormalizationFilterFactory(Dictionary<string, string> args) : base(args){if (!args.Any()){throw new ArgumentException("Unknown parameters: " + string.Join(", ", args));}}
public OptionGroup CreateOptionGroup(CreateOptionGroupRequest request) { request = BeforeClientExecution(request); return ExecuteCreateOptionGroup(request); }
public AssociateMemberAccountResult AssociateMemberAccount(AssociateMemberAccountRequest request) { request = BeforeClientExecution(request); return ExecuteAssociateMemberAccount(request); }
public void Run() { doRefreshProgress(mId, mProgress, mFromUser, true); mRefreshProgressRunnable = this; }
public SetTerminationProtectionResult SetTerminationProtection(SetTerminationProtectionRequest request) { request = BeforeClientExecution(request); return ExecuteSetTerminationProtection(request); }
public string GetErrorHeader(RecognitionException e){int line = e.GetOffendingToken().GetLine();int charPositionInLine = e.GetOffendingToken().GetCharPositionInLine();return "line " + line + ":" + charPositionInLine;}
public CharBuffer AsReadOnlyBuffer(){CharToByteBufferAdapter buf = new CharToByteBufferAdapter(byteBuffer.AsReadOnlyBuffer());buf.limit = limit;buf.position = position;buf.mark = mark;buf.byteBuffer.Order = byteBuffer.Order;return buf;}
public StopSentimentDetectionJobResult StopSentimentDetectionJob(StopSentimentDetectionJobRequest request) { request = BeforeClientExecution(request); return ExecuteStopSentimentDetectionJob(request); }
public ObjectIdSubclassMap<ObjectId> GetNewObjectIds(){if (newObjectIds != null)return newObjectIds;return new ObjectIdSubclassMap<ObjectId>();}
public void Clear() { hash = hash(new byte[0]); base.Clear(); }
public void Reset(){lock (lockObject){CheckNotClosed();if (mark == -1){throw new IOException("Invalid mark");}pos = mark;}}
public RefErrorPtg(LittleEndianInput @in)  { field_1_reserved = @in.ReadInt(); }
public SuspendGameServerGroupResult SuspendGameServerGroup(SuspendGameServerGroupRequest request) {request = BeforeClientExecution(request);return ExecuteSuspendGameServerGroup(request);}
public static object Evaluate(object[] args, int srcRowIndex, int srcColumnIndex) {if (args.Length != 3) {return ErrorEval.ValueInvalid;}return Evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]);}
public GetRepoRequest() : base("cr", "2016-06-07", "GetRepo", "cr"){SetUriPattern("/repos/[RepoNamespace]/[RepoName]");SetMethod(MethodType.GET);}
public void SetDate(DateTime date){if (date != null){this.date = DateTools.DateToString(date, DateTools.Resolution.Second);}else{this.date = null;}}
public TokenStream Create(TokenStream input) { return new GermanMinimalStemFilter(input); }
public object[] ToArray() { return a.Clone() as object[]; }
public void Write(char[] buffer, int offset, int len){Array.CheckOffsetAndLength(buffer.Length, offset, len);lock (lockObject){Expand(len);Buffer.BlockCopy(buffer, offset * sizeof(char), this.buf, this.count * sizeof(char), len * sizeof(char));this.count += len;}}
public static readonly RevFilter after(DateTime ts) => after(ts.ToUniversalTime().Ticks);
public DeleteGroupPolicyRequest(string groupName, string policyName) { SetGroupName(groupName); SetPolicyName(policyName); }
public DeregisterTransitGatewayMulticastGroupMembersResult DeregisterTransitGatewayMulticastGroupMembers(DeregisterTransitGatewayMulticastGroupMembersRequest request) { request = BeforeClientExecution(request); return ExecuteDeregisterTransitGatewayMulticastGroupMembers(request); }
public BatchDeleteScheduledActionResult batchDeleteScheduledAction(BatchDeleteScheduledActionRequest request) {request = BeforeClientExecution(request);return ExecuteBatchDeleteScheduledAction(request);}
public CreateAlgorithmResult CreateAlgorithm(CreateAlgorithmRequest request) { request = BeforeClientExecution(request); return ExecuteCreateAlgorithm(request); }
public int ReadUByte() { return ReadByte() & 0x00FF; }
public void SetLength(int sz) { NB.EncodeInt32(info, infoOffset + P_SIZE, sz); }
public DescribeScalingProcessTypesResult DescribeScalingProcessTypes() { return DescribeScalingProcessTypes(new DescribeScalingProcessTypesRequest()); }
public ListResourceRecordSetsResult ListResourceRecordSets(ListResourceRecordSetsRequest request) { request = BeforeClientExecution(request); return ExecuteListResourceRecordSets(request); }
public Token RecoverInline(Parser recognizer) => throw new ParseCancellationException(new InputMismatchException(recognizer));
public SetTagsForResourceResponse SetTagsForResource(SetTagsForResourceRequest request){request = BeforeClientExecution(request);return ExecuteSetTagsForResource(request);}
public ModifyStrategyRequest() : base("CloudCallCenter", "2017-07-05", "ModifyStrategy", "CloudCallCenter", "innerAPI") {}
public DescribeVpcEndpointServicesResult DescribeVpcEndpointServices(DescribeVpcEndpointServicesRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeVpcEndpointServices(request); }
public EnableLoggingResult EnableLogging(EnableLoggingRequest request){request = BeforeClientExecution(request);return ExecuteEnableLogging(request);}
public bool Contains(object o) { return ConcurrentHashMap.this.ContainsValue(o); }
public SheetRangeIdentifier(string bookName, NameIdentifier firstSheetIdentifier, NameIdentifier lastSheetIdentifier) : base(bookName, firstSheetIdentifier){_lastSheetIdentifier = lastSheetIdentifier;}
public DomainMetadataRequest(string domainName) { SetDomainName(domainName); }
public ParseException(Token currentTokenVal, int[][] expectedTokenSequencesVal, string[] tokenImageVal) : base(new MessageImpl(QueryParserMessages.INVALID_SYNTAX, Initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal))){this.currentToken = currentTokenVal;this.expectedTokenSequences = expectedTokenSequencesVal;this.tokenImage = tokenImageVal;}
public class FetchPhotosRequest : Request{public FetchPhotosRequest(): base("CloudPhoto", "2017-07-11", "FetchPhotos", "cloudphoto"){SetProtocol(ProtocolType.HTTPS);}}
public PrintWriter writer() { return writer; }
public class NGramTokenizerFactory : TokenizerFactory{public int minGramSize;public int maxGramSize;public NGramTokenizerFactory(Dictionary<string, string> args): base(args){minGramSize = GetInt(args, "minGramSize", NGramTokenizer.DEFAULT_MIN_NGRAM_SIZE);maxGramSize = GetInt(args, "maxGramSize", NGramTokenizer.DEFAULT_MAX_NGRAM_SIZE);if (!args.Count == 0){throw new ArgumentException("Unknown parameters: " + string.Join(", ", args));}}private int GetInt(Dictionary<string, string> args, string key, int defaultValue){if (args.ContainsKey(key)){if (int.TryParse(args[key], out int value)){return value;}}return defaultValue;}}
public bool IsDirectoryFileConflict() { return dfConflict != null; }
public IndonesianStemFilter(TokenStream input, bool stemDerivational) : base(input){this.stemDerivational = stemDerivational;}
public CreateTrafficPolicyResult CreateTrafficPolicy(CreateTrafficPolicyRequest request) { request = BeforeClientExecution(request); return ExecuteCreateTrafficPolicy(request); }
public void Serialize(LittleEndianOutput @out){@out.WriteInt(fSD);@out.WriteInt(passwordVerifier);StringUtil.WriteUnicodeString(@out, title);@out.Write(securityDescriptor);}
public static double Floor(double n, double s) {if (s == 0 && n != 0) {return double.NaN;} else {return (n == 0 || s == 0) ? 0 : Math.Floor(n / s) * s;}}
public ByteArrayDataOutput(byte[] bytes, int offset, int len) { Reset(bytes, offset, len); }
public static List<Tree> GetChildren(Tree t){List<Tree> kids = new List<Tree>();for (int i = 0; i < t.GetChildCount(); i++){kids.Add(t.GetChild(i));}return kids;}
public void Clear() { Hashtable.Clear(); }
public RefreshAllRecord(bool refreshAll) : this(0){SetRefreshAll(refreshAll);}
public DeleteNamedQueryResult DeleteNamedQuery(DeleteNamedQueryRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteNamedQuery(request); }
public GraphvizFormatter(ConnectionCosts costs){this.costs = costs;this.bestPathMap = new Dictionary<string, string>();sb.Append(formatHeader());sb.Append("  init [style=invis]\n");sb.Append("  init -> 0.0 [label=\"" + BOS_LABEL + "\"]\n");}
public CheckMultiagentRequest() : base("visionai-poc", "2020-04-08", "CheckMultiagent"){SetMethod(MethodType.POST);}
public ListUserProfilesResult ListUserProfiles(ListUserProfilesRequest request) { request = BeforeClientExecution(request); return ExecuteListUserProfiles(request); }
public CreateRelationalDatabaseFromSnapshotResult CreateRelationalDatabaseFromSnapshot(CreateRelationalDatabaseFromSnapshotRequest request) { request = BeforeClientExecution(request); return ExecuteCreateRelationalDatabaseFromSnapshot(request); }
public StartTaskResult StartTask(StartTaskRequest request) { request = BeforeClientExecution(request); return ExecuteStartTask(request); }
public HashSet<string> GetIgnoredPaths() { return ignoredPaths; }
public FeatSmartTag(RecordInputStream in) { data = in.ReadRemainder(); }
public Change(ChangeAction action, ResourceRecordSet resourceRecordSet) { SetAction(action.ToString()); SetResourceRecordSet(resourceRecordSet); }
public DeleteImageResult DeleteImage(DeleteImageRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteImage(request); }
public CreateConfigurationSetResult CreateConfigurationSet(CreateConfigurationSetRequest request) { request = BeforeClientExecution(request); return ExecuteCreateConfigurationSet(request); }
public IEnumerator<E> GetEnumerator() { object[] snapshot = elements; return new CowIterator<E>(snapshot, 0, snapshot.Length); }
public void VisitContainedRecords(RecordVisitor rv) {if (_recs.Count == 0) {return;}rv.VisitRecord(_bofRec);for (int i = 0; i < _recs.Count; i++) {RecordBase rb = _recs[i];if (rb is RecordAggregate) {((RecordAggregate)rb).VisitContainedRecords(rv);} else {rv.VisitRecord((Org.Apache.Poi.Hssf.Record.Record)rb);}}rv.VisitRecord(EOFRecord.Instance);}
public string ToString(){StringBuilder buffer = new StringBuilder();buffer.Append("[FtCbls ]\n");buffer.Append("  size     = ").Append(GetDataSize()).Append("\n");buffer.Append("  reserved = ").Append(HexDump.ToHex(reserved)).Append("\n");buffer.Append("[/FtCbls ]\n");return buffer.ToString();}
public static BATBlock CreateEmptyBATBlock(POIFSBigBlockSize bigBlockSize, bool isXBAT){BATBlock block = new BATBlock(bigBlockSize);if (isXBAT){int entries_per_xbat_block = bigBlockSize.GetXBATEntriesPerBlock();block._values[entries_per_xbat_block] = POIFSConstants.END_OF_CHAIN;}return block;}
public TagResourceResult TagResource(TagResourceRequest request) { request = BeforeClientExecution(request); return ExecuteTagResource(request); }
public DeleteMailboxPermissionsResult DeleteMailboxPermissions(DeleteMailboxPermissionsRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteMailboxPermissions(request); }
public ListDatasetGroupsResult ListDatasetGroups(ListDatasetGroupsRequest request) { request = BeforeClientExecution(request); return ExecuteListDatasetGroups(request); }
public ResumeProcessesResult ResumeProcesses(ResumeProcessesRequest request) {request = BeforeClientExecution(request);return ExecuteResumeProcesses(request);}
public GetPersonTrackingResult GetPersonTracking(GetPersonTrackingRequest request){request = BeforeClientExecution(request);return ExecuteGetPersonTracking(request);}
public string ToFormulaString(string[] operands){if (space.IsSet(_options)){return operands[0];}else if (optiIf.IsSet(_options)){return ToFormulaString() + "(" + operands[0] + ")";}else if (optiSkip.IsSet(_options)){return ToFormulaString() + operands[0];}else{return ToFormulaString() + "(" + operands[0] + ")";}}
public T merge<T>(T first, T second) { throw new NotImplementedException(); }
public string ToString() { return this.message.GetKey() + ": " + GetLocalizedMessage(); }
public XPath(Parser parser, string path) { this.parser = parser; this.path = path; elements = split(path); }
public CreateAccountAliasRequest(string accountAlias) { SetAccountAlias(accountAlias); }
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {byte block = blocks[blocksOffset++];values[valuesOffset++] = (long)((block >> 7) & 1);values[valuesOffset++] = (long)((block >> 6) & 1);values[valuesOffset++] = (long)((block >> 5) & 1);values[valuesOffset++] = (long)((block >> 4) & 1);values[valuesOffset++] = (long)((block >> 3) & 1);values[valuesOffset++] = (long)((block >> 2) & 1);values[valuesOffset++] = (long)((block >> 1) & 1);values[valuesOffset++] = (long)(block & 1);}}
public PushConnection OpenPush() => new TcpPushConnection();
public static void strcpy(char[] dst, int di, char[] src, int si) {while (src[si] != 0) {dst[di++] = src[si++];}dst[di] = 0;}
public override K GetKey() { return mapEntry.GetKey(); }
public static int numNonnull(object[] data) {int n = 0;if (data == null) return n;foreach (object o in data) {if (o != null) n++;}return n;}
public void Add(int location, E @object){if (location >= 0 && location <= size){Link<E> link = voidLink;if (location < (size / 2)){for (int i = 0; i <= location; i++){link = link.next;}}else{for (int i = size; i > location; i--){link = link.previous;}}Link<E> previous = link.previous;Link<E> newLink = new Link<E>(@object, previous, link);previous.next = newLink;link.previous = newLink;size++;modCount++;}else{throw new IndexOutOfRangeException();}}
public DescribeDomainResult DescribeDomain(DescribeDomainRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeDomain(request); }
public void Flush() => base.Flush();
public class PersianCharFilterFactory : FilterFactory{public PersianCharFilterFactory(Dictionary<string, string> args) : base(args){if (!args.Any()){throw new ArgumentException("Unknown parameters: " + string.Join(", ", args));}}}
public bool IncrementToken() {if (used) { return false; }ClearAttributes();termAttribute.Append(value);offsetAttribute.SetOffset(0, length);used = true;return true;}
public static Buffer Allocate(int capacity){if (capacity < 0){throw new ArgumentException();}return new ReadWriteFloatArrayBuffer(capacity);}
public final Edit after(Edit cut) { return new Edit(cut.endA, endA, cut.endB, endB); }
public UpdateRuleVersionResult updateRuleVersion(UpdateRuleVersionRequest request){request = beforeClientExecution(request);return executeUpdateRuleVersion(request);}
public ListVoiceConnectorTerminationCredentialsResult ListVoiceConnectorTerminationCredentials(ListVoiceConnectorTerminationCredentialsRequest request) { request = BeforeClientExecution(request); return ExecuteListVoiceConnectorTerminationCredentials(request); }
public GetDeploymentTargetResult GetDeploymentTarget(GetDeploymentTargetRequest request) { request = BeforeClientExecution(request); return ExecuteGetDeploymentTarget(request); }
public void SetNoChildReport(){letChildReport = false;foreach (PerfTask task in tasks){if (task is TaskSequence){((TaskSequence)task).SetNoChildReport();}}}
public E get(int location) {try {return a[location];} catch (System.IndexOutOfRangeException e) {throw System.Collections.Generic.List<T>.ThrowHelper.GetArgumentOutOfRangeException(e, nameof(location), "Invalid index");}}
public DescribeDataSetResult DescribeDataSet(DescribeDataSetRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeDataSet(request); }
public SkipWorkTreeFilter(int treeIdx) { this.treeIdx = treeIdx; }
public DescribeNetworkInterfacesResult DescribeNetworkInterfaces() { return DescribeNetworkInterfaces(new DescribeNetworkInterfacesRequest()); }
public bool Contains(int row, int col) { return _firstRow <= row && _lastRow >= row && _firstColumn <= col && _lastColumn >= col; }
public string ToString() { return new string(this.chars); }
public PatchType GetPatchType() { return patchType; }
public IEnumerator<K> GetEnumerator() { return new KeyIterator(); }
public CreateScriptResult CreateScript(CreateScriptRequest request) { request = BeforeClientExecution(request); return ExecuteCreateScript(request); }
public BytesRef Next() { termUpto++; if (termUpto >= info.terms.Count) { return null; } else { info.terms.Get(info.sortedTerms[termUpto], br); return br; } }
public string outputToString(CharsRef output) { return output.ToString(); }
public AssociateWebsiteAuthorizationProviderResult AssociateWebsiteAuthorizationProvider(AssociateWebsiteAuthorizationProviderRequest request){request = BeforeClientExecution(request);return ExecuteAssociateWebsiteAuthorizationProvider(request);}
public void Unpop(RevCommit c){Block b = head;if (b == null){b = free.NewBlock();b.ResetToMiddle();b.Add(c);head = b;tail = b;return;}else if (b.CanUnpop()){b.Unpop(c);return;}b = free.NewBlock();b.ResetToEnd();b.Unpop(c);b.Next = head;head = b;}
public class EdgeNGramTokenizerFactory : TokenizerFactory{public int minGramSize { get; private set; }public int maxGramSize { get; private set; }public EdgeNGramTokenizerFactory(Dictionary<string, string> args): base(args){minGramSize = GetInt(args, "minGramSize", EdgeNGramTokenizer.DEFAULT_MIN_GRAM_SIZE);maxGramSize = GetInt(args, "maxGramSize", EdgeNGramTokenizer.DEFAULT_MAX_GRAM_SIZE);if (!args.Count == 0){throw new ArgumentException("Unknown parameters: " + string.Join(", ", args.Keys));}}private int GetInt(Dictionary<string, string> args, string key, int defaultValue){if (args.ContainsKey(key)){if (int.TryParse(args[key], out int value)){return value;}}return defaultValue;}}
public ModifyDBParameterGroupRequest(string dBParameterGroupName, List<Parameter> parameters) { setDBParameterGroupName(dBParameterGroupName); setParameters(parameters); }
public GetHostedZoneLimitResult GetHostedZoneLimit(GetHostedZoneLimitRequest request) { request = BeforeClientExecution(request); return ExecuteGetHostedZoneLimit(request); }
public void Set(int index, long value) {int o = index >> 6;int b = index & 63;int shift = b << 0;blocks[o] = (blocks[o] & ~(1L << shift)) | (value << shift);}
public RevFilter Clone() => new PatternSearch(Pattern());
public string ToString() { return $"spans({term.ToString()})@{(doc == -1 ? "START" : (doc == NO_MORE_DOCS) ? "ENDDOC" : $"{doc} - {(position == NO_MORE_POSITIONS ? "ENDPOS" : position)}")}; }
public bool CanAppendMatch() {foreach (Head head in heads) {if (head != LastHead.INSTANCE) {return true;}}return false;}
public int LastIndexOf(string subString, int start) { return base.LastIndexOf(subString, start); }
public DeleteNetworkAclEntryResult DeleteNetworkAclEntry(DeleteNetworkAclEntryRequest request){request = BeforeClientExecution(request);return ExecuteDeleteNetworkAclEntry(request);}
public AssociateMemberToGroupResult AssociateMemberToGroup(AssociateMemberToGroupRequest request) { request = BeforeClientExecution(request); return ExecuteAssociateMemberToGroup(request); }
public static readonly int committer(byte[] b, int ptr){int sz = b.Length;if (ptr == 0)ptr += 46;while (ptr < sz && b[ptr] == 'p')ptr += 48;if (ptr < sz && b[ptr] == 'a')ptr = nextLF(b, ptr);return match(b, ptr, committer);}
public int GetLineNumber() { return row; }
public SubmoduleUpdateCommand AddPath(string path) { paths.Add(path); return this; }
public GetPushTemplateResult GetPushTemplate(GetPushTemplateRequest request) { request = BeforeClientExecution(request); return ExecuteGetPushTemplate(request); }
public DescribeVaultResult DescribeVault(DescribeVaultRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeVault(request); }
public DescribeVpcPeeringConnectionsResponse DescribeVpcPeeringConnections() { return DescribeVpcPeeringConnections(new DescribeVpcPeeringConnectionsRequest()); }
public void PutLong(int index, long value) { throw new ReadOnlyBufferException(); }
public RegisterDeviceResult registerDevice(RegisterDeviceRequest request) { request = beforeClientExecution(request); return executeRegisterDevice(request); }
public static Format byId(int id){foreach (Format format in Enum.GetValues(typeof(Format))){if (format.Id == id){return format;}}throw new ArgumentException("Unknown format id: " + id);}
public DeleteAppResult DeleteApp(DeleteAppRequest request){request = BeforeClientExecution(request);return ExecuteDeleteApp(request);}
public GetBaiduChannelResult GetBaiduChannel(GetBaiduChannelRequest request) { request = BeforeClientExecution(request); return ExecuteGetBaiduChannel(request); }
public FST.BytesReader GetBytesReader() { return fst.GetBytesReader(); }
public static bool IsValidSchemeChar(int index, char c){if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')){return true;}if (index > 0 && ((c >= '0' && c <= '9') || c == '+' || c == '-' || c == '.')){return true;}return false;}
public ListAppliedSchemaArnsResult ListAppliedSchemaArns(ListAppliedSchemaArnsRequest request) { request = BeforeClientExecution(request); return ExecuteListAppliedSchemaArns(request); }
public string name() { return this.name; }
public IValueEval Evaluate(IValueEval[] args, OperationEvaluationContext ec){if (args.Length < 1){return ErrorEval.ValueInvalid;}bool isA1Style;string text;try{IValueEval ve = OperandResolver.GetSingleValue(args[0], ec.RowIndex, ec.ColumnIndex);text = OperandResolver.CoerceValueToString(ve);switch (args.Length){case 1:isA1Style = true;break;case 2:isA1Style = EvaluateBooleanArg(args[1], ec);break;default:return ErrorEval.ValueInvalid;}}catch (EvaluationException e){return e.ErrorEval;}return EvaluateIndirect(ec, text, isA1Style);}
public final int CompareTo(int[] bs, int p){int cmp;cmp = NB.CompareUInt32(w1, bs[p]);if (cmp != 0) return cmp;cmp = NB.CompareUInt32(w2, bs[p + 1]);if (cmp != 0) return cmp;cmp = NB.CompareUInt32(w3, bs[p + 2]);if (cmp != 0) return cmp;cmp = NB.CompareUInt32(w4, bs[p + 3]);if (cmp != 0) return cmp;return NB.CompareUInt32(w5, bs[p + 4]);}
public void RemoveName(int index) { names.RemoveAt(index); workbook.RemoveName(index); }
public GetQueueAttributesRequest(string queueUrl, List<string> attributeNames){SetQueueUrl(queueUrl);SetAttributeNames(attributeNames);}
public static bool[] CopyOf(bool[] original, int newLength){if (newLength < 0){throw new ArgumentException("Negative array size");}return CopyOfRange(original, 0, newLength);}
public static void SetEnabled(bool enabled) { ENABLED = enabled; }
public DeleteLogPatternResult DeleteLogPattern(DeleteLogPatternRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteLogPattern(request); }
public bool Contains(char[] text, int off, int len) { return map.ContainsKey(text, off, len); }
public int GetFirstSheetIndexFromExternSheetIndex(int externSheetNumber){return linkTable.GetFirstInternalSheetIndexForExtIndex(externSheetNumber);}
public bool Handles(string commandLine) {return command.Length + 1 < commandLine.Length && commandLine[command.Length] == ' ' && commandLine.StartsWith(command);}
public static void register(MergeStrategy imp) { register(imp.Name, imp); }
public long RamBytesUsed() => BASE_RAM_BYTES_USED + (index != null ? index.RamBytesUsed() : 0);
public HostedZone(string id, string name, string callerReference) { setId(id); setName(name); setCallerReference(callerReference); }
public GetFindingsResult GetFindings(GetFindingsRequest request) { request = BeforeClientExecution(request); return ExecuteGetFindings(request); }
public DescribeTopicsDetectionJobResult DescribeTopicsDetectionJob(DescribeTopicsDetectionJobRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeTopicsDetectionJob(request); }
public bool ProcessMatch(ValueEval eval) {if (eval is NumericValueEval) {if (minimumValue == null) {minimumValue = eval;} else {double currentValue = ((NumericValueEval)eval).GetNumberValue();double oldValue = ((NumericValueEval)minimumValue).GetNumberValue();if (currentValue < oldValue) {minimumValue = eval;}}}return true;}
public void Write(LittleEndianOutput @out) { @out.WriteByte((byte)(sid + GetPtgClass())); @out.WriteInt(field_1_len_ref_subexpression); }
using System;using System.IO;using Lucene.Net.Store;using Lucene.Net.Facet.Taxonomy;class Program {static void Main(string[] args) {bool printTree = false;string path = null;for (int i = 0; i < args.Length; i++) {if (args[i].Equals("-printTree")) {printTree = true;} else {path = args[i];}}if (args.Length != (printTree ? 2 : 1)) {Console.WriteLine("\nUsage: dotnet run -- -classpath ... org.apache.lucene.facet.util.PrintTaxonomyStats [-printTree] /path/to/taxonomy/index\n");Environment.Exit(1);}using (Directory dir = FSDirectory.Open(new DirectoryInfo(path))) {TaxonomyReader r = new DirectoryTaxonomyReader(dir);PrintStats(r, Console.Out, printTree);r.Dispose();dir.Dispose();}}static void PrintStats(TaxonomyReader r, TextWriter writer, bool printTree) {// Implementation of PrintStats method}}
public void SetByteValue(byte value){if (!(fieldsData is Byte)){throw new ArgumentException("cannot change value type from " + fieldsData.GetType().Name + " to Byte");}fieldsData = value;}
public static int Initialize() { return Initialize(DEFAULT_SEED); }
public class CachingDoubleValueSource {private DoubleValuesSource source;private Dictionary<object, object> cache;public CachingDoubleValueSource(DoubleValuesSource source) {this.source = source;cache = new Dictionary<object, object>();}}
public AttributeDefinition(string attributeName, ScalarAttributeType attributeType) { SetAttributeName(attributeName); SetAttributeType(attributeType.ToString()); }
public static class StringUtils{public static string Join(IEnumerable<string> parts, string separator){return string.Join(separator, parts);}}
public ListTaskDefinitionFamiliesResult ListTaskDefinitionFamilies(ListTaskDefinitionFamiliesRequest request) { request = BeforeClientExecution(request); return ExecuteListTaskDefinitionFamilies(request); }
public ListComponentsResult listComponents(ListComponentsRequest request) { request = beforeClientExecution(request); return executeListComponents(request); }
public ActivatePhotosRequest() : base("CloudPhoto", "2017-07-11", "ActivatePhotos", "cloudphoto"){SetProtocol(ProtocolType.HTTPS);}
public CreateMatchmakingRuleSetResult CreateMatchmakingRuleSet(CreateMatchmakingRuleSetRequest request) { request = BeforeClientExecution(request); return ExecuteCreateMatchmakingRuleSet(request); }
public ListAvailableManagementCidrRangesResult ListAvailableManagementCidrRanges(ListAvailableManagementCidrRangesRequest request) { request = BeforeClientExecution(request); return ExecuteListAvailableManagementCidrRanges(request); }
public ObjectIdSubclassMap<ObjectId> GetBaseObjectIds() { if (baseObjectIds != null) return baseObjectIds; return new ObjectIdSubclassMap<ObjectId>(); }
public DeletePushTemplateResult DeletePushTemplate(DeletePushTemplateRequest request) { request = BeforeClientExecution(request); return ExecuteDeletePushTemplate(request); }
public CreateDomainEntryResult CreateDomainEntry(CreateDomainEntryRequest request) { request = BeforeClientExecution(request); return ExecuteCreateDomainEntry(request); }
public static int GetEncodedSize(object[] values){int result = values.Length * 1;foreach (object value in values){result += GetEncodedSize(value);}return result;}
public OpenNLPTokenizerFactory(Dictionary<string, string> args) : base(args){sentenceModelFile = Require(args, SENTENCE_MODEL);tokenizerModelFile = Require(args, TOKENIZER_MODEL);if (!args.IsEmpty()){throw new ArgumentException("Unknown parameters: " + args);}}
public final int getInt(int index) { checkIndex(index, SizeOf.INT); return Memory.ReadInt32(backingArray, offset + index, order); }
public List<Head> GetNextHeads(char c) {if (Matches(c)) {return newHeads;}return FileNameMatcher.EMPTY_HEAD_LIST;}
public void PutShort(short value) { throw new ReadOnlyBufferException(); }
public void WriteUnshared(object obj) => WriteObject(obj, true);
public int offsetByCodePoints(int index, int codePointOffset) { return char.OffsetByCodePoints(value, 0, count, index, codePointOffset); }
public static int GetUniqueAlt(IEnumerable<BitSet> altsets){BitSet all = GetAlts(altsets);if (all.Cardinality() == 1)return all.NextSetBit(0);return ATN.INVALID_ALT_NUMBER;}
public DateTime GetWhen() { return new DateTime(when); }
public RuleTagToken(string ruleName, int bypassTokenType, string label){if (string.IsNullOrEmpty(ruleName)){throw new ArgumentException("ruleName cannot be null or empty.");}this.ruleName = ruleName;this.bypassTokenType = bypassTokenType;this.label = label;}
public DisableOrganizationAdminAccountResult DisableOrganizationAdminAccount(DisableOrganizationAdminAccountRequest request){request = BeforeClientExecution(request);return ExecuteDisableOrganizationAdminAccount(request);}
public CreateRoomResult CreateRoom(CreateRoomRequest request) { request = BeforeClientExecution(request); return ExecuteCreateRoom(request); }
public ReplicationGroup DeleteReplicationGroup(DeleteReplicationGroupRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteReplicationGroup(request); }
public final CharBuffer Decode(ByteBuffer buffer){try{return newDecoder().OnMalformedInput(CodingErrorAction.Replace).OnUnmappableCharacter(CodingErrorAction.Replace).Decode(buffer);}catch (CharacterCodingException ex){throw new Error(ex.Message, ex);}}
public Distribution(string id, string status, string domainName) { setId(id); setStatus(status); setDomainName(domainName); }
public readonly double[] array() => protectedArray();
public DateWindow1904Record(RecordInputStream in) { field_1_window = in.ReadShort(); }
public DeleteDBSnapshotRequest(string dBSnapshotIdentifier) { setDBSnapshotIdentifier(dBSnapshotIdentifier); }
public ParserExtension GetExtension(string key) { return this.extensions[key]; }
public void Inform(ResourceLoader loader){try{if (chunkerModelFile != null){OpenNLPOpsFactory.GetChunkerModel(chunkerModelFile, loader);}}catch (IOException e){throw new ArgumentException(e);}}
public CompleteVaultLockResult CompleteVaultLock(CompleteVaultLockRequest request) { request = BeforeClientExecution(request); return ExecuteCompleteVaultLock(request); }
public final int[] GetCharIntervals() { return points.Clone() as int[]; }
public long RamBytesUsed() { return values.RamBytesUsed() + base.RamBytesUsed() + sizeof(long) + RamUsageEstimator.NUM_BYTES_OBJECT_REF; }
public RegisterInstancesWithLoadBalancerResponse RegisterInstancesWithLoadBalancer(RegisterInstancesWithLoadBalancerRequest request) { request = BeforeClientExecution(request); return ExecuteRegisterInstancesWithLoadBalancer(request); }
public DescribeClusterUserKubeconfigRequest() : base("CS", "2015-12-15", "DescribeClusterUserKubeconfig", "csk"){SetUriPattern("/k8s/{ClusterId}/user_config");SetMethod(MethodType.GET);}
public PrecisionRecord(RecordInputStream in) { field_1_precision = in.ReadShort(); }
public void Serialize(BinaryWriter output){output.Write(GetLeftRowGutter());output.Write(GetTopColGutter());output.Write(GetRowLevelMax());output.Write(GetColLevelMax());}
public DeleteVirtualInterfaceResult DeleteVirtualInterface(DeleteVirtualInterfaceRequest request){request = BeforeClientExecution(request);return ExecuteDeleteVirtualInterface(request);}
public Entry GetEntry(string name){if (excludes.Contains(name)){throw new FileNotFoundException(name);}Entry entry = directory.GetEntry(name);return WrapEntry(entry);}
public string ToString() {StringBuilder buffer = new StringBuilder();buffer.Append("[BACKUP]\n");buffer.Append("    .backup          = ").Append(Convert.ToInt32(GetBackup()).ToString("X")).Append("\n");buffer.Append("[/BACKUP]\n");return buffer.ToString();}
public DeleteVoiceConnectorOriginationResult DeleteVoiceConnectorOrigination(DeleteVoiceConnectorOriginationRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteVoiceConnectorOrigination(request); }
public IAppendable Append(char c) { Write(c); return this; }
public static long GenerationFromSegmentsFileName(string fileName){if (fileName.Equals(OLD_SEGMENTS_GEN)){throw new ArgumentException("\"" + OLD_SEGMENTS_GEN + "\" is not a valid segment file name since 4.0");}else if (fileName.Equals(IndexFileNames.SEGMENTS)){return 0;}else if (fileName.StartsWith(IndexFileNames.SEGMENTS)){return long.Parse(fileName.Substring(1 + IndexFileNames.SEGMENTS.Length()), System.Globalization.NumberStyles.HexNumber);}else{throw new ArgumentException("fileName \"" + fileName + "\" is not a segments file");}}
public static TagOpt FromOption(string o){if (o == null || o.Length == 0)return TagOpt.AUTO_FOLLOW;foreach (TagOpt tagopt in Enum.GetValues(typeof(TagOpt))){if (tagopt.Option().Equals(o))return tagopt;}throw new ArgumentException(string.Format(JGitText.Get().InvalidTagOption, o));}
public StartContentModerationResult StartContentModeration(StartContentModerationRequest request) { request = BeforeClientExecution(request); return ExecuteStartContentModeration(request); }
public static string QuoteReplacement(string s){StringBuilder result = new StringBuilder(s.Length);for (int i = 0; i < s.Length; i++){char c = s[i];if (c == '\\' || c == '$'){result.Append('\\');}result.Append(c);}return result.ToString();}
public final void Set(V newValue) { value = newValue; }
public QueryParserTokenManager(CharStream stream){input_stream = stream;}
public long valueFor(double elapsed) {double val;if (modBy == 0)val = elapsed / factor;elseval = elapsed / factor % modBy;if (type == '0')return (long)Math.Round(val);elsereturn (long)val;}
public ByteBuffer Get(long[] dst, int dstOffset, int longCount){byteBuffer.Limit(limit * SizeOf.Long);byteBuffer.Position(position * SizeOf.Long);if (byteBuffer is DirectByteBuffer directByteBuffer){directByteBuffer.Get(dst, dstOffset, longCount);}else{((HeapByteBuffer)byteBuffer).Get(dst, dstOffset, longCount);}this.position += longCount;return this;}
public void RemoveErrorListeners() { _listeners.Clear(); }
public CommonTokenStream(ITokenSource tokenSource, int channel) : this(tokenSource){this.channel = channel;}
public ListObjectPoliciesResult listObjectPolicies(ListObjectPoliciesRequest request){request = beforeClientExecution(request);return executeListObjectPolicies(request);}
public ObjectToPack(AnyObjectId src, int type) : base(src) { flags = type << TYPE_SHIFT; }
public int stem(char[] s, int len) {int numVowels = numVowels(s, len);for (int i = 0; i < affixes.Length; i++) {Affix affix = affixes[i];if (numVowels > affix.vc && len >= affix.affix.Length + 3 && endsWith(s, len, affix.affix)) {len -= affix.affix.Length;return affix.palatalizes ? unpalatalize(s, len) : len;}}return len;}
public void Recover(Parser recognizer, RecognitionException e){if (lastErrorIndex == recognizer.InputStream.Index && lastErrorStates != null && lastErrorStates.Contains(recognizer.State)){recognizer.Consume();}lastErrorIndex = recognizer.InputStream.Index;if (lastErrorStates == null){lastErrorStates = new IntervalSet();}lastErrorStates.Add(recognizer.State);IntervalSet followSet = GetErrorRecoverySet(recognizer);ConsumeUntil(recognizer, followSet);}
public string ToFormulaString(){string value = field_3_string;int len = value.Length;StringBuilder sb = new StringBuilder(len + 4);sb.Append(FORMULA_DELIMITER);for (int i = 0; i < len; i++){char c = value[i];if (c == FORMULA_DELIMITER){sb.Append(FORMULA_DELIMITER);}sb.Append(c);}sb.Append(FORMULA_DELIMITER);return sb.ToString();}
public UnlinkFaceRequest() : base("LinkFace", "2018-07-20", "UnlinkFace"){SetProtocol(ProtocolType.HTTPS);SetMethod(MethodType.POST);}
public ConfigurationOptionSetting(string @namespace, string optionName, string value) { SetNamespace(@namespace); SetOptionName(optionName); SetValue(value); }
public string GetFully(string key){StringBuilder result = new StringBuilder(tries.Count * 2);for (int i = 0; i < tries.Count; i++){string r = tries[i].GetFully(key);if (string.IsNullOrEmpty(r) || (r.Length == 1 && r[0] == EOM)){return result.ToString();}result.Append(r);}return result.ToString();}
public DescribeMountTargetSecurityGroupsResult DescribeMountTargetSecurityGroups(DescribeMountTargetSecurityGroupsRequest request){request = BeforeClientExecution(request);return ExecuteDescribeMountTargetSecurityGroups(request);}
public GetApiMappingResult GetApiMapping(GetApiMappingRequest request) { request = BeforeClientExecution(request); return ExecuteGetApiMapping(request); }
public HttpRequest(string strUrl) : base(strUrl){}
public MemFuncPtg(int subExprLen) { field_1_len_ref_subexpression = subExprLen; }
public class Program{public static TermStats[] GetHighFreqTerms(IndexReader reader, int numTerms, string field, IComparer<TermStats> comparator){TermStatsQueue tiq = null;if (field != null){Terms terms = MultiTerms.GetTerms(reader, field);if (terms == null){throw new RuntimeException("field " + field + " not found");}TermsEnum termsEnum = terms.Iterator();tiq = new TermStatsQueue(numTerms, comparator);tiq.Fill(field, termsEnum);}else{Collection<string> fields = FieldInfos.GetIndexedFields(reader);if (fields.Count == 0){throw new RuntimeException("no fields found for this index");}tiq = new TermStatsQueue(numTerms, comparator);foreach (string fieldName in fields){Terms terms = MultiTerms.GetTerms(reader, fieldName);if (terms != null){tiq.Fill(fieldName, terms.Iterator());}}}TermStats[] result = new TermStats[tiq.Size()];int count = tiq.Size() - 1;while (tiq.Size() != 0){result[count] = tiq.Pop();count--;}return result;}}
public DeleteApnsVoipChannelResult DeleteApnsVoipChannel(DeleteApnsVoipChannelRequest request){request = BeforeClientExecution(request);return ExecuteDeleteApnsVoipChannel(request);}
public ListFacesResult ListFaces(ListFacesRequest request) { request = BeforeClientExecution(request); return ExecuteListFaces(request); }
public ShapeFieldCacheDistanceValueSource(SpatialContext ctx, ShapeFieldCacheProvider<Point> provider, Point from, double multiplier) {this.ctx = ctx;this.from = from;this.provider = provider;this.multiplier = multiplier;}
public char Get(int index) { CheckIndex(index); return sequence[index]; }
public UpdateConfigurationProfileResult UpdateConfigurationProfile(UpdateConfigurationProfileRequest request){request = BeforeClientExecution(request);return ExecuteUpdateConfigurationProfile(request);}
public DescribeLifecycleHooksResult DescribeLifecycleHooks(DescribeLifecycleHooksRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeLifecycleHooks(request); }
public DescribeHostReservationsResult DescribeHostReservations(DescribeHostReservationsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeHostReservations(request); }
public static PredictionContext FromRuleContext(ATN atn, RuleContext outerContext){if (outerContext == null) outerContext = RuleContext.Empty;if (outerContext.Parent == null || outerContext == RuleContext.Empty) { return PredictionContext.Empty; }PredictionContext parent = Empty;parent = PredictionContext.FromRuleContext(atn, outerContext.Parent);ATNState state = atn.States[outerContext.InvokingState];RuleTransition transition = (RuleTransition)state.Transition(0);return SingletonPredictionContext.Create(parent, transition.FollowState.StateNumber);}
public string ToString(){StringBuilder buffer = new StringBuilder();buffer.Append("[SXVDEX]\n");buffer.Append("    .grbit1 =").Append(HexDump.IntToHex(_grbit1)).Append("\n");buffer.Append("    .grbit2 =").Append(HexDump.ByteToHex(_grbit2)).Append("\n");buffer.Append("    .citmShow =").Append(HexDump.ByteToHex(_citmShow)).Append("\n");buffer.Append("    .isxdiSort =").Append(HexDump.ShortToHex(_isxdiSort)).Append("\n");buffer.Append("    .isxdiShow =").Append(HexDump.ShortToHex(_isxdiShow)).Append("\n");buffer.Append("    .subtotalName =").Append(_subtotalName).Append("\n");buffer.Append("[/SXVDEX]\n");return buffer.ToString();}
public string ToString() {StringBuilder r = new StringBuilder(); r.Append("BlameResult: "); r.Append(GetResultPath()); return r.ToString();}
public ListChangeSetsResult ListChangeSets(ListChangeSetsRequest request){request = BeforeClientExecution(request);return ExecuteListChangeSets(request);}
public bool IsAllowNonFastForwards() { return allowNonFastForwards; }
public FeatRecord() { futureHeader = new FtrHeader(); futureHeader.SetRecordType(sid); }
public ShortBuffer Put(short c) { throw new ReadOnlyBufferException(); }
public void SetQuery(ICharSequence query) { this.query = query; this.message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, ""); }
public StashApplyCommand StashApply() { return new StashApplyCommand(repo); }
public HashSet<string> nameSet() { return new HashSet<string>(dictionary.Values); }
public static int GetEffectivePort(string scheme, int specifiedPort){if (specifiedPort != -1){return specifiedPort;}if ("http".Equals(scheme, StringComparison.OrdinalIgnoreCase)){return 80;}else if ("https".Equals(scheme, StringComparison.OrdinalIgnoreCase)){return 443;}else{return -1;}}
public ListAssessmentTemplatesResult ListAssessmentTemplates(ListAssessmentTemplatesRequest request) { request = BeforeClientExecution(request); return ExecuteListAssessmentTemplates(request); }
public Cluster RestoreFromClusterSnapshot(RestoreFromClusterSnapshotRequest request) { request = BeforeClientExecution(request); return ExecuteRestoreFromClusterSnapshot(request); }
public void AddShape(HSSFShape shape) { shape.SetPatriarch(this.GetPatriarch()); shape.SetParent(this); shapes.Add(shape); }
public bool Equals(object o) {if (this == o) return true;if (o == null || GetType() != o.GetType()) return false;FacetEntry that = (FacetEntry) o;if (count != that.count) return false;if (!value.Equals(that.value)) return false;return true;}
public static readonly int prev(byte[] b, int ptr, char chrA){if (ptr == b.Length) --ptr;while (ptr >= 0){if (b[ptr--] == chrA) return ptr;}return ptr;}
public bool IsDeltaRepresentation() { return deltaBase != null; }
public Token EmitEOF(){int cpos = GetCharPositionInLine();int line = GetLine();Token eof = _factory.Create(_tokenFactorySourcePair, Token.EOF, null, Token.DEFAULT_CHANNEL, _input.Index, _input.Index - 1, line, cpos);Emit(eof);return eof;}
public UpdateUserRequest(string userName) { SetUserName(userName); }
public RevFilter Negate() { return NotRevFilter.Create(this); }
public void SetTagger(PersonIdent taggerIdent) { tagger = taggerIdent; }
public static BufferSize Automatic(){Runtime rt = Runtime.getRuntime();long max = rt.MaxMemory();long total = rt.TotalMemory();long free = rt.FreeMemory();long totalAvailableBytes = max - total + free;long sortBufferByteSize = free / 2;const long minBufferSizeBytes = MIN_BUFFER_SIZE_MB * MB;if (sortBufferByteSize < minBufferSizeBytes || totalAvailableBytes > 10 * minBufferSizeBytes){if (totalAvailableBytes / 2 > minBufferSizeBytes){sortBufferByteSize = totalAvailableBytes / 2;}else{sortBufferByteSize = Math.Max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);}}return new BufferSize(Math.Min((long)int.MaxValue, sortBufferByteSize));}
public static int TrimTrailingWhitespace(byte[] raw, int start, int end){int ptr = end - 1;while (start <= ptr && IsWhitespace(raw[ptr]))ptr--;return ptr + 1;}
public TopMarginRecord(RecordInputStream @in) { field_1_margin = @in.ReadDouble(); }
public RetrieveEnvironmentInfoRequest(EnvironmentInfoType infoType) { SetInfoType(infoType.ToString()); }
public CreatePlayerSessionsResult CreatePlayerSessions(CreatePlayerSessionsRequest request) { request = BeforeClientExecution(request); return ExecuteCreatePlayerSessions(request); }
public CreateProxySessionResult CreateProxySession(CreateProxySessionRequest request){request = BeforeClientExecution(request);return ExecuteCreateProxySession(request);}
public int GetObjectType() { return type; }
public string GetScheme() { return scheme; }
public void Characters(char[] ch, int start, int length) { contents.Append(ch, start, length); }
public FetchAlbumTagPhotosRequest() : base("CloudPhoto", "2017-07-11", "FetchAlbumTagPhotos", "cloudphoto"){SetProtocol(ProtocolType.HTTPS);}
public DeleteMembersResult DeleteMembers(DeleteMembersRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteMembers(request); }
public GetContactReachabilityStatusResult GetContactReachabilityStatus(GetContactReachabilityStatusRequest request) { request = BeforeClientExecution(request); return ExecuteGetContactReachabilityStatus(request); }
public override bool Remove(object o) { return Impl.this.Remove(o) != null; }
public E Last() { return backingMap.LastKey(); }
public CreateStreamingDistributionResult CreateStreamingDistribution(CreateStreamingDistributionRequest request) { request = BeforeClientExecution(request); return ExecuteCreateStreamingDistribution(request); }
public bool IsAbsolute() { return absolute; }
public DisableAddOnResult DisableAddOn(DisableAddOnRequest request){request = BeforeClientExecution(request);return ExecuteDisableAddOn(request);}
public DescribeAliasResult DescribeAlias(DescribeAliasRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeAlias(request); }
public void Next(int delta) {while (--delta >= 0) {if (currentSubtree != null)ptr += currentSubtree.GetEntrySpan();elseptr++;if (Eof())break;ParseEntry();}}
public RevFilter Clone() { return new Binary(a.Clone(), b.Clone()); }
public Reader Create(Reader input) { return new PersianCharFilter(input); }
public string option() { return option; }
public string ToString() {StringBuilder sb = new StringBuilder("[");foreach (object item in this) {if (sb.Length > 1) sb.Append(", ");if (item is char[]) {sb.Append((char[]) item);} else {sb.Append(item);}}return sb.Append(']').ToString();}
public DescribeSignalingChannelResponse DescribeSignalingChannel(DescribeSignalingChannelRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeSignalingChannel(request); }
public AttachStaticIpResult AttachStaticIp(AttachStaticIpRequest request) { request = BeforeClientExecution(request); return ExecuteAttachStaticIp(request); }
public string ToString(){StringBuilder sb = new StringBuilder(64);CellReference crA = new CellReference(_firstRowIndex, _firstColumnIndex, false, false);CellReference crB = new CellReference(_lastRowIndex, _lastColumnIndex, false, false);sb.Append(GetType().Name);sb.Append(" [").Append(crA.FormatAsString()).Append(':').Append(crB.FormatAsString()).Append("]");return sb.ToString();}
public BloomFilteringPostingsFormat(PostingsFormat delegatePostingsFormat, BloomFilterFactory bloomFilterFactory) : base(BLOOM_CODEC_NAME){this.delegatePostingsFormat = delegatePostingsFormat;this.bloomFilterFactory = bloomFilterFactory;}
public ListTemplatesResult ListTemplates(ListTemplatesRequest request) { request = BeforeClientExecution(request); return ExecuteListTemplates(request); }
public class TimerThread : Thread {private long resolution;private Counter counter;public TimerThread(long resolution, Counter counter) : base(THREAD_NAME) {this.resolution = resolution;this.counter = counter;this.IsBackground = true;}}
public DrawingRecord() { recordData = EMPTY_BYTE_ARRAY; }
public ListDirectoriesResult ListDirectories(ListDirectoriesRequest request) { request = BeforeClientExecution(request); return ExecuteListDirectories(request); }
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {byte block = blocks[blocksOffset++];values[valuesOffset++] = (block >> 7) & 1;values[valuesOffset++] = (block >> 6) & 1;values[valuesOffset++] = (block >> 5) & 1;values[valuesOffset++] = (block >> 4) & 1;values[valuesOffset++] = (block >> 3) & 1;values[valuesOffset++] = (block >> 2) & 1;values[valuesOffset++] = (block >> 1) & 1;values[valuesOffset++] = block & 1;}}
public GroupingSearch DisableCaching() { this.maxCacheRAMMB = null; this.maxDocsToCache = null; return this; }
public static int idealByteArraySize(int need) {for (int i = 4; i < 32; i++)if (need <= (1 << i) - 12)return (1 << i) - 12;return need;}
public UpdateAssessmentTargetResult updateAssessmentTarget(UpdateAssessmentTargetRequest request){request = beforeClientExecution(request);return executeUpdateAssessmentTarget(request);}
public ModifyVolumeResult ModifyVolume(ModifyVolumeRequest request){request = BeforeClientExecution(request);return ExecuteModifyVolume(request);}
public Cell Merge(Cell m, Cell e) {if (m.cmd == e.cmd && m.ref == e.ref && m.skip == e.skip) {Cell c = new Cell(m);c.cnt += e.cnt;return c;} else {return null;}}
public ByteBuffer Read(int length, long position) {if (position >= Size()) {throw new IndexOutOfRangeException("Position " + position + " past the end of the file");}ByteBuffer dst;if (Writable) {dst = Channel.Map(FileChannel.MapMode.READ_WRITE, position, length);BuffersToClean.Add(dst);} else {Channel.Position = position;dst = ByteBuffer.Allocate(length);int worked = IOUtils.ReadFully(Channel, dst);if (worked == -1) {throw new IndexOutOfRangeException("Position " + position + " past the end of the file");}}dst.Position = 0;return dst;}
public void RespondActivityTaskCompleted(RespondActivityTaskCompletedRequest request) { request = BeforeClientExecution(request); ExecuteRespondActivityTaskCompleted(request); }
public void IncrementProgressBy(int diff) { SetProgress(mProgress + diff); }
public MetadataDiff CompareMetadata(DirCacheEntry entry){if (entry.IsAssumeValid())return MetadataDiff.EQUAL;if (entry.IsUpdateNeeded())return MetadataDiff.DIFFER_BY_METADATA;if (IsModeDifferent(entry.GetRawMode()))return MetadataDiff.DIFFER_BY_METADATA;int type = mode & FileMode.TYPE_MASK;if (type == FileMode.TYPE_TREE || type == FileMode.TYPE_GITLINK)return MetadataDiff.EQUAL;if (!entry.IsSmudged() && entry.GetLength() != (int)getEntryLength())return MetadataDiff.DIFFER_BY_METADATA;Instant cacheLastModified = entry.GetLastModifiedInstant();Instant fileLastModified = GetEntryLastModifiedInstant();if (timestampComparator.Compare(cacheLastModified, fileLastModified, getOptions().GetCheckStat() == CheckStat.MINIMAL) != 0){return MetadataDiff.DIFFER_BY_TIMESTAMP;}if (entry.IsSmudged()){return MetadataDiff.SMUDGED;}return MetadataDiff.EQUAL;}
public static NumberRecord ConvertToNumberRecord(RKRecord rk){NumberRecord num = new NumberRecord();num.SetColumn(rk.GetColumn());num.SetRow(rk.GetRow());num.SetXFIndex(rk.GetXFIndex());num.SetValue(rk.GetRKNumber());return num;}
public CharBuffer Put(char[] src, int srcOffset, int charCount){byteBuffer.Limit(limit * SizeOf.CHAR);byteBuffer.Position(position * SizeOf.CHAR);if (byteBuffer is ReadWriteDirectByteBuffer readWriteDirectByteBuffer){readWriteDirectByteBuffer.Put(src, srcOffset, charCount);}else{((ReadWriteHeapByteBuffer)byteBuffer).Put(src, srcOffset, charCount);}this.position += charCount;return this;}
public int GetCells(){IEnumerator<char> i = cells.Keys.GetEnumerator();int size = 0;while (i.MoveNext()){char c = i.Current;Cell e = At(c);if (e.cmd >= 0 || e.ref >= 0){size++;}}return size;}
public class BeiderMorseFilterFactory : FilterFactory{public BeiderMorseFilterFactory(Dictionary<string, string> args): base(args){NameType nameType = Enum.Parse<NameType>(Get(args, "nameType", NameType.GENERIC.ToString()));RuleType ruleType = Enum.Parse<RuleType>(Get(args, "ruleType", RuleType.APPROX.ToString()));bool concat = GetBoolean(args, "concat", true);engine = new PhoneticEngine(nameType, ruleType, concat);Set<string> langs = GetSet(args, "languageSet");languageSet = (langs == null || (langs.Count == 1 && langs.Contains("auto"))) ? null : LanguageSet.From(langs);if (!args.IsEmpty()){throw new ArgumentException("Unknown parameters: " + args);}}private T Get<T>(Dictionary<string, string> args, string key, T defaultValue){if (args.ContainsKey(key)){return (T)Convert.ChangeType(args[key], typeof(T));}return defaultValue;}private bool GetBoolean(Dictionary<string, string> args, string key, bool defaultValue){if (args.ContainsKey(key)){return Convert.ToBoolean(args[key]);}return defaultValue;}private HashSet<T> GetSet<T>(Dictionary<string, string> args, string key){if (args.ContainsKey(key)){var values = args[key].Split(',');var set = new HashSet<T>();foreach (var value in values){set.Add((T)Convert.ChangeType(value.Trim(), typeof(T)));}return set;}return null;}}
public static double VarP(double[] v) {double r = double.NaN;if (v != null && v.Length > 1) {r = DevSq(v) / v.Length;}return r;}
public PersianNormalizationFilterFactory(Dictionary<string, string> args) : base(args){if (!args.IsNullOrEmpty()){throw new ArgumentException("Unknown parameters: " + string.Join(", ", args));}}
public static WeightedTerm[] GetTerms(Query query, bool prohibited, string fieldName){HashSet<WeightedTerm> terms = new HashSet<WeightedTerm>();Predicate<string> fieldSelector = fieldName == null ? f => true : f => f.Equals(fieldName);query.Visit(new BoostedTermExtractor(1, terms, prohibited, fieldSelector));return terms.ToArray();}
public DeleteDocumentationPartResult DeleteDocumentationPart(DeleteDocumentationPartRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteDocumentationPart(request); }
public string ToString(){StringBuilder sb = new StringBuilder();sb.Append("[CHART]\n");sb.Append("    .x     = ").Append(GetX()).Append('\n');sb.Append("    .y     = ").Append(GetY()).Append('\n');sb.Append("    .width = ").Append(GetWidth()).Append('\n');sb.Append("    .height= ").Append(GetHeight()).Append('\n');sb.Append("[/CHART]\n");return sb.ToString();}
public sealed short Get(int index) { CheckIndex(index); return backingArray[offset + index]; }
public string ToString() { return image; }
public ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1){try{AreaEval reA = EvaluateRef(arg0);AreaEval reB = EvaluateRef(arg1);AreaEval result = ResolveRange(reA, reB);if (result == null){return ErrorEval.NULL_INTERSECTION;}return result;}catch (EvaluationException e){return e.GetErrorEval();}}
public void clear() { weightBySpanQuery.Clear(); }
public int FindEndOffset(StringBuilder buffer, int start){if (start > buffer.Length || start < 0) return start;bi.SetText(buffer.ToString().Substring(start));return bi.Next() + start;}
public SrndQuery PrimaryQuery(){SrndQuery q;switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk){case LPAREN:jj_consume_token(LPAREN);q = FieldsQuery();jj_consume_token(RPAREN);break;case OR:case AND:case W:case N:q = PrefixOperatorQuery();break;case TRUNCQUOTED:case QUOTED:case SUFFIXTERM:case TRUNCTERM:case TERM:q = SimpleTerm();break;default:jj_la1[5] = jj_gen;jj_consume_token(-1);throw new ParseException();}OptionalWeights(q);return q;}
public DeleteApiKeyResult DeleteApiKey(DeleteApiKeyRequest request){request = BeforeClientExecution(request);return ExecuteDeleteApiKey(request);}
public InsertTagsRequest() : base("Ots", "2016-06-20", "InsertTags", "ots"){SetMethod(MethodType.POST);}
public DeleteUserByPrincipalIdResult DeleteUserByPrincipalId(DeleteUserByPrincipalIdRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteUserByPrincipalId(request); }
public DescribeNetworkInterfacesResult DescribeNetworkInterfaces(DescribeNetworkInterfacesRequest request){request = BeforeClientExecution(request);return ExecuteDescribeNetworkInterfaces(request);}
public int Serialize(int offset, byte[] data, EscherSerializationListener listener){listener.BeforeRecordSerialize(offset, GetRecordId(), this);LittleEndian.PutShort(data, offset, GetOptions());LittleEndian.PutShort(data, offset + 2, GetRecordId());LittleEndian.PutInt(data, offset + 4, 8);LittleEndian.PutInt(data, offset + 8, field_1_numShapes);LittleEndian.PutInt(data, offset + 12, field_2_lastMSOSPID);listener.AfterRecordSerialize(offset + 16, GetRecordId(), GetRecordSize(), this);return GetRecordSize();}
public CreateSecurityConfigurationResult CreateSecurityConfiguration(CreateSecurityConfigurationRequest request) { request = BeforeClientExecution(request); return ExecuteCreateSecurityConfiguration(request); }
public DescribeClientVpnConnectionsResult DescribeClientVpnConnections(DescribeClientVpnConnectionsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeClientVpnConnections(request); }
public static void Fill(double[] array, double value) { for (int i = 0; i < array.Length; i++) { array[i] = value; } }
public bool HasNext() { return nextId < cells.Length; }
public PostingsEnum Reset(int[] postings) { this.postings = postings; upto = -2; freq = 0; return this; }
public bool HasAll(RevFlagSet set) => (flags & set.mask) == set.mask;
public ModifyAccountResult ModifyAccount(ModifyAccountRequest request) { request = BeforeClientExecution(request); return ExecuteModifyAccount(request); }
public Token LT(int k) { lazyInit(); if (k == 0) return null; if (k < 0) return LB(-k); int i = p + k - 1; sync(i); if (i >= tokens.Count) { return tokens[tokens.Count - 1]; } return tokens[i]; }
public void RemoveSheet(int sheetIndex){if (boundsheets.Count > sheetIndex){records.RemoveAt(records.GetBspos() - (boundsheets.Count - 1) + sheetIndex);boundsheets.RemoveAt(sheetIndex);FixTabIdRecord();}int sheetNum1Based = sheetIndex + 1;for (int i = 0; i < GetNumNames(); i++){NameRecord nr = GetNameRecord(i);if (nr.GetSheetNumber() == sheetNum1Based){nr.SetSheetNumber(0);}else if (nr.GetSheetNumber() > sheetNum1Based){nr.SetSheetNumber(nr.GetSheetNumber() - 1);}}if (linkTable != null){linkTable.RemoveSheet(sheetIndex);}}
public void removeName(string name) { int index = getNameIndex(name); removeName(index); }
public bool Equals(object o){if (!(o is Property)){return false;}var p = (Property)o;var pValue = p.GetValue();var pId = p.GetID();if (id != pId || (id != 0 && !TypesAreEqual(type, p.GetType()))){return false;}if (value == null && pValue == null){return true;}if (value == null || pValue == null){return false;}var valueClass = value.GetType();var pValueClass = pValue.GetType();if (!((valueClass.IsAssignableFrom(pValueClass)) || !(pValueClass.IsAssignableFrom(valueClass)))){return false;}if (value is byte[]){var thisVal = (byte[])value;var otherVal = (byte[])pValue;int len = UnpaddedLength(thisVal);if (len != UnpaddedLength(otherVal)){return false;}for (int i = 0; i < len; i++){if (thisVal[i] != otherVal[i]){return false;}}return true;}return value.Equals(pValue);}
public GetRepoBuildListRequest() : base("cr", "2016-06-07", "GetRepoBuildList", "cr"){SetUriPattern("/repos/{RepoNamespace}/{RepoName}/build");SetMethod(MethodType.GET);}
public MessageWriter() { buf = new MemoryStream(); enc = new StreamWriter(GetRawStream(), Encoding.UTF8); }
public void Append(RecordBase r) { _recs.Add(r); }
public void Close(){if (Read(skipBuffer) != -1 || actualSize != expectedSize){throw new CorruptObjectException(string.Format(JGitText.Get().PackfileCorruptionDetected, JGitText.Get().WrongDecompressedLength));}int used = bAvail - inf.GetRemaining();if (0 < used){OnObjectData(src, buf, p, used);Use(used);}inf.Reset();}
public DescribeModelPackageResult DescribeModelPackage(DescribeModelPackageRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeModelPackage(request); }
public void Construct(CellValueRecordInterface rec, RecordStream rs, SharedValueManager sfh){if (rec is FormulaRecord formulaRec){StringRecord cachedText;Type nextClass = rs.PeekNextClass();if (nextClass == typeof(StringRecord)){cachedText = (StringRecord)rs.GetNext();}else{cachedText = null;}InsertCell(new FormulaRecordAggregate(formulaRec, cachedText, sfh));}else{InsertCell(rec);}}
public Decompressor Clone() { return new DeflateDecompressor(); }
public UpdateS3ResourcesResult UpdateS3Resources(UpdateS3ResourcesRequest request) { request = BeforeClientExecution(request); return ExecuteUpdateS3Resources(request); }
public GroupQueryNode(QueryNode query){if (query == null){throw new QueryNodeError(new MessageImpl(QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, "query", "null"));}allocate();setLeaf(false);add(query);}
public string ToQueryString(EscapeQuerySyntax escaper){StringBuilder path = new StringBuilder();path.Append("/").Append(GetFirstPathElement());foreach (QueryText pathelement in GetPathElements(1)){CharSequence value = escaper.Escape(pathelement.Value, CultureInfo.CurrentCulture, Type.STRING);path.Append("/\"").Append(value).Append("\"");}return path.ToString();}
public void RemoveCellComment(){HSSFComment comment = _sheet.FindCellComment(_record.Row, _record.Column);_comment = null;if (comment == null){return;}_sheet.DrawingPatriarch.RemoveShape(comment);}
public void Reset() { arriving = -1; leaving = -1; }
public ActivateUserResult ActivateUser(ActivateUserRequest request){request = BeforeClientExecution(request);return ExecuteActivateUser(request);}
public bool IsCharsetDetected() { throw new NotSupportedException(); }
public Cluster ModifySnapshotCopyRetentionPeriod(ModifySnapshotCopyRetentionPeriodRequest request) { request = BeforeClientExecution(request); return ExecuteModifySnapshotCopyRetentionPeriod(request); }
public DeleteClusterSubnetGroupResult DeleteClusterSubnetGroup(DeleteClusterSubnetGroupRequest request) {request = BeforeClientExecution(request);return ExecuteDeleteClusterSubnetGroup(request);}
public static string decode(byte[] buffer) { return decode(buffer, 0, buffer.Length); }
public int GetDefaultPort() { return -1; }
public StopTaskResult stopTask(StopTaskRequest request){request = beforeClientExecution(request);return executeStopTask(request);}
public void SeekExact(BytesRef target, TermState otherState){Debug.Assert(otherState != null && otherState is BlockTermState);Debug.Assert(!doOrd || ((BlockTermState)otherState).ord < numTerms);state.CopyFrom(otherState);seekPending = true;indexIsCurrent = false;term.CopyBytes(target);}
public SeriesToChartGroupRecord(RecordInputStream in) { field_1_chartGroupIndex = in.ReadShort(); }
public static void WriteUnicodeStringFlagAndData(LittleEndianOutput @out, string value){bool is16Bit = HasMultibyte(value);@out.WriteByte(is16Bit ? (byte)0x01 : (byte)0x00);if (is16Bit){PutUnicodeLE(value, @out);}else{PutCompressedUnicode(value, @out);}}
public AuthorizeSecurityGroupIngressResponse AuthorizeSecurityGroupIngress(AuthorizeSecurityGroupIngressRequest request) { request = BeforeClientExecution(request); return ExecuteAuthorizeSecurityGroupIngress(request); }
public void addFile(string file) { checkFileNames(new HashSet<string> { file }); setFiles.Add(namedForThisSegment(file)); }
public void SetSize(int width, int height) { mWidth = width; mHeight = height; }
public void SetPrecedenceFilterSuppressed(bool value){if (value){this.reachesIntoOuterContext |= 0x40000000;}else{this.reachesIntoOuterContext &= ~SUPPRESS_PRECEDENCE_FILTER;}}
public IntervalSet LOOK(ATNState s, RuleContext ctx) { return LOOK(s, null, ctx); }
public void Serialize(LittleEndianOutput @out) { @out.WriteShort(GetOptionFlags()); @out.WriteShort(GetRowHeight()); }
public Builder(bool dedup) { this.dedup = dedup; }
public Hashtable(int capacity, float loadFactor) : this(capacity){if (loadFactor <= 0 || float.IsNaN(loadFactor)){throw new ArgumentException("Load factor: " + loadFactor);}}
public object Get(string key) {final int bucket = normalCompletion.GetBucket(key);return bucket == -1 ? null : long.Parse(bucket.ToString());}
public ListHyperParameterTuningJobsResult ListHyperParameterTuningJobs(ListHyperParameterTuningJobsRequest request){request = BeforeClientExecution(request);return ExecuteListHyperParameterTuningJobs(request);}
public DeleteTableResult DeleteTable(string tableName) { return DeleteTable(new DeleteTableRequest().WithTableName(tableName)); }
public bool LessThan(TextFragment fragA, TextFragment fragB){if (fragA.GetScore() == fragB.GetScore())return fragA.FragNum > fragB.FragNum;elsereturn fragA.GetScore() < fragB.GetScore();}
public void FreeBefore(int pos){Debug.Assert(pos >= 0);Debug.Assert(pos <= nextPos);int newCount = nextPos - pos;Debug.Assert(newCount <= count, "newCount=" + newCount + " count=" + count);Debug.Assert(newCount <= buffer.Length, "newCount=" + newCount + " buf.length=" + buffer.Length);count = newCount;}
public UpdateHITTypeOfHITResult UpdateHITTypeOfHIT(UpdateHITTypeOfHITRequest request) { request = BeforeClientExecution(request); return ExecuteUpdateHITTypeOfHIT(request); }
public UpdateRecommenderConfigurationResult updateRecommenderConfiguration(UpdateRecommenderConfigurationRequest request){request = BeforeClientExecution(request);return ExecuteUpdateRecommenderConfiguration(request);}
public int CompareTo(BytesRef other) => Array.Compare(this.bytes, this.offset, this.offset + this.length, other.bytes, other.offset, other.offset + other.length);
public int stem(char[] s, int len) {if (len > 4 && s[len - 1] == 's') len--;if (len > 5 && (endsWith(s, len, "ene") || (endsWith(s, len, "ane") && useNynorsk()))) return len - 3;if (len > 4 && (endsWith(s, len, "er") || endsWith(s, len, "en") || endsWith(s, len, "et") || (endsWith(s, len, "ar") && useNynorsk()))) return len - 2;if (len > 3) switch (s[len - 1]) {case 'a':case 'e':return len - 1;}return len;}private bool endsWith(char[] s, int length, string suffix) {for (int i = 0; i < suffix.Length; i++) {if (s[length - suffix.Length + i] != suffix[i]) return false;}return true;}private bool useNynorsk() {// Implementation of useNynorsk methodreturn false;}
public DescribeDBSnapshotsResult DescribeDBSnapshots(DescribeDBSnapshotsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeDBSnapshots(request); }
public class SortedSetDocValuesFacetField : FacetField{public SortedSetDocValuesFacetField(string dim, string label) : base("dummy", TYPE){FacetField.VerifyLabel(label);FacetField.VerifyLabel(dim);this.dim = dim;this.label = label;}}
public CreateDocumentationPartResult CreateDocumentationPart(CreateDocumentationPartRequest request){request = BeforeClientExecution(request);return ExecuteCreateDocumentationPart(request);}
public string GetValue() { return value; }
public ReadOnlyMemory<byte> AsReadOnlyBuffer() => Duplicate();
public UpdateDataSourcePermissionsResult UpdateDataSourcePermissions(UpdateDataSourcePermissionsRequest request) { request = BeforeClientExecution(request); return ExecuteUpdateDataSourcePermissions(request); }
public static Record CreateSingleRecord(RecordInputStream input){I_RecordCreator constructor = _recordCreatorsById[Integer.ValueOf(input.GetSid())];if (constructor == null){return new UnknownRecord(input);}return constructor.Create(input);}
public int GetCount() { return mTabs.Count; }
public DeleteApplicationReferenceDataSourceResult DeleteApplicationReferenceDataSource(DeleteApplicationReferenceDataSourceRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteApplicationReferenceDataSource(request); }
public CreateProjectVersionResult CreateProjectVersion(CreateProjectVersionRequest request) { request = BeforeClientExecution(request); return ExecuteCreateProjectVersion(request); }
public ReadOnlyIntArrayBuffer Slice() { return new ReadOnlyIntArrayBuffer(Remaining(), BackingArray, Offset + Position); }
public byte Get(){if (position == limit){throw new BufferUnderflowException();}return this.block.PeekByte(offset + position++);}
public LongBuffer Put(int index, long c) { CheckIndex(index); backingArray[offset + index] = c; return this; }
public StoredField(string name, float value) : base(name, TYPE){fieldsData = value;}
public IntervalSet GetExpectedTokensWithinCurrentRule(){ATN atn = Interpreter.atn;ATNState s = atn.states[GetState()];return atn.NextTokens(s);}
public string ToString(){StringBuilder buffer = new StringBuilder();buffer.Append("[FILESHARING]\n");buffer.Append("    .readonly       = ").Append(GetReadOnly() == 1 ? "true" : "false").Append("\n");buffer.Append("    .password       = ").Append(Convert.ToString(GetPassword(), 16)).Append("\n");buffer.Append("    .username       = ").Append(GetUsername()).Append("\n");buffer.Append("[/FILESHARING]\n");return buffer.ToString();}
public SubmoduleInitCommand(Repository repo) : base(repo){paths = new List<string>();}
public void Include(string name, AnyObjectId id){bool validRefName = Repository.IsValidRefName(name) || Constants.HEAD.Equals(name);if (!validRefName)throw new ArgumentException(string.Format(JGitText.Get().InvalidRefName, name));if (include.ContainsKey(name))throw new InvalidOperationException(JGitText.Get().DuplicateRef + name);include[name] = id.ToObjectId();}
public Cluster EnableSnapshotCopy(EnableSnapshotCopyRequest request) { request = BeforeClientExecution(request); return ExecuteEnableSnapshotCopy(request); }
public ValueFiller GetValueFiller(){return new ValueFiller(){private readonly MutableValueFloat mval = new MutableValueFloat();public override};}
public void Serialize(LittleEndianOutput @out){@out.WriteByte(GetPane());@out.WriteInt16(GetActiveCellRow());@out.WriteInt16(GetActiveCellCol());@out.WriteInt16(GetActiveCellRef());int nRefs = field_6_refs.Length;@out.WriteInt16(nRefs);foreach (CellRangeAddress8Bit field_6_ref in field_6_refs){field_6_ref.Serialize(@out);}}
public static Counter NewCounter() { return NewCounter(false); }
public bool Get(string name, bool dflt){bool[] vals = (bool[])valByRound[name];if (vals != null){return vals[roundNumber % vals.Length];}string sval = props.GetProperty(name, $"{dflt}");if (sval.IndexOf(":") < 0){return bool.Parse(sval);}int k = sval.IndexOf(":");string colName = sval.Substring(0, k);sval = sval.Substring(k + 1);colForValByRound[name] = colName;vals = PropToBooleanArray(sval);valByRound[name] = vals;return vals[roundNumber % vals.Length];}
public void preSerialize(){if (records.getTabpos() > 0){TabIdRecord tir = (TabIdRecord)records.get(records.getTabpos());if (tir._tabids.Length < boundsheets.Count){fixTabIdRecord();}}}
public LimitTokenCountAnalyzer(Analyzer @delegate, int maxTokenCount, bool consumeAllTokens) : base(@delegate.GetReuseStrategy()){this.@delegate = @delegate;this.maxTokenCount = maxTokenCount;this.consumeAllTokens = consumeAllTokens;}
public ExternalBookBlock(int numberOfSheets){_externalBookRecord = SupBookRecord.CreateInternalReferences((short)numberOfSheets);_externalNameRecords = new ExternalNameRecord[0];_crnBlocks = new CRNBlock[0];}
public string ToString() {StringBuilder buffer = new StringBuilder();buffer.Append("[SCENARIOPROTECT]\n");buffer.Append("    .protect         = ").Append(GetProtect()).Append("\n");buffer.Append("[/SCENARIOPROTECT]\n");return buffer.ToString();}
public PushCommand SetThin(bool thin) { CheckCallable(); this.thin = thin; return this; }
public int CompareTo(SearcherTracker other) { return Double.Compare(other.recordTimeSec, recordTimeSec); }
public ReverseStringFilter Create(TokenStream in) { return new ReverseStringFilter(in); }
public BlockList() { directory = BlockList<T>.newDirectory(256); directory[0] = BlockList<T>.newBlock(); tailBlock = directory[0]; }
public QueryScorer(WeightedSpanTerm[] weightedTerms){this.fieldWeightedSpanTerms = new Dictionary<string, WeightedSpanTerm>(weightedTerms.Length);foreach (var term in weightedTerms){WeightedSpanTerm existingTerm = fieldWeightedSpanTerms.ContainsKey(term.term) ? fieldWeightedSpanTerms[term.term] : null;if ((existingTerm == null) || (existingTerm.weight < term.weight)){fieldWeightedSpanTerms[term.term] = term;maxTermWeight = Math.Max(maxTermWeight, term.GetWeight());}}skipInitExtractor = true;}
public bool Equals(object _other){Debug.Assert(NeverEquals(_other));if (_other is MergedGroup other){if (groupValue == null){return other == null;}else{return groupValue.Equals(other);}}else{return false;}}
public final Encoding charset() { return cs; }
public DescribeExperimentResult DescribeExperiment(DescribeExperimentRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeExperiment(request); }
public EscherGraphics(HSSFShapeGroup escherGroup, HSSFWorkbook workbook, Color forecolor, float verticalPointsPerPixel){this.escherGroup = escherGroup;this.workbook = workbook;this.verticalPointsPerPixel = verticalPointsPerPixel;this.verticalPixelsPerPoint = 1 / verticalPointsPerPixel;this.font = new Font("Arial", 0, 10);this.foreground = forecolor;}
public string pattern() { return patternText; }
public DeleteRouteTableResult DeleteRouteTable(DeleteRouteTableRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteRouteTable(request); }
public AssociateVPCWithHostedZoneResult AssociateVPCWithHostedZone(AssociateVPCWithHostedZoneRequest request) { request = BeforeClientExecution(request); return ExecuteAssociateVPCWithHostedZone(request); }
public PutIntegrationResult PutIntegration(PutIntegrationRequest request) { request = BeforeClientExecution(request); return ExecutePutIntegration(request); }
public SimpleEntry<K, V>(K theKey, V theValue) { key = theKey; value = theValue; }
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {long byte0 = blocks[blocksOffset++] & 0xFF;long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 4) | (byte1 >> 4);long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;}}
public DisassociateConnectionFromLagResult DisassociateConnectionFromLag(DisassociateConnectionFromLagRequest request) {request = BeforeClientExecution(request);return ExecuteDisassociateConnectionFromLag(request);}
public FileMode GetOldMode() { return oldMode; }
public override string ToString() { return m.ToString(); }
public StopKeyPhrasesDetectionJobResult stopKeyPhrasesDetectionJob(StopKeyPhrasesDetectionJobRequest request){request = beforeClientExecution(request);return executeStopKeyPhrasesDetectionJob(request);}
public string ToString() { return "[Array Formula or Shared Formula]\n" + "row = " + GetRow() + "\n" + "col = " + GetColumn() + "\n"; }
public ListDominantLanguageDetectionJobsResult ListDominantLanguageDetectionJobs(ListDominantLanguageDetectionJobsRequest request){request = BeforeClientExecution(request);return ExecuteListDominantLanguageDetectionJobs(request);}
public string ToString() { return $"slice start={start} length={length} readerIndex={readerIndex}"; }
public static readonly int ParseHexInt4(byte digit){byte r = digits16[digit];if (r < 0)throw new IndexOutOfRangeException();return r;}
public Attribute(string name, string value) { setName(name); setValue(value); }
public DescribeStackSetOperationResult DescribeStackSetOperation(DescribeStackSetOperationRequest request){request = BeforeClientExecution(request);return ExecuteDescribeStackSetOperation(request);}
public HSSFCell GetCell(int cellnum) { return GetCell(cellnum, book.GetMissingCellPolicy()); }
public void Write(byte[] b) {WriteContinueIfRequired(b.Length); _ulrOutput.Write(b);}
public ResetImageAttributeRequest(string imageId, ResetImageAttributeName attribute) { setImageId(imageId); setAttribute(attribute.ToString()); }
public void discardResultContents() { resultContents = null; }
public ObjectId GetPeeledObjectId() { return GetLeaf().GetPeeledObjectId(); }
public void UndeprecateDomain(UndeprecateDomainRequest request) { request = BeforeClientExecution(request); ExecuteUndeprecateDomain(request); }
public void Write(LittleEndianOutput @out){@out.WriteByte((byte)(sid + GetPtgClass()));@out.WriteByte((byte)field_3_string.Length);@out.WriteByte(_is16bitUnicode ? (byte)0x01 : (byte)0x00);if (_is16bitUnicode){StringUtil.PutUnicodeLE(field_3_string, @out);}else{StringUtil.PutCompressedUnicode(field_3_string, @out);}}
public DeleteQueueResult deleteQueue(string queueUrl) { return deleteQueue(new DeleteQueueRequest().WithQueueUrl(queueUrl)); }
public void SetCheckEofAfterPackFooter(bool b) { checkEofAfterPackFooter = b; }
public void Swap(){int sBegin = beginA;int sEnd = endA;beginA = beginB;endA = endB;beginB = sBegin;endB = sEnd;}
public int GetPackedGitWindowSize() { return packedGitWindowSize; }
public PutMetricDataResult PutMetricData(PutMetricDataRequest request){request = BeforeClientExecution(request);return ExecutePutMetricData(request);}
public GetCelebrityRecognitionResult GetCelebrityRecognition(GetCelebrityRecognitionRequest request) { request = BeforeClientExecution(request); return ExecuteGetCelebrityRecognition(request); }
public CreateQueueRequest(string queueName) { SetQueueName(queueName); }
public Area3DPxg(int externalWorkbookNumber, SheetIdentifier sheetName, AreaReference arearef) : base(arearef){this.externalWorkbookNumber = externalWorkbookNumber;this.firstSheetName = sheetName.GetSheetIdentifier().GetName();if (sheetName is SheetRangeIdentifier){this.lastSheetName = ((SheetRangeIdentifier)sheetName).GetLastSheetIdentifier().GetName();}else{this.lastSheetName = null;}}
public void SetBaseline(long clockTime) { t0 = clockTime; timeout = t0 + ticksAllowed; }
public MoveAddressToVpcResponse MoveAddressToVpc(MoveAddressToVpcRequest request) { request = BeforeClientExecution(request); return ExecuteMoveAddressToVpc(request); }
public string ToString(){string coll = collectionModel.GetName();if (coll != null){return string.Format(System.Globalization.CultureInfo.InvariantCulture, "LM {0} - {1}", GetName(), coll);}else{return string.Format(System.Globalization.CultureInfo.InvariantCulture, "LM {0}", GetName());}}
public DescribeLagsResult DescribeLags(DescribeLagsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeLags(request); }
public AreaEval offset(int relFirstRowIx, int relLastRowIx, int relFirstColIx, int relLastColIx){if (_refEval == null){return _areaEval.offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx);}return _refEval.offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx);}
public ShortBuffer Put(short[] src, int srcOffset, int shortCount){byteBuffer.Limit(limit * SizeOf.SHORT);byteBuffer.Position(position * SizeOf.SHORT);if (byteBuffer is ReadWriteDirectByteBuffer readWriteDirectByteBuffer){readWriteDirectByteBuffer.Put(src, srcOffset, shortCount);}else{((ReadWriteHeapByteBuffer)byteBuffer).Put(src, srcOffset, shortCount);}this.position += shortCount;return this;}
public void Initialize(string cat) { this._cat = cat; }
public void Write(int oneByte) { out.Write(oneByte); written++; }
public DescribeImportImageTasksResult DescribeImportImageTasks(DescribeImportImageTasksRequest request){request = BeforeClientExecution(request);return ExecuteDescribeImportImageTasks(request);}
public ColumnInfoRecord(RecordInputStream in){_firstCol = in.readUShort();_lastCol = in.readUShort();_colWidth = in.readUShort();_xfIndex = in.readUShort();_options = in.readUShort();switch (in.remaining()){case 2:field_6_reserved = in.readUShort();break;case 1:field_6_reserved = in.readByte();break;case 0:field_6_reserved = 0;break;default:throw new RuntimeException("Unusual record size remaining=(" + in.remaining() + ")");}}
public Status(IndexDiff diff) : base(){this.diff = diff;hasUncommittedChanges = !diff.GetAdded().IsEmpty() || !diff.GetChanged().IsEmpty() || !diff.GetRemoved().IsEmpty() || !diff.GetMissing().IsEmpty() || !diff.GetModified().IsEmpty() || !diff.GetConflicting().IsEmpty();clean = !hasUncommittedChanges && diff.GetUntracked().IsEmpty();}
public CreateExperimentResult CreateExperiment(CreateExperimentRequest request) { request = BeforeClientExecution(request); return ExecuteCreateExperiment(request); }
public UnknownRecord Clone() => Copy();
public float[] Slice() {byteBuffer.Limit(limit * SizeOf.Float);byteBuffer.Position(position * SizeOf.Float);ByteBuffer bb = byteBuffer.Slice().Order(byteBuffer.Order());float[] result = new FloatToByteBufferAdapter(bb).ToArray();byteBuffer.Clear();return result;}
public DescribeSnapshotSchedulesResult DescribeSnapshotSchedules(DescribeSnapshotSchedulesRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeSnapshotSchedules(request); }
public ListImagesResult ListImages(ListImagesRequest request) { request = BeforeClientExecution(request); return ExecuteListImages(request); }
public Diff(int ins, int del, int rep, int noop) { INSERT = ins; DELETE = del; REPLACE = rep; NOOP = noop; }
public string ToFormulaString(string[] operands){StringBuilder buffer = new StringBuilder();buffer.Append(operands[0]);buffer.Append(",");buffer.Append(operands[1]);return buffer.ToString();}
public static void setupEnvironment(string[] workbookNames, ForkedEvaluator[] evaluators) {WorkbookEvaluator[] wbEvals = new WorkbookEvaluator[evaluators.Length];for (int i = 0; i < wbEvals.Length; i++) {wbEvals[i] = evaluators[i]._evaluator;}CollaboratingWorkbooksEnvironment.setup(workbookNames, wbEvals);}
public ListPhotoTagsRequest() : base("CloudPhoto", "2017-07-11", "ListPhotoTags", "cloudphoto"){SetProtocol(ProtocolType.HTTPS);}
public RandomSamplingFacetsCollector(int sampleSize, long seed) : base(false){this.sampleSize = sampleSize;this.random = new XORShift64Random(seed);this.sampledDocs = null;}
public AllocateStaticIpResult AllocateStaticIp(AllocateStaticIpRequest request) { request = BeforeClientExecution(request); return ExecuteAllocateStaticIp(request); }
public FeatRecord(RecordInputStream in){futureHeader = new FtrHeader(in);isf_sharedFeatureType = in.ReadShort();reserved1 = in.ReadByte();reserved2 = in.ReadInt();int cref = in.ReadUShort();cbFeatData = in.ReadInt();reserved3 = in.ReadShort();cellRefs = new CellRangeAddress[cref];for (int i = 0; i < cellRefs.Length; i++){cellRefs[i] = new CellRangeAddress(in);}switch (isf_sharedFeatureType){case FeatHdrRecord.SHAREDFEATURES_ISFPROTECTION:sharedFeature = new FeatProtection(in);break;case FeatHdrRecord.SHAREDFEATURES_ISFFEC2:sharedFeature = new FeatFormulaErr2(in);break;case FeatHdrRecord.SHAREDFEATURES_ISFFACTOID:sharedFeature = new FeatSmartTag(in);break;default:logger.Log(POILogger.ERROR, "Unknown Shared Feature " + isf_sharedFeatureType + " found!");break;}}
public class GitService {public RevCommit TryFastForward(RevCommit newCommit) {Ref head = GetHead();ObjectId headId = head.GetObjectId();if (headId == null) {throw new RefNotFoundException(string.Format(JGitText.Get().refNotResolved, Constants.HEAD));}
public CreateSnapshotScheduleResult CreateSnapshotSchedule(CreateSnapshotScheduleRequest request) { request = BeforeClientExecution(request); return ExecuteCreateSnapshotSchedule(request); }
public Record GetNext() {if (!HasNext()) {throw new RuntimeException("Attempt to read past end of record stream");}_countRead++;return _list[_nextIndex++];}
public string ToString() { return RawParseUtils.Decode(buf.ToArray()); }
public ListTablesRequest(string exclusiveStartTableName) { setExclusiveStartTableName(exclusiveStartTableName); }
public EnableAlarmActionsResult EnableAlarmActions(EnableAlarmActionsRequest request){request = BeforeClientExecution(request);return ExecuteEnableAlarmActions(request);}
public Builder() : this(true) { }
public bool Equals(object obj) {final State other = (State) obj;return is_final == other.is_final && Array.Equals(this.labels, other.labels) && ReferenceEquals(this.states, other.states);}
public TokenStream Create(TokenStream input) { return new EnglishPossessiveFilter(input); }
public void ClearFormatting(){_string = CloneStringIfRequired();_string.ClearFormatting();AddToSSTIfRequired();}
public int Get(int index, long[] arr, int off, int len){Debug.Assert(len > 0, "len must be > 0 (got " + len + ")");Debug.Assert(index >= 0 && index < valueCount);len = Math.Min(len, valueCount - index);Array.Fill(arr, 0, off + len);return len;}
public DeleteRouteResponseResult deleteRouteResponse(DeleteRouteResponseRequest request){request = beforeClientExecution(request);return executeDeleteRouteResponse(request);}
public string ToPrivateKey() { return Format(true, false); }
public CreatePresignedDomainUrlResult CreatePresignedDomainUrl(CreatePresignedDomainUrlRequest request) { request = BeforeClientExecution(request); return ExecuteCreatePresignedDomainUrl(request); }
public void Write(int oneChar) => doWrite(new char[] { (char)oneChar }, 0, 1);
public SSTRecord GetSSTRecord() { return sstRecord; }
public string ToString() { return "term=" + term + ",field=" + field + ",value=" + valueToString() + ",docIDUpto=" + docIDUpto; }
public bool IsSaturated(FuzzySet bloomFilter, FieldInfo fieldInfo) { return bloomFilter.GetSaturation() > 0.9f; }
public Builder(bool ignoreCase) { this.ignoreCase = ignoreCase; }
public string ToString() { return GetType().Name + "(maxBasicQueries: " + maxBasicQueries + ", queriesMade: " + queriesMade + ")"; }
public DeleteDataSourceResult DeleteDataSource(DeleteDataSourceRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteDataSource(request); }
public RebootNodeResult RebootNode(RebootNodeRequest request) { request = BeforeClientExecution(request); return ExecuteRebootNode(request); }
public void ProcessChildRecords() { ConvertRawBytesToEscherRecords(); }
public CreateOrUpdateTagsResult CreateOrUpdateTags(CreateOrUpdateTagsRequest request) { request = BeforeClientExecution(request); return ExecuteCreateOrUpdateTags(request); }
public FileSnapshot GetSnapShot() { return snapShot; }
public class ResourceLoader{private Type clazz;private Assembly loader;public Stream OpenResource(string resource){Stream stream = (clazz != null) ? clazz.GetManifestResourceStream(resource) : loader.GetManifestResourceStream(resource);if (stream == null)throw new IOException("Resource not found: " + resource);return stream;}}
public string ToString(){StringBuilder sb = new StringBuilder(64);sb.Append(GetType().Name).Append(" [");sb.Append("sid=").Append(HexDump.ShortToHex(_sid));sb.Append(" size=").Append(_data.Length);sb.Append(" : ").Append(HexDump.ToHex(_data));sb.Append("]\n");return sb.ToString();}
public int NextIndex() { return index; }
public string ToQueryString(EscapeQuerySyntax escaper){if (IsDefaultField(this.field)){return "\"" + GetTermEscapeQuoted(escaper) + "\"";}else{return this.field + ":" + "\"" + GetTermEscapeQuoted(escaper) + "\"";}}
public CalcModeRecord Clone() { return Copy(); }
public bool IsOutput() { return output; }
public CreateNetworkInterfaceResult CreateNetworkInterface(CreateNetworkInterfaceRequest request) { request = BeforeClientExecution(request); return ExecuteCreateNetworkInterface(request); }
public void Serialize(LittleEndianOutput @out) {@out.WriteShort(field_1_password);}
public StopDominantLanguageDetectionJobResult stopDominantLanguageDetectionJob(StopDominantLanguageDetectionJobRequest request){request = BeforeClientExecution(request);return ExecuteStopDominantLanguageDetectionJob(request);}
public ECSMetadataServiceCredentialsFetcher WithConnectionTimeout(int milliseconds) { this.connectionTimeoutInMilliseconds = milliseconds; return this; }
public GetGatewayGroupResult GetGatewayGroup(GetGatewayGroupRequest request){request = BeforeClientExecution(request);return ExecuteGetGatewayGroup(request);}
public ReadOnlyFloatArrayBuffer Slice() => new ReadOnlyFloatArrayBuffer(Remaining(), BackingArray, Offset + Position);
public static string Join(IEnumerable<string> parts, string separator, string lastSeparator){StringBuilder sb = new StringBuilder();int i = 0;int lastIndex = parts.Count() - 1;foreach (string part in parts){sb.Append(part);if (i == lastIndex - 1){sb.Append(lastSeparator);}else if (i != lastIndex){sb.Append(separator);}i++;}return sb.ToString();}
public string ToString() { return "(" + a.ToString() + " AND " + b.ToString() + ")"; }
public ListSubscriptionsByTopicRequest(string topicArn, string nextToken) { SetTopicArn(topicArn); SetNextToken(nextToken); }
public byte ReadByte() { return bytes[pos--]; }
public TerminateClientVpnConnectionsResponse TerminateClientVpnConnections(TerminateClientVpnConnectionsRequest request) { request = BeforeClientExecution(request); return ExecuteTerminateClientVpnConnections(request); }
public ReceiveMessageRequest(string queueUrl) { SetQueueUrl(queueUrl); }
public void Serialize(BinaryWriter writer) {writer.Write(field_1_barSpace);writer.Write(field_2_categorySpace);writer.Write(field_3_formatFlags);}
public object Common(object output1, object output2) => Outputs.Common((T)output1, (T)output2);
public CreateVariableResult CreateVariable(CreateVariableRequest request){request = BeforeClientExecution(request);return ExecuteCreateVariable(request);}
public static int match(byte[] b, int ptr, byte[] src){if (ptr + src.Length > b.Length) return -1;for (int i = 0; i < src.Length; i++, ptr++)if (b[ptr] != src[i]) return -1;return ptr;}
public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory){int bytesRemaining = readHeader(data, offset);int pos = offset + 8;int size = 0;field_1_rectX1 = LittleEndian.GetInt(data, pos + size);size += 4;field_2_rectY1 = LittleEndian.GetInt(data, pos + size);size += 4;field_3_rectX2 = LittleEndian.GetInt(data, pos + size);size += 4;field_4_rectY2 = LittleEndian.GetInt(data, pos + size);size += 4;bytesRemaining -= size;if (bytesRemaining != 0){throw new RecordFormatException("Expected no remaining bytes but got " + bytesRemaining);}return 8 + size + bytesRemaining;}
public CreateCloudFrontOriginAccessIdentityResult CreateCloudFrontOriginAccessIdentity(CreateCloudFrontOriginAccessIdentityRequest request) {request = BeforeClientExecution(request);return ExecuteCreateCloudFrontOriginAccessIdentity(request);}
public bool IsNamespaceAware() { return GetFeature(XmlPullParser.Feature.ProcessNamespaces); }
public void SetOverridable(bool on) { overridable = on; }
public string GetClassName() { return className; }
public DirectoryReader GetIndexReader() {if (indexReader != null) {indexReader.IncRef();}return indexReader;}
public int IndexOfKey(int key) { return BinarySearch(mKeys, 0, mSize, key); }
public BlankRecord(RecordInputStream in){field_1_row = in.readUShort();field_2_col = in.readShort();field_3_xf = in.readShort();}
public long Length() { return length; }
public PasswordRecord(RecordInputStream in) { field_1_password = in.ReadShort(); }
public Dictionary<TKey, TValue>(int capacity, float loadFactor) : this(capacity){if (loadFactor <= 0 || float.IsNaN(loadFactor)){throw new ArgumentException("Load factor: " + loadFactor);}}
public void Run(){long lastReopenStartNS = DateTimeOffset.Now.ToUnixTimeNanoseconds();while (!finish){while (!finish){reopenLock.Enter();try{bool hasWaiting = waitingGen > searchingGen;long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS);long sleepNS = nextReopenStartNS - DateTimeOffset.Now.ToUnixTimeNanoseconds();if (sleepNS > 0){reopenCond.Wait(new TimeSpan(0, 0, 0, 0, (int)sleepNS));}else{break;}}catch (ThreadInterruptedException ie){Thread.CurrentThread.Interrupt();return;}finally{reopenLock.Exit();}}if (finish){break;}lastReopenStartNS = DateTimeOffset.Now.ToUnixTimeNanoseconds();refreshStartGen = writer.GetMaxCompletedSequenceNumber();try{manager.MaybeRefreshBlocking();}catch (IOException ioe){throw new RuntimeException(ioe);}}}
public DeleteLoginProfileRequest(string userName) { SetUserName(userName); }
public E PollFirst() => (size == 0) ? null : RemoveFirstImpl();
public CreatePhotoRequest() : base("CloudPhoto", "2017-07-11", "CreatePhoto", "cloudphoto"){SetProtocol(ProtocolType.HTTPS);}
public string GetName() { return "resolve"; }
public int FindEndOffset(StringBuilder buffer, int start){if (start > buffer.Length || start < 0) return start;int offset, count = maxScan;for (offset = start; offset < buffer.Length && count > 0; count--){if (boundaryChars.Contains(buffer[offset])) return offset;offset++;}return start;}
public void SetObjectChecker(ObjectChecker oc) { objCheck = oc; }
public BaseRef(AreaEval ae){_refEval = null;_areaEval = ae;_firstRowIndex = ae.GetFirstRow();_firstColumnIndex = ae.GetFirstColumn();_height = ae.GetLastRow() - ae.GetFirstRow() + 1;_width = ae.GetLastColumn() - ae.GetFirstColumn() + 1;}
public CreateVpcEndpointResult CreateVpcEndpoint(CreateVpcEndpointRequest request) { request = BeforeClientExecution(request); return ExecuteCreateVpcEndpoint(request); }
public DeregisterWorkspaceDirectoryResult DeregisterWorkspaceDirectory(DeregisterWorkspaceDirectoryRequest request) { request = BeforeClientExecution(request); return ExecuteDeregisterWorkspaceDirectory(request); }
public ChartFRTInfoRecord(RecordInputStream in){rt = in.ReadShort();grbitFrt = in.ReadShort();verOriginator = in.ReadByte();verWriter = in.ReadByte();int cCFRTID = in.ReadShort();rgCFRTID = new CFRTID[cCFRTID];for (int i = 0; i < cCFRTID; i++){rgCFRTID[i] = new CFRTID(in);}}
public Merger NewMerger(Repository db) { return new OneSide(db, treeIndex); }
public CreateDataSourceFromRedshiftResult CreateDataSourceFromRedshift(CreateDataSourceFromRedshiftRequest request) {request = BeforeClientExecution(request);return ExecuteCreateDataSourceFromRedshift(request);}
public void ClearDFA() { for (int d = 0; d < decisionToDFA.Length; d++) { decisionToDFA[d] = new DFA(atn.GetDecisionState(d), d); } }
public void removeName(string name) { int index = getNameIndex(name); removeName(index); }
public string ToString(){StringBuilder buffer = new StringBuilder();buffer.Append("[RightMargin]\n");buffer.Append("    .margin               = " + " (" + GetMargin() + " )\n");buffer.Append("[/RightMargin]\n");return buffer.ToString();}
public RefreshAllRecord Clone() => Copy();
public StandardQueryNodeProcessorPipeline(QueryConfigHandler queryConfig) : base(queryConfig){add(new WildcardQueryNodeProcessor());add(new MultiFieldQueryNodeProcessor());add(new FuzzyQueryNodeProcessor());add(new RegexpQueryNodeProcessor());add(new MatchAllDocsQueryNodeProcessor());add(new OpenRangeQueryNodeProcessor());add(new PointQueryNodeProcessor());add(new PointRangeQueryNodeProcessor());add(new TermRangeQueryNodeProcessor());add(new AllowLeadingWildcardProcessor());add(new AnalyzerQueryNodeProcessor());add(new PhraseSlopQueryNodeProcessor());add(new BooleanQuery2ModifierNodeProcessor());add(new NoChildOptimizationQueryNodeProcessor());add(new RemoveDeletedQueryNodesProcessor());add(new RemoveEmptyNonLeafQueryNodeProcessor());add(new BooleanSingleChildOptimizationQueryNodeProcessor());add(new DefaultPhraseSlopQueryNodeProcessor());add(new BoostQueryNodeProcessor());add(new MultiTermRewriteMethodProcessor());}
public string FormatAsString(string sheetName, bool useAbsoluteAddress){StringBuilder sb = new StringBuilder();if (sheetName != null){sb.Append(SheetNameFormatter.Format(sheetName));sb.Append("!");}CellReference cellRefFrom = new CellReference(GetFirstRow(), GetFirstColumn(), useAbsoluteAddress, useAbsoluteAddress);CellReference cellRefTo = new CellReference(GetLastRow(), GetLastColumn(), useAbsoluteAddress, useAbsoluteAddress);sb.Append(cellRefFrom.FormatAsString());if (!cellRefFrom.Equals(cellRefTo) || IsFullColumnRange() || IsFullRowRange()){sb.Append(':');sb.Append(cellRefTo.FormatAsString());}return sb.ToString();}
public void Put(int index, byte value) { throw new ReadOnlyBufferException(); }
public void mode(int m) { _mode = m; }
public ShortBuffer Slice() { return new ReadWriteShortArrayBuffer(Remaining(), BackingArray, Offset + Position); }
public void Set(int index, long n) {if (count < index) throw new IndexOutOfRangeException(index);else if (count == index) Add(n);else entries[index] = n;}
public void PutFloat(float value) { throw new ReadOnlyBufferException(); }
public static double Max(double[] values) {double max = double.MinValue;foreach (double value in values) {max = Math.Max(max, value);}return max;}
public class UpdateRepoWebhookRequest : BaseRequest{public UpdateRepoWebhookRequest(){base("cr", "2016-06-07", "UpdateRepoWebhook", "cr");SetUriPattern("/repos/{RepoNamespace}/{RepoName}/webhooks/{WebhookId}");SetMethod(MethodType.POST);}}
public DeleteAttributesRequest(string domainName, string itemName, List<Attribute> attributes, UpdateCondition expected) {SetDomainName(domainName);SetItemName(itemName);SetAttributes(attributes);SetExpected(expected);}
public string ToString(){StringBuilder sb = new StringBuilder();sb.Append("[SXPI]\n");for (int i = 0; i < _fieldInfos.Length; i++){sb.Append("    item[").Append(i).Append("]=");_fieldInfos[i].AppendDebugInfo(sb);sb.Append('\n');}sb.Append("[/SXPI]\n");return sb.ToString();}
public bool IsSuccessful(){if (mergeResult != null)return mergeResult.GetMergeStatus().IsSuccessful();else if (rebaseResult != null)return rebaseResult.Status.IsSuccessful();return true;}
public void SetBytesValue(byte[] value) {SetBytesValue(new BytesRef(value));}
public DescribeConnectionsResult DescribeConnections(DescribeConnectionsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeConnections(request); }
public DeletePhotosRequest() : base("CloudPhoto", "2017-07-11", "DeletePhotos", "cloudphoto"){SetProtocol(ProtocolType.HTTPS);}
public void add(E obj) { iterator.Add(obj); subList.sizeChanged(true); end++; }
public static ByteBuffer Allocate(int capacity) {if (capacity < 0) {throw new ArgumentException();}return new ReadWriteHeapByteBuffer(capacity);}
public SrndQuery GetSubQuery(int qn) { return queries[qn]; }
public float CurrentScore(int docId, string field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) {if (numPayloadsSeen == 0) {return currentPayloadScore;} else {return Math.Min(currentPayloadScore, currentScore);}}
public string ToString() { StringBuilder sb = new StringBuilder(); sb.Append("[BLANK]\n"); sb.Append("    row= ").Append(HexDump.ShortToHex(GetRow())).Append("\n"); sb.Append("    col= ").Append(HexDump.ShortToHex(GetColumn())).Append("\n"); sb.Append("    xf = ").Append(HexDump.ShortToHex(GetXFIndex())).Append("\n"); sb.Append("[/BLANK]\n"); return sb.ToString(); }
public DescribeLogPatternResult DescribeLogPattern(DescribeLogPatternRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeLogPattern(request); }
public RegisterTransitGatewayMulticastGroupMembersResponse RegisterTransitGatewayMulticastGroupMembers(RegisterTransitGatewayMulticastGroupMembersRequest request) { request = BeforeClientExecution(request); return ExecuteRegisterTransitGatewayMulticastGroupMembers(request); }
public GetPhoneNumberSettingsResult GetPhoneNumberSettings(GetPhoneNumberSettingsRequest request) { request = BeforeClientExecution(request); return ExecuteGetPhoneNumberSettings(request); }
public ObjectId GetData() { return data; }
public bool IsDirect() { return false; }
public DeleteServerCertificateRequest(string serverCertificateName) { setServerCertificateName(serverCertificateName); }
public StringBuilder Append(double d) { RealToString.GetInstance().AppendDouble(this, d); return this; }
public GetEvaluationResult GetEvaluation(GetEvaluationRequest request) { request = BeforeClientExecution(request); return ExecuteGetEvaluation(request); }
public LinkedDataRecord GetDataName() { return dataName; }
public bool Find(int start){findPos = start;if (findPos < regionStart){findPos = regionStart;}else if (findPos >= regionEnd){matchFound = false;return false;}matchFound = FindImpl(address, input, findPos, matchOffsets);if (matchFound){findPos = matchOffsets[1];}return matchFound;}
public GetLifecyclePolicyPreviewResult GetLifecyclePolicyPreview(GetLifecyclePolicyPreviewRequest request) { request = BeforeClientExecution(request); return ExecuteGetLifecyclePolicyPreview(request); }
public SinglePositionTokenStream(string word){termAtt = AddAttribute(typeof(CharTermAttribute));posIncrAtt = AddAttribute(typeof(PositionIncrementAttribute));this.word = word;returned = true;}
public void Serialize(LittleEndianOutput @out) {@out.WriteShort(field_1_print_gridlines);}
public string ToString(){StringBuilder s = new StringBuilder();s.Append(Constants.typeString(GetType()));s.Append(' ');s.Append(Name());s.Append(' ');s.Append(commitTime);s.Append(' ');AppendCoreFlags(s);return s.ToString();}
public LsRemoteCommand SetRemote(string remote) { CheckCallable(); this.remote = remote; return this; }
public void CollapseRow(int rowNumber){int startRow = FindStartOfRowOutlineGroup(rowNumber);RowRecord rowRecord = GetRow(startRow);int nextRowIx = WriteHidden(rowRecord, startRow);RowRecord row = GetRow(nextRowIx);if (row == null){row = CreateRow(nextRowIx);InsertRow(row);}row.SetCollapsed(true);}
public AssociateSkillGroupWithRoomResult AssociateSkillGroupWithRoom(AssociateSkillGroupWithRoomRequest request) { request = BeforeClientExecution(request); return ExecuteAssociateSkillGroupWithRoom(request); }
public string ToString() {StringBuilder buffer = new StringBuilder();buffer.Append("[SERIESLIST]\n");buffer.Append("    .seriesNumbers= ").Append(" (").Append(string.Join(",", getSeriesNumbers())).Append(" )");buffer.Append("\n");buffer.Append("[/SERIESLIST]\n");return buffer.ToString();}
public QueryConfigHandler GetQueryConfigHandler() { return this.queryConfig; }
public string GetClassArg(){if (originalArgs != null){string className = originalArgs[CLASS_NAME];if (className != null){return className;}}return this.GetType().Name;}
