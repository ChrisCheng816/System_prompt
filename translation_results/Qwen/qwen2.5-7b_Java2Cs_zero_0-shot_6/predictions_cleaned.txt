public void Serialize(LittleEndianOutput out) { out.WriteShort(field_1_vcenter); }
public void AddAll(BlockList<T> src) { if (src.Size == 0) return; int srcDirIdx = 0; for (; srcDirIdx < src.TailDirIdx; srcDirIdx++) AddAll(src.Directory[srcDirIdx], 0, BLOCK_SIZE); if (src.TailBlkIdx != 0) AddAll(src.TailBlock, 0, src.TailBlkIdx); }
public void WriteByte(byte b) { if (upto == blockSize) { if (currentBlock != null) { AddBlock(currentBlock); } currentBlock = new byte[blockSize]; upto = 0; } currentBlock[upto++] = b; }
public ObjectId GetObjectId() { return objectId; }
public DeleteDomainEntryResult DeleteDomainEntry(DeleteDomainEntryRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteDomainEntry(request); }
public long ramBytesUsed() { return ((termOffsets != null) ? termOffsets.ramBytesUsed() : 0) + ((termsDictOffsets != null) ? termsDictOffsets.ramBytesUsed() : 0); }
public final string GetFullMessage() {byte[] raw = buffer;int msgB = RawParseUtils.TagMessage(raw, 0);if (msgB < 0) {return ""; }return RawParseUtils.Decode(guessEncoding(), raw, msgB, raw.Length);}
public POIFSFileSystem() : this(true){_header.setBATCount(1);_header.setBATArray(new int[] { 1 });BATBlock bb = BATBlock.createEmptyBATBlock(bigBlockSize, false);bb.setOurBlockIndex(1);_bat_blocks.Add(bb);setNextBlock(0, POIFSConstants.END_OF_CHAIN);setNextBlock(1, POIFSConstants.FAT_SECTOR_BLOCK);_property_table.setStartBlock(0);}
public void init(int address) { slice = pool.buffers[address >> ByteBlockPool.BYTE_BLOCK_SHIFT]; Debug.Assert(slice != null); upto = address & ByteBlockPool.BYTE_BLOCK_MASK; offset0 = address; Debug.Assert(upto < slice.Length); }
public SubmoduleAddCommand setPath(string path) { this.path = path; return this; }
public ListIngestionsResult ListIngestions(ListIngestionsRequest request) { request = BeforeClientExecution(request); return ExecuteListIngestions(request); }
public QueryParserTokenManager(CharStream stream, int lexState) : this(stream){SwitchTo(lexState);}
public GetShardIteratorResult GetShardIterator(GetShardIteratorRequest request) {request = beforeClientExecution(request);return executeGetShardIterator(request);}
public ModifyStrategyRequest() {base("aegis", "2016-11-11", "ModifyStrategy", "vipaegis");setMethod(MethodType.POST);}
public bool Ready() {lock (lockObj) {if (in == null) {throw new IOException("InputStreamReader is closed");}try {return bytes.HasRemaining() || in.Available() > 0;} catch (IOException e) {return false;}}}
public EscherOptRecord GetOptRecord() { return _optRecord; }
public int read(byte[] buffer, int offset, int length) {if (buffer == null) {throw new ArgumentNullException("buffer == null");}Array.CheckOffsetAndCount(buffer.Length, offset, length);if (length == 0) {return 0;}int copylen = count - pos < length ? count - pos : length;for (int i = 0; i < copylen; i++) {buffer[offset + i] = (byte) this.buffer[pos + i];}pos += copylen;return copylen;}
public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp) { this.sentenceOp = sentenceOp; }
public void print(string str) { Console.Write(str != null ? str : String.ValueOf((object) null)); }
public class NotImplementedFunctionException : Exception{private string functionName;public NotImplementedFunctionException(string functionName, Exception cause) : base(functionName, cause){this.functionName = functionName;}}
public V next() { return base.nextEntry().GetValue(); }
public final void readBytes(byte[] b, int offset, int len, bool useBuffer) throws IOException {int available = bufferLength - bufferPosition;if(len <= available){if(len>0) Buffer.BlockCopy(buffer, bufferPosition, b, offset, len);bufferPosition+=len;} else {if(available > 0){Buffer.BlockCopy(buffer, bufferPosition, b, offset, available);offset += available;len -= available;bufferPosition += available;}if (useBuffer && len<bufferSize){refill();if(bufferLength<len){Buffer.BlockCopy(buffer, 0, b, offset, bufferLength);throw new EOFException("read past EOF: " + this);} else {Buffer.BlockCopy(buffer, 0, b, offset, len);bufferPosition=len;}} else {long after = bufferStart+bufferPosition+len;if(after > length())throw new EOFException("read past EOF: " + this);readInternal(b, offset, len);bufferStart = after;bufferPosition = 0;bufferLength = 0;                    }}}
public TagQueueResult tagQueue(TagQueueRequest request) { request = beforeClientExecution(request); return executeTagQueue(request); }
public void remove() { throw new UnsupportedOperationException(); }
public CacheSubnetGroup ModifyCacheSubnetGroup(ModifyCacheSubnetGroupRequest request) { request = BeforeClientExecution(request); return ExecuteModifyCacheSubnetGroup(request); }
public void setParams(string params) {base.setParams(params); language = country = variant = ""; StringTokenizer st = new StringTokenizer(params, ","); if (st.hasMoreTokens()) language = st.nextToken(); if (st.hasMoreTokens()) country = st.nextToken(); if (st.hasMoreTokens()) variant = st.nextToken();}
public DeleteDocumentationVersionResult DeleteDocumentationVersion(DeleteDocumentationVersionRequest request) {request = BeforeClientExecution(request);return ExecuteDeleteDocumentationVersion(request);}
public bool Equals(object obj) {if (!(obj is FacetLabel other)) {return false;}if (length != other.length) {return false;}for (int i = length - 1; i >= 0; i--) {if (!components[i].Equals(other.components[i])) {return false;}}return true;}
public GetInstanceAccessDetailsResult GetInstanceAccessDetails(GetInstanceAccessDetailsRequest request) { request = beforeClientExecution(request); return executeGetInstanceAccessDetails(request); }
public HSSFPolygon createPolygon(HSSFChildAnchor anchor) {HSSFPolygon shape = new HSSFPolygon(this, anchor);shape.setParent(this);shape.setAnchor(anchor);shapes.Add(shape);onCreate(shape);return shape;}
public string GetSheetName(int sheetIndex) { return GetBoundSheetRec(sheetIndex).GetSheetname(); }
public GetDashboardResult GetDashboard(GetDashboardRequest request) {request = beforeClientExecution(request);return executeGetDashboard(request);}
public AssociateSigninDelegateGroupsWithAccountResult AssociateSigninDelegateGroupsWithAccount(AssociateSigninDelegateGroupsWithAccountRequest request) { request = BeforeClientExecution(request); return ExecuteAssociateSigninDelegateGroupsWithAccount(request); }
public void addMultipleBlanks(MulBlankRecord mbr) {for (int j = 0; j < mbr.getNumColumns(); j++) {BlankRecord br = new BlankRecord();br.setColumn((short) (j + mbr.getFirstColumn()));br.setRow(mbr.getRow());br.setXFIndex(mbr.getXFAt(j));insertCell(br);}}
public static string Quote(string str) {StringBuilder sb = new StringBuilder();sb.Append(@"\Q");int apos = 0;int k;while ((k = str.IndexOf(@"\E", apos)) >= 0) {sb.Append(str.Substring(apos, k + 2)).Append(@"\\E\Q");apos = k + 2;}return sb.Append(str.Substring(apos)).Append(@"\E").ToString();}
public byte[] PutInt(int value) {throw new ReadOnlyBufferException();}
public ArrayPtg(object[,] values2d){int nColumns = values2d.GetLength(1);int nRows = values2d.GetLength(0);_nColumns = (short)nColumns;_nRows = (short)nRows;object[] vv = new object[_nColumns * _nRows];for (int r = 0; r < nRows; r++){object[] rowData = values2d[r, 0] is object[] row ? row : new object[0];for (int c = 0; c < nColumns; c++){vv[GetValueIndex(c, r)] = rowData[c];}}_arrayValues = vv;_reserved0Int = 0;_reserved1Short = 0;_reserved2Byte = 0;}
public GetIceServerConfigResult GetIceServerConfig(GetIceServerConfigRequest request) { request = BeforeClientExecution(request); return ExecuteGetIceServerConfig(request); }
public string ToString() { return base.GetType().Name + " [" + GetValueAsString() + "]"; }
public string ToString(string field) { return "ToChildBlockJoinQuery (" + parentQuery.ToString() + ")"; }
public void IncRef() {refCount.InterlockedIncrement();}
public UpdateConfigurationSetSendingEnabledResult UpdateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) {request = BeforeClientExecution(request);return ExecuteUpdateConfigurationSetSendingEnabled(request);}
public int getNextXBATChainOffset() { return getXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE; }
public void MultiplyByPowerOfTen(int pow10) {TenPower tp = TenPower.GetInstance(Math.Abs(pow10));if (pow10 < 0) {mulShift(tp.Divisor, tp.DivisorShift);} else {mulShift(tp.Multiplicand, tp.MultiplierShift);}}
public string ToString(){StringBuilder b = new StringBuilder();int l = Length;b.Append(Path.DirectorySeparatorChar);for (int i = 0; i < l; i++){b.Append(GetComponent(i));if (i < l - 1){b.Append(Path.DirectorySeparatorChar);}}return b.ToString();}
public InstanceProfileCredentialsProvider WithFetcher(ECSMetadataServiceCredentialsFetcher fetcher) {this.fetcher = fetcher;this.fetcher.SetRoleName(roleName);return this;}
public void SetProgressMonitor(ProgressMonitor pm) {progressMonitor = pm;}
public void reset() { if (!first()) { ptr = 0; if (!eof()) parseEntry(); } }
public E previous() { if (iterator.PreviousIndex() >= start) { return iterator.Previous(); } throw new NoSuchElementException(); }
public string GetNewPrefix() { return this.newPrefix; }
public int indexOfValue(int value) {for (int i = 0; i < mSize; i++)if (mValues[i] == value)return i;return -1;}
public class Solution{public List<CharsRef> uniqueStems(char[] word, int length){List<CharsRef> stems = stem(word, length);if (stems.Count < 2){return stems;}HashSet<CharsRef> terms = new HashSet<CharsRef>(8, dictionary.ignoreCase);List<CharsRef> deduped = new List<CharsRef>();foreach (CharsRef s in stems){if (!terms.Contains(s)){deduped.Add(s);terms.Add(s);}}return deduped;}}
public GetGatewayResponsesResult GetGatewayResponses(GetGatewayResponsesRequest request) {request = BeforeClientExecution(request);return ExecuteGetGatewayResponses(request);}
public void setPosition(long pos) { currentBlockIndex = (int)(pos >> blockBits); currentBlock = blocks[currentBlockIndex]; currentBlockUpto = (int)(pos & blockMask); }
public long Skip(long n) {int s = (int) Math.Min(Available(), Math.Max(0, n));ptr += s;return s;}
public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig) {setBootstrapActionConfig(bootstrapActionConfig);}
public void Serialize(LittleEndianOutput output) {output.WriteShort(field_1_row);output.WriteShort(field_2_col);output.WriteShort(field_3_flags);output.WriteShort(field_4_shapeid);output.WriteShort((short)field_6_author.Length);output.WriteByte(field_5_hasMultibyte ? (byte)0x01 : (byte)0x00);if (field_5_hasMultibyte) {StringUtil.PutUnicodeLE(field_6_author, output);} else {StringUtil.PutCompressedUnicode(field_6_author, output);}if (field_7_padding != null) {output.WriteByte((byte)field_7_padding);}}
public int LastIndexOf(string str) {return LastIndexOf(str, count);}
public bool add(E object) { return addLastImpl(object); }
public void unsetSection(string section, string subsection) { ConfigSnapshot src, res; do { src = state.Get(); res = unsetSection(src, section, subsection); } while (!state.CompareAndSet(src, res)); }
public string GetTagName() { return tagName; }
public void AddSubRecord(int index, SubRecord element) {subrecords.Add(index, element);}
public bool remove(object o) {lock (mutex) {return delegate().remove(o);}}
public DoubleMetaphoneFilter Create(TokenStream input) { return new DoubleMetaphoneFilter(input, maxCodeLength, inject); }
public long Length() { return InCoreLength(); }
public void setValue(bool newValue) {value = newValue;}
public Pair(ContentSource oldSource, ContentSource newSource) { this.oldSource = oldSource; this.newSource = newSource; }
public int get(int i) {if (count <= i) throw new IndexOutOfRangeException(i); return entries[i];}
public CreateRepoRequest() : base("cr", "2016-06-07", "CreateRepo", "cr"){SetUriPattern("/repos");SetMethod(MethodType.PUT);}
public bool IsDeltaBaseAsOffset() {return deltaBaseAsOffset;}
public void remove() {if (expectedModCount == list.modCount) {if (lastLink != null) {Link<ET> next = lastLink.next;Link<ET> previous = lastLink.previous;next.previous = previous;previous.next = next;if (lastLink == link) {pos--;}link = previous;lastLink = null;expectedModCount++;list.size--;list.modCount++;} else {throw new IllegalStateException();}} else {throw new ConcurrentModificationException();}}
public MergeShardsResponse MergeShards(MergeShardsRequest request) { request = BeforeClientExecution(request); return ExecuteMergeShards(request); }
public AllocateHostedConnectionResult AllocateHostedConnection(AllocateHostedConnectionRequest request) { request = BeforeClientExecution(request); return ExecuteAllocateHostedConnection(request); }
public int GetBeginIndex() { return start; }
public static WeightedTerm[] getTerms(Query query) { return getTerms(query, false); }
public byte[] Compact() { throw new ReadOnlyBufferException(); }
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations){for (int i = 0; i < iterations; ++i){long byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = byte0 >> 2;long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 4) | (byte1 >> 4);long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 2) | (byte2 >> 6);values[valuesOffset++] = byte2 & 63;}}
public string GetHumanishName(){string s = GetPath();if ("/".Equals(s) || string.IsNullOrEmpty(s)){s = GetHost();}if (s == null){throw new ArgumentException();}string[] elements;if ("file".Equals(Scheme) || LocalFile.IsMatch(s)){elements = s.Split(new char[] { File.DirectorySeparatorChar, '/' }, StringSplitOptions.RemoveEmptyEntries);}else{elements = s.Split(new string[] { "/" }, StringSplitOptions.RemoveEmptyEntries);}if (elements.Length == 0){throw new ArgumentException();}string result = elements[elements.Length - 1];if (Constants.DOT_GIT.Equals(result)){result = elements[elements.Length - 2];}else if (result.EndsWith(Constants.DOT_GIT_EXT)){result = result.Substring(0, result.Length - Constants.DOT_GIT_EXT.Length());}return result;}
public DescribeNotebookInstanceLifecycleConfigResult DescribeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeNotebookInstanceLifecycleConfig(request); }
public string GetAccessKeySecret() { return this.accessKeySecret; }
public CreateVpnConnectionResult CreateVpnConnection(CreateVpnConnectionRequest request) { request = beforeClientExecution(request); return executeCreateVpnConnection(request); }
public DescribeVoicesResult DescribeVoices(DescribeVoicesRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeVoices(request); }
public ListMonitoringExecutionsResult ListMonitoringExecutions(ListMonitoringExecutionsRequest request) { request = BeforeClientExecution(request); return ExecuteListMonitoringExecutions(request); }
public DescribeJobRequest(string vaultName, string jobId) {setVaultName(vaultName);setJobId(jobId);}
public EscherRecord GetEscherRecord(int index) { return escherRecords.Get(index); }
public GetApisResult getApis(GetApisRequest request) { request = beforeClientExecution(request); return executeGetApis(request); }
public DeleteSmsChannelResult DeleteSmsChannel(DeleteSmsChannelRequest request) {request = BeforeClientExecution(request);return ExecuteDeleteSmsChannel(request);}
public TrackingRefUpdate GetTrackingRefUpdate() { return trackingRefUpdate; }
public void print(bool b) {print(b.ToString());}
public QueryNode getChild() {return getChildren().ToList()[0];}
public NotIgnoredFilter(int workdirTreeIndex) { this.index = workdirTreeIndex; }
public AreaRecord(RecordInputStream in) { field_1_formatFlags = in.readShort(); }
public GetThumbnailRequest() : base("CloudPhoto", "2017-07-11", "GetThumbnail", "cloudphoto"){SetProtocol(ProtocolType.HTTPS);}
public DescribeTransitGatewayVpcAttachmentsResult DescribeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeTransitGatewayVpcAttachments(request); }
public PutVoiceConnectorStreamingConfigurationResult putVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request) { request = beforeClientExecution(request); return executePutVoiceConnectorStreamingConfiguration(request); }
public OrdRange getOrdRange(string dim) { return prefixToOrdRange[dim]; }
public string ToString(){string symbol = "";if (startIndex >= 0 && startIndex < GetInputStream().Size){symbol = GetInputStream().GetText(new Interval(startIndex, startIndex));symbol = Utils.EscapeWhitespace(symbol, false);}return string.Format(System.Globalization.CultureInfo.CurrentCulture, "{0}('{1}')", LexerNoViableAltException.GetType().Name, symbol);}
public E Peek() { return peekFirstImpl(); }
public CreateWorkspacesResult CreateWorkspaces(CreateWorkspacesRequest request) { request = BeforeClientExecution(request); return ExecuteCreateWorkspaces(request); }
public NumberFormatIndexRecord clone() { return copy(); }
public DescribeRepositoriesResult DescribeRepositories(DescribeRepositoriesRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeRepositories(request); }
public SparseIntArray(int initialCapacity){initialCapacity = ArrayUtils.idealIntArraySize(initialCapacity);mKeys = new int[initialCapacity];mValues = new int[initialCapacity];mSize = 0;}
public HyphenatedWordsFilter create(TokenStream input) {return new HyphenatedWordsFilter(input);}
public CreateDistributionWithTagsResult CreateDistributionWithTags(CreateDistributionWithTagsRequest request) { request = BeforeClientExecution(request); return ExecuteCreateDistributionWithTags(request); }
public RandomAccessFile(string fileName, string mode) : this(new FileInfo(fileName), mode) {}
public DeleteWorkspaceImageResult DeleteWorkspaceImage(DeleteWorkspaceImageRequest request) { request = beforeClientExecution(request); return executeDeleteWorkspaceImage(request); }
public static string ToHex(long value) {StringBuilder sb = new StringBuilder(16);WriteHex(sb, value, 16, "");return sb.ToString();}
public UpdateDistributionResult UpdateDistribution(UpdateDistributionRequest request) { request = beforeClientExecution(request); return executeUpdateDistribution(request); }
public HSSFColor getColor(short index) {if (index == HSSFColorPredefined.AUTOMATIC.getIndex()) {return HSSFColorPredefined.AUTOMATIC.getColor();}byte[] b = _palette.getColor(index);return (b == null) ? null : new CustomColor(index, b);}
public IValue evaluate(IValue[] operands, int srcRow, int srcCol) {throw new NotImplementedFunctionException(_functionName);}
public void Serialize(LittleEndianOutput output) {output.WriteShort((short)field_1_number_crn_records);output.WriteShort((short)field_2_sheet_table_index);}
public DescribeDBEngineVersionsResult DescribeDBEngineVersions() { return DescribeDBEngineVersions(new DescribeDBEngineVersionsRequest()); }
public FormatRun(short character, short fontIndex) { this._character = character; this._fontIndex = fontIndex; }
public static byte[] toBigEndianUtf16Bytes(char[] chars, int offset, int length) {byte[] result = new byte[length * 2];int end = offset + length;int resultIndex = 0;for (int i = offset; i < end; ++i) {char ch = chars[i];result[resultIndex++] = (byte) (ch >> 8);result[resultIndex++] = (byte) ch;}return result;}
public UploadArchiveResult UploadArchive(UploadArchiveRequest request) { request = BeforeClientExecution(request); return ExecuteUploadArchive(request); }
public List<Token> GetHiddenTokensToLeft(int tokenIndex) { return GetHiddenTokensToLeft(tokenIndex, -1); }
public bool Equals(object obj) {if (this == obj)return true;if (!base.Equals(obj))return false;if (GetType() != obj.GetType())return false;AutomatonQuery other = (AutomatonQuery) obj;if (!compiled.Equals(other.compiled))return false;if (term == null) {if (other.term != null)return false;} else if (!term.Equals(other.term))return false;return true;}
public SpanQuery makeSpanClause() {SpanQuery[] spanQueries = new SpanQuery[size()];Dictionary<SpanQuery, float> weightBySpanQuery = getWeightBySpanQuery();int i = 0;foreach (var sqi in weightBySpanQuery.Keys) {SpanQuery sq = sqi;float boost = weightBySpanQuery[sqi];if (boost != 1f) {sq = new SpanBoostQuery(sq, boost);}spanQueries[i++] = sq;}if (spanQueries.Length == 1) return spanQueries[0];else return new SpanOrQuery(spanQueries);}
public StashCreateCommand StashCreate() { return new StashCreateCommand(repo); }
public FieldInfo fieldInfo(String fieldName) { return byName.get(fieldName); }
public DescribeEventSourceResult DescribeEventSource(DescribeEventSourceRequest request){request = BeforeClientExecution(request);return ExecuteDescribeEventSource(request);}
public GetDocumentAnalysisResult getDocumentAnalysis(GetDocumentAnalysisRequest request) { request = beforeClientExecution(request); return executeGetDocumentAnalysis(request); }
public CancelUpdateStackResult CancelUpdateStack(CancelUpdateStackRequest request) { request = BeforeClientExecution(request); return ExecuteCancelUpdateStack(request); }
public ModifyLoadBalancerAttributesResult ModifyLoadBalancerAttributes(ModifyLoadBalancerAttributesRequest request) { request = BeforeClientExecution(request); return ExecuteModifyLoadBalancerAttributes(request); }
public SetInstanceProtectionResult SetInstanceProtection(SetInstanceProtectionRequest request) { request = BeforeClientExecution(request); return ExecuteSetInstanceProtection(request); }
public ModifyDBProxyResult ModifyDBProxy(ModifyDBProxyRequest request) {request = beforeClientExecution(request);return executeModifyDBProxy(request);}
public void add(char[] output, int offset, int len, int endOffset, int posLength) {if (count == outputs.Length) {outputs = ArrayUtil.grow(outputs, count + 1);}if (count == endOffsets.Length) {int[] next = new int[ArrayUtil.oversize(1 + count, sizeof(int))];Array.Copy(endOffsets, 0, next, 0, count);endOffsets = next;}if (count == posLengths.Length) {int[] next = new int[ArrayUtil.oversize(1 + count, sizeof(int))];Array.Copy(posLengths, 0, next, 0, count);posLengths = next;}if (outputs[count] == null) {outputs[count] = new CharsRefBuilder();}outputs[count].CopyChars(output, offset, len);endOffsets[count] = endOffset;posLengths[count] = posLength;count++;}
public FetchLibrariesRequest() : base("CloudPhoto", "2017-07-11", "FetchLibraries", "cloudphoto") {SetProtocol(ProtocolType.HTTPS);}
public bool Exists() { return fs.Exists(objects); }
public FilterOutputStream(OutputStream out) { this.out = out; }
public ScaleClusterRequest() : base("CS", "2015-12-15", "ScaleCluster", "csk"){SetUriPattern("/clusters/[ClusterId]");SetMethod(MethodType.PUT);}
public DataValidationConstraint createTimeConstraint(int operatorType, string formula1, string formula2) { return DVConstraint.CreateTimeConstraint(operatorType, formula1, formula2); }
public ListObjectParentPathsResult listObjectParentPaths(ListObjectParentPathsRequest request) { request = beforeClientExecution(request); return executeListObjectParentPaths(request); }
public DescribeCacheSubnetGroupsResult DescribeCacheSubnetGroups(DescribeCacheSubnetGroupsRequest request) { request = beforeClientExecution(request); return executeDescribeCacheSubnetGroups(request); }
public void setSharedFormula(bool flag) {field_5_options = sharedFormula.setShortBoolean(field_5_options, flag);}
public bool IsReuseObjects() { return reuseObjects; }
public ErrorNode AddErrorNode(Token badToken) {ErrorNodeImpl t = new ErrorNodeImpl(badToken);AddAnyChild(t);t.SetParent(this);return t;}
public class LatvianStemFilterFactory : FilterFactory{public LatvianStemFilterFactory(Dictionary<string, string> args) : base(args){if (!args.isEmpty()){throw new ArgumentException("Unknown parameters: " + args);}}}
public EventSubscription RemoveSourceIdentifierFromSubscription(RemoveSourceIdentifierFromSubscriptionRequest request) { request = BeforeClientExecution(request); return ExecuteRemoveSourceIdentifierFromSubscription(request); }
public static TokenFilterFactory ForName(string name, Dictionary<string, string> args) {return loader.NewInstance(name, args);}
public AddAlbumPhotosRequest() : base("CloudPhoto", "2017-07-11", "AddAlbumPhotos", "cloudphoto") {setProtocol(ProtocolType.HTTPS);}
public GetThreatIntelSetResult GetThreatIntelSet(GetThreatIntelSetRequest request) { request = BeforeClientExecution(request); return ExecuteGetThreatIntelSet(request); }
public RevFilter Clone() { return new Binary(a.Clone(), b.Clone()); }
public bool Equals(object o) { return o is ArmenianStemmer; }
public readonly bool HasArray() { return ProtectedHasArray(); }
public UpdateContributorInsightsResult UpdateContributorInsights(UpdateContributorInsightsRequest request) { request = BeforeClientExecution(request); return ExecuteUpdateContributorInsights(request); }
public void unwriteProtectWorkbook() { records.Remove(fileShare); records.Remove(writeProtect); fileShare = null; writeProtect = null; }
public SolrSynonymParser(bool dedup, bool expand, Analyzer analyzer) : base(dedup, analyzer) { this.expand = expand; }
public RequestSpotInstancesResult RequestSpotInstances(RequestSpotInstancesRequest request) { request = beforeClientExecution(request); return ExecuteRequestSpotInstances(request); }
public byte[] getObjectData() { return findObjectRecord().GetObjectData(); }
public GetContactAttributesResult GetContactAttributes(GetContactAttributesRequest request) { request = BeforeClientExecution(request); return ExecuteGetContactAttributes(request); }
public string ToString() { return GetKey() + ": " + GetValue(); }
public ListTextTranslationJobsResult ListTextTranslationJobs(ListTextTranslationJobsRequest request){request = BeforeClientExecution(request);return ExecuteListTextTranslationJobs(request);}
public GetContactMethodsResult GetContactMethods(GetContactMethodsRequest request) { request = BeforeClientExecution(request); return ExecuteGetContactMethods(request); }
public static short lookupIndexByName(string name){FunctionMetadata fd = getInstance().getFunctionByNameInternal(name);if (fd == null){fd = getInstanceCetab().getFunctionByNameInternal(name);if (fd == null){return -1;}}return (short)fd.getIndex();}
public DescribeAnomalyDetectorsResult DescribeAnomalyDetectors(DescribeAnomalyDetectorsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeAnomalyDetectors(request); }
public static string insertId(string message, ObjectId changeId) {return insertId(message, changeId, false);}
public long GetObjectSize(AnyObjectId objectId, int typeHint) throws MissingObjectException, IncorrectObjectTypeException, IOException{long sz = db.GetObjectSize(this, objectId);if (sz < 0){if (typeHint == OBJ_ANY)throw new MissingObjectException(objectId.copy(), JGitText.Get().unknownObjectType2);throw new MissingObjectException(objectId.copy(), typeHint);}return sz;}
public ImportInstallationMediaResult ImportInstallationMedia(ImportInstallationMediaRequest request) { request = BeforeClientExecution(request); return ExecuteImportInstallationMedia(request); }
public PutLifecycleEventHookExecutionStatusResult PutLifecycleEventHookExecutionStatus(PutLifecycleEventHookExecutionStatusRequest request) { request = BeforeClientExecution(request); return ExecutePutLifecycleEventHookExecutionStatus(request); }
public NumberPtg(LittleEndianInput in)  {this(in.readDouble());}
public GetFieldLevelEncryptionConfigResult GetFieldLevelEncryptionConfig(GetFieldLevelEncryptionConfigRequest request) { request = BeforeClientExecution(request); return ExecuteGetFieldLevelEncryptionConfig(request); }
public DescribeDetectorResult DescribeDetector(DescribeDetectorRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeDetector(request); }
public ReportInstanceStatusResult ReportInstanceStatus(ReportInstanceStatusRequest request) { request = BeforeClientExecution(request); return ExecuteReportInstanceStatus(request); }
public DeleteAlarmResult deleteAlarm(DeleteAlarmRequest request) {request = beforeClientExecution(request);return executeDeleteAlarm(request);}
public TokenStream create(TokenStream input) { return new PortugueseStemFilter(input); }
public FtCblsSubRecord() { reserved = new byte[ENCODED_SIZE]; }
public override bool Remove(object obj) { lock (mutex) { return c.Remove(obj); } }
public GetDedicatedIpResult getDedicatedIp(GetDedicatedIpRequest request) { request = beforeClientExecution(request); return executeGetDedicatedIp(request); }
public string ToString() { return precedence + " >= _p"; }
public ListStreamProcessorsResult listStreamProcessors(ListStreamProcessorsRequest request) { request = beforeClientExecution(request); return executeListStreamProcessors(request); }
public DeleteLoadBalancerPolicyRequest(string loadBalancerName, string policyName) {setLoadBalancerName(loadBalancerName);setPolicyName(policyName);}
public WindowProtectRecord(int options) { _options = options; }
public UnbufferedCharStream(int bufferSize) { n = 0; data = new int[bufferSize]; }
public GetOperationsResult GetOperations(GetOperationsRequest request) { request = BeforeClientExecution(request); return ExecuteGetOperations(request); }
public void copyRawTo(byte[] b, int o) {NB.encodeInt32(b, o, w1);NB.encodeInt32(b, o + 4, w2);NB.encodeInt32(b, o + 8, w3);NB.encodeInt32(b, o + 12, w4);NB.encodeInt32(b, o + 16, w5);}
public WindowOneRecord(RecordInputStream in){field_1_h_hold = in.readShort();field_2_v_hold = in.readShort();field_3_width = in.readShort();field_4_height = in.readShort();field_5_options = in.readShort();field_6_active_sheet = in.readShort();field_7_first_visible_tab = in.readShort();field_8_num_selected_tabs = in.readShort();field_9_tab_width_ratio = in.readShort();}
public StopWorkspacesResult StopWorkspaces(StopWorkspacesRequest request) { request = BeforeClientExecution(request); return ExecuteStopWorkspaces(request); }
public void close() { if (isOpen) { isOpen = false; try { dump(); } finally { try { channel.Truncate(fileLength); } finally { try { channel.Close(); } finally { fos.Close(); } } } } }
public DescribeMatchmakingRuleSetsResult DescribeMatchmakingRuleSets(DescribeMatchmakingRuleSetsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeMatchmakingRuleSets(request); }
public string getPronunciation(int wordId, char[] surface, int off, int len) { return null; }
public string GetPath() { return pathStr; }
public static double DevSq(double[] v) {double r = double.NaN;if (v != null && v.Length >= 1) {double m = 0;double s = 0;int n = v.Length;for (int i = 0; i < n; i++) {s += v[i];}m = s / n;s = 0;for (int i = 0; i < n; i++) {s += (v[i] - m) * (v[i] - m);}r = (n == 1) ? 0 : s;}return r;}
public DescribeResizeResult DescribeResize(DescribeResizeRequest request) { request = beforeClientExecution(request); return executeDescribeResize(request); }
public bool HasPassedThroughNonGreedyDecision() { return passedThroughNonGreedyDecision; }
public int end() { return end(0); }
public void Traverse(CellHandler handler){int firstRow = range.GetFirstRow();int lastRow = range.GetLastRow();int firstColumn = range.GetFirstColumn();int lastColumn = range.GetLastColumn();int width = lastColumn - firstColumn + 1;SimpleCellWalkContext ctx = new SimpleCellWalkContext();Row currentRow = null;Cell currentCell = null;for (ctx.rowNumber = firstRow; ctx.rowNumber <= lastRow; ++ctx.rowNumber){currentRow = sheet.GetRow(ctx.rowNumber);if (currentRow == null){continue;}for (ctx.colNumber = firstColumn; ctx.colNumber <= lastColumn; ++ctx.colNumber){currentCell = currentRow.GetCell(ctx.colNumber);if (currentCell == null){continue;}if (IsEmpty(currentCell) && !traverseEmptyCells){continue;}long rowSize = ArithmeticUtils.MulAndCheck((long)ArithmeticUtils.SubAndCheck(ctx.rowNumber, firstRow), (long)width);ctx.ordinalNumber = ArithmeticUtils.AddAndCheck(rowSize, (ctx.colNumber - firstColumn + 1));handler.OnCell(currentCell, ctx);}}}
public int GetReadIndex() { return pos; }
public int CompareTo(ScoreTerm other) {if (this.boost == other.boost)return other.bytes.get().CompareTo(this.bytes.get());elsereturn Float.compare(this.boost, other.boost);}
public int normalize(char[] s, int len) { for (int i = 0; i < len; i++) { switch (s[i]) { case FARSI_YEH: case YEH_BARREE: s[i] = YEH; break; case KEHEH: s[i] = KAF; break; case HEH_YEH: case HEH_GOAL: s[i] = HEH; break; case HAMZA_ABOVE: len = delete(s, i, len); i--; break; default: break; } } return len; }
public void serialize(LittleEndianOutput @out) {@out.writeShort(_options);}
public DiagnosticErrorListener(bool exactOnly) {this.exactOnly = exactOnly;}
public KeySchemaElement(string attributeName, KeyType keyType) { SetAttributeName(attributeName); SetKeyType(keyType.ToString()); }
public GetAssignmentResult GetAssignment(GetAssignmentRequest request) { request = BeforeClientExecution(request); return ExecuteGetAssignment(request); }
public bool HasObject(AnyObjectId id) {return FindOffset(id) != -1;}
public GroupingSearch SetAllGroups(bool allGroups) {this.allGroups = allGroups;return this;}
public void SetMultiValued(string dimName, bool v) {DimConfig ft = fieldTypes[dimName];if (ft == null) {ft = new DimConfig();fieldTypes[dimName] = ft;}ft.multiValued = v;}
public int getCellsVal() {IEnumerator<Character> i = cells.Keys.GetEnumerator();int size = 0;while (i.MoveNext()) {Character c = i.Current;Cell e = at(c);if (e.cmd >= 0) {size++;}}return size;}
public DeleteVoiceConnectorResult deleteVoiceConnector(DeleteVoiceConnectorRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteVoiceConnector(request); }
public DeleteLifecyclePolicyResult DeleteLifecyclePolicy(DeleteLifecyclePolicyRequest request) {request = beforeClientExecution(request);return executeDeleteLifecyclePolicy(request);}
public void write(byte[] b) { int len = b.Length; checkPosition(len); Array.Copy(b, 0, _buf, _writeIndex, len); _writeIndex += len; }
public RebaseResult GetRebaseResult() { return this.rebaseResult; }
public static int getNearestSetSize(int maxNumberOfValuesExpected, float desiredSaturation) { for (int i = 0; i < usableBitSetSizes.Length; i++) { int numSetBitsAtDesiredSaturation = (int)(usableBitSetSizes[i] * desiredSaturation); int estimatedNumUniqueValues = getEstimatedNumberUniqueValuesAllowingForCollisions(usableBitSetSizes[i], numSetBitsAtDesiredSaturation); if (estimatedNumUniqueValues > maxNumberOfValuesExpected) { return usableBitSetSizes[i]; } } return -1; }
public DescribeDashboardResult DescribeDashboard(DescribeDashboardRequest request) { request = beforeClientExecution(request); return executeDescribeDashboard(request); }
public CreateSegmentResult CreateSegment(CreateSegmentRequest request) { request = BeforeClientExecution(request); return ExecuteCreateSegment(request); }
public string ToString() {StringBuilder buffer = new StringBuilder();buffer.Append("[DBCELL]\n");buffer.Append("    .rowoffset = ").Append(HexDump.IntToHex(field_1_row_offset)).Append("\n");for (int k = 0; k < field_2_cell_offsets.Length; k++) {buffer.Append("    .cell_").Append(k).Append(" = ").Append(HexDump.ShortToHex(field_2_cell_offsets[k])).Append("\n");}buffer.Append("[/DBCELL]\n");return buffer.ToString();}
public List<string> GetUndeletedList() { return undeletedList; }
public string ToString() {return "[INTERFACEEND/]\n";}
public MergeScheduler Clone() { return this; }
public PlainTextDictionary(Reader reader) { in = new StreamReader(reader); }
public StringBuilder Append(CharSequence csq) { if (csq == null) { AppendNull(); } else { Append0(csq, 0, csq.Length); } return this; }
public ListAssociatedStacksResult ListAssociatedStacks(ListAssociatedStacksRequest request) {request = BeforeClientExecution(request);return ExecuteListAssociatedStacks(request);}
public static double avedev(double[] v) {double r = 0;double m = 0;double s = 0;for (int i = 0, iSize = v.Length; i < iSize; i++) {s += v[i];}m = s / v.Length;s = 0;for (int i = 0, iSize = v.Length; i < iSize; i++) {s += Math.Abs(v[i] - m);}r = s / v.Length;return r;}
public DescribeByoipCidrsResult DescribeByoipCidrs(DescribeByoipCidrsRequest request) {request = BeforeClientExecution(request);return ExecuteDescribeByoipCidrs(request);}
public GetDiskResult GetDisk(GetDiskRequest request) { request = BeforeClientExecution(request); return ExecuteGetDisk(request); }
public DBClusterParameterGroup CreateDBClusterParameterGroup(CreateDBClusterParameterGroupRequest request) { request = BeforeClientExecution(request); return ExecuteCreateDBClusterParameterGroup(request); }
public static CharBuffer Wrap(char[] array, int start, int charCount){Array.CheckOffsetAndCount(array.Length, start, charCount);CharBuffer buf = new ReadWriteCharArrayBuffer(array);buf.Position = start;buf.Limit = start + charCount;return buf;}
public SubmoduleStatusType GetStatus() { return type; }
public DescribeGameServerGroupResult DescribeGameServerGroup(DescribeGameServerGroupRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeGameServerGroup(request); }
public Pattern pattern() { return pattern; }
public V setValue(V obj) {throw new UnsupportedOperationException();}
public StringBuilder stem(CharSequence word) {CharSequence cmd = stemmer.getLastOnPath(word);if (cmd == null) return null;buffer.Length = 0;buffer.Append(word);Diff.apply(buffer, cmd);if (buffer.Length > 0) return buffer;else return null;}
public RenameFaceRequest() {base("CloudPhoto", "2017-07-11", "RenameFace", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public char RequireChar(Dictionary<string, string> args, string name) { return Require(args, name)[0]; }
public static string ToStringTree(Tree t) { return ToStringTree(t, (List<string>)null); }
public string ToString() {return "<deleted/>";}
public GetRepoWebhookLogListRequest() {base("cr", "2016-06-07", "GetRepoWebhookLogList", "cr");this.setUriPattern("/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]/logs");this.setMethod(MethodType.GET);}
public GetJobUnlockCodeResult GetJobUnlockCode(GetJobUnlockCodeRequest request) { request = beforeClientExecution(request); return executeGetJobUnlockCode(request); }
public RemoveTagsRequest(string resourceId) {setResourceId(resourceId);}
public short getGB2312Id(char ch) {try {byte[] buffer = Encoding.GetEncoding("GB2312").GetBytes(ch.ToString());if (buffer.Length != 2) {return -1;}int b0 = (buffer[0] & 0x0FF) - 161; int b1 = (buffer[1] & 0x0FF) - 161; return (short) (b0 * 94 + b1);} catch (Exception e) {throw new RuntimeException(e);}}
public BatchRefUpdate AddCommand(IEnumerable<ReceiveCommand> cmd) { commands.AddRange(cmd); return this; }
public short checkExternSheet(int sheetNumber) { return (short)getOrCreateLinkTable().checkExternSheet(sheetNumber); }
public override bool Equals(object obj) { return c.Equals(obj); }
public class QueryBuilder{public BooleanQuery Build(QueryNode queryNode) throws QueryNodeException{AnyQueryNode andNode = (AnyQueryNode)queryNode;BooleanQuery.Builder bQuery = new BooleanQuery.Builder();List<QueryNode> children = andNode.Children;if (children != null){foreach (QueryNode child in children){object obj = child.GetTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);if (obj != null){Query query = (Query)obj;try{bQuery.Add(query, BooleanClause.Occur.SHOULD);}catch (TooManyClauses ex){throw new QueryNodeException(new MessageImpl(QueryParserMessages.EMPTY_MESSAGE), ex);}}}}bQuery.MinimumNumberShouldMatch = andNode.MinimumMatchingElements;return bQuery.Build();}}
public DescribeStreamProcessorResult DescribeStreamProcessor(DescribeStreamProcessorRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeStreamProcessor(request); }
public DescribeDashboardPermissionsResult DescribeDashboardPermissions(DescribeDashboardPermissionsRequest request) { request = beforeClientExecution(request); return executeDescribeDashboardPermissions(request); }
public Ref peel(Ref ref) {try {return getRefDatabase().peel(ref);} catch (IOException e) {return ref;}}
public long RamBytesUsed() { return RamUsageEstimator.AlignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER + 2 * int.BYTES + RamUsageEstimator.NUM_BYTES_OBJECT_REF) + RamUsageEstimator.SizeOf(blocks); }
public GetDomainSuggestionsResult GetDomainSuggestions(GetDomainSuggestionsRequest request) { request = BeforeClientExecution(request); return ExecuteGetDomainSuggestions(request); }
public DescribeStackEventsResult DescribeStackEvents(DescribeStackEventsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeStackEvents(request); }
public void setRule(int idx, ConditionalFormattingRule cfRule) { setRule(idx, (HSSFConditionalFormattingRule)cfRule); }
public CreateResolverRuleResult CreateResolverRule(CreateResolverRuleRequest request) { request = BeforeClientExecution(request); return ExecuteCreateResolverRule(request); }
public SeriesIndexRecord(RecordInputStream input) {field_1_index = input.readShort();}
public GetStylesRequest() : base("lubancloud", "2018-05-09", "GetStyles", "luban"){SetMethod(MethodType.POST);}
public void Serialize(LittleEndianOutput @out) { @out.WriteShort(field_1_gridset_flag); }
public bool Equals(object obj) {if (this == obj) {return true;}if (obj == null) {return false;}if (GetType() != obj.GetType()) {return false;}Toffs other = (Toffs) obj;if (GetStartOffset() != other.GetStartOffset()) {return false;}if (GetEndOffset() != other.GetEndOffset()) {return false;}return true;}
public CreateGatewayGroupResult CreateGatewayGroup(CreateGatewayGroupRequest request) { request = BeforeClientExecution(request); return ExecuteCreateGatewayGroup(request); }
public CreateParticipantConnectionResult CreateParticipantConnection(CreateParticipantConnectionRequest request) { request = BeforeClientExecution(request); return ExecuteCreateParticipantConnection(request); }
public static double irr(double[] income) { return irr(income, 0.1d); }
public RegisterWorkspaceDirectoryResult registerWorkspaceDirectory(RegisterWorkspaceDirectoryRequest request) { request = beforeClientExecution(request); return executeRegisterWorkspaceDirectory(request); }
public RevertCommand Include(AnyObjectId commit) { return Include(commit.GetName(), commit); }
public IValue evaluate(int srcRowIndex, int srcColumnIndex, IValue inumberVE){IValue veText1;try{veText1 = OperandResolver.GetSingleValue(inumberVE, srcRowIndex, srcColumnIndex);}catch (EvaluationException e){return e.GetErrorEval();}string iNumber = OperandResolver.CoerceValueToString(veText1);Match m = COMPLEX_NUMBER_PATTERN.Matches(iNumber)[0];bool result = m.Success;string imaginary = "";if (result){string imaginaryGroup = m.Groups[5].Value;bool hasImaginaryPart = imaginaryGroup.Equals("i") || imaginaryGroup.Equals("j");if (imaginaryGroup.Length == 0){return new StringEval("0");}if (hasImaginaryPart){string sign = "";string imaginarySign = m.Groups[GROUP3_IMAGINARY_SIGN].Value;if (imaginarySign.Length != 0 && !(imaginarySign.Equals("+"))){sign = imaginarySign;}string groupImaginaryNumber = m.Groups[GROUP4_IMAGINARY_INTEGER_OR_DOUBLE].Value;if (groupImaginaryNumber.Length != 0){imaginary = sign + groupImaginaryNumber;}else{imaginary = sign + "1";}}}else{return ErrorEval.NumError;}return new StringEval(imaginary);}
public E PollLast() {var entry = backingMap.PollLastEntry();return (entry == null) ? null : entry.Key;}
public int readUShort() { int ch1 = readUByte(); int ch2 = readUByte(); return (ch2 << 8) + (ch1 << 0); }
public ModifySnapshotAttributeRequest(string snapshotId, SnapshotAttributeName attribute, OperationType operationType){SetSnapshotId(snapshotId);SetAttribute(attribute.ToString());SetOperationType(operationType.ToString());}
public ListBonusPaymentsResult ListBonusPayments(ListBonusPaymentsRequest request) { request = BeforeClientExecution(request); return ExecuteListBonusPayments(request); }
public V get(CharSequence cs) { if (cs == null) throw new NullReferenceException(); return default; }
public TokenFilter Create(TokenStream input) { CommonGramsFilter commonGrams = (CommonGramsFilter)base.Create(input); return new CommonGramsQueryFilter(commonGrams); }
public string GetPath() {return path;}
public InitiateMultipartUploadResult InitiateMultipartUpload(InitiateMultipartUploadRequest request) { request = BeforeClientExecution(request); return ExecuteInitiateMultipartUpload(request); }
public StringBuilder Insert(int offset, int i) => Insert0(offset, i.ToString()); return this;
public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {long block = blocks[blocksOffset++];for (int shift = 62; shift >= 0; shift -= 2) {values[valuesOffset++] = (int) ((block >> shift) & 3);}}}
public TokenStream Create(TokenStream input) { return new ElisionFilter(input, articles); }
public bool Eat(Row inRow, int[] remap) {int sum = 0;foreach (var c in inRow.cells.Values) {sum += c.cnt;if (c.ref >= 0) {if (remap[c.ref] == 0) {c.ref = -1;}}}int frame = sum / 10;bool live = false;foreach (var c in inRow.cells.Values) {if (c.cnt < frame && c.cmd >= 0) {c.cnt = 0;c.cmd = -1;}if (c.cmd >= 0 || c.ref >= 0) {live |= true;}}return !live;}
public Token GetToken(int index) {Token t = jj_lookingAhead ? jj_scanpos : token;for (int i = 0; i < index; i++) {if (t.next != null) t = t.next;else t = t.next = token_source.GetNextToken();}return t;}
public string ToString() {StringBuilder sb = new StringBuilder();sb.Append(GetType().Name).Append(" [ARRAY]\n");sb.Append(" range=").Append(GetRange()).Append("\n");sb.Append(" options=").Append(HexDump.ShortToHex(_options)).Append("\n");sb.Append(" notUsed=").Append(HexDump.IntToHex(_field3notUsed)).Append("\n");sb.Append(" formula:").Append("\n");Ptg[] ptgs = _formula.GetTokens();for (int i = 0; i < ptgs.Length; i++) {Ptg ptg = ptgs[i];sb.Append(ptg).Append(ptg.GetRVAType()).Append("\n");}sb.Append("]");return sb.ToString();}
public GetFolderResult GetFolder(GetFolderRequest request) { request = BeforeClientExecution(request); return ExecuteGetFolder(request); }
public void Add(int location, E @object) { throw new UnsupportedOperationException(); }
public PositiveScoresOnlyCollector(Collector in) : base(in) {}
public CreateRepoBuildRuleRequest() : base("cr", "2016-06-07", "CreateRepoBuildRule", "cr"){SetUriPattern("/repos/[RepoNamespace]/[RepoName]/rules");SetMethod(MethodType.PUT);}
public BaseRef(AreaEval ae) { _refEval = null; _areaEval = ae; _firstRowIndex = ae.GetFirstRow(); _firstColumnIndex = ae.GetFirstColumn(); _height = ae.GetLastRow() - ae.GetFirstRow() + 1; _width = ae.GetLastColumn() - ae.GetFirstColumn() + 1; }
public DrawingManager2(EscherDggRecord dgg) { this.dgg = dgg; }
public void reset() { if (!first()) reset(raw); }
public CharsetDecoder reset() {status = INIT;implReset();return this;}
public BufferedReader(Reader in, int size) : base(in){if (size <= 0){throw new ArgumentException("size <= 0");}this.in = in;buf = new char[size];}
public DescribeCodeRepositoryResult DescribeCodeRepository(DescribeCodeRepositoryRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeCodeRepository(request); }
public DBSubnetGroup CreateDBSubnetGroup(CreateDBSubnetGroupRequest request) { request = BeforeClientExecution(request); return ExecuteCreateDBSubnetGroup(request); }
public RenameBranchCommand SetOldName(string oldName) { CheckCallable(); this.oldName = oldName; return this; }
public DeleteBranchCommand setForce(bool force) {CheckCallable();this.force = force;return this;}
public StopCompilationJobResult stopCompilationJob(StopCompilationJobRequest request) { request = beforeClientExecution(request); return executeStopCompilationJob(request); }
public void IncrementSecondaryProgressBy(int diff) { setSecondaryProgress(mSecondaryProgress + diff); }
public int[] clear() {return bytesStart = null;}
public string GetRawPath() { return path; }
public GetUserSourceAccountRequest() : base("cr", "2016-06-07", "GetUserSourceAccount", "cr"){SetUriPattern("/users/sourceAccount");SetMethod(MethodType.GET);}
public CreateExportJobResult CreateExportJob(CreateExportJobRequest request) { request = beforeClientExecution(request); return executeCreateExportJob(request); }
public CreateDedicatedIpPoolResult CreateDedicatedIpPool(CreateDedicatedIpPoolRequest request) { request = BeforeClientExecution(request); return ExecuteCreateDedicatedIpPool(request); }
public bool Equals(object obj) {if (this == obj) {return true;}if (obj == null) {return false;}if (obj is HSSFCellStyle other) {if (_format == null) {if (other._format != null) {return false;}} else if (!_format.Equals(other._format)) {return false;}if (_index != other._index) {return false;}return true;}return false;}
public ReleaseHostsResult ReleaseHosts(ReleaseHostsRequest request) { request = BeforeClientExecution(request); return ExecuteReleaseHosts(request); }
public bool Equals(object obj) {if (this == obj) {return true;}if (obj is Set) {Set s = obj as Set;try {return Count == s.Count && ContainsAll(s);} catch (NullReferenceException ignored) {return false;} catch (InvalidCastException ignored) {return false;}}return false;}
public void SetRefLogMessage(string msg, bool appendStatus){customRefLog = true;if (msg == null && !appendStatus){DisableRefLog();}else if (msg == null && appendStatus){refLogMessage = "";refLogIncludeResult = true;}else{refLogMessage = msg;refLogIncludeResult = appendStatus;}}
public StreamIDRecord(RecordInputStream in) { idstm = in.readShort(); }
public RecognizeCarRequest() {base("visionai-poc", "2020-04-08", "RecognizeCar");setMethod(MethodType.POST);}
public sealed ByteOrder Order() => ByteOrder.NativeOrder();
public int getAheadCount() { return aheadCount; }
public bool IsNewFragment() { return false; }
public GetCloudFrontOriginAccessIdentityConfigResult getCloudFrontOriginAccessIdentityConfig(GetCloudFrontOriginAccessIdentityConfigRequest request) {request = beforeClientExecution(request);return executeGetCloudFrontOriginAccessIdentityConfig(request);}
public bool Matches(int symbol, int minVocabSymbol, int maxVocabSymbol) { return label == symbol; }
public DeleteTransitGatewayResult deleteTransitGateway(DeleteTransitGatewayRequest request) { request = beforeClientExecution(request); return executeDeleteTransitGateway(request); }
public static byte[] grow(byte[] array, int minSize) {Debug.Assert(minSize >= 0, "size must be positive (got " + minSize + "): likely integer overflow?");if (array.Length < minSize) {return growExact(array, oversize(minSize,Byte.BYTES));} else {return array;}}
public CreateTransactionRequest() : base("CloudPhoto", "2017-07-11", "CreateTransaction", "cloudphoto"){SetProtocol(ProtocolType.HTTPS);}
public BatchRefUpdate SetRefLogIdent(PersonIdent pi) { refLogIdent = pi; return this; }
public GetLaunchTemplateDataResult GetLaunchTemplateData(GetLaunchTemplateDataRequest request) { request = BeforeClientExecution(request); return ExecuteGetLaunchTemplateData(request); }
public ParseInfo(ProfilingATNSimulator atnSimulator) { this.atnSimulator = atnSimulator; }
public SimpleQQParser(string[] qqNames, string indexField) { this.qqNames = qqNames; this.indexField = indexField; }
public DBCluster PromoteReadReplicaDBCluster(PromoteReadReplicaDBClusterRequest request) { request = BeforeClientExecution(request); return ExecutePromoteReadReplicaDBCluster(request); }
public DescribeCapacityReservationsResult DescribeCapacityReservations(DescribeCapacityReservationsRequest request) { request = beforeClientExecution(request); return executeDescribeCapacityReservations(request); }
public string ToString() { return "IndexSearcher(" + reader + "; executor=" + executor + "; sliceExecutionControlPlane " + sliceExecutor + ")"; }
public final bool IncrementToken() {return false;}
public void Serialize(System.IO.BinaryWriter outWriter) {outWriter.Write((short)(main + 1));outWriter.Write((short)subFrom);outWriter.Write((short)subTo);}
public void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations){if (bitsPerValue > 32){throw new NotSupportedException("Cannot decode " + bitsPerValue + "-bits values into an int[]");}for (int i = 0; i < iterations; ++i){final long block = ReadLong(blocks, blocksOffset);blocksOffset += 8;valuesOffset = Decode(block, values, valuesOffset);}}
public bool IsExpectedToken(int symbol){ATN atn = GetInterpreter().Atn;ParserRuleContext ctx = _ctx;ATNState s = atn.States[GetState()];IntervalSet following = atn.NextTokens(s);if (following.Contains(symbol)){return true;}if (!following.Contains(Token.Epsilon)){return false;}while (ctx != null && ctx.InvokingState >= 0 && following.Contains(Token.Epsilon)){ATNState invokingState = atn.States[ctx.InvokingState];RuleTransition rt = (RuleTransition)invokingState.Transition(0);following = atn.NextTokens(rt.FollowState);if (following.Contains(symbol)){return true;}ctx = (ParserRuleContext)ctx.Parent;}if (following.Contains(Token.Epsilon) && symbol == Token.Eof){return true;}return false;}
public UpdateStreamResult updateStream(UpdateStreamRequest request) { request = BeforeClientExecution(request); return ExecuteUpdateStream(request); }
public object evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {try {OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);return ErrorEval.NA;} catch (EvaluationException e) {int result = translateErrorCodeToErrorTypeValue(e.getErrorEval().getErrorCode());return new NumberEval(result);}}
public string ToString() { return GetType().Name + " [" + _index + " " + _name + "]"; }
public ListAssignmentsForHITResult ListAssignmentsForHIT(ListAssignmentsForHITRequest request) { request = beforeClientExecution(request); return executeListAssignmentsForHIT(request); }
public DeleteAccessControlRuleResult deleteAccessControlRule(DeleteAccessControlRuleRequest request) { request = beforeClientExecution(request); return executeDeleteAccessControlRule(request); }
public Arc<Int64> GetFirstArc(Arc<Int64> arc) {return fst.GetFirstArc(arc);}
public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations){for (int i = 0; i < iterations; ++i){long block = blocks[blocksOffset++];for (int shift = 48; shift >= 0; shift -= 16){values[valuesOffset++] = (int) ((block >> shift) & 65535);}}}
public long skip(long charCount){if (charCount < 0){throw new ArgumentException("charCount < 0: " + charCount);}lock (lockObject){checkNotClosed();if (charCount == 0){return 0;}long inSkipped;int availableFromBuffer = buf.Length - pos;if (availableFromBuffer > 0){long requiredFromIn = charCount - availableFromBuffer;if (requiredFromIn <= 0){pos += charCount;return charCount;}pos += availableFromBuffer;inSkipped = in.Skip(requiredFromIn);}else{inSkipped = in.Skip(charCount);}return inSkipped + availableFromBuffer;}}
public Dictionary<string, Ref> GetRefsMap() { return advertisedRefs; }
public UpdateApiKeyResult UpdateApiKey(UpdateApiKeyRequest request) {request = beforeClientExecution(request);return executeUpdateApiKey(request);}
public Stream OpenStream() { PackInputStream packIn; using (DfsReader ctx = db.newReader()) { try { try { packIn = new PackInputStream(pack, objectOffset + headerLength, ctx); ctx = null; } catch (IOException packGone) { ObjectId obj = pack.getReverseIdx(ctx).findObject(objectOffset); return ctx.open(obj, type).openStream(); } } finally { if (ctx != null) { ctx.close(); } } int bufsz = 8192; Stream in = new BufferedInputStream(new InflaterInputStream(packIn, packIn.ctx.inflater(), bufsz), bufsz); return new ObjectStream.Filter(type, size, in); }
public List<object> () { array = EmptyArray.OBJECT; }
public UpdateDetectorVersionResult UpdateDetectorVersion(UpdateDetectorVersionRequest request) {request = BEFORE_CLIENT_EXECUTION(request);return ExecuteUpdateDetectorVersion(request);}
public void resize(){resize(Double.MaxValue);}
public RevFlagSet(Collection<RevFlag> s) : this() { this.addAll(s); }
public int Size() { return size; }
public long GetLong() { int newPosition = position + SizeOf.LONG; if (newPosition > limit) { throw new BufferUnderflowException(); } long result = Memory.PEEKLONG(backingArray, offset + position, order); position = newPosition; return result;}
public StringBuilder Insert(int offset, long l) { insert0(offset, l.ToString()); return this; }
public TurkishLowerCaseFilter(TokenStream in) : base(in) { }
public ParseTreeMatch match(ParseTree tree, ParseTreePattern pattern) {MultiMap<string, ParseTree> labels = new MultiMap<string, ParseTree>();ParseTree mismatchedNode = matchImpl(tree, pattern.getPatternTree(), labels);return new ParseTreeMatch(tree, pattern, labels, mismatchedNode);}
public void addIfNoOverlap(WeightedPhraseInfo wpi){foreach (WeightedPhraseInfo existWpi in getPhraseList()){if (existWpi.isOffsetOverlap(wpi)){existWpi.getTermsInfos().AddRange(wpi.getTermsInfos());return;}}getPhraseList().Add(wpi);}
public ThreeWayMerger newMerger(Repository db) { return new InCoreMerger(db); }
public float docScore(int docId, string field, int numPayloadsSeen, float payloadScore) { return numPayloadsSeen > 0 ? (payloadScore / numPayloadsSeen) : 1; }
public ICollection<ParseTree> evaluate(ParseTree t) { return Trees.FindAllRuleNodes(t, ruleIndex); }
public string ToString() {StringBuilder buffer = new StringBuilder();buffer.Append("[CFRULE]\n");buffer.Append("    .condition_type   = " + GetConditionType() + "\n");buffer.Append("    OPTION FLAGS=0x" + Integer.ToHexString(GetOptions()) + "\n");if (ContainsFontFormattingBlock()) {buffer.Append(_fontFormatting + "\n");}if (ContainsBorderFormattingBlock()) {buffer.Append(_borderFormatting + "\n");}if (ContainsPatternFormattingBlock()) {buffer.Append(_patternFormatting + "\n");}buffer.Append("    Formula 1 =" + Arrays.ToString(GetFormula1().GetTokens()) + "\n");buffer.Append("    Formula 2 =" + Arrays.ToString(GetFormula2().GetTokens()) + "\n");buffer.Append("[/CFRULE]\n");return buffer.ToString();}
public DescribeServiceUpdatesResult DescribeServiceUpdates(DescribeServiceUpdatesRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeServiceUpdates(request); }
public string GetNameName(int index) { return GetNameAt(index).GetNameName(); }
public DescribeLocationsResult DescribeLocations() { return DescribeLocations(new DescribeLocationsRequest()); }
public string ToString() { return $"<phraseslop value='{GetValueString()}'>" + "\n" + getChild().ToString() + "\n</phraseslop>"; }
public DirCacheEntry GetDirCacheEntry() { return currentSubtree == null ? currentEntry : null; }
public IntBuffer Put(int[] src, int srcOffset, int intCount) {if (src.Length < srcOffset + intCount) {throw new ArgumentException("Invalid source array length");}if (intCount > Remaining()) {throw new BufferOverflowException();}for (int i = srcOffset; i < srcOffset + intCount; ++i) {Put(src[i]);}return this;}
public void TrimToSize(){int s = size;if (s == array.Length){return;}if (s == 0){array = EmptyArray.Object;}else{Object[] newArray = new Object[s];Array.Copy(array, 0, newArray, 0, s);array = newArray;}modCount++;}
public DescribeLocalGatewayVirtualInterfacesResult DescribeLocalGatewayVirtualInterfaces(DescribeLocalGatewayVirtualInterfacesRequest request){request = BeforeClientExecution(request);return ExecuteDescribeLocalGatewayVirtualInterfaces(request);}
public TokenStream Create(TokenStream input) { return new RussianLightStemFilter(input); }
public int[] toArray(final int[] a){int[] rval;if (a.Length == _limit){System.Array.Copy(_array, 0, a, 0, _limit);rval = a;}else{rval = toArray();}return rval;}
public BasicSessionCredentials(string accessKeyId, string accessKeySecret, string sessionToken, long roleSessionDurationSeconds){if (accessKeyId == null){throw new ArgumentException("Access key ID cannot be null.");}if (accessKeySecret == null){throw new ArgumentException("Access key secret cannot be null.");}this.accessKeyId = accessKeyId;this.accessKeySecret = accessKeySecret;this.sessionToken = sessionToken;this.roleSessionDurationSeconds = roleSessionDurationSeconds;this.sessionStartedTimeInMilliSeconds = DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond;}
public sealed ShortBuffer get(short[] dst, int dstOffset, int shortCount){if (shortCount > remaining()){throw new BufferUnderflowException();}Array.Copy(backingArray, offset + position, dst, dstOffset, shortCount);position += shortCount;return this;}
public ActivateEventSourceResult ActivateEventSource(ActivateEventSourceRequest request) {request = BeforeClientExecution(request);return ExecuteActivateEventSource(request);}
public DescribeReceiptRuleSetResult DescribeReceiptRuleSet(DescribeReceiptRuleSetRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeReceiptRuleSet(request); }
public Filter(string name) {setName(name);}
public DoubleBuffer put(double c) { throw new ReadOnlyBufferException(); }
public CreateTrafficPolicyInstanceResult CreateTrafficPolicyInstance(CreateTrafficPolicyInstanceRequest request) { request = BeforeClientExecution(request); return ExecuteCreateTrafficPolicyInstance(request); }
public JapaneseIterationMarkCharFilter(Reader input, bool normalizeKanji, bool normalizeKana) : base(input){this.normalizeKanji = normalizeKanji;this.normalizeKana = normalizeKana;buffer.reset(input);}
public void writeLong(long v) {writeInt((int)(v >>  0));writeInt((int)(v >> 32));}
public FileResolver() { exports = new ConcurrentDictionary<string, dynamic>(); exportBase = new List<dynamic>(); }
public IValueEval GetRef3DEval(Ref3DPxg rptg){SheetRangeEvaluator sre = CreateExternSheetRefEvaluator(rptg.GetSheetName(), rptg.GetLastSheetName(), rptg.GetExternalWorkbookNumber());return new LazyRefEval(rptg.GetRow(), rptg.GetColumn(), sre);}
public DeleteDatasetResult DeleteDataset(DeleteDatasetRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteDataset(request); }
public StartRelationalDatabaseResult StartRelationalDatabase(StartRelationalDatabaseRequest request) { request = beforeClientExecution(request); return executeStartRelationalDatabase(request); }
public DescribeReservedCacheNodesOfferingsResult DescribeReservedCacheNodesOfferings() { return DescribeReservedCacheNodesOfferings(new DescribeReservedCacheNodesOfferingsRequest()); }
public double pmt(double r, int nper, double pv, double fv, int type) {return -r * (pv * Math.Pow(1 + r, nper) + fv) / ((1 + r * type) * (Math.Pow(1 + r, nper) - 1));}
public DescribeDocumentVersionsResult DescribeDocumentVersions(DescribeDocumentVersionsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeDocumentVersions(request); }
public ListPublishingDestinationsResult ListPublishingDestinations(ListPublishingDestinationsRequest request) {request = BeforeClientExecution(request);return ExecuteListPublishingDestinations(request);}
public DeleteAccountAliasRequest(string accountAlias) { this.accountAlias = accountAlias; }
public static long[] Grow(long[] array) { return Grow(array, 1 + array.Length); }
public string OutputToString(object output) {if (!(output is List<T>)) {return outputs.outputToString((T)output);} else {List<T> outputList = (List<T>)output;StringBuilder b = new StringBuilder();b.Append('[');for (int i = 0; i < outputList.Count; i++) {if (i > 0) {b.Append(", ");}b.Append(outputs.outputToString(outputList[i]));}b.Append(']');return b.ToString();}}
public void notifyDeleteCell(Cell cell) {_bookEvaluator.notifyDeleteCell(new HSSFEvaluationCell((HSSFCell)cell));}
public StringBuilder Replace(int start, int end, string str) { Replace0(start, end, str); return this; }
public SetIdentityPoolConfigurationResult SetIdentityPoolConfiguration(SetIdentityPoolConfigurationRequest request) { request = BeforeClientExecution(request); return ExecuteSetIdentityPoolConfiguration(request); }
public static double kthSmallest(double[] v, int k) {double r = double.NaN;int index = k - 1;if (v != null && v.Length > index && index >= 0) {Array.Sort(v);r = v[index];}return r;}
public void set(int index, long value) {int o = index >> 5;int b = index & 31;int shift = b << 1;blocks[o] = (blocks[o] & ~(3L << shift)) | (value << shift);}
public string ToString() { if (GetChildren() == null || GetChildren().Count == 0) return "<boolean operation='and'/>"; StringBuilder sb = new StringBuilder(); sb.Append("<boolean operation='and'>"); foreach (QueryNode child in GetChildren()) { sb.Append("\n"); sb.Append(child.ToString()); } sb.Append("\n</boolean>"); return sb.ToString(); }
public int sumTokenSizes(int fromIx, int toIx) {int result = 0;for (int i = fromIx; i < toIx; i++) {result += _ptgs[i].getSize();}return result;}
public void SetReadonly(bool readonly) { if (this.readonly && !readonly) throw new IllegalStateException("can't alter readonly IntervalSet"); this.readonly = readonly; }
public final void clearConsumingCell(FormulaCellCacheEntry cce){if (!_consumingCells.Remove(cce)){throw new IllegalStateException("Specified formula cell is not consumed by this cell");}}
public override List<E> GetSubList(int start, int end){lock (mutex){return new SynchronizedRandomAccessList<E>(list.GetSubList(start, end), mutex);}}
public FileHeader GetFileHeader() { return file; }
public AttachLoadBalancersResult AttachLoadBalancers(AttachLoadBalancersRequest request) { request = BeforeClientExecution(request); return ExecuteAttachLoadBalancers(request); }
public InitiateJobRequest(string accountId, string vaultName, JobParameters jobParameters){SetAccountId(accountId);SetVaultName(vaultName);SetJobParameters(jobParameters);}
public string ToString() { return "SPL"; }
public ReplaceableAttribute(string name, string value, bool replace) {setName(name); setValue(value); setReplace(replace);}
public void add(IndexableField field) { fields.Add(field); }
public DeleteStackSetResult DeleteStackSet(DeleteStackSetRequest request) {request = beforeClientExecution(request);return executeDeleteStackSet(request);}
public class GetRepoBuildRuleListRequest : RpcAcsRequest<GetRepoBuildRuleListResponse>{public GetRepoBuildRuleListRequest(): base("cr", "2016-06-07", "GetRepoBuildRuleList", "cr"){this.Method = MethodType.GET;this.SetUriPattern("/repos/[RepoNamespace]/[RepoName]/rules");}}
public SparseArray(int initialCapacity){initialCapacity = ArrayUtils.idealIntArraySize(initialCapacity);mKeys = new int[initialCapacity];mValues = new object[initialCapacity];mSize = 0;}
public InvokeServiceRequest() : base("industry-brain", "2018-07-12", "InvokeService"){SetMethod(MethodType.POST);}
public ListAlbumPhotosRequest(){base("CloudPhoto", "2017-07-11", "ListAlbumPhotos", "cloudphoto");SetProtocol(ProtocolType.HTTPS);}
public bool HasPrevious() {return link != list:voidLink;}
public DeleteHsmConfigurationResult DeleteHsmConfiguration(DeleteHsmConfigurationRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteHsmConfiguration(request); }
public CreateLoadBalancerRequest(string loadBalancerName) { setLoadBalancerName(loadBalancerName); }
public string GetUserInfo() { return Decode(userInfo); }
public TagAttendeeResult TagAttendee(TagAttendeeRequest request) { request = BeforeClientExecution(request); return ExecuteTagAttendee(request); }
public string getRefName() { return name; }
public SpanNearQuery Build() { return new SpanNearQuery(clauses.ToArray(new SpanQuery[clauses.Count]), slop, ordered); }
public bool IsSubTotal(int rowIndex, int columnIndex) { return false; }
public DescribeDBProxiesResult DescribeDBProxies(DescribeDBProxiesRequest request) { request = beforeClientExecution(request); return executeDescribeDBProxies(request); }
public GetVoiceConnectorProxyResult getVoiceConnectorProxy(GetVoiceConnectorProxyRequest request) { request = beforeClientExecution(request); return executeGetVoiceConnectorProxy(request); }
public WindowCacheConfig fromConfig(Config rc) {setPackedGitUseStrongRefs(rc.getBoolean(CONFIG_CORE_SECTION, CONFIG_KEY_PACKED_GIT_USE_STRONGREFS, isPackedGitUseStrongRefs()));setPackedGitOpenFiles(rc.getInt(CONFIG_CORE_SECTION, null, CONFIG_KEY_PACKED_GIT_OPENFILES, getPackedGitOpenFiles()));setPackedGitLimit(rc.getLong(CONFIG_CORE_SECTION, null, CONFIG_KEY_PACKED_GIT_LIMIT, getPackedGitLimit()));setPackedGitWindowSize(rc.getInt(CONFIG_CORE_SECTION, null, CONFIG_KEY_PACKED_GIT_WINDOWSIZE, getPackedGitWindowSize()));setPackedGitMMAP(rc.getBoolean(CONFIG_CORE_SECTION, null, CONFIG_KEY_PACKED_GIT_MMAP, isPackedGitMMAP()));setDeltaBaseCacheLimit(rc.getInt(CONFIG_CORE_SECTION, null, CONFIG_KEY_DELTA_BASE_CACHE_LIMIT, getDeltaBaseCacheLimit()));long maxMem = Runtime.getRuntime().maxMemory();long sft = rc.getLong(CONFIG_CORE_SECTION, null, CONFIG_KEY_STREAM_FILE_TRESHOLD, getStreamFileThreshold());sft = Math.Min(sft, maxMem / 4);sft = Math.Min(sft, int.MaxValue);setStreamFileThreshold((int)sft);return this;}
public static DateTime GetJavaDate(double date) { return GetJavaDate(date, false, null, false); }
public StartPersonTrackingResult StartPersonTracking(StartPersonTrackingRequest request) {request = BeforeClientExecution(request);return ExecuteStartPersonTracking(request);}
public override int size() {return totalSize;}
public GetRouteResult getRoute(GetRouteRequest request){request = beforeClientExecution(request);return executeGetRoute(request);}
public DeleteClusterResult DeleteCluster(DeleteClusterRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteCluster(request); }
public string ToString() {StringBuilder buffer = new StringBuilder();buffer.Append("[MMS]\n");buffer.Append("    .addMenu        = ").Append(Integer.toHexString(getAddMenuCount())).Append("\n");buffer.Append("    .delMenu        = ").Append(Integer.toHexString(getDelMenuCount())).Append("\n");buffer.Append("[/MMS]\n");return buffer.ToString();}
public FileBasedConfig(Config base, File cfgLocation, FS fs) : base(base) {configFile = cfgLocation;this.fs = fs;this.snapshot = FileSnapshot.DIRTY;this.hash = ObjectId.zeroId();}
public int Following(int pos){if (pos < text.GetBeginIndex() || pos > text.GetEndIndex()){throw new ArgumentException("offset out of bounds");}else if (0 == sentenceStarts.Length){text.SetIndex(text.GetBeginIndex());return DONE;}else if (pos >= sentenceStarts[sentenceStarts.Length - 1]){text.SetIndex(text.GetEndIndex());currentSentence = sentenceStarts.Length - 1;return DONE;}else{currentSentence = (sentenceStarts.Length - 1) / 2;MoveToSentenceAt(pos, 0, sentenceStarts.Length - 2);text.SetIndex(sentenceStarts[++currentSentence]);return current();}}
public UpdateParameterGroupResult updateParameterGroup(UpdateParameterGroupRequest request) { request = beforeClientExecution(request); return executeUpdateParameterGroup(request); }
public SeriesChartGroupIndexRecord clone() {return copy();}
public static double calcDistanceFromErrPct(Shape shape, double distErrPct, SpatialContext ctx) {if (distErrPct < 0 || distErrPct > 0.5) {throw new ArgumentException("distErrPct " + distErrPct + " must be between [0 to 0.5]");}if (distErrPct == 0 || shape is Point) {return 0;}Rectangle bbox = shape.GetBoundingBox();Point ctr = bbox.GetCenter();double y = (ctr.Y >= 0 ? bbox.MaxY : bbox.MinY);double diagonalDist = ctx.GetDistCalc().Distance(ctr, bbox.MaxX, y);return diagonalDist * distErrPct;}
public int CodePointAt(int index) {if (index < 0 || index >= count) {throw new IndexOutOfRangeException();}return char.GetNumericValue(value[index]);}
public void setPasswordVerifier(int passwordVerifier) {this.passwordVerifier = passwordVerifier;}
public ListVaultsRequest(string accountId) { setAccountId(accountId); }
public SquashMessageFormatter() { dateFormatter = new GitDateFormatter(Format.DEFAULT); }
public class GetVideoCoverRequest : SchemeBaseRequest {public GetVideoCoverRequest() {this.Product = "CloudPhoto";this.Version = "2017-07-11";this.ActionName = "GetVideoCover";this.Domain = "cloudphoto";this.ProtocolType = ProtocolType.HTTPS;}}
public int LastIndexOf(object obj) {int pos = size;Link<E> link = voidLink.previous;if (obj != null) {while (link != voidLink) {pos--;if (obj.Equals(link.data)) {return pos;}link = link.previous;}} else {while (link != voidLink) {pos--;if (link.data == null) {return pos;}link = link.previous;}}return -1;}
public DescribeSpotFleetRequestsResult DescribeSpotFleetRequests(DescribeSpotFleetRequestsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeSpotFleetRequests(request); }
public IndexFacesResult IndexFaces(IndexFacesRequest request) { request = BeforeClientExecution(request); return ExecuteIndexFaces(request); }
public RuleBasedBreakIterator GetBreakIterator(int script) {switch (script) {case UScript.JAPANESE:return (RuleBasedBreakIterator)cjkBreakIterator.Clone();case UScript.MYANMAR:if (myanmarAsWords) {return (RuleBasedBreakIterator)defaultBreakIterator.Clone();} else {return (RuleBasedBreakIterator)myanmarSyllableIterator.Clone();}default:return (RuleBasedBreakIterator)defaultBreakIterator.Clone();}}
public string ToString(){StringBuilder b = new StringBuilder();b.Append("[DCONREF]\n");b.Append("    .ref\n");b.Append("        .firstrow   = ").Append(firstRow).Append("\n");b.Append("        .lastrow    = ").Append(lastRow).Append("\n");b.Append("        .firstcol   = ").Append(firstCol).Append("\n");b.Append("        .lastcol    = ").Append(lastCol).Append("\n");b.Append("    .cch            = ").Append(charCount).Append("\n");b.Append("    .stFile\n");b.Append("        .h          = ").Append(charType).Append("\n");b.Append("        .rgb        = ").Append(GetReadablePath()).Append("\n");b.Append("[/DCONREF]\n");return b.ToString();}
public int GetPackedGitOpenFiles() { return packedGitOpenFiles; }
public string ToString() {StringBuilder buffer = new StringBuilder();buffer.Append("[FEATURE HEADER]\n");buffer.Append("[/FEATURE HEADER]\n");return buffer.ToString();}
public static byte[] getToUnicodeLE(string str) { return System.Text.Encoding.Unicode.GetBytes(str); }
public static List<string> GetFooterLines(string keyName) { return GetFooterLines(new FooterKey(keyName)); }
public void refresh() {base.refresh(); clearReferences(); }
public float get(int index) { checkIndex(index); return byteBuffer.GetFloat(index * SizeOf.FLOAT); }
public DeleteDetectorResult DeleteDetector(DeleteDetectorRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteDetector(request); }
public int[] Grow() { Debug.Assert(bytesStart != null); return bytesStart = ArrayUtil.Grow(bytesStart, bytesStart.Length + 1); }
public ListExclusionsResult ListExclusions(ListExclusionsRequest request) { request = BeforeClientExecution(request); return ExecuteListExclusions(request); }
public static SpatialStrategy GetSpatialStrategy(int roundNumber) { SpatialStrategy result = spatialStrategyCache.Get(roundNumber); if (result == null) { throw new InvalidOperationException("Strategy should have been init'ed by SpatialDocMaker by now"); } return result;}
public DBCluster RestoreDBClusterToPointInTime(RestoreDBClusterToPointInTimeRequest request){request = BeforeClientExecution(request);return ExecuteRestoreDBClusterToPointInTime(request);}
public void Serialize(LittleEndianOutput output) { output.WriteShort(field_1_categoryDataType); output.WriteShort(field_2_valuesDataType); output.WriteShort(field_3_numCategories); output.WriteShort(field_4_numValues); output.WriteShort(field_5_bubbleSeriesType); output.WriteShort(field_6_numBubbleValues); }
public PostAgentProfileResult PostAgentProfile(PostAgentProfileRequest request) { request = BeforeClientExecution(request); return ExecutePostAgentProfile(request); }
public ParseTreePattern CompileParseTreePattern(string pattern, int patternRuleIndex){if ( getTokenStream() != null ){TokenSource tokenSource = getTokenStream().getTokenSource();if ( tokenSource is Lexer ){Lexer lexer = (Lexer)tokenSource;return CompileParseTreePattern(pattern, patternRuleIndex, lexer);}}throw new UnsupportedOperationException("Parser can't discover a lexer to use");}
public BacktrackDBClusterResult BacktrackDBCluster(BacktrackDBClusterRequest request) { request = BeforeClientExecution(request); return ExecuteBacktrackDBCluster(request); }
public string getName() {return strategyName;}
public void copyTo(byte[] b, int o) {formatHexByte(b, o + 0, w1);formatHexByte(b, o + 8, w2);formatHexByte(b, o + 16, w3);formatHexByte(b, o + 24, w4);formatHexByte(b, o + 32, w5);}
public static readonly IntList lineMap(byte[] buf, int ptr, int end) {IntList map = new IntList((end - ptr) / 36);map.FillTo(1, int.MinValue);for (; ptr < end; ptr = nextLF(buf, ptr)) {map.Add(ptr);}map.Add(end);return map;}
public HashSet<ObjectId> GetAdditionalHaves() { return new HashSet<ObjectId>(); }
public long RamBytesUsed() {long sizeInBytes = BASE_RAM_BYTES_USED + fields.Count * 2 * RamUsageEstimator.NUM_BYTES_OBJECT_REF;foreach (SimpleTextTerms simpleTextTerms in termsCache.Values) {sizeInBytes += (simpleTextTerms != null) ? simpleTextTerms.RamBytesUsed() : 0;}return sizeInBytes;}
public string ToXml(string tab){StringBuilder builder = new StringBuilder();builder.Append(tab).Append("<").Append(GetRecordName()).Append(">\n");foreach (EscherRecord escherRecord in GetEscherRecords()){builder.Append(escherRecord.ToXml(tab + "\t"));}builder.Append(tab).Append("</").Append(GetRecordName()).Append(">\n");return builder.ToString();}
public TokenStream Create(TokenStream input) { return new GalicianMinimalStemFilter(input); }
public string ToString(){StringBuilder r = new StringBuilder();r.Append("Commit");r.Append("={\n");r.Append("tree ");r.Append(treeId != null ? treeId.Name : "NOT_SET");r.Append("\n");foreach (ObjectId p in parentIds){r.Append("parent ");r.Append(p.Name);r.Append("\n");}r.Append("author ");r.Append(author != null ? author.ToString() : "NOT_SET");r.Append("\n");r.Append("committer ");r.Append(committer != null ? committer.ToString() : "NOT_SET");r.Append("\n");r.Append("gpgSignature ");r.Append(gpgSignature != null ? gpgSignature.ToString() : "NOT_SET");r.Append("\n");if (encoding != null && !References.IsSameObject(encoding, UTF_8)){r.Append("encoding ");r.Append(encoding.Name);r.Append("\n");}r.Append("\n");r.Append(message != null ? message : "");r.Append("}");return r.ToString();}
public IndicNormalizationFilterFactory(Dictionary<string, string> args) : base(args) {if (!args.Any()) {throw new ArgumentException("Unknown parameters: " + args);}}
public OptionGroup CreateOptionGroup(CreateOptionGroupRequest request) {request = BeforeClientExecution(request);return ExecuteCreateOptionGroup(request);}
public AssociateMemberAccountResult AssociateMemberAccount(AssociateMemberAccountRequest request) {request = BeforeClientExecution(request);return ExecuteAssociateMemberAccount(request);}
public void run() {doRefreshProgress(mId, mProgress, mFromUser, true);mRefreshProgressRunnable = this;}
public SetTerminationProtectionResult SetTerminationProtection(SetTerminationProtectionRequest request) { request = BeforeClientExecution(request); return ExecuteSetTerminationProtection(request); }
public string GetErrorHeader(RecognitionException e) { int line = e.GetOffendingToken().Line; int charPositionInLine = e.GetOffendingToken().CharPositionInLine; return "line " + line + ":" + charPositionInLine; }
public CharBuffer AsReadOnlyBuffer(){CharToByteBufferAdapter buf = new CharToByteBufferAdapter(byteBuffer.AsReadOnlyBuffer());buf.Limit = limit;buf.Position = position;buf.Mark = mark;buf.byteBuffer.Order = byteBuffer.Order;return buf;}
public StopSentimentDetectionJobResult StopSentimentDetectionJob(StopSentimentDetectionJobRequest request) { request = beforeClientExecution(request); return executeStopSentimentDetectionJob(request); }
public ObjectIdSubclassMap<ObjectId> GetNewObjectIds() { if (newObjectIds != null) return newObjectIds; return new ObjectIdSubclassMap<>(); }
public void clear() { hash = hash(new byte[0]); base.clear(); }
public void Reset(){lock (lockObject){CheckNotClosed();if (mark == -1){throw new IOException("Invalid mark");}pos = mark;}}
public RefErrorPtg(LittleEndianInput in)  {field_1_reserved = in.readInt();}
public SuspendGameServerGroupResult SuspendGameServerGroup(SuspendGameServerGroupRequest request) { request = BeforeClientExecution(request); return ExecuteSuspendGameServerGroup(request); }
public ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) { if (args.Length != 3) { return ErrorEval.VALUE_INVALID; } return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]); }
public GetRepoRequest() : base("cr", "2016-06-07", "GetRepo", "cr"){SetUriPattern("/repos/[RepoNamespace]/[RepoName]");SetMethod(MethodType.GET);}
public void setDate(DateTime date) { if (date != null) { setDate(DateTools.dateToString(date, DateTools.Resolution.SECOND)); } else { this.date = null; } }
public TokenStream Create(TokenStream input) { return new GermanMinimalStemFilter(input); }
public object[] ToArray() {return a.Clone();}
public void Write(char[] buffer, int offset, int len) {Array.CheckOffsetAndLength(buffer.Length, offset, len);lock (lockObject) {Expand(len);Array.Copy(buffer, offset, this.buf, this.count, len);this.count += len;}}
public static readonly RevFilter after(DateTime ts) {return after(ts.ToUnixTimeMilliseconds());}
public DeleteGroupPolicyRequest(string groupName, string policyName) {setGroupName(groupName);setPolicyName(policyName);}
public DeregisterTransitGatewayMulticastGroupMembersResult DeregisterTransitGatewayMulticastGroupMembers(DeregisterTransitGatewayMulticastGroupMembersRequest request) { request = BeforeClientExecution(request); return ExecuteDeregisterTransitGatewayMulticastGroupMembers(request); }
public BatchDeleteScheduledActionResult batchDeleteScheduledAction(BatchDeleteScheduledActionRequest request) { request = beforeClientExecution(request); return executeBatchDeleteScheduledAction(request); }
public CreateAlgorithmResult CreateAlgorithm(CreateAlgorithmRequest request) { request = beforeClientExecution(request); return executeCreateAlgorithm(request); }
public int readUByte() {return readByte() & 0x00FF;}
public void setLength(int sz) { NB.encodeInt32(info, infoOffset + P_SIZE, sz); }
public DescribeScalingProcessTypesResult DescribeScalingProcessTypes() { return DescribeScalingProcessTypes(new DescribeScalingProcessTypesRequest()); }
public ListResourceRecordSetsResult ListResourceRecordSets(ListResourceRecordSetsRequest request) { request = BeforeClientExecution(request); return ExecuteListResourceRecordSets(request); }
public Token recoverInline(Parser recognizer) throws RecognitionException{InputMismatchException e = new InputMismatchException(recognizer);for (ParserRuleContext context = recognizer.getContext(); context != null; context = context.getParent()){context.exception = e;}throw new ParseCancellationException(e);}
public SetTagsForResourceResult SetTagsForResource(SetTagsForResourceRequest request) { request = BeforeClientExecution(request); return ExecuteSetTagsForResource(request); }
public ModifyStrategyRequest() : base("CloudCallCenter", "2017-07-05", "ModifyStrategy", "CloudCallCenter", "innerAPI") {}
public DescribeVpcEndpointServicesResult DescribeVpcEndpointServices(DescribeVpcEndpointServicesRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeVpcEndpointServices(request); }
public EnableLoggingResult EnableLogging(EnableLoggingRequest request) { request = BeforeClientExecution(request); return ExecuteEnableLogging(request); }
public bool Contains(object o) {return ConcurrentHashMap.this.ContainsValue(o);}
public SheetRangeIdentifier(string bookName, NameIdentifier firstSheetIdentifier, NameIdentifier lastSheetIdentifier) : base(bookName, firstSheetIdentifier){_lastSheetIdentifier = lastSheetIdentifier;}
public DomainMetadataRequest(string domainName) {setDomainName(domainName);}
public ParseException(Token currentTokenVal, int[][] expectedTokenSequencesVal, string[] tokenImageVal) : base(new MessageImpl(QueryParserMessages.INVALID_SYNTAX, initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal))){this.currentToken = currentTokenVal;this.expectedTokenSequences = expectedTokenSequencesVal;this.tokenImage = tokenImageVal;}
public FetchPhotosRequest() : base("CloudPhoto", "2017-07-11", "FetchPhotos", "cloudphoto"){SetProtocol(ProtocolType.HTTPS);}
public PrintWriter writer() { return writer; }
public NGramTokenizerFactory(Dictionary<string, string> args) {base(args);minGramSize = getInt(args, "minGramSize", NGramTokenizer.DEFAULT_MIN_NGRAM_SIZE);maxGramSize = getInt(args, "maxGramSize", NGramTokenizer.DEFAULT_MAX_NGRAM_SIZE);if (args.Count > 0) {throw new ArgumentException("Unknown parameters: " + string.Join(", ", args.Keys));}}
public bool IsDirectoryFileConflict() { return dfConflict != null; }
public IndonesianStemFilter(TokenStream input, bool stemDerivational) : base(input) { this.stemDerivational = stemDerivational; }
public CreateTrafficPolicyResult createTrafficPolicy(CreateTrafficPolicyRequest request) { request = BeforeClientExecution(request); return ExecuteCreateTrafficPolicy(request); }
public void serialize(LittleEndianOutput out) { out.writeInt(fSD); out.writeInt(passwordVerifier); StringUtil.writeUnicodeString(out, title); out.write(securityDescriptor); }
public static double Floor(double n, double s) { if (s == 0 && n != 0) { return double.NaN; } else { return (n == 0 || s == 0) ? 0 : Math.Floor(n / s) * s; } }
public ByteArrayDataOutput(byte[] bytes, int offset, int len) {reset(bytes, offset, len);}
public static List<Tree> getChildren(Tree t){List<Tree> kids = new List<Tree>();for (int i = 0; i < t.getChildCount(); i++){kids.Add(t.GetChild(i));}return kids;}
public void clear() {Hashtable.this.clear();}
public RefreshAllRecord(bool refreshAll) { this(0); setRefreshAll(refreshAll); }
public DeleteNamedQueryResult DeleteNamedQuery(DeleteNamedQueryRequest request) {request = beforeClientExecution(request);return executeDeleteNamedQuery(request);}
public GraphvizFormatter(ConnectionCosts costs) { this.costs = costs; this.bestPathMap = new Dictionary<string, int>(); sb.Append(formatHeader()); sb.Append("  init [style=invis]\n"); sb.Append("  init -> 0.0 [label=\"" + BOS_LABEL + "\"]\n"); }
public CheckMultiagentRequest() : base("visionai-poc", "2020-04-08", "CheckMultiagent") { setMethod(MethodType.POST); }
public ListUserProfilesResult listUserProfiles(ListUserProfilesRequest request) { request = beforeClientExecution(request); return executeListUserProfiles(request); }
public CreateRelationalDatabaseFromSnapshotResult createRelationalDatabaseFromSnapshot(CreateRelationalDatabaseFromSnapshotRequest request) { request = beforeClientExecution(request); return executeCreateRelationalDatabaseFromSnapshot(request); }
public StartTaskResult StartTask(StartTaskRequest request) { request = BeforeClientExecution(request); return ExecuteStartTask(request); }
public HashSet<string> GetIgnoredPaths() { return ignoredPaths; }
public FeatSmartTag(RecordInputStream in) { data = in.readRemainder(); }
public Change(ChangeAction action, ResourceRecordSet resourceRecordSet) {setAction(action.ToString());setResourceRecordSet(resourceRecordSet);}
public DeleteImageResult DeleteImage(DeleteImageRequest request) { request = beforeClientExecution(request); return executeDeleteImage(request); }
public CreateConfigurationSetResult CreateConfigurationSet(CreateConfigurationSetRequest request) {request = beforeClientExecution(request);return executeCreateConfigurationSet(request);}
public IEnumerator<E> GetEnumerator() { object[] snapshot = elements; return new CowIterator<E>(snapshot, 0, snapshot.Length); }
public void visitContainedRecords(RecordVisitor rv) {if (_recs.Count == 0) {return;}rv.visitRecord(_bofRec);for (int i = 0; i < _recs.Count; i++) {RecordBase rb = _recs[i];if (rb is RecordAggregate) {((RecordAggregate) rb).visitContainedRecords(rv);} else {rv.visitRecord((org.apache.poi.hssf.record.Record) rb);}}rv.visitRecord(EOFRecord.instance);}
public string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[FtCbls ]").Append("\n"); buffer.Append("  size     = ").Append(GetDataSize()).Append("\n"); buffer.Append("  reserved = ").Append(HexDump.ToHex(reserved)).Append("\n"); buffer.Append("[/FtCbls ]").Append("\n"); return buffer.ToString(); }
public static BATBlock CreateEmptyBATBlock(POIFSBigBlockSize bigBlockSize, bool isXBAT){BATBlock block = new BATBlock(bigBlockSize);if (isXBAT){int _entries_per_xbat_block = bigBlockSize.GetXBATEntriesPerBlock();block._values[_entries_per_xbat_block] = POIFSConstants.END_OF_CHAIN;}return block;}
public TagResourceResult TagResource(TagResourceRequest request) { request = BeforeClientExecution(request); return ExecuteTagResource(request); }
public DeleteMailboxPermissionsResult DeleteMailboxPermissions(DeleteMailboxPermissionsRequest request) { request = beforeClientExecution(request); return executeDeleteMailboxPermissions(request); }
public class PinpointClient : AmazonPinpointClient{public ListDatasetGroupsResult ListDatasetGroups(ListDatasetGroupsRequest request){request = BeforeClientExecution(request);return ExecuteListDatasetGroups(request);}}
public ResumeProcessesResult ResumeProcesses(ResumeProcessesRequest request) { request = BeforeClientExecution(request); return ExecuteResumeProcesses(request); }
public GetPersonTrackingResult GetPersonTracking(GetPersonTrackingRequest request) {request = BeforeClientExecution(request);return ExecuteGetPersonTracking(request);}
public string toFormulaString(string[] operands) {if (space.isSet(_options)) {return operands[0];} else if (optiIf.isSet(_options)) {return toFormulaString() + "(" + operands[0] + ")";} else if (optiSkip.isSet(_options)) {return toFormulaString() + operands[0];} else {return toFormulaString() + "(" + operands[0] + ")";}}
public T Merge(T first, T second) { throw new NotSupportedException(); }
public string ToString() {return this.message.GetKey() + ": " + GetLocalizedMessage();}
public XPath(Parser parser, string path) : this.parser = parser, this.path = path { elements = split(path); }
public CreateAccountAliasRequest(string accountAlias) {setAccountAlias(accountAlias);}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {final byte block = blocks[blocksOffset++];values[valuesOffset++] = (block >> 7) & 1;values[valuesOffset++] = (block >> 6) & 1;values[valuesOffset++] = (block >> 5) & 1;values[valuesOffset++] = (block >> 4) & 1;values[valuesOffset++] = (block >> 3) & 1;values[valuesOffset++] = (block >> 2) & 1;values[valuesOffset++] = (block >> 1) & 1;values[valuesOffset++] = block & 1;}}
public PushConnection openPush() throws TransportException {return new TcpPushConnection();}
public static void strcpy(char[] dst, int di, char[] src, int si) { while (src[si] != 0) { dst[di++] = src[si++]; } dst[di] = 0; }
public K getKey() {return mapEntry.Key;}
public static int numNonnull(object[] data) { int n = 0; if (data == null) return n; foreach (object o in data) { if (o != null) n++; } return n; }
public void Add(int location, E @object) {if (location >= 0 && location <= size) {Link<E> link = voidLink;if (location < (size / 2)) {for (int i = 0; i <= location; i++) {link = link.next;}} else {for (int i = size; i > location; i--) {link = link.previous;}}Link<E> previous = link.previous;Link<E> newLink = new Link<E>(@object, previous, link);previous.next = newLink;link.previous = newLink;size++;modCount++;} else {throw new IndexOutOfBoundsException();}}
public DescribeDomainResult DescribeDomain(DescribeDomainRequest request) { request = beforeClientExecution(request); return executeDescribeDomain(request); }
public void Flush() { base.Flush(); }
public PersianCharFilterFactory(Dictionary<string, string> args) : base(args) { if (!args.isEmpty()) { throw new ArgumentException("Unknown parameters: " + args); } }
public bool IncrementToken() { if (used) { return false; } clearAttributes(); termAttribute.Append(value); offsetAttribute.SetOffset(0, length); used = true; return true; }
public static FloatBuffer Allocate(int capacity){if (capacity < 0){throw new ArgumentException();}return new ReadWriteFloatArrayBuffer(capacity);}
public final Edit after(Edit cut) { return new Edit(cut.endA, endA, cut.endB, endB); }
public UpdateRuleVersionResult UpdateRuleVersion(UpdateRuleVersionRequest request) { request = BeforeClientExecution(request); return ExecuteUpdateRuleVersion(request); }
public ListVoiceConnectorTerminationCredentialsResult ListVoiceConnectorTerminationCredentials(ListVoiceConnectorTerminationCredentialsRequest request) { request = BeforeClientExecution(request); return ExecuteListVoiceConnectorTerminationCredentials(request); }
public GetDeploymentTargetResult GetDeploymentTarget(GetDeploymentTargetRequest request) { request = BeforeClientExecution(request); return ExecuteGetDeploymentTarget(request); }
public void SetNoChildReport() { letChildReport = false; foreach (PerfTask task in tasks) { if (task is TaskSequence) { ((TaskSequence)task).SetNoChildReport(); } } }
public E Get(int location){try{return a[location];}catch (ArgumentOutOfRangeException e){throw System.Collections.Generic.List<T>.ThrowIndexOutOfRangeException(location, a.Length);}}
public DescribeDataSetResult DescribeDataSet(DescribeDataSetRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeDataSet(request); }
public SkipWorkTreeFilter(int treeIdx) { this.treeIdx = treeIdx; }
public DescribeNetworkInterfacesResult DescribeNetworkInterfaces() { return DescribeNetworkInterfaces(new DescribeNetworkInterfacesRequest()); }
public bool Contains(int row, int col) {return _firstRow <= row && _lastRow >= row && _firstColumn <= col && _lastColumn >= col;}
public string ToString() { return new string(this.chars); }
public PatchType GetPatchType() { return patchType; }
public IEnumerator<K> GetEnumerator() { return new KeyIterator(); }
public CreateScriptResult CreateScript(CreateScriptRequest request) {request = beforeClientExecution(request);return executeCreateScript(request);}
public BytesRef next() { termUpto++; if (termUpto >= info.terms.Count) { return null; } else { info.terms[info.sortedTerms[termUpto]].CopyTo(br); return br; } }
public string outputToString(CharsRef output) { return output.ToString(); }
public AssociateWebsiteAuthorizationProviderResult AssociateWebsiteAuthorizationProvider(AssociateWebsiteAuthorizationProviderRequest request) { request = BeforeClientExecution(request); return ExecuteAssociateWebsiteAuthorizationProvider(request); }
public void Unpop(RevCommit c) {Block b = head;if (b == null) {b = free.NewBlock();b.ResetToMiddle();b.Add(c);head = b;tail = b;return;} else if (b.CanUnpop()) {b.Unpop(c);return;}b = free.NewBlock();b.ResetToEnd();b.Unpop(c);b.Next = head;head = b;}
public EdgeNGramTokenizerFactory(Dictionary<string, string> args) : base(args){minGramSize = GetInt(args, "minGramSize", EdgeNGramTokenizer.DEFAULT_MIN_GRAM_SIZE);maxGramSize = GetInt(args, "maxGramSize", EdgeNGramTokenizer.DEFAULT_MAX_GRAM_SIZE);if (!args.IsEmpty()){throw new ArgumentException("Unknown parameters: " + args);}}
public ModifyDBParameterGroupRequest(string dBParameterGroupName, List<Parameter> parameters) { setDBParameterGroupName(dBParameterGroupName); setParameters(parameters); }
public GetHostedZoneLimitResult getHostedZoneLimit(GetHostedZoneLimitRequest request) { request = beforeClientExecution(request); return executeGetHostedZoneLimit(request); }
public void set(int index, long value) {int o = index >> 6;int b = index & 63;int shift = b << 0;blocks[o] = (blocks[o] & ~(1L << shift)) | (value << shift);}
public RevFilter clone() { return new PatternSearch(pattern()); }
public string ToString() { return "spans(" + term.ToString() + ")@" +(doc == -1 ? "START" : (doc == NO_MORE_DOCS) ? "ENDDOC": doc + " - " + (position == NO_MORE_POSITIONS ? "ENDPOS" : position)); }
public bool CanAppendMatch() {foreach (Head head in heads) {if (head != LastHead.INSTANCE) {return true;}}return false;}
public int LastIndexOf(string subString, int start) { return base.LastIndexOf(subString, start); }
public DeleteNetworkAclEntryResult DeleteNetworkAclEntry(DeleteNetworkAclEntryRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteNetworkAclEntry(request); }
public AssociateMemberToGroupResult associateMemberToGroup(AssociateMemberToGroupRequest request) {request = beforeClientExecution(request);return executeAssociateMemberToGroup(request);}
public static int committer(byte[] b, int ptr) { int sz = b.Length; if (ptr == 0) ptr += 46; while (ptr < sz && b[ptr] == 'p') ptr += 48; if (ptr < sz && b[ptr] == 'a') ptr = nextLF(b, ptr); return match(b, ptr, committer); }
public int GetLineNumber() { return row; }
public SubmoduleUpdateCommand addPath(string path) { paths.Add(path); return this; }
public GetPushTemplateResult GetPushTemplate(GetPushTemplateRequest request) { request = BeforeClientExecution(request); return ExecuteGetPushTemplate(request); }
public DescribeVaultResult DescribeVault(DescribeVaultRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeVault(request); }
public DescribeVpcPeeringConnectionsResult DescribeVpcPeeringConnections() { return DescribeVpcPeeringConnections(new DescribeVpcPeeringConnectionsRequest()); }
public void PutInt(int index, int value) {throw new ReadOnlyBufferException();}
public RegisterDeviceResult registerDevice(RegisterDeviceRequest request) { request = beforeClientExecution(request); return executeRegisterDevice(request); }
public static Format byId(int id) {foreach (Format format in Enum.GetValues(typeof(Format))) {if (format.getId() == id) {return format;}}throw new ArgumentException("Unknown format id: " + id);}
public DeleteAppResult DeleteApp(DeleteAppRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteApp(request); }
public GetBaiduChannelResult getBaiduChannel(GetBaiduChannelRequest request) { request = beforeClientExecution(request); return executeGetBaiduChannel(request); }
public FST.BytesReader GetBytesReader() { return fst.GetBytesReader(); }
public static bool IsValidSchemeChar(int index, char c) {if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {return true;}if (index > 0 && ((c >= '0' && c <= '9') || c == '+' || c == '-' || c == '.')) {return true;}return false;}
public ListAppliedSchemaArnsResult ListAppliedSchemaArns(ListAppliedSchemaArnsRequest request) { request = BeforeClientExecution(request); return ExecuteListAppliedSchemaArns(request); }
public string name() { return this.name; }
public IValueEval Evaluate(IValueEval[] args, OperationEvaluationContext ec) {if (args.Length < 1) {return ErrorEval.ValueInvalid;}bool isA1Style;string text;try {IValueEval ve = OperandResolver.GetSingleValue(args[0], ec.RowIndex, ec.ColumnIndex);text = OperandResolver.CoerceValueToString(ve);switch (args.Length) {case 1:isA1Style = true;break;case 2:isA1Style = EvaluateBooleanArg(args[1], ec);break;default:return ErrorEval.ValueInvalid;}} catch (EvaluationException e) {return e.GetErrorEval();}return EvaluateIndirect(ec, text, isA1Style);}
public final int CompareTo(int[] bs, int p) {int cmp;cmp = NB.CompareUInt32(w1, bs[p]);if (cmp != 0)return cmp;cmp = NB.CompareUInt32(w2, bs[p + 1]);if (cmp != 0)return cmp;cmp = NB.CompareUInt32(w3, bs[p + 2]);if (cmp != 0)return cmp;cmp = NB.CompareUInt32(w4, bs[p + 3]);if (cmp != 0)return cmp;return NB.CompareUInt32(w5, bs[p + 4]);}
public void removeName(int index) { names.RemoveAt(index); workbook.RemoveName(index); }
public GetQueueAttributesRequest(string queueUrl, List<string> attributeNames) {setQueueUrl(queueUrl);setAttributeNames(attributeNames);}
public static boolean[] copyOf(boolean[] original, int newLength) {if (newLength < 0) {throw new NegativeArraySizeException();}return copyOfRange(original, 0, newLength);}
public static void setEnabled(bool enabled) {ENABLED = enabled;}
public DeleteLogPatternResult DeleteLogPattern(DeleteLogPatternRequest request) { request = beforeClientExecution(request); return executeDeleteLogPattern(request); }
public bool Contains(char[] text, int off, int len) { return map.ContainsKey(text, off, len); }
public int GetFirstSheetIndexFromExternSheetIndex(int externSheetNumber){return linkTable.GetFirstInternalSheetIndexForExtIndex(externSheetNumber);}
public bool Handles(string commandLine) { return command.Length + 1 < commandLine.Length && commandLine[command.Length] == ' ' && commandLine.StartsWith(command); }
public static void register(MergeStrategy imp) { register(imp.Name, imp); }
public long RamBytesUsed() { return BASE_RAM_BYTES_USED + ((index != null) ? index.RamBytesUsed() : 0); }
public HostedZone(string id, string name, string callerReference) { setId(id); setName(name); setCallerReference(callerReference); }
public GetFindingsResult GetFindings(GetFindingsRequest request) { request = beforeClientExecution(request); return executeGetFindings(request); }
public DescribeTopicsDetectionJobResult DescribeTopicsDetectionJob(DescribeTopicsDetectionJobRequest request) {request = BeforeClientExecution(request);return ExecuteDescribeTopicsDetectionJob(request);}
public bool ProcessMatch(ValueEval eval) {if (eval is NumericValueEval) {if (minimumValue == null) {minimumValue = eval;} else {double currentValue = ((NumericValueEval)eval).GetNumberValue();double oldValue = ((NumericValueEval)minimumValue).GetNumberValue();if (currentValue < oldValue) {minimumValue = eval;}}}return true;}
public void Write(LittleEndianOutput output) {output.WriteByte((byte)(sid + GetPtgClass()));output.WriteShort(field_1_len_ref_subexpression);}
public class Program{public static void Main(string[] args){bool printTree = false;string path = null;for (int i = 0; i < args.Length; i++){if (args[i] == "-printTree"){printTree = true;}else{path = args[i];}}if (args.Length != (printTree ? 2 : 1)){Console.WriteLine("\nUsage: java -classpath ... org.apache.lucene.facet.util.PrintTaxonomyStats [-printTree] /path/to/taxononmy/index\n");Environment.Exit(1);}
public void SetByteValue(byte value) { if (!(fieldsData is Byte)) { throw new ArgumentException("cannot change value type from " + fieldsData.GetType().getSimpleName() + " to Byte"); } fieldsData = Byte.ValueOf(value); }
public static int initialize() { return initialize(DEFAULT_SEED); }
public CachingDoubleValueSource(DoubleValuesSource source) { this.source = source; cache = new HashMap<>(); }
public AttributeDefinition(string attributeName, ScalarAttributeType attributeType) { SetAttributeName(attributeName); SetAttributeType(attributeType.ToString()); }
public static string Join(IEnumerable<string> parts, string separator) { return string.Join(separator, parts); }
public ListTaskDefinitionFamiliesResult ListTaskDefinitionFamilies(ListTaskDefinitionFamiliesRequest request){request = BeforeClientExecution(request);return ExecuteListTaskDefinitionFamilies(request);}
public ListComponentsResult ListComponents(ListComponentsRequest request) {request = BeforeClientExecution(request);return ExecuteListComponents(request);}
public ActivatePhotosRequest() : base("CloudPhoto", "2017-07-11", "ActivatePhotos", "cloudphoto"){this.Protocol = ProtocolType.HTTPS;}
public CreateMatchmakingRuleSetResult CreateMatchmakingRuleSet(CreateMatchmakingRuleSetRequest request) {request = BeforeClientExecution(request);return ExecuteCreateMatchmakingRuleSet(request);}
public ListAvailableManagementCidrRangesResult ListAvailableManagementCidrRanges(ListAvailableManagementCidrRangesRequest request) { request = BeforeClientExecution(request); return ExecuteListAvailableManagementCidrRanges(request); }
public ObjectIdSubclassMap<ObjectId> GetBaseObjectIds() { if (baseObjectIds != null) return baseObjectIds; return new ObjectIdSubclassMap<>(); }
public DeletePushTemplateResult DeletePushTemplate(DeletePushTemplateRequest request) {request = beforeClientExecution(request);return executeDeletePushTemplate(request);}
public CreateDomainEntryResult CreateDomainEntry(CreateDomainEntryRequest request) {request = BeforeClientExecution(request);return ExecuteCreateDomainEntry(request);}
public static int getEncodedSize(object[] values) {int result = values.Length * 1;for (object value in values) {result += getEncodedSize(value);}return result;}
public OpenNLPTokenizerFactory(Dictionary<string, string> args) : base(args) {sentenceModelFile = Require(args, SENTENCE_MODEL);tokenizerModelFile = Require(args, TOKENIZER_MODEL);if (!args.IsNullOrEmpty()) {throw new ArgumentException("Unknown parameters: " + string.Join(", ", args.Keys));}}
public final int getInt(int index) {checkIndex(index, SizeOf.INT);return Memory.peekInt(backingArray, offset + index, order);}
public List<Head> GetNextHeads(char c) {if (Matches(c)) {return newHeads;}return FileNameMatcher.EMPTY_HEAD_LIST;}
public ByteBuffer PutShort(short value) { throw new ReadOnlyBufferException(); }
public void writeUnshared(object obj) { writeObject(obj, true); }
public int offsetByCodePoints(int index, int codePointOffset) { return Character.OffsetByCodePoints(value, 0, count, index, codePointOffset); }
public static int getUniqueAlt(IEnumerable<BitSet> altsets) {BitSet all = getAlts(altsets);if ( all.Cardinality() == 1 ) return all.NextSetBit(0);return ATN.INVALID_ALT_NUMBER;}
public DateTime GetWhen() { return new DateTime(when); }
public RuleTagToken(string ruleName, int bypassTokenType, string label) {if (string.IsNullOrEmpty(ruleName)) {throw new ArgumentException("ruleName cannot be null or empty.");}this.ruleName = ruleName;this.bypassTokenType = bypassTokenType;this.label = label;}
public DisableOrganizationAdminAccountResult DisableOrganizationAdminAccount(DisableOrganizationAdminAccountRequest request) { request = BeforeClientExecution(request); return ExecuteDisableOrganizationAdminAccount(request); }
public CreateRoomResult createRoom(CreateRoomRequest request) { request = beforeClientExecution(request); return executeCreateRoom(request); }
public ReplicationGroup deleteReplicationGroup(DeleteReplicationGroupRequest request) { request = beforeClientExecution(request); return executeDeleteReplicationGroup(request); }
public new CharBuffer Decode(ByteBuffer buffer){try{return newDecoder().OnMalformedInput(CodingErrorAction.REPLACE).OnUnmappableCharacter(CodingErrorAction.REPLACE).Decode(buffer);}catch (CharacterCodingException ex){throw new Error(ex.Message, ex);}}
public Distribution(string id, string status, string domainName) { setId(id); setStatus(status); setDomainName(domainName); }
public readonly double[] array() { return protectedArray(); }
public DateWindow1904Record(RecordInputStream in) { field_1_window = in.readShort(); }
public DeleteDBSnapshotRequest(string dBSnapshotIdentifier) { SetDBSnapshotIdentifier(dBSnapshotIdentifier); }
public final ParserExtension GetExtension(string key) { return this.extensions.Get(key); }
public void inform(ResourceLoader loader) {try {if (chunkerModelFile != null) {OpenNLPOpsFactory.GetChunkerModel(chunkerModelFile, loader);}} catch (IOException e) {throw new ArgumentException(e);}}
public CompleteVaultLockResult CompleteVaultLock(CompleteVaultLockRequest request) { request = BeforeClientExecution(request); return ExecuteCompleteVaultLock(request); }
public readonly int[] GetCharIntervals() { return points.Clone() as int[]; }
public long RamBytesUsed() => values.RamBytesUsed() + base.RamBytesUsed() + long.BYTES + RamUsageEstimator.NUM_BYTES_OBJECT_REF;
public RegisterInstancesWithLoadBalancerResult RegisterInstancesWithLoadBalancer(RegisterInstancesWithLoadBalancerRequest request) { request = BeforeClientExecution(request); return ExecuteRegisterInstancesWithLoadBalancer(request); }
public DescribeClusterUserKubeconfigRequest() : base("CS", "2015-12-15", "DescribeClusterUserKubeconfig", "csk"){setUriPattern("/k8s/[ClusterId]/user_config");setMethod(MethodType.GET);}
public PrecisionRecord(RecordInputStream in) {field_1_precision = in.readShort();}
public void serialize(LittleEndianOutput out){out.writeShort(getLeftRowGutter());out.writeShort(getTopColGutter());out.writeShort(getRowLevelMax());out.writeShort(getColLevelMax());}
public DeleteVirtualInterfaceResult DeleteVirtualInterface(DeleteVirtualInterfaceRequest request) { request = beforeClientExecution(request); return executeDeleteVirtualInterface(request); }
public Entry GetEntry(string name){if (excludes.Contains(name)){throw new FileNotFoundException(name);}Entry entry = directory.GetEntry(name);return wrapEntry(entry);}
public string ToString(){StringBuilder buffer = new StringBuilder();buffer.Append("[BACKUP]\n");buffer.Append("    .backup          = ").Append(Integer.toHexString(GetBackup())).Append("\n");buffer.Append("[/BACKUP]\n");return buffer.ToString();}
public DeleteVoiceConnectorOriginationResult deleteVoiceConnectorOrigination(DeleteVoiceConnectorOriginationRequest request){request = beforeClientExecution(request);return executeDeleteVoiceConnectorOrigination(request);}
public IAppendable Append(char c) { Write(c); return this; }
public static long generationFromSegmentsFileName(string fileName) {if (fileName.Equals(OLD_SEGMENTS_GEN)) {throw new ArgumentException("\"" + OLD_SEGMENTS_GEN + "\" is not a valid segment file name since 4.0");} else if (fileName.Equals(IndexFileNames.SEGMENTS)) {return 0;} else if (fileName.StartsWith(IndexFileNames.SEGMENTS)) {return long.Parse(fileName.Substring(1+IndexFileNames.SEGMENTS.Length()), char.MaxValue);}}
public static TagOpt FromOption(string o) {if (o == null || o.Length == 0)return TagOpt.AUTO_FOLLOW;foreach (TagOpt tagopt in Enum.GetValues(typeof(TagOpt))) {if (tagopt.option().Equals(o))return tagopt;}throw new ArgumentException(string.Format(JGitText.get().invalidTagOption, o));}
public StartContentModerationResult StartContentModeration(StartContentModerationRequest request) { request = BeforeClientExecution(request); return ExecuteStartContentModeration(request); }
public static String quoteReplacement(string s) { StringBuilder result = new StringBuilder(s.Length); for (int i = 0; i < s.Length; i++) { char c = s[i]; if (c == '\\' || c == '$') { result.Append('\\'); } result.Append(c); } return result.ToString(); }
public final void Set(V newValue) {value = newValue;}
public QueryParserTokenManager(CharStream stream) { input_stream = stream; }
public long valueFor(double elapsed){double val;if (modBy == 0)val = elapsed / factor;elseval = elapsed / factor % modBy;if (type == '0')return (long)Math.Round(val);elsereturn (long)val;}
public long[] Get(long[] dst, int dstOffset, int longCount) {byteBuffer.limit(limit * SizeOf.LONG);byteBuffer.position(position * SizeOf.LONG);if (byteBuffer is DirectByteBuffer) {((DirectByteBuffer) byteBuffer).Get(dst, dstOffset, longCount);} else {((HeapByteBuffer) byteBuffer).Get(dst, dstOffset, longCount);}this.position += longCount;return this;}
public void removeErrorListeners() { _listeners.Clear(); }
public CommonTokenStream(TokenSource tokenSource, int channel) {this(tokenSource);this.channel = channel;}
public ListObjectPoliciesResult ListObjectPolicies(ListObjectPoliciesRequest request) { request = BeforeClientExecution(request); return ExecuteListObjectPolicies(request); }
public ObjectToPack(AnyObjectId src, int type) : base(src) { flags = type << TYPE_SHIFT; }
public int stem(char[] s, int len) {int numVowels = numVowels(s, len);for (int i = 0; i < affixes.Length; i++) {Affix affix = affixes[i];if (numVowels > affix.vc && len >= affix.affix.Length + 3 && endsWith(s, len, affix.affix)) {len -= affix.affix.Length;return affix.palatalizes ? unpalatalize(s, len) : len;}}return len;}
public void recover(Parser recognizer, RecognitionException e) {if (lastErrorIndex == recognizer.InputStream.Index && lastErrorStates != null && lastErrorStates.Contains(recognizer.State)) {recognizer.Consume();}lastErrorIndex = recognizer.InputStream.Index;if (lastErrorStates == null) {lastErrorStates = new IntervalSet();}lastErrorStates.Add(recognizer.State);IntervalSet followSet = getErrorRecoverySet(recognizer);consumeUntil(recognizer, followSet);}
public string ToFormulaString() { string value = field_3_string; int len = value.Length; StringBuilder sb = new StringBuilder(len + 4); sb.Append(FORMULA_DELIMITER); for (int i = 0; i < len; i++) { char c = value[i]; if (c == FORMULA_DELIMITER) { sb.Append(FORMULA_DELIMITER); } sb.Append(c); } sb.Append(FORMULA_DELIMITER); return sb.ToString(); }
public UnlinkFaceRequest() : base("LinkFace", "2018-07-20", "UnlinkFace"){SetProtocol(ProtocolType.HTTPS);SetMethod(MethodType.POST);}
public ConfigurationOptionSetting(string namespace, string optionName, string value) {setNamespace(namespace);setOptionName(optionName);setValue(value);}
public string getFully(string key) {StringBuilder result = new StringBuilder(tries.Count * 2);for (int i = 0; i < tries.Count; i++) {string r = tries[i].getFully(key);if (r == null || (r.Length == 1 && r[0] == EOM)) {return result.ToString();}result.Append(r);}return result.ToString();}
public DescribeMountTargetSecurityGroupsResult DescribeMountTargetSecurityGroups(DescribeMountTargetSecurityGroupsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeMountTargetSecurityGroups(request); }
public GetApiMappingResult getApiMapping(GetApiMappingRequest request) {request = beforeClientExecution(request);return executeGetApiMapping(request);}
public HttpRequest(string strUrl) : base(strUrl) { }
public MemFuncPtg(int subExprLen) {field_1_len_ref_subexpression = subExprLen;}
public static TermStats[] GetHighFreqTerms(IndexReader reader, int numTerms, string field, IComparer<TermStats> comparator){TermStatsQueue tiq = null;if (field != null){Terms terms = MultiTerms.GetTerms(reader, field);if (terms == null){throw new Exception("field " + field + " not found");}TermsEnum termsEnum = terms.GetEnumerator();tiq = new TermStatsQueue(numTerms, comparator);tiq.Fill(field, termsEnum);}else{Collection<string> fields = FieldInfos.GetIndexedFields(reader);if (fields.Count == 0){throw new Exception("no fields found for this index");}tiq = new TermStatsQueue(numTerms, comparator);foreach (string fieldName in fields){Terms terms = MultiTerms.GetTerms(reader, fieldName);if (terms != null){tiq.Fill(fieldName, terms.GetEnumerator());}}}TermStats[] result = new TermStats[tiq.Count];int count = tiq.Count - 1;while (tiq.Count != 0){result[count] = tiq.Pop();count--;}return result;}
public DeleteApnsVoipChannelResult DeleteApnsVoipChannel(DeleteApnsVoipChannelRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteApnsVoipChannel(request); }
public ListFacesResult ListFaces(ListFacesRequest request) { request = BeforeClientExecution(request); return ExecuteListFaces(request); }
public ShapeFieldCacheDistanceValueSource(SpatialContext ctx, ShapeFieldCacheProvider<Point> provider, Point from, double multiplier){this.ctx = ctx;this.from = from;this.provider = provider;this.multiplier = multiplier;}
public char Get(int index) { CheckIndex(index); return sequence[index]; }
public UpdateConfigurationProfileResult updateConfigurationProfile(UpdateConfigurationProfileRequest request){request = beforeClientExecution(request);return executeUpdateConfigurationProfile(request);}
public DescribeLifecycleHooksResult DescribeLifecycleHooks(DescribeLifecycleHooksRequest request) {request = beforeClientExecution(request);return executeDescribeLifecycleHooks(request);}
public DescribeHostReservationsResult DescribeHostReservations(DescribeHostReservationsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeHostReservations(request); }
public static PredictionContext fromRuleContext(ATN atn, RuleContext outerContext) {if (outerContext == null) outerContext = RuleContext.EMPTY;if (outerContext.parent == null || outerContext == RuleContext.EMPTY) {return PredictionContext.EMPTY;}PredictionContext parent = EMPTY;parent = PredictionContext.fromRuleContext(atn, outerContext.parent);ATNState state = atn.states[outerContext.invokingState];RuleTransition transition = (RuleTransition)state.transition(0);return SingletonPredictionContext.create(parent, transition.followState.stateNumber);}
public string ToString() {StringBuilder buffer = new StringBuilder();buffer.Append("[SXVDEX]\n");buffer.Append("    .grbit1 =").Append(HexDump.IntToHex(_grbit1)).Append("\n");buffer.Append("    .grbit2 =").Append(HexDump.ByteToHex(_grbit2)).Append("\n");buffer.Append("    .citmShow =").Append(HexDump.ByteToHex(_citmShow)).Append("\n");buffer.Append("    .isxdiSort =").Append(HexDump.ShortToHex(_isxdiSort)).Append("\n");buffer.Append("    .isxdiShow =").Append(HexDump.ShortToHex(_isxdiShow)).Append("\n");buffer.Append("    .subtotalName =").Append(_subtotalName).Append("\n");buffer.Append("[/SXVDEX]\n");return buffer.ToString();}
public string ToString() {StringBuilder r = new StringBuilder(); r.Append("BlameResult: "); r.Append(GetResultPath()); return r.ToString();}
public ListChangeSetsResult listChangeSets(ListChangeSetsRequest request){request = beforeClientExecution(request);return executeListChangeSets(request);}
public bool IsAllowNonFastForwards() { return allowNonFastForwards; }
public FeatRecord() { futureHeader = new FtrHeader(); futureHeader.setRecordType(sid); }
public ShortBuffer Put(short c) { throw new ReadOnlyBufferException(); }
public void setQuery(string query) { this.query = query; this.message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, ""); }
public StashApplyCommand StashApply() { return new StashApplyCommand(repo); }
public HashSet<string> nameSet() {return new HashSet<string>(dictionary.Values);}
public static int GetEffectivePort(string scheme, int specifiedPort) {if (specifiedPort != -1) {return specifiedPort;}if ("http".Equals(scheme, StringComparison.OrdinalIgnoreCase)) {return 80;} else if ("https".Equals(scheme, StringComparison.OrdinalIgnoreCase)) {return 443;} else {return -1;}}
public ListAssessmentTemplatesResult ListAssessmentTemplates(ListAssessmentTemplatesRequest request) { request = BeforeClientExecution(request); return ExecuteListAssessmentTemplates(request); }
public Cluster RestoreFromClusterSnapshot(RestoreFromClusterSnapshotRequest request) { request = BeforeClientExecution(request); return ExecuteRestoreFromClusterSnapshot(request); }
public void addShape(HSSFShape shape) { shape.setPatriarch(this.getPatriarch()); shape.setParent(this); shapes.Add(shape); }
public bool Equals(object o) { if (this == o) return true; if (o == null || GetType() != o.GetType()) return false; FacetEntry that = (FacetEntry) o; if (count != that.count) return false; if (!value.Equals(that.value)) return false; return true; }
public static int prev(byte[] b, int ptr, char chrA) {if (ptr == b.Length) --ptr;while (ptr >= 0) {if (b[ptr--] == chrA) return ptr;}return ptr;}
public bool IsDeltaRepresentation() { return deltaBase != null; }
public Token emitEOF(){int cpos = getCharPositionInLine();int line = getLine();Token eof = _factory.create(_tokenFactorySourcePair, Token.EOF, null, Token.DEFAULT_CHANNEL, _input.index(), _input.index() - 1, line, cpos);emit(eof);return eof;}
public UpdateUserRequest(string userName) {SetUserName(userName);}
public RevFilter negate() { return NotRevFilter.create(this); }
public void setTagger(PersonIdent taggerIdent) { tagger = taggerIdent; }
public static BufferSize Automatic(){Runtime rt = Runtime.getRuntime();long max = rt.maxMemory();long total = rt.totalMemory();long free = rt.freeMemory();long totalAvailableBytes = max - total + free;long sortBufferByteSize = free / 2;long minBufferSizeBytes = MIN_BUFFER_SIZE_MB * MB;if (sortBufferByteSize < minBufferSizeBytes || totalAvailableBytes > 10 * minBufferSizeBytes){if (totalAvailableBytes / 2 > minBufferSizeBytes){sortBufferByteSize = totalAvailableBytes / 2;}else{sortBufferByteSize = Math.Max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);}}return new BufferSize(Math.Min((long)int.MaxValue, sortBufferByteSize));}
public static int trimTrailingWhitespace(byte[] raw, int start, int end) {int ptr = end - 1;while (start <= ptr && isWhitespace(raw[ptr])) {ptr--;}return ptr + 1;}
public TopMarginRecord(RecordInputStream in) { field_1_margin = in.readDouble(); }
public RetrieveEnvironmentInfoRequest(EnvironmentInfoType infoType) { setInfoType(infoType.ToString()); }
public CreatePlayerSessionsResult CreatePlayerSessions(CreatePlayerSessionsRequest request){request = beforeClientExecution(request);return executeCreatePlayerSessions(request);}
public CreateProxySessionResult createProxySession(CreateProxySessionRequest request) { request = beforeClientExecution(request); return executeCreateProxySession(request); }
public int GetObjectType() { return type; }
public string getScheme() { return scheme; }
public void characters(char[] ch, int start, int length) {contents.Append(ch, start, length);}
public FetchAlbumTagPhotosRequest() {base("CloudPhoto", "2017-07-11", "FetchAlbumTagPhotos", "cloudphoto");SetProtocol(ProtocolType.HTTPS);}
public DeleteMembersResult DeleteMembers(DeleteMembersRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteMembers(request); }
public GetContactReachabilityStatusResult GetContactReachabilityStatus(GetContactReachabilityStatusRequest request) { request = BeforeClientExecution(request); return ExecuteGetContactReachabilityStatus(request); }
public override bool Remove(object o) { return Impl.this.Remove(o) != null; }
public E last() {return backingMap.LastKey();}
public CreateStreamingDistributionResult CreateStreamingDistribution(CreateStreamingDistributionRequest request) { request = BeforeClientExecution(request); return ExecuteCreateStreamingDistribution(request); }
public bool IsAbsolute() { return absolute; }
public DisableAddOnResult DisableAddOn(DisableAddOnRequest request) { request = BeforeClientExecution(request); return ExecuteDisableAddOn(request); }
public DescribeAliasResult DescribeAlias(DescribeAliasRequest request) {request = beforeClientExecution(request);return executeDescribeAlias(request);}
public void Next(int delta) {while (--delta >= 0) {if (currentSubtree != null)ptr += currentSubtree.GetEntrySpan();elseptr++;if (Eof())break;ParseEntry();}}
public RevFilter clone() { return new Binary(a.clone(), b.clone()); }
public Reader create(Reader input) { return new PersianCharFilter(input); }
public string option() { return option; }
public string ToString() {StringBuilder sb = new StringBuilder("[");foreach (var item in this) {if (sb.Length > 1) sb.Append(", ");if (item is char[]) {sb.Append((char[]) item);} else {sb.Append(item);}}return sb.Append(']').ToString();}
public DescribeSignalingChannelResult DescribeSignalingChannel(DescribeSignalingChannelRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeSignalingChannel(request); }
public AttachStaticIpResult AttachStaticIp(AttachStaticIpRequest request) { request = BeforeClientExecution(request); return ExecuteAttachStaticIp(request); }
public override string ToString() {StringBuilder sb = new StringBuilder(64);CellReference crA = new CellReference(_firstRowIndex, _firstColumnIndex, false, false);CellReference crB = new CellReference(_lastRowIndex, _lastColumnIndex, false, false);sb.Append(GetType().Name);sb.Append(" [").Append(crA.FormatAsString()).Append(':').Append(crB.FormatAsString()).Append("]");return sb.ToString();}
public BloomFilteringPostingsFormat(PostingsFormat delegatePostingsFormat, BloomFilterFactory bloomFilterFactory) : base(BLOOM_CODEC_NAME){this.delegatePostingsFormat = delegatePostingsFormat;this.bloomFilterFactory = bloomFilterFactory;}
public ListTemplatesResult ListTemplates(ListTemplatesRequest request) {request = beforeClientExecution(request);return executeListTemplates(request);}
public TimerThread(long resolution, Counter counter) : base(THREAD_NAME) { this.resolution = resolution; this.counter = counter; this.SetDaemon(true); }
public DrawingRecord() {recordData = EMPTY_BYTE_ARRAY;}
public ListDirectoriesResult ListDirectories(ListDirectoriesRequest request) { request = BeforeClientExecution(request); return ExecuteListDirectories(request); }
public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {byte block = blocks[blocksOffset++];values[valuesOffset++] = (block >> 7) & 1;values[valuesOffset++] = (block >> 6) & 1;values[valuesOffset++] = (block >> 5) & 1;values[valuesOffset++] = (block >> 4) & 1;values[valuesOffset++] = (block >> 3) & 1;values[valuesOffset++] = (block >> 2) & 1;values[valuesOffset++] = (block >> 1) & 1;values[valuesOffset++] = block & 1;}}
public GroupingSearch disableCaching() { this.maxCacheRAMMB = null; this.maxDocsToCache = null; return this; }
public static int idealByteArraySize(int need) {for (int i = 4; i < 32; i++)if (need <= (1 << i) - 12)return (1 << i) - 12;return need;}
public UpdateAssessmentTargetResult updateAssessmentTarget(UpdateAssessmentTargetRequest request) {request = beforeClientExecution(request);return executeUpdateAssessmentTarget(request);}
public ModifyVolumeResult ModifyVolume(ModifyVolumeRequest request) { request = beforeClientExecution(request); return executeModifyVolume(request); }
public Cell merge(Cell m, Cell e) {if (m.cmd == e.cmd && m.ref == e.ref && m.skip == e.skip) {Cell c = new Cell(m);c.cnt += e.cnt;return c;} else {return null;}}
public void Read(int length, long position) throws IOException {if (position >= size()) {throw new IndexOutOfBoundsException("Position " + position + " past the end of the file");}ByteBuffer dst;if (writable) {dst = channel.Map(FileChannel.MapMode.READ_WRITE, position, length);buffersToClean.Add(dst);} else {channel.Position(position);dst = ByteBuffer.Allocate(length);int worked = IOUtils.ReadFully(channel, dst);if (worked == -1) {throw new IndexOutOfBoundsException("Position " + position + " past the end of the file");}}dst.Position(0);return dst;}
public void respondActivityTaskCompleted(RespondActivityTaskCompletedRequest request) { request = beforeClientExecution(request); executeRespondActivityTaskCompleted(request); }
public void incrementProgressBy(int diff) { mProgress = mProgress + diff; }
public MetadataDiff CompareMetadata(DirCacheEntry entry) {if (entry.IsAssumeValid())return MetadataDiff.EQUAL;if (entry.IsUpdateNeeded())return MetadataDiff.DIFFER_BY_METADATA;if (IsModeDifferent(entry.GetRawMode()))return MetadataDiff.DIFFER_BY_METADATA;int type = mode & FileMode.TYPE_MASK;if (type == FileMode.TYPE_TREE || type == FileMode.TYPE_GITLINK)return MetadataDiff.EQUAL;if (!entry.IsSmudged() && entry.GetLength() != (int) GetEntryLength())return MetadataDiff.DIFFER_BY_METADATA;Instant cacheLastModified = entry.GetLastModifiedInstant();Instant fileLastModified = GetEntryLastModifiedInstant();if (timestampComparator.Compare(cacheLastModified, fileLastModified, GetOptions().GetCheckStat() == CheckStat.MINIMAL) != 0) {return MetadataDiff.DIFFER_BY_TIMESTAMP;}if (entry.IsSmudged()) {return MetadataDiff.SMUDGED;}return MetadataDiff.EQUAL;}
public static NumberRecord convertToNumberRecord(RKRecord rk) { NumberRecord num = new NumberRecord(); num.setColumn(rk.getColumn()); num.setRow(rk.getRow()); num.setXFIndex(rk.getXFIndex()); num.SetValue(rk.GetRKNumber()); return num; }
public CharBuffer Put(char[] src, int srcOffset, int charCount) {byteBuffer.Limit(limit * SizeOf.CHAR);byteBuffer.Position(position * SizeOf.CHAR);if (byteBuffer is ReadWriteDirectByteBuffer) {((ReadWriteDirectByteBuffer)byteBuffer).Put(src, srcOffset, charCount);} else {((ReadWriteHeapByteBuffer)byteBuffer).Put(src, srcOffset, charCount);}this.position += charCount;return this;}
public int GetCells(){IEnumerator<char> i = cells.Keys.GetEnumerator();int size = 0;while (i.MoveNext()){char c = i.Current;Cell e = At(c);if (e.cmd >= 0 || e.ref >= 0){size++;}}return size;}
public BeiderMorseFilterFactory(Dictionary<string, string> args) : base(args){NameType nameType = NameType.Parse(get(args, "nameType", NameType.Generic.ToString()));RuleType ruleType = RuleType.Parse(get(args, "ruleType", RuleType.Approx.ToString()));bool concat = getBoolean(args, "concat", true);engine = new PhoneticEngine(nameType, ruleType, concat);HashSet<string> langs = getSet(args, "languageSet");languageSet = (null == langs || (1 == langs.Count && langs.Contains("auto"))) ? null : LanguageSet.From(langs);if (!args.IsEmpty()){throw new ArgumentException("Unknown parameters: " + string.Join(", ", args));}}
public static double Varp(double[] v) { double r = double.NaN; if (v != null && v.Length > 1) { r = Devsq(v) / v.Length; } return r; }
public PersianNormalizationFilterFactory(Dictionary<string, string> args) : base(args) { if (!args.Any()) { throw new ArgumentException("Unknown parameters: " + string.Join(", ", args)); } }
public static WeightedTerm[] GetTerms(Query query, bool prohibited, string fieldName){HashSet<WeightedTerm> terms = new HashSet<WeightedTerm>();Predicate<string> fieldSelector = fieldName == null ? f => true : f => f.Equals(fieldName);query.Visit(new BoostedTermExtractor(1, terms, prohibited, fieldSelector));return terms.ToArray(new WeightedTerm[0]);}
public DeleteDocumentationPartResult DeleteDocumentationPart(DeleteDocumentationPartRequest request) {request = beforeClientExecution(request);return executeDeleteDocumentationPart(request);}
public string ToString() {StringBuilder sb = new StringBuilder();sb.Append("[CHART]\n");sb.Append("    .x     = ").Append(GetX()).Append('\n');sb.Append("    .y     = ").Append(GetY()).Append('\n');sb.Append("    .width = ").Append(GetWidth()).Append('\n');sb.Append("    .height= ").Append(GetHeight()).Append('\n');sb.Append("[/CHART]\n");return sb.ToString();}
public short Get(int index) { CheckIndex(index); return backingArray[offset + index]; }
public string ToString(){return image;}
public ValueEval Evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1){try{AreaEval reA = EvaluateRef(arg0);AreaEval reB = EvaluateRef(arg1);AreaEval result = ResolveRange(reA, reB);if (result == null){return ErrorEval.NULL_INTERSECTION;}return result;}catch (EvaluationException e){return e.GetErrorEval();}}
public void clear() {weightBySpanQuery.Clear();}
public int findEndOffset(StringBuilder buffer, int start) {if (start > buffer.Length || start < 0) return start;bi.SetText(buffer.ToString(start, buffer.Length - start));return bi.Next() + start;}
public SrndQuery PrimaryQuery() //throws ParseException {SrndQuery q;switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case LPAREN: jj_consume_token(LPAREN); q = FieldsQuery(); jj_consume_token(RPAREN); break;case OR: case AND: case W: case N: q = PrefixOperatorQuery(); break;case TRUNCQUOTED: case QUOTED: case SUFFIXTERM: case TRUNCTERM: case TERM: q = SimpleTerm(); break;default: jj_la1[5] = jj_gen; jj_consume_token(-1); throw new ParseException();}OptionalWeights(q);{if (true) return q;}throw new Error("Missing return statement in function");}
public DeleteApiKeyResult DeleteApiKey(DeleteApiKeyRequest request) { request = beforeClientExecution(request); return executeDeleteApiKey(request); }
public InsertTagsRequest() : base("Ots", "2016-06-20", "InsertTags", "ots") { setMethod(MethodType.POST); }
public DeleteUserByPrincipalIdResult DeleteUserByPrincipalId(DeleteUserByPrincipalIdRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteUserByPrincipalId(request); }
public DescribeNetworkInterfacesResult describeNetworkInterfaces(DescribeNetworkInterfacesRequest request) { request = beforeClientExecution(request); return executeDescribeNetworkInterfaces(request); }
public int Serialize(int offset, byte[] data, EscherSerializationListener listener){listener.BeforeRecordSerialize(offset, GetRecordId(), this);LittleEndian.PutShort(data, offset, GetOptions());LittleEndian.PutShort(data, offset + 2, GetRecordId());LittleEndian.PutInt(data, offset + 4, 8);LittleEndian.PutInt(data, offset + 8, field_1_numShapes);LittleEndian.PutInt(data, offset + 12, field_2_lastMSOSPID);listener.AfterRecordSerialize(offset + 16, GetRecordId(), GetRecordSize(), this);return GetRecordSize();}
public CreateSecurityConfigurationResult CreateSecurityConfiguration(CreateSecurityConfigurationRequest request) { request = BeforeClientExecution(request); return ExecuteCreateSecurityConfiguration(request); }
public DescribeClientVpnConnectionsResult DescribeClientVpnConnections(DescribeClientVpnConnectionsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeClientVpnConnections(request); }
public static void fill(double[] array, double value) {for (int i = 0; i < array.Length; i++) {array[i] = value;}}
public bool HasNext() { return nextId < cells.Length; }
public PostingsEnum Reset(int[] postings) { this.postings = postings; upto = -2; freq = 0; return this;}
public bool HasAll(RevFlagSet set) { return (flags & set.mask) == set.mask; }
public ModifyAccountResult ModifyAccount(ModifyAccountRequest request) { request = BeforeClientExecution(request); return ExecuteModifyAccount(request); }
public Token LT(int k) { lazyInit(); if (k == 0) return null; if (k < 0) return LB(-k); int i = p + k - 1; sync(i); if (i >= tokens.Count) { return tokens[tokens.Count - 1]; } return tokens[i]; }
public void removeSheet(int sheetIndex) {if (boundsheets.Count > sheetIndex) {records.RemoveAt(records.GetBspos() - (boundsheets.Count - 1) + sheetIndex);boundsheets.RemoveAt(sheetIndex);FixTabIdRecord();}int sheetNum1Based = sheetIndex + 1;for (int i = 0; i < GetNumNames(); i++) {NameRecord nr = GetNameRecord(i);if (nr.GetSheetNumber() == sheetNum1Based) {nr.SetSheetNumber(0);} else if (nr.GetSheetNumber() > sheetNum1Based) {nr.SetSheetNumber(nr.GetSheetNumber() - 1);}}if (linkTable != null) {linkTable.RemoveSheet(sheetIndex);}}
public void removeName(string name) { int index = getNameIndex(name); removeName(index); }
public bool Equals(final object o) { if (!(o is Property)) { return false; } final Property p = (Property) o; final object pValue = p.GetValue(); final long pId = p.GetID(); if (id != pId || (id != 0 && !TypesAreEqual(type, p.GetType()))) { return false; } if (value == null && pValue == null) { return true; } if (value == null || pValue == null) { return false; } final Class<?> valueClass = value.getClass(); final Class<?> pValueClass = pValue.getClass(); if (!(valueClass.IsAssignableFrom(pValueClass)) && ! (pValueClass.IsAssignableFrom(valueClass))) { return false; } if (value instanceof byte[]) { byte[] thisVal = (byte[]) value, otherVal = (byte[]) pValue; int len = UnpaddedLength(thisVal); if (len != UnpaddedLength(otherVal)) { return false; } for (int i = 0; i < len; i++) { if (thisVal[i] != otherVal[i]) { return false; } } return true; } return value.Equals(pValue); }
public GetRepoBuildListRequest() : base("cr", "2016-06-07", "GetRepoBuildList", "cr") {setUriPattern("/repos/[RepoNamespace]/[RepoName]/build");setMethod(MethodType.GET);}
public MessageWriter() {buf = new MemoryStream();enc = new StreamWriter(GetRawStream(), Encoding.UTF8);}
public void Append(RecordBase r) { _recs.Add(r); }
public void Close(){if (Read(skipBuffer) != -1 || actualSize != expectedSize){throw new CorruptObjectException(string.Format(JGitText.get().packfileCorruptionDetected, JGitText.get().wrongDecompressedLength));}int used = bAvail - inf.getRemaining();if (0 < used){OnObjectData(src, buf, p, used);use(used);}inf.reset();}
public DescribeModelPackageResult DescribeModelPackage(DescribeModelPackageRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeModelPackage(request); }
public void construct(CellValueRecordInterface rec, RecordStream rs, SharedValueManager sfh){if (rec is FormulaRecord){FormulaRecord formulaRec = rec as FormulaRecord;StringRecord cachedText;Type nextClass = rs.peekNextClass();if (nextClass == typeof(StringRecord)){cachedText = rs.getNext() as StringRecord;}else{cachedText = null;}insertCell(new FormulaRecordAggregate(formulaRec, cachedText, sfh));}else{insertCell(rec);}}
public Decompressor clone() {return new DeflateDecompressor();}
public UpdateS3ResourcesResult UpdateS3Resources(UpdateS3ResourcesRequest request) {request = BeforeClientExecution(request);return ExecuteUpdateS3Resources(request);}
public GroupQueryNode(QueryNode query) {if (query == null) {throw new QueryNodeError(new MessageImpl(QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, "query", "null"));}allocate();setLeaf(false);add(query);}
public string ToQueryString(EscapeQuerySyntax escaper) {StringBuilder path = new StringBuilder();path.Append("/").Append(GetFirstPathElement());foreach (QueryText pathelement in GetPathElements(1)) {string value = escaper.Escape(pathelement.value, Locale.getDefault(), Type.STRING);path.Append("/\"").Append(value).Append("\"");}return path.ToString();}
public void removeCellComment() {HSSFComment comment = _sheet.FindCellComment(_record.GetRow(), _record.GetColumn());_comment = null;if (null == comment){return;}_sheet.GetDrawingPatriarch().RemoveShape(comment);}
public void reset() { arriving = -1; leaving = -1; }
public ActivateUserResult ActivateUser(ActivateUserRequest request) { request = beforeClientExecution(request); return executeActivateUser(request); }
public bool IsCharsetDetected() { throw new UnsupportedOperationException(); }
public Cluster ModifySnapshotCopyRetentionPeriod(ModifySnapshotCopyRetentionPeriodRequest request) {request = BeforeClientExecution(request);return ExecuteModifySnapshotCopyRetentionPeriod(request);}
public DeleteClusterSubnetGroupResult DeleteClusterSubnetGroup(DeleteClusterSubnetGroupRequest request) {request = beforeClientExecution(request);return executeDeleteClusterSubnetGroup(request);}
public static string decode(byte[] buffer) { return decode(buffer, 0, buffer.Length); }
public int getDefaultPort() { return -1; }
public StopTaskResult StopTask(StopTaskRequest request) { request = beforeClientExecution(request); return executeStopTask(request); }
public void SeekExact(BytesRef target, TermState otherState) {Debug.Assert(otherState != null && otherState is BlockTermState);Debug.Assert(!doOrd || ((BlockTermState) otherState).ord < numTerms);state.CopyFrom(otherState);seekPending = true;indexIsCurrent = false;term.CopyBytes(target);}
public SeriesToChartGroupRecord(RecordInputStream in) {field_1_chartGroupIndex = in.readShort();}
public static void writeUnicodeStringFlagAndData(LittleEndianOutput out, string value) {bool is16Bit = hasMultibyte(value);out.WriteByte(is16Bit ? (byte)0x01 : (byte)0x00);if (is16Bit) {putUnicodeLE(value, out);} else {putCompressedUnicode(value, out);}}
public AuthorizeSecurityGroupIngressResult AuthorizeSecurityGroupIngress(AuthorizeSecurityGroupIngressRequest request) { request = BeforeClientExecution(request); return ExecuteAuthorizeSecurityGroupIngress(request); }
public void addFile(string file) { checkFileNames(new HashSet<string> { file }); setFiles.Add(namedForThisSegment(file)); }
public void SetSize(int width, int height) {mWidth = width;mHeight = height;}
public void SetPrecedenceFilterSuppressed(bool value) { if (value) { this.reachesIntoOuterContext |= 0x40000000; } else { this.reachesIntoOuterContext &= ~SUPPRESS_PRECEDENCE_FILTER; } }
public IntervalSet LOOK(ATNState s, RuleContext ctx) { return LOOK(s, null, ctx); }
public void serialize(BinaryWriter out) {out.Write(getOptionFlags());out.Write(getRowHeight());}
public Builder(bool dedup) {this.dedup = dedup;}
public Hashtable(int capacity, float loadFactor) : this(capacity) {if (loadFactor <= 0 || float.IsNaN(loadFactor)) {throw new ArgumentException("Load factor: " + loadFactor);}}
public object get(CharSequence key) {final int bucket = normalCompletion.getBucket(key);return bucket == -1 ? null : long.Parse(bucket.ToString());}
public ListHyperParameterTuningJobsResult ListHyperParameterTuningJobs(ListHyperParameterTuningJobsRequest request) { request = BeforeClientExecution(request); return ExecuteListHyperParameterTuningJobs(request); }
public DeleteTableResult deleteTable(string tableName) {return deleteTable(new DeleteTableRequest().withTableName(tableName));}
public bool lessThan(TextFragment fragA, TextFragment fragB){if (fragA.getScore() == fragB.getScore()){return fragA.fragNum > fragB.fragNum;}else{return fragA.getScore() < fragB.getScore();}}
public void FreeBefore(int pos) { Debug.Assert(pos >= 0); Debug.Assert(pos <= nextPos); int newCount = nextPos - pos; Debug.Assert(newCount <= count, $"newCount={newCount} count={count}"); Debug.Assert(newCount <= buffer.Length, $"newCount={newCount} buf.Length={buffer.Length}"); count = newCount; }
public UpdateHITTypeOfHITResult UpdateHITTypeOfHIT(UpdateHITTypeOfHITRequest request) { request = BeforeClientExecution(request); return ExecuteUpdateHITTypeOfHIT(request); }
public UpdateRecommenderConfigurationResult UpdateRecommenderConfiguration(UpdateRecommenderConfigurationRequest request) { request = beforeClientExecution(request); return executeUpdateRecommenderConfiguration(request); }
public int CompareTo(BytesRef other) { return Array.Compare(this.bytes, this.offset, this.offset + this.length, other.bytes, other.offset, other.offset + other.length); }
public int stem(char[] s, int len) {if (len > 4 && s[len - 1] == 's') len--;if (len > 5 && (endsWith(s, len, "ene") || (endsWith(s, len, "ane") && useNynorsk)))return len - 3;if (len > 4 && (endsWith(s, len, "er") || endsWith(s, len, "en") || endsWith(s, len, "et") || (endsWith(s, len, "ar") && useNynorsk)))return len - 2;if (len > 3) switch (s[len - 1]) {case 'a':case 'e':return len - 1;}return len;}
public DescribeDBSnapshotsResult DescribeDBSnapshots(DescribeDBSnapshotsRequest request) { request = beforeClientExecution(request); return executeDescribeDBSnapshots(request); }
public SortedSetDocValuesFacetField(string dim, string label) : base("dummy", TYPE){FacetField.VerifyLabel(label);FacetField.VerifyLabel(dim);this.dim = dim;this.label = label;}
public CreateDocumentationPartResult CreateDocumentationPart(CreateDocumentationPartRequest request) { request = BeforeClientExecution(request); return ExecuteCreateDocumentationPart(request); }
public string GetValue() { return value; }
public ReadOnlySpan<byte> AsReadOnlyBuffer() { return Duplicate(); }
public UpdateDataSourcePermissionsResult updateDataSourcePermissions(UpdateDataSourcePermissionsRequest request){request = beforeClientExecution(request);return executeUpdateDataSourcePermissions(request);}
public static Microsoft.Office.Interop.Excel.Record CreateSingleRecord(RecordInputStream in){I_RecordCreator constructor = _recordCreatorsById.get(Integer.valueOf(in.getSid()));if (constructor == null){return new UnknownRecord(in);}return constructor.create(in);}
public int getCount() { return mTabs.Count; }
public DeleteApplicationReferenceDataSourceResult DeleteApplicationReferenceDataSource(DeleteApplicationReferenceDataSourceRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteApplicationReferenceDataSource(request); }
public CreateProjectVersionResult CreateProjectVersion(CreateProjectVersionRequest request) { request = BeforeClientExecution(request); return ExecuteCreateProjectVersion(request); }
public IntBuffer Slice() { return new ReadOnlyIntArrayBuffer(remaining(), backingArray, offset + position); }
public final byte Get() { if (position == limit) { throw new BufferUnderflowException(); } return this.block.PeekByte(offset + position++); }
public long Put(int index, long c) { CheckIndex(index); backingArray[offset + index] = c; return this; }
public StoredField(string name, float value) : base(name, TYPE) { fieldsData = value; }
public IntervalSet GetExpectedTokensWithinCurrentRule() { ATN atn = this.GetInterpreter().atn; ATNState s = atn.states[getState()]; return atn.nextTokens(s); }
public string ToString() {StringBuilder buffer = new StringBuilder();buffer.Append("[FILESHARING]\n");buffer.Append("    .readonly       = ").Append(GetReadOnly() == 1 ? "true" : "false").Append("\n");buffer.Append("    .password       = ").Append(Integer.toHexString(GetPassword())).Append("\n");buffer.Append("    .username       = ").Append(GetUsername()).Append("\n");buffer.Append("[/FILESHARING]\n");return buffer.ToString();}
public SubmoduleInitCommand(Repository repo) {base(repo); paths = new List<string>();}
public void Include(string name, AnyObjectId id){bool validRefName = Repository.IsValidRefName(name) || Constants.HEAD.Equals(name);if (!validRefName){throw new ArgumentException(MessageFormat.Format(JGitText.Get().InvalidRefName, name));}if (include.ContainsKey(name)){throw new IllegalStateException(JGitText.Get().DuplicateRef + name);}include.Add(name, id.ToObjectId());}
public Cluster EnableSnapshotCopy(EnableSnapshotCopyRequest request) { request = BeforeClientExecution(request); return ExecuteEnableSnapshotCopy(request); }
public ValueFiller getValueFiller() { return new ValueFiller() { private MutableValueFloat mval = new MutableValueFloat(); public override
public void Serialize(LittleEndianOutput out) {out.WriteByte(GetPane());out.WriteShort(GetActiveCellRow());out.WriteShort(GetActiveCellCol());out.WriteShort(GetActiveCellRef());int nRefs = field_6_refs.Length;out.WriteShort(nRefs);foreach (CellRangeAddress8Bit field_6_ref in field_6_refs) {field_6_ref.Serialize(out);}}
public static Counter newCounter() { return newCounter(false); }
public bool Get(string name, bool dflt){bool[] vals = (bool[])valByRound[name];if (vals != null){return vals[roundNumber % vals.Length];}string sval = props[name] ?? dflt.ToString();if (sval.IndexOf(":") < 0){return bool.Parse(sval);}int k = sval.IndexOf(":");string colName = sval.Substring(0, k);sval = sval.Substring(k + 1);colForValByRound[name] = colName;vals = PropToBooleanArray(sval);valByRound[name] = vals;return vals[roundNumber % vals.Length];}
public void preSerialize(){if (records.getTabpos() > 0){TabIdRecord tir = records.get(records.getTabpos()) as TabIdRecord;if (tir._tabids.Length < boundsheets.Count){fixTabIdRecord();}}}
public LimitTokenCountAnalyzer(Analyzer delegate, int maxTokenCount, bool consumeAllTokens) : base(delegate.GetReuseStrategy()) {this.delegate = delegate;this.maxTokenCount = maxTokenCount;this.consumeAllTokens = consumeAllTokens;}
public ExternalBookBlock(int numberOfSheets){_externalBookRecord = SupBookRecord.createInternalReferences((short)numberOfSheets);_externalNameRecords = new ExternalNameRecord[0];_crnBlocks = new CRNBlock[0];}
public string ToString(){StringBuilder buffer = new StringBuilder();buffer.Append("[SCENARIOPROTECT]\n");buffer.Append("    .protect         = ").Append(getProtect()).Append("\n");buffer.Append("[/SCENARIOPROTECT]\n");return buffer.ToString();}
public PushCommand setThin(bool thin) { checkCallable(); this.thin = thin; return this; }
public int CompareTo(SearcherTracker other) { return Double.Compare(other.recordTimeSec, recordTimeSec); }
public ReverseStringFilter Create(TokenStream in) {return new ReverseStringFilter(in);}
public BlockList() {directory = BlockList<T>.newDirectory(256); directory[0] = BlockList<T>.newBlock(); tailBlock = directory[0];}
public QueryScorer(WeightedSpanTerm[] weightedTerms){this.fieldWeightedSpanTerms = new Dictionary<string, WeightedSpanTerm>(weightedTerms.Length);for (int i = 0; i < weightedTerms.Length; i++){WeightedSpanTerm existingTerm = null;if (fieldWeightedSpanTerms.TryGetValue(weightedTerms[i].term, out existingTerm))else if ((existingTerm == null) || (existingTerm.weight < weightedTerms[i].weight)){fieldWeightedSpanTerms[weightedTerms[i].term] = weightedTerms[i];maxTermWeight = Math.Max(maxTermWeight, weightedTerms[i].getWeight());}}skipInitExtractor = true;}
public bool Equals(object _other) {MergedGroup<object>? other = _other as MergedGroup<object>?;if (groupValue == null) {return other == null;} else {return groupValue.Equals(other);}}
public final System.Text.Encoding charset() {return cs;}
public DescribeExperimentResult DescribeExperiment(DescribeExperimentRequest request) {request = BeforeClientExecution(request);return ExecuteDescribeExperiment(request);}
public EscherGraphics(HSSFShapeGroup escherGroup, HSSFWorkbook workbook, Color forecolor, float verticalPointsPerPixel){this.escherGroup = escherGroup;this.workbook = workbook;this.verticalPointsPerPixel = verticalPointsPerPixel;this.verticalPixelsPerPoint = 1 / verticalPointsPerPixel;this.font = new Font("Arial", 0, 10);this.foreground = forecolor;}
public string pattern() { return patternText; }
public DeleteRouteTableResult deleteRouteTable(DeleteRouteTableRequest request) {request = beforeClientExecution(request);return executeDeleteRouteTable(request);}
public AssociateVPCWithHostedZoneResult AssociateVPCWithHostedZone(AssociateVPCWithHostedZoneRequest request) { request = beforeClientExecution(request); return executeAssociateVPCWithHostedZone(request); }
public PutIntegrationResult PutIntegration(PutIntegrationRequest request) { request = BeforeClientExecution(request); return ExecutePutIntegration(request); }
public SimpleEntry<K, V>(K theKey, V theValue) { key = theKey; value = theValue; }
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {long byte0 = blocks[blocksOffset++] & 0xFF;long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 4) | (byte1 >> 4);long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;}}
public DisassociateConnectionFromLagResult DisassociateConnectionFromLag(DisassociateConnectionFromLagRequest request){request = BeforeClientExecution(request);return ExecuteDisassociateConnectionFromLag(request);}
public FileMode getOldMode() { return oldMode; }
public override string ToString() {return m.ToString();}
public StopKeyPhrasesDetectionJobResult stopKeyPhrasesDetectionJob(StopKeyPhrasesDetectionJobRequest request){request = beforeClientExecution(request);return executeStopKeyPhrasesDetectionJob(request);}
public string ToString() { return "[Array Formula or Shared Formula]\n" + "row = " + GetRow() + "\n" + "col = " + GetColumn() + "\n"; }
public ListDominantLanguageDetectionJobsResult ListDominantLanguageDetectionJobs(ListDominantLanguageDetectionJobsRequest request) { request = BeforeClientExecution(request); return ExecuteListDominantLanguageDetectionJobs(request); }
public string ToString() { return "slice start=" + start + " length=" + length + " readerIndex=" + readerIndex; }
public static int ParseHexInt4(byte digit) { byte r = digits16[digit]; if (r < 0) throw new IndexOutOfRangeException(); return r; }
public Attribute(string name, string value) { setName(name); setValue(value); }
public DescribeStackSetOperationResult DescribeStackSetOperation(DescribeStackSetOperationRequest request){request = BeforeClientExecution(request);return ExecuteDescribeStackSetOperation(request);}
public HSSFCell getCell(int cellnum) { return getCell(cellnum, book.getMissingCellPolicy()); }
public void write(byte[] b) {writeContinueIfRequired(b.Length);_ulrOutput.Write(b);}
public ResetImageAttributeRequest(string imageId, ResetImageAttributeName attribute) {setImageId(imageId);setAttribute(attribute.ToString());}
public void discardResultContents() { resultContents = null; }
public ObjectId GetPeeledObjectId() { return GetLeaf().GetPeeledObjectId(); }
public void UndeprecateDomain(UndeprecateDomainRequest request) {request = BeforeClientExecution(request);ExecuteUndeprecateDomain(request);}
public void write(LittleEndianOutput out) { out.WriteByte((byte)(sid + getPtgClass())); out.WriteByte((byte)field_3_string.Length); out.WriteByte(_is16bitUnicode ? (byte)0x01 : (byte)0x00); if (_is16bitUnicode) { StringUtil.PutUnicodeLE(field_3_string, out); } else { StringUtil.PutCompressedUnicode(field_3_string, out); } }
public DeleteQueueResult DeleteQueue(string queueUrl) { return DeleteQueue(new DeleteQueueRequest().withQueueUrl(queueUrl)); }
public void SetCheckEofAfterPackFooter(bool b) { checkEofAfterPackFooter = b; }
public void Swap() {int sBegin = beginA;int sEnd = endA;beginA = beginB;endA = endB;beginB = sBegin;endB = sEnd;}
public int getPackedGitWindowSize() { return packedGitWindowSize; }
public PutMetricDataResult PutMetricData(PutMetricDataRequest request) {request = BeforeClientExecution(request);return ExecutePutMetricData(request);}
public GetCelebrityRecognitionResult GetCelebrityRecognition(GetCelebrityRecognitionRequest request) { request = beforeClientExecution(request); return executeGetCelebrityRecognition(request); }
public CreateQueueRequest(string queueName) { setQueueName(queueName); }
public Area3DPxg(int externalWorkbookNumber, SheetIdentifier sheetName, AreaReference arearef) : base(arearef){this.externalWorkbookNumber = externalWorkbookNumber;this.firstSheetName = sheetName.GetSheetIdentifier().GetName();if (sheetName is SheetRangeIdentifier){this.lastSheetName = ((SheetRangeIdentifier)sheetName).GetLastSheetIdentifier().GetName();}else{this.lastSheetName = null;}}
public void setBaseline(long clockTime) { t0 = clockTime; timeout = t0 + ticksAllowed; }
public MoveAddressToVpcResult MoveAddressToVpc(MoveAddressToVpcRequest request) { request = BeforeClientExecution(request); return ExecuteMoveAddressToVpc(request); }
public string ToString() {string coll = collectionModel.GetName();if (coll != null) {return string.Format(System.Globalization.CultureInfo.InvariantCulture, "LM {0} - {1}", getName(), coll);} else {return string.Format(System.Globalization.CultureInfo.InvariantCulture, "LM {0}", getName());}}
public DescribeLagsResult DescribeLags(DescribeLagsRequest request) {request = beforeClientExecution(request);return executeDescribeLags(request);}
public AreaEval offset(int relFirstRowIx, int relLastRowIx, int relFirstColIx, int relLastColIx){if (_refEval == null){return _areaEval.offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx);}return _refEval.offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx);}
public ShortBuffer Put(short[] src, int srcOffset, int shortCount) {byteBuffer.Limit(limit * SizeOf.SHORT);byteBuffer.Position(position * SizeOf.SHORT);if (byteBuffer is ReadWriteDirectByteBuffer) {((ReadWriteDirectByteBuffer) byteBuffer).Put(src, srcOffset, shortCount);} else {((ReadWriteHeapByteBuffer) byteBuffer).Put(src, srcOffset, shortCount);}this.position += shortCount;return this;}
public void initialize(String cat) {this._cat=cat;}
public void write(int oneByte){out.Write(oneByte);written++;}
public DescribeImportImageTasksResult DescribeImportImageTasks(DescribeImportImageTasksRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeImportImageTasks(request); }
public ColumnInfoRecord(RecordInputStream in){_firstCol = in.ReadUShort();_lastCol  = in.ReadUShort();_colWidth = in.ReadUShort();_xfIndex  = in.ReadUShort();_options   = in.ReadUShort();switch(in.Remaining()){case 2:field_6_reserved  = in.ReadUShort();break;case 1:field_6_reserved  = in.ReadByte();break;case 0:field_6_reserved  = 0;break;default:throw new RuntimeException("Unusual record size remaining=(" + in.Remaining() + ")");}}
public Status(IndexDiff diff) { base(); this.diff = diff; hasUncommittedChanges = !diff.getAdded().isEmpty() || !diff.getChanged().isEmpty() || !diff.getRemoved().isEmpty() || !diff.getMissing().isEmpty() || !diff.getModified().isEmpty() || !diff.getConflicting().isEmpty(); clean = !hasUncommittedChanges && diff.getUntracked().isEmpty(); }
public CreateExperimentResult createExperiment(CreateExperimentRequest request) {request = beforeClientExecution(request);return executeCreateExperiment(request);}
public UnknownRecord clone() {return copy();}
public float[] Slice() { byteBuffer.Limit(limit * SizeOf.FLOAT); byteBuffer.Position(position * SizeOf.FLOAT); byte[] bytes = new byte[byteBuffer.Remaining()]; byteBuffer.Get(bytes); float[] result = new float[bytes.Length / SizeOf.FLOAT]; Buffer.BlockCopy(bytes, 0, result, 0, bytes.Length); byteBuffer.Clear(); return result; }
public DescribeSnapshotSchedulesResult DescribeSnapshotSchedules(DescribeSnapshotSchedulesRequest request) {request = beforeClientExecution(request);return executeDescribeSnapshotSchedules(request);}
public ListImagesResult ListImages(ListImagesRequest request) { request = BeforeClientExecution(request); return ExecuteListImages(request); }
public Diff(int ins, int del, int rep, int noop) { INSERT = ins; DELETE = del; REPLACE = rep; NOOP = noop; }
public string ToFormulaString(string[] operands){StringBuilder buffer = new StringBuilder();buffer.Append(operands[ 0 ]);buffer.Append(",");buffer.Append(operands[ 1 ]);return buffer.ToString();}
public static void setupEnvironment(string[] workbookNames, ForkedEvaluator[] evaluators) {WorkbookEvaluator[] wbEvals = new WorkbookEvaluator[evaluators.Length];for (int i = 0; i < wbEvals.Length; i++) {wbEvals[i] = evaluators[i]._evaluator;}CollaboratingWorkbooksEnvironment.setup(workbookNames, wbEvals);}
public ListPhotoTagsRequest(){base("CloudPhoto", "2017-07-11", "ListPhotoTags", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public RandomSamplingFacetsCollector(int sampleSize, long seed) { base(false); this.sampleSize = sampleSize; this.random = new XORShift64Random(seed); this.sampledDocs = null; }
public AllocateStaticIpResult AllocateStaticIp(AllocateStaticIpRequest request) { request = BeforeClientExecution(request); return ExecuteAllocateStaticIp(request); }
public FeatRecord(RecordInputStream in) {futureHeader = new FtrHeader(in);isf_sharedFeatureType = in.ReadShort();reserved1 = in.ReadByte();reserved2 = in.ReadInt();int cref = in.ReadUShort();cbFeatData = in.ReadInt();reserved3 = in.ReadShort();cellRefs = new CellRangeAddress[cref];for (int i = 0; i < cellRefs.Length; i++) {cellRefs[i] = new CellRangeAddress(in);}switch (isf_sharedFeatureType) {case FeatHdrRecord.SHAREDFEATURES_ISFPROTECTION:sharedFeature = new FeatProtection(in);break;case FeatHdrRecord.SHAREDFEATURES_ISFFEC2:sharedFeature = new FeatFormulaErr2(in);break;case FeatHdrRecord.SHAREDFEATURES_ISFFACTOID:sharedFeature = new FeatSmartTag(in);break;default:logger.Log(POILogger.ERROR, "Unknown Shared Feature " + isf_sharedFeatureType + " found!");break;}}
public class YourClass{public RevCommit TryFastForward(RevCommit newCommit) throws IOException, GitAPIException{Ref head = GetHead();ObjectId headId = head.GetObjectId();if (headId == null){throw new RefNotFoundException(MessageFormat.Format(JGitText.Get().refNotResolved, Constants.HEAD));}
public CreateSnapshotScheduleResult CreateSnapshotSchedule(CreateSnapshotScheduleRequest request) { request = beforeClientExecution(request); return executeCreateSnapshotSchedule(request); }
public Record GetNext() {if (!HasNext()) {throw new RuntimeException("Attempt to read past end of record stream");}_countRead++;return _list[_nextIndex++];}
public string ToString() { return RawParseUtils.decode(buf.ToArray()); }
public ListTablesRequest(string exclusiveStartTableName) {setExclusiveStartTableName(exclusiveStartTableName);}
public EnableAlarmActionsResult EnableAlarmActions(EnableAlarmActionsRequest request) { request = BeforeClientExecution(request); return ExecuteEnableAlarmActions(request); }
public Builder() : this(true) { }
public bool Equals(object obj) { final State other = (State) obj; return is_final == other.is_final && Arrays.Equals(this.labels, other.labels) && object.ReferenceEquals(this.states, other.states); }
public TokenStream Create(TokenStream input) { return new EnglishPossessiveFilter(input); }
public void ClearFormatting() { _string = CloneStringIfRequired(); _string.ClearFormatting(); AddToSSTIfRequired(); }
public int Get(int index, long[] arr, int off, int len) {Debug.Assert(len > 0, "len must be > 0 (got " + len + ")");Debug.Assert(index >= 0 && index < valueCount);len = Math.Min(len, valueCount - index);Array.Fill(arr, 0, off + len);return len;}
public DeleteRouteResponseResult DeleteRouteResponse(DeleteRouteResponseRequest request) {request = BeforeClientExecution(request);return ExecuteDeleteRouteResponse(request);}
public string ToPrivateString() { return Format(true, false); }
public CreatePresignedDomainUrlResult CreatePresignedDomainUrl(CreatePresignedDomainUrlRequest request) { request = BeforeClientExecution(request); return ExecuteCreatePresignedDomainUrl(request); }
public void Write(int oneChar) { doWrite(new char[] { (char) oneChar }, 0, 1); }
public SSTRecord GetSSTRecord() { return sstRecord; }
public string ToString() { return "term=" + term + ",field=" + field + ",value=" + valueToString() + ",docIDUpto=" + docIDUpto; }
public bool IsSaturated(FuzzySet bloomFilter, FieldInfo fieldInfo) { return bloomFilter.GetSaturation() > 0.9f; }
public Builder(bool ignoreCase) {this.ignoreCase = ignoreCase;}
public string ToString() {return GetType().GetTypeName() + "(maxBasicQueries: " + maxBasicQueries + ", queriesMade: " + queriesMade + ")";}
public DeleteDataSourceResult deleteDataSource(DeleteDataSourceRequest request) { request = beforeClientExecution(request); return executeDeleteDataSource(request); }
public RebootNodeResult RebootNode(RebootNodeRequest request){request = BeforeClientExecution(request);return ExecuteRebootNode(request);}
public void ProcessChildRecords() { ConvertRawBytesToEscherRecords(); }
public CreateOrUpdateTagsResult createOrUpdateTags(CreateOrUpdateTagsRequest request) { request = beforeClientExecution(request); return executeCreateOrUpdateTags(request); }
public FileSnapshot GetSnapShot() {return snapShot;}
public Stream OpenResource(string resource) => (clazz != null) ? clazz.ResourceManager.GetString(resource) : loader.ResourceManager.GetString(resource);
public string ToString() {StringBuilder sb = new StringBuilder(64);sb.Append(GetType().Name).Append(" [");sb.Append("sid=").Append(HexDump.ShortToHex(_sid));sb.Append(" size=").Append(_data.Length);sb.Append(" : ").Append(HexDump.ToHex(_data));sb.Append("]\n");return sb.ToString();}
public int NextIndex() { return index; }
public string ToQueryString(EscapeQuerySyntax escaper) {if (IsDefaultField(this.field)) {return "\"" + GetTermEscapeQuoted(escaper) + "\"";} else {return this.field + ":" + "\"" + GetTermEscapeQuoted(escaper) + "\"";}}
public CalcModeRecord Clone() { return Copy(); }
public bool IsOutput() { return output; }
public CreateNetworkInterfaceResult CreateNetworkInterface(CreateNetworkInterfaceRequest request) { request = BeforeClientExecution(request); return ExecuteCreateNetworkInterface(request); }
public void Serialize(LittleEndianOutput @out) {@out.WriteShort(field_1_password);}
public StopDominantLanguageDetectionJobResult stopDominantLanguageDetectionJob(StopDominantLanguageDetectionJobRequest request) { request = beforeClientExecution(request); return executeStopDominantLanguageDetectionJob(request); }
public ECSMetadataServiceCredentialsFetcher WithConnectionTimeout(int milliseconds) { this.connectionTimeoutInMilliseconds = milliseconds; return this; }
public GetGatewayGroupResult GetGatewayGroup(GetGatewayGroupRequest request) { request = BeforeClientExecution(request); return ExecuteGetGatewayGroup(request); }
public FloatBuffer Slice() { return new ReadOnlyFloatArrayBuffer(remaining(), backingArray, offset + position); }
public static string Join(IEnumerable<string> parts, string separator, string lastSeparator){StringBuilder sb = new StringBuilder();int i = 0;int lastIndex = parts.Count() - 1;foreach (string part in parts){sb.Append(part);if (i == lastIndex - 1){sb.Append(lastSeparator);}else if (i != lastIndex){sb.Append(separator);}i++;}return sb.ToString();}
public string ToString() { return "(" + a.ToString() + " AND " + b.ToString() + ")"; }
public ListSubscriptionsByTopicRequest(string topicArn, string nextToken) { setTopicArn(topicArn); setNextToken(nextToken); }
public byte ReadByte() { return bytes[pos--]; }
public TerminateClientVpnConnectionsResult TerminateClientVpnConnections(TerminateClientVpnConnectionsRequest request) {request = BeforeClientExecution(request);return ExecuteTerminateClientVpnConnections(request);}
public ReceiveMessageRequest(string queueUrl) {SetQueueUrl(queueUrl);}
public void Serialize(LittleEndianOutput out) {out.WriteShort(field_1_barSpace);out.WriteShort(field_2_categorySpace);out.WriteShort(field_3_formatFlags);}
public object Common(object output1, object output2) { return outputs.Common((T)output1, (T)output2); }
public CreateVariableResult CreateVariable(CreateVariableRequest request){request = BeforeClientExecution(request);return ExecuteCreateVariable(request);}
public static int match(byte[] b, int ptr, byte[] src) {if (ptr + src.Length > b.Length) return -1;for (int i = 0; i < src.Length; i++, ptr++) {if (b[ptr] != src[i]) return -1;}return ptr;}
public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {int bytesRemaining = readHeader(data, offset);int pos = offset + 8;int size = 0;field_1_rectX1 = LittleEndian.getInt(data, pos + size);size += 4;field_2_rectY1 = LittleEndian.getInt(data, pos + size);size += 4;field_3_rectX2 = LittleEndian.getInt(data, pos + size);size += 4;field_4_rectY2 = LittleEndian.getInt(data, pos + size);size += 4;bytesRemaining -= size;if (bytesRemaining != 0) {throw new RecordFormatException("Expected no remaining bytes but got " + bytesRemaining);}return 8 + size + bytesRemaining;}
public CreateCloudFrontOriginAccessIdentityResult CreateCloudFrontOriginAccessIdentity(CreateCloudFrontOriginAccessIdentityRequest request) { request = BeforeClientExecution(request); return ExecuteCreateCloudFrontOriginAccessIdentity(request); }
public bool IsNamespaceAware() { return GetFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES); }
public void setOverridable(bool on) { overridable = on; }
public string GetClassName() { return className; }
public DirectoryReader getIndexReader() {if (indexReader != null) {indexReader.incRef();}return indexReader;}
public int indexOfKey(int key) { return binarySearch(mKeys, 0, mSize, key); }
public BlankRecord(RecordInputStream in) { field_1_row = in.readUShort(); field_2_col = in.readShort(); field_3_xf = in.readShort(); }
public long Length() { return length; }
public PasswordRecord(RecordInputStream in) { field_1_password = in.readShort(); }
public Dictionary(int capacity, float loadFactor) { this(capacity); if (loadFactor <= 0 || float.IsNaN(loadFactor)) { throw new ArgumentException("Load factor: " + loadFactor); } }
public void run() {long lastReopenStartNS = System.nanoTime();while (!finish) {while (!finish) {reopenLock.lock();try {bool hasWaiting = waitingGen > searchingGen;final long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS);final long sleepNS = nextReopenStartNS - System.nanoTime();if (sleepNS > 0) {reopenCond.Wait(TimeSpan.FromNanoseconds(sleepNS));} else {break;}} catch (ThreadInterruptedException ie) {Thread.CurrentThread.Interrupt();return;} finally {reopenLock.Unlock();}}if (finish) {break;}lastReopenStartNS = System.nanoTime();refreshStartGen = writer.GetMaxCompletedSequenceNumber();try {manager.maybeRefreshBlocking();} catch (IOException ioe) {throw new RuntimeException(ioe);}}}
public DeleteLoginProfileRequest(string userName) { SetUserName(userName); }
public E PollFirst() { return (size == 0) ? null : RemoveFirstImpl(); }
public CreatePhotoRequest() {base("CloudPhoto", "2017-07-11", "CreatePhoto", "cloudphoto");setProtocol(ProtocolType.HTTPS);}
public string getName() { return "resolve"; }
public int FindEndOffset(StringBuilder buffer, int start){if (start > buffer.Length || start < 0) return start;int offset, count = maxScan;for (offset = start; offset < buffer.Length && count > 0; count--){if (boundaryChars.Contains(buffer[offset])) return offset;offset++;}return start;}
public void SetObjectChecker(ObjectChecker oc) { objCheck = oc; }
public BaseRef(AreaEval ae) { _refEval = null; _areaEval = ae; _firstRowIndex = ae.GetFirstRow(); _firstColumnIndex = ae.GetFirstColumn(); _height = ae.GetLastRow() - ae.GetFirstRow() + 1; _width = ae.GetLastColumn() - ae.GetFirstColumn() + 1; }
public CreateVpcEndpointResult CreateVpcEndpoint(CreateVpcEndpointRequest request) {request = beforeClientExecution(request);return executeCreateVpcEndpoint(request);}
public DeregisterWorkspaceDirectoryResult DeregisterWorkspaceDirectory(DeregisterWorkspaceDirectoryRequest request) { request = beforeClientExecution(request); return executeDeregisterWorkspaceDirectory(request); }
public ChartFRTInfoRecord(RecordInputStream in) {rt = in.readShort();grbitFrt = in.readShort();verOriginator = in.readByte();verWriter = in.readByte();int cCFRTID = in.readShort();rgCFRTID = new CFRTID[cCFRTID];for (int i = 0; i < cCFRTID; i++) {rgCFRTID[i] = new CFRTID(in);}}
public Merger newMerger(Repository db) { return new OneSide(db, treeIndex); }
public CreateDataSourceFromRedshiftResult CreateDataSourceFromRedshift(CreateDataSourceFromRedshiftRequest request){request = beforeClientExecution(request);return executeCreateDataSourceFromRedshift(request);}
public void ClearDFA() {for (int d = 0; d < decisionToDFA.Length; d++) {decisionToDFA[d] = new DFA(atn.GetDecisionState(d), d);}}
public void removeName(string name) { int index = getNameIndex(name); removeName(index); }
public string ToString() { StringBuilder buffer = new StringBuilder(); buffer.Append("[RightMargin]\n"); buffer.Append("    .margin               = " ).Append(" (" ).Append(getMargin() ).Append(" )\n" ); buffer.Append("[/RightMargin]\n"); return buffer.ToString(); }
public RefreshAllRecord clone() { return copy(); }
public StandardQueryNodeProcessorPipeline(QueryConfigHandler queryConfig) : base(queryConfig){add(new WildcardQueryNodeProcessor());add(new MultiFieldQueryNodeProcessor());add(new FuzzyQueryNodeProcessor());add(new RegexpQueryNodeProcessor());add(new MatchAllDocsQueryNodeProcessor());add(new OpenRangeQueryNodeProcessor());add(new PointQueryNodeProcessor());add(new PointRangeQueryNodeProcessor());add(new TermRangeQueryNodeProcessor());add(new AllowLeadingWildcardProcessor());add(new AnalyzerQueryNodeProcessor());add(new PhraseSlopQueryNodeProcessor());add(new BooleanQuery2ModifierNodeProcessor());add(new NoChildOptimizationQueryNodeProcessor());add(new RemoveDeletedQueryNodesProcessor());add(new RemoveEmptyNonLeafQueryNodeProcessor());add(new BooleanSingleChildOptimizationQueryNodeProcessor());add(new DefaultPhraseSlopQueryNodeProcessor());add(new BoostQueryNodeProcessor());add(new MultiTermRewriteMethodProcessor());}
public string FormatAsString(string sheetName, bool useAbsoluteAddress){StringBuilder sb = new StringBuilder();if (sheetName != null){sb.Append(SheetNameFormatter.Format(sheetName));sb.Append("!");}CellReference cellRefFrom = new CellReference(GetFirstRow(), GetFirstColumn(), useAbsoluteAddress, useAbsoluteAddress);CellReference cellRefTo = new CellReference(GetLastRow(), GetLastColumn(), useAbsoluteAddress, useAbsoluteAddress);sb.Append(cellRefFrom.FormatAsString());if (!cellRefFrom.Equals(cellRefTo) || IsFullColumnRange() || IsFullRowRange()){sb.Append(':');sb.Append(cellRefTo.FormatAsString());}return sb.ToString();}
public byte put(int index, byte value) {throw new ReadOnlyBufferException();}
public void mode(int m) { _mode = m; }
public ShortBuffer Slice() { return new ReadWriteShortArrayBuffer(remaining(), backingArray, offset + position); }
public void Set(int index, long n) { if (count < index) throw new IndexOutOfRangeException(index); else if (count == index) Add(n); else entries[index] = n; }
public ByteBuffer PutFloat(float value) {throw new ReadOnlyBufferException();}
public static double Max(double[] values) {double max = double.MinValue;foreach (double value in values) {max = Math.Max(max, value);}return max;}
public UpdateRepoWebhookRequest() : base("cr", "2016-06-07", "UpdateRepoWebhook", "cr"){setUriPattern("/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]");setMethod(MethodType.POST);}
public DeleteAttributesRequest(string domainName, string itemName, List<Attribute> attributes, UpdateCondition expected){SetDomainName(domainName);SetItemName(itemName);SetAttributes(attributes);SetExpected(expected);}
public string ToString(){StringBuilder sb = new StringBuilder();sb.Append("[SXPI]\n");for (int i = 0; i < _fieldInfos.Length; i++){sb.Append("    item[").Append(i).Append("]=");_fieldInfos[i].AppendDebugInfo(sb);sb.Append('\n');}sb.Append("[/SXPI]\n");return sb.ToString();}
public bool IsSuccessful() {if (mergeResult != null)return mergeResult.GetMergeStatus().IsSuccessful();else if (rebaseResult != null)return rebaseResult.Status.IsSuccessful();return true;}
public void SetBytesValue(byte[] value) { SetBytesValue(new BytesRef(value)); }
public DescribeConnectionsResult DescribeConnections(DescribeConnectionsRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeConnections(request); }
public DeletePhotosRequest() : base("CloudPhoto", "2017-07-11", "DeletePhotos", "cloudphoto"){setProtocol(ProtocolType.HTTPS);}
public void add(E obj) {iterator.add(obj);subList.sizeChanged(true);end++;}
public static ByteBuffer Allocate(int capacity) { if (capacity < 0) { throw new ArgumentException(); } return new ReadWriteHeapByteBuffer(capacity); }
public SrndQuery getSubQuery(int qn) {return queries[qn];}
public float currentScore(int docId, string field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) {if (numPayloadsSeen == 0) {return currentPayloadScore;} else {return Math.Min(currentPayloadScore, currentScore);}}
public string ToString(){StringBuilder sb = new StringBuilder();sb.Append("[BLANK]\n");sb.Append("    row= ").Append(HexDump.ShortToHex(GetRow())).Append("\n");sb.Append("    col= ").Append(HexDump.ShortToHex(GetColumn())).Append("\n");sb.Append("    xf = ").Append(HexDump.ShortToHex(GetXFIndex())).Append("\n");sb.Append("[/BLANK]\n");return sb.ToString();}
public DescribeLogPatternResult DescribeLogPattern(DescribeLogPatternRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeLogPattern(request); }
public RegisterTransitGatewayMulticastGroupMembersResult RegisterTransitGatewayMulticastGroupMembers(RegisterTransitGatewayMulticastGroupMembersRequest request) { request = BeforeClientExecution(request); return ExecuteRegisterTransitGatewayMulticastGroupMembers(request); }
public GetPhoneNumberSettingsResult GetPhoneNumberSettings(GetPhoneNumberSettingsRequest request) { request = beforeClientExecution(request); return executeGetPhoneNumberSettings(request); }
public ObjectId getData() { return data; }
public bool isDirect() {return false;}
public DeleteServerCertificateRequest(string serverCertificateName) { this.ServerCertificateName = serverCertificateName; }
public StringBuilder Append(double d) { RealToString.GetInstance().AppendDouble(this, d); return this; }
public GetEvaluationResult GetEvaluation(GetEvaluationRequest request) { request = beforeClientExecution(request); return executeGetEvaluation(request); }
public LinkedDataRecord GetDataName(){return dataName;}
public bool Find(int start){findPos = start;if (findPos < regionStart){findPos = regionStart;}else if (findPos >= regionEnd){matchFound = false;return false;}matchFound = findImpl(address, input, findPos, matchOffsets);if (matchFound){findPos = matchOffsets[1];}return matchFound;}
public GetLifecyclePolicyPreviewResult GetLifecyclePolicyPreview(GetLifecyclePolicyPreviewRequest request) {request = BeforeClientExecution(request);return ExecuteGetLifecyclePolicyPreview(request);}
public SinglePositionTokenStream(string word) { termAtt = AddAttribute(typeof(CharTermAttribute)); posIncrAtt = AddAttribute(typeof(PositionIncrementAttribute)); this.word = word; returned = true; }
public void Serialize(System.IO.BinaryWriter output) {output.Write(field_1_print_gridlines);}
public string ToString() {StringBuilder s = new StringBuilder();s.Append(Constants.typeString(getType()));s.Append(' ');s.Append(name());s.Append(' ');s.Append(commitTime);s.Append(' ');appendCoreFlags(s);return s.ToString();}
public LsRemoteCommand SetRemote(string remote) {CheckCallable(); this.remote = remote; return this; }
public void CollapseRow(int rowNumber) {int startRow = FindStartOfRowOutlineGroup(rowNumber);RowRecord rowRecord = GetRow(startRow);int nextRowIx = WriteHidden(rowRecord, startRow);RowRecord row = GetRow(nextRowIx);if (row == null) {row = CreateRow(nextRowIx);InsertRow(row);}row.SetCollapsed(true);}
public AssociateSkillGroupWithRoomResult AssociateSkillGroupWithRoom(AssociateSkillGroupWithRoomRequest request) { request = beforeClientExecution(request); return executeAssociateSkillGroupWithRoom(request); }
public string ToString() {StringBuilder buffer = new StringBuilder();buffer.Append("[SERIESLIST]\n");buffer.Append("    .seriesNumbers= ").Append(" (").Append(System.Array.ToString(GetSeriesNumbers()) ).Append(" )");buffer.Append("\n");buffer.Append("[/SERIESLIST]\n");return buffer.ToString();}
public QueryConfigHandler GetQueryConfigHandler() { return this.queryConfig; }
public string GetClassArg(){if (originalArgs != null){string className = originalArgs[CLASS_NAME];if (className != null){return className;}}return this.GetType().Name;}
