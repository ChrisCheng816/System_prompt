0	NewSTM creates a transaction using a client, applying operations and options, and handles prefetching before running the transaction.
1	first will return the smallest revision number from the readSet
2	cmps will return a list of comparisons for keys in the writeSet with revision less than the given value
3	NewSTMRepeatable creates a repeatable STM transaction using the provided client and apply function, returning a transaction response and an error.
4	NewSTMSerializable creates a serializable transaction using STM and the given client and apply function.
5	NewSTMReadCommitted creates a transaction with ReadCommitted isolation using a given client and apply function, returning a transaction response and error.
6	NewCertPool reads CA files, decodes PEM blocks, parses certificates, and adds them to a CertPool, returning the pool and any errors encountered.
7	NewCert reads cert and key files, applies a parsing function, and returns a TLS certificate or an error.
8	Pause marks peer as paused and stops message readers.
9	Resume unpauses a peer by unlocking mutex, setting paused to false, and resuming message readers.
10	pick selects a channel to write a message based on its type, using specific writers for snapshots and AppendEntries messages.
11	post sends an HTTP request and handles the response, returning an error if the request is stopped or if the response is invalid.
12	newTxnResp processes a transaction request, constructs a response based on success/failure paths, handles nested transactions, and returns the final response and count.
13	applyCompare evaluates if a key-value satisfies a comparison criteria, returning true if all conditions are met or false otherwise.
14	OpCompact creates a CompactOp instance with specified revision and options.
15	NewPriorityQueue creates a PriorityQueue instance with a given etcd client, default context, and modified key.
16	Enqueue adds a string value with priority to a priority queue and returns an error if failed.
17	NewLeaderStats creates a new LeaderStats instance with the given ID.
18	Succ updates FollowerStats with success count and latency statistics.
19	FollowerStats Fail increments the Fail count safely using mutex lock.
20	delete removes a watcher and updates broadcast state
21	startStreamWriter creates a streamWriter instance, initializes it with logger, IDs, statuses, stats, and Raft, starts a goroutine to run it, and returns the instance.
22	checkStreamSupport verifies if a version supports a specific stream type
23	maybeUpdate updates progress if n exceeds current match and sets next to n+1, returning whether progress was updated
24	IsPaused returns true if progress is paused in probe or snapshot states, and full in replicate state, panicking for unexpected states.
25	needSnapshotAbort checks if snapshot state meets abort condition
26	add will add an inflight request to the buffer and increase the count, growing the buffer if necessary, and panic if the buffer is full
27	growBuf doubles buffer size up to max capacity
28	freeTo will remove inflights up to a specified ID and adjust the start index accordingly
29	SaveDBFrom reads data from a reader, saves it to a temporary file, fsyncs, and renames it to a final path, logging the operation.
30	DBFilePath retrieves snapshot db file path by ID, logs warning if not found, returns error if missing
31	Set updates UniqueStringsValue with unique strings from a comma-separated list.
32	NewUniqueStringsValue creates a new instance of UniqueStringsValue with unique string values parsed from input, panicking if parsing fails.
33	UniqueStringsFromFlag retrieves unique strings from a specified flag in a FlagSet.
34	UniqueStringsMapFromFlag extracts unique strings from a flag's value and returns them as a map.
35	Percentiles calculates percentiles for given numbers and returns them along with original data.
36	VerifyBootstrap checks server config for local member, advertises matching cluster, duplicates URLs, and unset initial peer URLs with no discovery URL. Returns error if any condition fails.
37	VerifyJoinExisting checks if a server config can join an existing cluster, ensuring no duplicates and no discovery URL.
38	hasLocalMember checks if the server config contains local member URLs and returns an error if not found
39	advertiseMatchesCluster verifies if peer URLs match between initial-cluster and initial-advertise-peer-urls, returning an error if they don't.
40	ReqTimeout calculates request timeout based on election ticks and tick milliseconds.
41	getStatus retrieves raft state without progress, updates leader's progress, and returns status.
42	GetDefaultHost fetches default routes, prioritizes IPv4, sorts remaining families, selects a host, and returns it or an error if none found.
43	getIfaceAddr retrieves network interface address by index and family, returning NetlinkMessage or error if not found
44	getIfaceLink retrieves Netlink message for specified interface index, returning error if not found
45	lsCommandFunc handles the "ls" command, processing flags and retrieving keys recursively or sorted.
46	printLs prints directory contents based on user output preference
47	rPrint recursively prints node keys with optional directory suffixes based on CLI flags
48	NewLeaseRenewerCommand creates a Cobra command for lease renewal with options to set the TTL.
49	Read will load a snapshot file, validate its contents and CRC, and return a raftpb.Snapshot object or an error if failed
50	GetCipherSuite will return a cipher suite ID and a boolean indicating if the suite is valid
51	post sends data using a picker and handles responses, errors, and retries
52	send attaches sender ID and term to message before appending it to raft's message queue
53	sendHeartbeat sends a heartbeat message to a follower, attaching the minimum of the follower's matched index and the leader's committed index, along with additional context.
54	bcastAppend sends append entries to all peers except itself
55	raft will broadcast heartbeat with last pending request context or nil
56	tickElection increments election timer and promotes node if eligible and past timeout.
57	tickHeartbeat increments heartbeat and election timers, triggers quorum check or aborts leadership transfer if necessary, and sends heartbeats if in leader state.
58	stepCandidate handles raft message types, updates state, logs votes, and drives election or leadership transitions based on message content.
59	restore will apply a snapshot to raft log and update progress if conditions are met
60	promotable checks if the current node has a peer and returns true if it does
61	checkQuorumActive determines if quorum nodes are active and resets their activity status.
62	increaseUncommittedSize updates uncommittedSize based on entries, returning true if successful and false if exceeding maxUncommittedSize.
63	reduceUncommittedSize reduces the uncommitted size by entries' payloads, setting it to zero if underflow occurs
64	newPeriodic initializes a Periodic object with logger, clock, period, revGetter, compactable, and returns it
65	Pause sets periodic task as paused.
66	Resume unpauses a periodic task.
67	Lock acquires a distributed mutex using etcd, handles contention, and waits for previous holders to release.
68	NewLocker creates a locker using a session and prefix.
69	NewFIFOScheduler creates and starts a FIFO scheduler instance.
70	Schedule adds job to pending list and resumes scheduler if stopped
71	Stop will cancel a FIFO operation and wait for completion
72	NewServer creates a new Server instance with logger, network, and address, initializing last operation and proxy maps.
73	StartServe starts gRPC server, handles errors, logs status.
74	Stop the gRPC server and log the address.
75	Transport handles RPC requests, updates server state, processes responses, and manages errors.
76	RegisterInterruptHandler adds an interrupt handler to the registry.
77	HandleInterrupts listens for SIGINT/SIGTERM, logs the signal, runs registered handlers, and exits gracefully or forcefully depending on the process ID.
78	OpGet constructs an Op instance with specified options, enforcing exclusive use of WithPrefix or WithFromKey.
79	OpDelete creates an operation to delete a key with options and validates them.
80	OpPut constructs an Op object for a PUT operation with validation for unexpected options.
81	OpTxn constructs an operation with transaction details and conditional branches.
82	WithFromKey sets default key and end byte for operation option.
83	withTop generates a list of options for sorting and limiting a target field
84	Exist checks if there are any .wal files in the given directory and returns true if at least one exists.
85	searchIndex searches for the highest index less than or equal to the given index in a list of names, returning its position and a boolean flag.
86	isValidSeq checks if sequential WAL names are consecutive, returning true if so, otherwise false.
87	NewListener creates a network listener, optionally wrapping it with TLS based on the provided scheme and TLS information.
88	TLSInfo.cafiles returns a list of CA files, including the trusted CA file if specified.
89	ServerConfig constructs a TLS configuration based on TLSInfo, setting client authentication and trusted CA files.
90	ClientConfig generates a TLS configuration based on provided TLSInfo, returning an error if the configuration is invalid.
91	newTLSKeepaliveListener wraps a listener with TLS and keepalive configurations
92	applyV2Request handles V2 requests based on method and delegates to appropriate handler.
93	NewRoleCommand creates and returns a Cobra command for role management with subcommands for adding, deleting, getting, listing, granting, and revoking permissions.
94	roleAddCommandFunc handles adding a role by validating arguments, making a request, and displaying the response.
95	roleGetCommandFunc handles role retrieval, validating arguments, making API call, and displaying response.
96	roleGrantPermissionCommandFunc handles role permissions, validating arguments, converting permission types, granting permissions, and displaying results.
97	roleRevokePermissionCommandFunc handles role permission revocation, validating arguments, making an API call, and displaying results.
98	NewCluster creates a cluster with the given size using the specified testing TB.
99	NewClusterByConfig creates a cluster using a configuration and testing TB.
100	HTTPMembers constructs a list of client members with peer and client URLs based on TLS info.
101	waitLeader waits for a cluster member to become leader and returns its index, or -1 if none found
102	waitNoLeader waits for cluster members to stop being leaders
103	isMembersEqual will compare two slices of client.Members after sorting them by PeerURLs and removing IDs, returning true if they are equal.
104	listenGRPC configures gRPC address, sets up listener, creates bridge, and updates address scheme.
105	NewClientV3 creates a gRPC client configuration using member details and returns the client and any errors encountered.
106	Clone member object with all fields and validate URLs.
107	Close member resources including gRPC bridges, servers, and clients gracefully.
108	Stop logs member details, closes server, resets closers, then logs stopped message.
109	checkLeaderTransition waits for leader change and returns new leader ID
110	Restart member logs details, creates new listeners, restarts gRPC, launches member, logs final status, and returns error.
111	Terminate logs member termination details, closes member, and removes data directory if specified.
112	Metric fetches a specific metric value from a member's URL and returns it as a string, or an error if the request fails or the metric is not found.
113	InjectPartition cuts peer connections between a member and other members in a testing scenario.
114	RecoverPartition repairs partition connections between members.
115	NewClusterV3 creates a ClusterV3 instance with GRPC enabled, sets up logging based on environment, launches the cluster, and optionally creates clients for members.
116	set default TTL if not specified and call Parse method
117	jwtOptions parses options from a map, setting TTL, public/private keys, and signing method, returning an error if any step fails.
118	JWT key retrieval based on signing method, returning interface{} and error
119	fill populates response header with cluster member details and revision info
120	add watcher to broadcast, update nextrev, send create event if necessary
121	watch will assign a unique ID to a watch request and store it along with associated cancel function and watcher, ensuring no duplicate IDs and valid key ranges
122	newFileEncoder creates a file encoder at current position with previous CRC.
123	purgeFile removes old files based on suffix, max count, and interval, logging errors and purged files
124	Set splits a comma-separated string into a slice and assigns it to ss.
125	NewStringsValue creates a new StringsValue instance, sets it with a given string, and panics if setting fails.
126	StringsFromFlag extracts string values from a flag set by name.
127	Cluster removes everything after the second dot in a string.
128	NewPageWriter creates a PageWriter object initialized with writer, page size, and offset.
129	watcherHub manages watching events for keys, handles recursive and streaming options, updates watcher state, and tracks active watchers.
130	notify adds event to history, splits path, walks through segments, and notifies relevant watchers
131	clone creates a copy of watcherHub with a deep copy of EventHistory
132	isHidden checks if watchPath is deeper than keyPath or contains "/_" after removing watchPath prefix
133	createEtcdLogFile creates an etcd log file and logs the path on success
134	runEtcd starts an embedded etcd server, waits for it to be ready, and handles errors from both the server and a proxy process.
135	stopEtcd stops the etcd process gracefully or forcefully based on the signal received.
136	handle_SIGQUIT_ETCD_AND_REMOVE_DATA_AND_STOP_AGENT stops Etcd, syncs logs, removes data, stops agent, and returns success response
137	LimitListener wraps a listener with a limit on concurrent connections.
138	allowMethod checks HTTP method and sets allowed methods in response header if not allowed
139	NewWatchServer creates a watch server with etcd server details.
140	FiltersFromRequest constructs a list of filter functions based on the WatchCreateRequest filters.
141	newPipelineHandler creates a pipeline handler for HTTP requests using transport, raft, and client ID details.
142	checkClusterCompatibilityFromHeader verifies cluster compatibility using headers, logs warnings if issues arise, and returns errors for version mismatches or cluster ID discrepancies.
143	KeyExists checks if a key exists in etcd by comparing its version.
144	KeyMissing generates a comparison operation to check if a key has no version in etcd.
145	ValidateSecureEndpoints checks HTTPS endpoints, returns valid ones and errors for invalid ones
146	putNewKV inserts a new key-value pair with an optional lease and returns the revision or an error if the key already exists
147	newUniqueEphemeralKey generates a unique ephemeral key with a given session and prefix, returning an EphemeralKV object and an error if unsuccessful.
148	NewUpdateDirCommand creates a CLI command to update an existing directory with optional TTL.
149	updatedirCommandFunc updates directory with given key and TTL, handles errors, and prints response based on output option
150	handleBackup will create a backup of a database, including snapshots and WAL files, and update metadata with new IDs before saving the backup.
151	saveDB copies data from source BoltDB to destination BoltDB, handles versioning, updates indices, and removes unnecessary buckets
152	NewWatchCommand creates a Cobra command for watching operations with various flags for configuration.
153	NewV3 creates a new manager instance with a logger, using a default logger if none is provided.
154	Save will save a snapshot of the database to a specified path after validating the endpoint and ensuring the file is properly created, copied, synced, and renamed.
155	Status will calculate and return the status of a database including its size, key count, and hash, checking for integrity issues.
156	Restore will initialize and restore an etcd cluster from configuration and files, returning an error if any step fails.
157	NewAuthStore creates an authentication store with validation, setting up buckets and enabling features based on configuration.
158	NewTokenProvider creates a TokenProvider based on token options, logging warnings for unknown or simple token types.
159	MendPeer resumes a peer and remote connection by ID.
160	removePeer removes a peer by ID, stops it, and updates related data structures and logs.
161	ActivePeers returns count of active peers
162	resolveTCPAddrDefault resolves TCP address by parsing host and port, looking up IP, and returning a TCPAddr.
163	resolveTCPAddrs will process URLs, resolving hostnames and returning updated URLs with resolved addresses.
164	urlsEqual compares two slices of URLs after resolving them, returning true if they are equal and an error if not.
165	URLStringsEqual compares two slices of URLs and returns true if they are equal, logging errors with Zap logger.
166	NewLeaseCommand creates a Cobra command for lease management with subcommands for granting, revoking, TTL, listing, and keep-alive operations.
167	NewLeaseGrantCommand creates a Cobra command for granting leases with a TTL.
168	leaseGrantCommandFunc processes a TTL argument, grants a lease, and displays the response or errors accordingly.
169	NewLeaseRevokeCommand creates and returns a Cobra command for revoking leases.
170	leaseRevokeCommandFunc handles lease revocation, validating arguments, executing the revoke command, and displaying the result.
171	NewLeaseTimeToLiveCommand creates a Cobra command to retrieve lease information with options to fetch associated keys.
172	leaseTimeToLiveCommandFunc processes a lease ID argument, sets options based on flags, retrieves lease TTL, and displays the result.
173	NewLeaseListCommand creates and returns a Cobra command for listing active leases.
174	leaseListCommandFunc retrieves leases from a client and displays them.
175	NewLeaseKeepAliveCommand creates a Cobra command for keeping leases alive with options.
176	leaseKeepAliveCommandFunc handles lease keep-alive commands, validating arguments, making RPC calls, displaying responses, and handling expiration notifications.
177	NewAlarmCommand creates a Cobra command for alarm operations with subcommands for disarm and list.
178	alarmDisarmCommandFunc processes an "alarm disarm" command, accepting no arguments, sends a request to disarm an alarm, and displays the response.
179	alarmListCommandFunc executes the alarm list command, validates arguments, retrieves and displays alarms.
180	Flags will return a list of command-line flags based on the Etcd struct fields and their values, formatted as "--flag=value".
181	EmbedConfig constructs an etcd configuration using provided URLs and settings.
182	PPProfHandlers configures HTTP handlers for profiling metrics.
183	NewBackendQuota configures and returns a backend quota based on server settings, logging relevant information and handling edge cases.
184	NewClusterProxy creates a cluster proxy with given client, address, and prefix, returning a ClusterServer and a done channel.
185	NewHandler creates an HTTP handler using a lease lessor and a wait channel.
186	TimeToLiveHTTP sends a POST request to a URL with a lease request, waits for a response, and returns the lease response or an error.
187	newWatcherBatch filters events for watchers and creates a batch if there are active watchers.
188	watcherGroup adds watcher to list, keyWatchers if end is nil, or updates existing interval tree
189	watcherGroup contains key returns true if key exists or intersects ranges
190	delete watcher from group and update intervals
191	choose will select watchers up to maxWatchers limit and return the selected watcher group and the revision number
192	watcherSetByKey combines key-based and range-based watchers, merging them into a single set if necessary.
193	Compare intervals based on begin and end times. Returns -1 if left, 1 if right, 0 if overlap.
194	successor will return the next node in interval tree or nil if no successor exists
195	updateMax updates node max value recursively up to root
196	visit recursively checks intervals, updating bounds and applying visitor logic
197	Delete node from interval tree and fix up balance if necessary
198	Insert interval and value into tree, fix up, update count
199	rotateLeft will reorganize the IntervalTree by rotating node x left, updating parent pointers and max values accordingly
200	replaceParent updates parent pointers and restructures tree nodes
201	MaxHeight calculates the maximum height of an interval tree based on its length.
202	Visit traverses the interval tree, applying visitor to each node's interval.
203	find searches for a matching interval in the tree and returns the corresponding node
204	find interval in tree and return associated value
205	Intersects checks if interval tree intersects with given interval.
206	Contains checks if an interval is fully contained within the tree's intervals.
207	Stab searches for intervals overlapping with given interval and returns them.
208	Union merges intervals from two trees into the current tree.
209	NewExactReadCloser wraps a ReadCloser with a fixed byte count limit.
210	NewElection creates a new Election instance with a session and modified key prefix.
211	ResumeElection creates an Election object with specified session, prefix, leader key, and revision.
212	Proclaim updates election leader with new value and lease, returning error if not leader.
213	Resignation method deletes leader key if session exists and updates header.
214	Leader will return the current election leader and an error if none is elected
215	Observe starts an election observation goroutine and returns a channel for receiving GetResponse messages.
216	check will trigger an alarm if resources are unavailable and return an error
217	NewExecWatchCommand creates a CLI command to watch a key for changes and execute a command.
218	execWatchCommandFunc executes a command when a specified key changes, handling flags and recursion, and restarting the command on key updates.
219	NewListener creates a timeout listener for a given URL and TLS configuration.
220	NewRoundTripper creates a timeout transport for HTTP requests without read/write timeouts.
221	createPostRequest constructs an HTTP POST request with specified URL, path, body, content type, URLs, and IDs, setting appropriate headers and returning the request object.
222	checkPostResponse evaluates HTTP response status and body to determine specific errors or return nil for successful responses
223	serverVersion extracts version from header, defaults to 2.0.0 if missing, returns parsed semver version
224	checkVersionCompatibility compares client and server versions, returning compatible versions or errors if incompatible.
225	setPeerURLsHeader sets peer URLs header in HTTP request
226	addRemoteFromRequest extracts server ID and peer URLs from HTTP headers and adds remote connection using Transporter.
227	NewKeysAPIWithPrefix creates a new HTTP-based keys API with specified client and prefix.
228	TTLDuration converts node's TTL to a time duration in seconds.
229	SetPflagsFromEnv sets flag values from environment variables based on a given prefix, updating a FlagSet and verifying usage.
230	FlagToEnv converts a flag name to an environment variable by prepending a prefix, replacing hyphens with underscores, and converting to uppercase.
231	excerpt extracts a substring from str with pre characters before and suf after, adding ellipsis if exceeding str length
232	passConfChange checks if the entry type is ConfigChange and returns true along with a string "ConfigChange".
233	printInternalRaftRequest decodes a raftpb.Entry and prints its term, index, and normalized request string
234	listEntriesType filters raft entries based on type, prints them, and optionally decodes using a command.
235	newLog creates a new raft log instance with specified storage and logger, using default size limit.
236	newLogWithSize creates a new raftLog instance, initializing it with storage, logger, and maxNextEntsSize, and setting up pointers based on the storage's first and last indices.
237	findConflict identifies the first entry causing a conflict and returns its index
238	nextEnts retrieves unapplied entries from raftLog, returning them or nil if none are available.
239	allEntries fetches all log entries, retries on compaction errors, and panics on other errors
240	slice will return a range of log entries up to a maximum size an error will be returned if out of bounds or unavailable
241	NewSession creates a session with etcd, handles leasing, and returns an error if setup fails.
242	Close session, revoke lease, return error if failed
243	WithTTL sets session TTL option if positive.
244	WithLease sets the lease ID for a session option.
245	addRequest adds a request to pendingReadIndex if not already present, updates readIndexQueue
246	recvAck updates pending read index and returns total ack count including local node
247	advance will return a list of readIndexStatus and remove them from queues if context matches an entry in the queue
248	lastPendingRequestCtx returns the last pending request context from the queue or an empty string if the queue is empty
249	EtcdServer starts services asynchronously including tick adjustment, publishing requests, file purging, monitoring descriptors, version tracking, linearizable reads, and KV hash monitoring.
250	start initializes EtcdServer with default configurations, sets up logging, and starts the server process
251	Process handles raft messages, logs warnings for removed members, updates stats for append requests, and steps the raft state machine.
252	ReportSnapshot forwards snapshot report to remote member
253	MoveLeader initiates a leader transfer and waits for confirmation, returning an error if the operation times out.
254	TransferLeadership checks if the server is a leader and multi-node, then transfers leadership to the longest connected member or returns an error.
255	configure manages etcd server config changes, proposing and applying them through raft, returning members and errors accordingly
256	sync sends a synchronous request to etcd with a timeout and proposes it using a goroutine
257	publish updates member attributes to cluster using Raft, retries on failure, logs errors/warnings accordingly
258	EtcdServer applies an entry normally, updates consistent index, handles noop entries, triggers requests, and manages space alarms.
259	applyConfChange applies configuration changes to the cluster, updates member states, and handles node additions, removals, and updates.
260	monitorVersions updates cluster version based on leader status and decided version
261	EtcdServer attaches a goroutine safely after checking if the server has stopped.
262	NewRoundrobinBalanced creates a round-robin load balancer picker with logging and mapping information.
263	Pick will select a subconnection and return it along with a callback to report pick result
264	NewTLSListener creates a TLS-enabled listener with given net.Listener and TLSInfo, returning a new net.Listener and an error if the setup fails.
265	acceptLoop listens for TLS connections, handles handshakes, and manages pending connections with concurrency control.
266	SetEndpoints updates resolver group endpoints, converts strings to addresses, locks mutex, assigns new endpoints, notifies resolvers, and unlocks mutex.
267	Target method retrieves the target using resolver group ID and endpoint.
268	Target constructs a URL by combining a scheme, ID, and endpoint.
269	Build creates a resolver for the given target, client connection, and options, returning an error if the target authority is empty or if it fails to build the resolver group.
270	Handle method processes HTTP requests based on Method type and calls corresponding handler functions, returning response or error.
271	NewElectionCommand creates a Cobra command for performing elections with options for total client connections.
272	nodeToMember converts a NodeExtern to a Member, unmarshalling raftAttributes and Attributes fields and returning an error if unsuccessful
273	NewTmpBackend creates a temporary backend with specified batch interval and limit, returning the backend instance and path.
274	newRevision creates a new Revision instance with logger, clock, retention, revGetter, and compactable, initializes a context, and returns it
275	Run starts a goroutine that periodically checks and compacts revisions based on retention settings, logging progress and errors accordingly.
276	Pause sets rc.paused to true after locking rc.mu.
277	Resume unpauses a revision by releasing the lock and setting paused to false.
278	voteRespMsgType converts a vote-related message type to its corresponding response type, panicking if the input is invalid.
279	DescribeMessage will return a formatted string describing a protobuf message including fields like From, To, Type, Term, Log, Index, Reject, Commit, Entries, and Snapshot.
280	DescribeEntry formats an entry based on its type and formatter, returning a descriptive string.
281	DescribeEntries concatenates formatted strings of entries into a single string.
282	SetLogger updates the global logger with a new gRPC logger instance while ensuring thread safety through locking.
283	GetLogger retrieves a logger instance safely using mutex locking.
284	maybeFirstIndex returns next index if snapshot exists, otherwise returns 0 and false
285	maybeLastIndex returns the last index and a flag indicating if it exists
286	maybeTerm checks if an index exists, returning its term and validity
287	shrinkEntriesArray reduces the size of entries array if it's using less than half of its capacity
288	SaveSnap saves a snapshot to WAL and Snapshotter, releasing lock afterward.
289	New creates a new client instance using the provided configuration, returning an error if no endpoints are available.
290	NewCtxClient creates a new client with a cancellable context.
291	NewFromURL creates a client using a single URL endpoint.
292	Close client resources and connections, returning an error if connection close fails
293	Endpoints will return a copy of the client's configuration endpoints to prevent modification
294	SetEndpoints updates client endpoints and resolver group with provided strings.
295	Sync retrieves member list updates, aggregates client URLs, and sets them as endpoints.
296	dialSetupOpts configures gRPC dial options with custom keep-alive settings, deadline-aware dialer, transport credentials, and retry interceptors.
297	Dial connects to a gRPC server endpoint and returns a client connection or an error.
298	dialWithBalancer will establish a gRPC connection using a balancer, target, credentials, and additional options, returning the client connection and any errors encountered
299	dial establishes a gRPC connection to a target server with optional credentials and timeout, handling authentication if enabled.
300	WithRequireLeader adds leader requirement metadata to a context.
301	roundRobinQuorumBackoff calculates backoff duration based on attempt count and quorum size, with optional jitter.
302	isHaltErr checks if an error is due to unavailable or internal gRPC codes, returning false if so.
303	NewLease wraps a lease with a prefix.
304	IsCreate checks if event type is Put and revision unchanged.
305	WatchResponse Err returns an error based on closeErr, CompactRevision, and Canceled status.
306	IsProgressNotify checks if a WatchResponse has no events, isn't canceled, created, and has a zero compact revision while the header revision is non-zero.
307	watcher handles progress requests using context, manages streams, and retries if necessary
308	nextResume removes and returns the first non-nil element from resuming slice, or nil if empty
309	dispatchEvent handles WatchResponse, converts events, and broadcasts/unicasts response based on conditions.
310	broadcastResponse sends a response to all subscribers and returns true
311	unicastResponse sends a WatchResponse to a specific watch stream and returns true if successful, false otherwise
312	joinSubstreams waits for all substreams and resuming streams to complete
313	Convert watch request to protobuf message
314	toPB converts progressRequest to WatchRequest protobuf message
315	Contains checks if a value exists in the unsafeSet and returns a boolean.
316	ContainsAll checks if all given strings are present in the unsafeSet.
317	`Equals` checks if two sets contain the same elements by sorting them and comparing.
318	us.Values returns all string values stored in the unsafeSet
319	Copy will create a new unsafeSet and add all elements from the original set to it, then return the copy.
320	Subtract elements of another set from the current unsafe set and return the result.
321	v2MembersURL appends a default prefix to the URL path and returns the modified URL
322	NewMigrateCommand creates a Cobra command for migrating keys between stores, configuring flags for options like TTL, data directory, WAL directory, and transformer program.
323	publishEntries processes raft entries, commits normal data and handles configuration changes, updating appliedIndex and signaling replay completion.
324	openWAL creates a WAL directory if it doesn't exist, initializes a new WAL or opens an existing one based on the snapshot, and returns the WAL instance.
325	raftNode replays WAL, loads snapshot, reads entries, applies snapshot and hard state, appends entries, updates lastIndex or sends nil on commit channel, returns WAL reader
326	stop method stops HTTP server, closes commit and error channels, and stops raft node
327	NewWatchCommand creates a Cobra command for watching events on keys or prefixes, supports interactive mode, prefix watching, starting revision, and retrieving previous key-value pairs.
328	`InitialState retrieves the hard state and configuration state from MemoryStorage.`
329	SetHardState updates the hard state in MemoryStorage and returns an error if any issue occurs.
330	Entries retrieves a range of log entries from MemoryStorage, ensuring bounds and limiting size.
331	Term retrieves the term of a specific entry in the memory storage, returning an error if the entry is compacted or unavailable.
332	LastIndex retrieves the last used index from memory storage safely with locking.
333	FirstIndex retrieves the first index of memory storage safely.
334	Snapshot returns a copy of the current state of MemoryStorage along with an error if any.
335	ApplySnapshot updates MemoryStorage with a newer Snapshot, replacing old data and setting new entries if applicable.
336	Compact raft log entries by removing older ones up to a specified index.
337	urlPicker marks a URL as unreachable and updates the picker's state accordingly.
338	NewEndpointCommand creates a Cobra command for endpoint operations, adding subcommands for health, status, and hash KV.
339	epHealthCommandFunc processes cluster endpoints, checks their health, and displays results, exiting with an error if any endpoint is unhealthy.
340	NewElectCommand creates a Cobra command for leader election observation and participation with optional listening mode.
341	NewDefragCommand creates a Cobra command for defragmenting etcd storage, setting flags for cluster endpoints and optional data directory.
342	RegisterBuilder configures and registers a builder with a given configuration, logging details about the registered balancer.
343	Build creates a new balancer instance with specified options, initializes internal structures, sets up logging, and assigns the client connection.
344	recordTransition updates counters for states and evaluates the new connectivity state based on their counts.
345	doSerialize authenticates ctx, invokes get, checks token revision, and returns error
346	send processes WatchResponse filtering events based on revision and filters, updating nextrev and posting valid events.
347	watcher posts WatchResponse to channel or cancels after timeout
348	OriginAllowed checks if a given origin is allowed based on CORS settings.
349	IsHostWhitelisted checks if a host is in the whitelist, allowing access if the list is empty or contains a wildcard entry.
350	SelectiveStringValue's Valids method returns sorted list of valid strings.
351	NewSelectiveStringsValue creates a map of valid strings and returns a pointer to SelectiveStringsValue with empty slice
352	NewKV wraps a KV client with a prefix.
353	NewURLsValue creates a new URLsValue instance from a string, sets its value, and panics if an error occurs.
354	URLsFromFlag extracts URL values from a flag set by name.
355	servePeers starts Etcd peer servers, handles TLS, logs, and graceful shutdowns.
356	NewStore initializes a store with dependencies, sets up logging, creates buckets, restores state, and returns the store instance.
357	appendMarkTombstone appends a tombstone mark to revision bytes if they are normal, logging an error otherwise
358	IsDirWriteable checks if a directory is writable by creating a temporary file and removing it.
359	TouchDirAll creates a directory if it doesn't exist and checks if it's writable.
360	CreateDirAll creates directory recursively and checks if it is empty
361	ZeroToEnd will zero out the file content from current position to end and preallocate blocks, returning an error if any step fails
362	Open file or error from pipeline
363	NewRaftLoggerFromZapCore creates a new Raft logger using Zap core and syncer, skipping caller info.
364	NewConfig reads a YAML config file, unmarshals it, and sets up TLS configuration based on the contents.
365	RegisterElectionHandler registers an election handler using gRPC client connection.
366	UpdateCapability updates cluster capabilities based on version and logs the change.
367	NewLockCommand creates a Cobra command for acquiring a named lock with optional TTL and execution parameters.
368	tick updates raft node state by calling Tick method safely with mutex lock
369	advanceTicks increments a raft node's tick counter by a specified number of ticks
370	NewAuthCommand creates a Cobra command for enabling or disabling authentication.
371	authEnableCommandFunc enables authentication, handles role creation, grants root privileges, and prints success message
372	authDisableCommandFunc disables authentication and handles errors
373	RetryKVClient creates a retryable KV client wrapper
374	RetryLeaseClient wraps a client with retry functionality for lease operations.
375	RetryClusterClient creates a retry wrapper for a ClusterClient using a given Client connection.
376	RetryMaintenanceClient wraps a MaintenanceClient with retry logic.
377	RetryAuthClient creates a retrying auth client wrapper for given client connection.
378	NewSetDirCommand creates a CLI command for setting or updating directory TTL.
379	Enter will block until enough clients have entered or return an error if too many clients are present
380	Leave method deletes self and waits for other nodes in a distributed system, ensuring all nodes have left before returning.
381	HandleBasic sets up HTTP routes for various handlers including variables, logging, metrics, and version information.
382	WriteError logs and handles errors by writing them to a logger and HTTP response writer, providing detailed logging for specific error types.
383	MemberByName retrieves a member by name, panicking if duplicate names are found.
384	PeerURLs returns sorted list of peer URLs from RaftCluster members.
385	ValidateConfigurationChange checks Raft cluster config changes, ensuring IDs exist or are removed appropriately, validating URLs, and handling unknown change types with errors.
386	AddMember adds a new member to the Raft cluster, saves it to storage and backend, updates the members map, and logs the addition.
387	RemoveMember deletes a cluster member by ID, updates local state, and logs the action.
388	ValidateClusterAndAssignIDs compares two Raft clusters, assigns matching IDs, and returns an error if they differ.
389	Keep updates revisions in tree index and returns them
390	closeRequireLeader closes leader-required channels and updates keep-alive lists.
391	resetRecv cancels previous lease and starts a new keep-alive stream, returning the client and any errors
392	recvKeepAlive updates lease keep-alive status and notifies clients about TTL changes.
393	deadlineLoop runs in a loop, waits for a second or done signal, checks keep-alive deadlines, closes expired leases, and updates the map.
394	sendKeepAliveLoop sends keep-alive requests for expired leases over a stream until stopped.
395	NewKV creates a leasing KV client, starts session monitoring and lease cleanup goroutines, and returns the client, close function, and wait session result.
396	leasingKV rescinds a lease if key revision is greater than specified rev and deletes key using transaction with comparison and operation retries on context error
397	LeaseValue converts a key to a comparison object with lease target.
398	cmp.ValueBytes returns the byte representation of the target union's value if it exists; otherwise, it returns nil.
399	WithRange sets the end of the comparison range and returns the updated comparer.
400	WithPrefix modifies a Cmp object by setting RangeEnd to the prefix of Key and returns the modified Cmp.
401	mustInt64 converts an interface to int64, panicking if conversion isn't possible
402	mustInt64orLeaseID converts an interface to int64, preferring LeaseID if possible
403	Next retrieves gRPC watcher updates, processing put and delete events and returning parsed naming updates or errors.
404	getJournalWriteSyncer creates a syncer for writing logs to the journal, returning an error if unsuccessful
405	newKV creates a new node with specified properties and returns it
406	newDir creates a new directory node with specified properties and returns it.
407	Read will return the node's value or an error if the node is a directory
408	Write updates a node's value and modified index, returning an error if the node is a directory.
409	List method returns a list of child nodes and an error if the current node is not a directory
410	GetChild retrieves a child node by name, returning it along with an error if the node is not a directory or the child does not exist.
411	Add node to directory structure, return error if not a directory or node exists
412	Remove directory or file recursively, call callback, and handle errors
413	Compare node's value and index with previous ones, return match status and type
414	Clone method creates a deep copy of a node, copying all its properties and recursively cloning child nodes if applicable.
415	isConnectedToQuorumSince checks if more than half of cluster members are connected since a given time
416	isConnectedSince checks if the transport is active after a given time for a specific remote ID
417	numConnectedSince counts the number of members connected since a given time, excluding oneself.
418	longestConnected identifies the most active member among given IDs based on transport activity timestamps.
419	isTornEntry checks if any sector chunk contains only zeros, indicating a torn write.
420	StartMockServersOnNetwork starts mock servers based on the specified network type and count, returning the mock servers and an error if the network type is unsupported.
421	StartAt starts a gRPC server at specified index, listens on network address, registers mock service, and serves requests.
422	StopAt will stop the gRPC server at the specified index and release resources
423	MockServers Stop will stop all servers and wait for goroutines to finish
424	NewCheckCommand creates a Cobra command for checking etcd cluster properties, adding subcommands for performance and data scale checks.
425	NewCheckPerfCommand creates a Cobra command for checking etcd performance with customizable options.
426	NewCheckDatascaleCommand creates a Cobra command for checking datascale with options for load, prefix, auto-compaction, and auto-defragmentation.
427	NewGetCommand creates a Cobra command for getting keys or ranges, configuring options like consistency, order, and limit.
428	NewGetCommand creates a CLI command for retrieving a key's value, supports sorting and quorum options, and invokes a specific action function.
429	PickPeerURL selects a random peer URL from a member's list.
430	HandleMetricsHealth registers health and metrics endpoints on an HTTP server.
431	NewRemoveCommand defines a CLI command for removing keys or directories with options for recursive deletion and specifying previous values or indices.
432	rmCommandFunc deletes a key or directory recursively based on CLI arguments and prints the response accordingly.
433	checkIntervals will validate intervals from requests, detect duplicates, and return a map of keys and interval trees along with any errors encountered
434	ReportEventReceived decrements pending events gauge and increments total events counter by n.
435	RegisterKVHandler registers a key-value handler using gRPC client connection.
436	RegisterWatchHandler registers a watch handler client using the provided context, serve multiplexer, and gRPC connection.
437	RegisterLeaseHandler registers a lease handler using the provided context, server multiplexer, and gRPC client connection.
438	RegisterClusterHandler registers a cluster handler using gRPC client connection.
439	RegisterMaintenanceHandler registers a maintenance handler using gRPC and returns an error if registration fails
440	RegisterAuthHandler registers authentication handler with gRPC server.
441	startEtcd starts an Etcd server with given config, returns channels for stopping and errors, and handles interrupts.
442	identifyDataDirOrDie identifies the type of data directory (member, proxy, or empty) or logs an error if invalid files are found.
443	openLast reads WAL filenames, selects the last one, and locks it for reading/writing with private mode.
444	gotLeader acquires a lock, waits for a signal on leaderc, and resets it if signaled
445	lostNotify returns a channel that receives a signal when the leader is lost
446	newGRPCProxyCommand creates a Cobra command for gRPC proxy with a subcommand.
447	NewMemberCommand creates a Cobra command for membership management with subcommands for adding, removing, updating, and listing members.
448	NewMemberAddCommand creates a Cobra command for adding a member with options.
449	NewMemberRemoveCommand creates a Cobra command for removing a member from a cluster.
450	NewMemberUpdateCommand creates a Cobra command for updating a cluster member, setting usage, description, and options.
451	NewMemberListCommand creates a Cobra command for listing cluster members.
452	memberAddCommandFunc adds a new member to the cluster, validates arguments, handles URLs, and updates configuration accordingly.
453	memberRemoveCommandFunc handles removing a member by ID, validating input, making a request, and displaying the result or error.
454	memberUpdateCommandFunc updates a member using provided ID and URLs, handles errors, and displays response
455	memberListCommandFunc handles a command to list members, fetches data, and displays it.
456	Open opens a WAL directory, logs errors, and returns a WAL instance or an error.
457	OpenForRead opens a WAL file for reading using the given logger, directory path, and snapshot, returning a WAL instance and an error if unsuccessful.
458	Verify checks WAL files for consistency using logger, directory, and snapshot, returning error if validation fails.
459	WAL Close releases resources, syncs, and closes files and locks.
460	notify checks if an event meets certain conditions and sends it to a channel if it does, otherwise it removes the watcher
461	watcher's Remove method locks hub mutex, closes event channel, and executes remove function if defined
462	mkPathDepth constructs a normalized path with a specified depth and prefix.
463	mkV2Node converts a KeyValue to a NodeExtern, setting key, directory status, and revision indices.
464	prevKeyFromPuts retrieves the previous key-value pair from a transaction response if available.
465	NewWeightedReport creates a new weighted report using a base report and precision string, returning a Report interface.
466	NewURLsMapFromStringMap converts a string map to a URLsMap using a specified separator and returns an error if any URL is invalid.
467	URLsMap String converts map to sorted URL key-value pairs string
468	URLsMap URLs returns sorted list of strings
469	parse will convert a comma-separated list of key-value pairs into a map where keys map to lists of values
470	NewClientHandler sets up an HTTP handler with logging and timeouts for an etcd server.
471	writeKeyEvent encodes and sends an event response with appropriate headers and modifies the event based on conditions before encoding.
472	writeKeyError logs errors and writes responses based on error types
473	getUint64 extracts a uint64 value from URL query parameters, returning the parsed number and any errors encountered.
474	getBool will return a boolean value and an error based on the value of a specified key in URL query parameters
475	waitDeletes waits for deletions under a prefix and returns header or error
476	AddOutputPaths combines and deduplicates output paths, sorting them before returning the modified zap.Config.
477	NewConfig creates a default configuration object for etcd.
478	PeerURLsMapAndToken generates a map of peer URLs and a token based on configuration settings, handling both static and dynamic discovery scenarios.
479	GetDNSClusterNames fetches DNS cluster names using HTTPS and HTTP, combines results, logs details, and returns them along with errors.
480	checkBindURLs will validate URLs, skipping unix schemes, allowing localhost, and ensuring other hosts are valid IPs, returning an error if any validation fails
481	GetCluster resolves AP URLs, updates node map with SRV records, and constructs cluster strings with names and schemes.
482	GetClient fetches client details using DNS SRV records for both HTTP and HTTPS services, returning a list of endpoints and SRV records or an error if DNS lookups fail.
483	GetSRVService constructs an SRV service name based on input parameters, appending "-ssl" if the scheme is HTTPS and concatenating with a service name if provided.
484	ReadDir reads directory contents, filters by extension if specified, and returns sorted filenames.
485	compact will perform a compaction operation on the client with the given revision and handle errors
486	defrag will print defragmenting message call client defragmentation with timeout cancel operation print defragmented message if error exit with error
487	NewUserCommand creates a Cobra command for user management with subcommands for adding, deleting, getting, listing, changing password, granting, and revoking roles.
488	userAddCommandFunc handles user addition, validating arguments, prompting for password if necessary, and displaying the result.
489	userGetCommandFunc handles user retrieval, displaying details based on flags
490	userChangePasswordCommandFunc handles user password change, reads password interactively or from input, sends request, and displays response or error.
491	addEvent updates EventHistory with a new event, locks access, inserts the event, updates indices, and returns the event.
492	scan retrieves an Event based on key, supports recursion, and handles index validation.
493	clone creates a deep copy of EventHistory, copying the queue events and returning a new instance
494	openSnapshotBackend renames a snapshot file based on configuration and opens a backend.
495	openBackend opens a backend database asynchronously, logs timing, and handles timeouts gracefully
496	recoverSnapshotBackend updates the backend using a snapshot if newer than current state, otherwise returns the old backend.
497	NewUpdateCommand creates a CLI command for updating keys with values and TTL.
498	updateCommandFunc updates a key-value pair with optional TTL, handles errors, and prints response based on global output setting
499	frontAndBack retrieves the oldest and newest RequestStats from a statsQueue, locking during access.
500	Insert adds a request to the queue, updating pointers and size.
501	Rate calculates the processing and bandwidth rates based on timestamps and queue lengths.
502	Clear resets statsQueue by locking, resetting indices and counters.
503	UniqueStrings generates a list of unique random strings of specified length up to given count.
504	RandomStrings generates `n` random strings, each of length `slen`.
505	IsKeyNotFound checks if an error indicates a key not found condition.
506	IsRoleNotFound checks if an error is an authError and if its message matches the roleNotFoundRegExp pattern, returning true if both conditions are met.
507	IsUserNotFound checks if an error is an authError and if its message matches a regex pattern for "user not found".
508	JoinCluster creates a discovery instance and joins a cluster with given configuration, returning the result or an error.
509	GetCluster retrieves cluster info using discovery with logger, URL, and proxy URL. Returns cluster string or error.
510	newProxyFunc creates a proxy function based on the given URL, logs the proxy details, and returns an error if the URL is invalid.
511	isSafeRetry determines if an error is safe to retry based on the RPC type and retry policy.
512	withRetryPolicy sets a retry policy option for operations
513	withAuthRetry sets whether to retry authentication and returns a retry option.
514	withMax sets maximum retries for option
515	withBackoff sets a backoff function in retry options
516	RecvAppendReq updates server state and tracks request stats.
517	ServerStats locks, becomes leader, inserts request stats, increments send count.
518	merge combines two bucket buffers, sorts them, removes duplicates, and updates the buffer.
519	deleteRevKey deletes a key-value pair with specific revision and returns success status and error if any
520	isMemberBootstrapped checks if a cluster member has bootstrapped by verifying client URLs
521	GetClusterFromRemotePeers retrieves a cluster from remote peers using HTTP with a timeout and logger.
522	getClusterFromRemotePeers fetches cluster info from remote peers, constructs a RaftCluster, and handles errors during the process.
523	getRemotePeerURLs retrieves URLs of remote peers in a Raft cluster, excluding the local node.
524	getVersions fetches version info for all cluster members, logs errors, and returns a map of IDs to version details.
525	decideClusterVersion will determine the highest version among cluster members and log warnings if versions are mismatched or unparseable
526	getVersion attempts to fetch and parse version information from multiple URLs, returning the successful response or an error.
527	NewTimeoutDetector creates a timeout detector with a specified maximum duration and an empty record map.
528	Reset TimeoutDetector by clearing records.
529	TimeoutDetector Observe updates records and checks if an observation exceeds the maximum duration, returning a bool and the duration exceeded.
530	NewPeerHandler creates an HTTP handler for peer communication using logger, cluster, raft handler, and lease handler.
531	`put` updates key revisions, logs errors for older revisions, manages generations, increments keys gauge, and tracks modifications.
532	tombstone updates keyIndex with a new revision, logs panic if empty, and appends a new generation
533	get retrieves revisions from a key index based on a given revision, returning modified and created revisions along with a version or error.
534	`since` filters revisions based on a given revision, returning those newer than the specified one, excluding duplicates with the same main value.
535	keep updates keyIndex by compacting generations and removing tombstones if necessary
536	findGeneration will return the generation containing the given revision or nil if not found
537	cancelWatcher removes a watcher from unsynced or synced sets, handles compaction, and cleans up resources
538	watchableStore syncs watchers in a loop, waits based on sync duration and stop signal
539	syncVictimsLoop continuously moves victims and updates watchers, pausing briefly if victims exist, stopping on signals.
540	moveVictims processes watchers, sends events, and reassigns victims based on send success.
541	kvsToEvents converts key-value pairs to events, filtering based on watcher group and handling tombstones.
542	notify handles watch notifications, processing events and managing watchers efficiently
543	isOpFuncCalled checks if any option is a function containing the specified operation name
544	UnsafePut forwards bucketName, key, and value to unsafePut without synchronization.
545	UnsafeSeqPut invokes unsafePut with bucketName, key, value, and true flag.
546	UnsafeRange fetches key-value pairs from a bucket within a transaction, returning them up to a specified limit.
547	UnsafeDelete removes a key from a specified bucket, logs errors, and increments pending operations.
548	UnsafeForEach applies a visitor function to each key-value pair in a specified bucket without checking transactions, returning an error if any occur during iteration.
549	batchTx Commit locks transaction, commits changes, then unlocks
550	batchTx CommitAndStop locks transaction, commits with rollback flag, unlocks transaction
551	Renew will refresh a lease and return its TTL, forwarding requests to primary if not current, handling expiration and renewal logic, and updating heap and metrics accordingly.
552	Attach adds items to a lease and updates mappings, returning an error if the lease is not found.
553	revokeExpiredLeases will revoke expired leases up to a limit and send them to expiredC channel if available, otherwise retry after 500ms
554	checkpointScheduledLeases manages scheduled leases, applying a rate limit and processing batches until fewer than the maximum batch size remain.
555	expireExists checks if the earliest lease in the heap has expired, returning the lease, a flag indicating if it was expired, and a flag if more checks are needed.
556	findExpiredLeases filters and returns up to `limit` expired leases.
557	refresh updates lease expiry by extending duration and remaining TTL
558	Lease.forever sets expiry to forever with mutex lock.
559	Lease.Keys() returns a list of item keys after acquiring a read lock.
560	Remaining calculates the time duration until lease expiry, locking access to expiry field.
561	NewCompactionCommand creates a Cobra command for compacting etcd event history, accepts options, and specifies a function to run the command.
562	compactionCommandFunc handles compaction command, validates arguments, parses revision, applies options, executes compaction, and prints result
563	NewPutCommand creates a Cobra command for putting a key-value pair into a store, supporting options for leasing, retrieving previous values, ignoring inputs, and detailed usage instructions.
564	putCommandFunc handles a PUT operation using provided arguments, sends it via a client, and displays the response or exits with an error.
565	NewHandler configures an HTTP handler with proxy settings and routes.
566	NewReadonlyHandler wraps an HTTP handler to make it read-only.
567	NewSetCommand creates a CLI command for setting key-value pairs, supports flags for TTL, swap value, and swap index.
568	setCommandFunc sets a key-value pair in a client, handles arguments, TTL, and previous value/index, and prints the response key with specified output format.
569	waitOnLastRev waits for a key to be deleted and returns true if no key is blocking, otherwise it returns false and an error if waiting fails
570	GetDefaultInterfaces will always return an empty map and an error message indicating default host is not supported for the current OS and architecture.
571	NewSnapshotCommand creates a Cobra command for managing etcd snapshots with subcommands for saving, restoring, and checking status.
572	NewMoveLeaderCommand creates a Cobra command for transferring leadership in an etcd cluster.
573	transferLeadershipCommandFunc handles moving leadership by parsing arguments, finding the current leader, and executing the move operation.
574	OpenDir opens a directory and returns a file descriptor or an error.
575	NewRemoveDirCommand creates a CLI command to remove directories or key-value pairs.
576	rmdirCommandFunc deletes a directory key and handles errors and response formatting based on global options.
577	NewDelCommand creates a Cobra command for deleting keys or ranges of keys, supports options for prefix deletion, returning previous key-values, and specifying deletion from a key onwards.
578	delCommandFunc processes delete operation based on command arguments, executes deletion, and displays response or error.
579	NewExpect creates a new ExpectProcess instance with the given name and arguments, using the current system environment if none provided.
580	NewExpectWithEnv creates an ExpectProcess instance with specified command, arguments, and environment, starts a pseudo-terminal session, and reads output in a separate goroutine.
581	ExpectFunc waits for lines matching a condition and returns the first matching line or an error.
582	Expect searches for substring `s` in input using `ExpectFunc`.
583	LineCount locks the mutex, retrieves the count, and unlocks before returning it.
584	Signal sends an OS signal to the process managed by ExpectProcess.
585	keyFunc converts RangeRequest to string using Marshal and panics on error
586	Add updates cache with range request, handles revision, and manages cached ranges efficiently.
587	Get retrieves a cache entry based on a request, returning the response and an error if not found or compacted.
588	Invalidate cache entries between specified keys.
589	Compact updates the cache's compactedRev with the higher of the current and given revision.
590	NewUniqueURLsWithExceptions creates a set of unique URLs with specified exceptions and populates it with URLs from a given string, panicking if initialization fails.
591	UniqueURLsFromFlag retrieves URLs from a flag and returns them as a slice.
592	UniqueURLsMapFromFlag extracts unique URLs from flagset using specified name and returns them as a map.
593	Hold will return an error if creating a key fails
594	Release barrier key and return error
595	Wait will block until a PUT or DELETE event occurs for the given key or return an error if the key is already removed
596	NewLockRacerCommand creates a Cobra command for performing a lock race operation with options for total client connections.
597	ElectionTimeout converts milliseconds to duration.
598	DialEtcdGRPCServer connects to an etcd gRPC server using provided options, handling both secure and insecure connections based on URL scheme.
599	CreateEtcdClientConfig generates an etcd client config based on member settings, handling both secure and insecure connections.
600	CreateEtcdClient configures etcd client options and returns a new client or error.
601	CheckCompact verifies etcd compaction by watching key changes and comparing revisions.
602	Defrag will close the etcd client and return an error if defragmentation fails
603	RevHash connects to an etcd server, sends a hash request, and returns the revision and hash values along with any errors encountered.
604	Rev retrieves the current revision of the member's etcd client and returns it along with any errors encountered during the process.
605	Compact etcd member state at given revision and timeout, returning error if failed
606	IsLeader checks etcd client status and returns true if member ID equals leader ID.
607	WriteHealthKey creates an etcd client, sets a health key, and handles errors.
608	SaveSnapshot removes existing snapshots, creates a new etcd client config, logs the start, saves the snapshot, measures duration, retrieves file info and status, populates SnapshotInfo, logs the end, and returns any errors.
609	RestoreSnapshot cleans data directories, logs start, restores snapshot, logs end with details, and returns error.
610	NewWatcher wraps a clientv3 watcher with a prefix and a stop channel.
611	NewRawNode creates a new Raft node with given configuration and peers, handling both initial setup and restoration.
612	Campaign sends a MsgHup message to the Raft node.
613	Propose sends data wrapped in a Raft message to the node's raft instance.
614	ProposeConfChange marshals a configuration change and sends it as a proposal message to the raft instance.
615	ApplyConfChange updates Raft configuration based on ConfChange message and returns current node and learner states.
616	rawNode.step handles raft message, ignoring local ones and returning error for peer not found
617	`Ready` updates Raft state, resets message queue, reduces uncommitted size, and returns readiness status.
618	WithProgress applies a visitor function to all peers and learners in a RawNode, resetting their progress information.
619	ReportUnreachable sends an unreachable message to a specified node using Raft protocol.
620	ReportSnapshot updates raft node with snapshot status.
621	RawNode transfers leadership to another node.
622	RawNode reads index from raft with given context.
623	printcURL constructs and prints a cURL command based on HTTP request details, handling both URL and body data, and resets the request body.
624	StartNode initializes a Raft node with given config and peers, appends configuration change entries, marks them as committed, and starts the node in a goroutine.
625	RestartNode creates a new Raft node using Config, starts it in a goroutine, and returns a pointer to the node.
626	Tick sends a signal to node's tick channel or logs a warning if the node is blocked.
627	MustSync will return true if there are changes in term, vote, or entry count between states.
628	NewGRPC17Health creates a new gRPC health checker with specified endpoints, timeout, and dial function.
629	NeedUpdate checks if GRPC17Health needs address updates by verifying if pinAddr is missing or all connections are down.
630	dflSignal sets the specified signal to default action using syscall.
631	New creates a store instance with specified namespaces and sets the real clock.
632	store.Index will return the current index after acquiring a read lock
633	Get retrieves a node by path, optionally recursively and sorted, returning an event and error.
634	Create a node in store with path, directory flag, value, uniqueness, and TTL options, return event and error
635	Set updates a node's value, handles expiration, and notifies watchers accordingly.
636	getCompareFailCause returns a comparison failure message based on node values and previous state
637	delete a node and its children if recursive is true an error will be returned if the operation fails
638	walk traverses a node path using a callback function, updating the current node and accumulating errors until completion.
639	internalGet navigates a store using a path, returning a node or an error if the path is invalid or the node does not exist
640	Delete expired keys from heap, update stats, and notify watchers.
641	checkDir will return a directory node and no error if the directory exists, or create a new directory node and return it with no error if it doesn't exist, and an error if the existing node is not a directory
642	Save method serializes store object to JSON and returns byte array and error
643	Recovery will unmarshal state into store, reset ttlKeyHeap, recover and clean root, returning error if failed
644	Generator.Next increments suffix atomically, combines with prefix, and returns unique ID.
645	NewMakeMirrorCommand creates a Cobra command for making a mirror of an etcd cluster with various options for prefix mapping and TLS configuration.
646	NewZapCoreLoggerBuilder configures logger settings and initializes gRPC logging once.
647	NewSyncer creates a syncer instance with given client, prefix, and revision.
648	DropPort executes iptables commands to block outgoing and incoming TCP traffic on specified port, returning any errors encountered.
649	SetLatency configures network latency for interfaces, applying or updating a traffic control rule.
650	RemoveLatency removes network latency by deleting traffic control queues on default interfaces.
651	NewTxnCommand creates a Cobra command for processing transactions interactively or non-interactively.
652	txnCommandFunc handles transaction commands, reads user inputs for compares, success/failure ops, commits, and displays response.
653	New creates a compactor based on the specified mode, returning an error for unsupported modes.
654	printResponseKey will print response details based on specified format
655	RegisterLockHandler registers a lock handler client using gRPC.
656	grpcHandlerFunc adapts HTTP handlers to serve gRPC requests when detected, falling back to another handler otherwise.
657	addCORSHeader sets CORS headers for HTTP response
658	fallback will generate Get operations for non-GET ops in the input list, prefixed with a key prefix
659	IDFromString converts a hexadecimal string to an ID and returns an error if the conversion fails.
660	release removes the PID file if not read-only, closes the file, resets path and file pointer, and returns any errors encountered.
661	EncodedSize calculates total size including value length, metadata, and variable-length encoding of expiration time.
662	Decode extracts metadata and value from byte slice.
663	NewMergeIterator creates a MergeIterator object for merging sorted iterators in a specified order.
664	initHeap initializes a heap with valid iterators, stores the key of the smallest element, and pops invalid elements.
665	MergeIterator.Valid checks if iterator is valid by verifying non-nil and non-empty heap.
666	MergeIterator's Key returns the key of the first element in heap, or nil if heap is empty
667	MergeIterator's Value method returns the first item's value if heap is not empty, otherwise returns an empty ValueStruct.
668	MergeIterator's Next advances to the next item, updating heap and key storage accordingly.
669	MergeIterator's Seek method iterates over all iterators, seeking to the specified key and reinitializes the heap.
670	Close all iterators in MergeIterator and return an error if any fail
671	Encode converts a valuePointer to a byte slice.
672	Decode reads header fields from byte buffer.
673	encodeEntry serializes an Entry object into a buffer with a header, key, value, and CRC32 checksum, returning the total bytes written and any errors encountered.
674	SetEntry updates an entry in the WriteBatch, committing if necessary, and handles errors accordingly.
675	Set assigns a key-value pair with metadata to a WriteBatch and returns an error if unsuccessful.
676	SetWithTTL adds a key-value pair with expiration duration to WriteBatch and returns an error if unsuccessful
677	Delete key in WriteBatch, commit transaction, handle errors
678	commit will attempt to commit a transaction, add a new transaction, update read timestamp, and return any errors encountered
679	Flush locks batch, commits, discards txn, unlocks, waits, and returns error.
680	writeBatch Error returns the accumulated error
681	db.getMemTables retrieves mutable and immutable memtables, increments references, and returns a cleanup function to decrement them.
682	writeRequests handles batched write requests, logs progress, writes to value log and memtable, manages space, and updates head pointers, returning an error if any step fails.
683	ensureRoomForWrite locks the database, checks if there's enough space, flushes data to disk if necessary, and manages memory tables accordingly, returning an error if no room is available.
684	writeLevel0Table writes data from a flush task iterator to a file, skipping keys with a drop prefix and handling errors during iteration and writing.
685	handleFlushTask handles a flush task by storing metadata, creating a file, writing data, syncing, and adding the table to the database.
686	flushMemtable manages memtables by flushing them to disk, updating internal state, and handling errors.
687	calculateSize computes LSM and Vlog sizes in specified directories and updates expvar metrics accordingly.
688	DB.Size calculates LSM and Vlog sizes returning them as int64 values.
689	Next retrieves the next value in a sequence, updating the lease if necessary, and increments the counter.
690	Release updates sequence next value in database and sets leased value.
691	KeySplits extracts strings from DB tables where Right key starts with given prefix, sorts them, and returns.
692	Flatten method runs compact operations concurrently using specified workers, monitoring progress and retrying when necessary until all tables are consolidated into a single level.
693	Mmap maps a file descriptor to memory, returning a byte slice and an error.
694	Madvise adjusts memory advice based on readahead preference.
695	setDiscardTs updates discardTs field in oracle struct safely using mutex lock
696	hasConflict checks if a transaction has conflicts based on reads and commits.
697	Set key-value pair in transaction and return error
698	SetWithMeta sets an entry with a key, value, and metadata in a transaction and returns an error if unsuccessful.
699	txn.Delete removes a key from the transaction and returns an error if unsuccessful
700	Get retrieves an item from the database using a given key, handling updates and cache fulfillment.
701	CommitWith runs prechecks, discards txn, and executes callbacks asynchronously.
702	View executes a transaction using a provided function and discards the transaction afterwards.
703	Update runs a function in a transaction and commits it if successful, panicking if managed transactions are enabled.
704	Seek sets block iterator to specified key based on whence flag, returning error if key not found.
705	SeekToLast moves blockIterator to the last element and sets error if initialization fails.
706	parseKV updates key and value based on header information and advances position, setting error if value exceeds block size.
707	NewIterator creates a new iterator for a table, optionally reversing it.
708	seekFrom navigates an iterator based on a key and a position indicator, adjusting its state accordingly.
709	seekForPrev will move iterator to previous position if current key does not match target key
710	`Value decodes and returns the current item's value.`
711	Seek will move the iterator to the specified key or previous key based on iteration direction
712	NewConcatIterator creates a ConcatIterator from multiple tables, iterating them in reverse order if specified.
713	Valid checks if current iterator item is not nil and valid.
714	Next advances to the next valid table or ends iteration if all tables are exhausted.
715	Close ConcatIterator and return error if any sub-iterator fails
716	OpenExistingFile opens a file with specified filename, read-write permissions, sync flag, and returns a pointer to os.File and an error.
717	Copy creates a byte slice with the same content as the input slice.
718	KeyWithTs prepends the maximum uint64 minus the timestamp to the given key.
719	ParseTs calculates a timestamp by subtracting the last 8 bytes of the key from the maximum uint64 value.
720	ParseKey removes last 8 bytes from non-nil keys
721	SameKey checks if two byte slices have equal parsed keys.
722	FixedDuration converts a duration to a formatted string showing hours, minutes, and seconds.
723	NewCloser creates a Closer instance with an initial count and returns a pointer to it.
724	NewThrottle creates a Throttle instance with buffered channels for controlling concurrency.
725	Do sends a signal through a channel and waits for errors, returning the first encountered error.
726	Done method sends errors to channel, waits for signal, and decrements wait group.
727	Finish waits for all tasks to complete, closes channels, and returns the first error encountered.
728	SetDiscardTs updates discard timestamp if transactions are unmanaged.
729	openReadOnly opens logFile in read-only mode, checks stats, asserts size, maps file, and returns error
730	iterate reads log entries starting from a given offset, processes them using a callback function, and returns the next valid offset or an error.
731	sortedFids filters and sorts file IDs from vlog's map, excluding those marked for deletion.
732	write logs to disk efficiently, managing files and offsets accordingly
733	populateDiscardStats retrieves discard stats from database, unmarshals JSON, and updates local state.
734	Backup function streams database changes to writer since specified version.
735	ToList gathers KV pairs with matching keys from an iterator, skipping deleted/expired items and respecting version limits.
736	produceRanges sends ranges of keys to a channel based on database splits, ensuring at least one range is sent even if the prefix is empty.
737	produceKVs reads key-value ranges, filters, converts, and sends them over a channel until done or context canceled.
738	Orchestrate manages data flow, producing ranges, KVs, and streaming, returning errors.
739	NewStream creates a new stream if not in managed transaction mode.
740	NewStreamAt creates a new stream at a specified timestamp in managed mode.
741	DecrRef decrements the table's reference count and deletes the underlying file when the last reference is removed, handling memory mapping and file operations accordingly.
742	ParseFileID extracts a numeric ID from a filename, returning it as a uint64 and a success flag.
743	PrintHistogram prints histograms of key and value sizes for a given key prefix in a database.
744	newSizeHistogram creates and initializes a sizeHistogram with specified key and value bins.
745	buildHistogram builds a size histogram for keys and values matching a given prefix in a database transaction.
746	printHistogram prints a histogram with total count, min, max, mean, and distribution across bins
747	Init initializes a WaterMark instance, sets up a channel and event log, and starts processing in a goroutine.
748	Begin updates watermark index and sends mark signal.
749	BeginMany sets last index and sends a mark message with indices to watermark channel.
750	WaterMark Done sends a mark signal with given index and marks it as done.
751	WaterMark DoneMany sends a completion signal with specified indices
752	SetDoneUntil updates the doneUntil field atomically with the given value.
753	WaitForMark waits for a watermark up to the specified index, returning an error if the context is canceled before the mark is received.
754	Encode converts header fields into byte array using big-endian encoding.
755	Decode reads header fields from buffer and returns size.
756	NewTableBuilder creates a Builder instance with initialized buffers and sets prevOffset to MaxUint32.
757	keyDiff returns the differing part of two keys starting from the first difference
758	Add key-value pairs to Builder, manage blocks, and reset counters as needed.
759	blockIndex calculates block offsets and returns them as a byte array
760	Finish will write a bloom filter and index to buffer and return byte array
761	Errorf logs an error message using the logger in Options if it's not nil.
762	Infof logs formatted information using the Options' Logger if available.
763	DecrRef decrements the reference count of a Skiplist, resets its arena if count drops to zero, and sets the arena to nil to indicate closure and facilitate garbage collection.
764	NewSkiplist creates a new skiplist with specified arena size, initializes head node, and returns pointer to skiplist.
765	Put inserts a key-value pair into the SkipList, overwriting existing values and adjusting heights as needed.
766	Get retrieves a key-value pair from a skiplist, returning the value if the key exists and matches; otherwise, it returns an empty ValueStruct.
767	Iterator's Key method retrieves a byte slice representing the key at the current position.
768	Iterator's Value retrieves a value from the list arena using offset and size.
769	Next advances iterator to next element safely checking validity.
770	Iterator's Prev method moves to the previous item, asserting validity and finding the nearest smaller key.
771	Seek updates iterator to point to element greater than or equal to target.
772	SeekForPrev updates iterator position to find previous item matching target.
773	NewUniIterator creates a UniIterator for a Skiplist, setting the iteration direction based on the reversed parameter.
774	UniIterator's Next method advances the iterator in the direction specified by reversed flag.
775	Seek updates iterator position based on key, moving forward or backward depending on reversed flag.
776	manifestAsChanges creates manifest change objects for each table in the manifest.
777	rewrite closes file, rewrites manifest, updates deletions, returns error
778	validate checks table levels for consistency, returning an error if keys are out of order
779	acquireDirectoryLock will return a directory lock guard and an error if the operation is not supported or fails
780	release will reset the path and close the handle returning an error if unsuccessful
781	AssertTruef will log a fatal error with formatted message if the condition is false
782	Wrapf will wrap an error with a formatted message, returning the original error if debug mode is off or no error is present.
783	initTables sorts and initializes table slices based on file IDs or keys, updating total size accordingly.
784	deleteTables removes specified tables from levelHandler, updates table list and size, and decrements references safely.
785	tryAddLevel0Table attempts to add a table to level 0, locks the handler, checks if adding another table would exceed the limit, adds the table if possible, increments its reference count, updates the total size, and returns success.
786	getTableForKey retrieves tables based on a key, handles level 0 differently by checking all tables, and performs a binary search for higher levels, managing reference counts appropriately.
787	get retrieves the latest value for a key from tables, considering timestamps and updates metrics accordingly.
788	overlappingTables identifies tables overlapping a given key range and returns their indices
789	item.String() will return a formatted string containing key, version, and meta data
790	KeyCopy copies the item's key to the destination byte slice safely.
791	ValueSize calculates size of item based on presence of value pointer and key length.
792	NewKeyIterator sets iterator options for a transaction key and returns an iterator.
793	Valid checks if current item key has specified prefix
794	ValidForPrefix checks if iterator item key starts with given prefix and iterator is valid.
795	Close iterator, ensure all goroutines finish, decrement iterator count.
796	parseItem advances iterator, filters badger keys, skips old versions, handles all versions, tracks last key, fills item, and returns validity.
797	Seek updates iterator to point to key, rewinding if empty key.
798	GetMergeOperator creates a MergeOperator instance, sets up compaction goroutine, and returns it.
799	Get retrieves data using a merge operator, locking access, iterating, merging, and handling errors.
800	compareAndAdd updates ranges and deletesize based on overlaps and returns success
801	newArena creates an Arena instance with a buffer of size n, reserving offset 0 for nil pointers.
802	putNode calculates the aligned offset for inserting a node in an arena based on its height.
803	getNode retrieves a node pointer from an Arena based on the given offset.
804	getKey extracts a byte slice from Arena buffer based on given offset and size.
805	getVal reads a value from a buffer at a specified offset and size, returning it as a ValueStruct.
806	getNodeOffset calculates the offset of a node within an arena buffer and returns it as a uint32.
807	init sets up various counters and maps for monitoring disk reads/writes and other metrics in BadgerDB.
808	revertToManifest will check manifest for existing files, remove unreferenced files, and return an error if any issues arise
809	dropTree will delete all tables, generate manifest changes, and return the count of deleted tables with an error if any operation fails
810	dropPrefix removes specified prefix from keys in levels, triggering compactions if necessary
811	isLevel0Compactable checks if the first level has enough tables to compact based on the configured threshold.
812	doCompact handles compaction priority, fills tables, runs compaction, logs progress, and manages compaction status.
813	get retrieves the latest value for a key across sorted levels, updating maxVs if necessary and returning an error if failed.
814	seekTotal calculates the total balance of accounts and verifies it against an expected value, returning the list of accounts and an error if the balances don't match.
815	findFirstInvalidTxn searches for the first invalid transaction timestamp in a database range by binary search.
816	Create will initialize a snapshot sink for version 1 and store metadata before returning it.
817	List retrieves the latest snapshot metadata or an empty list if none exists.
818	Open retrieves a snapshot by ID, returning metadata and contents or an error if not found.
819	Write data to snapshot sink, update size, return bytes written and error
820	NewFileSnapshotStoreWithLogger creates a new file snapshot store with optional logging, ensuring the base directory exists and testing permissions before returning the store or an error.
821	NewFileSnapshotStore creates a file snapshot store with optional logging.
822	snapshotName generates a unique name using a term, index, and current timestamp in milliseconds.
823	Create a new snapshot file, initialize sink, write metadata, open state file, and return sink.
824	List will return a list of SnapshotMeta objects up to the retain limit, or an error if retrieval fails
825	getSnapshots reads directory contents, filters, reads metadata, validates versions, sorts, and returns file snapshots.
826	readMeta opens a metadata file, reads its JSON content, and returns the parsed metadata or an error.
827	Open will return a snapshot metadata, buffered reader, and error if opening or validating the file fails
828	ReapSnapshots deletes old snapshots, retaining recent ones, logging errors encountered during the process.
829	Write buffer data to file snapshot sink
830	Close will finalize, delete temp dir, write meta, move dir, skip fsync on Windows, reap old snaps, and return error if any step fails
831	Cancel cancels a file snapshot sink, closes handles, finalizes, and removes artifacts.
832	finalize flushes buffer, syncs state file, gets size, closes file, sets size and CRC, returning any errors encountered
833	writeMeta opens a meta file, buffers I/O, encodes metadata as JSON, flushes buffer, and syncs file, returning errors if any occur
834	NewNetworkTransportWithConfig creates a network transport using a configuration, setting up logging and connections.
835	setupStreamContext initializes a stream context for network transport.
836	getStreamContext will return the stream context of NetworkTransport safely using a read lock
837	SetHeartbeatHandler assigns a callback function to handle heartbeats in NetworkTransport.
838	CloseStreams releases network connections, updates connection pool, cancels existing streams, and sets up new stream context safely.
839	Close network transport safely by signaling shutdown and releasing resources.
840	NetworkTransport retrieves a pooled connection for a target server address, locks the pool, removes and returns a connection if available, or returns nil if none are available.
841	getConnFromAddressProvider retrieves a connection using an address provider based on server ID and target address, returning the network connection and any errors encountered.
842	getConn retrieves a network connection, either from a pool or by dialing a new one, and wraps it with necessary encoders and decoders.
843	returnConn adds a connection to the pool if possible, otherwise releases it
844	listen handles incoming network connections, retries on errors, and logs connection details.
845	handleConn manages network connections, reads commands, handles them, and sends responses, logging errors as needed.
846	handleCommand reads an RPC type, decodes the corresponding request, handles heartbeats, dispatches the RPC, waits for a response, and sends the result back.
847	decodeResponse decodes error and response from connection, returning success status and error if present
848	sendRPC sends RPC request over connection, encodes arguments, flushes buffer, and releases connection on error
849	newNetPipeline creates a new network pipeline with a transport and connection, starts decoding responses, and returns the pipeline.
850	decodeResponses reads responses from a channel, decodes them using a connection, and handles errors or shutdown requests.
851	AppendEntries sends an RPC request and waits for a response using a future object.
852	Close network pipeline, release connection, and signal shutdown.
853	NewObserver creates a new observer with specified channel, blocking behavior, and filter function, returning a pointer to the Observer.
854	RegisterObserver adds an observer to the Raft instance's list, locking during update.
855	Deregisters an observer from Raft's list of observers.
856	observe processes observers, filtering and sending observations asynchronously.
857	NewInmemStore creates a new InmemStore instance with initialized maps for logs, key-value pairs, and integer key-value pairs.
858	FirstIndex retrieves the lowest index from the InmemStore, locking during access and returning the index along with any potential error.
859	LastIndex retrieves the highest index from InmemStore safely.
860	GetLog retrieves a log entry by index, updates the provided log pointer, and returns an error if the log is not found.
861	StoreLog will store a single log entry and return an error if it fails
862	StoreLogs will store logs in memory and update low and high indices error will be returned if storing fails
863	DeleteRange removes entries in InmemStore between min and max, adjusting lowIndex and highIndex accordingly.
864	Set updates key-value pair in InmemStore and returns error if failed
865	Get retrieves a value from InmemStore using a key, returning the value and an error if not found.
866	SetUint64 updates an unsigned 64-bit integer value in the store using a key and returns an error if unsuccessful.
867	GetUint64 retrieves a uint64 value from InmemStore using a key, locking access during retrieval.
868	NewLogCache creates a log cache with specified capacity and store, returning an error if capacity is non-positive.
869	Connect adds a peer to the transport's list.
870	Disconnect removes a peer and closes associated pipelines.
871	DisconnectAll locks transport, clears peers and closes pipelines.
872	Respond sends response and error over channel
873	Open retrieves a snapshot meta and reader, invalidating the opener afterward.
874	vote updates votes and notifies if quorum is reached
875	notifyAll clears waiting notifies submits votes
876	cleanNotify removes a verifyFuture from the notify map and unlocks the notifyLock
877	LastContact retrieves the last contact time from a follower replication instance.
878	setLastContact updates last contact time with current time using mutex lock
879	replicate manages Raft log replication, switching between normal and pipeline modes based on health and configuration.
880	pipelineReplicate manages Raft log replication to followers using pipelines, handles errors, and ensures timely termination.
881	pipelineSend sends an append request and handles errors, updating nextIdx if successful.
882	pipelineDecode handles follower responses, updates state, and stops on errors or termination signal
883	setupAppendEntries configures AppendEntriesRequest with RPC details and log entries, returning an error if configuration fails
884	setPreviousLog updates AppendEntriesRequest with previous log entry details based on nextIndex.
885	setNewLogs appends logs to request up to MaxAppendEntries or lastIndex, returning an error if retrieval fails
886	appendStats measures duration and increments log count for given peer
887	handleStaleTerm logs an error when a peer has a newer term, stops replication, notifies followers, and asynchronously notifies a step-down event.
888	AppendEntries appends entries to a server and sends RPC response.
889	transport handles RPC requestVote to target server
890	InstallSnapshot logs message and returns error
891	EncodePeer converts peer address to byte array
892	DecodePeer converts byte slice to raft ServerAddress.
893	AppendEntries appends an entry to the pipeline and returns a future with the result.
894	ReadPeersJSON reads a JSON file, parses it into a list of peers, maps them to a configuration structure, and validates the configuration before returning it.
895	ReadConfigJSON reads a JSON config file, parses it, maps it to a Configuration struct, and validates it before returning.
896	NewTCPTransport creates a TCP transport with specified parameters and returns a NetworkTransport instance.
897	NewTCPTransportWithLogger creates a TCP transport with logging using specified parameters.
898	NewTCPTransportWithConfig creates a TCP transport using given configuration and returns a network transport instance.
899	Dial connects to a TCP server using a given address and timeout, returning a network connection or an error.
900	Accept will return a network connection and an error if the listener fails
901	Addr retrieves the advertised address if available, otherwise returns the listener's address.
902	restoreSnapshot attempts to load snapshots in reverse chronological order, restoring the FSM, updating applied state, and configuring Raft based on the latest snapshot, returning an error if all fail
903	BootstrapCluster initiates a Raft cluster with a given configuration and returns a future result.
904	Leader returns the current server address of the Raft leader.
905	Apply command asynchronously with optional timeout, returns future result or error
906	Raft.Barrier sends a barrier log entry with optional timeout, returning a future that resolves when applied or times out/shuts down.
907	VerifyLeader increments metrics, creates a future, and sends a verification request or returns an error if raft is shutting down.
908	AddVoter adds a voter server to the Raft cluster with specified ID, address, previous index, and timeout, returning a future result or an error if the protocol version is unsupported.
909	RemoveServer sends a request to remove a server and returns a future result.
910	Raft.Shutdown will close the shutdown channel and set state to Shutdown if not already shut down, returning a future; otherwise, it returns a nil future.
911	Raft's Snapshot method initiates a snapshot operation and returns a SnapshotFuture object. If successful, it sends the future to userSnapshotCh; otherwise, it responds with ErrRaftShutdown.
912	Raft.Restore recovers state from a snapshot, handles timeouts and shutdowns, applies a no-op log entry to ensure replication.
913	Raft node details formatted as string
914	LastContact retrieves the last contact time for a Raft instance.
915	LoggerAdapter's Logf method logs a formatted string using its internal logger.
916	containsNode checks if a node exists in a list of raftNodes and returns true if found.
917	LeaderPlus selects up to n raft nodes, starting with the leader, and returns them.
918	`WaitTilUptoDate waits for all cluster nodes to reach a specific raft index, timing out after a maximum duration.`
919	assertLogEntryEqual compares log entries and logs errors if they don't match, returning true if all fields are equal.
920	runFSM manages Raft FSM by processing commit, restore, and snapshot requests, updating state and responding accordingly.
921	Clone creates a copy of a configuration object by copying the servers list.
922	Clone creates a copy of the configurations object, copying all fields including committed, committedIndex, latest, and latestIndex.
923	hasVote checks if a server with given ID has voting rights based on configuration.
924	checkConfiguration verifies server IDs and addresses in a config, counts voters, and returns an error if duplicates or no voters are found.
925	nextConfiguration updates a cluster configuration based on change requests, ensuring consistency and correctness.
926	encodePeers encodes voter servers using transport and returns the MsgPack byte buffer
927	decodePeers decodes a byte buffer into a configuration of server addresses and IDs
928	encodeConfiguration encodes a configuration object to MsgPack and returns the byte array, panicking if encoding fails.
929	decodeConfiguration decodes a byte buffer into a Configuration object and panics if decoding fails
930	goFunc runs a function concurrently while managing goroutine lifecycle.
931	getLastIndex will return the maximum of lastLogIndex and lastSnapshotIndex while holding lastLock
932	getLastEntry retrieves the last log entry index and term, or snapshot index and term if the log index is less than the snapshot index.
933	checkRPCHeader verifies RPC header compatibility based on protocol version.
934	setLeader updates Raft's leader and notifies observers if the change occurs.
935	requestConfigChange sends a config change request to Raft with a timeout, returning a future result or an error.
936	Raft run manages state transitions between follower, candidate, and leader roles, handling shutdown requests appropriately.
937	runFollower manages a Raft node in follower state, handles RPCs, config changes, applies commands, verifies data, restores user data, and transitions to candidate or shutdown states based on heartbeats and leadership checks.
938	liveBootstrap applies configuration changes to a Raft cluster and sets up initial state.
939	runCandidate handles voting and transitioning states based on election results and RPC messages.
940	runLeader starts Raft node as leader, sets up state, handles replication, dispatches no-op, and manages state cleanup on step-down.
941	startStopReplication starts/stops Raft replication goroutines based on current configuration and local state.
942	`configurationChangeChIfStable` checks if the latest config is committed and a noop entry is committed, returning the config change channel or `nil`.
943	Raft verifies leader status, tracks requests, triggers heartbeats.
944	checkLeaderLease calculates leader lease timeout based on followers' last contact times, logs warnings if unable to contact a quorum, and returns maximum contact duration.
945	restoreUserSnapshot handles restoring a user snapshot, validating version, checking for config changes, canceling inflight requests, creating a new snapshot, writing data, closing the snapshot, and applying it to the FSM, updating logs and snapshots accordingly.
946	appendConfigurationEntry updates Raft config based on future req, logs appropriate message, and dispatches logs accordingly
947	dispatchLogs commits logs locally, updates state, and notifies replicators
948	processLogs applies logs up to a specified index, skipping old ones and updating the last applied index.
949	processLog handles different log types, forwards commands to FSM, ignores no-ops, and responds to futures accordingly
950	processRPC handles different RPC commands and responds accordingly
951	processHeartbeat handles heartbeats, ignoring shutdown requests and responding to AppendEntries commands, otherwise logging errors
952	setLastContact updates the last contact time for Raft instance
953	persistVote saves vote term and candidate to stable storage, returning error if failed
954	setCurrentTerm updates Raft state with new term, persisting to disk first.
955	Raft setState updates leader, records old state, sets new state, and observes change if state updated.
956	getCommitIndex locks commitment, retrieves commitIndex, unlocks, and returns it
957	recalculate updates commitIndex if a quorum match index is greater than current commitIndex and within startIndex bounds, then notifies asynchronously.
958	randomTimeout generates a timeout channel after a random duration between 0 and minVal
959	generateUUID will create and return a UUID using cryptographically secure random bytes
960	decodeMsgPack will decode a MsgPack encoded byte buffer into a given Go data structure and return an error if decoding fails
961	encodeMsgPack serializes an interface to a MsgPack-encoded byte buffer and returns it along with any encoding errors
962	backoff calculates exponential backoff duration based on base, round, and limit
963	newApplySource creates a seed-based applySource instance with a hashed integer.
964	reset function reinitializes random number generator with current seed
965	DefaultConfig returns a pointer to a Config struct with default values for various configuration settings related to a system or application.
966	ValidateConfig will validate a configuration object and return an error if any setting is outside acceptable ranges
967	runSnapshots continuously triggers snapshots based on intervals or user requests, logging errors and returning metadata.
968	shouldSnapshot checks if the log index exceeds the snapshot threshold by comparing the difference between the last log index and the last snapshot index.
969	takeSnapshot will return a snapshot ID and an error if the process fails
970	Raft.compactLogs truncates logs between the first index and either the snapshot index or trailing logs count, ensuring at least trailing logs remain.
971	WebpackCheck verifies if local webpack.config.js matches template, updates if different or prompted.
972	New creates a generator with options, validates them, and sets up version control initialization based on provider.
973	UnixSocket creates a Listener for a Unix socket address, returning it along with any errors encountered during creation.
974	Get retrieves an ErrorHandler based on the status, returning a default handler if not found.
975	PanicHandler catches panics, logs them, and passes control to error handlers.
976	partialFeeder adjusts name case, prepends underscore, fixes extension, and retrieves template string
977	New will initialize an Engine with default template engines and content type options.
978	WriteTo method writes message to writer, returns bytes written and error
979	SMTPSender sends an email using provided message details and handles attachments and headers.
980	NewSMTPSender creates an SMTP sender with given host, port, user, and password, returning an error if the port is invalid.
981	Param retrieves a parameter value from the context based on the key.
982	Set updates the data map with the given key-value pair while holding the mutex lock.
983	defaultContext retrieves a value using a key, locks data during retrieval, and returns the value if present, otherwise delegating to the parent context.
984	Redirect handles HTTP redirects, persists session data, and optionally applies route-specific URL parameters.
985	File retrieves a file from a multipart form and returns it along with an error.
986	MarshalJSON converts DefaultContext data to JSON, skipping self-references.
987	New creates a new genny group with validated options and applies templates.
988	New creates an App instance with default configurations, loads plugins and environment variables, sets up middleware, and defines custom error handlers for 404 and 500 status codes.
989	DeprecrationsCheck reads a file, checks for deprecated usages, appends warnings, and updates files accordingly.
990	BaseResource List method returns an error indicating resource not implemented
991	Render function executes renderFunc method to write data to writer.
992	Save session data to storage and return error if failed
993	GetOnce retrieves a session value by name, removes it, and returns it; if not found, returns nil.
994	Set assigns a value to a session variable by name.
995	Clear session values by deleting each key.
996	getSession retrieves a session from the request or creates a new one if none exists
997	New creates a generator with options, validates them, and runs a file generation function.
998	New creates a generator with options, validates them, checks for npm, boxes templates, installs packages, and returns the generator.
999	New creates a generator with options, validates them, sets app name, and applies transformations.
1000	NewMessage creates a new message object with default settings and applies optional configurations, setting appropriate encodings based on the configuration.
1001	Reset clears message header, parts, attachments, and embedded fields.
1002	SetHeader updates message header field with given values by encoding them first.
1003	SetHeaders updates message headers using a map of key-value pairs.
1004	SetAddressHeader updates message header with formatted address.
1005	FormatAddress encodes name and appends address in angle brackets.
1006	SetDateHeader updates the message header with the specified field and formatted date.
1007	FormatDate converts a time object to RFC1123Z string format.
1008	SetBody sets message body with content type and body string using specified settings.
1009	SetPartEncoding sets the encoding for a part setting.
1010	SetHeader updates file headers based on a given map.
1011	SetCopyFunc assigns a copy function to a file setting.
1012	AttachReader adds a reader to a message with a name and optional settings, updating attachments accordingly.
1013	Attach file to message with optional settings
1014	EmbedReader adds a file from reader to message with optional settings.
1015	Embeds a file into a message using a filename and optional settings.
1016	ValidateTemplates runs validators on files walked by packd, collecting errors if any validation fails.
1017	PlushValidator checks file extension and parses content using plush, returning any errors encountered.
1018	Validate checks options, sets default app, ensures name is supplied, returns error if validation fails
1019	LoadPlugins loads available plugins, filters events, and runs them safely.
1020	Response.WriteHeader sets status and calls underlying WriteHeader
1021	Write byte slice to response writer and update size
1022	Flush will flush the response writer if it implements http.Flusher
1023	CloseNotify returns a channel signaling when the response connection is closed.
1024	Run will execute an app update, prompt for confirmation, run checks, collect warnings, and return an error if any check fails.
1025	onlyRelevantFiles filters files, skipping directories starting with "_" and specific folders, and applies a function to Go files
1026	GoTemplateEngine will render a Go template with given data and helpers, returning the rendered string and any errors encountered.
1027	add route for GET request
1028	Redirect sets up a GET route that redirects to another URL with a specified status code.
1029	ANY registers HTTP handlers for all methods on a given path
1030	buildRouteName processes a path string, constructs route names by singularizing parts, and handles special cases like "new" and "edit".
1031	New creates a new Group with options, validates them, initializes generator if needed, sets up transformers, and adds files for mailers and templates.
1032	NewDialer creates a Dialer instance with specified host, port, username, and password, setting SSL based on port and defaulting timeout and retry behavior.
1033	Dialer.Dial establishes a connection, optionally upgrades to TLS, authenticates, and returns a sender object.
1034	DialAndSend establishes a connection using Dialer, sends messages, and closes the connection on success or error.
1035	Flash.Set updates key's values in data map
1036	Flash.Add appends a value to a key in data map
1037	Flash.persist serializes data to JSON and stores it in session under flashKey
1038	newFlash creates a Flash instance from session data, unmarshalling JSON if available.
1039	Get cookie value by name, return value and error
1040	Set sets a cookie with the given name, value, and maximum age duration.
1041	SetWithExpirationTime sets a cookie with a specified expiration time
1042	Delete cookie by setting expiration time to past
1043	NewMessage creates a new message with default context, empty headers, empty data, and a mutex.
1044	NewFromData creates a new message from render data by copying key-value pairs and initializing a message object.
1045	New creates a message from context data and sets the context.
1046	CloseNotify returns a channel signaling when the EventSource is closed.
1047	NewEventSource creates an EventSource instance, sets necessary headers, and returns an error if streaming is unsupported.
1048	NewSimpleWithContext creates a new Simple instance with a logger and cancellable context.
1049	Register maps a handler to a name and returns an error if the name is already taken.
1050	Start will initiate a background worker logging start and setting up context with cancelation.
1051	Stop logs message and cancels worker, returning no error
1052	Perform job using handler if available, log errors
1053	PerformAt schedules a job to run at a specific time by calculating the duration until that time.
1054	PerformIn schedules a job after a duration or cancels it if the context is done.
1055	RouteInfo's String method converts it to a JSON-formatted string with indentation.
1056	RouteInfo's Alias appends given strings to Aliases and registers them as routes.
1057	RouteInfo Name updates path name and replaces route info if exists
1058	BuildPathHelper constructs a function to generate HTML URLs from route options.
1059	New generates a genny Generator based on options, applying transformations and templates for CI configurations.
1060	New creates a generator with validated options and runs a construction function.
1061	RegisterCustomDecoder registers a custom decoder for specified types and fields
1062	Replace middleware in stack with another middleware based on function key
1063	Routes method returns the route list from app's root or direct routes if root is nil
1064	WrapBuffaloHandler wraps a Buffalo handler and returns an HTTP handler.
1065	PackageJSONCheck compares and updates package.json based on the latest template if necessary.
1066	ImportConverter.match replaces matching prefix in import path with corresponding value and returns updated path along with a flag
1067	Send sends messages over a sender and returns an error if any message fails.
1068	Last checks if the last part of options equals a given name.
1069	Stop cancels the App and logs non-nil errors that aren't canceled contexts.
1070	DepEnsure updates dependencies based on app configuration.
1071	BuildInfo String method returns version and time as formatted string
1072	New generates a resource generator based on options, applying templates and transformations.
1073	AddBody appends rendered content to message bodies with specified renderer and data, returning error if rendering fails.
1074	AddBodies adds bodies to a message using specified renderers, returning an error if any fail.
1075	AddAttachment appends a new attachment to a message with specified details and reader, returning no error
1076	AddEmbedded appends an embedded attachment to a message with specified name and reader, returning no error.
1077	SetHeader updates the header field with the given value.
1078	New creates a new genny group with options, transformers, and templates, adding web, webpack, and standard generators based on provided options.
1079	New creates a generator with standard templates, modifies application.html, and returns it.
1080	New creates a generator with app details, config, and package checks, returning an error if validation fails.
1081	Cleanup will remove files and directories based on options and perform rollback operations.
1082	MDTemplateEngine renders Markdown input using data and helpers, returning HTML or plain text based on contentType.
1083	Update will modify a ConfigMap based on provided updates, handling file retrieval, compression, and applying changes to either Data or BinaryData fields, returning an error if any operation fails.
1084	FilterChanges filters PR changes to determine which configmaps to update, based on filenames and statuses.
1085	getLabelsFromREMatches extracts labels from regex matches, combines them with a prefix, and returns a list of lowercase labels.
1086	getLabelsFromGenericMatches extracts matching labels from generic matches and appends them to additional labels if they match specific criteria.
1087	Start method loads configuration files, monitors for changes, and reloads them as needed.
1088	Subscribe adds a channel to agent's subscriptions list.
1089	Agent's Config method returns its configuration while holding a read lock.
1090	Set updates config, locks agent, sends delta to subscriptions after delay.
1091	IsMember checks if a user belongs to an organization and returns a boolean result along with an error if the organization does not exist.
1092	ListIssueComments retrieves comments for a specific issue and returns them along with an error.
1093	ListPullRequestComments retrieves comments for a pull request and returns them along with any errors.
1094	ListReviews retrieves reviews from a fake client based on owner, repo, and number.
1095	ListIssueEvents retrieves issue events from a fake client and returns them.
1096	CreateComment appends a comment to fake issue comments and updates the issue's comment list with a new IssueComment object.
1097	CreateReview updates reviews map with new draft review and increments review ID
1098	CreateCommentReaction appends a comment reaction to FakeClient and returns nil
1099	CreateIssueReaction appends an issue reaction to FakeClient's log and returns nil
1100	DeleteComment removes a comment by ID and logs its deletion path.
1101	DeleteStaleComments deletes stale comments from a GitHub issue.
1102	GetPullRequest retrieves a pull request by owner, repo, and number, returning it if found or an error if not.
1103	GetPullRequestChanges retrieves pull request changes for a given repository and PR number.
1104	GetRef returns a test reference and no error for given owner, repo, and ref
1105	DeleteRef appends a reference deletion record and returns nil
1106	GetSingleCommit retrieves a commit by SHA from FakeClient's Commits map.
1107	CreateStatus updates or adds a status for a given SHA in FakeClient.
1108	ListStatuses retrieves statuses for a given reference from a fake client.
1109	GetCombinedStatus retrieves a combined status from a fake client based on owner, repo, and ref.
1110	GetRepoLabels fetches existing repository labels and returns them as a list.
1111	GetIssueLabels extracts labels from existing, added, and removed issue labels based on a regular expression matching the specified owner, repository, and issue number.
1112	AddLabel adds a label to an issue if not already added, checking existing labels and avoiding duplicates.
1113	RemoveLabel removes a label from an issue and tracks removed labels, returning an error if already removed.
1114	FindIssues retrieves issues based on query, sorts them by sort, and returns them.
1115	AssignIssue updates issue assigns and returns missing users
1116	GetFile retrieves file content from FakeClient based on organization, repository, file name, and commit reference. Returns file bytes or error if not found.
1117	ListTeams returns hardcoded team data for an organization.
1118	ListTeamMembers checks role, returns team members based on teamID.
1119	IsCollaborator checks if a user is a collaborator of a repository and returns a boolean result and an error if the operation fails
1120	ListCollaborators retrieves user logins from a fake client and returns them as GitHub users.
1121	ClearMilestone sets milestone to 0 and returns nil
1122	SetMilestone updates milestone number and returns error if negative
1123	ListMilestones retrieves milestones from a map and returns them as a list.
1124	ListPRCommits retrieves PR commits from a map using a composite key.
1125	GetRepoProjects retrieves projects for a given owner and repository from a FakeClient.
1126	GetOrgProjects retrieves projects for an organization from a fake client.
1127	GetProjectColumns retrieves columns for a given project ID from a fake client, returning an error if not found.
1128	CreateProjectCard adds a project card to a specified column and returns it if successful, or an error if the column doesn't exist.
1129	DeleteProjectCard removes a project card by ID, updates the associated column, and handles errors if the card or column does not exist.
1130	MoveProjectCard updates project card position and returns an error if operation fails
1131	CreateDatabaseClient creates an InfluxDB client using config details and returns it along with an error.
1132	Push data to InfluxDB measurement, tags, fields, and timestamp. Returns error if failed. Logs sent data details.
1133	NewProwJobWithAnnotation creates a ProwJob with specified spec, labels, and annotations.
1134	NewProwJob creates a ProwJob using the given spec and labels, returning a default ProwJob object.
1135	NewPresubmit creates a ProwJob for a pull request with specified labels and event GUID.
1136	PresubmitSpec constructs a ProwJobSpec from a Presubmit configuration and references, setting job type, context, reporting options, rerun command, Jenkins details, and completed primary refs.
1137	PostsubmitSpec constructs a ProwJobSpec based on JobBase, Refs, and JenkinsSpec configurations.
1138	PeriodicSpec converts a periodic job configuration to a ProwJobSpec.
1139	BatchSpec generates a ProwJobSpec based on a Presubmit configuration and references, setting the job type to Batch and completing primary refs.
1140	PartitionActive sorts ProwJobs into pending and triggered channels based on their state.
1141	ProwJobFields extracts and logs relevant fields from a ProwJob object.
1142	ClusterToCtx converts a cluster name to a context alias, defaulting to "default" if the input matches the in-cluster context.
1143	AddCommand adds a command to the pluginHelp's Commands slice.
1144	Get retrieves a ProwJob object by name and namespace, returning the object and any error encountered during the operation.
1145	FakeProwJobs invokes watch action with options and returns watch interface or error
1146	Delete ProwJob by name and return error
1147	Patch a ProwJob resource and return the updated object or an error
1148	MergeMethod retrieves merge type for given org/repo, defaults to MergeMerge if not specified
1149	`tq.Query` constructs a query string based on organization, repository, branch, label filters, and milestone criteria.
1150	TideQuery checks if a repository is included based on organization and repository name, considering exclusions.
1151	TideQueries.OrgExceptionsAndRepos calculates organization exceptions and repositories, returning a map of organizations to repository sets and a single set of all repositories.
1152	QueryMap constructs a new instance with queries and an empty cache map.
1153	ForRepo retrieves queries for a specific repository from a cache, updating it if necessary.
1154	Validate checks for overlapping contexts and returns an error if any are found.
1155	GetTideContextPolicy constructs a TideContextPolicy based on org, repo, branch, and config options, incorporating required, optional, and prow job contexts, and validating the result.
1156	IsOptional checks if a context is optional based on policy rules.
1157	MissingRequiredContexts identifies and returns contexts missing from the provided list based on required contexts.
1158	ValidateWebhook processes HTTP requests, validates headers, reads payloads, verifies signatures, and returns parsed data or errors.
1159	HelpProvider returns help information about the needs-rebase plugin and always returns nil error
1160	HandleEvent processes GitHub pull request events, checks mergeability, retrieves labels, and takes appropriate action based on conditions.
1161	HandleAll will process PRs, filter based on configuration, update mergeability status, and apply actions accordingly.
1162	NewDryRunProwJobClient creates a dry-run ProwJob client with a given URL.
1163	Create a ProwJob and return it along with an error, always returning nil.
1164	Update ProwJob client returns nil error
1165	UpdateStatus updates ProwJob status and returns updated ProwJob and error
1166	Delete job with name and options returns nil
1167	DeleteCollection method returns nil without performing any action
1168	Get retrieves a ProwJob by name and returns it along with an error.
1169	Dry-run Prow job client lists jobs using label selector and returns list or error
1170	Watch method returns a watch interface and an error, always returning nil for both.
1171	Patch will update a ProwJob resource and return the updated job and an error
1172	hasSynced checks if all informers have synced, waits for specific resources if not, and logs sync status
1173	Run starts a pipeline controller with workers, waits for caches to sync, and shuts down gracefully.
1174	runWorker continuously processes work items from a queue, invoking reconciliation and handling errors before requeuing or forgetting them.
1175	fromKey splits key into three parts and returns them along with an error if key format is incorrect
1176	enqueueKey adds a key to the workqueue based on the object type and namespace.
1177	finalState returns true if ProwJobState is not empty or Pending/Triggered, otherwise false
1178	description will return a condition message or reason if available, otherwise return a fallback string
1179	prowJobStatus will determine the ProwJob state based on PipelineRun status and return the state along with a description
1180	pipelineMeta constructs and returns metadata object for a ProwJob using job details.
1181	sourceURL extracts and returns the source URL from a ProwJob, defaulting to a constructed URL if not specified.
1182	makePipelineGitResource constructs a Git PipelineResource using ProwJob details
1183	makePipelineRun creates a PipelineRun object using ProwJob and PipelineResource details, appending build ID and resource binding parameters, and returns it along with any errors encountered.
1184	matchingConfigs filters plugin configurations based on organization, repository, branch, and labels.
1185	SuggestCodeChange evaluates lint problems using regex handlers, returning formatted suggestions if applicable.
1186	ServeExternalPluginHelp registers a handler for external plugin help requests, logs errors, reads JSON input, invokes a provider, and returns JSON output or errors.
1187	protect updates branch protection for organizations and repositories, skipping protected tested ones and handling errors accordingly.
1188	UpdateOrg updates organization repositories based on protection settings and repository configurations.
1189	UpdateRepo updates repository status, checks archival, retrieves branches, and updates branch protection settings.
1190	UpdateBranch updates branch protection based on policy and logs if already unprotected.
1191	LoadConfig unmarshals a JSON config string into Options object and returns an error if parsing fails.
1192	Run starts Kubernetes client, ProwJob client, artifact uploader controller, waits indefinitely.
1193	Start starts monitoring and updating secrets from specified paths using goroutines.
1194	reloadSecret monitors a secret file, reloading it if changes are detected every second up to 600 attempts.
1195	GetSecret retrieves a secret byte array from Agent's secretsMap using the specified path while holding a read lock.
1196	setSecret updates the agent's secrets map with a new secret path and value
1197	GetTokenGenerator creates a closure that retrieves a secret byte slice using a given path.
1198	New creates a History instance, loads existing logs from GCS if specified, and returns an error if loading fails.
1199	History.Record logs an event with details including time, action, SHA, targets, and error.
1200	ServeHTTP encodes history records as JSON and writes the response, logging errors if encoding or writing fails.
1201	Flush will write all records to GCS and log duration and pool count on success or error
1202	AllRecords locks history, converts logs to slices, and returns a map of strings to record slices.
1203	MakeCommand creates a Cobra command for downloading a coverage profile file from the latest healthy build in GCS, setting up flags for output, artifacts directory, and profile name.
1204	CheckFlags compiles regex patterns from plugin's config and stores them for matching comments, returning error if any compilation fails
1205	ReceiveComment processes a comment, applying matchers and returning points if a match is found.
1206	NewController initializes and returns a Controller instance with provided dependencies.
1207	Controller.Run starts an informer, handles events, syncs cache, runs workers, and shuts down gracefully.
1208	runWorker starts a worker, increments wait group, processes items until none left, then decrements wait group
1209	New creates a LocalGit instance, sets up a temporary directory, initializes a git client, configures credentials, and returns the instances along with an error if any step fails.
1210	MakeFakeRepo creates a fake Git repository with specified organization and repository name, initializing it with default configurations and an initial commit.
1211	AddCommit adds files to a git repository and commits them with a message.
1212	CheckoutNewBranch clones a new branch in a local Git repository.
1213	Checkout updates repository to specified commit-like reference.
1214	RevParse retrieves a Git commit hash based on a given reference, executing a command in the repository directory.
1215	CleanAll cleans up resources by listing and sweeping regional and global types.
1216	optionsForRepo searches config for matching repo and returns corresponding Lgtm settings or empty if not found
1217	getChangedFiles retrieves changed files from a pull request and returns their filenames or an error
1218	loadReviewers combines approvers and reviewers from specified files into a single set
1219	NewController creates a Controller instance, reads lastSyncFallback timestamp, initializes client, and sets up configuration.
1220	SaveLastSync updates the last sync timestamp, writing to a temporary file before renaming it.
1221	Sync updates last update time and saves it after processing changes.
1222	AddFlags adds event flag to command.
1223	EventCounterPlugin initializes matcher with event description and returns error.
1224	ReceiveIssueEvent filters events based on labels and returns a point if the event matches criteria.
1225	Upload handles multiple files to a storage bucket, logging progress and collecting errors.
1226	FileUploadWithMetadata uploads file with metadata and handles errors
1227	DataUploadWithMetadata uploads data with metadata to storage, returning an error if either copying or closing fails.
1228	HasLabel checks if a label exists in a list of labels ignoring case sensitivity
1229	ImageTooBig checks if an image URL exceeds 10MB limit and returns true if it does, along with an error if HEAD request fails or status is not OK.
1230	LevelFromPermissions maps repository permissions to corresponding levels.
1231	PermissionsFromLevel converts a permission level to corresponding repository permissions.
1232	newProwJobs creates a prowJobs instance with the given client and namespace
1233	GetApplicable retrieves blockers for a given organization, repository, and branch, sorts them by number, and returns the result.
1234	serve sets up HTTP routes and starts a server
1235	NewCountPlugin creates a Cobra command to count events, issues, and durations, applying various plugins for filtering and logging.
1236	ReceiveComment appends a fake "commented" event to comments received by the plugin.
1237	updateMetrics updates disk metrics every interval, logging errors and updating Prometheus metrics with free, used, and total disk space in gigabytes.
1238	LogStatus fetches resources, marshals them to JSON, and logs the current resource status.
1239	SyncConfig parses config, syncs resources, and returns error if failed
1240	Metric calculates resource counts based on type and returns a Metric object with current state and owner counts, or an error if no matching resources are found.
1241	FormatURL will return a formatted URL string and an error if the input URL is empty or invalid
1242	runAndSkipJobs will execute requested jobs and optionally skip others based on overlap, returning combined errors
1243	validateContextOverlap checks for overlapping contexts in presubmit jobs and returns an error if any are found
1244	RunRequested starts builds for requested jobs, logs progress, and aggregates errors if any job creation fails.
1245	skipRequested updates PR status for skipped jobs, logs skipping info, and aggregates errors
1246	LabelEvent Match checks if event name is labeled and label matches.
1247	Match checks if eventName is "unlabeled" and label equals UnlabelEvent's Label.
1248	AddFlags adds GitHub options to flag set
1249	AddFlagsWithoutDefaultGitHubTokenPath adds flags without default GitHub token path to FlagSet.
1250	Validate GitHub options, set default endpoints, update token path, log deprecation warning, ensure non-empty token path, return error if invalid URI.
1251	GitHubClientWithLogFields creates a GitHub client with optional logging fields and token generation based on secret agent or path.
1252	GitHubClient creates a GitHub client using secretAgent and dryRun flag, returning the client and any error.
1253	GitClient creates a new Git client, sets credentials using bot name and token, and cleans up on error.
1254	toMap converts CoverageList to a map using Group elements' Name as keys
1255	findChanges identifies significant ratio changes between two coverage lists and returns a list of affected files.
1256	CreateDatabase establishes a MySQL connection, creates a database if it doesn't exist, closes the connection, and migrates specified structs to the database.
1257	ShouldReport checks if a ProwJob should be reported based on its configuration and client settings.
1258	Report processes a ProwJob and returns a list containing the same job along with reporting details based on configuration.
1259	MarkComplete deletes unmarked items from Set, logs deletions, and returns count of swept resources.
1260	NewJobAgent creates a JobAgent instance with Kubernetes client, PodLog clients, and configuration.
1261	JobAgent starts, updates itself, and periodically tries to update every period duration.
1262	Jobs returns a copy of the JobAgent's jobs slice
1263	ProwJobs locks job agent, copies prow jobs, unlocks, and returns copy
1264	GetProwJob retrieves a ProwJob by job and ID, locking access to shared jobsIDMap.
1265	GetJobLog fetches logs for a specified job and ID, returning the log data and an error if unsuccessful.
1266	unionStrings combines two string slices into one, removing duplicates.
1267	Apply combines two policies by selecting bools, merging contexts, restricting admins, and merging reviews.
1268	GetOrg retrieves an organization policy based on name, applying branch protection rules.
1269	GetRepo retrieves a repository by name, applying the organization's policy if it exists.
1270	GetBranch retrieves a branch by name, applies policy, and ensures protection is set; returns branch pointer or error.
1271	GetPolicy retrieves a policy based on organization, repository, branch, and branch requirements, applying Prow job protections and ensuring consistent protection settings.
1272	UpdateIssueEvents fetches and saves issue events using a database connection and a client interface.
1273	enqueueKey adds objects of specific types to a work queue after converting them to keys
1274	prowJobStatus evaluates build status and returns ProwJobState and description based on conditions.
1275	buildEnv generates environment variables for a ProwJob based on its spec and build ID.
1276	defaultArguments adds missing arguments from rawEnv to t.Arguments based on t.Arguments' names.
1277	defaultEnv updates container environment vars with additional raw env vars
1278	injectSource updates build spec with source and volumes, sets working dir, and returns success status
1279	injectedSteps injects sidecar, initupload, and placer containers, mounts volumes, and returns them along with errors
1280	determineTimeout selects a timeout duration based on BuildSpec, DecorationConfig, or a default value.
1281	makeBuild constructs a build object from ProwJob details, injecting environment, source, and timeout configurations, returning the build and any encountered errors.
1282	newLabels converts GitHub labels to SQL labels, handling case sensitivity and validating names.
1283	newAssignees converts GitHub users to SQL Assignees, normalizes repository name, and handles missing login fields
1284	NewIssueComment creates a sql.Comment from github.IssueComment, validating mandatory fields and converting types accordingly.
1285	messageFilter filters messages based on last update and triggers, returning aggregated filters
1286	IsSuccess checks if build result is equal to success.
1287	IsFailure checks if build result is either failure or unstable
1288	IsAborted checks if build result is aborted
1289	ProwJobID extracts the value of a parameter named "prowJobID" from the build actions, returning it as a string or empty if not found or incorrect type.
1290	BuildID extracts the build ID from parameters, returning an empty string if not found.
1291	CrumbRequest fetches CSRF token and field from Jenkins API and updates client config.
1292	measure tracks request latency and counts requests for a client using Prometheus metrics.
1293	GetSkipMetrics sends a GET request to the specified path and returns the response body as bytes, handling errors appropriately.
1294	Client.Get sends a GET request to specified path and returns response body or error.
1295	request sends HTTP requests with retries and measures performance
1296	doRequest sends HTTP request with authentication headers based on config
1297	getJobName returns a job name based on JenkinsSpec and Refs in ProwJobSpec
1298	getBuildPath constructs a Jenkins build path using the job name from the ProwJobSpec
1299	GetJobInfo fetches job information from the API, logs the request path and response, and returns the parsed JobInfo object or an error.
1300	JobParameterized checks if any property has parameter definitions and returns true if found.
1301	EnsureBuildableJob waits for a job to appear, checks if it's parameterized or has builds, launches a build if necessary, and waits for it to become parameterized before aborting if needed.
1302	LaunchBuild sends a POST request to build a job with optional parameters, logs the path, checks response status, and returns an error if unsuccessful.
1303	Build function logs ProwJob details and invokes BuildFromSpec with ProwJob spec, build ID, and name.
1304	BuildFromSpec constructs a job using a spec, environment variables, and parameters, ensuring the job can be built before launching it.
1305	GetEnqueuedBuilds fetches queued Jenkins builds matching specified jobs and returns them with enqueued status.
1306	Abort sends a stop request for a specified job and build, returning an error if unsuccessful.
1307	PresubmitToJobSpec converts a presubmit configuration to a job specification with type PresubmitJob.
1308	PostsubmitToJobSpec converts a postconfig to a JobSpec with specified type and job name.
1309	PeriodicToJobSpec converts a periodic config to a job spec with specified type and name.
1310	GetBuildID fetches a build ID from a URL, retrying up to 10 times with exponential backoff if unsuccessful.
1311	listGcsObjects retrieves GCS objects with specified prefix and delimiter, returning a list of object names and an error if iteration fails.
1312	FindBaseProfile retrieves a coverage profile from GCS for a successful build related to a specified Prow job.
1313	sortBuilds converts strings to integers, filters errors, sorts them in descending order, and returns the sorted indices.
1314	GetAll retrieves all AWS regions using the provided session and returns them as a list of strings.
1315	NewEventClient creates a new EventClient instance with organization, repository, issue number, GitHub client, and logger.
1316	PruneComments filters and deletes issue comments based on a predicate, considering bot comments if available.
1317	FormatResponse constructs a formatted response string incorporating recipient, message, reason, and bot information.
1318	FormatSimpleResponse constructs a simple response string using a template, including a mention to a user, a message, and additional bot information.
1319	FormatICResponse reformats an issue comment response using raw formatting functions.
1320	FormatResponseRaw formats a raw HTTP response by quoting the user's comment and including the URL.
1321	Validate will check GCS path settings and ensure necessary credentials are provided before validating GCS configuration.
1322	Encode converts options to JSON string and returns it along with error.
1323	RegisterIssueHandler associates an issue handler with a name and provides help information.
1324	RegisterIssueCommentHandler associates a comment handler and help provider with a given name.
1325	RegisterPullRequestHandler associates a name with a pull request handler and help provider.
1326	RegisterStatusEventHandler associates a status event handler and help provider with a given name.
1327	RegisterPushEventHandler associates a name with a push event handler and help provider.
1328	RegisterReviewEventHandler associates a review event handler and help provider with a given name.
1329	RegisterReviewCommentEventHandler associates a review comment event handler with a name and provides help documentation.
1330	RegisterGenericCommentHandler associates a comment handler with a name and stores help information.
1331	NewAgent constructs an Agent instance with various clients and configurations.
1332	InitializeCommentPruner sets up a comment pruner client for an agent using GitHubClient and logs it.
1333	CommentPruner retrieves comment pruner client or returns error if not initialized
1334	Load reads a configuration file, parses it, validates it, and sets it in ConfigAgent.
1335	ConfigAgent's Config method locks access, retrieves configuration, and unlocks.
1336	Set updates the configuration in ConfigAgent using a mutex lock.
1337	Start loads a configuration file and periodically reloads it every minute, logging errors if reloading fails.
1338	GenericCommentHandlers retrieves comment handlers for given owner and repo.
1339	IssueHandlers retrieves issue handlers for a given owner and repo.
1340	IssueCommentHandlers retrieves issue comment handlers for a given owner and repo, locking access to shared data.
1341	PullRequestHandlers retrieves PR handlers for a given owner and repo.
1342	ReviewEventHandlers returns a map of review event handlers for given owner and repo
1343	ReviewCommentEventHandlers retrieves and locks plugins' review comment event handlers for a given owner and repository.
1344	pa.StatusEventHandlers retrieves status event handlers for given owner and repo.
1345	PushEventHandlers returns a map of push event handlers for given owner and repo.
1346	EventsForPlugin returns a list of plugin events based on handler availability
1347	insertLink updates the view URL in nested metadata and returns if changed and an error
1348	HelpProvider generates help documentation for the cherrypick plugin, detailing its usage, description, and examples.
1349	getPatch retrieves a PR patch, saves it locally, and returns the path
1350	releaseNoteFromParentPR extracts and formats a release note from a PR body
1351	ValidatePayload checks if a payload's signature matches using HMAC-SHA1.
1352	PayloadSignature computes HMAC-SHA1 signature of payload using key and returns it as a string.
1353	updateString updates have to want if they differ and returns true, otherwise returns false
1354	updateBool updates a boolean pointer with another if they differ, returning true if updated
1355	configureOrgMeta updates organization metadata based on desired changes and saves if any modifications are made.
1356	configureTeamRepos adjusts repository permissions for a GitHub team based on desired configurations, returning errors if updates fail.
1357	ShouldReport checks if ProwJob has non-empty PubSub project and topic labels.
1358	Run uploads targets to GCS or logs them if DryRun is enabled.
1359	DefaultFieldsFormatter merges default fields with log entry fields and formats them using wrapped formatter.
1360	FindLabels filters issue labels using a regex pattern and returns matching labels.
1361	AddFlags adds flags to flagset for Options Log field
1362	NewAgent creates a new Agent instance with GitHub OAuth config and logger.
1363	HandleLogin generates a state token, creates an OAuth session, saves it, and redirects user for authentication.
1364	HandleLogout clears user sessions and redirects after logout.
1365	serverError logs an error and sends a 500 response with the action and error details
1366	FromItem converts an item to resources config and updates the object.
1367	GetItems retrieves all items from the collection and returns them as a list.
1368	SetItems updates Items field by converting objects to ResourcesConfigObject pointers.
1369	UnmarshalText sets RepoPermissionLevel based on input text or returns error if invalid.
1370	IsAssignee checks if a given login matches any assignee's login in the issue.
1371	IsAuthor checks if the issue's user login matches the given login after normalization.
1372	HasLabel checks if an issue has a specific label ignoring case sensitivity
1373	Branch extracts and returns the branch or tag name from a reference string.
1374	truncate shortens strings longer than maxLen by removing characters equally from both sides and appending elide
1375	reportStatus updates GitHub status based on Prow job details, handling PRs and truncating descriptions and contexts
1376	parseIssueComments filters issue comments, deletes old ones, and creates new entries based on job status.
1377	createComment generates a comment based on a template, ProwJob, and test entries, returning the comment string and an error if any occur
1378	Lens Config returns configuration details including name, title, and priority.
1379	Callback handles artifacts and returns a string
1380	FormatRecord constructs a formatted string representation of a record, including failed status, cloning details, pull requests, and commands executed.
1381	Namespace sets the client's namespace and returns the modified client instance.
1382	NewFakeClient creates a new fake client with default namespace, provided URL, and sets fake flag to true
1383	NewClientInCluster reads token and CA cert files, configures TLS transport, and creates a Kubernetes client.
1384	NewClientFromFile reads cluster config from file, unmarshals YAML, and creates a client.
1385	NewClient creates a Client instance using TLS configuration and logs errors.
1386	ReplaceConfigMap updates a ConfigMap and returns the updated version along with any errors.
1387	GetDiskUsage calculates disk usage statistics including free and used space percentages and byte counts for a given path.
1388	GetATime retrieves access time for a file, returning default time if unsuccessful.
1389	RegisterLens registers a lens with unique name, validates title and priority, and logs registration. Returns error if lens is already registered or validation fails.
1390	GetLens retrieves a Lens by name, returning an error if the name is invalid.
1391	LastNLines retrieves the last n lines of an artifact using chunked processing with a buffer size of 300n+1 bytes.
1392	NewClient creates a client with a logger and token generator function.
1393	WriteMessage logs, checks fake mode, constructs URL params, sends message, returns error
1394	MarkAndSweep deletes NAT gateways in a given account and region based on a set condition.
1395	ListAll retrieves all NAT gateways for an account and region, returning a set and an error.
1396	NewClient creates a new Client instance with specified owner and URL, configures its network settings, and returns a pointer to it.
1397	Acquire resource, lock client, add to storage if acquired, release lock
1398	AcquireWait attempts to acquire a resource, retrying up to 3 seconds if already in use or not found, until successful or context canceled.
1399	AcquireByState fetches resources by state, locks client, adds them to storage, and returns resources.
1400	ReleaseAll deletes all resources from storage and releases them to a destination, accumulating errors if any occur.
1401	ReleaseOne will delete a resource by name and release it to a destination, returning an error if the resource does not exist or release fails
1402	UpdateAll updates all resources with a given state, accumulating errors if any update fails.
1403	SyncAll locks client, lists resources, converts items to resources, updates them, and aggregates errors.
1404	UpdateOne updates a resource's state and user data, locking access during operation.
1405	Metric retrieves a metric by type from the client and returns it along with any error encountered.
1406	HasResource checks if client has any resources and returns a boolean.
1407	DialContext attempts a connection with retries based on configured settings, returning the successful connection or an error if all retries fail.
1408	NewDashboardAgent creates a DashboardAgent instance with repositories, GitHub OAuth configuration, and logger.
1409	DashboardAgent queries GitHub PRs, aggregates results, logs costs, and returns them.
1410	GetHeadContexts fetches PR head contexts using GitHub client, returning them along with any errors encountered.
1411	ConstructSearchQuery builds a search query for a dashboard agent using a login string and appends repository filters.
1412	NewBundledStates creates a new instance of BundledStates with a given description and an empty states map.
1413	ReceiveEvent updates state for given ID and returns if state has changed.
1414	ages calculates the age of active states in a bundle at a given time and returns a map of IDs to durations.
1415	BundledStates calculates the duration at a given percentile based on ages, returning an error if the percentile is out of bounds or index is invalid.
1416	NewMetrics creates a Metrics instance with initialized ClientMetrics and ResyncPeriod fields.
1417	NewDiskCache creates a new HTTP round tripper with caching enabled using disk storage.
1418	NewMemCache creates a new memory cache round tripper using the given delegate and concurrency limit.
1419	NewFromCache creates a caching transport with throttled concurrency, returning a request coalescer.
1420	ProwV1 method returns a fake ProwV1 interface implementation.
1421	Prow method returns a fake ProwV1 interface for testing purposes.
1422	NewOwners creates an Owners instance with given log, filenames, repository, and seed.
1423	GetApprovers will return a mapping of owners to their approvers based on the repository data.
1424	GetAllPotentialApprovers returns a sorted list of unique potential approvers from leaf nodes, logging a debug message if none are found.
1425	GetReverseMap creates a reverse mapping from approvers to owners files.
1426	Owners.temporaryUnapprovedFiles filters unapproved files based on approvers.
1427	KeepCoveringApprovers filters potential approvers based on temporary unapproved files and returns relevant ones.
1428	GetSuggestedApprovers selects approvers based on file coverage until all files are approved or no more suitable approvers are found.
1429	GetOwnersSet collects unique approver owners for files and removes subdirectory duplicates.
1430	GetShuffledApprovers will return shuffled list of potential approvers based on seed
1431	Approval's String method returns a formatted HTML link string.
1432	IntersectSetsCase returns the intersection of two sets, ignoring case sensitivity.
1433	NewApprovers creates an instance of Approvers initialized with given owners and default values for other fields.
1434	AddLGTMer updates approvers map with LGTM approval details if allowed.
1435	RemoveApprover deletes an approver by login name from Approvers.
1436	AddAssignees inserts lowercase user logins into the assignees set.
1437	GetCurrentApproversSetCased will return a set of current approvers' logins in upper case
1438	GetFilesApprovers will return a map of files to their respective approvers, intersecting current and potential approvers while preserving case sensitivity.
1439	NoIssueApprovers filters approvers who can't issue and have owners, returning their logins and details.
1440	UnapprovedFiles identifies files with no approvers and returns them as a set.
1441	GetFiles retrieves files based on approvers and constructs a list of approved or unapproved files.
1442	IsApproved checks if requirements are met or manually approved.
1443	ListApprovals will return a list of approvals based on the current approvers set.
1444	ListNoIssueApprovals retrieves all approvals from a set of no-issue approvers.
1445	GenerateTemplate compiles and executes a Go template with given data, returning the rendered string or an error.
1446	writeTemplate will generate a template based on the input path and render it with provided data to the specified output path, returning an error if any step fails
1447	Configuration.Labels combines default and repo labels, deduplicates by name, sorts, and returns them.
1448	LabelsForTarget filters labels by target and sorts them alphabetically by name.
1449	LoadConfig reads a config file and returns a Configuration object along with an error if any issues occur during reading or validation.
1450	loadLabels fetches labels for multiple repositories concurrently, returning a map of repositories to their labels and an error if any fail.
1451	kill logs repo and label info and returns an update with reason "dead" and current label
1452	create logs repository and label information and returns an update object
1453	classifyLabels categorizes labels based on their properties and updates maps accordingly.
1454	linkify replaces spaces with dashes, removes commas and slashes, and converts text to lowercase
1455	NewCache creates a Cache instance with diskRoot trimmed of trailing path separators.
1456	Cache.KeyToPath constructs a file path by joining disk root with a given key.
1457	ensureDir creates directory if it doesn't exist
1458	Put method stores content in cache, verifies SHA256 hash if provided, and handles temporary files safely.
1459	Cache.Get opens a file for a given key and invokes the readHandler with existence status and file object or error.
1460	Delete removes a file using the cache's key-to-path mapping and returns an error if unsuccessful.
1461	NewGCSArtifact creates a GCSArtifact instance with given parameters.
1462	GCSArtifact's Size method retrieves and returns the size of the artifact, handling errors appropriately.
1463	ReadAll reads a GCS artifact up to the size limit, returning its content and any errors encountered.
1464	ReadTail reads the last n bytes of a GCSArtifact, decompressing if necessary and handling errors appropriately.
1465	gzipped checks GCS artifact attributes and returns true if content encoding is gzip.
1466	optionsForRepo searches for repository configuration by full name and organization, returning the first matching config or an empty default if none found
1467	List retrieves ProwJobs based on a label selector using an indexer.
1468	ProwJobs creates a lister for prow jobs in a specific namespace.
1469	prowJobNamespaceLister will list ProwJobs based on a label selector and return them along with an error if any occurs
1470	RunsAgainstAllBranch checks if there are no branches to skip and no branches to run against, returning true if both conditions are met.
1471	Intersects checks if two Branchers have intersecting branches, returning true if they do.
1472	ShouldRun evaluates whether a change matcher should run based on file changes, returning determination, execution flag, and any errors encountered.
1473	RegexpChangeMatcher checks if any change matches its regex pattern.
1474	CouldRun checks if a post-submit job should run based on the branch reference.
1475	Postsubmit determines if it should run based on baseRef and changes, deferring to RegexpChangeMatcher if possible, or defaults to running always.
1476	CouldRun checks if presubmit should run based on branch rules.
1477	ShouldRun determines if presubmit checks should run based on base ref, changes, and flags
1478	GetPresubmit retrieves a presubmit job configuration by name for a given repository.
1479	SetPresubmits updates Presubmits in JobConfig with copied slices and sets regexes, returning an error if failed.
1480	SetPostsubmits updates job configurations with post-submission hooks, copying and validating them.
1481	AllPresubmits filters presubmits based on repository list.
1482	AllPostsubmits filters postsubmits based on repositories.
1483	AllPeriodics collects all periodic jobs from a JobConfig and returns them.
1484	ClearCompiledRegexes sets all regex fields in Presubmit objects to nil.
1485	Empty checks if all fields in SimpleConfig are empty
1486	NewClient initializes a new Client instance with git, github clients, and various callback functions.
1487	ExpandAlias normalizes an alias using GitHub's normalization function and retrieves the corresponding set of aliases from the repository, returning nil if the repository is nil.
1488	ExpandAliases expands aliases in a set of logins and returns the updated set.
1489	ParseFullConfig will unmarshal YAML byte data into a FullConfig object and return it along with any errors encountered.
1490	ParseSimpleConfig will unmarshal YAML data into a SimpleConfig struct and return the result along with any errors encountered.
1491	decodeOwnersMdConfig reads a YAML config from a file and unmarshals it into a SimpleConfig object, returning an error if unsuccessful.
1492	findOwnersForFile will return the closest directory owner based on regex matching or empty string if not found
1493	FindApproverOwnersForFile retrieves approvers for a given file path using logger and approvers list.
1494	FindReviewersOwnersForFile retrieves reviewers for a file using repository owners and logs.
1495	FindLabelsForFile retrieves labels for a given file path from RepoOwners entries.
1496	IsNoParentOwners checks if a given path has no parent owners in the repository options.
1497	Coverage.Ratio calculates the coverage percentage as the ratio of covered statements to total statements, returning 1 if no statements exist.
1498	FromPayload unmarshals JSON data into PeriodicProwJobEvent and returns an error if unsuccessful
1499	ToMessage serializes PeriodicProwJobEvent to JSON and wraps it in a pubsub message with attributes.
1500	UnmarshalText sets Privacy value from byte slice, validating against settings.
1501	compileApplicableBlockades filters and compiles blockades applicable to a given organization and repository, logging errors for failed regex compilations.
1502	calculateBlocks aggregates pull request changes based on blockades, categorizing them by explanation.
1503	MergeMultipleProfiles combines multiple cover profiles into one, returning the merged profile and an error if any occur.
1504	AddFlags adds command-line flags to a FlagSet for configuring options.
1505	processNextItem processes the next item in the queue, retrieves a Prow job, fetches logs, uploads them to GCS, and handles errors accordingly.
1506	handleErr handles errors for log uploads, retrying up to five times before giving up.
1507	AggregateFilter combines multiple filters into a single filter function that runs them sequentially and returns the results.
1508	FilterPresubmits filters presubmits based on conditions and returns two lists: those to trigger and those to skip.
1509	MakeCommand creates a Cobra command for filtering Go coverage files with options for output, include, and exclude paths.
1510	Push adds an IssueEvent to the EventTimeHeap.
1511	Pop removes the last element from EventTimeHeap and returns it.
1512	NewFakeOpenPluginWrapper creates a wrapper for a plugin, initializing it with an empty map to track open states.
1513	ReceiveIssue processes an issue, adds fake "opened" events if necessary, and forwards the issue to the plugin.
1514	Validate checks Options for required fields and duplicate refs, returning an error if any conditions fail.
1515	Complete populates GitRefs and KeyFiles with aliases and clone URIs.
1516	Set assigns a template to the orgRepoFormat instance based on the input string.
1517	ensure checks if a binary exists, returning an error if not, suggesting installation instructions.
1518	output will execute a command with arguments and return the trimmed output along with any errors
1519	projects will return a list of project IDs and an error if the operation fails
1520	selectProject selects a GCP project based on user input or defaults to the current project, verifying access.
1521	createCluster creates a GCP cluster, prompts for name if empty, retrieves details, and returns a cluster object.
1522	createContext selects a GKE cluster based on user preferences or creates a new one, returning the cluster context and an error if unsuccessful.
1523	contextConfig checks kubectl availability, loads client config, and returns loader, config, and error
1524	selectContext selects a Kubernetes context based on user input or creates a new one, returning the chosen context and an error if invalid.
1525	applyCreate executes a kubectl create command with dry-run and outputs YAML, then applies the result to a context, returning errors if any step fails.
1526	determineSkippedPresubmits filters jobs to skip based on triggered contexts, logging skipped jobs.
1527	Dispatch processes plugins receiving issues and events, pushing data to InfluxDB.
1528	CreateIssue creates a GitHub issue with optional labels and assignees, returns the created issue or an error.
1529	CreateStatus updates repository status if not in dry-run mode.
1530	`ForEachPR` iterates over PRs, applying a transformation function and handling errors based on options.
1531	GetCollaborators fetches users collaborating on a GitHub repository, returning a list of User objects and an error if retrieval fails.
1532	GetCombinedStatus fetches a combined GitHub repository status and aggregates statuses into a single response.
1533	GetIssues fetches issues from GitHub repository and returns them along with pagination details.
1534	GetRepoLabels fetches repository labels from GitHub, returning them and an error if unsuccessful.
1535	GetUser fetches user details from GitHub using retry mechanism and returns the user object or an error.
1536	checkConfigValidity verifies configuration flags and activates GCP service account, returning an error if any validation fails.
1537	createSystemdLogfile generates a journalctl command based on service, output mode, and directory, runs it, and saves the output to a log file.
1538	createFullSystemdLogfile will execute journalctl command, save output to a file in specified directory and return an error if execution fails
1539	createSystemdLogfiles generates log files for systemd services and specific VM setups, logging errors if creation fails.
1540	prepareLogfiles gathers relevant log files based on cloud provider and configuration, collects systemd or supervisord logs, and copies them to a specified directory.
1541	writeSuccessMarkerFile creates a marker file on GCS with public read access
1542	MakeCommand creates a Cobra command for summarizing coverage profiles and producing JUnit XML results.
1543	warnDeprecated will log a warning message if the specified frequency has elapsed since the last warning.
1544	Describe method constructs a descriptive string based on the requirements, including missing labels, comments, issues, PRs, branches, repositories, and a regular expression.
1545	TriggerFor searches configuration for matching trigger based on organization and repository, returning the trigger if found or an empty trigger otherwise.
1546	EnabledReposForPlugin filters repositories based on plugin name, categorizing them into organizations and specific repositories.
1547	EnabledReposForExternalPlugin filters repositories based on external plugins and categorizes them into organizations and repositories.
1548	SetDefaults configures default mappings for ConfigUpdater if they are empty, logs deprecation warnings, and updates namespaces accordingly.
1549	validatePlugins will check plugin configurations and return an error if unknown plugins or duplicates are found
1550	ShouldReport checks if a ProwJob should be reported based on its state and annotations.
1551	Run clones refs, executes commands, logs results, and updates record accordingly
1552	PathForRefs constructs a repository path using a base directory and reference details.
1553	gitCtxForRefs constructs a gitCtx object using refs, baseDir, and env variables, setting repositoryURI based on CloneURI if provided.
1554	gitCtx generates commands to initialize, configure, fetch, and checkout a Git repository based on provided references and user credentials.
1555	gitTimestampEnvs will return environment variables with the given timestamp for author and committer date
1556	gitRevParse retrieves the latest commit hash from git and trims whitespace, returning it along with any errors encountered.
1557	gitCtx generates commands for pulling refs, including fetch and merge operations, and optionally initializes submodules.
1558	ProduceCovList aggregates coverage profiles into a summary list
1559	popRandom removes and returns a random element from a string set
1560	resolve configures Kubernetes clients based on options and returns an error if configuration fails
1561	ProwJobClientset retrieves a prow job clientset based on namespace and dry-run mode, resolving options and returning an error if necessary.
1562	ProwJobClient creates a client for managing Prow jobs based on options and namespace, returning an interface and error.
1563	InfrastructureClusterClient resolves options and returns Kubernetes client or error.
1564	BuildClusterClients constructs cluster clients for a given namespace and returns them, handling dry-run scenarios.
1565	Age calculates time duration since active state started.
1566	ReceiveEvent updates state based on event, returning new state and flag.
1567	ReceiveEvent evaluates an event and transitions to ActiveState if matching, otherwise remains InactiveState.
1568	Active checks if all states in MultiState are active.
1569	Age calculates the minimum age among states at a given time.
1570	ReceiveEvent processes events for each state, updates them, and returns the updated MultiState and a flag indicating if any state changed.
1571	ProwJobs method returns a ProwJobInformer instance initialized with factory, namespace, and tweakListOptions from version struct.
1572	ItemToResourcesConfig converts an Item to ResourcesConfig, returning the converted config or an error if conversion fails.
1573	Copy creates a shallow copy of a TypeToResources object.
1574	MakeCommand creates a Cobra command for aggregating Go coverage files.
1575	incrementNumPendingJobs increments the count of pending jobs for a given job name in the controller
1576	setPreviousReportState updates the previous report state of a ProwJob in the controller.
1577	SyncMetrics acquires project lock, gathers Prow job metrics, and releases the lock.
1578	DumpProfile writes coverage profiles to a writer, returning an error if any operation fails.
1579	blocksEqual will return true if two ProfileBlocks have equal start and end columns/lines and statement count
1580	NewProwJobInformer creates a new Prow job informer with default filter options.
1581	NewFilteredProwJobInformer creates a SharedIndexInformer for ProwJobs in a specified namespace with optional list/watch options and custom resync period.
1582	New creates a Spyglass instance with JobAgent, config, PodLogArtifactFetcher, GCSArtifactFetcher, and TestGrid components.
1583	Lenses will return sorted list of lenses based on their priority and name
1584	JobPath extracts the job path from a source string based on key type and returns the corresponding directory or error.
1585	RunPath trims source path, splits it into key type and key, converts Prow keys to GCS if necessary, and returns the result or an error.
1586	Spyglass fetches artifacts, reads "started.json," parses metadata, extracts links, and returns them.
1587	needDemux filters external plugins based on repository and event type, returning a list of matching plugins.
1588	demuxExternal handles external plugins by setting headers and dispatching events asynchronously.
1589	dispatch sends a POST request to the specified endpoint with the given payload and headers, reads the response, and returns an error if the response status is outside the 2xx range.
1590	AddFlags adds command-line flags to a Cobra command for setting state description and age percentiles.
1591	CheckFlags updates states using bundled states and returns no error
1592	ReceiveIssueEvent processes an issue event, updates state, calculates totals and percentiles, and returns a point with the results.
1593	Load config files, finalize, validate job and component configs, return Config object or error
1594	loadConfig reads prowConfig and optionally jobConfig, merging them into a Config object while validating uniqueness of filenames and handling errors gracefully.
1595	yamlToConfig reads YAML file, unmarshals it into config, sets source path for jobs, and returns error if failed
1596	ReadFileMaybeGZIP reads a file, checks if it's GZIP compressed, and decompresses it if necessary before returning the content.
1597	finalizeJobConfig sets defaults for job configurations and resolves presets, returning an error if any issues arise.
1598	validateComponentConfig checks Plank JobURLPrefix settings and SlackReporter configuration for validity, returning an error if any issues are found
1599	ConfigPath returns the input value if not empty, otherwise logs a warning and returns a default path.
1600	ValidateController checks controller settings, parses URL and report templates, and validates concurrency limits.
1601	defaultJobBase sets default values for Agent, Namespace, and Cluster fields in JobBase.
1602	SetPresubmitRegexes compiles trigger regexes, verifies rerun commands, sets brancher and change regexes for presubmit jobs, returning errors if any configurations are invalid.
1603	setBrancherRegexes compiles regexes for branches and skip branches, updating the Brancher object and returning an error if compilation fails
1604	SetPostsubmitRegexes updates branch and change regexes for postsubmits and returns an error if any fail
1605	Body processes artifacts, extracts metadata, calculates elapsed time, and generates HTML content using a template.
1606	NewBoskosHandler creates an HTTP server mux routing requests to various handlers based on the URL path.
1607	ErrorToStatus converts an error to an HTTP status code based on the error type.
1608	DumpProfile writes a coverage profile to a file or stdout.
1609	LoadProfile reads a coverage profile from a given origin, handling both file paths and standard input by creating a temporary file if necessary.
1610	NewClient creates a git client instance with temp dir and logger.
1611	SetCredentials updates a client's credentials with a username and a token generator function.
1612	Checkout will attempt to checkout a specified commit-like reference and log the operation, returning an error if the checkout fails.
1613	CheckoutNewBranch creates a new branch and checks it out, logging the operation and returning an error if it fails.
1614	Merge attempts a git merge operation and rolls back if it fails, returning success status and any errors encountered.
1615	CheckoutPullRequest will checkout a pull request by fetching it and executing git commands.
1616	Config updates git repository configuration and logs the command execution.
1617	retryCmd attempts to execute a command up to three times, doubling the sleep duration on failure, and logs errors.
1618	LabelsAndAnnotationsForSpec constructs labels and annotations for a ProwJobSpec, applying constraints and validations.
1619	ProwJobToPod converts a ProwJob to a Pod, setting necessary configurations and handling environment variables and decorations.
1620	CloneLogPath concatenates logMount's MountPath with a constant cloneLogPath and returns the result
1621	cloneEnv encodes options into environment variables and returns them along with any errors
1622	sshVolume creates a named volume and mount for SSH keys with restricted permissions.
1623	InjectEntrypoint modifies container command to include an entrypoint script with specified options and volumes, returning updated container configuration and options.
1624	PlaceEntrypoint creates a container with specified image, command, arguments, and volume mounts.
1625	kubeEnv converts a map of environment variables to a sorted list of Kubernetes EnvVar objects.
1626	KubernetesOptions Client creates a fake client if dryRun is true, otherwise it uses cluster config or file to create a client.
1627	handle updates labels based on event properties and logs errors
1628	SendHook sends a POST request with a payload and HMAC to a specified GitHub webhook address, verifying the response status and returning an error if unsuccessful.
1629	janitorClean executes a command to clean a resource, logs the process and output, and handles errors accordingly.
1630	janitor cleans resources from a buffer using a cleanup function and updates Boskos accordingly.
1631	Run starts a pull server, handles configuration updates, and manages concurrent pull operations.
1632	specToStarted converts JobSpec to Started object with timestamp, repo version, pull request number, and repository details.
1633	Run will execute job options, process log, upload started data to GCS, and return error if cloning fails
1634	hasPRChanged checks if PR action is opened, reopened, or synchronized, returning true if so.
1635	UpdateIssues fetches issues from a client, updates them in the database, and handles new comments/events.
1636	handleReviewEvent forwards a review event to the handleReview function for processing.
1637	findAssociatedIssue extracts issue ID from body using regex and returns it as an integer along with any errors encountered
1638	optionsForRepo retrieves repository-specific configuration, falling back to organization-wide settings, and applies deprecated default values if needed.
1639	localOnlyMain registers routes in the HTTP server multiplexer.
1640	summarize calculates total covered and all statements in CoverageList
1641	Subset filters CoverageList based on name prefix and returns a new list.
1642	CoverageList's ListDirectories extracts unique directories from group names and returns them as a string slice.
1643	readRequest reads an HTTP request body, verifies content type, and decodes it into an AdmissionRequest.
1644	handle reads request body, processes content type, logs errors, writes response with status update.
1645	writeResponse processes an AdmissionRequest, decides on a response using a decider, constructs an AdmissionReview, marshals it to JSON, and writes it to an io.Writer, handling errors appropriately.
1646	onlyUpdateStatus checks if the request updates status or has equivalent specs, allowing or rejecting accordingly
1647	convertSuiteMeta will transform SuiteMeta data into a structured Suite object with nested Cases, handling failures, skips, and durations.
1648	NewHealth starts an HTTP server on /healthz path returning "OK" and logs errors.
1649	ServeReady sets up a health check endpoint that responds with "OK".
1650	NewController initializes a controller with various dependencies and starts a status update goroutine.
1651	newExpectedContext creates a new Context object with specified state and description
1652	contextsToStrings converts a list of Context objects to a list of strings
1653	filterSubpools filters subpools concurrently, initializes data, applies filters, and returns filtered results.
1654	filterSubpool filters PRs based on ghc and sp, returning updated sp or nil
1655	poolPRMap aggregates PRs from subpools into a single map using unique keys.
1656	unsuccessfulContexts filters out successful and optional contexts, identifies missing required ones, logs the result, and returns failing contexts
1657	accumulate organizes pull requests based on the outcomes of associated presubmit jobs, categorizing them into successes, pendings, and nones.
1658	tryMerge will attempt to merge using a provided function, retrying up to three times with exponential backoff for certain errors, and returns success status and final error
1659	prChanges retrieves PR changes using a cache, querying GitHub if necessary, and returns file paths.
1660	prune will reset change cache and update next change cache
1661	dividePool organizes pull requests and ProwJobs into subpools based on repository and branch, updating them with relevant data and filtering jobs by type.
1662	AggregateProfiles aggregates multiple profile slices into a single profile, converting counts to booleans and merging them.
1663	countToBoolean converts coverage profiles by setting block counts to either 0 or 1.
1664	NewStorage initializes Storage with resources from a file, adds them, and logs progress.
1665	AddResource adds a resource to storage and returns an error if unsuccessful
1666	DeleteResource removes a resource from storage and returns an error if unsuccessful.
1667	UpdateResource updates resource in storage and returns error if failed
1668	GetResource retrieves a resource by name from storage, converts it to a Resource object, and returns it along with any errors encountered.
1669	GetResources retrieves sorted list of resources from storage.
1670	SyncResources updates storage resources by deleting non-existent ones and adding new ones, returning any errors encountered.
1671	ParseConfig reads a config file, unmarshals YAML, and converts entries to resources.
1672	problemsInFiles identifies issues in Bazel files and returns a map of problematic files with associated errors.
1673	NewPodLogArtifact creates a PodLogArtifact object with validated inputs, returning an error if any are invalid.
1674	PodLogArtifact generates a canonical log link using job and build ID parameters.
1675	ReadAt fetches pod logs from job agent, reads them at specified offset, and returns the number of bytes read or an error.
1676	ReadAll retrieves pod logs, checks size, and returns them or an error.
1677	ReadAtMost reads up to n bytes from the pod log, returning the data and an error if any occurs.
1678	ReadTail reads the last n bytes of a pod log, returning them and an error if unsuccessful.
1679	newProblems updates lint problems based on review comments, removing those marked with a specific tag.
1680	problemsInFiles analyzes files in a git repo, identifies linting issues, and generates review comments
1681	undoPreset removes matching preset configurations from a pod specification based on labels.
1682	undoPresubmitPresets reverses the application of presets to a presubmit configuration.
1683	yamlBytesStripNulls removes lines matching key: null pattern from YAML byte slice
1684	monitorDiskAndEvict monitors disk usage and evicts cache entries when below threshold.
1685	difference computes the difference between two orgRepoConfig instances, updating repositories and exceptions accordingly.
1686	union combines two orgRepoConfig instances, updating org exceptions and repos while pruning duplicates.
1687	clearStaleComments deletes stale comments from a pull request if they contain specific strings and the PR doesn't require following a release note process.
1688	determineReleaseNoteLabel will return a release note label based on the content of the body
1689	getReleaseNote extracts and trims release notes from a given body
1690	NewClient creates a new Client instance with the given boskosClient and an empty resources map.
1691	Acquire resources, handle errors, and manage releases.
1692	ReleaseOne releases resources by name and destination, handles errors, and logs warnings.
1693	UpdateAll updates all resources with the given state and returns an error if failed
1694	GetGitHubClient creates a GitHub client using an OAuth2 token.
1695	GetUsername retrieves a username using a GitHub client, returning the username and an error if unsuccessful.
1696	CreateTokenHandler reads token stream, authenticates via GitHub, retrieves username, and initializes TokenHandler with client, login, and InfluxDB reference.
1697	CreateTokenHandlers reads token files, creates TokenHandlers, and returns them along with any errors encountered.
1698	String representation of jobIdentifier combines job, organization, repository, and pullRequest.
1699	TerminateOlderPresubmitJobs cancels older presubmit jobs based on job identifiers and updates their status before cleaning up resources.
1700	PushMetrics sends metrics at specified intervals and shuts down on interrupt or termination signal.
1701	RateLimiter creates and returns a named rate-limiting queue for a given controller.
1702	checkExistingStatus retrieves the DCO status from GitHub and logs it
1703	checkExistingLabels will determine if "yes" and "no" DCO labels exist for a GitHub issue and return their presence along with any errors encountered
1704	handle will process a GitHub pull request, check commit messages, existing status, and labels, and take appropriate action based on the results.
1705	MarkdownSHAList generates a markdown-formatted list of commits with truncated SHAs and messages.
1706	PathForSpec generates a log path based on the job specification and repository path segment.
1707	AliasForSpec returns a log file path for presubmit jobs and an empty string for others, logging an error for unknown job types.
1708	RootForSpec determines log directory based on job type
1709	NewSingleDefaultRepoPathBuilder creates a closure that returns a repository path based on organization and repository names, replacing slashes with underscores if they differ from defaults.
1710	NewExplicitRepoPathBuilder creates a closure that constructs a repository path by replacing slashes with underscores and concatenating organization and repository names.
1711	RegisterSourceOrDie registers an IssueSource under a unique name, logs a fatal error if the name already exists, and confirms registration.
1712	CreateAndSync initializes IssueCreator, generates issues from sources, and syncs them, logging progress and errors.
1713	loadCache retrieves user info, labels, collaborators, and issues for caching, handling errors gracefully.
1714	setIntersect filters elements between two slices returning those present and absent
1715	sync checks for existing issues, updates body, filters owners/labels, creates or logs errors for a GitHub issue.
1716	GetAWSCreds retrieves AWS credentials from a resource and returns them as a Value object, or an error if the required keys are missing.
1717	stopper creates a channel that listens for OS interrupts, logs warnings on first signal, closes gracefully on second signal, forces exit on third signal
1718	newPipelineConfig creates a pipeline config using REST client, checks if PipelineCRD is deployed, sets up a shared informer factory, and starts watching PipelineRuns with a 30-minute resync interval.
1719	KubeClient retrieves a Kubernetes client using master URL and config.
1720	ProwJobClient retrieves a Prow job client using master URL and kube config.
1721	resolveSymLink reads a symbolic link and returns the resolved path, removing the bucket prefix, or an error if reading fails.
1722	readJSON reads a JSON object from a storage bucket and unmarshals it into the given data structure, returning an error if either operation fails
1723	listSubDirs will return a list of subdirectories and an error if the operation fails
1724	listAll retrieves all objects matching a prefix in GCS and returns their names with any errors encountered.
1725	listBuildIDs extracts build IDs from GCS paths, returning them as integers and handling errors.
1726	FilterProfilePaths filters cover profiles based on matching file paths, returning those that either include or exclude specified paths.
1727	LoadSecrets reads multiple secret files, stores their content in a map, and returns the map along with an error if any file fails to load.
1728	LoadSingleSecret reads a file and trims whitespace, returning the content and an error if unsuccessful.
1729	Set updates bool value from string and marks it as explicitly set
1730	NewOpener creates a GCS client using provided credentials or default app credentials, returning an Opener object and an error if unsuccessful.
1731	IsNotExist checks if an error indicates the absence of a resource, considering both OS-level and custom errors.
1732	LogClose closes an io.Closer and logs any errors encountered.
1733	opener.Writer opens a GCS file or creates a local file and returns a writer for it
1734	GitHubOAuthConfig initializes OAuth config with a cookie store.
1735	deltaDisplayed calculates the percentage change between newRatio and baseRatio, returning a formatted string.
1736	makeTable generates a table comparing coverage lists, returning the table as a string and a flag indicating low coverage.
1737	ContentForGitHubPost generates a GitHub post content and checks if coverage is low based on provided profiles and thresholds.
1738	AddFlags adds command-line flags to the given Cobra command for configuring client settings.
1739	CheckFlags sets and validates organization and project flags, converting them to lowercase and returning an error if either is missing.
1740	getGitHubClient retrieves a GitHub client using cached token or file, returning an error if unsuccessful.
1741	Client checks GitHub rate limits and waits if exceeded.
1742	Fetches GitHub issues updated after a given time and sends them through a channel.
1743	hasID checks if an ID exists in a list of GitHub issue events.
1744	FetchIssueEvents retrieves issue events using pagination and sends them to a channel, stopping when all relevant events are fetched or a specific condition is met.
1745	isPRChanged checks if a PR event is one of opened, reopened, synchronized, or edited.
1746	NewFetcher creates a Fetcher instance with specified repository and buffered channels for issues and events/comments.
1747	fetchRecentIssues retrieves recent issues from the database, updates the last fetched issue timestamp, and pushes them to a channel.
1748	fetchRecentEventsAndComments queries recent issue-events and comments from the database, orders them, and pushes them to a channel while updating last seen IDs.
1749	Fetch will retrieve recent issues and events/comments from the database and return an error if any step fails
1750	FlakyJobReporter generates issues based on parsed flaky jobs data.
1751	Title returns a string describing the job name and flake count
1752	FlakyJob Labels appends "kind/flake" and "sig/" labels based on test signatures.
1753	ReadHTTP attempts to fetch data from a URL with retries on server errors, returning the response body or an error after exhausting attempts.
1754	String representation of sorted lines, joined with commas and newlines.
1755	NewJobSpec creates a JobSpec instance using provided ProwJobSpec, buildID, and prowJobID.
1756	ResolveSpecFromEnv retrieves job specification from environment variable and returns parsed JobSpec object or error if unset or malformed.
1757	EnvForSpec constructs an environment map for a job specification, populating it with relevant details and returning any errors encountered during marshaling.
1758	EnvForType returns environment variables based on the job type.
1759	getRevisionFromRef extracts revision info from refs, prioritizing Pulls SHA over BaseSHA, defaulting to BaseRef
1760	GetRevisionFromSpec retrieves a revision from job specification or extra references.
1761	helpProvider constructs a PluginHelp object with a description about a merge commit blocker plugin.
1762	load reads from reader, parses lines, updates group fields, collects repo paths, and returns errors
1763	loadPaths reads paths from reader, stores them in Group, ignores comments and empty lines, returns error if scan fails
1764	Match checks if path matches any stored paths or prefixes, returning true if a match is found.
1765	CreateDatabase initializes InfluxDB connection, drops existing series, creates batch points, and returns InfluxDB instance.
1766	mergeTags combines two maps, updating the first with the second's key-value pairs and returns the merged result
1767	tagsToWhere converts map of tags to SQL WHERE clause conditions
1768	Push adds a point to the batch for InfluxDB measurement and returns an error if failed
1769	artifact creates a new PodLogArtifact and returns it or an error
1770	serve sets up metrics endpoint and starts HTTP server logging errors
1771	gather function monitors plank controller, syncing metrics every 30 seconds or responding to shutdown signals.
1772	makeRequest constructs a GitHub branch protection request from a policy object
1773	makeReviews processes a branch protection review policy and returns a GitHub required pull request reviews object, handling cases where the policy is nil or lacks necessary settings.
1774	executeTemplate generates header using artifacts and resourceDir
1775	Callback processes JSON request, retrieves logs, highlights lines, and executes template.
1776	logLinesAll reads all lines from a log artifact and returns them as a slice of strings, or an error if reading fails.
1777	executeTemplate loads and executes a template with given data, returning the rendered output or an error message
1778	DeepCopyObject creates a deep copy of the ResourceObject if possible, otherwise returns nil.
1779	FromItem converts an item to a resource object.
1780	SetItems assigns resource objects to the collection.
1781	DeepCopyObject creates a deep copy of ResourceCollection and returns it as runtime.Object. If copying fails, it returns nil.
1782	useContext sets the Kubernetes context and returns an error if it fails
1783	currentContext will execute kubectl config current-context command and return the trimmed output string along with any errors encountered
1784	command constructs and returns a command with arguments, appending them to a slice and setting stderr.
1785	describeCluster will return a description of a Kubernetes cluster and an error if any required fields are missing
1786	Set appends a string to strslice and returns nil
1787	parseXML unmarshals XML data into a gcsDir object, adjusts file paths, and returns the parsed directory structure or an error
1788	Render will generate an HTML page for a directory listing, including headers, grid items, and pagination buttons.
1789	Render function outputs HTML grid item for a record, displaying URL, name, size, and modified time.
1790	Render will generate HTML grid item for given path and prefix
1791	txnLogger's Printf prepends nonce and logs message with transaction ID.
1792	NewClient creates a Client instance with handlers for multiple Gerrit instances, returning an error if any creation fails.
1793	SetReview updates review details for a Gerrit instance and returns an error if unsuccessful.
1794	GetBranchRevision retrieves a revision from a Gerrit instance for a specified project and branch, returning the revision or an error if the instance is not active or the request fails.
1795	queryAllChanges aggregates changes from all projects, skipping errors per project and logging issues
1796	NewTypeFilterWrapperPlugin creates a wrapper for a plugin, initializing it with an empty pass map.
1797	AddFlags adds flags to a command to ignore pull requests and issues
1798	CheckFlags verifies that either pull-requests or issues are enabled, returning an error if both are disabled.
1799	AddFlags adds Kubernetes client options to a flag set.
1800	Validate checks Kubernetes configuration file existence and returns an error if it doesn't exist.
1801	KubernetesClientOptions creates a client based on options, returning a dummy client if in-memory, or a CRD client otherwise.
1802	newCRDClient will create a Kubernetes CRD client and return it along with an error if creation fails
1803	createRESTConfig generates a REST config based on kubeconfig and type, setting up API path, content type, and adding known types to the scheme.
1804	registerResource creates a CRD based on config and resource type, returning an error if creation fails or already exists
1805	newDummyClient creates a dummy client instance with specified type and empty object map.
1806	Update method updates an object in dummyClient and returns the updated object or an error if the object is not found.
1807	TrustedPullRequest verifies if a PR can proceed based on author trust and labels.
1808	buildAll filters presubmit jobs based on PR changes and runs them while skipping certain ones.
1809	Run will execute the job and return the number of failures and an error if the execution is interrupted
1810	AddConfig adds a configuration to storage and returns an error if unsuccessful.
1811	DeleteConfig removes a configuration by name and returns an error if unsuccessful.
1812	UpdateConfig updates configuration using Storage instance.
1813	GetConfig retrieves a configuration by name, converts it to ResourcesConfig, and returns it along with any errors encountered.
1814	GetConfigs retrieves all resource configurations from storage, converts them, and returns an array of resources and any errors encountered.
1815	SyncConfigs updates, adds, and deletes resource configurations based on differences between current and new sets.
1816	addKnownTypes registers custom types with a runtime scheme and group version
1817	NewController creates a Controller instance with specified configurations and clients.
1818	Run handles controller operations, processing configuration changes and graceful shutdown.
1819	addedBlockingPresubmits identifies new blocking presubmits based on changes in configuration.
1820	removedBlockingPresubmits identifies and logs removed blocking presubmits between two configurations, returning a map of those removed.
1821	migratedBlockingPresubmits compares two sets of presubmits, identifies those with changed contexts, logs each migration, and returns a map of migrated presubmits.
1822	Load reads configuration options from either environment variables or command-line flags and loads them using the provided OptionLoader.
1823	canExecuteConcurrently checks if a ProwJob can run concurrently based on controller and job limits, updating pending jobs count accordingly.
1824	getJenkinsJobs filters incomplete ProwJobs and constructs BuildQueryParams for Jenkins jobs.
1825	terminateDupes cancels duplicate presubmit jobs based on their organization, repository, and PR number, preferring the most recent job and allowing cancellations if configured.
1826	Client sets throttling parameters, enabling or disabling based on token limits.
1827	NewClientWithFields creates a Client instance with specified fields, token retrieval function, GraphQL endpoint, and optional bases.
1828	NewClient creates a client with default fields using a token function and GraphQL endpoint.
1829	NewDryRunClient creates a new dry-run client with default fields.
1830	NewFakeClient creates a Client instance with logging, standard time, fake mode, and dry run enabled.
1831	Client sends request, receives status and data, unmarshals data into struct, returns status and error.
1832	requestRaw sends a request, reads the response, and handles errors based on exit codes.
1833	getUserData fetches user data logs it sets bot name and email returns error
1834	readPaginatedResultsWithValues fetches paginated results from a server, processes them using newObj and accumulate functions, and handles pagination via "Link" headers.
1835	UpdatePullRequest updates a GitHub pull request with specified details and returns an error if the operation fails
1836	getLabels fetches labels from a GitHub API path, handles pagination, and returns them or an error
1837	stateCannotBeChangedOrOriginalError checks if error contains specific message, if so returns custom error, otherwise returns original error
1838	IsMergeable checks pull request mergeability with retries, returns bool and error
1839	reloadingTokenSource retrieves an OAuth2 token as a string.
1840	ListArtifacts parses src, converts to GCS key if needed, fetches artifacts, appends build-log.txt if missing, and returns them.
1841	KeyToJob extracts jobName and buildID from a source string, returning them along with any errors encountered.
1842	prowToGCS converts a Prow key to a GCS path, returning the URL without the prefix or an error if the process fails.
1843	FetchArtifacts retrieves artifacts based on source, pod name, size limit, and artifact names, returning them along with any errors encountered during the process.
1844	DeepCopy creates a copy of DecorationConfig and returns it.
1845	Deep copy of GCSConfiguration object returns a new instance.
1846	DeepCopy creates a copy of JenkinsSpec instance and returns it.
1847	DeepCopy creates a copy of ProwJob object and returns it
1848	Deep copy a ProwJobList object.
1849	DeepCopy creates a deep copy of ProwJobSpec, returning a new instance.
1850	DeepCopy creates a copy of ProwJobStatus and returns it.
1851	DeepCopy creates a copy of Pull instance.
1852	DeepCopy creates a copy of Refs instance and returns it.
1853	DeepCopy creates a copy of UtilityImages and returns it.
1854	upload creates resources in result store and returns the URL or an error
1855	ApplyDefault merges two DecorationConfig objects, prioritizing non-nil values and applying defaults where necessary.
1856	Validate checks utility image and GCS configuration fields for completeness and validity, returning an error if any required fields are missing or configurations are invalid.
1857	ApplyDefault merges two UtilityImages instances, prioritizing non-empty fields from the second instance.
1858	ApplyDefault merges two GCS configurations, prioritizing non-nil values from both.
1859	Validate checks GCS configuration and returns error if path strategy is invalid or default org/repo missing for non-explicit strategies
1860	ClusterAlias returns cluster alias from ProwJob spec or default alias if empty
1861	NewResource constructs a new Resource instance with given attributes and current timestamp.
1862	NewResourcesFromConfig creates resources from config entries.
1863	UserDataFromMap creates a new UserData instance and populates it with key-value pairs from the given map.
1864	Set will add a comma-separated list of strings to resTypes and return an error if already set
1865	userData unmarshals JSON data into a temporary map then converts it to user data
1866	userData extracts data by ID and unmarshals it into a given struct, returning an error if not found.
1867	userData stores marshaled input under given ID
1868	Update user data by iterating over key-value pairs, storing non-empty strings and deleting empty ones.
1869	ToMap converts UserData to UserDataMap by iterating over key-value pairs and storing them in a map.
1870	FromMap populates UserData instance with key-value pairs from UserDataMap.
1871	ItemToResource converts an Item to a Resource, returning an error if conversion is not possible.
1872	Run will execute tasks using specified workers, process Git refs, handle SSH keys and fingerprints, and save results to a file.
1873	addSSHKeys starts ssh-agent, walks paths adding SSH keys and returning updated environment variables
1874	Issues fetches top clusters from HTTP data, loads them, and returns as issues.
1875	loadClusters parses JSON data, filters clusters, aggregates failing builds by job, and calculates totals.
1876	parseTriageData will return a triageData object and an error if the JSON is malformed or missing required keys
1877	topClusters sorts clusters by total builds and returns the top N clusters
1878	topJobsFailed filters jobs based on build counts and returns the specified number of failed jobs.
1879	Title returns a formatted string summarizing build failures in a cluster
1880	Labels generates a list of labels including "kind/flake" and "sig/" prefixes based on top failed tests and file creator signatures.
1881	New creates a Cron instance with a cron agent, job status map, and logger.
1882	QueuedJobs will return a list of triggered jobs and reset their trigger status
1883	Cron.HasJob checks if a job exists by name and returns true if found.
1884	addJob schedules a cron task and logs the addition and triggering details
1885	removeJob deletes a cron job by name and removes it from the agent and local map.
1886	UpdateComments updates issue/pull request comments based on the latest update time.
1887	GatherProwJobMetrics aggregates ProwJob metrics into a map and updates Prometheus metrics accordingly.
1888	optionOrDefault returns default value if option is zero else returns option
1889	newGCSJobSource creates a GCS job source from a string URL, extracting bucket, job prefix, job name, and build ID, returning an error if parsing fails
1890	GCSArtifactFetcher retrieves artifacts from Google Cloud Storage using a specified key, handling retries on errors and logging the operation duration.
1891	canonicalLink constructs and returns the canonical link for GCS job source by joining linkPrefix, bucket, and jobPrefix.
1892	jobPath constructs and returns a job path using bucket and jobPrefix fields.
1893	targetURL constructs a PR status link using either a configured Tide URL or a dynamically generated URL based on pull request details, logging errors if parsing fails.
1894	newBuildConfig creates a build configuration, verifies knative-build CRD, sets up informer, and returns a buildConfig object
1895	NewClient creates a new GitHub client with OAuth2 authentication and optional dry-run mode.
1896	retry will execute an action up to N times, handling rate limits, two-factor auth errors, and aborts, before returning the response or final error
1897	depaginate retrieves all items by repeatedly calling a function with pagination options, accumulating results until all pages are fetched, returning them along with any errors encountered during the process.
1898	NewHelpAgent creates a HelpAgent instance with logging, pluginAgent, and orgAgent.
1899	GeneratePluginHelp constructs help data for plugins and external plugins based on configuration and returns a structured Help object.
1900	getPullCommitHash extracts commit hash from pull request string returning parsed hash and error if format is incorrect
1901	listJobBuilds retrieves job builds from a bucket using specified prefixes, concurrently processing each prefix and collecting results.
1902	getPRBuildData fetches build data from a bucket for multiple jobs, processing each build asynchronously and collecting results.
1903	getGCSDirsForPR retrieves GCS directories for a given PR based on config and returns them grouped by bucket.
1904	imageDeleteFromDisk removes both the main image and rootfs files associated with a given fingerprint, logging errors if deletion fails.
1905	doNetworksCreate starts a network by loading it, starting it, and cleaning up if it fails.
1906	networkLoadByName retrieves a network by name, returning its details and an error if not found.
1907	Transaction executes a function within a database transaction context, returning an error if any occurs.
1908	ForLocalInspectionWithPreparedStmts prepares database statements for local inspection and returns a Cluster object or an error.
1909	Set default timeout for database connection.
1910	Transaction executes a function on a cluster transaction safely.
1911	EnterExclusive acquires an exclusive lock on the cluster DB and returns an error if the operation times out.
1912	ExitExclusive releases exclusive lock on cluster DB, executes transaction function, and handles errors.
1913	Close will close all statements and the database connection returning an error if any fail
1914	TxCommit attempts to commit a transaction, ignoring errors for duplicate commits or rollbacks.
1915	ParseRemote splits input by ":"; returns default remote and original string if no match found; otherwise, returns parsed remote and remaining part.
1916	GetContainerServer retrieves a container server by name, validating the remote and establishing a connection using either a Unix socket or HTTPS.
1917	GetImageServer retrieves an image server based on the remote name, handles different protocols, and applies project overrides.
1918	initAppArmor will detect AppArmor availability, stacking, existing stack, admin support, and confinement status, updating OS fields accordingly and logging warnings for issues.
1919	appArmorCanStack checks AppArmor domain stack feature and version, returning true if stack is enabled and version is 1.2 or higher.
1920	containerDeviceAdd adds a device to a container if it doesn't already exist and waits for the operation to complete.
1921	profileDeviceAdd adds a device to a container if it doesn't already exist and updates the profile accordingly.
1922	ensureImageAliases updates container image aliases based on provided list, removing old and creating new ones.
1923	GetExistingAliases filters image aliases based on provided names and returns matching entries.
1924	StatusCode String converts enum to human-readable string
1925	ImagesGetExpired retrieves expired images based on expiry duration.
1926	ImageSourceInsert inserts image source details into the database and returns an error if the protocol is invalid.
1927	ImageSourceGet retrieves image source details based on ID, returning the count, image source object, and an error if not found or invalid.
1928	ImageExists checks if an image exists for a given project and fingerprint, returning a boolean and error.
1929	ImageGet retrieves image details based on project, fingerprint, and filters, returning the image ID, image object, and an error.
1930	ImageGetFromAnyProject retrieves an image by fingerprint, returning its ID, details, and any errors encountered.
1931	imageFill updates an image's details including creation, expiration, usage, architecture, upload time, properties, and aliases from the database.
1932	ImageLocate retrieves the location of an image based on its fingerprint, returning the address of an online node where it can be accessed, excluding the local node if available.
1933	ImageAssociateNode associates an image with a node, returning an error if the operation fails.
1934	ImageDelete deletes an image by ID and returns an error if unsuccessful
1935	ImageAliasesGet retrieves image aliases for a given project, handles transactions, and returns a list of alias names or an error.
1936	ImageAliasGet retrieves image alias details, checking permissions and returning the ID, target, and description of the alias.
1937	ImageAliasRename updates the alias name for a cluster image by ID and returns an error if unsuccessful.
1938	ImageAliasDelete removes an image alias, updating project ID if necessary, and handles database transactions and errors.
1939	ImageAliasesMove updates image aliases in the database, swapping IDs between source and destination.
1940	ImageAliasAdd adds an alias for an image in a specified project, handles transactions, and inserts data into the database.
1941	ImageAliasUpdate updates the alias of an image in the database and returns an error if the operation fails
1942	ImageLastAccessUpdate updates the last use date of an image identified by its fingerprint in the database and returns an error if the operation fails.
1943	ImageLastAccessInit updates image cache status and last use date based on fingerprint.
1944	ImageUpdate updates cluster image details and properties in a transaction.
1945	ImageInsert inserts an image into the database, handles transactions, sets default project, maps properties, and associates with nodes.
1946	ImageGetPools retrieves storage pool IDs for a given image fingerprint from the database, returning them as a list or an error.
1947	ImageGetPoolNamesFromIDs fetches pool names from IDs using SQL query and returns them as a list.
1948	ImageUploadedAt updates the upload date of an image in the database and returns an error if failed
1949	ImagesGetOnCurrentNode retrieves images on the current node using nodeID.
1950	ImagesGetByNodeID retrieves image fingerprints and associated project names for a given node ID, returning them in a map and an error if the query fails.
1951	ImageGetNodesWithImage fetches distinct node addresses associated with a given image fingerprint from the database.
1952	ImageGetNodesWithoutImage retrieves node addresses without a specific image using a SQL query and returns them along with any errors.
1953	Add function appends a task to Group's tasks list and returns the added task.
1954	Start starts a group of tasks with context cancellation and goroutine management.
1955	zfsIsEnabled checks if ZFS is installed and returns true if enabled.
1956	zfsToolVersionGet retrieves ZFS tool version using dpkg-query and trims output.
1957	zfsModuleVersionGet retrieves the ZFS module version from either /sys/module/zfs/version or using modinfo command, returning the cleaned version string or an error if unsuccessful.
1958	zfsPoolVolumeCreate creates a ZFS volume with specified properties and dataset name, returning the command output and any errors.
1959	zfsPoolVolumeExists checks if a ZFS dataset exists by listing all datasets and comparing names, returning true if found and an error if the command fails.
1960	NetworkIDsNotPending retrieves pending network IDs and names as a map from the database.
1961	NetworkConfigAdd adds network configuration for a given cluster transaction.
1962	NetworkNodeJoin updates network nodes with given IDs and returns an error.
1963	NetworkCreatePending checks if a network exists and creates it if not, ensuring it's in the pending state before associating it with a node and applying configuration.
1964	NetworkCreated updates cluster transaction state for network creation and returns error if failed
1965	NetworkErrored updates cluster transaction's network state to errored for given name and returns the result.
1966	NetworkGet retrieves network details by name, returning ID, API object, and error.
1967	networkNodes retrieves node names associated with a given network ID using a database transaction.
1968	NetworkGetInterface fetches network details for a given device name, returning ID, network object, and error if not found.
1969	NetworkConfigGet retrieves network configuration as a map using ID, returning an error if not found.
1970	NetworkCreate inserts a new network with given details and returns its ID or an error
1971	NetworkUpdate updates a cluster's network configuration atomically.
1972	NetworkUpdateDescription updates network description in database and returns error if failed
1973	NetworkConfigClear will delete network config entries for given network and node IDs and return an error if failed
1974	NetworkDelete removes a network by name and returns an error if unsuccessful
1975	NetworkRename updates network name by ID in transaction, returning error if failed
1976	GetContainers fetches all containers using a GET request and returns them as an API list or an error.
1977	GetContainersFull fetches all container details using the "container_full" API extension and returns them as a list of ContainerFull objects.
1978	GetContainer fetches a container by name, returning details and etag or an error.
1979	CreateContainerFromBackup will initiate a container creation process using a backup file, handling pool-specific configurations and returning an operation object along with potential errors.
1980	CreateContainer sends a POST request to create a container and returns the operation and any errors encountered.
1981	CreateContainerFromImage creates a container from an image, handling both local and remote sources, and manages operations with error handling.
1982	UpdateContainer sends a PUT request to update a container and returns an operation or error.
1983	RenameContainer sends a POST request to rename a container and returns the operation or an error if migration is requested.
1984	ExecContainer sends a command to a container, handles streams, and waits for completion.
1985	GetContainerFile sends an HTTP GET request to retrieve a container file, parses the response, and returns a ReadCloser and a ContainerFileResponse object.
1986	CreateContainerFile sends a POST request to create a file or directory in a container, validating necessary extensions and setting appropriate headers.
1987	DeleteContainerFile removes a file from a container and returns an error if the operation fails
1988	GetContainerSnapshotNames retrieves container snapshot names and returns them along with an error if any occurs
1989	GetContainerSnapshots retrieves container snapshots using API query and returns them along with any errors encountered.
1990	GetContainerSnapshot fetches a container snapshot, returns the parsed data, ETag, and an error.
1991	CreateContainerSnapshot creates a container snapshot and returns an operation object along with an error if the request is invalid or fails.
1992	MigrateContainerSnapshot sends a POST request to migrate a container snapshot and returns the operation and an error if failed.
1993	UpdateContainerSnapshot updates a container snapshot and returns the operation and error.
1994	GetContainerState fetches container state, returns API state, ETag, and error.
1995	UpdateContainerState sends a PUT request to change a container's state and returns the operation result and any errors encountered.
1996	GetContainerLogfiles fetches container logs, parses URLs, and returns log filenames.
1997	GetContainerLogfile sends an HTTP GET request to retrieve a container logfile and returns a reader and error.
1998	GetContainerMetadata retrieves container metadata and returns it along with the ETag and an error if the operation fails.
1999	SetContainerMetadata updates container metadata, returning error if unsuccessful
2000	GetContainerTemplateFiles retrieves container template files and returns them along with an error if the operation fails.
2001	CreateContainerTemplateFile sends a POST request to create a container template file.
2002	DeleteContainerTemplateFile removes a container template file and returns an error if the operation fails
2003	`ConsoleContainer establishes a WebSocket connection for a container's console, handling terminal and control channels.`
2004	GetContainerConsoleLog retrieves console log for a container using LXD protocol and returns a ReadCloser with potential errors.
2005	DeleteContainerConsoleLog removes a container's console log and returns an error if the "console" API extension is missing or the request fails
2006	GetContainerBackups fetches container backups using ProtocolLXD, returning them or an error if the extension is missing or query fails.
2007	GetContainerBackup fetches a container backup by name, returns the backup data, ETag, and an error if the "container_backup" extension is missing or the request fails.
2008	CreateContainerBackup sends a POST request to create a container backup and returns the operation object or an error
2009	RenameContainerBackup sends a POST request to rename a container backup and returns the operation and error.
2010	DeleteContainerBackup sends a DELETE request to remove a container backup and returns the operation and error.
2011	GetContainerBackupFile fetches a container backup file, handles progress, and returns the file size in the response.
2012	RsyncSend sends files over WebSocket, handles errors, and waits for completion.
2013	patchesGetNames will return a list of names extracted from the patches array
2014	patchRenameCustomVolumeLVs renames custom logical volumes based on the provided name and daemon instance, skipping non-LVM pools and handling errors gracefully.
2015	patchLvmNodeSpecificConfigKeys updates LVM pool configs across all nodes in a transaction, deleting old keys and adding new ones.
2016	GetHTTPClient retrieves HTTP client or error if not set.
2017	do sends HTTP request using bakeryClient if available, otherwise uses http client
2018	RawQuery constructs a URL and invokes rawQuery with the specified method, URL, data, and ETag, returning the response and any errors encountered.
2019	RawWebsocket returns a websocket connection and an error for a given path
2020	RawOperation forwards method, path, data, and ETag to queryOperation and returns Operation, response string, and error.
2021	ProfileToAPI converts a Profile object to an api.Profile object.
2022	Profiles retrieves project-specific profiles or defaults, querying the database and handling transactions.
2023	ProfileGet fetches a profile by project and name, returning its ID and API representation along with an error if not found.
2024	ProfilesGet retrieves API profiles for specified projects and names, handling transactions and default projects.
2025	ProfileConfig fetches profile configuration based on project and name, returning a map of settings or an error if not found.
2026	ProfileConfigClear deletes config entries related to a given profile ID in transactions.
2027	ProfileConfigAdd inserts config into database for given profile ID and returns error if failed
2028	ProfileContainersGet retrieves container names by project and profile, returning a map of project names to container names and an error if the operation fails.
2029	ProfileCleanupLeftover deletes unused profiles from database tables and returns error if failed
2030	ProfilesExpandConfig combines multiple profile configurations into a single map, overriding with a given configuration.
2031	ProfilesExpandDevices combines device lists from multiple profiles with a given list, prioritizing the latter.
2032	GetServer fetches server details, sets certificate fingerprint if missing, adds TLS auth method if needed, caches the result, and returns server info, etag, and error.
2033	UpdateServer sends a PUT request to update a server with given details and ETag, returning an error if unsuccessful.
2034	HasExtension checks if a protocol has a specific extension returning true if found or false otherwise
2035	GetServerResources fetches server resources using the "resources" API extension, returning the parsed resources or an error if the extension is missing or the request fails.
2036	UseProject sets project name in ProtocolLXD instance and returns updated server configuration
2037	sqliteOpen opens a SQLite database with a specified path and sets a busy timeout.
2038	Rebalance updates Raft cluster by promoting a spare node to a database node if possible, returning the address and updated list of Raft nodes.
2039	Promote node to database node, replace raft nodes, join raft cluster, and unlock cluster database.
2040	Purge removes a node from the database by ID and handles errors during transaction.
2041	List retrieves cluster members, updates their status based on offline threshold and version compatibility, and returns the updated list.
2042	Count will return the number of nodes in the cluster and an error if the transaction fails
2043	Enabled checks if a node has any Raft addresses and returns true if so, along with any errors encountered during the process.
2044	membershipCheckNodeStateForBootstrapOrJoin verifies node state before bootstrapping or joining a cluster, returning an error if inconsistencies are detected
2045	membershipCheckClusterStateForBootstrapOrJoin verifies single node existence during bootstrap/join, returning error if inconsistent.
2046	membershipCheckClusterStateForAccept verifies cluster node details and returns an error if node exists or versions mismatch.
2047	membershipCheckClusterStateForLeave verifies a node can leave by checking it has no containers/images and isn't the last node in the cluster.
2048	membershipCheckNoLeftoverClusterCert verifies directory for leftover cluster certificates and returns an error if found
2049	ConfigLoad retrieves node configuration from the database, validates it using a schema, and returns a Config object along with any errors encountered.
2050	Replace updates config with given values and returns updated string map or error.
2051	Patch config with given values and update accordingly.
2052	HTTPSAddress fetches configuration from a database transaction and retrieves the HTTPS address, returning it along with any errors encountered.
2053	CertificatesGet retrieves all certificates from the database and returns them along with any errors encountered.
2054	CertificateGet retrieves a certificate by fingerprint and returns CertInfo or an error if not found.
2055	CertSave inserts a certificate into the database and returns an error if it fails.
2056	CertDelete removes a certificate by fingerprint and returns an error if failed
2057	CertUpdate updates certificate details in the database and returns an error if the operation fails
2058	createDevLxdlListener creates a Unix socket listener at a specified directory path, removes any stale sockets, sets permissions, and handles errors during creation.
2059	raftInstance.Servers returns a list of servers and an error if not leader
2060	Shutdown raft instance with timeout, log errors, and close logs store.
2061	raftNetworkTransport sets up a network transport for Raft using given parameters and returns the transport, handler, and layer along with an error.
2062	raftConfig adjusts raft.Config durations based on latency and sets threshold values.
2063	raftMaybeBootstrap will initialize a Raft cluster if no existing state is found
2064	CPUResource gathers CPU threads and constructs a resource object with socket details.
2065	MemoryResource reads system memory stats from /proc/meminfo and calculates used memory.
2066	GetOperationUUIDs fetches operation URLs, extracts UUIDs, and returns them along with any errors.
2067	GetOperations fetches all operations from the server and returns them as a list.
2068	GetOperation retrieves an operation by UUID, returning the operation object, ETag, and any errors encountered.
2069	GetOperationWebsocket constructs a URL path for an operation websocket and connects using the protocol's websocket method.
2070	tryMount attempts to mount filesystem up to 20 times with a delay before retrying returns error if mounting fails after retries
2071	lxdUsesPool checks if a storage pool exists with a specific driver and property, returning its name and a bool indicating success or failure along with an error if applicable
2072	ProjectURIs filters projects by name and retrieves URIs using SQL queries.
2073	ProjectList filters projects based on name, retrieves details using SQL queries, and populates additional fields before returning the list.
2074	ProjectGet retrieves a project by name, returning it if unique or an error if none or multiple match.
2075	ProjectExists checks if a project exists by name, returning true if it does and an error if it doesn't or encounters another issue.
2076	ProjectCreate inserts a new project and returns its ID, handling duplicates and errors gracefully.
2077	ProjectUsedByRef filters projects by name, executes SQL query, and builds a map of project names to their values.
2078	ProjectRename updates a project's name and verifies exactly one row is affected.
2079	ProjectDelete executes a delete statement for a project by name and verifies exactly one row was affected.
2080	PasswordCheck verifies if provided password matches stored hash using scrypt algorithm and returns an error if verification fails.
2081	LoadCert loads a TLS certificate from a specified directory, prioritizing "cluster" over "server" if both exist, and returns the certificate information along with any loading errors.
2082	WriteCert saves certificate, key, and optional CA files to specified directory with given permissions.
2083	NewDaemon creates a new daemon instance with given configuration and OS.
2084	DefaultDaemon creates a new Daemon instance using default configuration and OS settings.
2085	AllowProjectPermission checks user permissions before allowing access to a project and returns a response accordingly.
2086	checkTrustedClient verifies client auth, returns error if unauthorized
2087	Authenticate checks TLS certificates, local sockets, and external auth for daemon access.
2088	Daemon's State returns a new state object encapsulating db, cluster, maas, os, and endpoints.
2089	UnixSocket retrieves LXD_SOCKET environment variable or defaults to daemon's OS var directory followed by "unix.socket".
2090	Stop will initiate the daemon shutdown process, logging errors and unmounting filesystems if necessary.
2091	setupExternalAuthentication configures external authentication with endpoint, public key, expiry, and domains, setting up clients, keys, and authorizers, and storing configuration.
2092	initializeDbObject initializes the local database, handles renaming if necessary, applies legacy patches, and opens the database node, returning a dump and any errors encountered.
2093	WriteJSON encodes body to JSON using w, captures output if debug, logs capture if debug enabled, returns encoding error.
2094	EtagHash will compute and return the SHA-256 hash of JSON-encoded data as a lowercase hexadecimal string, or an error if encoding fails
2095	EtagCheck verifies if request's ETag matches the data's hash, returning an error if they don't match.
2096	HTTPClient creates a custom HTTP client with optional TLS configuration and proxy support.
2097	IsRecursionRequest checks if http request contains non-zero "recursion" parameter
2098	GetListeners will return network listeners inherited from parent process an error will be returned if environment variables are invalid
2099	internalSQLGet handles SQL queries, validates database input, starts a transaction, dumps data, and returns the result.
2100	internalSQLPost handles SQL queries, validates them, executes them, and returns results in batches.
2101	CertInfo's PublicKey method extracts the certificate data and encodes it as PEM format.
2102	certInfo will return private key in PEM format or nil if unsupported key type
2103	CertInfo.Fingerprint generates and returns a certificate fingerprint from the public key, panicking if invalid.
2104	GenCert generates certificates and keys, creating necessary directories, and saves them to specified files.
2105	PrintServerInfo will print server information and return an error if failed
2106	LaunchContainers will launch containers in batches, starting, and freezing them based on flags, returning the total duration and any errors encountered
2107	CreateContainers launches containers in batches, calculates duration, handles errors.
2108	GetContainers retrieves user-configured containers from LXD server.
2109	StartContainers starts multiple containers in batches, logs progress, and measures total duration.
2110	setQueryParam updates URI query parameter and returns updated URI string with escaped value
2111	GetImages retrieves all images using a GET request and returns them as a list or an error.
2112	GetImageFile forwards request to GetPrivateImageFile with fingerprint and empty string
2113	GetImageSecret retrieves a secret using an image fingerprint and returns it along with any errors encountered.
2114	GetPrivateImage retrieves an image by fingerprint and optional secret, returning the image data, ETag, and an error.
2115	GetPrivateImageFile retrieves a private image file using fingerprint and secret, returning the response or an error.
2116	GetImageAliases fetches image aliases and returns them along with any errors encountered.
2117	tryCopyImage will initiate image copying to multiple URLs, handling aliases for older servers and aggregating results from all targets.
2118	CopyImage will transfer an image from a source server to the current server, handling authentication, aliases, and public status.
2119	UpdateImage sends a PUT request to update an image and returns an error if unsuccessful.
2120	DeleteImage sends a DELETE request to remove an image and returns the operation and any errors encountered.
2121	RefreshImage sends a refresh request for an image using its fingerprint and returns the operation and any errors encountered.
2122	CreateImageAlias sends a POST request to create an image alias and returns an error if unsuccessful.
2123	UpdateImageAlias sends a PUT request to update an image alias and handles errors.
2124	RenameImageAlias sends a POST request to update an image alias and returns an error if the request fails.
2125	DeleteImageAlias removes an image alias and returns an error if it fails
2126	Open will return a SQL database connection and an error if the database cannot be opened
2127	EnsureSchema updates the database schema, runs hooks, and backs up the database before applying changes.
2128	FilesystemDetect identifies the type of filesystem at a given path and returns the name or unknown type.
2129	Schema constructs a new schema using updates and applies freshSchema to it before returning.
2130	updateFromV37 updates configuration based on existing settings or does nothing if unclustered
2131	ArchitectureGetLocal fetches local architecture using Uname and returns it or default if failed.
2132	NewController connects to a MAAS server using provided URL, API key, and machine name, returning a controller instance or an error if connection fails.
2133	CreateContainer sets up a container with specified network interfaces and handles errors gracefully.
2134	DefinedContainer checks if a container exists by name and returns true if found, along with an error if the machine call fails.
2135	UpdateContainer updates network interfaces for a container by adding, removing, and updating them based on provided specifications.
2136	RenameContainer updates a container's name and returns an error if the operation fails
2137	DeleteContainer removes a container by name and returns an error if failed
2138	Add updates to schema
2139	ensureSchemaTableExists verifies and creates a schema table if it doesn't exist, returning an error if any step fails.
2140	queryCurrentVersion will return the highest recorded schema version and an error if any version hole is found
2141	ensureUpdatesAreApplied applies pending schema updates using a transaction, executing hooks and recording versions, returning errors if any step fails.
2142	checkSchemaVersionsHaveNoHoles verifies that consecutive schema versions are sequential, returning an error if any gaps are found.
2143	checkAllUpdatesAreApplied verifies database schema versions against applied updates, returning an error if mismatches are found.
2144	formatSQL will reformat SQL statements by replacing ", " with ",\n    " except for lines containing "UNIQUE" constraints.
2145	GetAllXattr retrieves all extended attributes for a given path and returns them as a map, handling errors if the attributes change during retrieval.
2146	GetErrno extracts the underlying errno from a given error, returning it along with a flag indicating success.
2147	Uname retrieves system information using syscall and converts it to a structured format.
2148	RegisterStmt assigns a unique code to a SQL statement and returns it.
2149	PrepareStmts prepares SQL statements for execution and returns a map of statement indices to prepared statements.
2150	NewGateway creates a Gateway instance with provided database, certificate, and optional settings, initializing it before returning.
2151	DialFunc returns a net.Conn to a given address using either a memory dialer or a network dialer with TLS certificate.
2152	Shutdown closes the database gateway, stops Raft if running, syncs and closes server, and resets memory dial.
2153	Sync method saves gateway's db state to disk, logging warnings on failure.
2154	Reset gateway state, clear database, replace raft nodes, update certificate, and reinitialize.
2155	LeaderAddress fetches the leader address from a gateway, either locally or via a remote raft node, with timeout and error handling.
2156	waitLeadership waits for the Raft node to become leader within a timeout, returning an error if it does not achieve leadership.
2157	currentRaftNodes retrieves the list of Raft nodes from the gateway, converting them to a structured format and handling potential errors gracefully.
2158	cachedRaftNodes retrieves raft node addresses from the database, returning them and an error if the fetch fails
2159	dqliteMemoryDial creates a DialFunc that connects to a unix socket using a given listener.
2160	DqliteLog logs messages at different levels, prepending "Dqlite:" to the format string and using appropriate logging functions based on the log level.
2161	MetadataAsMap converts response metadata to a map interface.
2162	MetadataAsOperation converts response metadata to operation object
2163	MetadataAsStringSlice converts response metadata to a string slice.
2164	MetadataAsStruct unmarshals JSON metadata into target struct and returns error
2165	Load CSV file into report, line by line, add records, log success
2166	Write CSVReport to file, log success, return error if failed
2167	AddRecord appends a CSV record with current timestamp, duration, label, unused field, and success status to the report.
2168	LoadConfig reads a YAML config file, decodes it into a Config object, sets defaults, applies static remotes, and upgrades users to the "simplestreams" protocol if necessary.
2169	SaveConfig creates a copy of the config, removes static remotes, saves it to a YAML file, and handles errors during copying, file creation, marshalling, and writing.
2170	ChrootLoader.Get resolves a path, validates it against a base directory, reads the file, and returns a reader or an error.
2171	ConfigPath constructs a full configuration path by combining the config directory with additional paths provided.
2172	ServerCertPath retrieves server certificate path for a given remote.
2173	NewConfig creates a Config instance with specified directory and optional default settings.
2174	checkForPreDumpSupport will determine if pre-dump support is enabled and return the maximum iterations allowed for pre-dumping
2175	migrationSourceWs preDumpLoop performs CRIU pre-dump, sends data, reads stats, calculates skipped pages, updates final status, and sends sync message.
2176	newRoot creates a root command for LXD code generation with a placeholder implementation.
2177	APIExtensionsCount calculates total API extensions count, adding artificial bump if set.
2178	SelectURIs executes a SQL statement, retrieves column names, and constructs URIs using a provided function, returning them along with any errors encountered.
2179	SelectStrings executes a SQL query, retrieves strings from a single column, and returns them along with any errors encountered.
2180	scanSingleColumn executes a SQL query using a transaction, iterating over results and applying a scan function to each row, returning an error if any occur.
2181	LazyHandler transforms a handler by evaluating lazy functions in the record's context and logs the result.
2182	Callers retrieves a trace of caller functions and returns them as a slice.
2183	name extracts the function name from a call stack pointer, returning "?" if unavailable
2184	TrimBelow removes elements from the trace before the specified call.
2185	TrimAbove removes elements from the trace above the specified call.
2186	TrimBelowName removes all traces before the specified name and returns the updated trace.
2187	TrimAboveName removes traces above the specified name in a trace.
2188	TrimRuntime removes runtime traces from a trace object.
2189	GetCaps retrieves the "security.capability" extended attribute from a given path and returns its byte representation or an error if unsuccessful.
2190	SetCaps converts path and caps to C strings, applies VFS namespace capabilities, and returns an error if unsuccessful.
2191	Read data using ProgressReader, track progress, update tracker, return bytes read and error
2192	Supported checks if quota is supported for a given path and returns a bool and error
2193	GetProject retrieves a project ID from a given path using CGo, returning an error if unsuccessful.
2194	SetProject sets a project ID using a given path and returns an error if it fails
2195	DeleteProject removes a project by unsetting it from the path and its quota, returning an error if either operation fails.
2196	GetProjectUsage retrieves disk usage for a project by ID and path, returning the size in bytes or an error.
2197	SetProjectQuota sets the project quota for a given ID and path using CGo and returns an error if unsuccessful.
2198	backupLoadByName retrieves a backup by name, loads its associated container, and returns the backup details along with any errors encountered during the process.
2199	backupCreate creates a backup, handles existing backups, loads the backup, and manages storage errors
2200	Rename updates a backup's name and cleans up old directories.
2201	backup.Delete will call doBackupDelete with state, name, and container name and return the result
2202	backupFixStoragePool updates backup.yaml files in storage pools, changing the pool name as specified.
2203	Count executes a SQL query to count rows in a specified table, applying optional conditions, and returns the count or an error.
2204	CountAll retrieves row counts for all tables in a database and returns them in a map with table names as keys.
2205	InitTLSConfig initializes a TLS configuration with specific cipher suites and settings.
2206	copyContainerThinpool creates a snapshot, generates a new UUID, and handles Btrfs-specific unmounting
2207	copyContainerLv will copy a container or snapshot from source to target, optionally making the target read-only and limiting bandwidth.
2208	copyContainer will copy a container from source to target using appropriate method based on storage pool configuration and refresh flag, applying template on target if successful
2209	copyVolume creates target mount point, copies volume using appropriate method, returns error if failed
2210	GetPrivateImage will always return nil, empty string, and an error indicating private images are unsupported by the protocol
2211	GetPrivateImageFile will return an error indicating private images are unsupported by the protocol
2212	GetImageAliasNames retrieves image alias names from simplestreams and returns them along with any errors encountered.
2213	ProtoRecv reads a binary message from a WebSocket connection and unmarshals it into a protocol buffer message.
2214	ProtoSend sends a protobuf message over a websocket connection.
2215	ProtoSendControl sends a control message over WebSocket indicating success or failure based on an error.
2216	stdinMirror reads data into buffer, handles escape sequence, disconnects console on specific condition
2217	doContainersGetFromNode attempts to fetch containers from a specified node using a given project and certificate, with a timeout after 30 seconds.
2218	Retry attempts to execute a function up to 5 times, logging errors and retrying on retriable ones.
2219	IsRetriableError checks if an error is retriable based on specific SQLite and disk I/O error messages.
2220	AppArmorProfile reads current profile and returns trimmed contents or empty string on error
2221	StoragePoolVolumeCreate creates a BTRFS storage volume, mounts the pool, and applies quotas if specified.
2222	ContainerStorageReady checks if a Btrfs subvolume exists for a given container.
2223	ContainerCreateFromImage creates a BTRFS storage volume for a container using an image, handles mounting and snapshots, and applies templates.
2224	Renames a BTRFS storage snapshot from old name to new name.
2225	Create empty BTRFS snapshot volume and mount point symlink.
2226	btrfsSubVolumesDelete will delete all sub-subvolumes under a given subvolume and then delete the subvolume itself, returning an error if any deletion fails
2227	isBtrfsSubVolume checks if a given path points to a Btrfs subvolume by verifying its inode number
2228	SelectConfig retrieves configuration from a database table based on a query, returning a map of keys to values and an error if the operation fails.
2229	UpdateConfig updates database table with given values and deletes specified keys, returning error if any operation fails
2230	deleteConfig deletes rows from a specified table based on given keys and returns an error if the operation fails
2231	FormatSection will add a header followed by indented content, separating sections with blank lines
2232	GetProjects retrieves all projects from the server, returning them as a list and an error if the "projects" API extension is missing or fetching fails.
2233	GetProject fetches a project by name, returning the project data, ETag, and an error if the "projects" API extension is missing or the request fails.
2234	CreateProject sends a POST request to create a project and returns an error if the "projects" API extension is missing or the request fails.
2235	UpdateProject updates a project with the given name, project details, and ETag, returning an error if the "projects" API extension is missing or if the update fails.
2236	RenameProject sends a POST request to rename a project and returns the operation and error.
2237	Read reads data from a reader, retries on EAGAIN and EINTR errors.
2238	Writer's Write method retries on EAGAIN or EINTR errors.
2239	NewCanceler creates a new Canceler instance and initializes its request channel map with a mutex lock.
2240	Cancelable checks if there are pending cancel requests.
2241	Canceler's Cancel method closes all cancel channels and removes requests if cancellation is allowed, returning an error if not possible.
2242	CancelableDownload sends HTTP request, returns response, cancel channel, and error if download is canceled
2243	clusterGet retrieves cluster info, sets server name, checks clustering status, and returns response.
2244	clusterGetMemberConfig retrieves cluster member configuration keys from storage pools and networks, excluding volatile properties, and returns them along with descriptions.
2245	clusterPutDisable closes the cluster DB, updates TLS config, resets cluster state, reopens DB, stops tasks, and removes cluster flag
2246	tryClusterRebalance attempts to connect to the cluster leader and initiate a rebalance operation, returning an error if any step fails.
2247	internalClusterPostRebalance redirects requests to the cluster leader and promotes a spare node if available.
2248	internalClusterPostPromote handles promotion request, decodes JSON, performs sanity checks, promotes nodes, and returns response
2249	Filters extracts object names from a package scope based on a given entity prefix, splits them by "And", sorts the results by descending length, and returns them.
2250	Parse will return a mapping of a struct's fields and an error if the struct is not found
2251	findStruct looks up a struct type by name in a given scope and returns it if found, otherwise returns nil
2252	parseStruct will extract all fields from a nested struct and return them along with an error if parsing fails
2253	GetProfileNames fetches profile URLs, extracts names, and returns them with an error if failed.
2254	GetProfiles retrieves all profiles using a GET request and returns them as an array along with any errors encountered during the process.
2255	GetProfile fetches a profile by name, returning the parsed profile data, its ETag, and any errors encountered.
2256	CreateProfile sends a POST request to create a profile and returns an error if failed
2257	UpdateProfile sends a PUT request to update a profile with the given name, profile data, and ETag, returning an error if unsuccessful.
2258	RenameProfile sends a POST request to rename a profile and returns an error if unsuccessful
2259	Load populates a Map with a given schema and values, returning an updated Map and any errors encountered.
2260	Dump maps schema keys to their values, excluding defaults and hidden ones.
2261	Map.GetRaw retrieves a value by name, using default if not found.
2262	Map.GetString retrieves a string value using a key after asserting the key type.
2263	GetBool retrieves a boolean value from the map using the specified name after asserting the key type.
2264	GetInt64 retrieves an int64 value from a map using a key after asserting the key type and converting the raw value to int64.
2265	update updates map entries, returns updated keys and error if any
2266	set updates a map entry if the value differs, triggering setters as needed and normalizing booleans
2267	DoesSchemaTableExist checks if a schema table exists in a SQLite database and returns a boolean along with an error if the query fails.
2268	selectSchemaVersions retrieves schema versions from the database in ascending order and returns them as integers, or an error if the query fails.
2269	selectTablesSQL retrieves table names from SQLite database excluding schema and internal tables.
2270	createSchemaTable will execute a SQL statement to create a table named "schema" with columns "id," "version," and "updated_at," and ensure "version" is unique, returning an error if the operation fails
2271	insertSchemaVersion updates database schema version with current timestamp
2272	NewState creates a new State instance with provided dependencies.
2273	containerLXCUnload removes finalizer and releases resources associated with the container.
2274	containerLXCInstantiate creates a new containerLXC instance using provided state and args.
2275	initStorage initializes container storage if not already set.
2276	OnNetworkUp updates device hostname and configures VETH device.
2277	setupHostVethDevice configures host veth device, sets up network limits, and routes, returning an error if any step fails
2278	getLxcState retrieves container state, returns STOPPED for snapshots, waits up to 5 seconds for state update, or FROZEN if timeout occurs.
2279	StorageStartSensitive initializes container storage and starts snapshot or mounts container based on operation type, returning success status and error.
2280	deviceExistsInDevicesFolder checks if a device exists in the devices folder using a given prefix and path
2281	createDiskDevice creates a disk device, handles source paths, checks permissions, initializes storage, and mounts the filesystem, returning the device path or an error.
2282	setNetworkRoutes updates network routes based on device configuration, flushing existing static routes and adding new ones for both IPv4 and IPv6.
2283	containerLXC Path constructs and returns the path for a container based on its project, name, and snapshot status.
2284	maasInterfaces extracts network interfaces and their subnets from container devices, returning a list of ContainerInterface objects along with an error if any device details are missing.
2285	getSystemHandler returns a system handler based on syslog configuration and debug mode
2286	findNvidiaMinor retrieves Nvidia GPU minor number from /proc/driver/nvidia/gpus/<pci>/information or uses alternative method if primary fails
2287	GetLogger configures a logger with syslog, logfile, verbosity, debugging, and a custom handler, returning the configured logger and any errors encountered.
2288	SetLogger replaces the current logger with a new one and returns a function to restore the original logger.
2289	WaitRecord waits for a log record from channel ch or times out after duration timeout, returning the received record or nil if timed out.
2290	AddContext adds context to a logger if possible, returning the modified logger or the original if unsuccessful.
2291	NewDottedVersion will return a DottedVersion object and an error if the version format is incorrect
2292	Parse will extract and return a DottedVersion from a version string, or an error if parsing fails.
2293	Stringifies a dotted version number based on major, minor, and optional patch.
2294	Compare two version numbers and return the comparison result
2295	projectCreateDefaultProfile adds a default profile to the database for a given project
2296	projectChange updates project settings, validating config and handling feature changes while ensuring data integrity.
2297	projectIsEmpty returns true if the project has no users or only the default user.
2298	GetCertificateFingerprints fetches and extracts certificate fingerprints from the server response.
2299	GetCertificates retrieves all certificates using an API query and returns them along with any errors encountered.
2300	GetCertificate retrieves a certificate by fingerprint, returning the parsed certificate, its ETag, and any errors encountered.
2301	CreateCertificate sends a POST request to create a certificate and returns an error if failed
2302	UpdateCertificate updates a certificate on the server if the "certificate_update" extension is available.
2303	DeleteCertificate sends a DELETE request to remove a certificate by fingerprint and returns an error if unsuccessful.
2304	containerMetadataTemplatesGet retrieves a container's metadata templates, lists them if no specific template is requested, or serves a specific template file.
2305	containerMetadataTemplatesPostPut handles POST/PUT requests to update container templates, validating existence and writing new ones.
2306	containerMetadataTemplatesDelete deletes a specified template for a container and returns a response
2307	getContainerTemplatePath constructs the path to a template file within a container, validating the filename does not contain slashes.
2308	Error method constructs a descriptive error message based on the error name, value, and reason.
2309	ErrorList's Error method returns a string describing the list, either "no errors" or the first error followed by a count of additional errors.
2310	add appends an error to ErrorList with name, value, and reason.
2311	UpdateSchema updates both cluster and node database schemas, returning an error if either update fails.
2312	doProfileUpdateCluster updates cluster profiles for containers, reporting failures if any container update fails while saving the profile change.
2313	doProfileUpdateContainer updates container configuration based on profiles and returns an error if the update fails
2314	getProfileContainersInfo retrieves container info from the database for a specified project and profile, returning a list of ContainerArgs and an error if the operation fails.
2315	GetNetworkNames retrieves network names from the server, returning them as a list and an error if the "network" API extension is missing or if fetching/parsing fails.
2316	GetNetworks fetches all networks from the LXD server and returns them as an array of api.Network objects, or an error if the "network" API extension is missing or the request fails.
2317	GetNetwork fetches network details by name, returning the network object, ETag, and an error if the "network" extension is missing or the request fails.
2318	GetNetworkLeases retrieves network leases for a given network name, returning them and an error if the operation fails.
2319	GetNetworkState fetches the state of a network by name and returns the API representation along with an error if the operation fails.
2320	CreateNetwork sends a POST request to create a network if the "network" API extension is available.
2321	UpdateNetwork updates a network configuration and returns an error if the "network" API extension is missing or the request fails.
2322	RenameNetwork sends a POST request to rename a network if the "network" API extension is available.
2323	Open initializes a SQL database using a DQLite driver and stores it in a specified location.
2324	URLEncode encodes path and query parameters into a URL string, returning the encoded URL and an error if parsing fails.
2325	IsUnixSocket checks if a path points to a Unix socket file.
2326	HostPath adjusts file paths for snap packages, resolving relative paths and ensuring snap-aware prefixes.
2327	FileMove renames a file, copies if rename fails, then deletes original. Returns error if both operations fail.
2328	DirCopy will recursively copy a directory from source to dest, removing dest if it exists and creating it anew, then copying all files and subdirectories.
2329	StringMapHasStringKey checks if a map contains any of the given string keys and returns true if found.
2330	TextEditor opens a specified or temporary file in a user's preferred text editor, reads back the edited content, and returns it along with any errors encountered during the process.
2331	WriteTempFile creates a temporary file with specified directory, prefix, and content, returning the file name and an error if any occurs.
2332	RenderTemplate processes a template string with a context, executes it, and recursively renders nested templates until none remain.
2333	Every creates a schedule that returns a fixed interval after skipping the first execution if specified.
2334	StoragePoolMount checks if the storage pool source is absolute, locks the mount operation, waits for ongoing operations, prepares a loop device if necessary, and returns success.
2335	Dump will generate a SQL dump of a database schema and optionally data based on the provided transaction and schema details, returning the dump string and any encountered errors.
2336	dumpTable generates SQL INSERT statements for all rows in a specified database table.
2337	ProjectHasProfiles checks if a cluster transaction has profiles associated with a given name and returns a boolean result along with any encountered errors.
2338	ProjectNames retrieves project names from the database and returns them along with any errors encountered during the fetch operation.
2339	ProjectMap queries database for project IDs and names, returning them as a map with errors if any.
2340	ProjectHasImages checks if images feature is enabled for a given project and returns a boolean and an error
2341	ProjectUpdate updates a project's details and config, returning an error if any step fails.
2342	GetCluster fetches cluster info from server, returns data, ETag, and error if clustering extension missing
2343	UpdateCluster updates cluster settings and returns operation or error based on server extensions and request parameters
2344	GetClusterMemberNames retrieves cluster member names from the server, returning them as a list or an error if clustering is unsupported.
2345	GetClusterMembers fetches cluster members from the server, returning a list of members and an error if the operation fails.
2346	GetClusterMember retrieves a cluster member by name, returns its details and ETag, or an error if clustering is unsupported.
2347	RenameClusterMember checks clustering extension and updates cluster member details.
2348	Disconnect removes event listener and updates state.
2349	CompareVersions compares two version tuples and returns an integer indicating their relationship or an error if they are inconsistent.
2350	HasClientCertificate checks if client certificate and key files exist and returns true if both are present.
2351	GenerateClientCertificate checks if client cert exists, generates if not, returning error if failed
2352	LoadModule checks if a kernel module exists, loads it if not, and returns an error if loading fails.
2353	Parse will analyze a package name and return an AST representation of the Go source files, ignoring errors related to unresolved symbols.
2354	Endpoints.PprofAddress returns the address of the pprof listener or an empty string if not available
2355	Endpoints.PprofUpdateAddress updates the pprof address, attempts to listen on the new address, and handles errors by reverting to the old address if necessary.
2356	NewMethod creates a Method instance with specified parameters and returns it along with any errors encountered during package retrieval.
2357	Generate will process a method based on its kind and write to a buffer, returning an error if the method kind is unknown.
2358	fillSliceReferenceField fills a reference field in a slice, fetching objects and updating them based on keys.
2359	StoragePoolID retrieves a single storage pool ID by name, returning an error if none or more than one pool exists.
2360	StoragePoolIDsNotPending fetches IDs and names of non-pending storage pools, returning them as a map and an error.
2361	StoragePoolNodeJoin updates storage pool node entry and wraps error if failed
2362	StoragePoolNodeJoinCeph inserts new node's Ceph volumes and configs based on existing node's data.
2363	StoragePoolConfigAdd adds a storage pool configuration to a cluster transaction and returns an error if the operation fails.
2364	StoragePoolCreatePending creates a pending storage pool if it doesn't exist or updates it if it does, associating it with a node and applying configuration.
2365	StoragePoolCreated updates the state of a storage pool in the cluster transaction.
2366	StoragePoolErrored updates the state of a specified storage pool in a cluster transaction and returns an error if the operation fails.
2367	StoragePoolNodeConfigs fetches node configurations for a given storage pool ID and returns them as a map, errors if pool not defined on some nodes
2368	StoragePoolsGetDrivers retrieves unique storage pool drivers from the database and returns them as a list, or an error if none found.
2369	StoragePoolGetID fetches the ID of a storage pool by name, returning -1 and an error if not found.
2370	StoragePoolGet retrieves storage pool details by name, returning ID, driver, description, state, configuration, status, and locations.
2371	storagePoolNodes retrieves node names associated with a given storage pool ID, returning them and any errors encountered during the database transaction.
2372	StoragePoolConfigGet retrieves configuration settings for a given pool ID and returns them as a map.
2373	StoragePoolCreate inserts a new storage pool and configures it, returning the ID or an error.
2374	storagePoolConfigAdd inserts config entries into storage_pools_config table for given pool and node IDs, skipping empty values
2375	StoragePoolUpdate updates a cluster's storage pool with new description and configuration, returning an error if any operation fails.
2376	StoragePoolConfigClear deletes entries from storage_pools_config where poolID matches and nodeID either matches or is null
2377	StoragePoolDelete removes a storage pool by name, returning the deleted pool and an error if unsuccessful.
2378	StoragePoolVolumesGetNames fetches names of volumes from a specified pool and node, returning them as a list or an error if retrieval fails.
2379	StoragePoolVolumesGet fetches storage volumes for a project and pool, filtering by types, and returns them along with any errors encountered during the process.
2380	StoragePoolNodeVolumesGet retrieves storage volumes based on pool ID and types, returning an array of storage volumes and an error.
2381	storagePoolVolumesGet retrieves storage volumes based on project, pool ID, node ID, and volume types, returning them or an error if none found
2382	StoragePoolVolumesGetType retrieves volume names based on project, type, pool ID, and node ID.
2383	StoragePoolVolumeSnapshotsGetType fetches snapshot names matching criteria and returns them as strings.
2384	StoragePoolNodeVolumesGetType retrieves storage volumes of a specific type and pool ID, returning their types as strings and an error if unsuccessful.
2385	StoragePoolVolumeGetType retrieves storage volume details based on project, volume name, type, and pool/node IDs, returning volume ID, storage volume object, and error.
2386	StoragePoolNodeVolumeGetType forwards the request to StoragePoolNodeVolumeGetTypeByProject with default project.
2387	StoragePoolNodeVolumeGetTypeByProject fetches storage volume details based on project, volume name, type, and pool ID, returning volume ID, details, and error.
2388	StoragePoolVolumeUpdate updates a volume's configuration and description within a cluster transaction, returning an error if any step fails.
2389	StoragePoolVolumeDelete deletes a volume from a cluster and replicates the deletion across nodes.
2390	StoragePoolVolumeRename renames a volume in a cluster and updates the database.
2391	storagePoolVolumeReplicateIfCeph replicates volume changes across Ceph nodes if necessary, applying a given function to each volume ID
2392	StoragePoolVolumeCreate creates a volume on specified nodes, handles Ceph-specific logic, and configures the volume. Returns the volume ID or -1 on error.
2393	StoragePoolVolumeGetTypeID retrieves a volume ID based on project, name, type, pool ID, and node ID, returning an error if not found.
2394	StoragePoolNodeVolumeGetTypeID forwards volume details to StoragePoolVolumeGetTypeID with default pool name.
2395	StoragePoolVolumeTypeToName converts a volume type to its corresponding name and returns an error if the type is invalid.
2396	DevicesAdd inserts devices and their configurations into the database using transactions.
2397	Devices retrieves device details based on project and query name, returning a map of device configurations.
2398	Patches will return a list of patch names and an error if the database query fails
2399	PatchesMarkApplied inserts a patch record into the database with the current timestamp and returns an error if failed.
2400	entityType constructs a fully qualified entity name by capitalizing the entity and optionally prefixing it with the package name.
2401	entityPost will return a pluralized version of the input entity followed by "Post"
2402	stmtCodeVar constructs a variable name based on entity, kind, and optional filters
2403	destFunc generates a Go function string based on input slice, type, and fields
2404	CompareConfigs identifies differences between two configuration maps, excluding specified keys, and returns an error if any discrepancies are found.
2405	CopyConfig creates a deep copy of a configuration map.
2406	NewNotifier creates a notifier function based on cluster state and policy, sending notifications to online peers asynchronously.
2407	Events sets up event listeners and updates them asynchronously, scheduling periodic execution every second.
2408	eventsConnect establishes an event listener connected to a specified address using TLS certificates, listens to all projects' events, and returns an error if connection fails.
2409	StoragePoolInit initializes storage core and returns error if failed
2410	getAAProfileContent generates AppArmor profile content based on container configuration, applying various features and restrictions accordingly.
2411	AALoadProfile updates AppArmor profile if necessary and loads it.
2412	AADestroy checks AppArmor state and unloads policy if necessary.
2413	AAParseProfile checks if AppArmor is available and runs a command to parse a profile if so.
2414	getSystemHandler returns a log handler based on syslog, debug mode, and log format
2415	NotifyUpgradeCompleted sends a notification to all clients when an upgrade completes, returning an error if the notification fails.
2416	KeepUpdated updates state asynchronously every 5 minutes.
2417	maybeUpdate checks if a cluster node needs updating, triggers an update if necessary, and logs the process.
2418	NewServer creates a server instance with API credentials and authentication details, returning an error if setup fails.
2419	StartStatusCheck initiates periodic status checks, flushing cache if changes detected.
2420	SyncProjects updates RBAC with project data and maps identifiers.
2421	AddProject updates RBAC and project map with given id and name, returning error if update fails
2422	DeleteProject updates RBAC and removes project from map by ID.
2423	RenameProject delegates adding a project with specified ID and name to AddProject method.
2424	IsAdmin checks user permissions and returns true if the user has admin rights
2425	HasPermission checks user access to a project based on cached or synced permissions.
2426	rsyncSend sends a file over WebSocket, handles errors, and waits for completion.
2427	rsyncSendSetup sets up an rsync command with specified arguments and returns the command, connection, and error.
2428	tlsClientConfig generates a TLS configuration using provided certificate information, setting up client authentication with the specified key pair and CA certificates.
2429	tlsCheckCert verifies TLS cert validity and trust status
2430	internalClusterContainerMovedPost handles container mount point creation after moving, returning an error response if failed or an empty sync response otherwise
2431	containerPostCreateContainerMountPoint loads a container, retrieves its storage pool, gets snapshots, creates main mount point, and symlinks for snapshots. Returns error if any step fails.
2432	Devices.Contains checks if a device exists under a key and compares it to another device, returning true if they match.
2433	Update lists devices based on differences and return removed, added, updated maps and diff keys.
2434	DeviceNames sorts devices alphabetically and returns their names.
2435	Infof logs formatted messages using a global logger if available.
2436	Debugf logs a debug message using a specified format and arguments if a logger is available.
2437	Warnf logs a warning message using the provided format and arguments if the Log object is not nil.
2438	Errorf logs a formatted error message if a logger is available.
2439	Critf logs critical messages using a specified format and arguments.
2440	eventForward forwards events based on type and logs or broadcasts them accordingly
2441	StorageProgressReader wraps a reader with progress tracking based on operation details.
2442	StorageProgressWriter wraps a WriteCloser with progress tracking based on operation details.
2443	GetLSBRelease fetches OS release details from /etc/os-release or /usr/lib/os-release, returning a map and an error if not found.
2444	Reset updates Go package files with specified imports and outputs to a given path.
2445	Append appends a code snippet to a specified file or standard output, handling errors during generation and writing.
2446	Converts a container object to a container arguments object, initializing devices if nil.
2447	ContainerNames retrieves container names for a given project using a database query.
2448	ContainerNodeAddress retrieves a container's node address by project and name, returning an error if not found or if multiple nodes are associated.
2449	ContainersListByNodeAddress retrieves container names grouped by node addresses, filtering offline nodes.
2450	ContainerListExpanded fetches containers and profiles, expands their configurations and devices, and returns them.
2451	ContainersByNodeName retrieves container names mapped to node names based on project filter.
2452	SnapshotIDsAndNames retrieves container IDs and names matching a given prefix, returning them as a map.
2453	ClusterTx retrieves container list for regular nodes associated with local node name.
2454	ContainerNodeProjectList filters containers by project, node, and type, returning a list and an error.
2455	ContainerRemove deletes a container within a project transactionally.
2456	ContainerProjectAndName retrieves project and container names by ID, returning them along with any errors encountered.
2457	ContainerConfigClear deletes all related data for a given container ID in multiple tables and returns an error if any operation fails.
2458	ContainerConfigGet retrieves a config value for a given container ID and key from the database, returning the value and any errors encountered.
2459	ContainerConfigRemove deletes a configuration entry for a specific container and key, returning an error if unsuccessful.
2460	ContainerSetStateful updates the stateful status of a container in the database and returns an error if the operation fails.
2461	ContainerProfilesInsert inserts profiles for a container in a transaction, applying them sequentially.
2462	ContainerProfiles fetches container profiles by ID and returns them as strings.
2463	ContainerConfig retrieves a container's configuration as a map using a SQL query.
2464	ContainerSetState updates container state in database with transaction.
2465	ContainerUpdate updates container details in database with transaction, handling expiration date and ephemeral flag.
2466	ContainerLastUsedUpdate updates the last use date of a container in the database and returns an error if the operation fails.
2467	ContainerGetSnapshots retrieves snapshots for a container by project and name.
2468	ContainerGetSnapshotsFull fetches all snapshots for a container by project and name, returning them and an error if any.
2469	ContainerNextSnapshot will return the next available snapshot number based on project, container name, and pattern, or 0 if none found.
2470	ContainerPool retrieves the storage pool for a given project and container, returning an error if the object does not exist.
2471	ContainerGetBackup retrieves backup details for a specified container and project, returning an error if the object does not exist.
2472	ContainerGetBackups fetches backup names for a specific container in a project, returning them as a list or an error if retrieval fails.
2473	ContainerBackupCreate inserts a backup record and handles errors.
2474	ContainerBackupRemove deletes a container backup by name and returns an error if the operation fails
2475	ContainerBackupRename updates container backup name and logs query details
2476	ContainerBackupsGetExpired fetches expired container backups and returns their names.
2477	DefaultOS creates and initializes a new OS object with default directory paths and sets up an Inotify watch.
2478	Init initializes OS settings, detects filesystem, sets paths, and configures security modules.
2479	GetWebsocket retrieves a WebSocket connection using an operation ID and secret.
2480	Refresh updates operation with latest version from remote storage.
2481	CancelTarget cancels the associated target operation and returns an error if there is no associated operation.
2482	GetTarget fetches the associated target operation and returns it along with an error if none exists.
2483	Endpoints.up initializes server configurations, handles socket activation, starts listeners, and serves HTTP handlers based on configuration settings.
2484	Stop all listeners and tomb processes, log stopping messages, return error if any listener fails
2485	serveHTTP binds a server to a listener and logs the operation, deferring tomb creation until necessary.
2486	closeListener closes a specific listener and logs the address before returning an error if any.
2487	activatedListeners filters and maps systemdListeners based on their type, applying TLS to TCP listeners and categorizing them as local or network.
2488	CandidServer retrieves API URL, key, expiry, and domains from config.
2489	RBACServer retrieves RBAC-related configuration values from the Config instance.
2490	AutoUpdateInterval retrieves the auto-update interval from config and returns it in hours as a time.Duration.
2491	MAASController retrieves MAAS API URL and key from Config.
2492	OfflineThreshold retrieves cluster offline threshold duration from config.
2493	ConfigGetString retrieves a string value from the cluster configuration using a specified key.
2494	ConfigGetBool retrieves a boolean value from the cluster configuration using a specified key.
2495	ConfigGetInt64 retrieves an int64 value from a configuration using a cluster and key, returning the value and any errors encountered.
2496	ClusterAddress retrieves the address of the cluster endpoint safely.
2497	Debug logs a message with caller info using a logger if available.
2498	RestServer sets up and returns an HTTP server for a daemon, configuring routes and handling errors.
2499	projectParam extracts project parameter from request, defaults to "default" if not present
2500	queryParam retrieves the value of a specified key from the URL query parameters of an HTTP request, returning an empty string if the key does not exist or if there is an error parsing the query string.
2501	newDb creates a Cobra command for database-related code generation with sub-commands for schema and mapper.
2502	OperationType describes actions like creating, updating, or deleting containers, volumes, and more, returning a string describing the action.
2503	Permission based on operation type
2504	OperationsUUIDs retrieves UUIDs from operations table where node ID matches, returning them as strings with potential errors.
2505	OperationNodes retrieves distinct node addresses for a given project or all projects.
2506	OperationByUUID retrieves an operation by UUID, returning it if unique, or an error if not found or ambiguous.
2507	OperationAdd inserts or updates an operation record, returning affected rows and an error.
2508	OperationRemove deletes a row from the operations table based on UUID and returns an error if the deletion affects other rows than one.
2509	operations retrieves database rows based on a WHERE clause, mapping them to Operation structs and returning them along with any errors encountered.
2510	expireLogsTask schedules daily execution of log expiration operation
2511	absPath will return the absolute path of the given path relative to the root directory of the LXD tree source tree
2512	Schema.Keys returns sorted list of keys from schema
2513	Schema.Defaults returns a map of field names to their default values.
2514	mustGetKey retrieves a key from the schema by name, panicking if the key does not exist
2515	assertKeyType verifies if a schema key matches a specified type, panicking if there's a mismatch.
2516	validate will check a value against various types and constraints returning an error if invalid
2517	GetStoragePoolVolumes retrieves storage pool volumes and returns them along with an error if the operation fails
2518	GetStoragePoolVolume fetches a storage volume by pool, type, and name, returning the volume details, ETag, and an error if the storage extension is missing or the query fails.
2519	CreateStoragePoolVolume sends a POST request to create a storage pool volume and returns an error if the server lacks the necessary "storage" API extension or if the request fails.
2520	CreateStoragePoolVolumeSnapshot sends a POST request to create a storage pool volume snapshot and returns the operation and any errors encountered.
2521	GetStoragePoolVolumeSnapshots fetches storage pool volume snapshots and returns them along with an error if unsuccessful
2522	GetStoragePoolVolumeSnapshot fetches a storage pool volume snapshot and returns it along with its ETag and any errors encountered
2523	UpdateStoragePoolVolumeSnapshot sends a PUT request to update a storage pool volume snapshot and handles errors based on the response.
2524	MigrateStoragePoolVolume sends a POST request to migrate a storage pool volume and returns the operation result or an error.
2525	MoveStoragePoolVolume moves a storage volume between pools on the same server.
2526	UpdateStoragePoolVolume updates a storage pool volume with specified parameters and returns an error if the operation fails due to missing extensions or other issues.
2527	DeleteStoragePoolVolume deletes a storage pool volume and returns an error if the operation fails
2528	RenameStoragePoolVolume will rename a storage pool volume and return an error if the operation fails
2529	doStoragePoolCreateInternal will create or update a storage pool based on configuration and return an error if the operation fails
2530	containerGetParentAndSnapshotName splits a name into parent and snapshot, returning them along with a flag indicating if a snapshot was present
2531	containerLoadFromAllProjects retrieves all containers across projects and consolidates them into a single list, returning an error if any project load fails
2532	containerLoadNodeAll retrieves all container nodes from state and loads them internally
2533	containerLoadNodeProjectAll retrieves containers for a given project and loads them internally.
2534	heartbeatNode sends a heartbeat request to a specified address using TLS, encodes raftNodes as JSON, and handles the response asynchronously, returning an error if the request fails or the task context is canceled.
2535	dotPrefixMatch checks if short is a prefix of full split by dots
2536	storageZfs.ContainerMount will mount a container and return true if successful, along with an error if the operation fails
2537	ContainerStorageReady checks if a ZFS filesystem exists for a given container.
2538	AskChoice prompts user with a question and validates input against given choices, returning a valid answer or re-prompting if invalid.
2539	AskInt prompts user for an integer, validates it against min/max constraints, and returns the validated value or re-prompts if invalid.
2540	AskString asks user for a string, uses default if provided, validates input, and repeats until valid or non-empty.
2541	AskPassword prompts user for password twice, returning it if confirmed, else prompting again.
2542	AskPasswordOnce asks user for password once and returns it
2543	askQuestion will print a question and return a user's answer using a default if none provided
2544	readAnswer reads user input, trims newline, whitespace, and uses a default if empty
2545	profilePost renames a profile, validating input and checking for conflicts before updating the cluster database.
2546	profileDelete deletes a specified profile if it exists and is not in use, returning an error if the operation fails.
2547	IsRootDiskDevice checks if a device is a root disk by verifying its type, path, and source.
2548	GetRootDiskDevice identifies and returns the root disk device and its details from a map of devices, returning an error if more than one root device is found or none is found.
2549	ForwardedResponse creates a new forwardedResponse object with the given client and request.
2550	ForwardedResponseIfTargetIsRemote forwards HTTP requests to a remote target node if specified, handling errors gracefully.
2551	ForwardedResponseIfContainerIsRemote checks if container is remote, connects if needed, and returns forwarded response or error.
2552	ForwardedOperationResponse constructs a response object encapsulating an operation and project details.
2553	Done marks progress renderer as complete and prints a message if not in quiet mode.
2554	Update progress status with formatting and terminal handling
2555	Warn updates progress renderer with warning message and timeout, locks during update, and handles message truncation and formatting.
2556	UpdateProgress updates the progress renderer with the given text.
2557	UpdateOp updates progress renderer with operation metadata containing "_progress".
2558	updateFromV6 updates zfs pool configurations across all nodes, ensuring each node has a zfs.pool_name entry.
2559	localCreateListener creates a Unix socket listener at a specified path, removes stale sockets, sets access permissions, and handles errors gracefully.
2560	NewStmt creates a new statement with specified database, package, entity, kind, and configuration, returning it and any errors encountered.
2561	Generate outputs based on different types of statements, returning errors for unknown kinds.
2562	register will write SQL statement registration code to buffer
2563	`httpsLXD establishes an HTTPS connection to an LXD server using provided URL and connection arguments, returning a ContainerServer instance or an error.`
2564	IsActive checks container status and returns true if not stopped or errored.
2565	RaftNodeAddress retrieves a node's address by ID, returning an error if not found or more than one match exists.
2566	RaftNodeFirst inserts a node with specified address into the raft_nodes table and verifies the inserted ID is 1.
2567	RaftNodeAdd inserts an address into raft_nodes table and returns the affected rows and error
2568	RaftNodeDelete deletes a raft node by ID, returning an error if the node does not exist.
2569	RaftNodesReplace deletes existing raft_nodes and inserts new ones in a transaction.
2570	initCGroup sets up control group flags based on the existence of specific paths and logs warnings if they don't exist.
2571	sqliteDirectAccess configures SQLite connection for replication by setting journal mode to WAL, disabling automatic checkpoints, and preventing truncation or checkpointing on exit.
2572	ContainerGet retrieves a container by project and name, returning it if unique, or an error if none or multiple match.
2573	ContainerID retrieves a container's ID based on project and name, returning the ID and an error if not found or if more than one result is returned.
2574	ContainerExists checks if a container exists by attempting to retrieve its ID and returns a boolean indicating its presence along with any errors encountered.
2575	ContainsFields checks if all specified fields exist in the mapping with matching names and types.
2576	FieldByName searches for a field by name in the mapping and returns it if found, otherwise returns nil.
2577	FieldColumnName retrieves a field's column name based on its name and prepends the entity table name.
2578	FilterFieldByName retrieves a field by name, returning an error if unknown or not a column.
2579	ColumnFields filters out excluded columns and returns remaining column fields.
2580	ScalarFields filters and returns fields with a non-empty "join" configuration from the Mapping's Fields.
2581	RefFields extracts and returns all fields with slice or map types from Mapping.
2582	Field's Column returns its name in snake case, optionally prefixed with a join alias.
2583	ZeroValue returns default values for different types, panicking for unsupported types.
2584	FieldColumns converts a list of fields to a comma-separated string of column names.
2585	FieldArgs constructs a string representation of field arguments based on their names and types.
2586	FieldParams converts field names to lowercase and joins them with commas.
2587	FieldCriteria constructs SQL criteria from a list of fields.
2588	initDataClusterApply updates cluster config if enabled and returns error on failure
2589	JsonFormatEx configures JSON formatting based on pretty-printing and line separation, returning a custom formatter for structured log records.
2590	formatLogfmtValue converts various types to a log-friendly string representation, escaping non-string types and formatting floats and integers appropriately.
2591	ResolveTarget fetches a cluster member's address based on the given target name, returning the address and an error if the member does not exist.
2592	Write will write data to the underlying writer and update progress tracking if enabled
2593	updateNodeVersion updates node version in database, checks if one row affected, returns error if not
2594	selectNodesVersions retrieves node versions from a database transaction and returns them as a slice of pairs, along with any errors encountered.
2595	GetArchitectures retrieves local architecture ID and its personalities, returning a list of IDs and an error if any step fails.
2596	RuntimeLiblxcVersionAtLeast checks if LXC version meets specified minimum requirements.
2597	GetExecPath retrieves the executable path from LXD_EXEC_PATH env var or /proc/self/exe, defaulting to "bad-exec-path" if both fail.
2598	Connect establishes an LXD server connection using TLS credentials and optional notification.
2599	ConnectIfContainerIsRemote connects to a remote container server if specified, returns the connection and error if any.
2600	ConnectIfVolumeIsRemote connects to a remote volume server if necessary, returning an error if more than one node hosts the volume.
2601	SetupTrust connects to a target cluster, decodes a certificate, encodes it, creates a post request, calculates a fingerprint, and adds the client certificate to the trust store, handling errors appropriately.
2602	GetStoragePools retrieves storage pools from the LXD server, returning them as an array and an error if the operation fails.
2603	GetStoragePool fetches a storage pool by name, returning details and ETag or an error if the "storage" API extension is missing or the request fails.
2604	CreateStoragePool checks for necessary extensions and creates a storage pool via an API call.
2605	UpdateStoragePool sends a PUT request to update a storage pool and returns an error if the "storage" API extension is missing or the request fails.
2606	DeleteStoragePool deletes a storage pool by name, returning an error if the operation fails
2607	GetStoragePoolResources fetches storage pool resources by name and returns them or an error if the "resources" API extension is missing or the request fails.
2608	initDirs creates directories with specified paths and permissions, returning an error if initialization fails.
2609	query selects config from tx returning map and error
2610	UpdateConfig updates the configuration using a transaction and returns an error if unsuccessful
2611	query selects config from ClusterTx tx and returns map and error
2612	UpdateConfig updates configuration using transaction and returns error
2613	storagePoolClusterConfigForEtag removes specific keys from a configuration map and returns the modified version
2614	GetEvents sets up an event listener, manages connections, and dispatches events to registered handlers.
2615	LogfmtFormat generates a log format using key-value pairs and appends contextual information.
2616	StorageVolumeNodeAddresses retrieves node addresses based on filters, excludes current node's address, sorts them, and returns an error if none found.
2617	StorageVolumeNodeGet retrieves node name for given volume ID and returns error if not found
2618	StorageVolumeConfigGet retrieves configuration for a specific volume ID from the database and returns it as a map.
2619	StorageVolumeDescriptionGet retrieves a volume's description from the database by ID, returning an error if the volume does not exist.
2620	StorageVolumeIsAvailable checks if a Ceph volume is available on the same node by examining container devices.
2621	StorageVolumeDescriptionUpdate updates a volume's description in the database and returns an error if unsuccessful
2622	StorageVolumeConfigAdd inserts config entries into database for a given volume ID and returns an error if failed
2623	StorageVolumeConfigClear deletes config for a given volume ID in the database.
2624	storageVolumeIDsGet retrieves IDs of storage volumes based on project, name, type, and pool ID, returning them as int64 slices or an error.
2625	StorageVolumeCleanupImages deletes unused image volumes from the database based on given fingerprints.
2626	StorageVolumeMoveToLVMThinPoolNameKey updates config to use LVM thin pool name and deletes old entry, returning error if failed
2627	L appends formatted data to buffer and updates count
2628	code will return formatted source code and an error if formatting fails
2629	Pretty will format an input as JSON with indentation and return it as a string. If formatting fails, it returns the original input as a string.
2630	NetworkPublicKey retrieves the public key from the certificate stored in Endpoints.
2631	NetworkPrivateKey retrieves the private key from the certificate stored in Endpoints.
2632	NetworkCert retrieves the certificate information safely using a mutex lock.
2633	NetworkAddress retrieves the network address of the specified listener or returns an empty string if not available.
2634	NetworkUpdateAddress updates the network address, handles listeners, and logs changes.
2635	NetworkUpdateCert updates certificate info and configures network listeners.
2636	networkCreateListener creates a TCP listener with TLS enabled using the given address and certificate.
2637	Accept will return a TLS connection and an error if the listener fails to accept a connection
2638	networkListener updates its TLS configuration using provided cert info
2639	NodeInfo.IsOffline checks if a node is offline based on a heartbeat and a given threshold.
2640	NodeByAddress retrieves a node by address, returning an error if none or more than one match is found.
2641	NodePendingByAddress retrieves node info based on address, returning one if found, error otherwise.
2642	NodeByName fetches a single node by name, returning an error if none or multiple matches are found
2643	NodeName retrieves a unique node name from the database using its ID, returning an error if the ID is inconsistent.
2644	NodeAddress retrieves a unique node address from the database or returns an error if the ID is inconsistent.
2645	NodeIsOutdated checks if any cluster node has a newer version than the current node.
2646	NodesCount retrieves the count of nodes in the transaction and returns it along with an error if the operation fails.
2647	NodeRename checks if a new node name exists, updates the old name if unique, and verifies exactly one row was affected.
2648	nodes retrieves node information based on conditions, returning a list of NodeInfo structs and an error.
2649	NodeAdd inserts a node into the database and returns the number of affected rows and an error.
2650	NodePending updates a node's pending status and verifies exactly one row was affected.
2651	NodeUpdate updates node details in the database and returns an error if unsuccessful or if more than one row is affected.
2652	NodeRemove deletes a node by ID and verifies exactly one row was affected.
2653	NodeHeartbeat updates node heartbeat and verifies exactly one row was affected, returning an error if not.
2654	Check if cluster node has empty resources and return appropriate message.
2655	NodeClear deletes container, clears associated images, and removes unused images.
2656	NodeOfflineThreshold fetches the cluster offline threshold from config, returning a duration or an error.
2657	NodeUpdateVersion updates node version and returns error if failed
2658	Transaction starts a database transaction, executes a function, commits it, and handles errors gracefully.
2659	rollback attempts to rollback a database transaction and logs an error if it fails, returning the original reason
2660	ProfileURIs filters profiles by project and/or name, executes a SQL query, and returns matching URIs.
2661	ProfileGet retrieves a single Profile based on project and name, returning an error if none or multiple profiles match.
2662	ProfileExists checks if a cluster profile exists by ID and returns a boolean result along with any errors encountered.
2663	ProfileConfigRef filters cluster transactions by project and name, retrieves relevant data using SQL queries, and organizes results into a nested map structure indexed by project, name, key, and value.
2664	ProfileUsedByRef filters profiles by project and/or name, executes SQL queries, and builds an indexed map of results.
2665	ProfileCreate inserts a new cluster profile and its associated configurations and devices, returning the profile ID and an error if any step fails.
2666	ProfileRename updates a project's profile name and verifies exactly one row was affected.
2667	ProfileDelete deletes a project's profile and verifies exactly one row was affected.
2668	ServerTLSConfig sets up TLS configuration for a server, requiring client certificates and using specified certificates and protocols.
2669	NetworkInterfaceAddress retrieves the first non-loopback IP address of the system and returns it as a string. If no suitable address is found, it returns an empty string.
2670	IsAddressCovered checks if one IP address covers another based on host and port.
2671	SelectObjects executes a SQL statement, scans results into destination objects, and handles errors.
2672	DeleteObject deletes an object from a database table by ID, returning success and an error.
2673	loop manages a task execution based on a schedule, running it periodically or immediately as specified.
2674	IsTerminal checks if file descriptor represents a terminal by getting its state and returning true if no error occurs.
2675	socketUnixListen creates a Unix socket listener at the given path and returns the listener or an error
2676	socketUnixRemoveStale deletes stale Unix socket if exists
2677	socketUnixSetPermissions changes file permissions of a Unix socket and returns an error if it fails
2678	socketUnixSetOwnership sets the ownership of a Unix socket based on the provided path and group name, returning an error if unsuccessful
2679	cephOSDPoolExists checks if a Ceph OSD pool exists by running a command and returns true if successful.
2680	cephOSDPoolDestroy will delete an OSD pool in Ceph using the specified cluster, pool, and user credentials, returning an error if the operation fails.
2681	cephRBDVolumeExists checks if a Ceph RBD volume exists by running a command and returns true if successful, false otherwise.
2682	cephRBDSnapshotProtect will protect a RBD snapshot and return an error if protection fails
2683	cephRBDCloneCreate clones a RBD volume from source to target using specified details and user credentials.
2684	cephRBDSnapshotListClones will return a list of snapshots and an error if none are found
2685	cephRBDVolumeMarkDeleted renames a RBD volume to indicate deletion and returns an error if the operation fails
2686	cephRBDVolumeUnmarkDeleted renames a RBD volume by removing a suffix and handles errors during the rename operation
2687	cephRBDVolumeRename renames a Ceph RBD volume and returns an error if the operation fails
2688	cephRBDVolumeSnapshotRename renames a Ceph RBD snapshot using specified parameters and returns an error if unsuccessful
2689	cephRBDSnapshotDelete deletes a RBD snapshot and returns an error if the operation fails
2690	cephRBDVolumeCopy copies a volume in Ceph RBD using specified credentials and returns an error if unsuccessful
2691	cephRBDVolumeListSnapshots retrieves RBD snapshots for a given volume and returns their names or an error.
2692	getRBDSize retrieves volume size from config, converts to bytes, defaults to 10GB if empty, and returns the size in bytes.
2693	getRBDFilesystem retrieves filesystem type from volume config, pool config, or defaults to ext4
2694	copyWithoutSnapshotsFull creates a non-sparse RBD copy of a container volume to another container without snapshots, handles errors during copying and mapping, sets up the mount point, starts storage, applies a template, and logs the process.
2695	copyWithoutSnapshotsSparse creates a sparse copy of a RBD storage volume from source to target container without snapshots, handling snapshots, cloning, and template application.
2696	GetConfigCmd generates a Cobra command to retrieve and display Pachyderm's authentication configuration in JSON or YAML format, optionally disabling port forwarding.
2697	setConfigCmd sets Pachyderm's auth configuration from a file or stdin
2698	NewSharder creates a new sharder instance using the provided discovery client, number of shards, and namespace.
2699	NewRouter creates a new router instance with given sharder, dialer, and local address.
2700	renewUserCredentials updates user credentials using admin privileges and returns an error if unsuccessful
2701	NewLocalClient creates a local client with specified root directory, returning an error if creation fails.
2702	AddSpanToAnyExisting starts a new span if there's a parent span in the context, tags it with key-value pairs, and returns the new span along with the updated context. If no parent span exists, it returns nil and the original context.
2703	InstallJaegerTracerFromEnv configures Jaeger tracer based on environment variables, sets up logging, and installs it globally.
2704	UnaryClientInterceptor returns a gRPC client interceptor for OpenTracing integration, optionally adding traces based on configuration.
2705	StreamClientInterceptor returns a gRPC stream client interceptor using OpenTracing with optional tracing enabled.
2706	UnaryServerInterceptor returns a gRPC server interceptor for OpenTracing integration with optional trace addition.
2707	StreamServerInterceptor sets up gRPC server tracing using OpenTracing.
2708	CloseAndReportTraces closes the global tracer if possible and reports traces.
2709	newWriter initializes a Writer object with given context, client, prefix, and sets up internal buffers and hash.
2710	For sets the maximum elapsed time for constant backoff and returns the modified backoff instance.
2711	Log logs request, response, and error at appropriate level, reports metric asynchronously.
2712	FormatterFunc applies formatting to log entry and returns byte array and error
2713	NewGRPCLogWriter creates a new GRPCLogWriter instance with the given logger and source.
2714	Read reads configuration from a JSON file, creates a new one if missing, generates a UUID for UserID if absent, and saves the updated config.
2715	Write will serialize Config to JSON, save it to the appropriate path, and return an error if unsuccessful
2716	Read reads bytes from the reader and unmarshals them into the given protocol buffer message.
2717	Write serializes a protobuf message and writes it to the underlying writer.
2718	NewReadWriter creates a ReadWriter instance wrapping an io.ReadWriter.
2719	RunGitHookServer starts a git hook server using provided addresses and port, integrating with etcd and GitHub hooks.
2720	newLoggingPipe creates a logging pipe with client and server readers and writers, tee-ing data to buffers for logging.
2721	loggingConn Read wraps r Read
2722	Write logs to connection and return bytes written and error
2723	TestListener's Accept method retrieves a connection from a channel and returns it, or an error if Accept has been called before.
2724	Close closes the connection channel safely.
2725	errorf creates a hashTreeError with given code and formatted message
2726	InitWithKube initializes a service environment using Kubernetes configuration and starts a goroutine to initialize the kube client, returning the environment before it is fully ready.
2727	GetEtcdClient waits for etcd connection, panics if failed or not connected, returns the client
2728	GetKubeClient waits for Kubernetes connection, panics if failed or not connected, returns kube.Clientset
2729	NewHasher creates a Hasher instance with specified job and pipeline moduli.
2730	HashJob calculates a hash for a job ID using Adler-32 checksum and returns it modulo JobModulus.
2731	HashPipeline computes a hash for a pipeline name using Adler-32 and returns the result modulo PipelineModulus.
2732	Status retrieves worker statuses using clients and returns them along with any errors encountered.
2733	Cancel cancels jobs based on filters and returns an error if none match
2734	Conns retrieves gRPC client connections from etcd based on a pipeline RC name and worker GRPC port, returning a list of connections and an error if any step fails.
2735	Clients fetches connections and creates clients from them.
2736	NewClient creates a gRPC client using an environment-specified port and address, returning the client and any errors encountered.
2737	RunFixedArgs ensures exactly `numArgs` are passed to `run`, calling it or printing usage/error accordingly.
2738	RunBoundedArgs enforces command-line argument count and invokes provided function with bounded arguments, exiting on error.
2739	Run wraps a command function, executes it, and exits with an error message if an error occurs.
2740	ErrorAndExit formats an error message and prints it to stderr before exiting the program.
2741	ParseCommit extracts repository name and optional commit ID from a string, returning a Commit object or an error if the format is incorrect.
2742	ParseBranch extracts branch info from commit arg and returns a Branch object or an error.
2743	ParseFile extracts repo, commit, and path from a string and constructs a File object, returning an error if the format is incorrect.
2744	RepeatedStringArg's Set appends a string to the receiver and returns nil.
2745	SetDocsUsage modifies a Cobra command to display associated commands with padding based on the longest path.
2746	makeCronCommits manages cron jobs by creating commits at scheduled times, handling existing commits, and updating timestamps accordingly.
2747	TracingObjClient's Writer adds a span and delegates to its client.
2748	TracingObjClient's Reader adds a span, traces parameters, and delegates to Client's Reader.
2749	tracingObjClient's Delete method adds a tracing span, executes deletion, and finishes the span.
2750	tracingObjClient Walk adds a span to context, executes client walk, and finishes span
2751	TracingObjClient checks if a resource exists using a traced context.
2752	GetBlock encodes a hash using Base64 and returns a Block object with the encoded hash.
2753	Health checks server readiness and returns empty response or error
2754	split will return directory path and file name of a given path
2755	ValidatePath checks if a path contains only printable ASCII characters and allows globbing.
2756	MatchDatum checks if all filters match any datum path or hash in base64/hex encoding.
2757	NewCacheServer creates a cache server with specified router and shard count, initializing logger and local shard map, registering peer picker, and returning the server instance.
2758	authorizePipelineOp checks user permissions for input and output repositories based on the specified operation.
2759	sudo will execute a function with elevated privileges using a cached superuser token
2760	setPipelineDefaults sets default values for a pipeline, including image, branch, name, start time, repo, URL, cache size, resource requests, max queue size, and datum tries.
2761	incrementGCGeneration increments the GC generation key in etcd, creating it if it doesn't exist, and returns an error if the operation fails.
2762	NewDebugServer creates a new debug server instance with specified parameters.
2763	APIClient's Health method checks server health using gRPC and returns scrubbed error.
2764	newObjBlockAPIServer creates an API server instance with specified configurations, tests storage, initializes caches, registers stats, and starts GC watch.
2765	watchGC sets up an infinite retry loop to watch for changes in the generation number using etcd, updating the local state with the new generation number upon successful updates.
2766	splitKey appends generation to key based on length
2767	NewWriter creates a Writer instance wrapping a tab writer initialized with a header that must end with a newline, incrementing lines count.
2768	Write buffer to writer, flush if lines exceed terminal height, update line count, and return bytes written.
2769	PrintRepoHeader writes repository header or authentication header to writer based on flag.
2770	PrintRepoInfo prints repository information to writer w, including name, timestamps, size, and access level if available.
2771	PrintDetailedRepoInfo generates and prints detailed repository information using a Go template.
2772	PrintBranch writes branch name and head ID to writer, or "-" if no head exists
2773	PrintCommitInfo prints commit details to writer with optional full timestamps and size info.
2774	PrintDetailedCommitInfo prints commit details using a Go template, formatting various fields like repository name, commit ID, branch, description, parent commit, timestamps, size, and provenance.
2775	PrintFileInfo outputs file details including commit ID, path, type, timestamp, and size to a writer.
2776	PrintDetailedFileInfo will print file details using a template and return an error if the template execution fails
2777	Add prepends a tilde and ancestor count to a string.
2778	RetryNotify will execute an operation, retrying with exponential backoff and notifying on errors until successful or stopped.
2779	MergeCache retrieves data by ID, writes it using a writer, applies a filter, and handles errors gracefully.
2780	MergeCache deletes an item by ID and returns an error if unsuccessful.
2781	PrintJobInfo outputs job details to writer w, including timestamps, restarts, data metrics, and state.
2782	PrintPipelineInfo outputs pipeline details to writer based on timestamps and state.
2783	PrintWorkerStatus outputs worker status details to writer based on provided flags
2784	PrintDetailedJobInfo will print detailed information about a job using a Go template, formatting various fields like ID, pipeline, parent job, timestamps, state, and resource requests/limits.
2785	PrintDetailedPipelineInfo prints formatted pipeline information using a Go template.
2786	PrintDatumInfo outputs datum info to writer including ID, state, and total time.
2787	PrintDetailedDatumInfo prints detailed information about a datum including its ID, job ID, state, data sizes, total time, and various times in a tabular format.
2788	PrintFile writes file details to writer in a specific format.
2789	ShorthandInput converts ppsclient.Input to a shorthand string representation.
2790	Retrieve AWS credentials from Vault, validate, convert to strings, update lease, and renew asynchronously.
2791	IsExpired checks if vault lease has expired based on last renewal and duration.
2792	NewBranch creates a new branch object for a given repository and branch name.
2793	NewCommit creates a new commit object with specified repository name and ID.
2794	NewCommitProvenance creates a CommitProvenance object with specified repoName, branchName, and commitID.
2795	NewFile creates a new pfs File object with specified repoName, commitID, and path.
2796	CreateRepo sends a request to create a repository using APIClient and handles GRPC errors.
2797	InspectRepo retrieves repository info using APIClient and handles errors.
2798	APIClient ListRepo sends request to list repos and returns repo info or error
2799	DeleteRepo deletes a repository with optional force flag and returns an error if failed
2800	BuildCommit constructs a commit using provided repo, branch, parent, and tree object, returning the resulting commit and any errors encountered.
2801	StartCommitParent initiates a commit with a specified parent and branch, returning the created commit or an error.
2802	FinishCommit sends a finish commit request to the PfsAPIClient and returns any errors after scrubbing them.
2803	InspectCommit sends a request to retrieve information about a specific commit in a repository and returns the commit details along with any errors encountered.
2804	APIClient.BlockCommit fetches finished commit info for a specified repository and commit ID.
2805	APIClient's ListCommit fetches commit info for a repo, filtering by range and number, returning the results or an error.
2806	ListCommitF fetches commits from a repository and applies a callback function to each commit info, handling errors and breaking on specific conditions.
2807	APIClient's ListCommitByRepo fetches commit info for a specified repository using ListCommit method.
2808	APIClient creates a branch with given repository, branch name, commit, and provenance, returning an error if unsuccessful.
2809	InspectBranch retrieves branch info for a given repo and branch, returning an error if unsuccessful.
2810	APIClient.ListBranch fetches branch info for a given repo name and handles gRPC errors.
2811	APIClient sets branch for repository using createBranch method
2812	DeleteBranch sends a request to delete a branch in a repository with optional force flag and returns an error if failed.
2813	DeleteCommit sends a request to delete a commit in a repository and returns an error if unsuccessful.
2814	APIClient flushes commits to repositories and returns commit info iterator with error handling.
2815	FlushCommitF sends commits to repositories, processes commit info using a callback, and handles errors.
2816	APIClient FlushCommitAll commits to repositories returning commit info and error
2817	SubscribeCommit will initiate a commit subscription for a specified repository, branch, and state, returning an iterator and any errors encountered.
2818	APIClient subscribes to commit events in a repository, processing each commit info using a callback function and handling errors gracefully.
2819	APIClient's PutObjectAsync method creates a new PutObjectWriteCloserAsync instance using provided tags and returns it along with any errors encountered during creation, scrubbing gRPC errors.
2820	APIClient's PutObject uploads object using reader, handles tags, and returns object and bytes written, scrubbing errors.
2821	APIClient's PutObjectSplit reads from a reader, writes to a split object writer, and returns objects, bytes written, and any errors encountered during the process.
2822	GetObject fetches an object using a hash and writes it to a writer, returning an error if unsuccessful.
2823	GetObjectReader fetches a reader for an object using a given hash, handling errors and context cancellation.
2824	APIClient retrieves objects using provided hashes, offset, size, and total size, writing them to a specified writer.
2825	TagObject applies tags to an object using the API client, returning an error if unsuccessful.
2826	ListObject iterates over objects using a callback function and handles errors gracefully.
2827	InspectObject fetches object info using API client and handles errors.
2828	APIClient retrieves a tag using ObjectAPIClient, writes response to writer, and handles errors.
2829	GetTagReader fetches a tag reader for a given tag, returning a stream and an error.
2830	ListTag retrieves tags using a callback function and handles streaming responses.
2831	Compact will call ObjectAPIClient's Compact method with a context and empty request, returning any errors encountered.
2832	NewPutFileClient creates a PutFileClient using APIClient, handling errors with grpcutil.ScrubGRPC.
2833	putFileClient uploads file content overwriting existing content at specified index
2834	Close client connection and return scrubbed gRPC error
2835	CopyFile copies a file from source repo/commit/path to destination repo/commit/path, optionally overwriting existing files, returning an error if the operation fails.
2836	APIClient.GetFile fetches a file from a repository using gRPC, handles rate limiting, and streams the response to a writer.
2837	APIClient's GetFileReader fetches file content using API, handles errors, and returns a reader for streaming bytes.
2838	APIClient retrieves file read-seeker for specified repository, commit, and path.
2839	APIClient InspectFile invokes inspectFile to retrieve file info from a repository commit path.
2840	APIClient ListFile retrieves file info for specified repo, commit, and path.
2841	APIClient.ListFileHistory retrieves file history for a specified repository, commit, path, and number of history entries, returning a list of FileInfo objects and any errors encountered.
2842	ListFileF retrieves file info from a repository using an API client, processing each item with a callback function and handling errors gracefully.
2843	Walk repo files, apply callback, handle errors.
2844	DeleteFile sends a request to delete a file at a specified path in a repository using the PFS API and returns an error if unsuccessful.
2845	Write bytes asynchronously, buffer overflow handles gracefully, errors scrubbed before returning.
2846	Close sends buffer to channel, closes it, waits for errors, and returns gRPC scrubbed errors.
2847	PrettyPrintVersionNoAdditional formats a version number into a human-readable string.
2848	recursiveBlockQuoteExamples will recursively add block quotes around examples in a command tree
2849	errMissingField generates an error response indicating a missing required field.
2850	validateFields checks request data against schema, returning an error for unknown fields
2851	putConfig stores a config object in logical storage, returning an error if unsuccessful
2852	getConfig retrieves configuration from storage, decodes JSON, and returns it or an error.
2853	Serve starts gRPC servers with specified options, validates configurations, sets up TLS if enabled, registers services, listens on ports, and handles graceful shutdowns.
2854	NewPuller creates and returns a Puller instance with initialized error channel and empty pipes map.
2855	PullTree traverses a hash tree, downloading files using a client, and handles concurrency with a limiter and errgroup.
2856	Push uploads files from a directory to a Pachyderm repository, optionally overwriting existing files.
2857	PushObj uploads files from a Pachyderm commit to an object storage system, using concurrency control.
2858	PushFile uploads a file by comparing chunks and overwriting existing data if necessary.
2859	APIClient's Dump method writes debug information to a writer, handling errors gracefully.
2860	APIClient sends a profiling request with a specified profile name and duration, writing the response to a writer while scrubbing any errors.
2861	APIClient's Binary method fetches binary data using a debug client, writes it to a writer, and handles errors by scrubbing gRPC details.
2862	RegisterCacheStats registers cache stats with Prometheus, ignoring redundant registration errors.
2863	wait decrements counter n times using mutex and condition variable
2864	RunWorkload executes tasks using a worker, submits them to a client, and verifies successful completion of all jobs.
2865	createRepo generates a random repository name, creates it via API, appends to worker's repos list, starts the first commit, and records the commit.
2866	advanceCommit manages worker's commit state, either finishing a random started commit or starting a new one parented from a finished commit, ensuring no empty commits.
2867	RandString generates a random string of specified length using given randomness source.
2868	NewReader creates a reader with a random seed and specified byte count.
2869	iterDir traverses a BoltDB directory, applying a function to each key-value pair and returning an error if traversal fails.
2870	FSSize retrieves the size of the file system by fetching the root node and returning its subtree size.
2871	Diff compares two hash trees, executing a callback function on differing nodes.
2872	Serialize writes database hash tree to writer using protocol buffer encoding.
2873	Deserialize reads data from a reader into a dbHashTree, handling buckets and key-value pairs efficiently.
2874	Copy method creates a hash tree copy using serialization and deserialization, returning an error if either process fails.
2875	Destroy will close the database connection and remove the associated file path returning an error if either operation fails
2876	putFileOverwrite will put a file overwriting existing data and return an error if unsuccessful
2877	PutDirHeaderFooter updates directory header and footer, validating path and ensuring consistent state.
2878	putFileHeaderFooter will store file header and footer using putFile method
2879	deleteDir removes directory entries under given BoltDB transaction and path, returning an error if deletion fails
2880	NewReader creates a Reader instance wrapping a given io.Reader and applying a Filter.
2881	Read will return a MergeNode containing key-value pairs after filtering based on a condition, or an error if reading fails
2882	NewWriter creates a new Writer instance wrapping the given io.Writer.
2883	Write merges a node, marshals it, updates size, appends indices, and writes keys and values.
2884	Copy data from reader to writer until EOF, returning error if any occurs
2885	Index will return serialized byte array and an error if serialization fails
2886	GetRangeFromIndex reads from a reader, finds a range based on a prefix, and returns the lower and upper bounds along with an error.
2887	NewFilter creates a filter function that checks if a key corresponds to a specific tree index.
2888	PathToTree cleans input path and converts it to tree structure with given number of trees.
2889	Merge combines readers into a single writer, merging streams and writing results.
2890	dbHashTree.Hash will execute a batch operation on a BoltDB transaction to canonicalize data starting from an empty path, returning an error if the process fails
2891	IsGlob will determine if a pattern matches a glob expression and return a boolean result
2892	GlobLiteralPrefix removes glob patterns from the start of a string and returns the cleaned prefix.
2893	GetHashTreeObject retrieves a hash tree object using Pachyderm API client and storage root, returning the hash tree and an error if the operation fails.
2894	GetHashTreeTag fetches a hash tree tag using a Pachyderm client and returns the resulting HashTree object along with any errors encountered.
2895	PutHashTree serializes a hash tree, uploads it using a pipe, and returns the resulting object reference.
2896	NewChildCursor creates a cursor for a child directory in BoltDB, cleaning the path and seeking the appropriate key-value pair.
2897	Next retrieves key-value pairs from a cursor, filtering by directory prefix.
2898	NewOrdered creates an Ordered filesystem object with a cleaned root directory, initializes a node, appends it to fs and dirStack, creates directories recursively, sets root, and returns the object.
2899	MkdirAll constructs directory hierarchy by splitting path and inserting directories in reverse order.
2900	putDir updates the directory structure for a given path, cleaning and validating the input before recursively updating nodes.
2901	Serialize ordered data structure to writer, updating hashes and subtree sizes recursively.
2902	NewUnordered creates a new unordered data structure with a given root directory and an empty node map.
2903	Ordered converts unordered file system paths to ordered structure
2904	revokeUserCredentials revokes a user's credentials using admin privileges and returns an error if unsuccessful
2905	NewAPIServer creates and returns a new API server instance with specified version and options.
2906	String converts version details to a formatted string.
2907	getPipelineInfo retrieves pipeline info from etcd using Pachyderm client, validates response, sets auth token, updates spec commit ID, and returns pipeline details.
2908	removeStr removes a string from a slice and returns true if successful
2909	PublicCertToPEM converts a TLS certificate to PEM format.
2910	GenerateSelfSignedCert creates a self-signed TLS certificate for the given address and name, incorporating specified IP addresses.
2911	ActivateCmd configures authentication for Pachyderm, setting up the initial admin and exchanging GitHub tokens for Pachyderm tokens, while providing warnings about losing robot tokens.
2912	DeactivateCmd creates a Cobra command to deactivate Pachyderm authentication, confirming deletion of all auth info before proceeding.
2913	LoginCmd sets up a Cobra command to log in to Pachyderm using either OTP or GitHub token, handles authentication, and writes the token to configuration.
2914	LogoutCmd creates a Cobra command to log out of Pachyderm by clearing the session token in the configuration file.
2915	WhoamiCmd creates a Cobra command to print user identity details, including username, session expiration, and admin status, while handling metrics and port forwarding options.
2916	CheckCmd creates a Cobra command to verify user access to a repository based on specified permissions.
2917	GetCmd creates a Cobra command to retrieve ACL or user access to a repository, handling both single and dual argument scenarios while connecting to a Pachyderm client.
2918	setScopeCmd configures user access permissions for a repository in Pachyderm
2919	ListAdminsCmd creates a Cobra command to list cluster admins, handles metrics and port forwarding options, and prints admin usernames.
2920	ModifyAdminsCmd creates a Cobra command to modify cluster admins, accepting flags to add or remove users, and handles errors related to partial activation or gRPC issues.
2921	GetAuthTokenCmd creates a command to retrieve an authentication token for a user, handling options for metrics, port forwarding, and quiet mode.
2922	UseAuthTokenCmd reads a Pachyderm auth token from stdin and writes it to the current user's config file, returning an error if unsuccessful.
2923	Cmds creates and returns a list of auth-related cobra commands.
2924	ParseScope will return a scope and an error if the scope is not recognized
2925	IsErrNotActivated checks if an error is due to not being activated.
2926	IsErrPartiallyActivated checks if an error contains a specific message related to partial activation.
2927	IsErrNotSignedIn checks if an error indicates the user is not signed in by looking for specific error message content.
2928	IsErrBadToken checks if an error contains a specific message related to a bad token.
2929	IsErrNotAuthorized checks if an error is due to unauthorized access.
2930	IsErrInvalidPrincipal checks if an error indicates an invalid principal format.
2931	IsErrTooShortTTL checks if an error message indicates the provided TTL is shorter than the existing TTL.
2932	NewDatumFactory creates a DatumFactory based on input type and returns an error if unrecognized.
2933	NewCollection creates a new collection instance with the given parameters and ensures the prefix ends with a trailing slash.
2934	Path combines collection's prefix with a given key using path joining.
2935	getIndexPath retrieves the index path for a given value, field, and key.
2936	getMultiIndexPaths retrieves multiple index paths from a collection based on a given value, index, and key.
2937	Upsert updates or inserts a key-value pair, checking types, applying a function, and then storing the value.
2938	`get retrieves a key-value pair from etcd using options and returns the response or error.`
2939	List iterates over key-value pairs, unmarshals them into a message, and applies a callback function after trimming the prefix.
2940	Watch will create and return a watcher using the collection's context, etcd client, and template with optional options.
2941	WatchByIndex sets up a watcher for changes at a specific index, returning a channel of events and an error if the watcher cannot be created.
2942	WatchOne creates a watcher for a specific key in a readonly collection and returns it along with an error if any.
2943	WatchOneF sets up a watcher for a single key and invokes a callback for each event, returning an error if the watcher fails or the context is canceled.
2944	Get retrieves cached file by key, returns reader and error if not found
2945	Cache.Keys will return sorted list of cache keys
2946	Clear will remove all cached files and reset keys map
2947	NewHTTPServer creates an HTTP server with routes for file, service, login, and logout handlers, returning the server instance and an error.
2948	NewDeployServer creates a deploy APIServer using kubeClient and kubeNamespace.
2949	Export pulls images using Docker client and exports them to writer, returning errors if unsuccessful.
2950	Import will load and push Docker images based on provided options and authentication configurations
2951	DatumTagPrefix hashes the input salt using SHA-256 and returns the first four bytes as a hexadecimal string.
2952	NewPFSInput creates a new PFS input object with specified repository and glob pattern.
2953	NewPFSInputOpts creates a new PPS input configuration with specified parameters.
2954	NewJobInput creates a JobInput object with specified repoName, commitID, and glob pattern.
2955	NewPipelineInput creates a new pipeline input with specified repo name and glob pattern.
2956	CreateJob sends a pipeline and output commit to create a job and returns the job and any errors.
2957	APIClient ListJob fetches job information based on pipeline and commit details, returning a list of JobInfo and an error if unsuccessful.
2958	ListJobF retrieves jobs for a given pipeline and processes them using a callback function, returning an error if any issues occur during retrieval or processing.
2959	FlushJob sends commits and pipelines to a job processing system, receives job info, and applies a callback function to each job, returning an error if any step fails.
2960	APIClient's FlushJobAll sends commits to specified pipelines and collects job info results.
2961	APIClient's DeleteJob method sends a request to delete a job using its ID and handles any GRPC errors gracefully.
2962	StopJob sends a stop request for a job using the APIClient and returns any GRPC errors scrubbed.
2963	RestartDatum sends a request to restart a datum job using the APIClient.
2964	ListDatum fetches datum data for a job, returning total pages, current page, and datum info list.
2965	ListDatumF fetches datum information using a stream, applying a callback function to each item, and handles errors gracefully.
2966	InspectDatum fetches datum info using job and datum IDs, returning parsed data or an error.
2967	Next advances LogsIter, updating msg and err, returning true if successful.
2968	InspectPipeline fetches details of a pipeline using its name and handles gRPC errors.
2969	ListPipeline retrieves pipeline info using API client and handles errors.
2970	DeletePipeline deletes a pipeline using the API client, returns an error if failed
2971	APIClient starts a pipeline by name and returns an error if failed
2972	StopPipeline stops a pipeline by name and returns an error if the operation fails.
2973	RerunPipeline sends a rerun request for a pipeline with specified commits to include and exclude, returning an error if the request fails.
2974	CreatePipelineService sends a request to create a pipeline service with specified parameters and handles errors.
2975	GetDatumTotalTime calculates total time from download, process, and upload durations in ProcessStats.
2976	Mount mounts a filesystem using an API client, handles signals for unmounting, and serves the mounted filesystem.
2977	NewBufPool creates a buffer pool with specified size, returning a pointer to the pool.
2978	StorageRootFromEnv retrieves the storage root directory from environment variables, removing leading slashes for certain backends.
2979	BlockPathFromEnv constructs a path from environment storage root and block hash.
2980	NewGoogleClient creates a Google Cloud Storage client with specified bucket and options, returning a Client instance and an error if creation fails.
2981	NewGoogleClientFromSecret creates a Google client using secret files for bucket and credentials, returning the client and an error if any file is missing.
2982	NewGoogleClientFromEnv creates a Google client using environment variables for bucket and credentials, returning the client and an error if either variable is missing.
2983	NewMicrosoftClientFromSecret reads secrets from files and creates a Microsoft client.
2984	NewMicrosoftClientFromEnv creates a Microsoft client using environment variables for container, ID, and secret, returning an error if any variable is missing.
2985	NewMinioClientFromSecret reads secrets from files and creates a MinIO client with them.
2986	NewMinioClientFromEnv retrieves MinIO client credentials from environment variables and creates a new MinIO client instance.
2987	NewAmazonClientFromSecret constructs an Amazon client using secret files for configuration, retrieving region, bucket, and credentials, and optionally reversing behavior.
2988	NewAmazonClientFromEnv creates a new Amazon client using environment variables for region, bucket, credentials, and distribution, returning an error if any required variable is missing.
2989	NewClientFromURLAndSecret creates a client based on the URL's store type and secret, returning the client and an error if unrecognized.
2990	ParseURL will return an ObjectStoreURL and an error if the URL is not properly formatted
2991	NewClientFromEnv creates a client based on the storage backend specified in the environment, using the given storage root if necessary, and returns it along with any errors encountered.
2992	NewExponentialBackOffConfig creates an exponential backoff configuration with specific settings for initial interval, multiplier, and max interval.
2993	Close the reader while adding a trace span.
2994	Close method closes the writer, ignores ignorable errors, and returns others
2995	IsRetryable checks if an error is retryable either network-wise or by client policy.
2996	RunStdin forwards stdin and arguments to RunIO for processing.
2997	RunIODirPath executes a command with specified arguments, stdin, stdout, stderr, and working directory, capturing errors and debugging output.
2998	NewAuthServer initializes an AuthServer instance with given environment, etcd prefix, and public flag, setting up collections for various resources and starting goroutines for token retrieval, admin watching, SAML service, and configuration monitoring.
2999	expiredClusterAdminCheck verifies user admin status and cluster enterprise token state, returning an error if conditions are not met.
3000	getOneTimePassword generates a unique code, stores it with expiration, and returns it
3001	hashToken will return a SHA-256 hash of the input token as a hexadecimal string
3002	getAuthToken retrieves an authentication token from the context, returning an error if none or multiple are found
3003	canonicalizeSubjects will return a list of canonicalized subjects and an error if any subject cannot be canonicalized
3004	Matches checks if actual string matches expected regex pattern and logs error if not.
3005	OneOfMatches verifies if any actual string matches the expected regex pattern and reports failure if none do.
3006	Equal compares two values and reports an error if they are not equal, using the provided message and arguments.
3007	NotEqual asserts two values are not equal, reporting an error if they are.
3008	oneOfEquals checks if an element exists in a slice, returning true if found and an error if the slice is invalid
3009	NoneEquals verifies if none of the actual values match the expected value and logs an error if they do.
3010	NoError asserts no error occurred, logs fatal error message if an unexpected error is received.
3011	NoErrorWithinT will execute a function and verify it does not produce an error within a specified duration, reporting an error if either condition is not met
3012	NoErrorWithinTRetry will retry a function until it succeeds or times out, returning an error if it fails within the specified duration
3013	YesError asserts that an error is present, failing the test if none is found.
3014	NotNil asserts an object is not nil and reports failure if it is.
3015	Nil checks if an object is nil and reports an error if it is not.
3016	False asserts that a value is false, reporting an error if it is not.
3017	NewSTM creates a serializable transaction using STM and applies changes.
3018	NewDryrunSTM creates a dry-run STM and returns an error if it fails
3019	newSTMRepeatable creates a transactional repeatable STM and applies a function to it, returning the response and any errors.
3020	newSTMSerializable creates a STM transaction and runs it with given apply function and dryrun flag returning TxnResponse and error
3021	newSTMReadCommitted initiates a transactional read operation using STM with serializable isolation level and applies a given function before committing.
3022	stmReadCommitted commit resets rset and returns TxnResponse from stm commit
3023	Pipelines creates a collection using etcd client and specified prefix.
3024	Jobs retrieves a collection of job information from etcd using the provided client and prefix.
3025	NewTicker creates a new Ticker instance with the given backoff strategy, starts a goroutine to run it, and sets a finalizer to stop it when garbage collected.
3026	nodeToMap converts etcd Node to map, updating keys and values, and returns if anything changed
3027	ServiceAccount creates a v1 ServiceAccount with specified options.
3028	ClusterRole constructs a new rbacv1.ClusterRole based on given options.
3029	RoleBinding constructs a new RoleBinding resource with specified options.
3030	GetSecretEnvVars constructs environment variables based on storage backend and predefined mappings, returning them as v1.EnvVar slices.
3031	PachdService creates a Service resource with Prometheus annotations and specific ports for various services.
3032	GithookService creates a Service resource for Git hooks in a specified namespace.
3033	EtcdDeployment constructs an Kubernetes Deployment for etcd with specified CPU and memory requests, optional host path volume, and configurable image.
3034	EtcdStorageClass generates a StorageClass object based on backend options, returning an interface and error.
3035	EtcdVolume generates a PersistentVolume based on the specified backend, host path, name, and size, returning an error if the backend is unsupported.
3036	EtcdNodePortService creates a NodePort service for etcd based on local flag and asset options, setting client port accordingly.
3037	EtcdHeadlessService creates a headless service for etcd with specified options.
3038	EtcdStatefulSet generates a Kubernetes StatefulSet manifest for deploying etcd, configuring resources, storage, and network settings based on provided options and backend specifics.
3039	DashDeployment constructs an app Deployment for a specified asset with containerized services.
3040	DashService creates a Service resource with specified ports and selectors.
3041	WriteSecret encodes a secret using the provided encoder and options, returning an error if unsuccessful.
3042	GoogleSecret converts bucket and cred strings into a byte map with keys "google-bucket" and "google-cred".
3043	WriteDashboardAssets encodes dashboard service and deployment assets using the provided encoder, returning an error if encoding fails.
3044	WriteLocalAssets encodes assets using a specified encoder and options, writing them to a local backend with a given host path and volume size, and also handles secrets.
3045	WriteCustomAssets handles asset writing based on object store and disk backend configurations, validating arguments and calling appropriate backend functions.
3046	WriteAmazonAssets encodes assets, sets credentials based on options, and writes them with a secret.
3047	WriteGoogleAssets encodes assets using Google backend and writes secret with provided credentials.
3048	WriteMicrosoftAssets encodes assets using a specified backend and writes secrets for Microsoft resources.
3049	Images constructs a list of image strings based on AssetOpts and predefined images.
3050	AddRegistry prepends a registry to an image name, removing a potential leading part if present.
3051	withCanonicalRandomizationFactor adjusts RandomizationFactor between 0 and 1
3052	Reset sets the exponential backoff interval to initial and updates the start time to current time.
3053	incrementCurrentInterval updates the backoff interval, doubling it or setting to max if overflow occurs
3054	NewBlockAPIServer creates a BlockAPIServer based on the specified backend, adjusting directory paths as needed and returning an error if creation fails.
3055	LocalStorage retrieves working directory, creates local client, and initializes storage object.
3056	deleteJob updates job count in pipeline and deletes job from storage
3057	writeXML sets headers, writes status, encodes XML data logging errors
3058	clean1_7HashtreePath prepends a slash if missing and cleans the path before appending the default root
3059	NewFromAddress creates a new APIClient instance using the provided address and optional configuration settings, establishing a connection with specified timeouts and limits.
3060	getUserMachineAddrAndOpts retrieves the user machine address and options based on environment variables and configuration, returning an error if unsuccessful.
3061	NewInCluster creates a new APIClient using environment variables for PACHD_SERVICE_HOST and PACHD_SERVICE_PORT.
3062	Close APIClient connection and port forwarder if present, returning any errors encountered.
3063	DeleteAll will deactivate authentication, delete all PPS data, delete all PFS data, and return an error if any operation fails
3064	APIClient sets maximum concurrent streams using a limiter
3065	WithCtx sets a new context for APIClient and returns the updated client.
3066	NewDLock creates an etcd distributed lock implementation with given client and prefix.
3067	APIServer generates a unique ID for given input data using SHA-256 hash and file paths.
3068	runUserErrorHandlingCode will execute user-defined error handling commands, log execution time, handle process state, and manage I/O errors, returning any encountered issues.
3069	HashDatum computes a SHA-256 hash of input data combined with pipeline details, returning a tagged hash string.
3070	HashDatum15 generates a hash for pipeline info and data, incorporating environment variables, file paths, hashes, and other identifiers.
3071	APIServer.Status retrieves worker status including job ID, worker name, start time, data, and queue size.
3072	APIServer.Cancel handles job cancellation requests, validates job ID and data filters, cancels the job if valid, resets server state, and returns success response.
3073	mergeStats combines two ProcessStats objects, adding download and upload times and bytes, returning an error if duration addition fails
3074	mergeChunk logs start/finish, merges chunks, caches results, handles stats
3075	IsCommitNotFoundErr checks if an error indicates a missing commit by matching against a regex pattern after scrubbing GRPC details.
3076	IsCommitDeletedErr checks if an error is related to a deleted commit.
3077	IsCommitFinishedErr checks if an error indicates a commit has finished.
3078	IsRepoNotFoundErr checks if an error matches a specific regex pattern indicating a repository not found error.
3079	IsBranchNotFoundErr checks if an error matches the "branch not found" pattern.
3080	IsFileNotFoundErr checks if an error is due to file not being found
3081	APIClient retrieves version info, returning pretty-printed string or error
3082	validateRepoName checks if repo name contains only allowed characters and returns an error if invalid
3083	newDriver initializes a driver with environment settings, validates inputs, sets up resources, creates a specification repository, and returns the driver instance or an error.
3084	inspectCommit will return a commit info and error based on the commit state
3085	scratchCommitPrefix constructs a path using repository name and commit ID.
3086	scratchFilePrefix constructs the path for a scratch file using the driver's commit prefix and the file's path.
3087	getTreeForFile retrieves a hash tree for a file, creating a new one if needed, inspecting commits, and handling open commits.
3088	provenantOnInput checks if there is provenance other than the spec repo
3089	nodeToFileInfo converts commit info, path, and node proto to file info object
3090	fileHistory iterates over a file's commit history, calling a callback function for each version, stopping after a specified number of versions or reaching the oldest commit.
3091	upsertPutFileRecords updates or inserts file records, handling tombstones and merges them with existing records
3092	ReadRow reads a row from a PGDump file, handling headers, footers, and newline inconsistencies, returning the row data or an error.
3093	NewReporter creates a Reporter instance, initializes it with a cluster ID and kube client, starts a goroutine to report metrics, and returns the initialized Reporter.
3094	ReportUserAction tracks user actions, reporting start, finish, and errors using provided Reporter.
3095	FinishReportAndFlushUserAction generates a function to report and flush user actions based on success or failure.
3096	Read reads data from multiple chunks, handling EOF and fetching more chunks as needed.
3097	ActivateCmd creates a Cobra command to activate Pachyderm enterprise features using an activation code, optionally setting an expiration timestamp.
3098	GetStateCmd creates a Cobra command to check Pachyderm cluster enterprise feature activation status and prints token state and expiration.
3099	Cmds generates a list of Cobra commands for enterprise features and specific operations, including activation and state retrieval, while allowing optional flags to disable metrics and port forwarding.
3100	NewConfiguration creates a Configuration instance based on the provided interface, copying relevant fields from the specific configuration type.
3101	Repos creates a collection using an etcd client and a specified prefix.
3102	PutFileRecords creates a collection using etcd client and specified prefix
3103	Commits creates a collection using an etcd client, prefix, repository, and commit info structure.
3104	Branches creates a collection for etcd branches with validation for branch names being non-UUIDs.
3105	OpenCommits creates and returns a collection for managing open commits using an etcd client and prefix.
3106	NewDAG creates a directed acyclic graph (DAG) from a map of node IDs to parent IDs, initializing the graph structure and adding nodes accordingly.
3107	NewNode adds a node to a DAG with specified ID and parents, updating parent-child relationships and leaf status.
3108	Sorted will return a list of strings representing nodes sorted topologically based on dependencies.
3109	Leaves will return a list of leaf node IDs from the DAG.
3110	Ancestors function finds all ancestors of a given node in a Directed Acyclic Graph (DAG). It uses Depth First Search (DFS) algorithm to traverse the graph and returns a list of ancestor nodes.
3111	Descendants finds all descendants of a node using BFS, starting from given IDs and considering specified children.
3112	Ghosts will return a list of nodes with no parents in the DAG
3113	NewPortForwarder creates a new port forwarder for the specified namespace, initializing Kubernetes client and logger.
3114	Run starts a port forwarder for a given app, selecting a random pod and establishing a connection. It handles errors during setup and waits for the port forwarding to either succeed or fail.
3115	RunForDaemon sets default ports if necessary and runs the PortForwarder for "pachd".
3116	RunForSAMLACS sets local port if zero and runs PortForwarder for SAML ACS.
3117	RunForDashUI starts a port forwarding session for the Dash UI on a specified local port.
3118	RunForDashWebSocket starts a port forwarder for a specified local port or default, forwarding to port 8081.
3119	RunForPFS starts port forwarding for Pachyderm, using default or specified local port.
3120	RunForS3Gateway starts port forwarding for S3 gateway on specified local port or default if zero.
3121	Lock sets the PID file path and writes to it, returning an error if unsuccessful.
3122	Close stops the port forwarder and closes all associated channels safely.
3123	Unmarshal event data into message, validate type, update key, and unmarshal value.
3124	UnmarshalPrev sets key and unmarshals PrevValue into val, checking types.
3125	MakeWatcher creates a watcher instance with given channels for events and completion.
3126	CheckType verifies if the given value matches the type of the template and returns an error if they mismatch.
3127	NewPool creates a Pool instance by watching Kubernetes endpoints and setting up connection management.
3128	Do acquires a gRPC connection from a pool, executes a function using it, and manages connection counts.
3129	Close will close all connections in the pool and return the first error encountered
3130	buildImage builds a Docker image using the provided client, repository, context directory, Dockerfile, and destination tag, printing progress and returning an error if the build fails.
3131	pushImage tags and pushes a Docker image from source to destination, returning the new tag and any errors encountered
3132	newMinioClient creates a MinIO client with given endpoint, bucket, credentials, and security setting, returning the client and any errors encountered.
3133	newMinioClientV2 creates a MinIO client v2 instance with given endpoint, bucket, credentials, and security settings.
3134	newMinioWriter creates a MinIO writer that uploads data asynchronously using a pipe and returns a channel for errors.
3135	minioWriter.Close closes the writer, finishing any existing span, closing the pipe, and returning any errors from the error channel.
3136	PipelineRepo extracts repo name from pipeline object
3137	PipelineRcName converts a name to lowercase, replaces underscores with hyphens, and appends a version number to form a Kubernetes resource name.
3138	GetRequestsResourceListFromPipeline extracts resource list from pipeline info and cache size.
3139	GetLimitsResourceListFromPipeline retrieves resource limits from pipeline info and cache size, returning a resource list and an error.
3140	getNumNodes retrieves the count of Kubernetes nodes and returns an error if unsuccessful.
3141	GetExpectedNumWorkers calculates the number of workers based on Kubernetes client and parallelism specification, returning an error if the spec is invalid.
3142	GetExpectedNumHashtrees calculates the expected number of hashtrees based on the Constant field in HashtreeSpec, returning 1 if unspecified or greater than zero, and an error otherwise.
3143	FailPipeline updates a pipeline's state to failure in etcd with a given reason.
3144	JobInput updates input commit IDs based on provenance and branch mappings.
3145	PipelineReqFromInfo converts ppsclient.PipelineInfo to ppsclient.CreatePipelineRequest.
3146	NewPipelineManifestReader reads a manifest file from a given path, either stdin or a URL, decodes it using JSON, and returns a reader and potential error.
3147	NextCreatePipelineRequest unmarshals the next create pipeline request from the decoder and returns it, or an error if the data is malformed or EOF is reached
3148	DescribeSyntaxError will return a detailed syntax error message indicating the line number and position of the error.
3149	UpdateJobState updates a job's state and pipeline counts, setting timestamps and reasons accordingly.
3150	New generates a UUID and retries indefinitely on failure, logging errors.
3151	HTTPError's Code method returns HTTP status code, defaulting to OK if nil.
3152	NewHTTPError creates an HTTPError instance with a status code and formatted message.
3153	NewStorage creates a Storage instance with given Client and prefix.
3154	DeleteAll will delete all objects under a given prefix and return an error if any deletion fails
3155	Chunk divides byte slice into chunks of specified size and returns them as a slice of slices.
3156	ChunkReader reads data from a reader in chunks, applying a function to each chunk and returning the total bytes processed or an error.
3157	NewStreamingBytesReader creates a reader for streaming bytes with cancellation support.
3158	WriteToStreamingBytesServer transfers data from reader to streamingBytesServer using a buffer and returns any errors encountered.
3159	WriteFromStreamingBytesClient transfers data from a client stream to a writer until EOF, returning any errors encountered.
3160	NewSidecarAPIServer creates and returns a new API server instance with specified configurations.
3161	NewEnterpriseServer creates and returns an API server instance with enterprise features enabled, initializing necessary components and starting a watcher goroutine.
3162	validateActivationCode will verify the activation code using RSA public key, decode the base64-encoded data, check the signature, unmarshal the token, parse the expiration, and return the expiration time or an error if validation fails
3163	Activate will process an activation request, validate the code, update the enterprise token record, wait for confirmation, and return response details.
3164	Deactivate deactivates the enterprise token and waits for confirmation before returning a response.
3165	lookExtensions searches for executable path with extensions in given directory or current directory, returning the full path and error if not found
3166	cmd.start will execute the command and manage file descriptors and process attributes, returning an error if it fails
3167	CombinedOutput sets Stdout and Stderr to capture command output, runs the command, and returns the combined output along with any error.
3168	StdinPipe sets up a pipe for command input, returning a writer-closer and an error if stdin is already set or the process has started.
3169	StdoutPipe sets up a pipe for command stdout, returns reader/writer pair, or error if already set or process started.
3170	dedupEnvCase removes duplicate environment variable keys while preserving original order, considering case sensitivity based on input flag.
3171	InputName recursively retrieves the name from nested Input structs.
3172	SortInput sorts inputs based on their names using stable sort.
3173	InputBranches processes input and extracts branches, returning them in a list.
3174	ValidateGitCloneURL checks if the given Git clone URL is valid and follows specific formats, returning an error if it does not.
3175	containsEmpty will return true if the list contains an empty string otherwise false
3176	NewAPIServer creates an API server instance with specified address, storage root, and cluster info.
3177	Ago calculates time duration since a given timestamp in human-readable form.
3178	TimeDifference calculates the duration between two timestamps and returns a human-readable string representation.
3179	Duration converts a protobuf duration to a human-readable string.
3180	InspectCluster retrieves cluster info using AdminAPIClient and handles errors.
3181	Extracts admin operations using gRPC, applying a callback function to each operation.
3182	APIClient's ExtractAll extracts admin.Ops based on a condition, returning them and an error if extraction fails.
3183	APIClient's ExtractWriter method extracts data objects and writes them using a provided io.Writer, returning an error if extraction fails.
3184	ExtractURL sends a URL extraction request and handles responses or errors accordingly.
3185	ExtractPipeline extracts a pipeline using the client, returning the request and any errors encountered.
3186	Restore sends operations to the admin client and handles errors.
3187	RestoreReader reads from a reader, sends data to a client, and handles errors gracefully.
3188	RestoreFrom sends operations to another client's restore service and handles errors gracefully.
3189	RestoreURL sends a URL to the admin API client, handles errors, and closes the connection.
3190	IgnoreTypes filters types and ignores them during comparison.
3191	`AppendEllipsis` updates `textList` by appending an ellipsis if necessary, optionally adding diff stats.
3192	IsType checks if a given type matches specific function signatures.
3193	NameOf retrieves the full qualified name of a reflect.Value, stripping method closure suffixes and parentheses.
3194	PointerOf converts a reflect.Value to a Pointer containing the value's address and type.
3195	EditScript's String method converts an edit script into a human-readable string representation using specific characters for different operations.
3196	EditScript.stats calculates statistics about edit operations, returning counts of identity, unique X, unique Y, and modified edits.
3197	connect updates path based on comparison with destination using given equality function
3198	EquateNaNs returns comparison options to treat NaNs equally for float64 and float32 types
3199	Path.Index retrieves a PathStep from a Path at a given index, adjusting negative indices relative to the end. If the index is out of bounds, it returns an empty PathStep.
3200	SliceIndex.Key returns -1 if xkey and ykey differ, otherwise returns xkey
3201	defaultReporter's String method returns a formatted diff string if there are differences, otherwise it returns an empty string.
3202	FormatType determines whether to emit a type label based on options and wraps the given text node with the appropriate type name.
3203	formatMapKey converts a reflect.Value to a formatted string key, applying specific formatting options.
3204	formatString converts a string to a quoted form if it's shorter, disallows newlines, and uses backticks for readability
3205	formatHex converts a uint64 to a hexadecimal string with varying padding based on its size
3206	formatPointer will return a formatted string representation of a pointer value, using a deterministic pointer for testing if enabled.
3207	Visit checks if a pointer has been visited before and marks it as visited.
3208	retrieveUnexportedField accesses and returns the value of an unexported field in a struct using reflection.
3209	insert will add a field name to the tree and recursively process the remaining names
3210	matchPrefix will return true if the path prefix matches a field tree, otherwise false
3211	canonicalName extracts the canonical name of a field from a struct, expanding nested selections and checking visibility.
3212	FilterPath applies a filter function to an option, normalizes it, and returns a new path filter option or nil if invalid.
3213	normalizeOption flattens options and returns a single option if possible, otherwise returns all options
3214	flattenOptions merges options recursively, appending core options to destination and flattening nested option sets.
3215	CanFormatDiffSlice checks if a value node can be formatted in diff mode based on various conditions including the number of differences, ignored items, valid values, and the type and length of the values.
3216	formatASCII replaces non-printable ASCII characters in a string with dots
3217	coalesceAdjacentEdits aggregates edits into groups based on their types.
3218	SortKeys sorts reflect.Values while removing duplicates, handling NaNs gracefully.
3219	FormatDiff formats a value node according to specified options, handling different types and modes.
3220	coalesceAdjacentRecords aggregates similar report records into groups based on their differences and returns statistics for each group
3221	Diff calculates the difference between two values and returns a string representation, panicking if the difference and equality results contradict each other.
3222	statelessCompare resets result and reporters, compares a step, and restores them before returning the result.
3223	sanitizeValue will return a sanitized reflect.Value based on the given reflect.Type, handling interface nil values as a workaround for Go 1.10 bug.
3224	Check verifies path length and detects recursive transformers, panicking with details if found.
3225	makeAddressable will ensure a reflect.Value is addressable by creating a new instance if necessary
3226	Field.Marshal serializes field data using visitor pattern based on field type
3227	Field's String method returns a formatted string combining key and value.
3228	Set tag for span with key and value
3229	Inject will add trace information to a carrier using TextMapWriter
3230	Extract will return a MockSpanContext and an error by reading key-value pairs from the carrier and populating the context accordingly. An error is returned if required fields are missing or parsing fails.
3231	ToLogRecord converts LogData to LogRecord, setting timestamp and fields based on payload presence.
3232	New creates a new MockTracer instance with default injectors and extractors for TextMap and HTTPHeaders propagators.
3233	StartSpan creates a mock span with given operation name and options.
3234	RegisterInjector associates a format with an injector in MockTracer.
3235	MockTracer registers an extractor for a given format.
3236	MockTracer's Inject method injects a span context into a carrier using a specified format, returning an error if the format is unsupported or the carrier is invalid.
3237	Extract will return a SpanContext and an error based on the given format and carrier, using a registered extractor.
3238	ContextWithSpan adds a span to a context.
3239	Set tag on span with uint32 value
3240	Set tag on OpenTracing span with given value
3241	Set a tag with a boolean value on an OpenTracing span.
3242	ipv4Tag sets a tag on a span with a given string value
3243	MockKeyValue emits a string with key and kind of value
3244	MockKeyValue EmitLazyLogger updates fields using LazyLogger value
3245	RunAPIChecks runs API tests with custom tracers and options.
3246	CheckBaggageValues sets baggage value option in API check suite
3247	CheckExtract sets the CheckExtract option in an APICheckSuite
3248	CheckInject sets a boolean flag for API injection checking
3249	CheckEverything sets API check options to enable baggage values, extraction, and injection.
3250	UseProbe sets an API check probe option on a suite.
3251	MockSpanContext adds a baggage item and returns a new instance.
3252	MockSpan.Tags locks, copies, and returns tags map
3253	Tag retrieves a tag value using a key from a MockSpan object, locking during access.
3254	MockSpan.Logs acquires read lock, copies log records, and releases lock before returning them.
3255	MockSpan's Context method locks, retrieves SpanContext, unlocks, and returns it.
3256	SetTag updates tag in MockSpan based on key and value, setting sampling priority if key matches, and returns updated Span.
3257	SetBaggageItem updates the baggage item in the mock span and returns the updated span.
3258	BaggageItem retrieves a baggage item by key from a MockSpan's SpanContext, locking during access.
3259	MockSpan Finish locks, sets finish time, unlocks, and records span.
3260	FinishWithOptions updates a mock span with options, logs associated data, and records the span.
3261	MockSpan's String method returns a formatted string representation including trace ID, span ID, parent ID, sampling status, and operation name.
3262	LogFields adds log fields with current timestamp to MockSpan.
3263	MockSpan logs fields with a timestamp and appends them to the logs list.
3264	MockSpan logs key-value pairs, converting them to fields and logging errors if necessary.
3265	MockSpan logs an event with specified details
3266	LogEventWithPayload logs an event with associated payload using MockSpan's LogFields method.
3267	Set operation name on mock span and return updated span
3268	registriesDirPath will return the path to the registries directory based on the SystemContext, prioritizing explicit paths over implicit ones.
3269	loadAndMergeConfig reads directory configs, merges Docker namespaces, handles conflicts, and returns a combined configuration.
3270	ParseReference normalizes and validates an image reference, returning a parsed ImageReference or an error if the format is incorrect.
3271	NewReference constructs an openshiftReference from a dockerRef, validating the hostname/namespace/stream:tag format.
3272	CheckAuth verifies user credentials against a Docker registry and returns an error if authentication fails.
3273	doHTTP sends HTTP request using TLS transport and returns response or error
3274	detectPropertiesHelper will determine the properties of a Docker registry by pinging it over HTTPS, falling back to HTTP if configured, and checking for V1 support.
3275	detectProperties runs once to set detectPropertiesError using detectPropertiesHelper and returns that error
3276	getExtensionsSignatures fetches extension signatures using Docker client, handles HTTP response, and parses JSON body.
3277	NewTransport creates an HTTP transport with custom dialer settings and optional proxy support.
3278	readRegistryConf reads registry configuration file path and returns its content as bytes with potential errors
3279	GetRegistries loads registry configuration and returns a list of registries or an error.
3280	GetInsecureRegistries retrieves insecure registries from system configuration.
3281	RegistriesConfPath returns the configuration path for registries, using context if provided.
3282	NewOptionalBool converts a boolean to an OptionalBool.
3283	changeState updates PolicyContext state if expected, returns error if not
3284	policyContext will transition states from ready to destroying and then to destroyed, returning any errors encountered during the process
3285	policyIdentityLogName constructs a log name using image reference transport and policy configuration identity
3286	requirementsForImageRef retrieves policy requirements based on image reference, checking transport scopes, specific namespaces, and defaults.
3287	ParseImageName will return an image reference and an error if the image name is not in the correct format
3288	BlobInfoFromOCI1Descriptor converts OCI descriptor to blob info.
3289	OCI1FromManifest converts a JSON manifest to an OCI1 object and returns it.
3290	OCI1FromComponents constructs an OCI1 manifest from given configuration and layers.
3291	newReference creates a Docker reference from a named reference, returning an error if the reference contains both a tag and a digest.
3292	tagOrDigest extracts either the digest or tag from a docker reference, returning an error if neither is present.
3293	updateEmbeddedDockerReference updates the embedded Docker reference if allowed and necessary
3294	isTTY checks if a writer is associated with a terminal
3295	copyUpdatedConfigAndManifest updates config and manifest, handles errors, and returns manifest or error
3296	createProgressBar adds a progress bar to copy operations, displaying the blob type, digest, size, and completion message.
3297	copyConfig reads image configuration, copies it, verifies integrity, and handles errors
3298	diffIDComputationGoroutine computes and sends the diff ID result through a channel, handling errors internally.
3299	computeDiffID computes a digest for a stream after optionally decompressing it using a given function.
3300	compressGoroutine will compress data from source to destination using gzip and handle errors appropriately
3301	newDockerClient creates a Docker client with specified system context, handling different host types and configuring HTTP/TLS settings accordingly.
3302	defaultPolicyPath returns the signature policy path if set, otherwise uses the root path concatenated with the system default policy path, defaulting to the system default if neither are specified
3303	NewPolicyFromFile reads a file and returns a Policy object along with an error if unsuccessful.
3304	NewPolicyFromBytes will unmarshal JSON data into a Policy object and return it, or an error if the format is invalid.
3305	newPolicyRequirementFromJSON parses JSON data into a PolicyRequirement based on the type field, returning an appropriate policy object or an error if the type is unknown or unmarshalling fails
3306	newPRSignedBy creates a new prSignedBy instance with validated inputs or returns an error if validation fails
3307	newPRSignedByKeyPath creates a prSignedBy instance with the given keyType, keyPath, and signedIdentity, returning an error if unsuccessful.
3308	NewPRSignedByKeyPath creates a new policy requirement using a key path and signed identity.
3309	newPRSignedByKeyData creates a prSignedBy instance using the provided keyType, keyData, and signedIdentity, returning an error if creation fails
3310	NewPRSignedByKeyData creates a new policy requirement using key data and identity.
3311	IsValid checks if the sbKeyType is one of the allowed types and returns true if it is, otherwise false.
3312	newPRSignedBaseLayer creates a signed base layer policy reference with the given identity or returns an error if the identity is missing.
3313	newPolicyReferenceMatchFromJSON will parse JSON data into a PolicyReferenceMatch based on the type field, returning the appropriate match object or an error if the type is unknown or unmarshalling fails
3314	newPRMExactReference parses a Docker reference, validates it, and returns a PRM exact reference object or an error if invalid.
3315	newPRMExactRepository creates a new exact repository instance with the given Docker repository string, validating its format and returning an error if invalid.
3316	newImageSource resolves an image reference, builds a reader object, and returns it along with an error if the process fails.
3317	getBlobAndLayerID retrieves a blob and layer ID based on blob info, handles different data types, and manages layer selection.
3318	computeID calculates image ID based on manifest and blobDiffIDs, returning empty string on error
3319	PutManifest updates the stored manifest if it matches the expected digest.
3320	PutSignatures appends byte slices to sigblob and updates sizes array with lengths, storing signatures and their sizes.
3321	newImage creates a new image from a source, retrieves its size, and returns a closer object along with any errors encountered.
3322	newImageSource creates a temporary directory, extracts an image source, and cleans up if extraction fails.
3323	LoadManifestDescriptor converts image reference to OCI archive reference, creates temporary directory, loads manifest descriptor, and cleans up temp directory.
3324	Close will delete temp dir and close unpacked source
3325	append adds unique strings to orderedSet
3326	isMultiImage checks if image has multi-image manifest and returns bool and error
3327	lockPath acquires a lock for a given path, increments reference count, and locks the path's mutex.
3328	unlockPath will release a lock for a given path and remove it if no longer referenced
3329	view opens a BoltDB cache in readonly mode, executes a function, and handles errors gracefully.
3330	update will execute a function within a database transaction, handling locking and error propagation
3331	uncompressedDigest retrieves an uncompressed digest from BoltDB buckets or returns an empty string if not found
3332	appendReplacementCandidates appends replacement candidates from a BoltDB bucket based on a given digest, returning updated candidates list
3333	indexExists checks if a file exists at a given path and returns true if it does, otherwise it returns false.
3334	createSignature generates a GPG signature for a Docker manifest using provided key identity.
3335	ParseReference splits path and image from reference and returns a new ImageReference or an error.
3336	NewReference creates a reference for an OCI image, resolving paths and validating inputs.
3337	ociReference opens and decodes an OCI index file returning the parsed Index object or an error
3338	LoadManifestDescriptor converts an image reference to an OCI reference and retrieves the manifest descriptor.
3339	blobPath constructs a blob path using a digest and optional shared directory, returning the path and any validation errors.
3340	SignDockerManifest calculates a digest for a Docker manifest, creates a signature, and returns it along with any errors encountered.
3341	VerifyDockerManifestSignature verifies a Docker manifest signature against expected values, returning the signature or an error if validation fails.
3342	newOpenshiftClient creates an OpenShift client using reference, returning an error if configuration fails.
3343	doRequest sends an HTTP request with optional authentication and logs details about the request and response.
3344	getImage fetches an image from the OpenShift API and returns it along with any errors encountered during the request or JSON unmarshalling.
3345	convertDockerImageReference converts Docker image references by prepending the domain and validating the format.
3346	ensureImageIsResolved fetches and resolves an image stream tag to a Docker reference, setting up the image source for OpenShift.
3347	newImageDestination creates a new image destination using OpenShift client and Docker reference, returning an error if any step fails
3348	newUntrustedSignature constructs an untrusted signature using Docker manifest digest and reference, with creator ID and timestamp pointers.
3349	MarshalJSON converts untrustedSignature to JSON format, including critical and optional fields, and returns the byte array and error if any.
3350	UnmarshalJSON will unmarshal JSON data into untrustedSignature, converting specific errors to InvalidSignatureError.
3351	verifyAndExtractSignature verifies a signature using a mechanism, extracts details, and returns them or errors if validation fails.
3352	RewriteReference updates a container image reference by replacing a specified prefix with an endpoint's location, returning the modified reference or an error if the operation is invalid.
3353	getV1Registries processes a TOML configuration to create a list of registries, applying search, block, and insecure flags based on the configuration, and returns them in a specific order.
3354	getConfigPath returns the configuration path based on the provided context, defaulting to a system-wide path or a custom path derived from the context.
3355	GetRegistries loads registry configurations from a path, caches them, and handles version compatibility.
3356	readRegistryConf reads configuration file content and returns byte array and error
3357	Manifest retrieves image manifest data and MIME type.
3358	ConfigUpdate updates the tarball reference's configuration and annotations.
3359	parseImageAndDockerReference converts an unparsed image and string to named references, returning errors if unsuccessful
3360	parseDockerReferences will return two docker image references and an error if parsing fails
3361	ListNames retrieves active transport names, excluding deprecated ones, sorts them alphabetically, and returns the list.
3362	NewReference creates an OSTree image reference, normalizes the image name, adds ':latest' if missing, resolves the repository path, and validates the resulting reference.
3363	ostreeReference.signaturePath generates a path for a signature file based on the given index.
3364	ValidateImageName checks if an image name is valid and returns an error if it's not.
3365	SplitPathAndImage splits a reference into path and image based on OS.
3366	ValidateOCIPath checks if the OCI path contains a valid colon based on the operating system.
3367	ValidateScope checks if a given scope is valid for the current OS, cleans the path, and returns an error if either validation fails.
3368	BlobInfoFromSchema2Descriptor constructs a BlobInfo object using data from a Schema2Descriptor.
3369	Schema2FromManifest will unmarshal JSON manifest into a Schema2 object and return it along with any errors encountered
3370	Schema2FromComponents constructs a Schema2 object using provided config and layers.
3371	SetAuthentication updates system context with authentication details for a given registry, returning an error if unsuccessful.
3372	RemoveAuthentication removes authentication for a given registry from system context and docker config file, returning an error if not logged in.
3373	RemoveAllAuthentication clears authentication details in system context.
3374	readJSONFile reads a Docker config file from a given path, parses it according to the specified format, and returns the parsed data along with any encountered errors.
3375	modifyJSON modifies a JSON file using a given editor function, handles directory creation, reads, updates, and writes the file accordingly.
3376	findAuthentication reads a JSON file, tries credential helpers, then normalizes and searches for authentication details.
3377	NewDestination creates a Destination object with specified writer and repository tags.
3378	AddRepoTags appends repository tags to destination
3379	writeLegacyLayerMetadata processes layer descriptors, computes chainID, generates layer paths, creates symlinks, writes version files, and configures layers for legacy format, returning layer paths and last layer ID.
3380	sendSymlink creates a tar link header and writes it to the destination tar archive
3381	sendBytes sends byte data to a destination file and returns an error if failed
3382	sendFile sends a file as a tar archive, verifies its size, and returns an error if the size mismatches.
3383	Commit closes the tar archive associated with the destination and returns an error if it fails.
3384	imageMatchesRepo checks if an image's names match a repository reference.
3385	resolveImage fetches an image using either its ID or name, handles digests, and sets the appropriate digest before returning the image.
3386	storageReference.Transport returns a types.ImageTransport with stored data.
3387	storageReference constructs a transport string including graph options, driver, root paths, and identifiers.
3388	PolicyConfigurationNamespaces generates a list of namespaces based on the storage reference's details.
3389	GzipDecompressor reads compressed data from an io.Reader and returns a decompressed io.ReadCloser along with an error if any.
3390	Bzip2Decompressor wraps a reader with Bzip2 decompression and returns a ReadCloser.
3391	XzDecompressor wraps an io.Reader with an xz decompressor and returns an io.ReadCloser.
3392	DetectCompression identifies and returns a decompression function along with a reader for further processing.
3393	newImageDestination creates a Docker client and returns a destination object for images, handling errors during creation.
3394	mountBlob attempts to mount a blob and handles cases where the operation starts an upload instead, returning an appropriate error message.
3395	bicTransportScope returns BICTransportScope with Opaque set to domain of dockerReference
3396	newBICLocationReference generates a BICLocationReference from a docker reference by extracting the repository name.
3397	parseBICLocationReference converts BICLocationReference to Named reference with normalized Opaque field
3398	NewSourceFromStream reads an input stream, decompresses it, saves to a temp file, and returns a Source object with cleanup.
3399	readTarComponent opens a tar component, reads its contents, and returns them as bytes, wrapping errors with context.
3400	ensureCachedDataIsPresent reads and caches data from tar manifest and config, returning an error if parsing fails.
3401	loadTarManifest reads a tar component, unmarshals JSON, and returns manifest items with potential errors.
3402	Close tar file if configured
3403	newImageDestination creates a Docker image destination, validates reference, configures client, sets up pipe and goroutine, and returns a daemonImageDestination object.
3404	imageLoadGoroutine handles image loading asynchronously, reporting errors via a channel and ensuring the reader is closed properly.
3405	NewReference constructs an OCI image reference from file and image strings, validating paths and names before returning the reference or an error.
3406	createOCIRef creates a temporary directory and extracts an OCI reference from the given image, returning an error if either step fails.
3407	createUntarTempDir creates a temporary directory, extracts a tar archive into it, and cleans up on failure
3408	destructivelyPrioritizeReplacementCandidatesWithMax sorts candidates based on timestamps and limits the result to maxCandidates, returning a list of BICReplacementCandidate.
3409	newImageDestination creates a new image destination using the given reference and temporary directory path, ensuring the directory exists before returning the destination object and any errors encountered.
3410	resolveExistingPathToFullyExplicit converts a relative path to an absolute, symlink-resolved, and cleaned path, returning an error if any step fails.
3411	newImageDestination creates a new image destination directory, checks if it exists and is empty, overwrites it if necessary, and creates a version file.
3412	isDirEmpty checks if a directory is empty and returns a bool and an error
3413	removeDirContents will delete all contents of a directory and return an error if any operation fails
3414	GetRepositoryTags fetches image tags using Docker API, handles pagination, and returns them along with potential errors.
3415	DefaultCache initializes a blob info cache either in memory or on disk based on system context and returns it.
3416	uncompressedDigestLocked retrieves an uncompressed digest from cache, returning it if found or creating a new one if necessary
3417	Close will delete temporary directory and close unpacked destination returning any errors
3418	OCI archive image destination puts manifest using unpacked destination.
3419	Commit will store an image and tar a directory, returning an error if unsuccessful
3420	tarDirectory will create a tar file from a directory and return an error if there is an issue with reading the source directory or writing the tar file
3421	ParseStoreReference will return a storage reference and an error if the input is not valid
3422	chooseDigestFromManifestList selects a digest based on system architecture and OS from a manifest list, returning an error if none match.
3423	ChooseManifestInstanceFromManifestList selects a digest from a Docker manifest list, returning an error if the manifest type is incorrect.
3424	manifestSchema1FromComponents constructs a generic manifest from schema1 components and returns an error if any step fails
3425	manifestDigest retrieves the manifest digest from Docker image source, prioritizing passed digest, falling back to reference, and loading manifest if necessary.
3426	deleteImage deletes a Docker image by fetching its manifest and digest, then sending a DELETE request to remove it, including handling signatures if necessary.
3427	Schema1FromComponents constructs a Schema1 object from components and returns it along with an error if initialization fails.
3428	initialize will validate FSLayers and History lengths, unmarshal V1Compatibility, and return an error if any issues arise
3429	ToSchema2Config converts a schema 1 image to schema 2 config, handles compatibility issues, constructs history, and encodes the result.
3430	Digest calculates the digest of a manifest, verifying signatures if necessary.
3431	MatchesDigest verifies if the manifest's digest matches the expected digest, returning a boolean and an error.
3432	NormalizedMIMEType maps MIME types to standardized values, defaulting to DockerV2Schema1SignedMediaType for unrecognized types.
3433	FromBlob parses a blob based on MIME type, returning appropriate manifest or error.
3434	NewReference constructs an image reference from a given path, resolving it to an absolute form and returning an error if unsuccessful.
3435	dirReference.layerPath joins path with digest's hex representation
3436	dirReference.signaturePath constructs a file path for a signature based on the given index.
3437	New creates a pool of workers with given size and constructor function.
3438	NewFunc creates a pool with n workers, each executing a closure based on the given function.
3439	ProcessTimed submits a job to a pool with a timeout, returning the result or an error if timed out or worker closed.
3440	SetSize adjusts pool size by adding or removing workers asynchronously and synchronously.
3441	Get size of worker pool
3442	TL method of Rect returns top-left corner as a Point.
3443	BR calculates bottom-right corner point of rectangle
3444	Converts Go Box2D struct to C CvBox2D struct.
3445	Box2D calculates points from its box representation and returns them as a slice of Point2D32f.
3446	FOURCC constructs a 32-bit unsigned integer from four 8-bit integers.
3447	Merge combines four images into one using OpenCV's cvMerge function.
3448	Split separates color channels from an image.
3449	AddWeighted combines two images using weighted averages and stores the result in a destination image.
3450	And applies logical AND operation between two images and stores result in third image.
3451	AndWithMask applies a bitwise AND operation between two images using a mask and stores the result in a destination image.
3452	AndScalar applies a scalar operation to an image without a mask.
3453	AndScalarWithMask applies a scalar operation to an image with a mask.
3454	Or combines two images into a destination image using bitwise OR operation without a mask.
3455	OrWithMask applies bitwise OR operation on two images using a mask.
3456	OrScalar applies a scalar operation to an image, using a mask if provided.
3457	OrScalarWithMask applies a bitwise OR operation between a scalar value and an image, using a mask, and stores the result in another image.
3458	AddWithMask performs image addition using specified source images and a mask.
3459	AddScalar applies a scalar value to an image, storing result in another image.
3460	AddScalarWithMask adds a scalar value to each pixel of an image using a mask.
3461	Subtract will subtract two images and store the result in a destination image without using a mask.
3462	SubtractWithMask subtracts pixel values from src2 from src1 using a mask and stores the result in dst.
3463	SubScalar subtracts a scalar value from each pixel of an image and stores the result in another image.
3464	SubScalarWithMask subtracts a scalar from an image using a mask and stores the result in another image.
3465	SubScalarRev applies scalar subtraction to images without using a mask.
3466	SubScalarWithMaskRev subtracts a scalar value from source image using a mask and stores result in destination image
3467	AbsDiff computes the absolute difference between two images and stores the result in a destination image.
3468	AbsDiffScalar computes absolute difference between src image and scalar value, storing result in dst image.
3469	MeanStdDevWithMask calculates the mean and standard deviation of pixel values in an image, optionally applying a mask.
3470	CreateSeq creates a sequence object with specified flags and element size, returning a pointer to the Seq structure.
3471	Push adds an element to a sequence and returns the new head.
3472	Pop removes an element from the sequence.
3473	PushFront adds an element to the front of a sequence and returns the updated sequence pointer.
3474	PopFront removes the front element from the sequence and stores it in the given pointer.
3475	GetElemAt retrieves an element pointer from a sequence at a specified index using C API.
3476	Remove element at specified index from sequence
3477	Delay sets a duration for a configuration option
3478	BackOffDelay calculates exponential backoff delay based on attempt number and configuration.
3479	Error will return a string listing all non-nil errors with their indices
3480	Arguments appends string arguments to RequestBuilder and returns itself
3481	BodyString sets request body from string and returns builder.
3482	BodyBytes sets request body from byte slice and returns modified RequestBuilder
3483	Body sets the request body and returns the builder
3484	Option sets request builder option and returns self
3485	Header adds a header to the request builder and returns the builder.
3486	Send sends a request using the builder's configuration and returns a response or error.
3487	Exec sends request using Send method, decodes response to result, handles errors.
3488	Next retrieves the next message from a subscription, decodes JSON, and returns a Message object or an error.
3489	Cancel subscription by closing response output if not already closed.
3490	FileList fetches file details at a given path and returns the first UnixLsObject or an error if none found.
3491	Cat sends a request to retrieve file content and returns a reader-closer along with any errors encountered.
3492	List retrieves directory contents from the server and returns links.
3493	Pin adds a path to the shell's pin list recursively and executes the request.
3494	Pins retrieves pin information using a request and returns a map of pin details along with any errors encountered.
3495	Shell.Version retrieves version and commit info, returning them along with any error encountered during the request execution.
3496	SwarmPeers sends a request to retrieve swarm peers and returns connection info along with any errors.
3497	SwarmConnect sends a request to connect to swarm addresses and returns an error if unsuccessful.
3498	DagPutOptions applies given DagPutOption functions to initialize and return a DagPutSettings instance with default values overridden by provided options.
3499	Pin sets a pin for a DAG option and returns an error if unsuccessful
3500	Kind sets the DAG kind option and returns a configuration function.
3501	Hash sets the hash value for a DAG put operation and returns an error if unsuccessful.
3502	AddDir adds a directory to shell, sends request, and returns hash or error
3503	Publish sends a publish request to a shell with a node and value, returning an error if the request fails.
3504	PublishWithDetails sends a publish request with details and returns a response or error.
3505	ResolveValue looks up a value based on a key, returns a trusted value, or handles errors for missing or invalid inputs.
3506	GenerateQuery constructs a query by replacing placeholders with bind variables or extra values, returning the final byte array and an error if any variable is missing.
3507	EncodeValue encodes a bind variable into SQL syntax, appending to a buffer.
3508	Lex analyzes input tokens, skipping comments if allowed, and returns token type and value.
3509	skipStatement consumes characters until reaching a semicolon or end-of-file
3510	reset clears all tokenizer state and resets counters
3511	Preview analyzes SQL command and returns statement type
3512	NewPlanValue converts an expression to a PlanValue, handling various types including SQLVal, ListArg, ValTuple, and NullVal, while returning an error for unsupported or complex expressions.
3513	StringIn checks if a string exists in a list of strings and returns true if found, otherwise false.
3514	NewTrackedBuffer creates a TrackedBuffer instance with a given NodeFormatter and an empty buffer.
3515	NewStringArena creates a StringArena with a byte buffer of specified size and sets up a string header to reference it.
3516	NewString appends byte slice to StringArena buffer and returns a new string view
3517	SpaceLeft calculates remaining capacity in StringArena buffer.
3518	ParseStrictDDL will return a SQL statement and an error if the DDL is not strictly parsed
3519	ParseNext reads next statement from tokenizer, handles semicolons, skips blanks, resets state, enables multi-mode, parses using yyParse, and returns parsed tree or error.
3520	Append appends a SQLNode to a buffer using a TrackedBuffer.
3521	ExprFromValue converts sqltypes.Value to Expr based on its type.
3522	Backtick wraps input string in backticks, doubling backticks within
3523	NewValue creates a Value based on type and byte slice, returning trusted Value or error if invalid.
3524	String method returns a formatted string representation of a value, considering its type and whether it's quoted.
3525	EncodeSQL encodes a Value into SQL syntax using a BinWriter, handling null, quoted, and unquoted types accordingly.
3526	EncodeSQL appends SQL syntax for insert values to buffer, separating rows and columns with commas.
3527	EncodeSQL encodes tuple equality list as SQL, using IN if single column, otherwise equality.
3528	WalkStatement traverses SQL nodes, converting select statements and modifying other types, then returns whether traversal continues and any errors.
3529	WalkSelect traverses a SQL node, converting SQL values and comparison expressions, then returns true without error.
3530	BindVariablesEqual compares two maps of bind variables using reflection to determine if they are equal.
3531	New creates a JWT middleware instance with default options overridden by provided ones.
3532	HandlerWithNext checks JWT and calls next handler if valid.
3533	FromAuthHeader extracts token from Authorization header, returns error if format is incorrect
3534	FromParameter creates a TokenExtractor that retrieves a query parameter value from an HTTP request.
3535	FromFirst combines multiple token extractors, returning the first non-empty token or an error.
3536	getHelloPacket constructs an RPC with subscription options for all topics in PubSub.
3537	NewFloodsubWithProtocols creates a FloodSub router with specified protocols and returns a PubSub instance.
3538	NewFloodSub creates a new Floodsub PubSub instance using default protocols.
3539	NewLRUBlacklist creates an LRU blacklist with the given capacity and returns it, or an error if creation fails.
3540	NewRandomSub creates a new PubSub instance using a RandomSubRouter and specified options.
3541	NewGossipSub creates a PubSub instance with a GossipSubRouter and initializes message caching.
3542	NewPubSub creates a PubSub instance with given options, attaching it to a router and setting up various channels and maps for managing subscriptions, messages, and peers. It returns the PubSub instance or an error if configuration is invalid.
3543	WithValidateThrottle sets a throttle limit for validation on a PubSub instance.
3544	WithBlacklist sets a blacklist on a PubSub instance and returns an error if unsuccessful
3545	handleRemoveSubscription cancels a subscription, closes its channel, and cleans up related data structures if no subscriptions remain for the topic.
3546	handleAddSubscription adds a subscription to a topic, announces it if necessary, and sends a response channel
3547	announce sends a subscription announcement to peers, retries if necessary
3548	PubSub.notifySubs sends messages to subscribers based on topics, logging if delivery is delayed.
3549	pubsub.seenMessage checks if message id has been seen before
3550	subscribedToMsg checks if a message topic is in subscriber's list
3551	msgID constructs a message ID by concatenating the sender and sequence number from a protocol buffer message.
3552	pushMsg filters and validates messages, publishing them after checking signatures and avoiding duplicates.
3553	validate will drop the message if signature or topic validation fails otherwise it sends the message
3554	validateSingleTopic checks if validation can proceed and performs message validation if allowed, returning the result or indicating throttling.
3555	getValidators retrieves validators for topics from a message.
3556	Subscribe to a topic using a descriptor and options, returning a subscription and an error.
3557	SubscribeByTopicDescriptor creates a subscription for a given topic descriptor, handles authentication and encryption modes, applies options, and returns a subscription channel.
3558	GetTopics sends a request to PubSub to retrieve topics and returns them as a string slice.
3559	Publish a message with topic and data, sign if key exists, send over channel
3560	ListPeers sends a request to retrieve peers for a given topic and returns a list of peer IDs.
3561	WithValidatorTimeout sets a timeout for validator options and returns an error if validation fails
3562	WithValidatorConcurrency sets concurrency level for validator
3563	RegisterTopicValidator adds a validator for a topic and returns an error if validation fails.
3564	UnregisterTopicValidator sends a request to unregister a topic validator and waits for the response.
3565	DefaultMetricPrefix prepends "tchannel." to the metric name
3566	MetricWithPrefix generates a metric string with a given prefix, name, and tags, adding relevant keys based on the name.
3567	NewClient creates a new client instance with channel, service name, and optional host port.
3568	Call sends a request to a server using a client, handles retries, and returns the response or an error.
3569	CallPeer initiates a remote procedure call using TChannel, sends arguments, and handles the response, returning an error if any step fails.
3570	CallSC initiates a channel call using the provided sub-channel, method, argument, and response interfaces, returning an error if the call fails.
3571	ReadResponse extracts HTTP response details from TChannel call arguments and constructs an http.Response object.
3572	writeHeaders method serializes HTTP headers and status code into a buffer, flushes it to writers, and handles errors.
3573	ResponseWriter creates a new http.ResponseWriter and returns it along with a finish function to complete the response.
3574	ReadHeaders reads headers from reader and returns a map of strings with errors
3575	NewTCPRawRelay creates a TCP relay, copying data between source and destination connections.
3576	NewClient creates a new client instance with default options, sets configuration, adds initial peers, and initializes clients for JSON and Hyperbahn communication.
3577	Client advertises services, handles initial setup, triggers event, and starts advertising loop.
3578	Handle reads headers, extracts context, decodes arguments, invokes handler, processes response, and sends back data.
3579	Start starts a TChannel server on the specified host port, sets up tracing, listens for connections, and logs the server address.
3580	Server.Port extracts and returns the port part from HostPort field.
3581	SetStrategy updates the score calculation strategy and recalculates scores for all peers.
3582	Add hostPort to PeerList, return existing or new Peer.
3583	GetNew selects a new peer from a list, avoiding previously chosen ones, and returns an error if none available.
3584	Get will return a Peer and an error if no peers are available
3585	Remove a peer by hostPort from list, update data structures, and return error if not found
3586	PeerList.Copy creates a shallow copy of peer entries by host-port.
3587	PeerList Len returns the count of peers safely locking access.
3588	exists checks if a peer exists by hostPort and returns the score and existence status
3589	getPeerScore retrieves peer score and existence flag based on hostPort
3590	onPeerChange updates peer score if changed
3591	updatePeer updates peer score if changed and notifies heap
3592	getConn retrieves a connection from either inbound or outbound list based on index.
3593	GetConnection retrieves a peer's active connection or creates a new one if none exists, ensuring thread safety.
3594	getConnectionRelay attempts to get an active connection, locks to ensure exclusive connection creation, retries if necessary, and connects with specific context settings.
3595	canRemove checks if a peer has no connections and returns true if so
3596	addConnection adds a connection to a peer and notifies status change if successful
3597	removeConnection removes a specific connection from a list and updates the pointer, returning true if successful.
3598	connectionCloseStateChange updates connection state and notifies peers if a connection is closed.
3599	Peer's Connect method initiates a connection using its channel and hostPort, returning a Connection object and an error if unsuccessful.
3600	BeginCall initiates a call using Peer, validates options, retrieves connection, and starts call, returning an outbound call and potential error.
3601	NumConnections retrieves the counts of inbound and outbound connections for a peer.
3602	NumPendingOutbound counts total pending outbound connections in both inbound and outbound collections.
3603	isEphemeralHostPort checks if a host port is empty, equal to a specific value, or ends with ":0"
3604	Get retrieves a value for a given key using a kvHandler, returning the value or an error if the key is invalid or not found.
3605	Set updates a key-value pair, locks the handler, sets the value, and returns the count of entries in the handler.
3606	ClearAll clears all key-value pairs in handler if admin is authorized.
3607	NewChannel creates a new channel instance with default options, validates settings, and initializes logging and statistics reporting.
3608	Serve starts listening on a network listener, updates channel state, logs host port, and launches serving goroutine.
3609	ListenAndServe starts listening on specified hostPort and serves connections until error.
3610	Register a handler for a specific method on a sub-channel.
3611	PeerInfo retrieves and returns the local peer information from a channel safely using a read lock.
3612	GetSubChannel retrieves a sub-channel by service name, optionally applying configuration options.
3613	serve handles incoming connections, retries on errors, and performs handshakes asynchronously.
3614	Ping a remote peer and send a ping request.
3615	StatsTags returns a copy of commonStatsTags map.
3616	Connect attempts to establish a connection to a remote host, handles timeouts, and manages channel states.
3617	exchangeUpdated updates peer info if remote hostport is known
3618	updatePeer updates channel peers, sub-channels, and notifies peer update completion
3619	addConnection adds a connection if active and channel is client or listening, returns success
3620	removeClosedConn removes a closed connection from channel's map
3621	connectionCloseStateChange updates channel state based on connection closure and logs the change.
3622	Channel's state is retrieved safely using a read lock.
3623	NewReader retrieves a Reader instance from a pool, sets its reader field, clears any errors, and returns it.
3624	ReadUint16 reads two bytes from the reader and returns them as a big-endian uint16 value, returning zero and an error if the read fails.
3625	ReadString reads up to n bytes from the reader and returns them as a string, or an empty string if an error occurs.
3626	ReadLen16String reads a 16-bit unsigned integer as length and returns a string of that length.
3627	Register registers a Behavior instance with Thrift and JSON channels.
3628	Run will execute a behavior, process parameters, create request levels, start tracing, validate response, and log results.
3629	relayTimerPool retrieves or creates a relayTimer instance, resetting it if available or initializing a new one with a stopped timer.
3630	relayTimerPool releases relayTimer if verification is off
3631	relayTimer starts a new timer if inactive, verifying release and panicking if already active.
3632	Relay timer release method sets flag, verifies active state, and returns to pool.
3633	NewLogger creates a logger instance using a writer and optional log fields.
3634	NewTCPFrameRelay creates a TCP frame relay with specified destinations and modifier function, returning a Relay instance and an error if creation fails.
3635	tallyTags aggregates tags into a map based on non-empty fields
3636	Isolated updates a SubChannel's peers with a new sibling and sets a strategy lock-free.
3637	Isolated checks if top channel peers differ from current peers.
3638	Register method for SubChannel adds handler with specified method name
3639	GetHandlers retrieves a copy of the handlers registered for a SubChannel, ensuring thread safety by locking the handler map.
3640	StatsTags adds "subchannel" tag to topChannel's stats and returns them
3641	registerNewSubChannel adds a new sub-channel for a service if it doesn't exist and returns it along with a boolean indicating if it was added
3642	subChMap.get retrieves a SubChannel by serviceName, returning it and a boolean indicating if it exists
3643	getOrAdd retrieves or adds a SubChannel for a given service name and channel, returning the SubChannel and a flag indicating if it was newly added.
3644	Discover will return service peers as host ports and an error if discovery fails
3645	Start listens for connections and serves HTTP requests concurrently.
3646	listen sets up HTTP server on specified ports and handles requests using crossdock handler
3647	WriteRequest serializes HTTP request details into a write buffer and sends them over a channel argument.
3648	ReadRequest parses HTTP request data from TChannel arguments and returns an http.Request object along with any errors encountered.
3649	NewReadBufferWithSize creates a ReadBuffer instance with a specified buffer size and no remaining data.
3650	ReadByte reads a single byte from the buffer, returning an error if the buffer is empty or already has an error.
3651	ReadBytes reads up to n bytes from the buffer, returning them and updating the remaining data. If fewer than n bytes are available, it sets an EOF error and returns nil.
3652	ReadString reads up to n bytes from the buffer and converts them to a string, returning an empty string if no data is available.
3653	ReadUint16 reads two bytes from the buffer and returns them as a big-endian uint16, or zero if reading fails.
3654	ReadUint32 reads 4 bytes from buffer and converts them to a big-endian uint32 value, returning 0 if read fails.
3655	ReadUint64 reads 8 bytes from buffer and returns a big-endian uint64, or 0 if read fails.
3656	ReadUvarint reads an unsigned variable-length integer from the buffer and returns it.
3657	ReadLen8String reads a single byte indicating length and returns a string of that length from the buffer.
3658	ReadLen16String reads a 16-bit unsigned integer and returns a string of that length.
3659	FillFrom reads data from reader into buffer up to n bytes and returns the number of bytes read and an error if any.
3660	Wrap sets buffer and remaining data for ReadBuffer instance
3661	WriteSingleByte writes a single byte to buffer if there is space, updating remaining bytes and setting error if buffer is full
3662	WriteBytes reserves space in buffer and copies input bytes there
3663	WriteUint16 writes a 16-bit unsigned integer to the buffer in big-endian byte order.
3664	WriteUint32 reserves space in buffer and writes a 32-bit unsigned integer in big-endian format
3665	WriteUint64 writes a 64-bit unsigned integer to the buffer using big-endian encoding if space is available.
3666	WriteUvarint encodes a uint64 as a variable-length byte sequence and writes it to the buffer, reserving space first.
3667	WriteString reserves space in buffer and copies string content efficiently
3668	WriteLen8String writes an 8-bit length-prefixed string to the buffer, setting an error if the string is too long.
3669	WriteLen16String encodes a string using a 16-bit length prefix followed by the string data, setting an error if the string is too long.
3670	DeferByte removes and returns a byte reference from the buffer, setting an error if the buffer is full.
3671	DeferBytes defers writing `n` bytes and returns a reference to them.
3672	FlushTo writes buffer content to writer and returns bytes written and error
3673	Reset resets the buffer, setting remaining data to the full buffer and clearing any errors.
3674	Wrap assigns byte slice to buffer and updates remaining data.
3675	Update a Uint16 reference with a big-endian encoded value.
3676	Update a Uint32Ref with a new uint32 value using BigEndian encoding if the reference is not nil.
3677	Uint64Ref updates the referenced value with a new uint64 in big-endian byte order.
3678	BytesRef.Update copies byte slice b to ref if ref is not nil
3679	UpdateString copies a string into a byte reference if it is not nil.
3680	ArgReader starts argument reading, returns reader and error
3681	finish updates checksum and flags based on more fragments flag
3682	newWritableChunk creates a writable chunk with a checksum and contents buffer
3683	writeAsFits writes up to remaining bytes, updates checksum, writes data, increments size, and returns bytes written
3684	newFragmentingWriter creates a new instance of fragmentingWriter initialized with logger, sender, and checksum, setting state to fragmentingWriteStart.
3685	fragmentingWriter's ArgWriter starts an argument, returning itself and an error if it fails.
3686	BeginArgument starts an argument, handles errors, manages fragments, and updates writer state.
3687	fragmentingWriter.Write will write bytes to the current chunk, flushing and starting new chunks as needed, returning the total bytes written and an error if any occurs
3688	fragmentingWriter Flush will finish current chunk and fragment send current fragment flush error create new fragment update current chunk return nil
3689	fragmentingWriter Close will finish the current chunk and either flush it or start a new one based on whether there are more arguments to process
3690	handleCallRes forwards frame to peer and returns true if error occurs
3691	Arg2Reader reads arg1 to get method then returns arg2 reader
3692	handleError reads error message from frame logs error and forwards frame returning true if handled
3693	doneReading updates stats and handles errors based on call outcome
3694	newFragment creates a writable fragment with a header, message, and checksum, returning an error if any step fails
3695	flushFragment sends a fragment over the connection, updating headers and checking errors before returning any encountered issues.
3696	failed logs writer error updates and returns it
3697	arg1Reader creates an ArgReader for pre-arg1 processing with specific flags.
3698	arg2Reader returns an ArgReader and an error by calling argReader with specific parameters.
3699	arg3Reader returns an ArgReader and error, processing the third argument with specific states
3700	argReader updates state and returns reader for arguments
3701	recvNextFragment reads next message fragment and returns it along with error if any
3702	releasePreviousFragment sets previousFragment to nil and calls done() if it was not nil
3703	failed updates reader error logs shutdowns mechanism and returns the latest error
3704	parseInboundFragment reads a frame's payload into a readableFragment, processes a message, and sets up cleanup on completion.
3705	NewContext creates a new context with a timeout, wraps it, and returns the wrapped context along with a cancel function.
3706	WrapContextWithHeaders adds headers to the given context.
3707	healthCheck monitors connection health using a ticker, logs failures, and closes connection if consecutive failures exceed threshold.
3708	SetTimeout updates the timeout duration and returns the builder.
3709	AddHeader adds a header to ContextBuilder and returns the builder.
3710	SetHeaders updates the headers in ContextBuilder and marks parent headers for replacement, returning the builder.
3711	SetConnectTimeout updates the connection timeout duration and returns the builder instance.
3712	SetRetryOptions updates retry options in ContextBuilder and returns builder
3713	SetTimeoutPerAttempt sets the timeout per attempt in RetryOptions and returns the ContextBuilder.
3714	SetParentContext updates the parent context in ContextBuilder and returns the builder.
3715	Build constructs a context with headers and cancellation for TChannel operations, applying options and timeouts appropriately.
3716	overrideHeaders updates transport headers with CallOptions fields if they are non-empty.
3717	Read reads all data from the reader into a byte slice and returns an error if unsuccessful.
3718	ReadJSON reads JSON data into a given interface, using a buffered reader to handle empty inputs gracefully.
3719	NewArgWriter creates an ArgWriteHelper with a writer and an error.
3720	ArgWriteHelper's Write method wraps byte slice writing in a callback function.
3721	WriteJSON encodes data to JSON using writer and handles errors.
3722	Register registers an HTTP handler for pprof using the provided registrar.
3723	Count returns the number of active items in relayItems after subtracting tombstones.
3724	Get retrieves a relay item by ID and returns it along with a boolean indicating if the item exists.
3725	RelayItems adds an item with a given ID and locks/unlocks access during operation.
3726	Entombs a relay item after a specified duration, returning the item and success status.
3727	NewRelayer creates a new Relayer instance with specified channel and connection details.
3728	Relay handles frames, checking message types and forwarding if necessary.
3729	Receive handles incoming frames, updates state, and manages communication based on frame type and content.
3730	handleNonCallReq processes a non-call request, routes it based on frame type, handles timeouts, and manages relay items.
3731	addRelayItem adds a new relay item to either inbound or outbound based on originator status, sets timeout, and returns the item.
3732	failRelayItem marks a relay item as failed, stops its timeout, entombs it, and notifies the client if applicable.
3733	WriteStruct serializes a Thrift struct using a protocol writer and returns an error.
3734	ReadStruct reads data from a reader into a Thrift struct and returns an error.
3735	EnsureEmpty reads from a reader until EOF, returning an error if any bytes are found after the specified stage.
3736	NewServer creates a server instance based on options, handles external servers, sets up Thrift and raw handlers, registers services, and advertises if necessary.
3737	Advertise sets up a Hyperbahn client with given hosts and advertises, panicking on failure.
3738	handleCallReqContinue forwards frame and returns true if forwarding fails.
3739	dispatchInbound handles incoming RPC calls, reads method, logs, updates stats, manages timeouts, and invokes handler.
3740	CallOptions constructs a new CallOptions instance using values from the InboundCall.
3741	call.Response assigns error to response if present and returns it
3742	SendSystemError handles errors, marks state, releases fragment, and sends system error message.
3743	SetApplicationError sets application error if state is mismatched and returns error
3744	Arg2Writer initializes ArgWriter with arg1Writer, writes nil, and returns arg2Writer or error.
3745	doneSending marks the completion of an inbound call, updates stats, cancels the context, and shuts down if no errors occurred.
3746	newState creates a state object with typedefs and enum mappings.
3747	rootType will return the root type of a given Thrift type after checking includes and typedefs
3748	checkInclude splits thrift type name, updates local type, retrieves include details, and returns updated state, modified type, and include info.
3749	isResultPointer checks if the given Thrift type corresponds to a pointer in Go
3750	goType returns a Go type representation based on the given Thrift type
3751	goTypePrefix converts Thrift types to corresponding Go types with prefixes and handles imports and typedefs.
3752	NewContext creates a context with a specified timeout and returns the context and a cancel function.
3753	newIncomingContext creates a new context with a timeout and sets the incoming call information
3754	CurrentCall retrieves an incoming call from context parameters if available, otherwise returns nil.
3755	New creates a new random number generator using a seed value.
3756	Health will return health status and optional message based on health check function result
3757	headerCtx.Headers retrieves request headers or returns nil
3758	ResponseHeaders retrieves response headers from the header context, returning them as a map or nil if not available.
3759	SetResponseHeaders updates response headers if context has them, otherwise panics.
3760	headerCtx's Child creates a copy of headers and wraps them in a new context
3761	Wrap adds headers to a context or creates an empty one if none exist.
3762	WrapWithHeaders adds headers to a context and returns a new context with those headers.
3763	WithoutHeaders removes headers from the given context.
3764	Notify sets an error and closes a channel, preventing further notifications.
3765	forwardPeerFrame prioritizes ctx errors, checks recvCh buffer, handles mex errors with non-blocking writes.
3766	recvPeerFrame receives a peer frame prioritizing context errors and checking frames for validity before returning them or errors.
3767	recvPeerFrameOfType receives a peer frame and returns it if it matches the expected type, or handles errors or unexpected frames accordingly.
3768	shutdown marks messageExchange as shutting down, notifies error channel, and removes exchange from set
3769	newMessageExchangeSet creates a new message exchange set with a given name and logger, initializing maps for exchanges and expired exchanges.
3770	addExchange adds a message exchange to a set, checking for shutdown and duplicates before storing it.
3771	newExchange creates a new message exchange, logs creation details, and handles errors during registration.
3772	deleteExchange removes a message from either exchanges or expiredExchanges and returns whether it was found and if it had timed out.
3773	removeExchange removes a message exchange by ID, logs debug info, locks, deletes exchange, unlocks, and performs cleanup if successful.
3774	expireExchange removes a message exchange by ID and logs the action, updating state and calling callbacks accordingly.
3775	forwardPeerFrame forwards a frame to an exchange, logs details, and handles errors.
3776	copyExchanges will return a copy of message exchanges and a flag indicating shutdown status
3777	stopExchanges logs debug info, shuts down exchanges safely, notifies blocked callers, and maintains state integrity
3778	NewFrame creates a Frame object with a specified payload capacity, initializing buffers for header and payload.
3779	ReadBody reads the body of a frame from a reader based on the header, checking payload size and copying data accordingly.
3780	WriteOut writes frame data to writer, including header and buffer content, returning error if any.
3781	CanRetry evaluates if an error allows retrying based on retry policy and error code.
3782	HasRetries checks if retries can be made based on the request state and error.
3783	SinceStart calculates time duration since request started or returns fallback duration if RequestState is nil.
3784	AddSelectedPeer adds a host-port pair to the selected peers map if the RequestState is not nil.
3785	RunWithRetry attempts a function with retries up to a maximum limit, respecting timeouts and logging errors.
3786	ChecksumSize returns the size of the checksum based on the ChecksumType.
3787	New checksum instance from pool, reset, and returned
3788	parseTemplates generates a list of templates, skipping "tchan" if specified, and appends user-defined templates from files, returning an error if any file parsing fails.
3789	NewStringSliceFlag creates a flag that stores a slice of strings.
3790	withStateFuncs adds goType function to template
3791	IntrospectOthers filters and collects info about other channels based on options.
3792	ReportInfo returns channel info based on options
3793	IntrospectState returns a map of peer runtime states from the RootPeerList using given options.
3794	IntrospectState analyzes subchannel map options and returns runtime states including service info, isolation details, handler types, and method lists.
3795	Peer.IntrospectState returns runtime state including host port, connection details, chosen count, and SC count under lock.
3796	IntrospectState gathers runtime details about a connection, including state, addresses, exchanges, health checks, and activity.
3797	IntrospectState calculates total count and introspects inbound and outbound states while returning runtime state.
3798	IntrospectState retrieves relay item state based on options and name, including/excluding exchanges and tombstones.
3799	IntrospectState locks messageExchangeSet, retrieves runtime state including name, count, and optionally exchanges, then unlocks and returns the state.
3800	NewContext creates a new tchannel context with headers and returns it along with a cancel function.
3801	WriteResponse sends a response with system or application errors, and writes data to specified writers.
3802	Wrap adapts a Handler to a tchannel.Handler, reads arguments, handles them, and sends responses while managing errors.
3803	initFromOpenTracing injects a tracing context into an injectable span using OpenTracing and Zipkin formats, returning an error if injection fails.
3804	startOutboundSpan initiates a tracing span for an outbound RPC call, setting relevant tags and injecting the trace context.
3805	intToIP4 converts a 32-bit unsigned integer to an IPv4 address.
3806	servicePeerToHostPort converts a ServicePeer to host:port format
3807	NewStatsdReporter creates a buffered statsd client and returns a StatsReporter interface.
3808	UnmarshalText converts byte data to ToS enum, returning error if invalid.
3809	peerHeap pushes a peerScore item with its index updated
3810	pop removes and returns the last element from peerScores, updating its index for safety.
3811	updatePeer updates a peer score in the heap
3812	removePeer removes a peer from the heap based on its score index
3813	pushPeer updates order and adds peerScore to heap with randomized offset.
3814	addPeer adds a peer to the heap and swaps it with a random peer.
3815	NewClient creates a TChanClient using a channel, service name, and optional options.
3816	Add a peer to the list if not already present, returning the existing or new peer.
3817	Get retrieves a peer by hostPort from the list, returning the peer and a boolean indicating if it exists.
3818	WithTimeout sets a timeout option for operations.
3819	Methods returns sorted list of service methods
3820	InheritedMethods returns a sorted list of inherited methods from the service's ancestors.
3821	Arguments retrieves fields from a method's arguments and returns them as Field objects.
3822	ArgList constructs a string of argument declarations for a method, starting with "ctx" and appending each argument's declaration, separated by commas.
3823	CallList constructs a comma-separated string of arguments for method invocation.
3824	RetType returns a string representation of the method's return type, wrapping it in parentheses along with an "error" type if the method does not have a return value.
3825	WrapResult wraps the result variable with '&' if it's a pointer type, otherwise returns it as is.
3826	ReturnWith constructs a response string combining the given response and error names if the method has a return value, otherwise returns the error name.
3827	Declaration returns a formatted string combining field name and argument type
3828	startIdleSweep starts an idle sweep process on a channel with given options and returns an idleSweep instance
3829	start initiates the idle connections poller if not already started and logs relevant details.
3830	Stop idle connections poller by setting started flag and logging info before closing stop channel.
3831	ResolveWithGoPath searches for a file using GOPATH candidates and returns the path if found, otherwise errors.
3832	setExtends updates service extends fields based on import paths and searches within state map.
3833	register adds a handler to the map for a specific method
3834	NewClient creates a client based on options, returning an external or internal client depending on configuration.
3835	ListenIP retrieves network interfaces and returns the IP address for listening.
3836	Close listener and wait for references to finish before returning error
3837	ReadArgsV2 reads two arguments from a TChannel reader and returns them along with any errors encountered.
3838	WriteArgs sends two byte slices as arguments over a TChannel call, reads back two response byte slices, and returns them along with the response object.
3839	Call initiates a channel call, sends arguments, and returns responses or errors.
3840	CallSC initiates a channel call, sends arguments, and returns response data along with potential errors.
3841	CallV2 sends a call using SubChannel with context, constructs response with arguments and application error.
3842	NewRealRelay creates a new real relay service using given services map, listens on localhost, and returns a Relay instance or error.
3843	NewServer creates a new Server instance, registers handlers, and configures logging based on the Registrar.
3844	RegisterHealthHandler registers a health handler function for server meta-handler.
3845	Handle processes incoming RPC calls, identifies the service and method, retrieves the handler, executes the call, and handles errors.
3846	MetricsKey converts SystemErrCode to corresponding metrics key string
3847	NewSystemError constructs a SystemError with a given code, message, and arguments.
3848	NewWrappedSystemError wraps a given error with system-specific details if possible.
3849	SystemError implements Error interface by formatting error message with code and description.
3850	GetContextError maps specific context errors to custom errors, returning them or the original error unchanged.
3851	GetSystemErrorCode extracts a system error code from an error object, returning a default code if the error is nil or not a system error.
3852	`ping sends a ping request and waits for a response, returning an error if the process fails.`
3853	handlePingRes forwards a ping response frame and logs a warning if an error occurs, returning true if successful.
3854	handlePingReq processes a ping request, checks connection state, sends a response, and handles errors.
3855	SendSystemError logs and sends system error details over a connection.
3856	connectionError handles errors, logs them, stops health checks, and notifies exchanges
3857	withStateLock acquires a state lock, executes a function, and releases the lock before returning any errors
3858	withStateRLock acquires a read lock, executes a function, releases the lock, and returns any error
3859	readFrames reads headers, allocates frames, handles errors, updates activity, and manages frame pooling based on relay status.
3860	writeFrames sends frames over a connection, logs debug info, updates activity, and handles stop signal
3861	hasPendingCalls checks if there are pending inbound or outbound calls or if the relay cannot close, returning true if any condition is met.
3862	checkExchanges updates connection state based on exchange changes, handles transitions, and logs state updates.
3863	closeNetwork will close the underlying network connection stop health check log the closure attempt and warn if it fails
3864	getLastActivityTime retrieves the last activity timestamp from a connection object.
3865	Validate checks all methods in a service for errors and returns the first encountered error.
3866	logFailedRegistrationRetry logs client registration failure, retries with warning after too many attempts
3867	initialAdvertise retries sending an advertise message up to max failures, logging errors and backing off between attempts.
3868	Service extracts service name from payload based on length index.
3869	TTL calculates the time-to-live duration from payload bytes and returns it in milliseconds.
3870	SetTTL updates the TTL field in Payload with the given duration in milliseconds.
3871	finishesCall checks if a call frame has completed based on its message type and payload flags
3872	Flattens platform strings into a sorted list without duplicates.
3873	Map applies a transformation function to each string in PlatformStrings, collecting results and errors.
3874	mapSlice applies a function to a slice, collecting errors. It recursively maps over nested maps, filtering empty results. The function returns transformed data and collected errors.
3875	GetProtoConfig retrieves a ProtoConfig from a config using protoName as key, returning nil if not found.
3876	MapExprStrings applies a function to all string expressions within a Bazel expression tree, returning a modified expression.
3877	FlattenExpr extracts platform strings and flattens them into a single list expression.
3878	makePlatformStringsExpr constructs a Bazel expression using select statements based on platform strings, combining them into a single expression.
3879	Platform.String returns OS_Arch if both are set, OS if only OS is set, Arch if only Arch is set, otherwise empty string
3880	Find searches for a file in directories starting from the given path and moves up until it finds the file or reaches the root directory, returning the path if found or an error if not.
3881	runGazelle executes Gazelle with specified modes and directories, logging the command and handling errors.
3882	restoreBuildFilesInRepo walks through the current directory and restores build files in each subdirectory.
3883	FixLoads updates rule file loads based on known information, synchronizes file content, and fixes load statements while maintaining order and correctness.
3884	fixLoad adjusts a load object based on provided kinds and known kinds, adding unknown symbols and removing unwanted ones.
3885	newLoadIndex calculates the next available index based on rules and a list of strings.
3886	removeLegacyGoRepository removes references to legacy Go repositories from a file
3887	Compare two versions lexicographically and return the difference.
3888	ParseVersion will return a Version object and an error if the version string cannot be parsed correctly
3889	EmptyFile creates a File object with specified path and package.
3890	LoadWorkspaceFile reads file data and loads workspace information.
3891	LoadMacroFile reads a macro file and loads its data, returning a File object and an error if failed.
3892	EmptyMacroFile creates a new file and loads macro data, returning the file and any errors encountered.
3893	LoadData will parse a build file and scan its AST, returning a File object and an error if parsing fails
3894	LoadWorkspaceData will parse workspace data from a file path and package name, returning a File object and an error if parsing fails.
3895	LoadMacroData will parse a .bzl file and return a File object along with an error if parsing fails
3896	ScanAST parses an AST from a Bazel file and returns a File object.
3897	ScanASTBody constructs a File object by parsing AST body, rules, loads, and directives.
3898	MatchBuildFileName will search for matching file names in a directory and return the full path if found, otherwise return empty string
3899	SyncMacroFile updates function statements between two files, copying from one to another if present, or appending if absent.
3900	MacroName retrieves the name of the macro associated with a file's function statement, returning an empty string if none exists.
3901	Sync updates statements in File and Rules, handles deletions and insertions, and updates function body accordingly.
3902	File's Format method syncs data and returns formatted file content as byte slice.
3903	Save file to path after syncing and formatting content.
3904	HasDefaultVisibility checks file rules for package default visibility and returns true if found.
3905	NewLoad creates a Load instance with specified module name and initializes symbols map.
3906	Symbols returns sorted list of strings from Load instance
3907	Has checks if a symbol exists in the Load object's symbols map.
3908	Add symbol to map if not exists, update flag
3909	Remove symbol from symbols map if exists and mark load as updated
3910	Insert file load into list at specified index
3911	NewRule creates a new Rule object with specified kind and name attributes.
3912	SetKind updates a rule's kind and marks it as updated
3913	AttrKeys returns sorted attribute keys based on priority and lexicographical order.
3914	Attr retrieves an attribute's expression based on a key from a rule.
3915	AttrString retrieves a string attribute value by key from a rule.
3916	AttrStrings retrieves strings from rule attributes, returning them as a slice.
3917	DelAttr removes an attribute from the rule and marks it as updated.
3918	SetAttr updates rule attribute with given key and value, setting RHS and marking rule as updated.
3919	PrivateAttrKeys returns sorted keys from the private attribute map of a Rule instance.
3920	SetPrivateAttr updates a rule's private attributes with a given key-value pair.
3921	Insert rule into file at end or specific position.
3922	IsEmpty checks if rule attributes match non-empty attributes in kind info.
3923	CheckInternalVisibility updates visibility based on internal path components.
3924	New creates a new label with the given repository, package, and name.
3925	Rel computes a relative label based on repository and package comparison.
3926	Label Equal compares two labels based on Repo, Pkg, Name, and Relative fields.
3927	Label Contains checks if two labels have the same repository and package path prefix, panicking if either label is relative.
3928	generateFromPath traverses a directory tree, identifies .proto files, calculates relative paths, and outputs package information for Go protobuf generation.
3929	shouldCall checks if rel should be called based on mode and updateRels map
3930	shouldUpdate checks if rel should be updated based on mode and updateParent flags
3931	shouldVisit checks if relation should be visited based on mode and update relations map
3932	SquashRules merges attributes from two rules, resolving conflicts and appending comments, returning an error if expressions cannot be squashed.
3933	runClient attempts to connect to a Unix socket, starts a server if connection fails, retries up to three times, copies data from the connection to stderr, logs elapsed time, and closes the connection.
3934	UpdateRepo retrieves repository details and constructs a Repo object using RemoteCache.
3935	NewRemoteCache creates a RemoteCache instance initialized with known repositories, setting up mappings for root, remote, and module information, and returns a cleanup function.
3936	RemoteCache retrieves remote and VCS info for a given root path.
3937	get retrieves a value from the remote cache map using a key, returning the value, presence flag, and error.
3938	ensure will cache or load a value using a key and return it along with any error
3939	RelBaseName calculates the relative base name by checking directory paths and defaults to "root" if empty.
3940	Clone will create a deep copy of Config, copying all fields including nested maps.
3941	IsValidBuildFileName checks if a given build file name is valid based on a list of allowed names.
3942	check verifies config against tagLine entries for matching OS and architecture
3943	fileNameInfo extracts file info including path, name, extension, test status, and OS/architecture details from a given file path.
3944	otherFileInfo reads a file path, extracts basic info, attempts to read tags, updates info if successful, logs errors, and returns the updated info
3945	protoFileInfo extracts file info from a given path and protobuf file info, setting package name and import details based on options.
3946	AddRule adds a rule to the index, resolving imports and checking for duplicates based on labels.
3947	Finish method iterates over rules, collects embeddings, and builds import index.
3948	buildImportIndex populates importMap with unique imported rules
3949	IsSelfImport checks if a given label equals the result's label or any embedded labels.
3950	applyKindMappings updates LoadInfo based on MappedKind mappings, returning updated LoadInfo list
3951	appendOrMergeKindMapping updates existing or adds new LoadInfo based on KindLoad and KindName
3952	RuleName extracts the last valid identifier from input strings and appends "_proto" to it, defaulting to "root_proto".
3953	buildPackages constructs packages from proto files, handles grouping options, selects default package, adds generated files, and returns them based on mode
3954	selectPackage selects a package based on directory and relative path, returning an error if multiple packages are found.
3955	generateProto creates a proto_library rule with specified attributes based on ProtoConfig, Package, and visibility settings.
3956	generateEmpty filters proto_library rules without known source files and returns them
3957	ImportRepoRules reads a repository lock file, parses it according to its format, sorts the parsed repositories, generates rules for each, and returns them along with any errors encountered.
3958	MergeRules combines generated rules with existing ones, sorts them, merges files, and returns the updated list.
3959	GenerateRule constructs a rule object with attributes based on repository details.
3960	FindExternalRepo will return the path to an external repository and an error if the repository is not found or not a directory
3961	ListRepositories processes a workspace file, extracts repository macros, and gathers all repositories and their names, returning them along with errors if any occur.
3962	migrateLibraryEmbed updates Go rules by replacing "library" attribute with "embed" attribute
3963	migrateGrpcCompilers updates go_grpc_library rules to go_proto_library and sets compilers attribute
3964	squashCgoLibrary converts cgo_library to go_library if possible
3965	removeLegacyProto removes deprecated proto rules and filegroups from a configuration if the proto mode is default and fixing is enabled
3966	removeLegacyGazelle removes "gazelle" rule from specified config file if present.
3967	selectPackage filters buildable Go packages, selects a default one if available, or returns an error if multiple are found
3968	AddBuiltin associates a kind name with a resolver in metaResolver.
3969	MappedKind updates the mapping of package-relative paths to kinds in metaResolver.
3970	metaResolver resolves a rule based on package relationship and kind mapping
3971	sortExprLabels sorts labels in a list expression if they are all strings, maintaining comments.
3972	checkRulesGoVersion verifies compatibility by checking the rules_go version in def.bzl and logs warnings if incompatible.
3973	preprocessTags initializes genericTags map and sets "gc" key to true
3974	setBuildTags updates goConfig with build tags, returning an error if negation is used
3975	splitValue will return a list of trimmed string parts separated by commas
3976	copyGoModToTemp will create a temporary directory, copy go.mod file to it, and return the path or an error
3977	findGoTool will search for the Go tool executable using GOROOT environment variable and OS-specific extension
3978	isBuildable checks if a Go package has a Go file or non-empty proto sources, returning true if either condition is met.
3979	startServer starts a new server process with the same arguments and logs the command before releasing resources.
3980	watchDir sets up a watcher for directory changes, records them using a callback, and handles nested directories.
3981	listDirs will return a list of directories and a list of errors encountered while walking the directory tree
3982	shouldIgnore checks if a file path should be ignored based on certain conditions.
3983	recordWrite updates a map with a given path as key and sets its value to true while ensuring thread safety with a mutex.
3984	getAndClearWrittenDirs returns all written directories and clears the set.
3985	CombineHandlers merges multiple HTTP handlers into a single handler that executes them sequentially.
3986	VerifyContentType returns an HTTP handler checking if request's Content-Type header matches specified contentType.
3987	VerifyMimeType sets up an HTTP handler to ensure request Content-Type matches specified MIME type.
3988	VerifyBasicAuth checks HTTP Authorization header for matching credentials.
3989	VerifyJSONRepresenting converts object to JSON and verifies content type and JSON representation using handlers.
3990	VerifyFormKV creates a handler that verifies form data for a specific key-value pair.
3991	RespondWithProto creates a handler that responds with a protobuf message, sets status code and content type, and merges optional headers.
3992	RegisterFailHandlerWithT sets global fail handler if provided, otherwise clears it.
3993	EventuallyWithOffset sets timeout and polling intervals based on arguments and returns an AsyncAssertion.
3994	ConsistentlyWithOffset sets up an assertion with specified offsets, timeouts, and polling intervals, returning an asynchronous assertion object.
3995	Expect creates an assertion for the given actual value and additional information using the testing support package.
3996	Eventually sets timeout and polling intervals for assertions and returns an asynchronous assertion object.
3997	Consistently checks if an actual value consistently meets a condition over time with specified intervals, returning an assertion object.
3998	TimeoutCloser wraps an io.Closer with a timeout duration, returning a custom io.Closer.
3999	TimeoutReader wraps an io.Reader with a timeout duration.
4000	TimeoutWriter wraps an io.Writer with a timeout, returning a new io.Writer.
4001	Nest function recursively wraps errors with paths, aggregating nested errors into a single structure.
4002	SetMockService assigns mock services to a manager.
4003	FindMachineByIdOrAddress searches for a machine using either an ID or an address, returning the machine and an error if not found.
4004	FlushingWriter handles data write operations, locks mutex, sets wrote flag, flushes response if possible, and returns written bytes and error.
4005	FlushingWriter hijacks connection and returns net.Conn, bufio.ReadWriter, or error
4006	ListDeploys filters apps, retrieves events, and converts them to deploy data.
4007	AddAll adds routes for GET, POST, PUT, DELETE methods to the router.
4008	samlRequestTimeout extracts request_timeout from schemeData and converts it to an integer timeout
4009	RegisterHandler forwards registration to RegisterHandlerVersion with version "1.0".
4010	RegisterHandlerVersion assigns a handler to a specific version, path, and method, storing it in a list.
4011	Check evaluates given names against registered checkers and returns their statuses along with durations.
4012	DiscoverRepositoryPath checks directory for .git subdirectory, returning path if found or error if not.
4013	OpenRepository opens a git repository by path, appending .git if missing, and returns an error if not found.
4014	RemoteURL fetches the URL for a specified remote from the repository's configuration file, returning an error if the remote is not found.
4015	ListApps filters apps based on a label selector and returns them.
4016	Apps method returns an AppNamespaceLister for a given namespace using the indexer from appLister.
4017	appNamespaceLister List filters apps by namespace and selector, returning matching apps and an error
4018	StreamJSONResponse writes JSON response to writer and handles errors.
4019	DropDatabase will delete a database by name and return an error if unsuccessful
4020	Storage.Collection retrieves a collection by name.
4021	SetLogger updates the logger field of Target with the provided Logger instance while ensuring thread safety using mutual exclusion.
4022	Error logs an error message using a logger if available.
4023	Target.Errorf logs formatted errors with optional stack traces.
4024	Fatal logs a message and terminates execution if logger is not nil
4025	Debugf logs debug messages using a mutex and a logger if available.
4026	GetStdLogger acquires lock, retrieves logger, and returns standard logger instance if available.
4027	Namespace returns cluster namespace from custom data or default "tsuru"
4028	recreateContainers starts containers using DockerProvisioner and outputs to Writer
4029	checkProvisioner will return an error if provisioner configuration is incorrect
4030	checkDocker verifies Docker configuration and returns an error if any checks fail
4031	checkScheduler checks configuration settings for docker and returns an error or warning based on their values.
4032	checkRouter verifies router configuration and warns about deprecations
4033	Available checks if unit status is Started, Starting, or Error.
4034	Get retrieves a provisioner by name and executes it, returning the result or an error if the provisioner is unknown.
4035	Registry will return a list of Provisioners and an error if any provisioning function fails
4036	Error implements the error interface, returning a string that combines the underlying error message and a custom reason.
4037	validateVersion checks if the current version meets or exceeds the minimum supported version and returns true if it does.
4038	ReadTarget retrieves a target from environment or file, returning an error if undefined.
4039	WriteTarget writes a string to a target file in the user directory, returning an error if unsuccessful.
4040	WriteOnTargetList adds a new target to a list, ensuring it doesn't already exist and handles file operations safely.
4041	Conn establishes a database connection using configuration and returns a Storage object along with any errors encountered.
4042	Apps method creates and configures a MongoDB collection named "apps" with a unique index on the "name" field.
4043	PoolsConstraints creates an index for pool constraints in MongoDB and returns the collection.
4044	Users method creates and configures a MongoDB collection for users, ensuring uniqueness on email.
4045	SAMLRequests retrieves a collection with an indexed ID field.
4046	AppLogCollection retrieves a log collection for a given app name.
4047	CreateAppLogCollection creates a log collection for an app and returns it along with an error.
4048	LogsCollections fetches collection names and constructs storage collections accordingly.
4049	ArchiveBuildCmds generates build commands for an app using an archive URL.
4050	ArchiveDeployCmds generates deployment commands for an app using an archive URL.
4051	DeployCmds constructs a deployment command by appending "deploy-only" to unit agent commands, joins them, and returns a shell command.
4052	runWithAgentCmds constructs command arguments for an agent using app details and configuration.
4053	newApps creates an apps instance with the given client and namespace.
4054	Commit container, tag image, push to repository, return image ID and error
4055	processTags removes duplicates and trims whitespace from a list of tags
4056	aggregateContainersBy groups containers by host address using a matcher and returns a map of counts per host.
4057	chooseNodeToAdd selects a node for a container, updates its host address, and logs the choice.
4058	chooseContainerToRemove selects a node based on min/max criteria, retrieves a container ID, and logs the choice.
4059	Get retrieves a router by name, returning the router and an error if not found or invalid.
4060	Default returns the name of the default router or an error if not found
4061	Store updates or inserts a document in a MongoDB collection based on the app name.
4062	Clientset's TsuruV1 method returns a FakeTsuruV1 interface.
4063	Clientset Tsuru returns a FakeTsuruV1 interface
4064	NewAppInformer creates a new SharedIndexInformer for applications using the provided client, namespace, resync period, and indexers.
4065	NewFilteredAppInformer creates a SharedIndexInformer for Tsuru apps, applying list and watch functions with optional tweaks.
4066	FakeApps Watch invokes a watch action with given options and returns a watch interface or error
4067	Patch app object and return result or error
4068	NewSharedInformerFactory creates a factory for shared informers with default resync duration and watches all namespaces.
4069	NewFilteredSharedInformerFactory creates a new shared informer factory with specified parameters.
4070	Proxy method for broker client returns error indicating service is unavailable
4071	UnbindUnit method of brokerClient returns nil error
4072	Create will validate a plan's name, CPU share, and memory before storing it, returning errors if any criteria are not met.
4073	Remove will delete a plan by name and return an error if unsuccessful
4074	ensureDefault checks for existing plans, creates default if none, and saves it
4075	DeleteInstance unbinds a service instance, destroys it, and removes it from the database if no apps are bound.
4076	ToInfo converts ServiceInstance to ServiceInstanceWithInfo, fetching additional info and handling errors gracefully.
4077	Update service instance, validate team owner, connect to DB, process tags, execute actions pipeline.
4078	BindApp binds an application to a service instance, executes database and endpoint actions, sets environment variables, binds units, and handles events.
4079	BindUnit binds a unit to a service instance, updates database, and rolls back on failure.
4080	UnbindApp will remove app bindings, execute unbinding actions, and return an error if app is not bound
4081	Status retrieves service status using endpoint.
4082	ProxyInstance forwards requests to a service based on path and method, validating paths and handling errors.
4083	Inc updates app quota by specified quantity, returns error if limit exceeded or storage operation fails
4084	SetLimit updates an app's quota limit, adjusting for negative values and ensuring it doesn't exceed current usage, returning an error if necessary.
4085	Set updates application quota, returns error if invalid.
4086	Get quota for app from storage
4087	RemoveImage deletes a Docker image by name and returns an error if unsuccessful.
4088	RemoveAppImages deletes Docker images for a given app name and handles errors gracefully.
4089	Create platform, validate, insert, generate image, add platform, handle errors
4090	List will return all platforms or only enabled ones based on the parameter an error will be returned if there's a problem fetching the data
4091	FindByName retrieves platform by name, returning it or an error if invalid.
4092	Update platform options, validate name, process input, update data, create image, apply updates, and manage applications.
4093	Remove will delete a platform by name and handle errors related to database operations, image removal, and storage deletion.
4094	Rollback updates platform configuration using provided options, handles errors, and applies changes.
4095	GetPoolByName retrieves a pool by name from the database, returning it or an error if not found.
4096	Manager retrieves repository manager based on configuration or defaults to nop.
4097	Register associates a name with a repository manager in a global map.
4098	start will initiate the sync process with an interval, list applications, sync them, and handle shutdown gracefully
4099	Shutdown signal sent; waits for completion or timeout, then marks as stopped.
4100	GetForProvisioner retrieves a Builder for a given Provisioner, defaulting to "docker" or "kubernetes" if not found.
4101	get retrieves a Builder by name, returning an error if unknown
4102	Registry will return a list of Builder objects and an error if there is one
4103	RegisterQueueTask registers a task using a Docker provisioner and returns an error if the operation fails.
4104	Apps method returns an app informer for the version instance.
4105	DeepCopy creates a copy of the App instance and returns it.
4106	DeepCopy creates a copy of AppList instance, initializing a new instance and copying data into it.
4107	DeepCopy creates a copy of AppSpec instance.
4108	Write logs asynchronously, copying data and returning byte count
4109	ResetPassword updates user password using token, sends new password, and marks token as used.
4110	addKnownTypes registers known types with a scheme and group version.
4111	Register adds a Shutdownable object to the registered list safely using a lock.
4112	Do executes shutdown procedures concurrently for all registered handlers, reporting progress and errors to the writer.
4113	ListImagesOrDefault retrieves images for a platform, returning a default image if none are found.
4114	MigrateAppsCRDs sets config, retrieves provisioner, lists pools, filters by provisioner, lists apps, provisions them, and returns errors.
4115	Register will store a migration function under a given name and return an error if registration fails
4116	RegisterOptional registers an optional migration function under a given name.
4117	Run will execute optional command if name is provided, otherwise it will force mandatory command or return an error
4118	Units retrieves provisioner units and handles nil case for compatibility.
4119	MarshalJSON converts App object to JSON, including details like name, platform, teams, units, repository, plan, routers, cname, owner, pool, description, deploys, teamowner, lock, tags, and error messages.
4120	AcquireApplicationLockWait attempts to acquire a lock on an application, retries with a timeout, and returns success or an error.
4121	ReleaseApplicationLock attempts to release an app lock up to 3 times with increasing delays, logging any errors encountered.
4122	GetByName retrieves an application by name, returning it and an error if not found.
4123	AddUnits adds n units to an app, processes them, and handles status checks and logging. Returns error if validation fails.
4124	SetUnitStatus updates the status of a unit by name and returns an error if not found or provisioning issues.
4125	UpdateNodeStatus updates node status, handles errors, and returns update results.
4126	available checks if any unit is available and returns true if at least one is found
4127	app.Grant adds a team to an app, updates the database, and grants access to relevant users, returning an error if any step fails.
4128	Revoke a team's access to an application, remove it from lists, and update permissions accordingly.
4129	GetTeams retrieves teams using app's team names and returns them.
4130	setEnv updates application environment with given variable and logs if public.
4131	getEnv retrieves environment variable or returns error if not declared
4132	validateNew checks if app name is valid and contains at most 40 characters, lowercase letters, numbers, or dashes, starting with a letter; returns validation error if invalid.
4133	validate will run validation checks on pool and plan returning an error if either check fails
4134	InstanceEnvs retrieves environment variables for a specific service and instance.
4135	Run command logs and executes it with writer.
4136	GetUnits retrieves application units, converts them, and returns an error if failed.
4137	GetUUID retrieves UUID or generates a new one if none exists, updating the database and returning the UUID.
4138	Merges environment variables from App and ServiceEnvs into a single map.
4139	SetEnvs updates application environments, logs changes, and restarts units if required.
4140	UnsetEnvs removes specified environment variables from the App and updates the database, restarting units if required.
4141	AddCName adds CNAMEs to app after validating and updating routes.
4142	app.Log will log a message with source and unit information and save it to the database
4143	LastLogs retrieves recent logs based on specified lines and filter, returning matching logs and an error if any.
4144	List filters applications based on query and status, returning filtered list or error
4145	Swap two apps' CNames and routes, returning an error if unsuccessful
4146	Start app process log provisioner start rebuild routes
4147	GetDbDriver retrieves a database driver by name and returns it along with an error if unknown.
4148	GetCurrentDbDriver fetches the current database driver, initializing it if necessary, and returns it along with any errors encountered.
4149	NewForConfig creates a clientset using rest.Config, setting up rate limiting and initializing API clients, returning the clientset and any errors encountered.
4150	GetAppFromUnitID fetches an app using a unit ID, retrieving container details and app name before returning the app object or an error.
4151	NewPipeline creates a new pipeline from given actions with isolated results.
4152	Result retrieves the final result from a pipeline's actions safely using a mutex lock.
4153	DecodeJsonPayload reads request body content, unmarshals JSON into provided variable, and returns error if unsuccessful.
4154	UrlFor constructs a URL for a given path and query parameters based on the request's base URL.
4155	GetCorsInfo extracts CORS info from request headers, determining if it's a cross-origin request, preflight, and collecting necessary details.
4156	CorsMiddleware wraps handler, validating CORS requests and setting appropriate headers.
4157	RecorderMiddleware wraps a handler, captures response status and size, and stores them in request environment.
4158	recordResponseWriter updates header status code and flag if already written
4159	MakeRouter creates a router with given routes, starts it, and returns the app instance or an error.
4160	AppFunc handles routing requests, sets path parameters, and executes handler functions.
4161	escapedPath extracts the path part from a URL by splitting it at the '?' character and returns the path component.
4162	escapedPathExp sanitizes a path expression, ensuring it starts with '/', does not contain '?', and applies URL encoding/decoding.
4163	start initializes router trie and index processes routes inserting them into trie and updating index compresses trie if enabled returns error if any step fails
4164	ofFirstDefinedRoute selects the route with the smallest index from a list of matches and returns it
4165	findRouteFromURL looks up routes in a Trie using HTTP method and URL path, returning the first matching route, parameters, and path match status.
4166	ContentTypeCheckerMiddleware checks content type and charset, errors if invalid, otherwise calls next handler
4167	responseWriter implements CloseNotify by returning a channel from the underlying http.ResponseWriter.
4168	Middleware logs Apache requests using custom format.
4169	executeTextTemplate executes a text template with access log utilities and returns the result as a string, panicking on errors.
4170	RemoteUser extracts user info from access log environment variable.
4171	ApacheQueryString returns the URL query string prefixed with '?' if present, otherwise returns an empty string
4172	accessLogUtil retrieves start time from environment if available
4173	ApacheRemoteAddr extracts IP address from RemoteAddr field.
4174	accessLogUtil retrieves response time duration from environment variable if available
4175	JsonIndentMiddleware adds indentation to JSON responses using specified prefix and indent.
4176	EncodeJson serializes a Go value to JSON with indentation using writer's prefix and indent settings, returning the byte array and any errors encountered.
4177	WriteHeader sets HTTP response status code and marks header written
4178	MakePath replaces placeholders in a route path with corresponding parameter values.
4179	RecoverMiddleware intercepts panics, logs them, and sends appropriate HTTP responses.
4180	WrapMiddlewares applies middleware functions in reverse order to a handler.
4181	GzipMiddleware wraps a handler, enabling gzip compression if supported by the client.
4182	gzipResponseWriter sets headers before writing response status code.
4183	gzipResponseWriter hijacks connection and returns net.Conn, bufio.ReadWriter, and error
4184	gzipResponseWriter handles HTTP responses, compressing them with gzip when possible and writing to the underlying response writer.
4185	Authenticates requests using Basic Auth, checks user credentials, and invokes handler if authorized.
4186	printDebug recursively prints debug information for a node tree with indentation based on level
4187	AddRoute adds a route to the Trie with HTTP method and path expression, returning an error if unsuccessful.
4188	printDebug prints a debug representation of the Trie starting from the root node.
4189	Trie.FindRoutes searches for routes matching HTTP method and path, returning matched routes and parameters.
4190	FindRoutesAndPathMatched searches for routes matching HTTP method and path, returning matches and whether path was matched.
4191	FindRoutesForPath searches for routes matching a given path in a Trie, returning a list of Match objects containing the route and parameters.
4192	api.Use appends middleware functions to the stack
4193	MakeHandler creates an HTTP handler using API middleware and application function.
4194	PoweredByMiddleware adds "X-Powered-By" header before calling the handler.
4195	StatusMiddleware logs response status and time, counts occurrences, and aggregates total response time.
4196	GetStatus retrieves server status including uptime, response counts, and times.
4197	JSONP middleware wraps response with callback if specified in URL query.
4198	jsonpResponseWriter flushes response writer or sets header to OK before flushing
4199	AccessLogJsonMiddleware logs JSON access records after calling the handler.
4200	Fetch retrieves S3 object content, skipping if unchanged, handling gzip, and returning io.Reader.
4201	sanityCheck will print an environment variable and return true if found, otherwise return false
4202	release will stop accepting connections, start a timeout, and force-close if the deadline is not met
4203	fetchLoop waits for a minimum interval, runs fetch, measures duration, and adjusts sleep if necessary to maintain interval.
4204	forkLoop continuously forks commands and returns errors if any occur
4205	Init initializes a file object, setting default interval if needed, updates hash, and returns an error if path is missing.
4206	Fetch will open a file if it has changed since last fetch, with retries to ensure it's not mid-copy. Returns a reader and error if unsuccessful.
4207	Fetch will return an io.Reader and an error if the HTTP request fails or headers mismatch.
4208	NewConfig creates a new Config instance with default settings, overriding specific configurations for Kafka consumer group behavior.
4209	Validate config settings, truncate unsupported precisions, ensure strategy validity, update version if necessary, check retry and dwell time, validate heartbeat and session timeouts, enforce metadata rules, verify consumer offset initialization.
4210	NewClient creates a Kafka client using given addresses and configuration, validating the config before creation and returning the client instance or an error.
4211	AsyncClose will close the partition consumer asynchronously and return an error if the operation fails
4212	partitionConsumer Close waits for async close and returns closure error
4213	MarkOffset updates partition consumer state with new offset and metadata if valid.
4214	NewConsumer creates a Kafka consumer using given addresses, group ID, topics, and configuration, returning a Consumer instance and an error if any step fails.
4215	MarkOffsets updates offsets for specified topics and partitions using a consumer's subscription information.
4216	ResetOffset updates the offset for a given message topic and partition using the provided metadata.
4217	Consumer Close releases resources and handles errors during shutdown.
4218	hbLoop manages heartbeats, stops on errors or signals.
4219	twLoop runs a ticker to refresh metadata, handles errors, and stops on stop signal or dying channel.
4220	cmLoop commits offsets periodically or on stop signal.
4221	fetchOffsets retrieves consumer offsets for specified topics and partitions, handling errors and updating offset information accordingly.
4222	MarkOffset updates partition offset with message details and metadata.
4223	ResetOffset updates partition offset for a given message and metadata
4224	Offsets method locks the stash, creates a result map, iterates over offsets, converts keys to strings, assigns values, unlocks, and returns the map.
4225	Actual updates resource based on cluster state and caches result.
4226	Expected calculates the expected cluster state based on the instance group and updates the cache.
4227	Delete instance group, remove associated resources, update provider config, render cluster, return updated cluster and original resource
4228	GetReconciler will return a reconciler based on the cloud provider and runtime parameters, or an error if the cloud type is invalid
4229	GetVersion constructs a Version struct with current version details.
4230	GetVersionJSON converts version info to JSON string logging errors if marshaling fails.
4231	Actual method updates resource group details based on immutable cluster state, returning updated cluster and resource objects.
4232	Expected calculates and returns a new cluster configuration based on the provided immutable state and resource group.
4233	CreateCmd constructs a Cobra command for creating a Kubicorn API model, binds flags, sets usage template, and runs creation logic based on input arguments.
4234	NewUbuntuCluster creates a Kubernetes cluster configuration with specified control plane and node settings.
4235	ProviderConfig parses JSON provider config from ClusterAPI and returns a ControlPlaneProviderConfig object.
4236	SetProviderConfig marshals a control plane provider config to JSON, converts it to a string, and assigns it to the cluster API spec. An error is returned if marshaling fails.
4237	MachineProviderConfigs parses provider configs from cluster machine sets and returns them.
4238	SetMachineProviderConfigs updates machine sets with matching provider configurations or logs warnings if no match is found.
4239	NewCluster creates a new Cluster object with the given name and default configurations.
4240	DeployControllerCmd creates a Cobra command for deploying a controller, handling name input, binding common flags, and running the deployment.
4241	NewRetrier creates a Retrier instance with specified retries, sleep time, and retryable function.
4242	RunRetry attempts retries based on configured parameters, handling signals and logging errors.
4243	MustGenerateRandomBytes will panic if it cannot generate random bytes of the specified length, otherwise it returns the generated bytes.
4244	ExplainCmd creates a Cobra command to explain a cluster, setting options based on arguments and configurations.
4245	TimeOrderedUUID generates a UUID based on current UTC time and random bytes.
4246	GetConfigCmd creates a Cobra command for managing Kubernetes configurations, setting options based on flags and arguments, and running the get-config operation.
4247	RunAnnotated executes a task with optional logging and timing, returning any errors encountered during execution.
4248	ListCmd creates a Cobra command for listing states with options for state store and AWS configurations, handling errors and logging critical issues.
4249	NewUbuntuCluster creates a Kubernetes cluster configuration with specified parameters.
4250	EditCmd creates a Cobra command to edit a cluster state, sets flags, and runs the edit operation.
4251	RemoveKey deletes a public key from the agent.
4252	RemoveKeyUsingFile reads a public key file and removes the corresponding key from the Keyring.
4253	Firewall.Actual retrieves firewall details from DO API, populates cluster resource, and handles port range adjustments before returning updated cluster and resource objects.
4254	Expected will generate a new cluster configuration based on the current firewall rules and tags, returning both the updated cluster and resource details.
4255	Apply firewall rules, ensure droplets active, create firewall, update cluster, return updated resource and cluster
4256	Delete firewall resource and return updated cluster and new resource
4257	DeleteCmd creates a Cobra command for deleting a Kubernetes cluster, handling options and running deletion logic.
4258	NewStateStore selects a state store based on options and returns a ClusterStorer or an error.
4259	Commit function marshals cluster data to JSON, writes to Git repo, creates remote, and commits changes. Returns error if any step fails.
4260	ApplyCmd creates a Cobra command for applying cluster resources to a cloud, handling name arguments and binding common flags.
4261	ExpandPath resolves relative paths ("." and "~") to absolute paths using the current working directory or home directory.
4262	CompletionCmd generates completion code for bash and zsh shells based on user input.
4263	AdoptCmd creates a Cobra command for adopting a Kubernetes cluster into a Kubicorn state store.
4264	StrEnvDef retrieves environment variable env, returns default def if unset.
4265	IntEnvDef retrieves an environment variable as an integer, returning a default value if unset or invalid.
4266	BoolEnvDef retrieves environment variable as boolean, returns default if unset or invalid.
4267	readFromFS reads file content from a given path, expanding tilde to home directory if present, and returns its contents as a string with any errors encountered during the process.
4268	VersionCmd creates a Cobra command to display Kubicorn version information.
4269	NewSignalHandler creates a signal handler with a specified timeout and listens for interrupt and kill signals.
4270	Register starts a goroutine to handle timeouts and signals, logging and exiting based on received signals.
4271	NewUbuntuCluster creates a Kubernetes cluster configuration with specified master and node details.
4272	BeginningOfHour sets the minute and second of the current time to zero, returning the time at the start of the hour.
4273	BeginningOfDay will return the start of the day for the given time, truncated to midnight in the same timezone.
4274	BeginningOfWeek calculates the start of the week based on the current day and the specified start day, adjusting for weekdays accordingly.
4275	BeginningOfMonth returns the start of the current month's date.
4276	BeginningOfQuarter calculates the first day of the quarter for a given date.
4277	BeginningOfYear calculates the time at the start of the current year based on the Now instance's location.
4278	EndOfMinute calculates the time at the end of the current minute.
4279	EndOfHour calculates the end time of the current hour by adding one less nanosecond to the start of the next hour.
4280	EndOfDay will return the time at the end of the day for the given date.
4281	EndOfWeek calculates the end of the week by adding 7 days and subtracting one nanosecond from the beginning of the week.
4282	EndOfMonth calculates the last day of the month by adding one month to the beginning of the current month and subtracting one nanosecond.
4283	EndOfQuarter calculates the last moment of the current quarter by adding three months to the beginning of the quarter and subtracting one nanosecond.
4284	EndOfYear calculates the last moment of the current year by adding one year to the beginning of the year and subtracting one nanosecond.
4285	MustParse will parse strings into time.Time and panic if there's an error
4286	Between checks if current time is between given times.
4287	ParseInLocation sets location and parses time strings into a time.Time object with the given location and returns an error if parsing fails.
4288	MustParse converts strings to time.Time using New and MustParse methods, returning current time if parsing fails.
4289	MustParseInLocation converts strings to time in specified location
4290	Between checks if the current time falls between two given times.
4291	NewChannelMemoryBackend creates a channel memory backend with a specified size, initializes channels for records and events, starts the backend, and returns it.
4292	Start launches a goroutine for processing if not already running.
4293	ChannelMemoryBackend flushes events using a wait group
4294	Stop the channel memory backend, signal stop event, wait for completion.
4295	Formatted returns cached or newly computed formatted string based on formatter method.
4296	Message will return the formatted message with redacted arguments if applicable
4297	SetLoggerBackend updates logger's backend and marks it as initialized.
4298	MustGetLogger retrieves a logger for a given module, panicking if it fails.
4299	Reset initializes logging with default settings.
4300	Logger checks if a level is enabled for a specific module using the default backend.
4301	Logger.Criticalf logs a critical message with formatted arguments.
4302	Logger's Warningf logs warning messages using a specified format and arguments.
4303	Noticef logs a notice message with formatted arguments.
4304	Logger.Infof logs informational messages using a specified format and arguments.
4305	SetFormatter updates the global formatter with a new Formatter instance while ensuring thread safety.
4306	MustStringFormatter creates a new string formatter and panics if initialization fails.
4307	formatFuncName extracts package and function names based on verb
4308	Log level, depth, and record, update formatter, then log error
4309	LogLevel converts a log level string to an enum and returns it along with an error if invalid.
4310	AddModuleLevel converts a Backend to a LeveledBackend, creating a new one if necessary.
4311	GetLevel retrieves a module's log level, defaults to debug if not configured.
4312	SetLevel updates the logging level for a specific module
4313	IsEnabledFor checks if a given logging level is enabled for a specific module based on the module's configured level.
4314	MultiLogger combines multiple logging backends into a single leveled logger.
4315	Log messages using configured backends based on level and module.
4316	GetLevel retrieves the highest logging level for a given module across all backends.
4317	multiLogger SetLevel updates log level for all backends
4318	multiLogger checks if any backend is enabled for given level and module
4319	ConvertColors converts integers to color strings, applying bold formatting if specified.
4320	NewSyslogBackend creates a SyslogBackend instance with a specified prefix and returns it along with any errors encountered during creation.
4321	NewSyslogBackendPriority creates a SyslogBackend with specified priority and prefix, returning it and any errors encountered.
4322	SetBackend configures logging backends, combining them if necessary, and sets up a default leveled logger.
4323	NewCommander creates a new Commander instance with specified top-level flags, name, and default output/error streams, setting up usage help.
4324	Execute a command with given arguments, returning usage error if not found.
4325	explain will write usage instructions for a command including subcommands, groups, and important flags
4326	explainGroup will write subcommands and their synopsis to a writer, sorting them and handling aliases
4327	explain will write command usage and subflags help to io.Writer
4328	dealias will recursively resolve aliases in a command structure
4329	Execute runs a command using the default commander and returns the exit status.
4330	LoadFromData reads config data into a temporary file, creates a ConfigFile instance, and parses the data, returning the ConfigFile and any errors encountered.
4331	LoadFromReader reads configuration from a reader and returns a ConfigFile object along with any errors encountered.
4332	ReloadData reads configuration from reader and updates current config if single file is present, returns error otherwise.
4333	AppendFiles adds file paths to a config and reloads it, returning an error if appending to in-memory data is attempted.
4334	GetKeyList retrieves keys from a specified section, returning them as a list, while handling default sections and locking for thread safety.
4335	SaveConfigData serializes a ConfigFile to a Writer, formatting keys and values according to PrettyFormat rules and writing comments and section headers.
4336	SaveConfigFile saves a configuration file and returns an error if the operation fails.
4337	Find method searches for a CSS selector and returns a Selection object.
4338	FindByXPath appends an XPath selector and returns a new Selection.
4339	FindByLink searches for a link by text and returns a Selection object.
4340	FindByLabel searches for a label and returns a selection.
4341	FindByName searches for a selection by name and returns a Selection object.
4342	FindByClass filters elements by class name and returns a Selection object.
4343	FindByID searches for a selection by ID and returns a new Selection object.
4344	First will return a Selection object based on the given CSS selector applied to the session and selectors.
4345	FirstByXPath selects the first element matching an XPath expression and returns a Selection object.
4346	FirstByLink constructs a Selection object targeting the first element matching a link selector with the given text.
4347	FirstByLabel constructs a Selection based on the first element matching a label in the session.
4348	FirstByName selects the first item matching the given name and returns a Selection object.
4349	All selects all elements matching a CSS selector and returns a MultiSelection object.
4350	AllByXPath appends an XPath selector to session and returns a MultiSelection object
4351	AllByLink constructs a MultiSelection object using the session and selectors appended with target.Link and given text.
4352	AllByLabel constructs a MultiSelection using the session and selectors with a label filter applied to the given text.
4353	AllByName filters selectable elements by name and returns a MultiSelection object.
4354	AllByClass appends a class selector to the session and returns a MultiSelection object.
4355	AllByID constructs a MultiSelection using session and selectors for target ID matching the given text.
4356	FindForAppium searches for an element using Appium selector and returns a Selection object.
4357	Timeout sets the configuration timeout duration based on the given seconds.
4358	ChromeOptions sets a Chrome option with the given name and value in the config.
4359	JoinPage constructs a Page instance by merging options with default configuration and creating a session with the specified URL.
4360	Destroy will delete the page's session and return an error if it fails
4361	Reset clears cookies, local storage, session storage, and navigates to "about:blank".
4362	Navigate sets URL and handles errors
4363	GetCookies retrieves cookies from session, converts them to http.Cookie structs, and returns the list along with any errors encountered.
4364	SetCookie sets a cookie in the session, converting http.Cookie to api.Cookie and handling errors.
4365	DeleteCookie removes a cookie by name, returning an error if the deletion fails.
4366	ClearCookies will delete session cookies and return an error if failed
4367	Page.URL retrieves the session URL or returns an error
4368	Set window dimensions on session's page.
4369	Save screenshot to file with specified name.
4370	Page.Title retrieves page title using session, returns title and error if failed
4371	HTML retrieves page source from session and returns it as a string with potential error
4372	PopupText retrieves alert text from session and returns it or an error.
4373	EnterPopupText sets alert text via session and returns error if failed
4374	ConfirmPopup will accept an alert and return an error if it fails
4375	CancelPopup dismisses an alert and returns an error if it fails.
4376	SwitchToParentFrame attempts to switch the session to the parent frame, returning an error if unsuccessful.
4377	SwitchToRootFrame attempts to switch the session to the original page frame and returns an error if it fails.
4378	NextWindow changes the current active window to the next one in the list.
4379	CloseWindow deletes the active window session and returns an error if failed
4380	WindowCount retrieves window count from session and returns error if failed
4381	LogTypes retrieves log types from session and returns them or an error.
4382	MoveMouseBy adjusts mouse position relative to current location and returns error if movement fails
4383	DoubleClick attempts to perform a double-click action using the session and returns an error if it fails.
4384	Click performs a click action based on the event type and button, returning an error if unsuccessful.
4385	Click will execute a click action on each selected element and return an error if any click fails
4386	DoubleClick will perform a double click action on each selected element and return an error if failed
4387	Fill updates the selected elements with the given text, returning an error if any operation fails.
4388	Tap will execute a touch action based on the event type on each selected element, returning an error if any action fails
4389	Touch will apply a touch event to each selected element and return an error if any step fails
4390	FlickFinger selects an element and performs a touch flick gesture with specified offsets and speed, returning an error if any step fails.
4391	ScrollFinger scrolls the selected element by specified offsets and returns an error if selection or scrolling fails.
4392	NewCapabilities creates a Capabilities object with specified features.
4393	Capabilities JSON converts object to string representation.
4394	HaveTitle creates a matcher to compare titles.
4395	HaveURL creates a matcher to compare URL strings.
4396	HavePopupText creates a matcher for popup text comparison.
4397	HaveLoggedError constructs a matcher to verify logged errors with specified messages and levels.
4398	Text retrieves the text content of a single selected element, returning an error if selection or retrieval fails.
4399	Active will return true if the selected element equals the active element, otherwise false, and an error if any operation fails
4400	Attribute retrieves an element's attribute value or an error if not found
4401	CSS will return a CSS property value and an error if the property is not found
4402	`Selected` checks if the element is selected and returns a bool and error.
4403	Visible checks if an element is displayed and returns a boolean and an error
4404	Enabled checks if the selection element is enabled and returns a boolean and an error.
4405	HaveCount creates a Gomega matcher to verify the element count of a collection.
4406	HaveAttribute constructs a matcher to check if an object has an attribute with a specific value.
4407	EdgeDriver creates a WebDriver instance for MicrosoftWebDriver, setting the port and address accordingly.
4408	Selendroid creates a WebDriver instance using a JAR file and optional configurations.
4409	SwitchToFrame selects an element and switches to the corresponding frame, returning an error if unsuccessful.
4410	Count will return the number of selected elements and an error if selection fails
4411	EqualsElement checks if two selections contain the same element, returning true if they do and an error if they don't or if the inputs are invalid.
4412	MouseToElement selects an element and moves the mouse to it, returning an error if either operation fails.
4413	loggingMiddleware logs incoming HTTP requests and passes them to the next handler
4414	chainHandlers combines middleware functions and returns a single handler that executes them sequentially.
4415	HTTPReverseProxy starts a reverse proxy server on a specified port, using middleware for processing requests and logs the server start.
4416	Installer checks binaries against version ranges and returns error if any fail.
4417	CheckVersion verifies if the provided version of a binary falls within a specified semver range and logs debug information throughout the process.
4418	GetVersionForBinary executes a binary command to retrieve its version, returning the parsed version string and any errors encountered.
4419	getUser fetches a user by ID using HTTP GET, returns a User object and an error if unsuccessful.
4420	login sends credentials to server and returns user data or error
4421	loginHandler authenticates user credentials, sets session, and redirects based on success.
4422	logoutHandler resets user session and redirects to home page
4423	viewHandler renders login template with user and error data
4424	Run starts HTTP server, handles login, logout, and view requests on port 8081
4425	WithRequest sets the request and logs a warning if the body is JSON-formatted.
4426	WillRespondWith updates the interaction's response and returns the modified interaction.
4427	isJSONFormattedObject checks if input is a JSON object or byte array and returns true if it is a valid JSON object.
4428	ByUsername retrieves a user by username, returning the user if found or an error if not.
4429	ByID retrieves a user by ID from the repository or returns an error if not found.
4430	UserLogin handles HTTP requests for user authentication, validates credentials, sets headers, and responds accordingly with JSON.
4431	newClient initializes services and creates a PactClient instance with them.
4432	NewClient creates a PactClient instance using mock services.
4433	ListServers logs debug info and constructs a list of mock servers from a manager.
4434	UpdateMessagePact sends a message using Pact and logs errors from stdout/stderr.
4435	PublishPacts sends a request to publish pacts using a service manager, waits for the response, logs details, and returns any errors encountered.
4436	getPort extracts port number from URL, defaults to 443 for https and 80 otherwise, returns -1 on error
4437	getAddress extracts and returns the host part of a URL, removing the port if present.
4438	sanitiseRubyResponse removes comments, bundle exec commands, and extra newlines from a Ruby response
4439	Publish a Pact request using the Publisher's client, validate it, and log the process.
4440	FindPortInRange will return a port number and an error if all ports are unusable
4441	EachLike creates a matcher for content requiring at least minRequired elements.
4442	Term creates a Matcher using a generate string and a regex pattern
4443	UnmarshalJSON converts JSON bytes to map[string]Matcher using String Matcher.
4444	objectToString converts interface{} to string using JSON if not already a string
4445	match will return a matcher based on the source type and parameters, handling various types including pointers, slices, structs, strings, booleans, integers, floats, and panicking for unsupported types
4446	AddMessage appends a new Message to Pact and returns it
4447	AddInteraction sets up Pact, logs debug, creates Interaction, appends to Interactions, and returns it.
4448	Teardown logs debug info, stops server if running, updates Server state, and returns Pact instance
4449	Verify Pact interactions using MockService and run integration tests.
4450	stateHandlerMiddleware processes HTTP requests, invoking state handlers based on URL paths and returning appropriate responses.
4451	VerifyMessageProviderRaw sets up a temporary server to verify message providers against Pact files, returning a verification response or error.
4452	VerifyMessageConsumerRaw will process a message, reify it, narrow its type, yield it to a handler, and update the Pact if successful.
4453	mockClient's VerifyProvider returns predefined response and error based on request.
4454	NewService constructs a MockService with given arguments and sets command path.
4455	Setup initializes channels and starts monitors for service management.
4456	addServiceMonitor starts a goroutine to log debug info and process commands received on commandCreatedChan, updating processMap with Pid and Process details.
4457	removeServiceMonitor listens for completed commands, interrupts them, and removes them from process map
4458	List returns a map of service IDs to command objects
4459	ServiceManager constructs and returns an exec.Cmd with command and arguments, including environment variables.
4460	call sends HTTP request based on method and URL, marshals content to JSON, sets headers, reads response body, and handles errors
4461	DeleteInteractions logs debug info, constructs URL, and calls DELETE method.
4462	MockService logs debug info and adds interaction via POST request.
4463	MockService.WritePact logs debug info, validates required fields, sets default mode, constructs pact data, and sends POST request.
4464	ExpectsToReceive sets message description and returns message
4465	WithMetadata updates message's metadata and returns updated message
4466	AsType sets message decoding type and returns the message
4467	UserLogin handles JSON login requests, authenticates users, sets headers, and returns appropriate responses based on authentication success or failure.
4468	Region retrieves AWS region based on environment variable or domain name.
4469	New creates an S3 instance with a given domain and keys, using default domain if none provided.
4470	Bucket creates a new bucket instance with the given name and default configuration.
4471	PutWriter writes data to a specified path using given headers and config, returning a writer and error.
4472	url constructs a URL object based on bucket path and config, handling versionID and path style addressing.
4473	SetLogger configures the logger with output destination, prefix, flags, and debug mode.
4474	InstanceKeys retrieves IAM credentials for an EC2 instance and returns them as Keys along with any errors encountered during the process.
4475	EnvKeys retrieves AWS credentials from environment variables and returns them along with an error if any key is missing.
4476	Sign attaches authentication headers to HTTP request using bucket credentials
4477	getAWSKeys retrieves AWS credentials from environment or instance metadata, returning them or an error if none found
4478	homeDir retrieves the user's home directory using environment variable or shell command, returning the path and an error if not found
4479	ACL sets the "x-amz-acl" header in the HTTP request if the provided ACL string is not empty.
4480	putPart sends a PUT request with part data, verifies response, and checks ETag一致性
4481	abort sends a DELETE request to cancel a multipart upload and logs errors if the response status is not 204.
4482	growPartSize calculates if increasing the part size would exceed the maximum allowed object size.
4483	CheckDisallowed verifies allowed environment variables based on a prefix and specification, returning an error for unknown variables.
4484	Process config fields by gathering info, looking up environment values, applying defaults, checking requirements, and processing each field. Return error if required keys are missing or fields fail processing.
4485	MustProcess will process the given prefix and specification, panicking if an error occurs during processing
4486	toTypeDescription converts a reflection type to a human-readable description
4487	Usage will print usage information as a table and return an error if formatting fails
4488	Usagef generates and executes a usage template based on the given specification, writing the result to the specified output writer.
4489	Usaget gathers info using prefix and spec, then executes template with the gathered data.
4490	Scan assigns a time value to the Time instance, sets Valid based on success, and returns an error if the type is incompatible.
4491	Time Value returns driver.Value or error if time is invalid
4492	NewTime creates a Time object with given time and validity flag.
4493	TimeFromPtr converts a pointer to time.Time to a custom Time object.
4494	Time.ValueOrZero returns the time value if valid, otherwise zero time
4495	Time.MarshalJSON returns JSON representation or null if time is invalid
4496	SetValid updates Time instance with new value and marks it as valid
4497	Ptr method returns pointer to time.Time if valid, otherwise nil
4498	NewBool creates a Bool instance with a given boolean value and validity flag.
4499	BoolFromPtr will convert a pointer to a bool to a custom Bool type, returning the value and a flag indicating if it was non-nil.
4500	UnmarshalJSON parses JSON data into a Bool object, handling different types including bool, map[string]interface{}, and nil, while setting Valid based on success.
4501	UnmarshalText sets bool value from text input or returns error for invalid input
4502	MarshalJSON converts a Boolean to JSON, returning "null" if invalid, "false" if false, and "true" if true.
4503	SetValid updates the Bool value and marks it as valid.
4504	NewString creates a String instance wrapping a sql.NullString with given value and validity.
4505	UnmarshalJSON parses JSON data into a String, setting its value and validity accordingly.
4506	MarshalText converts a valid string to byte slice.
4507	UnmarshalText converts byte slice to string and sets validity based on non-empty content.
4508	SetValid updates the string and marks it as valid.
4509	StringFromPtr converts a pointer to a string, returning a new String object with the value and a flag indicating if it's non-nil.
4510	String's MarshalJSON returns JSON representation, null if invalid
4511	NewInt creates a NullInt64 object with given integer and validity flag.
4512	IntFromPtr converts a pointer to int64 to an Int, returning zero if nil.
4513	UnmarshalJSON converts JSON data to an Int, handling various types including float64, string, map, and nil, while setting validity based on successful conversion and non-zero value.
4514	MarshalText converts Int to byte slice representation in decimal.
4515	SetValid updates an Int instance with a new integer value and marks it as valid.
4516	UnmarshalText sets Int64 value from byte array and updates Valid flag accordingly.
4517	MarshalText converts a Bool to text, returning "true" or "false".
4518	SetValid updates the Float value and marks it as valid.
4519	Time.MarshalJSON will convert a time object to JSON, returning an empty JSON object if the time is invalid
4520	UnmarshalJSON parses JSON data into a Float object, handling various types including float64, string, and map.
4521	UnmarshalText converts a byte slice to a float, setting Valid based on success.
4522	MarshalJSON converts Float to JSON, returning null for invalid values and errors for infinities or NaNs.
4523	newGossipChannel creates a new gossip channel with given parameters and returns it.
4524	GossipUnicast sends unicast gossip message to specified peer using gob-encoded data.
4525	GossipBroadcast sends a gossip update to all peers in the channel.
4526	Send data using gossip channel relay
4527	gossipChannel sends data down a connection using its sender.
4528	gobEncode serializes interface{} items into a byte slice using Gob encoding, panicking on errors
4529	newTokenBucket creates a new token bucket with specified capacity and interval, returning a pointer to the bucket.
4530	wait function manages tokenBucket by sleeping until the next available token or enforcing capacity, then updates earliestUnspentToken
4531	capacityToken calculates the last refill time based on current time, refill duration, and token interval.
4532	PrefixRangeEnd increments the last byte of a prefix or resets it to 0 if overflow occurs.
4533	newLocalPeer creates a new local peer instance with a name, nickname, and router, starts its actor loop, and returns the peer object
4534	getConnections will return a set of connections for the local peer
4535	createConnection attempts to establish a TCP connection between local and remote peers, checking limits and handling errors appropriately.
4536	doAddConnection sends connection details to a channel and waits for the result before returning it.
4537	startLocalConnection establishes a local connection using remote and TCP connections, trusts the remote peer, generates a unique ID, initializes error and finish channels, sets up gossip senders, and runs the connection asynchronously.
4538	SendProtocolMsg sends a message over the connection, handles errors by shutting down, and returns them.
4539	NewStatus creates a Status object using information from a Router instance.
4540	makePeerStatusSlice will return a slice of PeerStatus based on the given Peers object, including connection statuses for each peer.
4541	makeUnicastRouteStatusSlice converts route map to unicast status slice
4542	makeBroadcastRouteStatusSlice converts route data to a list of broadcast statuses
4543	makeLocalConnectionStatusSlice constructs a slice of LocalConnectionStatus based on connectionMaker data, including connection states and attributes.
4544	makeTrustedSubnetsSlice converts []*net.IPNet to a slice of subnet strings.
4545	Range requests are processed by sending internal raft requests and handling responses or errors accordingly.
4546	Put sends a put request and handles responses or errors asynchronously.
4547	DeleteRange deletes a range of keys in etcd store and handles errors.
4548	etcdStore handles transactions by proposing internal raft requests, processing responses, and managing errors or cancellations.
4549	Compact will return an error as it is not implemented
4550	proposeInternalRaftRequest serializes a request, checks size, registers pending, sends data, and returns message/error channels.
4551	applyCompare evaluates a key-value comparison based on specified criteria and returns the revision and a boolean indicating success.
4552	Descriptions gathers peer details and constructs summaries.
4553	peers.OnGC registers a GC callback safely
4554	Peers registers a callback for short ID invalidation.
4555	chooseShortID selects a random unused short ID from a pool, returning it and a boolean indicating availability.
4556	fetchWithDefault retrieves a peer by name, increments its reference count, and adds it if not already present.
4557	Fetch retrieves a peer by name using read lock.
4558	fetchAndAddRef locks peers, retrieves peer by name, increments localRefCount if exists, returns peer
4559	FetchByShortID retrieves a peer using its short ID.
4560	GarbageCollect locks peers, runs garbage collection, and unlocks notifying pending notifications.
4561	newRoutes creates and starts a routes object with channels for recalculation, waiting, and actions.
4562	routes.OnChange appends a callback function to the onChange slice while locking and unlocking the routes mutex
4563	Unicast retrieves a peer name and a flag indicating if it was found.
4564	UnicastAll retrieves the hop count for a given peer name and returns whether it was found.
4565	Broadcast will return a list of peers based on the given name, using lookup or calculation if necessary.
4566	BroadcastAll looks up or calculates peer names for broadcasting.
4567	NewPeer creates a new Peer instance with given name, UID, and logger, starts a goroutine for its loop, and returns the peer object.
4568	Register updates the Peer's gossip state with a new Gossip instance.
4569	Peer.ReadFrom reads data from network buffer, returning bytes read, remote address, and any errors encountered.
4570	WriteTo sends data to a peer using gossip unicast and returns the number of bytes sent and any errors encountered.
4571	LocalAddr returns the local address of the peer as a MeshAddr object.
4572	OnGossip processes a gossip buffer and returns a GossipData object and nil error.
4573	OnGossipBroadcast receives gossip data, processes it, and returns the packet slice along with an error.
4574	OnGossipUnicast receives a message, processes it, and forwards it for reading.
4575	NewDefaultServer creates and configures a server instance with default settings, including peer count, termination channels, and logger.
4576	PeerNameFromUserInput converts user input to a PeerName using SHA-256 hashing.
4577	PeerName.bytes converts a hexadecimal string to byte array
4578	NewRouter creates a Router instance with given config, name, nickName, overlay, and logger, initializing various components and returning an error if setup fails.
4579	sendAllGossip sends all gossips to respective channels
4580	sendAllGossipDown sends all gossips from the router's channels down the specified connection.
4581	broadcastTopologyUpdate updates router's topology by broadcasting peer names
4582	OnGossipUnicast will return an error for unexpected topology gossip unicast message
4583	OnGossipBroadcast applies topology updates and returns gossip data or an error.
4584	router.Gossip will return topology gossip data containing peers and their names
4585	OnGossip applies topology updates, filters new data, and returns gossip information or an error.
4586	Encode encodes topology gossip data and returns a byte array representation
4587	newState creates a state object with a peer name and an empty peer set.
4588	Merge combines two state objects, updating one with another and returning the merged result.
4589	mergeReceived updates state with received data, removes duplicates, and returns updated state.
4590	mergeComplete updates peer counts and returns a copy of the state.
4591	OnGossipBroadcast processes gossip data and returns a new surrogate gossip data object along with no error.
4592	OnGossip updates gossip data, hashes it, checks for duplicates, removes old entries, and stores new ones.
4593	generateKeyPair will return public and private keys and an error if key generation fails
4594	formSessionKey generates a session key using precomputed shared and secret keys, returning a 32-byte pointer.
4595	newTCPCryptoState creates a tcpCryptoState with sessionKey and sets nonce flags based on outbound direction
4596	gobTCPSender.Send encodes and sends a message over TCP, returning an error if encoding fails
4597	Send prefixes messages with length and handles errors
4598	Send encrypted message using session key and nonce, advance state, and return error
4599	Receive will decode a message and return the byte array and an error
4600	Receive reads a prefixed TCP message up to a max size and returns it or an error.
4601	Receive will decrypt a TCP message using a nonce and session key, returning the original plaintext and an error if decryption fails
4602	newPeer creates a new peer instance with state, actions channel, quit signal, and logger.
4603	incr increments peer state and broadcasts update if sender is configured
4604	Gossip copies peer state and logs the gossip data before returning it.
4605	OnGossipUnicast decodes a peer set from gossip data, merges it, logs the update, and returns any errors.
4606	makeRaftPeer creates a Raft peer using an address, setting ID and Context.
4607	peer.String will return a formatted string combining Name and NickName
4608	forEachConnectedPeer iterates over connected peers, applying a function based on connection status and exclusion criteria.
4609	parsePeerUID converts a string to a 64-bit unsigned integer and returns it as a PeerUID, with an error if conversion fails
4610	Swap elements at indices i and j in listOfPeers
4611	listOfPeers.Less compares two peers based on their name and returns true if the first peer's name is lexicographically less than the second peer's name.
4612	doIntro sets connection deadlines, exchanges protocol header, generates key pair if needed, adjusts deadlines, and handles protocol versions accordingly.
4613	filterV1Features extracts allowed features from a map based on predefined protocol keys.
4614	newConnectionMaker creates a connectionMaker instance, initializes channels and maps, starts queryLoop goroutine, and returns the initialized connectionMaker.
4615	connectionAborted updates target state, lastError, and schedules next try later
4616	newGossipSender creates a gossipSender instance, setting up channels and initializing fields before starting a goroutine to run it.
4617	Send updates gossip data merges or replaces existing data atomically
4618	Broadcast updates gossip data for a peer, merging new data if already present.
4619	Flush sends a signal to the gossipSender to flush its data and waits for confirmation.
4620	`Sender retrieves or creates a gossip sender for a channel.`
4621	Flushing sends in gossipSenders, returning true if any send was successful.
4622	findMainPath retrieves the file path of the main function or test runner
4623	Create sends a request to create a channel using the provided client ID and returns the generated token or an error.
4624	Send sends a message using a client ID and returns an error if the request fails.
4625	SendJSON serializes a Go value to JSON and sends it using Send function.
4626	remapError updates API errors for specific services before returning them
4627	NamespacedContext adds a namespace to a context and returns it
4628	protoToItem converts a protobuf item to a local Item.
4629	singleError extracts the first error from a MultiError, returning it or the original error if not a MultiError
4630	Get retrieves an item from cache by key, returning it or an error if missing.
4631	GetMulti retrieves multiple items using keys, returning a map and an error.
4632	Delete removes a key and returns an error if unsuccessful
4633	DeleteMulti deletes multiple keys in Memcache and returns an error if any fail.
4634	Increment updates a counter identified by key, adding delta to its current value or setting it to initialValue if not already present, returning the new value and any error encountered.
4635	IncrementExisting increments a value identified by a key using a given delta and returns the new value or an error.
4636	set will update items in memcache and return errors if any operation fails
4637	Codec.Get retrieves an item using a context and key, unmarshals its value into a variable, and returns the item and any errors encountered.
4638	Stats retrieves Memcache statistics and converts them into a Statistics object.
4639	Flush sends a request to clear memcache and returns an error if unsuccessful
4640	RunInBackground sends a request to start a background task and schedules the provided function to run in the background using the given context.
4641	List retrieves modules using a gRPC call and returns them along with any errors.
4642	SetNumInstances updates the number of instances for a specified module and version in the system.
4643	Versions fetches module versions using a gRPC request and returns them along with any errors.
4644	DefaultVersion retrieves the default version of a module using gRPC and returns the version string along with any errors encountered.
4645	Start sends a request to start a module with specified context, module name, and version, returning an error if unsuccessful.
4646	Stop will send a stop request for a module and version, returning an error if unsuccessful
4647	Ancestor sets the ancestor key for a query and returns the modified query object.
4648	EventualConsistency marks a query for eventual consistency and returns the modified query.
4649	Project updates query projection with given fields and returns modified query.
4650	Distinct method sets distinct flag to true and returns cloned query object
4651	DistinctOn sets fields for distinct query results and returns modified Query.
4652	KeysOnly clones a query and sets keysOnly flag to true.
4653	Limit sets the query limit and returns the modified query instance or an error if the limit is out of bounds.
4654	Offset sets the query offset, validating it and returning an error if invalid.
4655	BatchSize sets the query's batch size, returning an error if the size is invalid.
4656	Start method clones a Query instance, sets its start cursor if valid, and returns the modified query.
4657	End updates a query with a cursor and returns the modified query.
4658	Count will return the number of entities that match the query an error will be returned if the query is not valid
4659	Run will execute a query and return an iterator over results, handling pagination and errors.
4660	Next retrieves the next key and entity, loading the entity into dst if not keysOnly.
4661	Iterator's Cursor method returns a cursor based on the current state, or an error if the iterator is in an invalid state.
4662	Cursor's String method encodes its protobuf data using base64 and trims padding.
4663	DecodeCursor decodes a cursor string into a Cursor object, padding with '=' if necessary, and returns an error if decoding fails.
4664	saveEntity converts a Go object to a protobuf entity proto using default app ID and key, returning the protobuf entity and any errors encountered during conversion.
4665	Namespace ensures a valid namespace and wraps context accordingly.
4666	typeof retrieves variable or function type based on name, returning empty if not found
4667	dot searches for a field or method by name recursively across embedded types and returns its value if found
4668	joinFunc constructs a function signature string from input and output parameter lists.
4669	validPropertyName checks if a string is a valid property name, allowing underscores, letters, and digits, and disallows empty segments between dots.
4670	getStructCodec retrieves a struct codec for a given type, locking and unlocking a mutex during the process.
4671	LoadStruct loads properties into a struct, returning an error if unsuccessful.
4672	SaveStruct converts an interface to a struct and saves it, returning properties and an error.
4673	ServingURL generates a URL for an image blob, optionally resizing or cropping it based on provided options, and returns the parsed URL or an error.
4674	DeleteServingURL sends a request to delete a URL base using the given context and blob key, returning an error if the operation fails.
4675	CurrentOAuth retrieves user details using OAuth, handles scopes, and returns a User object or an error.
4676	OAuthConsumerKey sends request and returns consumer key or error
4677	String method returns user's email without domain or federated identity if available.
4678	LoginURL forwards to LoginURLFederated with empty federation parameter.
4679	LoginURLFederated constructs a request for a federated login URL, sends it using internal.Call, and returns the login URL or an error.
4680	LogoutURL constructs a logout request, sends it, and returns the URL or an error.
4681	insertContext adds a context parameter to a function call if it doesn't already have one.
4682	NewClient creates a new client with appcfg headers and retrieves the app ID.
4683	NewContext creates a new context with call, log, and app ID overrides.
4684	NewRemoteContext creates a new remote context using a host and HTTP client, returning an error if creation fails.
4685	Debugf logs a formatted message with context at level 0.
4686	guestbookKey generates a datastore key for accessing a guestbook entity.
4687	toRetryParameters converts RetryOptions to TaskQueueRetryParameters with various limits and backoffs.
4688	NewPOSTTask creates a new Task for POST request with given path and URL parameters.
4689	ParseRequestHeaders extracts headers from HTTP request and populates RequestHeaders struct with relevant data.
4690	Add adds a task to a queue and handles errors, returning the updated task or an error.
4691	AddMulti adds multiple tasks to a specified queue, handles errors, and updates task details.
4692	Delete removes a task from a queue and returns the first error if multiple errors occur.
4693	DeleteMulti deletes multiple tasks from a specified queue and returns an error if any task deletion fails.
4694	Lease acquires tasks from a queue with a specified limit, timeout, and context, returning them and an error if unsuccessful.
4695	LeaseByTag requests tasks by tag, using a context, max tasks, queue name, lease time, and returns them along with an error.
4696	Purge deletes all tasks from a specified queue, returning an error if unsuccessful.
4697	ModifyLease updates a task's lease time and queue name, handling errors and updating the task's ETA.
4698	QueueStats fetches stats for given queues and returns them with tasks count, oldest ETA, and scanner info.
4699	IsTimeoutError checks if an error is due to a timeout.
4700	Func registers a function with a unique key and validates its signature, returning an error if invalid.
4701	Task will return a taskqueue.Task and an error if the function is invalid or arguments are incorrect
4702	RequestHeaders retrieves headers from context or returns an error.
4703	WithContext creates a new context using the parent context and HTTP request.
4704	WithAPICallFunc overrides API call behavior in context.
4705	APICall makes an API call using the given context, service, method, input, and output messages, returning an error if the call fails.
4706	ModuleHostname constructs a request to fetch a hostname based on module, version, and instance, then returns the hostname and any errors encountered during the call.
4707	AccessToken retrieves an access token with specified scopes, returning the token, expiration time, and any errors encountered during the process.
4708	PublicCertificates fetches public certificates and converts them to a list of Certificate structs.
4709	ServiceAccount sends a request to get a service account name and returns it along with any errors encountered.
4710	SignBytes sends bytes to a service for signing, returns key name and signature or error
4711	fetch reads data from blobstore and updates reader buffer
4712	seek adjusts reader offset and buffer accordingly
4713	multiKeyToProto converts appID and Key slice to pb.Reference slice
4714	referenceValueToKey constructs a Key from a ReferenceValue, returning an error if the key is invalid
4715	keyToReferenceValue converts Key to pb.ReferenceValue
4716	Put stores a single key-value pair in a context and returns the key and any error encountered.
4717	PutMulti saves entities using a context, keys, and source data, returning updated keys and any errors encountered during the process.
4718	Delete removes a key from cache, returning the first error encountered.
4719	DeleteMulti deletes multiple keys in a datastore and returns an error if validation fails.
4720	deploy executes a command with arguments and captures its output, returning an error if execution fails.
4721	Next retrieves the next record from the result, handles errors, and recursively calls itself until done.
4722	protoToAppLogs converts protobuf log lines to application logs.
4723	protoToRecord converts a protobuf RequestLog to a Record object, handling various fields and converting timestamps and durations appropriately.
4724	Run will execute a query and return a result object containing the request and error
4725	run processes a log request, reads response, converts logs, and updates result state
4726	Current extracts user info from headers and returns User object if email or federated identity is present.
4727	IsAdmin checks if the request header indicates administrative privileges.
4728	isErrFieldMismatch checks if an error is a datastore field mismatch error
4729	Stat retrieves BlobInfo for a given BlobKey from the datastore, handling errors appropriately.
4730	Send sets the X-AppEngine-BlobKey header and auto Content-Type if missing.
4731	UploadURL generates a URL for uploading data with optional size and bucket constraints, returning the parsed URL or an error.
4732	Delete a single blob key using DeleteMulti.
4733	DeleteMulti deletes multiple blobs identified by keys and returns an error if any fail
4734	NewReader creates a reader for a given blob key using a context.
4735	Handle sets up an HTTP handler for XMPP messages, invoking a callback with parsed message details.
4736	Send will send an XMPP message and return any errors encountered during the process
4737	Invite sends an XMPP invite request and handles the response.
4738	Send sends presence data using XMPP protocol and returns response or error
4739	GetPresence retrieves user presence using XMPP protocol and returns the presence status or an error.
4740	GetPresenceMulti fetches presence information for multiple JIDs, returning results and errors for each.
4741	newStructFLS will return a FieldLoadSaver and an error if the input is not a pointer to a struct
4742	SaveStruct serializes a struct to fields and returns them along with any errors encountered.
4743	Namespaces retrieves all namespace keys as strings.
4744	Kinds retrieves all keys from a query and returns their names.
4745	RunInTransaction executes a function within a transaction, retrying up to three times if concurrent access errors occur.
4746	imports checks if a file has an import matching a given path
4747	importSpec searches an AST file for an import spec matching the given path and returns it if found, otherwise returns nil.
4748	declImports checks if a given path is imported in an AST node and returns true if found.
4749	isPkgDot checks if expression selects package member
4750	isTopName checks if expression is identifier matching given name without object reference
4751	isName checks if an expression is an identifier matching a given name
4752	isCall checks if expression is a call to specified package and function
4753	refersTo checks if two identifiers refer to the same object
4754	isEmptyString checks if an AST expression represents an empty string
4755	countUses counts occurrences of a variable in a given scope
4756	assignsTo checks if variable x is assigned in given scope
4757	newPkgDot creates an ast.Expr representing a package selection expression
4758	renameTop renames identifiers from old to new in AST, fixing imports and declarations.
4759	matchLen calculates the length of the longest common prefix between two strings.
4760	deleteImport removes an import statement from a Go file and updates related structures
4761	rewriteImport updates import paths in AST nodes and returns whether any changes were made.
4762	DefaultTicket generates a unique ticket based on app ID, module name, version, and instance, using a lazy initialization pattern.
4763	flushLog will send logs to a server, returning true if successful, and may recover if there's an error
4764	withDeadline creates a new context with a specified deadline, returning the new context and a cancel function.
4765	KeepAlive sends a request to get the socket name and handles the response or error.
4766	applyTransaction applies a transaction to a protocol buffer message using a setter function
4767	analyze will return an app object and an error based on tags input
4768	buildContext creates a new build context with specified tags appended to default settings.
4769	synthesizeMain creates a unique filename, writes a header, and adds content to a tar archive, returning an error if unsuccessful
4770	findInGopath searches for a directory in GOPATH and returns the full path if found, otherwise errors
4771	copyTree recursively copies files and directories from srcDir to dstDir using tar.Writer, skipping certain files specified in skipFiles.
4772	copyFile will archive a file into a tar writer with destination and source paths, returning an error if any step fails
4773	checkMain verifies if the project has a main package and func main, returning a flag, file list, and error.
4774	isMain checks if a function declaration represents the main function
4775	readFile reads a file and checks if it contains a main function returning a boolean and an error
4776	initField navigates through nested fields using indices, creating pointers as needed, and returns the final field value.
4777	loadEntity converts a protobuf entity to an entity and loads properties into the destination object
4778	validIndexNameOrDocID checks if a string starts with '!' or contains invalid ASCII characters and returns true if valid
4779	Open creates an Index instance with a given name, validating it before returning an error if invalid.
4780	Put inserts a single document into the index and returns its ID.
4781	Get retrieves a document by ID and loads it into the provided destination, returning an error if the document is not found or if there's an issue with the request.
4782	Delete deletes a single item by ID using DeleteMulti.
4783	DeleteMulti deletes multiple documents by IDs and returns errors if any.
4784	Search creates an iterator for querying an index with options and returns an error if both cursor and offset are specified
4785	fetchMore will update iterator's error if there are no results and more data is available
4786	Next fetches next document ID and loads fields if needed, returning error if done or failed
4787	Iterator.Facets retrieves facet results, handles errors, and converts data structures.
4788	DefaultBucketName retrieves the default GCS bucket name using RPC and returns it along with an error if unsuccessful.
4789	valid checks if key has all required fields and consistent parent references
4790	Equal checks if two Key instances are equal by comparing their kind, stringID, intID, appID, and namespace fields recursively up to their parent nodes.
4791	root will return the top-level key in the hierarchy
4792	Key marshals itself and its children to a buffer with a path structure.
4793	String method returns a marshaled representation of Key object as a string.
4794	Encode converts Key to a URL-safe base64 encoded string after marshaling to protobuf.
4795	DecodeKey decodes a base64 encoded string into a Key object, handling padding and unmarshalling errors.
4796	NewIncompleteKey creates a new key with empty name and zero ID based on the given context, kind, and parent key.
4797	NewKey creates a new Key using the given parameters and context, inheriting namespace from parent or context.
4798	AllocateIDs assigns a range of IDs based on the provided parameters and returns the lowest and highest IDs along with any errors encountered during the process.
4799	IsOverQuota checks if an error is due to exceeding a quota limit.
4800	ClassicContextFromContext extracts an App Engine context from a standard Go context, returning an error if unsuccessful.
4801	Send sends a message using a context and returns an error
4802	SendToAdmins sends a message to admins using the provided context and returns an error if sending fails
4803	Failures counts failed tests in report
4804	decodeFieldNumberAndTyp3 will extract a field number and type from byte slice, returning them along with the number of bytes read and an error if invalid
4805	checkTyp3 verifies if a reflection type matches a desired Typ3 value, returning an error if they mismatch.
4806	decodeTyp3 will return a Typ3 object the number of bytes read and an error if the input byte is invalid
4807	NewPrefixBytes creates a PrefixBytes instance from byte slice.
4808	getLengthStr will return a string representation of the size in hexadecimal for specific types, otherwise it returns "variable"
4809	collectImplementers_nolock populates implementers map with types implementing given info type
4810	checkConflictsInPrio_nolock verifies type conflicts in priority lists and adds missing types accordingly.
4811	constructConcreteType creates a new concrete type based on TypeInfo, returning the value and pointer value.
4812	cdc.MarshalBinaryLengthPrefixedWriter serializes data to binary with length prefix and writes to writer, returning total bytes written and error if serialization fails
4813	MarshalBinaryBare encodes a Go value to Amino binary format, prepending prefix bytes if registered.
4814	UnmarshalBinaryLengthPrefixed decodes a length-prefixed binary data into a given pointer, returning an error if the data is incomplete or incorrectly formatted.
4815	Codec.UnmarshalBinaryBare decodes binary data into a given pointer, verifying prefixes if registered, and checking complete consumption.
4816	MustMarshalJSON encodes an object to JSON, panicking if an error occurs.
4817	MustUnmarshalJSON decodes JSON data into a Go value and panics if there is an error.
4818	MarshalJSONIndent encodes JSON with indentation using specified prefix and indent strings, returning byte array and error if encoding fails.
4819	newDataReader wraps an io.Reader in a buffered reader and returns an internalDataReader object.
4820	Read data from internal buffer, handling Telnet commands and returning number of bytes read and potential errors
4821	ListenAndServeTLS starts a TLS listener on the server address, loads certificates from files, and serves the server over HTTPS.
4822	Produce executes a producer function with given context, name, and arguments, returning a handler.
4823	PromoteHandlerFunc wraps a HandlerFunc with pipes for stdin, stdout, stderr, and arguments, returning a promoted Handler.
4824	Serve starts a server with a listener and handler, returning an error if it fails.
4825	Serve listens for TELNET connections, handles them using a goroutine, and logs activity.
4826	Fail logs usage and exits with error message
4827	WriteUsage prints command-line usage information to a writer.
4828	WriteHelp outputs formatted help information including description, usage, positional arguments, options, and built-in options.
4829	MustParse creates a Parser, parses flags, handles help/version errors, and exits accordingly.
4830	Parse converts input flags into structured data using provided destinations and returns an error if parsing fails.
4831	walkFields traverses struct fields, applying a visitor function and recursively exploring nested structs.
4832	Parser will return an error if help or version flags are used
4833	setSlice populates a slice with parsed string values, optionally truncating it first
4834	canParse determines if a type can be parsed, returning whether it's parseable, a boolean, and if it allows multiple values, handling pointers and slices recursively
4835	isBoolean checks if a given reflect.Type represents a boolean or pointer to boolean
4836	NewFromMap constructs a Tree from a map by inserting key-value pairs.
4837	Inserts a key-value pair into a tree, updating existing keys or creating new ones, and returns the old value if updated.
4838	Delete a string from a tree, returning its value and success status.
4839	DeletePrefix removes all keys with the given prefix and returns the count.
4840	deletePrefix removes a prefix from a tree, recursively deleting nodes and merging parents if necessary
4841	Get retrieves a value from a tree based on a key, returning the value and a boolean indicating success.
4842	LongestPrefix searches tree for longest matching prefix, returning key, value, and success flag.
4843	Minimum will find the smallest key in the tree and return it along with its value and a boolean indicating if found
4844	Tree.WalkPrefix traverses tree nodes matching given prefix, applying callback function to each node.
4845	recursiveWalk traverses a tree structure, applying a function to leaf nodes and recursively to child nodes, returning true if the function returns true for any leaf.
4846	ToMap converts a Tree to a map by walking the tree and populating the map with key-value pairs.
4847	checkip will determine IP type, convert to BigInt, apply index calculation based on metadata, and return type, BigInt, and index
4848	readuint32 reads a 32-bit unsigned integer from a file at a specified position using little-endian byte order.
4849	readuint128 reads a 128-bit unsigned integer from file at given position and returns it as a big.Int
4850	loadmessage assigns the same string to all fields of an IP2Locationrecord and returns it
4851	Printrecord outputs details of an IP2Location record to the console.
4852	Main scales a graphic context, draws a partial gopher, restores the context, and returns an output filename.
4853	SaveToPdfFile saves PDF content to a file and closes it, returning an error if unsuccessful.
4854	CubicCurveTo updates path components based on control points and end point coordinates, moving to end point if no previous moves.
4855	ArcTo calculates an arc path based on center coordinates, radii, angles, and direction.
4856	Path.String will return a string representation of path components and their coordinates
4857	VerticalFlip will flip a Path vertically by negating y-coordinates of points and flipping the y-axis origin.
4858	NewGlyphCache creates a new GlyphCacheImp instance with an empty map for storing glyphs.
4859	Fetch retrieves a glyph from cache or renders it if missing, then returns a copy.
4860	renderGlyph renders a glyph using a graphic context, font name, and character, returning a Glyph object with the path and width.
4861	Copy creates a new Glyph object with a copy of the Path and the same Width.
4862	Fill method translates glyph path and fills it at specified coordinates, returning the glyph width.
4863	Main draws lines and shapes on a graphic context and returns the output filename.
4864	Draw will render a line between two points using the provided graphic context
4865	Painter.Paint updates vertex and color buffers for rendering spans.
4866	SetColor updates painter's color based on given RGBA values.
4867	NewPainter creates a new Painter object with initialized vertices and colors slices.
4868	GetStringBounds calculates bounds for a given string using the current font, returning left, top, right, and bottom coordinates.
4869	recalc updates the current scale based on font size, DPI, and fixed factors
4870	setFont updates the current font of the GraphicContext with the specified truetype Font object
4871	ClearRect updates the SVG with a new masked group based on given coordinates.
4872	drawString renders text using specified font mode and returns width
4873	newGroup creates a new SVG group based on drawType, setting attributes like stroke, fill, and transform, then appends it to GraphicContext's svg.Groups.
4874	newMask creates a new mask with specified dimensions, attaches it to the SVG, and assigns a unique ID.
4875	embedSvgFont processes text, loads current font, creates or retrieves SVG font element, fills with glyphs, sets attributes, and returns the font object.
4876	TraceQuad will flatten a quadratic Bézier curve using a recursive approach and draw lines between points based on the flattening threshold.
4877	GetFontName retrieves the name, family, style, and size of the current font as a formatted string.
4878	NewStackGraphicContext creates and initializes a new StackGraphicContext with default settings.
4879	NewFolderFontCache creates a FolderFontCache instance initialized with a font map, specified folder path, and default font file naming function.
4880	NewSyncFolderFontCache creates a SyncFolderFontCache instance with specified folder path and default font file naming strategy.
4881	Main draws a partial gopher and returns the output filename.
4882	NewPdf creates a PDF document with specified orientation, unit, and size, sets default drawing properties, and adds a blank page.
4883	clearRect clears a rectangular area with white and restores the previous fill color and position
4884	NewGraphicContext creates a new GraphicContext instance initialized with a PDF document and default DPI settings.
4885	Clear will clear the entire page of the PDF associated with the GraphicContext.
4886	GetStringBounds calculates bounds for a given string using the GraphicContext's PDF properties.
4887	CreateStringPath calculates bounds, moves cursor, draws text, and returns width.
4888	FillStringAt generates a path for a given string at specified coordinates and returns the cursor position.
4889	SetStrokeColor updates stroke color in graphic context and PDF.
4890	SetFillColor updates fill color for graphic context, PDF, and text.
4891	SetLineDash updates the line dash pattern in both the graphic context stack and the PDF document.
4892	SetLineWidth updates LineWidth in GraphicContext and its pdf fields.
4893	Draws "Hello World" with current DPI and returns "helloworld.ext" filename.
4894	Draw will render a rounded rectangle and display "Hello World" in bold italic font at position (8,52).
4895	SaveToPngFile writes an image to a PNG file and returns an error if the operation fails
4896	LoadFromPngFile opens a PNG file, reads it, and decodes the image data returning the parsed image and an error if any.
4897	Resource constructs a file path based on folder, filename, and extension, using a specific root directory for certain extensions.
4898	Output constructs a file path based on given name and extension, using "../" for specific extensions.
4899	Main saves state, flips image, draws tiger, restores state, and returns output filename
4900	Draw opens a PostScript file, reads its contents, and interprets them using a graphics context.
4901	Main draws a droid and returns the output filename based on the extension.
4902	Bubble draws a circle using quadratic curves on a GraphicContext.
4903	Dash draws a dashed line pattern using the provided graphic context and dimensions.
4904	CubicCurve draws a cubic Bezier curve using given dimensions and styles the curve and segments accordingly
4905	FillStroke draws a stroke pattern on a graphic context with specified dimensions and properties.
4906	FillStyle draws a filled style with two wheels using a GraphicContext.
4907	PathTransform modifies graphic context by drawing an arc and applying transformations.
4908	Star will draw a star shape on the GraphicContext at given coordinates with specified dimensions and rotation angle
4909	Draw will render various shapes and graphics on a canvas using a GraphicContext object.
4910	ConvertPath converts a draw2d Path into PDF commands using a Vectorizer.
4911	Draws lines with different cap and join styles and returns the output file name.
4912	Draw function sets line properties and draws both thick and thin lines between two points with specified offsets.
4913	DrawContour will construct a contour path using a sequence of truetype points, applying translation by dx, dy, and drawing lines or quadratic curves based on point flags.
4914	Flatten converts a complex path into simpler segments using a flattener and scaling factor.
4915	Clear graphic context by filling entire image bounds with default color.
4916	ClearRect updates a rectangle area with the current fill color in the GraphicContext.
4917	DrawImage applies a transformation to an image using specified filter and operation.
4918	Draws a gopher image within a framed canvas and returns the output filename.
4919	Draw will render a PNG image within a framed area with specified dimensions and rotation.
4920	Draw will render a droid shape using the provided GraphicContext at specified coordinates (x, y).
4921	ChecksumString32S calculates a checksum for a given string using a 32-bit seed.
4922	ChecksumString64S calculates checksum of a string using seed and returns a 64-bit unsigned integer
4923	NewS32 creates a new XXHash32 instance with the given seed and resets it.
4924	NewS64 creates a new XXHash64 instance with the given seed and resets it.
4925	round64 mixes two 64-bit unsigned integers using a prime and rotation before multiplying to produce a hashed result
4926	Checksum32S calculates a 32-bit checksum for a byte slice using a specified seed and various bitwise operations.
4927	Checksum64S calculates a 64-bit checksum for a byte slice using a given seed, employing different algorithms based on input length.
4928	getStage will return current stage an advanced stage function and a reset environment function
4929	New initializes Glg with default settings and logger configurations.
4930	Get returns a singleton instance of Glg, initializing it with a specific time format if not already done.
4931	SetMode updates logger mode and returns Glg instance
4932	SetPrefix updates the log prefix and returns the logger instance.
4933	GetCurrentMode retrieves logger mode for specified level or NONE if not found
4934	InitWriter resets writers in logger and updates mode for all levels in Glg instance.
4935	SetWriter updates logger writers and modes for all levels in Glg.
4936	SetLevelColor updates the color function for a log level in Glg and returns the updated Glg instance
4937	SetLevelWriter updates logger level and writer, returning Glg instance
4938	AddStdLevel increments log level counter, stores level map, creates logger instance, updates mode, and stores logger in Glg object.
4939	EnableColor sets all loggers in Glg to use color and returns the modified Glg instance.
4940	EnableLevelColor sets color enabled for a log level and updates mode.
4941	DisableLevelColor sets the specified log level to disable color and updates the logger.
4942	RawString extracts and returns a substring from byte data based on separators.
4943	TagStringToLevel converts a tag string to a level using a map, returning 255 if not found.
4944	Println outputs formatted values using glg.out with PRINT mode and blank formatting.
4945	Fatal logs messages and exits with status 1, handling errors gracefully.
4946	Fatalf logs a fatal error message and exits with status 1
4947	isModeEnable checks if a specific mode is enabled based on the current mode retrieved from Glg.
4948	CaptureMetrics captures metrics for an HTTP handler response.
4949	cedar.get retrieves a value using a key, updating internal state and returning the result
4950	Save serializes Cedar data using specified encoding ("gob" or "json") and returns error if invalid type is provided
4951	SaveToFile will write data to a file using the specified data type and return an error if unsuccessful
4952	Load decodes data from reader based on data type into Cedar structure.
4953	LoadFromFile opens a file, reads data using a buffered reader, and loads it into Cedar with specified data type, returning an error if any step fails.
4954	Key generates a byte array representation of an ID using XOR operations and validates the result.
4955	Value retrieves a numeric value from a Cedar data structure, checking for indirect references and returning an error if not found.
4956	Delete key from Cedar data structure, releasing nodes and handling siblings
4957	Set updates version fields from a string and validates components.
4958	Version.Compare compares two versions recursively and then uses pre-release rules if needed.
4959	Slice returns version components as an array of integers
4960	Bumps major version, resets minor, patch, pre-release, and metadata.
4961	Bumps minor version, resets patch, clears pre-release and metadata.
4962	Bumps patch version, resets pre-release and metadata.
4963	validateIdentifier will check if a given string is a valid semver identifier and return an error if it is not
4964	newStream creates a new Stream instance with specified buffer size and replay option, initializing channels and slices for subscribers, events, and event log.
4965	addSubscriber adds a subscriber to the stream and returns it
4966	New creates a new Server instance with default settings.
4967	Server.Close stops all streams and cleans up resources
4968	CreateStream creates a stream if it doesn't exist, locks server during operation, and returns the stream.
4969	RemoveStream deletes a stream by ID, ensuring thread safety.
4970	StreamExists checks if a stream exists by ID.
4971	Publish sends an event to a stream identified by id after processing.
4972	NewClient creates a new client with specified URL, default HTTP connection, empty headers, and subscription maps.
4973	Subscribe to a stream, process events using a handler, retry on failure with exponential backoff.
4974	SubscribeChan connects to a stream and handles events using a channel, retrying on failure.
4975	SubscribeRaw delegates subscription to a raw event handler.
4976	Unsubscribe removes channel from client's subscriptions by sending `true` to it.
4977	NewEventStreamReader creates a reader for parsing event streams, splitting data based on specific delimiters.
4978	ReadEvent reads next event from stream returning byte slice and error if failed
4979	HTTPHandler handles server-side streaming, setting headers, validating stream ID, creating subscribers, and pushing events to clients with proper flushing and error handling.
4980	Add event to log, update ID and timestamp
4981	Replay event log for subscriber based on event ID.
4982	readKey reads a cryptographic key file and returns a Signer based on the key type, or an error if the file is invalid or unsupported.
4983	writeKey writes an ECDSA private key to a file at the specified path, returning an error if any step fails.
4984	anyKey reads a key from a file, generates one if not exists, and returns a crypto.Signer along with an error
4985	sameDir combines directory of existing file with given filename
4986	printAccount outputs account details to a writer in a tabular format
4987	tmpl will execute a Go template using the provided writer, text, and data, trimming whitespace and capitalizing certain functions, and handling errors gracefully
4988	printUsage outputs help information using a template to a writer.
4989	FromRequest extracts client IP from headers or remote address.
4990	Do executes Clear command using given parameters and context.
4991	DisableParams.Do executes a command and returns an error.
4992	Execute command to remove DOM storage item
4993	Execute command SetDOMStorageItem with params and return error
4994	Execute command with parameters in context and return error
4995	Execute command with parameters and return error
4996	Do will execute a command using the InspectWorkerParams and return an error
4997	Do executes the SetForceUpdateOnPageLoad command with parameters and returns an error.
4998	Do executes a command to skip waiting with parameters and returns an error.
4999	Do sends a command to start a worker using the provided parameters and context, returning an error if unsuccessful.
5000	Do sends a command to stop all workers and returns an error if execution fails.
5001	Do executes a command to stop a worker using the provided parameters and context.
5002	Do sends unregister command with parameters and returns error
5003	Do executes the UpdateRegistration command using the provided parameters and context.
5004	Do executes a command with bind parameters and returns an error.
5005	Do executes a command using the provided parameters and returns an error.
5006	ExceptionDetails.Error() returns formatted exception message including text and location details.
5007	Do executes ReleaseAnimations command with params and returns error
5008	Do executes the SeekAnimations command with parameters and returns an error
5009	Do will execute a command to pause using context and parameters, returning an error if unsuccessful.
5010	Do will execute a command to set playback rate with parameters and return an error
5011	Do executes CommandSetTiming with p and returns an error.
5012	Do executes a command for preparing leak detection and returns an error
5013	Do executes a command to forcibly purge JavaScript memory using Chrome DevTools Protocol.
5014	Do will execute a command to set pressure notifications suppressed and return an error if unsuccessful
5015	Do will execute a command with parameters and return an error
5016	WithSamplingInterval sets the sampling interval and returns the updated StartSamplingParams object.
5017	WithSuppressRandomness sets SuppressRandomness field and returns updated params
5018	Do executes StartSampling command with parameters and returns error
5019	Do executes a command to stop sampling and returns an error if unsuccessful
5020	Execute ClearDeviceOrientationOverride command using context and return potential error
5021	Do executes a command to set device orientation override parameters using Chrome DevTools Protocol.
5022	Do executes the StartViolationsReport command using the provided parameters and context.
5023	Do executes a command to stop violations report in the given context and returns any error encountered.
5024	Modifier will return a string representation based on its value
5025	WithNodeID sets the NodeID field and returns the updated params object.
5026	WithBackendNodeID sets the BackendNodeID field of GetPartialAXTreeParams and returns the updated instance.
5027	WithObjectID sets the ObjectID field of GetPartialAXTreeParams and returns the modified instance.
5028	WithFetchRelatives sets the FetchRelatives field and returns the modified params pointer
5029	Do executes CommandSetTimeDomain with the given params and context, returning an error if any occurs.
5030	WithClipRect updates the ClipRect field of ProfileSnapshotParams and returns the updated instance.
5031	Execute release snapshot command with parameters and return error
5032	Execute command ClearObjectStore with parameters and return error
5033	Do executes a command to delete a database with parameters in a given context.
5034	Execute command with parameters and return error
5035	WithKeyRange sets the KeyRange field of the RequestDataParams instance and returns the updated instance.
5036	Do executes a command to set sampling interval using provided parameters.
5037	Do executes a command to start a process and returns an error if it fails.
5038	WithCallCount sets the CallCount field and returns the modified params.
5039	WithDetailed sets detailed flag and returns modified params
5040	Do will execute a precise coverage command with given parameters and return an error
5041	Do executes a command to start profiling type information using the Chrome DevTools Protocol.
5042	Do will execute a command to stop precise coverage and return any errors encountered
5043	Do executes a command to stop a type profile and returns any errors encountered.
5044	Do executes a command to ignore certificate errors with parameters.
5045	Do executes a command to add an inspected heap object params and returns an error
5046	Do executes garbage collection command via CDP.
5047	WithSamplingInterval updates SamplingInterval and returns updated params
5048	Do executes a command to start tracking heap objects using parameters and returns an error.
5049	WithReportProgress sets the ReportProgress field and returns the modified params object.
5050	Do executes a command to stop tracking heap objects using the provided parameters and context, returning an error if the execution fails.
5051	WithReportProgress sets whether progress reporting is enabled and returns the updated params.
5052	Execute heap snapshot command with parameters and return error
5053	WithBrowserContextID sets the BrowserContextID field and returns the modified GrantPermissionsParams object
5054	Do will execute a command with permissions parameters and return an error
5055	WithBrowserContextID sets the BrowserContextID field and returns the modified params object
5056	Do executes a command to reset permissions using provided parameters and context, returning any errors encountered.
5057	Do executes a crash command using the provided context and returns an error.
5058	Do executes the CrashGpuProcess command via Chrome DevTools Protocol and returns any errors encountered.
5059	WithQuery updates the Query field of GetHistogramsParams and returns the updated object.
5060	WithTargetID sets the target ID and returns the modified parameters.
5061	Do executes CommandSetWindowBounds with params and returns error
5062	WithImage sets the image property and returns the modified params object
5063	Execute command with parameters and return error
5064	Execute delete cache command using params and context
5065	Execute command to delete entry with parameters.
5066	WithPathFilter sets the PathFilter field and returns the modified RequestEntriesParams instance.
5067	Do will execute a command to discard search results and return an error if failed
5068	Do executes CommandFocus using FocusParams and returns an error.
5069	Do executes a command to mark undoable state in the context.
5070	WithIncludeUserAgentShadowDOM updates the includeUserAgentShadowDOM field and returns the updated PerformSearchParams object.
5071	Execute Redo command via CDP and return error
5072	Do will execute a command to remove an attribute and return an error
5073	Execute RemoveNode command using provided parameters and context
5074	Do sends a command to request child nodes with parameters and returns an error.
5075	WithNodeID updates NodeID field in ResolveNodeParams and returns updated params
5076	WithBackendNodeID sets the BackendNodeID field and returns the modified params.
5077	WithExecutionContextID sets the execution context ID in ResolveNodeParams and returns the updated params.
5078	Do will execute a command to set attribute value and return an error
5079	WithName sets the Name field of SetAttributesAsTextParams and returns the updated params pointer
5080	Do executes a command to set attributes as text using the provided parameters and context.
5081	Do will execute a command to set file input files parameters with a given context and return an error if failed
5082	Do executes a command to set the inspected node in the context.
5083	Do will execute a command to set node value using provided parameters and context, returning any errors encountered.
5084	Do will execute a command to set outer HTML and return an error if it fails
5085	Execute undo command via CDP.
5086	Do executes a command with parameters and returns an error
5087	Do executes a command to set effective property value for node and returns an error
5088	Do executes a command to start rule usage tracking and returns an error.
5089	Execute Close command with parameters and return error
5090	Do executes ClearDataForOrigin command with given parameters and context, returning any errors encountered.
5091	Do will execute a command with the given parameters and context, returning an error if unsuccessful
5092	Do executes a command to track IndexedDB for a given origin and returns an error.
5093	Execute command UntrackCacheStorageForOrigin with parameters using context.
5094	Do executes a command to untrack IndexedDB for an origin and returns an error
5095	Do executes a command to hide highlight parameters using the Chrome DevTools Protocol.
5096	Do executes HighlightFrame command using provided params and context, returning any errors encountered
5097	WithNodeID sets NodeID in HighlightNodeParams and returns updated params
5098	WithBackendNodeID sets the BackendNodeID field of HighlightNodeParams and returns the updated params.
5099	WithObjectID sets the ObjectID field of HighlightNodeParams and returns the modified instance.
5100	WithSelector updates the selector field of HighlightNodeParams and returns the updated instance.
5101	Do executes a command to highlight a node using the provided parameters and context, returning an error if the execution fails.
5102	Do executes a command to highlight a quad with given parameters in a context.
5103	Execute command to highlight rectangle parameters with context and return error
5104	WithHighlightConfig sets the highlight configuration and returns the updated parameters.
5105	Do executes SetInspectMode command with parameters and returns error
5106	Do executes a command to set ad highlights parameters using Chrome DevTools Protocol.
5107	WithMessage updates the Message field of SetPausedInDebuggerMessageParams and returns the updated instance.
5108	Execute command SetPausedInDebuggerMessage using parameters and return any errors.
5109	Do executes a command to set debug borders using provided parameters in the given context.
5110	Do executes a command to show FPS counter with given parameters in the specified context.
5111	Execute command SetShowPaintRects with params and return error
5112	Do executes a command to show scroll bottleneck rects with parameters and returns an error.
5113	Do executes a command to show hit test borders with parameters and returns an error
5114	Do executes a command to set viewport size on resize with given parameters.
5115	Execute ClearBrowserCache command via CDP with context.
5116	Do executes ClearBrowserCookies command using Chrome DevTools Protocol.
5117	WithErrorReason sets the error reason and returns the updated request params
5118	WithRawResponse sets the RawResponse field and returns the modified params object
5119	WithURL updates URL field and returns modified params
5120	WithMethod sets the request method and returns the updated parameters.
5121	WithPostData sets the PostData field and returns the modified params.
5122	WithHeaders sets headers in params and returns updated params
5123	WithAuthChallengeResponse sets the AuthChallengeResponse field and returns the modified params.
5124	Do will execute a command to continue an intercepted request and return an error
5125	WithURL sets the URL field and returns the modified params object
5126	WithDomain sets the domain field of DeleteCookiesParams and returns the updated instance.
5127	WithPath updates the Path field of DeleteCookiesParams and returns the updated instance.
5128	Execute command to delete cookies using params
5129	WithConnectionType updates the connection type and returns the modified params
5130	Do will execute a command to emulate network conditions using provided parameters and return an error
5131	Do will execute a command with parameters using the given context and return an error if any occurs
5132	WithUrls sets URLs parameter and returns updated GetCookiesParams instance
5133	ReplayXHRParams executes a command and returns an error
5134	Do executes CommandSetBlockedURLS with the given parameters and context.
5135	Do will execute a command to bypass service worker and return an error if failed
5136	Do executes a command to disable cache with parameters and returns an error.
5137	WithURL sets URL in SetCookieParams and returns updated params
5138	WithDomain sets the domain for cookie parameters and returns updated params
5139	WithPath sets the cookie path and returns updated params
5140	WithSecure sets the Secure flag of SetCookieParams and returns the modified object.
5141	WithHTTPOnly sets the HTTPOnly flag in cookie parameters and returns updated params
5142	WithSameSite sets the SameSite attribute of a cookie parameter and returns the updated parameters.
5143	WithExpires sets the Expires field of SetCookieParams and returns the modified instance.
5144	Do executes SetCookies command using provided parameters and context, returning an error if unsuccessful.
5145	Do executes a command to set data size limits for testing.
5146	Do executes SetExtraHTTPHeaders command with params and returns error
5147	Do sends a command to intercept requests using SetRequestInterceptionParams.
5148	Execute command to clear device metrics override params
5149	Do will execute a command to clear geolocation override parameters and return an error
5150	ResetPageScaleFactorParams executes a command to reset page scale factor.
5151	Do will execute a command to set focus emulation enabled and return an error if it fails
5152	Do executes a command to set CPU throttling rate using parameters.
5153	WithColor sets the color parameter and returns the updated params
5154	Execute command to override default background color with params
5155	WithScale sets the scale in params and returns updated params pointer
5156	WithDontSetVisibleSize sets the DontSetVisibleSize field of the SetDeviceMetricsOverrideParams struct and returns the updated struct pointer.
5157	WithScreenOrientation sets ScreenOrientation and returns modified params
5158	Do executes CommandSetDeviceMetricsOverride with given params in context.
5159	Do executes a command to hide scrollbars using parameters and returns an error
5160	Do sends a command to disable document cookie using Chrome DevTools Protocol and returns an error if failed
5161	Do will execute a command with parameters and return an error
5162	Do will execute a command to set emulated media parameters with the given context and return an error if it fails
5163	WithLatitude sets the latitude in params and returns updated params
5164	WithLongitude sets the longitude in the params and returns updated params
5165	WithAccuracy updates the accuracy parameter in SetGeolocationOverrideParams and returns the updated parameters.
5166	Do will execute a command to override geolocation parameters and return an error if unsuccessful
5167	Do executes a command to set page scale factor using provided parameters and context.
5168	Do sends a command to disable script execution and returns an error if unsuccessful.
5169	WithMaxTouchPoints sets the MaxTouchPoints field and returns the modified params object.
5170	Do will execute a command to enable touch emulation and return an error if it fails
5171	WithBudget updates the budget field of SetVirtualTimePolicyParams and returns the updated object.
5172	WithMaxVirtualTimeTaskStarvationCount updates max virtual time task starvation count and returns updated params
5173	WithWaitForNavigation sets navigation wait and returns modified params
5174	WithAcceptLanguage sets the Accept-Language header and returns the modified params.
5175	WithPlatform sets the platform value and returns the updated params
5176	Do executes a command to set user agent override parameters using the Chrome DevTools Protocol.
5177	DispatchKeyEventParams executes a command to dispatch a key event.
5178	Execute insert text command with params and return error
5179	WithButtons sets the mouse event buttons and returns the updated params
5180	Do executes a command to dispatch a mouse event with parameters using the Chrome DevTools Protocol.
5181	Execute touch event command with parameters and return error
5182	Execute touch emulation command with mouse event parameters in given context.
5183	Do will execute a command to ignore input events with parameters and return an error
5184	Do executes pinch gesture command with parameters and context, returning error
5185	WithXOverscroll sets the X overscroll value and returns the modified params
5186	WithYOverscroll sets the YOverscroll field and returns the updated params pointer.
5187	Do executes a scroll gesture command using provided parameters and context, returning an error if unsuccessful.
5188	Do executes a tap gesture command using SynthesizeTapGestureParams.
5189	Domain extracts substring before first dot from MethodType.
5190	WithDepth sets the Depth field of GetEventListenersParams and returns the updated instance.
5191	Execute command to remove DOM breakpoint with parameters.
5192	WithTargetName sets the target name and returns the updated params.
5193	Execute command RemoveEventListenerBreakpoint using params and return error
5194	Execute command RemoveInstrumentationBreakpoint with params and context, return error
5195	Execute command RemoveXHRBreakpoint using context and parameters.
5196	Execute command to set DOM breakpoint and return error
5197	Execute command to set event listener breakpoint
5198	Execute command to set instrumentation breakpoint
5199	Do sends SetXHRBreakpoint command to CDP and returns an error
5200	WithExecutor adds an Executor to a context.
5201	Execute runs a method using a context and handles errors if the executor key is missing.
5202	AttributeValue retrieves attribute value by name from Node's Attributes map.
5203	xpath constructs an XPath expression based on node attributes and parent-child relationships, stopping at document or ID nodes as specified.
5204	NodeType converts enumeration to human-readable string representation
5205	Do executes a command to set sink to use with parameters.
5206	Do executes a command to start tab mirroring with given parameters and returns an error.
5207	Do executes StopCasting command with given parameters in context and returns error
5208	Do sends a command to start observing with parameters and returns an error.
5209	Do executes a command to stop observing using StopObservingParams and returns any errors encountered.
5210	Do executes a command to set recording parameters using the Chrome DevTools Protocol.
5211	Do executes ClearEvents command with given parameters in context.
5212	WithObjectID sets the ObjectID field of CallFunctionOnParams and returns the modified instance.
5213	WithArguments sets the arguments of CallFunctionOnParams and returns the modified object
5214	WithExecutionContextID sets the execution context ID and returns updated CallFunctionOnParams.
5215	WithObjectGroup sets the object group for the call parameters and returns the updated parameters.
5216	Do executes a command to discard console entries and returns an error.
5217	WithContextID updates the ContextID field of EvaluateParams and returns the updated instance.
5218	WithOwnProperties sets the OwnProperties field and returns the modified GetPropertiesParams object
5219	WithGeneratePreview updates the GeneratePreview field of GetPropertiesParams and returns the updated instance.
5220	WithExecutionContextID sets the execution context ID in GlobalLexicalScopeNamesParams and returns the updated instance.
5221	WithObjectGroup updates ObjectGroup in QueryObjectsParams and returns the updated params.
5222	Do executes a command to release an object using the given parameters and context, returning an error if unsuccessful.
5223	Do executes a command to release an object group with parameters and returns an error.
5224	Execute command RunIfWaitingForDebugger using CDP in given context
5225	Do will execute a command to enable custom object formatter params and return an error
5226	Do executes a command to set the maximum call stack size for capturing in the context.
5227	Do will execute a command to terminate execution and return any errors encountered
5228	Execute command AddBinding using params and return error
5229	Do sends a command to remove a binding with parameters and returns an error.
5230	Do will execute a command and return an error if it fails
5231	Execute command with parameters and return error
5232	WithBufferUsageReportingInterval updates the buffer usage reporting interval and returns the updated StartParams instance.
5233	WithNoDisplayUpdates sets the NoDisplayUpdates field of BeginFrameParams and returns a pointer to the updated instance.
5234	WithScreenshot updates the Screenshot field of BeginFrameParams and returns the updated instance.
5235	bringToFrontParams execute command with context and return error
5236	WithClip sets the viewport for capturing screenshots and returns updated parameters.
5237	WithFromSurface sets the FromSurface field of CaptureScreenshotParams and returns the modified params.
5238	WithWorldName sets the world name and returns the updated params
5239	WithGrantUniveralAccess sets the GrantUniveralAccess field and returns the updated params.
5240	Do executes a command to reset navigation history with given parameters and context, returning any errors encountered.
5241	WithPromptText sets the prompt text for JavaScript dialog parameters and returns the updated params
5242	Do executes JavaScript dialog command with params and returns error
5243	WithReferrer sets the referrer in NavigateParams and returns the modified params.
5244	WithTransitionType sets the transition type in NavigateParams and returns the updated params pointer
5245	WithFrameID updates FrameID field and returns updated NavigateParams instance
5246	Do executes NavigateToHistoryEntry command with params and context, returning error.
5247	WithLandscape sets the Landscape field and returns updated params
5248	WithDisplayHeaderFooter updates DisplayHeaderFooter field and returns updated params
5249	WithPrintBackground sets print background and returns modified params
5250	WithScale updates the scale parameter of PrintToPDFParams and returns the updated instance.
5251	WithPaperWidth sets paper width in PrintToPDFParams and returns updated params
5252	WithPaperHeight sets paper height and returns updated PrintToPDFParams instance
5253	WithIgnoreInvalidPageRanges updates the IgnoreInvalidPageRanges field and returns the modified PrintToPDFParams instance.
5254	WithFooterTemplate sets footer template and returns updated PrintToPDFParams
5255	WithPreferCSSPageSize sets the PreferCSSPageSize field and returns the updated PrintToPDFParams instance.
5256	WithScriptToEvaluateOnLoad sets the script to evaluate on load and returns updated ReloadParams
5257	Do executes a command with parameters using a context and returns an error
5258	Do executes RemoveScriptToEvaluateOnNewDocument command with given parameters and returns an error
5259	Do sends a command to acknowledge a screencast frame and returns any errors encountered.
5260	Do will execute a command to set ad blocking enabled and return an error
5261	Do executes a command to bypass CSP using provided parameters and returns an error
5262	setFontFamiliesParams executes a command with given parameters and returns an error
5263	setFontSizesParams executes command with given parameters and context.
5264	Do executes a command to set document content using the provided parameters and context, returning an error if the operation fails.
5265	WithDownloadPath updates the download path in the parameters and returns the updated object.
5266	Do executes a command to set download behavior using provided parameters and context.
5267	Do executes a command to enable lifecycle events with parameters in the given context.
5268	WithFormat updates the screencast format in StartScreencastParams and returns the updated instance.
5269	WithMaxWidth sets the maximum width and returns the modified params
5270	WithMaxHeight sets the maximum height for a screencast and returns the updated parameters.
5271	WithEveryNthFrame sets the frame interval for screencasting and returns the updated parameters.
5272	Do executes a command to start a screencast using Chrome DevTools Protocol.
5273	Do executes a command to stop loading using the Chrome DevTools Protocol.
5274	Do sends a command to execute SetWebLifecycleState with parameters and returns an error.
5275	Do executes StopScreencast command using Chrome DevTools Protocol.
5276	Do executes a command to produce compilation cache parameters.
5277	Do executes CommandAddCompilationCache using AddCompilationCacheParams and returns any errors.
5278	Do executes ClearCompilationCache command via CDP.
5279	WithGroup updates the group field of GenerateTestReportParams and returns the updated instance.
5280	Do will execute a command to wait for a debugger to attach and return any errors encountered during execution
5281	Do sends ActivateTarget command to CDP server and returns error
5282	WithBindingName sets the binding name and returns the modified params object.
5283	ExposeDevToolsProtocolParams executes a command using the DevTools Protocol.
5284	WithBrowserContextID sets the browser context ID and returns the updated CreateTargetParams instance.
5285	WithSessionID updates the SessionID field of DetachFromTargetParams and returns the updated instance.
5286	Do sends a command to detach from target and returns an error
5287	Do executes CommandDisposeBrowserContext with DisposeBrowserContextParams and returns an error.
5288	WithSessionID sets the session ID in SendMessageToTargetParams and returns the updated params.
5289	sendMessageToTargetCommandWillBeExecutedAndErrorReturned
5290	Do executes a command to set auto-attach parameters using the Chrome DevTools Protocol.
5291	Execute command SetDiscoverTargets with parameters and return error
5292	Do executes a command to set remote locations with parameters and returns an error.
5293	WithPatterns sets patterns for EnableParams and returns updated params
5294	WithHandleAuthRequests sets authentication request handling and returns updated parameters
5295	Do sends a command to fail a request and returns an error.
5296	WithBody sets the request body and returns updated params
5297	WithResponsePhrase sets the response phrase in FulfillRequestParams and returns the updated params pointer
5298	Do will execute a command with parameters and return an error
5299	WithURL sets the URL field of ContinueRequestParams and returns the modified object.
5300	WithMethod sets the method field of ContinueRequestParams and returns the updated instance.
5301	WithPostData sets the PostData field of ContinueRequestParams and returns the modified object.
5302	WithHeaders sets headers in ContinueRequestParams and returns updated params
5303	Do sends a continue request command using the given parameters and context, returning any errors encountered during execution.
5304	Do sends a command to continue with authentication using parameters and returns an error.
5305	Do sends ContinueToLocation command to CDP and returns error
5306	WithIncludeCommandLineAPI sets the IncludeCommandLineAPI field and returns the updated params.
5307	Do executes Pause command using CDP and returns error
5308	Do executes a command to pause on asynchronous calls with parameters.
5309	Execute command RemoveBreakpoint with params and return error
5310	Do executes a command to resume something in a given context.
5311	Do executes a command to set async call stack depth with parameters and returns an error.
5312	Do executes a command with the given parameters in the context.
5313	Do will execute a command to set blackboxed ranges and return an error
5314	WithURL sets the URL field and returns the modified params object.
5315	WithURLRegex updates URLRegex field and returns updated params pointer
5316	WithScriptHash sets the ScriptHash field of the SetBreakpointByURLParams instance and returns the modified instance.
5317	WithColumnNumber sets the column number and returns the updated params object.
5318	WithCondition sets the condition for a breakpoint on function call and returns the updated params.
5319	Execute breakpoint command with parameters
5320	Do executes a command to pause on exceptions using parameters and returns an error.
5321	Do executes a command to set a return value using the provided parameters and context, returning any errors encountered.
5322	WithDryRun updates the DryRun field of SetScriptSourceParams and returns the updated instance.
5323	Do executes a command to skip all pauses in the SetSkipAllPausesParams context and returns an error if it fails
5324	Do executes a command to set variable value using context and parameters.
5325	WithBreakOnAsyncCall sets the BreakOnAsyncCall field and returns the modified StepIntoParams instance.
5326	Do executes a command to step into a step using parameters and returns an error.
5327	Do will execute a command and return an error
5328	Do executes a step-over command using the Chrome DevTools Protocol and returns any errors encountered.
5329	Listen will execute the ListenF function if it exists, passing the network and multiaddress as arguments.
5330	NotifyBundle listens to close events on a network connection.
5331	NotifyBundle handles connection event by invoking ConnectedF callback if available.
5332	DisconnectedF will be called if it exists, passing n and c
5333	OpenedStream invokes the OpenedStreamF callback if it exists.
5334	ClosedStream triggers a callback if defined for a network stream closure.
5335	WithNoDial adds a no-dial reason to the context.
5336	GetNoDial retrieves a boolean flag and reason from context, defaulting to false and empty string if not found.
5337	WithDialPeerTimeout sets a timeout value in the given context and returns the updated context.
5338	Open opens a database connection and wraps it with additional functionality based on the connection's interfaces.
5339	Prevpos calculates the previous position in a ring buffer given a starting position, returning -2 if out of bounds, -1 if empty or circular, or adjusted position otherwise.
5340	Last will return the index of the last element in the ring buffer or -1 if empty
5341	DeleteMostRecentBytes removes up to n bytes from the ring buffer, adjusting the readable count accordingly.
5342	NewFloat64RingBuf creates a ring buffer for float64 values with specified maximum view items and initializes it.
5343	TwoContig divides buffer into two contiguous slices based on readable data.
5344	Earliest retrieves the oldest value from a circular buffer and indicates if the buffer is readable.
5345	Values combines two contiguous slices of float64 values from a buffer and returns them as a single slice.
5346	NewAtomicFixedSizeRingBuf creates a fixed-size ring buffer with two views and returns a pointer to it.
5347	Reset locks the buffer, resets pointers and counters.
5348	NewPointerRingBuf creates a ring buffer with specified capacity and returns a pointer to it.
5349	TwoContig splits the buffer into two contiguous slices.
5350	NumPage retrieves the total number of pages in a PDF document.
5351	Page.Font retrieves a font resource by name.
5352	Font.Width calculates width for a given character code.
5353	Font.Encoder determines text encoding based on font properties, returning appropriate encoder or nopEncoder if unknown.
5354	Interpret will process a stream of values, execute operations based on keywords, manage stacks and dictionaries, and push objects onto the stack.
5355	Open opens a file and returns a Reader along with an error if unsuccessful.
5356	NewReader creates a new reader using a given reader at a specified size, returning an encrypted reader or an error.
5357	NewReaderEncrypted creates a reader for encrypted PDF files, verifying headers, content, and encryption, attempting multiple passwords if necessary.
5358	Trailer retrieves the trailer value from the reader.
5359	Kind method returns the data type of a Value instance.
5360	newBuffer creates a buffer for reading from a reader at a specified offset, initializing internal state and allowing object pointers and streams.
5361	Paginate will return pagination information and an error for the given ResultSet with specified perPage and page number
5362	CascadeDelete will delete documents based on cascading configurations retrieved from the provided document.
5363	cascadeDeleteWithConfig will delete documents based on relation type and properties, returning change info and an error if invalid type
5364	cascadeSaveWithConfig updates document based on relation type and configuration, returning change info or error
5365	MapFromCascadeProperties constructs a nested map from dot-separated property paths in a document.
5366	Connect attempts to establish a MongoDB connection using the provided configuration, handling errors and panics gracefully.
5367	lowerInitial converts the first character of a string to lowercase and returns the modified string.
5368	Find query in collection and return ResultSet
5369	RawInformationQuery sends an XML IQ request and returns the ID and error.
5370	NewClient creates a Client instance using options, handles TLS connection setup, and initializes the client before returning it.
5371	Close connection if it exists and return error if failed
5372	startTLSIfRequired initiates TLS if required, updates connection, and restarts XMPP stream.
5373	startStream initiates XML stream, sends opening tag, expects server response, decodes features, and returns them or error
5374	IsEncrypted checks if client connection is encrypted using TLS.
5375	Recv reads XMPP stanzas and converts them to structured data types.
5376	Send constructs an XML message stanza and sends it over a connection, returning the number of bytes written and an error if the operation fails.
5377	SendOrg sends an organization string over a connection and returns the number of bytes sent and an error.
5378	SendKeepAlive sends a keep-alive message and returns the number of bytes written and an error.
5379	SendHtml sends HTML message using client connection, escaping special characters in chat details.
5380	nextStart reads XML tokens until it finds a StartElement and returns it along with any errors encountered
5381	JoinProtectedMUC sends a presence request to join a protected MUC room, specifying nickname, password, and history options, and returns the number of bytes sent and an error if the operation fails.
5382	LeaveMUC sends an unavailable presence message to a specified JID using the client's connection and returns the number of bytes sent and an error if any.
5383	AttachBuffer adds a file attachment to a message with specified details.
5384	Attach file to message with option to overwrite existing attachment
5385	Inline attaches a file to a message and returns an error
5386	AddHeader appends a new header to the message and returns it.
5387	Tolist combines To, Cc, and Bcc fields of a Message object into a single list of strings.
5388	Bytes method constructs an email message in RFC 5322 format, including headers, body, and attachments encoded in MIME.
5389	Send sends an email using SMTP with the given address, authentication, message details, and returns an error if unsuccessful.
5390	GetHeader retrieves header value by name from Envelope, decoding it if present.
5391	GetHeaderValues retrieves header values for a given name from an envelope, decodes them, and returns them as a slice.
5392	SetHeader assigns values to a header field, encoding the first value with B-Encoding and adding subsequent values without encoding. An error is returned if the header name is empty.
5393	AddHeader appends a header to the envelope with UTF-8 encoded value and returns an error if the name is empty
5394	DeleteHeader removes a header by name from the envelope and returns an error if the name is empty.
5395	AddressList retrieves email addresses from Envelope headers, decodes Base64, and handles missing commas.
5396	Clone will create a copy of the Envelope object and return it
5397	ReadEnvelope reads MIME parts from a reader and returns an Envelope object or an error.
5398	EnvelopeFromPart constructs an envelope from a part, handling multipart messages, binary attachments, and text bodies, converting HTML to text if necessary, and copying part errors into the envelope.
5399	parseTextOnlyBody reads content based on MIME type, converts HTML to text if necessary, and handles character encoding.
5400	parseMultiPartBody will process a multipart body, extracting text, HTML, attachments, inlines, and other parts into an Envelope, returning an error if parsing fails
5401	matchHTMLBodyPart checks if part content type is HTML and disposition is not attachment
5402	ensureCommaDelimitedAddresses normalizes whitespace, handles quotes, and ensures comma-separated addresses with optional domain parts
5403	MailBuilder sets date field and returns itself
5404	MailBuilder sets sender's name and address and returns itself.
5405	MailBuilder sets the email subject and returns itself
5406	MailBuilder appends an email address to its recipients list and returns itself.
5407	MailBuilder sets recipient addresses and returns itself
5408	MailBuilder appends a CC recipient to the email and returns itself.
5409	CCAddrs sets the carbon copy addresses and returns the builder
5410	MailBuilder sets reply-to address and returns itself
5411	MailBuilder adds a header field to an email message and returns itself for chaining.
5412	AddAttachment appends a new attachment to the mail builder and returns the updated builder.
5413	MailBuilder adds file attachment, reads file content, sets MIME type, and returns updated builder.
5414	AddInline appends a new inline part to the mail builder with specified content, type, filename, and content ID, returning the updated builder.
5415	MailBuilder.Equals compares two instances using reflection and returns true if they are equal.
5416	Encode will write a MIME part and its children to the writer, handling headers and content boundaries.
5417	encodeHeader encodes the header of a Part using specified transfer encoding and writes it to a bufio.Writer.
5418	encodeContent encodes part content using specified transfer encoding and writes it to buffer, handling Base64 and Quoted-Printable formats with line wrapping and errors accordingly
5419	selectTransferEncoding determines transfer encoding based on content and line break quoting rules.
5420	setParameterValue updates a map with a key-value pair if the value is not empty
5421	NewBase64Cleaner creates a Base64 cleaner instance from a reader, initializing errors list.
5422	decodeToUTF8Base64Header encodes tokens containing "=?", prefixed/suffixed by parentheses, using UTF-8 base64 encoding.
5423	parseMediaType extracts media type and parameters, fixes formatting issues, and filters out invalid parameters
5424	fixMangledMediaType repairs a media type string, adding placeholders and correcting syntax as needed
5425	detectMultipartMessage checks if the given part has a multipart content type and returns true if it does.
5426	detectBinaryBody checks if the root part contains a binary body based on headers
5427	BreadthMatchFirst searches for a matching part using a breadth-first traversal and returns the first match.
5428	BreadthMatchAll traverses a tree structure using BFS, applying a matcher to each node and collecting matching nodes.
5429	DepthMatchFirst searches for a part matching a given condition using depth-first traversal.
5430	DepthMatchAll searches tree nodes matching criteria and collects them.
5431	ToASCII normalizes a string to ASCII by removing non-spacing marks and mapping Latin special characters.
5432	NewPart creates a new Part object with given content type and default header.
5433	AddChild appends a child part to the parent part, updating parentage and preventing cycles.
5434	TextContent checks if part's content type is text/plain or multipart.
5435	setupHeaders reads headers, sets ContentType, and handles warnings for MIME parts.
5436	setupContentHeaders sets up headers for part based on media parameters, including content disposition, filename, charset, and file modification date.
5437	convertFromDetectedCharset detects and applies the best character set from an input reader, falling back to the declared charset if necessary.
5438	Clone creates a deep copy of a Part object, setting the parent and recursively cloning children.
5439	ReadParts reads MIME parts from a reader, sets headers, and decodes content based on type.
5440	parseParts recursively parses MIME parts, sets IDs, handles headers, decodes content, and constructs the MIME tree.
5441	UUID generates a random string following RFC 4122 version 4 format.
5442	NewQPCleaner creates a QPCleaner instance with a buffered reader wrapping the given io.Reader.
5443	Error returns a formatted error message based on severity, name, and detail.
5444	addError appends an Error to Part with given name and formatted detail message.
5445	addWarning appends a warning to Part's Errors list with formatted detail.
5446	Wrap will return a byte array with lines no longer than max characters, wrapping at spaces or tabs.
5447	ConvertToUTF8String converts byte array to UTF-8 string based on given charset and returns converted string or error
5448	JoinAddress combines email addresses into a single string separated by commas.
5449	Markdown.Printf outputs formatted text to the markdown instance using fmt.Fprintf.
5450	EnvelopeToMarkdown converts an email envelope to Markdown format and writes it to the specified writer, including headers, addresses, body parts, attachments, and errors.
5451	FormatPart recursively prints MIME part details with indentation.
5452	newBoundaryReader creates a boundaryReader with specified reader and boundary string, setting up internal buffers and prefixes for efficient multipart form data parsing.
5453	boundaryReader reads data into dest, using buffer and handling boundary detection
5454	Next reads the next part of a boundary reader, returning true if a new part starts, false if end is reached, and an error if encountered.
5455	Parse will return an object and an error by parsing the buffer starting at the given offset
5456	Assign assigns a value to a symbol based on its type and returns the byte representation along with an error if the type is unsupported.
5457	NewRClient creates a new RClient instance with default authentication using the specified host and port.
5458	NewRClientWithAuth creates a new RClient instance with authentication, resolves TCP address, evaluates a test expression, and returns the client or an error.
5459	Register assigns a generator function to a camel-cased identifier in a map.
5460	Fuzz will modify fields of a struct pointer by setting them to random values
5461	findFakeFunctionFor will return a function that generates a fake string based on the input key, or an empty function if the key is not found
5462	Apply options to configuration and return error if any option fails
5463	ToOption clones Options into a new instance and returns a function that applies the clone.
5464	waitThenClose waits for context cancellation, closes channel, frees resources, marks as done.
5465	send sends a QueryEvent to the event channel if it's open and the given context allows.
5466	NewMovingAverage creates a moving average calculator based on input ages, returning either a SimpleEWMA or VariableEWMA instance.
5467	Set updates the variable's value and increments count past warmup samples.
5468	calcKeys50 generates cryptographic keys using PBKDF2 algorithm with HMAC-SHA256, key derivation count, and salt.
5469	getKeys reads encrypted data, extracts KDF count and salt, checks cache for matching keys, calculates keys if not cached, stores them in cache, and returns the keys.
5470	checkPassword verifies password integrity and compares it with stored key, returning an error if mismatched.
5471	parseFileEncryptionRecord reads encryption record, verifies version, extracts flags, retrieves keys, sets file key and IV, checks password and MAC if applicable, returning error if any step fails
5472	parseEncryptionBlock reads encryption block, verifies version, extracts flags, retrieves keys, checks password if flag present, sets block key, and returns error if any step fails
5473	newArchive50 creates an archive50 reader initialized with a buffer and password.
5474	cipherBlockReader reads data from a buffer or underlying reader, returning the number of bytes read and an error if any.
5475	ReadByte reads a byte from the cipher block reader, refilling buffer if needed and returning an error if encountered.
5476	newCipherBlockReader creates a reader for decrypting data using a cipher block mode, initializing buffers for encryption and decryption.
5477	newAesDecryptReader creates a reader that decrypts AES data using given key and IV
5478	limitByteReader creates a limitedByteReader that wraps a byteReader and limits the number of bytes read to n, returning an error if the limit is exceeded.
5479	`Mode` method calculates and returns the file mode based on attributes and operating system.
5480	nextBlockInFile reads the next block from the reader, updates the header, and returns an error if the block is invalid or the archive unexpectedly ends.
5481	next reads the next file block header and skips blocks until the last one is reached, returning an error if the archive ends or the block is invalid
5482	Read reads data from the packed file, handling blocks and EOF errors.
5483	Read reads data into p, checking file checksum if needed, returning bytes read and error.
5484	Next reads the next file header and handles decryption, decompression, and checksumming.
5485	NewReader creates a new reader from an input source and password, returning an error if initialization fails.
5486	OpenReader opens a volume with credentials and returns a reader-closer object or an error.
5487	getV3Filter will return a v3Filter and an error if the filter is not recognized or there's an issue reading the commands
5488	decoder29 initializes with a reader, resets state if needed, and prepares for decoding.
5489	readBlockHeader reads a bit to decide decoding method, initializes corresponding decoder, and handles EOF error
5490	readCodeLengthTable reads a Huffman table and updates code lengths based on bit patterns and counts.
5491	shrinkStates reduces memory usage by reallocating or freeing blocks of states based on the given size
5492	expandStates expands the states in the context, allocating more space if needed, and updates the state count.
5493	pushByte updates subAllocator's states based on byte position and increments heap1Lo, returning 0 if full, otherwise -heap1Lo
5494	SuccByte calculates successor byte based on input index and allocator states.
5495	`succContext` calculates next context based on index `i`, returning `nil` if invalid.
5496	calcAes30Params generates AES-30 encryption parameters using a passphrase and salt, returning the derived key and IV.
5497	parseDosTime converts a DOS date/time timestamp to a Go time.Time object
5498	decodeName decodes a byte buffer containing a UTF-8 encoded filename followed by a variable-length encoding scheme, returning the decoded filename as a string.
5499	readExtTimes updates file timestamps based on header flags and buffer data
5500	readBlockHeader reads archive block header, decrypts if encrypted, validates CRC, and sets header fields.
5501	newArchive15 reads archive data from reader with password encryption
5502	readFilter5Data reads bits from a reader, constructs an integer, and returns it along with an error.
5503	writeByte adds a byte to buffer and updates writer position
5504	copyBytes copies up to `len` bytes from the window buffer starting at `off`, wrapping around if necessary.
5505	read will return the number of bytes copied from the buffer to the provided byte slice
5506	queueFilter adds a filter block to the decoder's queue, adjusting offsets and checking validity.
5507	processFilters reads data, applies filters, and updates buffers accordingly, returning an error if any issues occur during processing.
5508	fill updates decodeReader with data from decoder, queues filters, and handles errors
5509	Read method processes buffered data, fills window if needed, applies filters, and reads into buffer.
5510	readFull reads data from reader r into buffer buf and returns an error if not all bytes are read, except EOF where it returns UnexpectedEOF
5511	findSig reads a signature prefix from a buffered reader, identifies the version, and returns it along with the number of bytes read, or an error if the signature is not found.
5512	execute runs commands in a loop, updating IP based on instructions
5513	newVM creates a VM instance with initialized memory and sets register 7 to VM size
5514	limitBitReader wraps a bitReader with a limited number of bits and an error
5515	readUint32 reads bits from rarBitReader and constructs a 32-bit unsigned integer, handling different scenarios based on the first few bits read.
5516	step3 removes a derivational ending from a word if present, returning true if successful
5517	Stem will process a word, apply stemming rules, and return the stemmed form, handling special cases and stopwords.
5518	step6 removes accents from é or è in French words if followed by non-vowels
5519	step5 removes last rune if suffix matches "enn", "onn", "ett", "ell", or "eill"
5520	step2a removes "ya", "ye", etc. from word if preceded by "u"
5521	step4 removes specific endings from a word, including "нн" and soft sign "ь", returning true if any changes were made.
5522	Stem will return the stemmed word and an error if the language is unsupported
5523	step1c replaces "y" or "Y" with "i" if preceded by a non-vowel and not the first letter, returning true if modified
5524	step3 processes word suffixes, applying rules based on position and replacing them with alternatives or removing them entirely.
5525	isStopWord determines if a given word is a stop word by checking against a list of common words in French.
5526	capitalizeYUI will convert specific lowercase vowels ('y', 'u', 'i') to uppercase based on surrounding vowels or preceding 'q'.
5527	step2 applies stemming rules to words, modifying suffixes based on specific conditions and returning true if changes were made.
5528	step3 removes specific suffixes from a word and deletes preceding 'u' if certain conditions are met
5529	step0 removes possessive suffixes and returns true if successful
5530	VnvSuffix identifies the end of a word suffix by finding the position where a vowel is followed by a non-vowel, returning the index after the suffix or the full length if no such pattern is found.
5531	step1 removes a specific suffix from a word if it meets certain conditions
5532	step2a removes specific suffixes from RV if preceded by a non-vowel and returns true if successful
5533	removePerfectiveGerundEnding removes specific verb endings from a word if they follow certain patterns, returning true if any ending was removed.
5534	removeAdjectivalEnding removes adjectives and specific participles from a word, returning true if changes were made.
5535	step2b removes specific suffixes from a word and applies rules based on those suffixes, returning true if successful.
5536	step4 modifies a word based on specific rules and returns true if changes were made.
5537	step5 removes 'e' from word end if in R2 or not preceded by short syllable, or deletes double 'l' from end if in R2
5538	Stem will reduce a word to its base form and remove small/stop words
5539	Stem will return the stemmed form of a word excluding short words and stop words
5540	isStopWord checks if a given word is a common stop word and returns true if it is
5541	isStopWord checks if a word is a common stop word and returns true if it is
5542	New creates a SnowballWord instance with input string converted to runes and sets R1start, R2start, RVstart to the length of the input.
5543	Remove last N runes from SnowballWord RS and reset R1R2.
5544	resetR1R2 adjusts R1, R2, and RV starts to ensure they do not exceed RS length
5545	slice extracts a substring from SnowballWord based on start and stop indices, adjusting boundaries if necessary.
5546	FitsInR1 checks if the word fits within R1 region based on given offset.
5547	FitsInR2 checks if word fits in R2 region based on RS length and x value.
5548	FitsInRV checks if RVstart is within RS bounds after subtracting x.
5549	FirstPrefix searches for matching prefixes in a word and returns the first found along with its runes.
5550	HasSuffixRunes checks if a word has a given suffix.
5551	FirstSuffixIfIn checks for suffixes within a word, returning the first matching suffix and its runes if it falls within specified bounds.
5552	RemoveFirstSuffixIfIn checks if a suffix exists at startPos and removes it if present, returning the removed suffix and its runes.
5553	RemoveFirstSuffix removes the first matching suffix from a word and returns it along with its rune representation.
5554	FirstSuffix will find and return the first matching suffix from a list within a word's runic range, along with the suffix itself.
5555	preprocess cleans word by normalizing apostrophes, trimming left ones, capitalizing misbehaving Y's, and finding R1 & R2 regions
5556	step0 removes specific suffixes from a word based on certain conditions and returns true if any changes were made.
5557	step1b processes a word, applying specific transformations based on suffixes and conditions, updating R1 and R2 accordingly.
5558	step2b deletes specific suffixes from a word based on certain conditions and returns true if any changes were made.
5559	capitalizeYs converts lowercase 'y' to uppercase 'Y' if it's the first letter or preceded by a lowercase vowel, counting the conversions.
5560	uncapitalizeYs converts all uppercase "Y" to lowercase "y" in a given word.
5561	stemSpecialWord will return the stemmed form of a given special word
5562	isShortWord checks if a word is short based on R1start and ending with a short syllable
5563	step1a modifies a word based on specific suffix rules and returns true if modified.
5564	Set assigns a value to a key in goroutine-specific storage.
5565	Get retrieves a value using a key from goroutine-specific data, returning nil if not found.
5566	Cleanup removes data associated with the current goroutine ID.
5567	getValues retrieves the current goroutine's values using a lock
5568	linkGRs assigns current goroutine data to parent data structure safely
5569	unlinkGRs will remove the current goroutine ID from the data map while holding a lock
5570	AppUri constructs and returns a URI using the given app name, path, and configuration.
5571	CurlAppWithTimeout executes an application using specified configuration, name, path, timeout, and arguments, returning the result after waiting.
5572	CurlApp executes an application using specified configuration and arguments, returning the result after waiting.
5573	CurlAppRoot constructs an AppCurler instance and executes a GET request to the root path of the specified application, returning the response.
5574	GetTags identifies tags in a string based on a prefix and optional terminators, returning a list of tags with their text and index.
5575	GetTagsAsUniqueStrings extracts unique tag strings from input based on a prefix and optional terminator, returning them as a slice.
5576	isTerminator checks if a rune is a specified terminator or whitespace/non-printable character
5577	uniquify removes duplicate strings from input and returns the unique list
5578	New creates a middleware function that applies location settings to Gin context
5579	Get retrieves a URL value from Gin context using a key, returning it or nil if not found or incorrect type.
5580	GenerateRSAKeyPair creates RSA key pair with specified bits using given reader, returns private and public keys along with error if generation fails.
5581	Verify RSA signature of data using PKCS1v15 padding and SHA256 hash algorithm. Return verification result and error if failed.
5582	Encrypts data using RSA PKCS1v15 padding and returns encrypted bytes or error.
5583	Sign will generate a digital signature for a message using RSA private key and SHA-256 hash algorithm
5584	GetPublic retrieves the public key from RSA private key.
5585	Decrypt uses RSA PKCS1v15 to decrypt data.
5586	UnmarshalRsaPrivateKey will parse PKCS1 RSA private key bytes and return a PrivKey object, or an error if the key is too small.
5587	GenerateKeyPair will return a private key, public key, and an error by calling GenerateKeyPairWithReader using rand.Reader
5588	GenerateKeyPairWithReader generates key pairs based on the specified type and source reader, returning private and public keys along with an error if the key type is unsupported.
5589	GenerateEKeyPair generates an elliptic curve key pair and returns public key, a function to generate shared secret, and an error.
5590	UnmarshalPublicKey converts byte data to a PublicKey object using protocol buffers and specific unmarshaller based on key type, returning the parsed key or an error if unsuccessful.
5591	MarshalPublicKey converts a public key to protobuf format and returns the marshaled bytes or an error.
5592	UnmarshalPrivateKey converts protobuf data to a private key using registered unmarshallers, returning an error if the key type is unrecognized.
5593	MarshalPrivateKey converts a private key to a protobuf message and marshals it to bytes.
5594	KeyEqual checks if two keys are equal by comparing their byte representations and errors.
5595	GenerateECDSAKeyPair generates an ECDSA key pair using a default curve from a source reader.
5596	GenerateECDSAKeyPairWithCurve will generate ECDSA key pair using specified curve and source reader and return private and public keys along with any errors encountered
5597	ECDSAKeyPairFromKey converts an ecdsa private key to ECDSA private and public keys, returning them along with an error if the input is nil.
5598	UnmarshalECDSAPrivateKey converts byte data to ECDSA private key.
5599	UnmarshalECDSAPublicKey converts PKIX public key data to ECDSA PublicKey object.
5600	ECDSAPrivateKey.Equals compares two private keys and returns true if they are equal.
5601	Sign data using ECDSA, returning signature or error
5602	ECDSAPublicKey.Equals compares two public keys and returns true if they are equal.
5603	Verify ECDSA signature against data and public key, returning result and error
5604	GenerateSecp256k1Key generates private and public keys using secp256k1 curve and returns them along with an error if generation fails
5605	UnmarshalSecp256k1PrivateKey converts byte data to a Secp256k1 private key, returning an error if the data size is incorrect.
5606	UnmarshalSecp256k1PublicKey converts byte data to a Secp256k1 public key, returning the key and any errors encountered.
5607	Equals checks if two Secp256k1 private keys are equal by comparing their D components.
5608	Secp256k1PrivateKey.Sign hashes data, signs it, and returns serialized signature or error
5609	`Equals` checks if two `Secp256k1PublicKey` instances are equal.
5610	Verify a signature against data using Secp256k1 public key and return verification result and error
5611	Ed25519PrivateKey.Raw returns the raw bytes of the private key and its associated public key, copying them into a new buffer and returning it along with no error.
5612	Sign method generates a signature for given message using Ed25519 private key.
5613	Ed25519PublicKey.Equals checks if two keys are equal by comparing their underlying byte slices.
5614	Verify signature using Ed25519 public key
5615	UnmarshalEd25519PublicKey will return an Ed25519 public key and an error if the data size is incorrect
5616	UnmarshalEd25519PrivateKey will convert ed25519 private key data to a PrivKey object, removing redundant public key if present, and return an error if data size is incorrect
5617	EditScriptForStrings computes edit script between two strings using specified options.
5618	EditScriptForMatrix generates an edit script for a matrix using backtracking based on given options.
5619	WriteMatrix outputs a formatted table representation of a matrix using given source and target slices and a writer.
5620	New creates an absolute path lockfile or returns an error if the path is not absolute.
5621	GetOwner reads a lockfile, extracts PID, checks if process is running, returns process or error if not.
5622	TryLock attempts to acquire a lock by creating a temporary file, writing the PID, and linking it to the target file, handling errors and cleaning up stale locks recursively.
5623	Unlock method removes lockfile if owner matches current process, otherwise returns an error.
5624	NewBase creates a new Base instance with default settings, applying optional configurations before returning it.
5625	SetFallbackLogger sets a fallback logger or shuts it down if nil, returning an error if initialization fails.
5626	AddLogger adds a logger to Base, initializing it if needed, appends hooks, sets reference, and returns error.
5627	LogWithTime logs a message with timestamp, level, attributes, and hooks if initialized and appropriate level.
5628	Log logs a message at a given level with attributes and arguments, using the current time.
5629	Warnm delegates warning message formatting and logging to Warningm method.
5630	NewTemplateWithFuncMap creates a new Template with FuncMap for different log levels.
5631	Execute template with message and optional colorization, returning rendered string or error.
5632	NewTemplateMsg creates a TemplateMsg object with given timestamp, level, attributes, and message.
5633	NewLogAdapterFor creates a LogAdapter instance wrapping a logger with optional attributes.
5634	SetAttr updates the attribute in LogAdapter using the provided key and value.
5635	LogWithTime logs message with timestamp and attributes if log level allows
5636	LogAdapter filters log messages based on level and merges attributes before delegating to the base logger.
5637	Dbgm forwards message attributes and formatting arguments to Debugm method.
5638	NewAttrsFromMap creates a new Attrs object and sets attributes from a given map.
5639	NewAttrsFromAttrs combines multiple Attrs objects into a single Attrs object.
5640	MergeAttrs combines attributes from another Attrs object into the current one, updating existing entries and adding new ones.
5641	SetAttr updates an attribute's value and returns the Attrs object.
5642	GetAttr retrieves an attribute using a key, locking access to shared attributes.
5643	RemoveAttr deletes an attribute by key from Attrs and locks access during operation.
5644	Attrs method returns a map of attributes with their keys converted using getHashAttr function.
5645	Debugm logs a message with attributes and arguments using the current default logger.
5646	Infom logs a message with attributes and arguments using the current default logger.
5647	Warningm forwards warning message and attributes to default handler
5648	Errm wraps Errorm with given attributes and message.
5649	Errorm wraps another error with additional attributes and message formatting.
5650	Fatalm logs a critical message and returns an error.
5651	Dief logs an error message and exits with a given exit code.
5652	Diem logs a message with attributes and arguments using a default logger.
5653	ToLogLevel converts a log level string to an enum and returns an error if unknown.
5654	CallErr invokes a function returning an error, runs a check, and waits for the result before returning it.
5655	New creates a StackdriverHook with options, applying them and validating required fields before setting defaults.
5656	StackdriverHook.Fire converts log entry data to labels and sends log message via agent or API based on availability.
5657	Levels sets log levels for StackdriverHook and returns an Option.
5658	ProjectID sets the project ID for StackdriverHook and returns an Option.
5659	EntriesService sets up a logging hook with a specified entries service.
5660	LoggingService sets up a StackdriverHook with logging entries from a given service.
5661	ErrorService sets the error service for StackdriverHook and returns an option.
5662	HTTPClient configures StackdriverHook with logging and error reporting services using provided http.Client.
5663	MonitoredResource sets the monitored resource for StackdriverHook and returns an option.
5664	ErrorReportingLogName sets the error reporting log name in StackdriverHook and returns an Option.
5665	Labels sets hook labels and returns an option.
5666	PartialSuccess sets hook's partial success flag based on input boolean and returns an error if any.
5667	GoogleComputeCredentials sets up authentication using service account credentials and verifies required scopes.
5668	NewEncoder creates an encoder using the codec and writer
5669	NewDecoder creates a Decoder using a Parser initialized with the given Reader.
5670	NewStreamEncoder creates a StreamEncoder using a writer from the Codec.
5671	NewStreamDecoder creates a decoder using a parser from a reader.
5672	Register adds a codec to the registry for a given mimetype.
5673	Registry Unregister removes a codec for a given MIME type
5674	Lookup retrieves a codec for a given mimetype from the registry.
5675	Codecs retrieves a copy of the codecs map from the registry.
5676	Type extracts the uppercase segment before the first space in Error's message.
5677	Install registers an adapter for a given type, validating its encode and decode functions, updating the adapter store, and clearing the struct cache.
5678	AdapterOf retrieves an adapter based on a type, returning the adapter and a boolean indicating success.
5679	AppendDuration appends a human-readable representation of a time.Duration to a byte slice, using the largest appropriate unit and handling negative durations.
5680	fmtInt converts a uint64 integer to a string representation using a buffer, returning the number of bytes written.
5681	NewDecoder creates a decoder using a parser from the given reader.
5682	NewStreamDecoder creates a StreamDecoder using a Parser from the given Reader.
5683	Unmarshal will decode byte data into a given variable and return an error if parsing fails
5684	Type.String() converts enum to human-readable string representation
5685	zeroValueOf retrieves cached zero value for given type or computes and caches it if not already present
5686	NewValueParser creates a ValueParser instance with a stack initialized to the reflect value of v.
5687	ParseTag extracts tag details from a string and returns a structured Tag object.
5688	NewEncoder creates an encoder using the provided writer.
5689	NewStreamEncoder creates a stream encoder using a writer.
5690	NewPrettyEncoder creates a pretty-printing encoder for the given writer.
5691	NewPrettyStreamEncoder creates a stream encoder for pretty-printing to a writer.
5692	Marshal converts an interface to a byte slice, reusing a pool of encoders.
5693	NewEncoder creates an Encoder instance with a given Emitter, panicking if the Emitter is nil.
5694	EncodeArray encodes an array using the provided function, emitting array elements and handling errors accordingly.
5695	EncodeMap encodes a map using the provided function, handling keys and errors during iteration.
5696	NewStreamEncoder creates a StreamEncoder instance with the given Emitter, panicking if the Emitter is nil.
5697	Open will open a stream encoder for writing up to n items and emit an array begin if not already done, returning an error if already closed or previously opened
5698	Close method closes a stream encoder, opens it if necessary, marks it as closed, and emits array end if not one-shot, returning any errors encountered.
5699	Encode serializes a value to a stream, checking limits and emitting array elements accordingly.
5700	newStructType constructs a structType object for a given reflect.Type, populating fields and caching results in a map.
5701	lookup retrieves cached struct type for given reflect.Type, caches if not already present
5702	cache.clear releases all cached types
5703	CheckUint64Bounds verifies if a uint64 value exceeds a specified maximum and returns an error if it does.
5704	CheckInt64Bounds verifies if an int64 value is within specified bounds and returns an error if not.
5705	NewDecoder creates a new Decoder instance with the given Parser, panicking if the Parser is nil.
5706	Decode will decode a value using a decoder, handling pointers and interfaces, and return an error if decoding fails.
5707	DecodeArray decodes a JSON array using a provided function and handles errors during parsing.
5708	DecodeMap decodes a map using a provided function, handling offsets and types, returning an error if decoding fails.
5709	NewStreamDecoder creates a StreamDecoder instance with the given Parser, panicking if the Parser is nil.
5710	Len returns the remaining length of data to be decoded, considering errors and initialization.
5711	StreamDecoder's Err method returns nil if no error occurred, otherwise it returns the stored error.
5712	Decode will process a stream of data, updating counters and handling different types while returning errors or end-of-data indicators.
5713	Encoder creates a StreamEncoder from a Parser, setting oneshot based on parsed type.
5714	init sets default logging flags based on environment variable LOGFLAGS
5715	LevelFromString converts a string to a corresponding log level and returns a boolean indicating success.
5716	NewBackend creates a new backend instance with writer and optional configurations.
5717	callsite retrieves caller's file path and line number based on given flags
5718	print logs with level, tag, and arguments to backend writer
5719	Logger creates a new logger instance for a given subsystem tag.
5720	Trace logs messages if trace level is enabled
5721	Tracef logs messages at the trace level if enabled.
5722	Debug logs messages if the level is debug or higher.
5723	slog.Debugf logs debug messages if the level allows
5724	`slog` logs informational messages if the level is appropriate.
5725	slog.Infof logs info messages if level allows
5726	slog.Warn logs warning messages if the level is warn or higher
5727	Warnf logs a warning message if the current level is warn or higher
5728	`slog` logs an error message if the current level allows it.
5729	slog.Errorf logs an error message if the log level is at least Error.
5730	`slog.Critical` logs critical messages if the level allows.
5731	`slog` logs critical messages if level allows, formatting arguments accordingly.
5732	Level retrieves the current logging level atomically.
5733	SetLevel updates the logging level atomically.
5734	Concatenates two permissions, combining allowed and denied roles.
5735	HasPermission checks if roles have permission based on mode, denied, and allowed roles.
5736	ConcatPermissioner combines multiple Permissioner instances into a single instance, filtering out nil values.
5737	permissioners checks permissions for all roles and returns true if all have the specified mode
5738	Register assigns a checker to a role, updating or overwriting existing definitions.
5739	NewPermission creates a new Permission instance linked to the Role and initializes allowed and denied roles maps.
5740	Get retrieves a Checker by name from role definitions, returning the Checker and a boolean indicating if it exists.
5741	isPtrFromHeap checks if an address points to a heap object
5742	IsPtr checks if an address points to a pointer in the Go heap.
5743	FindObject identifies a Go object and calculates its size based on address and heap information, returning the object and its offset.
5744	ForEachObject iterates over objects in pages, applying a function and stopping if the function returns false.
5745	ForEachRoot iterates over all roots in globals and goroutines, applying a function and stopping if false is returned.
5746	Addr converts an object to a process address.
5747	Size calculates the heap size of an object using Process's findHeapInfo method.
5748	Process.Type identifies object type and retrieves its representation along with reference count.
5749	ForEachRootPtr traverses the root pointer, applying a function to each object and returning early if the function returns false.
5750	edges1 traverses object graph based on type kind and applies callback function to found objects
5751	setHeapPtr updates heap pointer based on address and process pointer size
5752	findHeapInfo retrieves heap information based on address, returning details or nil if not found.
5753	allocHeapInfo calculates heap info address based on given core address and manages page table entries.
5754	runtimeName will return a string representation of a DWARF type, including pointers, arrays, structs, and other types, while handling anonymous fields and stripping package paths.
5755	readRuntimeConstants populates runtime constant values from hardcoded Go 1.9 data and DWARF records.
5756	funcTab adds a function entry with address range to its entries list
5757	sort will reorder entries in funcTab based on min field
5758	find searches for a function based on program counter and returns it if found within bounds
5759	read reads variable integers from memory, updates a table entry with calculated values based on architecture-specific quantum, and continues until a zero value is encountered.
5760	readVarint reads a variable-length integer from memory, updating address and returning value and bytes read
5761	useLine constructs the usage line for a Cobra command, appending flags if available and enabled.
5762	commandPath recursively builds the path of a Cobra command.
5763	readCore reads configuration, initializes processes, handles errors, and updates cache.
5764	typeName will return the type name of an object, considering its size and repetition count
5765	fieldName extracts field name based on offset and object type, handling arrays and partial spaces.
5766	typeFieldName returns a field name based on the type and offset, handling various Go types and their subfields recursively.
5767	FindFunc searches process funcTab for function at given address.
5768	Core initializes a Process object using DWARF information, handles runtime globals, reads various data structures, and marks objects.
5769	region.Address returns pointer address or panics if not a pointer
5770	region.Int converts region to int64 if valid
5771	Uintptr converts region to uintptr value safely
5772	Cast changes region type based on provided string.
5773	Deref will return a dereferenced region or panic if input is not a pointer
5774	region Uint64 reads 8-byte unsigned integer value
5775	Uint32 reads a 4-byte unsigned integer from a region.
5776	region.Int32 returns 32-bit integer from process memory or panics if type mismatch
5777	region Uint16 returns unsigned 16-bit integer from memory or panics if type mismatch
5778	Uint8 reads an 8-bit unsigned integer from the region's process memory.
5779	region.String converts region data to a string by reading its content.
5780	region.SlicePtr returns a pointer to the region if it represents a slice, otherwise panics
5781	SliceLen returns the length of the slice stored in the region if it is a slice, otherwise panics.
5782	region.Field updates region pointer based on field offset and type
5783	ReadUint8 fetches an 8-bit unsigned integer from a specified address in the process's memory mapping.
5784	ReadUint16 reads a 16-bit unsigned integer from a specified address in the process's memory, handling endianness and potential buffer overflows.
5785	ReadUint32 reads a 32-bit unsigned integer from a specified address in a process's memory, handling endianness and mapping errors.
5786	ReadUint64 reads an unsigned 64-bit integer from a specified address, handling endianness and mapping errors.
5787	ReadInt8 converts an 8-bit unsigned integer to a signed integer at the given address.
5788	ReadInt16 converts an unsigned 16-bit integer to a signed 16-bit integer.
5789	ReadInt32 converts uint32 to int32 using ReadUint32 method
5790	ReadInt64 converts a uint64 read from memory at address a to int64.
5791	ReadUintptr reads an uintptr from memory address a based on pointer size.
5792	ReadPtr reads an uintptr from address a and returns it as an Address.
5793	ReadCString reads a C-style null-terminated string from memory and returns it.
5794	Mapping's Source method returns file name and offset if function is not nil, otherwise empty string and zero.
5795	findMapping retrieves a mapping from nested tables using address bits
5796	Max will return the larger of two addresses.
5797	Min function returns smaller of two addresses.
5798	Align address to nearest multiple of x
5799	initialize constructs a spanning tree for objects, assigns vertex numbers, and builds relationships between them.
5800	calculate will determine the immediate dominator for each vertex in the graph using semidominators and parent links
5801	eval returns the label of a node after compressing the path if it has an ancestor.
5802	compress function traverses ancestor chain, updates labels, and compresses structure
5803	link updates ancestor map with vertex w linked to vertex v
5804	reverse reverses the dominator tree by swapping parent-child relationships and updating indices
5805	calcSize calculates the size of nodes in a dominator tree using DFS and updates the size array accordingly.
5806	objField constructs a field name based on object type and offset
5807	Readable checks if a mapping exists for the given address.
5808	ReadableN checks if a readable mapping exists for a given address and size.
5809	splitMappingsAt splits memory mappings at a given address if within bounds and not at endpoints
5810	DynamicType retrieves the dynamic type of an interface value based on its address.
5811	Create will initialize a Btrfs filesystem image and mount it if necessary, ensuring idempotency.
5812	Resolve converts URL host to IP address, returns error if failed
5813	Equal compares two Token instances and returns true if they have the same tokenType and value.
5814	newDefaultClassifier creates a default token classifier with predefined rune classes
5815	Lexer's Next method skips comments and returns word tokens while reporting unknown token types as errors.
5816	NewTokenizer creates a Tokenizer from an io.Reader, initializing it with a buffered reader and default classifier.
5817	Split splits a string into substrings using a lexer and returns them along with any errors encountered.
5818	Between extracts content between specified left and right substrings in a string.
5819	BetweenF creates a closure that trims a string between specified left and right substrings.
5820	Camelize converts string to camel case by replacing hyphens and underscores with uppercase letters.
5821	Capitalize converts the first letter of a string to uppercase and the rest to lowercase.
5822	CharAt returns a single character from a string based on the given index, or an empty string if the index is out of bounds.
5823	CharAtF creates a closure that returns a function to fetch a character at a specified index from a given string.
5824	ChompLeft removes the specified prefix from the left side of a string if present.
5825	ChompLeftF creates a function that removes a specified prefix from the left side of a given string.
5826	ChompRight removes a specified suffix from the end of a string if present, otherwise returns the original string.
5827	ChompRightF creates a function that removes specified suffix from the right side of a given string.
5828	ClassifyF returns a closure that classifies strings using the Classify function.
5829	Clean removes extra spaces from both ends and replaces multiple spaces within a string with a single space.
5830	Dasherize trims spaces, replaces underscores and consecutive dashes with single dashes, capitalizes words, and converts to lowercase.
5831	EscapeHTML converts a string to HTML-safe content by escaping special characters.
5832	DecodeHTMLEntities converts HTML entities in a string to their corresponding characters using html.UnescapeString.
5833	EnsurePrefixF returns a closure that prepends a given prefix to a string
5834	EnsureSuffixF returns a function that appends a suffix to a given string if it doesn't already have it.
5835	Humanize converts snake_case strings to Title Case, removing '_id' suffix.
5836	Iif evaluates a condition and returns one of two strings based on its result.
5837	IndexOf will find the position of a substring in a string starting from a given index and return -1 if not found
5838	IsLower checks if a string contains only lowercase alphabetic characters.
5839	IsUpper checks if a string contains only uppercase alphabetic characters.
5840	Left will return the leftmost n characters of a string or the rightmost n characters if n is negative
5841	LeftF generates a function that trims a string to the left by n characters.
5842	Letters converts a string into a slice of individual letters.
5843	Lines converts a string to a list of lines by replacing Windows-style newlines and splitting on Unix-style newlines.
5844	Map applies a function to each element of an array and returns a new array with the results.
5845	Match will return true if the string matches the given regular expression pattern, otherwise false
5846	tasks defines project tasks including install, lint, readme, and test.
5847	Pad will return a string padded with a specified character to reach a minimum length.
5848	PadF creates a closure that pads strings with a given character to a specified length.
5849	PadLeft pads a string with a given character on the left up to a specified length.
5850	PadLeftF creates a closure that pads a string with a given character to the left up to a specified length.
5851	PadRightF creates a closure that pads strings with a specified character to a minimum length.
5852	Pipe applies a series of functions to a string sequentially and returns the result.
5853	QuoteItems will return a list of strings where each string is enclosed in quotes.
5854	ReplaceF creates a closure that replaces occurrences of old with new in a given string, up to n times.
5855	ReplacePatternF creates a closure that replaces occurrences of a pattern with a replacement string in a given input.
5856	Reverse will return the reversed version of the given string
5857	RightF creates a closure that right-pads a string with spaces to a specified length.
5858	Slice extracts substring based on start and end indices, adjusting for negative end values.
5859	SliceF creates a closure that slices a string based on given start and end indices.
5860	SliceContains checks if a slice contains a given value and returns a boolean result
5861	SliceIndexOf returns the index of the given value in the slice, or -1 if not found.
5862	Slugify converts a string to a URL-friendly slug by removing special characters, converting to lowercase, and replacing spaces with dashes.
5863	StripPunctuation removes punctuation and replaces whitespace with a single space in a given string.
5864	StripTags removes specified HTML/XML tags from a string.
5865	Substr extracts a substring from a given string based on index and length, returning an empty string if out of bounds or invalid inputs.
5866	SubstrF generates a function that extracts a substring from a given string based on the specified index and length.
5867	TemplateWithDelimiters replaces placeholders in a string with corresponding values from a map using custom delimiters.
5868	ToArgv converts a string into a list of arguments, handling quotes, escapes, and whitespace.
5869	ToBool converts a string to a boolean by checking if it equals "true", "yes", "on", or "1".
5870	ToBoolOr converts string to boolean, returning default if conversion fails.
5871	ToIntOr converts string to int, returns default if conversion fails
5872	ToFloat32Or attempts to convert a string to a float32, returning a default value if conversion fails.
5873	ToFloat64Or attempts to convert a string to a float64, returning a default value if conversion fails.
5874	UnescapeHTML converts HTML entities to their corresponding characters using html.UnescapeString.
5875	WrapHTML wraps a string in HTML tags with optional attributes, escaping attribute quotes.
5876	WrapHTMLF creates a function that wraps input string in HTML tags with specified attributes.
5877	ReapChildren waits for child process signals, reaps them using a lock, and sends pids or errors accordingly.
5878	SdNotify sends a state message over a Unix socket and returns an error if unsuccessful.
5879	NewAuthenticator sets up an Authenticator instance with a data store and access policy.
5880	`Endpoint handles OAuth2 requests, routes them based on path, and manages state using a tracer.`
5881	Unique removes duplicate bson.ObjectIds from a list and returns the unique list.
5882	Contains checks if a list contains a given ID and returns true if found.
5883	Includes checks if all elements of subset are contained in all.
5884	Require checks model flags and logs them if present
5885	Enqueue adds a job to a store with specified details and delay, returning the job and any errors encountered.
5886	A constructs and returns an Authorizer with a Matcher and Handler, tracing execution and calling the Handler.
5887	Run creates an Authorizer with specified Enforcers and returns it.
5888	And combines two authorizers, returning a new authorizer that applies both matchers and handlers sequentially.
5889	Or combines two Authorizers, returning the result of the first successful Matcher and Handler.
5890	Enqueue adds a job to a queue and returns the job and an error.
5891	Callback creates a fire callback for a task, sets tags, executes custom logic, enqueues job based on store, and responds accordingly.
5892	NewWatcher creates and initializes a Watcher with a manager and streams map.
5893	Add a stream to Watcher, initialize model, check existence, save, open, and handle events accordingly.
5894	Action method returns a Fire action with GET method and a callback to handle connections
5895	Operation.Write checks if operation is Create, Update, or Delete and returns true if so
5896	Operation.String() converts operation type to its corresponding string representation.
5897	Query combines selector and filters into a MongoDB query object
5898	Respond encodes a value to JSON and writes it to the response writer, returning any errors encountered.
5899	EnsureApplication verifies or creates an application, returning its key and an error if issues arise.
5900	EnsureFirstUser checks if the first user exists, creates it if missing, and saves it to the store.
5901	Callback constructs and returns a fire.Callback based on operation type, calling appropriate strategy methods.
5902	OpenStream creates a Stream instance, prepares a resume token if available, and opens the stream asynchronously.
5903	Close locks the stream's mutex, sets a closed flag, and closes any active change stream.
5904	AddTokenIndexes adds token indexes to indexer, including Type, Application, User, and optionally ExpiresAt if autoExpire is true
5905	GetTokenData extracts token details including type, scope, expiration, application, and user ID.
5906	SetTokenData updates token properties including type, scope, expiration, client ID, and user ID.
5907	ValidSecret checks if a given secret matches the stored hash using bcrypt.
5908	HashSecret generates a bcrypt hash for the application secret, saves it, and clears the original secret.
5909	ValidPassword checks if the given password matches the user's hashed password using bcrypt.
5910	HashPassword will generate a bcrypt hash from the user's password, save it, and clear the original password returning an error if hashing fails
5911	MustCreateStore creates a Store instance from a URI, panicking if creation fails.
5912	CreateStore connects to a MongoDB database using a URI and returns a Store object along with any connection errors.
5913	C retrieves collection from DB based on model
5914	NewAssetServer creates an HTTP handler serving files from a specified directory with a given prefix.
5915	DefaultGrantStrategy checks if scope is empty, returns error if not, otherwise returns scope
5916	DefaultTokenData returns user ID if resource owner is not nil, otherwise returns nil
5917	GenerateToken creates a JWT token using policy settings and returns it as a string or an error.
5918	ParseToken verifies JWT token validity, extracts claims, and checks ID format.
5919	fire.C creates an Enforcer with given name, matcher, and handler
5920	MustGet retrieves a field value from a model struct by name, panicking if the field doesn't exist.
5921	MustSet updates a model field with a given value, panicking if the field does not exist.
5922	NewGroup creates a new Group instance with initialized controllers and actions maps.
5923	Add controllers to Group, prepare them, check for duplicates, and store in map
5924	Endpoint handles HTTP requests, routes them based on URL paths, and invokes appropriate controllers or actions while managing tracing, authorization, and error handling.
5925	Add a model to the indexer with optional uniqueness, expiration, and specific fields.
5926	AddRaw adds a raw index to the Indexer's collection of indexes.
5927	Ensure creates a copy of the store, iterates over raw indexes, and ensures each index exists in the database, returning an error if any fail.
5928	NewCatalog creates a new catalog instance and adds models to it
5929	Add models to catalog, panic if duplicate name found
5930	All retrieves all models from the catalog.
5931	Visualize generates a graph representation of catalog models and their relationships based on titles and metadata.
5932	NewErrorReporter creates a function that logs errors to a writer with stack trace.
5933	EnsureIndexes checks model indexes in store and returns error if failed
5934	E constructs an error message using a format string and arguments, then wraps it in a safe error.
5935	Compose chains middleware handlers into a single http.Handler
5936	Includes checks if all elements of subset are contained within all.
5937	Intersect will return a new list containing elements present in both input lists
5938	E creates an Error object with given reason and retry flag
5939	RootTracer wraps an HTTP handler, traces requests, replaces IDs, constructs names, logs details, and propagates tracing context.
5940	NewTracerFromRequest creates a Tracer using the given HTTP request and operation name.
5941	NewTracer creates a new Tracer instance with the given root Span and an empty spans slice.
5942	Push adds a new span to the tracer's stack using the last span's context or root context.
5943	Last will return the last span in the tracer's spans list or the root span if the list is empty
5944	Tracer.Tag sets a tag with key and value on the last item.
5945	Tracer.Log appends a key-value pair to the last log entry
5946	Tracer adds current span to given context
5947	Tracer's Pop method removes and finishes the last span from the stack.
5948	Tracer Finish closes all spans and optionally the root span if indicated.
5949	NewPool creates a new Pool instance with initialized tasks, queues, and closed channel.
5950	Add will add a task to the pool, check for duplicates, update task and queue references, and save them
5951	Run starts all queues and tasks in the pool.
5952	NewBodyLimiter wraps an HTTP request body with a size limit reader.
5953	LimitBody updates HTTP request body with a new limiter based on size.
5954	C creates a callback with a matcher and handler, tracing execution.
5955	Only filters operations based on allowed list
5956	BasicAuthorizer verifies HTTP basic auth credentials against provided map and denies access if they don't match.
5957	ModelValidator returns a callback to validate models, checking if they implement ValidatableModel and invoking Validate if successful.
5958	TimestampValidator sets created and updated timestamps based on model operations.
5959	RelationshipValidator checks model relationships, excludes specified fields, handles has-one/many/to-one/to-many connections, creates validators for dependent resources and references, and returns callbacks to validate ctx.
5960	Inspect will spawn workers to process object groups and aggregate results into secret list
5961	NewRule creates a new rule with a given name and match pattern, compiling the pattern into a regular expression and returning it along with an error if compilation fails.
5962	AddUnmatch appends a case-insensitive regular expression pattern to Rule's Unmatch field and returns an error if compilation fails.
5963	Run rule on content, collect matching lines excluding unmatches, return results
5964	NewSecret creates a Secret instance with specified Object, Rule, Nline, and Line properties.
5965	NewObject creates a new Object instance with limited content length and sets its properties.
5966	SetMetadata updates object metadata with key, value, and attributes, updating primary key hash if needed.
5967	GetMetadata retrieves metadata value by key, returns value and error if key does not exist
5968	GetMetadataAll retrieves all metadata attributes from an object, returning them as a map.
5969	SetRule compiles a regular expression from the given string and assigns it to the Exception's Rule field, returning an error if compilation fails.
5970	SetObject compiles a case-insensitive regular expression from the given string and assigns it to the Exception's Object field, returning an error if compilation fails.
5971	SetNline assigns a new line number to the exception and returns nil.
5972	SetContent compiles a regular expression from the input string and assigns it to the Content field of the Exception object, returning an error if compilation fails.
5973	Run checks if exception rules match secret properties and returns result
5974	AddRule enables a rule if specified and appends it to the rule list.
5975	LoadRulesFromFile reads rules from a YAML file, creates Rule objects, and adds them to Seekret with optional default enabled status.
5976	LoadRulesFromDir reads rules files from a directory and loads them, returning an error if any file is invalid or not found.
5977	DefaultRulesPath retrieves the environment variable SEEKRET_RULES_PATH, defaults to defaultRulesDir if unset.
5978	EnableRule toggles a rule named `name` in the `Seekret` instance's rule list to enabled, returning an error if unsuccessful.
5979	DisableRule updates rule status by name and returns error if failed
5980	EnableRuleByRegexp sets rule enabled by regexp in Seekret.
5981	DisableRuleByRegexp disables a rule using a regular expression and returns the count of affected rules.
5982	LoadObjects loads objects from a source, appends them to the receiver's list, and returns an error if loading fails.
5983	GroupObjectsByMetadata groups objects by metadata key and returns a map of keys to object lists
5984	GroupObjectsByPrimaryKeyHash groups objects in Seekret by primary key hash and returns a map.
5985	AddException appends an exception to the Seekret's exception list
5986	LoadExceptionsFromFile reads exceptions from a YAML file, unmarshals them, sets rules and properties, and adds them to a Seekret instance.
5987	printPlainResults outputs plain results from a given structure, including fields and errors.
5988	printJsonResults converts results to indented JSON and prints it to stdout, returning an error if either conversion or writing fails.
5989	NewXor64Source creates and configures a new Xor64Source instance with the given seed.
5990	xor64 applies bitwise XOR operations with shifted versions of itself and returns the result
5991	Xor64Source generates and returns the next 64-bit unsigned integer using the XOR operation.
5992	Seed updates Xor64Source instance with given seed or default seed0 if zero.
5993	NewFrameSet creates a FrameSet object from a frame range string, processes matches, and returns an error if any issues occur.
5994	handleMatch processes a frame range based on the number of matches, appending unique frames to a range pointer.
5995	Index method retrieves frame position using rangePtr.
5996	Frame retrieves the value at a specified index from a FrameSet's range and returns it along with an error.
5997	HasFrame checks if a frame exists within a FrameSet's range.
5998	PadFrameRange will return a padded frame range string
5999	Normalize will adjust the FrameSet's range pointer and return a new FrameSet with the normalized range.
6000	FramesToFrameRange converts a list of frames to a compact string representation with optional zero-padding and step sizes.
6001	frameRangeMatches will return parsed frame ranges and an error if any part is invalid
6002	toRange generates a sequence of integers from start to end with a given step.
6003	NewWorkManager creates and configures a workManager instance based on Options, setting up channels and file options accordingly.
6004	processSources reads directory and sequence inputs, identifies valid file sequences, and outputs them
6005	isInputDone checks if both directories and sequences are empty, returning true if they are.
6006	closeInputs closes channels if they are not nil
6007	load sends paths to respective channels based on their type
6008	loadRecursive traverses directories recursively, skipping hidden ones and sending paths to channels for further processing.
6009	preparePaths filters unique directories and file sequences from input paths, skipping existing files and reporting errors for non-existent patterns.
6010	PadFrameRange pads frame ranges with zeros based on the given padding value.
6011	zfillString pads a string with zeros to a specified minimum length, preserving the sign.
6012	zfillInt pads an integer with zeros to a specified width
6013	NewInclusiveRange creates an InclusiveRange object with specified start, end, and step values, adjusting step to ensure valid iteration direction.
6014	InclusiveRange String() converts range to string representation including start, end, and step if different from default.
6015	End calculates the end value of an inclusive range, considering caching, stepping direction, and adjusting based on start and end values.
6016	Len calculates and caches the length of the inclusive range based on start, end, and step values.
6017	Min will return the lower bound of the inclusive range
6018	Max returns the greater of two integers, Start and End, in InclusiveRange.
6019	Contains checks if a value falls within an inclusive range based on closestInRange calculation.
6020	closestInRange will find the closest value within a given inclusive range with optional stepping
6021	Index calculates the index of a value within a range, returning -1 if outside, otherwise the adjusted index.
6022	Stringer implementation for InclusiveRanges, concatenating block strings with commas.
6023	InclusiveRanges Len calculates total length of all blocks
6024	Start will return the starting index of the first block in InclusiveRanges, or 0 if there are no blocks.
6025	End will return the end of the last block or 0 if blocks are nil
6026	Min returns the smallest start value among all blocks in InclusiveRanges.
6027	Max will return the maximum value among all ranges in InclusiveRanges.
6028	numRanges returns the count of blocks in InclusiveRanges
6029	rangeAt retrieves an inclusive range by index, returning nil if out of bounds.
6030	Append a new inclusive range to the blocks list
6031	AppendUnique adds unique values to InclusiveRanges based on start, end, and step.
6032	Contains checks if a value falls within any block in InclusiveRanges and returns true if it does, otherwise false
6033	Index will find the position of a value in inclusive ranges and return the global index or -1 if not found
6034	FrameRange retrieves frame range from file sequence.
6035	FrameRangePadded returns padded frame range string based on zfill setting
6036	FileSequence's Index retrieves frame path by idx, returning empty if errors occur.
6037	SetDirname updates the directory path of a file sequence, appending a separator if missing.
6038	SetPadding updates padding characters and calculates zero-fill size
6039	SetPaddingStyle updates padding style and applies it to sequence.
6040	SetExt updates file extension with a leading dot if missing
6041	SetFrameRange updates file sequence's frame range with given string, returning error if invalid.
6042	FileSequence Len returns count of frames or 1 if frameSet is nil
6043	FileSequence's String method constructs and returns a formatted string representation combining directory, basename, frame set, padding char, and extension.
6044	Copy creates a new FileSequence instance from the current sequence.
6045	NewClient creates a new client with specified URL, TLS setting, and headers.
6046	UnmarshalXML decodes XML data into a Header's Content field, handling nested elements and returning an error if parsing fails.
6047	UnmarshalXML decodes XML content into a Body struct, handling faults and nested elements.
6048	Call sends a SOAP request using the provided parameters and populates the response object, handling errors and faults appropriately.
6049	JSONDoc loads JSON data from a file or URL and returns it as a RawMessage.
6050	AddLoader adds a loader to the list with a given predicate and function.
6051	JSONSpec reads a JSON file, converts it to an analyzed document, and returns it along with any errors encountered.
6052	Embedded converts JSON raw messages to Swagger specifications and returns a Document object.
6053	Spec parses a spec file URL, loads content using loaders, analyzes it, and returns a Document object or an error.
6054	Analyzed processes JSON data, converts YAML to JSON if necessary, unmarshals it into a Swagger spec, clones the spec, and returns a Document object.
6055	Expanded will return an expanded Document object and an error if expansion fails
6056	ResetDefinitions resets document definitions and returns the updated document.
6057	Pristine returns a new Document instance after analyzing the raw content with the specified version.
6058	OpenDb opens a GeoIP database file and returns a pointer to the GeoIP structure along with an error if the operation fails.
6059	GetOrg retrieves organization name from IP address using GetName method.
6060	GetRegion retrieves the country and region codes for a given IP address using the GeoIP database.
6061	GetRegionName converts country and region codes to a region name using C library functions.
6062	GetCountry retrieves country code and netmask for given IP address using GeoIP database.
6063	NewRotatingFileHandler creates a rotating file handler with specified parameters, opens the file, and initializes handler properties.
6064	RotatingFileHandler Close will close file descriptor if not nil and return error
6065	Level.String converts log level to corresponding string representation.
6066	New creates a logger instance with specified handler, level, and flags, initializing a buffer pool.
6067	Logger Close releases handler lock and closes handler
6068	Set logger level by name, default to Info
6069	Logger outputs formatted log message based on specified flags and level.
6070	Logger outputs JSON log message based on specified level and flags.
6071	Logger's Print method outputs trace-level logs with variable arguments.
6072	Logger's Println outputs a trace-level log message with given arguments.
6073	Logger.Debug outputs debug level log message
6074	Logger's Debugln logs debug messages with a newline.
6075	Logger's Error method logs error level messages with variable arguments.
6076	Logger's Errorln appends error level message with newline
6077	Logger's Info method outputs info level log with given arguments.
6078	Logger logs info messages with formatted arguments.
6079	Logger Warn outputs warning level message with arguments.
6080	Warnln logs a warning message with optional arguments.
6081	NewStreamHandler creates a StreamHandler instance initialized with the given writer.
6082	Right pads a string with another string to a specified length.
6083	New creates an API instance with given host and authenticator, sets metadata generator, and returns it.
6084	setupMetadata aggregates metadata resources from different sources, removes specified prefixes from path patterns, and returns a combined map
6085	recordTypes analyzes data types recursively, storing unique object types and their fields.
6086	appendSorted adds a parameter to a list and sorts it alphabetically by name
6087	parseDataType analyzes param data type based on class and constructs corresponding gen.DataType object
6088	parseParam analyzes path and param to create a new ActionParam with determined data type
6089	newParam creates a new ActionParam from a given path, parameter map, and data type, setting various properties based on the input and updating leaf parameters list if applicable.
6090	toGoReturnTypeName appends a pointer to the Go type name based on whether it's a slice
6091	toGoTypeName converts a given name to its corresponding Go type name, handling special cases and splitting names containing "::".
6092	prettify converts an interface{} to a formatted JSON string, using indentation for readability, or falls back to a simple string representation if serialization fails.
6093	isBuiltInType checks if a given name is a built-in type and returns true if it is.
6094	MatchHref checks if a given href matches any path patterns exactly.
6095	Substitute replaces placeholders in path pattern with variable values, returning resulting string and list of used variables or empty list if none are missing.
6096	MarshalJSON reads file content and returns JSON-encoded data
6097	writeMultipartParams recursively writes fields from a nested map to a multipart writer with optional prefixing.
6098	PerformRequest sends HTTP request, applies authentication, and returns response or error.
6099	PerformRequestWithContext sends HTTP request with context, signs it if Auth is present, and returns response or error.
6100	LoadResponse reads HTTP response, parses JSON, handles Location header, and returns parsed data or error.
6101	API schedules locator with href and returns it
6102	TemplateLocator creates a new instance with Href set to href and API reference.
6103	fetchDetails populates sshConfig with SSHConfig structs containing environment details and IP addresses
6104	buildAliases constructs SSH aliases based on config and options
6105	serverArray retrieves instances of a specific server array by name, returning an error if not found or ambiguous.
6106	server retrieves a specific instance by name from the CM15 API and returns it, failing if not found or ambiguous.
6107	toPackageName converts a version string to a package name by replacing dots with underscores and removing trailing zeros.
6108	loadFile reads a file and returns its contents as bytes or an error if the file cannot be found or read.
6109	main handles command-line arguments, executes commands, and outputs results based on HTTP responses.
6110	runCommand executes a command using a client, showing help or API actions based on flags, and returns the response or error.
6111	CreateJSONResponse removes BOM from byte slice and returns HTTP response with status 200 and body containing trimmed data
6112	AccountLocator creates a new instance of AccountLocator with the given href and API reference.
6113	AccountGroupLocator constructs a locator for an account group using the given href and API instance.
6114	AlertLocator creates a new instance with href and API reference.
6115	AlertSpecLocator constructs a new locator with the given href and API reference.
6116	API's AuditEntryLocator method creates and returns a new AuditEntryLocator instance with the provided href and API reference.
6117	BackupLocator creates a new instance with Href and API references.
6118	ChildAccountLocator creates a new instance with the provided href and API reference.
6119	CloudLocator creates a new instance with the provided href and API reference.
6120	CloudAccountLocator constructs a new locator for a cloud account using the given href and API instance.
6121	CookbookLocator constructs a new locator with the given href and API reference.
6122	CookbookAttachmentLocator constructs a locator with a href and API reference.
6123	CredentialLocator constructs a new locator with the given href and API instance.
6124	DatacenterLocator creates a new instance with Href and API reference.
6125	DeploymentLocator constructs a locator for a deployment using the given href and API instance.
6126	HealthCheckLocator constructs a new instance with the given href and API reference.
6127	IdentityProviderLocator creates a new instance with Href and API references.
6128	ImageLocator constructs an ImageLocator instance with Href and API references.
6129	InputLocator creates an InputLocator instance with the given href and API reference.
6130	InstanceLocator creates a new instance with Href and API reference
6131	InstanceTypeLocator will create and return a new instance with the given href and API reference
6132	IPAddressLocator creates a new instance with the given href and API reference.
6133	IPAddressBindingLocator creates an instance with Href and API reference.
6134	MonitoringMetricLocator constructs a new instance with href and API reference.
6135	MultiCloudImageLocator creates a new instance with the given href and API reference.
6136	MultiCloudImageMatcherLocator creates a new instance with Href and API reference.
6137	MultiCloudImageSettingLocator creates a new instance with Href and API reference.
6138	NetworkLocator constructs a new NetworkLocator instance with the provided href and API reference.
6139	NetworkGatewayLocator creates a new instance with Href and API references.
6140	NetworkOptionGroupLocator constructs a new locator with the given href and API reference.
6141	NetworkOptionGroupAttachmentLocator constructs a locator object with href and API reference.
6142	Oauth2Locator creates a new instance with Href and API references.
6143	PermissionLocator creates a new instance with Href and API references.
6144	PlacementGroupLocator constructs a locator object with a given href and API instance.
6145	PreferenceLocator constructs a locator with href and API reference
6146	PublicationLocator creates a new locator with href and API reference.
6147	PublicationLineageLocator creates a new locator with the given href and API instance.
6148	RecurringVolumeAttachmentLocator constructs a new locator using href and API instance
6149	RepositoryLocator constructs a locator object from a URL and API instance.
6150	RepositoryAssetLocator constructs a new instance with Href and API references.
6151	ResourceGroupLocator constructs a new locator with the given href and API reference.
6152	RightScriptLocator constructs a new instance with Href and API references.
6153	RightScriptAttachmentLocator constructs a new instance with the provided href and API reference.
6154	RouteLocator creates a new instance with Href and API references.
6155	RouteTableLocator constructs a new instance with API reference and href value.
6156	RunnableBindingLocator creates a new instance with Href and API.
6157	SchedulerLocator creates a new instance with Href and API references.
6158	SecurityGroupLocator constructs a new locator for the given href and API instance.
6159	SecurityGroupRuleLocator constructs a locator object with href and API reference.
6160	ServerLocator creates a new instance with Href and API references.
6161	ServerArrayLocator creates a new instance with Href and API reference.
6162	ServerTemplateLocator creates a new locator with href and API reference.
6163	ServerTemplateMultiCloudImageLocator constructs a locator object with href and API reference.
6164	SessionLocator creates a new locator with the given href and API reference.
6165	SshKeyLocator creates and returns a new instance with Href and API references.
6166	SubnetLocator creates a new instance with Href and API references.
6167	API's TagLocator method returns a new TagLocator instance with Href set to the input href and API reference.
6168	TaskLocator creates a new instance with the given href and API reference.
6169	UserLocator creates a new UserLocator instance with the given href and API reference.
6170	UserDataLocator constructs a new locator with the given href and API instance.
6171	VolumeLocator constructs a new locator for the given href and API instance.
6172	VolumeAttachmentLocator constructs a locator object with a href and API reference.
6173	API's VolumeSnapshotLocator method returns a pointer to a VolumeSnapshotLocator struct containing the href and API instance.
6174	VolumeTypeLocator creates a new locator with the given href and API instance.
6175	RegisterCommands registers action commands using a registrar.
6176	ShowCommandHelp will display help for a given command using specific parameters and return an error if unsuccessful
6177	ShowAPIActions invokes ShowActions with specific parameters.
6178	ShowHelp displays help for a command, including usage and flag details.
6179	API.ParseCommandAndFlags parses command and flags, extracts resource, action, and path, and returns CommandTarget and params or error.
6180	validateFlagValue checks if the flag value matches the specified regex, is non-blank, or is among the allowed values, returning an error if validation fails
6181	buildQuery combines multiple APIParams into a single one, merging values with the same key into slices.
6182	buildPayload combines multiple API parameters into a single payload, normalizing each parameter and returning an error if normalization fails.
6183	shortenPattern removes a suffix from a pattern if it matches any path pattern in resource actions, returning the shortened pattern and a flag indicating if a match was found
6184	cleanDescription removes unnecessary parts and blank lines from a document
6185	fileExists checks if a file exists and returns true if it does.
6186	AnalysisSnapshotLocator creates an instance with Href and API reference.
6187	BudgetAlertLocator constructs a new instance with Href and API reference
6188	CloudBillLocator creates a new instance with Href and API reference.
6189	CloudBillMetricLocator constructs a new instance with href and API reference.
6190	api.CurrentUserLocator creates a new CurrentUserLocator instance with the given href and API reference.
6191	InstanceCombinationLocator will create and return a new instance with Href and API properties.
6192	InstanceMetricLocator constructs a new locator using the provided href and API instance.
6193	InstanceUsagePeriodLocator constructor creates an instance with Href and API references
6194	PatternLocator creates a new instance encapsulating href and API reference.
6195	ReservedInstanceLocator creates a new locator with the given href and API reference.
6196	ReservedInstancePurchaseLocator creates a locator for a reserved instance purchase using API and href.
6197	ScenarioLocator creates a new instance encapsulating href and API reference.
6198	ScheduledReportLocator constructs a new instance with the given href and API reference.
6199	TempInstancePriceLocator creates a new instance with API and href.
6200	API's UserSettingLocator method creates and returns a new UserSettingLocator instance with the given href and API reference.
6201	readAllAsync reads a file asynchronously, returning a pointer to a byte slice and a channel signaling completion.
6202	extractArg will find the value of an argument named `name` in a list of arguments `args`, returning the value and the remaining arguments.
6203	write appends byte slice to output file and closes it
6204	AppliedPolicyLocator constructs a new instance with the given href and API reference.
6205	ApprovalLocator constructs an instance with href and API reference.
6206	IncidentLocator creates a new instance with Href and API reference.
6207	PolicyTemplateLocator creates a locator object with href and API reference.
6208	PublishedTemplateLocator constructs a locator with the given href and API instance.
6209	DebugCookbookPathLocator constructs a new instance with href and API reference.
6210	DockerControlLocator creates a new instance with Href and API references.
6211	EnvLocator creates a new EnvLocator instance with Href set to href and API set to api
6212	LoginControlLocator creates a new instance with href and API reference.
6213	ProcLocator creates a new instance with Href and API reference.
6214	Rl10Locator creates a new instance with the given href and API reference.
6215	TSSLocator constructs a new TSSLocator instance with the given href and API reference.
6216	TSSControlLocator constructs a new instance with the provided href and API reference.
6217	TSSPluginLocator creates a new instance with the given href and API reference.
6218	NewAngularWriter creates a new AngularWriter instance with a template containing custom functions.
6219	angularTmpl executes resource on writer
6220	path constructs a URL path by replacing placeholders with variable names.
6221	mandatory checks if a parameter is mandatory in a given action and panics if the parameter is unknown
6222	New creates a new API instance with the given host and authenticator, sets the host for the authenticator if provided, and returns the API object.
6223	FromCommandLine creates an API client based on command-line arguments, handles authentication, and configures HTTP client options.
6224	CanAuthenticate checks authentication and returns result.
6225	Encrypt converts plaintext to ciphertext using AES encryption and CFB mode, returning the encrypted string and an error if failed.
6226	Decrypt will return the decrypted string and an error if decryption fails
6227	guessType infers the type based on API overrides or media type attributes, appending view information when available
6228	addType updates APIAnalyzer with new object data type, resolving collisions and warnings accordingly
6229	extractCmdLineParams extracts command line parameters based on data types, handling arrays and objects recursively.
6230	NewMetadataWriter creates a MetadataWriter instance with parsed templates and functions for metadata processing.
6231	MetadataWriter executes header template with package name and writer.
6232	WriteMetadata populates metadata resources and executes template on writer
6233	location will return metadata path query or payload based on ActionParam Location
6234	New creates a new API instance using the provided host and authenticator.
6235	fromAPI converts API object to internal API with generated metadata
6236	BuildRequest constructs a request using resource, action, href, and params, returning an HTTP request and error if any.
6237	setupMetadata creates a map of metadata resources from GenMetadata.
6238	NewDisplayer reads HTTP response, closes body, parses JSON if possible, and returns Displayer object.
6239	ApplySingleExtract applies a JSON selector, checks output count, and sets RawOutput accordingly.
6240	ApplyExtract uses a JSON parser to extract values based on a selector and formats them according to the js flag.
6241	ApplyHeaderExtract extracts a header from response and sets it to RawOutput, returning an error if the header is missing.
6242	Output will return the raw output as a string, optionally pretty-printed in JSON format with an error message if serialization fails
6243	NewAPIAnalyzer creates an APIAnalyzer instance with given resources and attribute types.
6244	Analyze API resources, build descriptor, finalize types.
6245	APIAnalyzer.AnalyzeAliases updates parameters, status_code, and access_rules from aliased actions to their targets.
6246	LocatorFunc checks if "Links" attribute exists and returns a locator string if found.
6247	ParseRoute processes routes based on moniker, extracting HTTP methods and patterns, and returns them as PathPattern objects.
6248	isDeprecated checks if a path contains "/api/session" without "/api/sessions".
6249	isQueryParam checks if a query parameter is valid based on specific conditions
6250	isPathParam checks if a parameter matches any variable in given path patterns
6251	fetchAuditEntries retrieves audit entries for a specific user based on email, returning them and any errors encountered.
6252	formatTime converts a time.Time object to a formatted string in UTC timezone
6253	printAudits outputs formatted audit logs from entries
6254	extractUnique filters out duplicate AuditEntry objects based on href, returning only unique entries from newEntries.
6255	getHref retrieves the self-link URL from an AuditEntry.
6256	fail prints a formatted message and exits the program with status 1
6257	parameters constructs a string representation of mandatory and optional parameters for an action.
6258	paramsInitializer constructs API parameters based on action details, handling mandatory and optional fields, and formatting them accordingly.
6259	commandLine constructs a command string from os.Args and returns it
6260	toVerb converts the first letter of the input string to uppercase and the rest to lowercase, appending "Raw" if the input is "GET" or "POST".
6261	escapeBackticks replaces backticks in a string with escaped backticks
6262	AccountPreferenceLocator constructs a new locator with href and API reference.
6263	ApplicationLocator creates a new locator for the given href and API instance.
6264	EndUserLocator creates a new instance with Href and API references.
6265	NotificationRuleLocator creates a new locator object with the given href and API instance.
6266	UserPreferenceLocator creates a locator object with href and API reference.
6267	API's UserPreferenceInfoLocator method returns a pointer to a UserPreferenceInfoLocator struct initialized with the href and API instance.
6268	LoadConfig reads a JSON file, decrypts sensitive fields, and returns the configuration or an error.
6269	CreateConfig reads user input to update or create a configuration file, saving changes or exiting based on user confirmation.
6270	fromAPI sets defaults for API fields and returns a new API instance
6271	HostFromLogin infers a policy host based on the input host string by modifying the domain elements.
6272	AnalyzeParam generates an ActionParam based on parameter details, including name, description, type, and validation rules.
6273	AnalyzeAttribute extracts attribute details from a map and constructs an ActionParam object with relevant information.
6274	AnalyzeType will return a data type and an error based on the type definition and query provided
6275	CreateType generates a structured object from a query and attributes, returning a parsed data type and error if any attribute computation fails.
6276	Ref function retrieves definition based on reference key in Doc object
6277	Ref.Type returns the type of reference, either "object" or a string value, or an empty string if neither condition is met
6278	Required method extracts required strings from map key "required" if present.
6279	ID extracts and cleans reference ID from map key "$ref".
6280	Service method returns the first tag or operation ID without fragment, or empty string if none available.
6281	Method extracts operation ID after "#" if present.
6282	NewTypeRegistry creates and returns a new TypeRegistry instance with initialized maps for named and inline types.
6283	GetNamedType retrieves a named type from the registry using a Go-compatible name conversion.
6284	CreateNamedType registers a new named type in the registry and returns it, panicking if the name already exists.
6285	CreateInlineType registers a new inline type with the given name and returns its Go object data type.
6286	FinalizeTypeNames updates registry and descriptor with inline types.
6287	Merge two APIDescriptors, updating types and resources while handling version conflicts and duplicate resource names.
6288	FinalizeTypeNames sorts and renames conflicting data type names, ensures uniqueness, and initializes resource and type name lists.
6289	uniqueTypeName generates a unique type name by appending a numeric suffix to a given prefix, ensuring it does not conflict with existing type names in the descriptor.
6290	MandatoryParams filters and returns mandatory ActionParams from an Action.
6291	HasOptionalParams checks if action has any non-mandatory parameters and returns true if found.
6292	MakeUniq generates a unique string by appending an incrementing index to the base string until it finds a name not in use.
6293	NewClientWriter creates a ClientWriter instance with parsed templates and returns an error if parsing fails.
6294	WriteHeader renders a header template with package, version, time, and JSON flags to the given writer.
6295	WriteResourceHeader outputs a header with resource name to writer
6296	WriteType generates Go struct declaration for object data type and writes it to writer
6297	WriteResource executes a template with a resource object and writes to a writer.
6298	WithTrail adds a trail entry to evaluation context and returns updated context
6299	AnalyzeEndpoint processes API endpoint details, constructs resource and action objects, analyzes responses and parameters, and sets return type and location.
6300	API's NetworkInterfaceLocator method returns a pointer to a NetworkInterfaceLocator struct containing the Href and API instance.
6301	NetworkInterfaceAttachmentLocator constructs a new locator with the given href and API reference.
6302	UnmarshalJSON parses JSON timestamp into RubyTime object.
6303	ExecutionLocator creates a new instance with Href and API references.
6304	NotificationLocator creates a new instance with href and API reference
6305	OperationLocator creates a new instance with href and API reference.
6306	ScheduledActionLocator creates a locator object with Href and API references.
6307	NewBasicAuthenticator creates an authenticator using username, password, and accountID.
6308	NewSSAuthenticator wraps an authenticator with SSAuthenticator if not already wrapped, setting account ID and refresh time.
6309	newCookieSigner creates a new cookie signer with given builder, account ID, and sets refresh time.
6310	Sign updates request with cookies and account info, refreshing auth if needed.
6311	CanAuthenticate checks if authentication can be performed for a given host using the signer's builder and client.
6312	refresh updates cookies and sets expiration if response status is 204, otherwise returns an error
6313	Sign adds authorization headers to HTTP request.
6314	Sign method sets X-RLL-Secret header in HTTP request and returns nil
6315	Sign method refreshes session if needed, authenticates request, sets headers, and updates host.
6316	SetHost updates the host URL by modifying the host prefix based on certain conditions and constructs the final host string.
6317	CanAuthenticate sends a GET request to authenticate, handles errors, and verifies a successful response.
6318	extractRedirectURL extracts URL from response if status is redirect and Location header is valid.
6319	buildURL constructs a URL using the given host and path, defaulting to HTTPS unless Insecure flag is set, then returns the full URL string.
6320	GetAction searches for an action by name in Resource and returns it if found.
6321	HasLink checks if a resource has a specific link by name.
6322	findMatches searches resource actions for path patterns matching href and returns them.
6323	NewPB creates an HTTPClient using settings from ParamBlock, applying defaults where necessary and copying data to prevent side effects.
6324	newVariableDumpClient creates an HTTPClient that dumps variables with specified settings.
6325	newRawClient configures and returns an HTTP client with specified options.
6326	DoHidden sends a hidden HTTP request using dumpClient and returns the response or an error.
6327	dumpClient's Do method forwards the request to doImp with additional parameters.
6328	doImp handles HTTP requests, sets headers, logs details, and dumps request/response based on context and configuration.
6329	getClientWithoutTimeout creates a copy of the client without timeout settings for thread safety.
6330	dumpRequest handles HTTP requests, logs details based on dump format, and returns request body in JSON format if specified.
6331	writeHeaders appends formatted headers to a buffer based on dump format and hidden headers
6332	copyHiddenHeaders duplicates a map of hidden headers from one map to another.
6333	validateCommandLine checks command options and requires specific flags for setup, actions, json, or authentication details.
6334	APIClient creates a command client based on the given name and command line arguments, returning an error if the name is unknown.
6335	RegisterClientCommands registers commands for different APIs using kingpin application.
6336	Interactive sets up logger to output errors to stderr.
6337	toPattern generates a PathPattern object from HTTP method and path, replacing variables with placeholders and creating a regular expression for matching.
6338	WithClientIP adds an IP address to the context if provided.
6339	ClientIP extracts IP address from context.
6340	NewProducer creates a new producer instance with default configurations and returns it along with any errors encountered during initialization.
6341	StartProducer creates a producer instance using given config and starts it, returning the producer and any errors encountered.
6342	Producer starts processing requests concurrently, panics if already started.
6343	Stop the producer, signal all requests, wait for completion.
6344	Publish message to topic and return error
6345	PublishTo sends a message to a specified topic and handles errors if the producer is stopped or if no topic is set.
6346	NewLocalEngine creates a new local engine instance with default timeouts if not specified, initializes channels, and starts a goroutine to run the engine.
6347	validate checks if Topic and Channel are non-empty strings, returning an error if either is empty
6348	set default values for consumer configuration fields
6349	NewConsumer creates a new consumer instance with validated configuration and default settings.
6350	StartConsumer creates a consumer with given config, starts it, and returns.
6351	Consumer starts running asynchronously if not already started.
6352	RateLimit filters messages based on a rate limit, allowing up to `limit` messages per second.
6353	writeResponse will write a raw response to a buffer and return an error if failed
6354	ReadResponse reads a response from a reader, parses its size, and returns either an OK response, an error, or a raw response based on the content.
6355	backoff calculates exponential backoff duration with jitter based on attempt count and time limits
6356	FrameType.String converts enum to human-readable string
6357	NewConsulEngine initializes a ConsulEngine instance with default values if necessary, sets up the HTTP client, and configures various timeouts and addresses.
6358	ParseMessageID converts a hex string to a MessageID.
6359	WriteTo converts MessageID to a 16-byte hex string and writes it to an io.Writer, returning the number of bytes written and an error if any occurred.
6360	NewMessage constructs a new message with ID, body, and command channel.
6361	`Finish` marks message completion, panics if called twice, recovers from async close, sends finish command, sets cmdChan to nil.
6362	Requeue will send a requeue request if the message is not complete and handle asynchronous connection closure
6363	ReadCommand reads a command from a reader, parses it, and returns the corresponding Command object along with any errors encountered.
6364	funcMapMaker constructs a template FuncMap combining default and custom functions based on request and writer.
6365	Funcs updates the function map of a template and returns the modified template.
6366	Execute template and write result to response with content-type set to text/html if not already specified
6367	RegisterPath checks if a path exists, adds it if unique, and returns an error if not found.
6368	AssetFileSystem reads file content by checking paths, returning bytes or error if not found.
6369	Glob searches for files matching a pattern across multiple paths, returning trimmed results and an error if any path is inaccessible.
6370	AssetFileSystem creates or retrieves a namespaced file system interface.
6371	New creates a Render instance with default configuration and registered view paths.
6372	RegisterViewPath adds view paths and registers them in AssetFileSystem, resolving absolute or relative paths.
6373	SetAssetFS registers asset paths and sets the asset file system for rendering.
6374	Layout creates a Template instance with specified name and current Render object.
6375	Funcs updates the template with a custom function map and returns the modified template.
6376	Execute template with given name, context, request, and writer.
6377	RegisterFuncMap adds a function to the render's FuncMap under a specified name.
6378	Asset retrieves a file from the asset file system based on the given name and returns its contents as bytes along with any errors encountered.
6379	NewPlainClient creates a plain client with identity, username, and password.
6380	Create will initialize a new uploader with given URL, headers, and config, returning a writer-closer and an error if config is invalid.
6381	Open sends a GET request to the specified URL with authentication and returns the response body or an error.
6382	Sign applies default service signing to HTTP request using keys.
6383	Sign sets AWS Authorization header using request data, keys, and HMAC-SHA1 signature.
6384	Readdir reads up to n entries from directory and returns them along with an error if any.
6385	Find searches a tree for nodes matching a given path expression, returning all matching nodes.
6386	Lex converts an XPath string into a channel of lexical items.
6387	MustParseXML reads XML from reader, parses it, and panics if an error occurs, returning the parsed tree node.
6388	ParseXML reads XML data from a reader, applies settings, and constructs a tree structure representing the XML document.
6389	Wrap.Call validates argument count based on LastArgOpt and invokes Fn if valid, otherwise returns an error.
6390	Parse converts an XPath string into an executable XPath expression and returns an error if parsing fails.
6391	MustParse will execute a given XPath expression and panic if there is an error during parsing.
6392	XPathExec will execute an XPath expression on a given node and options, returning the result and any errors encountered
6393	ExecBool evaluates an XPath expression and returns a boolean result, or an error if the result cannot be converted.
6394	XPathExec.ExecNum executes an XPath expression on a node and returns the numeric result or an error if the result is not a number.
6395	XPathExec.ExecNode executes an XPath expression on a node, returning a node-set or an error if conversion fails.
6396	MustExec executes XPath query on tree node, panics on error, returns result
6397	ParseExec will execute parsed expression on given tree node with options returning execution result and error if failed
6398	CreateNode adds a child node based on options and returns the new node or the parent.
6399	GetChildren returns all children nodes of XML element
6400	GetAttrs retrieves and returns all attributes of an XML element as tree nodes.
6401	ResValue concatenates recursive child values into a single string.
6402	Parse converts a string into a syntax tree node and returns an error if parsing fails
6403	XMLNode.GetToken returns token based on node type
6404	XMLNode.ResValue retrieves the value based on node type: attribute, child data, comment, or processing instruction instance.
6405	Exec evaluates a node using filters and returns a result or an error.
6406	Num's String method returns "Infinity" for infinite values, "-Infinity" for negative infinity, and the numeric value formatted otherwise.
6407	Num converts a string to a floating-point number, returning NaN if conversion fails.
6408	BuildNS constructs XML namespace declarations from an element, returning sorted NS objects with positions.
6409	GetAttribute retrieves an XML attribute based on local and namespace, returning the attribute and a boolean indicating success.
6410	GetAttributeVal retrieves attribute value from element and returns it along with existence flag.
6411	GetAttrValOrEmpty retrieves attribute value or empty string if not found.
6412	FindNodeByPos searches for a node at a given position recursively within a tree structure, returning the matching node or nil if not found.
6413	Marshal serializes a tree node to an IO writer and returns an error if serialization fails
6414	MarshalStr converts a tree node to a JSON string and returns it along with any errors encountered.
6415	NewLexer creates a Lexer instance with a reader, tokenizer, and options for POSIX mode and whitespace splitting.
6416	NewLexerString creates a Lexer for a string with specified options.
6417	Split splits a string using a lexer based on POSIX rules and returns the resulting substrings along with any errors encountered.
6418	Register method locks registry, checks for errors, prevents duplicates, marks error as registered, and stores it by code.
6419	Get retrieves an ErrDescriptor by code from a registry safely.
6420	GetAll retrieves all ErrDescriptors from the registry.
6421	From converts an error to a custom Error type, or falls back to GRPC conversion if necessary.
6422	Descriptor converts an error to a structured ErrDescriptor with sensible defaults if no specific descriptor is found.
6423	GetAttributes extracts attributes from an error if possible, otherwise returns empty attributes.
6424	HTTPStatusCode maps custom error types to HTTP status codes
6425	HTTPStatusCode extracts an HTTP status code from an error, defaulting to 500 if not applicable.
6426	HTTPStatusToType converts an HTTP status code to a corresponding error type
6427	ToHTTP sets response headers and encodes error information as JSON.
6428	toImpl converts an Error to an *impl, copying fields if already an *impl
6429	MetadataFromIncomingContext extracts and returns metadata from the incoming context.
6430	MetadataFromOutgoingContext extracts and returns metadata from an outgoing context.
6431	TokenFromMetadata extracts the first token from metadata, returning an error if none is found.
6432	TokenFromIncomingContext retrieves token from metadata extracted from incoming context.
6433	OutgoingContextWithToken adds a token to the context metadata.
6434	KeyFromMetadata extracts a single key from metadata, returning an error if none exists or is empty.
6435	KeyFromIncomingContext retrieves metadata from context and extracts key.
6436	OutgoingContextWithKey adds a key-value pair to a context using metadata.
6437	IDFromMetadata extracts an ID from metadata, returning an error if absent.
6438	IDFromIncomingContext retrieves metadata from a context and extracts an ID from it.
6439	OutgoingContextWithID adds an "id" metadata to the given context.
6440	ServiceInfoFromMetadata extracts service name, version, and address from metadata, returning them along with an error if any key is missing.
6441	ServiceInfoFromIncomingContext extracts service info from metadata in incoming context.
6442	OutgoingContextWithServiceInfo adds service info to context
6443	LimitFromMetadata retrieves a limit value from metadata, returning it as a uint64 and an error if not found or invalid.
6444	OffsetFromMetadata extracts offset from metadata and converts it to uint64, returning error if missing or invalid.
6445	LimitAndOffsetFromIncomingContext extracts limit and offset from context metadata, returning them along with any errors encountered.
6446	OutgoingContextWithLimitAndOffset modifies a context by adding optional limit and offset parameters as metadata, returning the updated context.
6447	before compares two schedule items and returns true if the first ends before the second starts
6448	New creates a new error instance with formatted message and attributes.
6449	WithNamespace adds a namespace field to the given logging context.
6450	Wrap logs messages with namespaces
6451	WithField updates a Namespaced object with a field, returning a new Namespaced or modifying the existing one based on the key.
6452	WithFields adds fields to a logger interface while preserving namespace information.
6453	Format will return a formatted string based on the given format and values, or the original format if there are errors
6454	fix converts various types to their string representation, dereferencing pointers recursively
6455	GRPCCode maps a Type to a corresponding gRPC status code
6456	GRPCCodeToType converts gRPC status codes to custom types.
6457	GRPCCode converts an error to a gRPC status code
6458	FromGRPC converts gRPC error to custom Error type, extracting message, code, and attributes.
6459	ToGRPC converts an error to gRPC format, preserving attributes if applicable.
6460	IsEnabled checks if a namespace is enabled based on rules and returns a boolean.
6461	Set updates the list of namespaces for an ns instance.
6462	Cause extracts the underlying error from an attribute map and returns it, creating a new error if the attribute is a string.
6463	parseCode converts a numeric string to a Code type, returning zero if conversion fails.
6464	UnaryServerInterceptor applies a conversion function to gRPC errors before returning responses.
6465	StreamServerInterceptor applies a conversion function to a gRPC stream handler.
6466	UnaryClientInterceptor applies a conversion function to gRPC unary client invocations.
6467	StreamClientInterceptor applies a conversion function to gRPC stream errors.
6468	Interceptor creates a gRPC client interceptor with retry and logging capabilities based on settings.
6469	Wrap function wraps a logger with a custom wrapper.
6470	NewCounter creates a counter with specified bucket size and retention period, initializing buckets for efficient counting over time intervals.
6471	NewRedisCounter creates a Redis-based counter with specified client, key, bucket size, and retention period.
6472	NewLimiter creates a limiter with given counter, duration, and limit.
6473	WithInsecure sets allowInsecure field to true and returns the modified TokenCredentials instance.
6474	WithTokenFunc creates a TokenCredentials instance using a tokenFunc and key.
6475	GetRequestMetadata retrieves metadata for requests, including authentication tokens, using various sources and returning them as a map.
6476	FieldsFromIncomingContext extracts log fields from context and returns them.
6477	Type's String method returns a human-readable description based on its enum value.
6478	UnmarshalText converts text to Type and updates receiver, returning error if conversion fails.
6479	fromString converts a string to a specific Type based on its value, returning an error if the string does not match any known types.
6480	Start will initiate a goroutine that logs memory usage statistics at specified intervals using provided logging context.
6481	NewSimple creates a new simple queue instance with a condition variable for synchronization.
6482	Wrap creates a Filtered instance wrapping a logger with specified filters.
6483	WithFilters appends filters to a Filtered instance and returns the updated instance.
6484	WithField adds a field to the logger with the specified key and value, applying filters before returning a new Filtered logger instance.
6485	Filtered.WithFields applies log filters to fields and returns a new filtered logger.
6486	FilterSensitive filters out sensitive keys in a map using a given list and replaces them with a specified value.
6487	SliceFilter applies a filter to elements of a slice, returning a filtered slice.
6488	MapFilter applies a filter to values in a map, returning a new map with filtered values.
6489	RestrictFilter applies a filter to a specific field name in a data structure.
6490	LowerCaseFilter applies a case-insensitive filter to keys.
6491	newBatchPoints creates a BatchPoints object from configuration, panicking if invalid.
6492	NewSinglePointWriter creates a SinglePointWriter instance with provided logger and writer.
6493	Write batch points config and point using SinglePointWriter
6494	WithScalingInterval sets scaling interval for batching writer option
6495	NewBatchingWriter creates a BatchingWriter instance with specified options and logs its configuration.
6496	BatchingWriter handles batching of points, manages concurrency, and logs errors.
6497	MustParseLevel attempts to parse a log level from a string, setting it on the wrapper or logging an error if parsing fails.
6498	New creates a Stream instance with a specified buffer size and setup function.
6499	SetLogger assigns a logger to a Stream instance while ensuring thread safety.
6500	CloseRecv closes the receive buffer of a stream and unlocks the associated mutex.
6501	Stats method retrieves sent and dropped packet counts from a Stream instance using atomic operations.
6502	Run starts a streaming process, handles errors, receives messages, sends messages, and closes the stream gracefully.
6503	ServerOptions configures gRPC server options with logging interceptors.
6504	ClientOptions configures gRPC dial options with custom unary and stream interceptors using provided logger.
6505	UnaryServerInterceptor logs RPC calls, measures duration, and handles errors.
6506	StreamServerInterceptor logs gRPC stream events, measures duration, and handles errors.
6507	UnaryClientInterceptor logs gRPC client calls, measures duration, and handles errors.
6508	StreamClientInterceptor logs RPC client streams and handles cancellation errors.
6509	defaults sets default values for Config's BufferSize and Prefix fields
6510	Flush locks handler, flushes batch asynchronously if exists, resets batch.
6511	New creates a Handler that uses color if supported by the environment.
6512	HandleLog processes log entries, formats them with colors and fields, and writes to a writer.
6513	New creates a new TTNRandom instance using the provided seed for randomness.
6514	Names extracts variable names from URI template parts.
6515	PerfDatum converts to string representation including label, value, unit, and thresholds.
6516	RenderPerfdata will concatenate performance data into a single string with a header.
6517	Exit logs a status and message before terminating the program with the given status code.
6518	NewCheckWithOptions creates a new Check instance with optional status policy settings.
6519	AddResult updates Check with a new status and message, appending to results and updating overall status if more severe.
6520	AddResultf formats a message using a status and variable arguments before adding it to the Check object.
6521	Check's String method constructs a string representation combining status, exit info, and performance data.
6522	Exitf logs formatted information, adds result, and finishes process.
6523	Criticalf logs critical messages using a formatter and exits with CRITICAL status.
6524	Unknownf logs an unknown error with a formatted message.
6525	NewDefaultStatusPolicy creates a default status policy with predefined severity levels.
6526	NewStatusPolicy creates a new status policy mapping statuses to severity levels, ensuring all default statuses are included.
6527	ParseRange will return a Range object and an error if the input string is not a valid range definition
6528	Check if a value is within a Range and return whether to alert based on configuration.
6529	CheckInt checks if an integer value falls within the Range object's bounds by converting it to float64 and calling Check.
6530	CheckUint64 converts a uint64 value to float64 and uses the Range's Check method to validate it.
6531	NewClient creates a new client with a configured HTTP transport and API URL, returning an error if the base URL is invalid.
6532	GetKeyMeta retrieves key metadata for a given path from the storage service and returns the result along with any errors encountered.
6533	GetKeysInDirMeta fetches key metadata from a specified directory path and returns a list of KeyMeta objects along with any encountered errors.
6534	getKeyContent retrieves key content from a storage path and returns it as a PGP key string, handling errors during the process.
6535	GetJobSummariesForProject retrieves job summaries for a project and returns them along with any errors encountered.
6536	GetJobsForProject fetches jobs for a project and returns details along with an error.
6537	GetJob retrieves a job detail by ID and returns it along with any errors encountered.
6538	CreateJob submits a job detail for creation and returns a job summary or an error.
6539	CreateOrUpdateJob updates or creates a job and returns a summary along with an error.
6540	DeleteJob sends a request to delete a job identified by `id` and returns an error if the operation fails.
6541	JobSummary extracts essential details from jobImportResult and returns a new JobSummary object.
6542	GetSystemInfo retrieves system info using client and returns it along with any error encountered.
6543	DateTime converts SystemTimestamp to time.Time using RFC3339 format.
6544	GetAllProjects fetches all projects from the client and returns a list of project summaries along with any errors encountered.
6545	GetProject fetches a project by name and returns it along with any errors encountered during the process.
6546	CreateProject sends a POST request to create a project and returns the created project and any errors.
6547	DeleteProject sends a delete request for a project by name.
6548	SetProjectConfig updates project configuration and returns an error
6549	NewClient creates a new client using username and password, returning a pointer to the Client struct.
6550	NewClientbyToken creates a new client using a token.
6551	SetDepth updates client depth with string representation of given integer
6552	ListDatacenters fetches datacenter information from a URL and returns it along with any errors encountered.
6553	CreateDatacenter sends a POST request to create a datacenter and returns the created datacenter object along with any errors encountered.
6554	GetDatacenter constructs a URL with depth and pretty parameters, sends a GET request, and returns a Datacenter object or an error.
6555	UpdateDataCenter sends a PATCH request to update a data center and returns the updated data center object along with an error.
6556	DeleteDatacenter sends a delete request to remove a datacenter and returns the response headers and any errors encountered.
6557	WaitTillProvisioned waits for a request to complete by polling every second, returning an error if the timeout expires.
6558	ListFirewallRules fetches firewall rules for specified IDs and returns them along with an error if any.
6559	GetFirewallRule constructs URL and fetches firewall rule using client.
6560	CreateFirewallRule sends a POST request to create a firewall rule and returns the created rule or an error.
6561	UpdateFirewallRule updates firewall rule properties and returns updated rule or error
6562	DeleteFirewallRule sends a DELETE request to remove a firewall rule and returns the response headers and any errors encountered.
6563	ListLoadbalancers fetches load balancers using a client, constructs a URL with depth and pretty parameters, sends a GET request, and returns the response or an error.
6564	GetLoadbalancer fetches a load balancer by ID and returns it along with any errors encountered.
6565	UpdateLoadbalancer updates a load balancer and returns the updated object and an error
6566	DeleteLoadbalancer deletes a load balancer and returns the response headers and error.
6567	ListBalancedNics constructs URL, sends GET request, retrieves Nics data, returns result and error
6568	AssociateNic sends a POST request to associate a NIC with a load balancer and returns the associated Nic object and an error if the request fails.
6569	GetBalancedNic constructs a URL, sends a GET request to fetch balanced NIC details, and returns the result or an error.
6570	DeleteBalancedNic sends a DELETE request to remove a network interface configuration and returns the response headers and any errors.
6571	ListLans constructs a URL, sends a GET request, and returns LAN data along with any errors.
6572	GetLan constructs a URL, sends a GET request, and returns a Lan object along with any errors.
6573	DeleteLan sends a DELETE request to remove a LAN and returns the response headers and any errors.
6574	ListNics constructs a URL, sends a GET request, and returns NIC details or an error.
6575	CreateNic sends a POST request to create a NIC and returns the created NIC and any error.
6576	GetNic constructs URL, sends GET request, retrieves Nic data, and returns it along with any errors.
6577	UpdateNic sends a PATCH request to update NIC properties and returns the updated NIC object and any errors encountered.
6578	DeleteNic sends a DELETE request to remove a NIC and returns the response headers and any errors.
6579	ListSnapshots retrieves snapshots using a client, returning them and any errors encountered.
6580	GetSnapshot retrieves a snapshot by ID and returns the result along with any errors encountered during the request.
6581	DeleteSnapshot deletes a snapshot by ID and returns the response headers and any errors.
6582	UpdateSnapshot updates a snapshot with given properties and returns the updated snapshot and error.
6583	ListIPBlocks fetches IP blocks using client settings and returns the result or an error.
6584	ReserveIPBlock sends a POST request to reserve an IP block and returns the reserved block or an error.
6585	GetIPBlock retrieves an IP block by ID, returning the result and any errors encountered.
6586	UpdateIPBlock sends a PATCH request to update an IP block with given properties and returns the updated block along with any errors.
6587	ReleaseIPBlock deletes an IP block and returns the response headers and error.
6588	ListVolumes fetches volumes using client's depth and returns them or an error.
6589	GetVolume fetches a volume using DCID and volumeID, returning the volume and any errors encountered.
6590	UpdateVolume sends a PATCH request to update a volume and returns the updated volume object and an error.
6591	CreateVolume sends a POST request to create a volume and returns the created volume or an error.
6592	DeleteVolume sends a DELETE request to remove a volume and returns the response headers and any errors encountered.
6593	CreateSnapshot sends a POST request to create a snapshot and returns the created Snapshot object or an error.
6594	RestoreSnapshot sends a POST request to restore a snapshot and returns the response headers and an error.
6595	ListServers retrieves servers data for a given client ID and returns it along with any errors encountered.
6596	GetServer constructs a URL with client settings and fetches server data.
6597	DeleteServer sends a DELETE request to remove a server and returns the response headers and an error.
6598	ListAttachedCdroms sends a GET request to retrieve attached CD-ROM images and returns them along with any errors.
6599	AttachCdrom sends a POST request to attach a CD-ROM image and returns the attached image or an error.
6600	GetAttachedCdrom fetches an image using client details and returns it along with an error.
6601	DetachCdrom deletes a CD-ROM and returns HTTP headers and an error
6602	ListAttachedVolumes constructs a URL and retrieves attached volumes using the client.
6603	AttachVolume sends POST request to attach a volume and returns the attached Volume object or an error.
6604	GetAttachedVolume fetches a volume details from the server and returns it along with any errors encountered.
6605	DetachVolume deletes a volume and returns HTTP headers and an error.
6606	StartServer sends a POST request to initiate a server and returns the response headers and any errors encountered.
6607	ListLocations fetches locations using a client, returning parsed data and any errors.
6608	GetRegionalLocations fetches regional locations using client and returns Locations object and error
6609	GetLocation fetches location details by ID and returns a Location object or an error.
6610	GetContractResources fetches contract resources from the server, returning the data and any errors encountered.
6611	ListImages fetches images using client settings and returns them along with any errors encountered
6612	GetImage fetches image data using client and returns Image object and error
6613	PrintHeaders prints all headers from the response object
6614	ListGroups fetches groups using client's depth and pretty settings, returning parsed Groups object and error.
6615	GetGroup fetches a group by ID, returning the group data and an error if the request fails.
6616	CreateGroup sends a POST request to create a group and returns the created group and any errors encountered.
6617	UpdateGroup sends a PUT request to update a group and returns the updated group and any errors.
6618	DeleteGroup sends a DELETE request to remove a group and returns the response headers and any errors encountered.
6619	ListShares constructs a URL to fetch shares for a given group ID and retrieves them using a GET request, returning the result and any encountered errors.
6620	GetShare fetches a share using group and resource IDs, returning the share data and any errors encountered during the request.
6621	AddShare sends a POST request to add a share and returns the created share object along with any errors.
6622	UpdateShare sends a PUT request to update a share object and returns the updated share along with any errors.
6623	DeleteShare sends a DELETE request to remove a share and returns the response headers and any errors encountered.
6624	ListGroupUsers constructs URL, sends GET request, retrieves users, and returns them along with any errors.
6625	AddUserToGroup adds a user to a group and returns the updated user details along with an error if any occurs
6626	DeleteUserFromGroup removes user from group and returns HTTP headers and error
6627	ListUsers fetches user data from a server and returns it along with any errors encountered.
6628	GetUser fetches user data by ID and returns User object and error
6629	CreateUser sends a POST request to create a user and returns the created user and an error if any.
6630	UpdateUser sends a PUT request to update a user and returns the updated user object or an error.
6631	DeleteUser sends a DELETE request to remove a user and returns the response headers and any errors.
6632	ListResources fetches resources from a server using a client, constructs a URL with depth and pretty print parameters, sends a GET request, and returns the response or an error.
6633	GetResourceByType fetches a resource by type and ID, returning the resource and any errors encountered during the request.
6634	ListResourcesByType constructs a URL, sends a GET request, and returns resources or an error.
6635	ListRequests sends a GET request to retrieve requests with specified depth and pretty formatting, returning the response and any errors.
6636	GetRequest constructs a URL with request ID and client settings, sends a GET request, and returns the response as a Request object along with any errors encountered.
6637	GetRequestStatus constructs URL with client settings and fetches request status.
6638	Close locks mutex, closes file, and returns error.
6639	GetSerializableArgument retrieves original value or unmarshals serialized value using resource.
6640	BoolVar sets a boolean flag in the environment with the given name, value, and usage message.
6641	Bool sets a flag with a name, value, and usage message in the environment flags and returns a pointer to the value.
6642	IntVar assigns an integer flag to an environment variable.
6643	Int defines an integer flag with the given name, default value, and usage description, returning a pointer to the flag's value.
6644	Int64Var assigns an int64 variable to a flag with a given name, default value, and usage description.
6645	Int64 registers an integer flag with a name, default value, and usage message.
6646	UintVar sets a variable p to a value based on environment flags.
6647	Uint retrieves a uint flag value from environment flags with specified name and usage.
6648	Uint64Var sets a variable in the environment flags with a name, initial value, and usage description.
6649	Uint64 retrieves a 64-bit unsigned integer flag value from environment variables.
6650	StringVar assigns a default value and usage to a string flag in the environment.
6651	String converts name, value, and usage to environment flag and returns it
6652	Float64Var sets a float64 variable with a flag
6653	Float64 sets a float64 flag with a name, value, and usage message in the environment flags.
6654	DurationVar sets a duration flag with environment variable support.
6655	Duration sets and returns a duration flag with given name, default value, and usage.
6656	Parse cleans environment vars and sets flags.
6657	WriteStringToFile will write a string to a file and return an error if unsuccessful
6658	ReadFileToString opens a file, reads the first line, and returns it as a string along with any errors encountered.
6659	LineReader converts an io.Reader to a channel of strings, reading lines.
6660	LineReaderFrom reads a file line by line and returns a channel of strings along with an error if the file does not exist.
6661	FileExists checks if a file exists at the given path and returns true if it does.
6662	FileExistsInPath checks if a file exists in the system path and returns true if found.
6663	GetPathParts extracts directory, file, and absolute path from given path.
6664	GetThisPathParts retrieves executable path parts.
6665	RandomString generates a random string of specified length using cryptographically secure random source.
6666	ParseAddress extracts protocol and path from address, returning them and an error if invalid.
6667	HomeDir returns the current user's home directory path, caching the result for future calls.
6668	IsTCPPortAvailable checks if a TCP port is available by attempting to listen on it and closes the connection. Returns true if the port is available, false otherwise.
6669	RandomTCPPort will return a random available TCP port between a specified range or -1 if none are available
6670	HashString computes a hash value for a given key using a specified number of buckets and returns it as an int32.
6671	Context retrieves session info using access token from metadata.
6672	Token retrieves OAuth2 token details including access token and expiration time, handling potential errors and optional bag data.
6673	NewDaemon creates a new daemon instance, sets up configuration options, and handles default values before returning the daemon object and any errors encountered.
6674	Close will stop the daemon gracefully and close all associated resources, returning an error if any fail
6675	NewAccessTokenContext adds an access token to a context.
6676	AccessTokenFromContext retrieves the access token from the context and returns it along with a boolean indicating success.
6677	RandomAccessToken generates a random byte buffer, hashes it using SHA-3, encodes the hash in hexadecimal, and returns it as a string.
6678	Init configures logger based on environment and options, sets log level, and returns initialized logger.
6679	Load loads a dictionary from a zip file, processing specific parts like morph, POS, content, etc., and returns the dictionary and any errors encountered.
6680	Start starts a session using provided credentials and metadata, saving it to storage and returning the session details.
6681	Get retrieves a session using an access token, returning the session details and any errors encountered.
6682	List retrieves sessions from storage based on criteria and returns them along with potential errors.
6683	Exists checks if a resource exists using a database query, returning a boolean result and an error if the operation fails.
6684	Abandon will return a bool and error, indicating success or failure in abandoning a session based on access token
6685	SetValue updates a session's bag with a key-value pair and returns the updated bag.
6686	Delete session by ID, token, and expiration range, return affected rows and error
6687	Setup will execute SQL queries to create schema, table, and indexes for storage.
6688	TearDown deletes a database schema if it exists.
6689	initJaeger initializes Jaeger tracing with specified service, node, and agent address, returning a tracer, closer, and error.
6690	Usage prints help message to errorWriter
6691	Build constructs a DoubleArray from keywords with auto-generated IDs.
6692	Read reads binary data from a reader into a DoubleArray, returning the array and any errors encountered.
6693	Get retrieves a node from a cluster by key, returning the node and a boolean indicating success.
6694	ExternalNodes filters nodes in a cluster based on address and returns those that don't match the listen address.
6695	GetOther retrieves a Node based on an accessToken, returning the Node and a boolean indicating if it's not the current listen node.
6696	GoString converts Cluster to JSON string representation
6697	Scan decodes a byte slice into the Bag using Gob encoding or returns an error for unsupported types
6698	Bag.Value encodes the bag using Gob and returns the encoded bytes or an error
6699	Has checks if a key exists in the bag and returns true if it does.
6700	WriteTo method writes data to an io.Writer, encoding additional data using gob before returning total bytes written and potential errors.
6701	ReadIndexTable reads an IndexTable from an io.Reader, returning the parsed data and any errors encountered.
6702	New creates an ActionBar with associated controller handlers for switching mode and inline editing.
6703	RegisterAction adds an action to the global list and updates local reference.
6704	`Actions appends action interfaces to ActionBar and returns a new instance.`
6705	Render function organizes actions based on type, sets current user in context, prepares data for rendering, and returns HTML template.
6706	FuncMap registers a custom template function "render_edit_button" for rendering edit buttons with associated resources.
6707	EditMode checks if admin mode is active in ActionBar's context and returns the result.
6708	SwitchMode sets a cookie based on URL query and redirects to referrer or root.
6709	controller.InlineEdit writes inline_edit template to response
6710	Error provides a string representation including filename, line number, and message.
6711	ParseFile opens a file and parses its contents into machines and macros, returning them along with any errors encountered.
6712	FindMachine reads a file, searches for a named machine, returns it or a default if not found, or an error if none exists.
6713	New creates a Kace instance with sanitized initialisms using a trie, returning an error if creation fails.
6714	Camel converts string to camel case using receiver's transformation rules.
6715	Pascal converts a string to Pascal case using the Kace instance's transformation rules.
6716	Snake converts string to snake_case format
6717	SnakeUpper converts a string to snake_case and uppercase.
6718	Kebab converts a string to kebab case.
6719	KebabUpper converts a string to kebab-case uppercase.
6720	isPathSafe checks URL path safety by validating it against a whitelist and returning an error if unsafe.
6721	Start logs the current UTC time and request details for tracing purposes.
6722	ParseAuthHeaders extracts authentication credentials from HTTP headers or query parameters, supporting both Basic and Bearer schemes.
6723	Tracer sets a new tracer function on the client and returns an error if unsuccessful
6724	HTTPClient sets client parameter using http.Client
6725	BasicAuth sets up basic authentication for a client.
6726	BearerAuth sets authentication for a client with a given token.
6727	CookieJar sets the cookie jar for a client and returns an error if unsuccessful
6728	SanitizerEnabled sets client param based on bool value
6729	OpenFile opens a file at the specified endpoint with parameters, sanitizes the path if enabled, constructs a URL, and returns a seeker for reading, seeking, and closing the file.
6730	RoundTrip executes a request using a provided function, reads the response body, and returns a Response object containing status code, headers, body buffer, and cookies.
6731	SetAuthHeader updates HTTP header with client's authorization info if available.
6732	FileName extracts filename from Content-Disposition header.
6733	newBuffersFromFiles creates a slice of fileBuffers from a list of Files
6734	newFileBuffer creates a buffer that reads from a file while caching data.
6735	rewind updates file buffer reader to use cache and file reader sequentially
6736	ConvertResponse handles errors, wraps URL errors, and reads response data.
6737	Set BoolOption from string, validate conversion, update source and defined flag
6738	WriteAnswer sets BoolOption value based on input, marks as defined, and records source as prompt or returns error
6739	BoolOption.String() returns a formatted string based on StringifyValue flag
6740	TriggerIncidentKey invokes trigger function with description, key, and empty map, returning incidentKey and error.
6741	TriggerWithDetails will initiate an incident using a description and additional details, returning an incident key and any errors encountered.
6742	TriggerIncidentKeyWithDetails triggers an incident with details and returns the incident key or an error.
6743	Merge two structs by copying fields from src to dst using reflection.
6744	setSource updates nested structs, maps, and slices, setting their source property recursively
6745	convertString converts a string to a specified numeric or floating-point type, returning an error if conversion fails
6746	Do starts a database transaction, executes a function, and commits or rolls back based on success.
6747	NewFile creates a new file or truncates it if exists, returning a writer for the file.
6748	internalRun executes requests concurrently using a semaphore, collects results, and returns them after the specified duration.
6749	Row's String method constructs a formatted string representation including various metrics.
6750	Tabulate converts ResultSet slices into Rows, calculating elapsed time, success rates, and average request times.
6751	AmazonRequest sends HTTP GET request to www.amazon.co.uk and returns error if unsuccessful.
6752	WriteTabularData outputs tabulated data for given interval and result set to writer.
6753	Reduce organizes results into time-based intervals, grouping them into buckets.
6754	NewSemaphore creates a semaphore with a given capacity and ramp-up duration, initializing locks and starting goroutine for ramp-up if necessary.
6755	Release decrements semaphore count after acquiring read lock and checking for active reservations.
6756	Resize adjusts a semaphore's capacity while copying existing values safely.
6757	AddOutput appends a new output container to Bench instance containing interval, writer, and output function.
6758	Run benchmarks using provided request function, process results.
6759	parseBool will return a boolean value and an error if the input byte sequence is not a valid ASN.1 Boolean encoding
6760	checkInteger verifies ASN.1 integer encoding errors
6761	parseInt64 converts byte array to int64, checking for errors and overflow.
6762	parseInt32 converts byte array to int32, validating size and range
6763	parseBigInt converts byte array to big.Int, handling negative numbers and returning result or error
6764	parseBitString will return a bitstring representation and the number of bytes read an error will be returned if the bitstring is not properly formatted
6765	parseObjectIdentifier extracts object identifiers from ASN.1 encoded data, returning their numeric components and handling errors gracefully.
6766	parseBase128Int decodes a Base128 integer from bytes, returning the result and an error if the integer exceeds 4 bytes.
6767	parseGeneralizedTime converts ASN.1 generalized time to Go time.Time, validating round-trip serialization.
6768	parsePrintableString converts byte array to string if all characters are printable, otherwise returns syntax error
6769	isPrintable checks if a byte is printable based on specific ASCII ranges
6770	parseSequenceOf will return a slice of values and an error if the sequence is not properly formatted
6771	invalidLength checks if adding length to offset exceeds slice bounds
6772	setDefaultValue sets default value for a field if optional and has a default value
6773	UnmarshalWithParams will unmarshal byte data into a given value using specified parameters and return the remaining data and any errors encountered
6774	parseFieldParameters will parse field parameters and return a fieldParameters object containing various attributes based on the input string.
6775	getUniversalType determines the ASN.1 tag for a given Go type, returning the tag number, whether it's compound, and success.
6776	DecodeString decodes a base32-encoded string, padding with '=' if necessary.
6777	MongoDb MailNotifier retrieves mail notifier model from DB and handles errors
6778	SaveMailNotifier updates mail notifier info in MongoDB and logs errors
6779	RegisterProvider registers a new auth provider with a given name and factory, ensuring it's not already registered.
6780	InitDb initializes user table and logs error if failed
6781	Until repeatedly executes a function f every period duration until signaled to stop via stopCh channel.
6782	logPanic captures and logs panics along with the call stack.
6783	MongoDb.User retrieves a user by username and returns the user object and an error if the user does not exist.
6784	MongoDb.Users retrieves users based on a filter, returning them and any errors encountered during the database operation.
6785	SaveUser saves a user in MongoDB, updates existing user if exists, logs error if failed.
6786	DeleteUser removes a user by username and logs errors.
6787	LoadCACertFile reads a CA certificate file, validates it, and appends it to a cert pool, returning the pool and any errors encountered.
6788	NewAuth creates an Auth instance with options, applying a custom error handler if provided.
6789	ValidateRequest checks TLS cert validity and returns an error if validation fails.
6790	Process handles HTTP request, validates request, OU, and CN, returns error if validation fails.
6791	ValidateCN checks if a certificate's Common Name is allowed and returns an error if not.
6792	ValidateOU checks if the certificate's OU matches allowed OUs, returning an error if it doesn't.
6793	KeyLen calculates the minimum number of bytes required to represent a given unsigned 64-bit integer.
6794	DefaultConfig creates a Vault client with default settings and returns a configuration object.
6795	New creates a cert signer instance with the given configuration, validating the Vault client dependency.
6796	New creates a vault factory instance with configuration validation and returns it or an error.
6797	DefaultServiceConfig creates a Vault client with default config and sets local address, returning a service config.
6798	NewService creates a service instance with given configuration, validating VaultClient.
6799	Delete function unmounts a PKI backend for a given cluster if it's mounted.
6800	IsNoVaultHandlerDefined checks if an error indicates the absence of a vault handler for a route.
6801	New creates a service instance with Vault client and PKI mountpoint configuration, returning an error if either is missing.
6802	Create will insert a role with specified parameters into Vault and return an error if unsuccessful
6803	CreateJob initializes a new Config with default settings.
6804	Run starts Config, acquires lock, runs worker, panics on error.
6805	newWatcher creates a watcher with directory notification, initializes paths using glob matching, and adds them accordingly.
6806	Watcher starts notification channel and listens for watch items if auto-watch enabled.
6807	Stop closes notification and addition channels of Watcher
6808	Watcher.Active checks if there are active paths and returns true if so.
6809	Watcher adds paths based on glob patterns, handles auto-watching and notification channels accordingly.
6810	watcher watches paths, sends notifications, and manages auto-watching behavior
6811	Watcher's Watching method collects all watched paths into a slice and returns them.
6812	State method returns notifications from watcher paths.
6813	Store saves error in request context if configured
6814	Get retrieves an error from the request context if present.
6815	Catch wraps middleware to handle errors during HTTP requests.
6816	Try wraps a handler to store errors in requests.
6817	Recover middleware catches panics, stores error details, and continues request processing.
6818	main sends a GET request to a server, reads the response body in chunks, logs the size of each chunk, and closes the connection.
6819	SyncHandler creates an HTTP handler that synchronizes a Go structure with a connection, logging errors and waiting for the connection to complete.
6820	connect handles HTTP requests, selects transport, connects non-blockingly, sends initial ping, manages ping loop, waits for connection, and closes when done.
6821	send updates using transport with timeout enforcement
6822	NumConnections returns the current number of connections safely.
6823	Push attempts to mark the state as 'pushing'; if successful, starts a goroutine to perform the push operation and returns true; if already pushing, marks it as queued and returns false.
6824	gopush updates JSON state, calculates changes, notifies subscribers, and manages throttling.
6825	NewOutForward creates OutForward instance with connected loggers and sends empty byte slices.
6826	Run will process input, manage file trails, and log errors or warnings accordingly
6827	New creates a Fluent instance with default configurations if necessary and establishes a connection, returning the instance and any errors encountered.
6828	Close will close the connection if it exists and unlock the mutex
6829	Fluent's IsReconnecting method checks if reconnecting status is true while locking and unlocking mu mutex.
6830	connect resolves server address and attempts TCP connection with timeout, logging details and recording errors.
6831	Notification creates a notifier with given title and message, returning a GNotifier instance.
6832	NullNotification creates a notifier with specified title, message, timeout, and empty icon.
6833	New creates an Identity instance using provided options and generates a configuration object.
6834	Issue creates a new identity using options and assigns issuer.
6835	Subject sets the subject field of a configuration object to the given pkix.Name value.
6836	PrivateKey sets the private key in configuration using a Signer object.
6837	NotBefore sets the notBefore field in configuration with the given time value.
6838	NotAfter sets the notAfter field of configuration with a given time value
6839	IssuingCertificateURL appends one or more certificate URLs to a configuration option.
6840	OCSPServer adds OCSP server URLs to configuration.
6841	New creates a Telegram bot API instance, sets up channels and clients, fetches user info, removes webhook, starts update loop, and returns the bot API object.
6842	NewWithWebhook creates a Telegram bot API instance, sets up a webhook, and handles incoming updates.
6843	Close closes the Telegram bot API connection if not already closed, waits for all goroutines to finish.
6844	GetMe retrieves user info and returns response or error
6845	RunBot starts a bot using an API key, handles updates, and shuts down gracefully on interrupt.
6846	RunBotOnWebhook starts a bot using a webhook, handles updates, and shuts down gracefully.
6847	NewOutgoingMessage constructs a new outgoing message with default settings for a Telegram bot API.
6848	NewOutgoingLocation constructs a Telegram bot location message with specified recipient and coordinates.
6849	NewOutgoingVenue constructs an OutgoingVenue message with specified details.
6850	NewOutgoingVideo constructs a Telegram video message with recipient, file name, and reader.
6851	NewOutgoingVideoResend creates a new OutgoingVideo message with specified recipient and file ID.
6852	NewOutgoingPhoto constructs an OutgoingPhoto object with TelegramBotAPI, Recipient, fileName, and reader.
6853	NewOutgoingPhotoResend creates a new OutgoingPhoto instance with the given recipient and file ID.
6854	NewOutgoingSticker creates a new sticker message for Telegram bot API.
6855	NewOutgoingStickerResend creates a new OutgoingSticker for sending a sticker using Telegram Bot API.
6856	NewOutgoingVoice creates a new outgoing voice message with specified recipient, file name, and reader.
6857	NewOutgoingVoiceResend constructs a new OutgoingVoice message for resending with specified recipient and file ID
6858	NewOutgoingAudio creates an OutgoingAudio object for sending audio files to a Telegram bot.
6859	NewOutgoingAudioResend constructs an OutgoingAudio message with specified recipient and file ID.
6860	NewOutgoingDocument creates a new document message with specified recipient, file name, and reader.
6861	NewOutgoingDocumentResend creates a new document message for resend with specified recipient and file ID
6862	NewOutgoingForward creates a new outgoing forward message with specified recipient, origin chat, and message ID.
6863	NewOutgoingChatAction creates a new OutgoingChatAction instance with specified recipient and chat action.
6864	NewOutgoingUserProfilePhotosRequest creates a request object for fetching user profile photos using Telegram Bot API.
6865	NewOutgoingKickChatMember creates a new outgoing kick chat member request
6866	NewOutgoingUnbanChatMember creates an outgoing unban chat member command for Telegram API.
6867	NewOutgoingCallbackQueryResponse creates a new OutgoingCallbackQueryResponse object with the given query ID and API reference.
6868	NewInlineQueryAnswer creates an InlineQueryAnswer object for TelegramBotAPI
6869	Type method returns message type based on non-nil fields
6870	Type determines the update type based on the present field.
6871	Recipient's JSON marshalling returns channel ID or chat ID as appropriate.
6872	querystring constructs a map with URL if present and returns it
6873	getBaseQueryString constructs a querystring with chat_id based on recipient type
6874	getBaseQueryString constructs a URL query string based on message properties.
6875	querystring constructs a URL query string from OutgoingAudio properties
6876	querystring constructs a query string from outgoing photo data, including optional caption.
6877	querystring constructs a URL query string from user ID, offset, and limit parameters
6878	querystring constructs a URL query string from outgoing video properties, including caption and duration.
6879	querystring constructs a URL query string from outgoing voice data, including duration if specified.
6880	NewInlineQueryResultArticle creates an InlineQueryResultArticle with given ID, title, and text.
6881	NewInlineQueryResultPhoto creates an InlineQueryResultPhoto object with specified ID, photo URL, and thumbnail URL.
6882	NewInlineQueryResultGif constructs an InlineQueryResultGif object with specified ID, GIF URL, and thumbnail URL.
6883	NewInlineQueryResultMpeg4Gif constructs an InlineQueryResultMpeg4Gif object with given ID, mpeg4URL, and thumbURL.
6884	NewInlineQueryResultVideo creates a new inline query result video with specified parameters.
6885	Send sends a request to retrieve user profile photos and returns the response or an error
6886	Send chat action and return error if failed
6887	Send sends an inline query answer using API and returns error if failed
6888	Send sends a chat member kick request and checks response error
6889	Send unban request and validate response
6890	Send sends a callback query response and returns an error if the request fails or the response is invalid.
6891	NewAPIClient creates an APIClient instance with default HTTPClient if none provided, sets configuration, and initializes API services.
6892	BeforeInsert sets CreatedAt and UpdatedAt to current time and returns nil
6893	ColumnName will return a quoted column name optionally prefixed by table name
6894	New creates a DB instance using a specified dialect and data source name, returning an error if the connection fails.
6895	From will create a new From object with the table name derived from the given struct type, panicking if the argument is not a struct.
6896	newCondition(db) creates a Condition object and applies the WHERE clause with given condition and arguments.
6897	newCondition(db) creates a Condition instance and calls its OrderBy method with table, column, and order parameters.
6898	Limit sets the maximum number of results to return.
6899	Offset sets the offset for the database query condition.
6900	db.Join adds table to join condition
6901	Count constructs a COUNT SQL function with zero or one column argument.
6902	Update object in database, return affected rows and error
6903	Delete method deletes objects from database, executes query, and handles hooks.
6904	Begin starts a transaction, locks the database, assigns the transaction, and returns an error if any occurred.
6905	Commit transaction and release lock, returning error if tx is nil
6906	Quote method returns a quoted string using the database dialect's quoting mechanism.
6907	SetLogOutput sets the logger of DB instance to default or custom writer.
6908	selectToSlice fetches data from sql.Rows and converts it into a slice of specified type, handling pointers and nested structures.
6909	selectToValue reads a row from SQL and converts it to a specified Go type, handling pointers recursively.
6910	fieldIndexByName searches recursively for a field name in a struct and returns its path as indices.
6911	columns constructs a SQL column list based on input types, formatting them according to the database dialect.
6912	tagsFromField extracts tags from a struct field, skipping if marked and trimming whitespace.
6913	hasSkipTag checks if a struct field has a specific tag and returns true if it does.
6914	hasPKTag checks if a field has a "pk" tag in its tags.
6915	isAutoIncrementable checks if a field type is auto-incrementable based on its kind
6916	collectFieldIndexes will recursively gather field indices for a given type, skipping unexported fields and those marked for skip or primary key without auto-increment, returning all collected paths.
6917	findPKIndex recursively searches for primary key fields in a struct, returning their indices.
6918	sizeFromTag extracts size from tag of struct field and returns size and error
6919	columnFromTag retrieves a database column name from a struct field tag, defaulting to snake case if none specified
6920	defaultFromTag extracts a default value from a struct field tag and formats it according to the database dialect, returning the SQL DEFAULT clause.
6921	append "Where" clause to query using condition and arguments
6922	append "And" condition to query with priority 100
6923	append "Or" condition to query with priority 100
6924	Like appends a LIKE query condition with the given argument and returns the modified Condition object.
6925	Between method appends a query condition for values between two specified values and returns the updated Condition object.
6926	OrderBy appends sorting conditions to the query based on table, column, and optional order parameters, returning the updated Condition object.
6927	Limit will modify the condition by appending a limit query and return the updated condition
6928	Offset modifies condition query adding offset value.
6929	SetFormat updates logger's format using a template and returns an error if parsing fails.
6930	Print logs with query, arguments, and duration using template logger.
6931	nullLogger's Print method does nothing and always returns nil
6932	Quote wraps a string with backticks and escapes existing backticks within.
6933	SQLType will return the appropriate PostgreSQL data type name and whether it allows null based on the given Go language type, size, and auto-increment flag.
6934	New creates an archive from a file, using zip or tar based on the file extension.
6935	Disconnect will release the host handle and return an error if resources are insufficient
6936	nextNetworkAdapterID retrieves the next available network adapter ID from VMX settings
6937	totalNetworkAdapters calculates the highest numbered network adapter from a VMX configuration map.
6938	RemoveAllNetworkAdapters deletes all network adapter entries from a VMX file and returns an error if failed.
6939	RemoveNetworkAdapter removes a network adapter from the VM's vmx file if the VM is off.
6940	NetworkAdapters reads VMX file to extract network adapter details and returns a list of NetworkAdapter structs along with an error.
6941	newArchive creates an Archive object by listing files in a given path using 7z and optionally encrypting it with a password.
6942	GetFileReader searches for a file by name in an archive, constructs a command to extract it using 7z, starts the process, and returns a reader-closer for the extracted file content. An error is returned if the file is not found or if there's an issue starting the extraction process.
6943	ExtractToWriter extracts file content to writer and closes reader, returning errors if any occur
6944	ExtractToFile creates a file and extracts archive content to it.
6945	SharedFoldersParentDir retrieves the shared folders parent directory path from a guest and returns it as a string, handling errors appropriately.
6946	Snapshot.Name retrieves display name of snapshot or error
6947	Snapshot.Description retrieves a snapshot description and handles errors.
6948	cleanupSnapshot releases the snapshot handle if it's valid.
6949	BusTypeFromID identifies the bus type based on the ID string and returns the corresponding vmx.BusType.
6950	Read VMX file, unmarshal data, store model, return error
6951	Write VMXFile model data to disk, returning error if any step fails
6952	NewVirtualMachine creates a VM instance from a VIX handle and VMX file path, reads the VMX file, sets up finalization for cleanup, and returns the VM object or an error.
6953	Vcpus retrieves VM vCPU count, returning the number and an error if failed.
6954	VmxPath retrieves VMX file path from handle, returns path and error if failed
6955	MemorySize retrieves VM memory size, returning it as an unsigned integer and an error if unsuccessful.
6956	`ReadOnly` checks VM's read-only status and returns bool and error.
6957	InVMTeam checks VM team status and returns bool and error
6958	PowerState retrieves VM power state and handles errors.
6959	getToolsState retrieves VM tools state, returns error if failed
6960	IsRunning checks VM status and returns running state and error if failed
6961	GuestOS retrieves the guest OS name from a VM handle, returning it as a string and an error if unsuccessful.
6962	cleanupVM releases a VM handle if valid and resets it
6963	updateVMX updates VMX settings after checking if VM is running, handles errors during file operations and applying updates.
6964	SetMemorySize updates VM memory size, correcting alignment and applying changes via VMX model.
6965	SetNumberVcpus updates VM's number of virtual CPUs, defaulting to 1 if less than 1, and applies changes via updateVMX.
6966	SetDisplayName updates VM model's display name and returns error if update fails
6967	SetAnnotation updates VMX model annotation and returns error
6968	SetVirtualHwVersion updates VMX model version and compatibility
6969	Error method constructs and returns a formatted string containing error details.
6970	Errorf creates a formatted error message and wraps it.
6971	traceableError's Error method appends stack frames to the original error message.
6972	stackFrame string representation combines function name, file, and line number
6973	newStackFrame generates a stack frame object containing file path, line number, and function signature based on program counter.
6974	captureStack captures stack traces, skipping specified frames and limiting depth, returning parsed stack frames.
6975	parseFuncName extracts package path and function signature from input string using regex
6976	Stack logs error along with stack trace
6977	StackWithCaller logs an error along with a stack trace, optionally including the caller's package name.
6978	responseWriterBinder will execute before functions and write byte slice to writer returning bytes written and error
6979	ResponseStatus retrieves the HTTP status code from a response writer.
6980	httpResponseStruct navigates through nested structs to find the http.response field and returns it
6981	SetDetectedContentType sets content-type header based on input bytes and returns it
6982	ServerError constructor sets HTTPCode, Errno, and Message fields, returning the modified instance.
6983	NewDBError sets up a database error with specified details and returns it.
6984	New ValidationError sets HTTPCode to Bad Request, Errno to 0, and Message to given string, returning the error instance.
6985	NotFoundError constructor sets HTTPCode, Errno, and Message fields
6986	StrLength validates the length of a string field and panics with an error if it doesn't meet the specified length.
6987	StrLenIn checks if a string field's length matches specified values, returning the string or panicking with validation errors if not.
6988	StrIn validates a string field against a list of allowed values and returns the validated string or panics if validation fails.
6989	GetEmail validates email format and returns it or panics if invalid
6990	MostSpecificType will return the most specific type from a list and an error if none are provided
6991	FullTypeHierarchy builds a type hierarchy starting from highestLevelType and returns URIs of all types including the root.
6992	SortTypes sorts strings alphabetically and returns them along with an error if sorting fails due to hierarchy issues.
6993	Redis store deletes key and refreshes provider, returning any errors
6994	Set key-value pairs in Redis and return store object with error
6995	redisProvider updates Redis store with session values and expiration
6996	Redis provider retrieves session data and returns a store object along with an error.
6997	redisProvider.Destroy removes a session ID from Redis and returns an error if failed
6998	redisProvider.UpExpire sets expiration time for a session ID in Redis and returns an error.
6999	HandlersStack adds a router handler to its list.
7000	ServeHTTP handles HTTP requests, sets response headers, recovers from panics, processes handlers, and cleans up context.
7001	Use adds middleware to router group and returns modified routes.
7002	Group creates a new router group with combined handlers and calculated absolute path.
7003	Run starts services, sets up routing, handles graceful shutdown, and logs server status.
7004	create initializes and returns a new Engine instance with default settings
7005	Redirect sends HTTP response with specified URL and status code.
7006	Context.Ok sends a JSON response indicating success and the provided data, ensuring the response is written only once.
7007	Fail handles errors by logging, setting response status, and writing JSON error response.
7008	ResStatus sets response status code and body, returns error if already written
7009	Next advances the request handler stack if not yet processed.
7010	GetSession retrieves session data from Context and returns it as IStore if valid, otherwise returns nil.
7011	getBodyJSON reads request body and converts it to JSON based on content type
7012	SetSession sets session data, generates unique IDs, and manages cookies.
7013	FreshSession updates expiration for a given key and returns an error if failed.
7014	DeleteSession removes session data and invalidates cookie.
7015	contextWriter's Write method sets written flag and delegates byte writing to ResponseWriter.
7016	contextWriter sets written flag and forwards header write request
7017	New creates a Client instance with a PEM path and optional configurations, returning an error if any configuration fails.
7018	setAllowLargeResults updates client settings for large results and temporary table name, returning no error
7019	connect generates a BigQuery service client using JWT authentication and stores it in the Client struct.
7020	InsertRow inserts a row into BigQuery and handles connection, request building, and error checking.
7021	AsyncQuery sends a paginated query to the server and streams results via a channel.
7022	Query sends a paginated request to retrieve data based on the dataset, project, and query string, returning the results, column headers, and any errors encountered.
7023	stdPagedQuery sends a paginated BigQuery query and returns results, headers, and errors
7024	largeDataPagedQuery sends a BigQuery query, handles pagination, and returns results along with headers.
7025	pagedQuery connects to a service, handles large results, and performs a paginated query, returning data, column names, and errors.
7026	pageOverJob fetches query results, handles pagination, sends headers and rows, and manages result channels
7027	Count executes a query to count rows in a specified dataset table and returns the result as an int64.
7028	work will process URL, depth, and fetcher to return crawl result
7029	subworker executes a job safely, recovering from panics and setting result/error accordingly.
7030	worker processes jobs from a pool, assigning them IDs and managing completion notifications
7031	supervisor manages job lifecycle, dispatches, tracks, and communicates job status among workers and clients
7032	Run starts workers in a pool, panics if already started, and handles supervisor if not.
7033	Add a function and arguments to a pool, send job to pipe, wait for confirmation.
7034	pool.Wait waits for a worker to become available before proceeding, checking every interval.
7035	Results retrieves completed jobs from a pool and clears the queue.
7036	WaitForJob waits for a job from the pool and returns it when available, or nil if no more results are expected.
7037	pool.Status retrieves stats from supervisor or returns zeroed stats if not started
7038	WrapHTTPHandlerFunc converts an HTTP handler function into a custom handler function that operates on a Context.
7039	WebSocketHandlerFunc wraps a WebSocket handler function and returns a standard HTTP handler function.
7040	StaticFile generates a static file response with specified content type or inferred from filename.
7041	PreloadFile reads file content and sets content type based on extension, returning a preloadFile object and an error.
7042	InitHtmlTemplates loads HTML templates matching a pattern and returns an error if parsing fails.
7043	InitTextTemplates will parse a glob pattern and assign it to Template, returning an error if parsing fails
7044	Html creates a template with specified content type and character set
7045	Text creates a template with content type and charset, returning a template object
7046	InitWatcher sets up a file watcher for a given pattern, invoking callbacks on events or errors.
7047	CloseWatcher sends a signal to close all watchers and then closes the closer channel.
7048	Find will return URL parameters, handler, and view based on the given path, or nil if not found
7049	Add router, handler, and view to Routers, lock/unlock mutex, store route details.
7050	NewRouters creates and returns a pointer to a Routers object initialized with an empty map and a new list.
7051	NewServerMux creates a new ServerMux instance with default settings for view and handler.
7052	ServerMux handles errors using custom handler if available.
7053	HandleFunc adds a route, handler, and view to the server mux.
7054	handleError logs errors, sets response status, and data based on error type
7055	Redirect sets response status and data with given code and URL.
7056	InitPProf sets up routes for pprof profiling in a ServerMux.
7057	StartSession creates a new session using a factory function and assigns it to the context, returning any errors encountered.
7058	combinations will generate all possible combinations of selecting `select_num` elements from `list`, returning them via a channel.
7059	repeated_combinations generates all possible combinations of selecting 'select_num' elements from 'list' with buffer size 'buf'
7060	permutations generates all possible selections of elements from a list, returning them via a channel
7061	repeated_permutations generates permutations of a given list with specified selection count and buffer size
7062	gformat replaces placeholders in a format string with corresponding values from a map, returning the modified string and parameters used for replacement.
7063	Errorm formats a string using a map of arguments and returns an error.
7064	Fprintm formats and prints a message to a writer using a template and arguments, returning the number of bytes written and any error encountered.
7065	Printm formats and prints a message using a template and arguments, returning the number of bytes written and an error if any.
7066	Sprintm formats a string using a template and a map of arguments, returning the resulting string.
7067	Validate checks password against requirements and returns validity status and message
7068	MakeRequirements evaluates password strength by counting digits, uppercase letters, and punctuation, setting both minimum and maximum lengths equal to password length.
7069	password strength requirements checked; validity bool and message string returned
7070	password generates a garbled sequence based on requirements and modifies it according to uppercase, digits, and punctuation rules
7071	NewPassword generates a password based on given requirements, returning an error if validation fails.
7072	NewPasswords generates n passwords based on given requirements, returning them or an error if invalid.
7073	addNums appends random digits to a string based on specified count
7074	punctuate appends alternating punctuation symbols to a given string based on the specified count
7075	deprecated_init sets Stdin based on command-line arguments or standard input
7076	Param updates parameter value in ParamSet
7077	ParamSet.Parse decodes JSON data into a map and unmarshals it into specified parameters, returning an error if any step fails.
7078	json.Unmarshal(p.reader, v)
7079	GetDefaultHTTPClient creates an HTTP client with a specified timeout and returns it as an IHTTPClient interface.
7080	Pushy.DeviceInfo fetches device info using API endpoint and token, returns device details, error response, and general error.
7081	DevicePresence sends a request to Pushy API to check device presence, returning response, error object, and HTTP error.
7082	NotificationStatus retrieves a notification status using a push ID and API credentials, returning the status, error response, and any general error.
7083	DeleteNotification sends a request to remove a notification and returns success, error, and API error.
7084	NotifyDevice sends a notification request to Pushy and returns the response, error details, and any HTTP errors encountered.
7085	Assert verifies a condition and logs an error with caller info if false.
7086	CreateFile creates a file with the specified filename and size, writing a zero-filled buffer and returning an error if any step fails.
7087	AddError appends a new error message to the FormErrors instance.
7088	AddFieldError adds an error message for a specific field in FormErrors.
7089	FormErrors.HasErrors checks if there are any errors or field-specific errors present and returns true if so.
7090	NewError creates a new instance of FormErrors and adds an error message to it.
7091	NewFieldError adds a field-specific error to a collection and returns it.
7092	ChainHandlers applies a series of middleware functions to an HTTP handler sequentially.
7093	FinalHandler wraps an HTTP handler and returns a new handler that ignores the passed handler and returns the original one.
7094	MD5Hasher hashes data from a reader, returning a truncated hexadecimal string.
7095	IsHash verifies if a string is a valid MD5 hash based on length and allowed characters.
7096	WithBaseDir sets the file find function to join paths with a given directory.
7097	WithFileFindFunc sets file find function in options
7098	WithTemplateFromFiles assigns file paths to a template name in options.
7099	WithTemplatesFromFiles sets templates from file paths in options
7100	WithTemplateFromStrings assigns a list of strings to a named template option.
7101	WithTemplatesFromStrings sets options with template strings from a map.
7102	WithFunction associates a function with a name in options.
7103	WithFunctions adds functions to the template options.
7104	WithDelims sets opening and closing delimiters for options
7105	New creates templates from options, merging defaults and applying custom settings, then parses strings and files into template objects.
7106	RespondWithStatus will execute a template, write its content to response writer, set content type and status, and log errors
7107	RespondTemplate forwards a request to RespondTemplateWithStatus with default status 0.
7108	Templates' Respond method forwards request to RespondWithStatus with status 0.
7109	RenderTemplate will execute a named template with given data and return the rendered string or an error if the template is unknown or execution fails
7110	New creates a Server instance with given handler and options.
7111	ServeUDP updates server address and serves UDP connection.
7112	Shutdown closes the server and returns any errors encountered.
7113	QuicHeadersHandler wraps HTTP handler to set custom headers before serving request.
7114	GetRequestIPs retrieves client IP addresses from request headers and concatenates them.
7115	DomainRedirectHandler modifies an HTTP handler to redirect requests based on domain and HTTPS settings.
7116	New creates a Servers instance with default logger and recover function, applying passed options.
7117	Add server details to Servers instance
7118	TCPAddr retrieves the TCP address of a server by name, locking access to shared servers list.
7119	UDPAddr retrieves a server's UDP address by name.
7120	Close servers concurrently, wait for completion, recover from panics.
7121	Shutdown servers concurrently, wait for all to finish, log errors.
7122	TLSListener's Accept method wraps TCP connection, sets keep-alive, reads a byte, and either upgrades to TLS server or returns plain connection based on byte value.
7123	NewStaticFilesHandler creates a handler that serves static files from a given filesystem with a specified prefix, falling back to another handler if the file is not found.
7124	ServeHTTP authenticates request, handles post-auth actions, and invokes main handler if authorized.
7125	Options MarshalJSON converts options to JSON format.
7126	UnmarshalJSON converts JSON data to Options struct fields.
7127	optionsJSON will return a JSON representation of the Options object, converting durations to YAML-compatible format.
7128	UnmarshalYAML parses YAML data into Options struct fields.
7129	NewHandler wraps an HTTP handler, logs details including status, duration, and metadata, and uses a specified logger.
7130	WithPanicResponse sets panic response details and returns an option.
7131	WithPanicResponseHandler sets the panic response handler for HTTP requests.
7132	New creates a Handler instance with a given http.Handler and optional configurations.
7133	ServeHTTP recovers from panics, logs details, notifies via notifier, handles custom responses, and sets appropriate headers and status codes.
7134	NewContextFunc creates a closure that retrieves values from a map using keys.
7135	NewMapErrorRegistry creates a registry for mapping error codes to errors and handlers.
7136	AddError adds an error to the registry if not already present, returning an error if a duplicate code is used
7137	AddMessageError registers a new error message by code, returning an Error instance or an error if already registered.
7138	MustAddError adds an error to registry and panics if failed
7139	MustAddMessageError adds a message error to registry and panics if error occurs
7140	AddHandler adds a new error handler to the registry, returning an error if the code is already registered
7141	MustAddHandler adds a handler to the registry and panics if there's an error.
7142	MapErrorRegistry.Handler will return a handler function based on the given error code
7143	New creates a Client instance with specified endpoint and error registry, using default key header and HTTP client.
7144	Client sends HTTP request using specified method, path, query, body, and acceptable content types, returning response or error.
7145	Client.JSONContext sends a request with JSON content, reads the response, and unmarshals it into a given structure, returning any errors encountered.
7146	StreamContext sends a request and returns response data and content type.
7147	Stream sends a request and returns response data, content type, and error.
7148	JSONUnmarshal converts JSON data to Go value, returns error with line and column if parsing fails
7149	ServeTCP starts a TCP server using a given listener, applying TLS if configured, and handles graceful shutdown errors.
7150	ServeTCP forwards TCP connections to Server's Serve method.
7151	Shutdown stops the server gracefully and returns an error if any occurs
7152	HandleMethods routes HTTP requests based on method type, returning appropriate handlers or error responses.
7153	NewSetHeadersHandler wraps an HTTP handler, setting specified headers before serving the request.
7154	New creates a Server instance with specified root directory, directory path, and optional options, initializing hashes and mutex.
7155	HashedPath computes a hashed path for a given string using a server's hasher, returning the hashed path or an error if hashing fails.
7156	New creates a Service instance with default logger and optional configuration.
7157	HTMLHandler wraps HTTP handlers, checking maintenance status and serving HTML content or forwarding requests accordingly.
7158	Service's Status retrieves stored status, returning boolean and error.
7159	Service handles HTTP request for status, logs error and responds accordingly
7160	OnHandler handles maintenance status updates, logging changes and responding accordingly.
7161	OffHandler toggles maintenance mode off, logs changes, and sends appropriate HTTP responses.
7162	This method serializes a `PostIRCMessageRequest` instance to JSON by converting it to a `json.RawMessage` and then marshalling that.
7163	MarshalJSON converts PostArtifactRequest to JSON format.
7164	PostArtifactResponse encodes JSON by marshaling underlying RawMessage.
7165	MarshalJSON converts HookChangedMessage to JSON format by wrapping it in json.RawMessage and calling MarshalJSON on it.
7166	MarshalJSON serializes TriggerHookRequest to JSON using internal json.RawMessage.
7167	TriggerHookResponse converts to JSON byte array with potential error
7168	UnmarshalJSON appends JSON data to TriggerHookResponse and returns an error if called on a nil pointer.
7169	LaunchInfo's MarshalJSON converts itself to JSON using underlying RawMessage.
7170	MarshalJSON converts Var to JSON by wrapping it in RawMessage and calling MarshalJSON on the wrapper.
7171	`MarshalJSON converts Var1 to JSON using internal RawMessage.`
7172	Var3 implements MarshalJSON by wrapping itself in json.RawMessage and calling MarshalJSON on it.
7173	Time.MarshalJSON converts a Time object to a JSON-formatted byte slice, ensuring the year is between 0 and 9999.
7174	UnmarshalJSON parses JSON data into a Time object using RFC3339 format.
7175	Write data to ReadWriteSeeker buffer, update position, return bytes written
7176	Seek updates the position in the buffer and returns the new position or an error if negative.
7177	Read will return the number of bytes read and an error if end of file is reached
7178	LaunchSpecsResponse converts JSON using RawMessage for custom marshalling.
7179	RegionLaunchSpec converts JSON data to byte array and handles errors
7180	GenerateCode processes API definitions, setting package names, generating Go types and functions, and saving the results.
7181	postPopulate assigns URLs to APIEntry based on Input and Output fields, updating schemaURLs accordingly.
7182	CreateTemporaryCredentials generates temporary credentials using permanent credentials, setting a duration and optional scopes.
7183	setURL constructs a full URL by appending a route to a client's base URL, handles trailing slashes, and encodes query parameters before returning the parsed URL.
7184	SignRequest sets Authorization header using Hawk authentication with client credentials.
7185	APICall sends a request with a payload, handles errors, and unmarshals the response.
7186	SignedURL generates a signed URL using client credentials and specified route, query parameters, and duration, returning the modified URL and any errors encountered.
7187	HawkSignatureAuthenticationResponse encodes JSON by wrapping itself in RawMessage and calling MarshalJSON on it.
7188	bmw256 processes input bytes, compresses them using a custom algorithm, and outputs a 32-byte hash.
7189	NewCubeHash initializes a CubeHash struct with default IV values.
7190	cubehash256 computes a hash for given data using CubeHash algorithm and outputs a 256-bit hash value
7191	Sum calculates hashes using Blake256, Keccak256, Cubehash256, Lyra2, Skein, and BMW256 algorithms, returning the final BMW hash and an error if any step fails.
7192	squeeze compresses state using BLAKE2b-Lyra and outputs the result in blocks.
7193	reducedSqueezeRow0 squeezes data from state into rowOut using reduced-round Blake2b transformation
7194	reducedDuplexRow1 updates the state using input and output rows, applying a transformation and XORing with the state.
7195	NewReaderByteCodeLoader creates a new instance of ReaderByteCodeLoader with default flags and given parser and compiler.
7196	LoadReader reads bytecode from a reader, parses AST, compiles it, and returns ByteCode or error.
7197	NewV3 generates a UUID v3 using a namespace and name, setting version bits.
7198	txLiteral updates state with current operation argument and advances state
7199	txFetchSymbol updates state with symbol based on current operation's argument, advancing state if variable exists.
7200	txMarkRaw converts state sa to raw string if needed and advances state
7201	txUnmarkRaw converts raw strings to regular strings and advances state
7202	txPrint outputs the argument after escaping if necessary, then advances the state
7203	txPrintRaw handles printing arguments or warns about nil args
7204	NewLoopVar creates a LoopVar instance with initialized properties based on given index and array.
7205	txMakeArray creates an array from stack elements between start and end marks, advancing the state.
7206	txFunCallOmni evaluates a state and calls a function or macro based on its type, warning if unknown.
7207	Toggle AST dump flag based on boolean value
7208	Toggle bytecode dump flag based on boolean input
7209	Optimize bytecode by replacing print raw operations with constants and noops.
7210	NewFuncDepot creates a new FuncDepot instance with the given namespace and an empty function map.
7211	Get retrieves a function value from FuncDepot by key, returning the value and a boolean indicating if the key exists.
7212	Set assigns a value to a key in the FuncDepot.
7213	NewFileTemplateFetcher creates a FileTemplateFetcher instance with absolute paths and returns it along with an error if any path is invalid.
7214	LastModified returns the last modified time of the file at s.Path, caching the result for up to 1 second.
7215	FileSource Reader opens file and returns io.Reader or error
7216	Bytes reads all data from the file source and returns it as a byte slice with an error if reading fails
7217	NewState creates a new State instance with default configurations and initializes stacks and variables.
7218	PushFrame creates a new frame, pushes it onto the stack, sets its mark, and returns it.
7219	PopFrame removes and returns the top frame from the stack, adjusting the stack size based on the marked position.
7220	CurrentFrame retrieves the top frame from the stack and returns it, or nil if the stack is empty.
7221	Warnf logs a warning message using the state's warn writer.
7222	AppendOutputString adds a string to the state's output buffer.
7223	Popmark removes and returns an integer from the state's mark stack.
7224	CurrentMark retrieves the top integer value from the state's mark stack or returns 0 if the stack is empty.
7225	LoadByteCode retrieves bytecode using a key from the state loader.
7226	Reset method resets all state properties including opidx, sa, sb, stack, markstack, frames, framestack, and pushes mark and frame onto the respective stacks.
7227	DeclareVar adds a variable to the frame stack and returns its index.
7228	GetLvar retrieves a local variable from the stack and returns its value and an error if unsuccessful.
7229	SetLvar updates frame stack at index i with value v
7230	NewByteCode creates a new ByteCode instance initialized with current time, empty name, nil operation list, and version 1.0.
7231	Append operation adds an operator to the ByteCode's instruction list.
7232	AppendOp adds an operation to bytecode and returns the operation
7233	ByteCode String generates human-readable representation including name, generation date, and opcode list.
7234	NewCachedByteCodeLoader creates a new cached bytecode loader with specified components.
7235	Load will return bytecode and an error if the bytecode loading process fails
7236	NewFileCache creates a new file cache instance for the given directory.
7237	GetCachePath normalizes a key to a relative path based on the cache directory.
7238	Get retrieves a cached entity by key, reading from a file and decoding using Gob.
7239	Set will save an entity to cache using gob encoding, creating necessary directories and handling errors.
7240	Delete key from cache and return error if removal fails
7241	MemoryCache.Get retrieves cached entity by key, returns it or error if not found.
7242	MemoryCache's Set method stores a CacheEntity under a given key and returns no error.
7243	MemoryCache.Delete removes a key and returns no error
7244	NewStringLexer creates a lexer for strings with custom tag delimiters.
7245	NewReaderLexer creates a lexer for reading from a reader with specific tag delimiters.
7246	NewV4 generates a random UUID according to RFC 4122 standards.
7247	Kolonish's Parse converts byte template to string and uses ParseString for AST generation.
7248	ParseReader reads from a reader, builds an AST, and returns it along with any errors encountered.
7249	AST Visit starts goroutine to traverse root and send nodes through channel.
7250	AST String method converts AST to a formatted string representation.
7251	Run bytecode on VM, initializing state and calling operations until end.
7252	DefaultParser sets tx.Parser based on args.Syntex, defaulting to TTerse if unspecified.
7253	DefaultLoader configures Xslate loader with cache directory, load paths, and cache level from arguments.
7254	DefaultVM sets up a new VM with loader from tx and assigns it to tx.
7255	Get retrieves a value by key from Args, returning the value and a boolean indicating if the key exists.
7256	NewHTTPSource reads HTTP response body, creates HTTPSource object, sets LastModifiedTime from header or current time, and returns it.
7257	NewStringByteCodeLoader creates a new instance of StringByteCodeLoader with flags, parser, and compiler.
7258	LoadString parses a string template, compiles it, and returns bytecode.
7259	Get retrieves a value from Vars using a key, returning the value and a boolean indicating if the key exists.
7260	NewOp creates an operation with a type and optional arguments, returning an Op object.
7261	MarshalBinary encodes an operation and its arguments into binary format, returning the byte slice and an error if encoding fails.
7262	UnmarshalBinary reads binary data and populates fields based on the opType, handling arguments and comments accordingly.
7263	op.ArgInt converts an argument to an integer
7264	op.ArgString converts argument to string, returning direct string if possible or converting interface
7265	AppendOp appends an operation to the bytecode and returns the modified operation.
7266	Compile AST nodes into bytecode, optimize, and return.
7267	NewV5 creates a UUID v5 hash from a namespace UUID and a name byte slice, setting version to 5.
7268	LexSymbolList Sort will sort symbols and return sorted list
7269	LexSymbolSorter's Less compares priorities, returning true if i has higher priority than j.
7270	LexSymbolSorter swaps elements at indices i and j in its list.
7271	Copy creates a deep copy of a LexSymbolSet, returning a new instance with identical symbol mappings.
7272	Set updates symbol priority in LexSymbolSet and resets sorted list
7273	GetSortedList sorts symbols in a LexSymbolSet by priority, returning a sorted list.
7274	Top will return the top item from the stack and an error if the stack is empty
7275	Resize stack to specified size copying elements.
7276	Extend stack size by specified amount.
7277	Grow stack buffer size if needed
7278	Get retrieves item at index i from stack, returns item and error if out of range
7279	Set updates stack element at index i with value v, resizing buffer if necessary.
7280	Push adds a value to the stack if there is space, resizing if necessary.
7281	Pop removes and returns the top element of the stack or nil if empty.
7282	Stack String method converts stack content to formatted string.
7283	GetHostIPs retrieves all host IP addresses excluding those from docker interfaces.
7284	GetPrivateHostIPs retrieves private IPv4 addresses from all host IPs, skipping loopbacks and public ones.
7285	IsPrivate checks if an IP address belongs to any specified private networks and returns true if it does.
7286	Environ collects environment variables based on flag values and returns them as strings.
7287	getenv retrieves an environment variable value and checks if it exists
7288	flagAsEnv converts a string to uppercase, prepends a prefix, replaces dots and hyphens with underscores, and returns the result
7289	NewPolicy initializes a default policy for password validation with specified minimum and maximum lengths, and character pools for lowercases, uppercases, digits, and special characters.
7290	CreateRandom generates a byte slice of specified length with random elements from given byte slice.
7291	Shuffle rearranges byte slice randomly
7292	Generate will create a password based on given policy rules and return it along with an error if the policy is invalid
7293	ExecutableFolder returns the path of the executable's containing folder and an error if failed
7294	Ignore adds functions to filter errors before processing them, returning an option to configure a Sentinel instance.
7295	Sigs sets shutdown signals for a sentinel and returns an error if already started
7296	Logf sets log function for sentinel and returns option
7297	Errorf sets a custom error formatting function for Sentinel
7298	New creates a Sentinel instance with default settings, applies optional configurations, and ensures necessary fields are initialized.
7299	Run starts Sentinel, handles server functions and graceful shutdown, returning an error if startup fails or shutdown is ignored.
7300	Shutdown executes all registered functions with a timeout and returns the first error encountered.
7301	ShutdownIgnore checks if an error should be ignored based on Sentinel's ignoreErrors list and returns true if it should be.
7302	Register adds server and shutdown functions with optional error handlers and returns an error if conversion fails.
7303	Mux sets up a network listener with options, registers it, and returns the Netmux instance or an error.
7304	HTTP sets up and starts an HTTP server with given listener, handler, and options, returning an error if already started or setup fails.
7305	IgnoreError creates a function that checks if an error equals a specified error.
7306	IgnoreNetOpError checks if the error is a net OpError due to a closed network connection and returns true if so.
7307	convertAndAppendContextFuncs converts and appends functions to a slice, returning an error if any function has an invalid type.
7308	router configures HTTP routes based on services and API data, returning a configured *mux.Router
7309	buildInfoHandler sends "build-info" response
7310	JsonEncoder.Encode serializes input data to JSON, handling pointers and structs, and returns the resulting byte array and error.
7311	Json decodes JSON data from request body into struct, handles errors, and validates using provided interfaces.
7312	validateAndMap will validate an object, combine errors, map the object and optional interface to Martini context
7313	Errors.Count returns total count of errors from Overall and Fields fields
7314	Header method adds CORS headers based on options.
7315	PreflightHeader checks origin, method, and headers, returning appropriate CORS headers.
7316	IsOriginAllowed checks if an origin is allowed based on patterns in AllowOrigins and returns a boolean result.
7317	Allow sets CORS headers based on request options and origin.
7318	Renderer prepares options, compiles template, and returns a Martini handler mapping renderer to context.
7319	AcceptLanguages will return a string representation of languages and their quality scores
7320	Languages handler maps parsed accept-language headers to context
7321	Prefix middleware removes specified path prefix from request URL or returns 404 if prefix does not match.
7322	Basic authenticates HTTP requests using username and password, returning a handler that checks Authorization header.
7323	UpdateUser updates session with user ID and returns error
7324	MyUserModel GetById fetches user by ID from database and returns error if failed
7325	AddressToAccountId converts a Stellar address to an AccountId object.
7326	MutateChangeTrust updates an Asset's change trust operation, returning an error if the native asset is used.
7327	MutateChangeTrust updates the limit of a ChangeTrust operation with a parsed amount from a string.
7328	Trust constructs a change trust operation with asset details and optional limits
7329	RemoveTrust constructs a Trust transaction with specified asset details and additional options.
7330	MutatePayment updates payment or path payment operation with credit amount details and returns an error if operation type is unexpected.
7331	MutatePayment updates payment destination based on operation type, returning error for unexpected types
7332	MutatePayment updates payment or path payment operation amounts and assets based on native amount.
7333	MutatePayment updates a payment operation with max amount, path, and send asset.
7334	MutateAccountMerge updates account merge destination with given address or seed.
7335	MustParse converts a string to Int64, panicking if parsing fails.
7336	Parse converts a string to an Int64, returning an error if parsing fails.
7337	Converts an Int64 to a float string with 7 decimal places.
7338	CreateOffer constructs an offer using a rate and amount, returning a ManageOfferBuilder instance.
7339	CreatePassiveOffer constructs a passive offer using given rate and amount.
7340	UpdateOffer constructs a ManageOfferBuilder instance with specified parameters.
7341	DeleteOffer will manage an offer with specified rate and ID, returning a ManageOfferBuilder result
7342	ManageOffer sets passive offer flag and applies mutations to result builder
7343	Mutate applies a series of mutations to either PassiveOffer or MO based on the mutator type, setting Err if any mutation fails.
7344	MutateManageOffer updates an offer's amount based on the operation type and returns an error if the operation is unexpected.
7345	MutateManageOffer updates ManageOfferOp's OfferId with current OfferID and returns an error if the operation type is unexpected.
7346	MutateManageOffer updates an offer object based on the Rate's properties, converting types and validating prices.
7347	MutateOperation sets operation source account to empty and updates it with given address or seed.
7348	Price's String method converts rational number to float string with 7 digits precision.
7349	Transaction applies a series of mutations to a transaction builder and returns it.
7350	Mutate applies transaction mutations, updating builder state or returning an error if any mutation fails.
7351	Hash calculates transaction bytes and returns their SHA-256 hash.
7352	HashHex will return the transaction hash as a hexadecimal string and an error if hashing fails
7353	Sign will update transaction builder with signer details and return updated envelope builder
7354	MutateTransaction updates transaction with allow trust operation and returns error if any
7355	MutateTransaction updates a transaction with a change trust operation and returns an error if any issue occurs.
7356	MutateTransaction updates transaction with create account operation and returns error if any.
7357	MutateTransaction adjusts transaction fee and network ID if zero, then returns nil.
7358	MutateTransaction updates transaction builder with inflation operation and returns error if any.
7359	MutateTransaction updates transaction body with manage data operation and appends it to operations list.
7360	MutateTransaction updates transaction operations based on offer type and returns an error if any issues arise
7361	MutateTransaction updates transaction memo with hash value.
7362	MutateTransaction updates transaction memo with MemoID value.
7363	MutateTransaction updates transaction memo with MemoReturn value.
7364	MutateTransaction updates a transaction builder with memo text, validating length before setting memo field.
7365	MutateTransaction updates the transaction builder's network ID with the network's ID and returns no error
7366	MutateTransaction updates transaction builder with payment operation based on path payment condition.
7367	MutateTransaction updates transaction options and appends operation, returning any errors encountered.
7368	MutateTransaction updates transaction sequence number with given sequence.
7369	MutateTransaction updates the transaction source account using the account ID from the source.
7370	Scan assigns an int64 value to an Int64 instance and returns an error if the value is invalid.
7371	b.InitialState retrieves the initial state entry for a given key, returning it or an error if not found or incorrect type.
7372	Changes retrieves ledger entry changes for a given target up to the maximum integer value.
7373	StateAfter retrieves the last change for a given key and operation index, returning the associated ledger entry or an error if not found or unknown.
7374	changes filters ledger entry changes matching target key up to max operations
7375	MustDecode decodes a version byte from a source string, panicking if an error occurs and returning the decoded bytes otherwise.
7376	Encode converts data into a versioned, checksummed, Base32-encoded string.
7377	MustEncode encodes byte slice using version and panics on error, returning encoded string
7378	checkValidVersionByte will validate a version byte and return an error if it is not valid
7379	Checksum calculates CRC16 for input data and returns it as a byte slice.
7380	Validate will compare the calculated checksum of data with the expected checksum and return an error if they don't match
7381	LedgerKey retrieves the ledger key based on the change type.
7382	checkPlausible verifies if all runes in prefix are part of the base32 alphabet, exiting if any are invalid.
7383	accountId.Address() returns encoded account ID based on key type or panics for unknown types
7384	accountId equals another accountId based on type and key value
7385	SetAddress decodes a base32 account ID string, validates its length, converts it to a Uint256, and assigns it to the AccountId field, returning an error if decoding fails or the length is incorrect.
7386	ToXdrObject converts an Asset to an XDR object based on its type and properties.
7387	PayWithPath appends an asset to its Path and returns itself
7388	PayWith constructs a PayWithPath instance with specified asset and maximum amount.
7389	continuedFraction converts a string price to an xdr.Price using continued fraction approximation.
7390	TransactionEnvelopeBuilder applies mutators to a transaction envelope, initializing first and stopping on error.
7391	MutateTX applies mutators to the transaction envelope builder and updates the error accordingly.
7392	Bytes converts TransactionEnvelopeBuilder to byte array, returning error if failed
7393	Base64 encodes the transaction envelope bytes and returns the result along with any errors.
7394	MutateTransactionEnvelope updates transaction envelope with builder's state and returns error if present
7395	MutateSetOptions sets HomeDomain on SetOptionsOp if it's within 32 bytes, otherwise returns an error
7396	MutateSetOptions sets the inflation destination to an empty account ID and returns an error if setting fails.
7397	MutateSetOptions sets the master weight option in XDR.
7398	MutateSetOptions updates a SetOptionsOp with a signer based on the Signer instance's weight and public key, returning an error if the account ID cannot be set.
7399	SetThresholds assigns pointers to low, medium, and high values in a Thresholds struct.
7400	MutateSetOptions updates thresholds in a SetOptionsOp object based on the receiver's Low, Medium, and High values.
7401	MutateSetOptions updates the SetFlags field of xdr.SetOptionsOp based on the SetFlag instance, ensuring validity and combining flags appropriately.
7402	ClearFlag MutateSetOptions sets the clear flags on a SetOptionsOp object and returns an error if the flag is invalid.
7403	MutateCreateAccount updates the destination account ID using the provided address or seed.
7404	MutateCreateAccount sets StartingBalance of CreateAccountOp using parsed amount from NativeAmount.
7405	Random generates a Full keypair using a secure random seed.
7406	Master generates a key pair from a network passphrase and panics if an error occurs.
7407	Parse will return a KP object and an error based on the input being a valid account ID or seed, or an appropriate error if neither is valid
7408	MustParse converts address or seed to KP, panics on error.
7409	MutateAllowTrust updates the AllowTrustOp's Authorize field with the Authorize object's Value and returns nil.
7410	MutateAllowTrust sets asset code based on length and returns error if invalid
7411	MutateAllowTrust updates trustor account ID in operation.
7412	ToAsset converts AllowTrustOpAsset to Asset, creating new instances based on asset type and validating with issuer.
7413	SetNative updates Asset to native type and returns error if creation fails
7414	Asset's String method returns its type, category, and ID as a formatted string.
7415	Asset Equals compares two assets based on type and specific fields, returning true if they match.
7416	MustExtract will panic if Extract returns an error
7417	Unmarshal reads data from reader r into value v using XDR format and returns bytes read and error.
7418	Marshal delegates to xdr package's Marshal to write data to writer and returns bytes written and error if any.
7419	CryptoKeyType.ValidEnum checks if an enum value is valid based on a map.
7420	NewPublicKey creates a new public key with specified type and value, returning an error if the value is invalid.
7421	MustEd25519 retrieves Ed25519 key from public key or panics if not set.
7422	NewNodeId generates a NodeId from a public key of specified type and value.
7423	NewAccountId generates an AccountId from a public key.
7424	ValidEnum checks if an enum value is valid by looking it up in a map.
7425	ArmForSwitch returns asset type string and a boolean flag
7426	NewAsset creates an Asset based on type and value, setting AlphaNum4 or AlphaNum12 accordingly or returning an error if the value is invalid.
7427	MustAlphaNum4 panics if Asset's AlphaNum4 is not set, otherwise returns it.
7428	GetAlphaNum4 retrieves AlphaNum4 asset based on type and returns it along with a boolean flag.
7429	MustAlphaNum12 panics if Asset's AlphaNum12 is not set and returns the value otherwise.
7430	GetAlphaNum12 retrieves AlphaNum12 asset based on type, returning it and a boolean indicating success.
7431	ValidEnum checks if v is a valid enum value based on thresholdIndexesMap.
7432	ValidEnum checks if a given enum value exists in the map.
7433	ValidEnum checks if an integer is a valid enum value in AccountFlags.
7434	NewAccountEntryExt creates an AccountEntryExt with given int32 value and interface{}, returns the result and error.
7435	ValidEnum checks if a given integer is a valid enum value in TrustLineFlags.
7436	NewTrustLineEntryExt sets TrustLineEntryExt V field based on input int32 and returns it.
7437	ValidEnum checks if v is a valid OfferEntryFlags value.
7438	NewOfferEntryExt sets OfferEntryExt V field based on int32 input and handles case 0 specifically.
7439	NewDataEntryExt creates a DataEntryExt instance with a value and returns it.
7440	NewLedgerEntryData creates a LedgerEntryData based on type and validates the associated value.
7441	NewLedgerEntryExt creates a LedgerEntryExt instance with a given integer and value, returning an error if invalid.
7442	EnvelopeType.ValidEnum checks if an integer is a valid enum value.
7443	ValidEnum checks if an integer represents a valid OperationType enum value.
7444	ArmForSwitch evaluates asset type and returns corresponding code and success status
7445	NewAllowTrustOpAsset creates an AllowTrustOpAsset based on asset type and value, setting appropriate asset code and returning it or an error.
7446	MustAssetCode4 retrieves and returns a 4-byte asset code, panicking if not set.
7447	GetAssetCode4 retrieves asset code 4 if available, returning the result and a boolean flag.
7448	MustAssetCode12 retrieves and returns the 12-byte asset code, panicking if not set.
7449	GetAssetCode12 retrieves the AssetCode12 from AllowTrustOpAsset if the arm name matches, returning it and a boolean flag.
7450	NewOperationBody creates an OperationBody based on OperationType and validates the associated value, returning an error if the value does not match the expected type.
7451	MustCreateAccountOp retrieves CreateAccountOp from OperationBody, panicking if not set.
7452	GetCreateAccountOp retrieves CreateAccountOp if armName matches and sets result accordingly.
7453	MustPaymentOp retrieves PaymentOp from OperationBody, panics if not set.
7454	GetPaymentOp retrieves payment operation based on operation body type.
7455	MustPathPaymentOp retrieves PathPaymentOp from OperationBody, panicking if unset.
7456	GetPathPaymentOp extracts PathPaymentOp from OperationBody if available.
7457	MustManageOfferOp retrieves and returns ManageOfferOp, panicking if not set.
7458	GetManageOfferOp extracts ManageOfferOp from OperationBody based on Type, returning it and a flag.
7459	MustCreatePassiveOfferOp retrieves CreatePassiveOfferOp from OperationBody, panics if not set.
7460	GetCreatePassiveOfferOp extracts operation details based on switch type and returns passive offer operation if applicable.
7461	MustSetOptionsOp retrieves and returns the SetOptionsOp value from OperationBody, panicking if it's not set.
7462	GetSetOptionsOp retrieves SetOptionsOp from OperationBody if applicable.
7463	MustChangeTrustOp retrieves ChangeTrustOp from OperationBody, panics if not set.
7464	GetChangeTrustOp retrieves ChangeTrustOp if available.
7465	MustAllowTrustOp retrieves AllowTrustOp from OperationBody, panicking if not set.
7466	GetAllowTrustOp extracts AllowTrustOp from OperationBody based on type, returning it and a flag.
7467	MustDestination retrieves the account ID from the operation body, panicking if not set.
7468	GetDestination extracts an account ID from an operation body if the ARM name is "Destination".
7469	MustManageDataOp will return the ManageDataOp value if set, otherwise panic
7470	GetManageDataOp retrieves ManageDataOp based on operation type and returns it along with a boolean flag indicating success.
7471	ValidEnum checks if a given integer is a valid enum value in MemoType.
7472	ArmForSwitch maps memo types to strings and returns success flag
7473	NewMemo creates a Memo object based on type and value, setting appropriate fields and validating types.
7474	Memo.MustText returns the text value or panics if not set
7475	Memo.GetText retrieves text content and its availability based on switch arm selection.
7476	MustId retrieves the ID from a Memo instance, panicking if not set.
7477	GetId retrieves the ID from Memo if the associated arm name is "Id".
7478	MustHash retrieves hash value from Memo, panics if not set.
7479	GetHash retrieves a hash value and a flag indicating success based on memo type and arm name.
7480	MustRetHash retrieves hash value from Memo, panics if not set.
7481	NewTransactionExt creates a TransactionExt instance with a given version and assigns it to result.
7482	ValidEnum checks if an integer value exists in a map and returns true if it does, otherwise false.
7483	ArmForSwitch will return an empty string and true for any CreateAccountResultCode
7484	NewCreateAccountResult sets result code and handles success case
7485	PaymentResultCode.ValidEnum checks if a given enum value is valid based on a map lookup.
7486	ArmForSwitch checks payment result and returns empty string and true for success, otherwise returns empty string and true
7487	NewPaymentResult sets payment result code and handles success case.
7488	ValidEnum checks if an integer is a valid PathPaymentResultCode
7489	ArmForSwitch converts a switch value to a result string and success flag.
7490	NewPathPaymentResult constructs a PathPaymentResult based on code and value, setting appropriate fields and validating types.
7491	MustNoIssuer retrieves the NoIssuer asset or panics if not set.
7492	GetNoIssuer returns the NoIssuer asset and true if available, otherwise returns default asset and false
7493	ValidEnum checks if v is a valid ManageOfferResultCode.
7494	ValidEnum checks if v is a valid enum value in manageOfferEffectMap and returns true if it is.
7495	ArmForSwitch returns a string and a boolean based on the offer effect
7496	NewManageOfferSuccessResultOffer constructs a success result based on offer effect and validates the associated value.
7497	ArmForSwitch evaluates switch status and returns success message and flag
7498	NewManageOfferResult creates a ManageOfferResult based on code and value, setting success field if code is ManageOfferSuccess and value is valid.
7499	ValidEnum checks if v is a valid enum value in setOptionsResultCodeMap.
7500	ArmForSwitch evaluates switch result and returns empty string and true
7501	NewSetOptionsResult constructs a SetOptionsResult based on the given code and value, initializing the result with the provided code and handling different success cases.
7502	ValidEnum checks if v is a valid ChangeTrustResultCode.
7503	ArmForSwitch evaluates switch result and returns empty string and true
7504	NewChangeTrustResult constructs a ChangeTrustResult based on the given code and value, initializing the Code field and returning an error if the code is not recognized.
7505	AllowTrustResultCode.ValidEnum checks if an integer is a valid enum value.
7506	ArmForSwitch processes switch result and returns empty string and true
7507	NewAllowTrustResult constructs an AllowTrustResult based on the given code and value, returning the result and any errors encountered.
7508	ValidEnum checks if v is a valid enum value for AccountMergeResultCode
7509	ArmForSwitch evaluates an account merge result code and returns a switch key and success flag.
7510	NewAccountMergeResult creates an AccountMergeResult based on code and value, setting SourceAccountBalance if successful.
7511	MustSourceAccountBalance retrieves source account balance from AccountMergeResult, panics if not set.
7512	GetSourceAccountBalance retrieves balance from account merge result if applicable.
7513	ValidEnum checks if an integer value corresponds to a known enum in InflationResultCode.
7514	ArmForSwitch determines if inflation switch succeeded and returns corresponding payout status
7515	NewInflationResult creates an InflationResult based on the code and value, setting payouts if successful, and returning an error if invalid.
7516	MustPayouts retrieves payouts from InflationResult, panicking if unset.
7517	GetPayouts retrieves payouts if the arm name matches "Payouts".
7518	ManageDataResultCode.ValidEnum checks if a given integer is a valid enum value.
7519	ArmForSwitch will return an empty string and true for success or default case
7520	NewManageDataResult sets result code and handles success case
7521	ValidEnum checks if v is a valid OperationResultCode.
7522	ArmForSwitch maps operation types to result strings and success flags
7523	NewOperationResultTr sets operation result based on type and value, returning an error if mismatched.
7524	MustCreateAccountResult will return the CreateAccountResult value and panic if not set
7525	GetCreateAccountResult retrieves CreateAccountResult if armName matches and sets ok to true, otherwise returns default values.
7526	MustPaymentResult retrieves payment result from operation result, panics if not set.
7527	GetPaymentResult retrieves payment result based on operation type and returns it along with a boolean flag indicating success.
7528	MustPathPaymentResult retrieves PathPaymentResult from OperationResultTr, panicking if unset.
7529	GetPathPaymentResult retrieves PathPaymentResult from OperationResultTr based on Type, returning result and a boolean flag indicating success.
7530	MustManageOfferResult will panic if arm ManageOfferResult is not set otherwise it returns the ManageOfferResult
7531	GetManageOfferResult retrieves a ManageOfferResult object and a boolean indicating success based on the operation type.
7532	MustCreatePassiveOfferResult will panic if arm CreatePassiveOfferResult is not set and return the result otherwise
7533	MustSetOptionsResult will panic if SetOptionsResult is not set and return the result otherwise
7534	GetSetOptionsResult retrieves a SetOptionsResult object and a boolean indicating success based on the operation type.
7535	MustChangeTrustResult panics if ChangeTrustResult is not set and returns it otherwise
7536	GetChangeTrustResult extracts ChangeTrustResult from OperationResultTr based on Type.
7537	MustAllowTrustResult retrieves AllowTrustResult from OperationResultTr, panics if not set.
7538	GetAllowTrustResult retrieves the allow trust result and a boolean indicating success.
7539	MustAccountMergeResult retrieves AccountMergeResult from OperationResultTr, panics if not set.
7540	GetAccountMergeResult extracts account merge result from operation result if available.
7541	MustInflationResult will return the inflation result if set, otherwise panic
7542	GetInflationResult extracts inflation result based on operation type, returning the result and success flag.
7543	MustManageDataResult panics if arm ManageDataResult is not set and returns the result otherwise
7544	GetManageDataResult extracts ManageDataResult from OperationResultTr based on ArmForSwitch result.
7545	ArmForSwitch will return a status message and a boolean indicating success based on the operation result code
7546	NewOperationResult creates an operation result based on code and value, setting Tr field if code is OpInner and value is valid.
7547	MustTr retrieves Tr value from OperationResult, panics if not set.
7548	GetTr retrieves Tr operation result based on code, returns result and success flag.
7549	ValidEnum checks if a given integer is a valid transaction result code.
7550	ArmForSwitch handles transaction results, returning "Results" and true for success or failure codes, and empty string with true for other cases
7551	NewTransactionResultResult constructs a transaction result based on the given code and value, setting the results field if successful, and returning an error if the value is invalid.
7552	MustResults panics if arm Results is not set and returns the results otherwise
7553	GetResults retrieves operation results based on transaction code, returning them and a flag indicating success.
7554	NewTransactionResultExt creates a transaction result with a value and sets it based on the integer.
7555	NewStellarValueExt creates a StellarValueExt instance with a given integer and interface value, returning an error if the integer is zero.
7556	NewLedgerHeaderExt sets the version and returns a LedgerHeaderExt instance or an error
7557	ValidEnum checks if v is a valid enum value for LedgerUpgradeType.
7558	ArmForSwitch returns upgrade type based on input int32 and a boolean flag
7559	NewLedgerUpgrade creates a LedgerUpgrade object based on type and validates the provided value as Uint32.
7560	MustNewLedgerVersion panics if arm NewLedgerVersion is not set, otherwise returns the version.
7561	GetNewLedgerVersion retrieves the new ledger version if available, returning the result and a flag indicating success.
7562	MustNewBaseFee retrieves the new base fee from a ledger upgrade, panicking if not set.
7563	GetNewBaseFee retrieves the new base fee from the ledger upgrade if applicable.
7564	MustNewMaxTxSetSize retrieves the maximum transaction set size from the ledger upgrade, panicking if not set.
7565	GetNewMaxTxSetSize fetches the new max tx set size from ledger upgrade and returns it along with a boolean indicating success.
7566	LedgerKey.ArmForSwitch maps switch value to ledger entry type string and success flag
7567	NewLedgerKey constructs a LedgerKey based on type and validates the associated value.
7568	ValidEnum checks if an integer value is a valid enum entry in bucketEntryTypeMap.
7569	ArmForSwitch returns entry type and validity based on switch value
7570	NewBucketEntry creates a BucketEntry based on type and validates the value accordingly.
7571	MustLiveEntry retrieves live entry from bucket, panics if not set, returns entry.
7572	GetLiveEntry retrieves LiveEntry from BucketEntry if available.
7573	MustDeadEntry retrieves the LedgerKey from BucketEntry, panicking if unset.
7574	GetDeadEntry retrieves the dead entry from a bucket if present.
7575	NewTransactionHistoryEntryExt creates a transaction history entry with extended properties based on the given integer and value, returning the result and any encountered error.
7576	ArmForSwitch sets switch status and returns arm state
7577	NewTransactionHistoryResultEntryExt sets transaction history result entry extension based on integer value and returns it.
7578	NewLedgerHeaderHistoryEntryExt constructs a LedgerHeaderHistoryEntryExt instance with a version and value, returning an error if the version is unsupported.
7579	NewScpHistoryEntry creates a history entry with version and specific data type, returning an error if the data type is incorrect.
7580	ValidEnum checks if a given integer is a valid enum value for LedgerEntryChangeType.
7581	ArmForSwitch returns a status message and a boolean indicating success based on the LedgerEntryChangeType.
7582	NewLedgerEntryChange creates a LedgerEntryChange based on type and validates the value accordingly.
7583	MustCreated retrieves created value from LedgerEntryChange or panics if not set.
7584	GetCreated retrieves a LedgerEntry if its type corresponds to a "Created" arm, returning the entry and a boolean flag.
7585	MustUpdated will return the updated LedgerEntry value or panic if not set
7586	GetUpdated retrieves updated ledger entry based on type and returns it along with a boolean flag.
7587	MustRemoved retrieves removed key from LedgerEntryChange, panics if not set.
7588	GetRemoved extracts removed key from ledger entry if applicable.
7589	MustState retrieves the state from LedgerEntryChange, panicking if not set.
7590	GetState retrieves state from ledger entry if applicable.
7591	NewTransactionMeta creates a TransactionMeta object with version and operations if valid.
7592	MustOperations retrieves operations from TransactionMeta, panics if unset.
7593	GetOperations retrieves operations from transaction metadata if arm name matches.
7594	ValidEnum checks if an integer is a valid enum value based on a map lookup.
7595	ValidEnum checks if an integer is a valid IP address type enumeration value.
7596	ArmForSwitch will return IP address type and a boolean indicating success
7597	NewPeerAddressIp creates a PeerAddressIp instance based on the given IP address type and value, returning an error if the value is invalid.
7598	MustIpv4 panics if IPv4 is not set and returns the IPv4 address as a 4-byte array.
7599	GetIpv4 extracts IPv4 address from PeerAddressIp if available.
7600	MustIpv6 returns IPv6 address as byte array or panics if not set
7601	GetIpv6 extracts IPv6 address from PeerAddressIp if available.
7602	MessageType.ValidEnum checks if an enum value is valid using a map lookup.
7603	ArmForSwitch converts a switch message type to a string representation and returns a boolean indicating success.
7604	NewStellarMessage creates a StellarMessage based on MessageType and assigns corresponding value, returning an error if type mismatch.
7605	MustError panics if arm Error is not set, otherwise returns the error
7606	GetError retrieves error information from a StellarMessage based on its type.
7607	MustHello retrieves the Hello value from StellarMessage, panicking if not set.
7608	StellarMessage.GetHello retrieves a Hello message and a boolean flag indicating success based on the ArmForSwitch result.
7609	StellarMessage.MustAuth retrieves authentication value, panics if not set, returns Auth.
7610	GetAuth extracts authentication details from a StellarMessage if the ARM name matches "Auth".
7611	MustDontHave retrieves the DontHave value from StellarMessage, panicking if unset.
7612	GetDontHave retrieves a DontHave message based on the message type, returning it along with a boolean indicating success.
7613	MustPeers retrieves peers from StellarMessage or panics if unset.
7614	StellarMessage.GetPeers retrieves PeerAddresses based on message type, returning them and a success flag.
7615	MustTxSetHash retrieves the transaction set hash from a Stellar message, panicking if not set.
7616	StellarMessage.GetTxSetHash retrieves TxSetHash if available, returning the hash and true; otherwise, it returns zero and false.
7617	MustTxSet retrieves the transaction set from a Stellar message, panicking if not set.
7618	StellarMessage.GetTxSet retrieves TransactionSet if armName equals "TxSet".
7619	MustTransaction retrieves a TransactionEnvelope from a StellarMessage, panicking if none is set.
7620	GetTransaction extracts TransactionEnvelope from StellarMessage if armName is "Transaction".
7621	MustQSetHash retrieves the QSetHash from StellarMessage and panics if not set.
7622	GetQSetHash retrieves the QSetHash from StellarMessage if available, returning the result and a boolean flag.
7623	MustQSet retrieves the QuorumSet from a StellarMessage, panicking if not set.
7624	StellarMessage.GetQSet retrieves QuorumSet if armName is "QSet".
7625	StellarMessage.MustEnvelope returns the ScpEnvelope value or panics if not set
7626	StellarMessage.GetEnvelope retrieves Envelope from ArmForSwitch result and sets ok to true if successful.
7627	MustGetScpLedgerSeq retrieves the SCP ledger sequence from a Stellar message, panicking if unset.
7628	StellarMessage retrieves SCP ledger sequence if arm name matches.
7629	ArmForSwitch evaluates switch ID and returns corresponding string and status.
7630	NewAuthenticatedMessage constructs an AuthenticatedMessage based on version and value, returning an error if the value type is incorrect.
7631	ValidEnum checks if a given integer is a valid SCP statement type.
7632	ArmForSwitch returns a string based on the SCP statement type and a boolean indicating success.
7633	NewScpStatementPledges constructs a ScpStatementPledges object based on the given type and value, setting the appropriate field and validating the input type.
7634	MustPrepare retrieves the prepare value from ScpStatementPledges, panicking if not set.
7635	GetPrepare retrieves Prepare statement based on SCP type.
7636	MustConfirm retrieves confirmed statement value or panics if not set.
7637	GetConfirm retrieves confirmation details based on statement type, returning result and validity flag.
7638	MustExternalize retrieves externalized value or panics if not set
7639	GetExternalize retrieves externalize data based on statement type, returning it and a boolean flag.
7640	MustNominate retrieves the nomination value from ScpStatementPledges, panicking if not set.
7641	GetNominate retrieves nomination result based on SCP statement type.
7642	SafeUnmarshalBase64 decodes Base64 data into a destination object, returning an error if decoding fails or if the entire input is not consumed.
7643	SafeUnmarshal reads data into dest and verifies full consumption, returning error if incomplete.
7644	SendAmount calculates total bought amount for the first asset in successful offers.
7645	LoadAccount fetches an account using an ID and returns the account data and an error.
7646	SequenceForAccount fetches account details and returns its sequence number as a uint64.
7647	SubmitTransaction sends a transaction envelope to the server and decodes the response into a TransactionSuccess object.
7648	Equals compares two LedgerKey instances based on their types and specific fields, returning true if they are equal.
7649	SetAccount assigns an account ID to a ledger key and updates the key with the new value.
7650	SetData assigns account and name to LedgerKey and returns error if failed
7651	SetOffer updates a key with an offer account and ID, returning an error if unsuccessful.
7652	SetTrustline updates the ledger key with trustline data and returns an error if failed
7653	CHDBuilder appends key-value pairs to its internal storage.
7654	tryHash updates bucket data, detects duplicates, and updates hash table
7655	HashIndexFromKey computes hash index using key and hasher, applying rotation and modulo buckets.
7656	ReadInt reads 4 bytes from the reader and converts them to a uint64 using little-endian byte order
7657	Read reads data from reader r and maps it to a CHD object, returning an error if reading fails.
7658	Get retrieves a value by key using a custom hash function and compares keys byte-wise.
7659	Iterate over CHD keys, returning Iterator or nil
7660	CHD.Write serializes data to an io.Writer using little-endian binary format, returning an error if serialization fails.
7661	RegisterDatasources converts path to C string, registers datasources, and handles errors.
7662	RegisterFonts converts path to CString, registers fonts, and returns error if registration fails.
7663	New creates a new Map object with default dimensions.
7664	NewSized creates a Map instance with specified width and height, returning a pointer to it.
7665	Load stylesheet into map, return error if failed
7666	Resize updates map dimensions and calls C library function.
7667	Free will release the memory associated with a map and reset the internal pointer.
7668	SRS retrieves spatial reference system from mapnik map object
7669	ZoomAll updates map zoom level and returns error if failed
7670	ZoomTo updates map's zoom level based on specified bounding box coordinates.
7671	Render map image with optional scaling and format, returning byte array or error
7672	RenderImage will render a map image using specified options and return the NRGBA image along with any errors encountered
7673	RenderToFile saves map to file with specified options and scale factor, defaulting to PNG format.
7674	SetBufferSize updates the buffer size of a Map instance using a C library function.
7675	Search sends a request and reads responses within a timeout.
7676	Get retrieves a connection from the blocking pool, reusing existing ones if available and valid, or creating new ones using a factory function. If no connections are available or valid after waiting, it returns a timeout error.
7677	put adds a connection to the blocking pool, closes it if unusable or pool closed, and returns an error if failed
7678	MonoToStereoF32 converts mono audio data to stereo by duplicating each sample.
7679	BitCrush modifies audio buffer data by applying bit reduction using a specified factor.
7680	NormalizeMax normalizes audio data in a buffer by dividing each sample by the maximum absolute value found.
7681	Gain adjusts audio buffer data by multiplying each sample with a given factor.
7682	MonoDownmix reduces multichannel audio to mono by averaging channel data.
7683	Quantize rescales audio data based on bit depth using rounding.
7684	PCMScale adjusts audio data based on bit depth, scaling each sample accordingly.
7685	StereoPan adjusts audio buffer pan between left and right channels based on input value.
7686	Leader method returns the current leader string while locking the follower object
7687	IsLeader checks if the candidate is a leader while holding a lock.
7688	NewResponse constructs a Response object with provided clientID, redirectURI, userID, exp, and code.
7689	GetRequestID retrieves request ID from context, returning an error if context is nil, contains unexpected type, or has empty value.
7690	Log will record a log entry based on the writer's options and current state, filtering and formatting the message before writing it to the specified destination.
7691	SendMailSSL establishes an SSL connection, authenticates, sends an email, and closes the connection.
7692	Send email message using SMTP service
7693	WaitForIt establishes a TCP connection to a specified host and port, waits for a timeout period, and verifies both TCP and HTTP connectivity before returning an error if any step fails.
7694	Get reads configuration from a file or source, unmarshals YAML, retrieves specific environment settings, and returns them or an error.
7695	initConfig sets up configuration using Viper, reading from specified or default paths and environment variables.
7696	WritePluginResultsToDatabase inserts or updates plugin results in the RethinkDB database based on the sample ID.
7697	NewAuthController creates an AuthController instance with UserManager and Config.
7698	Authenticate handles JSON request, extracts user credentials, verifies them, generates JWT, and sends token response.
7699	NewOAuth2Controller creates an instance of OAuth2Controller with provided ApplicationManager and Config.
7700	Refresh OAuth2 access token using refresh token and respond with new access token details.
7701	Token handler verifies grant type and code, decodes OAuth2 code, generates access and refresh tokens, and responds with JSON data.
7702	Logging wraps HTTP handlers, logs request details including client IP, latency, response length, and status code.
7703	SingleFile creates an HTTP handler that serves a file specified by the given filename.
7704	StatusResponseWriter Write updates length and delegates data write operation
7705	Hijack attempts to convert ResponseWriter to Hijacker, returning net.Conn, bufio.ReadWriter, and error if unsuccessful.
7706	NewMongo creates a MongoDB client using configuration details and validates connection.
7707	Disconnect MongoDB client and log error if failure
7708	New creates a new Table instance with given fields and empty rows.
7709	PrintTable constructs and prints a table from given fields and rows.
7710	PrintHorizontal prints a table representation of a map with keys and values.
7711	PrintRow generates a table from fields and row data, then prints it.
7712	AddRow adds a new row to the table, formatting values and calculating sizes.
7713	Print table rows with optional header and footer, adjusting sizes based on content.
7714	Table.String will generate a formatted table string based on the title, rows, and footer, adhering to Markdown formatting rules if specified.
7715	table head row with field names in title case
7716	rowString constructs a formatted row string based on table fields and corresponding values
7717	fieldString adds padding to a string based on a table's column width
7718	stringTableDash returns markdown dash string if Markdown flag is true else regular dash string
7719	printMarkdownDash prints a markdown dash row based on field sizes
7720	stringMarkdownDash generates a markdown dash row based on table fields and sizes.
7721	HashPassword generates a hashed password using scrypt with given salt and parameters, returning the hash and any errors encountered.
7722	EncodeOAuth2Code generates a secure OAuth2 token using client details, user info, and a shared key.
7723	DecodeOAuth2Code will verify a JWT token using a shared key and decode its payload into a response object, returning an error if verification fails.
7724	NewServer creates a server instance using config from a file and sets up logging based on the configuration.
7725	Start starts a server, listens on specified port, handles SSL/TLS if configured, serves requests, shuts down gracefully, and logs termination.
7726	Stop method stops server if started, logs message, sends quit signal, or handles error if not running.
7727	NewLoggingServeMux creates a LoggingServeMux instance with given config.
7728	Handler retrieves handler and pattern from LoggingServeMux's serveMux.
7729	Handle registers a pattern and logging wrapper for HTTP handlers
7730	HandleFunc registers a handler function for a specific pattern in the LoggingServeMux.
7731	Init initializes the database, tests connection, creates client, checks index existence, and creates index if necessary.
7732	WaitForConnection attempts to establish a connection to Elasticsearch using a specified timeout, retrying every second until successful or the timeout expires.
7733	StoreFileInfo saves file info using Elasticsearch, validating plugins, testing connection, creating client, and indexing data. Returns response or error.
7734	StorePluginResults updates or creates a document in Elasticsearch based on plugin results, logging actions and errors accordingly.
7735	CamelCase converts a string to camel case by splitting words using a regular expression and capitalizing the first letter of each word except the first one.
7736	Getopt retrieves an environment variable value, using a default if the variable is not set.
7737	Getopts retrieves user input, then environment variable, defaults to dfault if empty.
7738	GetSHA256 reads a file and returns its SHA-256 hash as a hexadecimal string.
7739	RunCommand executes a command with optional context, captures output, and handles errors including timeouts.
7740	RemoveDuplicates removes duplicate strings from a slice and returns the unique ones.
7741	Unzip extracts files from a zip archive to a specified target directory, returning an error if any operation fails.
7742	SliceContainsString checks if a string exists in a list of strings and returns true if found, otherwise false.
7743	NewSMTP creates an SMTP client using config from file and environment, authenticates, and sets up mail sending function based on SSL flag.
7744	SendMail sends an email using SMTP, returning an error if unsuccessful.
7745	GetEnvironment retrieves configuration based on environment name.
7746	GetSMTP retrieves SMTP configuration from source based on environment.
7747	GetConfig retrieves configuration from source based on environment, returning parsed Config and any errors encountered.
7748	GetEnvironment retrieves configuration based on environment name.
7749	GetMongo retrieves MongoDB configuration based on source and environment, returning parsed Config and error.
7750	TokenHandler wraps HTTP requests, authenticates using JWT, and passes them to the next handler if valid or unauthorized otherwise.
7751	Receive will process incoming XMPP stanzas, extract and parse them into InMsg, and handle different message types accordingly, returning an appropriate response or error.
7752	Send will send a message and return the number of bytes sent and an error if the message cannot be marshaled or sent
7753	allBoshReleaseNames gathers unique BOSH release names from two maps and returns them as a list.
7754	DeltaJob adds property to map
7755	DeltaJob tracks removed properties by name and value.
7756	AddDeltaJob appends a DeltaJob to Result's DeltaJob field.
7757	Concat appends DeltaJobs from another Result to current Result.
7758	Read release file from location and return reader with error handling
7759	Pulls a release file from either a remote URL or local location, caches it locally if necessary, and returns the filename and any errors encountered.
7760	BuildJob serializes job metadata to JSON, creates job files, writes monit and spec files, and handles errors during the process.
7761	LoadBoshRelease reads a BOSH release file from the given repository and path, returning the parsed release object and any errors encountered.
7762	readBoshRelease reads a BOSH release file from an io.Reader and returns a parsed BoshRelease object along with any errors encountered.
7763	readBoshRelease reads BOSH release files, decodes YAML for manifest, and populates job manifests.
7764	readBoshJob reads a BOSH job manifest from a reader and returns it as an Enaml JobManifest object, along with any errors encountered during the process.
7765	NewRequest creates an HTTP request with authentication and returns it along with an error.
7766	Pushes cloud config to BOSH and handles errors
7767	Generate will create Go structs based on YAML data, write them to disk, and handle type annotations accordingly
7768	CreateNewRecord constructs a record from a property string and YAML data, storing the count, original string, split elements, and YAML properties.
7769	NewShowCmd creates a ShowCmd instance with a release repo and release version.
7770	All will print BOSH releases based on file extension and return an error if loading fails
7771	GetDefaultTaskImageResource returns a default image resource for a Concourse pipeline.
7772	AddRawJob appends a raw job configuration to the pipeline jobs list
7773	AddGroup appends a group config with the given name and jobs to the pipeline.
7774	GetResourceByName searches for a resource by name in ConcoursePipeline and returns its configuration if found.
7775	AddRawResource appends a resource config to the pipeline's resources list.
7776	AddResource appends a resource configuration to the pipeline.
7777	AddGithubResource adds a GitHub resource to the pipeline with the given name and source.
7778	AddBoshIOResource adds a BOSH I/O resource to the pipeline with the given name and source.
7779	AddBoshDeploymentResource adds a BOSH deployment resource to a pipeline.
7780	AddGitResource adds a git resource with specified name and source to Concourse pipeline
7781	allJobNames combines job names from two releases into a list
7782	NewDeploymentManifestFromFile reads a file and returns a DeploymentManifest object.
7783	NewDeploymentManifest converts byte slice to DeploymentManifest object using YAML unmarshalling.
7784	AddRemoteRelease appends a new release to the manifest with specified details and returns an error if failed
7785	AddRemoteStemcell appends a new stemcell entry to the DeploymentManifest with OS, alias, version, URL, and SHA1 details.
7786	Tag retrieves a deployment manifest tag by key, returning an empty string if tags are nil.
7787	RemoveTag removes a tag from the deployment manifest by key.
7788	LoadPivnetRelease pulls a release file, creates a PivnetRelease object, reads the release data, and returns the object or an error.
7789	BoshReleaseOrEmpty retrieves a BoshRelease by name, returning an empty one if not found.
7790	readPivnetRelease reads BOSH releases from a ZIP file and stores them in r.BoshRelease
7791	decodeYaml reads YAML data from a reader and unmarshals it into a given interface, returning any errors encountered during the process.
7792	NewZipWalker creates a Walker instance for a zip file, initializing the path and callbacks map.
7793	NewDiffCmd creates a new DiffCmd instance with specified release repository and two releases.
7794	All generates a diff between two releases and writes it to the specified writer.
7795	DiffCmd.Job executes a job, compares releases, and prints differences to writer.
7796	New creates a differ instance based on release file paths, returning an error if file types mismatch or loading fails.
7797	StructName generates a struct name based on index, package name, and properties, considering parent elements.
7798	TypeName will determine and return the type name based on the current node and its parent nodes, defaulting to interface{} if out of bounds.
7799	NewTgzWalker creates a Walker for reading tar.gz files with callbacks for matching patterns.
7800	NewBackoff creates a backoff instance with given strategy, start duration, and limit duration, then resets it and returns the instance.
7801	Reset will reset the backoff count and duration
7802	NewExponential creates a backoff strategy using exponential algorithm with specified start and limit durations.
7803	NewExponentialFullJitter creates a backoff strategy with exponential full jitter, setting initial and maximum durations.
7804	NewLinear creates a linear backoff instance with specified start and limit durations.
7805	GetLineSize calculates the size of a line in a Sapin based on floor and line indices.
7806	GetMaxSize retrieves the maximum size by calling GetLineSize with specific parameters.
7807	compute generates a sapin tree pattern based on its size and outputs it using putchar
7808	Set timeout for PostAppsParams and return updated instance
7809	WithContext sets the context for PostAppsParams and returns the updated instance.
7810	Set HTTP client for PostAppsParams and return updated instance
7811	WithBody sets the body for PostAppsParams and returns itself.
7812	WithTimeout sets the timeout for GetAppsAppParams and returns the updated object
7813	WithContext sets the context for GetAppsAppParams and returns the modified instance.
7814	WithHTTPClient sets HTTP client for GetAppsAppParams and returns updated params
7815	WithApp sets the app parameter and returns the modified object
7816	UnmarshalBinary reads JSON data into RouteWrapper instance.
7817	WithTimeout sets timeout on GetAppsParams and returns it
7818	WithContext sets the context for GetAppsParams and returns itself
7819	Set HTTP client for GetAppsParams and return modified object
7820	WithTimeout sets timeout for DeleteAppsAppParams and returns the updated instance
7821	WithContext sets the context for DeleteAppsAppParams and returns the updated params.
7822	WithHTTPClient sets HTTP client for DeleteAppsAppParams and returns it.
7823	WithApp sets the app field and returns the modified object
7824	Set timeout for route parameters and return updated object
7825	WithContext sets the context for PatchAppsAppRoutesRouteParams and returns the modified instance.
7826	WithHTTPClient sets the HTTP client and returns the updated object.
7827	WithApp sets app value and returns updated PatchAppsAppRoutesRouteParams instance
7828	WithBody sets body for PatchAppsAppRoutesRouteParams and returns it
7829	WithRoute sets the route and returns the updated object.
7830	WithTimeout sets timeout for PostAppsAppRoutesParams and returns updated params
7831	WithContext sets the context for PostAppsAppRoutesParams and returns the updated object.
7832	WithHTTPClient sets HTTP client for PostAppsAppRoutesParams and returns self
7833	WithApp sets app parameter and returns updated PostAppsAppRoutesParams object
7834	WithBody sets body on PostAppsAppRoutesParams and returns it
7835	WithTimeout sets timeout for PutAppsAppRoutesRouteParams and returns updated params
7836	WithContext sets the context for PutAppsAppRoutesRouteParams and returns itself.
7837	WithApp sets the app parameter and returns the updated PutAppsAppRoutesRouteParams object.
7838	Set body parameter and return updated object
7839	WithRoute sets the route parameter and returns the modified PutAppsAppRoutesRouteParams instance.
7840	WithTimeout sets the timeout for GetAppsAppRoutesParams and returns the updated params object.
7841	WithContext sets the context for GetAppsAppRoutesParams and returns the modified params.
7842	WithHTTPClient sets HTTP client for GetAppsAppRoutesParams and returns self
7843	WithApp sets the app field and returns the updated GetAppsAppRoutesParams instance.
7844	Set timeout for PatchAppsAppParams and return updated instance
7845	WithContext sets the context for PatchAppsAppParams and returns the updated object.
7846	WithHTTPClient sets HTTP client for PatchAppsAppParams and returns self
7847	WithApp sets app parameter and returns updated PatchAppsAppParams instance
7848	WithBody sets body and returns PatchAppsAppParams
7849	Set timeout for PutAppsAppParams and return updated instance
7850	WithContext sets the context for PutAppsAppParams and returns the modified object
7851	WithApp sets the app field and returns the modified object
7852	WithBody sets the body of PutAppsAppParams and returns the updated instance.
7853	UnmarshalJSON reads JSON data into task fields and returns an error if parsing fails
7854	MarshalJSON serializes Task object to JSON, combining parts using swag library.
7855	Validate checks task and subtask validations, collecting errors and returning composite validation error if present
7856	GetRanges will return IP ranges from given IPs and CIDRs, or an error if CIDR lengths are invalid
7857	Set timeout on route parameters and return updated params
7858	WithContext sets the context for GetAppsAppRoutesRouteParams and returns it.
7859	Set HTTP client for request parameters.
7860	WithApp sets the app parameter and returns the modified object
7861	WithRoute sets the route and returns the updated object
7862	New creates a new instance of Functions with specified transport and formats, initializing various components.
7863	SetTransport updates the transport for all components.
7864	WithTimeout sets the timeout for DeleteAppsAppRoutesRouteParams and returns the modified object.
7865	WithContext sets the context for DeleteAppsAppRoutesRouteParams and returns itself.
7866	WithHTTPClient sets HTTP client for DeleteAppsAppRoutesRouteParams and returns updated params
7867	WithApp sets app parameter and returns updated route parameters
7868	WithRoute sets route parameter and returns updated DeleteAppsAppRoutesRouteParams instance
7869	WithTimeout sets timeout for GetTasksParams and returns updated instance.
7870	WithContext sets the context for GetTasksParams and returns it
7871	Set HTTP client for GetTasksParams and return updated instance
7872	NewValueStore creates a new ValueStore instance with specified address, concurrency, TLS configuration, and gRPC options, initializing channels and starting goroutines for handling lookup, read, write, and delete streams.
7873	Close will release resources by locking, shutting down, signaling completion, and unlocking.
7874	Server's backend service is updated atomically.
7875	Ring method returns server's ring safely
7876	GetLocalID retrieves the local ID of a server safely by locking and unlocking.
7877	GetListenAddr acquires lock, retrieves local node address, and releases lock
7878	Startup starts ring server connector if not already running and locks ring server exit channel.
7879	shutdownFinished will wait for 10ms and then signal the completion of server shutdown
7880	Stop service, lock command control, close channel, stop backend listen, wait, stop backend, mark stopped, return success
7881	Exit stops the server gracefully, waits for backend to finish, and marks it as stopped.
7882	SelfUpgrade performs a binary upgrade and returns success status and error message.
7883	Server retrieves software version safely using mutex lock.
7884	Shutdown locks store, runs shutdown method, unlocks store, and returns error
7885	Rant fetches a rant by ID, returning the rant model, comments, and any errors encountered during the process.
7886	Profile fetches user details and content using username, returning UserModel, ContentModel, and error if any.
7887	Search sends a request to fetch rants based on a search term and returns a list of RantModels or an error if the request fails or the response indicates an error.
7888	Surprise sends a GET request to fetch a rant model, decodes the response, and returns the rant or an error if unsuccessful.
7889	WeeklyRants fetches weekly rants from an API endpoint, decodes JSON response, and returns rants or an error.
7890	getUserId retrieves user ID from API response or returns error
7891	Shutdown stops the ReplValueStore gracefully, closes channels, shuts down stores, and handles context cancellation.
7892	FExists checks if a file exists by returning true if no error is found when attempting to stat the file, otherwise false.
7893	outbound handles sending messages over a connection, logging errors and shutting down gracefully
7894	parse reads messages from a pool, logs them, parses using a parser, handles errors, sends parsed messages, and recycles buffers
7895	A Domain creates a Group with specified name and members.
7896	Groups retrieves all groups from the domain and returns them along with any errors encountered.
7897	GetGroup retrieves group details by name, parses member accounts from XML, and returns a Group object along with an error.
7898	Reticence trims string to specified length, removing punctuation and ellipses as needed
7899	CheckPassword verifies password length and characters, returning an error if invalid.
7900	CleanUrl cleans the URL, checking validity and ensuring it has a scheme, returning cleaned URL or error.
7901	NewParameter creates a new parameter with the given name and value, returning a pointer to it.
7902	MakeParams creates Params with initialized maps and slices based on fieldCount.
7903	Parse parameters from reflection value and populate them with properties.
7904	Forwarder.Email will return a formatted email address combining Name and Domain.Name
7905	A domain creates a new forwarder with specified name and destination.
7906	Forwarders retrieves domain forwarders list and returns them along with an error if any.
7907	GetForwarder fetches a forwarder by name and returns it along with an error.
7908	New creates a CGP instance with specified URL, user, and password.
7909	EscapeCommaSeparated escapes and joins comma-separated strings.
7910	Account's Alias method creates and returns an Alias instance with the given name.
7911	Alias's Email combines Name and Domain to form an email address.
7912	Account's Aliases fetches and compacts alias data, returning a list or an error.
7913	RealName retrieves the real name associated with an account via API request and returns it along with any errors encountered.
7914	Account.Email constructs and returns email address using Name and Domain.Name
7915	Account creates a new account associated with a domain and name.
7916	Domain.Accounts retrieves accounts using CGP request, returning list of Account pointers and error.
7917	Exists checks domain settings and returns true if found, false otherwise with error.
7918	Aliases will return domain aliases and an error if request fails
7919	Domain creates a new Domain instance associated with CGP.
7920	CGP's Domains method retrieves domain list, processes each, and returns them with potential errors.
7921	New creates a new error with stack trace and additional information.
7922	Wrap wraps an error with additional information and public messages, returning a custom error.
7923	mergeIn updates error info with unique keys and concatenates public message parts.
7924	wrappedErrStr returns the error message of the wrapped error if it exists, otherwise returns an empty string
7925	concatArgs joins arguments into a string, removing the trailing newline.
7926	Create a MailingList instance associated with the Domain.
7927	Subscriber creates a new subscriber with given email and name associated with mailing list.
7928	Subscribers retrieves mailing list subscribers using domain API, returning a list of Subscriber objects and an error if the request fails.
7929	MailingLists fetches domain's mailing lists and returns them along with any errors encountered.
7930	NewByteKeyItem converts a byte slice to an unsafe pointer.
7931	CompareBytes compares two byte slices pointed to by unsafe pointers and returns the result of the comparison.
7932	CompareInt compares two integers pointed to by unsafe pointers and returns their difference as an integer.
7933	Malloc allocates memory of size l and returns a pointer, optionally incrementing allocation stats.
7934	Free will release memory at pointer p and increment free count if debugging is enabled
7935	Stats will return a string containing memory allocation statistics and optional debug information.
7936	FreeOSMemory releases OS memory and returns an error if unsuccessful.
7937	Add will add an item to the segment and update relevant counters and pointers.
7938	NewSegment creates a new segment with random initialization and local status.
7939	Assemble combines segments into a Skiplist, updating heads, tails, and statistics.
7940	CompareNodeTable calculates the difference between two pointers and returns it as an integer.
7941	New creates a NodeTable with hash and key functions, inserts it into a database buffer, and returns the table.
7942	Stats method returns a formatted string with NodeTable statistics.
7943	MemoryInUse calculates total memory usage based on item size and counts of fast and slow hash tables.
7944	Get retrieves a value by key from NodeTable, returning a pointer if found, or nil otherwise.
7945	Update key in NodeTable, return updated status and old pointer
7946	Remove a key from NodeTable, returning success flag and pointer, updating internal hash tables accordingly.
7947	Close resets counters, clears hash tables, frees buffer, and deletes node table from database.
7948	MemoryInUse calculates total memory usage by iterating over database instances and summing their individual memory usages.
7949	debugMarkFree updates node's memory block with free content
7950	Seek updates iterator position based on byte slice.
7951	Iterator moves to next item increments count skips unwanted items refreshes if rate exceeded
7952	Refresh updates iterator to point to next item safely.
7953	Iterator Close releases resources by closing snap, freeing buffer, and closing iter.
7954	NewIterator creates an iterator for a snapshot, returning nil if the snapshot is not open.
7955	SeekFirst advances the iterator to the first element by seeking each sub-iterator, collecting valid items, and initializing the heap.
7956	MergeIterator's Next method pops the smallest item from a heap, updates the current node, advances the iterator, and reinserts the updated item if valid.
7957	Seek iterates over iterators, finding matching items and updating the heap.
7958	Keys extracts all keys from NodeList and returns them as byte slices.
7959	Remove key from NodeList and return removed Node or nil if not found
7960	Add a node to the head of the NodeList.
7961	NewWithConfig creates a Skiplist instance using a given configuration, initializing memory management and setting up head and tail nodes.
7962	FreeNode releases a node and updates stats.
7963	MakeBuf creates and returns a new ActionBuffer instance initialized with empty node slices for predecessors and successors.
7964	Skiplist Size calculates total size including item and node size
7965	NewLevel calculates the next level for a skiplist node based on random probability, capped by max level, and atomically updates the current level if necessary.
7966	Skiplist's Insert adds item using Insert2, returns success status.
7967	Insert2 inserts an item into the skiplist using random levels and compares items, returning the inserted node and a boolean indicating success.
7968	Insert3 inserts an item into a SkipList, handles conflicts, and updates statistics.
7969	deleteNode from skiplist using compare function and buffer
7970	DeleteNode acquires barrier token, deletes node using deleteNode method, releases token, and returns result
7971	GetRangeSplitItems splits skiplist items into ranges based on nways and returns pointers to the items.
7972	Bytes method converts Item data to byte slice
7973	ItemSize calculates size of item using pointer and returns it as int.
7974	KVFromBytes extracts key-value pairs from byte slices, returning keys and values based on lengths specified in the input.
7975	CompareKV compares key-value pairs, returning the comparison result based on their lengths and values.
7976	Emit sends an event to all handlers concurrently and returns the number of handlers triggered.
7977	UnregisterHandler removes a handler by name and returns an error if unsuccessful.
7978	IsHandlerRegistered checks if a handler is registered for a given event name.
7979	CompareNitro compares two Nitro structs based on their id field and returns the difference.
7980	DefaultConfig initializes a Config object with default settings.
7981	Delete removes byte slice from writer returning success status
7982	GetNode searches for a node using a byte slice, returns the found node or nil if not found.
7983	SetKeyComparator updates Config with key comparison functions.
7984	UseMemoryMgmt sets memory management functions if architecture is amd64.
7985	NewWithConfig creates a new Nitro instance with the given configuration, initializing various data structures and storing it in a global map.
7986	MemoryInUse calculates total memory usage by summing up aggregated store stats and snapshot memory.
7987	Close will shutdown the Nitro instance, wait for snapshots, release resources, and free memory if needed
7988	NewWriter creates a new writer instance, adds it to a list, initializes its context, starts collection worker goroutine, and optionally starts memory management worker goroutine.
7989	SnapshotSize calculates the total size of a Snapshot struct in bytes.
7990	Encode function serializes Snapshot sn into buf and writes to Writer w, returning error if insufficient space.
7991	Decode reads 4 bytes from reader, converts them to uint32, and assigns to Snapshot's sn field
7992	Open increments refCount if not zero and returns true; otherwise, returns false.
7993	CompareSnapshot compares two Snapshot pointers based on their sn field and returns the difference as an integer.
7994	Nitro's GC runs garbage collection atomically.
7995	GetSnapshots retrieves all snapshots from Nitro's internal storage, returning them as a slice.
7996	MemoryInUse calculates total memory usage by iterating over database instances.
7997	CompareBS compares two BarrierSession pointers based on their seqno fields and returns the difference as an integer.
7998	Acquire locks session increments count retries if exceeds offset releases session returns barrier session or nil
7999	Release decrements live count, closes session if necessary, runs cleanup if last session.
8000	AccessBarrier flushes session, updates reference, increments sequence number, and releases old session.
8001	Apply updates StatsReport with aggregated stats from another Stats object.
8002	Stats.AddInt64 updates src by adding val, using atomic operation if not local.
8003	AddUint64 updates a local or atomic uint64 value based on the Stats instance's isLocal flag.
8004	Merge combines two Stats instances by adding their counters and resetting the source counters.
8005	Skiplist's GetStats retrieves stats report by applying them to internal stats.
8006	NewIterator creates a new iterator for a skiplist with specified comparison function and buffer.
8007	SeekFirst sets iterator to first element.
8008	SeekWithCmp searches for an item using a comparator, updates iterator state if found, and returns true if successful.
8009	Seek updates iterator state and returns if item is found
8010	Iterator's Valid method checks if current position is at tail and updates validity accordingly.
8011	Iterator's Delete method soft deletes current item, updates stats, moves to next item, and marks deletion.
8012	Next advances the iterator to the next item, handling deletions and retries.
8013	Init creates a SkuM1SmallBuilder instance, sets its client, registers it with skurepo under SkuName.
8014	FromURL replaces substrings in a URL based on predefined replacements and returns the modified URL.
8015	ToURL converts a folder path by replacing specified substrings.
8016	TupleHeader Size calculates total size based on version, field count, and field size
8017	WriteTo serializes TupleHeader fields into binary data and writes it to an io.Writer, returning the number of bytes written and any error encountered.
8018	Static serves static files from a specified directory, handles GET/HEAD requests, applies options like prefix, logging, and expires headers.
8019	Read configuration file and populate Config object with parsed data
8020	Del removes a key from a section in the config map and deletes the section if empty.
8021	WriteTo saves config data to a file with specified format and permissions.
8022	checkSection trims spaces, checks if line starts with '[' and ends with ']', returning section name and a flag
8023	checkLine extracts key-value pair from a line, trims spaces, and returns them along with a success flag
8024	checkComment verifies if a line starts with any specified comment prefix and returns true if it does.
8025	NewResponseWrapper creates a ResponseWrapper instance wrapping an http.ResponseWriter.
8026	Hijack extracts net.Conn and bufio.ReadWriter from ResponseWrapper, returning them along with an error if unsuccessful.
8027	CloseNotify method returns a channel signaling when the response writer is closed, or a dummy channel if not supported.
8028	DateFormat sets date format option
8029	Logger logs HTTP requests, measures latency, and outputs details to stdout.
8030	GetAvailableInventory retrieves inventory map for registered SKUs using task collection.
8031	Expiration sets token expiration duration.
8032	Claimer sets a claims transformer for JWT token options.
8033	Issuer sets the issuer field of options for a token.
8034	User sets the user field in options using a functional option pattern.
8035	Password sets the token option with the given password.
8036	Extractor sets the extractor field in options.
8037	TokenGenerator wraps an HTTP handler, authenticates requests using username and password, generates JWT tokens, and either serves them directly or passes them to the original handler.
8038	Token extracts and returns a string value from HTTP request context using a specific key, returning an empty string if not found.
8039	Claims retrieves JWT claims from HTTP request context or returns nil if not found.
8040	Token's String method returns a string representation based on token type and value length.
8041	NewLexer creates a Lexer instance with given name, input, and handler.
8042	Lexer runs states processing text
8043	emit will process and send a token if the lexer's position has changed
8044	skipWhitespace advances lexer past whitespace characters
8045	next reads the next rune from lexer's input, updating position and width, returning eof if done.
8046	LineNum counts newline characters before current position in lexer input.
8047	Offset calculates the position relative to the last newline character in the lexer's input.
8048	Lexer's errorf logs an error token with file name, line number, offset, and formatted message.
8049	lexText processes lexer input, identifying tokens like comments, packages, types, versions, and fields, emitting corresponding tokens or errors.
8050	lexComment skips whitespace, advances past a comment marker, and emits the comment before continuing with text parsing.
8051	New creates a tuple type with namespace, name, hashes, and empty field list.
8052	AddVersion appends fields to TupleType and updates fields map with their indices
8053	Contains checks if a field exists in a tuple type.
8054	Offset retrieves field's offset and existence from TupleType.
8055	TupleType.Versions returns a list of versions based on the number of versions, initializing each version with an incremented index and corresponding value.
8056	SetPrivateMeta updates a task's private metadata with a given name and value, initializing the metadata map if necessary.
8057	SetPublicMeta updates task metadata with a given name and value.
8058	GetRedactedVersion locks mutex, creates redacted task copy, unlocks mutex, and returns it.
8059	Task Equal compares two tasks based on ID, Timestamp, Expires, Status, Profile, and CallerName, returning true if they match exactly.
8060	HTTP wraps a handler, restricting it to specified verbs, returning an error response for unsupported ones.
8061	PutUint8 writes a uint8 value to the buffer with a type code and increments position.
8062	PutInt8 writes an int8 value to the buffer with a type code, updating the position and offsets.
8063	PutUint16 writes a 16-bit unsigned integer to the buffer, checking type, available space, and updating position and offsets.
8064	PutInt16 writes an int16 value to the buffer with a type code and returns the number of bytes written and an error.
8065	PutUint32 writes a 32-bit unsigned integer to a buffer, returning the number of bytes written and an error if the value exceeds the maximum allowed size for the specified field type.
8066	PutInt32 writes an int32 value to buffer based on its size and updates offsets, returning written bytes and error
8067	PutUint64 adds a uint64 field to the tuple builder, returns written bytes and an error if the value is out of range
8068	PutInt64 writes an int64 value to a buffer, determining its size and encoding accordingly, returning the number of bytes written and an error if the operation fails.
8069	NewPackageList creates a new package list with a mutex for synchronization.
8070	PutFloat32 adds a float32 field to a buffer, updates offsets, and increments position.
8071	ClassicMartini creates a router and middleware stack, maps routes, and returns a new instance.
8072	Languages sets languages option with given tags
8073	Session sets session option with given handler session.
8074	Data retrieves ContextValue from http.Request context, returning empty if not found
8075	URL constructs a full path by combining a given URL, a prefix, and contextual data, ensuring proper formatting and root handling.
8076	Size returns window width, height, and an error if termsize is uninitialized
8077	GetRequestIDFromTaskResponse extracts RequestID from TaskResponse metadata, returning it or an error if not found.
8078	PutString writes a string value to a buffer, handling different sizes and updating offsets accordingly.
8079	LoadDirectory reads a directory recursively, applying a parser to each entity file (.ent).
8080	LoadFile opens a file, reads its contents, converts them to a string, and uses a parser to load the data into a Package, returning any errors encountered.
8081	LoadPackage uses a parser to load a package from given name and text, returning the parsed package and any errors encountered.
8082	NewDecoder creates a new decoder instance with given registry, max size, buffer, and reader.
8083	NewDecoderSize creates a decoder with a registry, max size, and reader.
8084	Panic will wrap an HTTP handler, logging panics with a stack trace and custom formatting, and returning a 500 error response.
8085	DeployVApp returns a fake VApp and an error
8086	UnDeployVApp returns a task and an error for simulating VApp deployment.
8087	`Auth` method returns a fake authentication error for testing purposes.
8088	QueryTemplate returns a vApp template record and an error based on fake data
8089	NewEncoder creates a new encoder using the provided writer, initializing buffers for encoding operations.
8090	Getter sets the nonce getter option.
8091	Setter assigns a nonce setter to an option object
8092	Age sets the age option in options
8093	Nonce middleware sets and validates nonces, cleaning up old ones periodically.
8094	NonceValueFromRequest retrieves nonce status from request context, returning default if not present.
8095	StoreNonce sets nonce using context and returns error
8096	PutFloat32Array writes a float32 array to the buffer, handles different sizes, and updates offsets and position.
8097	PutFloat64Array writes a float64 array to buffer, updating offsets and position, and returns bytes written and error if out of range
8098	ClientDoer's Do method spies on request and returns stored response and error.
8099	NewLease creates a Lease object with given task collection, available SKUs, and initializes task manager.
8100	Delete method handles HTTP request, updates task collection, restocks inventory, logs action, and returns status code and response based on success or failure.
8101	Post handles HTTP requests, initializes lease, logs status, and returns created status or error.
8102	ReStock updates task based on available SKUs or marks unavailable.
8103	Procurement will create a task based on available SKU and update lease task status accordingly.
8104	InitFromHTTPRequest reads JSON from HTTP request body, unmarshals it into Lease, handles empty body, and initializes ProcurementMeta if nil.
8105	Is checks if a tuple matches a given type based on hash comparison.
8106	Offset retrieves field index from tuple header and returns offset or error
8107	Tuple.WriteTo writes tuple data to writer, returns bytes written and error
8108	PutTuple writes a tuple to buffer, returns written bytes and error if failed
8109	Write content to response writer
8110	NotFound sends a 404 status with a custom message.
8111	Run starts task, updates status, starts pollers, decorates process, waits for completion.
8112	NewWaitGroup creates a WaitGroup with a specified throttle level and initializes channels for tracking outstanding tasks and completed operations.
8113	WaitGroup adds a task and waits if exceeds throttle.
8114	wait decrements outstanding when completed signal received
8115	Gzip wraps an HTTP handler to compress responses using gzip if the client supports it, adjusting headers accordingly and logging errors if compression fails.
8116	New creates a new InnkeeperClient with URI, User, and Password fields initialized.
8117	Render handles HTTP errors by setting status and writing optional message.
8118	Renderer prepares options, compiles templates, and returns a handler function that renders responses based on the options and request context.
8119	NewClient creates a PDClient instance with API key, URL, and HTTP client.
8120	GetTask sends a GET request to retrieve a task by ID, parses the JSON response, and handles errors.
8121	WriteImageToHTTP encodes an image to PNG and writes it to HTTP response with appropriate headers.
