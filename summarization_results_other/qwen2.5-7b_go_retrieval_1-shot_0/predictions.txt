0	NewSTM creates a transactional model using a client, applying functions within a specified context.
1	first finds and returns the minimum revision number from a set of responses.
2	cmps constructs revision comparison conditions for all keys in the write set.
3	NewSTMRepeatable creates a repeatable STM transaction using a client and apply function.
4	NewSTMSerializable creates a new STM transaction with serializable isolation level using the provided client and application function, aborting on the given context.
5	NewSTMReadCommitted creates a new STM transaction with read committed isolation level using the provided client and application function.
6	NewCertPool reads CA files and constructs a certificate pool.
7	NewCert reads certificate and key files, parses them using provided or default function, returning TLS Certificate.
8	Pause marks the peer as paused and stops both message readers.
9	Resume will unblock message readers and resume processing.
10	pick determines which channel to use based on the type of raft message received.
11	post sends HTTP POST request and processes response or error.
12	newTxnResp processes a transaction request, handling nested transactions and constructing responses accordingly.
13	applyCompare checks if the values at keys match the comparison criteria specified. If the key does not exist and comparing a value, it returns false. Otherwise, it iterates through the key-value pairs and compares them using the specified criteria, returning true only if all comparisons succeed.
14	OpCompact creates a new CompactOp with the given revision and options.
15	NewPriorityQueue creates a new priority queue with the given client, context, and key prefix.
16	Enqueue adds a value with priority to the queue.
17	NewLeaderStats creates a new LeaderStats instance with the specified ID.
18	Succ updates follower stats with success count and latency metrics.
19	Fail increments the follower's fail count
20	delete removes a watcher and cleans up associated broadcast if empty.
21	startStreamWriter initializes a streamWriter to manage communication between peers in a distributed system, handling log messages and connection states.
22	checkStreamSupport checks if a version supports a given stream type.
23	maybeUpdate updates progress if n is greater than Match or Next, resumes if updated, and increments Next. Returns true if updated.
24	IsPaused returns whether Progress is paused based on its state.
25	needSnapshotAbort checks if snapshot state requires aborting based on match and pending snapshot.
26	add inflight request to buffer, handling wrap-around and growth.
27	growBuf doubles the buffer size or sets it to 1 if zero, ensuring it does not exceed the current size.
28	freeTo updates the inflights slice by removing entries up to the specified 'to' value and adjusts the start index accordingly.
29	SaveDBFrom saves a database snapshot from reader to a temporary file, then renames it to the final location if not already present.
30	DBFilePath checks if snapshot directory exists; returns path if found, logs warning and returns error otherwise.
31	Set updates UniqueStringsValue from comma-separated string.
32	NewUniqueStringsValue creates a new UniqueStringsValue from a comma-separated string of unique values.
33	UniqueStringsFromFlag retrieves unique strings from a flag set.
34	UniqueStringsMapFromFlag retrieves unique strings from a flag set based on the specified flag name.
35	Percentiles calculates percentiles of input numbers and returns them along with the sorted input data.
36	VerifyBootstrap checks server config for valid bootstrapping conditions.
37	VerifyJoinExisting checks if the server config allows joining an existing cluster.
38	hasLocalMember checks if the server's local member URL exists in the initial peer URLs map
39	advertiseMatchesCluster checks if URLs in --initial-advertise-peer-urls match those in --initial-cluster, returning errors if discrepancies are found.
40	ReqTimeout calculates the total request timeout duration based on election ticks and tick milliseconds.
41	getStatus retrieves the raft state and progress.
42	GetDefaultHost retrieves the default host from system routes, prioritizing IPv4 and sorting families deterministically before selecting a host; returns an error if none found.
43	getIfaceAddr retrieves network interface address details for a given index and address family. Returns Netlink message containing address info or error if not found.
44	getIfaceLink retrieves Netlink message for the specified interface index, returning the first match or an error if none found.
45	lsCommandFunc lists files in a directory using provided options.
46	printLs outputs list based on user's output preference.
47	rPrint recursively prints keys with optional path separators.
48	NewLeaseRenewerCommand creates a Cobra command for lease renewal with options to set TTL.
49	Read reads a snapshot file, validates its contents, and returns the corresponding raftpb.Snapshot object. If any step fails, it logs an error and returns an appropriate error.
50	GetCipherSuite will return the cipher suite ID and whether it was found.
51	post sends data to a picked server using a round trip.
52	send modifies a raft message by setting its term based on its type and appends it to the msgs slice.
53	sendHeartbeat sends a heartbeat message with the minimum match index and context to a specified node.
54	broadcast append entries to all peers except self.
55	bcastHeartbeat broadcasts heartbeat to followers using last pending request context
56	tickElection increments election timer and promotes raft node if timeout.
57	tickHeartbeat increments elapsed times and triggers heartbeat or quorum check based on timeout.
58	stepCandidate handles raft messages based on their types, updating state and voting as necessary.
59	restore applies a raft snapshot to the log.
60	promotable checks if the raft instance can become leader.
61	checkQuorumActive determines if quorum is active by counting recent active non-learner peers, including self.
62	increaseUncommittedSize increases the uncommitted size of a Raft node based on new entries. It checks if adding these entries exceeds the maximum allowed uncommitted size and adjusts accordingly.
63	reduceUncommittedSize reduces the uncommitted size based on given entries, ensuring it does not go below zero.
64	newPeriodic creates a new periodic task manager.
65	Pause will stop the periodic task execution by setting the paused flag to true.
66	Resume will unblock periodic task execution.
67	Lock acquires a distributed lock using etcd's lease mechanism, ensuring exclusive access to a resource under a given prefix.
68	Create locker using session and prefix.
69	NewFIFOScheduler creates a FIFO scheduler with channels for resuming and done notifications, a condition variable for synchronization, and a cancelable context.
70	Schedule adds a job to the pending queue and resumes execution if necessary.
71	Stop cancels the FIFO and waits for completion.
72	NewServer initializes a new server with logging and networking details.
73	StartServe starts the gRPC server and listens on the specified address.
74	Stop logs server stop message and gracefully shuts down gRPC server.
75	Transport handles streaming RPC requests and processes them using srv.handleTesterRequest.
76	RegisterInterruptHandler appends handler to interruptHandlers slice.
77	HandleInterrupts sets up signal handlers for graceful shutdown.
78	OpGet creates an Op with specified options, applying filters based on the options.
79	OpDelete creates a delete operation with options
80	OpPut creates an operation to put a key-value pair with specified options, validating no conflicting options are set.
81	OpTxn creates a conditional transaction operation based on comparisons and branches.
82	WithFromKey sets default key and end values for op.
83	withTop returns a list of OpOptions to perform a top operation based on the target and order.
84	Exist checks if any files with the .wal extension exist in the given directory.
85	searchIndex finds the first index greater than or equal to the given index in the names list and returns its position and true, otherwise returns -1 and false.
86	isValidSeq checks if sequence numbers in WAL filenames are consecutive.
87	NewListener creates a network listener with optional TLS wrapping.
88	cafiles returns TrustedCAFile as a slice if it's not empty.
89	ServerConfig generates a TLS configuration based on the provided TLSInfo, including client authentication settings and enabling HTTP/2.
90	TLSInfo generates a tls.Config based on its fields.
91	newTLSKeepaliveListener creates a new TLS keepalive listener wrapping the given inner listener with specified TLS configuration.
92	applyV2Request processes V2 requests based on their method.
93	NewRoleCommand creates a Cobra command for managing roles with subcommands.
94	roleAddCommandFunc adds a role using the provided name and displays the result.
95	roleGetCommandFunc handles the 'get' command for roles, requiring a single role name argument; it fetches and displays the role details or errors if the operation fails.
96	roleGrantPermissionCommandFunc grants a permission to a specified role based on user input arguments and displays the result.
97	roleRevokePermissionCommandFunc revokes permission for a specified role and key, displaying the result or error.
98	NewCluster creates a new cluster instance for testing.
99	NewClusterByConfig creates a cluster using config
100	HTTPMembers returns a list of HTTP members from cluster's members.
101	waitLeader waits for a cluster member to become the leader through linearizable reads and checks member leadership status, retrying until successful or all members checked.
102	waitNoLeader checks if no leader exists among members and waits until it does.
103	isMembersEqual checks if two member slices are equal after sorting and removing IDs.
104	listenGRPC sets up gRPC listener with TLS info.
105	NewClientV3 initializes a new clientv3.Client based on member configuration.
106	Clone creates a deep copy of member.
107	Close stops all servers and bridges gracefully.
108	Stop logs member details, closes it, and resets server closers.
109	checkLeaderTransition waits until leader transitions from oldLead.
110	Restart restarts a member with new listeners and grpc address
111	Terminate logs member details, closes it, and cleans up data directory if specified.
112	Metric fetches a specific metric value from a URL.
113	InjectPartition is defined on Member.
114	RecoverPartition will mend peer connections between the member and others.
115	NewClusterV3 initializes a ClusterV3 instance with given configuration and launches it.
116	ParseWithDefaults sets default TTL if not specified and then parses options.
117	ParseJWTOptions reads JWT options from a map.
118	JWT key retrieval based on signing method.
119	fill populates pb.ResponseHeader fields with header data.
120	add checks if watcher can receive events based on revision and sends a create event if necessary.
121	Watch registers a new watch stream with a unique ID, handling key ranges and duplicate IDs.
122	newFileEncoder initializes an encoder for a file at its current position.
123	purgeFile deletes old files in a directory based on a maximum count and interval, logging errors and purged files.
124	Set will update a StringsValue instance with a slice of strings split from a comma-separated input string.
125	NewStringsValue creates a new instance of StringsValue with the given string.
126	StringsFromFlag retrieves string values from a flag set by name.
127	Cluster extracts the first two parts from a version string. If fewer than three parts exist, it returns the original string unchanged.
128	NewPageWriter creates a new PageWriter instance for writing pages to a writer.
129	watch creates and manages a new watcher.
130	notify adds events to history and notifies relevant watchers along paths.
131	clone creates a new watcherHub instance with a cloned event history.
132	isHidden checks if a key path is hidden based on a watch path, considering paths may be nested or start with a slash.
133	createEtcdLogFile creates an etcd log file.
134	startEtcd starts the embedded etcd or external etcd command, waits for it to be ready, and handles any errors.
135	stopEtcd stops etcd server gracefully or forcefully based on signal received.
136	handle_SIGQUIT_ETCD_AND_REMOVE_DATA_AND_STOP_AGENT handles graceful shutdown, stopping etcd, removing data, and stopping the agent server.
137	LimitListener limits the number of concurrent connections to a listener using a buffered channel.
138	allowMethod checks if the HTTP method is allowed; if not, it sets the 'Allow' header and returns false.
139	NewWatchServer initializes a watch server with logging, cluster, member IDs, request size limits, and etcd server components.
140	FiltersFromRequest extracts watch filters from request.
141	newPipelineHandler creates a handler for managing pipeline operations.
142	checkClusterCompatibilityFromHeader verifies if the remote server's version and cluster ID match the local member's requirements; logs warnings or errors if incompatible.
143	KeyExists checks if a key exists in etcd using Compare.
144	KeyMissing checks if a key is absent in etcd.
145	ValidateSecureEndpoints checks HTTPS endpoints using TLS info and returns valid ones or errors.
146	putNewKV inserts a new key-value pair into etcd only if the key does not exist, returning the revision number or an error.
147	newUniqueEphemeralKey generates a unique ephemeral key using a session and prefix.
148	NewUpdateDirCommand defines a CLI command to update an existing directory with optional TTL.
149	updatedirCommandFunc updates directory key with TTL.
150	handleBackup creates a backup of a database by copying snapshots and WALs to a specified destination.
151	saveDB copies database state from source to destination, updating index and removing unnecessary data.
152	NewWatchCommand creates a Cobra command for watching operations with various flags.
153	NewV3 initializes a Manager with a Logger.
154	Save will create a temporary file, fetch a snapshot from etcd, write it to the file, and then rename it to the target path.
155	Checks database integrity, calculates total size and hash, and counts keys.
156	Restore initializes and configures an etcd server from a snapshot, handling URLs, directories, and logging.
157	NewAuthStore initializes a new authentication store with logging, backend, token provider, and bcrypt cost.
158	NewTokenProvider initializes a TokenProvider based on options and returns it or an error.
159	MendPeer resumes peer and remote connections based on ID.
160	removePeer stops and deletes the specified peer, logging accordingly.
161	ActivePeers returns the count of active peers based on their last activity timestamp.
162	resolveTCPAddrDefault resolves a TCP address to a default TCPAddr.
163	resolveTCPAddrs resolves TCP addresses from URLs and updates their hosts.
164	urlsEqual checks if two slices of URLs are equal after resolving TCP addresses and sorting.
165	URLStringsEqual checks if two slices of URLs are equal, logging any parsing errors.
166	NewLeaseCommand creates a cobra command for managing lease subcommands.
167	NewLeaseGrantCommand creates a Cobra command to grant leases with a specified TTL.
168	leaseGrantCommandFunc processes the lease grant command, validates arguments, grants a lease, and handles errors.
169	NewLeaseRevokeCommand creates a Cobra command to revoke leases.
170	leaseRevokeCommandFunc revokes a lease using the provided ID and displays the response or an error if the operation fails.
171	NewLeaseTimeToLiveCommand creates a Cobra command for lease time-to-live operations.
172	LeaseTimeToLiveCommandFunc handles lease TTL commands.
173	NewLeaseListCommand creates a Cobra command to list active leases.
174	leaseListCommandFunc retrieves leases using a command and displays them; it handles errors gracefully.
175	NewLeaseKeepAliveCommand creates a Cobra command to keep leases alive.
176	leaseKeepAliveCommandFunc manages lease keep-alives, handling both single and continuous requests.
177	NewAlarmCommand creates a Cobra command for alarm-related subcommands.
178	alarmDisarmCommandFunc handles the disarm command, ensuring no arguments are passed, then disarms an alarm and displays the result.
179	alarmListCommandFunc retrieves and displays a list of alarms using the provided command context.
180	Flags retrieves command-line flags from Etcd struct fields.
181	EmbedConfig constructs Etcd configuration using provided URLs and settings.
182	PPProfHandlers sets up HTTP handlers for profiling metrics.
183	NewBackendQuota configures and returns a Quota instance based on the server's configuration.
184	NewClusterProxy initializes a cluster proxy with gRPC resolver and returns it along with a channel.
185	NewHandler creates an http.Handler using a lease.Lessor and a wait channel.
186	TimeToLiveHTTP sends a POST request with a LeaseInternalRequest containing an ID and Keys flag to the specified URL using the given RoundTripper. It returns a LeaseInternalResponse if successful, handling various HTTP status codes and errors appropriately.
187	newWatcherBatch creates a batch of watchers based on events, ensuring no duplicate notifications.
188	add watcher to group, register intervals.
189	contains checks if the watcher group has a watcher for the given key or intersects with the ranges.
190	delete removes a watcher from the group and updates associated intervals.
191	choose selects up to maxWatchers from the watcherGroup and returns the updated group and revision.
192	watcherSetByKey combines key-specific watchers and ranges into a unified watcher set efficiently.
193	Compare determines the relative position of two intervals based on their start and end points.
194	successor finds the next node in the interval tree.
195	updateMax updates the maximum value in an interval tree node.
196	visit checks intervals recursively using comparison and visitor logic.
197	Delete an interval from the tree; fix up if necessary; return success.
198	Insert will add a new interval node to the IntervalTree.
199	rotateLeft performs a left rotation on the interval tree, adjusting pointers and updating max values accordingly.
200	replaceParent updates the parent pointers of nodes in an interval tree.
201	MaxHeight calculates the maximum height of the Interval Tree using its Length.
202	Visit traverses the interval tree, applying visitor to each node within the specified interval.
203	find interval node matching given interval
204	Find searches for an interval in the tree and returns its value or nil if not found.
205	Intersects checks if a given interval overlaps with any interval in the tree.
206	Contains checks if IntervalTree contains a given interval.
207	Stab method returns all intervals overlapping with input interval.
208	Union merges intervals from two trees.
209	NewExactReadCloser creates a wrapper for exact read closer
210	NewElection creates a new Election instance with a session and key prefix.
211	ResumeElection creates a new Election instance for resuming leadership at leaderKey.
212	Proclaims a value in an election if leader, updates session lease, sets header on success.
213	Resign deletes leader key if session exists and updates header
214	Leader retrieves the current leader using etcd client.
215	Observe starts watching election responses and returns a channel for receiving them.
216	check verifies quota availability; activates alarm if unavailable.
217	NewExecWatchCommand defines a CLI command to watch a key and execute a command.
218	execWatchCommandFunc watches a key and executes a command when it changes.
219	NewListener creates a new network listener using the provided URL and TLS information.
220	NewRoundTripper creates a timeout transport for HTTP round tripping.
221	createPostRequest constructs a POST HTTP request with specified parameters and headers.
222	checkPostResponse validates HTTP response based on status code and body content, returning appropriate error or nil.
223	Extracts and parses server version from HTTP header.
224	checkVersionCompatibility checks compatibility between local and remote versions, returning errors if mismatched.
225	setPeerURLsHeader sets the X-PeerURLs header in the HTTP request with the given URLs.
226	addRemoteFromRequest updates Transporter with remote details from request headers.
227	NewKeysAPIWithPrefix creates a new KeysAPI instance with the specified client and prefix.
228	TTLDuration calculates the TTL duration in seconds.
229	SetPflagsFromEnv sets flags from environment variables based on a given prefix.
230	FlagToEnv converts a flag name to its corresponding environment variable format.
231	excerpt extracts a substring from the input string with specified prefix and suffix lengths.
232	passConfChange checks if entry type is ConfigChange and returns true with a message.
233	printInternalRaftRequest prints details of a Raft request entry.
234	listEntriesType processes raft entries based on type filters, prints them using appropriate printers, and optionally decodes data through a command-line tool.
235	newLog creates a raftLog instance using the given storage and logger.
236	newLogWithSize creates a new raftLog instance with the given storage and logger, initializing its indices based on the storage's first and last indexes.
237	findConflict identifies the first entry in ents that conflicts with the raftLog's entries and returns its index.
238	nextEnts retrieves the next batch of committed log entries to apply.
239	allEntries retrieves all log entries from firstIndex to the end, handling race conditions due to compaction errors.
240	slice retrieves entries within a specified range from a log, combining stable and unstable segments while respecting maximum size constraints.
241	NewSession creates a new session with optional configurations, manages a lease, and returns a session object.
242	Close closes the session, revoking it within a timeout.
243	WithTTL returns a SessionOption to set the TTL if positive.
244	WithLease sets the leaseID field in sessionOptions.
245	record request with unique context; ignore if already pending.
246	recvAck updates pending read index with acknowledgment and returns count
247	advance processes messages to update read index status and remove processed entries.
248	lastPendingRequestCtx returns the context of the last pending request
249	Start initializes EtcdServer with various background tasks.
250	start initializes logging, configures defaults, sets up channels, and starts the server run loop.
251	Process checks if sender is removed; if not, handles MsgApp messages and steps the replica.
252	ReportSnapshot forwards snapshot status to another reporter.
253	MoveLeader initiates a leader transfer process and waits until the new leader takes over, timing out if necessary.
254	TransferLeadership transfers leadership if possible. It checks if the current server is a leader and if the cluster has multiple nodes before transferring to the longest connected member.
255	configure applies a raft configuration change and returns the updated member list or error.
256	sync sends a synchronous request to etcd server using a goroutine with a specified timeout.
257	publish method attempts to publish attributes to etcd through raft, retries on failure, and logs appropriate messages based on success or error conditions.
258	applyEntryNormal applies V3 entries to etcd server's raft state machine and handles quota alarms.
259	applyConfChange processes configuration changes for etcd members, handling addition, removal, and updates.
260	Monitor etcd versions, update if necessary.
261	This method ensures thread safety when attaching functions to the server's goroutine pool.
262	NewRoundrobinBalanced creates a picker for round-robin load balancing among multiple sub-connections.
263	Pick selects a subconnection based on round-robin algorithm and logs pick details.
264	NewTLSListener creates a TLS-enabled listener using given net.Listener and TLSInfo.
265	acceptLoop listens for incoming connections on a TLS listener, performs TLS handshake, checks connection, and manages pending connections using a wait group.
266	SetEndpoints updates resolver group's endpoints and notifies resolvers about the new addresses.
267	Target method retrieves the target address for a given endpoint using the resolver group's ID.
268	Target constructs the full URL using the given components.
269	Build creates a new Resolver for the given target and client connection.
270	Handle processes HTTP requests based on method type.
271	NewElectionCommand creates a cobra command for performing election operations with optional flags.
272	nodeToMember converts a node to a member object.
273	NewTmpBackend creates a temporary backend with specified batch interval and limit.
274	newRevision creates a Revision instance with logging, clock, retention, getters, and compactors.
275	Run periodically checks and compacts revisions based on retention settings.
276	Pause sets the paused flag to prevent further operations.
277	Resume will unlock mutex, set paused to false, then relock.
278	voteRespMsgType returns the corresponding response message type based on the input message type.
279	DescribeMessage formats a message using a formatter and includes details like sender, receiver, type, term, log info, and entries or snapshot.
280	DescribeEntry formats a log entry using a formatter or default string representation.
281	DescribeEntries formats multiple entries into a single string
282	SetLogger updates the global logger with a new gRPC logger instance while ensuring thread safety through locking.
283	GetLogger retrieves a logger instance.
284	maybeFirstIndex returns snapshot index or 0.
285	maybeLastIndex retrieves last index or snapshot index.
286	maybeTerm retrieves the term for a given index in unstable storage or returns false if not found.
287	shrinkEntriesArray reduces memory usage by reallocating entries array when possible
288	SaveSnap saves the snapshot to both WAL and Snapshotter, then releases the lock.
289	New initializes a client with configuration, returning an error if no endpoints are available.
290	NewCtxClient creates a Client with a cancellable context from the given context.
291	NewFromURL creates a Client instance using a URL endpoint.
292	Close method cancels client operations, closes watcher, lease, resolver group, and connection.
293	Endpoints returns a copy of client's endpoint list.
294	SetEndpoints updates client endpoints and resolver group.
295	Sync synchronizes client endpoints by fetching member list and updating URLs.
296	dialSetupOpts configures gRPC dial options based on client configuration and credentials.
297	Dial creates a gRPC client connection to the specified endpoint using direct dial credentials.
298	dialWithBalancer constructs a gRPC client connection using a balancer.
299	dial establishes a gRPC connection to a target server using specified credentials and options.
300	WithRequireLeader adds metadata to the context indicating a requirement for a leader.
301	roundRobinQuorumBackoff returns a backoffFunc that implements exponential backoff with jitter after each round-robin quorum.
302	isHaltErr determines if an error indicates the system should halt based on context and error type.
303	NewLease wraps a lease with a prefix.
304	IsCreate checks if Event is a create event.
305	Err returns error based on WatchResponse state.
306	IsProgressNotify checks if WatchResponse indicates progress notification.
307	RequestProgress sends a progress request on the appropriate stream or retries if the stream is closed.
308	nextResume returns the first non-nil item from resuming slice or nil if empty.
309	dispatchEvent processes and dispatches watch response events
310	broadcastResponse sends a response to all subscribers and returns true
311	unicastResponse sends WatchResponse to appropriate substream or returns false on done signal
312	joinSubstreams waits for substreams to finish.
313	toPB converts watch request to Protocol Buffers format.
314	progress.toPB converts progress request to protobuf watch request.
315	Contains checks if a value is present in the unsafe set.
316	ContainsAll checks if all specified strings are present in the unsafe set.
317	Equals checks if two sets contain the same elements.
318	Values retrieves all string values from the unsafe set.
319	Copy creates a new set with the same elements as the original.
320	Sub calculates the difference between two sets.
321	v2MembersURL prepends a default prefix to a URL's path.
322	NewMigrateCommand creates a Cobra command for migrating keys between storage systems.
323	publishEntries processes a slice of raft entries, handling normal and configuration change types, updating commit channels and state accordingly.
324	openWAL initializes or opens a WAL for the raft node, optionally using a snapshot.
325	replayWAL replays the wal of a raft node. This is useful when recovering from a crash.
326	stop method stops raft node gracefully.
327	NewWatchCommand creates a Cobra command for watching events on keys or prefixes.
328	InitialState retrieves initial state from memory storage.
329	SetHardState updates hard state in MemoryStorage.
330	Entries retrieves log entries from MemoryStorage within specified range and size constraints.
331	Term retrieves the term at a given index from the memory storage. If the index is compacted or unavailable, it returns an error.
332	LastIndex returns the last index of MemoryStorage.
333	FirstIndex retrieves the first index from MemoryStorage.
334	Snapshot returns current snapshot data.
335	ApplySnapshot updates the memory storage with the given snapshot if it's newer.
336	Compact reduces the size of memory storage by removing old entries up to a specified index.
337	lock protects updating picked index when URL is unreachable.
338	NewEndpointCommand creates a cobra command for managing endpoints.
339	epHealthCommandFunc checks etcd cluster endpoint health using ETCDCTL environment variables.
340	ElectCommand creates a Cobra command for leader election observation and participation.
341	NewDefragCommand creates a cobra command for defragmenting etcd storage.
342	RegisterBuilder registers a new builder with the balancer.
343	Build creates a new baseBalancer using the provided ClientConn and options.
344	recordTransition updates connectivity states and evaluates new state based on counters.
345	doSerialize serializes requests after checking authentication and handling potential stale tokens.
346	send processes a WatchResponse, filters events, and posts a modified response.
347	post handles watch responses; it sends them or cancels after a timeout.
348	OriginAllowed checks if a given origin is allowed based on CORS settings.
349	IsHostWhitelisted checks if the host is whitelisted.
350	Valids returns a sorted list of valid string values from SelectiveStringValue.
351	NewSelectiveStringsValue creates a new SelectiveStringsValue instance with a map of valid strings and an empty slice.
352	NewKV returns a kvPrefix with its kv set to kv and its prefix set to prefix.
353	NewURLsValue creates and returns a new URLsValue object from a string, setting its value or panicking on error.
354	URLsFromFlag retrieves URLs from a flag set using the specified flag name.
355	servePeers initializes and starts gRPC and HTTP servers for Etcd peers.
356	NewStore initializes a new store with given parameters.
357	appendMarkTombstone appends tombstone mark to revision bytes if valid.
358	IsDirWriteable checks if a directory is writable by attempting to create and then remove a temporary file within it.
359	TouchDirAll creates directory if it doesn't exist and checks write permission.
360	CreateDirAll creates directory and checks if it's empty.
361	ZeroToEnd truncates a file to its current position and preallocates space.
362	Open retrieves a file or error from the pipeline.
363	NewRaftLoggerFromZapCore creates a logger from a Zap core and syncer.
364	NewConfig constructs a clientv3 Config from YAML file.
365	RegisterElectionHandler registers an election handler using gRPC.
366	UpdateCapability updates enabled capabilities based on version.
367	NewLockCommand creates a Cobra command for acquiring a named lock with optional TTL.
368	tick updates raft node's state
369	advanceTicks advances the tick counter by specified number of ticks.
370	NewAuthCommand creates a Cobra command for enabling or disabling authentication.
371	authEnableCommandFunc checks for root role existence and enables authentication if necessary.
372	authDisableCommandFunc disables authentication via CLI.
373	RetryKVClient wraps a KV client with retry logic.
374	RetryLeaseClient returns a retryable lease client using the given connection.
375	RetryClusterClient creates a new retryClusterClient wrapping the given Client's ClusterClient.
376	RetryMaintenanceClient creates a retrying MaintenanceClient using an existing gRPC connection.
377	RetryAuthClient returns a retryAuthClient wrapping the given AuthClient.
378	NewSetDirCommand defines a CLI command to create or update directory TTL.
379	Enter ensures clients synchronize by blocking until enough waiters are present.
380	Leave leaves the barrier by waiting for other processes or deleting itself.
381	HandleBasic sets up HTTP handlers for various endpoints on the given mux.
382	WriteError logs errors and writes appropriate HTTP responses based on the type of error encountered.
383	GetMemberByName returns a member by name, ensuring no duplicates exist; panics if found.
384	PeerURLs returns a sorted list of peer URLs from the Raft cluster members.
385	ValidateConfigurationChange checks if adding, removing, or updating a node in a Raft cluster configuration is valid.
386	AddMember locks the cluster, saves member to store/backend, updates members map, and logs addition details.
387	RemoveMember deletes a cluster member by ID, updating store, backend, and logs.
388	ValidateClusterAndAssignIDs checks if clusters match and assigns IDs accordingly.
389	Keep filters treeIndex to retain revisions up to rev.
390	closeRequireLeader closes leader-required channels and updates keepAlive state
391	ResetRecv resets the receiver's lease keep-alive stream and starts a loop to send keep-alives.
392	recvKeepAlive updates keep-alive responses and handles lease expiration.
393	deadlineLoop manages lease expirations in a loop.
394	sendKeepAliveLoop sends keep-alive requests for expired leases over the provided stream until stopped or done.
395	NewKV initializes a leasing KV client and returns it along with close and wait functions.
396	rescind deletes key-value pairs based on revision and ensures transactional consistency.
397	LeaseValue returns a Compare object for comparing lease keys.
398	ValueBytes returns bytes from target union value or nil.
399	WithRange sets the RangeEnd field to byte array of end.
400	WithPrefix updates RangeEnd using getPrefix on Key.
401	mustInt64 converts input to int64; panics if conversion fails.
402	mustInt64orLeaseID converts LeaseID to int64 or uses mustInt64 for other types.
403	gRPCWatcher.Next retrieves the next batch of service updates from a watcher channel.
404	getJournalWriteSyncer creates a syncer for writing logs to the journal.
405	newKV creates a new node with specified properties.
406	newDir creates a new directory node with specified properties.
407	Read retrieves node's value or returns an error if it's a directory.
408	Write updates the node's value and modified index if it's not a directory; otherwise, it returns an error.
409	List returns a slice of child node pointers for the given directory node, or an error if not a directory.
410	GetChild returns node's child by name; returns error if not found or not a directory.
411	Add method adds a child node to the current directory node.
412	Remove deletes the specified directory or file, optionally recursively and invoking a callback.
413	Compare checks if a node's value and index match previous values and indices. It returns true if they do and indicates which specific match occurred.
414	Clone method duplicates a node or directory recursively, preserving metadata and children.
415	isConnectedToQuorumSince checks if a majority of raft members are connected since a given time.
416	isConnectedSince checks if the transport was active before the specified time for the given remote ID.
417	numConnectedSince counts the number of members connected since a given time.
418	longestConnected finds the ID of the member with the longest active connection in the cluster.
419	isTornEntry checks if data contains zeroed sectors, indicating a torn write.
420	StartMockServersOnNetwork starts mock servers on the specified network type and returns them or an error.
421	StartAt initializes and starts a server at a given index.
422	StopAt stops the server at the specified index.
423	Stop iterates through mock servers, stopping each at its index, and waits for all to complete.
424	NewCheckCommand creates a Cobra command for checking properties of the etcd cluster.
425	NewCheckPerfCommand creates a Cobra command to check etcd cluster performance with customizable options.
426	NewCheckDatascaleCommand creates a cobra command to check data scale.
427	NewGetCommand creates a cobra command for getting keys with various options.
428	NewGetCommand creates a CLI command for retrieving key values with sorting and quorum options.
429	PickPeerURL selects a random peer URL from a member's list.
430	HandleMetricsHealth registers handlers for metrics and health checks on the HTTP server
431	NewRemoveCommand returns a CLI command for removing keys or directories.
432	rmCommandFunc deletes a key or directory recursively with optional previous value and index checks.
433	checkIntervals validates intervals and detects overlaps.
434	ReportEventReceived updates counters and gauges based on event count
435	RegisterKVHandler registers a KV handler on the given gRPC server.
436	RegisterWatchHandler registers a watch handler client for gRPC connections.
437	RegisterLeaseHandler registers a gRPC handler for lease operations using the provided client connection.
438	RegisterClusterHandler registers a gRPC handler for the Cluster service on the given ServeMux using the provided client connection.
439	RegisterMaintenanceHandler registers a maintenance handler using gRPC.
440	RegisterAuthHandler registers authentication handler using gRPC client connection.
441	startEtcd starts an etcd server, registers an interrupt handler, waits for it to join the cluster, and returns stop notify channel, error channel, and any error encountered.
442	identifyDataDirOrDie checks a directory's contents and returns its type or dies on error.
443	openLast opens the last WAL file in the specified directory.
444	gotLeader updates leader channel to signal new leader election.
445	lostNotify returns leader's notify channel.
446	newGRPCProxyCommand creates a new cobra.Command for grpc-proxy subcommands.
447	NewMemberCommand creates a Cobra command for managing membership subcommands.
448	NewMemberAddCommand creates a Cobra command to add a member to the cluster.
449	NewMemberRemoveCommand creates a Cobra command to remove a member from the cluster.
450	NewMemberUpdateCommand creates a Cobra command to update a cluster member.
451	NewMemberListCommand creates a cobra command for listing cluster members.
452	memberAddCommandFunc handles adding a new member to a cluster, validates input, and updates configuration accordingly.
453	memberRemoveCommandFunc processes a command to remove a member by ID, validating input, making a request, and displaying the response.
454	memberUpdateCommandFunc updates a member's peer URLs using the provided ID.
455	memberListCommandFunc executes a member list command and displays the response.
456	Open initializes a WAL instance using a logger, directory path, and snapshot.
457	OpenForRead calls openAtIndex to open a WAL file for reading.
458	Verify checks if a WAL snapshot matches expected values.
459	Close closes the WAL file and its locks.
460	notify checks if a watcher should be notified based on event details and conditions.
461	Remove will close eventChan and call remove func if not nil.
462	pathDepth constructs a storage path based on nodePath and depth
463	mkV2Node converts an internal key-value to an external node representation.
464	prevKeyFromPuts retrieves the previous key-value from a transaction response where the key exists and has a non-zero creation revision.
465	NewWeightedReport creates a weighted report with the specified precision.
466	NewURLsMapFromStringMap converts a string map to a URLsMap using a specified separator.
467	String converts URLsMap to a sorted, comma-separated list of key-value pairs.
468	URLs will return sorted list of unique URLs from the map.
469	parse parses a comma-separated list of key-value pairs into a map where keys map to lists of values.
470	NewClientHandler sets up an HTTP handler for an etcd server with logging and timeouts.
471	writeKeyEvent encodes and sends event data over HTTP response.
472	writeKeyError logs and handles key-related errors for HTTP responses.
473	getUint64 extracts a uint64 value from a URL query parameter.
474	getBool retrieves a boolean value from a URL form by parsing the first value associated with the given key, returning the parsed boolean and any encountered error.
475	waitDeletes waits for keys under prefix pfx to be deleted. It uses maxCreateRev to filter keys.
476	AddOutputPaths updates zap.Config's OutputPaths and ErrorOutputPaths with new paths, deduplicating and sorting them.
477	NewConfig initializes a default configuration for an etcd server.
478	PeerURLsMapAndToken generates URLs map and token for peer communication based on configuration settings.
479	GetDNSClusterNames retrieves DNS cluster names using both HTTPS and HTTP services, combining results and logging details.
480	checkBindURLs validates URLs for binding, ensuring they use IPs or localhost.
481	GetCluster fetches cluster nodes' URLs from DNS SRV records and resolves them
482	GetClient retrieves service URLs using DNS SRV records.
483	GetSRVService constructs an SRV service name based on the given inputs.
484	ReadDir lists files in a directory, filtering by extension if specified.
485	compact compacts the etcd database up to the specified revision within a timeout.
486	defrag defragments an endpoint using the provided client within a timeout context.
487	NewUserCommand creates a new cobra command for user management with subcommands.
488	userAddCommandFunc handles adding a new user with optional interactive password input.
489	userGetCommandFunc retrieves user details based on command arguments.
490	userChangePasswordCommandFunc changes a user's password using the provided command-line arguments.
491	addEvent inserts event, updates indices, returns event.
492	scan retrieves an event from the history based on the given index and key, considering recursion and deletion/expiration actions.
493	clone creates a deep copy of EventHistory.
494	openSnapshotBackend moves a snapshot file to the backend path and opens the backend.
495	openBackend initializes a backend service with a timeout check.
496	recoverSnapshotBackend restores the snapshot backend from a given snapshot.
497	NewUpdateCommand defines a CLI command for updating keys.
498	setCommandFunc sets a key-value pair with optional TTL in the client API.
499	frontAndBack retrieves the first and last request stats from the queue.
500	Insert adds request stats p to the circular buffer, handling overflow by dequeuing.
501	Rate calculates the processing and bandwidth rates based on queue statistics.
502	Clear resets stats queue parameters
503	UniqueStrings generates a slice of unique random strings of specified length and count.
504	RandomStrings generates a slice of random strings with specified length and count.
505	IsKeyNotFound checks if the given error indicates a key was not found.
506	IsRoleNotFound checks if the given error matches the pattern indicating a missing role.
507	IsUserNotFound checks if the given error is due to a user not being found based on regex matching.
508	JoinCluster initializes a discovery instance and joins a cluster using provided configuration.
509	GetCluster retrieves cluster info using discovery object
510	newProxyFunc creates a proxy function using the given logger and proxy address.
511	isSafeRetry determines if a retry is safe based on the error and retry policy.
512	withRetryPolicy wraps a retry policy in a retry option, setting it on the options object.
513	withAuthRetry configures retry authentication based on input flag.
514	withMax returns a retryOption to set the maximum retries on an options object.
515	`withBackoff sets a backoff function for retry options.`
516	RecvAppendReq updates server stats on receiving an append request.
517	SendAppendReq sends an append request to the server, updates the rate queue, increments the send count, and ensures thread safety using a lock.
518	Merge combines data from another buffer, sorts it, removes duplicates, and updates the current buffer.
519	deleteRevKey checks if a key's revision matches and deletes it if so
520	isMemberBootstrapped checks if a cluster member is bootstrapped by verifying its client URLs.
521	GetClusterFromRemotePeers fetches the cluster from remote peers using the provided logger and URLs.
522	getClusterFromRemotePeers fetches and validates cluster members from remote peers.
523	getRemotePeerURLs retrieves URLs of remote peers in a Raft cluster, excluding the local node.
524	getVersions retrieves versions for cluster members using RaftCluster.
525	decideClusterVersion determines the cluster's minimum supported version based on its members' versions.
526	getVersion fetches and parses version info from peer URLs.
527	NewTimeoutDetector creates a new TimeoutDetector with a maximum duration and initializes a records map.
528	Reset clears timeout records in detector
529	Observe checks if which has exceeded maxDuration since last observed, updating records and returning validity and excess duration.
530	NewPeerHandler initializes a handler for peer interactions using logger and server components.
531	put updates the key index with a new revision, logging a panic if the revision is older than the current one.
532	`tombstone` updates key index generations and handles empty states
533	get retrieves modified and created revisions from the keyIndex based on the given atRev.
534	`since` retrieves revisions from `keyIndex` after a given revision, skipping older ones.
535	keep updates key index generations based on revision availability, removing tombstones when necessary.
536	findGeneration searches for the generation containing the given revision.
537	cancelWatcher removes a watcher from the store's unsynced or synced sets, handles compaction, and updates gauge metrics.
538	syncWatchersLoop continuously synchronizes watchers in the watchableStore, adjusting wait duration based on unsynced watchers and yield time.
539	syncVictimsLoop continuously moves victims until none remain, then waits for updates or stops.
540	moveVictims processes and sends events to watchers, moving those who fail to respond to the victims list.
541	kvsToEvents converts key-value pairs to events, filtering based on watcher group and handling tombstones.
542	notify processes watch notifications, updating watchers and moving slow ones to victims.
543	isOpFuncCalled checks if any opts contain a function named op.
544	UnsafePut calls unsafePut on batchTx to store key-value pair without locking.
545	UnsafeSeqPut implements batchTx.UnsafeSeqPut and behaves as unsafe put operation on bucket.
546	UnsafeRange fetches a range of keys from a bucket in a batch transaction.
547	UnsafeDelete removes a key from a bucket, logging errors if they occur.
548	UnsafeForEach applies the visitor to each key-value pair in the specified bucket.
549	Commit locks batchTx before committing and unlocks afterward.
550	CommitAndStop commits transaction and stops batch processing.
551	Renew renews a lease identified by id, forwarding requests to primary if not primary, handling expiration, clearing remaining TTL, and updating lease heap.
552	Attach adds items to a lease map.
553	revokeExpiredLeases checks for expired leases, applies a rate limit, and sends them to expiredC or retries later.
554	checkpointScheduledLeases schedules lease checkpoints based on a rate limit and processes them in batches
555	expireExists checks if any leases are expired and updates the heap accordingly.
556	findExpiredLeases retrieves up to 'limit' expired leases.
557	refresh updates lease expiry based on current time and duration.
558	forever updates lease expiry to infinite.
559	Keys returns the item keys from lease state.
560	Remaining calculates the time until lease expiry.
561	NewCompactionCommand creates a new command for compacting etcd's event history, with options to wait for physical removal.
562	compactionCommandFunc executes a compaction command using etcd client.
563	NewPutCommand creates a cobra command to insert or update a key-value pair in a store.
564	putCommandFunc handles the PUT operation using provided command-line arguments.
565	NewHandler sets up a reverse proxy server with custom transport and URL handling logic.
566	NewReadonlyHandler wraps a handler to make it read-only.
567	NewSetCommand defines a CLI command for setting key values with options.
568	setCommandFunc sets a key-value pair in etcd with optional TTL and previous value/index.
569	waitOnLastRev checks if a key has been deleted after a specific revision.
570	GetDefaultInterfaces returns default network interfaces or an error.
571	NewSnapshotCommand creates a Cobra command for managing etcd snapshots.
572	NewMoveLeaderCommand creates a cobra command for transferring leadership.
573	transferLeadershipCommandFunc transfers leadership to a specified target based on arguments and handles errors gracefully.
574	OpenDir opens a directory at the specified path and returns a file descriptor.
575	NewRemoveDirCommand returns a CLI command to remove directories or key-value pairs.
576	`rmdirCommandFunc` implements `cli.Command.Run` for deleting a directory.
577	NewDelCommand creates a Cobra command to delete keys or ranges of keys.
578	delCommandFunc deletes a resource based on command arguments and displays the result.
579	NewExpect initializes a new ExpectProcess with the specified name and arguments, using the current system environment if none provided.
580	NewExpectWithEnv creates a new ExpectProcess with specified name, arguments, and environment variables. It starts the process using a pseudo-terminal and initializes read goroutine to handle output.
581	ExpectFunc waits for a line matching a given condition and returns it.
582	ExpectFunc returns a match when the input string contains the specified substring.
583	LineCount returns the current count of lines processed.
584	Signal sends a signal to the process being watched.
585	keyFunc generates a key from a RangeRequest protobuf message by marshalling it to bytes.
586	Add handles RangeRequests, updating cache entries based on revisions and keys.
587	Get fetches cached range response based on request; returns error if not found or compacted.
588	Invalidate removes entries from the cache within a specified range using keys or an interval.
589	Compact updates the cache's compacted revision if the new revision is higher.
590	NewUniqueURLsWithExceptions creates a set of unique URLs, allowing specified exceptions.
591	UniqueURLsFromFlag retrieves unique URLs from flag set using specified flag name.
592	UniqueURLsMapFromFlag retrieves unique URLs from flag values.
593	Hold creates a new key without a lease.
594	Release releases the barrier by deleting its key from the client.
595	Wait checks key existence and waits for events.
596	NewLockRacerCommand creates a Cobra command for performing a lock race operation.
597	ElectionTimeout converts election timeout from milliseconds to duration.
598	DialEtcdGRPCServer establishes a gRPC client connection to an etcd server using specified options.
599	CreateEtcdClientConfig generates client config for Member.
600	CreateEtcdClient initializes and returns a new etcd client using configuration created from given options.
601	CheckCompact verifies etcd compaction at a specified revision; returns error if mismatch occurs.
602	Defrag attempts to defragment etcd by creating a client, setting a timeout, and executing the defragmentation command.
603	RevHash retrieves etcd revision and hash values.
604	Rev retrieves the current revision number from etcd
605	Compact compacts the etcd database at the given revision within the specified timeout.
606	IsLeader checks if member is the leader in etcd cluster.
607	WriteHealthKey creates an etcd client, sets health status, and handles errors gracefully.
608	SaveSnapshot saves a member's etcd snapshot, logs details, and updates snapshot info.
609	RestoreSnapshot restores a member's etcd snapshot and logs the process.
610	NewWatcher wraps a Watcher with a prefix and provides a stop channel.
611	NewRawNode creates a new raw node with specified configuration and peers.
612	Campaign triggers Raft consensus algorithm to become leader.
613	Propose sends a proposal message to the Raft group
614	ProposeConfChange sends a configuration change proposal to the Raft node.
615	ApplyConfChange updates the Raft configuration based on the given ConfChange and returns the updated ConfState.
616	Step processes messages in Raft consensus algorithm.
617	Ready returns the current ready state of a raw node after processing raft messages.
618	WithProgress applies a visitor function to each node's progress.
619	ReportUnreachable sends an unreachable message to the raft node.
620	ReportSnapshot updates raft state based on snapshot status.
621	TransferLeader initiates leader transfer to specified node.
622	Applies read index to Raft node
623	printcURL will log a cURL command based on the given HTTP request if debugging is enabled. If the request has a body, it will include the body data in the cURL command. The original request's body is then reset for further processing.
624	StartNode initializes a Raft node with peers and applies initial configuration.
625	RestartNode creates a new raft node using configuration and starts it asynchronously.
626	Tick manages node's tick or handles blockage warning
627	MustSync checks if the current term or vote has changed since the previous state, or if there are new entries. It returns true if any changes require synchronization.
628	NewGRPC17Health initializes a health checker for gRPC endpoints, setting up channels, addresses, and goroutines to monitor their health status.
629	NeedUpdate checks if addr updates are needed based on connection status.
630	dflSignal resets a signal's action to default using RT_SIGACTION.
631	New creates a new store instance with specified namespaces and uses real-time clock.
632	store.Index returns the current index value while holding a read lock on worldLock.
633	Get retrieves an event from the store based on the node path, optionally recursively and sorted. It handles locking, error reporting, and stats tracking.
634	Create implements node creation logic in store.
635	Set updates or creates a node at the given path with the specified value and options.
636	Method to determine comparison failure cause based on node values and indices
637	Delete removes a node or directory recursively.
638	walk traverses a node path applying a function to each component.
639	internalGet navigates through the store's hierarchy to retrieve a node based on the given path.
640	DeleteExpiredKeys removes keys expired before cutoff from store.
641	checkDir verifies if a directory exists under a given parent node; creates it if it doesn't exist and returns the node.
642	Save marshals store clone to JSON.
643	Recovery recovers the store's state from JSON data and cleans up expired keys.
644	Next generates the next ID using a prefix and a unique suffix.
645	NewMakeMirrorCommand creates a Cobra command for making a mirror of an etcd cluster.
646	NewZapCoreLoggerBuilder returns a function to configure a LoggerBuilder with specified logger, core, and write syncer.
647	NewSyncer creates a new syncer instance for the given client, prefix, and revision.
648	DropPort will drop TCP traffic on specified port both inbound and outbound.
649	SetLatency configures network latency on default interfaces using `tc` command.
650	RemoveLatency will delete network latency settings on default interfaces.
651	NewTxnCommand creates a cobra command for processing transactions interactively or non-interactively. The Run field specifies the function to execute when the command is run.
652	txnCommandFunc reads input from stdin to define a transaction with conditional operations and displays the result.
653	New creates a new compactor based on the specified mode.
654	printResponseKey formats and prints response details based on specified format.
655	RegisterLockHandler registers a gRPC client handler using a ServeMux and a gRPC connection.
656	grpcHandlerFunc routes HTTP requests to either gRPC server or another handler based on request protocol.
657	addCORSHeader sets CORS headers for HTTP response.
658	fallback generates new get operations for non-get ops, prefixed with a key range.
659	IDFromString converts a hexadecimal string to an ID.
660	Release closes file descriptor and removes lock file
661	EncodedSize calculates the total encoded size of the value considering its expiration time.
662	Decode extracts meta and user meta from byte slice, then parses expires at and value.
663	NewMergeIterator creates a MergeIterator to merge multiple Iterators into a single sorted or reverse-sorted Iterator based on the provided parameters.
664	Initialize heap from iterators, store valid key.
665	Valid checks if MergeIterator is valid.
666	Key returns the first byte slice key from the heap.
667	Value will return the first item's value from the heap or an empty struct if the heap is empty.
668	Next will move to the next element in the merge iterator, handling heap operations and key comparisons.
669	Seek iterates over all iterators, seeking to the given key and then initializes a heap.
670	Close iterates over all iterators in MergeIterator and closes them, returning the first error encountered or nil if successful.
671	Encode converts a valuePointer to a byte slice.
672	Decode extracts header information from buffer.
673	encodeEntry encodes an entry's key, value, and metadata into a buffer, calculates a CRC32 checksum, and returns the total byte count.
674	SetEntry commits transaction if size exceeds limit.
675	Set adds a key-value pair to the write batch with optional metadata.
676	SetWithTTL adds a new entry to WriteBatch with specified TTL.
677	Delete operation within WriteBatch handles transaction size and commits.
678	commit starts a new transaction, commits the current one, and handles errors.
679	Flush commits the transaction, discards it, waits for completion, and returns any error.
680	Error method returns batch's error state.
681	getMemTables retrieves mutable and immutable memtables from DB.
682	writeRequests processes database requests by writing them to the value log and memtable.
683	ensureRoomForWrite manages memory by flushing data or returning an error if no space.
684	writeLevel0Table processes keys from a flush task's iterator, filters out those starting with a drop prefix, adds valid entries to a table builder, and then writes the resulting table to a writer.
685	handleFlushTask processes a flush task by storing metadata, creating a new file, writing data, and managing tables.
686	flushMemtable handles memtable flush tasks until db.flushChan closes
687	calculateSize updates LSM and Vlog sizes using expvar.
688	Size returns the sizes of LSM and Vlog directories.
689	Next returns the next value in the sequence or updates the lease if necessary.
690	Release releases the sequence's next value to the database and updates the leased value.
691	KeySplits retrieves table prefixes matching a given byte slice.
692	Flatten performs compactions in parallel based on worker count and prioritizes levels for consolidation.
693	Mmap maps a file to memory, allowing access or modification based on writable flag.
694	Madvise adjusts memory advice for byte slice based on readahead flag.
695	setDiscardTs updates discardTs with ts after acquiring lock.
696	hasConflict checks for conflicts in a transaction based on reads and commits.
697	Set will store a key-value pair in the transaction.
698	SetWithMeta updates entry with specified key, value, and metadata.
699	Delete operation on a transactional database entry.
700	Retrieve item from transaction based on key; handle updates, cache hits, and expirations.
701	CommitWith commits the transaction and runs a callback after completion.
702	View executes a transactional function using a database connection.
703	Update applies a transactional function to a database.
704	Seek advances the iterator to the first key greater than or equal to the specified key. If no such key exists, it sets an EOF error.
705	SeekToLast will move the iterator to the last element of the block.
706	`parseKV populates key and value from data based on header; updates position and handles errors.`
707	NewIterator creates a new iterator for the table, optionally reversing the order.
708	seekFrom navigates an iterator based on a given key and position, adjusting its state accordingly.
709	seekForPrev searches backward from a given key until it matches or reaches the beginning.
710	Value method returns decoded value from iterator.
711	Seek will move the iterator to the specified key, adjusting direction based on reversed flag.
712	NewConcatIterator creates iterators for each table, concatenates them, and returns a new ConcatIterator.
713	Valid checks if ConcatIterator is valid.
714	Next advances ConcatIterator to the next valid item or end.
715	Close iterates over all iterators and closes them, returning the first error encountered wrapped with "ConcatIterator".
716	OpenExistingFile opens an existing file with specified flags.
717	Copy creates a new byte slice containing a copy of the input bytes.
718	KeyWithTs prepends a timestamp complement to a key.
719	ParseTs calculates a value by subtracting the last 8 bytes of a key from the maximum uint64 value.
720	ParseKey trims last 8 bytes from non-nil key
721	SameKey checks if two byte slices have the same parsed key.
722	FixedDuration formats a duration as a string with hours, minutes, and seconds.
723	NewCloser creates a Closer with an initial count. The Close method decrements the count and closes the channel when zero. The Wait method blocks until the count reaches zero.
724	NewThrottle creates a Throttle with a buffered channel for controlling concurrency.
725	Do attempts to execute the task, waiting for availability or an error.
726	Done signals throttle completion, handles errors, and waits for confirmation.
727	Finish waits for tasks to complete and closes channels.
728	SetDiscardTs updates discard timestamp if not using managed transactions.
729	openReadOnly opens a log file in read-only mode and maps it to memory.
730	iterate reads log entries from a file starting at a given offset, applying a function to each entry until the end of the file or an error occurs.
731	sortedFids returns a sorted list of file IDs excluding those marked for deletion.
732	write updates value log files with requests.
733	populateDiscardStats fetches discard stats from db and populates vlog.lfDiscardStats.
734	Backup creates a database backup using a writer.
735	ToList retrieves a list of key-value pairs from an iterator based on a given key.
736	produceRanges generates ranges for streaming keys, sending them through a channel.
737	produceKVs reads keys within specified ranges, filters them using ChooseKey, converts to KV format, and sends batches to kvChan until done or context canceled.
738	Orchestrate manages key-value streams using goroutines and channels.
739	NewStream checks if managedTxns is true and panics if so. Otherwise, it calls newStream and returns a Stream pointer.
740	NewStreamAt creates a new Stream at a given readTs in managed mode.
741	DecrRef decrements table references and cleans up resources if none remain.
742	ParseFileID extracts and validates a numeric ID from a file name, returning it as a uint64 and a boolean indicating success.
743	PrintHistogram generates and prints histograms of key and value sizes from the database.
744	createSizeHistogram generates a struct to track key and value sizes using histograms.
745	buildHistogram creates a histogram of key and value sizes using BadgerDB iterator.
746	printHistogram outputs a formatted representation of histogram data.
747	Init initializes WaterMark's markCh and elog; starts process goroutine.
748	Begin sets the last index and sends a mark message
749	BeginMany sets the last index and sends a mark with initial values to the watermark channel.
750	WaterMark signals completion at specified index
751	DoneMany sends a signal to watermark indicating multiple indices are processed
752	SetDoneUntil updates the doneUntil field atomically.
753	WaitForMark waits for a watermark at or above the specified index, returning an error if the context is canceled before the mark is reached.
754	Encode converts a header to a byte slice using big-endian encoding
755	Parse buffer to decode header fields.
756	NewTableBuilder initializes and returns a Builder for constructing tables.
757	keyDiff compares two keys and returns the differing part.
758	Add inserts a key-value pair into the builder; it manages blocks and restarts when necessary.
759	blockIndex generates a byte slice representing block offsets for a Builder.
760	Finish processes keys, builds a bloom filter, and serializes it to bytes.
761	Errorf logs an error message using the specified format and values.
762	Infof logs informational messages using the provided format and arguments.
763	DecrRef decrements reference count; resets arena on zero.
764	NewSkiplist initializes a new Skiplist
765	Put inserts or updates a key-value pair in the Skiplist. If the key already exists, its value is updated. The method handles height adjustment using concurrent operations.
766	Get retrieves the ValueStruct associated with the key. An empty ValueStruct is returned if the key does not exist or if keys do not match.
767	Key retrieves the byte slice at the specified offset and size from the arena.
768	Value retrieves the value at the current iterator position from the list's arena.
769	Next will move iterator to next element in list if valid.
770	Prev moves iterator to previous item if valid.
771	Seek will locate the nearest item greater than or equal to the target byte slice in the list.
772	SeekForPrev searches for the nearest element less than or equal to target in the iterator's list.
773	Skiplist's NewUniIterator method returns a new UniIterator instance configured to iterate over the skiplist in either forward or reverse order based on the 'reversed' parameter.
774	Next will move the iterator forward or backward based on the reversed flag.
775	Seek will move the iterator to the position of the given key in the specified direction.
776	asChanges converts manifest tables to protobuf manifest change objects.
777	rewrite closes the manifest file, rewrites it, updates the manifest, and returns any errors.
778	validate ensures tables within a levelHandler are ordered correctly.
779	acquireDirectoryLock acquires a directory lock using a temporary file, supporting read-only mode on non-Windows systems.
780	release resets the path and closes the handle using syscall.CloseHandle.
781	AssertTruef logs a fatal error if condition is false.
782	Wrapf wraps the given error with a formatted message, skipping if debugMode is false or the error is nil.
783	initTables initializes table metadata and sorts them based on key ranges.
784	deleteTables removes specified tables from handler's list.
785	tryAddLevel0Table adds a new table to level 0 if there's space available, increments reference count, updates total size, and returns success.
786	getTableForKey retrieves tables based on a key, handling both level 0 and greater levels.
787	get retrieves the latest value struct for the given key from levelHandler's tables.
788	overlappingTables finds the range of tables that overlap with a given key range.
789	String returns a formatted string representation of this Item.
790	KeyCopy copies the key to dst using SafeCopy.
791	ValueSize calculates the size of item's value
792	NewKeyIterator creates a key iterator with options.
793	`Valid` checks if the iterator's item key has the specified prefix.
794	ValidForPrefix checks if iterator's current item key starts with a specified prefix while being valid.
795	Close closes the iterator and waits for related goroutines to finish.
796	parseItem advances iterator to next valid item, skipping badger keys and expired items.
797	Seek updates iterator to point to key or prefix. Adjusts for reverse order and timestamps. Prefetches next item.
798	`GetMergeOperator initializes a new merge operator with specified parameters and starts compaction goroutine.`
799	Get retrieves data using MergeOperator.
800	compareAndAdd compares two levels and adds them if they don't overlap, returning true if successful
801	newArena creates a new arena with an offset of 1 to avoid using position 0 as a nil pointer.
802	putNode calculates the aligned offset for a new node in the arena based on its height.
803	getNode retrieves a node from the arena using an offset. If the offset is zero, it returns nil. Otherwise, it converts the buffer address to a node pointer.
804	getKey extracts a byte slice from buffer based on offset and size.
805	getVal extracts a value from a buffer at a specified offset and size.
806	getNodeOffset calculates the offset of a node within an arena's buffer.
807	Initialize metrics using expvar for monitoring disk reads, writes, bytes transferred, LSM operations, and other badger-related statistics.
808	revertToManifest checks and cleans up unused files based on a manifest and ID mapping.
809	dropTree removes tables and updates manifest accordingly.
810	dropPrefix removes entries with specified prefix from levels.
811	isLevel0Compactable checks if the first level has enough tables to compact
812	doCompact runs compaction for specified level in BadgerDB, handling table filling and execution while logging progress and errors.
813	get retrieves the latest value for a given key across multiple levels, updating the maximum version found.
814	seekTotal calculates and verifies the total balance of accounts in a transaction.
815	findFirstInvalidTxn recursively checks timestamps in a database to find the first invalid transaction.
816	Create handles snapshot creation, validating version and initializing metadata.
817	List retrieves the latest snapshot metadata or an empty list if none exists.
818	Open retrieves a snapshot by ID, returning its metadata and contents.
819	Write appends data to the snapshot contents and updates metadata size.
820	NewFileSnapshotStoreWithLogger creates a FileSnapshotStore instance with optional logging.
821	NewFileSnapshotStore creates a FileSnapshotStore with optional logging.
822	snapshotName generates a unique name for a snapshot using term, index, and current timestamp in milliseconds.
823	Create creates a new snapshot sink with specified parameters.
824	List returns up to retain number of SnapshotMetas from the store.
825	getSnapshots retrieves and sorts snapshot metadata from a directory, filtering out temporary and unsupported versions.
826	readMeta reads and parses the metadata file for a given snapshot.
827	Open retrieves the specified snapshot's metadata and state file, verifies its integrity, and returns it along with a reader.
828	ReapSnapshots removes old file snapshots from storage.
829	Write method for FileSnapshotSink writes bytes to its buffer.
830	Close closes the snapshot sink, finalizes it, writes metadata, moves the directory, syncs parent dir, and reaps old snapshots.
831	Cancel method closes FileSnapshotSink.
832	finalize ensures all buffered data is flushed, synced, and metadata updated before closing the file
833	FileSnapshotSink.writeMeta creates a metadata file at a specified path, buffers the file I/O, encodes the sink's metadata as JSON, flushes the buffer, and syncs the file to ensure data persistence.
834	NewNetworkTransportWithConfig initializes a NetworkTransport with given configuration.
835	setupStreamContext initializes streamCtx and streamCancel for NetworkTransport.
836	getStreamContext is a thread-safe method to retrieve the stream context.
837	SetHeartbeatHandler assigns a callback function to handle heartbeats in NetworkTransport.
838	CloseStreams closes all connections in the pool and updates the context.
839	Close shuts down the network transport gracefully.
840	getPooledConn retrieves a connection from the pool for a given server address, ensuring thread safety through locking.
841	getConnFromAddressProvider fetches a connection using an address from the provider or a fallback.
842	getConn retrieves or dials a network connection to a specified server address, pooling existing connections when available.
843	These methods manage network connections in a pool, ensuring they're not released prematurely or exceed the maximum pool size.
844	listen handles incoming network connections, implementing exponential backoff on failures. It runs in a loop until shutdown.
845	handleConn manages network connections for handling commands and responses using msgpack encoding/decoding. It listens for incoming commands, processes them, and sends responses until the connection is closed or an error occurs.
846	handleCommand processes incoming network commands and dispatches them accordingly.
847	decodeResponse reads a response from a connection and decodes it.
848	sendRPC sends an RPC request over the given connection using the specified type and arguments.
849	new.NetPipeline initializes a network pipeline with transport and connection.
850	decodeResponses processes responses from inprogressCh, decodes them, and handles shutdown gracefully.
851	AppendEntries sends an RPC request and waits for it to complete or handle shutdown.
852	Close shuts down the pipeline and releases the connection.
853	NewObserver creates a new Observer with the given channel, blocking mode, and filter function. The observer ID is automatically incremented for each new instance.
854	RegisterObserver adds observer o to raft's observers map.
855	DeregisterObserver removes observer from Raft's list.
856	observe sends observations to registered non-blocking observers or drops them if full.
857	NewInmemStore creates a new memory store for logs and key-value pairs.
858	FirstIndex retrieves the lowest index from InmemStore.
859	LastIndex retrieves the highest index from InmemStore.
860	GetLog retrieves log entry from InmemStore.
861	StoreLog calls StoreLogs with a single log.
862	StoreLogs updates InmemStore's logs map and adjusts lowIndex and highIndex accordingly.
863	DeleteRange removes entries within a specified range in InmemStore.
864	Set updates key with value in memory store. Existing value is replaced without versioning.
865	Get retrieves value for key from store; returns error if not found.
866	SetUint64 locks store, sets key-value pair, unlocks store.
867	GetUint64 retrieves a uint64 value using key
868	NewLogCache creates a new LogCache instance with specified capacity and underlying LogStore.
869	Connect adds a peer to the transport's list of connected peers.
870	Disconnect removes a peer and closes associated pipelines.
871	DisconnectAll disconnects all peers and closes pipelines.
872	Respond sends response through channel
873	Open retrieves snapshot metadata and reader or errors if no snapshot is available.
874	vote updates votes count or notifies based on leadership status and quorum size.
875	notifyAll submits votes for all futures and clears the notify map while holding a lock.
876	cleanNotify removes verifyFuture from notify map
877	LastContact retrieves the last contact time from followerReplication.
878	setLastContact updates the last contact timestamp safely
879	replicate manages Raft log replication to followers, handling heartbeats, triggers, and pipeline modes.
880	pipelineReplicate manages Raft log replication to followers using pipelines and channels.
881	pipelineSend handles sending append entries in Raft protocol
882	pipelineDecode processes follower replication requests, updates replication state, and handles stale terms or stops gracefully.
883	setupAppendEntries prepares AppendEntriesRequest for follower, setting term, leader ID, commit index, previous log, and new logs.
884	setPreviousLog updates PrevLogEntry and PrevLogTerm based on nextIndex and log entries.
885	setNewLogs appends logs to AppendEntriesRequest up to max limit.
886	appendStats measures and increments Raft replication metrics.
887	handleStaleTerm logs an error when a peer has a newer term, stops replication, and notifies followers to step down asynchronously.
888	AppendEntries sends RPCs to replicate log entries between servers in a distributed system.
889	RequestVote sends a vote request to a target server using RPC.
890	InstallSnapshot logs message and returns error.
891	EncodePeer converts ServerAddress to byte slice.
892	DecodePeer converts byte slice to Raft server address.
893	AppendEntries adds an entry to the pipeline's work queue.
894	ReadPeersJSON reads a list of peers from a JSON file and converts it into a configuration object.
895	ReadConfigJSON parses JSON configuration data into a structured format.
896	NewTCPTransport initializes a TCP transport with specified parameters.
897	NewTCPTransportWithLogger creates a TCP transport with logging enabled, using specified bind address, advertise address, maximum pool size, timeout duration, and logger instance.
898	newTCPTransportWithConfig initializes a NetworkTransport with given config.
899	Dial connects to the server address via TCP with the given timeout.
900	Accept method on TCPStreamLayer returns network connection.
901	Addr returns the network address of the TCP connection.
902	restoreSnapshot attempts to restore the Raft state from available snapshots.
903	BootstrapCluster sends a request to initialize a Raft cluster or returns an error if the cluster is shutting down.
904	Leader returns the current server address of the Raft leader.
905	Apply submits a command to Raft for execution within a specified timeout or until shutdown.
906	Barrier method manages timeouts and shutdowns for Raft log operations.
907	VerifyLeader checks if the current node is the leader and increments a metric.
908	AddVoter adds a new voter to the Raft cluster.
909	RemoveServer updates Raft server configuration by removing a specified server.
910	Shutdown stops the Raft instance and returns a future.
911	SnapshotFuture is returned after sending userSnapshotFuture or responding to shutdownCh.
912	Restore applies a snapshot to Raft and waits for replication.
913	String returns a formatted representation of the Raft node.
914	LastContact returns the last contact time for Raft.
915	Logf logs the formatted message using the adapter's logger.
916	function checks if node exists in raftNode slice.
917	LeaderPlus retrieves up to n leader nodes plus additional non-leaders from cluster.
918	WaitTilUptoDate waits for all nodes to apply a specific index within a timeout.
919	assertLogEntryEqual checks if two raft log entries are equal and logs errors if they differ.
920	runFSM handles state transitions and manages snapshots for a Raft node.
921	Clone creates a copy of the configuration with servers appended.
922	Clone creates a deep copy of configurations.
923	hasVote checks if a server with given ID in the configuration has voter suffrage.
924	checkConfiguration validates a configuration for unique IDs and addresses, ensuring at least one voter.
925	nextConfiguration updates a cluster's configuration based on change requests.
926	encodePeers serializes voter servers using specified transport.
927	decodePeers decodes a byte buffer containing encoded peers using MsgPack and returns a Configuration object with deserialized Server details.
928	encodeConfiguration encodes a configuration object to MsgPack format.
929	decodeConfiguration decodes the buffer into a Configuration using msgpack.
930	goFunc runs a function concurrently and manages goroutine lifecycle.
931	getLastIndex returns the maximum last log or snapshot index safely.
932	getLastEntry returns the last log or snapshot index and term from raftState.
933	checkRPCHeader verifies RPC header's protocol version against minimum and maximum limits, and compatibility with the server's configuration. If any condition fails, it returns an error indicating unsupported protocol.
934	setLeader updates the leader address and notifies observers if changed
935	requestConfigChange sends a configuration change request to Raft with an optional timeout.
936	Raft.run manages state transitions between follower, candidate, and leader roles, handling shutdowns gracefully.
937	runFollower handles RPCs and transitions to Candidate if heartbeats fail.
938	liveBootstrap applies a configuration update to a Raft node.
939	runCandidate manages Raft's candidate state, handles RPCs, votes, and transitions based on election outcomes.
940	Raft.runLeader transitions the server to the leader state, initializes necessary structures, starts replication, dispatches a no-op log entry, and enters the leader loop until stepping down.
941	startStopReplication manages Raft's replication by adding or removing followers based on configuration changes.
942	configurationChangeChIfStable checks if Raft config change can proceed and returns the channel or nil
943	verifyLeader checks leader's vote and triggers heartbeats.
944	checkLeaderLease verifies if a leader can contact a quorum of followers within the lease timeout; logs warnings or debugs failures, returns maximum contact duration.
945	restoreUserSnapshot applies a user snapshot to the Raft system, updating metadata and restoring the FSM state.
946	appendConfigurationEntry updates Raft configuration based on future request and handles version compatibility.
947	dispatchLogs processes and commits log entries for replication.
948	processLogs applies new logs to the Raft instance, skipping duplicates and updating state accordingly.
949	processLog handles different types of logs, forwarding commands to the FSM handler and responding to futures accordingly.
950	processRPC handles different RPC commands by checking headers and calling appropriate handlers.
951	processHeartbeat handles raft append entries requests or logs unexpected commands.
952	setLastContact updates last contact timestamp safely
953	persistVote saves the last vote term and candidate to stable storage.
954	setCurrentTerm updates the Raft instance's current term and persists it to disk.
955	setState updates Raft's state and notifies observers if changed.
956	getCommitIndex is a thread-safe getter for fetching the commit index.
957	recalculate updates commitIndex based on matchIndexes and notifies asynchronously.
958	randomTimeout generates a channel after a random duration within the specified minimum value.
959	generateUUID creates a version 4 UUID using cryptographically secure random numbers.
960	decodeMsgPack decodes a MsgPack-encoded byte slice into the provided Go value using a custom decoder.
961	encodeMsgPack will serialize the input object to a MsgPack-encoded byte buffer.
962	backoff calculates exponential backoff duration based on round and limit.
963	newApplySource generates a hash-based seed for applySource.
964	reset initializes rnd field with a new random number generator using seed.
965	DefaultConfig returns the default configuration for a system.
966	ValidateConfig checks if the given configuration meets all the required criteria and returns an error if not.
967	Raft.runSnapshots manages snapshots at random intervals or on user request, handling errors and shutdowns gracefully.
968	shouldSnapshot checks if the log index exceeds the snapshot threshold by comparing it to the last snapshot index.
969	takeSnapshot creates a Raft snapshot, waits for responses, checks conditions, creates a new snapshot, persists it, closes it, updates last snapshot info, compacts logs, and returns the snapshot ID.
970	compactLogs truncates old logs based on snapshot and configuration settings
971	WebpackCheck checks for updates to webpack.config.js and replaces it if necessary.
972	New creates a new genny generator based on options.
973	UnixSocket creates a new Listener for handling Unix socket connections on the specified address.
974	Get retrieves an ErrorHandler based on the status code; defaults to the first or a default handler if not found.
975	PanicHandler recovers from panics, logs them, emits events, and handles errors gracefully.
976	partialFeeder retrieves a partial template based on name and content type.
977	New initializes a new Engine instance with default template engines and content type.
978	WriteTo method writes message to writer and returns number of bytes written and any error encountered.
979	Send will send an email using SMTP.
980	NewSMTPSender creates a new SMTP sender using the provided host, port, user, and password, returning an SMTPSender instance or an error if the port is invalid.
981	Param retrieves a parameter from Params using the given key.
982	Set updates the data map in DefaultContext with the given key and value while locking access.
983	Value retrieves the value associated with the given key from the context's data map or parent context. If the key is not found, it returns the result from the parent context.
984	Redirect changes the response status and URL based on input parameters and arguments.
985	File retrieves a file from a multipart form request by name.
986	MarshalJSON serializes context data excluding self-reference.
987	New creates a new genny group using provided options and templates.
988	New initializes and returns a new App instance with default configurations and error handling middleware.
989	DeprecrationsCheck checks for deprecated usage in Go files and logs warnings.
990	List returns an error indicating the resource is not implemented.
991	Render outputs data to writer using renderFunc.
992	Save saves the session using the request and response.
993	GetOnce retrieves and deletes value from session.
994	Set assigns a value to a session's Values map under a specified name.
995	Delete all session values
996	getSession retrieves or creates a session from the request and response.
997	New creates a Generator with options, validates them, transforms data, runs a file generation function, and returns the Generator.
998	New creates a generator to manage npm operations based on provided options.
999	New generates a genny Generator from Options, validates them, and applies transformations based on templates and context.
1000	NewMessage creates and configures a Message with optional settings, applying charset and encoding.
1001	Reset clears all message parts and attachments
1002	SetHeader updates the header field with the given values.
1003	SetHeaders updates message headers using key-value pairs.
1004	Sets message header field to formatted address
1005	FormatAddress formats email addresses with optional names.
1006	SetDateHeader updates message header with formatted date.
1007	FormatDate converts a time to a RFC1123Z formatted string.
1008	SetBody updates Message's body content using contentType and settings.
1009	SetPartEncoding returns a PartSetting to configure part encoding.
1010	SetHeader updates file header fields based on input map.
1011	SetCopyFunc assigns a copy function to file settings.
1012	AttachReader attaches a reader to the message with optional settings.
1013	Attach adds a file attachment to the message.
1014	EmbedReader adds a file from an io.Reader to Message with specified settings.
1015	Embed adds a file to Message's embedded list with specified settings.
1016	ValidateTemplates validates templates using provided validators.
1017	PlushValidator checks if file f has .html, .md, or .plush extension and returns an error if plush parsing fails.
1018	Validate checks if options are valid, setting defaults where necessary.
1019	LoadPlugins loads available plugins and registers their events.
1020	WriteHeader updates Response's Status and calls WriteHeader on ResponseWriter.
1021	Write method updates response size and forwards byte slice to underlying writer.
1022	Flush flushes the response writer if it implements the Flusher interface.
1023	CloseNotify returns a channel that notifies when the response writer is closed.
1024	Run updates the app to Buffalo version and executes checks, logging warnings if any.
1025	onlyRelevantFiles filters and processes Go files in a directory, skipping certain directories and non-Go files.
1026	GoTemplateEngine executes Go templates with data and helpers, returning formatted HTML or an error.
1027	GET method adds a route with specified path and handler to App.
1028	Redirect sets up a route that redirects requests from 'from' to 'to' with the given status.
1029	ANY registers a handler for multiple HTTP methods on a path.
1030	buildRouteName processes a path to generate a route name by splitting it, singularizing certain parts, and converting to variable case. If empty or root, returns "root".
1031	New creates a group with templates based on options.
1032	NewDialer creates a Dialer instance with specified connection details.
1033	Dial establishes a new SMTP connection to the server at the specified address using the given dialer options. If SSL is enabled, it upgrades the connection. If authentication is required, it attempts to authenticate using the available mechanisms. Returns a SendCloser interface for sending emails.
1034	DialAndSend establishes connection then sends messages.
1035	Set assigns values to key in Flash data. Existing values are replaced.
1036	Add will insert a key-value pair into Flash data, appending values if the key already exists.
1037	Flash data persists in session after marshalling.
1038	newFlash creates a Flash instance from a Session.
1039	Get retrieves the cookie value by name, returning an error if not found.
1040	Sets cookie with name, value, and max age
1041	SetWithExpirationTime creates and sets a cookie with expiration time.
1042	Delete removes the named cookie from the response.
1043	NewMessage initializes a new message with default values.
1044	NewFromData creates a new message from render data.
1045	New creates a new message from context data.
1046	CloseNotify returns a channel indicating when the event source is closed.
1047	NewEventSource initializes an event stream with the given HTTP response writer.
1048	NewSimpleWithContext creates a new Simple instance with a logger and context.
1049	Register adds a handler to Simple under a given name, ensuring it's unique.
1050	Start initializes worker, logs start message, sets up cancelable context.
1051	Stop logs and cancels a Simple background worker.
1052	Perform executes a job using its handler or logs an error if no handler is found.
1053	PerformAt schedules job to run at specific time.
1054	PerformIn schedules job execution after delay or on context cancelation.
1055	String method converts RouteInfo to a formatted JSON string.
1056	Alias appends aliases to RouteInfo and handles them.
1057	Name modifies PathName based on RouteInfo's path and method, ensuring it ends with 'Path'.
1058	BuildPathHelper generates a URL path helper based on route options.
1059	New creates a generator with specified options and templates.
1060	New creates a generator and runs a construction function with options.
1061	RegisterCustomDecoder registers custom type decoders for specified types and fields.
1062	Replace replaces middleware function mw1 with mw2 in the stack.
1063	Routes returns the list of routes from the app's root or directly from the app.
1064	WrapBuffaloHandler converts a Buffalo handler to an HTTP handler by wrapping it in a new router.
1065	PackageJSONCheck updates package.json if it differs from the latest template, installing dependencies accordingly.
1066	match checks if the import path starts with any key in Data and replaces it with corresponding value.
1067	Send sends each message in msg to s, returning the first error encountered.
1068	Last checks if the last part matches the given name.
1069	Stop cancels the app and logs non-canceled errors.
1070	DepEnsure runs 'go get' or 'dep ensure' based on app configuration.
1071	String method returns formatted build information.
1072	New creates a new generator with specified options.
1073	AddBody appends the rendered content to the message's bodies using the provided renderer and data.
1074	AddBodies renders message bodies using specified renderers.
1075	AddAttachment adds an attachment to Message.
1076	AddEmbedded attaches an embedded file to the message.
1077	SetHeader updates the Headers map with the given field and value.
1078	New creates a new genny group based on options.
1079	New generates a genny Generator with templates, replacing content in application.html.
1080	New creates a generator with app details, configs, and pkg checks.
1081	Cleanup performs rollback operations on specified files and directories
1082	MDTemplateEngine processes input using templates and helpers
1083	Update modifies a ConfigMap based on specified updates and saves it using a Kubernetes client.
1084	FilterChanges filters PR changes to determine which configmaps to update based on glob patterns.
1085	getLabelsFromREMatches extracts labels from regular expression matches.
1086	get.LabelsFromMatches extracts matching labels from generic matches and additional labels.
1087	Start initializes the agent and reloads configuration periodically.
1088	Subscribe method adds a new subscription to Agent's subscriptions list.
1089	Config retrieves configuration safely from Agent.
1090	Set updates the agent's configuration, locks during update, sends config changes asynchronously to subscriptions after a delay.
1091	IsMember checks user membership in an organization.
1092	ListIssueComments returns mock issue comments
1093	ListPullRequestComments retrieves comments from fake client
1094	ListReviews retrieves reviews from fake client.
1095	ListIssueEvents mocks base method
1096	CreateComment adds a comment to an issue and updates the fake client's state accordingly.
1097	CreateReview adds a draft review to specified repository and increments review ID.
1098	CreateCommentReaction mocks adding comment reactions
1099	Adds issue reaction to fake client
1100	DeleteComment will remove an issue comment by ID and update the fake client's records.
1101	delete stale comments based on criteria
1102	GetPullRequest retrieves pull request from fake client
1103	GetPullRequestChanges retrieves mock data
1104	GetRef returns test reference for fake client.
1105	DeleteRef mocks client method
1106	GetSingleCommit retrieves commit from fake client.
1107	CreateStatus updates or adds a status to the fake client.
1108	ListStatuses retrieves statuses for a specific reference.
1109	GetCombinedStatus retrieves status from FakeClient.
1110	GetRepoLabels constructs a list of labels from existing data.
1111	GetIssueLabels retrieves labels for a specific issue using regex filtering.
1112	AddLabel attempts to add a label to an issue, ensuring it's not already added or existing in the repository.
1113	RemoveLabel removes a label from an issue if it hasn't been removed before.
1114	FindIssues returns mocked issues
1115	AssignIssue updates issue assignees in a fake client, tracking missing users.
1116	GetFile fetches file content from remote repository. If file or commit not found, returns error.
1117	ListTeams returns predefined teams
1118	ListTeamMembers checks role and returns team members based on team ID.
1119	IsCollaborator checks if a user is a collaborator for a given organization and repository.
1120	ListCollaborators mocks collaborators list
1121	ClearMilestone resets milestone value in FakeClient.
1122	SetMilestone updates milestone number or returns error
1123	ListMilestones retrieves milestones from fake client
1124	ListPRCommits retrieves PR commit history from a fake client using organization, repository, and PR number.
1125	GetRepoProjects retrieves projects from a fake client.
1126	GetOrgProjects retrieves projects for an organization using a fake client.
1127	GetProjectColumns retrieves columns for a given project ID
1128	CreateProjectCard adds a project card to a specified column and returns it.
1129	DeleteProjectCard removes a project card from its column.
1130	MoveProjectCard updates a project card's position within a project management system by removing it from its current column and adding it to a new column.
1131	CreateDatabaseClient generates an InfluxDB client using the configuration details.
1132	Push sends a new point to InfluxDB with the given measurement, tags, fields, and timestamp.
1133	newProwJobWithAnnotation creates a ProwJob using given spec, labels, and annotations.
1134	NewProwJob creates a ProwJob using specified spec and labels, delegating to newProwJob with no additional config.
1135	NewPresubmit creates a ProwJob for presubmit testing based on PR details and job configuration.
1136	PresubmitSpec constructs a ProwJobSpec from a Presubmit configuration and references.
1137	PostsubmitSpec converts a postsubmit config to ProwJobSpec.
1138	PeriodicSpec converts a periodic job configuration to a ProwJobSpec.
1139	BatchSpec constructs a ProwJobSpec based on presubmit configuration and refs.
1140	PartitionActive partitions ProwJobs into pending and triggered channels based on their status states.
1141	ProwJobFields extracts relevant fields from a ProwJob object for logging purposes.
1142	This function maps a Kubernetes cluster context to its alias, using a default alias if the input matches the in-cluster context.
1143	AddCommand will include a new Command in the Commands slice of PluginHelp.
1144	Get mocks base method
1145	Watch triggers a fake watch action on prow jobs based on given list options.
1146	Delete removes a Prow job by its name.
1147	Patch mocks base method
1148	MergeMethod retrieves or defaults to merge type based on organization and repository.
1149	Query constructs a search query based on specified criteria like organizations, repositories, branches, labels, and milestones.
1150	ForRepo checks if a given repository belongs to a specified organization.
1151	TideQueries.OrgExceptionsAndRepos calculates organization exceptions and repositories based on excluded and included repos.
1152	QueryMap constructs a new query map instance
1153	ForRepo retrieves tide queries for a specific repository.
1154	Validate checks for conflicts between required, optional, and conditionally required contexts in TideContextPolicy and returns an error if any conflicts are found.
1155	GetTideContextPolicy generates policies based on tide context options, branch requirements, and branch protection.
1156	IsOptional checks if a context is optional based on policy rules.
1157	MissingRequiredContexts checks if required contexts are present in the given list. If not, it returns the missing ones.
1158	ValidateWebhook processes HTTP requests, validates headers and payload, and returns extracted data or errors accordingly.
1159	HelpProvider returns plugin help details for managing the 'needs-rebase' label on Pull Requests based on their mergeability.
1160	HandleEvent processes GitHub pull request events and takes actions based on their status.
1161	HandleAll checks enabled repos for open PRs, processes each PR based on conditions, and takes actions accordingly.
1162	NewDryRunProwJobClient returns a new ProwJobInterface
1163	Create simulates ProwJob creation without actual execution.
1164	Update simulates updating a ProwJob and returns it unchanged.
1165	UpdateStatus updates ProwJob status in dry-run mode.
1166	Delete method for ProwJobClient performs dry run deletion.
1167	DeleteCollection method for ProwJobClient implementation.
1168	Get fetches ProwJob by name using dry-run client.
1169	List retrieves ProwJobs based on label selector from the client.
1170	Watch returns a no-op watcher for dry-run Prow jobs.
1171	Patch method simulates updating a ProwJob resource.
1172	hasSynced checks if all informers have synced. If not, it waits and updates status accordingly.
1173	Run starts pipeline controller, waits for caches, runs workers until stopped.
1174	runWorker continuously processes items from workqueue using reconcile function.
1175	fromKey extracts three components from a key using slashes.
1176	enqueueKey adds objects to the work queue based on their type and namespace.
1177	finalState checks if ProwJobState is not pending, triggered, or empty.
1178	description determines the condition's message or reason, returning a fallback if both are empty.
1179	prowJobStatus determines the ProwJob state based on its conditions and timestamps.
1180	pipelineMeta generates metadata for a ProwJob based on its labels and annotations.
1181	sourceURL retrieves the URL of the source repository from a ProwJob object, handling cases where it might not be explicitly set.
1182	makePipelineGitResource creates a PipelineResource for Git based on ProwJob details.
1183	makePipelineRun creates a PipelineRun object from ProwJob and PipelineResource, adding build ID and resource binding.
1184	matchingConfigs filters plugin configurations based on organization, repository, branch, and label criteria.
1185	SuggestCodeChange generates a code change suggestion based on linting problems using regular expressions and handlers.
1186	ServeExternalPluginHelp sets up an HTTP handler for external plugin help requests.
1187	protect updates branch protection configurations based on repository status.
1188	UpdateOrg updates organization repositories based on protection settings and returns an error if any update fails.
1189	UpdateRepo checks if a GitHub repo is archived and updates its branches based on the provided configuration.
1190	UpdateBranch updates branch protection settings based on policy.
1191	LoadConfig parses JSON config into Options struct.
1192	Run starts a controller to manage artifact uploads in the specified namespace.
1193	Start initializes an agent, loads secrets from paths, and monitors updates for each secret asynchronously.
1194	reloadSecret continuously checks and reloads a secret from a file every second, resetting skip counter on successful reload.
1195	GetSecret retrieves secret at secretPath; returns byte slice or empty if not found.
1196	setSecret updates the agent's secrets map safely
1197	GetTokenGenerator returns a function that retrieves a secret from a specified path using Agent's GetSecret method.
1198	New initializes a History object, loading existing data if a path is provided.
1199	Record adds a new history entry.
1200	ServeHTTP will respond with JSON-encoded history records.
1201	Flush writes history records to GCS.
1202	AllRecords returns all records grouped by key.
1203	MakeCommand creates a Cobra command for downloading a coverage profile.
1204	CheckFlags compiles regex patterns from plugin configuration and stores them for later use.
1205	ReceiveComment processes comments and returns points based on matchers.
1206	NewController initializes a new controller with specified parameters.
1207	Controller.Run starts a worker pool to process resources using an informer.
1208	runWorker starts a worker loop to process items until none remain.
1209	New creates a LocalGit instance with a temporary Git directory and initializes a Git client.
1210	MakeFakeRepo initializes a fake Git repository with specified organization and repository name.
1211	AddCommit adds files to a local Git repository and commits them.
1212	CheckoutNewBranch creates a new git branch locally.
1213	Checkout checks out a specific commit or branch in a local git repository.
1214	RevParse retrieves commit information from git repository
1215	CleanAll cleans up resources across specified or all regions using given session.
1216	optionsForRepo checks config for matching repos. Returns Lgtm struct if found.
1217	getChangedFiles retrieves modified file names from a GitHub pull request.
1218	loadReviewers gathers unique reviewers for given filenames.
1219	NewController initializes a new controller with specified parameters.
1220	SaveLastSync updates the last sync timestamp to a temporary file and renames it to the fallback location.
1221	Sync updates the controller's knowledge from Gerrit changes, processes them, and saves the last update time.
1222	AddFlags adds event-related flags to cmd.
1223	CheckFlags initializes the event matcher for the plugin.
1224	ReceiveIssueEvent processes SQL issue events, returning points if matched by a matcher.
1225	Upload uploads files to a storage bucket using multiple goroutines. If any upload fails, it returns an error containing all encountered issues.
1226	FileUploadWithMetadata uploads a file to storage with associated metadata.
1227	DataUploadWithMetadata uploads data with associated metadata to a storage object.
1228	HasLabel checks if the label matches any issue labels ignoring case.
1229	ImageTooBig checks if an image URL exceeds 10MB based on Content-Length header.
1230	LevelFromPermissions maps repository permissions to a corresponding level.
1231	PermissionsFromLevel converts a permission level to the corresponding set of repository permissions.
1232	newProwJobs creates a new prow jobs instance with client and namespace.
1233	GetApplicable retrieves blockers applicable to the specified organization, repository, and branch, sorted by their number.
1234	serve sets up HTTP handlers and starts serving on port 8080.
1235	NewCountPlugin creates a command to count events and issues, applying various filters and counters before running the provided plugin.
1236	ReceiveComment processes comments by adding fake events and forwarding them to the plugin.
1237	updateMetrics logs disk usage metrics at specified intervals.
1238	LogStatus logs the current resources stored in Ranch.
1239	SyncConfig method processes config and syncs resources using Storage.
1240	Metric retrieves resource metrics based on type.
1241	FormatURL processes a URL, validates it, and returns a formatted markdown link displaying the URL as an image.
1242	runAndSkipJobs runs specified jobs and skips others based on conditions, handling errors accordingly.
1243	validateContextOverlap checks if there's any context overlap between jobs to run and skip, returning an error if so.
1244	RunRequested submits requested jobs and aggregates any errors encountered during creation.
1245	skipRequested handles skipped jobs, logs, updates PR status, and aggregates errors.
1246	Match checks if event name is "labeled" and label matches.
1247	Match checks if the event name equals "unlabeled" and the label matches the Event's label.
1248	AddFlags calls addFlags with true and the FlagSet.
1249	AddFlagsWithoutDefaultGitHubTokenPath adds flags without default GitHub token path to FlagSet.
1250	Validate checks GitHub options, sets defaults, parses URIs, logs deprecation warnings, and ensures token paths are set.
1251	GitHubClientWithLogFields creates a new GitHub client with optional logging fields and token generation.
1252	GitHubClient creates a GitHub client using the secret agent and dry run flag.
1253	GitClient initializes and configures a Git client using credentials from a GitHub client.
1254	toMap converts CoverageList groups to a name-to-Coverage map.
1255	findChanges identifies significant coverage changes between two lists.
1256	CreateDatabase opens MySQL connection, creates database, and migrates models.
1257	ShouldReport determines if a prow job should be reported based on its type and agent.
1258	ReportProwJob processes ProwJob using specified templates and configurations.
1259	MarkComplete marks items complete in set, deletes marked items, logs sweeps. Returns count of swept items.
1260	NewJobAgent creates a JobAgent instance with Kubernetes client, pod log clients, and configuration.
1261	Starts periodic updates for job agent
1262	Jobs retrieves all jobs from the agent's state safely.
1263	ProwJobs returns the agent's prow jobs.
1264	GetProwJob retrieves a Prow job based on job and ID.
1265	GetJobLog retrieves logs for a specified prowjob based on its agent and configuration.
1266	unionStrings merges two string slices into a single slice without duplicates.
1267	Apply combines policies, selecting or merging fields based on conditions.
1268	GetOrg retrieves org by name, applies policy if exists.
1269	GetRepo fetches a repo from an org, applying its policy.
1270	GetBranch retrieves a branch by name, applying policies and validating protection settings.
1271	GetPolicy retrieves the policy for a given organization, repository, branch, and branch type, applying necessary protections and validations.
1272	UpdateIssueEvents fetches and updates issue events from a client to a database.
1273	enqueueKey enqueues a key based on the object's namespace and name.
1274	prowJobStatus determines the state of a Prow job based on its conditions and timestamps.
1275	buildEnv constructs environment variables for a given Prow job specification and build ID.
1276	Adds missing arguments from raw environment to template instantiation spec.
1277	Sets raw environment variables from a container, ensuring no duplicates.
1278	injectSource updates build spec with source references.
1279	injectedSteps constructs containers and volumes for job execution based on decoration config and options.
1280	determineTimeout calculates the timeout duration based on build specification, decoration configuration, or a default value.
1281	makeBuild constructs a new build from ProwJob details, handling environment, source, and timeout injection.
1282	newLabels creates SQL labels from GitHub labels for a given issue and repository.
1283	newAssignees creates SQL Assignee records from GitHub users.
1284	NewIssueComment creates a new SQL comment from a GitHub issue comment.
1285	messageFilter returns a filter based on messages and presubmits since last update.
1286	IsSuccess checks if Build result is successful.
1287	IsFailure checks if build result indicates a failure or instability.
1288	IsAborted checks if Build was aborted.
1289	ProwJobID extracts the job ID from build actions.
1290	BuildID extracts build ID from Build's actions.
1291	CrumbRequest fetches CSRF token and field from Jenkins API.
1292	measure records latency and counts requests for API methods.
1293	GetSkipMetrics fetches data from a specified path without tracking metrics.
1294	Get fetches data from a specified path using HTTP GET method.
1295	request sends HTTP requests with retries and measures performance.
1296	doRequest sends HTTP requests with authentication.
1297	getJobName constructs the job name based on the ProwJobSpec details.
1298	get.BuildPath constructs Jenkins job path from spec.
1299	GetJobInfo fetches job information using a specified spec.
1300	JobParameterized checks if jobInfo has parameter definitions.
1301	EnsureBuildableJob checks if a job is buildable; if not, it launches a build and waits for it to become parameterized.
1302	LaunchBuild submits a build job with specified parameters using HTTP POST request
1303	Build triggers a job build based on a ProwJob specification.
1304	BuildFromSpec builds a job from a specification and launches it.
1305	GetEnqueuedBuilds fetches and filters enqueued Jenkins builds based on specified job parameters.
1306	Abort stops a specified build job
1307	PresubmitToJobSpec converts presubmit config to job spec.
1308	PostsubmitToJobSpec converts postconfig to JobSpec.
1309	PeriodicToJobSpec converts a periodic configuration to a job specification.
1310	GetBuildID fetches build ID from URL or generates one if empty
1311	listGcsObjects retrieves the names of Google Cloud Storage objects matching a given prefix and delimiter within a specified bucket.
1312	FindBaseProfile retrieves the base profile from GCS for a given Prow job.
1313	sortBuilds converts string builds to integers, sorts them in descending order, and returns the sorted list.
1314	GetAll retrieves all available AWS regions.
1315	NewEventClient initializes a new event client for GitHub actions.
1316	PruneComments removes unwanted comments based on a predicate function.
1317	FormatResponse generates a formatted response message.
1318	FormatSimpleResponse constructs a simple formatted response with user mention, message, and bot info.
1319	FormatICResponse formats the issue comment response using raw data.
1320	FormatResponseRaw constructs a formatted response by quoting the input body and appending it to a template with the provided URL, login, and reply.
1321	Validate checks options for GCS upload and configuration.
1322	Encode will convert options to JSON string.
1323	RegisterIssueHandler registers issue handlers and their help providers.
1324	RegisterIssueCommentHandler registers a handler for issue comments.
1325	RegisterPullRequestHandler associates handlers with names.
1326	RegisterStatusEventHandler associates a status event handler with its name and help provider.
1327	RegisterPushEventHandler adds handlers and help for events.
1328	RegisterReviewEventHandler associates event handlers and help providers.
1329	RegisterReviewCommentEventHandler registers event handlers and help providers by name.
1330	RegisterGenericCommentHandler associates comment handlers with names and provides help.
1331	NewAgent constructs an Agent instance using provided configurations and clients.
1332	InitializeCommentPruner initializes the comment pruner client for the specified organization, repository, and pull request.
1333	CommentPruner returns the comment pruner event client or an error if it has not been initialized.
1334	Load reads a configuration file and sets it in the ConfigAgent.
1335	Config retrieves the configuration safely using mutex locking.
1336	Set updates the configuration for ConfigAgent.
1337	Start initializes the ConfigAgent and periodically reloads its configuration from the specified path.
1338	GenericCommentHandlers retrieves comment handlers for a repository.
1339	IssueHandlers retrieves IssueHandlers for given owner and repo.
1340	IssueCommentHandlers returns a map of IssueCommentHandler functions for a given owner and repo.
1341	PullRequestHandlers returns PR handlers for given owner/repo.
1342	ReviewEventHandlers returns configured event handlers for a given owner and repo.
1343	ReviewCommentEventHandlers retrieves handlers for review comment events based on owner and repository.
1344	StatusEventHandlers returns a map of status event handlers for the given owner and repo.
1345	PushEventHandlers returns event handlers for specified owner and repo.
1346	EventsForPlugin returns the events associated with a plugin based on its handlers.
1347	insertLink updates or inserts a URL in nested metadata structures.
1348	HelpProvider constructs help information for the cherrypick plugin, detailing its usage, description, and access requirements.
1349	getPatch retrieves the patch for a pull request and saves it locally.
1350	releaseNoteFromParentPR extracts and formats release notes from PR body.
1351	ValidatePayload checks if the payload's signature matches using HMAC-SHA1.
1352	PayloadSignature computes SHA-1 HMAC signature for given payload and key.
1353	updateString updates have to want if they differ, returning true if changed.
1354	updateBool updates a boolean pointer if needed.
1355	configureOrgMeta updates organization metadata based on changes detected.
1356	configureTeamRepos updates GitHub team repository permissions.
1357	ShouldReport checks if ProwJob has non-empty Pub/Sub project and topic labels.
1358	Run will upload job spec data to GCS or log dry run details.
1359	Format will merge default fields with log entry data and format it using wrapped formatter.
1360	FindLabels filters issue labels based on a regex pattern.
1361	AddFlags adds flags to Option's Flags set.
1362	NewAgent creates a new Agent instance with the provided GitHubOAuthConfig and logger.
1363	HandleLogin generates an HTTP handler for OAuth login.
1364	HandleLogout clears user sessions and redirects after logout.
1365	serverError logs error and sends a 500 response with action and error details.
1366	FromItem converts an item to resources config object.
1367	GetItems collects all resources into a list.
1368	Convert input objects to ResourcesConfigObject and set them to Items.
1369	UnmarshalText validates and assigns repository permission levels.
1370	IsAssignee checks if an Issue has an Assignee with a matching login.
1371	IsAuthor checks if the issue's author matches the given login.
1372	HasLabel checks if an issue has a specific label.
1373	Branch extracts the branch or tag name from the reference.
1374	truncate shortens a string to a maximum length, adding ellipsis in the middle.
1375	reportStatus updates the GitHub status based on Prow job details, handling multiple pull requests and truncating descriptions.
1376	parseIssueComments processes issue comments from a Prow job, filtering out old reports, keeping unique entries, and deciding whether to create a new comment.
1377	Helper function to generate a comment based on a template and Prow job details
1378	Config returns a new lenses.LensConfig instance
1379	Callback processes artifacts and returns a string.
1380	FormatRecord formats a record into a human-readable string
1381	Namespace sets the namespace field of c to ns and returns a new Client instance.
1382	NewFakeClient creates a fake client with default namespace and specified URL.
1383	NewClientInCluster reads token and CA cert, configures TLS transport, returns Kubernetes client.
1384	NewClientFromFile reads cluster data from a file and creates a new client.
1385	Create a new Client instance using TLS configuration from cluster credentials.
1386	ReplaceConfigMap updates or creates a ConfigMap using the specified parameters.
1387	GetDiskUsage calculates disk usage statistics for a specified path, returning free space percentage, bytes free, and bytes used.
1388	GetATime retrieves the access time of a file or returns a default time if an error occurs
1389	RegisterLens checks lens registration, validates config, and logs success.
1390	GetLens retrieves a lens by name from a registry, returning an error if the name is invalid.
1391	LastNLines retrieves the last 'n' lines of an artifact using a chunked approach.
1392	NewClient creates a client with a logger and a token generator.
1393	WriteMessage logs and sends a message through a client.
1394	MarkAndSweep identifies NAT gateways and deletes them based on a given set.
1395	ListAll retrieves NAT gateways using AWS SDK.
1396	NewClient creates a new client instance configured with retry settings and custom transport options.
1397	Acquire retrieves a resource based on type, state, and destination, adding it to storage if found.
1398	AcquireWait acquires a resource until it's available or context cancels.
1399	AcquireByState acquires resources by state, updates storage, and returns them.
1400	ReleaseAll releases all resources to a destination, handling errors.
1401	ReleaseOne releases a single resource from storage.
1402	UpdateAll updates resources to the specified state.
1403	SyncAll updates client's storage with resources, handling errors and logging if no resources are found.
1404	UpdateOne retrieves a resource by name, updates its state and user data, and then updates the local resource accordingly.
1405	Metric retrieves a specific type of metric from the client.
1406	HasResource returns true if any resources exist in storage.
1407	DialContext attempts to establish a connection using a dialer with retries based on the specified count and sleep duration.
1408	NewDashboardAgent creates a DashboardAgent instance
1409	QueryPullRequests fetches pull requests from GitHub using a paginated search query and accumulates the results until all pages are retrieved.
1410	GetHeadContexts retrieves PR head commit statuses from GitHub API and converts them to Context structs.
1411	Method to construct a search query for open PRs authored by a user across multiple repos
1412	NewBundledStates initializes a new instance with a description and empty states map.
1413	ReceiveEvent updates the state for a given ID based on the event details. It returns true if the state was updated.
1414	ages calculates the age of active states in BundledStates.
1415	Percentile calculates duration at given percentile from bundled states.
1416	NewMetrics initializes a Metrics struct with ClientMetrics and ResyncPeriod.
1417	NewDiskCache returns a new http.RoundTripper with caching
1418	NewMemCache creates a new HTTP round tripper using memory cache.
1419	NewFromCache wraps an HTTP RoundTripper with caching and concurrency throttling.
1420	ProwV1 returns a fake ProwV1Interface for testing.
1421	Prow returns a fake ProwV1 interface with its fake field set to this client's fake field.
1422	NewOwners creates a new Owners instance with the given parameters.
1423	GetApprovers maps owners to their approvers using a repository.
1424	GetAllPotentialApprovers returns sorted list of unique potential approvers
1425	GetReverseMap constructs a reverse mapping from approvers to their associated owners files.
1426	temporaryUnapprovedFiles filters out unapproved files based on given approvers.
1427	KeepCoveringApprovers filters potential approvers based on temporary unapproved files, returning those who are relevant.
1428	GetSuggestedApprovers finds suitable approvers for unapproved files using a reverse mapping and potential candidates.
1429	GetOwnersSet returns a set of unique owner names from files managed by the repository.
1430	GetShuffledApprovers returns a shuffled list of potential approvers based on a seed.
1431	String formats approval details into markdown link text.
1432	function to find common elements between two string sets, ignoring case sensitivity.
1433	NewApprovers creates a new Approvers instance with the given Owners.
1434	AddLGTMer adds an LGTM approval for a user based on their login and reference.
1435	RemoveApprover deletes an approver by login.
1436	AddAssignees inserts lowercased logins into the assignees set.
1437	GetCurrentApproversSetCased returns a set of cased login IDs of current approvers.
1438	GetFilesApprovers computes the intersection of current and potential approvers for each file based on OWNER files.
1439	NoIssueApprovers returns a map of logins to approvals where the approver has no issue.
1440	UnapprovedFiles returns a set of files not approved by any approver.
1441	GetFiles returns a list of files with their approvers or unapprovers based on the given base URL and branch.
1442	IsApproved checks if requirements are met or manually approved.
1443	ListApprovals retrieves a list of approvals from current approvers.
1444	ListNoIssueApprovals returns a slice of Approval objects for no-issue approvers
1445	GenerateTemplate generates a template string from input values
1446	writeTemplate reads a Go template from a specified path, processes it with given data, and writes the result to another specified path.
1447	Labels will return a sorted list of unique labels from default and repository configurations.
1448	LabelsForTarget filters labels by target and sorts them by name.
1449	LoadConfig reads a configuration file and validates it against organizations.
1450	loadLabels retrieves labels for multiple repositories concurrently using a goroutine pool.
1451	kill logs the repo and label then returns an update indicating death.
1452	create logs creation details and returns update action for missing label.
1453	classifyLabels categorizes labels based on deletion criteria and hierarchy.
1454	linkify converts text to a URL-friendly format
1455	NewCache initializes a Cache instance with trimmed disk root path.
1456	KeyToPath converts cache key to disk path
1457	ensureDir creates directory if it doesn't exist.
1458	Put stores content in cache with SHA256 verification.
1459	Get opens file associated with key using readHandler; returns error if not found.
1460	Delete removes the cache entry by key.
1461	NewGCSArtifact creates a new GCSArtifact with specified parameters.
1462	Size returns the size of the GCS artifact.
1463	ReadAll retrieves all bytes from a GCS artifact within its size limit.
1464	ReadTail retrieves the last n bytes of a GCS artifact.
1465	gzipped checks if a GCS artifact's content encoding is gzip
1466	optionsForRepo retrieves repository-specific configurations; if not found, it returns organization-wide defaults.
1467	List retrieves ProwJobs based on a label selector.
1468	ProwJobs returns a new ProwJobNamespaceLister for the given namespace.
1469	List retrieves ProwJobs from the indexer based on the given namespace and selector.
1470	RunsAgainstAllBranch checks if Brancher runs against all branches.
1471	Intersects checks if two branchers share any branches or skip branches.
1472	ShouldRun determines whether a change matcher should run based on the files that have been changed.
1473	RunsAgainstChanges checks if any change matches the regular expression. Returns true if there's a match, false otherwise.
1474	CouldRun checks if the brancher should run for the given base reference.
1475	ShouldRun determines whether postsubmit should execute based on base ref and changed files.
1476	CouldRun checks if presubmit can run based on branch rules.
1477	ShouldRun determines whether presubmit checks should run based on base ref, changes, and conditions.
1478	GetPresubmit retrieves the presubmit job configuration by repository and job name.
1479	SetPresubmits updates presubmit jobs with regexes and assigns them to JobConfig.
1480	SetPostsubmits updates Postsubmits field with copied values, setting regexes.
1481	AllPresubmits filters Presubmit jobs based on provided repos or returns all if empty.
1482	AllPostsubmits filters Postsubmits based on provided repos. If no repos specified, returns all Postsubmits.
1483	AllPeriodics returns all periodic jobs from the configuration.
1484	Clears compiled regexes in presubmit configurations
1485	Empty checks if SimpleConfig is empty.
1486	NewClient initializes a new Client struct with various dependencies and cache.
1487	ExpandAlias resolves a repository alias to its normalized form.
1488	ExpandAliases expands aliases in a set of logins recursively. If an alias expands to multiple values, it replaces the original alias in the set.
1489	ParseFullConfig parses a YAML byte slice into a FullConfig struct.
1490	ParseSimpleConfig unmarshals YAML data into a SimpleConfig struct.
1491	decodeOwnersMdConfig reads a YAML configuration from a file and parses its header into the given struct.
1492	findOwnersForFile determines the owner of a file based on its path and a mapping of regular expressions to owners.
1493	FindApproverOwnersForFile retrieves approver owners for a file using repository log and approvers list.
1494	FindReviewersOwnersForFile retrieves reviewers and owners for a given file path.
1495	FindLabelsForFile retrieves labels associated with a file path from repository owners' entries.
1496	IsNoParentOwners checks if there are no parent owners for a given path.
1497	Ratio calculates coverage percentage.
1498	FromPayload deserializes Prow job event payload.
1499	ToMessage converts PeriodicProwJobEvent to PubSub message.
1500	UnmarshalText validates and sets privacy settings.
1501	compileApplicableBlockades filters and compiles applicable blockades based on organization, repository, and regex patterns.
1502	calculateBlocks summarizes PR changes based on blockades.
1503	MergeMultipleProfiles merges multiple coverage profiles into one, returning an error if any occur during merging.
1504	AddFlags adds execution-related flags to fs.
1505	processNextItem retrieves the next item from the queue, fetches the Prow job, retrieves logs, uploads them to GCS, and marks the item as done or retries on error.
1506	handleErr manages error handling logic for log uploads in a controller.
1507	AggregateFilter combines multiple filters into a single filter that runs them sequentially. It returns the first non-default result or false if all default.
1508	FilterPresubmits filters presubmits based on a filter function and returns two lists: those to trigger and those to skip.
1509	MakeCommand creates a Cobra command for filtering Go coverage files based on specified flags.
1510	Push appends an IssueEvent to the EventTimeHeap.
1511	Pop removes and returns the minimum element from the heap.
1512	NewFakeOpenPluginWrapper initializes a fake plugin wrapper
1513	ReceiveIssue will handle the issue by creating fake "opened" events if not already done, then pass it to the plugin.
1514	Validate checks if Options contain valid source root, log file, and unique git refs.
1515	Complete populates Options with Git refs and key files.
1516	Set parses input value into template, updates raw and format fields.
1517	ensure checks if the specified binary exists; if not, it returns an error prompting installation.
1518	output runs a command with arguments and returns its trimmed output
1519	projects retrieves up to max project IDs using gcloud command.
1520	selectProject selects a GCP project based on user input or availability.
1521	createCluster creates a GCP cluster and returns its details.
1522	createContext selects or creates a GKE cluster based on options
1523	contextConfig loads client configuration or installs required tools.
1524	selectContext lists Kubernetes contexts, prompts user to choose, creates new if needed, and returns selected context.
1525	applyCreate runs a kubectl create command with dry-run and applies the result using the apply function.
1526	determineSkippedPresubmits filters out presubmits that will be triggered by other presubmits and returns the rest.
1527	Dispatch processes issues and events from channels, converts them to points, and pushes them to InfluxDB using a plugin.
1528	CreateIssue creates a new GitHub issue with specified details
1529	CreateStatus updates repository status unless dry-run.
1530	forEachPR iterates through each PR, applying a munge function and handling errors based on options.
1531	GetCollaborators retrieves the list of collaborators for a given organization and repository.
1532	GetCombinedStatus retrieves the combined status of a repository reference.
1533	GetIssues retrieves a list of issues from a specified repository using pagination.
1534	GetRepoLabels retrieves labels for a specific GitHub repository.
1535	GetUser retrieves information about a user from the service.
1536	checkConfigValidity verifies if required flags are set and gcloud authentication is successful. If any step fails, it returns an appropriate error.
1537	createSystemdLogfile runs journalctl command for a given service and outputs the logs to a file.
1538	createFullSystemdLogfile captures systemd logs and saves them to a file in the specified directory.
1539	createSystemdLogfiles records journalctl logs for systemd services and VM setup.
1540	prepareLogfiles gathers and copies relevant log files based on the cloud provider and other conditions.
1541	writeSuccessMarkerFile creates an empty marker file in Google Cloud Storage with public read access.
1542	MakeCommand creates a cobra command for summarizing coverage profiles and producing JUnit XML results.
1543	warnDeprecated logs a warning message if it hasn't been logged recently.
1544	Describe generates a description string based on missing label, comment, issues, PRs, branch, organization, repository, and regex.
1545	TriggerFor searches for a trigger matching the given organization or repository. Returns an empty trigger if none found.
1546	get enabled repositories for a plugin
1547	EnabledReposForExternalPlugin identifies organizations and repositories where a specified external plugin can be used based on its name.
1548	Set defaults for ConfigUpdater's maps and namespaces.
1549	validatePlugins checks for unknown plugins and duplicate configurations, returning an error if any issues are found.
1550	ShouldReport checks if a ProwJob should be reported based on its state and Gerrit annotations.
1551	Run clones refs, executes commands, and records results.
1552	PathForRefs constructs the source path based on repository references.
1553	git.CtxForRefs creates a git context for given refs.
1554	`commandsForBaseRef generates Git commands to clone, configure, fetch, and checkout a repository based on provided references and user credentials.`
1555	gitTimestampEnvs returns environment vars with the given timestamp for Git author and committer dates.
1556	gitRevParse retrieves the current Git commit hash as a trimmed string.
1557	commandsForPullRefs generates git clone and merge commands for specified pull requests, handling both default and custom references, and optionally initializes submodules.
1558	ProduceCovList creates a CoverageList from a list of cover.Profiles by summarizing each profile's blocks and appending them to the Group field.
1559	popRandom removes and returns a random element from a set.
1560	resolve resolves Kubernetes options based on dry run and configuration.
1561	ProwJobClientset returns a prow job clientset for the specified namespace in non-dry-run mode.
1562	ProwJobClient creates a client to interact with Prow jobs based on the namespace and dry run mode.
1563	Infra cluster client fetches Kubernetes client based on context.
1564	BuildClusterClients constructs clients for building Kubernetes clusters in a specified namespace.
1565	Age calculates the duration since the ActiveState started.
1566	ReceiveEvent processes events, updating state or returning current state.
1567	ReceiveEvent processes events, transitioning states based on event matching.
1568	Active checks if all states within MultiState are active
1569	Age calculates minimum age across all states at given time.
1570	ReceiveEvent processes events for all states, updating them and returning if any change occurred.
1571	ProwJobs creates and returns a new informer for prow jobs.
1572	ItemToResourcesConfig extracts a ResourcesConfig from an Item, returning an error if unsuccessful.
1573	Copy creates a new instance with the same resources.
1574	MakeCommand creates a Cobra command for aggregating Go coverage files.
1575	These methods synchronize access to pending jobs for thread safety.
1576	update previous report state for prow job
1577	SyncMetrics gathers metrics for Prow jobs while ensuring thread safety.
1578	DumpProfile writes coverage profiles to a writer.
1579	blocksEqual checks if two ProfileBlocks have equal start and end positions and number of statements.
1580	NewProwJobInformer creates a shared informer for prow jobs in a specific namespace.
1581	NewFilteredProwJobInformer creates a shared informer to watch prow jobs in a specified namespace.
1582	New creates a new Spyglass instance with JobAgent, config, and clients for fetching artifacts and interacting with TestGrid.
1583	Lenses returns a list of lenses.Lens based on matchCache, filtering out empty matches and sorting by priority.
1584	JobPath determines the path based on source string and key type.
1585	RunPath processes source string to extract and convert key based on type.
1586	ExtraLinks extracts extra links from started.json artifacts, returning them as a slice.
1587	needDemux selects external plugins based on repository and event type
1588	demuxExternal handles external plugin requests by dispatching them concurrently.
1589	dispatch sends a POST request to the specified endpoint with the given payload and headers. It reads the response body and returns an error if the status code indicates failure.
1590	AddFlags adds command flags for StatePlugin.
1591	CheckFlags initializes states for the plugin and returns no error.
1592	ReceiveIssueEvent processes an issue event and returns relevant data points.
1593	Load loads Prow configuration files, finalizes job config, validates component and job configs.
1594	loadConfig reads Prow and job configurations, merges them, and validates unique basenames.
1595	yamlToConfig reads a YAML file and converts it to a config object, setting source paths for jobs.
1596	ReadFileMaybeGZIP reads a file at the specified path, decompressing it if it's GZIP-encoded.
1597	finalizeJobConfig sets defaults and validates regexes for job configurations.
1598	validateComponentConfig checks and validates the configuration settings for components like Plank and SlackReporter, returning an error if any validation fails.
1599	ConfigPath returns the specified config path or a default warning message.
1600	ValidateController checks and sets templates and concurrency limits for a controller, returning an error if any configuration is invalid.
1601	Set default job parameters in Prow configuration.
1602	SetPresubmitRegexes compiles trigger and rerun command regexes for jobs.
1603	setBrancherRegexes compiles regular expressions for branches and skip branches.
1604	SetPostsubmitRegexes updates branch and change regexes for each postsubmit configuration.
1605	Lens generates HTML content based on artifacts and resource directory.
1606	NewBoskosHandler sets up an HTTP handler to manage Boskos resources.
1607	ErrorToStatus maps an error to an appropriate HTTP status code.
1608	DumpProfile writes the code coverage profile to a specified destination or standard output.
1609	LoadProfile loads coverage profiles from a specified origin or standard input.
1610	NewClient creates a git client with a temporary directory and logger.
1611	SetCredentials updates client credentials with user and token generator.
1612	Repo.Checkout executes a git checkout command and logs any errors.
1613	CheckoutNewBranch creates and checks out a new git branch, logging the operation and returning any errors encountered.
1614	Merge attempts to merge a commit; aborts on failure
1615	CheckoutPullRequest fetches and checks out a pull request from a Git repository.
1616	Config sets Git configuration values using Repo's logger and gitCommand method.
1617	retryCmd runs a command with retries on failure
1618	LabelsAndAnnotationsForSpec generates labels and annotations for a ProwJobSpec, incorporating extra labels and annotations and ensuring they meet Kubernetes validation criteria.
1619	ProwJobToPod converts a ProwJob to a Pod, setting defaults and decorations as needed.
1620	CloneLogPath returns the path for the clone log.
1621	cloneEnv clones environment variables based on given options.
1622	sshVolume creates a volume and mount for SSH keys from a secret.
1623	InjectEntrypoint configures container entrypoint with options and volumes.
1624	PlaceEntrypoint creates a container with specified image, command, arguments, and volume mount.
1625	kubeEnv converts environment map to sorted EnvVar slice.
1626	Client creates a Kubernetes client based on options and dry-run flag.
1627	handle manages labels on GitHub issues based on event properties.
1628	SendHook sends a POST request to a webhook address with a JSON payload and verifies the HMAC signature.
1629	janitorClean executes a cleanup command for a given resource with optional flags.
1630	janitor manages resources using a client, processing them with a cleaning function and updating their state accordingly.
1631	Run manages a pull server with dynamic config updates.
1632	specToStarted converts a JobSpec to a Started object with timestamp, repo version, pull request number, and repository refs.
1633	Run executes a job, processes logs, uploads results, and handles failures.
1634	hasPRChanged checks if a pull request has been opened, reopened, or synchronized.
1635	UpdateIssues fetches latest issues from a client and updates them in the database, handling existing records and fetching additional comments/events.
1636	handleReviewEvent invokes handleReview with relevant parameters from pc and re.
1637	findAssociatedIssue extracts an issue number from a given body using a regex pattern specific to an organization.
1638	optionsForRepo retrieves approval options based on repository and organization configuration, applying deprecated settings if specified.
1639	localOnlyMain sets up HTTP handlers for the given configuration and options, including GitHub login and spyglass integration if enabled.
1640	calculates total covered and all statements in coverage list
1641	Subset filters and appends coverage items to a new list based on a name prefix.
1642	ListDirectories returns a list of unique directories from the Group field of CoverageList.
1643	readRequest reads an HTTP request body and parses it into an AdmissionRequest object.
1644	handle processes HTTP requests and responses.
1645	writeResponse processes an AdmissionRequest, decides its outcome, constructs an AdmissionReview, encodes it, and writes it to the provided writer.
1646	onlyUpdateStatus checks if an AdmissionRequest updates the status subresource or has equivalent specifications, returning appropriate responses accordingly.
1647	convertSuiteMeta transforms gcs.SuitesMeta into a structured resultstore.Suite, aggregating test cases and calculating durations.
1648	NewHealth sets up a HTTP server to handle health checks.
1649	ServeReady registers a handler for readiness checks.
1650	NewController initializes a new GitHub controller with various dependencies.
1651	newExpectedContext creates a new expected context with the given state.
1652	contexts.ToStrings extracts context names from slice.
1653	filterSubpools filters subpools using goroutines, initializes data, and applies filters.
1654	filterSubpool filters PRs in a subpool based on a condition, updating the subpool accordingly.
1655	poolPRMap creates a PR map from subpool data.
1656	unsuccessfulContexts filters out successful contexts and identifies missing required ones, returning the failing contexts.
1657	accumulate organizes pull requests based on their presubmit job results, categorizing them into successes, pendings, or nones.
1658	tryMerge attempts to merge using a provided function, retrying on errors until successful or max retries reached.
1659	prChanges fetches pull request changes from cache or queries GitHub if not available.
1660	prune updates change cache by swapping current and next caches.
1661	dividePool organizes PullRequests into subpools based on organization, repository, and branch, matching them with ProwJobs.
1662	AggregateProfiles merges multiple cover profiles into a single profile.
1663	countToBoolean adjusts block counts in profiles to boolean values.
1664	NewStorage initializes a Storage with resources from a file or PersistenceLayer.
1665	AddResource adds a resource to the storage's resources collection.
1666	DeleteResource deletes the specified resource.
1667	UpdateResource updates resource information in storage.
1668	GetResource retrieves a resource by name.
1669	GetResources retrieves and sorts resources from storage.
1670	SyncResources updates and synchronizes storage resources based on provided data, handling deletions and additions while logging changes.
1671	ParseConfig reads a configuration file and returns a list of resources.
1672	problemsInFiles identifies issues in files within a Git repository by parsing them as Bazel files and comparing their original and rewritten content.
1673	NewPodLogArtifact creates a new PodLogArtifact instance with validation.
1674	CanonicalLink generates a URL for accessing pod logs.
1675	ReadAt reads data from a PodLogArtifact at a specified offset.
1676	ReadAll retrieves pod logs within size limit.
1677	ReadAtMost reads up to n bytes from the pod log.
1678	ReadTail fetches the last 'n' bytes from a job's logs.
1679	newProblems removes lint problems associated with review comments containing a specific tag.
1680	problemsInFiles analyzes files in a git repo for linting issues and returns them along with error comments.
1681	undoPreset removes specified environment variables and volume mounts from a pod's specification based on a given preset and labels.
1682	reverts pre-submit presets based on labels and spec
1683	yamlBytesStripNulls removes lines containing key: null from YAML bytes.
1684	monitorDiskAndEvict checks disk usage and evicts cache entries if below threshold.
1685	difference calculates the difference between two orgRepoConfig objects and returns a new object representing the differences.
1686	union combines two orgRepoConfig instances, updating org exceptions and repos while ensuring consistency between blacklists and whitelists.
1687	clearStaleComments removes stale comments from a pull request based on certain conditions.
1688	determineReleaseNoteLabel processes a body to identify a release note label based on content.
1689	getReleaseNote extracts a release note from a body text using regex, returning it trimmed.
1690	NewClient initializes a client with a Boskos client and an empty resource map.
1691	Acquire acquires resources based on type, state, and destination, handling failures by releasing previously acquired resources.
1692	ReleaseOne releases resources and handles errors gracefully.
1693	UpdateAll updates all entries to the given state.
1694	GetGitHubClient creates a new GitHub client using the provided OAuth token.
1695	GetUsername retrieves the username using GitHub API.
1696	CreateTokenHandler reads a token from the input stream, authenticates using GitHub, retrieves the username, and returns a TokenHandler object.
1697	CreateTokenHandlers generates TokenHandlers from files using InfluxDB.
1698	String returns a human-readable representation of this jobIdentifier.
1699	TerminateOlderPresubmitJobs cancels older presubmit jobs based on their completion status and updates their state accordingly.
1700	PushMetrics continuously pushes metrics at specified intervals or on interrupt signals.
1701	RateLimiter creates a named rate-limiting queue for a controller using exponential backoff and bucket rate limiting.
1702	checkExistingStatus retrieves the existing DCO status from GitHub using the provided client and logs the result.
1703	checkExistingLabels checks if a GitHub issue has 'yes' or 'no' labels and returns their presence
1704	handle processes a GitHub pull request by checking commit messages, existing status, and labels, then takes appropriate action based on these checks.
1705	MarkdownSHAList generates a markdown formatted list of commit SHAs with links to their respective GitHub pages.
1706	PathForSpec generates a log path based on job specifications.
1707	AliasForSpec returns the alias for a given JobSpec or logs an error if the type is unknown.
1708	RootForSpec determines the log directory based on the job type specified in the JobSpec.
1709	NewSingleDefaultRepoPathBuilder creates a function to build repository paths with optional default handling.
1710	NewExplicitRepoPathBuilder returns a function to format a repository path.
1711	RegisterSourceOrDie registers an IssueSource if not already registered.
1712	IssueCreator generates and syncs issues from various sources.
1713	loadCache fetches user details, validates labels, retrieves collaborators, and populates the issue cache.
1714	function to find intersection and difference between two string slices.
1715	sync checks if an issue needs updating based on its ID and properties, creates or updates it accordingly, and handles collaborators and labels.
1716	GetAWSCreds retrieves AWS credentials from resource metadata.
1717	stopper creates a channel to handle graceful shutdown on interrupt or termination signals
1718	newPipelineConfig initializes a pipeline configuration using the provided REST config and stop channel.
1719	KubeClient retrieves Kubernetes client using master URL and config.
1720	ProwJobClient creates a Kubernetes client for prow jobs using master URL and kube config.
1721	resolveSymLink reads object data from GCS bucket and resolves symbolic link by removing bucket prefix.
1722	readJSON will retrieve JSON data from the specified bucket and key, unmarshalling it into the provided data structure.
1723	listSubDirs retrieves all subdirectories under the specified prefix in a GCS bucket.
1724	list all objects matching a prefix in GCS bucket
1725	listBuildIDs extracts build IDs from GCS paths matching specific patterns
1726	FilterProfilePaths filters profiles based on whether their file names match given paths, including or excluding matches.
1727	LoadSecrets reads secret values from multiple files and stores them in a map.
1728	LoadSingleSecret reads a secret file from the specified path and trims any whitespace.
1729	Set will parse a string to boolean and update the value accordingly.
1730	NewOpener creates a new storage client using optional GCP credentials.
1731	IsNotExist checks if the given error indicates the non-existence of a resource, considering both standard OS and custom storage errors.
1732	LogClose closes the given Closer and logs any errors encountered.
1733	Writer implements Opener.Writer. This method opens a GCS object at the specified path or creates it if it doesn't exist, returning a WriteCloser.
1734	Register token type and set cookie store for GitHub OAuth config.
1735	deltaDisplayed calculates the percentage change between new and base ratios.
1736	Method to generate a table of code coverage changes and check if coverage is low.
1737	Helper method to generate GitHub post content based on code coverage comparison
1738	AddFlags adds OAuth token and project flags to cmd.
1739	CheckFlags validates and normalizes the organization and project flags.
1740	getGitHubClient returns a GitHub client using cached or fetched token.
1741	limitsCheckAndWait checks GitHub rate limits and waits accordingly
1742	FetchIssues retrieves GitHub issues updated since a specified time and sends them through a channel.
1743	function checks if ID exists in GitHub issue events list.
1744	FetchIssueEvents fetches GitHub issue events for a given issue ID and sends them to a channel until the latest event or no more pages are available.
1745	isPRChanged checks if a pull request has been changed based on its action.
1746	NewFetcher creates a new fetcher for a given repository.
1747	fetchRecentIssues retrieves recent issues from the database and pushes them to a channel.
1748	fetchRecentEventsAndComments retrieves recent events and comments from the database and pushes them to a channel.
1749	Fetch retrieves recent issues and events from the database.
1750	Issues retrieves a specified number of flaky job issues from data.
1751	Title returns the job name and how many times it failed recently.
1752	Labels generates job labels including kind/flake and sig/ identifiers.
1753	ReadHTTP attempts to fetch data from a given URL, retrying up to 5 times with increasing delays for HTTP 5xx errors or other failures.
1754	String returns a formatted string representation of sorted lines by timestamp.
1755	NewJobSpec creates a new JobSpec from ProwJobSpec details.
1756	ResolveSpecFromEnv retrieves job specification from environment variable or returns an error if not set.
1757	EnvForSpec generates environment variables for a given job specification.
1758	EnvForType returns the environment variables for a given Prow job type.
1759	getRevisionFromRef retrieves a revision from a ref object, prioritizing pull request SHA or base SHA, otherwise returning the base reference.
1760	GetRevisionFromSpec extracts revision from job spec references
1761	helpProvider constructs a PluginHelp object with a description of the merge commit blocker plugin.
1762	load processes input from a reader to extract repository paths based on specified prefixes and file types, returning them as a list or an error.
1763	loadPaths reads paths from reader, ignoring comments and empty lines, and stores them in Group.Paths map.
1764	Match checks if the given path matches any specified paths or prefixes in the group.
1765	CreateDatabase initializes InfluxDB connection and manages database operations.
1766	function to combine two maps, giving precedence to second map's values.
1767	tagsToWhere generates a WHERE clause from a map of tags.
1768	Push adds a new point to the InfluxDB batch.
1769	artifact retrieves a pod log artifact based on job name, build ID, and size limit.
1770	serve sets up metrics endpoint and starts HTTP server logging errors.
1771	gather periodically syncs metrics until interrupted.
1772	makeRequest converts a policy to a GitHub branch protection request.
1773	makeReviews constructs GitHub's RequiredPullRequestReviews from branch protection policy settings.
1774	Header generates a header string using a template for given artifacts and resource directory.
1775	Callback processes artifacts and requests, returning formatted log lines.
1776	logLinesAll reads all lines from an artifact's log file
1777	Parse and execute HTML template from file, returning rendered content.
1778	DeepCopyObject returns a deep copy of ResourceObject or nil.
1779	FromItem converts Item to ResourceObject.
1780	SetItems converts objects to ResourceObjects and sets them in Items.
1781	DeepCopyObject creates a deep copy of ResourceCollection or returns nil.
1782	useContext sets the current Kubernetes context.
1783	currentContext retrieves the current kubectl context.
1784	command runs a binary with arguments and returns the combined command and exec.Cmd object.
1785	describeCluster fetches and validates details of a Kubernetes cluster.
1786	Set adds a new value to the slice. Existing values remain unchanged. No duplicates are allowed.
1787	parseXML unmarshals XML body into gcsDir, adjusts contents based on object path, and returns directory info.
1788	Render generates HTML content for a directory listing.
1789	Render generates HTML grid item for file or directory
1790	Render generates HTML grid item for given prefix and path.
1791	Printf logs the formatted message with a transaction nonce prefix.
1792	NewClient initializes a Gerrit client with handlers for multiple instances.
1793	Update review on Gerrit instance.
1794	GetBranchRevision retrieves the revision of a specified branch in a Gerrit project.
1795	queryAllChanges retrieves all changes across projects since last update, applying rate limiting.
1796	NewTypeFilterWrapperPlugin wraps a plugin with type filtering capabilities.
1797	AddFlags adds flags to cmd to ignore pull requests and issues.
1798	CheckFlags verifies the consistency of flag settings.
1799	AddFlags adds Kubernetes client options to flag set.
1800	Validate checks if the Kubernetes client options have a valid kube config file path.
1801	Client returns a Kubernetes client based on options.
1802	newCRDClient initializes a Kubernetes CRD client; configures REST client based on kubeConfig and resource type; registers resource and returns client instance.
1803	createRESTConfig generates a REST configuration for Kubernetes API based on kubeconfig and type.
1804	registerResource registers custom resource definitions based on configuration and type.
1805	newDummyClient creates a new dummy client instance with specified type and object map.
1806	Update mocks base method
1807	TrustedPullRequest checks if author is trusted and if PR has ok-to-test label.
1808	buildAll filters and runs presubmit jobs based on PR details and configuration.
1809	Run executes options with context and returns failure count.
1810	AddConfig updates the Storage's configuration by adding new resources.
1811	DeleteConfig removes a configuration.
1812	UpdateConfig updates Storage's configs.
1813	GetConfig retrieves resources configuration by name.
1814	GetConfigs retrieves all resource configurations.
1815	SyncConfigs updates, adds, or deletes resource configurations based on differences between current and new sets.
1816	addKnownTypes registers known types to the scheme for ProwJob and ProwJobList.
1817	NewController initializes a Controller with various components.
1818	Run starts the status-reconciler loop, handling changes or stop signals.
1819	addedBlockingPresubmits identifies and logs newly added or modified blocking presubmits between two configurations.
1820	removedBlockingPresubmits identifies and logs removed blocking presubmits between two configurations.
1821	migratedBlockingPresubmits identifies and logs migrations of blocking presubmits between two configurations.
1822	Load loads configuration using environment variable or command-line flags.
1823	canExecuteConcurrently checks if a ProwJob can run concurrently based on controller's and job's configuration.
1824	getJenkinsJobs filters incomplete prow jobs and extracts build query parameters.
1825	terminateDupes cancels duplicate presubmit jobs based on job name and commit number, preferring newer jobs unless explicitly allowed to cancel older ones.
1826	Throttle configures rate limiting based on hourly tokens and burst capacity. If enabled, it wraps client and graphQL clients with throttling logic. Tokens refill at a specified rate, and only a limited number can pass through at once.
1827	NewClientWithFields initializes a GitHub client with specified fields, token retrieval function, GraphQL endpoint, and base URLs.
1828	NewClient creates a new client using a token function, GraphQL endpoint, and optional base URLs.
1829	NewDryRunClient creates a client for dry-run operations using specified token and GraphQL endpoint.
1830	NewFakeClient creates a fake client with logging and dry run enabled.
1831	request sends a raw request and parses the response body to the given interface, returning the status code and any errors encountered.
1832	requestRaw sends a raw HTTP request and handles the response or error accordingly.
1833	getUserData fetches user data and sets bot name and email.
1834	readPaginatedResultsWithValues fetches paginated results from a server using a client.
1835	UpdatePullRequest updates a GitHub pull request with specified details.
1836	getLabels fetches label resources from a path.
1837	stateCannotBeChangedOrOriginalError wraps original error if it contains specific message prefix.
1838	IsMergeable checks if a pull request is mergeable by repeatedly querying its status until it either confirms or denies mergeability or reaches the maximum retry limit.
1839	Token retrieves an OAuth2 token from the source.
1840	RetrieveArtifactNames fetches GCS artifacts and appends "build-log.txt" if not found.
1841	KeyToJob extracts jobName and buildID from source string.
1842	prowToGCS converts Prow key to GCS path by fetching job details and validating URL.
1843	FetchArtifacts retrieves specified artifacts or logs from a source using GCS and PodLogArtifactFetcher.
1844	DeepCopy creates a deep copy of the decoration configuration.
1845	DeepCopy creates a deep copy of GCSConfiguration.
1846	DeepCopy creates a deep copy of the JenkinsSpec object.
1847	DeepCopy creates a deep copy of ProwJob.
1848	DeepCopy creates a deep copy of ProwJobList.
1849	DeepCopy creates a deep copy of ProwJobSpec
1850	DeepCopy creates a copy of ProwJobStatus.
1851	DeepCopy creates a deep copy of Pull.
1852	DeepCopy creates a deep copy of Refs
1853	DeepCopy creates a deep copy of UtilityImages.
1854	upload creates a new test run on the server and returns its URL.
1855	ApplyDefault merges two DecorationConfig structs, preferring non-nil values from the first unless it's nil, then using defaults from the second.
1856	Validate checks if all required utility images and GCS configurations are specified and valid.
1857	ApplyDefault merges two UtilityImages structs, preferring non-empty values from the second.
1858	ApplyDefault merges two GCSConfiguration structs, prioritizing non-nil values from the first argument.
1859	Validate checks GCS configuration for valid path strategy and default organization/repo settings.
1860	ClusterAlias returns the cluster alias or default if empty.
1861	NewResource creates a new resource with specified attributes.
1862	NewResourcesFromConfig creates resources from a configuration entry.
1863	UserDataFromMap creates UserData from map.
1864	Set adds a new value to CommaSeparatedStrings if it's not already set.
1865	UnmarshalJSON converts JSON data to UserData instance using map.
1866	Extract retrieves data content by ID and unmarshals it into the specified output structure.
1867	Set serializes input to YAML and stores it under specified ID. Existing data is replaced without versioning.
1868	Update modifies UserData based on the key-value pairs in the new data.
1869	ToMap converts user data to a map using a range function.
1870	FromMap populates UserData fields from a map.
1871	ItemToResource converts an item to a resource or returns an error if not possible.
1872	Run clones Git refs using multiple workers and logs the results.
1873	addSSHKeys starts an SSH agent and adds SSH keys from specified paths.
1874	Issues retrieves top clusters' issues using HTTP data.
1875	loadClusters parses JSON input, filters clusters, aggregates failing builds, and calculates totals.
1876	parseTriageData parses JSON triage data and constructs a structured object, validating keys and populating job indices accordingly.
1877	topClusters selects the top N clusters based on total builds.
1878	topJobsFailed returns a slice of Job pointers with the most failed builds up to the specified count.
1879	Title generates a descriptive string for the Cluster based on its properties.
1880	Labels generates a list of labels based on cluster tests and their signatures.
1881	New creates a new Cron instance with a logger.
1882	QueuedJobs returns a list of jobs that have been triggered and resets their trigger state.
1883	HasJob checks if a job with a specific name exists in the cron scheduler.
1884	addJob adds a new cron job with the given name and schedule; it logs when triggered or added.
1885	removeJob deletes a job from the cronAgent.
1886	UpdateComments fetches and updates comments for an issue or PR in the database.
1887	GatherProwJobMetrics aggregates metrics for Prow jobs based on job name, type, and status, updating Prometheus metrics accordingly.
1888	optionOrDefault returns default value if option is zero
1889	newGCSJobSource parses a GCS URL to extract job source details.
1890	GCSArtifactFetcher retrieves artifacts from a specified GCS bucket based on a given key, handling retries on errors.
1891	canonicalLink generates the full URL by joining link prefix, bucket, and job prefix.
1892	jobPath constructs the path to the GCS job using the bucket and prefix
1893	targetURL constructs a GitHub PR status URL based on configuration and pull request details.
1894	newBuildConfig initializes a build configuration with client and informer for Knative builds.
1895	NewClient initializes a GitHub client with OAuth authentication and custom settings.
1896	retry attempts to execute an action, handling errors like rate limiting and two-factor authentication, before giving up after retries.
1897	depaginate retrieves paginated data using the provided action and options.
1898	NewHelpAgent initializes a HelpAgent with logging and plugins.
1899	GeneratePluginHelp constructs a help object containing plugin information based on repository mappings and configurations.
1900	getPullCommitHash extracts commit hash from pull request string.
1901	listJobBuilds retrieves all job builds from a storage bucket based on given prefixes.
1902	getPRBuildData fetches and aggregates build data from multiple sources.
1903	getGCSDirsForPR retrieves GCS directories for a given PR based on configuration.
1904	imageDeleteFromDisk removes image files from disk.
1905	doNetworksCreate starts a network and deletes it if starting fails.
1906	networkLoadByName retrieves a network object by its name from the state.
1907	Transaction method runs a database transaction on Node.
1908	ForLocalInspectionWithPreparedStmts prepares SQL statements for local inspection.
1909	Sets default timeout for cluster driver context
1910	Transaction locks cluster before running f.
1911	Acquire exclusive lock on cluster db; return error if timeout.
1912	ExitExclusive releases the exclusive lock and runs a transaction.
1913	Close closes the cluster by closing all statements and then the database connection.
1914	TxCommit handles committing SQL transactions while ignoring duplicate attempts.
1915	ParseRemote extracts the remote name and URL from a raw input string, handling defaults and errors gracefully.
1916	GetContainerServer retrieves a container server based on the given name.
1917	GetImageServer retrieves an image server based on the remote configuration.
1918	Detect and configure AppArmor settings based on system capabilities and environment.
1919	appArmorCanStack checks if appArmor supports stacking based on its version.
1920	containerDeviceAdd adds a device to a specified container if it doesn't already exist.
1921	profileDeviceAdd adds a new device to a specified LXD container profile, ensuring it doesn't already exist before updating the profile.
1922	ensureImageAliases manages image aliases by deleting existing matching ones and creating new ones.
1923	GetExistingAliases filters existing image aliases from a list.
1924	String method returns a human-readable description of the operation status.
1925	ImagesGetExpired retrieves expired image fingerprints based on expiry duration.
1926	ImageSourceInsert inserts an image source record into the database.
1927	ImageSourceGet retrieves image source details from database based on image ID.
1928	ImageExists checks if an image exists in a given project.
1929	ImageGet retrieves image details from the database based on project, fingerprint, and matching criteria.
1930	ImageGetFromAnyProject fetches image details based on fingerprint from database.
1931	imageFill updates image details including timestamps, architecture, properties, and aliases based on database queries.
1932	ImageLocate finds the address of a node with the specified image fingerprint.
1933	ImageAssociateNode associates a cluster node with an image based on project and fingerprint.
1934	ImageDelete removes image entry from database based on ID.
1935	ImageAliasesGet retrieves image aliases for a project.
1936	ImageAliasGet retrieves image alias details based on project and name, handling trusted clients and transactions.
1937	ImageAliasRename updates image alias name in database.
1938	ImageAliasDelete removes image alias from database, handling project defaults in transaction.
1939	ImageAliasesMove updates image IDs in the database.
1940	ImageAliasAdd inserts an alias for an image in a specified project.
1941	ImageAliasUpdate updates image alias details in the database.
1942	ImageLastAccessUpdate updates image's last use date based on its fingerprint.
1943	ImageLastAccessInit updates image cache status and access date based on given fingerprint.
1944	ImageUpdate updates an image's details and properties within a transaction.
1945	ImageInsert inserts a new image into the database.
1946	ImageGetPools retrieves storage pool IDs associated with a specific image fingerprint.
1947	ImageGetPoolNamesFromIDs retrieves pool names from IDs using a database query.
1948	ImageUploadedAt updates the upload date of an image by ID.
1949	ImagesGetOnCurrentNode retrieves images on the current node.
1950	ImagesGetByNodeID retrieves project names associated with a node ID from the database.
1951	ImageGetNodesWithImage retrieves nodes using image fingerprint.
1952	ImageGetNodesWithoutImage retrieves nodes without a specific image.
1953	Add will append a new task with the given function and schedule to Group, returning a pointer to the added task.
1954	Start initializes task execution with cancellation support and goroutine management.
1955	zfsIsEnabled checks if the 'zfs' command is available on the system.
1956	zfsToolVersionGet retrieves ZFS tool version using dpkg-query
1957	zfsModuleVersionGet retrieves the ZFS module version by reading or running modinfo command
1958	zfsPoolVolumeCreate creates a ZFS volume with specified properties under a given dataset.
1959	function to check if ZFS pool volume exists.
1960	NetworkIDsNotPending retrieves IDs of non-pending networks from the database and returns them as a map with names as keys.
1961	NetworkConfigAdd calls networkConfigAdd with transaction context.
1962	NetworkNodeJoin inserts or updates a network node entry.
1963	NetworkCreatePending checks if a network exists and creates it if not, then adds node-specific configuration.
1964	NetworkCreated updates the cluster's network state when a network is created.
1965	NetworkErrored updates the network state of a cluster transaction.
1966	NetworkGet retrieves network details including configuration and status based on the network name.
1967	Network nodes fetches node names associated with a given network ID from the database.
1968	NetworkGetInterface retrieves the ID and configuration for a specified network interface.
1969	NetworkConfigGet retrieves configuration settings for a specific network ID.
1970	NetworkCreate inserts a new network in the database and returns its ID.
1971	NetworkUpdate updates a cluster's network configuration.
1972	NetworkUpdateDescription updates the network's description in the database using the given transaction, ID, and new description.
1973	NetworkConfigClear deletes the network configuration for the given network ID and node ID from the database.
1974	NetworkDelete removes a network by name.
1975	NetworkRename updates network name in transaction.
1976	GetContainers retrieves all LXD containers.
1977	GetContainersFull retrieves all container details using ProtocolLXD's queryStruct method.
1978	GetContainer retrieves container details and its ETag from the server.
1979	CreateContainerFromBackup handles container creation from backup with optional pool override.
1980	CreateContainer creates a new container using ProtocolLXD.
1981	createContainerFromImage creates a container from a given image using either local or remote source.
1982	UpdateContainer sends a PUT request to update a container's details.
1983	RenameContainer sends a request to rename a container. Pass in the current name and new details.
1984	ExecContainer executes a command inside a specified container using LXD protocol.
1985	GetContainerFile retrieves a file from a LXD container and parses its details.
1986	CreateContainerFile sends a POST request to create or update a file within a container, handling different types and write modes based on server extensions.
1987	DeleteContainerFile checks for "file_delete" extension and deletes a file in a container.
1988	GetContainerSnapshotNames retrieves all snapshot names for a given container.
1989	GetContainerSnapshots fetches container snapshots from LXD using its API.
1990	GetContainerSnapshot fetches a snapshot of a container and returns its details along with the ETag.
1991	CreateContainerSnapshot creates a new snapshot for a container. Pass in the container name and snapshot details.
1992	MigrateContainerSnapshot sends a migration request for a container snapshot.
1993	UpdateContainerSnapshot updates a LXD container snapshot.
1994	GetContainerState retrieves the state of a container and its ETag.
1995	UpdateContainerState updates the state of a container by sending a PUT request to the LXD server.
1996	GetContainerLogfiles retrieves logs for a specified container from LXD.
1997	GetContainerLogfile retrieves a logfile for a container.
1998	GetContainerMetadata retrieves container metadata from LXD server.
1999	SetContainerMetadata updates container metadata on the LXD protocol.
2000	GetContainerTemplateFiles retrieves template files for a specified container name.
2001	CreateContainerTemplateFile creates a container template file.
2002	DeleteContainerTemplateFile deletes a container template file on the server.
2003	ConsoleContainer establishes a WebSocket connection for a container's console, handling input/output streams and detach functionality.
2004	GetContainerConsoleLog fetches the console log for a specified container.
2005	DeleteContainerConsoleLog removes console log for specified container.
2006	GetContainerBackups retrieves container backups using LXD protocol.
2007	GetContainerBackup retrieves container backup details.
2008	CreateContainerBackup sends a POST request to create a container backup.
2009	RenameContainerBackup sends a POST request to rename a container backup.
2010	DeleteContainerBackup deletes a container backup.
2011	GetContainerBackupFile fetches container backup file using HTTP GET request.
2012	RsyncSend sends files over a WebSocket connection using rsync.
2013	patches.GetNames extracts names from a list of patches.
2014	patchRenameCustomVolumeLVs renames custom volume logical volumes across storage pools.
2015	patchLvmNodeSpecificConfigKeys updates LVM-specific configuration across nodes.
2016	GetHTTPClient retrieves the HTTP client if it's set; otherwise, it returns an error indicating a bad connection.
2017	do forwards HTTP requests, adding Macaroons if configured.
2018	RawQuery sends a raw HTTP request to the LXD server and returns the response.
2019	RawWebsocket returns a websocket connection for the specified path.
2020	RawOperation invokes queryOperation for LXD protocol interaction.
2021	ProfileToAPI converts a Profile pointer to an api.Profile pointer.
2022	Profiles retrieves the names of enabled project profiles from the database.
2023	ProfileGet retrieves the ID and details of a profile in a specified project.
2024	ProfilesGet retrieves API representations of specified project profiles.
2025	ProfileConfig retrieves configuration settings for a specified profile within a project. If the profile or project does not exist, it returns an error.
2026	ProfileConfigClear deletes config associated with a specific profile from the database.
2027	ProfileConfigAdd inserts configuration settings into the database for a given profile ID.
2028	ProfileContainersGet retrieves the list of containers associated with a specific project and profile.
2029	ProfileCleanupLeftover removes leftover profiles configurations and devices from the database.
2030	ProfilesExpandConfig combines multiple profile configurations into a single expanded configuration, prioritizing the input config.
2031	Profiles.ExpandDevices combines device profiles into a single set, prioritizing input devices.
2032	GetServer fetches LXD server details, populates missing fields, caches the result, and returns it along with ETag.
2033	UpdateServer sends a PUT request to update the server details.
2034	HasExtension checks if a protocol LXD server supports a specific extension.
2035	GetServerResources retrieves server resources using ProtocolLXD's queryStruct method.
2036	UseProject sets the project field to the specified name.
2037	sqliteOpen opens a SQLite database at the specified path with a busy timeout and exclusive transaction locking.
2038	Rebalance updates the Raft cluster by promoting a spare node to a database node.
2039	Promote will promote a node to a database node, ensure it's not already a database node, fetch its address, replace the local list of Raft nodes, initialize the gateway, join the dqlite raft cluster, and unlock the cluster database.
2040	Purge deletes a node from the database transactionally.
2041	Retrieve cluster members' status and versions using state transactions.
2042	Count retrieves the total number of nodes within a transactional database cluster.
2043	Enabled checks if the Raft node addresses are set in the database transaction.
2044	membershipCheckNodeStateForBootstrapOrJoin verifies if a node can join or bootstrap based on its state and configuration.
2045	membershipCheckClusterStateForBootstrapOrJoin verifies cluster consistency before bootstrap or join operations.
2046	membershipCheckClusterStateForAccept verifies if adding a new node with given details conflicts with existing cluster state.
2047	membershipCheckClusterStateForLeave checks if a node can leave the cluster.
2048	membershipCheckNoLeftoverClusterCert checks for any remaining cluster certificates in the specified directory.
2049	ConfigLoad retrieves and parses configuration settings from the database.
2050	Replace updates the configuration with new values and returns a map of updated keys with their string representations or an error.
2051	Patch applies a set of changes to the configuration, updating it with new values and returning the updated configuration as a string map.
2052	HTTPSAddress retrieves node's HTTPS address from database.
2053	CertificatesGet retrieves all certificate information from the database.
2054	CertificateGet retrieves the certificate information based on its fingerprint.
2055	CertSave inserts certificate info into the database.
2056	CertDelete removes a certificate by its fingerprint from the database.
2057	CertUpdate updates certificate details using transaction.
2058	createDevLxdlListener creates a Unix domain socket listener in the specified directory, ensuring it's not stale before setting appropriate permissions.
2059	Servers returns the list of servers if the instance is the leader.
2060	Shutdown stops a raft instance gracefully or times out after 10 seconds.
2061	raftNetworkTransport creates a new raft network transport with specified parameters and returns it along with related components.
2062	Adjusts raft configuration based on latency.
2063	raftMaybeBootstrap checks if raft needs re-initialization and performs it if necessary.
2064	CPUResource calculates total CPU resources by counting sockets, cores, and threads.
2065	MemoryResource parses /proc/meminfo to extract memory statistics and returns them as an api.ResourcesMemory object.
2066	GetOperationUUIDs retrieves UUIDs from protocol operations.
2067	GetOperations retrieves all LXD operations.
2068	GetOperation retrieves an operation by its UUID.
2069	GetOperationWebsocket constructs websocket path and retrieves connection using ProtocolLXD's websocket method.
2070	tryMount attempts to mount src filesystem at dst with retries on failure.
2071	lxdUsesPool checks if a storage pool meets specific criteria and returns details about it.
2072	ProjectURIs retrieves URIs for projects matching the specified filter criteria.
2073	ProjectList retrieves project details based on filters and populates additional fields like Config and UsedBy.
2074	ProjectGet retrieves a project by name or returns an error.
2075	ProjectExists checks if a project exists by name.
2076	ProjectCreate inserts a new project into the database and returns its ID.
2077	ProjectUsedByRef retrieves project references using a filter.
2078	ProjectRename renames a project in the database if exactly one row is affected.
2079	ProjectDelete deletes a project from the database and verifies exactly one row was affected.
2080	PasswordCheck verifies if the provided password matches the stored hash.
2081	LoadCert loads a TLS certificate from dir, preferring cluster.crt if it exists, and returns the certificate info or an error.
2082	WriteCert saves certificate files to disk.
2083	NewDaemon initializes a new Daemon instance
2084	DefaultDaemon creates a new Daemon instance using default configuration and OS settings.
2085	AllowProjectPermission checks user permissions before allowing access to a project.
2086	checkTrustedClient verifies if the HTTP request is from a trusted client and returns an error if not authorized.
2087	Authenticate verifies if the HTTP request is authorized based on TLS certificates, internal cluster traffic, or external authentication mechanisms.
2088	State creates a new state object using Daemon's properties.
2089	UnixSocket returns the path to the daemon's Unix socket.
2090	Stop shuts down the daemon gracefully, handling errors and logging details.
2091	setupExternalAuthentication configures external authentication using provided parameters, setting up clients and keys as needed.
2092	initializeDbObject initializes the local database object, handles renaming, and applies legacy patches.
2093	WriteJSON encodes JSON data to the response writer, capturing it for debugging if enabled.
2094	EtagHash generates an SHA-256 hash from JSON-encoded data, returning it as a hex string or an error.
2095	EtagCheck verifies If-Match header against calculated ETag for data.
2096	HTTPClient creates an HTTP client with TLS configuration and custom proxy settings.
2097	IsRecursionRequest checks if the HTTP request contains a non-zero 'recursion' parameter. Returns false if the parameter is missing or invalid.
2098	GetListeners retrieves inherited network listeners from file descriptors.
2099	internalSQLGet handles SQL database queries based on form values.
2100	internalSQLPost processes SQL queries via HTTP requests.
2101	PublicKey extracts the public key from certificate info and encodes it in PEM format.
2102	PrivateKey returns the private key in PEM format from CertInfo.
2103	Fingerprint calculates the hash value for a certificate's public key.
2104	GenCert creates or updates TLS certificates and keys at specified paths.
2105	PrintServerInfo prints detailed information about the LXD container server's environment.
2106	LaunchContainers launches multiple LXD containers in batches, handling creation, starting, and freezing based on input parameters.
2107	CreateContainers launches multiple containers in batches, tracking total duration and handling errors.
2108	GetContainers filters and returns LXD containers where userConfigKey is true.
2109	StartContainers starts multiple LXD containers in batches, logging failures.
2110	setQueryParam updates query parameter in URI and returns updated URI.
2111	GetImages retrieves all images using LXD protocol.
2112	GetImageFile calls GetPrivateImageFile
2113	GetImageSecret retrieves the secret associated with an image using its fingerprint.
2114	GetPrivateImage retrieves a private image using its fingerprint and optional secret.
2115	GetPrivateImageFile fetches a private image file using LXD protocol.
2116	GetImageAliases retrieves image aliases using ProtocolLXD's queryStruct method.
2117	tryCopyImage attempts to copy an image from multiple URLs. It handles older servers with aliases separately. Returns a RemoteOperation or error.
2118	CopyImage transfers an image from one LXD server to another. It handles authentication, secret generation, and argument processing.
2119	UpdateImage updates an image using its fingerprint.
2120	DeleteImage deletes a container image by fingerprint.
2121	RefreshImage refreshes the image using its fingerprint.
2122	CreateImageAlias creates an image alias using the provided details.
2123	UpdateImageAlias updates LXD image alias.
2124	RenameImageAlias updates or creates an image alias.
2125	DeleteImageAlias removes a named image alias from the LXD protocol.
2126	Open opens a SQLite database file located at dir/local.db.
2127	EnsureSchema updates the database schema using a hook, optionally backing up the database before applying migrations.
2128	FilesystemDetect identifies the type of filesystem at a given path
2129	Schema creates a new schema from updates and applies freshSchema to it.
2130	updateFromV37 updates the cluster configuration from version 37.
2131	ArchitectureGetLocal retrieves local machine architecture.
2132	NewController initializes a new MAAS controller client connected to a specified URL and machine.
2133	CreateContainer initializes a new container with specified interfaces and configures its network settings.
2134	DefinedContainer checks if a container is defined.
2135	UpdateContainer updates network interfaces for a container based on provided specifications.
2136	RenameContainer updates the name of a container on a device
2137	DeleteContainer deletes a container.
2138	Add will append an Update to the updates slice of Schema.
2139	ensureSchemaTableExists checks if a schema table exists; if not, it creates it.
2140	queryCurrentVersion retrieves the latest schema version from the database, handling specific upgrade scenarios between certain version numbers.
2141	ensureUpdatesAreApplied applies schema updates using transactions.
2142	checkSchemaVersionsHaveNoHoles checks if schema versions are consecutive, returning an error if any gaps are found.
2143	checkAllUpdatesAreApplied verifies applied database schema updates match expected version.
2144	formatSQL formats SQL statements by adding newlines after commas, except for UNIQUE constraints.
2145	GetAllXattr retrieves all extended attributes from a given path and returns them as a map. If attributes change during retrieval, it returns an error.
2146	GetErrno extracts the underlying syscall error from the given error if possible.
2147	Uname retrieves system information using syscall.
2148	RegisterStmt adds SQL to stmts and returns its index.
2149	PrepareStmts prepares SQL statements from a map and returns them indexed by code.
2150	NewGateway creates a new Gateway instance with database, certificate, and optional settings.
2151	DialFunc returns a dialer function for Gateway. It uses memory dial first if available, otherwise falls back to network dial with TLS certificate.
2152	Shutdown stops the database gateway and cleans up resources.
2153	Sync attempts to dump the gateway's database to disk, logging any errors encountered but continuing operation.
2154	Reset resets the gateway's state, replacing its certificate and clearing data.
2155	LeaderAddress retrieves the current leader's address in a clustered system.
2156	waitLeadership waits for the RAFT node to become the leader within a timeout.
2157	currentRaftNodes retrieves the current Raft nodes from the gateway and converts them to a list of RaftNode objects.
2158	Cached raft nodes retrieves node addresses from a database transaction.
2159	dqliteMemoryDial creates a dial function for connecting to a dqlite database using a memory listener.
2160	DqliteLog formats and logs messages at different levels using logger functions.
2161	MetadataAsMap converts response metadata to a map
2162	MetadataAsOperation converts response metadata to operation pointer
2163	MetadataAsStringSlice converts Response metadata to a string slice.
2164	MetadataAsStruct unmarshals JSON metadata into a target struct.
2165	Load reads records from a CSV file and adds them to the report.
2166	Write opens file, creates writer, writes records, logs, returns error.
2167	AddRecord appends a new record to the CSV report with timestamp, duration, label, and success status.
2168	LoadConfig reads and decodes a YAML configuration file, applying defaults and upgrading users.
2169	SaveConfig saves a configuration by copying, modifying, and writing it to a specified path.
2170	Get file content within chroot loader's path
2171	ConfigPath constructs the full path to a configuration file.
2172	ServerCertPath returns server certificate path based on remote name.
2173	NewConfig creates a new Config instance with optional default settings.
2174	checkForPreDumpSupport determines whether pre-dump support exists and configures the maximum number of iterations.
2175	preDumpLoop performs CRIU pre-dump, sends it, reads stats, checks skip percentage, updates final status, and sends sync message.
2176	newRoot creates a root command for LXD code generation.
2177	APIExtensionsCount calculates the total number of API extensions, potentially artificially bumped by an environment variable.
2178	SelectURIs executes SQL query, scans results using function f, and returns slice of URIs.
2179	SelectStrings executes a SQL query to retrieve string values using a transaction, scanning results into a slice. If successful, it returns the slice; otherwise, it returns an error.
2180	scanSingleColumn executes a SQL query and scans results using a custom scanner function.
2181	LazyHandler evaluates lazy functions in a record's context and logs the result.
2182	Callers retrieves a stack trace of caller functions.
2183	name retrieves the function name from a call pointer
2184	TrimBelow removes elements from the trace until it finds the specified call or becomes empty.
2185	TrimAbove removes elements from the trace until it finds the specified call or becomes empty.
2186	TrimBelowName removes elements from Trace until it finds the element with the specified name. If no such element exists, it returns an empty Trace.
2187	TrimAboveName removes elements from the trace until the specified name is found or the slice is empty.
2188	TrimRuntime removes runtime frames from trace.
2189	GetCaps retrieves the capability value from the specified path's extended attributes.
2190	SetCaps applies filesystem capabilities to a file at the specified path for the given user ID.
2191	ProgressReader tracks progress while reading using a tracker.
2192	Supported checks if quota is supported for a given path using CGo.
2193	GetProject retrieves the project ID from the given path using ioctl.
2194	SetProject updates the project ID using ioctl for the given path.
2195	DeleteProject removes a project by unsetting it from the path and its quota.
2196	GetProjectUsage retrieves project usage from quota control
2197	SetProjectQuota sets the project quota for a given ID and path using quotactl
2198	backupLoadByName retrieves a backup object by name, loading associated container data.
2199	backupCreate creates a new backup.
2200	Rename renames a backup's directory and updates its database record. If successful, returns nil.
2201	Delete removes the backup using specified state, name, and container.
2202	backupFixStoragePool updates the storage pool in backup files.
2203	Count executes a SQL query to return the number of rows matching a specified condition in a given database table.
2204	CountAll calculates row counts for each table in a database.
2205	InitTLSConfig creates and returns a TLS configuration with specific cipher suites and version preferences.
2206	copyContainerThinpool creates a snapshot and copies a container thinpool.
2207	copyContainerLv copies a container's LV, optionally making it read-only.
2208	copyContainer clones a container from source to target, handling different storage pool types and refreshing data.
2209	copyVolume creates a copy of a volume from a source to a target mount point using thinpool or LV based on conditions.
2210	GetPrivateImage returns error indicating private images unsupported.
2211	GetPrivateImageFile returns error for unsupported private images.
2212	GetImageAliasNames retrieves image alias names using simplestreams client.
2213	ProtoRecv reads a binary message from WebSocket and unmarshals it into a protocol buffer message.
2214	ProtoSend sends a protocol message over a WebSocket connection.
2215	ProtoSendControl sends control message over websocket indicating success or failure with error details.
2216	Read from reader, check escape sequence, handle 'q' to disconnect console.
2217	doContainersGetFromNode fetches containers from a specified node within a project using a timeout mechanism.
2218	Retry attempts to execute function f up to 5 times, logging and retrying on retriable errors.
2219	IsRetriableError checks if the SQLite error is retryable based on its message or specific error codes.
2220	AppArmorProfile reads and returns the current AppArmor profile.
2221	StoragePoolVolumeCreate creates or updates a BTRFS storage volume with optional quota.
2222	ContainerStorageReady checks if Btrfs subvolume is ready for the given container.
2223	ContainerCreateFromImage creates a BTRFS storage volume for a container using an image.
2224	Rename a BTRFS snapshot's subvolume name
2225	Creating an empty BTRFS snapshot volume for a container on a specified storage pool.
2226	btrfsSubVolumesDelete will recursively delete all sub-subvolumes and then the main subvolume
2227	isBtrfsSubVolume checks if the given path points to a valid Btrfs subvolume.
2228	SelectConfig retrieves configuration settings from a database table based on optional filters.
2229	UpdateConfig updates or deletes config values in a database table based on input.
2230	deleteConfig deletes rows from a specified table where the key matches any value in the given slice.
2231	FormatSection formats a section header and content, adding indentation and separators
2232	GetProjects fetches all projects from the LXD server using the ProtocolLXD interface.
2233	GetProject retrieves project details from the server using its name.
2234	CreateProject sends a POST request to create a new project if the "projects" extension is supported.
2235	UpdateProject updates a project if the server supports the "projects" API extension.
2236	RenameProject renames a project using the provided details.
2237	Read repeatedly until no error or specific errors occur.
2238	Write implements io.Writer.Write.Tries writing until no error or non-EAGAIN/EINTR error occurs.
2239	NewCanceler initializes a new Canceler instance with a locked request channel map.
2240	Cancelable checks if there are cancel requests.
2241	Cancel cancels requests and cleans up resources.
2242	CancelableDownload sends HTTP request with cancel capability and returns response, done channel, and error.
2243	clusterGet retrieves cluster information and configuration.
2244	clusterGetMemberConfig retrieves configuration keys for cluster members from storage pools and networks.
2245	clusterPutDisable disables the cluster by resetting its database and configuration.
2246	tryClusterRebalance attempts to rebalance the cluster by connecting to the leader and sending a rebalance request.
2247	internalClusterPostRebalance redirects requests to the cluster leader, checks for spare nodes, promotes them if available, and returns a response accordingly.
2248	internalClusterPostPromote handles Raft node promotion requests, validates input, and updates cluster state accordingly.
2249	Filters extracts and categorizes filter names from a package's scope based on a given entity prefix.
2250	Parse extracts struct fields from a Go package and returns a mapping object.
2251	findStruct looks up a struct type in a scope by name. Returns the struct type if found.
2252	parseStruct extracts fields from a Go struct type, including those from nested structs.
2253	GetProfileNames fetches and parses profile names from LXD server.
2254	GetProfiles retrieves all LXD profiles.
2255	GetProfile retrieves a LXD profile by name.
2256	CreateProfile sends a POST request to create a profile.
2257	UpdateProfile sends a PUT request to update a LXD profile.
2258	RenameProfile sends a POST request to rename a LXD profile.
2259	Load creates a new Map using a given schema and initializes it with provided values.
2260	Dump returns a map of schema values excluding defaults and hidden fields.
2261	GetRaw retrieves the raw value associated with the specified name from the map. If the value does not exist, it returns the default value defined in the schema.
2262	GetString retrieves the string value from map using name
2263	GetBool checks type and returns bool value for given name
2264	GetInt64 retrieves an int64 value from m using name after validating its type.
2265	update updates the map with new values and returns the names of updated keys along with any errors encountered
2266	updateValue updates the map entry with a new value, handling validation, normalization, and setters.
2267	DoesSchemaTableExist checks if a specific schema table exists in the database by querying the sqlite_master table and returns true if it does.
2268	selectSchemaVersions retrieves schema versions from the database in ascending order.
2269	selectTablesSQL retrieves SQL statements for tables, views, and indexes from a SQLite database.
2270	createSchemaTable creates a schema table in a database transaction.
2271	insertSchemaVersion inserts a new schema version into the database with the current timestamp.
2272	NewState initializes a State struct with various components.
2273	Unloads a container by removing finalizers and releasing resources
2274	containerLXCInstantiate creates a new LXC container instance from given arguments.
2275	initStorage initializes container storage if not already initialized.
2276	OnNetworkUp sets up a host VETH device for the specified container network interface
2277	setupHostVethDevice sets up virtual Ethernet devices for LXC containers, assigns host names, refreshes network limits, and configures static routes.
2278	getLxcState retrieves container's state, defaulting to STOPPED or FROZEN based on snapshot status and initialization.
2279	StorageStartSensitive starts sensitive storage operations based on snapshot status.
2280	deviceExistsInDevicesFolder checks if a device exists at a specified path within the devices folder using a given prefix.
2281	createDiskDevice manages disk device creation logic for containerLXC.
2282	setNetworkRoutes configures network routes based on device settings.
2283	Container path combines project prefix and container details.
2284	maasInterfaces returns container network interfaces based on expanded devices.
2285	getSystemHandler returns a syslog handler based on input parameters.
2286	findNvidiaMinor retrieves the Nvidia device minor number from /proc/driver/nvidia/gpus/<pci>/information or falls back to findNvidiaMinorOld().
2287	GetLogger configures and returns a logger based on syslog, logfile, verbose, debug, and customHandler settings.
2288	SetLogger sets a new logger temporarily and returns a function to restore the original logger.
2289	WaitRecord waits for a log record or times out, returning the received record or nil.
2290	AddContext adds a logging context to a logger, returning a new logger or the original if conversion fails.
2291	NewDottedVersion creates a new DottedVersion object from a version string
2292	Parse extracts a dotted version from a string.
2293	String method generates a string representation of DottedVersion.
2294	Compare checks if the current version is less, equal, or greater than another version based on major, minor, and patch levels.
2295	projectCreateDefaultProfile creates a default profile for a project in the database.
2296	projectChange updates project settings while validating and handling transactions.
2297	projectIsEmpty checks if the project has no active users other than the default profile.
2298	GetCertificateFingerprints fetches and parses certificate fingerprints from LXD protocol.
2299	GetCertificates retrieves all certificates using a GET request.
2300	GetCertificate retrieves a certificate by its fingerprint and returns it along with its ETag.
2301	CreateCertificate sends a POST request to create a certificate.
2302	UpdateCertificate updates a certificate on the LXD protocol if the "certificate_update" extension is available.
2303	DeleteCertificate sends a DELETE request to remove a certificate by fingerprint.
2304	containerMetadataTemplatesGet handles metadata template requests for containers.
2305	containerMetadataTemplatesPostPut handles POST/PUT requests for container metadata templates.
2306	containerMetadataTemplatesDelete deletes a specified container metadata template.
2307	getContainerTemplatePath constructs full path to container template file.
2308	Error method constructs a formatted error message based on name and value.
2309	Error returns a formatted string representing the list of errors.
2310	add appends an error with name, value, and reason to the list.
2311	UpdateSchema updates the database schemas for both cluster and node.
2312	doProfileUpdateCluster updates the profile of a cluster by applying changes to its associated containers. If any container fails to update, it logs the failure and continues updating other containers.
2313	doProfileUpdateContainer updates a container's profile settings.
2314	getProfileContainersInfo retrieves container info from the database based on project and profile.
2315	GetNetworkNames retrieves the list of network names from the server.
2316	GetNetworks retrieves all LXD networks.
2317	GetNetwork retrieves a network's details from the LXD server.
2318	GetNetworkLeases fetches network leases for a specified network.
2319	GetNetworkState retrieves the state of a specified network.
2320	CreateNetwork sends a POST request to create a network on the server.
2321	UpdateNetwork updates the specified LXD network with new settings.
2322	RenameNetwork updates network details on the server if the required extension is present.
2323	Open initializes a new SQL database using a dqlite driver.
2324	URLEncode encodes a URL path and query parameters
2325	IsUnixSocket checks if the given path represents a Unix socket file.
2326	HostPath prepends /var/lib/snapd/hostfs to non-snap paths.
2327	FileMove attempts to rename a file; if it fails, it copies and deletes the old file.
2328	DirCopy recursively copies a directory from source to destination.
2329	function checks if any key exists in the map.
2330	TextEditor opens the given or a temporary file in the user's preferred text editor, reads its contents after editing, and returns them.
2331	WriteTempFile creates a temporary file with specified directory, prefix, and content.
2332	RenderTemplate renders a template string using the provided context and recursively processes nested templates.
2333	Every returns a Schedule function that emits the given interval after applying any specified options. If skipFirst is set, it skips the first emission and returns an error.
2334	StoragePoolMount checks if LVM storage pool needs mounting and handles concurrent operations safely.
2335	Dump generates SQL schema and data for specified tables in a transaction.
2336	dumpTable extracts data from a SQL table and generates a series of INSERT statements to recreate that data.
2337	ProjectHasProfiles checks if a cluster transaction has profiles associated with a given name.
2338	ProjectNames retrieves project names from the database.
2339	ProjectMap retrieves a map of project IDs to names from the database.
2340	ProjectHasImages checks if images feature is enabled for the specified project.
2341	ProjectUpdate updates a project's details and config in the database
2342	GetCluster retrieves cluster information from LXD protocol.
2343	UpdateCluster updates the cluster configuration if the necessary extensions are available.
2344	GetClusterMemberNames fetches cluster member names from LXD server.
2345	GetClusterMembers retrieves cluster members from LXD server.
2346	GetClusterMember retrieves cluster member details and ETag.
2347	RenameClusterMember updates cluster member details.
2348	Disconnect will stop the event listener and remove it from the global list.
2349	CompareVersions determines the relationship between two version tuples and returns an integer indicating their order or an error if they are inconsistent.
2350	HasClientCertificate checks if client certificate and key files exist.
2351	GenerateClientCertificate checks for existing client cert; if not found, generates new ones at specified paths.
2352	LoadModule loads a kernel module if it doesn't already exist.
2353	Parse constructs an AST package from a directory of Go files.
2354	PprofAddress retrieves the pprof address from listeners.
2355	PprofUpdateAddress updates the address for profiling if it differs from the old one.
2356	NewMethod initializes a Method struct with given parameters and retrieves packages before returning the initialized Method instance.
2357	Generate method processes different kinds of operations based on m.kind.
2358	fillSliceReferenceField populates a slice reference field in the buffer using the specified method and filter, handling nested structures and ensuring non-nil values.
2359	StoragePoolID retrieves ID from storage_pools table by name.
2360	StoragePoolIDsNotPending retrieves IDs of non-pending storage pools.
2361	StoragePoolNodeJoin adds a new entry to the storage pools nodes table.
2362	ClusterTx joins a Ceph node to a storage pool, copying volumes and their configurations from another node.
2363	StoragePoolConfigAdd invokes storagePoolConfigAdd with transaction context.
2364	StoragePoolCreatePending creates or updates a pending storage pool with specified details.
2365	StoragePoolCreated updates cluster transaction state for a new storage pool.
2366	StoragePoolErrored marks a storage pool as errored.
2367	StoragePoolNodeConfigs retrieves configuration details for storage pools on specified nodes.
2368	StoragePoolsGetDrivers retrieves distinct storage pool drivers from the database.
2369	StoragePoolGetID retrieves ID for given storage pool name from database.
2370	StoragePoolGet retrieves details for a specific storage pool.
2371	storagePoolNodes retrieves node names associated with a storage pool.
2372	StoragePoolConfigGet retrieves configuration settings for a given storage pool ID.
2373	StoragePoolCreate inserts a new storage pool and returns its ID.
2374	storagePoolConfigAdd inserts storage pool configuration into database.
2375	StoragePoolUpdate updates a storage pool's description and config.
2376	StoragePoolConfigClear clears the configuration for the specified storage pool and node in the database.
2377	StoragePoolDelete removes the specified storage pool from the database and returns its details.
2378	StoragePoolVolumesGetNames retrieves volume names from a specific storage pool.
2379	StoragePoolVolumesGet retrieves storage volumes for specified project, pool, and types across nodes.
2380	StoragePoolNodeVolumesGet retrieves storage volumes of specific types from a given pool on a node.
2381	storagePoolVolumesGet retrieves storage volumes based on project, pool, node, and types.
2382	StoragePoolVolumesGetType retrieves the names of storage volumes based on project, type, pool ID, and node ID.
2383	StoragePoolVolumeSnapshotsGetType retrieves snapshots by volume details.
2384	StoragePoolNodeVolumesGetType retrieves volumes of a specific type from a cluster's storage pool.
2385	StoragePoolVolumeGetType retrieves type details for a storage volume.
2386	StoragePoolNodeVolumeGetType retrieves the type of a storage volume for a given node in a cluster.
2387	StoragePoolNodeVolumeGetTypeByProject retrieves the type of volume for a given project and node.
2388	StoragePoolVolumeUpdate updates the configuration and description of a storage volume within a cluster's storage pool.
2389	StoragePoolVolumeDelete deletes a volume from the storage pool.
2390	StoragePoolVolumeRename renames a volume within a storage pool.
2391	storagePoolVolumeReplicateIfCeph replicates volume changes on Ceph pools.
2392	StoragePoolVolumeCreate inserts a new volume in a cluster's storage pool.
2393	StoragePoolVolumeGetTypeID retrieves the type ID for a specific storage volume based on project, name, type, pool, and node.
2394	StoragePoolNodeVolumeGetTypeID retrieves the type ID for a specific node's volume.
2395	StoragePoolVolumeTypeToName converts a volume type to its corresponding name or returns an error if invalid.
2396	DevicesAdd inserts multiple devices into a database with their configurations.
2397	Devices retrieves all devices based on project and query name, filtering by profile status.
2398	Patches retrieves a list of patch names from the database.
2399	PatchesMarkApplied inserts a record of the applied patch name and current timestamp into the database.
2400	entityType constructs a fully qualified type name by capitalizing the entity and appending the package name (unless it's 'db').
2401	entityPost generates a POST endpoint name based on the given entity.
2402	stmtCodeVar generates a variable name based on entity, kind, and optional filters.
2403	destFunc generates a Go function string based on input parameters and field names.
2404	CompareConfigs identifies differences between two configuration maps, excluding specified keys, and returns an error if any discrepancies are found.
2405	CopyConfig creates a copy of the input configuration map.
2406	NewNotifier creates a notifier that notifies other nodes about state changes based on the given policy.
2407	Events sets up periodic updates of event listeners based on endpoints and cluster state, invoking a callback for each event.
2408	eventsConnect establishes an event listener connected to the specified address using the given certificate, subscribing to all project events.
2409	StoragePoolInit initializes the storage core and returns any errors.
2410	getAAProfileContent constructs an AppArmor profile based on container configuration and state.
2411	AALoadProfile manages AppArmor profiles for containers, ensuring they are up-to-date and loaded correctly.
2412	AADestroy unloads AppArmor profiles based on daemon state.
2413	AAParseProfile checks if AppArmor is available and runs the parse command if so.
2414	getSystemHandler creates a log handler based on syslog, debug mode, and log format.
2415	NotifyUpgradeCompleted sends a PATCH request to inform nodes about completed upgrades.
2416	KeepUpdated creates a task to update state periodically or on demand.
2417	maybeUpdate checks if the cluster node needs an update and triggers it if necessary.
2418	NewServer initializes a new client with authentication details.
2419	StartStatusCheck monitors server status changes and flushes cache periodically.
2420	SyncProjects updates RBAC resources based on configured ProjectsFunc.
2421	AddProject adds a new project with a unique ID and updates RBAC and project map accordingly
2422	DeleteProject removes a project from resources.
2423	RenameProject updates a project's name by adding it again.
2424	IsAdmin checks if the specified username has admin privileges based on cached or synchronized permissions.
2425	HasPermission checks if the user has the specified permission for the given project.
2426	rsyncSend transfers files using WebSocket and handles errors.
2427	rsyncSendSetup sets up a Unix socket for rsync communication, starts an rsync process, and returns the command, connection, and stderr pipe.
2428	tlsClientConfig generates a TLS configuration using certificate information.
2429	tlsCheckCert verifies TLS cert against trusted list; returns true if valid.
2430	internalClusterContainerMovedPost handles post-container-move events in the cluster.
2431	containerPostCreateContainerMountPoint creates the mount points for a container and its snapshots after creation.
2432	Contains checks if a device exists under a given key and compares it to another device using deviceEquals. Returns true if they match, false otherwise.
2433	Update compares two device lists and returns maps of removed, added, updated devices, and differences.
2434	DeviceNames returns a sorted list of device names.
2435	Infof formats a message and logs it using the Log object's Info method.
2436	Debugf uses Log to log debug messages formatted with the given arguments.
2437	Warnf formats and logs a warning message using a specified format string and arguments.
2438	Errorf logs formatted error messages if Log is not nil.
2439	Critf logs critical messages using a specified format and arguments.
2440	eventForward forwards events based on type and metadata.
2441	StorageProgressReader wraps a reader with progress tracking.
2442	StorageProgressWriter wraps a writer with progress tracking for operations.
2443	GetLSBRelease retrieves OS release information from /etc/os-release or /usr/lib/os-release. If neither exists, it returns an empty map and no error.
2444	Reset updates the Go package imports or writes them to a file.
2445	Append appends a code snippet to a specified file or stdout.
2446	ContainerToArgs transforms a container object into structured arguments.
2447	ContainerNames retrieves container names for a given project from the database.
2448	ContainerNodeAddress retrieves the address of a container's node based on project and name.
2449	ContainersListByNodeAddress lists container names by node address.
2450	ContainerListExpanded retrieves and expands container details using profiles.
2451	ContainersByNodeName retrieves a mapping of container names to node names for a given project.
2452	SnapshotIDsAndNames retrieves container IDs and names from the database based on a given snapshot name prefix.
2453	ContainerNodeList fetches containers on the local node.
2454	ContainerNodeProjectList retrieves containers for a given project on the local node.
2455	ContainerRemove removes a container from a project within a transaction.
2456	ContainerProjectAndName retrieves project and container names based on ID from the database.
2457	ContainerConfigClear deletes configuration and profile data associated with a specific container ID from multiple tables within a database transaction.
2458	ContainerConfigGet retrieves a configuration value from the database using a given container ID and key.
2459	ContainerConfigRemove deletes a configuration entry from the database.
2460	ContainerSetStateful updates the statefulness of a container in the database.
2461	ContainerProfilesInsert inserts specified profiles into a container's list, applying them in order.
2462	ContainerProfiles retrieves the names of profiles associated with a specific container from the database.
2463	ContainerConfig retrieves configuration settings for a specific container from the database.
2464	ContainerSetState updates container state using a transaction.
2465	ContainerUpdate updates a container's details in the database.
2466	ContainerLastUsedUpdate updates the last use date of a container with the given ID in the database.
2467	ContainerGetSnapshots retrieves snapshots for a container in a project.
2468	ContainerGetSnapshotsFull retrieves full snapshots for a specific container within a given project.
2469	ContainerNextSnapshot finds the next available snapshot number based on the given pattern.
2470	ContainerPool retrieves the storage pool for a given project and container.
2471	ContainerGetBackup retrieves backup details for a specified project and container.
2472	ContainerGetBackups retrieves container backups using SQL query.
2473	ContainerBackupCreate inserts a new backup record or returns an error if already defined.
2474	ContainerBackupRemove deletes the specified container backup by name.
2475	ContainerBackupRename updates the name of a container backup in the database.
2476	ContainerBackupsGetExpired retrieves expired container backups from the database.
2477	DefaultOS creates a new OS instance with default directories and initializes InotifyWatch.
2478	Init initializes OS by setting up directories, architectures, LXC path, backing filesystem, ID mapping, execution path, user namespace, AppArmor, and cgroups.
2479	GetWebsocket retrieves a websocket connection using operation ID and secret.
2480	Refresh updates the operation with the latest data from the repository.
2481	CancelTarget cancels the associated target operation or returns an error if none exists.
2482	GetTarget retrieves associated target operation.
2483	Initialize server configurations, handle listeners, and start handlers based on configuration settings.
2484	Down stops all listeners and waits for tomb.
2485	serveHTTP binds a server to a listener and logs the event.
2486	closeListener on kind will close the associated listener and remove it from the listeners map
2487	activatedListeners categorizes systemdListeners based on their type and applies TLS encryption to TCP listeners before returning them in a map.
2488	CandidServer extracts API URL, key, expiry, and domains from configuration.
2489	RBACServer retrieves configuration details for API URL, key, expiry, agent URL, username, private key, and public key from the config.
2490	AutoUpdateInterval retrieves the auto-update interval from config in hours.
2491	MAASController retrieves MAAS API URL and key from configuration.
2492	OfflineThreshold returns the cluster's offline threshold duration.
2493	ConfigGetString retrieves a string value from cluster configuration using a specified key.
2494	ConfigGetBool retrieves a boolean value from a cluster's configuration.
2495	ConfigGetInt64 retrieves an int64 value from cluster configuration by key.
2496	ClusterAddress returns the address of the cluster listener.
2497	Debug logs a message with file, line, and function context using a logger if it's not nil.
2498	RestServer initializes an HTTP server with routes for various endpoints and handles not found requests.
2499	projectParam extracts or defaults to 'default' the 'project' param from the HTTP request.
2500	get the value of a query parameter from an HTTP request.
2501	newDb creates a Cobra command for database-related code generation.
2502	Description returns a string describing the given OperationType.
2503	Permission returns the required permission for the given operation type.
2504	OperationsUUIDs retrieves UUIDs of operations associated with a cluster transaction.
2505	OperationNodes retrieves distinct node addresses for the given project.
2506	OperationByUUID retrieves an operation by its UUID.
2507	OperationAdd inserts or updates operation record in database.
2508	OperationRemove deletes a row from the operations table based on UUID.
2509	`operations retrieves operations from the database based on the specified conditions and returns them as a list.`
2510	expireLogsTask schedules daily execution to expire old log files.
2511	absPath calculates the absolute path of a given path relative to the LXD source tree root directory.
2512	Keys will retrieve sorted keys from the schema.
2513	Defaults returns default values for each field in the schema.
2514	mustGetKey retrieves a key from a schema by name, panicking if the key does not exist.
2515	checks if the key type matches the expected type
2516	validate checks if the given value is valid according to the Key's constraints.
2517	GetStoragePoolVolumes retrieves all storage volumes from a specified pool.
2518	GetStoragePoolVolume retrieves storage volume details from the server.
2519	CreateStoragePoolVolume sends a POST request to create a storage pool volume if the "storage" extension is available.
2520	CreateStoragePoolVolumeSnapshot sends a POST request to create a storage pool volume snapshot
2521	GetStoragePoolVolumeSnapshots fetches snapshots for a specified storage pool and volume.
2522	GetStoragePoolVolumeSnapshot retrieves a storage pool volume snapshot and its ETag.
2523	UpdateStoragePoolVolumeSnapshot updates a storage pool volume snapshot.
2524	MigrateStoragePoolVolume checks for necessary extensions and performs a storage pool volume migration.
2525	MoveStoragePoolVolume handles moving storage volumes locally.
2526	UpdateStoragePoolVolume updates a storage pool volume on the server.
2527	DeleteStoragePoolVolume checks for storage extension and deletes a volume.
2528	RenameStoragePoolVolume renames a storage pool volume on the LXD server.
2529	doStoragePoolCreateInternal handles storage pool creation logic.
2530	containerGetParentAndSnapshotName extracts parent and snapshot name from a given string using a delimiter and returns them along with a boolean flag indicating success.
2531	containerLoadFromAllProjects retrieves all containers across projects in state.
2532	containerLoadNodeAll retrieves all containers on a node.
2533	containerLoadNodeProjectAll fetches all containers for a given project.
2534	heartbeatNode sends a heartbeat request to a remote node using TLS encryption and handles the response asynchronously.
2535	dotPrefixMatch checks if the short string is a prefix match for the full string when split by '.'.
2536	ContainerMount checks if a storage ZFS container is mounted based on its project, name, and privilege status.
2537	ContainerStorageReady checks if ZFS filesystem exists for a container.
2538	AskChoice prompts the user with a question and validates their input against predefined choices, returning the selected choice or the default answer if invalid input is provided.
2539	AskInt prompts user for integer input within specified range or uses default value.
2540	AskString prompts the user for a string, validates it using a provided function, and returns the valid input or the default answer.
2541	AskPassword prompts the user to input a password twice. If both inputs match, it returns the password; otherwise, it asks again.
2542	AskPasswordOnce asks user for password once
2543	askQuestion prints a question and reads an answer with a default value.
2544	readAnswer retrieves user input or uses a default value.
2545	profilePost handles renaming or creating profiles in a project.
2546	profileDelete handles deletion of a specified profile.
2547	IsRootDiskDevice checks if the device is the root disk device based on type, path, and source.
2548	GetRootDiskDevice searches for the root disk device in a map of devices, returning its name and details if found, or an error otherwise.
2549	ForwardedResponse creates a new forwarded response object
2550	ForwardedResponseIfTargetIsRemote forwards HTTP requests to remote nodes if specified.
2551	ForwardedResponseIfContainerIsRemote forwards response if container is remote.
2552	ForwardedOperationResponse constructs a response for an operation in a specific project.
2553	Done updates ProgressRenderer state based on input message.
2554	Update renders a progress message conditionally based on terminal status and format.
2555	Warn logs a status message with a timeout, truncating it if necessary.
2556	UpdateProgress updates the progress renderer with new text from the given progress data.
2557	UpdateOp updates progress based on operation metadata.
2558	updateFromV6 migrates zfs.pool_name configuration from global to per-node settings in a database transaction.
2559	localCreateListener creates a Unix socket listener at the given path with restricted access to the specified group. It checks for existing listeners, removes stale sockets, sets permissions, and returns the new listener or an error.
2560	NewStmt initializes a new statement object with the specified parameters.
2561	Generate method processes statement kind and calls appropriate handler.
2562	RegisterStmt registers a statement with the database buffer.
2563	httpsLXD creates an HTTPS LXD client using the provided URL and arguments. It initializes the client with TLS settings, authenticates if necessary, and tests the connection before returning the client instance.
2564	IsActive determines if a container is active based on its status.
2565	RaftNodeAddress retrieves the address of a specific Raft node by its ID.
2566	RaftNodeFirst inserts or updates a raft node's address in the database.
2567	RaftNodeAdd inserts or updates a node's address in the raft_nodes table.
2568	RaftNodeDelete deletes a raft node using its ID.
2569	RaftNodesReplace deletes old raft nodes and inserts new ones.
2570	initCGroup sets OS CGroup controllers based on existence of specified paths, logging warnings if not found.
2571	sqliteDirectAccess configures SQLite connection for direct access by setting specific PRAGMA values.
2572	ContainerGet retrieves a specific container based on project and name.
2573	ContainerID retrieves the container's unique identifier from the database.
2574	ContainerExists checks if a container exists in a project by attempting to retrieve its ID; it returns true if found, false otherwise or on error
2575	ContainsFields checks if Mapping contains all specified Fields exactly.
2576	FieldByName returns the *Field associated with the specified name. If no such field exists, it returns nil.
2577	FieldColumnName retrieves the column name for the specified field within the mapping.
2578	FilterFieldByName retrieves a field by name, validating it's a column type.
2579	ColumnFields filters out excluded columns and returns matching fields.
2580	ScalarFields returns a list of scalar fields configured for joining in the mapping model.
2581	RefFields collects all slice and map type fields from the mapping.
2582	Column returns the snake-cased column name or joined column name.
2583	ZeroValue returns the default value for the Field based on its type
2584	FieldColumns constructs a comma-separated list of database column names from the given fields.
2585	FieldArgs constructs a comma-separated list of field arguments from a slice of fields.
2586	FieldParams converts field names to lowercase and joins them with commas.
2587	FieldCriteria constructs SQL criteria from a list of fields.
2588	initDataClusterApply configures the LXD cluster based on the provided config.
2589	JsonFormatEx formats JSON data based on pretty printing and line separation.
2590	formatLogfmtValue formats a Go value into a logfmt-compatible string.
2591	ResolveTarget looks up the address of a cluster member named target, returning an error if not found.
2592	Write updates progress while writing to a closer.
2593	updateNodeVersion updates node version in database.
2594	selectNodesVersions retrieves node versions from the database.
2595	GetArchitectures retrieves the local system's architecture and its personalities.
2596	RuntimeLiblxcVersionAtLeast checks if the installed liblxc version meets or exceeds the specified major, minor, and micro versions.
2597	GetExecPath retrieves the executable path using LXD_EXEC_PATH or falls back to /proc/self/exe.
2598	Connect establishes an LXD connection with specified TLS certificates and optional notification.
2599	ConnectIfContainerIsRemote connects to remote containers if necessary.
2600	ConnectIfVolumeIsRemote connects to a container server if a volume is remote.
2601	SetupTrust connects to a target cluster node, decodes a certificate, creates a new client certificate, and adds it to the trust store.
2602	GetStoragePools retrieves storage pools from the LXD protocol.
2603	GetStoragePool retrieves a storage pool's details and its ETag.
2604	CreateStoragePool checks extensions and sends a POST request to create a storage pool.
2605	UpdateStoragePool updates a storage pool on the LXD protocol.
2606	DeleteStoragePool deletes the storage pool with the specified name if the "storage" API extension is available.
2607	GetStoragePoolResources retrieves storage pool resources for a given name.
2608	initDirs initializes necessary directories with specific permissions.
2609	Config fetches the node's configuration from the database.
2610	UpdateConfig updates configuration settings using a transaction.
2611	Config fetches cluster transaction's configuration.
2612	UpdateConfig updates configuration using a transaction.
2613	storagePoolClusterConfigForEtag removes specific keys from the input configuration map and returns the modified map.
2614	GetEvents sets up and returns an EventListener for handling LXD events.
2615	LogfmtFormat returns a log format that outputs structured log records using the logfmt encoding.
2616	StorageVolumeNodeAddresses retrieves storage volume node addresses based on criteria.
2617	StorageVolumeNodeGet fetches node name for given volume ID.
2618	StorageVolumeConfigGet retrieves configuration settings for a specific storage volume.
2619	StorageVolumeDescriptionGet retrieves volume description from database.
2620	StorageVolumeIsAvailable checks if a volume is available in a specified storage pool by examining container devices.
2621	StorageVolumeDescriptionUpdate updates the description of a storage volume in the database.
2622	StorageVolumeConfigAdd inserts configuration values for a given volume ID into the database.
2623	StorageVolumeConfigClear deletes the configuration associated with a specific storage volume from the database.
2624	storageVolumeIDsGet retrieves storage volume IDs based on project, name, type, and pool ID from the database.
2625	StorageVolumeCleanupImages removes images from storage volumes based on their fingerprints.
2626	StorageVolumeMoveToLVMThinPoolNameKey updates config to use LVM thin pool name.
2627	L writes formatted data to buffer and updates count.
2628	Formatted buffer bytes return as byte slice or error.
2629	Pretty converts input to a formatted JSON string using MarshalIndent.
2630	NetworkPublicKey retrieves public key from cert.
2631	NetworkPrivateKey retrieves the private key from the certificate associated with the endpoints.
2632	NetworkCert returns the certificate information from Endpoints.
2633	NetworkAddress returns the network address of the specified listener or empty string if not found.
2634	NetworkUpdateAddress updates the network address for Endpoints.
2635	NetworkUpdateCert updates certificates for network and cluster listeners.
2636	networkCreateListener sets up a secure TCP listener using TLS encryption.
2637	Accept wraps Listener.Accept, handles TLS, and returns a net.Conn.
2638	Config updates TLS settings for network listener.
2639	NodeInfo.IsOffline checks if the node is offline based on the heartbeat timestamp and a given threshold.
2640	NodeByAddress retrieves a node by its address.
2641	NodePendingByAddress checks pending nodes by address.
2642	NodeByName retrieves a node by name, returning its info or an error if not found or ambiguous.
2643	NodeName retrieves a unique node name from the database or reports an error if the ID is inconsistent.
2644	NodeAddress retrieves a single node's address from the database or reports an error if multiple addresses are found.
2645	NodeIsOutdated checks if any cluster node has a newer version than the current node.
2646	NodesCount returns the number of nodes in the cluster.
2647	NodeRename updates a node's name in the database if it doesn't already exist
2648	nodes retrieves node information based on pending status and additional conditions.
2649	NodeAdd inserts or updates a node's details in the transaction.
2650	NodePending updates a node's pending status in the database.
2651	NodeUpdate updates a node's details in the database.
2652	NodeRemove deletes a node from the database and verifies exactly one row was affected.
2653	NodeHeartbeat updates the node's heartbeat in the database.
2654	Check if node has containers, images, or custom volumes. Return empty if none found.
2655	NodeClear removes a node and associated images from the database if they're no longer needed.
2656	NodeOfflineThreshold calculates offline threshold from config.
2657	NodeUpdateVersion updates node's schema and API extensions.
2658	Transaction executes a database operation within a transaction context, committing or rolling back based on the outcome.
2659	rollback rolls back the transaction and logs any failure.
2660	ProfileURIs retrieves URIs of profiles matching given filters.
2661	ProfileGet retrieves a specific profile by project and name, returning it or an error if not found or ambiguous.
2662	ProfileExists checks if a profile exists by project and name.
2663	ProfileConfigRef retrieves config references for profiles based on filter criteria.
2664	ProfileUsedByRef retrieves profiles used by reference, filtering by project and/or name. It returns a nested map indexed by project and name containing value lists. If no matching profiles are found, an empty map is returned.
2665	ProfileCreate inserts a new profile and its associated references into the database. If a profile with the same key exists, it returns an error.
2666	ProfileRename executes a statement to rename a profile in the database and checks the number of affected rows.
2667	ProfileDelete executes a SQL statement to delete a profile and checks the number of affected rows.
2668	ServerTLSConfig initializes TLS configuration using provided certificate info, enabling client authentication and setting up root CAs if available.
2669	NetworkInterfaceAddress retrieves the first non-loopback IP address from system interfaces.
2670	IsAddressCovered checks if address1 is covered by address2 based on host and port matching.
2671	SelectObjects executes a SQL query using stmt, scanning results into dest.
2672	DeleteObject removes an object from a database table based on its ID and returns success status.
2673	loop manages task execution with scheduling and context handling.
2674	IsTerminal checks if the file descriptor refers to a terminal. Returns true if no error occurs.
2675	function to create a Unix socket listener at specified path.
2676	socketUnixRemoveStale deletes a stale Unix socket if it exists.
2677	socketUnixSetPermissions sets the file permissions for a Unix socket.
2678	socketUnixSetOwnership sets the ownership of a Unix socket to the specified group or the current group if not provided.
2679	Function checks if Ceph OSD pool exists for given cluster and user.
2680	cephOSDPoolDestroy deletes a Ceph OSD pool
2681	cephRBDVolumeExists checks if a Ceph RBD volume exists by querying its metadata.
2682	cephRBDSnapshotProtect protects a Ceph RBD snapshot with given parameters. If the snapshot is already protected, it returns nil.
2683	cephRBDCloneCreate clones a RBD volume from a source to a target cluster using specified credentials and parameters.
2684	cephRBDSnapshotListClones retrieves RBD snapshot clones.
2685	cephRBDVolumeMarkDeleted moves a RBD volume to a deleted state in Ceph.
2686	cephRBDVolumeUnmarkDeleted renames a deleted Ceph RBD volume from an old name to a new name using specified cluster, pool, volume details, and user credentials.
2687	cephRBDVolumeRename renames a Ceph RBD volume in a specified pool and cluster.
2688	cephRBDVolumeSnapshotRename renames a snapshot on a Ceph RBD volume using the specified user credentials.
2689	cephRBDSnapshotDelete removes a specified RBD snapshot using the provided credentials and parameters.
2690	cephRBDVolumeCopy copies a Ceph RBD volume from one name to another using specified user credentials.
2691	cephRBDVolumeListSnapshots lists RBD volume snapshots.
2692	getRBDSize retrieves the RBD volume size from configuration, converting it to bytes with a default fallback.
2693	getRBDFilesystem returns the filesystem type configured for RBD, defaulting to 'ext4'.
2694	copyWithoutSnapshotsFull creates a non-sparse copy of RBD storage volume from source to target container without snapshots.
2695	Creates a sparse copy of RBD storage volume without snapshots between containers.
2696	GetConfigCmd retrieves and formats Pachyderm's authentication configuration
2697	SetConfigCmd creates a Cobra command to set Pachyderm's authentication configuration.
2698	newSharder creates a new Sharder
2699	NewRouter creates a router instance with the given sharder, dialer, and local address.
2700	renewUserCredentials extends user's auth token using admin credentials.
2701	Create a local client with specified root directory, ensuring it exists with appropriate permissions.
2702	AddSpanToAnyExisting starts or joins a tracing span based on the context.
2703	InstallJaegerTracerFromEnv installs Jaeger tracer based on env vars
2704	UnaryClientInterceptor creates a gRPC client interceptor using OpenTracing.
2705	StreamClientInterceptor creates a gRPC stream client interceptor using OpenTracing.
2706	UnaryServerInterceptor creates a gRPC server interceptor for OpenTracing.
2707	StreamServerInterceptor creates a gRPC stream server interceptor for OpenTracing tracing.
2708	CloseAndReportTraces closes the global tracer if it implements io.Closer.
2709	newWriter initializes a Writer object with necessary configurations for handling data writing operations.
2710	For sets the MaxElapsedTime field of ConstantBackOff to maxElapsed.
2711	Logs request, response, error, duration; reports metric asynchronously.
2712	Format implements logrus.Formatter.
2713	NewGRPCLogWriter creates a new GRPCLogWriter instance with specified logger and source.
2714	Read reads or generates a configuration file, handling errors and updating UserID if missing.
2715	Write method serializes Config to JSON and writes it to the specified or default config file path.
2716	Reads binary data from the readWriter, unmarshals it into the given proto.Message, and returns any errors encountered during the process.
2717	Write serializes a protocol buffer message to bytes and writes it using WriteBytes.
2718	NewReadWriter creates a ReadWriter from an io.ReadWriter.
2719	RunGitHookServer starts a server at specified address, connects to etcd, initializes git hook, and listens on HTTP port.
2720	newLoggingPipe creates a logging pipe with tee readers for client and server buffers.
2721	Read method on loggingConn delegates reading operation to inner reader.
2722	Write sends data over the connection. The number of bytes written and any error encountered during the write operation are returned. Similar to net.Conn Write.
2723	Accept returns next connection or error
2724	Close closes the listener connection channel safely.
2725	errorf creates and returns a new hashTreeError with the given error code and formatted message.
2726	InitWithKube initializes a ServiceEnv with Kubernetes configuration and starts a goroutine to initialize the kube client.
2727	GetEtcdClient returns an etcd client after waiting for the connection to establish.
2728	GetKubeClient returns Kubernetes clientset after ensuring connection
2729	NewHasher creates a Hasher instance for processing jobs and pipelines based on given moduli.
2730	HashJob computes the hash of jobID using Adler-32 and returns it modulo JobModulus.
2731	HashPipeline computes the hash value for a pipeline name using Adler-32 checksum and applies a modulus operation.
2732	Status retrieves worker statuses from clients using gRPC.
2733	Cancel cancels a job on workers using specified filters.
2734	Conns retrieves gRPC client connections from etcd using the specified prefix and port.
2735	Clients retrieves clients from connections.
2736	NewClient creates a gRPC client using an address and environment variable for the port.
2737	RunFixedArgs validates command-line arguments before executing a specified function.
2738	RunBoundedArgs ensures the number of command-line arguments falls within a specified range before executing a given function.
2739	Run adapts a command-line handler for use with cobra. It executes the provided function and exits on error.
2740	ErrorAndExit formats error message and exits program.
2741	ParseCommit extracts repository and commit ID from the input argument.
2742	ParseBranch extracts a branch from a commit argument.
2743	ParseFile parses a repository argument to extract and return a pfs.File object.
2744	Set appends string to RepeatedStringArg.
2745	SetDocsUsage configures command help and usage templates based on associated commands.
2746	makeCronCommits schedules commits based on a cron spec, ensuring no unfinished commits exist before creating new ones with timestamps.
2747	AddSpanToAnyExisting wraps o.Client.Writer method, adding a span for tracing.
2748	TracingObjClient's Reader method wraps a span around the underlying client's Reader call.
2749	Delete traces and removes a resource.
2750	Walk traverses objects with a callback function.
2751	Exists checks if a resource exists using tracing.
2752	GetBlock encodes a hash to a Base64 URL string and returns it wrapped in a Block pointer.
2753	Health checks if server is ready.
2754	split extracts directory and file name from a path.
2755	ValidatePath checks if the given path contains only printable ASCII characters and no globbing characters.
2756	MatchDatum checks if all filters match any datum in data.
2757	NewCacheServer initializes a new cache server
2758	authorizePipelineOp authorizes pipeline operations based on user permissions and repository access.
2759	sudo executes a function with elevated privileges using a superuser token from etcd.
2760	Set default values for pipeline info parameters.
2761	incrementGCGeneration increments the garbage collection generation in etcd.
2762	NewDebugServer initializes a new debug server with specified parameters.
2763	Health checks the API client's connectivity to its server using gRPC.
2764	newObjBlockAPIServer creates a new objBlockAPIServer instance with specified parameters.
2765	watchGC uses exponential backoff to repeatedly watch for generation number changes in etcd and updates the server's generation accordingly.
2766	splitKey generates a unique key by appending generation or prefix and generation to the original key
2767	NewWriter initializes a tabulated writer with a header.
2768	Writer writes a byte slice to its underlying writer, flushing if necessary. Counts lines and updates header accordingly.
2769	PrintRepoHeader prints the appropriate repo header based on authentication status.
2770	PrintRepoInfo outputs repository information in a tab-separated format.
2771	PrintDetailedRepoInfo prints repository information using a template, handling various display options.
2772	PrintBranch outputs branch name and head commit ID or "-" if no head.
2773	PrintCommitInfo outputs commit details formatted in a table.
2774	PrintDetailedCommitInfo generates and prints detailed commit information using a template.
2775	PrintFileInfo outputs formatted file information to a writer.
2776	PrintDetailedFileInfo generates a formatted file info report using a Go template.
2777	Add formats a string with an ancestor count.
2778	RetryNotify attempts to execute an operation with retries using exponential backoff, notifying on failures until successful or stopped.
2779	Get fetches data from MergeCache using id, applies filter, and copies it to writer while handling errors.
2780	Delete removes item from MergeCache based on id.
2781	PrintJobInfo outputs formatted job information to a writer.
2782	PrintPipelineInfo outputs formatted pipeline information to writer.
2783	PrintWorkerStatus outputs worker details to writer w.
2784	PrintDetailedJobInfo prints detailed information about a job using a Go template.
2785	PrintDetailedPipelineInfo prints detailed information about a pipeline using a Go template.
2786	PrintDatumInfo outputs datum info to writer with formatted details.
2787	PrintDetailedDatumInfo prints detailed information about a datum instance.
2788	PrintFile outputs file details to writer.
2789	ShorthandInput generates a shorthand representation of a pipeline input.
2790	Retrieve retrieves AWS credentials from Vault, updates lease, renews, and returns them.
2791	IsExpired checks if vault credentials have expired.
2792	NewBranch creates a new branch with the given repository and name.
2793	NewCommit creates a new pfs.Commit with specified repo name and ID.
2794	NewCommitProvenance creates a new CommitProvenance object with specified repoName, branchName, and commitID.
2795	NewFile creates a new pfs.File instance with specified repoName, commitID, and path.
2796	CreateRepo invokes PfsAPIClient.CreateRepo with context and repo name.
2797	InspectRepo fetches repository info using gRPC.
2798	ListRepo retrieves information about all repositories using the API client.
2799	DeleteRepo deletes a repository with optional force flag.
2800	BuildCommit creates a new commit in the specified repository and branch based on the given parent commit and tree object, returning the resulting commit details.
2801	StartCommitParent initiates a new commit based on a parent commit in the specified repository and branch, returning the new commit details.
2802	FinishCommit sends a request to complete a Git commit and handles any errors returned.
2803	InspectCommit retrieves information about a specific commit in a repository.
2804	BlockCommit checks out a finished commit in a repository using APIClient.
2805	ListCommit retrieves commit information from the repository within a specified range.
2806	ListCommitF lists commits in a repository using a callback function.
2807	ListCommitByRepo retrieves commit history for a specified repository.
2808	CreateBranch creates a new branch in the specified repository.
2809	InspectBranch fetches info on a specific branch within a repository.
2810	ListBranch retrieves branch information for the specified repository.
2811	SetBranch updates a repository's branch with a specific commit.
2812	DeleteBranch removes a branch from the repository.
2813	DeleteCommit deletes a specific commit from the repository.
2814	FlushCommit sends a request to flush commits to specified repositories and returns an iterator over commit info.
2815	FlushCommitF calls PfsAPIClient.FlushCommit and processes commit info using a callback function.
2816	FlushCommitAll commits the changes to the specified repositories and returns the commit information.
2817	SubscribeCommit subscribes to commit events on a specified repository and branch, filtering by state and optional start commit. It returns an iterator for commit info or an error.
2818	SubscribeCommitF subscribes to commit events for a specific repository and branch, invoking a callback function on each received commit info.
2819	PutObjectAsync creates an asynchronous writer for object upload with given tags.
2820	PutObject uploads an object to storage using provided tags and reader.
2821	PutObjectSplit uploads data to storage in chunks using gRPC.
2822	GetObject fetches object data using provided hash and writes it to a writer.
2823	GetObjectReader creates a reader from an object's hash using a gRPC client.
2824	GetObjects fetches multiple objects using a client and writes them to a writer.
2825	TagObject applies tags to an object using APIClient.
2826	ListObject applies a function to each object received from the server.
2827	InspectObject retrieves object information using APIClient.
2828	GetTag fetches and writes a tag to a writer.
2829	GetTagReader retrieves a tag reader for the specified tag.
2830	ListTag calls a callback function for each tag received from the server.
2831	Compact compacts data in the API client
2832	NewPutFileClient creates a PutFileClient using the PfsAPIClient's PutFile method, handling errors with grpcutil.ScrubGRPC.
2833	Uploads file content from reader to specified path in repository, overwriting existing content at given index. Returns number of bytes written and any error encountered during upload process.
2834	Close closes the gRPC client connection, handling errors gracefully.
2835	CopyFile method in APIClient handles file copying between repositories.
2836	GetFile downloads a file from a repository using a gRPC client and writes it to a writer.
2837	GetFileReader retrieves a file reader for specified parameters.
2838	GetFileReadSeeker retrieves a read-seekable file from a repository at a specific commit.
2839	InspectFile retrieves file information from a specified repository, commit, and path.
2840	ListFile retrieves file info from a repository using an API client.
2841	ListFileHistory retrieves file history using APIClient.
2842	ListFileF processes file information in a repository using a callback function.
2843	APIClient Walk traverses files in a repository using a callback function.
2844	DeleteFile removes a file from a repository using the PFS API client.
2845	Write asynchronously writes bytes to a buffer, handling errors and splitting large writes into chunks.
2846	Close operation flushes buffer, closes channel, handles errors, and returns gRPC scrubbed result.
2847	PrettyPrintVersionNoAdditional formats the version number as a string.
2848	recursiveBlockQuoteExamples formats examples in cobra commands recursively.
2849	errMissingField returns an error response indicating a missing required field.
2850	validateFields checks if any request data contains unknown fields based on the schema.
2851	putConfig stores the given config in the specified storage under the "config" key.
2852	getConfig retrieves and decodes a configuration from storage.
2853	Serve starts gRPC servers with specified options, registering services and handling TLS configurations.
2854	NewPuller creates a Puller with an error channel and a map to track pipes.
2855	PullTree fetches files from a hash tree using a client, handling concurrency with a limiter and group.
2856	Push uploads files from a directory to Pachyderm, handling overwrites and using goroutines for concurrency.
2857	PushObj uploads files from a Pachyderm commit to an object store using parallel workers.
2858	PushFile uploads a file to Pachyderm, verifying chunks match before overwriting.
2859	Dump writes the debug information to the specified writer.
2860	Profile captures a trace of the specified profile and writes it to the given writer.
2861	Binary writes the binary data from the client to the writer, handling errors gracefully.
2862	RegisterCacheStats registers cache statistics with Prometheus, handling potential registration errors.
2863	wait blocks until counter's value reaches n
2864	RunWorkload executes workload using API client, manages jobs, and checks their success.
2865	createRepo creates a new repository, starts its initial commit, and records both.
2866	advanceCommit manages commit progress by starting or finishing them based on certain conditions.
2867	RandString generates a random string of length n using a given random source.
2868	NewReader creates a reader with specified random source and byte count.
2869	iterDir iterates over each key-value pair in the specified BoltDB path, applying a custom function to each item.
2870	FSSize returns the total size of files under the root directory in the hash tree.
2871	Diff computes the difference between two HashTrees using transactions and a callback function.
2872	Serialize converts dbHashTree to a byte stream using boltDB.
2873	Deserialize deserializes data from a reader into a BoltDB hash tree.
2874	Copy creates a copy of the hash tree by hashing, serializing, and deserializing it.
2875	Destroy closes the hash tree and removes its path.
2876	PutFileOverwrite overwrites files at the specified path.
2877	PutDirHeaderFooter updates directory header and footer in database.
2878	PutFileHeaderFooter stores file header and footer in database.
2879	deleteDir removes all keys under a specified path in a BoltDB transaction.
2880	NewReader creates a new Reader using the given reader and filter.
2881	Reads data from the reader until filter passes or end of file reached; returns MergeNode containing key-value pair.
2882	NewWriter creates a Writer using the provided io.Writer.
2883	Write marshals and writes a merge node's key and value to a buffer, updating indices and offsets accordingly.
2884	Copy reads from reader and writes to writer until EOF.
2885	Index serializes writer's indices to a byte slice.
2886	GetRangeFromIndex retrieves the range of offsets for a given prefix from a reader.
2887	NewFilter creates a function to check if a key belongs to a specific tree.
2888	Converts cleaned path to tree representation
2889	Merge combines multiple readers' data, merging and writing the results using a writer.
2890	Hash computes the hash tree using a BoltDB transaction.
2891	IsGlob checks if a given pattern matches any file path using regular expressions after cleaning it.
2892	GlobLiteralPrefix extracts the literal prefix from a glob pattern. Returns the original pattern if no special characters are found.
2893	GetHashTreeObject retrieves an object using Pachyderm client and processes it to create a hash tree.
2894	GetHashTreeTag fetches a hash tree tag from Pachyderm.
2895	PutHashTree uploads a hash tree to Pachyderm using a pipe and waits for the upload to complete.
2896	NewChildCursor creates a cursor at the specified path within a BoltDB transaction, initializing it to point to the first child key.
2897	Next method returns key-value pair from cursor. If no more items, returns nil.
2898	NewOrdered initializes an ordered file system with a root directory.
2899	MkdirAll creates directories recursively in reverse order.
2900	PutDir cleans path, creates NodeProto, and calls putDir.
2901	Serialize converts Ordered to a MergeNode stream.
2902	NewUnordered initializes a new unordered data structure with the given root directory.
2903	Ordered returns a new ordered structure from unordered file system paths.
2904	revokeUserCredentials revokes the user's credentials using the provided tokens and context.
2905	NewAPIServer creates a new API server instance with the specified version and options.
2906	String converts a version protobuf to a human-readable format.
2907	getPipelineInfo retrieves pipeline info using Pachyderm client and environment.
2908	function to remove string from slice if present.
2909	PublicCertToPEM converts TLS certificate to PEM format
2910	GenerateSelfSignedCert creates a self-signed TLS certificate using the given address and name.
2911	ActivateCmd configures Pachyderm's authentication system, setting up the initial administrator and exchanging GitHub tokens for Pachyderm tokens.
2912	DeactivateCmd deactivates Pachyderm auth, deleting all ACLs, tokens, and admins, and exposing all data.
2913	LoginCmd creates a Cobra command for logging into Pachyderm using OTP or GitHub token.
2914	LogoutCmd creates a Cobra command for logging out of Pachyderm.
2915	WhoamiCmd creates a Cobra command to print the user's Pachyderm identity, including session expiration and admin status.
2916	CheckCmd creates a Cobra command to verify user access permissions for a repository.
2917	GetCmd creates a Cobra command to retrieve ACLs or user scopes
2918	SetScopeCmd creates a Cobra command to set user access scopes for repositories.
2919	ListAdminsCmd creates a Cobra command to list cluster admins using a client.
2920	ModifyAdminsCmd creates a command to modify cluster admins based on provided flags.
2921	GetAuthTokenCmd creates a command to retrieve an authentication token for a specified user.
2922	UseAuthTokenCmd creates a cobra command to read a Pachyderm auth token from stdin and write it to the current user's Pachyderm config file.
2923	Cmds creates a list of Cobra command objects for managing authentication in a Pachyderm cluster.
2924	ParseScope converts a string to a scope enum or returns an error if unrecognized.
2925	IsErrNotActivated checks if the error indicates that a resource is not activated.
2926	IsErrPartiallyActivated checks if the error message contains the partially activated status.
2927	IsErrNotSignedIn checks if the error message contains the not signed-in status.
2928	IsErrBadToken checks if the given error corresponds to a bad token status.
2929	IsErrNotAuthorized checks if the error indicates a lack of authorization.
2930	IsErrInvalidPrincipal checks if the given error is due to an invalid principal format.
2931	IsErrTooShortTTL checks if the error indicates a requested time-to-live (TTL) is less than the current token's TTL.
2932	NewDatumFactory creates a DatumFactory based on input type for Pachyderm processing jobs.
2933	NewCollection initializes a new collection with given parameters.
2934	Path constructs the full path using the collection's prefix and the given key.
2935	getIndexPath retrieves an indexed path from a collection based on a value and index.
2936	getMultiIndexPaths retrieves multiple index paths for the given value and index.
2937	Upserts a value in a collection using a provided function.
2938	get retrieves data from etcd using the specified key and options.
2939	list processes values using a callback after checking type.
2940	Watch creates a new watcher for the collection with specified options.
2941	WatchByIndex creates a watcher for changes at a specific index in a collection.
2942	WatchOne creates a new watcher for a specific key in the collection.
2943	WatchOneF sets up a watcher for a single key and processes events using a callback function.
2944	Get opens the file associated with the given key from the cache directory. If the key is not found, it returns an error.
2945	Keys method returns sorted list of cache keys.
2946	Clear removes all cached items from disk.
2947	NewHTTPServer creates an HTTP server at the specified address, sets up routes for file, service, and authentication handlers, and returns the server instance.
2948	NewDeployServer creates a new APIServer using the provided kubeClient and namespace.
2949	Export pulls Docker images based on opts and exports them to out.
2950	Import imports Docker images from input stream, tags them, and pushes them to registries using authentication.
2951	DatumTagPrefix generates a short hash from a given salt for use as a tag prefix.
2952	NewPFSInput creates a new pps.Input for PFS with specified repo and glob.
2953	NewPFSInputOpts creates a new input option for PFS.
2954	NewJobInput creates a JobInput struct with specified repoName, commitID, and glob pattern.
2955	NewPipelineInput creates a new pps.PipelineInput with specified repo and glob pattern.
2956	CreateJob submits a new pipeline job using the specified pipeline and output commit.
2957	ListJob retrieves job information for the given pipeline and commit range.
2958	ListJobF lists jobs using PPS API client, applying a callback to each job info.
2959	FlushJob calls PPS API to flush jobs and processes job info using callback.
2960	FlushJobAll flushes jobs across multiple pipelines using provided commits.
2961	DeleteJob deletes a job using its ID.
2962	StopJob stops the specified job using the PPS API client.
2963	RestartDatum restarts datum for a given job using APIClient.
2964	ListDatum fetches datum info from a job using pagination.
2965	ListDatumF retrieves datum information from a stream using a callback function.
2966	InspectDatum fetches datum info using job and datum IDs.
2967	Next fetches the next log message; returns true if successful.
2968	InspectPipeline fetches pipeline info using APIClient.
2969	ListPipeline retrieves pipeline information using APIClient.
2970	DeletePipeline deletes a pipeline with optional force flag
2971	StartPipeline starts a pipeline using gRPC.
2972	StopPipeline stops a pipeline using APIClient.
2973	RerunPipeline restarts a pipeline with optional commits to include or exclude.
2974	CreatePipelineService creates a pipeline service with specified parameters.
2975	GetDatumTotalTime calculates the total processing time from stats.
2976	Mount mounts an NFS server at mountPoint using c and opts, handling signals to unmount gracefully.
2977	NewBufPool initializes a BufPool with a sync.Pool that generates byte slices of specified size.
2978	StorageRootFromEnv retrieves the storage root directory from environment variables, adjusting for specific backend quirks.
2979	BlockPathFromEnv constructs block path from environment variable
2980	NewGoogleClient creates a new Google client for the specified bucket.
2981	NewGoogleClientFromSecret creates a new Google client using credentials from secret files or environment.
2982	NewGoogleClientFromEnv retrieves Google client credentials from environment variables and initializes a new Google client.
2983	NewMicrosoftClientFromSecret creates a new Microsoft client using secrets from files or defaults.
2984	NewMicrosoftClientFromEnv creates a new Microsoft client using environment variables.
2985	NewMinioClientFromSecret creates a MinIO client using secrets from files.
2986	NewMinioClientFromEnv creates a new MinIO client using environment variables.
2987	NewAmazonClientFromSecret creates an Amazon client using secret files for configuration.
2988	NewAmazonClientFromEnv creates a new Amazon client using environment variables.
2989	NewClientFromURLAndSecret creates a client based on the URL and secret, handling different storage types like S3, GCS, and local.
2990	ParseURL extracts object store details from a given URL string.
2991	NewClientFromEnv creates a client based on the storage backend environment variable.
2992	NewExponentialBackOffConfig creates a new exponential back-off configuration with custom settings.
2993	Close closes the BackoffReadCloser, adding a tracing span.
2994	Close method for BackoffWriteCloser; closes writer, ignores ignorable errors.
2995	IsRetryable checks if the error is retryable either network-wise or by the client. Returns false if error is nil.
2996	RunStdin executes commands using input from standard input.
2997	RunIODirPath executes a command with specified arguments and captures its output or errors.
2998	NewAuthServer initializes an authentication API server with various collections and watchers.
2999	expiredClusterAdminCheck checks if the user is an admin or if Pachyderm Enterprise is active.
3000	getOneTimePassword generates and stores a unique OTP for a user with optional expiration.
3001	hashToken generates a SHA-256 hash of the input token and returns it as a hexadecimal string.
3002	getAuthToken retrieves an authentication token from context metadata, returning an error if not found or multiple tokens present.
3003	canonicalizeSubjects parallelizes the canonicalization of each subject and collects the results.
3004	Matches checks if actual string matches regex pattern.
3005	OneOfMatches checks if any actual string matches the expected regex pattern.
3006	Equal checks if two values are equal using reflection and reports a failure if they are not.
3007	NotEqual asserts that two values are not equal.
3008	oneOfEquals checks if any element in a slice equals a given value, considering pointer types.
3009	NoneEquals checks if actuals does not equal expected.
3010	NoError asserts no error occurred; otherwise, it logs a fatal error message.
3011	NoErrorWithinT checks if a function completes without error within a specified time frame; otherwise, it fails the test with a descriptive message.
3012	NoErrorWithinRetry executes a function repeatedly until it succeeds or times out, logging any errors encountered.
3013	YesError asserts an error is returned.
3014	NotNil checks if the provided object is not nil, considering various types including channels and slices.
3015	Nil checks if the given object is nil and reports an error if not.
3016	False checks if a boolean value is false, reporting an error if it's true.
3017	newSTM initiates a serializable transaction using STM.
3018	NewDryrunSTM creates a dry-run STM with the given client and apply function.
3019	newSTMRepeatable creates a repeatable STM transaction using the provided client and apply function.
3020	newSTMSerializable initializes an STMSerializable object and runs it using the provided apply function.
3021	newSTMReadCommitted executes STM read committed transaction with specified client and apply function.
3022	commit is called on stm to finalize transactions, resetting rset.
3023	Pipelines returns a collection for managing etcd pipelines.
3024	Jobs creates a new collection from etcd client with specified prefix and indices.
3025	NewTicker creates a Ticker with exponential backoff.
3026	nodeToMap updates or deletes keys in out based on etcd node values, returning true if changes occur.
3027	Create a new v1.ServiceAccount instance with specified options.
3028	ClusterRole generates a new cluster role configuration
3029	RoleBinding creates a new RoleBinding resource with specified options.
3030	GetSecretEnvVars generates environment variables based on storage backend and predefined mappings.
3031	PachdService creates a Kubernetes Service with multiple ports for different APIs and services.
3032	GithookService creates a Kubernetes Service for handling Git hooks with LoadBalancer type.
3033	EtcdDeployment creates a Kubernetes Deployment for etcd with specified resources and volume configuration.
3034	EtcdStorageClass creates a StorageClass resource based on the specified backend.
3035	EtcdVolume creates a PersistentVolume specification based on the given backend and options.
3036	Create Service with NodePort based on local flag.
3037	EtcdHeadlessService creates a headless service for etcd using provided options.
3038	},
	}
}
3039	DashDeployment creates a Kubernetes Deployment with specified containers and configurations.
3040	Create a v1.Service object with specific configurations based on AssetOpts.
3041	WriteSecret creates a Kubernetes secret and encodes it using the specified encoder.
3042	GoogleSecret creates a map with Google bucket and credential data
3043	WriteDashboardAssets encodes dashboard service and deployment assets using the provided encoder.
3044	WriteLocalAssets encodes assets and secrets to a local backend.
3045	WriteCustomAssets writes custom assets based on the specified object store and persistent disk backends.
3046	WriteAmazonAssets uploads assets to Amazon using specified credentials or IAM role.
3047	WriteGoogleAssets handles writing assets to Google storage using specified options and credentials.
3048	WriteMicrosoftAssets uploads assets to Microsoft backend and sets secret.
3049	Images constructs a list of images based on the provided options.
3050	AddRegistry prepends the registry to the image name, handling optional namespaces.
3051	withCanonicalRandomizationFactor ensures the randomization factor within [0, 1] range.
3052	Reset resets the backoff interval to initial and records the start time using the clock.
3053	incrementCurrentInterval adjusts the backoff interval, doubling it or setting to max if overflow occurs.
3054	NewBlockAPIServer creates a block API server based on the specified backend.
3055	LocalStorage initializes a local storage client and returns it along with a storage object
3056	deleteJob updates pipeline job counts and deletes a job resource.
3057	writeXML sends XML-encoded data to HTTP response writer with specified status code.
3058	clean1_7HashtreePath ensures the path starts with a slash and cleans it using pathlib before appending a default root.
3059	NewFromAddress creates a new APIClient instance from an address with optional configurations.
3060	getUserMachineAddrAndOpts determines the machine address and options based on environment variables or configuration.
3061	NewInCluster creates a new APIClient using environment variables for Pachd host and port.
3062	Close closes the API client connection and port forwarder if applicable.
3063	DeleteAll deactivates and deletes all resources.
3064	SetMaxConcurrentStreams sets the limiter to a new limit based on n.
3065	WithContext sets the ctx field of APIClient instance.
3066	NewDLock creates a new distributed lock implementation
3067	DatumID generates a unique ID for given data using SHA-256 hash based on file paths and hashes.
3068	runUserErrorHandlingCode executes a command with specified environment and handles errors based on the context and process state.
3069	HashDatum computes a hash value for a given pipeline and data inputs.
3070	HashDatum15 computes a hash based on pipeline info and input data, ensuring deterministic output by temporarily clearing environment variables.
3071	APIServer's Status method returns worker's current status.
3072	Cancel handles job cancellation based on filters.
3073	mergeStats combines two ProcessStats objects by adding their durations and bytes values.
3074	mergeChunk merges chunks while logging duration and errors
3075	IsCommitNotFoundErr checks if the given error matches the regex pattern for "commit not found".
3076	IsCommitDeletedErr checks if the error indicates that a commit was deleted.
3077	IsCommitFinishedErr checks if the error indicates that a commit has finished.
3078	IsRepoNotFoundErr checks if the given error matches a regex pattern indicating a repository not found error.
3079	IsBranchNotFoundErr checks if the given error matches a regular expression indicating a branch not found error.
3080	IsFileNotFoundErr checks if the given error matches a file not found pattern.
3081	Version retrieves the client's version information.
3082	validateRepoName checks if the repo name contains only allowed characters.
3083	newDriver initializes a driver instance with specified parameters and validates input.
3084	inspectCommit checks authorization, resolves commit info, and waits for dependent commits to finish based on the specified state.
3085	commitPrefix constructs the prefix for a scratch commit using its repository and ID
3086	scratchFilePrefix constructs a prefix for a scratch file based on its commit and path.
3087	getTreeForFile retrieves the hash tree for a given file or creates a new one if none exists.
3088	provenantOnInput checks if provenance exists excluding the spec repo.
3089	nodeToFileInfo converts a node to a file info object.
3090	fileHistory tracks and processes file history using a callback function.
3091	upsertPutFileRecords updates or inserts put file records for a given commit.
3092	ReadRow reads a single row from a PostgreSQL dump file, handling headers, footers, and different line endings.
3093	NewReporter initializes a Reporter with cluster ID and kube client, starts reporting metrics asynchronously.
3094	ReportUserAction tracks user actions, reporting start, finish, and error details using Reporter.
3095	FinishReportAndFlushUserAction logs user actions with duration or error status.
3096	Read from input, manage chunks, handle EOF.
3097	ActivateCmd creates a Cobra command to activate Pachyderm enterprise features using an activation code.
3098	GetStateCmd creates a Cobra command to check Pachyderm cluster's enterprise feature activation status
3099	Cmds generates a list of Cobra commands for managing Pachyderm Enterprise features, including activation and state retrieval.
3100	NewConfiguration initializes a Configuration based on the input type.
3101	Repos creates a new collection for repository information using etcd.
3102	PutFileRecords creates a new collection using etcd client and prefix for storing file records.
3103	Commits retrieves a collection of commit information from an etcd client.
3104	Branches creates a new collection from an etcd client, prefix, and repository, filtering out invalid branch names.
3105	OpenCommits creates a new collection using etcd client and prefix.
3106	NewDAG creates a directed acyclic graph (DAG) from a map of node IDs to parent IDs.
3107	NewNode creates a new node in the DAG with specified id and parents.
3108	Sorted returns a topologically sorted list of nodes in the DAG.
3109	Leaves returns a list of leaf node IDs from the DAG.
3110	Ancestors finds all ancestor nodes for a given ID in the DAG.
3111	Descendants finds all descendants of a node in a DAG using BFS.
3112	Ghosts returns a list of nodes with no parents in the DAG.
3113	NewPortForwarder initializes a port forwarder with a specified namespace or default.
3114	Run starts a port forwarder for a specified application.
3115	RunForDaemon starts port forwarding for Pachyderm daemon.
3116	RunForSAMLACS starts port forwarding for SAML ACS on the specified or default local port.
3117	RunForDashUI starts port forwarding for Dash UI on the specified local port or default port.
3118	RunForDashWebSocket starts port forwarding for Dash WebSocket using the specified or default local port.
3119	RunForPFS starts port forwarding for Pachyderm using specified or default local port.
3120	RunForS3Gateway starts port forwarding for S3 gateway on specified local port.
3121	Lock method sets the PID file path and writes it.
3122	Stop port forwarding gracefully.
3123	Unmarshal deserializes event data based on template type.
3124	UnmarshalPrev deserializes previous event data.
3125	MakeWatcher creates a new Watcher instance with channels for events and completion signals.
3126	CheckType ensures val matches the type of template, returning an error if not.
3127	NewPool creates a new Pool instance to watch Kubernetes endpoints for a service.
3128	Do uses Pool to execute a function with a gRPC client connection.
3129	Close closes the connection pool, ensuring all connections are properly closed.
3130	Build Docker image using provided parameters.
3131	pushImage tags and pushes a Docker image from sourceTag to destTag using the provided Docker client and authentication configuration.
3132	newMinioClient creates a new MinIO client with specified endpoint, credentials, and security settings, returning the client instance.
3133	newMinioClientV2 creates a MinIO client with specified parameters.
3134	newMinioWriter creates a MinIO writer using a pipe and starts a goroutine to upload data asynchronously.
3135	Close closes the writer's pipe and returns any error from the error channel.
3136	PipelineRepo extracts the repository name from the given pipeline.
3137	PipelineRcName generates a Kubernetes resource config name from the given parameters.
3138	GetRequestsResourceListFromPipeline retrieves resource list from pipeline info.
3139	GetLimitsResourceListFromPipeline retrieves the resource list from the pipeline's resource limits and cache size.
3140	getNumNodes retrieves the total number of nodes in a Kubernetes cluster.
3141	GetExpectedNumWorkers calculates the expected number of workers based on Kubernetes client and parallelism specification
3142	GetExpectedNumHashtrees calculates the expected number of hashtrees based on the spec
3143	FailPipeline updates the state of a specified pipeline to failure and records the given reason.
3144	JobInput updates pipeline input with specific commit IDs based on provenance.
3145	PipelineReqFromInfo converts a PipelineInfo into a CreatePipelineRequest.
3146	NewPipelineManifestReader reads a pipeline manifest from a file or stdin and decodes it as JSON.
3147	NextCreatePipelineRequest reads the next create pipeline request from the decoder.
3148	DescribeSyntaxError enhances JSON syntax error messages with line context.
3149	UpdateJobState updates the state of a job in the system, including the pipeline's job counts and the job's start/finish times.
3150	New generates a UUID using exponential backoff and returns it as a string.
3151	Code returns the HTTP status code or OK if nil.
3152	NewHTTPError creates an HTTPError instance with the given code and formatted error message.
3153	NewStorage initializes a Storage instance with the given client and prefix.
3154	DeleteAll iterates over objects and deletes them.
3155	Chunk divides input data into chunks of specified size.
3156	ChunkReader reads data from reader r in chunks, applying function f to each chunk. Returns total bytes read or error.
3157	NewStreamingBytesReader creates a reader from a client and cancellation function.
3158	WriteToStreamingBytesServer reads from reader and writes to streamingBytesServer using a buffer.
3159	WriteFromStreamingBytesClient reads data from a streaming byte client and writes it to a writer until EOF.
3160	NewSidecarAPIServer initializes and returns a new APIServer instance.
3161	NewEnterpriseServer initializes a new enterprise APIServer with environment and etcd configuration.
3162	validateActivationCode checks if the provided activation code is valid by verifying its signature and expiration time.
3163	Activate validates an activation code and sets enterprise token expiration
3164	Deactivate will deactivate the server, delete all Pachyderm data, and wait for watchers to observe the change.
3165	lookExtensions finds the executable's full path by adding its directory if not specified.
3166	Start starts a command execution, handling various configurations and error cases.
3167	CombinedOutput sets both Stdout and Stderr to a buffer before running the command.
3168	StdinPipe sets up input pipe for Cmd.
3169	StdoutPipe returns a pipe that will be connected to the command's standard output when the command starts.
3170	dedupEnvCase removes duplicate environment variable keys based on case sensitivity and returns the cleaned list.
3171	InputName recursively finds the name of the first non-nil Pfs, Cross, or Union element.
3172	sorts inputs based on their names within cross or union structures
3173	InputBranches extracts branches from input and constructs pfs.Branch objects.
3174	ValidateGitCloneURL checks if the URL is a valid Git clone URL.
3175	function to check if any empty string exists in the list.
3176	NewAPIServer creates a new server with specified address, storage root, and cluster info.
3177	Ago calculates the duration since a given timestamp in a human-readable format.
3178	TimeDifference calculates the human-readable duration between two timestamps.
3179	Duration converts a protobuf duration to a human-readable format.
3180	InspectCluster fetches cluster info using AdminAPIClient.
3181	Extract processes admin operations using a callback function.
3182	ExtractAll retrieves all operations based on the specified condition.
3183	ExtractWriter writes admin operations to a given writer.
3184	ExtractURL extracts a URL using an admin client, handling errors and unexpected responses gracefully.
3185	ExtractPipeline extracts a pipeline using its name.
3186	Restore sends admin operations to client
3187	RestoreReader reads from r and restores data using the AdminAPIClient, handling errors and ensuring proper cleanup.
3188	RestoreFrom initiates a restore operation using another client.
3189	RestoreURL sends a restore request to the admin API client.
3190	IgnoreTypes filters out specified types during comparison.
3191	AppendEllipsis adds ellipsis or updates stats in text list.
3192	IsType checks if a type matches a specified function signature.
3193	Function retrieves the full name of a method or function from its reflect value, stripping unnecessary parts like package paths and closure suffixes.
3194	PointerOf converts a reflect.Value to a Pointer type.
3195	String converts an EditScript to a human-readable byte array representation.
3196	stats calculates statistics for an EditScript, counting occurrences of each type of edit.
3197	connect adjusts path from current point to destination using comparison function, appending direction changes to path.
3198	EquateNaNs returns comparison options to equate NaNs in float64 and float32 values.
3199	Path.Index retrieves the ith element from the PathSteps slice, handling negative indices.
3200	Key returns xkey if it equals ykey, otherwise returns -1.
3201	String method formats and returns diff information from defaultReporter.
3202	FormatType determines how to represent a type based on options and input node
3203	formatMapKey returns a formatted string representation of a map key value using specified options.
3204	formatString formats the input string using either a quoted or raw string representation.
3205	formatHex converts a uint64 number to a hexadecimal string with varying padding based on its value.
3206	formatPointer returns a formatted string representation of the pointer value.
3207	Visit checks if a pointer has been visited before, marking it as visited if not.
3208	Retrieves unexported field from struct using reflection.
3209	insert recursively adds field names to the fieldTree.
3210	matchPrefix checks if a path prefix matches a field tree structure.
3211	canonicalName recursively finds the canonical name of a field in a struct, considering embedded structs and disallowing unexported fields.
3212	FilterPath applies a filter function to an option.
3213	normalizeOption simplifies an option by flattening it and returning either the single simplified option or all options if multiple exist.
3214	flattenOptions recursively flattens nested options into a single slice.
3215	CanFormatDiffSlice checks if a value node can be formatted in diff mode.
3216	formatASCII formats a string to ASCII characters, replacing non-ASCII with dots.
3217	coalesceAdjacentEdits groups adjacent edits in a diff script into stats.
3218	SortKeys sorts reflect.Values based on their underlying values while removing duplicates.
3219	FormatDiff formats the difference between two values based on their types and modes.
3220	coalesceAdjacentRecords aggregates adjacent records based on their differences into groups.
3221	Diff compares two values and returns their differences as a string.
3222	statelessCompare resets state before comparing paths and restores afterward.
3223	sanitizeValue normalizes reflect values based on type.
3224	Check verifies if the Path contains a recursive sequence of Transformers and panics with details if found.
3225	Ensures a value is addressable by creating a new one if necessary.
3226	Marshal emits the field value based on its type to the visitor.
3227	String method for Field struct returns its key and value in a formatted string.
3228	Set adds a tag to a span.
3229	Inject will inject the span context into the carrier using text map writer.
3230	Extract extracts span context from text map carrier, populating TraceID, SpanID, Sampled, and Baggage fields. Returns emptyContext and error on failure.
3231	ToLogRecord converts LogData to LogRecord with appropriate timestamp and fields.
3232	New creates a new MockTracer instance with default injectors and extractors.
3233	StartSpan initializes a mock span with given options.
3234	Registers injector for format
3235	Registers an extractor for a given format
3236	Inject mocks base method
3237	Extract retrieves a SpanContext from a carrier using a specified format.
3238	ContextWithSpan adds a tracing span to a context.
3239	Set adds a tag with the given name and value to the OpenTracing span.
3240	Set method assigns tag to span with given value.
3241	Set adds a tag to an OpenTracing span.
3242	SetString sets the tag's value on the given span.
3243	EmitString updates m's Key, ValueKind, and ValueString fields.
3244	EmitLazyLogger sets mock values from lazy logger
3245	RunAPIChecks runs API checks with the given options.
3246	CheckBaggageValues sets the CheckBaggageValues option for API checks.
3247	CheckExtract sets the CheckExtract option to val.
3248	CheckInject sets the CheckInject option for APICheckSuite.
3249	CheckEverything sets options to enable baggage value checking, extract, and inject on an API check suite.
3250	UseProbe configures an API check option with a probe.
3251	WithBaggageItem updates baggage item in MockSpanContext.
3252	Tags returns a copy of the span's tags.
3253	Tag retrieves value for key k from tags map while holding read lock.
3254	Logs returns a copy of the accumulated log records.
3255	Context retrieves the SpanContext from MockSpan.
3256	SetTag updates span tags based on key-value pairs, handling specific cases for sampling priority.
3257	SetBaggageItem updates the SpanContext's baggage item and returns the span.
3258	BaggageItem retrieves a baggage item from a mock span using a key.
3259	Finish updates the span's finish time and records it.
3260	FinishWithOptions updates MockSpan's finish time and logs records based on options.
3261	String method formats MockSpan details into a readable string.
3262	LogFields logs fields with the current timestamp.
3263	logFieldsWithTimestamp logs fields with a timestamp, marshaling them into key-value pairs and appending to a log slice.
3264	LogKV logs key-value pairs as fields, handling errors gracefully.
3265	LogEvent logs an event with its name.
3266	Implements MockSpan.LogEventWithPayload
3267	SetOperationName locks, updates OperationName, then returns s.
3268	registries.DirPath returns system registries directory path based on context.
3269	loadAndMergeConfig reads multiple YAML files from a directory and merges their configurations into a single registryConfiguration object.
3270	ParseReference extracts image reference from string.
3271	NewReference creates an ImageReference from a Docker reference
3272	CheckAuth verifies Docker credentials using a GET request, returning an error if unauthorized or other issues occur.
3273	doHTTP sends HTTP request using TLS transport.
3274	detectPropertiesHelper detects Docker client properties by pinging the registry over HTTPS or HTTP, handling TLS configurations and checking for V1 support.
3275	detectProperties detects and caches properties using detectPropertiesHelper.
3276	getExtensionsSignatures fetches and parses Docker extension signatures.
3277	NewTransport configures an HTTP transport with default settings and environment-specific proxies.
3278	readRegistryConf reads registry configuration file for the given system context.
3279	GetRegistries fetches registries from system context configuration.
3280	GetInsecureRegistries retrieves the list of insecure registries from system context.
3281	RegistriesConfPath constructs a configuration file path based on context
3282	NewOptionalBool creates an OptionalBool based on the input boolean value.
3283	changeState updates the state of a policy context if it matches the expected value.
3284	Change policy context state from ready to destroying, then to destroyed.
3285	policyIdentityLogName generates a log name based on image reference.
3286	requirementsForImageRef fetches policy requirements based on image reference and available transport scopes.
3287	ParseImageName extracts transport and reference from image name, validating transport and parsing reference.
3288	BlobInfoFromOCI1Descriptor converts OCI descriptor to blob info.
3289	OCI1FromManifest parses a JSON manifest into an OCI1 struct.
3290	OCI1FromComponents constructs an OCI1 manifest from a configuration descriptor and a list of layer descriptors.
3291	newReference validates Docker references and returns a dockerReference object.
3292	tagOrDigest returns the tag or digest of a Docker reference, or an error if neither is present.
3293	updateEmbeddedDockerReference checks if the destination ignores the embedded Docker reference and updates it if necessary, ensuring compatibility with the source's manifest.
3294	isTTY checks if the writer is connected to a terminal.
3295	copyUpdatedConfigAndManifest updates image config and manifest if necessary.
3296	createProgressBar creates a progress bar for copying files, displaying size and completion status.
3297	copyConfig copies image configuration from source to destination while handling progress tracking.
3298	diffIDComputationGoroutine computes and sends the diff ID result over a channel.
3299	computeDiffID computes the digest of a stream after optionally decompressing it.
3300	compressGoroutine compresses data from a reader and writes it to a pipe writer using gzip compression.
3301	newDockerClient creates a Docker client using the provided system context. It sets the host based on the system context or uses the default Docker daemon host. For non-unix hosts, it configures the HTTP client with TLS settings if necessary. Finally, it initializes and returns a Docker client instance.
3302	defaultPolicyPath determines the path to a policy based on system context, prioritizing explicit paths over defaults.
3303	NewPolicyFromFile reads a policy file and returns a Policy object.
3304	NewPolicyFromBytes creates a new Policy from bytes by unmarshalling JSON data.
3305	newPolicyRequirementFromJSON parses JSON to create a PolicyRequirement based on its type.
3306	newPRSignedBy constructs a policy reference signed by a key, validating inputs and returning an error if invalid.
3307	newPRSignedByKeyPath creates a new prSignedBy instance using a key path and signed identity.
3308	newPRSignedByKeyPath constructs and returns a new policy requirement using a specified key path and identity.
3309	newPRSignedByKeyData creates a new prSignedBy instance using specified key data and signed identity.
3310	NewPRSignedByKeyData creates a new PR SignedByKeyData instance with specified key type, data, and signed identity.
3311	IsValid checks if sbKeyType is valid.
3312	newPRSignedBaseLayer constructs a *prSignedBaseLayer with a specified BaseLayerIdentity, returning an error if none is provided.
3313	newPolicyReferenceMatchFromJSON parses JSON to create a specific PolicyReferenceMatch implementation.
3314	newPRMExactReference validates and constructs a PRM exact reference from a Docker reference.
3315	newPRMExactRepository validates and creates a new PRM exact repository instance.
3316	newImageSource creates a new image source from a reference, resolving the image and initializing its properties.
3317	getBlobAndLayerID fetches blob and layer ID from storage source.
3318	computeID generates a unique ID for a storage image based on its manifest.
3319	PutManifest validates and stores the provided manifest blob.
3320	PutSignatures processes signatures, storing their total size and concatenated blob.
3321	newImage creates a new image from a source and returns it along with its size.
3322	newImageSource creates an image source from an OCI archive reference; cleans up on error.
3323	LoadManifestDescriptor loads and returns the manifest descriptor from an OCI archive image reference.
3324	Close releases resources associated with the image source.
3325	append adds a string to ordered set if not already included.
3326	isMultiImage checks if an image has multiple layers
3327	These helper methods manage reference counts and locks for paths.
3328	unlockPath releases the lock associated with the given path and removes it if ref count reaches zero.
3329	view executes a callback within a read-only BoltDB transaction.
3330	update updates data in a BoltDB database using a transactional function.
3331	uncompressedDigest retrieves or returns an uncompressed digest from the given BoltDB transaction.
3332	appendReplacementCandidates appends replacement candidates from a BoltDB bucket to the given slice.
3333	indexExists checks if an OCI image index exists at the specified path.
3334	createSignature generates a new signature for a given manifest using GPG
3335	ParseReference extracts directory and image from reference and creates a new ImageReference.
3336	NewReference creates an OCI reference from a directory and image name.
3337	getIndex opens and decodes an OCI image index file.
3338	LoadManifestDescriptor retrieves descriptor from OCI image reference.
3339	blobPath constructs a path to a blob based on its digest and optional shared directory.
3340	SignDockerManifest signs a Docker manifest using the provided mechanism and key identity.
3341	VerifyDockerManifestSignature checks Docker manifest signature against expected values and returns verified signature or error.
3342	newOpenshiftClient creates a client for interacting with OpenShift clusters using the provided reference. It parses the reference, sets up the client configuration, and initializes the HTTP client before returning the configured client object.
3343	doRequest sends an HTTP request using the specified method, path, and optional request body. It handles authentication, logging, and error checking.
3344	getImage fetches an image from OpenShift using the provided image stream image name and returns it along with any errors encountered.
3345	convertDockerRef extracts registry domain and image name
3346	ensureImageIsResolved fetches and resolves Docker image references from OpenShift image streams.
3347	newImageDestination creates an image destination using OpenShift client; returns an ImageDestination or error.
3348	newUntrustedSignature constructs an untrustedSignature with specified Docker manifest digest and reference.
3349	MarshalJSON serializes untrusted Docker signature.
3350	UnmarshalJSON deserializes untrusted signature, handling JSON format errors.
3351	verifyAndExtractSignature verifies the signature using a mechanism, extracts key identity, validates it, and checks Docker manifest digest and reference against rules. If all validations pass, it returns a Signature object.
3352	RewriteReference updates container image references using a specified prefix.
3353	getV1Registries processes configuration to create a list of registries with specified attributes.
3354	getConfigPath retrieves config path based on context.
3355	GetRegistries fetches registry configurations from a specified path, caches them, and handles backward compatibility for different versions.
3356	readRegistryConf reads configuration bytes from a specified file path.
3357	Manifest retrieves image manifest details.
3358	ConfigUpdate updates the config and annotations fields of tarballReference.
3359	parseImageAndDockerReference extracts Docker references from image and string inputs, returning named references or an error.
3360	parseDockerReferences extracts two normalized Docker image references
3361	ListNames returns sorted names of non-deprecated transports.
3362	NewReference creates an OCI image reference from an input image and repository.
3363	signaturePath generates the path to the signature file at the given index
3364	ValidateImageName returns an error if the input image name does not match the expected format.
3365	SplitPathAndImage splits a reference into path and image based on OS
3366	ValidateOCIPath checks if the OCI path contains a colon based on the operating system.
3367	ValidateScope checks if the given scope is valid for the current OS and ensures it's in canonical path format.
3368	BlobInfoFromSchema2Descriptor converts a schema descriptor to a BlobInfo struct.
3369	Schema2FromManifest parses a JSON manifest into a Schema2 object.
3370	Schema2FromComponents constructs a new Schema2 object from components
3371	SetAuthentication updates Docker credentials for a given registry.
3372	RemoveAuthentication removes authentication from the system context for a given registry.
3373	RemoveAllAuthentication removes all authentication from the system context.
3374	readJSONFile reads a JSON file at the given path and returns a dockerConfigFile object. If the file is not found, it initializes an empty AuthConfigs map. If the file is in legacy format, it unmarshals only the AuthConfigs field; otherwise, it unmarshals the entire dockerConfigFile.
3375	modifyJSON updates the JSON file at the given path using the provided editor function, ensuring the directory exists before performing operations.
3376	findAuthentication retrieves authentication details from a JSON file or credential helper, prioritizing normalized entries.
3377	NewDestination creates a new Destination instance for writing blobs to a repository.
3378	AddRepoTags appends repoTags to d.
3379	writeLegacyLayerMetadata constructs metadata for legacy layers based on descriptors.
3380	sendSymlink creates a tar header for a symlink and writes it using the destination's tar writer.
3381	sendBytes sends the given byte slice to the destination at the specified path using sendFile.
3382	sendFile sends a file as a tar archive using the provided reader and checks the copied size against the expected size.
3383	Commit closes the tar archive.
3384	imageMatchesRepo checks if the given image matches the repository reference by comparing their names.
3385	resolveImage fetches an image using either its ID or repository reference, resolving any aliases.
3386	Transport returns a new image transport using the reference's store and UID/GID maps.
3387	StringWithinTransport provides a transport-specific string representation of storageReference.
3388	PolicyConfigurationNamespaces returns a list of policy configuration namespaces based on the storage reference.
3389	GzipDecompressor decompresses the input reader using gzip
3390	Bzip2Decompressor wraps an io.Reader with a bzip2 decompressor and returns an io.ReadCloser.
3391	XzDecompressor returns a ReadCloser that decompresses the input reader using XZ.
3392	DetectCompression identifies compression format from reader's prefix; returns appropriate decompressor or nil along with buffered reader.
3393	newImageDestination creates a Docker image destination from system context and reference.
3394	mountBlob attempts to mount a blob and handles cases where mounting is not supported or fails, potentially cancelling an unintended upload.
3395	bicTransportScope returns a BICTransportScope for the given dockerReference.
3396	newBICLocationReference creates a reference for BIC location using the repository name.
3397	parseBICLocationReference parses a BIC location reference into a named reference.
3398	NewSourceFromStream creates a new source object from a stream, saving it to a temp file and handling decompression.
3399	Reads a tar component from a specified path and returns its contents as bytes.
3400	ensureCachedDataIsPresent reads and parses tar manifest, config, and prepares layer data, caching results for later use.
3401	loadTarManifest reads and parses a tar manifest file into a list of ManifestItems.
3402	Close removes tar file path on close if configured.
3403	newImageDestination creates a new image destination for Docker daemon using system context and reference.
3404	imageLoadGoroutine handles image loading in Docker using a goroutine.
3405	NewReference resolves and validates file and image paths to create an OCI archive reference.
3406	createOCIRef generates a temporary OCI reference from an image
3407	createUntarTempDir creates a temporary directory and untars a file into it.
3408	destructivelyPrioritizeReplacementCandidatesWithMax sorts candidates based on timestamps and returns up to maxCandidates prioritized replacements.
3409	newImageDestination creates a new image destination with a temporary directory path based on the reference branch name; ensures the directory exists before returning the destination.
3410	resolveExistingPathToFullyExplicit converts a given path to its absolute, symlink-resolved, and cleaned form.
3411	newImageDestination creates a new image destination, ensuring the directory is either empty or matches expected container image contents before proceeding.
3412	function to check if directory is empty.
3413	removeDirContents deletes all contents in a directory
3414	GetRepositoryTags retrieves image repository tags using Docker client.
3415	DefaultCache returns a BlobInfoCache implementation using BoltDB or a memory-only cache based on system context and available disk space.
3416	Retrieve cached uncompressed digest or map it from compressed if available.
3417	Close cleans up temporary directory and unpacked destination.
3418	PutManifest delegates to unpackedDest's PutManifest method.
3419	Commit saves unpacked OCI archive image to tar file.
3420	tarDirectory will create a tar archive of the directory at src and save it to dst.
3421	ParseStoreReference extracts a storage reference from a given string.
3422	chooseDigestFromManifestList selects a digest from a manifest list based on system context or defaults.
3423	ChooseManifestInstance selects an instance digest from a manifest list based on system context and source image.
3424	manifestSchema1FromComponents creates a new generic manifest from schema1 components.
3425	manifestDigest retrieves or calculates the manifest digest for a docker image source.
3426	deleteImage handles Docker image deletion across different registries.
3427	Schema1FromComponents constructs a new Schema1 object from components like reference, layers, history, and architecture.
3428	initialize validates and processes the manifest's FSLayers and History.
3429	ToSchema2Config converts schema 1 image data to schema 2 format, handling compatibility issues and populating missing fields.
3430	Digest calculates the digest of a manifest, handling Docker V2 schema 1 signatures if present.
3431	MatchesDigest verifies if the manifest's digest matches the expected digest.
3432	NormalizedMIMEType maps MIME types to standardized values, defaulting to DockerV2Schema1SignedMediaType for unrecognized types.
3433	FromBlob converts a blob to a manifest based on its MIME type.
3434	NewReference resolves and returns an image reference from a given path.
3435	layerPath constructs the path to the layer using the reference path and digest hex
3436	signaturePath constructs the path to a signature file at the given index
3437	New creates a pool of workers with the specified size, using the given constructor to create new workers. The pool accepts work requests via reqChan.
3438	NewFunc creates a new pool with n workers, each processing tasks using the given function.
3439	ProcessTimed processes a job with a timeout, returning the result or an error if timed out.
3440	SetSize adjusts pool worker count asynchronously, ensuring correct synchronization.
3441	GetSize returns the current size of the worker pool.
3442	TL will return the top-left corner of a rectangle as a point
3443	BR returns the bottom-right corner point of a rectangle
3444	CVBox converts Box2D to CvBox2D.
3445	Points converts Box2D's cvBoxPoints to Go slice of Point2D32f.
3446	FOURCC combines four characters into a single 32-bit value.
3447	Merge combines multiple images into a single destination image.
3448	Split divides an image into its blue, green, red, and alpha channels.
3449	AddWeighted combines two images with specified weights and a constant.
3450	And performs AND operation on two images, storing result in dst.
3451	AndWithMask applies a bitwise AND operation between two images using a mask.
3452	AndScalar applies scalar operation to image without mask.
3453	AndScalarWithMask applies a mask to scalar values in images.
3454	Or performs bitwise OR on two images and stores result in third image.
3455	OrWithMask applies a bitwise OR operation on two images using a mask.
3456	OrScalar applies OR operation between src and value to dst.
3457	OrScalarWithMask performs bitwise OR operation on src and value using mask, storing result in dst.
3458	AddWithMask performs bitwise addition on two images using a mask.
3459	AddScalar adds a scalar value to each pixel of src image, storing result in dst.
3460	AddScalarWithMask adds a scalar to an image with a mask.
3461	Subtract calculates difference between two images and stores result.
3462	SubtractWithMask applies a mask to subtract two images
3463	SubScalar calls SubScalarWithMask without mask.
3464	SubScalarWithMask subtracts scalar from src using mask, storing result in dst.
3465	SubScalarRev subtracts scalar from images without mask.
3466	SubScalarWithMaskRev subtracts scalar from images using mask.
3467	AbsDiff calculates absolute difference between two images
3468	AbsDiffScalar calculates the absolute difference between each pixel's scalar value and a given scalar, storing the result in the destination image.
3469	MeanStdDevWithMask calculates mean and standard deviation of pixel values in an image with a given mask.
3470	CreateSeq initializes a sequence object with specified flags and element size
3471	Push adds an element to a sequence and returns the new head.
3472	Pop removes an element from the sequence.
3473	PushFront adds an element to the front of a sequence, returning the new head.
3474	PopFront removes an element from the front of a sequence.
3475	GetElemAt retrieves the element at the specified index from a sequence. An unsafe pointer to the element is returned.
3476	RemoveAt removes item at specified index from sequence.
3477	Delay sets the delay duration in the configuration.
3478	BackOffDelay calculates exponential backoff delay based on attempt count and configuration.
3479	Error returns a formatted string listing all non-nil errors with their attempt numbers.
3480	Arguments appends args to r.args and returns r.
3481	BodyString sets request body from string.
3482	BodyBytes sets request body to bytes reader.
3483	Body method sets the request body to the given reader.
3484	Option adds key-value pairs to the RequestBuilder's options map.
3485	Header adds a header to the request builder.
3486	Send sends the request using the specified HTTP client.
3487	Exec sends HTTP request and decodes response to given struct.
3488	Next retrieves the next message from the subscription's response.
3489	Cancel closes the subscription's output channel.
3490	FileList retrieves the first file object from the specified directory path.
3491	Cat retrieves file content from a specified path using a request.
3492	List retrieves links from the shell's ls command output.
3493	Pin adds a file or directory to the shell's pin list recursively.
3494	Pins retrieves a list of pin information from the shell's API.
3495	Version retrieves the version and commit information from the shell.
3496	SwarmPeers retrieves swarm peer connection information using a request.
3497	SwarmConnect connects to the swarm at the given address(es).
3498	DagPutOptions applies settings to DagPutSettings using provided options.
3499	Pin sets the pin field on opts.
3500	Kind sets the Kind field of opts to the specified value.
3501	Hash sets the hash field of opts to the given string.
3502	Add directory uploads its contents recursively to a server and returns the hash of the uploaded data.
3503	Publish sends a request to the Shell to set a node's value and waits for a response.
3504	PublishWithDetails publishes content with details using the specified options.
3505	ResolveValue processes plan values based on key or bind variables.
3506	GenerateQuery constructs SQL query by replacing placeholders with values from bind variables or extras.
3507	EncodeValue encodes a query parameter value to SQL format.
3508	Lex tokenizes input, skipping comments unless allowed. Returns token type and value.
3509	skipStatement will advance the tokenizer until it encounters a semicolon or end-of-file character.
3510	reset clears Tokenizer's state by setting fields to default values.
3511	Preview determines the type of SQL statement based on its first word or content.
3512	NewPlanValue converts an expression to a PlanValue, handling different types like SQLVal, ListArg, ValTuple, and NullVal, and returns an error for unsupported expressions.
3513	Utility function to check if a string exists within a list of strings.
3514	NewTrackedBuffer creates a TrackedBuffer instance initialized with a bytes buffer and a node formatter.
3515	NewStringArena creates a new StringArena with a buffer of specified size.
3516	NewString creates a new string from byte slice using StringArena buffer or returns original string if buffer overflow.
3517	SpaceLeft calculates remaining capacity in StringArena buffer.
3518	ParseStrictDDL parses SQL string to Statement using strict DDL syntax.
3519	ParseNext parses the next statement from a tokenizer, handling semicolons, EOF, and parsing errors gracefully.
3520	Format will write a SQLNode's representation to a buffer.
3521	ExprFromValue converts a SQL value to its corresponding AST expression.
3522	Backtick encloses input string in backticks and doubles any existing backticks
3523	NewValue creates a new value from byte data based on its type.
3524	String method formats and returns value based on type and quoting status.
3525	EncodeSQL encodes a Value to SQL format using a BinWriter.
3526	EncodeSQL constructs SQL insert statements from data.
3527	EncodeSQL encodes the tuple equality list as SQL.
3528	WalkStatement normalizes SQL statements based on their type.
3529	WalkSelect traverses a SQL query tree, converting values and comparisons while returning true.
3530	BindVariablesEqual checks if two maps of bind variables are equal.
3531	New creates a JWTMiddleware instance with customizable options; defaults are used if none are provided.
3532	JWTMiddleware's HandlerWithNext checks JWT validity; if valid and next func exists, it calls next.
3533	FromAuthHeader extracts token from HTTP Authorization header
3534	FromParameter creates a TokenExtractor from a parameter name
3535	FromFirst returns a TokenExtractor that uses the first non-empty token from the given extractors.
3536	getHelloPacket constructs an RPC message with subscription options for each topic in myTopics.
3537	NewFloodsubWithProtocols creates a new PubSub instance using FloodSubRouter with specified protocols.
3538	NewFloodSub creates a new Floodsub pubsub instance.
3539	NewLRUBlacklist creates a new Blacklist using an LRU cache with the specified capacity.
3540	NewRandomSub creates a new PubSub instance with RandomSubRouter.
3541	NewGossipSub initializes a new PubSub instance using GossipSubRouter.
3542	NewPubSub initializes a new pub-sub system with given options and attaches it to a host.
3543	WithValidateThrottle configures PubSub's validateThrottle channel size.
3544	WithBlacklist returns an option to set the blacklist for a pubsub instance.
3545	handleRemoveSubscription cancels a subscription and cleans up related resources.
3546	handleAddSubscription adds a subscription to a topic if it doesn't exist, announces the topic, and sends a response with the subscription details.
3547	announce sends subscription options to peers or schedules retries if queues are full.
3548	notifySubs delivers messages to subscribers based on topics. If a subscriber is too slow, it logs a warning.
3549	seenMessage checks if a message with a specific ID has been seen before.
3550	subscribedToMsg checks if the message's topic IDs match any of the publisher's subscribed topics.
3551	msgID constructs a message ID by concatenating the sender's name and sequence number from the given protobuf message.
3552	pushMsg filters and validates messages before publishing them, handling blacklisting and concurrency.
3553	validate ensures message integrity and forwards it if valid.
3554	validateSingleTopic checks if message validation can proceed without throttling; if so, it validates the message and returns the result; otherwise, it logs throttling and returns false.
3555	getValidators retrieves validators for topics in a message.
3556	SubscribeToTopic creates a subscription using TopicDescriptor. Returns a Subscription object or error.
3557	SubscribeByTopicDescriptor creates a new Subscription based on TopicDescriptor.
3558	GetTopics retrieves topics from a pubsub system asynchronously.
3559	Publish will send a message to a specified topic with optional signing.
3560	ListPeers retrieves peer IDs subscribed to a specified topic.
3561	WithValidatorTimeout returns a ValidatorOpt to set the timeout on addVal.
3562	WithValidatorConcurrency sets the concurrency level for validator requests and returns a validation option.
3563	RegisterTopicValidator registers a validator for a topic.
3564	UnregisterTopicValidator removes a topic validator from the PubSub system.
3565	DefaultMetricPrefix prepends "tchannel." to the metric name.
3566	MetricWithPrefix appends tags to a metric name based on its prefix.
3567	NewClient creates a new Client using a channel and service name, optionally setting a host port.
3568	Invoke a remote method with arguments and handle responses.
3569	CallPeer initiates a remote procedure call using TChannel.
3570	CallSC initiates a channel call to the specified method and handles the response.
3571	ReadResponse parses a tchannel call to create an HTTP response object.
3572	writeHeaders writes response headers to a buffer and flushes them to the writer.
3573	ResponseWriter creates a TChannel response writer and returns it along with a finish function.
3574	ReadHeaders extracts headers from a reader and returns them as a map.
3575	newTCPRawRelay creates a TCP relay
3576	NewClient initializes a new Hyperbahn client with specified configurations and returns it or an error.
3577	Advertise registers services with other channels and starts advertising in a loop.
3578	Handle incoming RPC call with headers and arguments, process, and return response.
3579	Start initializes and runs a TChannel server.
3580	Port extracts and returns the port number from the HostPort string of the Server instance.
3581	SetStrategy updates the scoring strategy for peers in the list, recalculating scores based on the new strategy.
3582	Add adds a peer to the list if it doesn't already exist.
3583	GetNew selects a new peer from the list, avoiding previously chosen ones. If none available, returns an error.
3584	Get selects a new peer or chooses from existing list, handling errors gracefully.
3585	Remove will delete a peer from the list based on hostPort.
3586	Copy creates a read-safe copy of the peer list as a map.
3587	Len returns the count of peers in the list after acquiring a read lock.
3588	exists checks if a peer exists by hostPort and returns its score and existence flag
3589	getPeerScore retrieves the peer score and existence status based on the host port.
3590	onPeerChange updates peer score if changed
3591	updatePeer updates the score of a peer in the list.
3592	getConn retrieves a connection from either inbound or outbound list based on index
3593	GetConnection retrieves or creates a connection for the peer.
3594	getConnectionRelay returns a connection or creates one if necessary, ensuring only one attempt at connection creation occurs simultaneously.
3595	canRemove checks if all connections are closed by verifying if the sum of inbound, outbound connections, and scCount equals zero
3596	addConnection adds a new connection to the Peer's list if it's active.
3597	removeConnection removes a specified connection from the peer's connections list.
3598	connectionCloseStateChange updates connection states, removes closed connections, and notifies on status change.
3599	Connect uses channel's Connect method to establish a connection.
3600	BeginCall initiates a remote procedure call using specified service and method names along with optional call options. It ensures proper configuration, validates inputs, retrieves a connection, and then begins the call, handling errors appropriately.
3601	NumConnections returns the number of inbound and outbound connections for the peer.
3602	NumPendingOutbound returns the total number of pending outbound connections for both inbound and outbound directions.
3603	isEphemeralHostPort checks if the host port is empty, equal to a specific value, or ends with ":0".
3604	Get retrieves the value for the specified key from the handler, returning an error if the key is invalid or not found.
3605	Set updates kvHandler's vals map with the given key-value pair and sets response header count.
3606	ClearAll clears all key-value pairs if authorized.
3607	NewChannel initializes a new communication channel with specified options.
3608	Serve starts listening on the given listener and handles incoming connections.
3609	ListenAndServe starts listening on a TCP port and serves requests.
3610	Register adds a handler to a sub-channel.
3611	PeerInfo returns the local peer information from the channel.
3612	GetSubChannel retrieves or creates a subchannel for a given service name and applies options.
3613	serve continuously accepts connections, retries on temporaries, and handles non-recoverables by logging or closing.
3614	Ping checks connectivity to a remote peer using the specified context and host port.
3615	StatsTags retrieves common stats tags from channel.
3616	Connect establishes a connection to a remote host using the given host port.
3617	exchangeUpdated updates peer info based on connection details
3618	updatePeer updates peer information and notifies subscribers.
3619	addConnection checks if connection is active and adds it to the channel if conditions are met.
3620	removeClosedConn deletes a closed connection from mutable connections map.
3621	connectionCloseStateChange updates channel state based on minimum connection state and calls onClosed if channel is closed.
3622	State returns the current state of the channel.
3623	NewReader retrieves a Reader from a pool, assigns it a new io.Reader, and resets its error state.
3624	Reads two bytes from the reader and returns a uint16 value in big-endian format. If an error occurs or fewer than two bytes are read, it returns zero.
3625	ReadString reads up to n bytes from the Reader and returns them as a string.
3626	ReadLen16String reads a string with length specified by a 16-bit unsigned integer
3627	Register registers Thrift and JSON on Behavior.
3628	Run executes a series of tests on a trace system, validating its behavior across multiple levels.
3629	Get retrieves or creates a new relayTimer from the pool.
3630	Put releases relayTimer unless verification is enabled.
3631	Starts a relay timer with specified duration and settings.
3632	Release marks a timer as released and puts it back into the pool
3633	NewLogger creates a logger using a writer and optional LogFields.
3634	NewTCPFrameRelay creates a TCP frame relay with specified destinations and modifier function.
3635	tallyTags gathers specific tag values from knownTags instance and returns them as a string map.
3636	Isolated updates peers for a SubChannel using a new sibling and strategy.
3637	Isolated checks if the sub-channel's peers have changed since it was last checked.
3638	Register method on SubChannel registers handler for specific method.
3639	GetHandlers retrieves the registered handlers for the subchannel.
3640	StatsTags returns channel stats with subchannel tag.
3641	registerNewSubChannel checks if a service exists and adds it if not; returns the SubChannel and a flag indicating addition.
3642	get locks the map, retrieves a SubChannel by serviceName, and returns it along with a boolean indicating its existence.
3643	getOrAdd retrieves a SubChannel for a given serviceName; if it doesn't exist, it registers a new one and returns it along with a flag indicating addition.
3644	Discover returns the host ports of peers for the given service name.
3645	Start method initializes listener and serves HTTP requests concurrently.
3646	listen sets up HTTP server and listens on specified ports.
3647	WriteRequest encodes HTTP request details into a TChannel argument buffer and writes them to the channel's writers.
3648	Parse HTTP request from TChannel arguments
3649	NewReadBufferWithSize creates a new buffer with a specified size.
3650	ReadByte reads a byte from the buffer or returns an error.
3651	ReadBytes reads up to n bytes from the buffer.
3652	ReadString reads n bytes as a string
3653	ReadUint16 reads two bytes from the buffer and returns a big-endian uint16 value.
3654	ReadUint32 reads a 4-byte big-endian unsigned integer from the buffer.
3655	ReadUint64 reads an 8-byte big-endian unsigned integer from the buffer.
3656	ReadUvarint reads an unsigned variable-length integer from the buffer.
3657	ReadLen8String reads a byte indicating length then reads that many bytes as a string
3658	ReadLen16String reads a length-prefixed string from buffer
3659	FillFrom reads data from a reader into a buffer.
3660	Wrap assigns buffer, initializes remaining data, resets error.
3661	WriteSingleByte writes a single byte to the buffer, handling errors and full buffers.
3662	WriteBytes writes a slice of bytes to the buffer if there's enough space available.
3663	WriteUint16 reserves space and writes a big-endian uint16 to the buffer.
3664	WriteUint32 writes a 32-bit unsigned integer to buffer.
3665	WriteUint64 writes an unsigned 64-bit integer to a buffer using big-endian byte order.
3666	WriteUvarint writes a variable-length unsigned integer to a buffer.
3667	WriteString writes a string to the buffer without making unnecessary copies.
3668	WriteLen8String writes an 8-bit length-prefixed string to w.
3669	WriteLen16String writes a string preceded by its length as a 16-bit unsigned integer.
3670	DeferByte will return a reference to the first byte in remaining buffer, advancing it. If buffer is full, it sets error and returns nil.
3671	DeferBytes defers n bytes and returns a reference to them.
3672	FlushTo writes buffered data to the specified writer.
3673	Reset clears the write buffer's remaining data and error
3674	Wrap assigns input byte slice to buffer and remaining attributes.
3675	Update updates the Uint16Ref with a new uint16 value using BigEndian encoding.
3676	Update updates the Uint32Ref value using BigEndian encoding.
3677	Update method updates the reference's value to big-endian encoded uint64.
3678	Update copies byte slice to reference if not nil.
3679	UpdateString updates the string content of BytesRef if it's not nil.
3680	ArgReader starts argument reading and returns current reader or error.
3681	finish updates checksum and flags based on more fragments presence.
3682	newWritableChunk creates a new writable chunk instance with given checksum and contents.
3683	writeAsFits writes bytes to chunk if it fits, updates checksum and size.
3684	newFragmentingWriter initializes a new fragmentingWriter instance
3685	ArgWriter initiates argument writing.
3686	BeginArgument starts a new argument or returns an error if already writing or at completion.
3687	Write writes data to a stream, handling fragmentation and errors.
3688	Flush completes the current chunk and fragment, sends them, and starts new ones
3689	Close method handles fragmenting writer closure logic.
3690	handleCallRes forwards frame to peer if there's no error.
3691	Arg2Reader extracts the second argument reader from an outbound call response.
3692	handleError processes error frames from the remote peer, logs them, and forwards or releases them accordingly.
3693	doneReading updates stats based on call success or failure, including retries and errors.
3694	newFragment creates a writable fragment for a message; initializes frame, writes message, adds checksum.
3695	flushFragment sends a frame or handles errors
3696	failed logs error and returns it or existing error.
3697	arg1Reader returns an ArgReader for the first argument.
3698	arg2Reader returns an ArgReader using specific pre-readers.
3699	arg3Reader returns an ArgReader for the third argument with pre-processing and completion hooks.
3700	argReader creates an ArgReader from the request contents based on the current state and updates the state before returning.
3701	recvNextFragment retrieves the next fragment of data, handling initial fragments and parsing messages from the peer.
3702	releasePreviousFragment releases resources associated with the previous fragment
3703	failed logs reader error and returns it.
3704	parseInboundFragment processes incoming data to create a readable fragment.
3705	NewContext creates a channel context with a timeout and wraps it.
3706	WithHeaders wraps the given context with specified headers.
3707	HealthCheck monitors connection using periodic pings; logs failures, closes on excessive errors.
3708	SetTimeout updates the Timeout field of ContextBuilder instance.
3709	AddHeader adds or updates a header in ContextBuilder.
3710	SetHeaders updates Headers and enables header replacement in ContextBuilder.
3711	SetConnectTimeout sets the ConnectTimeout field to d.
3712	SetRetryOptions updates the RetryOptions field of ContextBuilder.
3713	SetTimeoutPerAttempt updates RetryOptions.TimeoutPerAttempt on cb.
3714	SetParentContext assigns ctx to ParentContext field of cb.
3715	Build constructs a new ContextWithHeaders with appropriate timeouts and values.
3716	Header modifier for call options, setting various routing and format headers conditionally.
3717	Reads all data from r.reader into bs, handling errors gracefully.
3718	ReadJSON decodes JSON data from an io.Reader into a Go value. It handles empty input gracefully without attempting to decode.
3719	NewArgWriter creates a new ArgWriteHelper instance.
3720	Write implements Writer.Write. This method calls a closure to write bytes using the underlying writer.
3721	WriteJSON encodes data to JSON using writer.
3722	Register sets up an HTTP handler for pprof using TChannel.
3723	Count calculates the number of non-tombstone items in the relayItems.
3724	Get will return relayItem for given id if it exists; otherwise, false.
3725	Add adds a relay item to the map with the given ID after acquiring a lock.
3726	Entomb marks a relay item for deletion after a delay, preventing re-entombment.
3727	NewRelayer creates a new Relayer instance with specified Channel and Connection parameters.
3728	Relay processes a frame, handling non-call requests or forwarding them based on their type.
3729	Receive processes incoming frames, handles timeouts, and manages relay items.
3730	handleNonCallReq processes non-call requests using outbound or inbound maps based on frame type, remaps IDs, and handles received frames or failures.
3731	addRelayItem creates and manages a relay item based on originator status and adds it to appropriate collection with timeout settings.
3732	failRelayItem will mark a relay item as failed unless it doesn't exist or already timed out.
3733	WriteStruct serializes a Thrift struct to a writer using a protocol.
3734	ReadStruct reads data from reader into struct s using Thrift protocol.
3735	EnsureEmpty checks if an input reader contains any data after a specified stage; it returns an error if unexpected bytes are found or EOF is not reached.
3736	NewServer initializes a server with options, listens on a port, registers handlers, and handles advertising.
3737	Advertise sets up a Hyperbahn client and advertises it.
3738	handleCallReqContinue forwards peer frames or frees them on timeout.
3739	dispatchInbound handles inbound RPC calls, logs, reads method, sets stats, and manages cancellation.
3740	CallOptions gathers various options from the inbound call.
3741	Response returns the InboundCallResponse object, ensuring it reflects any request failures.
3742	SendSystemError handles system errors, setting state and releasing resources before sending error details over the connection.
3743	SetApplicationError marks the response as having an application error if the state is valid.
3744	Arg2Writer returns the second argument writer after writing the first argument.
3745	doneSending marks call completion, updates stats, records latency, cancels context, and shuts down if no errors.
3746	newState constructs a State object using parser Thrift data and predefined parseState mappings.
3747	rootType recursively resolves the root type based on includes and typedefs.
3748	checkInclude splits type name, updates new type, retrieves include, and returns updated state and type.
3749	isResultPointer checks if the given Thrift type corresponds to a basic Go type.
3750	goType returns the string of the state's Go type based on the Thrift type.
3751	goTypePrefix generates the Go type prefix based on the given Thrift type.
3752	NewContext creates a new context with the given timeout and returns it along with a cancel function.
3753	newIncomingContext creates a context for an incoming call with a specified timeout.
3754	CurrentCall retrieves the current incoming call from context parameters.
3755	New creates a new Rand instance
3756	Health checks the system's health and returns the result.
3757	Headers returns the request headers as a map. Nil is returned if no headers exist.
3758	ResponseHeaders returns the response headers from the context.
3759	SetResponseHeaders updates respHeaders in context if available; otherwise panics.
3760	Child creates a new context with copied headers.
3761	Wrap creates or wraps a ContextWithHeaders from a given context.
3762	WrapWithHeaders adds headers to a context and returns a new context with those headers.
3763	WithoutHeaders removes headers from a context.
3764	Notify handles error broadcasting once per instance.
3765	forwardPeerFrame handles frame forwarding with prioritized error handling
3766	recvPeerFrame receives and processes a peer frame, handling timeouts, cancellation, and other errors.
3767	recvPeerFrameOfType reads a peer frame and returns it if it matches the expected type, or an error otherwise.
3768	shutdown will safely close mex if not already closed.
3769	newMessageExchangeSet creates a new message exchange set with a logger and name.
3770	addExchange adds a message exchange if the set isn't shutting down and the message ID is unique.
3771	newExchange creates a new message exchange within a set with logging and error handling.
3772	deleteExchange removes message exchange by ID and distinguishes between found and timed out cases.
3773	removeExchange removes a message exchange by ID, logs debug info, handles cleanup actions.
3774	expireExchange removes a message exchange due to timeout/cancellation/blackhole and records it.
3775	forwardPeerFrame forwards frames to appropriate exchanges, logging errors if necessary.
3776	copyExchanges creates a copy of message exchanges if not shutdown, returning a flag and the copied exchanges.
3777	stopExchanges handles shutting down message exchanges, logging errors, and notifying blocked callers.
3778	NewFrame creates a new frame with specified capacity for payloads.
3779	ReadBody reads the body of a frame from a reader, copying the header and parsing it into a typed struct. If there's a payload, it reads the specified number of bytes; otherwise, it returns nil.
3780	WriteOut encodes frame header and data to writer.
3781	CanRetry determines if an error can be retried based on RetryOn setting and error code. Returns false for RetryNever or BadRequest.
3782	HasRetries checks if retries are allowed for the given error based on the request state's retry options.
3783	SinceStart calculates duration since request started or returns fallback if RequestState is nil.
3784	AddSelectedPeer adds the host and port to the selected peers set.
3785	RunWithRetry executes a function with retries based on options.
3786	ChecksumSize returns the size of the checksum based on the type.
3787	New creates a new checksum from the pool and resets it.
3788	parseTemplates loads and returns a list of templates.
3789	NewStringSliceFlag creates a flag for a slice of strings with specified name and usage.
3790	withStateFuncs updates template's functions with goType from td.
3791	IntrospectOthers returns a map of service to channel info for all other channels based on given options.
3792	ReportInfo generates channel info based on options.
3793	IntrospectState retrieves runtime state information for peers based on options.
3794	IntrospectState returns a map of SubChannelRuntimeState for each subchannel in subChMap, including service name, isolation status, isolated peers, handler type, and methods.
3795	IntrospectState retrieves the runtime state of a peer, including host port, connection states, chosen count, and SC count.
3796	IntrospectState retrieves runtime state of a connection.
3797	IntrospectState returns runtime state of the relayer.
3798	IntrospectState retrieves the state of relay items based on given options and name.
3799	IntrospectState returns the runtime state of a message exchange set, optionally including details about each exchange.
3800	NewContext creates a new tchannel context with a timeout and wraps it with headers, returning the context and cancel function.
3801	Send response based on error conditions.
3802	Wrap creates a TChannel handler that reads arguments, handles them using the provided handler, and writes the response or error back.
3803	span's tracer injects context into zipkin format.
3804	startOutboundSpan starts an outbound RPC span with tracing information.
3805	intToIP4 converts a 32-bit integer to its corresponding IPv4 address representation.
3806	servicePeerToHostPort converts peer info to host:port format
3807	NewStatsdReporter initializes a buffered statsd client and reporter.
3808	UnmarshalText converts text to Terms of Service value.
3809	Push adds peerScore to heap
3810	Pop removes and returns the minimum element from peer heap.
3811	updatePeer adjusts a peer's score in a heap structure.
3812	removePeer removes a peer from the heap based on its score index.
3813	pushPeer will add a peer score with randomized order to the heap.
3814	addPeer adds a peer score to the heap and swaps it with a random element.
3815	NewClient initializes a new TChanClient using the provided channel and service options.
3816	Add will add a peer to the list if it doesn't already exist, ensuring no duplicates.
3817	Get will return peer for given hostPort if exists, otherwise returns nil and false.
3818	WithTimeout returns an Option to set the timeout duration on options.
3819	Methods returns sorted list of service's methods.
3820	InheritedMethods returns a sorted list of inherited methods from extended services.
3821	Arguments returns a list of fields representing method arguments.
3822	ArgList constructs a comma-separated list of argument declarations.
3823	CallList constructs a list of arguments for method invocation using context and request struct fields.
3824	RetType returns the method's return type or error if no return type exists.
3825	WrapResult modifies response variable based on method's return type.
3826	ReturnWith formats response and error names if return exists.
3827	Declaration constructs a string representation of a field's type and name.
3828	startIdleSweep initializes a new idle sweep instance with channel options.
3829	idleSweep.start initializes the idle connections poller if not already started.
3830	Stop stops the idle connection poller if it has started.
3831	ResolveWithGoPath searches for a file using GOPATH candidates and returns its path or an error if not found.
3832	setExtends resolves service extends relationships within the given state map.
3833	These helper methods ensure thread safety when registering handlers in a map.
3834	NewClient initializes a client based on provided hosts and options.
3835	ListenIP retrieves the IP address to listen on from available network interfaces. If no suitable interface is found, it returns an error.
3836	Close closes the listener and waits for all references to finish before returning.
3837	Read arguments from a channel reader
3838	WriteArgs sends arguments over a TChannel call, reads responses, and returns them.
3839	Call initiates a remote procedure call using the specified channel and parameters, writing arguments and handling the response or error.
3840	CallSC initiates a call to a sub-channel and sends arguments, returning response bytes and error.
3841	CallV2 makes a remote call using TChannel with provided arguments and returns the response.
3842	NewRealRelay creates a new Relay instance using provided services.
3843	NewServer initializes a TChannel server with metadata handling and registration.
3844	RegisterHealthHandler sets a wrapped handler for health checks using metaHandler.
3845	Handle processes incoming RPC calls by routing them to appropriate handlers.
3846	MetricsKey returns a metrics key based on the error code.
3847	NewSystemError creates a new SystemError with the given code and message.
3848	NewWrappedSystemError wraps an error with a system error if possible, otherwise creates a new one.
3849	SystemError's Error method returns a formatted string representation of the error.
3850	GetContextError maps specific context errors to custom errors, returning the original error otherwise.
3851	GetSystemErrorCode extracts system error code from generic error
3852	ping sends a ping request and waits for a response.
3853	handlePingRes processes incoming ping responses, forwarding them or logging warnings if unexpected.
3854	handlePingReq processes ping requests, sends pong responses, or handles protocol errors if the connection is not active.
3855	SendSystemError sends an error message over a connection.
3856	connectionError handles connection issues by logging them, stopping health checks, and notifying exchanges.
3857	withStateLock ensures exclusive access to state changes by acquiring a lock before executing a function and releasing it afterward.
3858	withStateRLock acquires a read lock on stateMut and executes function f safely.
3859	readFrames reads frames from conn using opts.FramePool, handling errors and updating last activity.
3860	writeFrames manages sending frames over a connection, logging, updating activity, and handling errors or stop signals.
3861	hasPendingCalls checks if there are any pending inbound or outbound calls or if the relay cannot close.
3862	checkExchanges manages the state transitions of a connection based on various conditions
3863	closeNetwork closes the underlying network connection and stops health checks.
3864	getLastActivityTime retrieves the last activity time from the connection.
3865	Validate checks each method in the service for errors.
3866	logFailedRegistrationRetry logs registration failures; warns after too many retries.
3867	initialAdvertise retries sending advertisements until successful or max attempts reached.
3868	Service extracts a service name from a payload using indices.
3869	TTL calculates the time-to-live duration from the payload.
3870	SetTTL updates the TTL in Payload using big-endian encoding.
3871	finishesCall determines if the call has finished based on message type and payload flags.
3872	Flat combines multiple string slices into a single sorted slice with unique values.
3873	Map applies a function to each string in PlatformStrings, collecting results and errors.
3874	MapSlice applies a function to slices within various maps and collects errors.
3875	GetProtoConfig retrieves ProtoConfig from config.Extensions.
3876	MapExprStrings applies a transformation to all string expressions within a Bazel expression tree.
3877	FlattenExpr processes expressions to extract and squash platform strings.
3878	makePlatformStringsExpr constructs a bzl.Expr based on platformStringsExprs, using select and concatenation operations.
3879	String returns a formatted OS_Arch string or individual component based on non-empty values.
3880	Find searches up from a given directory for a specific file, returning the first matching directory or an error if not found.
3881	Run Gazelle with specified mode and directories, capturing output.
3882	walks through the directory tree to restore build files
3883	FixLoads updates rule.File based on known Loads, ensuring correct symbol references and removing unused loads.
3884	fixLoad updates a rule's load based on given kinds and known kinds.
3885	newLoadIndex calculates the next available index based on existing rules and their kinds.
3886	removeLegacyGoRepository deletes legacy Go repository definitions from a file.
3887	Compare will determine the lexicographical order between two version numbers.
3888	ParseVersion parses the given version string into a Version object, handling optional suffixes and ensuring all components are non-negative integers.
3889	EmptyFile creates a new File object with the given path and package.
3890	LoadWorkspaceFile reads a file at a given path and loads its workspace data using the specified package name.
3891	LoadMacroFile reads macro data from the specified path.
3892	EmptyMacroFile creates a new macro file at the specified path and loads its data.
3893	LoadData parses build data from a file and returns a File object.
3894	LoadWorkspaceData parses a workspace file at a given path and package, returning a File object with scanned AST data.
3895	LoadMacroData parses Bazel macro data from the given path and returns a File object.
3896	ScanAST scans the AST of a Bazel file.
3897	ScanASTBody scans a Bazel file's AST body, identifying rules, loads, and functions.
3898	MatchBuildFileName searches directory for file names, returns full path if found.
3899	SyncMacroFile updates or appends a function statement from one file to another.
3900	MacroName retrieves the macro's name or returns an empty string if not found.
3901	Sync processes file loads and rules, updating statements based on insertions and deletions.
3902	Format reads file content, syncs changes, then formats using bzl library.
3903	Save saves the file's contents formatted to the specified path with permissions 0666.
3904	HasDefaultVisibility checks if any file rule specifies default visibility.
3905	NewLoad creates a Load object with the specified module name and initializes symbols map.
3906	Symbols retrieves sorted symbols from Load instance.
3907	Has checks if a symbol exists in the load's symbols map.
3908	Add symbol to symbols map if not exists.
3909	Remove deletes a symbol from the symbols map and sets updated flag to true.
3910	Insert inserts Load at specified index and marks it as inserted.
3911	NewRule creates a new Rule instance with the specified kind and name.
3912	SetKind updates Rule's kind and marks it as updated.
3913	AttrKeys returns a sorted slice of attribute keys based on priority and lexicographical order.
3914	Attr retrieves the RHS expression for the given key
3915	AttrString retrieves the value of a string attribute from a Rule.
3916	AttrStrings retrieves string attributes from a rule based on the given key.
3917	DelAttr removes an attribute from Rule and marks it as updated.
3918	SetAttr updates or adds attribute with given key and value in Rule.
3919	PrivateAttrKeys returns a sorted list of private attribute keys from the rule.
3920	SetPrivateAttr updates private attribute key with value.
3921	Insert inserts the rule into the file's statement list.
3922	IsEmpty checks if a rule has no attributes matching non-empty ones from info.
3923	CheckInternalVisibility adjusts visibility based on internal path segments.
3924	New creates a new Label instance with specified repository, package, and name.
3925	Rel adjusts a label based on repository and package context.
3926	Equal checks if two labels are identical based on their properties.
3927	Contains checks if the label's repository and package prefix match another label's, ensuring neither is relative.
3928	generateFromPath walks directory tree, processes .proto files, and outputs package information
3929	shouldCall determines if a relationship call should be made based on the operation mode and relationships to update.
3930	shouldUpdate determines if an update should occur based on the relationship, mode, parent flag, and related updates.
3931	shouldVisit checks whether a relationship should be visited based on the update mode and relationships to be updated.
3932	SquashRules merges two Rule objects, resolving conflicts and appending comments.
3933	Connect to Unix socket, retry if necessary, copy output, log duration.
3934	UpdateRepo fetches and returns repository details.
3935	NewRemoteCache initializes a RemoteCache instance with repositories, setting up caches for roots, remotes, heads, and mods, and returns it along with a cleanup function.
3936	Remote retrieves the remote and VCS information for a given root directory.
3937	get retrieves value from remoteCacheMap, returns it along with presence flag and error.
3938	ensure will retrieve or compute and cache a value using a loader function.
3939	RelBaseName extracts relative base name from paths, prioritizing input, prefix, and root defaults.
3940	Clone creates a deep copy of the configuration.
3941	IsValidBuildFileName checks if a config contains a valid build file name.
3942	check returns true if any tagLine group matches the given config, OS, and architecture.
3943	fileNameInfo extracts file information such as name, extension, and build attributes from a given path.
3944	otherFileInfo retrieves file info, reads tags, and updates them if successful.
3945	protoFileInfo extracts and processes FileInfo from a given path and protoInfo.
3946	AddRule adds a new rule to the index, resolving imports and ensuring uniqueness.
3947	collects embeds from rules and builds import index
3948	builds an index of rules by imported packages
3949	IsSelfImport checks if a label imports itself or its embeds.
3950	applyKindMappings updates LoadInfo based on MappedKind, merging or appending as needed.
3951	appendOrMergeKindMapping updates or adds a kind mapping to the list.
3952	RuleName returns the first valid identifier from input names or "root_proto".
3953	buildPackages constructs packages from proto files based on configuration options and modes.
3954	selectPackage retrieves a single Package from a map based on directory and relationship, or returns an error if multiple packages are found.
3955	generateProto creates a new rule for a proto_library based on the given ProtoConfig and Package. It sets attributes like srcs, private attrs, visibility, and import prefixes.
3956	generateEmpty finds proto_library rules without known sources.
3957	ImportRepoRules reads a dependency lock file, parses it using appropriate parser, sorts repositories, and generates rules for each repository.
3958	MergeRules combines generated and existing rules into updated destination files.
3959	GenerateRule creates a new rule with attributes from the given repository.
3960	FindExternalRepo constructs a path to an external repository using the given repoRoot and name, resolves any symbolic links, checks if the resulting path is a directory, and returns it or an error otherwise.
3961	ListRepositories processes a workspace to list repositories and their names associated with files.
3962	migrateLibraryEmbed updates library attributes to embed in Go rules.
3963	migrateGrpcCompilers updates rules to replace 'go_grpc_library' with 'go_proto_library' and sets compilers attribute.
3964	squashCgoLibrary converts cgo_library to go_library.
3965	removeLegacyProto deletes legacy proto rules and filegroups if not fixed.
3966	removeLegacyGazelle removes 'gazelle' from legacy loads and deletes empty ones.
3967	selectPackage selects a buildable package based on configuration and directory.
3968	AddBuiltin associates a resolver with a kind name in metaResolver.
3969	Updates mapped kinds for package relation
3970	Resolver maps rule to resolver using kind.
3971	sortExprLabels sorts string expressions within a list expression based on their comment positions.
3972	checkRulesGoVersion verifies the compatibility of Gazelle with the installed version of rules_go. It logs a warning if the version is outdated or not found.
3973	Initialize and add tag to generic tags map.
3974	setBuildTags updates build tags based on input string.
3975	splitValue splits a comma-separated string into trimmed parts.
3976	copyGoModToTemp copies go.mod file to a temporary directory and returns path.
3977	findGoTool determines the path to the 'go' executable, prioritizing GOROOT if set, and adjusting for Windows executables.
3978	isBuildable checks if the Go package has a buildable first file or non-empty proto sources.
3979	startServer launches a new instance of the server process.
3980	watchDir watches a directory tree, records file creations, and handles errors using a filesystem watcher.
3981	listDirs walks a directory tree and collects all directories, returning them along with any errors encountered.
3982	shouldIgnore checks if a file path should be ignored based on certain conditions like being under 'tools/' or named '.git', 'BUILD', or 'BUILD.bazel'.
3983	This method ensures thread safety when updating the dirSet map.
3984	getAndClearWrittenDirs retrieves then clears a set of written directories.
3985	CombineHandlers merges multiple HTTP request handlers into a single handler.
3986	VerifyContentType ensures request's Content-Type header matches expected value.
3987	VerifyMimeType checks if request's Content-Type matches expected MIME type.
3988	VerifyBasicAuth checks HTTP Basic Auth credentials.
3989	VerifyJSONRepresenting ensures JSON data matches expected format.
3990	VerifyFormKV generates a middleware to verify form key-value pairs in HTTP requests.
3991	RespondWithProto creates an HTTP handler that responds with a protobuf-encoded message and sets optional headers.
3992	RegisterFailHandlerWithT sets global fail handler based on input.
3993	EventuallyWithOffset creates an asynchronous assertion that waits for a condition to be met with customizable timeout and polling intervals, using an optional offset.
3994	asyncassertion.New creates a new AsyncAssertion for consistent checking with specified timeout and polling intervals, including an optional offset.
3995	Expect creates a new Assertion object using the actual value and testing support functions.
3996	Eventually waits for a condition to be true using specified intervals or defaults.
3997	Consistently checks that an assertion holds over time with specified intervals.
3998	TimeoutCloser wraps a closer with a timeout.
3999	TimeoutReader applies a timeout to a reader
4000	TimeoutWriter wraps a writer with a timeout.
4001	Nest recursively nests errors within an AggregateError or NestedError structure, appending paths accordingly.
4002	SetMockService initializes mock services for caching, planning, platform, image, team, quota, cluster, service broker, and catalog cache. These mocks are then assigned to servicemanager's respective fields.
4003	FindMachineByIdOrAddress retrieves a machine by ID or address from the database.
4004	Write method locks mutex, writes data, flushes response if possible, and handles errors.
4005	Wrap Hijack method from ResponseWriter interface; return net.Conn and ReadWriter or error.
4006	ListDeploys retrieves deploy data based on filters and pagination.
4007	AddAll adds routes to DelayedRouter for multiple methods.
4008	samlRequestTimeout extracts the request timeout from the given scheme data as an integer.
4009	RegisterHandler registers a handler for a specific path and method using version "1.0".
4010	RegisterHandlerVersion registers a new handler with version, path, method, and handler.
4011	Check validates names against checkers, collecting results on success or failure.
4012	DiscoverRepositoryPath locates the .git directory within dir or returns an error if not found.
4013	OpenRepository checks if a given path points to a Git repository and returns it or an error if not found.
4014	Get remote URL from repository configuration file.
4015	List returns all apps matching the given selector.
4016	Apps creates a new AppNamespaceLister for the specified namespace.
4017	List retrieves all apps matching the namespace and selector.
4018	StreamJSONResponse streams JSON response data to writer until done or error occurs.
4019	DropDatabase removes a database from storage.
4020	Collection retrieves a Collection instance for the given name using the session's database.
4021	Sets logger for Target instance
4022	Error logs an error message using the target's logger.
4023	Errorf logs formatted error messages; includes stack traces for errors implementing withStack interface.
4024	Fatal logs a critical message and exits if logger is not nil.
4025	Debugf logs debug messages safely by acquiring a read lock on the target's mutex.
4026	GetStdLogger retrieves logger from Target.
4027	Namespace retrieves the cluster's namespace or default to "tsuru".
4028	recreateContainers restarts containers on specified nodes.
4029	checkProvisioner verifies if the provisioner is set to Docker or empty; otherwise, it returns nil.
4030	checkDocker verifies Docker configuration and performs various checks before returning an error if any condition fails.
4031	checkScheduler checks configuration settings related to Docker servers and segregation, returning warnings or errors as appropriate.
4032	checkRouter verifies Docker router configuration; returns error if misconfigured or uses deprecated settings.
4033	Available checks if Unit status is started, starting, or error.
4034	Get retrieves a provisioner by name
4035	Registry collects provisioners from functions.
4036	Error method returns formatted error message based on Err and Reason fields.
4037	validateVersion checks if the current version meets or exceeds the minimum supported version.
4038	ReadTarget retrieves the current Tsuru target or reads it from a configuration file.
4039	WriteTarget saves the given string to a file in the user's directory.
4040	WriteOnTargetList checks if a target label exists and appends it to a file if not.
4041	Conn initializes a storage connection using database configuration.
4042	Apps creates and returns a collection with a unique index on the "name" field.
4043	PoolsConstraints initializes and returns a collection with a unique index on specified fields.
4044	Users method initializes and configures a collection for user data with a unique email index.
4045	SAMLRequests creates a collection with an index on id.
4046	AppLogCollection retrieves a log collection based on the given application name.
4047	CreateAppLogCollection initializes and returns a log collection.
4048	LogsCollections retrieves all logs collections from storage.
4049	ArchiveBuildCmds generates build commands for an app to be archived.
4050	ArchiveDeployCmds generates deployment commands for an app using an archive URL.
4051	DeployCmds generates deploy-only command for app.
4052	Construct a command list for an agent using app details.
4053	newApps creates an apps instance with the given client and namespace.
4054	Commit saves Docker container as image, updates tags, and pushes to repository.
4055	processTags filters out empty and duplicate tags from a list.
4056	aggregateContainersBy aggregates containers based on a matcher and returns a map of host addresses to counts.
4057	chooseNodeToAdd selects a node to add based on criteria.
4058	chooseContainerToRemove selects a node based on min/max criteria and removes a container from it.
4059	Get retrieves a Router based on its name.
4060	Default returns the name of the default router or an error if not found.
4061	Store updates or inserts app router entry in collection.
4062	TsuruV1 returns a fake TsuruV1 interface.
4063	Tsuru returns a fake TsuruV1 interface for testing.
4064	NewAppInformer creates a new application informer.
4065	NewFilteredAppInformer creates a filtered application informer.
4066	Watch invokes a watch action on fake applications with given options.
4067	Patch modifies the specified Tsuru app resource using the given patch type and data.
4068	NewSharedInformerFactory creates a new shared informer factory with a client and default resync duration, filtering for all namespaces.
4069	NewFilteredSharedInformerFactory initializes a new shared informer factory with specified client, namespace, resync duration, and list options tweaking function.
4070	Proxy method returns error indicating service proxy unavailability.
4071	UnbindUnit removes a service binding from a unit.
4072	Create validates a plan's fields before inserting it into storage.
4073	Delete removes the specified plan from storage.
4074	ensureDefault checks if default plan exists, if not, it creates one using configuration settings.
4075	DeleteInstance unbinds and removes a service instance.
4076	ToInfo converts service instance to detailed info.
4077	Update updates service instance details, validating team ownership, processing tags, and executing actions.
4078	BindApp binds the specified application to the service instance, handling database, endpoint, environment, and unit bindings.
4079	BindUnit binds a unit to a service instance and updates the database accordingly.
4080	UnbindApp removes binding between service instance and application.
4081	Get service instance's production client status.
4082	ProxyInstance routes requests to a service instance's endpoint after validation.
4083	Inc increments the quota for an application.
4084	Update application quota based on input limit.
4085	Set updates the quota usage for an application, checking limits before saving.
4086	Get retrieves the quota information for a specified application name from storage.
4087	RemoveImage removes an image from a Docker registry.
4088	RemoveAppImages deletes Docker images for a given app from a registry.
4089	Create adds a platform with validation and handles errors by rolling back changes.
4090	ListPlatform returns all or enabled platforms based on the flag.
4091	FindByName retrieves a platform by its name or returns an error if invalid.
4092	Update can modify platform options, handle file content, update images, and manage application states based on input parameters.
4093	Remove deletes a platform and its associated resources.
4094	Rollback updates platform image, sets update flag for associated apps
4095	GetPoolByName retrieves a pool by name from the database.
4096	Manager retrieves a RepositoryManager based on configuration or defaults to a no-op manager.
4097	Register adds a repository manager under a given name.
4098	bindSyncer.start initializes the syncer if not already started, sets default interval, starts goroutine for periodic syncing, handles shutdown signal.
4099	Shutdown stops the bindSyncer gracefully or cancels on context expiration.
4100	GetForProvisioner retrieves the appropriate builder based on the provisioner's type.
4101	get returns a Builder instance based on the given name.
4102	Registry returns all registered builders.
4103	RegisterQueueTask registers a task to the queue using the provided provisioner.
4104	Apps creates an informer for managing application resources.
4105	DeepCopy creates a deep copy of the App instance.
4106	DeepCopy creates a deep copy of AppList if it's not nil.
4107	DeepCopy creates a deep copy of AppSpec.
4108	LogWriter writes byte data to a channel if not closed; otherwise, it writes directly.
4109	ResetPassword updates user password using valid token, sends new password asynchronously, and marks token as used
4110	addKnownTypes registers custom types with the Kubernetes scheme.
4111	Register appends Shutdownable to registered list.
4112	Do initiates shutdown processes concurrently and waits for completion or cancellation.
4113	ListImagesOrDefault returns images or a default image name if not found.
4114	MigrateAppsCRDs provisions applications across Kubernetes pools using the specified provisioner.
4115	Register registers a migration function under a given name.
4116	RegisterOptional registers a migration function optionally.
4117	Run executes commands based on provided arguments.
4118	Units retrieves the list of provisioned units for the application.
4119	MarshalJSON serializes app details including name, platform, teams, units, repository, plan, routers, and other metadata into JSON format.
4120	AcquireApplicationLockWait attempts to acquire a lock on an application with a timeout, retrying until successful or timed out.
4121	ReleaseApplicationLock attempts to release a lock on an application name up to three times with increasing delays between attempts, logging any errors encountered.
4122	GetByName retrieves an app by its name from the database.
4123	AddUnits adds new units to the application if possible, handling various statuses and logging.
4124	SetUnitStatus updates the status of a unit by matching its name prefix and invoking the appropriate provisioner method.
4125	UpdateNodeStatus updates node status based on data, handling errors and provisioning units accordingly.
4126	available checks if any unit is available in the application.
4127	Grant team access to app by updating database and granting permissions to users.
4128	Revoke removes a team from an application and updates permissions accordingly.
4129	GetTeams retrieves teams based on their names from the service manager.
4130	setEnv updates the application's environment variables and logs public ones.
4131	getEnv retrieves an environment variable by name from the application's Env map, returning an error if not found.
4132	validateNew checks if the App's name is valid before calling validate.
4133	validate ensures App has valid pool and plan configurations.
4134	InstanceEnvs retrieves environment variables for a specific service and instance.
4135	Run command, log output, handle errors.
4136	GetUnits retrieves all bind Units from the application.
4137	GetUUID generates or retrieves UUID for the application
4138	Envs combines application and service environment variables into a single map.
4139	SetEnvs updates application environment variables and restarts if necessary.
4140	UnsetEnvs removes specified environment variables from the application and updates the database.
4141	AddCName adds CNAMEs to app via pipeline actions.
4142	Log records messages to the database with details like date, source, and application name. It handles multiple messages and ensures connection closure.
4143	LastLogs retrieves the last logs based on the specified number and filter.
4144	Retrieve filtered apps based on query and status.
4145	Swap exchanges two applications' details and updates their CNAMEs accordingly.
4146	Start initializes and runs a specified process or app, logs the action, and handles provisioning errors.
4147	GetDbDriver retrieves the database driver by its name
4148	GetCurrentDbDriver retrieves the database driver based on configuration or defaults.
4149	NewForConfig creates a new clientset using a given configuration.
4150	GetAppFromUnitID fetches application details based on unit ID from docker provisioner.
4151	NewPipeline creates a new Pipeline from the given actions with isolated results.
4152	Result retrieves the final result from the pipeline actions.
4153	DecodeJsonPayload reads JSON payload from request body and decodes it into given struct.
4154	UrlFor constructs a URL for a given path with optional query parameters.
4155	GetCorsInfo determines CORS settings based on request headers.
4156	CorsMiddleware adds Cross-Origin Resource Sharing support to HTTP handlers.
4157	RecorderMiddleware records HTTP responses.
4158	WriteHeader updates statusCode and wroteHeader fields if not already written.
4159	MakeRouter initializes a router with given routes and starts it.
4160	AppFunc handles requests by finding routes, setting parameters, and executing handlers.
4161	escapedPath extracts the base path from a URL by removing the query string
4162	escapedPathExp validates and escapes a URL path expression
4163	Router initializes routing table from routes list.
4164	ofFirstDefinedRoute returns the first defined route match from a list of trie matches based on index.
4165	findRouteFromURL locates and returns a matching route from a URL.
4166	ContentTypeCheckerMiddleware checks content type and charset before calling the next handler.
4167	CloseNotify returns a channel that receives a value when the underlying connection has gone away.
4168	MiddlewareFunc wraps a handler, logs access using Apache format.
4169	executeTextTemplate executes a text template using Apache middleware and returns the result.
4170	RemoteUser retrieves the remote user from the environment.
4171	ApacheQueryString returns the query string from the URL.
4172	StartTime retrieves the START_TIME from the environment or returns nil.
4173	ApacheRemoteAddr extracts and returns the IP address from the remote host.
4174	ResponseTime retrieves the elapsed time from the environment or returns nil.
4175	MiddlewareFunc wraps a handler, indenting JSON responses.
4176	EncodeJson will marshal the given value to JSON with indentation using the writer's prefix and indent settings.
4177	WriteHeader sends HTTP header with status code and marks it as written.
4178	MakePath constructs a URL path using placeholders from a parameter map.
4179	RecoverMiddleware recovers from panics in handler functions, logs the error, and returns an appropriate HTTP response.
4180	WrapMiddlewares applies middleware functions to a handler in reverse order.
4181	GzipMiddleware wraps a handler to enable or disable GZIP compression based on client request headers.
4182	`WriteHeader sets Vary and Content-Encoding headers before calling ResponseWriter's WriteHeader.`
4183	Wrap Hijack method from ResponseWriter interface. Return net.Conn, bufio.ReadWriter, and error.
4184	Write compresses or writes data to the response based on conditions.
4185	MiddlewareFunc sets up basic authentication for HTTP requests.
4186	printDebug recursively prints a tree-like structure with indentation based on the level.
4187	AddRoute inserts a new route into the trie structure.
4188	printDebug prints a debug representation of the trie.
4189	FindRoutes searches for routes matching httpMethod and path, returning matched routes with parameters.
4190	FindRoutesAndPathMatched searches for routes matching httpMethod and path, returning matched routes and whether any path was matched.
4191	FindRoutesForPath retrieves routes matching the given path.
4192	Use appends middleware functions to the API's stack.
4193	MakeHandler constructs an HTTP handler from middleware and an application function.
4194	MiddlewareFunc adds X-Powered-By header to responses.
4195	StatusMiddleware logs and aggregates HTTP request statistics.
4196	GetStatus calculates and returns comprehensive status information including uptime, response counts, and averages.
4197	MiddlewareFunc will wrap the handler to support JSONP if the callback name is provided.
4198	Flushes the JSONP response writer, ensuring headers are set before flushing.
4199	MiddlewareFunc logs request details using JSON format.
4200	Fetch retrieves S3 object data, checks ETag, and handles compression.
4201	sanityCheck verifies if either new or legacy environment variable is set and prints its value.
4202	release manages listener closure and ensures timely shutdown or forced termination based on timeout.
4203	fetchLoop continuously fetches data with a minimum interval.
4204	Master forks loop restarts command.
4205	Init initializes a File instance; sets default Interval if needed; updates hash on error.
4206	Fetch retrieves a reader for the file if it has changed since the last fetch.
4207	Fetch retrieves data from HTTP URL, checks headers, and returns io.Reader or error.
4208	NewConfig initializes and configures a sarama Config object with specific settings.
4209	Validate checks and adjusts Sarama configuration settings for Kafka consumer groups, ensuring proper values and handling unsupported configurations gracefully.
4210	NewClient initializes a Kafka client with given addresses and configuration.
4211	AsyncClose ensures PartitionConsumer closes once.
4212	Close asynchronously closes the consumer.
4213	MarkOffset updates partition consumer's state if the new offset is greater.
4214	NewConsumer creates a new Kafka consumer from given addresses, group ID, topics, and configuration.
4215	MarkOffsets locks stash, iterates offsets, marks consumer offsets, then deletes processed entries.
4216	ResetOffset updates the consumer's offset for a specific message.
4217	Close safely shuts down the consumer.
4218	hbLoop handles heartbeats for a consumer. It stops on errors or signals.
4219	twLoop runs a loop that periodically checks for new topics and handles them accordingly until stopped or dying.
4220	cmLoop manages consumer offset commits on a ticker or stop signal.
4221	fetchOffsets retrieves Kafka consumer offsets for specified topics and partitions.
4222	Marks partition offset with metadata
4223	Resets partition offset based on consumer message details
4224	Offsets returns the offsets from the stash.
4225	Actual retrieves the current state of the cluster, updating it based on the provided immutable state and caching the result.
4226	Expected calculates the expected cluster state based on the current group configuration.
4227	Delete will remove the instance group and associated resources
4228	GetReconciler creates a reconciler based on the cloud provider in the given cluster configuration.
4229	GetVersion retrieves the current version details of the application
4230	GetVersionJSON returns a JSON string representation of the application version.
4231	Actual updates the resource group based on the immutable cluster state and returns the updated cluster and resource.
4232	Expected generates a cluster resource based on the given cluster configuration.
4233	CreateCmd defines a Cobra command to create a Kubicorn API model.
4234	NewUbuntuCluster creates a new Kubernetes cluster on Azure with master and node nodes.
4235	ProviderConfig parses and returns the control plane provider configuration from the cluster API spec.
4236	SetProviderConfig marshals and updates Cluster's ProviderConfig.
4237	MachineProviderConfigs parses provider configurations from machine sets and returns them as structured data.
4238	SetMachineProviderConfigs updates machine sets with provider configurations.
4239	NewCluster creates a new Cluster with the specified name and initializes its API and control plane components.
4240	DeployControllerCmd sets up a Cobra command for deploying a controller with options.
4241	NewRetrier creates a new Retrier instance with specified retries, sleep seconds, and retryable conditions.
4242	RunRetry manages retries with a timeout and signal handling, returning success or failure.
4243	MustGenerateRandomBytes returns a slice of random bytes of specified length; panics if generation fails.
4244	ExplainCmd returns a cobra command to explain cluster state.
4245	TimeOrderedUUID generates a UUID based on current UTC time.
4246	GetConfigCmd constructs a Cobra command for managing Kubernetes configurations, handling name arguments and invoking runGetConfig.
4247	Run annotated task with options and log activity.
4248	ListCmd creates a Cobra command to list available states.
4249	NewUbuntuCluster creates a new Ubuntu cluster configuration with specified control plane and machine sets.
4250	EditCmd defines a Cobra command for editing cluster states.
4251	RemoveKey deletes the specified SSH public key from the agent.
4252	RemoveKeyUsingFile deletes a key using its public key file.
4253	Actual updates cluster state based on firewall rules.
4254	Expected generates a new cluster configuration based on the current firewall rules and immutable state.
4255	Apply applies changes to firewall resources based on actual and expected states
4256	Delete deletes a firewall resource from the cluster.
4257	Define and return a Cobra command for deleting Kubernetes clusters.
4258	NewStateStore creates a state store based on the specified options.
4259	Commit serializes cluster data to JSON, writes it to Git, adds a remote, and commits the changes.
4260	ApplyCmd returns a cobra command to apply a cluster resource to a cloud.
4261	ExpandPath expands the given path to its absolute form, handling relative paths like '.' and '~'.
4262	CompletionCmd creates a Cobra command for generating shell completion code.
4263	AdoptCmd creates a new Cobra command for adopting a Kubernetes cluster into a Kubicorn state store.
4264	StrEnvDef returns environment variable value or default if not set
4265	IntEnvDef retrieves an integer environment variable or returns a default value if not set or invalid.
4266	BoolEnvDef returns def if the environment variable env is not set or has an invalid boolean value; otherwise, it returns the parsed boolean value.
4267	readFromFS reads a file from the filesystem at the given path, handling tilde expansion and returning its contents as a string.
4268	VersionCmd creates a Cobra command for verifying Kubicorn's version.
4269	NewSignalHandler sets up a handler to manage signal interruptions and terminations within a specified timeout period.
4270	Register starts a goroutine to handle signals and timeouts.
4271	NewUbuntuCluster creates a new Kubernetes cluster on ECS using Ubuntu nodes. It configures master and worker roles with specific firewall rules and bootstrap scripts.
4272	BeginningOfHour returns the start time of the current hour.
4273	BeginningOfDay returns the start of the day for the given Now instance.
4274	BeginningOfWeek calculates the start of the current week based on the configured week start day.
4275	BeginningOfMonth returns the first day of the current month.
4276	BeginningOfQuarter calculates the start date of the current quarter.
4277	BeginningOfYear returns the start of the current year.
4278	EndOfMinute calculates the end of the current minute.
4279	EndOfHour returns the time at the end of the current hour.
4280	EndOfDay returns the last moment of the current day.
4281	EndOfWeek calculates the end of the week from the given time.
4282	EndOfMonth returns the last moment of the month containing the receiver's time.
4283	EndOfQuarter calculates the last moment of the current quarter.
4284	EndOfYear calculates the last moment of the current year.
4285	MustParse parses strings to time and panics on error.
4286	Between checks if the current time is between two specified times.
4287	ParseInLocation parses the input strings into time.Time based on the given location.
4288	MustParse converts strings to time.Time using the current time as reference.
4289	MustParseInLocation parses strings into time.Time using a specific location.
4290	Between checks if the current time is between two given times.
4291	NewChannelMemoryBackend creates and starts a channel memory backend.
4292	Start launches a goroutine to process if not already running.
4293	Flush sends an event to memory backend and waits for completion.
4294	Stop stops the ChannelMemoryBackend and waits for all operations to complete.
4295	Formatted retrieves cached or computes formatted record string.
4296	Message formats and caches error message with redacted sensitive data.
4297	SetBackend updates Logger's backend and marks it as initialized.
4298	MustGetLogger retrieves a logger or panics if it cannot.
4299	Reset initializes logging backend and sets default formatter.
4300	IsEnabledFor checks if logging is enabled for a specific level and module
4301	Criticalf logs critical messages using format and arguments.
4302	Warningf logs warning messages using format and arguments.
4303	Noticef logs a notice message using the provided format and arguments.
4304	Infof formats and logs an informational message.
4305	SetFormatter updates the formatter's def field safely using a lock.
4306	MustStringFormatter creates and panics on error for a new string formatter.
4307	formatFuncName formats function names based on specified verb.
4308	Log method formats a log record before passing it to another logger.
4309	LogLevel converts a string to its corresponding Level enum value or returns an error.
4310	AddModuleLevel adds a module level to a backend if it's not already present, initializing a new one if necessary.
4311	GetLevel retrieves module's level; defaults to debug if not found.
4312	Sets module level
4313	IsEnabledFor checks if the specified log level is enabled for a given module. Returns true if the level is less than or equal to the module's configured level. Safe to call even on nil moduleLeveled instances, which defaults to no modules being enabled.
4314	MultiLogger aggregates multiple logging backends into a single LeveledBackend.
4315	Log iterates over backends, logs messages if enabled, accumulates errors.
4316	GetLevel retrieves the highest logging level among backends for a specified module.
4317	Sets logging level for each backend
4318	`IsEnabledFor checks if any backend is enabled for the given level and module.`
4319	ConvertColors converts color integers to strings with optional bold formatting
4320	NewSyslogBackend creates a new SyslogBackend instance with specified prefix.
4321	NewSyslogBackendPriority creates a new Syslog backend with given priority and prefix.
4322	SetBackend configures a single or multiple backends, returning a leveled backend.
4323	NewCommander initializes a Commander with top-level flags, name, and default outputs.
4324	Execute matches and runs the specified command based on the provided arguments, handling flags and errors appropriately.
4325	explain outputs a usage guide for command-line tools.
4326	explainGroup outputs a detailed explanation of command groups and their subcommands.
4327	explain prints command usage and flags to writer.
4328	dealias recursively resolves aliases in commands.
4329	Execute runs the default command with given context and arguments
4330	LoadFromData reads configuration data from byte slice and returns parsed ConfigFile object.
4331	LoadFromReader reads configuration from an input reader and returns a ConfigFile object along with any error encountered.
4332	ReloadData updates ConfigFile from io.Reader, overwriting existing data.
4333	AppendFiles adds files to the configuration and reloads it.
4334	GetKeyList retrieves keys from a configuration file section.
4335	SaveConfigData saves configuration data to an output writer.
4336	SaveConfigFile creates and saves a config file.
4337	Find creates a Selection instance using a CSS selector on session.
4338	FindByXPath finds an element using XPath selector on session.
4339	FindByLink returns a Selection based on a link text.
4340	FindByLabel creates a selection based on label text.
4341	FindByName constructs a Selection from session and selectors.
4342	FindByClass appends a class selector to the session and returns a single selection.
4343	FindByID constructs a Selection based on ID.
4344	First returns the first Selection matching the CSS selector.
4345	FirstByXPath returns the first element matching the XPath selector.
4346	FirstByLink returns a Selection based on the first link matching the given text.
4347	FirstByLabel creates a new Selection based on the first occurrence of the specified label.
4348	FirstByName returns the first Selection matching the given name.
4349	All creates a new MultiSelection using the session and updated selectors.
4350	AllByXPath returns a MultiSelection using XPath on selectable's session and selectors.
4351	AllByLink appends a link selector to session's selectors and returns a MultiSelection.
4352	AllByLabel filters selections by label text.
4353	AllByName filters selections by name.
4354	AllByClass appends a class selector to the session and returns a MultiSelection.
4355	AllByID retrieves MultiSelection by ID.
4356	FindForAppium returns a new Selection based on session and selector criteria.
4357	Timeout sets a configuration option to specify a timeout duration based on the given number of seconds.
4358	ChromeOptions adds an option to the config.
4359	JoinPage constructs a new Page instance with specified URL and options.
4360	Destroy destroys the page's associated session.
4361	Reset clears page data and navigates to about:blank.
4362	Navigate sets the URL for the session and returns an error if it fails.
4363	GetCookies retrieves all cookies from the session and converts them to http.Cookie objects.
4364	SetCookie updates session with provided HTTP cookie.
4365	DeleteCookie removes a cookie from the session by name.
4366	ClearCookies deletes all cookies from the session.
4367	URL retrieves session's URL.
4368	Size sets window dimensions on Page.
4369	Take a screenshot and save it to the specified file.
4370	Title retrieves page title from session.
4371	HTML retrieves the source code of the page.
4372	PopupText retrieves alert text from session.
4373	EnterPopupText sets the alert text for the current page session
4374	ConfirmPopup accepts an alert and returns an error if it fails.
4375	CancelPopup dismisses alert or returns error.
4376	SwitchToParentFrame navigates to the parent frame in the session
4377	SwitchToRootFrame attempts to switch to the root frame and returns an error if it fails.
4378	NextWindow cycles through the session's windows, setting the next one as active.
4379	CloseWindow closes the browser window associated with the session.
4380	WindowCount returns the number of available windows.
4381	LogTypes fetches and returns the log types from the session.
4382	MoveMouseBy updates page session's mouse position by specified offsets.
4383	DoubleClick performs a double-click action on the page session.
4384	Click simulates different types of mouse clicks using a session.
4385	Click executes a function on each selected element, returning an error if any click fails.
4386	DoubleClick performs a double-click action on each selected element.
4387	Fill clears and sets text for each selected element, returning any errors encountered.
4388	Tap applies a touch action based on the event type to each selected element.
4389	Touch handles different touch events by invoking corresponding session functions and iterating over selected elements.
4390	FlickFinger performs a touch flick gesture on the selected element
4391	ScrollFinger scrolls selected element using given offsets
4392	NewCapabilities creates a Capabilities instance with the specified features enabled.
4393	JSON converts capabilities to JSON string.
4394	HaveTitle creates a GomegaMatcher to check if a title matches.
4395	HaveURL creates a matcher to check if the URL matches the expected value.
4396	HavePopupText specifies an expected popup text match
4397	HaveLoggedError creates a Gomega matcher to check if any of the given warning or severe messages have been logged.
4398	Text retrieves the text of the selected element.
4399	Active checks if the selected element matches the active element.
4400	Attribute retrieves the value of a specified attribute from an element.
4401	CSS retrieves the specified CSS property value. If not found, an error is returned.
4402	Selected checks if s has the selected state.
4403	Visible checks if elements are displayed.
4404	Enabled checks if Selection has state IsEnabled and returns its value along with any error.
4405	HaveCount creates a Gomega matcher for element count.
4406	HaveAttribute creates a matcher to check if an attribute has a specific value.
4407	EdgeDriver initializes WebDriver with specific options for different OSes.
4408	Selendroid creates a WebDriver instance for Android testing using a JAR file and optional configurations.
4409	SwitchToFrame selects and switches to a specific frame using session management.
4410	Count retrieves the total number of elements from a selection, handling errors gracefully.
4411	EqualsElement checks if two selections have the same element.
4412	MouseToElement moves the mouse pointer to the selected UI element
4413	loggingMiddleware logs incoming HTTP requests and forwards them to the next handler.
4414	Utility function to chain multiple middleware handlers in reverse order.
4415	HTTPReverseProxy starts a reverse proxy server on a specified port, handling requests through middleware and logging. If no port is provided, it finds a free one.
4416	Installer's CheckInstallation verifies each binary's version against a specified range, returning an error if any check fails.
4417	Installer.CheckVersion verifies if the given version satisfies the semver range defined in versionMap for the specified binary.
4418	GetVersionForBinary retrieves the version of a specified binary.
4419	getUser fetches user data from server using HTTP GET request.
4420	login sends credentials to server and returns user data.
4421	loginHandler processes HTTP requests to authenticate users and redirects accordingly.
4422	logoutHandler clears user session and redirects to home.
4423	viewHandler renders the login template with user and error data.
4424	Run starts HTTP server with login, logout, and view handlers on port 8081.
4425	WithRequest sets the Request field and logs a warning if the body is JSON-formatted.
4426	WillRespondWith assigns a response to Interaction's Response field.
4427	isJSONFormattedObject determines if the input is a valid JSON-formatted object.
4428	ByUsername retrieves user by username, returns user if found, otherwise returns error.
4429	ByID retrieves user by ID; returns user or error if not found.
4430	UserLogin handles HTTP requests for user authentication, validates credentials, and returns appropriate responses.
4431	newClient initializes a PactClient with setup services and default timeout.
4432	NewClient creates a PactClient with mock services for various operations.
4433	ListServers retrieves a list of mock servers.
4434	UpdateMessagePact validates request, executes command, captures output, and returns error or success.
4435	PublishPacts sends a request to start publishing pacts and waits for the response.
4436	getPort extracts the port number from a URL or returns default ports based on scheme.
4437	getAddress extracts the hostname from a URL.
4438	sanitiseRubyResponse cleans up response from Ruby process
4439	Publishes a Pact request using a client, validates it first.
4440	FindPortInRange parses port input, handling both single values and ranges, validating each port until a usable one is found or all are invalid. Returns first valid port or error if none valid.
4441	EachLike creates a new matcher with specified contents and minimum required count.
4442	Term creates a new matcher using a regular expression.
4443	UnmarshalJSON deserializes JSON bytes into map matcher.
4444	objectToString converts an interface to a JSON-formatted string.
4445	match returns a Matcher based on the input reflect.Type and params.
4446	AddMessage appends a new Message to p.MessageInteractions and returns it.
4447	AddInteraction initializes Interaction and appends it to Pact's Interactions slice.
4448	Teardown stops the server and returns Pact.
4449	Verify runs pact tests using mock server and integration functions, returning any errors encountered during verification process.
4450	stateHandlerMiddleware sets up middleware to handle state setup requests or pass them through.
4451	VerifyMessageProviderRaw starts a temporary HTTP server to verify message providers using Pact.
4452	VerifyMessageConsumerRaw checks if a message matches the expected format and updates the pact accordingly.
4453	VerifyProvider checks request and returns response or error.
4454	NewService mocks service creation
4455	Setup initializes channels and starts monitoring goroutines for service creation and removal.
4456	starts a monitor to track created services
4457	removeServiceMonitor monitors and handles completed commands by signaling processes and removing them from processMap.
4458	List returns a map of service IDs to command objects.
4459	Command method returns an exec.Cmd instance with specified command and arguments.
4460	send HTTP request based on method and return response body or error.
4461	DeleteInteractions logs debug info and deletes mock service interactions.
4462	AddInteraction logs and sends an interaction to the mock service.
4463	WritePact logs debug info, validates input, constructs pact data, and sends a POST request.
4464	ExpectsToReceive sets the Description field p value.
4465	WithMetadata updates the Metadata field of Message instance.
4466	AsType sets the Type field of p to the value of t and logs the type being set.
4467	UserLogin handles login requests, validates credentials, and returns appropriate responses.
4468	Region retrieves the AWS S3 region based on environment variables and domain.
4469	New creates a new S3 instance with a specified domain and keys. If no domain is provided, it defaults to a predefined value.
4470	Bucket returns a new Bucket pointer for the specified S3 bucket name.
4471	PutWriter writes data to a writer at path with headers and config. If config is nil, it uses default config. Returns a WriteCloser and error.
4472	url constructs and returns a URL object based on the bucket path and configuration, handling version parameters and domain formats.
4473	SetLogger configures the logger with specified output, prefix, flag, and debug mode.
4474	InstanceKeys retrieves AWS instance credentials and constructs keys object.
4475	EnvKeys retrieves AWS credentials from environment variables.
4476	Sign method sets necessary headers for authentication on an HTTP request.
4477	getAWSKeys retrieves AWS credentials from environment or instance metadata.
4478	homeDir retrieves the home directory of the current user.
4479	ACL sets "x-amz-acl" header if acl is not empty.
4480	putPart uploads a part of a file to a server using HTTP PUT request, verifying its integrity with ETag.
4481	abort cancels a multipart upload.
4482	growPartSize checks if increasing the partition size is valid based on maximum object size and number of partitions.
4483	CheckDisallowed verifies environment variables start with prefix and match allowed keys.
4484	Process parses configuration fields based on prefix and spec.
4485	MustProcess panics if Process returns an error.
4486	toTypeDescription converts a reflect.Type to a human-readable description.
4487	Usage prints formatted help text using a tabular format.
4488	Usagef generates help text for command-line flags using a custom template.
4489	Usaget executes template on gathered info
4490	Scan deserializes database value into Go time type.
4491	Value returns the underlying driver value or nil if invalid.
4492	NewTime creates a new Time instance with specified Time and Valid fields.
4493	TimeFromPtr converts a time pointer to a custom Time struct.
4494	ValueOrZero returns the time value or zero if not valid.
4495	MarshalJSON handles JSON serialization for valid timestamps or returns null.
4496	SetValid updates the Time field and sets Valid to true.
4497	Ptr returns a pointer to the time value if it is valid.
4498	NewBool creates a new Bool instance with specified values.
4499	BoolFromPtr returns a Bool from a pointer to a bool
4500	UnmarshalJSON handles JSON unmarshalling for boolean or null values.
4501	UnmarshalText parses text to set Bool value.
4502	MarshalJSON serializes the boolean value as JSON.
4503	SetValid sets the Bool value to v and marks it as valid.
4504	NewString creates a new String instance with the given string and validity.
4505	UnmarshalJSON handles various types to unmarshal JSON data into a String or NullString.
4506	MarshalText converts string to byte slice if valid.
4507	UnmarshalText deserializes text to a valid string.
4508	SetValid updates String's value and marks it as valid.
4509	StringFromPtr converts a pointer to a string, returning a new String instance.
4510	MarshalJSON returns JSON representation of string or null if invalid.
4511	NewInt creates a new Int instance with the given integer and validity flag.
4512	IntFromPtr converts a pointer to an int64 to a custom Int type.
4513	UnmarshalJSON deserializes JSON data into integer or null integer values.
4514	MarshalText converts integer to text format.
4515	SetValid updates the Int64 field and marks Valid as true.
4516	UnmarshalText deserializes text to integer value.
4517	MarshalText converts boolean value to text format.
4518	SetValid updates Float's value and marks it as valid.
4519	MarshalJSON handles invalid times by default.
4520	UnmarshalJSON deserializes JSON data to Float type, handling various data types and validating the result.
4521	UnmarshalText parses text to float value.
4522	MarshalJSON handles float serialization, converting valid finite values to JSON format or null otherwise.
4523	newGossipChannel creates a new gossip channel with given parameters.
4524	GossipUnicast sends a message to a specific peer using unicast gossip.
4525	GossipBroadcast sends an update to all gossip peers.
4526	Send broadcasts gossip data from the local node to all peers.
4527	GossipChannel sends down gossip data using its sender for a given connection.
4528	gobEncode serializes a list of interfaces to a byte slice using Go's encoding/gob package.
4529	newTokenBucket creates a new token bucket with specified capacity and interval.
4530	wait sleeps until the next available token or enforces bucket capacity.
4531	capacityToken calculates the last refill time based on current time, refill duration, and token interval
4532	PrefixRangeEnd calculates the last byte of the prefix range, incrementing the last non-ff byte and truncating the rest or returning [0] if no next prefix exists.
4533	newLocalPeer creates a new local peer instance with specified name, nickname, and router.
4534	getConnections acquires read lock, retrieves all connections, and returns them in a set.
4535	createConnection establishes a TCP connection between peers.
4536	doAddConnection handles adding a connection asynchronously.
4537	startLocalConnection initializes a local connection using remote, TCP, and router details; starts a goroutine to manage it.
4538	SendProtocolMsg sends a message over a local connection and handles errors.
4539	NewStatus constructs a status object from a router instance.
4540	makePeerStatusSlice converts peers to status slices.
4541	makeUnicastRouteStatusSlice constructs a slice of unicast route statuses from a routes object.
4542	makeBroadcastRouteStatusSlice converts route statuses to a slice of broadcast statuses, ensuring thread safety with RLock.
4543	makeLocalConnectionStatusSlice constructs a slice of LocalConnectionStatus based on current connections and targets.
4544	make.TrustedSubnetsSlice converts IP networks to string slices.
4545	Range handles key range requests in etcd store.
4546	Put stores key-value pairs in etcd using internal raft requests and handles context cancellation or store shutdown.
4547	DeleteRange handles range deletion requests in etcdStore.
4548	Txn handles transactions in etcdStore using internal raft requests.
4549	Compact is defined on etcdStore to handle compaction requests, currently returning an unimplemented error.
4550	proposeInternalRaftRequest sends a request to the Raft group and returns channels for messages and errors.
4551	applyCompare evaluates a comparison condition against etcd key-value pairs.
4552	PeersDescriptions returns a list of descriptions for each peer, including their name, nickname, UID, self-status, and number of connections.
4553	OnGC adds GC callback to peers list.
4554	OnInvalidateShortIDs adds a callback to the peers' short ID invalidation list.
4555	chooseShortID selects a unique short ID for peers or indicates failure if none are available.
4556	fetchWithDefault retrieves or creates a peer entry, updating reference counts.
4557	Fetch retrieves the peer by name, returning nil if not found.
4558	fetchAndAddRef locks peers, increments localRefCount if peer exists, then returns it.
4559	FetchByShortID retrieves a peer by its short ID.
4560	GarbageCollect locks Peers, performs garbage collection, then unlocks and notifies.
4561	newRoutes initializes and starts a routes object for peer communication.
4562	OnChange appends a callback function to the routes' onChange slice after acquiring the lock.
4563	Unicast retrieves peer name for given name; returns false if not found.
4564	UnicastAll retrieves the next hop for a given peer name in routes.
4565	Broadcast sends a message to all peers associated with a given name.
4566	BroadcastAll retrieves or calculates all Peers associated with a given name.
4567	NewPeer initializes and starts a peer component.
4568	Register updates the peer's gossip instance asynchronously.
4569	ReadFrom sends an action to a peer to read data asynchronously; waits for completion; returns bytes read, remote address, and any error.
4570	WriteTo sends data to a destination address using a peer's gossip mechanism.
4571	LocalAddr returns the local address of the peer as a MeshAddr.
4572	OnGossip processes gossip data from buffer and returns mesh.GossipData.
4573	OnGossipBroadcast processes incoming gossip data.
4574	OnGossipUnicast processes unicast gossip messages by decoding them and sending to the recv channel.
4575	NewDefaultServer initializes and starts a default server with specified configurations.
4576	PeerNameFromUserInput generates a PeerName from user input using SHA-256 hashing.
4577	bytes converts a peer name to bytes using hex decoding.
4578	NewRouter initializes a new router with the provided configuration and dependencies.
4579	sendAllGossip sends gossips to all channels.
4580	sendAllGossipDown iterates over gossip channels, sending non-nil gossips to a connection.
4581	broadcastTopologyUpdate broadcasts topology updates to peers using gossip.
4582	OnGossipUnicast handles unexpected topology gossip unicast messages.
4583	OnGossipBroadcast processes gossip updates and returns topology data.
4584	Gossip constructs and returns a new GossipData instance containing peer information.
4585	OnGossip processes topology updates and returns gossip data
4586	Encode converts topology gossip data to a byte array representation.
4587	newState creates a new state object for the given peer.
4588	Merge is defined on state to combine with GossipData.
4589	mergeReceived updates state with received data, removing duplicates
4590	mergeComplete updates state based on new data and returns updated state object
4591	OnGossipBroadcast processes gossip updates.
4592	Handle incoming gossip updates, store recent ones, and remove old ones
4593	generateKeyPair generates a public and private key pair using a cryptographically secure random number generator.
4594	formSessionKey generates a session key using Diffie-Hellman and SHA-256.
4595	newTCPCryptoState initializes a TCP crypto state with a session key and sets nonce flags based on direction.
4596	Send encodes and sends a message over TCP.
4597	Send prefixes TCP messages with their length.
4598	Send method encrypts message using session key and sends it securely.
4599	Receive decodes a message using a decoder.
4600	Receive reads a 4-byte prefix to determine message length, then reads that many bytes from the receiver's reader. If the message exceeds maxTCPMsgSize, it returns an error.
4601	Receive will decrypt a message using secretbox and advance the nonce.
4602	newPeer creates a new peer instance with a logger and action channel.
4603	incr increments peer's state and broadcasts update if configured
4604	Gossip copies peer's state and logs gossip data.
4605	OnGossipUnicast decodes a peer set from gossip, merges it, and logs the result.
4606	makeRaftPeer creates a raft.Peer instance from a network address.
4607	String method returns a formatted string representation of the Peer object.
4608	forEachConnectedPeer iterates over connected peers based on criteria and applies a function to each matching peer.
4609	parsePeerUID parses a peer UID from a string and returns it as a PeerUID type along with any parsing errors.
4610	Swap will exchange positions of elements at indices i and j in a list of peers.
4611	Sorts peers by name using list.
4612	doIntro handles the introduction process by setting deadlines, exchanging headers, generating keys, and calling specific versions' intro functions.
4613	filterV1Features filters out V1 features from the input map based on predefined keys.
4614	newConnectionMaker initializes a new connection maker with specified parameters and starts a query loop.
4615	connectionAborted updates the state and error of a target address and signals action to retry later.
4616	newGossipSender initializes a gossip sender with message creators and starts a goroutine to run it.
4617	Send updates gossip data using mutex locking.
4618	Broadcast sends gossip data to peers, merging new data with existing broadcasts.
4619	Flush sends a request to s and waits for a response indicating whether it was successful.
4620	Sender retrieves or creates a gossip sender for a channel.
4621	Flush locks gossipSenders, flushes each sender, returns if any flushed.
4622	findMainPath retrieves the file path of the main function or test runner in the call stack.
4623	Create generates a new channel using the provided client ID.
4624	Send sends a message to a specified client using the given context.
4625	SendJSON sends a JSON-encoded value to a specified client using a context.
4626	remapError updates "xmpp" service to "channel" in APIError.
4627	NamespacedContext adds a namespace to the given context.
4628	protoToItem converts a protocol buffer item to a domain model Item.
4629	singleError extracts the first error from a MultiError if present; otherwise, it returns the original error.
4630	Get retrieves an item from cache by key, returning an error if not found.
4631	GetMulti fetches multiple items from memcache using their keys.
4632	Delete invokes DeleteMulti for a single key.
4633	DeleteMulti deletes multiple items from memcache and returns errors if any occur.
4634	Increment calls incr to atomically update the value associated with the given key by the specified delta, initializing it with initialValue if not present.
4635	IncrementExisting increases the stored integer value associated with the given key by the specified delta. The new value is returned along with any potential errors.
4636	set updates items in memcache with specified values, policies, and conditions.
4637	Codec's Get fetches item using key, unmarshals it into v, returning Item or error.
4638	Stats fetches memcache statistics from the server and converts them into a structured format.
4639	Flush clears all memcache entries.
4640	Invoke function `f` asynchronously using background request.
4641	List retrieves modules from the server.
4642	SetNumInstances updates the number of instances for a given module and version.
4643	Versions retrieves the specified module's versions.
4644	DefaultVersion retrieves default version for specified module.
4645	Start initializes a module with specified version and returns response.
4646	Stop stops a module with optional parameters.
4647	Ancestor clones query and sets ancestor key or returns error if nil.
4648	EventualConsistency clones Query and sets eventual consistency flag.
4649	Project clones Query and appends fieldNames to projection.
4650	Distinct clones query and sets distinct flag to true.
4651	DistinctOn clones query and sets distinctOn field to specified values.
4652	KeysOnly clones Query and sets keysOnly to true.
4653	Limit modifies the query's limit, ensuring it's within valid bounds.
4654	Offset sets the query's offset and validates it.
4655	BatchSize clones Query, validates batch size, sets count, returns modified Query.
4656	Start initializes a query with a cursor, setting start position or returning an error if cursor is invalid.
4657	End clones query, validates cursor, sets end condition.
4658	Count calculates the total number of matching entities based on the query parameters, considering pagination and offsets.
4659	Execute the Query and return the Iterator containing the results.
4660	Next retrieves the next key and loads entity data into dst if not keys-only.
4661	Cursor returns the cursor for the current iterator position.
4662	String returns a URL-safe base64 encoded string of the Cursor's protobuf data.
4663	DecodeCursor decodes a cursor string into a Cursor object.
4664	saveEntity converts entity to proto format.
4665	Namespace validates and sets a namespace in the context.
4666	typeof retrieves the type information based on variable or function name.
4667	dot retrieves field or method from type, considering embedded types recursively.
4668	joinFunc generates a function signature from input and output parameter lists.
4669	validPropertyName checks if a property name is valid by ensuring it's non-empty, contains no empty segments, starts with a letter or underscore, and has subsequent characters that are letters, digits, or underscores.
4670	getStructCodec retrieves a struct codec for a given type, ensuring thread safety through mutex locking.
4671	LoadStruct loads struct properties from a slice of Property.
4672	SaveStruct converts the source struct to properties and saves them.
4673	ServingURL generates a URL for an image blob with optional resizing and cropping options.
4674	DeleteServingURL deletes a serving URL for a blob key using gRPC.
4675	CurrentOAuth fetches OAuth user details based on provided scopes, returning a User object or an error.
4676	OAuthConsumerKey retrieves the OAuth consumer key from the response.
4677	String returns user's email or federated identity.
4678	LoginURL generates a federated login URL using the default federation domain.
4679	LoginURLFederated generates a federated login URL based on destination and optional identity.
4680	LogoutURL generates a logout URL for the given destination.
4681	insertContext adds a context parameter to a function call if not already present.
4682	NewClient initializes a client with specified host and HTTP client, adding authentication headers and retrieving app ID.
4683	NewContext creates a new context with overridden call, log, and app ID.
4684	NewRemoteContext creates a remote context using host and HTTP client.
4685	Debugf logs formatted debug messages using internal logging.
4686	guestbookKey generates a key for accessing the default guestbook entity in the datastore.
4687	toRetryParameters converts RetryOptions to TaskQueueRetryParameters.
4688	NewPOSTTask creates a new Task with specified path, URL-encoded parameters, and POST method.
4689	ParseRequestHeaders extracts headers from an HTTP request into a structured RequestHeaders object.
4690	Add submits a new task to the specified queue and returns the updated task or an error if the task is already added.
4691	AddMulti processes multiple tasks.
4692	Delete removes a single task from a specified queue using DeleteMulti.
4693	DeleteMulti deletes multiple tasks from a specified queue.
4694	Lease requests tasks from a queue using the specified parameters and returns them or an error.
4695	LeaseByTag retrieves tasks based on a tag using the lease function.
4696	Purge removes all tasks from the specified queue or default queue.
4697	ModifyLease updates a task's lease time in a queue.
4698	QueueStats retrieves statistics for specified queues or default, converting them to QueueStatistics format.
4699	IsTimeoutError checks if the error indicates a timeout condition. Returns true if the error is due to a deadline being exceeded or implements the IsTimeout method returning true. Otherwise, it returns false.
4700	Func registers a function with a unique key and validates its signature.
4701	Task creates a taskqueue task from the function's signature and arguments, ensuring correct types and handling nil values appropriately.
4702	RequestHeaders retrieves headers from context or returns error.
4703	WithContext attaches a request to a parent context.
4704	WithAPICallFunc overrides API call functionality in a context.
4705	APICall invokes a remote procedure call using specified service and method.
4706	ModuleHostname retrieves the hostname based on the specified module, version, and instance.
4707	AccessToken retrieves an access token with specified scopes.
4708	PublicCertificates retrieves public certificates for the app using gRPC.
4709	ServiceAccount fetches the service account name using the provided context.
4710	SignBytes verifies and signs the given bytes using the app identity service.
4711	fetch retrieves data from a blob store based on offset
4712	seek adjusts reader's offset within buffer or resets it if out of bounds.
4713	multi.KeyToProto converts app ID and keys to proto references.
4714	referenceValueToKey converts a reference value to a key.
4715	keyToReferenceValue converts a Key to a pb.ReferenceValue with escaped path elements.
4716	Put a value under a key in the datastore, overwriting any existing value.
4717	PutMulti saves multiple entities to the datastore.
4718	Delete removes item from storage using provided key.
4719	DeleteMulti handles multiple deletions using a request.
4720	Run the specified command with captured input/output and return any errors.
4721	Next retrieves the next record from qr's logs or runs the query if no records are available.
4722	protoToAppLogs converts protobuf log lines to application logs.
4723	protoToRecord converts a RequestLog protobuf message to a Record struct
4724	Construct a query request using parameters and contextual information, returning a result object encapsulating the request and potential errors.
4725	run reads logs from the log service, processes them, and updates the result.
4726	Current retrieves user information from request headers and returns a User object if valid email or federated identity is present.
4727	IsAdmin checks if the request context indicates the user is an admin. Returns true if header value equals "1".
4728	isErrFieldMismatch checks if the error is a field mismatch error from the datastore.
4729	Stat retrieves information about a blob using its key.
4730	Send sets the X-AppEngine-BlobKey header and ensures Content-Type is set.
4731	UploadURL generates a presigned URL for uploading data to blob storage with specified options like max upload bytes, bucket name, and success path.
4732	Delete calls DeleteMulti to remove a single blob key.
4733	DeleteMulti deletes multiple blob keys in Google App Engine.
4734	NewReader creates a Reader from a BlobKey using the given context.
4735	Handle registers an HTTP handler for XMPP messages.
4736	Send implements MessageSender.Send.
4737	Invite sends an XMPP invitation from one user to another.
4738	Send sends presence information to a user.
4739	Presence status retrieved using gRPC call.
4740	GetPresenceMulti fetches presence information for multiple users and aggregates results.
4741	newStructFLS creates a new FieldLoadSaver from a pointer to a struct. Returns an error if input is not a valid struct pointer.
4742	SaveStruct extracts fields from a struct, handling errors gracefully.
4743	Namespaces retrieves all namespace keys and converts them to names.
4744	Kinds retrieves all unique kind names from the database using a query.
4745	RunInTransaction executes a function within a transaction, retrying on concurrent errors up to a specified number of attempts.
4746	imports checks if a package is imported in a given file.
4747	importSpec searches for an import spec with the given path in the file's imports and returns it if found.
4748	declImports checks if the specified import path exists in the given Go AST declaration.
4749	isPkgDot checks if an expression selects a specific package member.
4750	isTopName checks if the given expression is an identifier matching the specified name and has no object associated with it.
4751	isName checks if the given expression is an identifier matching the specified name.
4752	isCall checks if the expression is a call to the specified package and function.
4753	refersTo checks if an AST node matches a given identifier.
4754	isEmptyString checks if the given expression evaluates to an empty string literal.
4755	countUses counts how many times an identifier is used within a given scope.
4756	assignsTo checks if variable x is assigned within the given scope.
4757	newPkgDot constructs a selector expression for accessing a package member.
4758	renameTop renames occurrences of old to new in the given Go file's imports, declarations, and unresolved identifiers.
4759	function to find matching length of two strings.
4760	deleteImport removes an import statement from a Go file.
4761	rewriteImport updates import paths in Go source files, replacing occurrences of oldPath with newPath. It returns true if any imports were rewritten.
4762	DefaultTicket generates the default ticket based on environment and app details.
4763	flushLog handles pending logs, flushing them if necessary or deferring if not.
4764	withDeadline creates a new context with a deadline or returns the parent context unchanged.
4765	KeepAlive sends a request to get the socket name using RPC.
4766	applyTransaction applies a transaction to a protocol buffer message using a setter function if available.
4767	analyze builds a context from tags, checks for a main package, and gathers import information.
4768	buildContext constructs a build context with specified tags.
4769	synthesizeMain generates a unique filename and adds it to a tar archive.
4770	findInGopath searches for a directory within GOPATH and returns its path if found; otherwise, it returns an error.
4771	copyTree recursively copies directory contents using tar.Writer, skipping files listed in skipFiles map.
4772	copyFile creates a tar archive entry for the source file and copies its contents to the writer.
4773	checkMain verifies if the project root contains a valid Go application with a main package and func main.
4774	isMain checks if a function declaration represents the main function with no receiver or parameters.
4775	readFile checks if a file contains a main function.
4776	initField navigates through nested fields based on provided indices, creating pointers as needed, and returns the final field value.
4777	loadEntity loads entity data from protobuf to destination struct.
4778	validIndexNameOrDocID checks if the given string is a valid index name or document ID.
4779	Open creates a new search index with the given name.
4780	Put single item to index using context, ID, and source; returns stored ID or error.
4781	Get fetches a document by ID and loads it into the provided destination.
4782	Delete method calls DeleteMulti with single ID.
4783	DeleteMulti deletes multiple documents from an index.
4784	Search creates an Iterator for searching documents based on query options.
4785	fetchMore retrieves more data if there are no errors and no current results.
4786	Iterator.Next retrieves the next document ID or loads it into a destination object.
4787	Iterates through facet results to build a nested slice of FacetResults.
4788	DefaultBucketName fetches the default GCS bucket name using RPC.
4789	valid checks if Key is valid recursively.
4790	Equal checks if two keys are equivalent by comparing their components recursively.
4791	Returns the root key of a given key.
4792	marshal recursively constructs key path in buffer
4793	String converts Key to a human-readable format.
4794	Encode converts Key to a URL-safe base64 encoded string.
4795	DecodeKey decodes a base64-encoded string into a Key object using protobuf.
4796	NewIncompleteKey creates a new Key with empty ID and zero version from a given context, kind, and parent key.
4797	NewKey creates a new Key instance using context, kind, IDs, and parent.
4798	AllocateIDs generates a range of unique IDs for a given kind and parent key.
4799	IsOverQuota checks if the error is due to exceeding a quota limit.
4800	ClassicContextFromContext extracts an App Engine context from a standard context, returning an error if not found.
4801	Send sends a message using the given context and returns an error if any.
4802	SendToAdmins sends a message to admins using the given context.
4803	Failures counts the total number of failed tests across all packages.
4804	decodeFieldNumberAndTyp3 decodes a byte slice into a field number and type.
4805	checkTyp3 returns an error if the provided Typ3 does not match the expected Typ3 based on the reflection of the type and field options.
4806	decodeTyp3 parses a byte slice to extract a Typ3 value.
4807	NewPrefixBytes creates a new PrefixBytes instance by copying byte slice content.
4808	getLengthStr returns a formatted string representing the size of a type or "variable" if unknown.
4809	collectImplementers_nolock populates implementers map for given type info.
4810	checkConflictsInPrio_nolock returns an error if any type in Implementers conflicts with others and is not in Priority.
4811	constructConcreteType creates a concrete value based on TypeInfo and returns it along with its pointer.
4812	MarshalBinaryLengthPrefixedWriter serializes an object to binary with a length prefix and writes it to a writer.
4813	MarshalBinaryBare marshals an object to binary format using Amino codec.
4814	Decode binary data with length prefix.
4815	Codec.UnmarshalBinaryBare decodes binary data into a struct using reflection.
4816	MustMarshalJSON panics on JSON marshalling errors.
4817	MustUnmarshalJSON deserializes JSON to a pointer, panicking on failure.
4818	MarshalJSONIndent serializes JSON with indentation using a codec.
4819	newDataReader wraps an io.Reader with a buffered reader.
4820	Read will process data from an internal buffer, handling special bytes like IAC, SB, SE, WILL, WONT, DO, and DONT according to the TELNET protocol.
4821	ListenAndServeTLS will start a TLS server on the specified address using the provided certificate and key files.
4822	Produce executes a function to create a Handler based on context, name, and arguments.
4823	PromoteHandlerFunc wraps a handler function with input/output redirection.
4824	Serve starts a server using the given listener and handler.
4825	Serve starts listening on a given net.Listener, handles incoming connections using a handler, and logs each step.
4826	Fail logs error message to stderr and exits.
4827	WriteUsage method formats and writes command-line usage instructions to an output writer based on parser specifications.
4828	WriteHelp generates formatted help text for a command-line parser.
4829	MustParse initializes a parser, processes flags, handles errors, and returns it.
4830	Parse parses input flags and populates destination structs.
4831	recursive function to traverse struct fields and apply visitor logic.
4832	Parse processes command-line arguments and returns an error if help or version flags are specified.
4833	updateSlice updates a slice field with new string values, handling pointers and truncation.
4834	canParse determines if a type can be parsed, handling pointers and slices recursively.
4835	isBoolean checks if the type implements text unmarshaler or is a boolean pointer.
4836	NewFromMap constructs a tree from a key-value map.
4837	Insert adds a key-value pair to the tree, updating or creating nodes as needed.
4838	Delete removes a string from a tree, returning its value and success status.
4839	DeletePrefix removes all keys with the given prefix from the tree and returns the number of deleted nodes.
4840	deletePrefix will remove nodes matching a given prefix from a tree structure
4841	Get will retrieve a value from a tree using a string key, returning the value and a boolean indicating success.
4842	LongestPrefix finds the longest prefix in the tree and returns its associated value.
4843	Minimum finds the smallest key-value pair in the tree, returning it along with a boolean indicating success.
4844	WalkPrefix traverses Tree nodes matching the given prefix, applying fn to each.
4845	recursiveWalk applies a function to node values recursively, returning true if the function returns true for any value.
4846	ToMap converts tree nodes to a map using Walk.
4847	checkip determines the type and numeric value of an IP address, then calculates an index based on the address type and base address.
4848	readuint32 reads a uint32 value from a file at a specified position using little-endian byte order.
4849	readuint128 reads a 128-bit unsigned integer from a file at the given position and returns it as a big.Int.
4850	function to initialize IP2Location record with message data.
4851	Printrecord displays details from an IP2Location record.
4852	Main draws a scaled gopher graphic context and saves it to a file.
4853	SaveToPdfFile saves a PDF document to a file using the specified path.
4854	CubicCurveTo adds a cubic Bézier curve to path p.
4855	ArcTo defines an arc path segment in Path.
4856	String method constructs a human-readable representation of Path components.
4857	VerticalFlip returns a new Path with vertical flip applied to its components and y-coordinate.
4858	NewGlyphCache initializes a glyph cache dictionary
4859	Fetch retrieves or renders a glyph from the cache based on font name and character.
4860	renderGlyph generates a Glyph object from a rune using the specified font.
4861	Copy creates a new Glyph with a copied Path and same Width.
4862	Fill draws the glyph at position (x, y) using the given GraphicContext and returns its width.
4863	Main draws a line and ellipse on a graphic context and returns the output filename.
4864	Draw method uses GraphicContext to draw a line between two points.
4865	Paint updates vertices and colors based on spans, handling buffer overflow by flushing and resizing.
4866	SetColor updates Painter's color based on input RGBA values.
4867	NewPainter initializes a new Painter with slices for vertices and colors.
4868	GetStringBounds calculates bounds for a given string using the current font settings.
4869	Calculates new scale based on font size and DPI
4870	SetFont updates the Current Font in GraphicContext.
4871	ClearRect updates the graphic context with a new masked group.
4872	drawString renders text using specified font mode and returns its width.
4873	newGroup creates a new SVG group based on the specified draw type and attaches it to the graphic context.
4874	newMask creates a new SVG mask at specified coordinates and dimensions, attaches it to the context, and assigns a unique ID.
4875	embedSvgFont processes text, loads fonts, and caches glyphs for SVG rendering.
4876	TraceQuad traces a Bezier curve using a recursive subdivision method based on a flattening threshold.
4877	GetFontName retrieves and formats the name, family, style, and size of the current font context.
4878	NewStackGraphicContext initializes a new StackGraphicContext with default settings.
4879	NewFolderFontCache creates a FolderFontCache with an empty fonts map, specified folder, and default font file naming function.
4880	NewSyncFolderFontCache initializes a cache for font files in the specified folder.
4881	Main draws a gopher image and returns the output filename.
4882	NewPdf initializes a new PDF document with specified orientation, unit, and size.
4883	clearRect clears the specified rectangle on a GraphicContext using a white fill color.
4884	NewGraphicContext creates a new GraphicContext for the given PDF and sets the DPI.
4885	Clears the graphic context by erasing its contents.
4886	GetStringBounds calculates bounds for a given string in PDF context
4887	CreateStringPath sets the position and draws text on the PDF canvas, returning the width of the drawn text.
4888	FillStringAt creates a path for the given text at specified coordinates and returns the cursor position.
4889	SetStrokeColor updates stroke color using gc StackGraphicContext and pdf draw color.
4890	SetFillColor updates fill color for graphic context.
4891	SetLineDash updates the line dash pattern and offset in the graphic context.
4892	SetLineWidth updates LineWidth for StackGraphicContext and pdf.
4893	Draws "Hello World" on graphic context and saves to file with given extension.
4894	Draw draws a rounded rectangle and displays text on the graphic context
4895	SaveToPngFile saves the image to a PNG file
4896	LoadFromPngFile loads an image from a PNG file path
4897	Resource constructs a file path based on folder, filename, and extension.
4898	Output generates a path to a sample file based on its name and extension.
4899	Main draws a tiger on a graphic context and saves it to a file.
4900	Draw interprets and executes a PostScript file using the provided GraphicContext.
4901	Main draws a droid and returns an output filename.
4902	Bubble draws a bubble shape using quadratic curves.
4903	Dash draws a dash pattern on a graphics context at specified coordinates.
4904	CubicCurve draws a cubic Bezier curve on a graphics context.
4905	Draws and fills a stroke pattern on a graphic context.
4906	FillStyle draws a styled rectangle with two wheels using the given graphic context and dimensions.
4907	PathTransform applies transformations to draw an arc on a graphic context.
4908	Star draws a star shape using given dimensions and context.
4909	Draw uses a graphic context to render various shapes and functions on a canvas.
4910	ConvertPath converts a draw2d path to a PDF vector format using components like move-to, line-to, curve-to, etc.
4911	Draws lines with different cap and join styles and saves the result to a file.
4912	Draws two lines on the graphic context: a thick black line and a thin red helper line.
4913	DrawContour constructs a contour path using a sequence of truetype points.
4914	Flatten converts a complex path to a simpler form using a flattener.
4915	Clear resets GraphicContext by clearing its entire image area.
4916	Clears rectangle area with current fill color
4917	DrawImage applies transformation to source image using specified filter and draws it on destination image.
4918	Main draws a gopher on an image and saves it, returning the filename and any errors.
4919	Draw renders an image within a frame using specified dimensions and margin.
4920	Draw renders a simple droid shape at given coordinates using specified graphic context.
4921	ChecksumString32S computes checksum for a string using a seed.
4922	ChecksumString64S computes a checksum for a string using a given seed.
4923	NewS32 initializes an XXHash32 instance with a given seed and resets it.
4924	NewS64 initializes an XXHash64 instance with a given seed and resets it.
4925	round64 applies a series of bitwise operations and multiplications to hash a value.
4926	Checksum32S computes a 32-bit checksum using a modified version of the MurmurHash3 algorithm.
4927	Checksum64S calculates a 64-bit checksum using either short or full processing based on input length and seed.
4928	getStage retrieves current stage and functions to advance or reset the environment based on stage information.
4929	New will return a pointer to a new Glg instance with initialized logging levels and buffer.
4930	Get returns a Glg instance lazily initialized with custom time format.
4931	SetMode updates logger mode for all levels in Glg.
4932	SetPrefix updates the tag of the logger stored under key PRINT.
4933	GetCurrentMode retrieves the current mode of a logger at a given level.
4934	InitWriter resets writers in logger and updates mode.
4935	SetWriter updates logger writers in Glg instance.
4936	SetLevelColor updates the color function for a specific log level in Glg.
4937	SetLevelWriter updates logger's writer for specified level.
4938	AddStdLevel adds a standard log level to Glg instance.
4939	EnableColor updates color mode for all loggers in Glg instance.
4940	EnableLevelColor enables color for specified log level.
4941	DisableLevelColor disables color for specified log level in Glg.
4942	RawString extracts a raw string from byte data
4943	TagStringToLevel retrieves the log level from a map using the tag string; returns default level 255 if not found.
4944	Println outputs formatted text with a newline character.
4945	Fatal logs error messages and exits the program.
4946	Fatalf logs formatted error message and panics.
4947	isModeEnable checks if the specified mode is enabled for the Glg instance.
4948	CaptureMetrics captures metrics for HTTP requests
4949	cedar.get retrieves a value based on a key using a trie data structure, returning a pointer to the value or an error if not found.
4950	Encode Cedar data using specified format to writer.
4951	SaveToFile writes Cedar data to a file specified by fileName and dataType.
4952	Load reads data from reader based on data type.
4953	LoadFromFile reads data from a file and loads it into Cedar.
4954	Generate key for Cedar data structure by reversing non-zero XOR values
4955	Value retrieves the integer value associated with a given ID from a Cedar data structure.
4956	Delete removes a key from the Cedar data structure.
4957	Set parses and validates a version string.
4958	Compare recursively compares two versions and then uses pre-release comparison if necessary.
4959	Slice returns a slice containing the major, minor, and patch versions.
4960	BumpMajor increments the Major version and resets Minor, Patch, PreRelease, and Metadata fields to zero.
4961	BumpMinor increments minor version, resets patch, pre-release, and metadata.
4962	BumpPatch increments Patch version and resets PreRelease and Metadata fields.
4963	validateIdentifier checks if the provided identifier matches the semver pattern.
4964	newStream initializes a Stream with buffer size and replay option.
4965	addSubscriber adds a new subscriber to the stream and returns it.
4966	New creates a new Server instance with default settings.
4967	Stop all streams and close server.
4968	CreateStream generates a new stream or returns an existing one by ID.
4969	RemoveStream removes a stream by ID.
4970	StreamExists checks if a stream with the given ID exists in the server.
4971	Publish sends processed events to streams identified by id.
4972	NewClient creates a new HTTP client for events.
4973	Subscribe registers a handler to receive events from a stream, retrying on failure.
4974	SubscribeChan subscribes to a channel for event notifications.
4975	SubscribeRaw registers a raw event handler.
4976	Unsubscribe sends a signal to ch to stop receiving events.
4977	NewEventStreamReader creates an EventStreamReader from an io.Reader, parsing events based on specific delimiters.
4978	ReadEvent reads the next event from the stream or returns an error.
4979	HTTPHandler streams server-sent events to a client.
4980	Add will append an Event to EventLog, setting its ID and timestamp.
4981	Replay will send events from EventLog to Subscriber's connection if their ID is greater than or equal to the subscriber's eventid.
4982	readKey reads a cryptographic key from the specified path.
4983	writeKey saves an ECDSA private key to a file in PEM format.
4984	anyKey reads or generates a key from a file.
4985	sameDir combines the directory of an existing file with a new filename.
4986	printAccount prints account details in a tabular format.
4987	tmpl renders a Go template to the specified writer with provided data.
4988	printUsage outputs usage information to a writer using a template.
4989	FromRequest extracts and validates client IP address from HTTP request headers or remote address.
4990	Execute Clear command using provided parameters.
4991	Do executes the disable command.
4992	Do executes the RemoveDOMStorageItem command with the given parameters.
4993	Do executes the command to set DOM storage item.
4994	Do executes the DeliverPushMessage command with the given parameters.
4995	Do executes the dispatch sync event command with given parameters.
4996	Execute Inspect Worker command using provided parameters in the given context.
4997	SetForceUpdateOnPageLoad updates page load settings using Chrome DevTools Protocol.
4998	Do executes the SkipWaiting command using the provided parameters.
4999	Execute the StartWorker command using the provided parameters in the given context.
5000	Do stops all workers using the CDP client.
5001	Do executes the stop worker command with the given parameters.
5002	Do executes the unregister command.
5003	Execute registration update command with parameters.
5004	Execute the bind command using the provided parameters.
5005	Do executes the unbind command.
5006	Error method returns formatted string describing exception details.
5007	Execute release animations command with parameters in the given context.
5008	Execute seek animations command using provided parameters.
5009	Execute SetPaused command using Chrome DevTools Protocol.
5010	Do executes the SetPlaybackRate command with the given parameters.
5011	Do executes the timing command with the given parameters.
5012	Execute a command to prepare for leak detection.
5013	Do executes the command to forcibly purge JavaScript memory.
5014	Do executes the command to set pressure notifications suppressed.
5015	Do simulates pressure notification with the given parameters.
5016	WithSamplingInterval updates SamplingInterval field of p.
5017	WithSuppressRandomness updates SuppressRandomness parameter in StartSamplingParams.
5018	Execute Start Sampling command using provided parameters.
5019	Do method executes sampling stop command.
5020	Do clears device orientation override.
5021	SetDeviceOrientationOverrideParams executes the device orientation override command.
5022	Execute command to start violations report generation.
5023	Do executes StopViolationsReport command.
5024	String returns the string representation of the modifier.
5025	WithNodeID sets the NodeID field p value.
5026	WithBackendNodeID sets the BackendNodeID field p value.
5027	WithObjectID sets the ObjectID field p value.
5028	WithFetchRelatives updates FetchRelatives parameter and returns updated params.
5029	Do executes the command to set the time domain with the given parameters.
5030	WithClipRect updates ClipRect field of ProfileSnapshotParams.
5031	Do executes the release snapshot command using the provided parameters.
5032	Execute the ClearObjectStore command using the provided parameters.
5033	Do executes delete database command using params.
5034	Do executes CommandDeleteObjectStoreEntries command.
5035	WithKeyRange updates KeyRange field p to new value.
5036	Do executes the command to set sampling interval with parameters.
5037	Do method executes a command using CDP protocol.
5038	WithCallCount sets CallCount field p's value.
5039	WithDetailed updates the Detailed field of p.
5040	Execute precise coverage command with parameters.
5041	Execute Start Type Profile command using Chrome DevTools Protocol.
5042	Do method executes a precise coverage command using CDP.
5043	Do executes the stop type profile command.
5044	Do executes the command to ignore certificate errors.
5045	Execute the command to add inspected heap object parameters in the given context.
5046	Do executes the garbage collection command using the provided context.
5047	WithSamplingInterval updates SamplingInterval field of p.
5048	Execute the StartTrackingHeapObjects command using the provided parameters in the given context.
5049	WithReportProgress updates ReportProgress in params.
5050	Do executes the StopTrackingHeapObjects command using the provided parameters.
5051	WithReportProgress updates ReportProgress field in TakeHeapSnapshotParams.
5052	Do executes the heap snapshot command with the given parameters.
5053	WithBrowserContextID sets the BrowserContextID field p value.
5054	Execute GrantPermissions command with parameters.
5055	WithBrowserContextID updates BrowserContextID in ResetPermissionsParams.
5056	Do executes the reset permissions command with given parameters.
5057	Do executes a crash command using the specified context.
5058	Do executes a command to crash GPU process.
5059	WithQuery updates the Query field p with the given query string.
5060	WithTargetID updates the TargetID field of p to targetID.
5061	Do executes the SetWindowBounds command with the given parameters.
5062	WithImage updates the Image field of SetDockTileParams.
5063	Do executes the SetDockTile command with the given parameters.
5064	Do executes DeleteCache command using CDP.
5065	Do executes command to delete entry using params.
5066	WithPathFilter updates the PathFilter parameter of RequestEntriesParams.
5067	Do discards search results using the specified parameters.
5068	Execute a command to focus using parameters in the given context.
5069	Do executes the command to mark undoable state.
5070	WithIncludeUserAgentShadowDOM updates p's IncludeUserAgentShadowDOM field and returns it.
5071	Do executes the redo command using the specified context.
5072	Execute command to remove attribute using provided parameters in context.
5073	Do executes the command to remove a node using CDP.
5074	Execute the command to request child nodes with parameters.
5075	WithNodeID updates the NodeID parameter p value.
5076	WithBackendNodeID sets the BackendNodeID field p value.
5077	WithExecutionContextID updates the ExecutionContextID field in ResolveNodeParams.
5078	Do executes the command to set attribute values.
5079	WithName updates the Name field in SetAttributesAsTextParams.
5080	Do executes the command to set attributes as text.
5081	Do executes the command to set file input files.
5082	Execute the SetInspectedNode command using the provided parameters in the given context.
5083	Do executes the command to set node value.
5084	Do executes the command to set outer HTML.
5085	Execute undo command using Chrome DevTools Protocol.
5086	Execute command to force pseudo state.
5087	Execute command to set effective property value for node.
5088	Execute the command to start rule usage tracking.
5089	Do executes the close command with parameters.
5090	Execute ClearDataForOrigin command with given parameters.
5091	Do executes a command to track cache storage for origin.
5092	Do executes the command to track IndexedDB for the origin.
5093	Execute the untrack cache storage command for the given origin.
5094	Execute the command to untrack IndexedDB for the specified origin.
5095	Execute hide highlight command using Chrome DevTools Protocol.
5096	Execute command to highlight frame in given context.
5097	WithNodeID sets the NodeID field p value.
5098	WithBackendNodeID updates BackendNodeID in HighlightNodeParams.
5099	WithObjectID sets the ObjectID field p's value.
5100	WithSelector updates the Selector field with the given value.
5101	Execute the Highlight Node command using the provided parameters.
5102	Execute the highlight quad command with the provided parameters in the given context.
5103	Execute the highlight rectangle command using the provided parameters.
5104	WithHighlightConfig updates the HighlightConfig field of SetInspectModeParams.
5105	Do executes the SetInspectMode command using the provided parameters.
5106	Do executes the command to set show ad highlights with parameters.
5107	WithMessage updates the Message field of p with the given message and returns p.
5108	Do executes the command to set paused in debugger message.
5109	Do executes the command to show debug borders.
5110	Do executes the command to set FPS counter visibility.
5111	ExecuteCommand sets show paint rects based on parameters.
5112	Execute the command to show scroll bottleneck rects using the provided parameters.
5113	Do executes the command to set show hit test borders.
5114	Do executes the command to set viewport size on resize.
5115	Do clears browser cache using Chrome DevTools Protocol.
5116	Do executes ClearBrowserCookies command using cdp.
5117	WithErrorReason updates the ErrorReason field p value.
5118	WithRawResponse updates the RawResponse field p value.
5119	WithURL updates the URL field of p to the given value.
5120	WithMethod updates the Method field of p to the specified value.
5121	WithPostData updates the PostData field of p to the given value.
5122	WithHeaders updates the Headers field p's value.
5123	WithAuthChallengeResponse updates AuthChallengeResponse field p value.
5124	Execute the intercepted request using Chrome DevTools Protocol.
5125	WithURL updates URL field of DeleteCookiesParams.
5126	WithDomain updates the Domain field of p to the given domain value.
5127	WithPath updates the Path field of DeleteCookiesParams.
5128	Do executes CommandDeleteCookies using CDP.
5129	WithConnectionType updates the ConnectionType field of EmulateNetworkConditionsParams.
5130	Do executes the emulate network conditions command using the provided parameters.
5131	Execute the Enable command using the provided parameters.
5132	WithUrls sets the Urls field p value.
5133	Do executes the replay XHR command with the given parameters.
5134	Do executes the command to set blocked URLs.
5135	Do executes the command to bypass service worker.
5136	Do executes the SetCacheDisabled command with the given parameters.
5137	WithURL updates the URL field of SetCookieParams instance.
5138	WithDomain updates the Domain field of SetCookieParams.
5139	WithPath updates Path field of SetCookieParams instance.
5140	WithSecure updates the Secure property of SetCookieParams and returns it.
5141	WithHTTPOnly sets the HTTPOnly field p value.
5142	WithSameSite updates the SameSite field of p with the given value and returns p.
5143	WithExpires updates the Expires field of p with the given value.
5144	Do executes the command to set cookies in the given context.
5145	Do executes the command to set data size limits for testing.
5146	Do executes the SetExtraHTTPHeaders command with the given parameters.
5147	Do executes the command to set request interception parameters.
5148	Do executes ClearDeviceMetricsOverride command using Execute method.
5149	Do clears geolocation override using Chrome DevTools Protocol.
5150	Execute resets the page scale factor using Chrome DevTools Protocol.
5151	Do executes the SetFocusEmulationEnabled command using the provided parameters.
5152	Do executes the CPU throttling rate command using the provided parameters.
5153	WithColor sets the Color field p value.
5154	ExecuteCommand sets default background color override.
5155	WithScale updates the Scale field in SetDeviceMetricsOverrideParams.
5156	WithDontSetVisibleSize sets the DontSetVisibleSize field p value.
5157	WithScreenOrientation updates ScreenOrientation parameter.
5158	Do executes the command to set device metrics override.
5159	Execute command to hide scrollbars based on parameters.
5160	SetDocumentCookieDisabled disables document cookie in Chrome DevTools Protocol.
5161	Do executes the SetEmitTouchEventsForMouse command using the provided parameters.
5162	Do executes the set emulated media command with the given parameters.
5163	WithLatitude updates the Latitude field of p to the given value.
5164	WithLongitude sets the Longitude field p's value.
5165	WithAccuracy updates Accuracy field in SetGeolocationOverrideParams.
5166	Do executes the SetGeolocationOverride command with the given parameters.
5167	Do executes the SetPageScaleFactor command using the provided parameters.
5168	Do executes the set script execution disabled command.
5169	WithMaxTouchPoints updates the MaxTouchPoints field in SetTouchEmulationEnabledParams.
5170	Do executes the SetTouchEmulationEnabled command with the given parameters.
5171	WithBudget updates the Budget field p's value.
5172	WithMaxVirtualTimeTaskStarvationCount updates the MaxVirtualTimeTaskStarvationCount parameter in SetVirtualTimePolicyParams.
5173	WithWaitForNavigation sets the WaitForNavigation field p value.
5174	WithAcceptLanguage sets the AcceptLanguage field p value.
5175	WithPlatform sets the Platform field p's value.
5176	Do executes the SetUserAgentOverride command using the provided parameters.
5177	Execute dispatches a key event command.
5178	Do executes the insert text command using the provided parameters.
5179	WithButtons updates the Buttons field of p with the given buttons value.
5180	Execute mouse event command with provided parameters.
5181	Do executes the dispatch touch event command with the given parameters.
5182	ExecuteCommand emulates touch from mouse event parameters.
5183	Execute the command to ignore input events using the provided parameters in the given context.
5184	Execute pinch gesture using Chrome DevTools Protocol.
5185	WithXOverscroll updates the XOverscroll parameter of SynthesizeScrollGestureParams.
5186	WithYOverscroll updates the YOverscroll parameter.
5187	Do executes the scroll gesture command using the provided parameters.
5188	Do executes the tap gesture synthesis command.
5189	Domain extracts the domain from method type.
5190	WithDepth updates the Depth field in GetEventListenersParams.
5191	Execute RemoveDOMBreakpoint command using CDP.
5192	WithTargetName sets the TargetName field p's value.
5193	Execute command to remove event listener breakpoint.
5194	Execute removes instrumentation breakpoint using Chrome DevTools Protocol.
5195	Execute removes the XHR breakpoint with the given parameters.
5196	Do executes the command to set a DOM breakpoint.
5197	Do executes the command to set event listener breakpoint.
5198	SetInstrumentationBreakpoint sets the instrumentation breakpoint using Chrome DevTools Protocol.
5199	ExecuteCommand executes the XHR breakpoint command.
5200	WithExecutor attaches an Executor to a parent context for use in operations requiring state management.
5201	Execute runs a method using the provided context and parameters.
5202	AttributeValue retrieves the value of a specified attribute from a node's attributes list.
5203	XPath generates a path to the node considering parent nodes and attributes.
5204	String converts a NodeType to its corresponding string representation.
5205	Do executes the command to set the sink to use.
5206	Do executes StartTabMirroring command using cdp Execute method.
5207	Do executes the stop casting command using the provided parameters.
5208	Execute the StartObserving command using the provided parameters.
5209	Execute the StopObserving command using the provided parameters in the given context.
5210	Do executes the command to set recording parameters.
5211	Do executes the ClearEvents command using the provided parameters.
5212	WithObjectID sets the ObjectID field p's value.
5213	WithArguments updates Arguments field p value.
5214	WithExecutionContextID sets the ExecutionContextID field p value.
5215	WithObjectGroup sets the ObjectGroup field p value.
5216	Do executes the discard console entries command.
5217	WithContextID updates the ContextID field of p.
5218	WithOwnProperties updates the OwnProperties field p's value.
5219	WithGeneratePreview updates GeneratePreview field in GetPropertiesParams.
5220	WithExecutionContextID sets the ExecutionContextID field p's value.
5221	WithObjectGroup updates ObjectGroup field to specified value.
5222	Execute ReleaseObject command using provided parameters in the given context.
5223	Do executes ReleaseObjectGroup command using cdp.
5224	Execute the command to run if waiting for debugger.
5225	Do executes the SetCustomObjectFormatterEnabled command with the given parameters.
5226	Execute command to set max call stack size for capture.
5227	Do executes the termination command using the given context.
5228	Execute the AddBinding command with the provided parameters.
5229	Execute RemoveBinding command using provided parameters in the given context.
5230	Do executes a command in the context.
5231	Execute records a clock sync marker using Chrome DevTools Protocol.
5232	WithBufferUsageReportingInterval updates BufferUsageReportingInterval in StartParams.
5233	WithNoDisplayUpdates updates the NoDisplayUpdates field p value.
5234	WithScreenshot sets the Screenshot field p value.
5235	Do executes the BringToFront command using the Chrome DevTools Protocol.
5236	WithClip sets the Clip field p value.
5237	WithFromSurface updates the FromSurface field of p to the specified value.
5238	WithWorldName updates the WorldName field in CreateIsolatedWorldParams.
5239	WithGrantUniveralAccess sets the GrantUniveralAccess field p value.
5240	Execute ResetNavigationHistory command using Chrome DevTools Protocol.
5241	WithPromptText updates the PromptText field of HandleJavaScriptDialogParams.
5242	Do executes the CommandHandleJavaScriptDialog command using the provided parameters.
5243	WithReferrer updates the Referrer field in NavigateParams.
5244	WithTransitionType updates TransitionType in NavigateParams.
5245	WithFrameID updates FrameID field of p with new value.
5246	NavigateToHistoryEntry executes the command to navigate to the history entry.
5247	WithLandscape updates the Landscape field in PrintToPDFParams.
5248	WithDisplayHeaderFooter updates the DisplayHeaderFooter parameter's value.
5249	WithPrintBackground updates the PrintBackground parameter of the PrintToPDFParams instance.
5250	WithScale updates the Scale parameter of PrintToPDFParams.
5251	WithPaperWidth updates PaperWidth field in PrintToPDFParams.
5252	WithPaperHeight updates PaperHeight in PrintToPDFParams.
5253	WithIgnoreInvalidPageRanges updates IgnoreInvalidPageRanges field in PrintToPDFParams.
5254	WithFooterTemplate updates the FooterTemplate field p value.
5255	WithPreferCSSPageSize updates PreferCSSPageSize field in PrintToPDFParams.
5256	WithScriptToEvaluateOnLoad updates the ScriptToEvaluateOnLoad field in ReloadParams.
5257	Do executes the reload command using the provided parameters.
5258	Execute removes the script to evaluate on new document.
5259	Do executes the screencast frame acknowledgment command.
5260	Do executes the SetAdBlockingEnabled command with the given parameters.
5261	Do executes the SetBypassCSP command using the provided parameters.
5262	Do executes the set font families command with the given parameters.
5263	Do executes the set font sizes command with given parameters.
5264	Do executes the command to set document content.
5265	WithDownloadPath updates DownloadPath parameter in params.
5266	Do executes the command to set download behavior.
5267	Do executes the SetLifecycleEventsEnabled command with the given parameters.
5268	WithFormat updates the Format field of StartScreencastParams to the specified format.
5269	WithMaxWidth updates the MaxWidth parameter of StartScreencastParams.
5270	WithMaxHeight updates the MaxHeight parameter.
5271	WithEveryNthFrame sets EveryNthFrame field p value.
5272	Execute start screencast command using provided parameters.
5273	Do executes the stop loading command in the given context.
5274	Do executes the command to set web lifecycle state.
5275	Do executes the StopScreencast command using cdp.Execute.
5276	Do executes the command to set produce compilation cache.
5277	Execute the command to add compilation cache using the provided parameters in the given context.
5278	Do clears the compilation cache using the specified command.
5279	WithGroup sets the Group field p value.
5280	Do executes the WaitForDebugger command using the Chrome DevTools Protocol.
5281	Execute the activate target command using the provided parameters.
5282	WithBindingName sets the BindingName field p value.
5283	ExecuteCommand runs the command with the given parameters.
5284	WithBrowserContextID updates the BrowserContextID field of CreateTargetParams.
5285	WithSessionID updates the SessionID field p's value.
5286	Do executes the detach command using the provided parameters.
5287	Do executes the command to dispose of a browser context.
5288	WithSessionID updates the SessionID field in SendMessageToTargetParams.
5289	SendMessageToTarget sends a message to the target using the specified parameters.
5290	Do executes the command to set auto-attach parameters.
5291	Do executes the command to set discover targets.
5292	Do executes the command to set remote locations.
5293	WithPatterns updates Patterns field in EnableParams.
5294	WithHandleAuthRequests updates HandleAuthRequests in EnableParams.
5295	Execute the FailRequest command using the provided parameters in the given context.
5296	WithBody sets the Body field p value.
5297	WithResponsePhrase updates the ResponsePhrase field of p.
5298	Execute the fulfillment request command using the provided parameters.
5299	WithURL sets the URL field p value.
5300	WithMethod updates the Method field in ContinueRequestParams and returns it.
5301	WithPostData updates the PostData field of ContinueRequestParams.
5302	WithHeaders updates Headers field of p with new value.
5303	Do executes the continue request command.
5304	Do executes the continue with auth command using the provided parameters.
5305	Do continues execution to a specific location using the provided parameters.
5306	WithIncludeCommandLineAPI updates the IncludeCommandLineAPI field of p.
5307	Execute Pause command using Chrome DevTools Protocol.
5308	Execute PauseOnAsyncCall command with given parameters.
5309	Execute command to remove breakpoint using provided parameters.
5310	Execute the resume command using the provided context.
5311	Do executes the command to set async call stack depth.
5312	Do executes the command to set blackbox patterns.
5313	Do executes the command to set blackboxed ranges.
5314	WithURL sets the URL field p value.
5315	WithURLRegex sets URLRegex field p value.
5316	WithScriptHash updates the ScriptHash field of SetBreakpointByURLParams.
5317	WithColumnNumber updates ColumnNumber in SetBreakpointByURLParams.
5318	WithCondition updates the Condition field of SetBreakpointOnFunctionCallParams.
5319	Activate breakpoints based on the provided parameters in the given context.
5320	SetPauseOnExceptions sets pause on exceptions based on the parameters.
5321	Do executes the command to set return value with given parameters.
5322	WithDryRun sets the DryRun field p value.
5323	Do executes the SetSkipAllPauses command with the given parameters.
5324	Do executes the command to set variable values.
5325	WithBreakOnAsyncCall updates the BreakOnAsyncCall field of StepIntoParams.
5326	Execute the StepInto command using the provided parameters in the given context.
5327	Do executes a step-out command using the Chrome DevTools Protocol.
5328	Do executes a step-over command using the Chrome DevTools Protocol.
5329	Listen method calls ListenF if it's not nil.
5330	ListenClose calls a callback if set.
5331	Connected triggers the callback if set
5332	Disconnected calls the DisconnectedF callback if it exists
5333	Invoke callback function `OpenedStreamF` if it exists.
5334	ClosedStream invokes a callback for a closed stream.
5335	WithNoDial adds a value to a context indicating no dialing is needed.
5336	GetNoDial checks if no dialing is enabled and returns the reason
5337	WithDialPeerTimeout adds a dial peer timeout to a context.
5338	Open opens a database connection using the underlying driver. It wraps the connection with additional functionality based on the interfaces it implements.
5339	Prevpos returns the previous valid position in the ring buffer or -1 if invalid.
5340	Last returns the index of the last item in FixedSizeRingBuf.
5341	DeleteMostRecentBytes removes the most recent bytes from FixedSizeRingBuf based on n.
5342	NewFloat64RingBuf initializes and returns a Float64RingBuf with specified capacity.
5343	TwoContig splits the buffer into two contiguous slices.
5344	Earliest returns the earliest value from the buffer
5345	Values will concatenate two contiguous slices of float64 values from a buffer and return them.
5346	NewAtomicFixedSizeRingBuf creates a new ring buffer with fixed-size views.
5347	Reset clears buffer state by locking, resetting pointers, and counters.
5348	NewPointerRingBuf creates and initializes a ring buffer with a specified capacity.
5349	TwoContig returns two contiguous slices from PointerRingBuf
5350	NumPage returns the total number of pages from the document's trailer.
5351	Font retrieves a Font resource from Page's resources using a key.
5352	Width calculates the width of a character based on its Unicode code point within the font's defined range.
5353	Encoder returns the text encoding based on font properties.
5354	Interpret executes a stream of operations on a stack using a custom tokenizer and handler function.
5355	Open opens a file and returns a Reader with its size or an error.
5356	NewReader creates a new encrypted reader from the given file and size.
5357	NewReaderEncrypted checks if input is a valid encrypted PDF file and returns a Reader object or an error.
5358	Trailer returns the trailer value from the Reader.
5359	Kind returns the type of a Value.
5360	newBuffer creates a buffer from a reader with specified offset.
5361	Paginate method calculates pagination information based on total records and requested page details.
5362	CascadeDelete will recursively delete documents based on cascading configurations.
5363	cascadeDeleteWithConfig updates or pulls references based on relation type.
5364	cascadeSaveWithConfig updates documents in MongoDB based on cascading configurations.
5365	MapFromCascadeProperties constructs a nested map from document properties using dot notation.
5366	Connect establishes a database connection.
5367	lowerInitial converts the first character of a string to lowercase.
5368	Find method retrieves data from MongoDB collection based on query.
5369	RawInformationQuery sends an IQ query and returns the ID.
5370	NewClient creates a new Client instance with TLS or plain connection based on configuration.
5371	Close closes the Client's connection if it exists; otherwise, does nothing.
5372	startTLSIfRequired initiates TLS connection if required based on features and options.
5373	startStream initiates XML stream with optional debugging and parses server's response features.
5374	IsEncrypted checks if the client's connection is encrypted using TLS.
5375	Recv processes incoming XMPP stanzas and returns corresponding Chat or Presence objects.
5376	Send sends a chat message using XML encoding over a connection.
5377	SendOrg sends an organization string to the client's connection.
5378	SendKeepAlive sends a keep-alive message over the client's connection.
5379	SendHtml sends HTML message through client connection
5380	Extracts the next start element from an XML decoder or returns an error.
5381	JoinProtectedMUC sends a presence request to join a protected MUC chat room with optional history settings.
5382	LeaveMUC sends an unavailable presence message to the specified JID.
5383	AttachBuffer attaches a buffer to the message with specified filename, data, and inline status.
5384	Attach attaches a file to a message.
5385	Inline attaches file to message as inline attachment.
5386	AddHeader appends a new header to Message's Headers list.
5387	Tolist concatenates To, Cc, and Bcc fields into a single list.
5388	Bytes generates a byte slice representing an email message.
5389	Send sends an email using the provided SMTP address, authentication, and message details.
5390	GetHeader retrieves the decoded header value by name
5391	GetHeaderValues retrieves all values for a given header name, decoding each. Returns empty slice if header does not exist.
5392	SetHeader updates envelope's header with UTF-8 encoded values.
5393	AddHeader adds a header to e with the given name and UTF-8 encoded value, returning an error if the name is empty.
5394	DeleteHeader removes a header from the Envelope.
5395	AddressList retrieves a list of email addresses from the envelope's headers, handling various parsing scenarios and errors.
5396	Clone creates a deep copy of the envelope, including all nested objects.
5397	ReadEnvelope reads an envelope from a reader by parsing its MIME parts and converting them into an Envelope object.
5398	EnvelopeFromPart constructs an Envelope from a Part, handling multipart, binary, and text bodies.
5399	parseTextOnlyBody processes the content of a part to extract either plain text or HTML, handling character encoding conversions.
5400	parseMultiPartBody extracts text, HTML, attachments, inlines, and other parts from a multipart envelope.
5401	matchHTMLBodyPart checks if part content type is HTML and disposition is not attachment.
5402	ensureCommaDelimitedAddresses normalizes whitespace in email addresses, ensuring commas separate them within quoted or domain parts.
5403	Date sets the date field of the MailBuilder instance.
5404	From sets the from address with name and addr.
5405	Subject sets the mail's subject.
5406	To appends email address to MailBuilder's recipients list.
5407	ToAddrs updates the recipient addresses in the mail builder.
5408	CC appends a new email address to the cc list in MailBuilder.
5409	CCAddrs adds email addresses to the mail builder's carbon copy list.
5410	ReplyTo sets the replyTo field to a new mail address.
5411	Header adds a new header to the MailBuilder instance.
5412	AddAttachment adds a new attachment to the mail builder.
5413	AddFileAttachment reads a file and adds its contents as an attachment to the mail.
5414	AddInline adds an inline part to the mail builder with specified content type, file name, and content ID.
5415	Equals checks if two mail builders are identical using deep equality.
5416	Encode implements PartEncoder.Encode.
5417	encodeHeader encodes part headers using specified transfer encodings and formats them into a buffer.
5418	encodeContent encodes Part's content based on specified transfer encoding, handling base64 and quoted formats.
5419	selectTransferEncoding determines the most appropriate transfer encoding based on the content's binary characteristics and whether to quote line breaks.
5420	setParamValue updates map value if not empty
5421	NewBase64Cleaner initializes a new Base64 cleaner with the given reader.
5422	decodeToUTF8Base64Header converts base64-encoded header values to UTF-8.
5423	parseMediaType parses a content type string, correcting common errors, and extracts parameters while identifying invalid ones.
5424	fixMangledMediaType repairs malformed media types.
5425	detectMultipartMessage checks if a message has multiple parts based on its content type.
5426	detectBinaryBody checks if a part's body is binary based on headers, returning true if it is.
5427	BreadthMatchFirst uses a queue to breadth-first search parts using a given matcher. It returns the first matching part or nil if no match is found.
5428	BreadthMatchAll finds all parts matching a given matcher in a breadth-first search.
5429	DepthMatchFirst traverses the part tree depth-first using the given matcher to find a matching part.
5430	DepthMatchAll finds all parts matching a given matcher in a tree structure.
5431	ToASCII converts a string to its ASCII representation by normalizing Unicode characters, removing non-spacing marks, mapping special Latin characters, and then re-normalizing.
5432	NewPart creates a new Part with the specified content type.
5433	AddChild appends child to Part, handling circular references and updating parent pointers.
5434	TextContent checks if part's content type indicates text.
5435	setupHeaders reads and processes HTTP headers for a MIME part, setting content type, disposition, boundary, and content ID.
5436	setupContentHeaders processes and sets content headers based on media parameters.
5437	convertFromDetectedCharset converts input reader's charset based on detection or stated charset.
5438	Clone creates a deep copy of a part with updated parent references.
5439	ReadParts reads parts from a reader, parsing headers and handling multipart content accordingly.
5440	parseParts recursively parses MIME parts and their headers, handling nested structures and storing epilogues.
5441	UUID generates a random UUID string.
5442	NewQPCleaner initializes a QP cleaner with a reader.
5443	Error method returns formatted string representation of the error based on severity.
5444	addError appends an error with formatted details to part's errors list.
5445	addWarning appends a warning with formatted details to part's errors.
5446	Wrap wraps strings into lines no longer than max characters, breaking at spaces or tabs.
5447	ConvertToUTF8String converts byte array to UTF-8 string based on specified charset.
5448	JoinAddress concatenates email addresses into a single string
5449	Printf formats and writes the text to markdown.
5450	EnvelopeToMarkdown converts an email envelope to markdown format.
5451	FormatPart recursively formats MIME parts with indentation.
5452	newBoundaryReader creates a boundary reader with specified boundary and buffer.
5453	Read will read from an io.Reader, buffer data, and detect boundaries based on newline prefixes. If a boundary is found, it reads up to that point; otherwise, it reads a safe distance. Handles incomplete boundaries and unexpected errors gracefully.
5454	Next reads the next part from the boundary, handling delimiters and terminators.
5455	Parse extracts an object from byte buffer starting at specified offset.
5456	Assign assigns a value to a symbol based on its type.
5457	NewRClient creates a new RClient with default authentication.
5458	NewRClientWithAuth creates and authenticates a new RClient.
5459	Register adds a custom generator for a type.
5460	Fuzz modifies fields of struct pointers by setting them to random values.
5461	findFakeFunctionFor returns a function based on the input string from allGenerators().
5462	Apply applies each Option to Options, returning the first error encountered.
5463	ToOption converts options to a functional option.
5464	waitThenClose waits for context cancellation then closes channel safely.
5465	send sends a QueryEvent through a channel or waits for cancellation.
5466	NewMovingAverage creates a new moving average based on input ages.
5467	Set updates the variable's value and increments count after warmup samples are reached.
5468	calcKeys50 generates multiple cryptographic keys using PBKDF2 algorithm based on password and salt.
5469	getKeys retrieves encryption keys based on buffer content or cache.
5470	checkPassword validates a password against a hash.
5471	parseFileEncryptionRecord parses encryption record from file block header.
5472	parseEncryptionBlock reads encryption block data from buffer.
5473	newArchive50 initializes a new archive reader with a buffer and password.
5474	Read will read from the cipherBlockReader's underlying source and buffer the decrypted data until it can satisfy the requested amount or encounters an error.
5475	ReadByte reads a single byte from the cipherBlockReader, handling buffer refills and errors gracefully.
5476	newCipherBlockReader creates a reader for decrypting data using a block cipher.
5477	newAesDecryptReader creates a new reader for AES CBC decryption.
5478	limitByteReader limits the number of bytes read from the reader to 'n'.
5479	Mode determines the file mode based on directory status, OS, and attributes.
5480	nextBlockInFile reads the next block in the file or returns an error.
5481	next reads the next file block header from packed file reader, skipping blocks until the first valid block is found.
5482	Reads data from a packed file, handling blocks and EOF.
5483	Reads data from the underlying reader; validates checksum if present; returns bytes read or error.
5484	Next will read the next file header, handle decryption and compression, and limit reading if necessary.
5485	NewReader creates a new reader from an input source and password, handling buffering and initialization.
5486	OpenReader opens a ReadCloser using name and password, returning it or an error.
5487	getV3Filter parses bytecode to either return a standard filter or execute a custom VM filter.
5488	init initializes the decoder's state based on the reader and reset flag.
5489	readBlockHeader reads a block header and initializes decoding based on its value.
5490	readCodeLengthTable decodes Huffman codes from a bit reader and updates the code length table accordingly.
5491	shrinkStates adjusts states slice based on given size, managing memory blocks efficiently
5492	expandStates adjusts the state array by adding or resizing based on current size.
5493	pushByte updates state based on byte position
5494	succByte calculates the successor byte based on input index
5495	succContext returns a new context based on the given index and allocator states.
5496	calcAes30Params computes AES-30 parameters using a passphrase and salt.
5497	parseDosTime converts a DOS timestamp into a Go time.Time object
5498	decodeName decodes a byte buffer containing a UTF-16 encoded string.
5499	readExtTimes reads extended timestamps from a file block header.
5500	readBlockHeader reads a block header from archive15, handling encryption, CRC checks, and extracting data size information.
5501	newArchive15 initializes a reader for handling encrypted archive files.
5502	readFilter5Data reads bits from a reader to form an integer
5503	writeByte adds a byte to the window's buffer and updates the write position.
5504	copyBytes copies bytes from window's buffer while handling overflow.
5505	read reads bytes from a window buffer into a slice.
5506	queueFilter queues a filter block while validating its position and ensuring it does not exceed maximum queued filters.
5507	processFilters applies filters to input data sequentially, adjusting offsets and handling buffer sizes accordingly.
5508	fill reads data into the buffer, decodes it, and queues filters. Not thread-safe.
5509	Read function processes filters and reads data from buffer or window, updating offsets and totals accordingly.
5510	readFull reads from reader until buffer is full or EOF.
5511	findSig reads from a buffered reader to identify and return the version of a signature or an error if not found within a maximum size limit.
5512	execute runs commands sequentially, updating the VM state based on each instruction.
5513	newVM creates a new VM instance from memory buffer.
5514	limitBitReader constrains the number of bits read from br to n, returning an error if the limit is exceeded.
5515	readUint32 reads a variable-length unsigned integer from a bit reader.
5516	step3 checks for and removes a specific suffix from a word if present.
5517	Stem reduces word to its base form, handling exceptions and stopwords.
5518	step6 removes accents from specific characters in a word based on non-vowel suffixes.
5519	step5 removes a specific suffix from a snowball word.
5520	step2a removes certain suffixes from words based on specific conditions.
5521	step4 removes unnecessary characters from a word based on specific conditions.
5522	Stem will apply stemming to the given word based on the specified language, optionally removing stop words.
5523	step1c applies specific transformation rules to a word's suffix 'y' or 'Y'.
5524	step3 applies word-suffix rules based on R1 and R2 positions, modifying the word accordingly or returning false if conditions aren't met.
5525	function to check if word is a stopword.
5526	capitalizeYUI capitalizes 'y', 'u', and 'i' in a given word based on their neighboring vowels.
5527	step2 processes word suffixes to transform them based on specific rules.
5528	step3 checks and removes specific suffixes from a word, applying additional rules based on certain conditions.
5529	step0 removes possessive suffixes from words using Snowball stemming.
5530	VnvSuffix identifies the suffix in a word based on vowel transitions.
5531	step1 removes specific suffixes from SnowballWord based on certain conditions.
5532	step2a applies specific rules to modify a SnowballWord based on its suffixes.
5533	removePerfectiveGerundEnding checks and removes specific suffixes from a word based on certain conditions.
5534	removeAdjectivalEnding removes adjectives and associated participles from a word using snowball stemming rules.
5535	step2b removes specific suffixes from a word based on certain conditions.
5536	step4 processes words, modifying them based on specific rules and returns whether any changes were made.
5537	step5 applies rules to modify a word based on its ending characters.
5538	Stem reduces word to its base form, ignoring small and stop words
5539	Stem normalizes and reduces words to their base form, optionally removing short words and stopwords.
5540	function to check if word is a stopword.
5541	function checks if word is a stop word based on predefined list.
5542	New initializes a SnowballWord from a string.
5543	RemoveLastNRunes removes the last n runes from SnowballWord and resets R1R2.
5544	resetR1R2 resets R1start, R2start, RVstart to rsLen if they exceed it.
5545	This code snippet defines a method `slice` for a struct `SnowballWord`, which returns a substring of its rune slice `RS` from `start` to `stop`, ensuring bounds are respected.
5546	FitsInR1 checks if word fits within R1 range.
5547	FitsInR2 checks if a word fits within a specified range in R2.
5548	FitsInRV checks if a word fits within a specified range.
5549	FirstPrefix finds the first matching prefix in a list of prefixes.
5550	HasSuffixRunes checks if the word has the given suffix runes at the end.
5551	FirstSuffixIfIn checks for the first suffix within specified positions.
5552	RemoveFirstSuffixIfIn checks if any suffix exists at startPos and removes it, returning the suffix and its runes. If no suffix exists, it returns empty values.
5553	RemoveFirstSuffix removes the first matching suffix from the word and returns it along with its rune representation. If no suffix matches, it returns an empty string and nil.
5554	FirstSuffix returns the first matching suffix from a list within a word's rune slice.
5555	preprocess cleans and normalizes a word using snowball stemming rules.
5556	step0 checks for specific suffixes and applies transformations based on conditions.
5557	step1b applies specific transformations to a word based on suffixes and vowel presence.
5558	step2b checks for specific suffixes in RV and deletes them based on conditions.
5559	capitalizeYs capitalizes 'y' to 'Y' in specific positions within a word.
5560	uncapitalizeYs converts all uppercase 'Y's to lowercase 'y's in a SnowballWord.
5561	stemSpecialWord reduces special words to their stems.
5562	isShortWord determines if a word is short based on its R1 start position and ending syllable.
5563	step1a applies stemming rules to words based on their suffixes.
5564	Store key-value pairs for current goroutine.
5565	Get retrieves data associated with key for the current goroutine; returns nil if no data exists.
5566	Cleanup removes data associated with the current goroutine ID
5567	getValues retrieves current goroutine's values safely.
5568	These functions manage concurrent data access by locking and unlocking data structures.
5569	unlinkGRs deletes the current goroutine ID from data while holding the lock.
5570	AppUri constructs the URI for the given app name and path using the provided configuration.
5571	CurlAppWithTimeout executes an application curl command with specified configuration, application name, path, timeout, and arguments, returning the result as a string.
5572	CurlApp invokes AppCurler's CurlAndWait method.
5573	CurlAppRoot fetches the root URL of the specified application using the provided configuration.
5574	GetTags extracts tags from a string based on a prefix and optional terminators
5575	GetTagsAsUniqueStrings retrieves unique strings from tags extracted with a given prefix and optional terminator.
5576	isTerminator checks if the rune matches any terminator or is non-printable/whitespace.
5577	uniquify removes duplicates from a list of strings, returning only unique elements.
5578	New returns a Gin middleware that applies location settings to requests.
5579	Get retrieves URL value from gin context using key.
5580	GenerateRSAKeyPair generates RSA key pair with specified bit size using given source reader. If bits less than 512 returns error.
5581	Verify checks data against signature using RSA PKCS1v15.
5582	Encrypt method applies PKCS1v15 encryption using RsaPublicKey.
5583	Sign signs the message using RSA private key with SHA-256 hash.
5584	GetPublic returns the public key from the RSA private key.
5585	Decrypt uses RSA to decrypt data.
5586	UnmarshalRsaPrivateKey decodes a PKCS#1-formatted RSA private key from bytes.
5587	GenerateKeyPair generates a private and public key pair using the specified type and bit size.
5588	GenerateKeyPairWithReader generates a key pair based on the specified type using the given reader.
5589	GenerateEKeyPair generates an elliptic curve key pair and returns public key, shared key generator, and error.
5590	UnmarshalPublicKey converts byte data to a public key using protocol buffer unmarshalling and type-specific handlers.
5591	MarshalPublicKey converts a public key to a protobuf message and then marshals it to bytes.
5592	UnmarshalPrivateKey converts private key data to a PrivKey object.
5593	MarshalPrivateKey converts a private key to protobuf format.
5594	KeyEqual checks if two keys are equal by comparing their byte representations and error states.
5595	GenerateECDSAKeyPair generates an ECDSA key pair using the specified curve and source.
5596	GenerateECDSAKeyPairWithCurve creates an ECDSA key pair using the specified curve and source reader, returning the private and public keys along with any errors encountered.
5597	ECDSAKeyPairFromKey generates PrivKey and PubKey from ecdsa.PrivateKey.
5598	UnmarshalECDSAPrivateKey deserializes ECDSA private key data.
5599	UnmarshalECDSAPublicKey deserializes ECDSA public key from data.
5600	Equals checks if two ECDSA private keys have the same D value.
5601	Sign computes the ECDSA signature for the given data.
5602	Equals checks if two ECDSA public keys are equal based on their X and Y coordinates.
5603	Verify checks if the signature matches the data using ECDSA.
5604	GenerateSecp256k1Key creates new secp256k1 private and public keys.
5605	UnmarshalSecp256k1PrivateKey deserializes secp256k1 private key data.
5606	UnmarshalSecp256k1PublicKey parses secp256k1 public key data.
5607	Equals checks if two private keys are equal by comparing their values.
5608	Sign computes the signature of data using secp256k1 private key.
5609	Equals checks if two Secp256k1 public keys are equal.
5610	Verify checks if a signature matches data using ECDSA.
5611	Raw extracts bytes from Ed25519PrivateKey.
5612	Sign method generates signature for given message using Ed25519 algorithm.
5613	Equals checks if two Ed25519 public keys are equal. Returns true if they match. Safe to use on nil values. If key is nil, defaults to false comparison.
5614	Verify checks Ed25519 signature validity.
5615	UnmarshalEd25519PublicKey parses Ed25519 public key data.
5616	UnmarshalEd25519PrivateKey parses raw ed25519 private key data, removing any redundant public key if present. Returns parsed private key or error.
5617	EditScriptForStrings generates an edit script for transforming source to target using specified options
5618	EditScriptForMatrix generates an edit script for a given matrix using specified options.
5619	WriteMatrix prints formatted alignment matrix to writer.
5620	New creates a new Lockfile instance using an absolute path, returning an error if the path is not absolute.
5621	GetOwner retrieves the owner process of a lockfile.
5622	TryLock attempts to acquire a lock on a file, creating a temporary lock file and linking it to the target file. It handles existing locks, cleans up stale files, and retries if necessary.
5623	Unlock removes lockfile if owned by current process.
5624	NewBase initializes a new base object with optional configurations.
5625	Sets fallback logger or shuts it down if nil.
5626	AddLogger manages loggers in Base, handling initialization and shutdown based on state.
5627	LogWithTime logs messages with timestamps and attributes.
5628	Log records a message at a specified level with attributes and additional arguments.
5629	Warnm logs a warning message using the provided attributes and format string.
5630	NewTemplateWithFuncMap creates templates with custom functions for different log levels
5631	Execute renders template based on message level and color settings.
5632	NewTemplateMsg constructs a new TemplateMsg instance with specified attributes.
5633	NewLogAdapterFor creates a LogAdapter with optional attributes
5634	SetAttr updates la.attrs with the given key-value pair.
5635	LogWithTime logs a message with a timestamp and attributes at a specified level, merging additional attributes if necessary.
5636	Log method in LogAdapter handles logging based on level and attributes.
5637	Dbgm calls Debugm on LogAdapter.
5638	NewAttrsFromMap creates a new Attrs instance from a given map of attributes.
5639	NewAttrsFromAttrs merges multiple Attrs instances into a single instance.
5640	MergeAttrs combines attributes from another Attrs object, updating existing entries or adding new ones.
5641	SetAttr updates the attribute value for a given key, handling function values by storing their type strings.
5642	GetAttr retrieves an attribute value using a key.
5643	RemoveAttr deletes the attribute identified by key from Attrs.
5644	Attrs locks and retrieves attributes using a hash.
5645	Debugm logs a message with attributes using the current default logger.
5646	Infom logs a message with attributes using curDefault's Infom method.
5647	Warningm calls curDefault.Warningm with given attributes, message, and arguments.
5648	Errm formats and returns an error message using the provided attributes and arguments.
5649	Errorm constructs an error message using attributes and format arguments, then returns it.
5650	Fatalm logs a fatal error message with attributes.
5651	Dief logs a message and exits with a given code.
5652	Diem logs an error message with optional arguments using a default logger
5653	ToLogLevel converts a string level to a LogLevel enum, returning the corresponding value or an error for unknown levels.
5654	CallErr executes a function returning an error safely via a channel.
5655	New creates a StackdriverHook with optional configurations; returns an error if required settings are missing.
5656	Fire logs the entry using StackdriverHook.
5657	Levels sets log levels for StackdriverHook.
5658	ProjectID returns an Option to set the projectID on a StackdriverHook.
5659	EntriesService sets up StackdriverHook with logging.EntriesService.
5660	LoggingService configures StackdriverHook with logging entries from service.
5661	ErrorService configures StackdriverHook with an error service option.
5662	HTTPClient configures StackdriverHook with logging and error reporting services using provided http.Client.
5663	MonitoredResource sets the monitored resource for StackdriverHook.
5664	ErrorReportingLogName returns an Option to set the error reporting log name.
5665	Labels returns an Option to set labels on a StackdriverHook.
5666	PartialSuccess sets the partialSuccess field of StackdriverHook to the specified boolean value.
5667	GoogleComputeCredentials configures StackdriverHook with credentials from the specified service account, ensuring it has the required scopes.
5668	Codec's NewEncoder creates an encoder using its Emitter for writing.
5669	Codec's NewDecoder creates and returns a Decoder using its NewParser method on the given io.Reader.
5670	Codec's NewStreamEncoder creates a new StreamEncoder using its Emitter.
5671	Codec's NewStreamDecoder creates and returns a new StreamDecoder using its parser on the given reader.
5672	Register adds a codec to Registry for a given mimetype.
5673	Unregister removes a MIME type from the registry.
5674	Lookup retrieves a codec from the registry using its MIME type.
5675	Codecs returns a copy of the registry's codecs mapping.
5676	Type extracts the uppercase prefix from the error message.
5677	Install registers an adapter for a given type and clears the struct cache.
5678	Adapter will return the registered adapter for the given type, or nil if not found.
5679	AppendDuration formats a time duration as a string.
5680	fmtInt converts an unsigned integer to its decimal string representation.
5681	NewDecoder creates a new Decoder using a parser from an io.Reader.
5682	NewStreamDecoder creates a StreamDecoder from an input stream.
5683	Unmarshal decodes JSON data from bytes into a Go value using a pool of unmarshalers.
5684	String returns the string representation of the type.
5685	zeroValueOf retrieves the zero value for a given type from cache or computes it.
5686	NewValueParser creates a ValueParser instance initialized with the given value.
5687	ParseTag extracts key-value pairs from a string to construct a Tag object.
5688	NewEncoder creates and returns an object encoder using the specified writer.
5689	NewStreamEncoder creates a new stream encoder using an emitter for writing to an io.Writer.
5690	NewPrettyEncoder creates a pretty-printing encoder for writing to an io.Writer.
5691	NewPrettyStreamEncoder creates a pretty stream encoder for writing to an io.Writer.
5692	Marshal converts a Go value to its JSON representation.
5693	NewEncoder creates an Encoder with a non-nil Emitter or panics.
5694	EncodeArray encodes an array using a function, handling key emission and errors.
5695	EncodeMap encodes a map using the specified encoder function.
5696	NewStreamEncoder creates and returns a StreamEncoder using an Emitter, ensuring it's not nil.
5697	Open sets up stream encoder with max count or returns error.
5698	Close closes the encoder's stream if not already closed.
5699	Encode serializes v using e's Encoder, checking limits and emitting array next if necessary.
5700	newStructType creates a structType for the given type and caches it. It populates fields and skips non-exported ones.
5701	lookup retrieves or creates a struct type entry in the cache.
5702	clear empties the cache store using mutex locking
5703	CheckUint64Bounds checks if v exceeds max and returns an error if so, indicating overflow for type t.
5704	CheckInt64Bounds validates if v is within the specified bounds for its type and returns an error if it exceeds them.
5705	NewDecoder initializes a Decoder with the given Parser, panicking if nil.
5706	Decode decodes values using a decoder.
5707	DecodeArray decodes array values using a parser and a callback function.
5708	DecodeMap decodes a map using a provided function
5709	NewStreamDecoder creates a new decoder using a given parser.
5710	Len returns remaining bytes in StreamDecoder.
5711	Err returns the decoding error or nil if no error occurred.
5712	Decode reads and parses data into a given variable, handling errors and updating counters accordingly.
5713	Encoder creates a new StreamEncoder based on parsed type.
5714	parse LOGFLAGS env var to set logging flags
5715	LevelFromString converts a string to a corresponding log level.
5716	NewBackend initializes a new Backend with writer w and optional options.
5717	callsite retrieves the caller's file name and line number based on the specified flag.
5718	print logs messages with timestamp, level, tag, and arguments based on backend flags.
5719	Logger creates a new logger instance for a given subsystem.
5720	Trace logs messages at the trace level if enabled.
5721	Tracef logs a trace message if the level allows it.
5722	Debug logs messages at the debug level or higher.
5723	Debugf logs debug messages if the level allows.
5724	Info logs informational messages if the level allows.
5725	Infof logs informational messages if the level allows.
5726	Warn logs warning messages if the current level allows it.
5727	Warnf logs a warning message if the level allows.
5728	Error logs messages at level error or higher.
5729	Errorf logs error messages at or above the error level.
5730	Critical logs critical messages if level allows.
5731	Criticalf logs critical messages if level allows.
5732	Level retrieves the current logging level from the slog instance.
5733	SetLevel updates the logging level atomically.
5734	Concat combines two permissions into a new permission.
5735	HasPermission checks if a user has a specific permission based on their roles.
5736	ConcatPermissioner combines multiple permissioners into a single one.
5737	HasPermission checks if all Permissioner instances have the specified permission mode and roles.
5738	Register adds or updates a Checker for a Role.
5739	NewPermission initializes a new permission object with the given role.
5740	Get will return checker for given name, if not found returns false.
5741	isPtrFromHeap checks if the address points to a heap object.
5742	IsPtr checks if a given address points to a pointer within the process's heap or modules.
5743	FindObject method retrieves an object's address and size from process heap information.
5744	ForEachObject iterates over objects in pages, applying a function until it returns false.
5745	ForEachRoot applies a function to each root in process globals and goroutine frames, stopping if false is returned.
5746	Addr converts object to address.
5747	Size retrieves heap size of given object
5748	Find type and reference count for object using heap.
5749	applies a function to each root pointer in a process
5750	edges1 traverses the object graph starting from a given address, applying a callback function to each encountered object.
5751	setHeapPtr updates heap pointer based on address and processor size.
5752	findHeapInfo retrieves heap information for a given address.
5753	allocHeapInfo retrieves or creates heap information for a given address.
5754	Construct a runtime name based on DWARF type information.
5755	readRuntimeConstants populates runtime constants from hardcoded values and DWARF records.
5756	add will append a new function table entry to funcTab.
5757	sort will order entries in funcTab based on their min value.
5758	find searches for a function entry based on program counter address within specified ranges.
5759	read decodes variable-length integers and constructs a pcTabEntry slice based on the architecture.
5760	readVarint reads a variable-length integer from memory.
5761	useLine constructs the usage line for a cobra command, including parent commands and optional flags.
5762	commandPath recursively builds a command path by concatenating parent and child command names.
5763	readCore loads or retrieves cached Core and gocore processes based on configuration.
5764	typeName determines the type name based on object properties, handling array-like structures.
5765	fieldName generates a field name based on process, object, and offset, considering type and repetition.
5766	This function determines the field name based on the type and offset, handling various kinds like bool, int, float, complex, interface, pointer, string, slice, array, and struct.
5767	FindFunc retrieves function at address pc from process's funcTab.
5768	Core processes a core process to initialize its components and dependencies.
5769	Address retrieves the address from a pointer type region, panicking if not a pointer.
5770	Int reads and returns an integer from the region
5771	Uintptr returns a uintptr value from the region
5772	Cast method updates the type field of the region struct based on the provided type string using findType method.
5773	Deref method returns a new region by reading pointer value from current region's address, panicking if not a pointer or unsafe.Pointer.
5774	Uint64 reads a 64-bit unsigned integer from region r
5775	Uint32 reads a 32-bit unsigned integer from a region.
5776	Int32 retrieves a 32-bit integer from the region's process.
5777	Uint16 reads a 16-bit unsigned integer from region
5778	Uint8 reads an 8-bit unsigned integer from region r
5779	String converts a region to a human-readable string representation.
5780	SlicePtr creates a pointer to a slice.
5781	SliceLen returns the length of a slice region
5782	Field retrieves the specified field from a region, updating its offset and type accordingly.
5783	ReadUint8 retrieves an 8-bit unsigned integer from a process's memory at a specified address.
5784	ReadUint16 reads a 16-bit unsigned integer from the process's memory at the specified address.
5785	ReadUint32 retrieves a 32-bit unsigned integer from a specified address in the process's memory mapping, handling endianness appropriately.
5786	ReadUint64 reads a 64-bit unsigned integer from the specified address
5787	ReadInt8 converts an 8-bit unsigned integer to a signed integer at the specified address.
5788	ReadInt16 converts a uint16 value at a given address to int16.
5789	ReadInt32 reads a 32-bit integer from the specified address.
5790	ToInt64 converts uint64 to int64 at address a
5791	ReadUintptr reads uintptr from address based on pointer size.
5792	ReadPtr reads an uintptr value at the specified address and returns it as an Address.
5793	ReadCString reads a C-style string from memory at the specified address.
5794	Source returns the file name and offset from the mapping.
5795	findMapping retrieves a mapping from a page table using nested lookups based on address bits.
5796	Max returns the greater of two addresses.
5797	Computes minimum of two addresses.
5798	Align adjusts an address to be aligned at a multiple of x.
5799	initialize constructs a spanning tree for object graph traversal.
5800	calculate computes immediate dominators for vertices in a graph using iterative steps.
5801	eval finds the label for a variable by compressing its path.
5802	compress compresses the given vertex by merging it with its ancestor while maintaining semilattice properties.
5803	link sets ancestor[v] to w in ltDom.
5804	reverse calculates reverse dominator relationships.
5805	calcSize computes the size of each vertex in a dominator tree using depth-first search.
5806	objField retrieves a field name from an object based on offset and type information.
5807	Readable checks if a mapping exists for a given address
5808	ReadableN checks if there are at least n readable bytes starting from address a in process p's mappings.
5809	splitMappingsAt splits memory mappings at a given address.
5810	DynamicType retrieves the runtime type of an interface or eface.
5811	BtrfsFilesystem.Create initializes a Btrfs filesystem image if it doesn't exist or isn't the correct size, mounts it, and returns any errors.
5812	Resolve extracts IP address from URL's host part and returns it along with any errors encountered.
5813	Equal checks if two Token instances are equivalent based on their type and value.
5814	newDefaultClassifier initializes a default token classifier with various rune classes.
5815	Lexer.Next returns the next word token from input, skipping comments.
5816	NewTokenizer reads from an io.Reader and returns a Tokenizer using a default classifier.
5817	Split parses a string into substrings using a lexer, handling errors and EOF gracefully.
5818	Between extracts text between specified left and right delimiters from a string. If right delimiter is empty, it returns substring from left delimiter onwards.
5819	BetweenF generates a closure that checks if a string is between two specified substrings.
5820	Camelize converts string to camel case by capitalizing words and removing non-alphabetic characters.
5821	Capitalize converts the first character to uppercase and the rest to lowercase.
5822	Retrieve character at specified index from string.
5823	CharAtF returns a function that retrieves a character from a string at a specified index.
5824	ChompLeft removes the given prefix from the start of the string if it exists. If not, it returns the original string unchanged.
5825	ChompLeftF creates a closure that removes a specified prefix from strings.
5826	ChompRight removes the specified suffix from the end of the string if it exists. If not, it returns the original string unchanged.
5827	ChompRightF creates a closure to remove a suffix from a string.
5828	ClassifyF returns a closure that applies the Classify function to its input.
5829	Clean removes extra spaces from start and end of string.
5830	Dasherize converts a string to dash-separated format
5831	EscapeHTML escapes special characters in HTML strings
5832	DecodeHTMLEntities decodes HTML entities in the input string
5833	EnsurePrefixF returns a new function that ensures a given prefix is added to input strings if not already present.
5834	EnsureSuffixF returns a function that appends a suffix to a given string if it's not already present.
5835	Humanize converts snake_case strings to Title Case.
5836	conditional utility function to return `truthy` or `falsey` based on condition.
5837	IndexOf finds the first occurrence of a substring within a string starting from a specified index.
5838	IsLower checks if the string is lowercase alphabetic.
5839	IsUpper checks if the string is uppercase alphabetic.
5840	Left returns the leftmost n characters of the string.
5841	LeftF returns a function that trims the left side of a string to a specified length.
5842	function to convert string to slice of letters
5843	Lines splits the input string into lines, normalizing Windows-style newlines.
5844	utility function to apply iterator to each item in array and return new array.
5845	function to check if string matches regex pattern.
5846	tasks defines project tasks using do library for automation.
5847	Pad pads the input string with the specified character to reach the desired length.
5848	PadF returns a closure that pads strings using specified character and count.
5849	PadLeft pads a string `s` with character `c` on the left to a minimum length of `n`.
5850	PadLeftF returns a closure that pads strings to the left.
5851	PadRightF returns a closure that pads strings to the right with a specified character and width.
5852	function to apply multiple string transformations sequentially.
5853	QuoteItems quotes each item in a string array using strconv.Quote
5854	ReplaceF returns a closure that replaces occurrences of a substring within a given string.
5855	ReplacePatternF generates a closure to replace a pattern in a given string using ReplacePattern.
5856	Reverse reverses the characters in the input string.
5857	RightF returns a function that trims the right side of a string to the specified length.
5858	Slice extracts a substring from s starting at start index up to but not including end index. If end is negative, it counts from the end of the string. If end is omitted or greater than the string length, it returns the substring from start to the end of the string.
5859	SliceF creates a closure that slices a string from start to end.
5860	function to check if slice contains specified value.
5861	function to find index of value in slice.
5862	Slugify converts a string to a URL-friendly slug
5863	StripPunctuation removes punctuation and normalizes whitespace
5864	StripTags removes specified HTML/XML tags from a string
5865	function to extract substring from given string based on index and length.
5866	SubstrF creates a function to extract a substring based on the given index and length.
5867	TemplateWithDelimiters substitutes placeholders in a string using provided values and custom delimiters.
5868	ToArgv converts a string into a slice of arguments, handling quotes and escapes.
5869	ToBool checks if the input string represents a boolean value.
5870	ToBoolOr converts string to boolean, returning default value on error.
5871	function to convert string to integer or return default value.
5872	ToFloat32Or converts a string to a float32, returning a default value if conversion fails.
5873	ToFloat64Or converts string to float64 or returns default value if conversion fails.
5874	UnescapeHTML unescapes HTML entities in a string, but warns to use html.UnescapeString instead.
5875	WrapHTML wraps given string `s` inside HTML `tag` with attributes `attrs`.
5876	WrapHTMLF creates a function to wrap HTML content with specified tag and attributes.
5877	ReapChildren listens for SIGCHLD signals and reaps child processes, notifying via channels.
5878	SdNotify sends a state notification over D-Bus.
5879	NewAuthenticator initializes a new Authenticator with the given Store and Policy.
5880	HTTP handler for OAuth2 endpoints with tracing and error handling.
5881	Unique removes duplicates from a slice of bson.ObjectIds.
5882	function checks if ID exists in BSON object ID list.
5883	Includes checks if all elements of subset are present in all.
5884	Require checks model flags.
5885	Enqueue adds a new job to the store with specified details and delay.
5886	A constructs an Authorizer using a Matcher and Handler.
5887	Create an Authorizer for running Enforcers with specified permissions.
5888	And combines two authorizers using logical AND, running their callbacks sequentially and merging their results.
5889	Or combines two Authorizers, returning the result of the first that matches.
5890	Enqueue adds a job to the queue after copying the store.
5891	Sets up a callback for a queue task
5892	If you need to create a new Watcher, initialize it with streams and a manager.
5893	Add registers a new stream, initializes it, checks for duplicates, saves, opens, and handles events, including soft deletions.
5894	Action returns a pointer to a new Fire action with GET method and a callback handling connections.
5895	Write checks if operation is create, update, or delete.
5896	String returns the string representation of the operation type.
5897	Query constructs a MongoDB query using Selector and Filters.
5898	Respond encodes a value to JSON and writes it to the response writer.
5899	EnsureApplication creates or retrieves an application's key based on its name, validating and saving it if necessary.
5900	EnsureFirstUser creates a new user in storage if it doesn't already exist.
5901	Strategy's Callback constructs and returns a handler for different operations.
5902	OpenStream initializes a new stream with a store, model, token, receiver, open callback, and error manager; it then opens the stream asynchronously.
5903	Close sets flag and closes current stream.
5904	AddTokenIndexes adds token indexes to an indexer with optional expiration.
5905	GetTokenData will return token type, scope, expiration time, application ID, and user ID.
5906	SetTokenData updates token details including type, scope, expiration, client, and user.
5907	ValidSecret checks if the provided secret matches the stored hash using bcrypt.
5908	HashSecret generates a hash from a secret and saves it, then clears the original secret.
5909	User.ValidPassword checks if the given password matches the stored hash.
5910	HashPassword hashes user's password and saves the hash.
5911	MustCreateStore creates a Store from URI or panics on failure.
5912	CreateStore connects to a MongoDB instance using a URI and returns a new Store object.
5913	C retrieves a collection based on model type.
5914	NewAssetServer creates an HTTP handler that serves files from a specified directory with a given prefix.
5915	DefaultGrantStrategy checks if the scope is empty and returns an error if not.
5916	DefaultTokenData constructs token data based on resource owner ID.
5917	GenerateToken creates a JWT token with specified claims and signs it using a secret key.
5918	ParseToken validates and parses JWT tokens.
5919	E creates and returns a new Enforcer
5920	MustGet retrieves the value of a specified field from the model struct.
5921	MustSet updates a field's value on a model struct.
5922	NewGroup creates a new Group with maps for controllers and actions.
5923	Add registers new controllers with unique names in the group.
5924	Endpoint handles HTTP requests for group resources, routing them to appropriate controllers or actions based on the URL path.
5925	Add creates an index on specified fields with options for uniqueness, expiration, and background processing.
5926	Adds raw index to indexer
5927	Ensure ensures that all indexes in the store exist, creating them if necessary.
5928	NewCatalog creates a new catalog instance and adds given models to it.
5929	Add models to the catalog, ensuring no duplicates.
5930	All returns all models from the catalog.
5931	Visualize generates a graphical representation of the catalog using DOT language syntax.
5932	NewErrorReporter creates a function to report errors with stack trace to given writer.
5933	EnsureIndexes ensures the model indexes for the given store.
5934	E formats and wraps an error using Safe.
5935	Compose chains multiple HTTP middleware handlers into a single handler.
5936	Includes checks if all elements of subset are present in all.
5937	Intersect finds common elements between two string lists.
5938	E constructs a new Error instance with the given reason and retry flag.
5939	RootTracer wraps HTTP handlers to add tracing information.
5940	NewTracerFromRequest creates a Tracer from an HTTP request and span name.
5941	NewTracer creates a new Tracer instance initialized with a root span and an empty spans slice.
5942	Push will start a new tracing span and add it to the tracer's stack.
5943	Last returns the most recent span from Tracer's spans list or root if empty.
5944	Tag adds a tag to the last item in the tracer.
5945	Log records a key-value pair using the last tracer.
5946	Context adds tracing information to the given context.
5947	Pop will remove and finish the last span from the tracer's spans list.
5948	Finish all spans; optionally finish root span
5949	NewPool initializes a new task pool with maps for tasks and queues, and a closed channel.
5950	Add task to pool, ensuring uniqueness and updating queue.
5951	Starts all queues and tasks in the pool.
5952	NewBodyLimiter wraps an HTTP request body with a limiter
5953	LimitBody updates a request's body with a new limiter based on size.
5954	C creates a Callback with a Matcher and Handler, tracing execution.
5955	Only creates a matcher that allows operations listed in the input.
5956	BasicAuthorizer checks HTTP basic auth credentials against provided map and denies access if they don't match.
5957	ModelValidator ensures a model is validatable and performs validation before proceeding.
5958	TimestampValidator ensures correct timestamps during create and update operations.
5959	Define callback for validating relationships between models.
5960	dispatches workers to process object groups and aggregates results
5961	NewRule creates a new rule with the given name and match pattern, returning it or an error if invalid.
5962	AddUnmatch adds a new unmatch rule to the Rule object.
5963	Scan input content, match lines against rules, exclude unmatches, return matching lines with line numbers.
5964	NewSecret creates a new Secret object with the given parameters.
5965	NewObject creates a new object with limited content length and initializes metadata.
5966	SetMetadata updates object's metadata with key, value, and attributes; handles primary key update accordingly.
5967	GetMetadata retrieves value for given key from object's metadata; returns error if key does not exist.
5968	GetMetadataAll retrieves all metadata values from the object.
5969	SetRule compiles and assigns a case-insensitive regex rule to x.
5970	SetObject compiles a regular expression from the input string and assigns it to x.Object.
5971	SetNline updates the Nline field of x with nLine.
5972	SetContent compiles a regular expression from the input string and assigns it to Content field of Exception object.
5973	Run checks if Secret matches all specified rules and conditions.
5974	AddRule enables or disables a rule and adds it to Seekret's rule list.
5975	LoadRulesFromFile loads rules from a YAML file into Seekret.
5976	LoadRulesFromDir loads rules from files in a directory.
5977	DefaultRulesPath retrieves the default rules path from an environment variable or uses a default value.
5978	EnableRule enables a rule in Seekret's rule list.
5979	DisableRule disables a rule by setting it to disabled.
5980	EnableRuleByRegexp enables rule by regexp in Seekret.
5981	DisableRuleByRegexp disables a rule by its regular expression name.
5982	LoadObjects appends loaded objects to the Seekret's list.
5983	GroupObjectsByMetadata groups objects by metadata key.
5984	GroupObjectsByPrimaryKeyHash groups objects by primary key hash
5985	AddException will include a new models.Exception in the Seekret's exceptionList.
5986	LoadExceptionsFromFile reads exceptions from a YAML file and adds them to the Seekret object.
5987	printPlainResults prints plain results from a structured data source.
5988	printJsonResults converts results to JSON and prints it to standard output.
5989	NewXor64Source initializes and returns a new Xor64Source with the specified seed value.
5990	xor64 applies a series of bitwise operations to a 64-bit unsigned integer.
5991	Xor64Source's next method generates and returns the next pseudo-random number using XOR operation.
5992	Seed updates the source's state with a new seed value.
5993	NewFrameSet processes a frame range and constructs a FrameSet with inclusive ranges.
5994	handleMatch processes different types of frame matches and updates rangePtr accordingly.
5995	Index retrieves frame index from FrameSet.
5996	Frame retrieves the value at the specified index from rangePtr and returns it along with any potential error.
5997	HasFrame checks if the frame set contains the specified frame.
5998	FrameRangePadded pads a frame range with a given padding value.
5999	Normalize returns a new FrameSet with normalized rangePtr.
6000	FramesToFrameRange converts a list of frames to a string representation, handling ranges and individual frames with optional zero-padding.
6001	frameRangeMatches parses a comma-separated frame range into individual components and validates them using regex patterns.
6002	function to generate sequence of numbers within specified range and step.
6003	NewWorkManager initializes a work manager with options for file handling.
6004	processSources scans directories and sequences for file patterns, processing them accordingly and sending results through channels.
6005	isInputDone checks if input directories or sequences are not set
6006	closeInputs closes input channels used by workManager.
6007	load processes file paths, distributing sequences and directories to respective channels.
6008	loadRecursive traverses paths recursively, skipping hidden directories and adding valid paths to respective channels for further processing.
6009	preparePaths processes a list of paths, returning directories and file sequences.
6010	PadFrameRange pads each frame in a comma-separated list with leading zeros based on a given pad value.
6011	zfillString pads a string with zeros to a specified length, handling negative numbers correctly.
6012	zfillInt pads an integer with leading zeros to a specified width.
6013	NewInclusiveRange initializes a new InclusiveRange object with calculated step.
6014	String method generates a textual representation of InclusiveRange.
6015	End calculates and caches the correct end value based on the range's start, end, and step.
6016	Len calculates the cached length of the inclusive range based on start, end, and step values.
6017	Min returns the lower bound of the inclusive range.
6018	Max returns the larger of Start or End values.
6019	Contains checks if a value is within the inclusive range.
6020	closestInRange returns the closest value to the given input within the specified inclusive range, considering the step size between values.
6021	Index finds the index of a value within InclusiveRange or returns -1 if not found.
6022	String method for InclusiveRanges, returning a comma-separated list of blocks.
6023	Len calculates the total length of inclusive ranges by summing individual block lengths.
6024	Start returns the start value of the first block in InclusiveRanges.
6025	End returns the end value of the last block in InclusiveRanges.
6026	Min finds the smallest integer among all ranges in InclusiveRanges.
6027	Max finds the maximum value among all ranges in InclusiveRanges.
6028	numRanges returns the count of blocks in InclusiveRanges.
6029	rangeAt retrieves the InclusiveRange at the specified index.
6030	Append adds a new inclusive range to the list.
6031	AppendUnique adds unique ranges to the list while handling overlapping and non-overlapping cases.
6032	Contains checks if a value is within any block in InclusiveRanges
6033	Index finds the position of a value within inclusive ranges, adjusting for preceding values' counts.
6034	FrameRange returns the frame range from the FileSequence's frame set.
6035	FrameRangePadded returns a padded frame range string for the file sequence.
6036	FileSequence's Index method retrieves frame path based on index.
6037	SetDirname ensures the directory path ends with a separator and updates the dir field.
6038	SetPadding updates padChar and zfill based on input padChars.
6039	SetPaddingStyle updates padding style and applies it to FileSequence.
6040	SetExt updates file extension with leading dot if missing.
6041	SetFrameRange validates and sets the frame range for the file sequence.
6042	Len returns the number of frames in the sequence, or 1 if no frame set is present.
6043	String Returns a formatted string representation of the file sequence.
6044	Copy returns a deep copy of the file sequence.
6045	NewClient initializes a new client with URL, TLS setting, and headers.
6046	UnmarshalXML decodes XML data into Header's Content field.
6047	UnmarshalXML decodes XML content into Body, handling Faults and nested elements.
6048	Call sends a SOAP request and processes the response.
6049	JSONDoc loads JSON data from file or HTTP URL
6050	AddLoader registers a new loader with a predicate and function.
6051	JSONSpec reads a JSON file and returns its analyzed document.
6052	Embedded converts JSON messages to Swagger specifications and returns a Document.
6053	Spec parses a specification file and returns its analyzed document.
6054	Analyzed processes JSON or YAML data to create a Document object.
6055	Expanded implements Document.
6056	ResetDefinitions creates a copy of the original definitions and assigns it to the document's spec, then returns the document.
6057	Pristine returns a new document by analyzing the raw content.
6058	OpenDb opens a GeoIP database file and returns a pointer to a GeoIP struct or an error if none could be opened.
6059	GetOrg retrieves organization name from IP using GetName method.
6060	GetRegion retrieves the country and region codes for a given IP address using the GeoIP database.
6061	GetRegionName retrieves the region name using country and region codes
6062	GetCountry retrieves the country code and network mask for a given IP address using GeoIP database.
6063	NewRotatingFileHandler initializes a rotating file handler with specified parameters.
6064	Close closes the rotating file handler's file descriptor if it exists.
6065	String returns the string representation of the log level.
6066	New initializes and returns a Logger instance with specified handler and flag.
6067	Close unlocks handler lock and closes it.
6068	SetLevelByName updates logger level based on name.
6069	Output formats log messages with optional timestamp, level, and caller info.
6070	OutputJson formats and outputs log data as JSON.
6071	Print outputs trace level log messages.
6072	Logger's Println method outputs trace-level messages.
6073	Debug outputs debug messages with level and formatted arguments.
6074	Debugln logs debug messages using Output method.
6075	Error logs a message at the error level.
6076	Errorln logs error messages with a stack trace.
6077	Info logs informational messages at level 2.
6078	Infoln logs informational messages at level 2.
6079	Warn logs warning messages.
6080	Warnln logs warning messages with optional arguments.
6081	NewStreamHandler initializes a new stream handler with the given writer.
6082	Right pads a string to the specified length.
6083	New creates a new API instance with the given host and authenticator.
6084	setupMetadata generates a resource map from multiple sources, removing specific API prefixes from path patterns.
6085	recordTypes analyzes and records types within a data structure recursively
6086	appendSorted inserts a new parameter into a list and sorts it alphabetically.
6087	parseDataType determines the data type of a parameter based on its class and action details.
6088	parseParam analyzes and parses a parameter based on its path and data type.
6089	newParam creates an ActionParam from the given path, parameter map, and data type.
6090	This function converts a name to a Go return type name, adding a slice prefix if specified.
6091	toGoTypeName maps BSON types to Go types, handling special cases like structs and collections.
6092	prettify formats an object as a JSON string with indentation.
6093	Utility function to check if type is built-in.
6094	MatchHref checks if href or its appended slash matches any path patterns exactly.
6095	Substitute replaces path variables with values from given list, returns formatted string or missing variables.
6096	MarshalJSON converts file upload reader content to JSON string.
6097	writeMultipartParams recursively constructs multipart form data from nested API parameters.
6098	PerformRequest sends HTTP requests with optional authentication signing.
6099	PerformRequestWithContext sends an HTTP request using a client with optional authentication.
6100	LoadResponse reads HTTP response, parses JSON, handles Location header, and returns parsed data or error.
6101	ScheduleLocator creates a new instance with Href set to href and API reference.
6102	TemplateLocator creates a new instance of TemplateLocator associated with the given href.
6103	fetchDetails retrieves environment details and populates SSH configurations.
6104	buildAliases constructs SSH command aliases from config.
6105	serverArray retrieves instances of a specific server array using its name.
6106	Retrieve server instance by name using API.
6107	toPackageName converts a version string to a package name by replacing dots with underscores and trimming trailing zeros.
6108	loadFile reads content from a specified file.
6109	main initializes a CLI app using kingpin, parses command line, executes command, handles responses, and sets exit status based on HTTP status code.
6110	Execute command via client and handle help or actions accordingly.
6111	CreateJSONResponse creates an HTTP response from JSON data.
6112	AccountLocator returns an AccountLocator with Href set to href and other values from api.
6113	AccountGroupLocator creates a new locator for the given href and API instance.
6114	AlertLocator creates a new AlertLocator instance with Href set to href and API reference.
6115	AlertSpecLocator returns a new instance of AlertSpecLocator with Href and API values.
6116	AuditEntryLocator creates a new locator with Href and API reference.
6117	BackupLocator creates a new BackupLocator instance with Href and API values.
6118	ChildAccountLocator returns a new instance with Href set to href and API reference pointing to api.
6119	CloudLocator creates a new CloudLocator instance with Href set to href and api as its parent.
6120	CloudAccountLocator creates a new locator for the given href.
6121	CookbookLocator returns a new instance of CookbookLocator.
6122	CookbookAttachmentLocator creates a new locator with Href and API.
6123	CredentialLocator returns a new instance of CredentialLocator with Href set to href and API reference.
6124	DatacenterLocator returns a new DatacenterLocator instance with Href set to href and API reference.
6125	DeploymentLocator creates a new DeploymentLocator instance with Href set to href and API set to api.
6126	HealthCheckLocator creates a new locator with Href and API reference.
6127	IdentityProviderLocator returns a new instance with Href set to href and API reference pointing to api.
6128	ImageLocator creates a new ImageLocator instance with Href set to href and API reference.
6129	InputLocator returns an InputLocator instance with Href set to href and API reference.
6130	InstanceLocator creates an instance locator from a href string and API reference
6131	InstanceTypeLocator creates a new locator with Href set to href and API set to api.
6132	IPAddressLocator creates a new instance with Href and API values.
6133	IpAddressBindingLocator creates a new instance with Href set to href and API reference.
6134	MonitoringMetricLocator creates a new instance of MonitoringMetricLocator with the given href and API.
6135	MultiCloudImageLocator creates a new locator with href and API reference.
6136	MultiCloudImageMatcherLocator creates a new instance with Href and API.
6137	MultiCloudImageSettingLocator creates a new instance with Href and API values.
6138	NetworkLocator constructs a new NetworkLocator instance.
6139	NetworkGatewayLocator creates a new NetworkGatewayLocator instance with Href and api values.
6140	NetworkOptionGroupLocator creates a new instance with Href and API values.
6141	NetworkOptionGroupAttachmentLocator creates a new locator with Href and API values.
6142	Oauth2Locator creates a new Oauth2Locator instance with Href and API references.
6143	PermissionLocator returns a PermissionLocator with Href set to href and other values from api.
6144	PlacementGroupLocator creates a new locator with the given href and API reference.
6145	PreferenceLocator creates a new PreferenceLocator instance with Href and API values.
6146	PublicationLocator creates a new locator for the given href and associates it with the API instance.
6147	PublicationLineageLocator implements locator for API.
6148	RecurringVolumeAttachmentLocator creates a new locator with href and API reference.
6149	RepositoryLocator creates a new locator for the given href and attaches it to the API instance.
6150	RepositoryAssetLocator creates a new locator with Href and API references.
6151	ResourceGroupLocator creates a new locator with the given href and API instance.
6152	RightScriptLocator creates a new instance with Href and API values.
6153	RightScriptAttachmentLocator creates a new locator with Href and API values.
6154	RouteLocator returns a RouteLocator with its href set to href and its other values originating from this API.
6155	RouteTableLocator creates a new instance with Href and API values.
6156	RunnableBindingLocator creates a new locator with Href and API values.
6157	SchedulerLocator creates a new instance with Href and API values.
6158	SecurityGroupLocator creates a new locator for the given href and API instance.
6159	SecurityGroupRuleLocator creates a new locator with href and api values.
6160	ServerLocator creates a new ServerLocator instance with the given href and API reference.
6161	ServerArrayLocator returns a new instance of ServerArrayLocator with Href set to href and API reference.
6162	ServerTemplateLocator creates a new instance with Href and API.
6163	ServerTemplateMultiCloudImageLocator creates a new locator with Href and API.
6164	SessionLocator creates a new SessionLocator instance with Href and API references.
6165	SshKeyLocator creates a new instance with Href set to href and API reference.
6166	SubnetLocator constructs a new subnet locator from a given href and API instance.
6167	TagLocator returns a new TagLocator instance with Href set to href and API reference.
6168	TaskLocator creates a new TaskLocator instance with the given href and API reference.
6169	UserLocator creates a new UserLocator instance with Href and API values.
6170	UserDataLocator creates a new locator with href and api.
6171	VolumeLocator requires href to return a new instance.
6172	VolumeAttachmentLocator creates a new VolumeAttachmentLocator object with the specified href and API instance.
6173	VolumeSnapshotLocator creates a new locator for the given volume snapshot href.
6174	VolumeTypeLocator creates a new locator for the given href.
6175	RegisterCommands registers action commands using the provided registrar.
6176	ShowCommandHelp displays help for a given command
6177	ShowAPIActions displays available actions for the given API command
6178	ShowHelp displays help for a command, including usage and flag details.
6179	ParseCommandAndFlags processes a command to determine its target resource, action, and parameters.
6180	validateFlagValue checks if a flag's value matches a regexp, is non-blank, or is among a set of valid values, returning an error if any condition fails.
6181	buildQuery combines multiple API parameters into a single flattened structure.
6182	buildPayload constructs an API payload by normalizing parameters.
6183	shortenPattern trims suffix from pattern if it matches any resource path patterns.
6184	cleanDescription removes unnecessary lines from a document based on a keyword.
6185	Function to check if a file exists.
6186	AnalysisSnapshotLocator creates a new locator with href and API reference.
6187	BudgetAlertLocator creates a new locator for budget alerts with the given href and API instance.
6188	CloudBillLocator creates a new locator for a cloud bill at the given href.
6189	CloudBillMetricLocator creates a locator for a given href.
6190	CurrentUserLocator creates a new instance with Href set to href and api reference.
6191	InstanceCombinationLocator creates a new instance with Href and API values.
6192	InstanceMetricLocator creates a new locator with Href and API.
6193	InstanceUsagePeriodLocator creates a new locator with the given href and API reference.
6194	PatternLocator creates a new instance with Href and API values.
6195	ReservedInstanceLocator creates a new locator for the reserved instance.
6196	ReservedInstancePurchaseLocator creates a new locator with Href and API.
6197	ScenarioLocator creates a new ScenarioLocator with Href set to href and api as its parent.
6198	ScheduledReportLocator creates a new locator with the given href and API reference.
6199	TempInstancePriceLocator creates a new TempInstancePriceLocator with the given href and API reference.
6200	UserSettingLocator creates a new UserSettingLocator instance with Href set to href and API set to api.
6201	readAllAsync asynchronously reads all data from a file and returns a pointer to the byte slice and a channel signaling completion.
6202	extractArg extracts a value for a named argument from a list of arguments, removing the argument from the list. If the argument has an equal sign, the value follows it; otherwise, the next argument's value is used. The function returns the extracted value and the remaining arguments.
6203	write appends byte slice b to output file, adding a newline and closing the file.
6204	AppliedPolicyLocator returns a new AppliedPolicyLocator with Href set to href and API set to api.
6205	ApprovalLocator creates a new ApprovalLocator instance with the given href and API reference.
6206	IncidentLocator creates a new locator for the given href and API instance.
6207	PolicyTemplateLocator creates a new instance with Href set to href and api reference.
6208	PublishedTemplateLocator creates a new instance encapsulating the href and API reference.
6209	DebugCookbookPathLocator creates a new instance with Href and API references.
6210	DockerControlLocator creates a new locator with Href and API values.
6211	EnvLocator creates a new EnvLocator instance with Href and API values.
6212	LoginControlLocator creates a new instance with Href and API.
6213	ProcLocator returns a ProcLocator with its href set to href and its other values originating from this API.
6214	Rl10Locator initializes a new instance with Href and API reference.
6215	TSSLocator creates a new instance of TSSLocator with Href and API fields.
6216	TSSControlLocator creates a new instance with Href and API values.
6217	TSSPluginLocator creates a new instance with Href and API values.
6218	NewAngularWriter initializes a writer for generating Angular templates.
6219	WriteResource renders a resource template to an output writer.
6220	path constructs URL path from action's path patterns and variables.
6221	mandatory checks if a parameter is mandatory for a given action.
6222	New creates a new API instance with authentication and host configuration.
6223	FromCommandLine creates an API client based on command-line arguments, handling various authentication methods and options.
6224	CanAuthenticate checks if authentication is possible for the API.
6225	Encrypts text using AES encryption with CFB mode and returns base64-encoded ciphertext.
6226	Decrypt will decrypt a Base64-encoded string using AES CFB mode.
6227	guessType infers the data type based on the given reference ID and definition
6228	addType updates API types, handling collisions by renaming or choosing between existing and new types based on field counts.
6229	extractCmdLineParams extracts command-line parameters from action parameters recursively.
6230	NewMetadataWriter initializes a MetadataWriter with templates and functions for rendering metadata.
6231	WriteHeader writes the metadata header to the given writer.
6232	WriteMetadata renders API metadata using templates.
6233	location determines the parameter type based on the action param's location.
6234	New initializes a new API instance using the provided host and authenticator.
6235	fromAPI converts an API object to another format
6236	BuildRequest constructs an HTTP request based on resource, action, and parameters.
6237	setupMetadata constructs a resource map from generated metadata entries.
6238	NewDisplayer creates a Displayer from HTTP response, parsing JSON if possible.
6239	ApplySingleExtract applies a JSON extract and updates RawOutput accordingly
6240	ApplyExtract applies a JSON selector to the displayer's body and stores the result or error.
6241	ApplyHeaderExtract retrieves and validates a response header.
6242	Output formats the display content based on prettification settings.
6243	NewAPIAnalyzer initializes a new analyzer with resources and attribute types.
6244	Analyze processes API resources to generate a descriptor.
6245	AnalyzeAliases updates method details from one alias to another in APIAnalyzer.
6246	LocatorFunc checks if "Links" exists; if so, it returns a locator for the self link.
6247	ParseRoute extracts HTTP methods and path patterns from route definitions or monikers.
6248	isDeprecated checks if a path refers to a deprecated API endpoint.
6249	isQueryParam checks if the query parameter is valid based on action and name.
6250	function checks if param matches any variable in given path patterns.
6251	fetchAuditEntries retrieves audit entries from a server using a client, filtered by email, and returns them.
6252	formatTime converts a time.Time to a formatted string.
6253	printAudits prints each audit entry's update time, user email, and summary.
6254	extractUnique filters out duplicate AuditEntry objects based on hrefs.
6255	getHref extracts the self-link href from an AuditEntry.
6256	fail formats and prints error message then exits
6257	Construct a string representation of action parameters, including mandatory and optional ones.
6258	paramsInitializer constructs API parameters based on action details, handling mandatory and optional fields.
6259	commandLine constructs the full command line from arguments.
6260	toVerb converts the first letter of the input text to uppercase and the rest to lowercase. If the input is "GET" or "POST", it appends "Raw" to the result.
6261	escapeBackticks escapes backticks in a string by concatenating them.
6262	AccountPreferenceLocator creates a new instance with Href and API references.
6263	ApplicationLocator returns an ApplicationLocator with its Href set to href and its other values originating from api.
6264	EndUserLocator creates an EndUserLocator instance with Href and API values.
6265	NotificationRuleLocator creates a new locator with href and API context.
6266	UserPreferenceLocator creates a new locator with the given href and API instance.
6267	UserPreferenceInfoLocator creates a new locator for user preference info using href and API instance.
6268	LoadConfig reads a JSON config file, decrypts sensitive fields, and returns a ClientConfig instance.
6269	CreateConfig updates or creates a client configuration file interactively.
6270	fromAPI converts an rsapi.API to an API struct with specific settings.
6271	HostFromLogin infers the governance host from the input host string by modifying its prefix based on certain conditions.
6272	AnalyzeParam generates an ActionParam object from a Parameter object
6273	AnalyzeAttribute generates action parameters based on attribute details.
6274	AnalyzeType determines the data type of a given type definition, handling various cases including file uploads, built-in types, and custom structs or hashes.
6275	CreateType generates an object data type based on a query and attributes.
6276	Ref is used to fetch Definition based on $ref key.
6277	Type returns the type of the reference or "object" if "$ref" exists.
6278	Required checks if "required" key exists in map and returns its value as a string slice. If not found, it returns an empty slice.
6279	ID extracts the definition ID from the reference if present.
6280	Service returns a tag or operation ID from endpoint metadata.
6281	Method extracts the part after "#" from OperationID or returns empty.
6282	NewTypeRegistry creates a new TypeRegistry instance for managing named and inline types.
6283	GetNamedType retrieves a named type from the registry.
6284	CreateNamedType generates a new ObjectDataType for the given type name and registers it in the registry.
6285	CreateInlineType generates a new ObjectDataType with the specified Go type name and registers it in the TypeRegistry. Returns the created object.
6286	FinalizeTypeNames updates InlineTypes with NamedTypes and then finalizes type names in APIDescriptor.
6287	Merge combines two APIDescriptors, checking versions, ensuring unique resources, updating type names, and merging resources and types.
6288	Finalize and standardize type names across resources and ensure uniqueness.
6289	uniqueTypeName generates a unique type name by appending an index to the given prefix until it finds a non-taken name.
6290	MandatoryParams filters out mandatory parameters from action.
6291	HasOptionalParams checks if any action parameters are optional.
6292	MakeUniq generates a unique name by appending an index to the base string until it finds an unused name.
6293	NewClientWriter initializes templates for generating client code.
6294	WriteHeader populates a header template with package, version, time, and JSON flags, then executes it on the writer.
6295	WriteResourceHeader writes a header for a resource to the specified writer.
6296	WriteType generates Go struct declaration from object data type.
6297	WriteResource renders a resource template to a writer.
6298	WithTrail adds a trail entry to the evaluation context.
6299	AnalyzeEndpoint processes API endpoint details, constructs actions, and analyzes responses and parameters.
6300	NetworkInterfaceLocator returns a new NetworkInterfaceLocator instance.
6301	NetworkInterfaceAttachmentLocator creates a new locator with href and api.
6302	UnmarshalJSON parses Ruby timestamp JSON into Go time.
6303	ExecutionLocator creates a new locator with Href and API values.
6304	NotificationLocator creates a new NotificationLocator instance with Href and API values.
6305	OperationLocator creates a new locator with href and api references.
6306	ScheduledActionLocator creates a new locator for scheduled actions based on the given href.
6307	NewBasicAuthenticator creates a new BasicAuthenticator with the specified credentials.
6308	NewSSAuthenticator wraps an Authenticator with ssAuthenticator if not already wrapped.
6309	newCookieSigner creates a new authenticator using the given request builder and account ID.
6310	Sign will authenticate HTTP request using cookies and refresh token if necessary
6311	CanAuthenticate checks if authentication can be performed for the given host using the signer's client and builder.
6312	refresh updates cookieSigner's cookies and refresh time based on http response.
6313	Sign will add authorization headers to HTTP request.
6314	Sign adds authentication to HTTP requests using a secret.
6315	Sign signs an HTTP request using authentication.
6316	SetHost updates authenticator's host based on input, modifying prefix or using original host.
6317	CanAuthenticate checks if the host can authenticate by sending a GET request with authorization and verifying the response status.
6318	extractRedirectURL retrieves the redirect URL from an HTTP response's Location header
6319	buildURL constructs a URL based on the given host and path, using HTTPS unless Insecure is true.
6320	GetAction returns the Action associated with the resource. Nil is returned if the action does not exist.
6321	HasLink checks if a link exists under a resource by name.
6322	find path patterns matching a given href
6323	NewPB creates an HTTP client with customized settings from ParamBlock.
6324	newVariableDumpClient initializes a client with specific configurations.
6325	newRawClient creates a custom HTTP client with specified options.
6326	DoHidden sends a hidden HTTP request and returns the response.
6327	Do wraps doImp for HTTP requests
6328	doImp handles HTTP requests, setting necessary headers, dumping request/response based on conditions, and logging details.
6329	getClientWithoutTimeout creates a new HTTP client from an existing one, modifying its transport settings without affecting other concurrent users.
6330	dumpRequest handles HTTP requests for dumping based on format
6331	writeHeaders formats and writes HTTP headers to a buffer based on dump format and hidden headers.
6332	function to duplicate hidden headers map.
6333	validateCommandLine ensures command-line arguments are correctly set.
6334	APIClient creates a command client based on the given name and command line arguments.
6335	RegisterClientCommands registers client commands with their respective APIs.
6336	Interactive sets up logging to handle errors via stderr.
6337	toPattern generates a PathPattern for HTTP requests based on verb and path.
6338	WithClientIP adds IP to context if not nil.
6339	ClientIP retrieves the client IP from the context.
6340	NewProducer initializes a new Producer with the given configuration or an error.
6341	StartProducer creates a new producer using NewProducer, starts it, and returns it.
6342	Start initializes producer with goroutines and ensures it's not restarted.
6343	Stop gracefully shuts down the producer, ensuring all requests are completed before releasing resources.
6344	Publish sends a message to the topic. If successful, no error is returned.
6345	PublishTo sends a message to a specified topic and returns an error if publishing fails.
6346	NewLocalEngine initializes a local engine with default timeouts if not specified.
6347	validate ensures topic and channel are set for consumer config.
6348	Set default values for consumer configuration parameters.
6349	NewConsumer creates a new consumer instance with the given configuration or an error.
6350	StartConsumer creates a new consumer using NewConsumer, starts it, and returns it.
6351	Start will initiate the consumer's operation in a goroutine and mark it as started.
6352	RateLimit limits message throughput based on a given rate.
6353	Write response content to a writer.
6354	ReadResponse parses a response from a buffered reader.
6355	backoff calculates the next backoff duration based on the current attempt number and the specified minimum and maximum durations.
6356	String method converts frame type to its string representation.
6357	NewConsulEngine initializes a ConsulEngine with default values if not specified in Config.
6358	ParseMessageID converts a hexadecimal string to a MessageID.
6359	WriteTo converts MessageID to hexadecimal and writes it to the writer.
6360	NewMessage creates a new message object with given ID, body, and command channel.
6361	Finish completes message processing, ensures async safety, and sends finish command.
6362	Requeue requeues a message after a specified timeout, ensuring it hasn't been completed previously.
6363	ReadCommand parses a command from a reader and executes it.
6364	funcMapMaker constructs a template function map by combining render and config-specific functions.
6365	Funcs sets the funcMap field tmpl's value.
6366	Execute will render and write the template result to response writer.
6367	RegisterPath adds a path to the asset file system if it doesn't already exist.
6368	Asset retrieves file content from paths; returns empty bytes and error if not found.
6369	Glob searches for all files matching a pattern in paths managed by AssetFileSystem, returning relative matches.
6370	Create a namespace within the asset file system.
6371	New initializes a Render object with provided or default configurations and paths.
6372	RegisterViewPath adds absolute or relative view paths to Render.
6373	SetAssetFS registers paths in assetFS and assigns it to AssetFileSystem.
6374	Layout returns a Template with its layout set to name and its other values originating from this renderer.
6375	Funcs method sets custom functions for rendering templates.
6376	Execute renders a template with the given name, context, request, and writer.
6377	RegisterFuncMap adds a function to Render's FuncMap.
6378	Asset retrieves the specified asset file content from the filesystem.
6379	NewPlainClient creates a new plain client instance with identity, username, and password.
6380	Create initializes an uploader with a URL, headers, and configuration, returning a writer-closer and error.
6381	Send HTTP GET request with authentication and return response body.
6382	Sign request using DefaultService's Sign method.
6383	Sign will sign an HTTP request using the provided keys
6384	Readdir reads directory entries from a File.
6385	Find searches for nodes matching the given path expression within the tree.
6386	Lex generates a channel of lexical items from the XPath string
6387	MustParseXML will parse XML from io.Reader using ParseSettings. If parsing fails, it will panic with the error. Otherwise, it returns the parsed tree.Node.
6388	ParseXML parses an XML input reader into a tree.Node structure.
6389	Call invokes wrapped function with context and arguments based on options.
6390	Parse converts an XPath expression to an executable form
6391	MustParse parses an XPath expression or panics on failure.
6392	XPathExec.Exec executes an XPath expression on a given XML node with optional options.
6393	ExecBool executes XPath expression on node and returns boolean value.
6394	ExecNum executes an XPath expression on a node and returns the numeric result.
6395	ExecNode executes XPath on a given node and returns a node set or an error.
6396	MustExec executes XPath expression on node and panics on error.
6397	ParseExec executes the parsed expression on the given tree node with options.
6398	CreateNode adds new nodes to XMLEle based on BuilderOpts.
6399	GetChildren retrieves all child nodes from an XML element.
6400	GetAttrs retrieves all attributes of the XML element as nodes.
6401	ResValue recursively concatenates child node values from XML element.
6402	Parse processes an input string using a lexer to create a Node structure.
6403	GetToken returns token from XML node based on node type
6404	ResValue extracts and returns the value from an XML node based on its type.
6405	Exec evaluates an XPath expression against a node, applying functions and variables defined in context.
6406	String returns a formatted string representation of the number, handling infinity cases.
6407	Num Converts string to float number safely.
6408	BuildNS constructs a list of XML namespaces from an element's attributes and sorts them.
6409	GetAttribute retrieves an attribute from an element based on local and namespace strings.
6410	GetAttributeVal retrieves attribute value from element if exists.
6411	GetAttrValOrEmpty retrieves attribute value or empty string.
6412	FindNodeByPos searches for a node at a specific position within a tree structure.
6413	Marshal serializes a tree node to a writer.
6414	MarshalStr converts a tree node to a JSON string.
6415	NewLexer creates a Lexer from a reader with optional POSIX and whitespace splitting.
6416	NewLexerString creates a lexer from a string input with specified options.
6417	NewLexerString creates a lexer for splitting strings, which then performs the split operation.
6418	Register adds an ErrDescriptor to the registry, ensuring no duplicates and valid codes.
6419	Get retrieves ErrDescriptor by code, returning nil if not found.
6420	GetAll retrieves all error descriptors from the registry
6421	From converts an error to custom Error type or GRPC error.
6422	Descriptor retrieves or creates a default error descriptor from an input error.
6423	GetAttributes extracts attributes from the given error if it implements the Error interface; otherwise, it returns empty attributes.
6424	HTTPStatusCode returns the corresponding HTTP status code based on the type.
6425	HTTPStatusCode returns the HTTP status code associated with the given error.
6426	HTTPStatusToType converts an HTTP status code to its corresponding type.
6427	ToHTTP encodes an error to JSON and sets appropriate headers.
6428	Converts error to implementation struct, copying fields or wrapping message/code.
6429	Metadata.FromIncomingContext extracts metadata from incoming context.
6430	MetadataFromOutgoingContext extracts outgoing metadata from context
6431	TokenFromMetadata extracts a token from metadata, returning an error if not found.
6432	TokenFromIncomingContext retrieves token from incoming context using metadata.
6433	OutgoingContextWithToken adds token to ctx metadata.
6434	KeyFromMetadata extracts the value associated with the "key" field from the given metadata, returning an error if the field is missing or empty.
6435	KeyFromIncomingContext extracts key from incoming context.
6436	OutgoingContextWithKey creates a new context with merged metadata for a given key.
6437	IDFromMetadata extracts the ID from the given metadata or returns an error if not found.
6438	IDFromIncomingContext extracts and returns string ID from incoming context metadata or error.
6439	OutgoingContextWithID creates a new context with merged metadata containing the given ID.
6440	ServiceInfoFromMetadata extracts service info from metadata.
6441	ServiceInfoFromIncomingContext extracts service info from metadata in incoming context.
6442	OutgoingContextWithServiceInfo creates a new context with merged metadata for service name, version, and network address.
6443	LimitFromMetadata retrieves the limit value from metadata.
6444	OffsetFromMetadata retrieves the offset value from metadata.
6445	LimitAndOffsetFromIncomingContext extracts limit and offset from incoming context metadata.
6446	OutgoingContextWithLimitAndOffset adds "limit" and/or "offset" to context metadata based on input values.
6447	before determines if the end time of one schedule item is earlier than the start time of another.
6448	New creates a new error instance with specified attributes.
6449	WithNamespace adds a namespace field to the log context.
6450	Wrap creates a Namespaced instance with the given context and namespaces.
6451	WithField adds a namespace field to the logger if the key matches.
6452	WithFields adds fields to the logger's context.
6453	Format constructs a formatted string using the given format and values, handling errors gracefully.
6454	fix converts nil values to "<nil>" and recursively fixes non-nil pointers to their underlying values.
6455	GRPCCode maps custom error types to gRPC status codes.
6456	GRPCCodeToType maps gRPC status codes to custom types.
6457	GRPCCode converts an error to its corresponding gRPC status code
6458	FromGRPC converts a gRPC error to an internal Error.
6459	ToGRPC converts input error to gRPC error, preserving attributes if possible.
6460	isEnabled checks if a namespace is enabled based on rules.
6461	Set updates the namespaces slice under lock.
6462	Cause extracts the underlying error from an attribute map.
6463	parseCode converts a string to an integer and returns it as a Code type.
6464	UnaryServerInterceptor wraps gRPC unary RPCs to apply custom logic before and after handling requests.
6465	StreamServerInterceptor wraps a ConvertFunc to create a gRPC stream server interceptor.
6466	UnaryClientInterceptor creates a gRPC unary client interceptor using a conversion function.
6467	StreamClientInterceptor is a function to intercept gRPC streams with custom error handling.
6468	Interceptor creates a gRPC client interceptor using provided settings.
6469	Wrap logs messages using the specified logger.
6470	NewCounter initializes a counter with specified bucket size and retention period.
6471	NewRedisCounter creates a Redis-backed counter
6472	NewLimiter creates a new limiter
6473	WithInsecure returns a TokenCredentials instance allowing insecure connections while preserving other properties.
6474	WithTokenFunc creates a TokenCredentials instance with a tokenFunc and key.
6475	GetRequestMetadata retrieves authentication metadata based on context or configured token.
6476	FieldsFromIncomingContext extracts log fields from context metadata and peer information.
6477	String returns the string representation of the type.
6478	UnmarshalText converts text to Type.
6479	fromString maps a string to a predefined error type.
6480	Start initializes a goroutine to log memory stats at specified intervals.
6481	NewSimple creates a new simpleQueue instance with an empty queue and a condition variable.
6482	Wrap creates a new Filtered instance with a logger and optional filters.
6483	WithFilters appends filters to the existing filters slice.
6484	WithField applies filters to a field value before setting it in the Filtered struct.
6485	WithFields applies filters to log fields and returns a new Filtered instance.
6486	FilterSensitive filters out sensitive keys in a map using a specified elided value.
6487	SliceFilter applies a filter to elements within slices in a map, returning a new filtered map.
6488	MapFilter applies a filter to values within a map.
6489	RestrictFilter restricts the filter to apply only to a specific field.
6490	LowerCaseFilter converts keys to lowercase before filtering.
6491	newBatchPoints creates a new BatchPoints instance from the given configuration. If invalid, it panics with an error message.
6492	NewSinglePointWriter creates a new writer using provided logger and batch points writer.
6493	Write will add a point to batch points and write it using writer.
6494	WithScalingInterval sets the scaling interval option for a BatchingWriter.
6495	NewBatchingWriter creates a BatchingWriter with specified options, logging, and default settings.
6496	BatchingWriter handles writing points to InfluxDB, batching them when necessary.
6497	MustParseLevel parses log level or logs error if invalid.
6498	New creates a new Stream instance with specified buffer size and setup function.
6499	SetLogger updates Stream's logger.
6500	CloseRecv closes the receive buffer.
6501	Stats returns the number of sent and dropped packets in the stream.
6502	Run starts a streaming process handling sending and receiving messages until context cancels or errors occur.
6503	ServerOptions configures gRPC server options using provided logger.
6504	ClientOptions generates gRPC dial options with logging interceptors
6505	UnaryServerInterceptor logs gRPC calls with method, duration, and errors.
6506	StreamServerInterceptor logs RPC stream events with method, duration, and success/failure details.
6507	UnaryClientInterceptor logs gRPC calls.
6508	StreamClientInterceptor logs gRPC client streams and handles cancellations.
6509	Set default values for config fields.
6510	Flush will send the current batch asynchronously and reset it.
6511	New creates a Handler that uses the specified Writer and determines whether to enable color output based on environment variables.
6512	HandleLog processes log entries, formats them, and writes to a writer.
6513	New creates a new TTNRandom instance using a seed for random number generation.
6514	Names returns the names of terms from URI template parts where raw content is empty and no terms exist.
6515	String formats performance data with labels, values, units, and thresholds.
6516	RenderPerfdata concatenates performance data into a formatted string, adding a header if data exists.
6517	Exit prints an error message and exits the program with the given status.
6518	NewCheckWithOptions configures a new Check instance using the provided StatusPolicy or defaults if none is specified.
6519	AddResult updates the check's results and status based on new result.
6520	Formats message then adds result
6521	String method for Check object returns a formatted string including status and performance data.
6522	Exitf formats error message, adds result, then finishes check.
6523	Criticalf logs a critical message using format and args.
6524	Unknownf logs an unknown error with formatted message.
6525	NewDefaultStatusPolicy returns a statusPolicy with predefined severity levels.
6526	NewStatusPolicy generates a status policy from a list of statuses.
6527	ParseRange parses a range string into a Range object.
6528	Check determines whether the value falls within the range and alerts based on configuration.
6529	CheckInt checks if an integer value falls within a specified range.
6530	CheckUint64 checks if val fits within Range
6531	NewClient initializes a new API client with SSL configuration and constructs a base URL.
6532	GetKeyMeta retrieves metadata for a key at the specified path.
6533	GetKeysInDirMeta retrieves metadata for SSH keys in a specified directory.
6534	GetKeyContent retrieves key content from storage.
6535	GetJobSummariesForProject retrieves summaries for jobs in the specified project.
6536	GetJobsForProject fetches details for jobs associated with a project.
6537	GetJob retrieves details for the specified job ID.
6538	CreateJob submits a job creation request to the client.
6539	CreateOrUpdateJob updates or creates a job based on the provided JobDetail.
6540	DeleteJob calls delete method to remove job by ID.
6541	JobSummary constructs a new JobSummary object from jobImportResult properties.
6542	GetSystemInfo fetches system information using the client.
6543	DateTime parses the timestamp string using RFC3339 format and returns the corresponding time value.
6544	GetAllProjects retrieves all project summaries.
6545	GetProject fetches project details by name.
6546	CreateProject creates a new project using the provided details.
6547	DeleteProject deletes the specified project.
6548	SetProjectConfig updates project configuration.
6549	NewClient creates a client using username and password for authentication.
6550	NewClientbyToken creates a client using a token for authentication.
6551	SetDepth updates client's depth to a string representation.
6552	ListDatacenters retrieves datacenter information from the client.
6553	CreateDatacenter posts a new datacenter to the server.
6554	GetDatacenter fetches details for the specified data center.
6555	UpdateDataCenter updates properties of a data center.
6556	DeleteDatacenter deletes a datacenter and returns HTTP headers.
6557	WaitTillProvisioned waits for a request to complete by repeatedly checking its status until it reaches "DONE" or times out after 300 seconds.
6558	ListFirewallRules retrieves firewall rules for a specific network interface controller.
6559	GetFirewallRule fetches the firewall rule using specified identifiers.
6560	CreateFirewallRule sends a POST request to create or update a firewall rule.
6561	UpdateFirewallRule updates a firewall rule using the provided properties.
6562	DeleteFirewallRule deletes a firewall rule and returns HTTP headers.
6563	ListLoadbalancers fetches load balancer details for a given data center ID.
6564	GetLoadbalancer fetches details for the specified load balancer.
6565	UpdateLoadbalancer updates properties of a load balancer and returns the updated details.
6566	DeleteLoadbalancer deletes a load balancer using Client.
6567	ListBalancedNics fetches details of balanced NICs from the server.
6568	AssociateNic associates a NIC with a load balancer and returns it.
6569	GetBalancedNic fetches details for a network interface using specified identifiers.
6570	DeleteBalancedNic deletes a balanced NIC using client's delete method.
6571	ListLans retrieves LAN information for a given data center ID.
6572	GetLan retrieves details for a LAN resource using its ID.
6573	DeleteLan deletes a LAN with the given ID and returns the HTTP header.
6574	ListNics fetches network interface details for a given data center and server ID.
6575	CreateNic posts a new network interface configuration to the server and returns it.
6576	GetNic fetches details for a specific network interface.
6577	UpdateNic updates network interface configuration using PATCH request.
6578	DeleteNic deletes a NIC at the specified DCID, SRVID, and NICID.
6579	ListSnapshots retrieves snapshots using client's URL parameters.
6580	GetSnapshot retrieves a snapshot by ID.
6581	DeleteSnapshot deletes a snapshot by ID and returns HTTP headers.
6582	UpdateSnapshot updates a snapshot's properties.
6583	ListIPBlocks retrieves IP blocks using client parameters and returns them.
6584	ReserveIPBlock submits an IP block reservation request to the server and returns the reserved block details on success.
6585	GetIPBlock fetches details of a specific IP block using its ID.
6586	UpdateIPBlock updates an IP block identified by its ID with new properties and returns the updated block.
6587	ReleaseIPBlock deletes an IP block identified by id and returns the response headers.
6588	ListVolumes fetches volumes for a given dcid.
6589	GetVolume fetches details for a specified volume using its ID and DCID.
6590	UpdateVolume updates properties of a volume identified by dcid and volid.
6591	CreateVolume sends a POST request to create a volume
6592	DeleteVolume method deletes a volume using a client.
6593	CreateSnapshot creates a snapshot for the given volume with details.
6594	RestoreSnapshot posts restore-snapshot request to server.
6595	ListServers retrieves servers from the specified data center with given depth and pretty format.
6596	GetServer retrieves a server using its DCID and SRVID.
6597	DeleteServer removes a server from the cloud by its data center and server IDs, returning the response headers and any errors encountered.
6598	ListAttachedCdroms retrieves images attached to a CD-ROM.
6599	AttachCdrom method sends a POST request to attach a CD-ROM image to a virtual machine.
6600	GetAttachedCdrom retrieves an image based on CD-ROM details.
6601	DetachCdrom detaches a CD-ROM from a virtual machine.
6602	ListAttachedVolumes retrieves attached volumes for given数据中心ID和服务ID.
6603	AttachVolume sends POST request to attach a volume and returns the response.
6604	GetAttachedVolume retrieves volume details by ID.
6605	DetachVolume detaches a volume from a server using its DCID, SRVID, and VOLID.
6606	StartServer sends a POST request to start the server with the given IDs.
6607	ListLocations retrieves details about various locations.
6608	GetRegionalLocations fetches regional locations based on the given ID.
6609	GetLocation retrieves details for a specified location ID.
6610	GetContractResources fetches resources for a contract.
6611	ListImages retrieves images from the client using a specific URL.
6612	GetImage retrieves an image using its ID from the client.
6613	PrintHeaders prints each header key-value pair.
6614	ListGroups retrieves client's groups with specified depth and pretty format.
6615	GetGroup retrieves details for a specified group.
6616	CreateGroup creates a new group using the provided details.
6617	UpdateGroup updates group details at specified URL with given object.
6618	DeleteGroup sends HTTP DELETE request to remove a group.
6619	ListShares retrieves group shares with specified depth and pretty format.
6620	GetShare fetches share details by group and resource IDs.
6621	AddShare creates a new share for a specified group and resource.
6622	UpdateShare updates share object at specified group and resource ID with given depth and pretty format options.
6623	DeleteShare removes a share from a group, returning headers and any errors.
6624	ListGroupUsers retrieves users within a specified group.
6625	AddUserToGroup adds a user to a group and returns the updated user details.
6626	DeleteUserFromGroup removes user from group using client.
6627	ListUsers fetches user data from the API endpoint.
6628	GetUser fetches user details from the server using the provided user ID.
6629	CreateUser sends a POST request to create a new user and returns the created user object.
6630	UpdateUser updates user details on the server.
6631	DeleteUser removes a user by ID and returns response headers.
6632	ListResources retrieves all resources using the client's depth and pretty settings.
6633	GetResourceByType fetches a resource by type and ID.
6634	ListResourcesByType fetches resources of a specific type.
6635	ListRequests retrieves requests from the server.
6636	GetRequest fetches details of a request by ID.
6637	GetRequestStatus retrieves the status of a request at a given path.
6638	Close closes the file associated with the writer.
6639	GetSerializableArgument retrieves original or deserialized value based on interface method call.
6640	BoolVar sets a boolean flag with a default value and usage message.
6641	Bool returns a pointer to a boolean flag initialized with the given name, value, and usage.
6642	IntVar registers an integer flag with EnvironmentFlags.
6643	Int retrieves an integer flag from the environment.
6644	Int64Var sets the int64 variable p to the specified value.
6645	Int64 retrieves an int64 value from environment flags.
6646	UintVar assigns a default value to a uint flag in the environment.
6647	Uint retrieves a uint flag from environment flags.
6648	Uint64Var sets the uint64 variable p's value using EnvironmentFlags.
6649	Uint64 retrieves a uint64 value from environment flags.
6650	StringVar sets the environment flag's string variable.
6651	String returns a pointer to a string value.
6652	Float64Var sets the flag p to the value with the given name and usage.
6653	Float64 retrieves a float64 value from environment flags.
6654	DurationVar sets the duration variable p to the specified value.
6655	Duration retrieves a time.Duration from environment flags.
6656	Parse cleans environment vars and sets flags.
6657	WriteStringToFile writes text to a file at the specified path.
6658	ReadFileToString reads a file and returns its content as a string.
6659	LineReader reads lines from a reader and returns a channel of strings and an error.
6660	LineReaderFrom creates a channel to read lines from a file at the given path.
6661	Function to check if file exists at specified path.
6662	FileExistsInPath checks if a file exists in the system's PATH.
6663	GetPathParts extracts directory, file, and absolute paths from a given path.
6664	GetThisPathParts retrieves directory, file name, and absolute path of the executable
6665	RandomString generates a random string of specified length using cryptographically secure random numbers.
6666	ParseAddress extracts protocol and path from the given address.
6667	HomeDir retrieves the current user's home directory path.
6668	IsTCPPortAvailable checks if the specified TCP port is available by attempting to listen on it and closing the connection. Returns true if the port is available within the specified range.
6669	RandomTCPPort finds a random TCP port between two specified limits and returns it if available; otherwise, it returns -1.
6670	HashString hashes a string to an integer within a specified number of buckets using a jump hash algorithm
6671	Context retrieves session details using access token from metadata.
6672	Token retrieves OAuth2 token from session.
6673	NewDaemon initializes a new Daemon instance with options. It sets up logging, RPC, and storage configurations before returning the daemon object.
6674	Close stops the daemon gracefully, closing all associated resources like server, PostgreSQL, debug listener, and tracer.
6675	NewAccessTokenContext adds an access token to the given context.
6676	AccessTokenFromContext retrieves an access token from a context if it exists.
6677	Generate a random access token using SHA-3 hashing and encoding.
6678	Init configures a logger based on environment and options; it returns a new logger instance or an error.
6679	Load reads a dictionary file and populates a Dic struct with its parts.
6680	Start initiates a new storage session using provided credentials and metadata.
6681	Get retrieves a session using the provided access token.
6682	List retrieves sessions from storage based on pagination and expiration criteria.
6683	Exists checks if a resource exists using PostgreSQL.
6684	Abandon will attempt to abandon a session using the provided access token and return success or failure.
6685	SetValue updates the specified session's key-value pair in storage.
6686	Delete removes sessions based on criteria, returning affected rows.
6687	Setup creates database schema and table for storing access tokens with indexes.
6688	TearDown will drop the schema and its contents from the database.
6689	initJaeger configures Jaeger tracing with specified service, node, and agent address, initializing a tracer and closer.
6690	Usage prints help message to errorWriter explaining how to use the command-line tool.
6691	Build constructs a DoubleArray from keywords with assigned IDs. Error is returned if construction fails.
6692	Read decodes a binary stream into a DoubleArray.
6693	Get will return node k from cluster nodes if it exists; otherwise, it returns nil and false.
6694	ExternalNodes filters out internal nodes from cluster's node list.
6695	GetOther returns another node based on access token if available.
6696	GoString generates a JSON representation of the Cluster object.
6697	Scan decodes data from various sources using Gob encoding.
6698	Value encodes Bag to driver.Value using gob.
6699	Has checks if a key exists in a bag.
6700	WriteTo method serializes index data to writer.
6701	ReadIndexTable reads an index table from a reader, handling potential errors during decoding.
6702	New creates an ActionBar instance with associated controller handlers.
6703	RegisterAction adds an action to ActionBar's GlobalActions.
6704	Actions adds actions to ActionBar and returns new instance.
6705	Render action bar with actions and inline actions based on request.
6706	FuncMap generates a template function map for rendering edit buttons in action bars.
6707	EditMode checks if admin context is in edit mode.
6708	SwitchMode sets a cookie based on URL query and redirects to referrer.
6709	InlineEdit renders "action_bar/inline_edit" template.
6710	Error returns formatted string representation of the error details.
6711	ParseFile opens a file and parses its contents into machines and macros.
6712	FindMachine retrieves a machine by name or returns a default if none found.
6713	New creates a Kace instance using a case-insensitive trie from given initialisms.
6714	Camel will convert a string to camel case using a specified transform function.
6715	Pascal converts snake_case string to PascalCase using transformation rules.
6716	Snake converts a string to snake case using a specified delimiter.
6717	SnakeUpper converts string to snake case with upper first letter
6718	Kebab converts a string to kebab case using a helper function
6719	KebabUpper converts string to kebab case with uppercase first letter
6720	isPathSafe checks if the URL path is safe by unescaping it, verifying it doesn't contain '..', and ensuring it matches a whitelist pattern.
6721	Start initializes WriterTracer with request details.
6722	ParseAuthHeaders extracts authentication credentials from HTTP headers or query parameters, handling both Basic and Bearer schemes. Returns parsed AuthCreds or error if invalid.
6723	Tracer sets a custom tracer for the client.
6724	HTTPClient configures the client with an http.Client instance.
6725	BasicAuth sets up basic authentication for a client with given credentials.
6726	BearerAuth sets the bearer authentication token for the given client.
6727	CookieJar sets the cookie jar parameter for HTTP client.
6728	SanitizerEnabled returns a ClientParam to set sanitizerEnabled on a client.
6729	OpenFile creates a seeker for the specified file using the given context and parameters.
6730	RoundTrip executes a request using a given function and returns a response.
6731	SetAuthHeader updates the Authorization header if authentication details exist.
6732	FileName extracts filename from Content-Disposition header.
6733	newBuffersFromFiles creates buffers from file objects.
6734	newFileBuffer wraps a file's reader with a buffer for caching.
6735	Rewind method sets fileBuffer Reader to MultiReader of cache and File Reader.
6736	ConvertResponse wraps or reads errors from a response object.
6737	Set converts string to BoolOption value, updates source and defined fields.
6738	WriteAnswer sets BoolOption's Value based on input interface{} and updates Defined and Source fields.
6739	String returns a formatted representation of this BoolOption based on the value of StringifyValue.
6740	TriggerIncidentKey generates an incident key based on description and key parameters.
6741	TriggerWithDetails creates an incident with a description and optional details.
6742	TriggerIncidentKeyWithDetails invokes trigger to create an incident key with details.
6743	Merge combines two structs using reflection.
6744	setSource recursively sets source for various types including maps, structs, arrays, and slices, handling nested structures and updating fields accordingly.
6745	convertString converts the input string to the specified destination type.
6746	Do starts a database transaction, executes a function, and commits or rolls back based on the function's success.
6747	NewFile opens or creates a file and returns its writer.
6748	internalRun manages concurrent requests within a benchmark duration, handles results, and returns aggregated outcomes.
6749	String returns a formatted string representation of the Row data.
6750	Tabulate converts result sets into tabulated rows with timing and success metrics.
6751	AmazonRequest sends HTTP GET request to Amazon UK and closes response body.
6752	WriteTabularData formats and writes tabular data to a writer based on a result set and interval.
6753	Reduce organizes results into time intervals using buckets.
6754	NewSemaphore creates a semaphore with limited concurrency, adjusting based on ramp-up time.
6755	Release decrements semaphore count.
6756	Resize will adjust the capacity of the semaphore and transfer its values safely.
6757	AddOutput appends an output container with specified interval, writer, and output function to Bench's outputs.
6758	RunBenchmarks executes benchmarks using the provided request function and processes the results.
6759	parseBool decodes a boolean value from ASN.1 bytes.
6760	checkInteger returns an error if the byte slice does not represent a minimally encoded ASN.1 integer.
6761	parseInt64 converts byte slice to int64, handling errors and overflow.
6762	parseInt32 converts byte slice to int32, ensuring it fits within 32 bits.
6763	parseBigInt converts byte slice to big.Int, handling negative numbers. Error is returned if conversion fails.
6764	parseBitString decodes a bit string from ASN.1 format.
6765	parseObjectIdentifier extracts an ASN.1 object identifier from bytes into a sequence of integers
6766	parseBase128Int parses a base-128 encoded integer from bytes.
6767	parseGeneralizedTime converts ASN.1 generalized time bytes to a time.Time object, validating the serialization round-trip.
6768	parsePrintableString checks if input bytes contain only printable characters, returning the string or an error if not.
6769	isPrintable checks if a byte is printable based on ASCII ranges.
6770	parseSequenceOf parses a byte sequence into a slice of values based on the specified element type.
6771	invalidLength checks if adding length to offset exceeds sliceLength.
6772	setDefaultValue sets default value for a parameter if not optional.
6773	UnmarshalWithParams unmarshals JSON data into a Go value using specified parameters.
6774	parseFieldParameters parses a comma-separated string to set various parameters like optional, explicit, time type, etc.
6775	getUniversalType determines the ASN.1 tag number and type for a given Go type.
6776	DecodeString decodes a Base32 encoded string with padding.
6777	MailNotifier retrieves a mail notifier from MongoDB.
6778	SaveMailNotifier updates mail notifier info.
6779	RegisterProvider is used to add authentication providers with unique names, logging a critical error if duplicates are detected.
6780	MongoDb.InitDb initializes the user table during database setup; it handles errors and returns them.
6781	Until repeatedly executes a function at a specified interval until stopped.
6782	logPanic logs the call stack when a panic occurs.
6783	User retrieves user data from MongoDB based on username.
6784	Users retrieves users from the database based on a filter.
6785	MongoDb saves or updates a user document in the database.
6786	DeleteUser removes a user from the database by their username.
6787	LoadCACertFile loads the CA certificate file and returns a CertPool.
6788	NewAuth creates and returns a pointer to a new Auth instance with optional configuration.
6789	ValidateRequest checks TLS certificates for validity.
6790	Process validates HTTP request's TLS certificate against allowed OUs and CNs, handling errors via authErrHandler if validation fails.
6791	ValidateCN checks if the verified certificate's Common Name matches any allowed CN; otherwise, it returns an error.
6792	ValidateOU checks if the certificate's OU matches any allowed OU; returns error if no match found.
6793	KeyLen calculates the number of bytes needed to represent the given unsigned integer.
6794	DefaultConfig initializes a Vault client with specified address and returns a new configuration.
6795	New creates a CertSigner instance with the provided config; returns an error if Vault client is missing.
6796	New creates a vault factory instance with configuration validation.
6797	DefaultServiceConfig initializes a Vault client with default settings and returns a ServiceConfig with the VaultClient dependency.
6798	NewService creates a new service instance using the provided configuration, validating the Vault client dependency.
6799	Unmounts PKI backend for a given cluster ID.
6800	IsNoVaultHandlerDefined checks if the given error signifies that no vault handler is defined for a specific route.
6801	New initializes a new Service instance with VaultClient and PKIMountpoint from the given configuration.
6802	Create adds a new role to Vault with specified parameters.
6803	CreateJob initializes a new Config with default settings for lock provider, runtime processor, result processor, processing frequency, and summary buffer.
6804	Run ensures lock and starts worker, panicking on failure.
6805	newWatcher creates a Watcher with specified directories or files to monitor.
6806	Start initializes and returns a channel for notifications, starting a goroutine to watch items if auto-watch is enabled.
6807	Stop closes notification and addition channels of Watcher.
6808	Active checks if Watcher has active paths.
6809	Add watches paths based on input patterns and auto-watch settings.
6810	watcher watches for file system events on specified paths and sends notifications via the given channel.
6811	Watching returns all paths being watched by a watcher.
6812	State collects notifications from watched paths.
6813	Store captures errors from HTTP requests and stores them in the request context.
6814	Get retrieves error from request context
6815	Catch middleware wraps HTTP handlers to catch and handle errors using the provided handler function.
6816	Try wraps an HTTP handler, invoking it and storing any errors.
6817	Recover middleware handles panics by storing them with stack traces.
6818	HTTP GET request reads stream data and logs each chunk size.
6819	SyncHandler creates an HTTP handler for syncing structs.
6820	connect handles HTTP requests to establish a connection using different transports, sends an initial ping, and manages a ping loop while waiting for disconnection.
6821	send locks mutex and forwards update to transport for sending.
6822	NumConnections returns the number of connections in the state.
6823	Push attempts to start a state push; if successful, it runs asynchronously.
6824	gopush updates state and notifies subscribers, ensuring thread safety and efficient patch generation.
6825	NewOutForward creates an OutForward instance with configured loggers and initializes sent count.
6826	`Run starts processing input messages and tailing files.`
6827	New initializes a Fluent instance with default values and connects to the server.
6828	Close closes the connection if it exists.
6829	IsReconnecting checks if a Fluent client is currently reconnecting.
6830	connect resolves server address using DNS and establishes a TCP connection with timeout.
6831	Notification creates a new notifier with specified title, message, duration, and empty sound path.
6832	NullNotification creates a new notifier with specified title, message, duration, and empty icon.
6833	New will initialize and return a configuration object based on provided options.
6834	Issue applies opts to id and returns a new Identity.
6835	Subject sets the subject field c value.
6836	PrivateKey sets the priv field of c to the provided Signer value.
6837	NotBefore sets the notBefore field c value.
6838	NotAfter sets the notAfter field in configuration to the specified value.
6839	IssuingCertificateURL appends values to c.issuingCertificateURL.
6840	OCSPServer appends value to c.ocspServer.
6841	New creates a new Telegram bot API instance.
6842	NewWithWebhook initializes a Telegram bot API with a webhook.
6843	Close closes the Telegram bot API connection.
6844	GetMe retrieves user information from Telegram.
6845	Run bot using API key, bot function, name, and description.
6846	Run bot on webhook and start listening for updates.
6847	NewOutgoingMessage creates a new OutgoingMessage struct for sending messages.
6848	NewOutgoingLocation creates a new OutgoingLocation message for Telegram Bot API.
6849	NewOutgoingVenue constructs a new OutgoingVenue message for Telegram bot API.
6850	NewOutgoingVideo creates a new OutgoingVideo instance for sending video messages.
6851	NewOutgoingVideoResend creates a new outgoing video message to resend.
6852	NewOutgoingPhoto creates a new OutgoingPhoto instance for sending photos to a Telegram bot.
6853	NewOutgoingPhotoResend creates a new outgoing photo message to resend an existing photo.
6854	NewOutgoingSticker creates a new OutgoingSticker instance for sending stickers to a Telegram bot.
6855	NewOutgoingStickerResend creates a new sticker resend message with the given recipient and file ID.
6856	NewOutgoingVoice creates a new outgoing voice message.
6857	NewOutgoingVoiceResend creates a new outgoing voice message.
6858	NewOutgoingAudio creates a new OutgoingAudio object for sending audio files to a Telegram bot.
6859	NewOutgoingAudioResend creates a new outgoing audio message to resend with the given file ID.
6860	NewOutgoingDocument creates a new OutgoingDocument for sending documents to a Telegram bot.
6861	NewOutgoingDocumentResend creates a new document resend message.
6862	NewOutgoingForward creates a new outgoing forward message.
6863	NewOutgoingChatAction creates a new OutgoingChatAction with the specified recipient and chat action.
6864	NewOutgoingUserProfilePhotosRequest creates a new OutgoingUserProfilePhotosRequest instance for the Telegram bot API.
6865	NewOutgoingKickChatMember creates a new OutgoingKickChatMember instance with the given TelegramBotAPI, Recipient, and UserID.
6866	NewOutgoingUnbanChatMember creates a new outgoing unban chat member command.
6867	NewOutgoingCallbackQueryResponse creates a new outgoing callback query response
6868	NewInlineQueryAnswer creates a new InlineQueryAnswer instance with the given parameters.
6869	Type determines the message type based on its fields.
6870	Type determines the type of update based on its content.
6871	MarshalJSON converts recipient to JSON format based on channel or chat ID.
6872	querystring method constructs a querystring map based on URL value.
6873	getBaseQueryString constructs a base query string based on recipient type
6874	getBaseQueryString constructs a base query string for outgoing messages based on recipient type and optional parameters.
6875	querystring constructs a URL query string from OutgoingAudio properties.
6876	querystring constructs a URL query string from base query parameters and optional caption.
6877	querystring constructs the URL parameters for fetching user profile photos based on the request criteria.
6878	querystring generates a URL-encoded query string from OutgoingVideo fields.
6879	querystring constructs a URL query string from the outgoing voice data.
6880	NewInlineQueryResultArticle creates a new inline query result article with specified ID, title, and text.
6881	`NewInlineQueryResultPhoto` constructs a new `InlineQueryResultPhoto` instance with specified ID, photo URL, and thumbnail URL.
6882	NewInlineQueryResultGif constructs a new GIF query result
6883	NewInlineQueryResultMpeg4Gif creates a new inline query result for MPEG-4 GIFs.
6884	NewInlineQueryResultVideo constructs an InlineQueryResultVideo instance with specified parameters.
6885	Send sends a request to get user profile photos and returns the response.
6886	Send sends a chat action using the OutgoingChatAction instance.
6887	Send sends an inline query response.
6888	Send initiates sending a chat member removal request and validates the response.
6889	Send sends an unban chat member request.
6890	Send sends the callback query response using the API.
6891	NewAPIClient creates an APIClient instance with default HTTPClient if not provided.
6892	BeforeInsert sets CreatedAt and UpdatedAt to current time.
6893	ColumnName returns the quoted column name optionally prefixed by the table name.
6894	New opens a database connection using the specified dialect and data source name (DSN). If successful, it returns a DB instance; otherwise, it returns an error.
6895	From sets the TableName based on the struct type of arg.
6896	Where method constructs a query condition using the provided arguments.
6897	OrderBy constructs a condition for ordering query results based on specified table and column.
6898	Limit sets the limit on the number of results returned
6899	Offset creates a new condition with the specified offset.
6900	JoinCondition joins table to database db.
6901	Count constructs a new Function object with the COUNT name and the provided arguments.
6902	Update modifies obj in the database, returning the number of affected rows and any error encountered.
6903	delete will remove objects from the database based on primary keys.
6904	Begin starts a transaction on the database connection.
6905	Commit locks database, checks transaction status, commits transaction, and resets it.
6906	Quote will return a quoted version of a string using the database's dialect.
6907	SetLogOutput configures the logger's output destination. If `w` is nil, it uses a default logger; otherwise, it sets a custom logger using the provided writer and template.
6908	selectToSlice reads rows from a SQL database and maps them to a slice of structs.
6909	selectToValue scans SQL rows into a Go value, handling pointers recursively.
6910	fieldIndexByName recursively searches for a struct field by name, returning its index path or an empty slice if not found.
6911	columns constructs SQL column names from input values, handling various types including Raw, string, and Distinct. It returns a comma-separated string of column names.
6912	tagsFromField extracts tags from a struct field's metadata.
6913	hasSkipTag checks if a struct field has a skip tag in the database context.
6914	hasPKTag checks if field has 'pk' tag indicating primary key.
6915	isAutoIncrementable checks if a database field type supports auto-increment.
6916	collectFieldIndexes recursively collects all valid field indexes based on type and tag conditions.
6917	findPKIndex recursively searches struct fields to find primary key indices.
6918	sizeFromTag retrieves the size from the struct field's tag in the database.
6919	columnFromTag extracts a column name from a struct field tag or converts the field name to snake case.
6920	defaultFromTag extracts the default value from a struct field's tag and formats it accordingly.
6921	Where appends a query condition to the Condition instance.
6922	And appends a new condition to the current query using the "And" operator.
6923	Or appends an OR condition to the query.
6924	Like appends a query condition to c with type 100.
6925	Between appends a query to c using the between operator with from and to values.
6926	OrderBy appends ordering criteria to Condition.
6927	Limit appends a query to Condition with a limit value.
6928	appendQuery appends an offset query to Condition.
6929	SetFormat parses format string, locks logger, assigns new template, unlocks, returns error.
6930	Print logs SQL queries with execution details using a template logger.
6931	Print logs without any action.
6932	Quote adds backticks to a MySQL identifier
6933	SQLType determines the appropriate PostgreSQL data type based on the input value's type, handling various cases including integers, strings, booleans, and more, while also considering auto-increment settings.
6934	New creates an Archive from a file, detecting its format based on the extension.
6935	Disconnect closes the connection handle if valid.
6936	nextNetworkAdapterID finds the next available network adapter ID in VMX settings.
6937	totalNetworkAdapters calculates the highest numbered network adapter from a VMX configuration.
6938	RemoveAllNetworkAdapters removes all network adapters from the VM.
6939	RemoveNetworkAdapter removes a network adapter from a virtual machine if it's not running.
6940	NetworkAdapters retrieves network adapters configuration from VMX file.
6941	newArchive initializes a new Archive object from a given path and optional password.
6942	GetFileReader extracts and returns a reader for a file within an archive using 7z command.
6943	ExtractToWriter copies a file from the archive to the specified writer.
6944	ExtractToFile extracts file from archive to specified destination path.
6945	SharedFoldersParentDir retrieves the parent directory of shared folders for a guest.
6946	Name retrieves snapshot's display name.
6947	Description retrieves snapshot description from VIX API.
6948	cleanupSnapshot releases a snapshot handle if it's valid.
6949	BusTypeFromID determines the virtual machine bus type based on the ID prefix.
6950	Read reads VMX file data and unmarshals it into a VirtualMachine model.
6951	Write VMXFile content to disk.
6952	NewVirtualMachine initializes a new VM instance from a VIX handle and VMX file path.
6953	Vcpus retrieves VM's vCPU count.
6954	VmxPath retrieves VM's VMX file path.
6955	MemorySize retrieves VM memory size.
6956	ReadOnly checks if a VM is read-only and returns a boolean value along with an error if any occurs.
6957	InVMTeam checks if VM is in a team.
6958	PowerState retrieves the power state of the virtual machine.
6959	ToolsState retrieves the current state of VM guest tools, returning an error if unsuccessful.
6960	IsRunning checks if a virtual machine is currently running.
6961	GuestOS retrieves VM's guest OS name.
6962	cleanupVM releases the VM handle if it's valid.
6963	updateVMX updates a VM's vmx settings while ensuring it is powered off.
6964	SetMemorySize updates VM's memory size while ensuring divisibility by 4.
6965	SetNumberVcpus updates VM's number of virtual CPUs, ensuring at least one.
6966	SetDisplayName updates VM's DisplayName via updateVMX.
6967	SetAnnotation updates VM's Annotation field using updateVMX method.
6968	SetVirtualHwVersion updates VM's virtual hardware version.
6969	Error method returns formatted VIX error details.
6970	Wraps formatted error message
6971	Error method constructs a string representation of the error, appending stack frames to the base error message.
6972	string method returns formatted stack frame information.
6973	newStackFrame constructs a stack frame from program counter details.
6974	captureStack captures stack traces, skipping specified frames up to a maximum depth.
6975	parseFuncName extracts package path and signature from function name using regex.
6976	Stack logs the error along with a stack trace.
6977	StackWithCaller logs the error along with the stack trace, optionally including the package name.
6978	Write implements http.ResponseWriter.Write.Calls functions in before slice then writes data to Writer.
6979	ResponseStatus retrieves the HTTP status code from a response writer.
6980	httpResponseStruct recursively finds the http.response struct within a nested value.
6981	SetDetectedContentType sets response content type based on input bytes
6982	New creates a new ServerError instance with specified message.
6983	New initializes a new DBError instance with specified database name and error message.
6984	New creates a new validation error with the given message.
6985	New creates a new NotFoundError instance with specified message.
6986	StrLength validates the length of a string field, panicking if it doesn't match the specified length.
6987	StrLenIn validates the length of a string field against specified lengths.
6988	StrIn checks if a string field's value is valid based on predefined options. If not, it panics with a validation error.
6989	GetEmail retrieves an email from input, validating its format; panics on invalid input.
6990	MostSpecificType finds the most specific type from a list
6991	FullTypeHierarchy constructs the full type hierarchy starting from the highest level type to its root.
6992	SortTypes sorts a slice of strings and returns them in sorted order, or an error if not hierarchical.
6993	Delete is part of redisStore.
6994	Set will store key-value pairs in redis.
6995	refresh updates redis store values and expiration time.
6996	Get retrieves all values for a given session ID from Redis.
6997	Destroy method deletes a Redis key.
6998	UpExpire sets the expiration time for a session ID in Redis.
6999	Use adds router handler h to the stack.
7000	ServeHTTP handles HTTP requests, sets headers, recovers from panics, processes handlers, and manages context.
7001	Use adds middleware to Handlers and returns RouterGroup object.
7002	Group combines handlers and calculates absolute path for RouterGroup.
7003	Start server after running before functions, parsing command line, setting defaults, and handling graceful shutdown.
7004	create initializes and returns a new Engine instance.
7005	Implements http.Handler.Redirect
7006	Ok writes a success response with JSON-encoded data to the client.
7007	Fail logs error or sends internal server error response based on conditions.
7008	ResStatus sets response status and returns it.
7009	Next advances to the next handler in the stack if possible.
7010	GetSession retrieves the session from context data if it exists and is of type IStore.
7011	Parse request body to JSON.
7012	Sets session data with expiration.
7013	FreshSession will invalidate an existing session identified by the key
7014	DeleteSession removes session data, destroys provider, and clears cookie.
7015	contextWriter's Write method updates written flag and calls underlying ResponseWriter's Write method
7016	WriteHeader sets written flag and calls ResponseWriter's WriteHeader method
7017	New initializes a Client with a PEM path and applies optional configurations, returning it or nil on error.
7018	setAllowLargeResults updates client settings and returns no error
7019	connect authenticates and creates a BigQuery service client using JWT credentials.
7020	InsertRow inserts a new row into BigQuery using the provided project, dataset, table, and data.
7021	AsyncQuery asynchronously queries data using the specified parameters and sends results to the data channel.
7022	Query retrieves data from a specified dataset and project using a given query string.
7023	stdPagedQuery performs a paginated BigQuery query and processes results.
7024	largeDataPagedQuery executes a BigQuery query in chunks, handling pagination and errors.
7025	pagedQuery executes a paginated query using a client connection.
7026	pageOverJob fetches query results from BigQuery in pages, handling pagination and sending results through channels.
7027	Count executes a SQL query to return the number of rows in the specified dataset table.
7028	fetch URL, recurse with depth, collect results.
7029	subworker executes a job and handles panics, storing results or errors accordingly.
7030	Worker manages job processing in a pool.
7031	Supervisor manages job lifecycle in a pool, handling adding, running, completing, and statistics.
7032	Starts worker goroutines for a pool, initializes workers and supervisor.
7033	Add submits a new job to the pool.
7034	Wait blocks until all tasks are done
7035	Results retrieves all completed jobs from a pool and clears the job completion list.
7036	WaitForJob waits for a job to complete and returns it.
7037	Status retrieves Pool's current statistics or a default zeroed struct if the supervisor hasn't started.
7038	WrapHTTPHandlerFunc wraps HTTP handler functions.
7039	WebSocketHandlerFunc converts a websocket handler to an HTTP handler.
7040	StaticFile generates a static file response with inferred or specified content type.
7041	PreloadFile reads file content and sets appropriate Content-Type header based on filename extension.
7042	HTML templates are initialized based on a pattern. Errors during parsing are returned.
7043	InitTextTemplates parses text templates based on a glob pattern.
7044	Html creates a new template with specified content type and character set.
7045	Text creates a template with content type and character set.
7046	InitWatcher monitors files matching a pattern and executes a callback on changes or errors.
7047	CloseWatcher signals all watchers to close and then closes the watcher.
7048	Find retrieves handler and view from routers based on path matching or list traversal.
7049	Add will register a new route with its corresponding handler and view, either replacing an existing exact match or adding it to the front of the route list.
7050	NewRouters initializes a new Routers instance with an empty map and a linked list.
7051	NewServerMux creates a ServerMux with predefined view and handler functions.
7052	err handles errors using custom handler if available
7053	HandleFunc adds a route handler to the server mux.
7054	handleError processes errors, updates context, and logs them.
7055	Updates response status and data
7056	InitPProf configures pprof endpoints on the server mux.
7057	StartSession initializes a new session using a factory function.
7058	recursive utility function to generate combinations of elements from a list.
7059	recursive function to generate combinations of elements from a list.
7060	permutations generates all possible permutations of a given list of integers with a specified number of elements to select, using recursion and goroutines to efficiently compute and return the results through a channel.
7061	recursive function to generate repeated permutations of a list.
7062	gformat formats input string using placeholders from args map.
7063	Errorm formats an error message using a format string and arguments, then returns it as an error.
7064	Fprintm formats and writes text to writer using map arguments.
7065	Printm formats and prints a map using a given format string.
7066	Sprintm formats and returns the text using a map of arguments.
7067	Validate checks password strength against requirements and returns validity status and error message.
7068	MakeRequirements calculates password strength requirements based on length and character types.
7069	sanityCheck verifies password strength requirements and returns validity status along with an error message if any requirement is violated.
7070	password generates a secure string based on strength requirements.
7071	NewPassword generates a password based on strength requirements.
7072	NewPasswords generates 'n' passwords based on given strength requirements. If requirements are invalid or fail, it returns an error.
7073	addNums appends random numbers to a string until it reaches the desired digit count.
7074	punctuate adds a specified number of random punctuation marks at even or odd positions in a given string.
7075	deprecated_init initializes Stdin based on command-line parameters or standard input.
7076	Param assigns a value to a parameter in p.
7077	Parse reads JSON from reader into params.
7078	Unmarshal deserializes JSON data into a given variable using a reader.
7079	GetDefaultHTTPClient creates an HTTP client with a specified timeout
7080	DeviceInfo fetches details using HTTP GET.
7081	DevicePresence checks the presence of devices using their IDs and returns response or error.
7082	NotificationStatus fetches the status of a notification using its ID.
7083	DeleteNotification sends a request to remove a notification using the provided push ID.
7084	NotifyDevice sends a notification to a device using Pushy API.
7085	Assert checks a condition and logs error details if false.
7086	CreateFile creates a file with specified size and stores data in it.
7087	Adds error to form errors
7088	AddFieldError appends an error to the specified field in FieldErrors.
7089	FormErrors.HasErrors checks if there are any form errors or field-specific errors present.
7090	Creates new FormErrors instance and adds error.
7091	NewFieldError will add a field error to a FormErrors instance.
7092	function to chain multiple HTTP handlers together.
7093	FinalHandler returns a no-op handler that delegates to the original handler.
7094	Hash reads from a reader and returns a truncated MD5 hash string.
7095	IsHash checks if a string is a valid MD5 hash.
7096	WithBaseDir sets the base directory for file operations using a custom file find function.
7097	WithFileFindFunc sets fileFindFunc option using provided function.
7098	WithTemplateFromFiles creates an option to set template files for a given name.
7099	WithTemplatesFromFiles creates an option to set templates from files in Options.
7100	WithTemplateFromStrings creates an Option to set strings for a given name.
7101	WithTemplatesFromStrings returns an Option to set string templates from a map on Options.
7102	WithFunction adds a function to the options under a given name.
7103	WithFunctions adds functions to Options.
7104	WithDelims sets delimiters for options.
7105	New creates and initializes a Templates instance with specified options.
7106	RespondWithStatus renders a template and sends it with a specified HTTP status.
7107	RespondTemplate will respond with a template based on the given name and data, using a default status.
7108	Respond will send a response using templates, setting the HTTP status to 0.
7109	RenderTemplate executes a named template with given data and returns its rendered string or an error.
7110	New creates a Server with an HTTP handler and optional TLS configuration.
7111	ServeUDP sets server address from UDP connection and calls Serve method.
7112	Shutdown shuts down the server by closing it.
7113	Wrap HTTP handler to set QUIC headers before serving request.
7114	GetRequestIPs extracts IP addresses from HTTP request headers
7115	DomainRedirectHandler modifies HTTP requests based on domain and protocol settings, redirecting them as needed.
7116	New creates a Servers instance with default logger and recover functions, then applies any provided options.
7117	Add will lock servers, append a new server with given details, then unlock.
7118	TCPAddr retrieves the TCP address for a server by its name.
7119	UDPAddr retrieves the UDP address for a server by name.
7120	Close stops all servers, waits for them to finish, and recovers from panics.
7121	Shutdown initiates graceful server shutdowns, waiting for all to complete before returning.
7122	TLSListener's Accept method handles incoming TCP connections, sets keep-alive options, reads data, and either upgrades to TLS or returns a regular connection.
7123	NewStaticFilesHandler wraps handler h to serve static files from fs under prefix p
7124	ServeHTTP handles HTTP requests after authentication and optional post-auth processing.
7125	MarshalJSON serializes options as JSON with various durations and booleans.
7126	UnmarshalJSON deserializes JSON data into options.
7127	MarshalYAML serializes options to YAML format.
7128	UnmarshalYAML deserializes YAML data into Options.
7129	NewHandler wraps an HTTP handler, logs details about the request and response, and passes along the original handler's functionality.
7130	WithPanicResponse sets panic response body and content type for Handler.
7131	WithPanicResponseHandler sets a panic response handler option.
7132	New creates a Handler instance wrapping the given handler and applying any provided options, including logging functionality. If no options are specified, it uses default settings.
7133	ServeHTTP handles HTTP requests, recovering from panics and notifying about them.
7134	NewContextFunc returns a closure that retrieves values from a map by key.
7135	NewMapErrorRegistry initializes a new MapErrorRegistry instance with optional error and handler maps.
7136	Adds error to registry if not already registered
7137	AddMessageError registers a new error message with a unique code in the registry.
7138	MustAddError attempts to add an error to the registry; panics if the addition fails.
7139	MustAddMessageError adds a message error to registry or panics if fails
7140	Adds handler to registry if not already registered
7141	Implements MapErrorRegistry.MustAddHandler
7142	Handler retrieves the error handler based on the given HTTP status code.
7143	New creates a new client with specified endpoint and error registry.
7144	Request sends HTTP request with specified method, path, query, body, and acceptable content types.
7145	JSONContext sends a request with JSON content type and unmarshals the response to a struct.
7146	StreamContext sends a request with a context and returns response data and content type.
7147	Stream invokes StreamContext with nil context, forwarding other parameters.
7148	JSONUnmarshal parses JSON data into Go value v, returning an error with line and column details if parsing fails.
7149	ServeTCP configures and starts serving on a TCP listener.
7150	ServeTCP wraps Server.Serve method. It serves TCP connections using the given listener.
7151	Shutdown gracefully stops the server.
7152	HandleMethods processes HTTP requests using registered methods and handles unsupported methods accordingly.
7153	NewSetHeadersHandler returns an HTTP handler that sets specified headers before delegating to the original handler.
7154	New creates a Server instance with specified root and directory, initializing options and synchronization primitives.
7155	HashedPath returns a hashed path or the original path if hashing fails.
7156	New creates a new Service instance with default settings and applies provided options.
7157	HTMLHandler wraps HTTP handlers to check maintenance status before serving requests.
7158	Status retrieves the service's operational status.
7159	StatusHandler responds with the maintenance status.
7160	OnHandler handles maintenance status updates; logs errors and returns appropriate HTTP responses based on changes.
7161	OffHandler toggles maintenance mode off, logs errors, and returns appropriate HTTP responses.
7162	MarshalJSON converts IRC message request to JSON format.
7163	MarshalJSON converts PostArtifactRequest to JSON format.
7164	MarshalJSON converts PostArtifactResponse to JSON format recursively.
7165	MarshalJSON recursively serializes the hook changed message.
7166	MarshalJSON converts TriggerHookRequest to JSON format.
7167	MarshalJSON serializes the trigger hook response using JSON.
7168	UnmarshalJSON appends JSON data to TriggerHookResponse slice.
7169	MarshalJSON converts LaunchInfo to JSON format recursively.
7170	MarshalJSON converts variable to JSON format recursively.
7171	MarshalJSON converts Var1 to JSON using RawMessage.
7172	MarshalJSON converts Var3 to JSON format recursively.
7173	MarshalJSON serializes the time as a string within the specified year range.
7174	UnmarshalJSON parses JSON data to time.Time.
7175	Write writes a slice of bytes to the buffer, expanding it if necessary, and updates the position accordingly.
7176	Seek updates the read/write position based on offset and whence.
7177	Reads data from buffer; returns number of bytes read and error if any. Adjusts position accordingly. Similar to io.Reader Read but operates on buffered data.
7178	MarshalJSON converts LaunchSpecsResponse to JSON format.
7179	MarshalJSON converts region launch spec to JSON format.
7180	GenerateCode generates Go code for API definitions, saving it to specified directories and files.
7181	sets URLs for API inputs and outputs
7182	CreateTemporaryCredentials generates temporary credentials using permanent credentials.
7183	setURL constructs a full URL using the client's base URL, route, and optional query parameters.
7184	SignRequest signs an HTTP request using Hawk credentials.
7185	APICall sends a request using the provided parameters and returns the response or an error.
7186	SignedURL generates a signed URL with authentication.
7187	MarshalJSON converts Hawk signature authentication response to JSON.
7188	bmw256 performs a hash operation on input data using the BMW-256 algorithm and returns the resulting 32-byte hash value.
7189	NewCubeHash initializes a CubeHash struct with values from iv array.
7190	cubehash256 generates a 256-bit hash from input data using CubeHash algorithm.
7191	Sum calculates hash values using multiple cryptographic algorithms.
7192	squeeze compresses input data using Blake2b algorithm and outputs it in chunks.
7193	reducedSqueezeRow0 squeezes the first row of the state into the output row using the Blake2b algorithm.
7194	reducedDuplexRow1 updates sponge state using input row, applies transformation, and outputs updated row.
7195	NewReaderByteCodeLoader creates a new loader with flags, parser, and compiler.
7196	LoadReader parses and compiles bytecode from a reader.
7197	NewV3 generates a version 3 UUID based on a namespace and name.
7198	txLiteral processes the current operation's argument and advances the state.
7199	txFetchSymbol fetches a symbol from state based on current operation's argument.
7200	converts state value to raw string and advances state
7201	txUnmarkRaw converts sa to string if it's not already, then advances state.
7202	txPrint prints argument or warns about nil.
7203	txPrintRaw outputs the raw string representation of an argument or warns if nil is used.
7204	NewLoopVar creates a new LoopVar instance for iterating over an array.
7205	txMakeArray creates a new array from stack elements between start and end marks.
7206	txFunCallOmni handles function calls based on variable type.
7207	DumpAST toggles the MaskDumpAST flag in f.flags based on the boolean input.
7208	DumpByteCode toggles the MaskDumpByteCode flag based on boolean input.
7209	Optimize bytecode by replacing specific operations.
7210	NewFuncDepot creates a new FuncDepot for the specified namespace with an empty function map.
7211	Get will return value associated with key from depot. If key does not exist, false will be returned.
7212	Set assigns value to key in FuncDepot's depot.
7213	NewFileTemplateFetcher converts relative paths to absolute paths and returns a FileTemplateFetcher with the updated paths.
7214	Last modified time retrieved from file source with caching.
7215	Reader opens file at Path and returns its io.Reader. If file cannot be opened, it returns error.
7216	Bytes reads all bytes from the file source.
7217	NewState initializes a new State instance with default values.
7218	PushFrame adds a new frame to the stack and returns it.
7219	PopFrame removes and returns the top frame from the stack.
7220	CurrentFrame retrieves the top frame from the stack or returns nil if empty.
7221	Warnf formats and writes warning messages.
7222	AppendOutputString writes a string to the state's output buffer.
7223	Popmark removes the top value from the mark stack and returns it as an integer.
7224	CurrentMark retrieves the top integer value from the mark stack or returns 0 if the stack is empty.
7225	LoadByteCode retrieves ByteCode associated with the given key.
7226	Reset initializes state by clearing indices and stacks, then pushes initial markers and frames.
7227	DeclareVar adds variable to stack and returns its index.
7228	GetLvar retrieves a local variable from the stack by index.
7229	Sets local variable at index i to value v
7230	NewByteCode creates a new ByteCode instance with current timestamp, empty name, no operations, and version 1.0.
7231	Append will add an operation to the bytecode's list.
7232	AppendOp adds a new operation to ByteCode and returns it
7233	String method generates a formatted string representation of the ByteCode object.
7234	NewCachedByteCodeLoader creates a new CachedByteCodeLoader using specified cache, cache level, fetcher, parser, and compiler.
7235	Load retrieves bytecode based on a key, using a cache if available and valid, otherwise fetching it from a source. If enabled, it logs the bytecode details.
7236	NewFileCache creates a new FileCache instance with the specified directory.
7237	GetCachePath constructs a cache file path from a given key
7238	Get retrieves a cache entity from the file system using its key, handling errors and decoding the entity from a Gob file.
7239	Set stores cache entity at specified key's path, creating dir if needed.
7240	Delete removes the cached file associated with the given key.
7241	Get will return cache entity for key if exists; otherwise, it returns error.
7242	Set updates cache entity at key, overwriting existing entry.
7243	Delete will remove an item from memory cache and return no error
7244	NewStringLexer creates a new lexer for parsing strings using a template and symbol set, setting custom start and end tags for tags.
7245	NewReaderLexer creates a lexer from a reader with specified symbol set and tag delimiters.
7246	NewV4 generates a random UUID version 4.
7247	Parse converts template bytes to AST using parser.
7248	ParseReader reads input from an io.Reader and parses it into an AST using Kolonish's parser.
7249	Visit returns a channel of AST nodes
7250	String method returns formatted AST representation.
7251	Run executes bytecode with given variables and outputs results.
7252	ParseArgs sets tx.Parser based on args["Syntax"].
7253	DefaultLoader initializes Xslate loader with cache settings.
7254	DefaultVM initializes a new VM with loader from tx and assigns it to tx.VM.
7255	Get retrieves value for key from args. Returns value and true if exists, else nil and false.
7256	NewHTTPSource reads an HTTP response, extracts its body and last modified time (if present), and returns an HTTPSource object.
7257	NewStringByteCodeLoader creates a StringByteCodeLoader instance with specified parser and compiler.
7258	LoadString parses a string, compiles it to bytecode, and optionally dumps AST and bytecode.
7259	Get retrieves a value from Vars using a key, returning the value and a boolean indicating success.
7260	NewOp creates a new Op instance based on operation type and arguments.
7261	MarshalBinary encodes the operation and its arguments into binary format.
7262	UnmarshalBinary deserializes binary data into operation type, handler, arguments, and comments.
7263	ArgInt extracts and converts argument to integer
7264	ArgString converts the argument to a string representation
7265	AppendOp appends an operation to the bytecode context.
7266	Compile converts AST to ByteCode.
7267	NewV5 generates a version 5 UUID using a hash of the namespace UUID and name.
7268	Sort will sort a list of lex symbols alphabetically and return it.
7269	Implements sort.Interface and sorts symbols by descending priority.
7270	Swap will exchange two elements in the list based on their indices.
7271	Copy creates a deep copy of the symbol set.
7272	Set assigns a type and priority to a symbol name, updating or adding it to the set. If no priority is provided, it defaults to 1.0.
7273	GetSortedList sorts symbols based on priority and length, caching the result.
7274	Top returns the top item from the stack or an error if empty.
7275	Resize changes the stack's capacity to the specified size.
7276	Extend will increase the size of Stack by extendingBy units.
7277	Grow will increase stack size if needed
7278	Get retrieves the element at index i from the stack. Returns error if index is out of range.
7279	Set updates stack element at index i with value v, resizing if necessary and handling invalid indices.
7280	Push adds value to stack if not full, resizing if necessary.
7281	Pop removes and returns the top element from the stack.
7282	String method returns formatted stack elements.
7283	GetHostIPs retrieves host IPs excluding docker interfaces
7284	GetPrivateHostIPs filters out non-private IPv4 addresses from GetHostIPs result
7285	IsPrivate checks if an IP address belongs to any listed private networks. Returns false if no match found.
7286	Environ retrieves all flags as environment variables.
7287	getenv checks if an environment variable exists and returns its value if it does.
7288	flagAsEnv converts a name to uppercase, prepends EnvPrefix, replaces dots and hyphens with underscores.
7289	NewPolicy initializes a default policy with various character pools and minimum requirements.
7290	CreateRandom generates a random byte slice from a given pool.
7291	Shuffle randomly reorders byte slice elements
7292	Generate creates a password according to specified policy rules.
7293	ExecutableFolder returns the executable's folder path or an error.
7294	Ignore adds functions to check whether errors should be ignored, returning an Option. If already started, it returns ErrAlreadyStarted.
7295	Sigs adds shutdown signals to Sentinel.
7296	Logf sets the logf field of Sentinel using a given function.
7297	Errorf sets a custom error formatting function for Sentinel.
7298	`New` creates a `Sentinel` instance with default settings, applying provided options to configure it. If no options are given, it uses default shutdown duration, logging function, and error handler.
7299	Run starts a sentinel service.
7300	Shutdown runs all shutdown functions with a timeout and returns the first error encountered.
7301	ShutdownIgnore checks if any ignoreError function returns true for the given error.
7302	Register adds server and shutdown functions to Sentinel.
7303	Mux initializes Netmux with listener and options, ensuring it's not already started. It registers the server and handles errors gracefully.
7304	HTTP starts an HTTP server using the given listener and handler, applying optional configurations before registering it.
7305	IgnoreError creates a function to check if errors match.
7306	IgnoreNetOpError checks if the error is due to using a closed network connection. Returns false if error is not a *net.OpError.
7307	convertAndAppendContextFuncs converts and appends functions to a slice, handling different input types.
7308	router sets up HTTP routes based on services and handles health checks.
7309	buildInfoHandler writes "build-info" to the response writer.
7310	JsonEncoder encodes multiple objects into a JSON byte slice.
7311	Json parses JSON from HTTP request body into a struct and validates it using Martini middleware.
7312	validateAndMap invokes validation on obj using context, combines errors, maps results, and optionally maps to interfacePtr.
7313	Count returns total number of errors from Overall and Fields.
7314	Header constructs a map of CORS headers based on allowed origins and options.
7315	PreflightHeader generates CORS headers based on request origin, method, and headers, considering allowed options.
7316	IsOriginAllowed checks if the origin is allowed based on patterns; returns true if allowed.
7317	Allow sets CORS headers based on request method and origin.
7318	Renderer creates a Martini handler for rendering templates.
7319	AcceptLanguages String method returns a formatted string of languages with their quality scores.
7320	Languages middleware parses the `Accept-Language` header and maps sorted language preferences to the context.
7321	Prefix creates a middleware handler to strip a given prefix from incoming request paths or return a 404 error if the prefix does not match.
7322	Basic returns an HTTP handler that checks if the request includes the correct username and password using basic authentication.
7323	UpdateUser updates the session with the user's unique ID.
7324	GetById fetches user from database by ID. If no user found, returns error.
7325	AddressToAccountId extracts the account ID from a given Stellar address.
7326	MutateChangeTrust updates trust operation based on asset type.
7327	MutateChangeTrust updates the Limit field of o using m's string representation.
7328	Trust constructs a change trust builder with specified parameters and optional limits.
7329	RemoveTrust constructs a trust change with specified credit asset, limit, and additional mutators.
7330	MutatePayment updates payment or path payment operation based on CreditAmount, handling different asset types and parsing amounts.
7331	MutatePayment updates the destination account ID based on the payment operation type.
7332	MutatePayment modifies payment or path payment operations based on the input object.
7333	MutatePayment updates payment details using provided struct.
7334	MutateAccountMerge updates account merge destination.
7335	MustParse parses a value to Int64 or panics on error.
7336	Parse converts a string to an xdr.Int64.
7337	FloatString converts an Int64 to a float string with 7 decimal places.
7338	CreateOffer constructs a ManageOfferBuilder for creating an offer with the given rate and amount.
7339	CreatePassiveOffer constructs a passive offer using specified rate and amount.
7340	UpdateOffer updates an offer with new rate, amount, and ID.
7341	DeleteOffer deletes an offer using its ID and sets amount to zero.
7342	ManageOffer initializes a new builder with PassiveOffer set to passiveOffer and applies mutations.
7343	Apply mutations to offer or operation based on type.
7344	MutateManageOffer updates the amount field in the given offer object based on the receiver's value.
7345	MutateManageOffer updates the offer ID in the ManageOfferOp object.
7346	MutateManageOffer will modify the selling, buying, and price fields of the offer object based on the rate's properties.
7347	MutateOperation updates the source account of an operation using the address or seed from the SourceAccount instance.
7348	String converts Price to a human-readable format using BigRat.
7349	Transaction constructs a new TransactionBuilder and applies the given mutators and default settings.
7350	Mutate applies multiple transaction mutations to the builder, updating the transaction or setting an error if any mutation fails.
7351	Hash calculates the SHA-256 hash of transaction details. If any step fails, it returns an error.
7352	HashHex converts hash to hexadecimal string.
7353	Sign modifies a transaction builder with specified signers.
7354	MutateTransaction appends an allow trust operation to a transaction builder.
7355	Add trust line operation to transaction.
7356	MutateTransaction updates TransactionBuilder with CreateAccount operation details.
7357	MutateTransaction adjusts transaction fee and network ID based on builder contents.
7358	MutateTransaction will add an inflation operation to the transaction builder.
7359	MutateTransaction appends a manage data operation to the transaction builder.
7360	MutateTransaction updates TransactionBuilder based on ManageOfferBuilder properties.
7361	MutateTransaction updates a transaction's memo with a hash value.
7362	MutateTransaction updates TransactionBuilder's memo field with MemoID value.
7363	MutateTransaction updates TransactionBuilder's memo with MemoReturn value.
7364	MutateTransaction updates a transaction's memo with a given value if it's within the allowed length.
7365	MutateTransaction updates the NetworkID of a TransactionBuilder.
7366	MutateTransaction modifies transaction operations based on payment type or path payment details.
7367	MutateTransaction appends a new operation to the transaction builder's operations list.
7368	MutateTransaction updates the transaction sequence number.
7369	MutateTransaction updates the source account ID in the transaction builder.
7370	Scan assigns integer value to variable.
7371	InitialState retrieves initial ledger entry state from bundle changes.
7372	Changes retrieves ledger entry changes for a target up to max int32.
7373	StateAfter retrieves the latest ledger entry for a given key and operation index, handling creation, removal, and update cases.
7374	changes filters ledger entry changes based on target key and maximum operation count.
7375	MustDecode decodes a source string to bytes using a specific version byte, panicking on error.
7376	Encode converts input data to a specific string format including version, payload, and checksum.
7377	MustEncode encodes data using specified version and panics on error
7378	checkValidVersionByte returns error if the passed version byte is not a valid type.
7379	Checksum calculates and returns the CRC-16 checksum of input data as a byte slice.
7380	Validate checks if the data's checksum matches the expected value.
7381	LedgerKey returns the ledger key based on the change type.
7382	checkPlausible verifies if all characters in the given prefix are part of the base32 alphabet; otherwise, it exits with an error message.
7383	Address returns a base58-encoded account ID based on its type, handling Ed25519 specifically and panicking for unknown types.
7384	Equals checks if two AccountIds are equal based on their types and values.
7385	SetAddress decodes and validates the input address, setting it on aid if valid.
7386	ToXdrObject converts Asset to XDR object based on its type and properties.
7387	Through appends asset to Path field of pathSend and returns it.
7388	PayWith creates a new PayWithPath instance with specified asset and max amount.
7389	continuedFraction calculates the continued fraction representation of a given price and returns it as an xdr.Price.
7390	Mutate applies a series of transaction envelope mutations to the builder, updating its state or returning an error if any mutation fails.
7391	MutateTX applies transaction mutators to the builder's child object, updating any errors encountered.
7392	Bytes method returns transaction envelope as byte slice.
7393	Base64 converts bytes to string.
7394	MutateTransactionEnvelope modifies the TransactionEnvelopeBuilder's transaction envelope.
7395	MutateSetOptions validates and sets the HomeDomain field on o.
7396	MutateSetOptions sets the InflationDest field of o to a new AccountId and returns an error.
7397	MutateSetOptions sets the MasterWeight field of o to m's value.
7398	MutateSetOptions updates Signer options with given Weight and PublicKey.
7399	SetThresholds initializes a new Thresholds struct with pointers to low, medium, and high values.
7400	MutateSetOptions updates thresholds on o based on m values.
7401	MutateSetOptions modifies SetFlags based on m and o values.
7402	MutateSetOptions modifies ClearFlags in SetOptionsOp based on input flag.
7403	MutateCreateAccount sets the account ID for the given operation
7404	MutateCreateAccount updates StartingBalance using Amount from xdr.CreateAccountOp.
7405	Random generates a new key pair using a cryptographically secure random seed.
7406	Master generates a key pair from a network passphrase.
7407	Parse validates and decodes a given address or seed into a key pair.
7408	MustParse parses address or seed to KP, panicking on error.
7409	MutateAllowTrust updates the AllowTrustOp's Authorize field with m's Value.
7410	MutateAllowTrust updates AllowTrustOp based on asset code length.
7411	MutateAllowTrust updates o's Trustor field using m's Address.
7412	ToAsset converts AllowTrustOpAsset to Asset based on its type.
7413	SetNative creates a new Asset and assigns it to a.
7414	String returns a formatted string representation of the asset based on its type.
7415	Equals checks if two assets are equal based on their type and properties.
7416	MustExtract extracts data and panics on error.
7417	Unmarshal reads data from io.Reader into interface{} using xdr package's Unmarshal function.
7418	Marshal writes the value to writer using XDR encoding.
7419	ValidEnum checks if the given integer value is a valid CryptoKeyType enum.
7420	NewPublicKey creates a new PublicKey instance based on type and value.
7421	MustEd25519 panics if Ed25519 key is not set; otherwise, it returns the Uint256 value
7422	NewNodeId creates a new NodeId from a public key.
7423	NewAccountId generates an AccountId using a specified CryptoKeyType and value, returning the result or an error.
7424	ValidEnum checks if the given integer value is a valid enum for AssetType.
7425	ArmForSwitch determines the asset type based on the switch value and returns a corresponding string and boolean flag.
7426	NewAsset creates an asset based on its type and validates the provided value accordingly.
7427	MustAlphaNum4 will panic if arm AlphaNum4 is not set, otherwise returns it.
7428	GetAlphaNum4 retrieves AlphaNum4 asset based on type.
7429	MustAlphaNum12 ensures Asset has an AlphaNum12 value, panicking otherwise.
7430	GetAlphaNum12 retrieves AlphaNum12 asset details if available.
7431	ValidEnum checks if a value is a valid enum in ThresholdIndexes
7432	ValidEnum checks if the ledger entry type enum value is valid.
7433	ValidEnum checks if a value is a valid enum in AccountFlags
7434	NewAccountEntryExt creates a new AccountEntryExt instance with given values.
7435	ValidEnum checks if a value is a valid enum in TrustLineFlags.
7436	NewTrustLineEntryExt initializes a new TrustLineEntryExt instance with given values.
7437	ValidEnum checks if the enum value is valid.
7438	NewOfferEntryExt initializes an OfferEntryExt instance with V set to v.
7439	NewDataEntryExt creates a new DataEntryExt instance with integer v and interface value.
7440	NewLedgerEntryData creates a LedgerEntryData based on type and value.
7441	NewLedgerEntryExt initializes a LedgerEntryExt with a value and handles specific cases.
7442	ValidEnum checks if the enum value is valid.
7443	Check if operation enum value is valid.
7444	ArmForSwitch determines asset type based on switch value
7445	NewAllowTrustOpAsset creates a new asset object based on type and value.
7446	MustAssetCode4 returns the asset code as a byte array or panics if not set.
7447	GetAssetCode4 retrieves AssetCode4 if available.
7448	MustAssetCode12 returns asset code or panics if not set.
7449	GetAssetCode12 retrieves the asset code if the arm name matches.
7450	NewOperationBody creates an OperationBody based on OperationType and validates input values.
7451	MustCreateAccountOp returns the CreateAccountOp value from OperationBody or panics if not set.
7452	GetCreateAccountOp retrieves CreateAccountOp instance if available
7453	MustPaymentOp panics if PaymentOp is not set; otherwise, it returns the PaymentOp value
7454	GetPaymentOp retrieves PaymentOp from OperationBody if applicable.
7455	MustPathPaymentOp returns PathPaymentOp from OperationBody or panics if not set.
7456	GetPathPaymentOp retrieves PathPaymentOp from OperationBody if available.
7457	MustManageOfferOp retrieves the ManageOfferOp value, panicking if unset.
7458	GetManageOfferOp retrieves the manage offer operation if available.
7459	MustCreatePassiveOfferOp returns CreatePassiveOfferOp value or panics if not set
7460	GetCreatePassiveOfferOp retrieves CreatePassiveOfferOp from OperationBody if available.
7461	MustSetOptionsOp returns the SetOptionsOp value or panics if not set.
7462	GetSetOptionsOp retrieves or checks SetOptionsOp based on armName.
7463	MustChangeTrustOp returns ChangeTrustOp from OperationBody or panics if not set.
7464	GetChangeTrustOp retrieves the change trust operation if applicable.
7465	MustAllowTrustOp returns the AllowTrustOp value or panics if not set.
7466	GetAllowTrustOp retrieves AllowTrustOp if type matches.
7467	MustDestination retrieves the destination account ID or panics if not set
7468	GetDestination retrieves the destination account ID if applicable.
7469	MustManageDataOp retrieves the ManageDataOp value or panics if not set.
7470	GetManageDataOp retrieves manage data operation based on switch type.
7471	ValidEnum checks if a value is valid for the enum type
7472	ArmForSwitch returns a string based on memo type and a boolean indicating success.
7473	NewMemo creates a memo based on the type and validates the input value accordingly.
7474	MustText retrieves the text from Memo or panics if not set.
7475	GetText retrieves text based on the unit's type.
7476	MustId panics if arm ID is not set, otherwise returns it.
7477	GetId retrieves the ID from Memo if type matches "Id".
7478	MustHash returns the hash value from Memo or panics if it's not set.
7479	GetHash retrieves the hash value if the switch type matches "Hash".
7480	MustRetHash returns the hash value associated with a key, panicking if it's not set.
7481	NewTransactionExt initializes a transaction extension with a version and value, handling specific cases for version 0.
7482	ValidEnum checks if v is a valid CreateAccountResultCode enum value.
7483	ArmForSwitch checks if account creation was successful and returns a success message along with a boolean value.
7484	NewCreateAccountResult initializes a new account creation result based on the given code and value.
7485	ValidEnum checks if a value is valid for the PaymentResultCode enum
7486	ArmForSwitch checks payment result and returns success status.
7487	NewPaymentResult initializes a PaymentResult based on a code and value, handling different success cases.
7488	ValidEnum checks if a value is a valid enum for PathPaymentResultCode
7489	ArmForSwitch handles PathPaymentResult codes.
7490	NewPathPaymentResult creates a new PathPaymentResult based on the given code and value.
7491	MustNoIssuer panics if no issuer is set and returns the asset otherwise
7492	GetNoIssuer retrieves the asset and its existence status based on the code.
7493	ValidEnum checks if v is a valid enum value.
7494	ValidEnum checks if integer v is a valid enum value in manageOfferEffectMap. Returns true if valid, otherwise false.
7495	ArmForSwitch determines the result based on the switch value.
7496	NewManageOfferSuccessResultOffer creates a success result based on offer effect and value.
7497	ArmForSwitch returns success message and true for manage offer success.
7498	NewManageOfferResult constructs a ManageOfferResult based on code and value.
7499	ValidEnum checks if v is a valid SetOptionsResultCode value.
7500	ArmForSwitch checks switch status and returns result.
7501	NewSetOptionsResult initializes a SetOptionsResult with a given code and value.
7502	ValidEnum checks if v is a valid ChangeTrustResultCode value.
7503	ArmForSwitch determines if the trust change was successful based on the switch value.
7504	NewChangeTrustResult initializes a new ChangeTrustResult with the given code and value, handling specific cases.
7505	ValidEnum checks if v is a valid AllowTrustResultCode.
7506	ArmForSwitch checks if the trust result allows switching and returns a success message.
7507	NewAllowTrustResult initializes an AllowTrustResult based on code and value.
7508	ValidEnum checks if v is a valid enum value for AccountMergeResultCode.
7509	ArmForSwitch handles account merge results.
7510	NewAccountMergeResult creates a new AccountMergeResult based on code and value.
7511	MustSourceAccountBalance returns the SourceAccountBalance or panics if not set.
7512	GetSourceAccountBalance checks ArmForSwitch and returns SourceAccountBalance if matched.
7513	ValidEnum checks if a value is valid for the InflationResultCode enum
7514	ArmForSwitch determines payout status based on inflation result code.
7515	NewInflationResult initializes an inflation result based on the given code and value, handling specific cases and errors.
7516	MustPayouts returns the inflation payouts or panics if not set
7517	GetPayouts retrieves inflation payouts if applicable based on switch case.
7518	ValidEnum checks if a given integer value is a valid enum in ManageDataResultCode.
7519	ArmForSwitch determines if data can be managed successfully based on switch value.
7520	NewManageDataResult creates a new manage data result object with the given code and value.
7521	ValidEnum checks if the given integer value is a valid enum in the OperationResultCode map. Returns true if valid, false otherwise.
7522	ArmForSwitch determines the operation type based on the input switch value.
7523	NewOperationResultTr initializes a new operation result based on the given type and value.
7524	MustCreateAccountResult returns CreateAccountResult from OperationResultTr or panics if not set.
7525	GetCreateAccountResult retrieves the result of a create account operation if applicable.
7526	MustPaymentResult panics if PaymentResult is not set, otherwise returns it.
7527	GetPaymentResult retrieves payment results based on operation type.
7528	MustPathPaymentResult retrieves the PathPaymentResult from OperationResultTr or panics if not set.
7529	GetPathPaymentResult retrieves the path payment result if available.
7530	MustManageOfferResult returns ManageOfferResult from OperationResultTr, panicking if unset.
7531	GetManageOfferResult retrieves the manage offer result based on the operation type.
7532	MustCreatePassiveOfferResult returns CreatePassiveOfferResult or panics if not set.
7533	MustSetOptionsResult returns the SetOptionsResult from OperationResultTr or panics if not set.
7534	GetSetOptionsResult retrieves the SetOptionsResult from OperationResultTr based on ArmForSwitch.
7535	MustChangeTrustResult retrieves ChangeTrustResult from OperationResultTr, panicking if unset.
7536	GetChangeTrustResult retrieves the ChangeTrustResult based on operation type.
7537	MustAllowTrustResult returns the AllowTrustResult value or panics if not set.
7538	GetAllowTrustResult retrieves AllowTrustResult from OperationResultTr based on Type.
7539	MustAccountMergeResult returns the AccountMergeResult value or panics if not set.
7540	GetAccountMergeResult retrieves the account merge result from the operation.
7541	MustInflationResult retrieves the inflation result or panics if not set.
7542	GetInflationResult retrieves the inflation result based on operation type.
7543	MustManageDataResult returns the ManageDataResult from OperationResultTr or panics if not set.
7544	GetManageDataResult retrieves manage data result based on operation type.
7545	ArmForSwitch determines if operation can proceed based on switch value.
7546	NewOperationResult creates an OperationResult based on code and value.
7547	MustTr panics if arm Tr is not set; otherwise, returns its value.
7548	GetTr retrieves Tr operation result based on arm name.
7549	ValidEnum checks if a value is valid for the TransactionResultCode enum.
7550	ArmForSwitch determines if a transaction result can be switched based on its code.
7551	NewTransactionResultResult constructs a new transaction result based on the given code and value.
7552	MustResults returns results or panics if not set
7553	GetResults retrieves operation results based on transaction code.
7554	NewTransactionResultExt creates a new TransactionResultExt instance with V set to v.
7555	NewStellarValueExt creates a new StellarValueExt instance with integer and interface values.
7556	NewLedgerHeaderExt creates a new LedgerHeaderExt instance with specified values.
7557	Check if enum value is valid.
7558	ArmForSwitch determines the type of ledger upgrade based on the input switch value.
7559	NewLedgerUpgrade creates a ledger upgrade based on type and value.
7560	MustNewLedgerVersion returns the new ledger version or panics if not set
7561	GetNewLedgerVersion retrieves the new ledger version if available.
7562	MustNewBaseFee returns the new base fee value from ledger upgrade or panics if not set.
7563	GetNewBaseFee retrieves the new base fee if available.
7564	MustNewMaxTxSetSize retrieves or panics if NewMaxTxSetSize is not set.
7565	GetNewMaxTxSetSize retrieves the new maximum transaction set size based on the upgrade type.
7566	ArmForSwitch handles ledger entry types.
7567	NewLedgerKey creates a ledger key based on type and value.
7568	ValidEnum checks if the enum value is valid.
7569	ArmForSwitch determines entry type based on switch value.
7570	NewBucketEntry creates a BucketEntry based on type and validates the value accordingly.
7571	MustLiveEntry retrieves the live ledger entry or panics if not set.
7572	GetLiveEntry retrieves the live ledger entry if available.
7573	MustDeadEntry panics if DeadEntry is not set and returns it otherwise
7574	GetDeadEntry retrieves the ledger key if the bucket entry is a dead entry.
7575	NewTransactionHistoryEntryExt initializes a TransactionHistoryEntryExt with a value and returns it.
7576	ArmForSwitch returns arm name based on switch value.
7577	NewTransactionHistoryResultEntryExt creates a new TransactionHistoryResultEntryExt instance with given values.
7578	NewLedgerHeaderHistoryEntryExt creates a new LedgerHeaderHistoryEntryExt instance with V set to v.
7579	NewScpHistoryEntry creates a new ScpHistoryEntry instance based on input values.
7580	Check if the enum value is valid.
7581	ArmForSwitch determines the type of ledger entry change based on the switch value.
7582	NewLedgerEntryChange creates a LedgerEntryChange based on type and value.
7583	MustCreated panics if arm Created is unset; otherwise, it returns the created ledger entry.
7584	GetCreated returns the created ledger entry if it exists.
7585	MustUpdated returns the updated ledger entry value or panics if it's not set
7586	GetUpdated returns the updated ledger entry if available.
7587	MustRemoved panics if removed key is not set; otherwise, it returns the ledger key.
7588	GetRemoved checks if the ledger entry change type is 'Removed' and returns the corresponding key.
7589	MustState panics if the LedgerEntryChange does not have a state set and returns the state otherwise.
7590	GetState retrieves the ledger entry state if applicable.
7591	NewTransactionMeta constructs a transaction metadata object based on input values and type assertions.
7592	MustOperations retrieves operations from TransactionMeta or panics if not set
7593	GetOperations retrieves operation metadata from transaction meta based on switch value.
7594	ValidEnum checks if a value is a valid enum in ErrorCodeMap
7595	ValidEnum checks if the IP address type enum value is valid.
7596	ArmForSwitch handles IP address types.
7597	NewPeerAddressIp creates a new PeerAddressIp instance based on the given type and value, returning an error if the value is invalid.
7598	MustIpv4 returns the IPv4 address or panics if not set.
7599	GetIpv4 retrieves IPv4 address if available.
7600	MustIpv6 retrieves the Ipv6 value from PeerAddressIp or panics if not set.
7601	GetIpv6 retrieves IPv6 address if available for a peer.
7602	ValidEnum checks if a value is a valid enum in MessageType.
7603	ArmForSwitch determines the message type based on the switch value.
7604	NewStellarMessage creates a StellarMessage based on MessageType and value.
7605	MustError panics if arm Error is not set, otherwise returns it
7606	GetError retrieves the error from the message if the arm name is "Error".
7607	MustHello retrieves the Hello value from StellarMessage, panicking if it's not set.
7608	GetHello retrieves the hello message based on the message type.
7609	MustAuth retrieves Auth from StellarMessage or panics if not set.
7610	GetAuth retrieves authentication details based on message type.
7611	MustDontHave retrieves the DontHave value from StellarMessage, panicking if not set.
7612	GetDontHave checks if the message type corresponds to "DontHave" and returns the associated value.
7613	MustPeers returns the peer addresses from the Stellar message or panics if not set.
7614	GetPeers retrieves peer addresses based on message type.
7615	MustTxSetHash retrieves the transaction set hash or panics if not set.
7616	GetTxSetHash retrieves the transaction set hash if available.
7617	MustTxSet returns the TransactionSet value or panics if not set.
7618	GetTxSet retrieves the transaction set if available.
7619	MustTransaction retrieves the transaction from StellarMessage or panics if not set.
7620	GetTransaction retrieves the transaction envelope from the message.
7621	MustQSetHash returns the Uint256 value of GetQSetHash or panics if not set.
7622	GetQSetHash retrieves the QSetHash value if the arm name matches.
7623	MustQSet retrieves the QSet from StellarMessage, panicking if not set.
7624	GetQSet retrieves the quorum set for a stellar message if applicable.
7625	MustEnvelope retrieves and returns the SCP envelope from the Stellar message, panicking if not set.
7626	GetEnvelope retrieves the envelope from a Stellar message if its type matches.
7627	MustGetScpLedgerSeq retrieves the SCP ledger sequence number from a Stellar message, panicking if unset.
7628	GetScpLedgerSeq retrieves the SCP ledger sequence based on message type.
7629	ArmForSwitch processes switch input and returns version string.
7630	NewAuthenticatedMessage creates an AuthenticatedMessage from Uint32 and interface{}.
7631	ValidEnum checks if a value is a valid SCP statement type enumeration.
7632	ArmForSwitch determines the action based on SCP statement type.
7633	NewScpStatementPledges creates SCP statement pledges based on type and value.
7634	MustPrepare ensures SCP statement has a prepare value or panics.
7635	GetPrepare retrieves the prepare statement if available based on the switch type.
7636	MustConfirm returns the confirmed SCP statement value or panics if not set.
7637	GetConfirm retrieves the confirmation statement based on the pledge type.
7638	MustExternalize returns the externalized SCP statement value or panics if not set.
7639	GetExternalize returns the externalized SCP statement if available.
7640	MustNominate returns the nomination value or panics if not set.
7641	GetNominate returns the nomination if the statement type matches.
7642	SafeUnmarshalBase64 ensures full data consumption during unmarshalling from base64-encoded strings.
7643	SafeUnmarshal reads data from a byte slice into dest, ensuring all data is consumed or returning an error.
7644	SendAmount calculates the total amount bought using offers with the same asset.
7645	LoadAccount retrieves an account using its ID.
7646	SequenceForAccount retrieves account sequence number.
7647	SubmitTransaction submits a transaction envelope XDR and returns the response.
7648	Equals checks if two LedgerKeys are equivalent based on their types and specific fields.
7649	SetAccount updates the account field of key with the given LedgerKeyAccount data.
7650	SetData updates key's data with account and name.
7651	SetOffer updates key with new offer data.
7652	SetTrustline updates key's trustline data.
7653	Add will append a key-value pair to CHDBuilder.
7654	tryHash checks for duplicates and updates hash table entries based on given keys and values.
7655	HashIndexFromKey computes the hash index using the input byte slice, hasher function, and hasher's r field, then returns the result modulo buckets.
7656	ReadInt reads a little-endian uint32 from b and converts it to uint64
7657	Read reads data from the reader and maps it to CHD.
7658	Get retrieves value from CHD using key via hashing and lookup
7659	Iterate creates and returns an Iterator for the CHD instance if keys exist.
7660	Write data to an io.Writer in binary format.
7661	RegisterDatasources registers mapnik data sources from a given path.
7662	RegisterFonts loads font files from the specified path using Mapnik's C API. It handles any errors returned by the API and returns them as Go errors.
7663	New creates a new Map object with specified width and height.
7664	NewSized creates a new map with specified dimensions.
7665	Load stylesheet into mapnik map.
7666	Resize adjusts the Map's dimensions using mapnik library functions.
7667	Free releases memory associated with the Map instance.
7668	SRS retrieves the spatial reference system from the map.
7669	ZoomAll zooms all layers in the map
7670	ZoomTo updates map zoom level to specified bounding box.
7671	Render generates map images from vector data, supporting various formats and scale factors.
7672	RenderImage creates and returns an NRGBA image from mapnik data.
7673	RenderToFile saves Map to file using specified options.
7674	SetBufferSize configures the buffer size for map m.
7675	Search sends a request and reads responses within a timeout.
7676	Get retrieves a connection from the blocking pool, handling timeouts and unusable connections.
7677	blockingPool.put adds a connection to its pool or closes it if the pool is closed or unusable.
7678	MonoToStereoF32 converts mono audio to stereo format.
7679	BitCrush reduces audio sample rate by specified factor
7680	NormalizeMax normalizes the audio buffer data to have maximum absolute value of 1.0.
7681	Gain adjusts audio buffer data by multiplying each value with a given factor.
7682	MonoDownmix converts stereo audio to mono by averaging channel data.
7683	Quantize adjusts audio samples to specified bit depth.
7684	PCMScale adjusts audio buffer's data by scaling it according to the specified bit depth.
7685	StereoPan adjusts audio buffer pan between left and right channels.
7686	Leader returns the current leader's ID.
7687	IsLeader checks if the candidate is currently the leader.
7688	NewResponse constructs a new response object with specified parameters.
7689	GetRequestID extracts the request ID from the given context.
7690	Log records performance data using a template. Filters output based on custom criteria.
7691	SendMailSSL connects via TLS, authenticates if needed, sends mail to recipients, and closes the connection.
7692	Send sends an email message using SMTP.
7693	WaitForIt waits for a TCP or HTTP service to be available on a specified host and port within a given timeout.
7694	Get retrieves configuration based on source and environment
7695	initConfig initializes configuration settings from a file or environment variables.
7696	WritePluginResultsToDatabase inserts or updates plugin results in the database based on sample ID.
7697	NewAuthController creates a new instance of AuthController with given UserManager and Config.
7698	Authenticate handles user authentication, generating JWT on success.
7699	NewOAuth2Controller initializes a new OAuth2Controller instance with provided config and application manager.
7700	Refresh handler validates parameters, parses JWT, generates new token, and returns it.
7701	OAuth2Controller.Token handles OAuth2 token requests, validates parameters, decodes code, generates access and refresh tokens, and returns them as JSON.
7702	Logging middleware logs HTTP requests with client info, latency, and response details.
7703	SingleFile returns an HTTP handler to serve a single file.
7704	Write method updates response length and writes data to the response writer.
7705	Wrap Hijack method from ResponseWriter interface. Return net.Conn and ReadWriter or error.
7706	NewMongo creates a new MongoDB connection using the provided filename and environment, handling authentication based on username and password, and verifying connectivity before returning the Mongo instance.
7707	Disconnect closes MongoDB client connection, logging failure.
7708	New creates a new Table with specified fields.
7709	PrintTable formats and prints a table from given fields and rows.
7710	Prints a horizontal table from a map's key-value pairs.
7711	PrintRow prints a table row based on given fields and data.
7712	AddRow appends a formatted map to Table's Rows after calculating sizes.
7713	Prints table rows and footer with optional headers and dashes.
7714	String converts table to formatted string based on given title.
7715	getHead constructs a header row for table fields, formatted with titles.
7716	rowString generates a formatted string from a table row
7717	fieldString formats a value for a table field by padding it with spaces to match the specified width.
7718	stringTableDash returns string representation based on Markdown flag
7719	printMarkdownDash prints markdown dashes for table fields.
7720	stringMarkdownDash generates a markdown dash row based on table fields and their sizes.
7721	HashPassword securely hashes a password using scrypt algorithm
7722	EncodeOAuth2Code generates and signs a secure OAuth2 authorization code.
7723	DecodeOAuth2Code verifies OAuth2 code using a shared key and decodes the response.
7724	NewServer initializes a new server instance using configuration from a file.
7725	Start launches a server on specified port, handles SSL if configured, and shuts down gracefully.
7726	Stop stops the server if it's started, otherwise logs an error and notifies the caller.
7727	NewLoggingServeMux returns a new LoggingServeMux
7728	Wrap ServeMux.Handler method; return http.Handler and pattern.
7729	Handle logs HTTP requests using a custom logger.
7730	Wrap HandleFunc method of LoggingServeMux. This enables HTTP request handling with logging capabilities.
7731	Init initializes the Elasticsearch client and checks or creates the specified index. It ensures the connection before proceeding.
7732	WaitForConnection attempts to establish a connection to Elasticsearch within a specified timeout. It retries until successful or times out.
7733	StoreFileInfo saves file information to Elasticsearch using the provided sample data and configuration.
7734	StorePluginResults stores plugin results in Elasticsearch, updating or creating documents based on the result's ID.
7735	CamelCase converts the input string to camel case format.
7736	Getopt retrieves environment variable or default value
7737	Getopts retrieves user input or environment variable value with default fallback.
7738	GetSHA256 computes the SHA-256 hash of the file named 'name'
7739	Run command with optional context and return output or error.
7740	function to remove duplicate strings from a list.
7741	Unzip extracts files from the archive to the target directory.
7742	function checks if any string in list contains substring a.
7743	NewSMTP reads SMTP config from file, sets up authentication, and initializes SMTP client.
7744	SendMail sends an email from the sender to the recipients using the SMTP server.
7745	GetEnvironment returns configuration for specified environment or nil if not found.
7746	GetSMTP retrieves SMTP configuration based on source and environment. If successful, it returns the configuration; otherwise, it returns an error.
7747	GetConfig retrieves server configuration from source based on environment.
7748	GetEnvironment returns configuration for given environment or nil if not found.
7749	GetMongo retrieves MongoDB configuration from source based on environment.
7750	TokenHandler wraps HTTP handlers to validate JWT tokens before processing requests.
7751	Receive processes incoming XMPP stanzas and returns parsed messages.
7752	Send message through XMPP connection.
7753	allBoshReleaseNames gathers unique BOSH release names from multiple releases.
7754	AddedProperty adds a property to DeltaJob's AddedProperties map.
7755	RemovedProperty adds a property to dj's RemovedProperties map.
7756	AddDeltaJob appends a DeltaJob to Result's DeltaJob list.
7757	Concat will merge DeltaJob slices from two Result instances.
7758	Read opens the release file located at the given path.
7759	Pull downloads or retrieves a release file from a location.
7760	BuildJob creates job files from metadata and writes them to specified destination.
7761	LoadBoshRelease reads a BOSH release from the given repository path.
7762	read.BoshRelease reads a BOSH release from a reader.
7763	readBoshRelease reads a BOSH release file and populates its manifest and jobs.
7764	readBoshJob reads a BOSH job manifest from a reader and returns its parsed YAML content.
7765	NewRequest creates a new HTTP request with authentication.
7766	PushCloudConfig sends manifest to BOSH, handles response errors.
7767	Generate processes package name, file bytes, and output directory to create structs and write them to disk after preprocessing and object mapping.
7768	CreateNewRecord splits the property string by "." and initializes a Record with its length, original property, sliced elements, and YAML data.
7769	NewShowCmd creates a new ShowCmd instance with the given release repository and release version
7770	All prints details of BOSH releases to writer based on file extension.
7771	GetDefaultTaskImageResource returns default image resource details from ConcoursePipeline.
7772	AddRawJob appends a raw job configuration to the pipeline's jobs list.
7773	AddGroup will add a group configuration with specified name and jobs to the pipeline.
7774	GetResourceByName retrieves the resource config by name. Returns nil if not found.
7775	AddRawResource appends a raw resource to ConcoursePipeline's Resources slice.
7776	AddResource appends a new resource configuration to ConcoursePipeline's resources list.
7777	AddGithubResource adds a resource using the name "GithubResourceName".
7778	AddBoshIOResource adds a resource with a specific name and source to the pipeline.
7779	AddBoshDeploymentResource adds a bosh deployment resource to Concourse pipeline.
7780	AddGitResource adds a git resource to the pipeline.
7781	d.allJobNames gathers unique job names from two BOSH releases.
7782	NewDeploymentManifestFromFile reads a deployment manifest from a file and returns a DeploymentManifest object.
7783	NewDeploymentManifest parses bytes to create a deployment manifest object.
7784	AddRemoteRelease adds a remote release to the deployment manifest.
7785	AddRemoteStemcell will append a new Stemcell to DeploymentManifest's Stemcells list.
7786	Tag retrieves the value associated with a given key from Tags map.
7787	RemoveTag deletes a tag from the deployment manifest.
7788	LoadPivnetRelease fetches and parses a Pivnet release from the given repository and path.
7789	BoshReleaseOrEmpty returns bosh release by name or empty if not found.
7790	readPivnetRelease reads a Pivotal Network release file.
7791	decodeYaml reads YAML from r into v
7792	NewZipWalker creates a new walker for a ZIP file, initializing it with a path and an empty callback map.
7793	NewDiffCmd creates a new DiffCmd instance for comparing two releases using a release repository.
7794	All generates a diff between two releases and prints the result to a writer.
7795	Job compares two releases and prints the differences to the writer
7796	New creates a differ instance for comparing two releases based on their file extensions and type.
7797	StructName generates a unique struct name based on input index, package name, and properties.
7798	TypeName determines the type name based on index and properties.
7799	NewTgzWalker creates a new tgz walker with the given package reader and empty callbacks map.
7800	NewBackoff initializes a new backoff with given strategy, start, and limit durations.
7801	Reset initializes backoff parameters
7802	NewExponential creates a new exponential backoff instance.
7803	NewExponentialFullJitter creates a backoff strategy using exponential full jitter algorithm with specified start and limit durations.
7804	NewLinear creates a new backoff strategy with linear intervals starting at `start` and limited to `limit`.
7805	GetLineSize calculates the total size based on floor and line indices.
7806	GetMaxSize retrieves the max size using GetLineSize method.
7807	compute will generate a sapin tree pattern based on its size and output it line by line.
7808	WithTimeout sets the timeout using SetTimeout method.
7809	WithContext sets the context field o value.
7810	WithHTTPClient sets the HTTP client for PostAppsParams.
7811	WithBody sets body for PostAppsParams.
7812	WithTimeout sets the timeout duration on GetAppsAppParams.
7813	WithContext sets the Context field o value.
7814	WithHTTPClient sets HTTP client for GetAppsAppParams.
7815	WithApp sets the app field o value using SetApp method.
7816	UnmarshalBinary deserializes binary data to RouteWrapper.
7817	WithTimeout sets timeout on GetAppsParams.
7818	WithContext sets the Context field o value.
7819	WithHTTPClient sets HTTP client for GetAppsParams.
7820	WithTimeout sets timeout on DeleteAppsAppParams.
7821	WithContext sets the context for DeleteAppsAppParams.
7822	WithHTTPClient sets the HTTPClient field to the given client.
7823	WithApp sets the app parameter on o.
7824	WithTimeout sets timeout for route parameters.
7825	WithContext sets the context for PatchAppsAppRoutesRouteParams.
7826	WithHTTPClient sets the HTTPClient field o value.
7827	WithApp sets the app field o value.
7828	WithBody sets the body field of PatchAppsAppRoutesRouteParams.
7829	WithRoute sets the route parameter on o.
7830	WithTimeout sets the timeout duration for PostAppsAppRoutesParams.
7831	WithContext sets the ctx field of o using SetContext.
7832	WithHTTPClient sets the HTTPClient field o value.
7833	WithApp sets the app field o value.
7834	WithBody sets body field in PostAppsAppRoutesParams.
7835	WithTimeout sets timeout on route parameters.
7836	WithContext sets the Context field o value.
7837	WithApp sets the app field o value using SetApp method.
7838	WithBody sets the body field o value.
7839	WithRoute sets route field o value.
7840	WithTimeout sets the timeout parameter on GetAppsAppRoutesParams.
7841	WithContext sets the ctx field o's value.
7842	WithHTTPClient sets the HTTPClient field to the given client.
7843	WithApp sets the app parameter on GetAppsAppRoutesParams.
7844	WithTimeout updates the timeout parameter for the PatchAppsAppParams instance.
7845	WithContext sets the context for PatchAppsAppParams.
7846	WithHTTPClient sets HTTP client for PatchAppsAppParams.
7847	WithApp sets the app field o value.
7848	WithBody sets the body parameter's value.
7849	WithTimeout sets timeout on PutAppsAppParams.
7850	WithContext sets the Context field o value.
7851	WithApp sets the App field o value.
7852	WithBody sets body for PutAppsAppParams.
7853	UnmarshalJSON deserializes task data.
7854	MarshalJSON serializes task fields using JSON.
7855	Validate checks Task's validation with formats, appending errors to result and returning composite error if any.
7856	GetRanges processes IP addresses, assigning CIDR based on version, validating lengths, and parsing to net.IPNet. Returns slice of parsed networks or error.
7857	WithTimeout sets the timeout duration for route params.
7858	WithContext sets the ctx field to o.
7859	WithHTTPClient sets HTTP client for GetAppsAppRoutesRouteParams.
7860	WithApp sets the app field o value.
7861	WithRoute sets route on GetAppsAppRoutesRouteParams.
7862	New constructs a Functions instance with various components initialized using a client transport and format registry.
7863	SetTransport updates transport for c and its sub-components.
7864	WithTimeout sets timeout for route parameters.
7865	WithContext sets the ctx field o value.
7866	WithHTTPClient sets the HTTPClient field o's value.
7867	WithApp sets the app field o value using SetApp method.
7868	WithRoute sets route on DeleteAppsAppRoutesRouteParams.
7869	WithTimeout sets the timeout parameter for GetTasksParams.
7870	WithContext sets the Context field o value.
7871	WithHTTPClient sets HTTP client for GetTasksParams.
7872	NewValueStore initializes a new value store with specified parameters.
7873	Close shuts down the value store and waits for handlers to finish.
7874	SetBackend updates the server's backend service while locking.
7875	Ring returns the server's ring from state.
7876	GetLocalID returns the local ID of the server.
7877	GetListenAddr retrieves the server's local node address from the ring.
7878	Startup initializes a ring server connector if it's not already running.
7879	shutdownFinished waits then signals server shutdown completion
7880	Stop stops the server and its backend gracefully.
7881	Exit handles server shutdown gracefully.
7882	SelfUpgrade applies a binary upgrade to the server.
7883	SoftwareVersion retrieves the current software version safely.
7884	Shutdown releases resources for groupStore.
7885	Rant fetches a rant and its comments by ID.
7886	Profile retrieves user profile and content based on username.
7887	Search retrieves RantModels based on a term using an HTTP GET request.
7888	Surprise fetches a rant from an API endpoint and returns it or an error.
7889	WeeklyRants fetches weekly rants from an API endpoint.
7890	getUserId retrieves a user's ID using their username from a service. Returns the user ID or an error if unsuccessful.
7891	Shutdown handles stopping a ReplValueStore gracefully.
7892	function checks if file exists by name.
7893	outbound manages sending messages over the connection until shutdown.
7894	parse receives messages from a pool, parses them, logs errors, and forwards valid messages.
7895	Group creates a new group with specified domain, name, and members.
7896	Groups retrieves domain groups using CGP request.
7897	GetGroup retrieves a group by name and parses its members from XML.
7898	Reticence truncates a string to specified length, removing trailing punctuation or "..".
7899	CheckPassword verifies if password length is within bounds and contains only printable characters, returning an error if not.
7900	CleanUrl sanitizes a URL, validating its format and checking its length before returning it. An error is returned if validation fails.
7901	NewParameter constructs a new Parameter instance with the given name and value.
7902	MakeParams initializes a Params struct with specified capacity for parameters.
7903	Parse populates the struct fields based on the input value's field tags.
7904	Email constructs the email address using the forwarder's name and domain name.
7905	Forwarder creates a new Forwarder instance with specified domain, name, and target.
7906	Forwarders retrieves forwarders from the CGP and compacts the response before returning them.
7907	GetForwarder retrieves a forwarder by name.
7908	New creates a new CGP instance with the specified URL, user, and password.
7909	EscapeCommaSeparated encodes comma-separated values in URLs
7910	Alias creates a new Alias instance associated with account.
7911	Email constructs the email address from alias and domain.
7912	Aliases retrieves all aliases associated with an account's domain.
7913	RealName retrieves the real name associated with the account's email.
7914	Email constructs the full email address using the account name and domain.
7915	Account returns an Account with Domain set to dom and Name set to name.
7916	Accounts retrieves domain's accounts using CGP request.
7917	Exists checks if a domain exists.
7918	Aliases retrieves and compacts domain aliases.
7919	Domain creates a new Domain instance with the given name and associated CGP.
7920	Domains retrieves domain information from CGP service.
7921	newError creates a new error with stack trace, no cause, not hidden, given info, and optional public message.
7922	Wrap wraps an error with additional context from info and optional public message.
7923	mergeIn updates error information with new details, concatenating messages.
7924	wrappedErrStr returns the error message of the inner error if it exists; otherwise, it returns an empty string.
7925	concatArgs joins variadic arguments into a single formatted string without the trailing newline.
7926	MailingList returns a new MailingList instance associated with the domain and named accordingly.
7927	Subscriber creates a new subscriber instance associated with a mailing list.
7928	Subscribers retrieves all subscribers associated with a mailing list.
7929	MailingLists retrieves mailing lists from domain using CGP request.
7930	NewByteKeyItem converts a byte slice to an unsafe pointer.
7931	CompareBytes compares two byte key items using bytes comparison.
7932	CompareInt compares two integer key items
7933	Malloc allocates memory using a system call and tracks allocations if debugging is enabled.
7934	Free releases memory at pointer p.
7935	Stats returns formatted memory statistics.
7936	FreeOSMemory releases OS memory and returns an error if unsuccessful.
7937	Add adds an item to the segment's builder store.
7938	NewSegment creates a new segment with random number generation and local status set.
7939	Assemble combines multiple segments into a Skiplist, merging their nodes and statistics.
7940	CompareNodeTable compares two pointers and returns their difference.
7941	New creates a NodeTable instance using hash and key equality functions, storing it in a database buffer.
7942	Stats generates a formatted string containing various statistics about the node table.
7943	MemoryInUse calculates total memory usage based on hash table counts.
7944	Get retrieves a pointer to the value associated with the given key in the NodeTable. If the key is not found, it returns nil.
7945	Update checks if a key exists and replaces or inserts it accordingly, updating pointers in both fast and slow hash tables.
7946	Remove will delete a key from NodeTable and return success status and pointer.
7947	Close resets counters and frees resources for the NodeTable instance.
7948	MemoryInUse calculates total memory usage by iterating through database instances.
7949	debugMarkFree updates node's memory with free block content
7950	Seek advances the iterator to the first key greater than or equal to the given byte slice.
7951	Next method advances iterator, increments count, skips unwanted items, and refreshes if needed.
7952	Refresh updates the iterator's state based on its current position.
7953	Close releases resources held by the Iterator instance.
7954	NewIterator creates an Iterator from a Snapshot if it's open.
7955	SeekFirst advances the merge iterator to the first valid item.
7956	Next will move iterator to next element
7957	Seek iterates through MergeIterator's iterators, updating heap based on valid items found.
7958	Keys returns a list of byte keys from the linked list.
7959	Remove deletes item from NodeList using key.
7960	Add will prepend a given Node to the head of NodeList.
7961	NewWithConfig creates and returns a pointer to a new Skiplist instance with specified configuration.
7962	FreeNode releases a node and updates free count.
7963	MakeBuf initializes and returns a new ActionBuffer with pred and succ slices.
7964	Size calculates the total size of items in the SkipList starting from the given node.
7965	NewLevel calculates the next level based on random function and updates skip list level atomically.
7966	Insert adds an item to a skiplist.
7967	Insert2 adds an item to the skiplist at a random level using custom comparison functions and returns the inserted node.
7968	Insert3 inserts an item into a skiplist, handling conflicts and updating indices atomically.
7969	Delete removes item from SkipList using compare function.
7970	DeleteNode removes a node from the skip list using the provided compare function and buffer, updating statistics accordingly.
7971	GetRangeSplitItems splits SkipList into nways chunks, returning pointers to items.
7972	Bytes returns a slice of bytes from the item's data.
7973	ItemSize calculates the size of an item based on its pointer, returning the total size including header and data length.
7974	KVFromBytes extracts key-value pairs from byte slices.
7975	CompareKV compares two key-value pairs represented as byte slices.
7976	Emit triggers multiple handlers asynchronously and returns the count.
7977	UnregisterHandler removes handler from map safely using mutex.
7978	IsHandlerRegistered checks if a handler is registered under a specific name.
7979	CompareNitro compares two Nitro items based on their id field.
7980	DefaultConfig initializes a Config with default settings for key comparison, file type, memory management, and refresh rate.
7981	Delete method returns boolean indicating success after calling Delete2.
7982	GetNode retrieves a node from the store based on byte slice bs or returns nil if not found.
7983	SetKeyComparator updates comparator functions for various operations.
7984	UseMemoryMgmt configures memory management functions if on amd64 architecture.
7985	NewWithConfig creates a new Nitro instance with specified configuration.
7986	MemoryInUse calculates total memory used by Nitro instance.
7987	Close shuts down Nitro, waits for snapshots, frees resources, and cleans up.
7988	NewWriter creates a new Writer, adds it to the writer list, initializes its context, starts a collection worker, and optionally a memory management worker.
7989	SnapshotSize calculates total size of Snapshot struct pointed by p. Returns size in bytes.
7990	Encode serializes snapshot data to buffer and writer.
7991	Decode reads data from reader into buffer and updates snapshot's sn field.
7992	Open increments the reference count of a snapshot if it's not already zero.
7993	CompareSnapshot compares two snapshots based on their sequence numbers.
7994	GC runs a garbage collection cycle if not already running.
7995	GetSnapshots retrieves all snapshots from Nitro's snapshot store.
7996	MemoryInUse calculates total memory usage by iterating through instances.
7997	CompareBS compares two BarrierSession pointers based on their seqno field.
7998	Acquire locks the access barrier and returns a session.
7999	Release decrements BarrierSession's live count and handles cleanup if necessary.
8000	FlushSession updates session state and increments sequence number
8001	Apply updates the stats report with data from another Stats object, calculating various metrics like node distribution and memory usage.
8002	AddInt64 updates src with val, considering atomic operation if not local.
8003	AddUint64 adds val to src if s is local, otherwise uses atomic operation.
8004	Merge combines statistics from another Stats object atomically and resets the source's counters.
8005	GetStats retrieves statistics from the skiplist.
8006	Skiplist's NewIterator initializes a new iterator with comparison function, Skiplist, buffer, and barrier.
8007	SeekFirst moves iterator to first element in sequence.
8008	SeekWithCmp searches for item using comparison functions and updates iterator state accordingly.
8009	Seek checks if an item exists using a path finder and updates iterator state.
8010	Valid checks if Iterator is still valid after reaching tail.
8011	Delete removes the current item and advances the iterator.
8012	Iterator.Next moves to the next valid item, handling deletions and retries.
8013	Init registers SkuM1SmallBuilder with skurepo using SkuName.
8014	FromURL replaces parts of a URL using predefined replacements
8015	ToURL converts a folder path by replacing specified substrings.
8016	Size calculates the total size of a tuple header based on its version, field count, and field size.
8017	WriteTo encodes tuple header fields into writer.
8018	Static serves static files from a specified directory with optional options like prefix and index file.
8019	Read reads configuration from a file, parses lines, and sets values.
8020	Del removes the key from the specified section in Config if it exists. If the section becomes empty, it's also removed.
8021	WriteTo saves configuration data to a file, formatting it section-wise.
8022	checkSection extracts text between square brackets if present; otherwise, it returns an empty string and false.
8023	checkLine splits a line into key-value pairs using "=" as delimiter and trims spaces from both ends. Returns key, value, and success flag.
8024	checkComment verifies if a line starts with any comment prefix.
8025	NewResponseWrapper creates a new response wrapper for HTTP responses.
8026	Hijack extracts a net.Conn from a wrapped ResponseWriter.
8027	CloseNotify returns a channel that receives a value when the underlying writer is closed
8028	DateFormat returns an Option to set the dateFormat field.
8029	Logger middleware logs HTTP requests with details like method, status, latency, and client IP.
8030	GetAvailableInventory retrieves inventory using SkuBuilder and starts task polling.
8031	Expiration creates a TokenOpt to set the expiration duration.
8032	Claimer returns a token option to set the claimer a token should use to parse claims.
8033	Issuer returns a TokenOpt to set the issuer field in options.
8034	User returns a TokenOpt to set the user option.
8035	Password creates a TokenOpt to set the password option.
8036	Extractor sets the extractor field in options.
8037	TokenGenerator creates a middleware to authenticate HTTP requests using JWTs, handling both form data and basic authentication.
8038	Token extracts authentication token from HTTP request context or returns empty string.
8039	Claims retrieves JWT claims from HTTP request context if present.
8040	Token's String method formats token value based on type and length.
8041	NewLexer creates a Lexer instance initialized with a name, input string, and handler.
8042	run executes lexical analysis until completion.
8043	emit generates and emits a token using current lexer state.
8044	skipWhitespace will skip whitespace characters and then backup and ignore them.
8045	next reads the next rune from Lexer input
8046	LineNum counts the number of lines up to the current position in the input.
8047	Offset calculates the position relative to the last line break or the start of the input.
8048	errorf formats and logs an error token before returning nil.
8049	lexText processes text input using a lexer, transitioning between states based on keyword prefixes or emitting tokens for various characters.
8050	lexComment processes a comment token, advancing lexer position and emitting the comment.
8051	New creates a new tuple with namespace, name, and hashes.
8052	AddVersion appends fields to TupleType and updates their positions.
8053	Contains checks if a field exists within a tuple type
8054	Offset returns the memory offset and existence status of a specified field in a tuple type.
8055	Versions returns a slice of versions for the tuple type.
8056	SetPrivateMeta adds or updates a private metadata entry in Task.
8057	SetPublicMeta updates MetaData map with given name and value.
8058	GetRedactedVersion returns a redacted version of the task.
8059	Equal checks if two tasks have identical ID, Timestamp, Expires, Status, Profile, and CallerName.
8060	HTTP wraps handler to allow specified verbs only.
8061	PutUint8 writes an unsigned 8-bit integer to the buffer.
8062	PutInt8 adds an int8 value to the buffer at the specified field position.
8063	PutUint16 adds a 16-bit unsigned integer to the buffer with type checking and returns the number of bytes written.
8064	PutInt16 adds an int16 value to the buffer with a type code and updates offsets.
8065	PutUint32 adds a 32-bit unsigned integer to the buffer, handling different ranges and returning the number of bytes written.
8066	PutInt32 writes an integer to the buffer based on its size.
8067	PutUint64 adds a 64-bit unsigned integer to a buffer with a type code.
8068	PutInt64 writes an int64 value to the buffer based on its size, updating offsets and position.
8069	NewPackageList creates a thread-safe package list instance.
8070	PutFloat32 adds a float32 field to buffer with error handling.
8071	New Martini router with middleware and routes
8072	Languages returns an Option to set languages in options.
8073	Session sets the session option in the options struct.
8074	Data retrieves ContextValue from request context
8075	URL constructs a full URL by appending a prefix and context value to the given URL.
8076	Size returns width, height, and error if termsize is uninitialized.
8077	GetRequestIDFromTaskResponse extracts the request ID from a task response's metadata. If extraction fails, it logs errors and returns an empty string along with the error.
8078	PutString writes a string value to buffer with appropriate type code and length.
8079	LoadDirectory recursively loads files and directories using the provided parser.
8080	LoadFile opens a file, reads its contents, and parses them using the provided parser.
8081	LoadPackage parses the given text using the specified parser and returns the resulting package along with any errors encountered.
8082	NewDecoder creates a new Decoder with given registry and reader.
8083	NewDecoderSize creates and returns a Decoder for reading events from an io.Reader with a specified maximum size.
8084	Panic wraps an HTTP handler to log panics, capture stack traces, and return a user-friendly error message.
8085	DeployVApp simulates deploying a VApp using fake data.
8086	UnDeployVApp simulates the undeployment of a virtual application.
8087	Auth method returns the fake authentication error for the given username and password.
8088	QueryTemplate returns fake VApp template record.
8089	NewEncoder creates a versionOneEncoder to write data to an io.Writer.
8090	Getter sets the getter option in o.
8091	Setter creates an Option that sets the setter field o value.
8092	Age creates an Option to set the age field.
8093	Nonce adds a nonce middleware to an HTTP handler, generating and validating nonces with expiration.
8094	NonceValueFromRequest retrieves NonceStatus from http request context.
8095	StoreNonce handles nonce setting via context.
8096	PutFloat32Array writes float32 array to buffer with type code based on size.
8097	PutFloat64Array writes float64 array to buffer, handling different sizes and types.
8098	Do spies request and returns response/error
8099	NewLease creates a Lease object managing tasks and available SKUs.
8100	Delete handles HTTP request to delete a lease.
8101	Post handles HTTP requests for lease creation, logging status and errors accordingly.
8102	ReStock manages SKU restocking tasks
8103	Procurement creates or retrieves a task based on available SKUs
8104	InitFromHTTPRequest reads JSON from HTTP request and populates lease object. It handles empty bodies gracefully.
8105	Is checks if a tuple matches a specific type based on hash values.
8106	Offset retrieves field offset from Tuple Header.
8107	WriteTo implements io.Writer.WriteTo. This method writes the tuple's header followed by its data to the given writer.
8108	PutTuple inserts a tuple into buffer at specified position, handling different sizes and checking available space before writing.
8109	WriteString sends content to ResponseWriter.
8110	Handles not found errors
8111	Run starts the agent's task processing and monitoring goroutines.
8112	NewWaitGroup initializes a WaitGroup with a specified throttle limit.
8113	Add increments the count of outstanding tasks, throttling if necessary.
8114	Wait blocks until all goroutines have completed their work
8115	Gzip wraps an HTTP handler to compress responses using gzip when requested.
8116	New creates a new InnkeeperClient with the specified URI, user, and password.
8117	Sets HTTP status and writes error message
8118	Renderer creates a handler to process HTTP requests using templates.
8119	NewClient creates a PDClient instance using API key, URL, and HTTP client.
8120	GetTask fetches a task by ID and handles HTTP responses.
8121	WriteImageToHTTP will encode an image to PNG format and write it to HTTP response.
