0	NewSTM creates a transactional operation using a client, applying changes with options, and handling prefetching before executing.
1	first returns the lowest revision number from a set of responses or MaxInt64 - 1 if the set is empty
2	cmps creates a list of revision comparisons for each key in the write set
3	NewSTMRepeatable creates a new STM transaction with repeatable reads isolation and abort context.
4	NewSTMSerializable creates a new STM transaction with serializable isolation and abort context.
5	NewSTMReadCommitted creates a new STM transaction with ReadCommitted isolation level and applies a given function.
6	NewCertPool creates a new certificate pool from a list of CA files, returning the pool and any errors encountered during parsing.
7	NewCert reads cert and key files, parses them using a provided or default function, and returns a TLS certificate.
8	Pause method sets peer to paused state and stops message readers.
9	Resume unpauses the peer's message readers.
10	pick selects a channel to write a message based on its type and available writers
11	post sends an HTTP request asynchronously and returns an error if it fails or the response is invalid.
12	newTxnResp constructs a transaction response based on request type and path, handling nested transactions recursively.
13	applyCompare checks if values match a comparison condition using a read view and returns true if all comparisons succeed.
14	OpCompact creates a CompactOp with specified revision and options.
15	NewPriorityQueue creates a new priority queue with the given client and key, returning a pointer to the queue.
16	Enqueue adds a value to a priority queue with a given key and priority, returning an error if unsuccessful.
17	NewLeaderStats creates a new LeaderStats instance with the given ID.
18	Succ updates FollowerStats with success count and latency metrics.
19	Fail increments the Fail count in FollowerStats while ensuring thread safety
20	delete will remove a watcher and update broadcast map and return count of remaining broadcasts
21	startStreamWriter initializes a streamWriter with logger, IDs, status, stats, and Raft, starts it, and returns the writer
22	checkStreamSupport verifies if a version supports a given stream type
23	maybeUpdate updates progress match and next values if they need to be advanced, returning whether anything was updated.
24	IsPaused checks if progress is paused based on its state.
25	needSnapshotAbort checks if snapshot state requires abort based on match and pending snapshot values.
26	add inflight to buffer, growing if needed, panic if full
27	growBuf doubles buffer size or sets to 1 if zero, then copies data to new buffer
28	freeTo releases inflights up to a given sequence number and updates the start index
29	SaveDBFrom saves a database snapshot from a reader to disk, returning the number of bytes written and an error if any occurs during the process.
30	DBFilePath checks directory for snapshot file and returns path or error
31	Set populates a map with unique string values from a comma-separated string
32	NewUniqueStringsValue creates a new instance of UniqueStringsValue with unique string values and sets them from a given string, panicking on failure.
33	UniqueStringsFromFlag retrieves unique strings from a flag set.
34	UniqueStringsMapFromFlag retrieves a set of unique strings from a flag.
35	Percentiles calculates and returns percentiles and sorted data.
36	VerifyBootstrap checks server config for local member, matching advertise URLs, duplicate URLs, and unset initial peer URLs or discovery URL.
37	VerifyJoinExisting checks server config for joining an existing cluster and returns an error if any condition is violated
38	hasLocalMember checks if the server's local member exists in the initial peer URLs map and returns an error if it doesn't
39	advertiseMatchesCluster checks if initial peer URLs match advertised URLs and returns an error if they don't.
40	ReqTimeout calculates total request timeout based on election ticks and tick milliseconds.
41	getStatus retrieves Raft state and progress, updating progress if leader.
42	GetDefaultHost retrieves the default host from routes, prioritizes IPv4, sorts families deterministically, and returns the first valid host or an error.
43	getIfaceAddr retrieves network interface address based on index and family, returning a Netlink message or an error if not found.
44	getIfaceLink retrieves a network link message by its index, returning an error if not found.
45	lsCommandFunc handles list command with options for sorting, recursion, and quorum, and prints the result or error.
46	printLs outputs list based on context and response format
47	rPrint recursively prints node keys with optional trailing slashes based on context flags.
48	NewLeaseRenewerCommand creates a Cobra command for lease renewal with a TTL flag.
49	Read reads a snapshot file, validates its contents, and returns a raftpb.Snapshot object along with any errors encountered.
50	GetCipherSuite retrieves a cipher suite from a map and returns its value and existence flag.
51	post sends data to a server using a pipeline and handles responses or errors accordingly.
52	send method sets sender id, validates term based on message type, appends message to raft's msgs slice.
53	sendHeartbeat sends a heartbeat message with the minimum match index and context to a specified follower
54	bcastAppend sends append RPCs to all peers except itself.
55	bcastHeartbeat sends a heartbeat to followers, using the last pending request context or nil if none is available.
56	tickElection increments electionElapsed and promotes raft if conditions are met.
57	tickHeartbeat increments timers and steps raft based on state and timeouts.
58	stepCandidate handles different message types and updates raft state accordingly.
59	restore will apply a snapshot to raft log and update progress maps, returning whether the application was successful
60	promotable checks if the raft instance has a peer with its own ID.
61	checkQuorumActive checks if the majority of nodes in the raft group are active and updates their activity status.
62	increaseUncommittedSize updates the uncommitted size of a raft instance and returns whether the operation was successful based on size limits.
63	reduceUncommittedSize updates the uncommitted size based on the given entries, ensuring it does not go below zero.
64	newPeriodic initializes a new Periodic object with logger, clock, duration, revgetter, compactable, and returns it
65	Pause sets pc.paused to true while locking pc.mu
66	Resume unpauses the periodic task by setting paused to false and unlocking the mutex.
67	Lock method acquires a distributed lock using etcd, handling contention through transactions and waits for previous holders to release their locks.
68	NewLocker returns a sync.Locker interface using a lockerMutex with a new mutex initialized from a session and prefix.
69	NewFIFOScheduler initializes and returns a new FIFO scheduler instance.
70	Schedule adds a job to the pending list and signals to resume processing if needed.
71	Stop will stop the fifo and wait for it to finish processing
72	NewServer creates a new server instance with logger, network, and address configurations.
73	StartServe starts a gRPC server on the specified address and handles errors appropriately.
74	Stop will stop the gRPC server and log the address
75	Transport handles RPC requests and responses asynchronously, updating server state and sending replies until an error occurs or the context is canceled.
76	RegisterInterruptHandler adds an interrupt handler to the registry safely.
77	HandleInterrupts registers handlers for SIGINT and SIGTERM signals, logs receipt, executes registered handlers, and shuts down gracefully or forcefully.
78	OpGet creates an Op instance with specified key and options, panicking if both WithPrefix and WithFromKey are set.
79	OpDelete creates a new delete operation with options and validates them.
80	OpPut creates an Op object for a put operation with validation checks
81	OpTxn constructs an Op object representing a transaction with conditional operations.
82	WithFromKey sets default key and end values for an operation option
83	withTop will return a list of OpOptions to sort a target field by a given order and limit the result to one item
84	Exist checks if any .wal files exist in the given directory
85	searchIndex searches for an index in reverse order and returns its position and whether found
86	isValidSeq checks if a sequence of WAL file names is valid, returning true if each name's sequence number is exactly one more than the previous, otherwise false. If parsing fails, it logs an error and panics.
87	NewListener creates a network listener with optional TLS wrapping.
88	cafiles returns a slice of CA files based on the TrustedCAFile field
89	ServerConfig returns a TLS configuration based on the provided TLSInfo, handling client authentication and CA files.
90	TLSInfo's ClientConfig returns a tls.Config based on its fields or an error if invalid.
91	newTLSKeepaliveListener creates a TLS keepalive listener wrapping an existing net.Listener with given tls.Config.
92	applyV2Request processes V2 requests based on method type and returns appropriate responses or errors.
93	NewRoleCommand creates a new Cobra command for role-related subcommands.
94	roleAddCommandFunc processes role addition command, validates arguments, makes API call, and displays response.
95	roleGetCommandFunc processes role name from args, fetches role details, and displays them or errors out on failure.
96	roleGrantPermissionCommandFunc handles role permissions by validating arguments, converting permission types, granting permissions, and displaying results or errors accordingly.
97	roleRevokePermissionCommandFunc revokes permission from a role and displays the result or an error if the operation fails
98	NewCluster initializes a cluster with given size and testing context.
99	NewClusterByConfig creates a new cluster using a testing context and configuration.
100	HTTPMembers returns a list of members with their peer and client URLs based on TLS info
101	waitLeader waits for a cluster member to become the leader and returns its index.
102	waitNoLeader checks if all members have no leader and waits until they do.
103	isMembersEqual checks if two slices of client.Members are equal after sorting and removing IDs
104	`listenGRPC sets up gRPC listener using member's name and TLS info, handling errors appropriately.`
105	NewClientV3 creates a gRPC client configuration from member details and returns it along with any errors encountered.
106	Clone method creates a deep copy of member object and returns it, panicking on any errors.
107	Close method stops all gRPC servers and client connections gracefully before hard stopping the server.
108	Stop will log member stop details, close it, and reset server closers.
109	checkLeaderTransition waits until leader changes and returns new leader ID
110	Restart will restart a member, log details, create new listeners, launch it, and log result or error
111	Terminate logs termination details, closes member, removes data dir if configured, then logs completion.
112	Metric retrieves a specific metric from member's client URL and returns its value.
113	InjectPartition will remove members from each other's peer lists
114	RecoverPartition will mend peers between a member and others in a testing environment
115	NewClusterV3 initializes a new ClusterV3 instance with gRPC enabled, sets up logging if debug mode is on, launches the cluster, and creates clients for each member if required.
116	ParseWithDefaults sets default TTL if not specified and calls Parse method
117	Parse will update jwtOptions from a map and return an error if any values are invalid
118	Key returns the appropriate key based on the signing method or an error if unsupported
119	fill updates the response header with cluster, member IDs, and terms, handling nil inputs.
120	add method checks if watcher can receive updates based on revision numbers and manages receivers map accordingly.
121	Watch method starts a watch stream for a given ID and returns an error if the range is invalid or the ID already exists.
122	newFileEncoder creates an encoder from a file at its current position with the given CRC.
123	purgeFile will remove files from a directory based on a suffix and max count, logging errors and purged files
124	Set will split the input string by commas and store it in ss.
125	NewStringsValue creates a new StringsValue instance from a string, setting it or panicking on failure.
126	StringsFromFlag retrieves values of a specific flag as a slice of strings from a FlagSet.
127	Cluster will return a shortened version of the input string by keeping only the first two parts separated by a dot.
128	NewPageWriter creates a new PageWriter instance with specified writer, page size, and offset.
129	watch will monitor changes for a specified key and return a Watcher object along with any errors encountered
130	notify method processes events, updates history, splits path, and notifies relevant watchers
131	clone method creates a shallow copy of watcherHub by cloning its EventHistory field
132	isHidden checks if watchPath contains hidden paths based on keyPath
133	createEtcdLogFile creates an etcd log file and logs its creation path or returns an error
134	runEtcd starts embedded etcd or external etcd command, waits for readiness, and handles errors.
135	stopEtcd stops the etcd server gracefully or forcefully based on the signal received
136	handle_SIGQUIT_ETCD_AND_REMOVE_DATA_AND_STOP_AGENT stops etcd, syncs logs, removes data dir, stops agent, and returns success response
137	LimitListener returns a listener that limits concurrent connections to 'n'.
138	allowMethod checks if method m is in ms, sets Allow header, and returns false if not allowed
139	NewWatchServer creates a watch server for etcd using the given server instance.
140	FiltersFromRequest extracts watch filters from a request and returns them as FilterFuncs.
141	newPipelineHandler initializes a pipeline handler with transport, raft, and client ID details.
142	checkClusterCompatibilityFromHeader verifies if the client and server versions are compatible and logs warnings or errors if they are not.
143	KeyExists checks if a key exists in etcd by comparing its version to 0.
144	KeyMissing returns a Compare condition to check if the key version is missing
145	ValidateSecureEndpoints checks HTTPS endpoints and returns valid ones or errors.
146	putNewKV inserts a new key-value pair and returns the revision number or an error if the key already exists
147	newUniqueEphemeralKey generates a unique ephemeral key for a session with a given prefix and returns it along with any errors encountered.
148	NewUpdateDirCommand creates a CLI command to update an existing directory with options for key and TTL.
149	updatedirCommandFunc updates a directory key with TTL and handles errors or outputs response based on flags
150	handleBackup will create a backup of WAL and snap files with optional v3 support and update metadata before saving to destination directory
151	saveDB copies data from source BoltDB to destination BoltDB, handling versioning and updating metadata.
152	NewWatchCommand creates a new Cobra command for watching operations with various flags for configuration.
153	NewV3 creates a new manager with a logger, using a default logger if none is provided.
154	Save will save a snapshot to a specified path and log the process.
155	Status checks database path, opens DB, validates integrity, calculates size and hash, counts keys, returns status and error.
156	Restore config initializes server settings, verifies bootstrapping, creates cluster, checks directories, saves database and WAL, and logs restoration completion.
157	NewAuthStore initializes an authentication store with logging, backend, token provider, and bcrypt cost, handling errors and setting up buckets and flags.
158	NewTokenProvider creates a TokenProvider based on tokenOpts and logs warnings or errors accordingly.
159	MendPeer resumes a peer or remote connection by ID.
160	removePeer removes a peer from Transport and logs the action
161	ActivePeers returns count of active peers in Transport.
162	resolveTCPAddrDefault parses TCP address, resolves host to IP, returns TCPAddr or error
163	resolveTCPAddrs parses URLs and resolves their hosts, returning updated URLs or an error.
164	urlsEqual checks if two URL slices are equal after resolving TCP addresses and sorting them.
165	URLStringsEqual checks if two arrays of URLs are equal, parsing strings to URLs and logging errors.
166	NewLeaseCommand creates a new Cobra command for lease-related subcommands
167	NewLeaseGrantCommand initializes a new Cobra command for granting leases.
168	leaseGrantCommandFunc processes lease grant commands, validates arguments, grants leases, and displays responses or errors accordingly.
169	NewLeaseRevokeCommand creates a new command to revoke leases.
170	leaseRevokeCommandFunc handles revoking a lease with validation and error handling.
171	NewLeaseTimeToLiveCommand creates a Cobra command for getting lease information with optional key retrieval.
172	leaseTimeToLiveCommandFunc processes a lease ID, validates arguments, sets options, retrieves lease TTL, and displays the result or error.
173	NewLeaseListCommand creates a new Cobra command to list all active leases.
174	leaseListCommandFunc executes a command to retrieve and display leases, handling errors gracefully.
175	NewLeaseKeepAliveCommand creates a Cobra command for keeping leases alive with options.
176	`leaseKeepAliveCommandFunc handles lease keep-alive commands, displaying responses and handling errors.`
177	NewAlarmCommand initializes and returns a Cobra command for alarm-related subcommands.
178	alarmDisarmCommandFunc handles the disarm command, ensuring no arguments are passed, executing the command, and displaying the response or error.
179	alarmListCommandFunc handles the 'alarm list' command, ensuring no arguments are passed, making an API call to retrieve alarms, and displaying the result or exiting with an error.
180	Flags method returns a slice of strings representing command-line flags based on struct fields.
181	EmbedConfig creates an Etcd configuration from various URL settings and other properties.
182	PProfHandlers sets up HTTP handlers for profiling metrics.
183	NewBackendQuota initializes and configures backend quota based on server settings and returns a corresponding quota object.
184	NewClusterProxy initializes a cluster proxy with client details, address, and prefix returns a ClusterServer interface and a channel signaling when resolution completes
185	NewHandler creates a new HTTP handler using a lease lessor and a wait channel.
186	TimeToLiveHTTP sends a lease request to a URL and returns the response or an error.
187	newWatcherBatch creates a batch of watchers for given events based on their modification revisions.
188	watcherGroup adds a watcher to its list and optionally to an interval tree based on key and end values
189	contains checks if key exists in watcherGroup's map or ranges
190	delete will remove a watcher from the group and update associated intervals, returning true if successful
191	choose selects up to maxWatchers from watcherGroup, returns updated group and revision.
192	watcherSetByKey returns a combined watcher set for a given key, merging both key-specific and range-based watchers.
193	Compare intervals based on their bounds. Returns -1, 0, or 1.
194	successor returns the next node in the interval tree or nil if there is no such node
195	updateMax updates node's max value recursively up to root if changed
196	visit traverses the interval tree recursively and applies visitor functions to intervals.
197	Delete method removes interval from tree and fixes balance if necessary
198	Insert will add a new interval to the tree and fix its properties.
199	rotateLeft will reorganize nodes in an IntervalTree to maintain balance by rotating them left.
200	replaceParent updates parent pointers and reassigns children in IntervalTree
201	MaxHeight calculates the maximum height of an interval tree using its length.
202	Visit method traverses the IntervalTree using the provided Interval and IntervalVisitor.
203	find searches for an interval in the tree and returns the corresponding node or nil if not found
204	Find searches for an interval in the tree and returns its associated value or nil if not found.
205	Intersects checks if an interval intersects with any node's interval in the tree.
206	Contains checks if an interval is fully contained within an interval tree.
207	Stab method on IntervalTree returns intersecting intervals for given interval.
208	Union method combines intervals from two trees using a visitor pattern.
209	NewExactReadCloser creates a wrapper for a ReadCloser with exact byte counting.
210	NewElection initializes an Election struct with a Session and a modified key prefix.
211	ResumeElection creates a new Election instance with given parameters.
212	Proclaim updates election leader key with new value using transactional comparison and returns error if not successful.
213	Resign method for Election struct deletes leader key if session exists and updates header, returns error
214	Leader method retrieves the current leader from etcd and returns its response or an error if none exists.
215	Observe starts an election observation goroutine and returns a channel for GetResponse messages.
216	check will activate an alarm and return an error if quota is unavailable
217	NewExecWatchCommand creates a CLI command to watch a key and execute a command on change.
218	execWatchCommandFunc executes a command on key changes, handling signals and recursion.
219	NewListener creates a new listener with timeout settings based on URL and TLS info.
220	NewRoundTripper creates a new HTTP round tripper with custom TLS settings and a specified dial timeout, using a timeout transport without read/write timeouts.
221	createPostRequest constructs a POST HTTP request with specified URL, path, body, content type, and headers.
222	checkPostResponse validates HTTP response based on status code and returns appropriate error or nil
223	serverVersion retrieves the server version from headers or defaults to "2.0.0", then parses it into a semver.Version object.
224	checkVersionCompatibility verifies if remote and local versions meet specified criteria, returning appropriate versions or errors
225	setPeerURLsHeader sets the X-PeerURLs header on the request with URLs from the given slice
226	addRemoteFromRequest adds remote peer URLs to transporter based on request headers
227	NewKeysAPIWithPrefix creates a new keys API with a given client and prefix
228	TTLDuration returns the TTL duration in seconds for a node.
229	setPflagsFromEnv sets flag values from environment variables with a given prefix, handling errors and verifying usage.
230	FlagToEnv converts a flag name to an environment variable format by replacing hyphens with underscores and uppercasing the result, prefixed with a given string.
231	excerpt will truncate a string with specified prefix and suffix lengths, returning the truncated version or the original if truncation exceeds string length
232	passConfChange checks if the entry type is ConfigChange and returns a message
233	printInternalRaftRequest unmarshals and prints a Raft request from an entry's data.
234	listEntriesType processes raft entries based on type filters and streams them through a decoder.
235	newLog creates a new raft log instance using default size limits
236	newLogWithSize creates a new raftLog instance with specified storage, logger, and maxNextEntsSize, initializing its unstable offset, committed, and applied pointers based on storage's first and last index.
237	findConflict identifies the first entry in ents that conflicts with raftLog's entries and returns its index or 0 if no conflict is found
238	nextEnts returns the next set of unapplied entries or nil if none are available
239	allEntries retrieves all log entries or panics on error
240	slice returns a range of log entries within specified limits, handling both stable and unstable segments and ensuring size constraints.
241	NewSession creates a new session with optional configurations, handles lease management, and returns an error if setup fails.
242	Close method cancels session after revoking it with a timeout based on options.
243	WithTTL sets a time-to-live duration for a session option if greater than zero
244	WithLease sets a lease ID for a session option.
245	addRequest adds a request to a read-only context if it's not already pending
246	recvAck updates pending reads with an acknowledgment and returns the total number of acknowledgments including the local node's.
247	advance processes a message to find matching context and returns read index statuses, updating internal states accordingly.
248	lastPendingRequestCtx returns the last pending request context or an empty string if none exist
249	Start method initializes and starts various goroutines for EtcdServer.
250	start initializes EtcdServer, configures defaults, sets up channels and contexts, logs startup, and starts the server goroutine
251	Process handles Raft messages, logs warnings for removed members, and steps the server.
252	ReportSnapshot forwards snapshot report to underlying raft server
253	MoveLeader initiates leader transfer and waits until completion, handling timeouts and logging progress.
254	TransferLeadership checks if the server is a leader and not in a single-node cluster, then transfers leadership to the longest connected member or returns an error if unhealthy.
255	configure processes a configuration change, proposing it via Raft and handling responses or errors accordingly.
256	sync sends a SYNC request with a timeout and proposes it using goroutine
257	publish method attempts to publish etcd server attributes to a cluster using raft, handling retries on failure or when server stops.
258	applyEntryNormal processes raft entries, updates consistency index, handles no-op entries, applies V2/V3 requests, manages alarms, and triggers events accordingly.
259	applyConfChange processes configuration changes and updates cluster membership accordingly.
260	monitorVersions updates cluster version based on leadership and version decisions
261	goAttach starts a goroutine only if the server hasn't stopped.
262	NewRoundrobinBalanced creates a new round-robin load balancer picker.
263	Pick will select a subconnection based on round-robin logic and log the outcome.
264	NewTLSListener creates a TLS-enabled listener from a regular listener and TLS configuration, returning an error if the setup fails.
265	acceptLoop manages TLS connections in a loop, handling handshakes and context cancellation.
266	SetEndpoints updates resolver group endpoints and notifies resolvers.
267	Target method returns the resolved target string based on the resolver group ID and endpoint.
268	Target constructs a URL using the provided scheme, ID, and endpoint.
269	Build constructs a resolver for an etcd target, handling errors if the target's authority is empty or if it fails to retrieve a resolver group.
270	Handle processes HTTP requests based on method type and invokes corresponding handler functions.
271	NewElectionCommand creates a Cobra command for election operations with flags.
272	nodeToMember converts a NodeExtern to Member, unmarshalling raftAttributes and Attributes from node keys.
273	NewTmpBackend creates a temporary backend with specified batch interval and limit returns the backend and its path
274	newRevision initializes a Revision struct with logger, clock, retention, revision getter, and compactor, sets up a cancelable context, and returns it
275	Run starts a goroutine to periodically compact revisions, logging progress or errors.
276	Pause locks the mutex, sets paused to true, then unlocks the mutex.
277	Resume will unlock the mutex, set paused to false, then relock the mutex
278	voteRespMsgType returns the corresponding response message type for a given vote message type, or panics if the input is invalid.
279	DescribeMessage formats a message to a string using a formatter.
280	DescribeEntry formats an entry's data based on its type and formatter.
281	DescribeEntries will concatenate formatted descriptions of entries into a single string.
282	SetLogger sets a new logger with synchronization to avoid race conditions
283	GetLogger returns a logger instance using a mutex for thread safety
284	maybeFirstIndex returns the next index or false if no snapshot exists
285	maybeLastIndex returns the last index or false if none found
286	maybeTerm returns the term at index i if it exists, otherwise returns 0 and false
287	shrinkEntriesArray reduces entries array size if it's using less than half of its capacity
288	SaveSnap saves a snapshot to WAL and Snapshotter and releases lock to the given index.
289	New creates a Client instance from configuration, returning an error if no endpoints are available.
290	NewCtxClient creates a new Client with a cancellable context.
291	NewFromURL creates a new client using a URL as the endpoint and returns it along with any errors encountered
292	Close method stops client operations and closes resources, returning any connection errors.
293	Endpoints returns a copy of the client's configured endpoints to prevent modification of the original list.
294	SetEndpoints updates client's endpoints and resolver group.
295	Sync method updates client endpoints using member list from context.
296	dialSetupOpts configures gRPC dial options with custom settings, credentials, and interceptors.
297	Dial connects to a gRPC server at the specified endpoint using direct dial credentials.
298	dialWithBalancer connects to a gRPC server using a balancer, handling credentials and options.
299	dial establishes a gRPC connection with authentication if credentials are provided.
300	WithRequireLeader adds leader requirement to RPC context
301	roundRobinQuorumBackoff implements a backoff strategy for client attempts based on quorum size and jitter.
302	isHaltErr checks if the given error indicates the operation should halt based on context and gRPC error codes
303	NewLease creates a new lease with a specified prefix.
304	IsCreate checks if event type is put and revision numbers match indicating creation.
305	`Err checks watch response errors based on closeErr, CompactRevision, and Canceled status, returning appropriate v3rpc errors or nil.`
306	IsProgressNotify checks if WatchResponse has no events, is not canceled, created, and has non-zero revision and compact revision.
307	watcher's RequestProgress sends progress request or returns error based on context and stream status
308	nextResume will return the first non-nil element from the resuming slice or nil if all elements are nil
309	dispatchEvent processes WatchResponse, converts Events, and broadcasts or unicast response based on conditions.
310	broadcastResponse sends a WatchResponse to all subscribers or waits until done, returning true on success.
311	unicastResponse sends WatchResponse to the appropriate substream or returns false if donec is received
312	joinSubstreams waits for all substreams to finish before continuing
313	toPB converts watchRequest to protobuf WatchRequest
314	toPB converts progressRequest to WatchRequest protobuf message
315	Contains checks if a value exists in the unsafeSet and returns a boolean indicating its presence.
316	ContainsAll checks if all strings in values are in us
317	Equals checks if two sets contain the same elements by sorting and comparing them.
318	Values method returns a slice of strings containing all keys from unsafeSet's map.
319	Copy creates a new set containing all elements from the original unsafeSet.
320	Subtract values from another set and return the result as a new set.
321	v2MembersURL appends a prefix to the URL path and returns the modified URL
322	NewMigrateCommand creates a Cobra command for migrating keys from a v2 store to a mvcc store with options to exclude TTL keys, specify data and WAL directories, and use a custom transformer.
323	publishEntries processes raft entries, handling normal and configuration change types, updating state and signaling on completion or stop.
324	openWAL initializes or opens a WAL log for a raft node, creating it if necessary and loading from a snapshot.
325	replayWAL reads and applies the WAL log to the raft storage, updating the hard state and appending entries.
326	stop method stops the raftNode by stopping HTTP, closing commit and error channels, and stopping the node itself
327	NewWatchCommand creates a Cobra command for watching events on keys or prefixes with various options.
328	`InitialState retrieves hard state and configuration state from MemoryStorage.`
329	SetHardState updates the hard state and returns an error if unsuccessful
330	Entries retrieves a range of log entries from MemoryStorage, applying size limits and handling edge cases like compaction or unavailable data.
331	Term retrieves the term at index i from memory storage or returns an error if out of bounds.
332	LastIndex method on MemoryStorage returns the last index and locks the storage during operation.
333	FirstIndex returns the first index of memory storage or an error if locked
334	Snapshot returns a copy of the current memory storage state and an error if any occurs during copying.
335	ApplySnapshot updates memory storage with a newer snapshot, returning an error if the snapshot is outdated.
336	Compact method reduces memory storage by removing entries up to a specified index, ensuring data integrity and efficiency.
337	unreachable updates the next URL to pick after marking the current one as unreachable
338	NewEndpointCommand creates a Cobra command for endpoint-related subcommands with options to use cluster endpoints and add specific subcommands.
339	epHealthCommandFunc checks etcdctl flags, initializes display, fetches configs, performs health checks, and displays results.
340	NewElectCommand creates a Cobra command for leader election observation and participation.
341	NewDefragCommand creates a command to defragment etcd storage, handling cluster endpoints and optional data directories.
342	RegisterBuilder configures and registers a new builder with the given configuration, logging the policy and name.
343	Build initializes a new baseBalancer with options and assigns it to a ClientConn, returning the Balancer instance.
344	recordTransition updates counters based on state transitions and returns the new state.
345	doSerialize checks authorization and executes a get operation, returning an error if the token is stale or authorization fails.
346	send processes watch response filtering events based on revision and filters.
347	post sends WatchResponse to channel or cancels after timeout
348	OriginAllowed checks if a given origin is allowed based on CORS settings.
349	IsHostWhitelisted checks if a host is allowed based on the whitelist configuration.
350	SelectiveStringValue's Valids method returns sorted keys from valids map.
351	NewSelectiveStringsValue creates a new SelectiveStringsValue with a set of valid strings and an empty slice.
352	NewKV wraps a clientv3.KV with a prefix.
353	NewURLsValue creates a new URLsValue instance from a string, setting its value or panicking on failure.
354	URLsFromFlag extracts URLs from a flag set.
355	servePeers starts peer servers handling HTTP/2 and gRPC requests with TLS if configured
356	NewStore initializes a store with logger, backend, lessor, and consistent index getter. It sets up internal structures, creates buckets, restores state, and returns the initialized store.
357	appendMarkTombstone appends a tombstone mark to revision bytes if they match expected size, logging or panicking otherwise
358	IsDirWriteable checks if a directory is writable by creating and then removing a temporary file.
359	TouchDirAll ensures a directory exists and is writable, returning an error if it fails
360	CreateDirAll ensures directory creation and checks if it's empty, returning an error if not.
361	ZeroToEnd truncates file to current position and preallocates blocks ensuring data remains contiguous
362	Open retrieves a file from the pipeline or an error if available.
363	NewRaftLoggerFromZapCore creates a new logger from a Zap core and write syncer, returning a Raft logger implementation.
364	NewConfig reads a configuration file and returns a clientv3.Config object along with an error if the file or its contents are invalid.
365	RegisterElectionHandler registers an election handler client with gRPC server context and connection.
366	UpdateCapability updates the enabled capabilities based on the given version and logs the change using the provided logger.
367	NewLockCommand creates a Cobra command to acquire a named lock with optional TTL.
368	tick locks mutex before calling Tick method and then unlocks it
369	advanceTicks updates the raft node's state by advancing its tick counter by a specified number of ticks.
370	NewAuthCommand creates a Cobra command for enabling or disabling authentication.
371	authEnableCommandFunc enables authentication, creating root role and granting permissions if necessary, handling errors and printing success message.
372	authDisableCommandFunc disables authentication and handles errors
373	RetryKVClient returns a retry wrapper for KVClient using a given client connection.
374	RetryLeaseClient creates a retry wrapper for a LeaseClient.
375	RetryClusterClient returns a retrying cluster client using the provided connection.
376	RetryMaintenanceClient returns a retry wrapper for MaintenanceClient
377	RetryAuthClient creates a new retryAuthClient using the provided Client connection
378	NewSetDirCommand creates a CLI command to set or update a directory's TTL.
379	Enter method checks if clients exceed limit, blocks or unblocks waiters accordingly.
380	Leave method deletes self from DoubleBarrier and waits for other processes to leave.
381	HandleBasic sets up HTTP routes for various handlers in the given mux.
382	WriteError logs errors and writes them to the response based on their type.
383	MemberByName returns a member by name, cloning it to avoid direct modification, and panics if multiple members with the same name exist.
384	PeerURLs returns sorted peer URLs from the cluster.
385	ValidateConfigurationChange checks if a configuration change is valid based on current cluster state and returns an error if it's not.
386	AddMember adds a new member to the RaftCluster, saves it to storage and backend, updates members map, and logs the addition.
387	RemoveMember deletes a member from the Raft cluster and logs the operation.
388	ValidateClusterAndAssignIDs checks cluster members and assigns IDs, returning an error if validation fails.
389	Keep will update treeIndex to keep revisions and return a map of kept revisions.
390	closeRequireLeader closes leader channels marked as required and updates keepAlive state
391	resetRecv sets up a new gRPC stream for lease keep-alive, cancels previous stream if exists, and starts a keep-alive loop.
392	recvKeepAlive processes a lease keep-alive response, updates TTL, and sends updates to channels or closes them if the lease expires.
393	deadlineLoop manages keep-alive deadlines, closing expired leases and removing them from the map.
394	sendKeepAliveLoop sends keep-alive messages for expired leases using a loop.
395	NewKV initializes a new KV client with session options, starts monitoring session and leases, returns KV interface, close function, and wait session function.
396	rescind will delete a lease if its revision is less than the specified revision and retry until the context is canceled or the operation succeeds
397	LeaseValue returns a Compare object with the given key and LEASE target.
398	ValueBytes returns the byte representation of the compared value or nil if the target union does not contain a value.
399	cmp.WithRange sets the end range for comparison and returns the updated cmp object
400	WithPrefix sets RangeEnd to the prefix of Key and returns the modified Cmp object
401	mustInt64 converts an interface to int64, panicking if conversion fails
402	mustInt64orLeaseID converts input to int64, preferring LeaseID if possible
403	Next method processes gRPC watcher events, returning service updates or errors.
404	getJournalWriteSyncer creates a new JournalWriter and returns it wrapped with Sync functionality or an error if journal can't be found
405	newKV creates a new node with specified properties and returns it
406	newDir creates a new directory node with specified properties and returns it.
407	Read method returns node's value or an error if node is a directory
408	Write updates node's value and modified index if it's not a directory, otherwise returns an error.
409	List method returns child nodes and an error if the current node is not a directory
410	GetChild retrieves a child node by name and returns it or an error if the node is not a directory or the child does not exist.
411	Add method adds a child node to the current directory node, returns an error if the operation fails due to the current node not being a directory or the child node already existing.
412	Remove node or directory recursively, calling callback on deletion.
413	Compare checks if current node matches previous state and returns match type
414	Clone method creates a deep copy of a node and its children.
415	isConnectedToQuorumSince checks if more than half the members are connected to the quorum since a given time.
416	isConnectedSince checks if a connection to a remote peer was established before a specified time.
417	numConnectedSince counts the number of members connected to a transport since a given time.
418	longestConnected finds the member with the longest active connection time and returns its ID and a boolean indicating if it was found
419	isTornEntry checks if a file entry is torn based on sector boundaries and zero chunks
420	StartMockServersOnNetwork initializes mock servers based on the specified network type and returns them along with any errors encountered.
421	StartAt starts a mock server at a given index and returns an error if it fails.
422	StopAt stops a server at a given index in MockServers.
423	Stop will stop all servers and wait for them to finish.
424	NewCheckCommand initializes and returns a Cobra command for checking etcd cluster properties.
425	NewCheckPerfCommand creates a Cobra command to check etcd cluster performance with customizable options.
426	NewCheckDatascaleCommand creates a Cobra command to check data scale with options for workload, prefix, and auto-compaction/defragmentation.
427	NewGetCommand creates a Cobra command for getting keys or ranges with various options.
428	NewGetCommand defines a CLI command to retrieve key values with optional sorting and quorum requirements
429	PickPeerURL selects a random peer URL from the member's list or panics if none exist.
430	HandleMetricsHealth registers handlers for metrics and health endpoints on the given ServeMux.
431	NewRemoveCommand creates a CLI command to remove a key or directory with options.
432	rmCommandFunc deletes a key or directory recursively based on flags and returns the response or an error.
433	checkIntervals validates intervals in requests, collecting deletes, checking overlaps, and ensuring unique keys, returning a map of puts, an interval tree of deletes, and any errors.
434	ReportEventReceived decrements pending events gauge and increments total events counter by n
435	RegisterKVHandler registers a gRPC handler for KV operations using a given context, serve mux, and client connection.
436	RegisterWatchHandler registers a watch handler client to the gRPC server.
437	RegisterLeaseHandler registers a lease handler client with the given context, server multiplexer, and gRPC connection.
438	RegisterClusterHandler registers a gRPC handler for cluster management operations using the provided client connection.
439	RegisterMaintenanceHandler registers a maintenance handler using gRPC and returns an error if registration fails
440	RegisterAuthHandler registers an authentication handler with gRPC server.
441	startEtcd initializes etcd server, registers interrupt handler, waits for readiness or stop notification, returns stop notify channel, error channel, and initialization error.
442	identifyDataDirOrDie checks if a directory contains member or proxy files, logs errors if invalid files are found, and returns the appropriate dirType.
443	openLast reads WAL names from a directory, finds the last one, and locks it for reading and writing with private mode.
444	gotLeader acquires leader lock then waits for leader signal or resets channel
445	lostNotify returns a channel to receive notifications when a leader is lost.
446	newGRPCProxyCommand creates a Cobra command for grpc-proxy with a subcommand.
447	NewMemberCommand creates a new Cobra command for membership-related subcommands.
448	NewMemberAddCommand creates a Cobra command to add a member to a cluster.
449	NewMemberRemoveCommand creates a new Cobra command for removing a member from the cluster.
450	NewMemberUpdateCommand creates a Cobra command for updating a member in the cluster with optional peer URLs.
451	NewMemberListCommand creates a Cobra command to list cluster members.
452	memberAddCommandFunc handles adding a new member to a cluster, validating input, checking URLs, making API calls, and updating configurations accordingly.
453	memberRemoveCommandFunc handles removing a member by ID using a Cobra command, validating input, and displaying the result or error.
454	memberUpdateCommandFunc updates a member's info using provided ID and URLs, handling errors and displaying the result.
455	memberListCommandFunc handles member list command execution, cancels context on completion, displays response or exits with error
456	Open initializes a WAL instance and opens the directory file, returning an error if any step fails.
457	OpenForRead opens a WAL for reading using a logger, directory path, and snapshot, returning a WAL instance or an error.
458	Verify checks WAL files for consistency with a given snapshot, returning an error if any inconsistencies are found.
459	Close method locks the WAL, closes file pointers, syncs data, unlocks locks, and finally closes directory file.
460	notify checks if the event meets certain conditions and sends it to the eventChan or removes the watcher if the channel is full.
461	Remove method on watcher closes event channel and calls remove func if it exists
462	mkPathDepth constructs a hierarchical path based on nodePath and depth, prefixed with s.pfx.
463	mkV2Node converts KeyValue to NodeExtern, handling directories and values.
464	prevKeyFromPuts extracts the previous key-value pair from a transaction response where the key has a non-zero creation revision.
465	NewWeightedReport creates a weighted report using a base report and precision string.
466	NewURLsMapFromStringMap converts a string map to a URLsMap using a specified separator and returns an error if any URL is invalid.
467	URLsMap's String method returns a sorted list of key-value pairs as strings.
468	URLs method returns a sorted list of URLs from a map.
469	parse will convert a comma-separated list into a map where each key maps to a list of values
470	NewClientHandler initializes an HTTP handler with logging, basic auth, v2 handling, and request logging.
471	writeKeyEvent encodes and sends an event response with appropriate headers based on the event type and parameters.
472	writeKeyError logs errors and writes responses based on error type
473	getUint64 retrieves a uint64 value from URL query parameters and returns it along with any parsing errors.
474	getBool extracts a boolean value from URL query parameters and returns it along with any parsing errors.
475	waitDeletes waits for deletes by continuously checking keys in etcd until none are found or ctx is canceled
476	AddOutputPaths updates zap Config's OutputPaths and ErrorOutputPaths with new paths while discarding duplicates and sorting them.
477	NewConfig initializes a Config struct with default values and sets initial cluster details.
478	PeerURLsMapAndToken returns URLsMap and token based on configuration or discovery, handling errors and logging accordingly.
479	GetDNSClusterNames fetches DNS cluster names using HTTPS and HTTP protocols, combining results and logging details.
480	checkBindURLs verifies URLs for valid schemes and IP addresses, skipping localhost and unix sockets
481	GetCluster resolves service URLs using DNS SRV records and constructs a list of node connections with matching schemes.
482	GetClient retrieves service URLs using DNS SRV records and returns them as SRVClients.
483	GetSRVService constructs SRV service name based on input parameters and scheme
484	ReadDir reads directory contents, filters by extension if specified, and returns sorted filenames.
485	compact will perform a compaction on the client with a specified revision and handle errors accordingly
486	defrag will defragment a cluster endpoint and handle errors
487	NewUserCommand creates a Cobra command for user-related subcommands.
488	userAddCommandFunc handles adding a new user with optional password input
489	userGetCommandFunc processes user commands, validates arguments, fetches user details, and displays roles or user info based on flags.
490	userChangePasswordCommandFunc handles user password change using Cobra command, reads password interactively or from input, changes password, and displays response or error accordingly.
491	addEvent inserts an event into the history queue updates indices returns the added event
492	scan retrieves an Event based on key, recursively checking subkeys and handling deletions/expirations.
493	clone creates a deep copy of EventHistory, including its queue and events.
494	openSnapshotBackend renames a snapshot file and opens a backend, returning an error if any step fails
495	openBackend opens a backend database and logs the duration it took to open, handling timeouts and logging accordingly
496	recoverSnapshotBackend updates or returns the existing backend based on the snapshot metadata.
497	NewUpdateCommand creates a CLI command to update an existing key with a given value and optional TTL.
498	updateCommandFunc updates a key's value and TTL using CLI arguments, handling errors and printing the response.
499	frontAndBack returns the first and last items of the stats queue or nil if empty
500	Insert adds a RequestStats to the statsQueue, handling overflow by removing the oldest entry.
501	Rate calculates the processing and bandwidth rates based on the queue's statistics.
502	Clear resets statsQueue's back, front, size, and totalReqSize fields while locking rwl.
503	UniqueStrings generates a slice of unique random strings.
504	RandomStrings generates n random strings each of length slen
505	IsKeyNotFound checks if the given error is a key not found error
506	IsRoleNotFound checks if an error is due to a missing role.
507	IsUserNotFound checks if an auth error indicates a user was not found.
508	JoinCluster initializes discovery and joins cluster with given configuration.
509	GetCluster retrieves cluster info using discovery service with logger and URLs, returning cluster details or error.
510	newProxyFunc creates a proxy function using the given logger and proxy string, handling errors and logging appropriately
511	isSafeRetry determines if a retry is safe based on the error and retry policy
512	withRetryPolicy sets the retry policy for options
513	withAuthRetry sets whether to retry authentication and returns an option
514	withMax sets the maximum number of retries for an operation and returns a retry option.
515	withBackoff sets a backoff function for retry options
516	RecvAppendReq updates server state, records request stats, and increments counter.
517	SendAppendReq updates leader status, records request stats, increments send count.
518	merge combines two bucketBuffers, sorts them, and removes duplicates based on keys.
519	deleteRevKey checks if a key has a specific revision and deletes it if so, returning success or an error
520	isMemberBootstrapped checks if a cluster member is bootstrapped by verifying its client URLs
521	GetClusterFromRemotePeers fetches cluster info from remote peers using logger, URLs, timeout, TLS, and RT.
522	getClusterFromRemotePeers fetches cluster info from remote peers and returns a RaftCluster or an error.
523	getRemotePeerURLs returns sorted URLs of remote peers in a Raft cluster
524	getVersions retrieves versions from cluster members and logs errors
525	decideClusterVersion determines the highest or lowest cluster version based on member versions, logging warnings if necessary.
526	getVersion fetches and parses version info from peers, logging errors if any step fails.
527	NewTimeoutDetector creates a new timeout detector with a maximum duration and initializes a records map.
528	Reset TimeoutDetector's records map while holding its mutex lock
529	Observe checks if a duration exceeds a max limit and updates records.
530	NewPeerHandler creates a handler for peer interactions using logger, server cluster, raft handler, and lease handler.
531	put updates the key index with a new revision, logging an error if the revision is older.
532	tombstone updates keyIndex or logs error if empty
533	get retrieves revisions from keyIndex, handling errors and logging panics for invalid states.
534	`since` returns revisions newer than a given version, logging a panic if `keyIndex` is empty.
535	keep method updates keyIndex by compacting generations and removing tombstones if necessary
536	findGeneration searches for a generation based on revision number and returns it if found.
537	cancelWatcher will remove a watcher from unsynced or synced maps, decrement slowWatcherGauge if applicable, and clean up resources
538	syncWatchersLoop continuously syncs watchers, waits, or stops based on conditions.
539	syncVictimsLoop manages victims syncing in a loop until stopped.
540	moveVictims processes watchers, sends responses, and manages victims list, returning the number moved.
541	kvsToEvents converts key-value pairs to events, filtering based on watcher group and handling tombstones.
542	notify updates watchers about events, moving slow ones to victims if necessary.
543	isOpFuncCalled checks if any function option contains the specified operation name
544	UnsafePut calls unsafePut without transaction isolation.
545	UnsafeSeqPut calls unsafePut on batchTx with additional parameter.
546	UnsafeRange fetches a range of keys from a bucket and returns them along with their values, logging an error if the bucket is not found.
547	UnsafeDelete removes a key from a bucket and logs errors if the bucket or key cannot be found or deleted.
548	unsafeForEach on batchTx iterates over a bucket calling a visitor function for each key-value pair, returning any errors encountered
549	Commit locks batchTx, calls commit method, then unlocks it.
550	CommitAndStop locks batchTx, commits it, then unlocks.
551	Renew updates lease ttl and returns new ttl or error if lease not found or expired
552	Attach adds items to a lease and updates mappings.
553	revokeExpiredLeases checks for expired leases, revokes them if primary, and sends to channel or retries later
554	checkpointScheduledLeases manages scheduled leases by acquiring a lock, checking if primary, finding due checkpoints, sending them, and exiting if batch size is reached or no more checkpoints are found.
555	expireExists checks if the earliest lease has expired, returning it and whether it was removed from the heap.
556	findExpiredLeases returns expired leases up to a specified limit
557	refresh updates lease expiry by extending duration and remaining TTL
558	forever method locks expiryMu, sets expiry to forever, then unlocks.
559	Lease.Keys returns a slice of item keys while holding a read lock
560	Remaining calculates the duration until lease expiry or returns max int64 if not set.
561	NewCompactionCommand creates a Cobra command for compacting etcd's event history, allowing physical removal of old revisions if specified.
562	compactionCommandFunc processes a compaction command, validates arguments, parses revision number, applies options, executes compaction, and handles errors.
563	NewPutCommand creates a Cobra command for putting a key-value pair into a store with options for lease, previous KV, ignoring value, and ignoring lease.
564	putCommandFunc processes a command to put a key-value pair, handles errors, and displays the response.
565	NewHandler creates an HTTP handler using reverse proxy with TLS configuration, custom transport, and proxy URL retrieval logic.
566	NewReadonlyHandler wraps an HTTP handler to make it readonly.
567	NewSetCommand defines a CLI command to set key-value pairs with optional flags.
568	setCommandFunc sets a key-value pair in etcd with options and handles errors
569	waitOnLastRev checks if a key is being blocked and waits for its release or returns an error if the key does not exist.
570	GetDefaultInterfaces returns an empty map and an error indicating default host support is not available for the current OS and architecture.
571	NewSnapshotCommand initializes a new Cobra command for managing etcd snapshots with subcommands for saving, restoring, and checking snapshot status.
572	NewMoveLeaderCommand creates a command to transfer leadership to another etcd member.
573	transferLeadershipCommandFunc processes move-leader command to transfer leadership to a specified target node.
574	OpenDir opens a directory at the specified path and returns a file descriptor or an error if it fails.
575	NewRemoveDirCommand creates a CLI command to remove directories or key-value pairs.
576	rmdirCommandFunc deletes a directory and handles errors and responses accordingly
577	NewDelCommand creates a new command for deleting keys or ranges of keys with optional flags.
578	delCommandFunc processes deletion command, validates arguments, deletes resource, and handles errors.
579	NewExpect initializes an ExpectProcess with the given name and optional arguments, using the current system environment if none provided.
580	NewExpectWithEnv creates a new ExpectProcess instance with specified command, arguments, and environment, starts it using pseudo-terminal, and returns the process along with any errors encountered.
581	ExpectFunc waits for a line matching a condition and returns it or an error if no match occurs.
582	ep.Expect will call ep.ExpectFunc to check if the input text contains the expected string s and return it along with any errors
583	LineCount returns the current count after locking the ExpectProcess instance.
584	Signal sends a signal to the process managed by ExpectProcess.
585	keyFunc converts RangeRequest to a string using Marshal.
586	Add adds a range request and response to the cache if the revision is greater than the compacted revision, or if the revision is zero. It also updates the cached ranges with the new key and value.
587	Get retrieves cached data or returns an error if not found or compacted.
588	Invalidate cache entries within a specified key range.
589	Compact updates cache's compactedRev to the max of current and input revision.
590	NewUniqueURLsWithExceptions creates a new instance of UniqueURLs with allowed exceptions and sets the input string, panicking on failure.
591	UniqueURLsFromFlag retrieves URLs from a flag set and returns them as a slice.
592	UniqueURLsMapFromFlag retrieves a map of unique URLs from a flag set.
593	Hold will attempt to create a key and return an error if it fails
594	Release deletes a barrier key from the client and returns any error encountered
595	Wait checks barrier key existence and waits for changes.
596	NewLockRacerCommand creates a Cobra command for performing lock race operations with options for total client connections.
597	ElectionTimeout returns the election timeout duration in milliseconds.
598	DialEtcdGRPCServer connects to an etcd gRPC server using custom options and TLS if configured.
599	CreateEtcdClientConfig generates an etcd client config with optional gRPC dial options, handling both HTTP and HTTPS URLs.
600	CreateEtcdClient initializes and returns an etcd client with given options or config creation error.
601	CheckCompact verifies etcd compaction by watching a key with a specified revision and returns an error if the expected revision does not match.
602	Defrag will attempt to defragment etcd client endpoint and return an error if it fails
603	RevHash connects to an etcd server, sends a hash request, and returns the revision and hash values or an error.
604	Rev retrieves the etcd client's revision number and handles errors.
605	Compact method uses etcd client to perform compaction operation with specified revision and timeout, handling errors appropriately.
606	IsLeader checks if the member's Etcd client endpoint is the leader and returns an error if the client creation fails.
607	WriteHealthKey attempts to write a health key to etcd with a timeout, returning an error if unsuccessful.
608	SaveSnapshot removes old snapshots, creates new ones, logs progress, and updates member info.
609	RestoreSnapshot removes old data directories, logs start message, restores snapshot, logs end message with details, and returns any errors.
610	NewWatcher wraps a Watcher with a prefix and returns it.
611	NewRawNode initializes a Raft node with given configuration and peers, handling both new and restored nodes.
612	Campaign method steps raft node with a heartbeat message
613	Propose sends a proposal message to the raft instance with the given data.
614	ProposeConfChange marshals a configuration change and steps it through Raft with a proposal message.
615	ApplyConfChange updates Raft configuration based on ConfChange type and returns updated ConfState.
616	RawNode's Step method processes a message, ignoring local ones and forwarding non-response messages to raft, handling errors accordingly.
617	`Ready` updates `Raft` state and returns new `Ready` status.
618	WithProgress iterates over raft peers and learners, applying a visitor function to each progress.
619	ReportUnreachable sends an unreachable message to a node with the given ID.
620	ReportSnapshot updates raft state based on snapshot status
621	TransferLeader sends a transfer leader message to the specified transferee.
622	ReadIndex sends a read index request to the raft node.
623	printcURL will log the cURL command for an HTTP request and reset the request body.
624	StartNode initializes a Raft node with given configuration and peers, appending initial configuration entries and adding peers to the node.
625	RestartNode initializes a new node with given configuration and starts it using Raft.
626	Tick method sends a signal to node's tick channel or logs a warning if it blocks.
627	MustSync checks if hard state or entries have changed.
628	NewGRPC17Health initializes a new gRPC health checker with endpoints, timeout, and dial function, setting up channels and goroutines for monitoring and updating health status.
629	NeedUpdate checks if GRPC17Health needs address update based on connection status.
630	dflSignal resets signal action to default behavior
631	New creates a store with the given namespaces and sets the real clock.
632	Index returns the current index after acquiring a read lock on the store
633	Get retrieves data from a store, handling errors and stats accordingly.
634	store.Create handles node creation, locks world, reports success/failure, updates stats, notifies watchers, and returns event or error.
635	Set updates a node's value or creates it if it doesn't exist, handling expiration and notifying watchers accordingly.
636	getCompareFailCause returns a failure cause based on node comparison.
637	Delete will remove a node or directory at the given path and return an event and an error if any.
638	walk traverses a tree using a given path and function, returning the final node and any errors encountered.
639	internalGet retrieves a node from the store using a given path and returns it or an error if not found.
640	DeleteExpiredKeys removes keys from store that have expired before cutoff time and notifies watchers.
641	checkDir verifies a directory's existence and returns it or creates a new one with an error if not found.
642	Save method serializes store instance to JSON and returns byte array or error.
643	Recovery method locks store, unmarshals state, initializes ttlKeyHeap, and cleans root before returning error.
644	Next increments generator's suffix and returns a unique ID combining prefix and suffix.
645	NewMakeMirrorCommand creates a Cobra command for making a mirror of an etcd cluster with various options.
646	NewZapCoreLoggerBuilder initializes a logger builder with given parameters and updates the configuration accordingly.
647	NewSyncer creates a new syncer instance with the given client, prefix, and revision.
648	DropPort will execute iptables commands to drop incoming and outgoing TCP traffic on a specified port, returning an error if either command fails
649	SetLatency configures network latency for default interfaces, applying or updating tc qdisc rules based on input values.
650	RemoveLatency deletes network latency settings on default interfaces and returns an error if any command fails
651	NewTxnCommand creates a Cobra command for processing transactions with optional interactive mode.
652	txnCommandFunc handles transaction commands, reads user input, constructs a transaction, commits it, and displays the response or error.
653	New creates a Compactor based on the specified mode and returns it along with any errors.
654	printResponseKey formats and prints response key based on specified format
655	RegisterLockHandler registers a lock handler client to the gRPC server.
656	grpcHandlerFunc returns an HTTP handler that serves gRPC requests or forwards non-gRPC requests to another handler
657	addCORSHeader adds necessary headers to HTTP response for CORS.
658	fallback will generate a list of Get operations based on the input operations, excluding any Get operations and adjusting key ranges accordingly
659	IDFromString converts a hex string to an ID and returns an error if parsing fails
660	release will close a file descriptor and remove a PID file if not readonly, returning any errors encountered
661	EncodedSize calculates the total encoded size of a ValueStruct including metadata, user metadata, and variable integer representation of ExpiresAt if it's non-zero.
662	Decode will update ValueStruct fields from byte slice.
663	NewMergeIterator creates a new MergeIterator object from a slice of Iterators and a boolean indicating whether to reverse the order.
664	initHeap initializes a heap with valid iterators, stores the first key, and removes invalid entries.
665	Valid checks if MergeIterator has valid elements
666	Key returns the current key from the first iterator or nil if empty
667	`Value returns the current value from the iterator or an empty struct if the iterator is exhausted.`
668	Next advances to the next item in the merge iterator, updating internal state accordingly.
669	MergeIterator's Seek method iterates through all iterators and seeks to the given key before initializing the heap.
670	Close method on MergeIterator closes all iterators and returns first error encountered or nil.
671	Encode converts valuePointer to byte slice using big-endian encoding.
672	Decode extracts metadata from buffer and populates header fields
673	encodeEntry encodes an Entry to a buffer, including its key, value, and CRC32 checksum, returning the total bytes written and an error if encoding fails
674	SetEntry updates an entry in a write batch, committing if necessary and handling errors.
675	Set method adds a key-value pair to WriteBatch with metadata.
676	SetWithTTL sets a key-value pair with expiration duration in WriteBatch and returns an error if setting fails
677	Delete key from WriteBatch, commit transaction, handle errors
678	commit method commits a write batch transaction, handles errors, and initializes a new transaction for subsequent operations.
679	Flush will commit and discard the transaction, wait for the write group, and return any errors encountered during the process.
680	WriteBatch's Error method returns its internal error after locking and unlocking.
681	getMemTables returns memtables and a cleanup function to decrement references
682	writeRequests processes requests to write to the value log and memtable, handling errors and updating head pointers.
683	ensureRoomForWrite checks if there's space in the database, flushes data if necessary, and manages memory tables accordingly.
684	writeLevel0Table writes data from an iterator to a file after filtering based on a prefix, returning an error if any operation fails.
685	handleFlushTask processes a flush task, storing data, updating timestamps, and managing file operations.
686	flushMemtable processes flush tasks, handles errors, updates immutable memtables, and retries on failures.
687	calculateSize computes and sets LSM and Vlog sizes for directories.
688	DB.Size returns LSM and Vlog sizes or zero if not set.
689	Next increments sequence value and returns it, updating lease if necessary.
690	Release locks updates sequence key with next value sets leased to next returns error
691	KeySplits returns sorted list of table keys starting with given prefix.
692	Flatten method runs compactions on database levels concurrently until consolidation is achieved.
693	Mmap maps a file to memory, returning a byte slice and an error if it fails.
694	Madvise adjusts memory advice for a byte slice based on readahead preference.
695	setDiscardTs updates discardTs with new timestamp while ensuring thread safety
696	hasConflict checks for conflicts based on reads and commits in a transaction.
697	Set method updates transaction entry with given key and value returning error on failure
698	SetWithMeta sets a key-value pair with metadata in a transaction and returns an error if unsuccessful
699	Delete method on Txn object removes entry with specified key and returns error if modification fails
700	`Get retrieves a key's value from a transaction, updating the cache if necessary and handling expiration.`
701	CommitWith commits a transaction with a callback, running it asynchronously to avoid lock contention.
702	View executes a transactional function within a database context, handling transactions automatically if enabled.
703	Update will execute a transactional function on the database and commit it, or roll back if an error occurs.
704	Seek adjusts blockIterator's position based on key and whence, setting error to EOF if key not found.
705	SeekToLast will move the iterator to the last valid element before moving back one position.
706	parseKV parses key-value pairs from data using a block iterator, updating position and handling errors.
707	NewIterator creates a new iterator for a table, optionally reversing it.
708	seekFrom adjusts iterator based on key and whence, using binary search and helper functions.
709	seekForPrev adjusts iterator position to find previous key before specified key.
710	Value retrieves decoded value from iterator's current position.
711	Seek will move the iterator to the position of the given key or the closest previous key based on the iteration direction.
712	NewConcatIterator creates a new ConcatIterator from a list of tables and a reversal flag.
713	Valid checks if the current item in ConcatIterator is valid.
714	Next advances the iterator or moves to the next non-empty table in reverse order if necessary.
715	Close will close all iterators in ConcatIterator and return an error if any fail
716	OpenExistingFile opens a file with specified filename, flags, and returns a file descriptor and an error if any.
717	Copy creates a new byte slice with the same contents as the input slice.
718	KeyWithTs prepends a timestamp to a byte slice, returning the new slice.
719	ParseTs calculates a timestamp from the last 8 bytes of a key, returning max uint64 minus those bytes.
720	ParseKey removes last 8 bytes from non-nil keys
721	SameKey checks if two byte slices have equal parsed keys.
722	FixedDuration converts duration to a formatted string
723	NewCloser creates a Closer object with a closed channel and waiting group initialized to the given initial value.
724	NewThrottle initializes a Throttle object with channels for limiting concurrent operations and handling errors.
725	Do method attempts to send a signal through channel or returns any error received.
726	Done method sends errors to channel, checks throttle state, and decrements wait group.
727	Finish waits for all tasks to complete, closes channels, and returns any errors encountered.
728	SetDiscardTs updates discard timestamp if not using managed transactions
729	openReadOnly opens logFile for readonly access and maps its contents, handling errors appropriately.
730	iterate reads log entries from a file, processes each using a callback, and returns the last valid offset or an error.
731	sortedFids returns a sorted list of file IDs excluding those marked for deletion
732	write will process requests, encode entries, and flush them to disk when conditions met, updating offsets and managing log files
733	populateDiscardStats populates discard statistics from database or initializes empty if not found
734	DB.Backup creates a new stream, sets a log prefix, and returns the result of backing up to the writer with a given since timestamp.
735	ToList converts iterator to KVList, filtering by key and versions.
736	produceRanges distributes key ranges across a stream channel based on database splits and ensures proper closure.
737	produceKVs processes key-value ranges from a stream, filtering and converting them to a list, then sending batches over a channel or returning errors.
738	Orchestrate manages data flow through channels, generating and streaming KVLists while handling errors asynchronously.
739	NewStream creates a new stream from DB, panicking if managed transactions are enabled.
740	NewStreamAt creates a new stream at a specific read timestamp if using managed transactions.
741	DecrRef decrements the reference count of a table and deletes it if the count reaches zero, handling memory mapping and file operations.
742	ParseFileID extracts a numeric ID from a filename, returning it as a uint64 and a boolean indicating success.
743	Prints histograms of key and value sizes for a given prefix in the database.
744	newSizeHistogram creates a new sizeHistogram instance with initialized bins and counters.
745	buildHistogram creates a histogram of key and value sizes for keys matching a prefix.
746	printHistogram prints a formatted histogram of the data including total count, min, max, mean, and individual bin counts.
747	Init initializes WaterMark with a channel, event logger, and starts processing.
748	Begin updates watermark's last index and sends a mark to channel.
749	BeginMany sets the lastIndex to the last index in indices and sends a mark message to markCh.
750	Done sends a mark to the channel indicating completion at the specified index.
751	DoneMany sends a completion signal to WaterMark with specified indices.
752	SetDoneUntil updates the watermark's doneUntil field atomically.
753	WaitForMark waits for a watermark to reach a specified index or returns an error if the context is canceled
754	Encode method converts header fields to big-endian byte representation
755	Decode reads header fields from buffer and returns size
756	NewTableBuilder creates a Builder instance with initialized buffers and a max uint32 prevOffset.
757	keyDiff returns the difference between two keys starting from the first differing byte.
758	Add appends a key-value pair to the builder, restarting blocks if necessary.
759	blockIndex calculates the byte representation of block offsets and restart counts.
760	Finish method constructs and returns a byte slice containing a bloom filter and index data.
761	Options's Errorf logs an error message using the provided format and arguments if a logger is set.
762	Infof logs a message using the options logger if it's set.
763	DecrRef decrements the reference count of a Skiplist, resetting its arena and setting it to nil if the count reaches zero.
764	NewSkiplist creates a new skip list with a specified arena size.
765	Put inserts a key-value pair into the SkipList, overwriting existing values and adjusting heights as necessary.
766	Get retrieves a value from the skiplist based on the key, returning the value and version or an empty ValueStruct if the key is not found.
767	Key method returns byte slice for key at current iterator position
768	Iterator's Value method retrieves a value from its list arena using offset and size obtained from getValueOffset.
769	Next advances the iterator to the next item, ensuring validity first.
770	Prev method moves iterator to previous item if valid
771	Seek method updates iterator's position to the nearest element greater than or equal to target.
772	SeekForPrev will update iterator's position to point at the element less than or equal to the target in the list.
773	NewUniIterator creates a new iterator for a skiplist in a specified direction.
774	Next advances the iterator in the appropriate direction based on whether it's reversed.
775	Seek will move iterator to position based on reversed flag
776	asChanges converts Manifest to a list of ManifestChange protobuf messages
777	rewrite method closes file, rewrites manifest, updates creations, sets deletions to zero, returns error
778	validate checks if tables are sorted correctly at each level and returns an error if not
779	acquireDirectoryLock will attempt to create a temporary lock file for a directory, returning an error if Windows is not supported or if another process is already using the lock.
780	release sets path to empty and closes handle returning any errors
781	AssertTruef checks if condition is true, logs error with formatted message if false.
782	Wrapf wraps an error with a formatted message, optionally adding debug information.
783	initTables initializes table handlers, sorts them based on fileID or keys, and calculates total size.
784	deleteTables removes specified tables from handler and updates size, returning error if ref counting fails
785	tryAddLevel0Table adds a table to the level handler if it doesn't exceed the limit, increments its reference count, and updates the total size.
786	getTableForKey retrieves tables based on a key, handling both levels and returning a reference count management function.
787	get retrieves the maximum versioned value for a given key from multiple tables, returning the value and a decrementer function.
788	overlappingTables returns the indices of tables overlapping a given key range, or 0 if either range is empty
789	String method returns formatted string representation of Item object
790	KeyCopy copies the key to dst and returns it
791	ValueSize calculates the size of item's value considering pointer metadata and key length.
792	NewKeyIterator sets prefix to key and returns iterator.
793	Valid checks if iterator's item key has the specified prefix.
794	ValidForPrefix checks if iterator's key has the given prefix and is valid.
795	Close method ensures safe closure of resources, waits for ongoing operations, and decrements iterator count.
796	parseItem advances iterator to next valid item, setting it if conditions met; returns true if successful
797	Seek method updates iterator to specified key or prefix, handles timestamping and prefetching accordingly.
798	`GetMergeOperator initializes a new MergeOperator instance and starts compaction goroutine.`
799	Get will return merged data from database or error if no merge needed.
800	compareAndAdd updates compactStatus if ranges overlap and returns true if successful
801	newArena creates an Arena struct with a buffer of size n and reserves position 0.
802	putNode calculates and returns an aligned offset within an arena buffer based on the current node count and specified height.
803	getNode retrieves a node from the arena using an offset and returns it. If the offset is zero, it returns nil.
804	getKey retrieves a byte slice from the buffer at a specified offset and size.
805	getVal decodes a ValueStruct from a buffer at a specified offset and size
806	getNodeOffset calculates the offset of a node within an arena's buffer.
807	init initializes various metrics using expvar for monitoring disk I/O operations and other statistics.
808	revertToManifest checks and cleans up files based on the manifest and ID map, returning an error if any issues arise.
809	dropTree deletes tables and updates manifest, returning the number of deleted tables or an error
810	dropPrefix removes a specified prefix from keys in tables at specific levels, triggering compactions if necessary.
811	isLevel0Compactable checks if the first level has enough tables to compact based on the configuration.
812	doCompact handles compaction priority, ensuring levels' tables remain unchanged during table selection, running compaction definition, and logging results.
813	get retrieves a value from levelsController using a key and updates maxVs if necessary, returning the found value or an error
814	seekTotal calculates the total balance of accounts in a transaction, logs errors, and returns an error if balances don't match.
815	findFirstInvalidTxn identifies the first invalid transaction timestamp using binary search on timestamps.
816	Create will return a new snapshot sink and error if the version is unsupported
817	List returns snapshot metadata or an empty list if no snapshots exist
818	Open will return SnapshotMeta and ReadCloser for given ID or error if ID doesn't match.
819	Write method copies data to snapshot sink and updates metadata size
820	NewFileSnapshotStoreWithLogger initializes a new FileSnapshotStore with a base directory, retention count, and logger, returning an error if any step fails.
821	NewFileSnapshotStore initializes a new file snapshot store with optional logging.
822	snapshotName generates a timestamped name using term, index, and current milliseconds.
823	Create will initialize a new snapshot store and return an error if the version is unsupported or if any step fails during creation.
824	List retrieves up to retain number of latest SnapshotMetas from store.
825	getSnapshots retrieves file snapshots, filters out ineligible ones, reads their metadata, checks compatibility, sorts them, and returns up to the retain count.
826	readMeta opens a meta file, buffers its contents, reads JSON data into a fileSnapshotMeta struct, and returns it along with any errors encountered.
827	Open will open a file snapshot and verify its integrity using CRC64 hash.
828	ReapSnapshots will remove old snapshots and log errors if any occur
829	Write method forwards data to buffered writer and returns bytes written or error
830	Close will close the snapshot sink, finalize it, write metadata, move the directory, skip fsync on Windows, and reap old snapshots, returning any errors encountered.
831	Cancel method on FileSnapshotSink closes resources and removes artifacts safely.
832	finalize will flush, sync, and close the state file, setting its size and CRC before returning any errors encountered
833	writeMeta writes the FileSnapshotSink's metadata to a JSON file, handling errors during file operations and encoding.
834	NewNetworkTransportWithConfig creates a new network transport instance using the provided configuration, initializing logger and connection pool.
835	setupStreamContext initializes a new stream context for the network transport.
836	getStreamContext retrieves the stream context safely using a read lock.
837	SetHeartbeatHandler assigns a callback function to handle heartbeats for network transport.
838	CloseStreams releases all connections and cancels ongoing streams safely.
839	Close method shuts down the network transport safely by closing channels and setting shutdown flag.
840	getPooledConn retrieves a connection from the pool or returns nil if none available
841	getConnFromAddressProvider retrieves a connection from the address provider or fallback for a given server ID and address.
842	getConn retrieves or creates a network connection to a server address, wrapping it with buffered I/O and codecs.
843	returnConn will add a connection to the pool if it's not full or release it otherwise
844	listen method manages network connections, implementing exponential backoff on errors until shutdown or successful connection handling.
845	handleConn manages network connections, reads commands, processes them, and sends responses, logging errors as needed.
846	handleCommand processes RPC commands from reader, decodes them, checks for heartbeats, dispatches to handler, waits for response, and sends it back.
847	decodeResponse decodes an RPC response from a connection and returns an error if present
848	sendRPC sends an RPC request over a connection and encodes the arguments, returning any errors encountered during the process
849	newNetPipeline initializes a network pipeline with transport and connection, starts response decoding, and returns the pipeline instance
850	decodeResponses processes responses from a network pipeline with a timeout, handling each response or shutdown signal accordingly.
851	AppendEntries appends entries to a remote server and returns a future or error.
852	Close method shuts down the netPipeline, releasing the connection and setting shutdown flag.
853	NewObserver creates an Observer with specified parameters and returns it.
854	RegisterObserver adds an observer to the Raft instance's list.
855	DeregisterObserver removes an observer from Raft's list.
856	observe will notify registered observers about changes, handling blocking vs non-blocking scenarios and filtering observations.
857	NewInmemStore initializes a new instance of InmemStore with empty maps for logs, kv, and kvInt.
858	FirstIndex returns the lowest index in the store with a read lock.
859	LastIndex returns the highest index in the store with a read lock.
860	GetLog retrieves a log entry by index and returns it or an error if not found.
861	StoreLog calls StoreLogs with a single log entry.
862	StoreLogs will store multiple logs in InmemStore and update lowIndex and highIndex accordingly.
863	DeleteRange removes entries within a specified key range from InmemStore and adjusts lowIndex and highIndex accordingly.
864	Set method updates key-value pair in InmemStore and returns error if any.
865	Get retrieves a value from the store by key, locking during access and returning the value or an error if not found.
866	SetUint64 updates an integer value in a store using a key, locking access during operation.
867	GetUint64 retrieves a uint64 value from an in-memory store using a key and returns it along with any potential errors.
868	NewLogCache creates a new log cache with the given capacity and log store, returning an error if the capacity is non-positive
869	Connect adds a peer to the InmemTransport's peers map.
870	Disconnect removes a peer from InmemTransport and closes its associated pipelines.
871	DisconnectAll will clear all peers and close associated pipelines
872	Respond sends a response over the RPC channel with the given data and error.
873	Open will return a SnapshotMeta, ReadCloser, and an error if no snapshot is available or the opener is invalid.
874	vote updates votes and notifies when quorum is reached or on non-leader notify
875	notifyAll locks, clears, and submits votes for futures.
876	cleanNotify removes a verifyFuture from the notify map while holding the notifyLock
877	LastContact returns the last contact time with a read lock on the follower's replication status.
878	setLastContact updates the last contact time for a follower replication instance
879	replicate handles Raft log replication to followers, using heartbeats and pipelines for efficient communication.
880	pipelineReplicate manages log replication to peers using pipelines, handling errors, and coordinating with shutdown signals.
881	pipelineSend sends append entries to a follower and updates nextIdx on success
882	pipelineDecode processes follower requests, updates replication state, handles stale terms, and aborts on failure or stop signal.
883	setupAppendEntries configures AppendEntriesRequest with Raft state and logs, handling errors during previous log and new logs setting.
884	setPreviousLog updates AppendEntriesRequest with the correct PrevLogEntry and Term based on nextIndex and logs.
885	setNewLogs appends logs from nextIndex to lastIndex to req.Entries and returns an error if it fails to retrieve any log
886	appendStats measures and increments RPC stats for peer's log replication.
887	handleStaleTerm logs an error when a peer has a newer term, stops replication, and notifies followers to step down asynchronously.
888	AppendEntries appends entries to a remote server and sends an RPC response.
889	sendRPC sends an RPC request to a server and returns an error if it fails
890	InstallSnapshot logs a message and returns an error.
891	EncodePeer converts peer address to byte slice
892	DecodePeer converts byte slice to ServerAddress
893	AppendEntries method appends entries to pipeline and returns future and error
894	ReadPeersJSON reads a JSON file, parses it, and maps it to a Configuration object, validating the result.
895	ReadConfigJSON reads a JSON config file, parses it, maps it to a struct, validates, and returns the configuration or an error.
896	NewTCPTransport initializes a TCP transport with given parameters and returns a NetworkTransport instance or an error.
897	NewTCPTransportWithLogger creates a TCP transport with logging and returns it along with any errors encountered during creation.
898	NewTCPTransportWithConfig creates a TCP transport with custom configuration.
899	Dial connects to a TCP server at the specified address and timeout, returning a network connection or an error.
900	Accept on TCPStreamLayer returns a network connection and an error
901	Addr returns the advertised address or the listener's address if none is advertised.
902	restoreSnapshot attempts to load the most recent snapshot and restores the Raft state, updating configurations and indices on success.
903	BootstrapCluster initializes a new Raft cluster and returns a future indicating success or failure.
904	Leader returns the current server address of the Raft leader.
905	Apply processes a command with a timeout and returns a future result.
906	Barrier will execute a Raft command and return when committed or timed out.
907	VerifyLeader increments a metric, creates a future, and sends it to a channel or returns an error if raft is shutting down.
908	AddVoter adds a voter to the Raft cluster and returns a future indicating success or failure based on the protocol version and configuration change request.
909	RemoveServer will send a configuration change request to remove a server and return a future result or an error if the protocol version is unsupported.
910	`Shutdown` method stops Raft node gracefully, setting state and returning future.
911	Snapshot will return a snapshot future or respond with an error if Raft is shutting down
912	Restore will apply a snapshot and ensure followers replicate it before returning an error if timed out or raft shutdown occurs.
913	Raft's String method returns a formatted string representation of the node's address and state.
914	LastContact returns the last contact time with a read lock.
915	LoggerAdapter's Logf method logs a formatted string using its internal logger.
916	containsNode checks if a node exists in a list of nodes
917	LeaderPlus returns up to `n` raft nodes, starting with the leader.
918	WaitTilUptoDate waits for all nodes in the cluster to reach or exceed a specified Raft index within a maximum wait duration, logging progress and failing if the timeout is exceeded.
919	assertLogEntryEqual checks if two raft log entries are equal and logs errors if they differ.
920	runFSM handles state machine transitions based on commit, restore, or shutdown requests.
921	Clone method creates a copy of the Configuration struct, including its Servers field.
922	Clone creates a copy of the configurations object with its committed and latest fields cloned.
923	hasVote checks if a server with given ID has voting rights based on configuration
924	checkConfiguration verifies server IDs and addresses in a config, ensuring uniqueness and at least one voter.
925	nextConfiguration updates a cluster's configuration based on change requests and returns the updated configuration or an error if invalid.
926	encodePeers will encode peer information from a configuration using a transport layer, returning the encoded bytes or panicking on failure.
927	decodePeers will deserialize a byte buffer into a configuration of server peers using a transport layer.
928	encodeConfiguration encodes a configuration object to MsgPack format and returns the encoded byte slice or panics on failure
929	decodeConfiguration parses MsgPack data into a Configuration struct or panics on failure
930	goFunc runs a function concurrently while managing goroutine lifecycle
931	getLastIndex returns the maximum of lastLogIndex and lastSnapshotIndex while holding lastLock
932	getLastEntry returns the last log or snapshot index and term, locking to ensure thread safety
933	checkRPCHeader verifies RPC headers and returns an error if unsupported.
934	setLeader updates Raft's leader address, notifies observers if changed
935	requestConfigChange sends a config change request to raft with a timeout, returning a future or an error if timed out or raft is shutting down
936	run manages Raft state transitions and handles shutdowns
937	runFollower handles RPCs, config changes, and applies entries while transitioning to candidate on heartbeat failure or shutdown.
938	liveBootstrap initializes a Raft cluster with a new configuration and processes the initial log entries.
939	runCandidate handles candidate state logic, processes RPCs, votes, and transitions based on results.
940	runLeader manages a Raft node's transition to and maintenance of a leader state, handling replication, notifications, and cleanup upon stepping down.
941	startStopReplication starts/stops replication for peers based on current configuration.
942	configurationChangeChIfStable returns a channel for configuration changes if the latest config is committed and a noop entry is committed
943	verifyLeader checks if the current server is the leader and triggers heartbeats to other servers
944	checkLeaderLease determines the maximum lease duration by checking followers and logs warnings if unable to contact a quorum, returning the longest lease duration.
945	restoreUserSnapshot restores a snapshot, handles errors, updates indexes, and logs progress.
946	appendConfigurationEntry updates Raft configuration based on future request and handles compatibility for different protocol versions
947	dispatchLogs processes logs for replication, updating state and notifying followers.
948	processLogs applies logs up to a given index, skipping old ones and updating the last applied index.
949	processLog handles log entries, forwarding commands to the FSM or responding to futures based on log type.
950	processRPC handles different RPC commands and processes them accordingly or responds with an error if the command is unexpected.
951	processHeartbeat processes RPCs, ignoring shutdown requests and responding to heartbeats, logging errors for unexpected commands.
952	setLastContact updates the last contact time for a Raft instance with mutual exclusion.
953	persistVote saves vote term and candidate to stable storage and returns error if failed
954	setCurrentTerm updates Raft's term and persists it to disk before setting the state.
955	setState updates the Raft state and notifies observers if it changes
956	getCommitIndex locks the commitment struct and returns its commit index
957	recalculate updates commitIndex based on matchIndexes and notifies asynchronously if new index meets conditions
958	randomTimeout generates a channel that sends a value after a random duration between 0 and minVal.
959	generateUUID creates a random UUID string using cryptographically secure randomness
960	decodeMsgPack will deserialize msgpack data into the specified interface and return an error if decoding fails
961	encodeMsgPack serializes an object to MsgPack format and returns the encoded data along with any errors encountered.
962	backoff calculates exponential backoff duration based on round and limit
963	newApplySource generates a hash from a seed string to initialize an applySource instance
964	reset initializes applySource's random number generator using its seed
965	DefaultConfig returns a default configuration for the system.
966	ValidateConfig checks if the configuration settings are valid and returns an error if they are not.
967	runSnapshots manages snapshots triggered by timeouts or user requests, logging errors and responding accordingly until shutdown.
968	shouldSnapshot checks if the log index exceeds the snapshot threshold relative to the last snapshot index.
969	takeSnapshot creates a Raft snapshot, waits for responses, checks conditions, creates a snapshot, persists it, closes, updates, compacts logs, and returns the snapshot ID or error.
970	compactLogs truncates Raft logs based on snapshot index and configuration settings
971	WebpackCheck checks if the local webpack.config.js matches the template and replaces it if necessary.
972	New creates a new generator with options, validates them, and sets up version control files and commands accordingly.
973	UnixSocket creates a new Listener for a Unix socket at the given address and returns it along with any errors encountered.
974	Get retrieves an ErrorHandler based on status or defaults to the first handler.
975	PanicHandler catches panics, logs them, emits events, and calls error handlers.
976	partialFeeder processes a template name, adjusts its extension based on content type, and retrieves it from the templates box.
977	New initializes an Engine with default options and template engines.
978	WriteTo method writes message to writer and returns number of bytes written and error if any
979	SMTPSender.Send configures and sends an email message using gomail, handling headers, bodies, attachments, and dialing the server.
980	NewSMTPSender creates an SMTP sender instance from host, port, user, and password, returning an error if the port is invalid.
981	Param retrieves a parameter from DefaultContext's Params method.
982	Set will update the context's data map with the given key-value pair while acquiring and releasing a lock.
983	DefaultContext's Value method retrieves data by key or falls back to the underlying context.
984	Redirect handles HTTP redirection, processes URL paths, and manages flash messages.
985	File will parse multipart form data and return a file object or an error
986	MarshalJSON converts DefaultContext to JSON, skipping self-referencing fields.
987	New creates a new genny group with options and templates, returning an error if validation fails.
988	New creates a new App instance with default settings, loads plugins, and configures middleware and error handlers.
989	DeprecrationsCheck checks for deprecated functions and warns about them in Go files.
990	List method returns an error indicating resource not implemented when called.
991	Render function calls renderFunc to write data to Writer and returns any errors encountered
992	Save method saves session data to storage and returns any errors encountered
993	GetOnce retrieves a session value by name, removes it, and returns it, or nil if not found.
994	Set method updates session values with given name and value.
995	Clear will remove all values from the session.
996	getSession retrieves or creates a session for an HTTP request and response.
997	New creates a new generator with options, validates them, transforms data, runs a file generation function, and returns the generator or an error.
998	New creates a new generator with options and validates them before running setup functions and transformers.
999	New creates a generator with options, validates them, sets up templates, and returns the generator or an error.
1000	NewMessage creates a new message with default settings and applies any specified options, setting the appropriate encoding and header encoder.
1001	Reset will clear all fields in the Message struct.
1002	SetHeader updates message header with field and values.
1003	SetHeaders updates message headers with key-value pairs.
1004	SetAddressHeader assigns a formatted email address to a message header field.
1005	FormatAddress formats an email address with an optional name, escaping special characters and encoding if necessary.
1006	SetDateHeader updates the message's header with a formatted date for the specified field.
1007	FormatDate formats a date to RFC1123Z format
1008	SetBody updates message body with content type and optional settings
1009	SetPartEncoding sets encoding on part setting
1010	SetHeader updates file header with provided key-value pairs.
1011	SetCopyFunc sets a copy function for file settings
1012	AttachReader adds a reader to a message's attachments with optional settings.
1013	Attach adds a file to a message with optional settings
1014	EmbedReader adds a file from a reader to a message's embedded files with optional settings.
1015	Embed will add a file to a message with optional settings
1016	ValidateTemplates validates templates using provided validators and returns an error if any validation fails.
1017	PlushValidator checks if a file has a valid extension and parses it using plush, returning any errors encountered during parsing.
1018	Validate checks options, sets default app if zero, returns error if no name provided.
1019	LoadPlugins loads available plugins and registers them for events handling.
1020	Response.WriteHeader updates status and calls underlying WriteHeader method.
1021	Write method updates response size and delegates byte writing to ResponseWriter.
1022	Flush will attempt to flush the response writer if it implements the Flusher interface.
1023	CloseNotify returns a channel that receives a value when the response body has been closed. If the ResponseWriter does not implement closeNotifier, it returns nil.
1024	Run will execute an app update check and display warnings or errors accordingly.
1025	onlyRelevantFiles filters out irrelevant files based on directory and file extensions, calling a function on Go files
1026	GoTemplateEngine parses input string using provided data and helpers, returning rendered template or error
1027	addRoute method registers a new route with HTTP method "GET"
1028	Redirect sets up a GET route that redirects to another URL with a given status code.
1029	ANY registers a handler for all HTTP methods on a given path
1030	buildRouteName processes a path to generate a route name, applying transformations based on path segments and pluralization rules.
1031	New creates a new generator group with optional initialization based on options, applying templates and adding files to the group.
1032	NewDialer creates a new Dialer instance with specified host, port, username, and password.
1033	Dialer.Dial establishes a connection to an SMTP server using TCP or TLS, handles authentication, and returns a SendCloser interface along with any errors encountered during the process.
1034	DialAndSend attempts to establish a connection using Dial and then sends messages over it, returning any errors encountered during the process.
1035	Flash's Set method updates its data map with a key-value pair where the value is a slice of strings.
1036	Flash.Add appends a value to a key in its data map or creates a new entry if the key doesn't exist
1037	persist method serializes Flash data to JSON and saves it in session.
1038	newFlash initializes a Flash struct from session data, unmarshalling JSON if present.
1039	Get retrieves a cookie's value by name, returning the value and any error encountered.
1040	Set cookie with name, value, and max age duration
1041	SetWithExpirationTime sets a cookie with a specified expiration time
1042	Delete method removes a cookie by setting its expiration date to the past.
1043	NewMessage creates a new message with default values and a mutex lock
1044	NewFromData creates a new message from render data
1045	New initializes a new message from context data and sets the context.
1046	CloseNotify returns a channel that receives a value when the connection is closed.
1047	NewEventSource initializes an EventSource with HTTP response writer, setting headers and checking for streaming support.
1048	NewSimpleWithContext creates a new Simple instance with a cancellable context, default logger, and initialized fields.
1049	Register maps a handler to a name, returning an error if the name is already taken.
1050	Start initializes a background worker with logging and cancellation capability.
1051	Stop logs and cancels a background worker returning no error
1052	Perform will execute a job using its handler or log an error if no handler is found.
1053	PerformAt schedules job execution at specific time by calculating duration from current time to target time.
1054	PerformIn will run job after delay or cancel on context done.
1055	RouteInfo's String method returns a JSON-formatted string representation with indentation.
1056	Alias appends aliases to RouteInfo and handles them in router.
1057	RouteInfo's Name method updates path name based on given string and returns modified RouteInfo instance.
1058	BuildPathHelper generates a route helper function that constructs URLs from given options.
1059	New generates a new genny generator based on options, applying transformations and templates accordingly.
1060	New creates a generator with options and returns it along with any validation errors
1061	RegisterCustomDecoder registers a custom decoder for specific types and fields.
1062	Replace middleware in MiddlewareStack with another middleware function
1063	Routes returns the list of routes or the root's routes if available
1064	WrapBuffaloHandler wraps a buffalo handler in an HTTP handler.
1065	PackageJSONCheck checks if the local package.json matches the template and updates it if necessary.
1066	match checks if importpath starts with a key from Data and replaces it with corresponding value, returning modified path or original if no match found
1067	Send will attempt to send each message using the sender and return an error if any fail
1068	Last checks if the last part of options matches the given name.
1069	Stop cancels the app's context and logs any non-canceled errors before returning them.
1070	DepEnsure checks dependencies based on flags and runs either 'go get' or 'dep ensure'.
1071	BuildInfo's String method returns version and time as formatted string
1072	New initializes a generator with options, validates them, and adds templates based on those options, returning a generator and any errors encountered.
1073	AddBody appends a rendered body to Message with content type and data merging errors are propagated
1074	AddBodies will add bodies to message using given renderers returning error if any fails
1075	AddAttachment method adds a new attachment to the message object with specified name, content type, reader, and embedded status.
1076	AddEmbedded appends an embedded attachment to the message
1077	SetHeader updates a message's header field with the given value
1078	New creates a new genny group with options, validates them, and adds various generators based on the options.
1079	New creates a new generator with specified options and applies transformations to templates.
1080	New creates a generator with app details, config checks, and package validations, returning it or an error.
1081	Cleanup will remove files and directories based on options and rollback actions, returning any errors encountered.
1082	MDTemplateEngine processes input using markdown and data, applying helpers and returning rendered HTML or plain text.
1083	Update will modify or create a ConfigMap based on provided updates, handling file retrieval, compression, and data population, returning an error if any step fails.
1084	FilterChanges processes pull request changes to determine which config maps need updating, considering namespaces, keys, and file statuses.
1085	getLabelsFromREMatches extracts labels from regular expression matches and returns them in lowercase format
1086	getLabelsFromGenericMatches extracts matching labels from generic matches and additional labels.
1087	Start method initializes agent with configurations and reloads them periodically if files change.
1088	Subscribe adds a subscription to the agent's list.
1089	Config returns the agent's configuration safely.
1090	Set updates config, notifies subscribers with changes after a delay.
1091	IsMember checks if a user is a member of an organization and returns a boolean indicating membership and an error if the organization does not exist.
1092	ListIssueComments returns comments for a given issue or an error if the issue does not exist.
1093	ListPullRequestComments returns comments for a pull request or an error if not found
1094	ListReviews retrieves reviews from a fake client for a given owner, repository, and number.
1095	ListIssueEvents returns issue events for a given repository and issue number.
1096	CreateComment adds a comment to a fake GitHub client and updates issue comments.
1097	CreateReview appends a new review to the FakeClient's Reviews map and increments ReviewID.
1098	CreateCommentReaction appends a comment reaction to FakeClient's CommentReactionsAdded slice and returns nil
1099	CreateIssueReaction adds a reaction to an issue and returns an error if it fails
1100	DeleteComment removes an issue comment and returns an error if not found
1101	DeleteStaleComments deletes stale comments from an issue and returns an error if any deletion fails
1102	GetPullRequest retrieves a pull request from FakeClient's map by owner, repo, and number, returning it or an error if not found.
1103	GetPullRequestChanges retrieves pull request changes from a fake client by organization, repository, and PR number.
1104	GetRef returns a test reference and no error
1105	DeleteRef will log a reference deletion and return no error
1106	GetSingleCommit fetches a commit from FakeClient's Commits map using the provided SHA.
1107	CreateStatus updates or adds a status to the FakeClient's CreatedStatuses map based on the given SHA.
1108	ListStatuses retrieves statuses for a given reference from FakeClient.
1109	GetCombinedStatus retrieves combined status from FakeClient's CombinedStatuses map.
1110	GetRepoLabels retrieves labels for a repository and returns them as a slice of Label objects.
1111	GetIssueLabels extracts labels from a string based on regex matching and returns them as a slice.
1112	AddLabel checks if a label can be added to an issue and updates the client's state accordingly.
1113	RemoveLabel checks if a label can be removed from an issue and adds it to the list if not already present.
1114	FindIssues returns all issues from FakeClient matching the query sorted by sort in ascending order if asc is true.
1115	AssignIssue updates issue assignees and returns missing users or nil.
1116	GetFile fetches file content from FakeClient's RemoteFiles based on org, repo, file, and commit. Returns byte array or error.
1117	ListTeams returns predefined teams for an organization with no external interaction.
1118	ListTeamMembers returns team members based on team ID and role, or an error if the role is unsupported.
1119	IsCollaborator checks if a user is a collaborator on a repository and returns a boolean and an error if the check fails
1120	ListCollaborators returns a list of users for a given organization and repository
1121	ClearMilestone resets the milestone to zero and returns no error
1122	SetMilestone updates the milestone number for an issue and returns an error if the milestone number is negative.
1123	ListMilestones retrieves milestones from a map and returns them as a slice of GitHub milestones.
1124	ListPRCommits retrieves commits for a pull request using an organization, repository, and PR number from a map.
1125	GetRepoProjects retrieves projects from a fake client based on owner and repo.
1126	GetOrgProjects retrieves projects from a fake client's repository for a given organization.
1127	GetProjectColumns fetches project columns based on projectID from FakeClient's RepoProjects and ProjectColumnsMap, returning an error if not found.
1128	CreateProjectCard adds a project card to a specific column and returns it or an error if the column doesn't exist.
1129	DeleteProjectCard removes a project card from the FakeClient and updates the associated column's card list.
1130	MoveProjectCard updates project card position in columns.
1131	CreateDatabaseClient initializes InfluxDB client using configuration details and returns it along with any errors encountered.
1132	Push sends a measurement, tags, fields, and timestamp to InfluxDB and logs the data sent.
1133	NewProwJobWithAnnotation creates a ProwJob with specified spec, labels, and annotations.
1134	NewProwJob creates a new ProwJob instance with the given spec and labels.
1135	NewPresubmit creates a new ProwJob for a pull request with specified labels and event GUID.
1136	PresubmitSpec constructs a ProwJobSpec from a Presubmit configuration and references, setting various properties like type, context, report flag, rerun command, Jenkins specifications, and completed primary references.
1137	PostsubmitSpec creates a ProwJobSpec from a Postsubmit and Refs, setting job type, context, report flag, and references, and optionally copying Jenkins spec details.
1138	PeriodicSpec converts a config.Periodic to a prowapi.ProwJobSpec with type set to PeriodicJob.
1139	BatchSpec constructs a ProwJobSpec from Presubmit and Refs, setting type to BatchJob and completing primary refs.
1140	PartitionActive partitions ProwJobs into pending and triggered channels based on their state.
1141	ProwJobFields extracts relevant fields from a ProwJob object to use in logging.
1142	ClusterToCtx converts cluster name to context alias
1143	pluginHelp.AddCommand appends a new command to its list
1144	Get retrieves a ProwJob object by name and returns it along with any errors encountered during the operation
1145	Watch returns a watch interface or an error based on fake Prow jobs.
1146	`Delete` method deletes a ProwJob resource and returns an error if the operation fails.
1147	Patch will apply a patch to a ProwJob resource and return the updated ProwJob object or an error
1148	MergeMethod returns the merge type for a given organization and repository, using a nested lookup strategy.
1149	Query constructs a search query string based on TideQuery filters
1150	ForRepo checks if a given organization and repository match any included or excluded criteria in a TideQuery object.
1151	OrgExceptionsAndRepos processes TideQueries to determine organization exceptions and repositories, returning maps and sets of strings.
1152	QueryMap initializes a new QueryMap instance with the given TideQueries and an empty cache map.
1153	ForRepo filters queries for a given repository and caches results.
1154	Validate checks for context conflicts and returns an error if any contexts are both required and optional or required if present.
1155	GetTideContextPolicy returns a TideContextPolicy based on various configurations and options, including branch protection and presubmit requirements.
1156	IsOptional checks if a context is optional based on policy settings
1157	MissingRequiredContexts returns contexts that are required but not provided
1158	ValidateWebhook validates webhook requests, checking method, headers, and payload integrity, returning parsed data or errors.
1159	HelpProvider returns help information about the needs-rebase plugin and nil error
1160	HandleEvent processes GitHub pull request events, checks mergeability and labels, then takes appropriate action.
1161	HandleAll processes GitHub PRs based on configuration, logs progress, and takes actions accordingly.
1162	NewDryRunProwJobClient creates a new ProwJob client for dry runs using the provided deck URL.
1163	Create will return a ProwJob and an error for a dry run operation
1164	Update method returns `nil` for both ProwJob object and error on dry run.
1165	UpdateStatus on dryRunProwJobClient returns a ProwJob and error, always returning nil values.
1166	Delete method on dryRunProwJobClient returns error or nil
1167	DeleteCollection will delete all items matching the list options and return an error if any occurs
1168	Get returns a ProwJob and error for a given name and options
1169	List will fetch ProwJobList from server using label selector and return it along with error
1170	Watch returns `nil` for both interface and error
1171	Patch method on dryRunProwJobClient returns nil result and error
1172	hasSynced checks if all resources are synced, waits for them if not
1173	Run starts the controller's worker threads and waits for them to shut down gracefully.
1174	runWorker processes items from a work queue, calling reconcile on each item and handling errors before forgetting the item.
1175	fromKey splits a key into three parts and returns them or an error if the format is incorrect
1176	enqueueKey adds objects to workqueue based on their type and namespace
1177	finalState checks if ProwJobState is not pending or triggered and returns true otherwise
1178	description returns a condition message or reason if available, otherwise it uses a fallback string.
1179	prowJobStatus determines the ProwJob state based on PipelineRunStatus conditions.
1180	pipelineMeta constructs metadata for a ProwJob including labels and annotations.
1181	sourceURL returns the source URL for a ProwJob, defaulting to a git link if not specified
1182	makePipelineGitResource creates a PipelineResource object from ProwJob details
1183	makePipelineRun constructs a PipelineRun from ProwJob and PipelineResource, appending parameters and resources, and returns it or an error if required fields are missing.
1184	matchingConfigs filters plugin configs based on organization, repository, branch, and labels.
1185	SuggestCodeChange generates a code change suggestion based on linting problems using regular expressions and handlers.
1186	ServeExternalPluginHelp registers a handler to serve external plugin help via HTTP POST requests, logging errors and returning appropriate responses.
1187	protect method updates branch protection configurations for organizations and repositories, handling exceptions for tested and presubmit repositories.
1188	UpdateOrg updates repository configurations based on organization settings and returns an error if any update fails.
1189	UpdateRepo updates repository settings, checks archival status, retrieves branches, and updates branch protections accordingly.
1190	UpdateBranch updates branch protection based on policy and logs if already unprotected
1191	LoadConfig will unmarshal a JSON config string into Options and return an error if unsuccessful.
1192	Run will initialize Kubernetes clients, create an artifact uploader controller, and run it indefinitely.
1193	Start method initializes Agent with secrets from paths and starts monitoring goroutines for each secret path.
1194	reloadSecret continuously checks and updates the secret at the given path if it has changed.
1195	GetSecret retrieves a secret from a map using a path, ensuring thread safety with RLock.
1196	setSecret updates the agent's secrets map with the given path and value while ensuring thread safety
1197	GetTokenGenerator returns a function that retrieves a secret from a specified path.
1198	New initializes a History instance, loading existing data from a specified path if it exists.
1199	`Record` method logs a history entry with pool key, action, base SHA, targets, and error timestamped.
1200	ServeHTTP will marshal history records to JSON, write response, or log errors if encoding or writing fails.
1201	Flush method on History struct writes all records to GCS and logs duration and success/failure.
1202	AllRecords locks history, converts logs to slices, and returns a map of records.
1203	MakeCommand creates a Cobra command for downloading a coverage profile file, setting flags for output file, artifacts directory, and profile name.
1204	CheckFlags compiles regex patterns from c.pattern slice and appends them to c.matcher, returning error if compilation fails
1205	ReceiveComment will count comments matching specific patterns and return their creation dates.
1206	NewController initializes a new Controller instance with given parameters
1207	controller.Run manages resource events, initializes informers, waits for caches, starts workers, and shuts down gracefully.
1208	runWorker starts a worker goroutine to process items until none are left, then signals completion.
1209	New creates a new LocalGit instance with a temporary directory and git client, setting credentials and remote.
1210	MakeFakeRepo creates a fake git repository and initializes it with default configurations.
1211	AddCommit will add files to a git repository and commit them with a message.
1212	CheckoutNewBranch checks out a new git branch and returns an error if it fails.
1213	Checkout will execute git checkout on a specified repository and commit-like reference, returning an error if the command fails.
1214	RevParse executes a git rev-parse command on a specified repository and returns the result or an error.
1215	CleanAll cleans up resources by listing and sweeping them based on session and region information.
1216	optionsForRepo returns an Lgtm configuration for a given repo and org or an empty Lgtm if none found
1217	getChangedFiles retrieves modified files from a pull request and returns their names.
1218	loadReviewers combines approvers and reviewers from multiple files into a single set
1219	NewController initializes a controller with fallback sync, cookie file, projects, Kubernetes client, and config, handling errors and setting default values.
1220	SaveLastSync saves the last sync time to a file or copies it if renaming fails.
1221	Sync updates instances with changes, saves last sync time, logs progress and errors.
1222	AddFlags adds a flag to match events for the EventCounterPlugin.
1223	CheckFlags initializes event matcher and returns error
1224	ReceiveIssueEvent processes an issue event, returning points if it matches a condition.
1225	Upload will process multiple files to a storage bucket asynchronously, logging progress and returning any encountered errors.
1226	FileUploadWithMetadata uploads a file with metadata and returns an error if any step fails
1227	DataUploadWithMetadata uploads data from reader with given metadata and returns an error if any step fails.
1228	HasLabel checks if a label exists in a list of labels ignoring case sensitivity.
1229	ImageTooBig checks if an image at a given URL exceeds 10MB size based on Content-Length header.
1230	LevelFromPermissions determines permission level based on admin, push, pull permissions.
1231	PermissionsFromLevel converts a permission level to corresponding permissions.
1232	newProwJobs creates a prowJobs instance with a ProwV1Client and a namespace.
1233	GetApplicable retrieves blockers based on organization, repository, and branch, sorts them by number, and returns the list.
1234	serve configures HTTP handlers and starts a server to listen on port 8080
1235	NewCountPlugin creates a Cobra command to count events and issues using various plugins.
1236	ReceiveComment appends a fake "commented" event to the result of calling ReceiveComment and ReceiveIssueEvent on o.plugin.
1237	updateMetrics will periodically log and update disk usage metrics at specified intervals
1238	LogStatus retrieves resources from storage, marshals them to JSON, and logs the current resource status or any errors encountered.
1239	SyncConfig parses config, syncs resources, returns error if any step fails
1240	Metric method retrieves resource metrics for a given type, updating current state and owner counts or returning ResourceNotFound if no matching resources are found.
1241	FormatURL converts a URL to an HTML image link and returns it, or an error if the input is invalid.
1242	runAndSkipJobs runs and skips jobs based on conditions, returning an error if validation fails
1243	validateContextOverlap checks for overlapping contexts between jobs to run and skip, returning an error if any are found.
1244	RunRequested starts builds for requested jobs and logs errors if any fail
1245	skipRequested updates GitHub PR status for skipped jobs, logs skipped builds, and returns any encountered errors
1246	LabelEvent's Match checks if event name is 'labeled' and label matches its own label field.
1247	Match checks if event name is "unlabeled" and label matches UnlabelEvent's Label.
1248	AddFlags adds GitHub options to a flag set
1249	AddFlagsWithoutDefaultGitHubTokenPath adds flags to FlagSet without default GitHub token path
1250	Validate GitHub options, set default endpoints, handle deprecated token file, warn on empty token path.
1251	GitHubClientWithLogFields creates a GitHub client with optional logging and authentication based on options.
1252	GitHubClient initializes a GitHub client with secret agent and dry run flag, returning an error if unsuccessful.
1253	GitClient creates a new git client, sets credentials using GitHub information, and handles errors gracefully.
1254	toMap converts CoverageList to a map using Group elements' Name as keys
1255	findChanges identifies significant coverage changes between two lists and returns them as a slice of coverageChange objects.
1256	CreateDatabase initializes a MySQL database, creates tables if they don't exist, and migrates models.
1257	ShouldReport determines if a ProwJob should be reported based on its settings and the client's configuration.
1258	Report sends a ProwJob report using a template and returns the updated job list and any errors.
1259	MarkComplete deletes keys from firstSeen if they're not marked, logs deletion, and returns the number of swept resources.
1260	NewJobAgent creates a new JobAgent instance with provided clients and configuration.
1261	JobAgent's Start method updates job info periodically using goroutine.
1262	Jobs method returns a copy of the jobs slice while holding the mutex lock
1263	ProwJobs returns a copy of the JobAgent's prowJobs slice.
1264	GetProwJob fetches a ProwJob by job and ID, returning it or an error if not found.
1265	GetJobLog retrieves job logs based on the specified job and ID, using either Kubernetes or external agents, and returns the log data or an error.
1266	unionStrings combines two string slices into a single slice without duplicates.
1267	Apply combines two policies, resolving conflicts using predefined functions.
1268	GetOrg retrieves an organization's policy from a branch protection object, applying the default policy if not found.
1269	GetRepo retrieves a repository by name, applying the organization's policy or returning the default policy if not found.
1270	GetBranch retrieves a branch by name, applying policy and checking protection.
1271	GetPolicy retrieves a policy based on organization, repository, branch, and branch requirements, applying protections and validating policy definitions.
1272	UpdateIssueEvents fetches and saves issue events using a database connection and client interface.
1273	enqueueKey adds objects to a work queue based on their type and context
1274	prowJobStatus determines the Prow job state based on build status conditions.
1275	buildEnv constructs environment variables from ProwJob spec and build ID
1276	defaultArguments ensures all environment variables are added to template arguments if not already present.
1277	defaultEnv adds environment variables from rawEnv to c.Env if they don't already exist
1278	injectSource updates build spec with source and volumes from ProwJob, sets working directory, and returns success status
1279	injectedSteps processes job spec and config to inject sidecar, init upload, and entrypoint containers, returning them along with GCS volume and any errors encountered.
1280	determineTimeout returns the first non-zero timeout from buildspec, decorationconfig, or defaulttimeout
1281	makeBuild constructs a build object from a ProwJob, handling environment, source, and timeout injection.
1282	newLabels converts GitHub labels to SQL labels, handling errors if a label is missing a name field
1283	newAssignees converts GitHub users to SQL assignees, handling errors if login fields are missing.
1284	NewIssueComment creates a new sql.Comment from github.IssueComment and returns it or an error if required fields are missing.
1285	messageFilter returns a filter based on messages after last update and matching presubmits, or TestAllFilter if no match found
1286	IsSuccess checks if the build result is equal to success
1287	IsFailure checks if build result is either failure or unstable.
1288	IsAborted checks if the build result is aborted
1289	ProwJobID extracts the value of 'prowJobID' parameter from Build's Actions and returns it as a string.
1290	BuildID returns the build ID from parameters, or empty if not found.
1291	CrumbRequest fetches CSRF token and field from Jenkins API and stores them in authConfig.
1292	measure records latency and request count for HTTP requests
1293	GetSkipMetrics sends a GET request to the specified path and returns the response body or an error.
1294	Get sends a GET request to the specified path and returns the response body or an error
1295	request sends HTTP requests with retries and measures performance
1296	doRequest sends HTTP request with optional authentication and returns response or error
1297	getJobName returns the job name based on the ProwJobSpec, incorporating GitHub branch information if available.
1298	getBuildPath constructs a Jenkins build path from a ProwJobSpec.
1299	GetJobInfo fetches job information from an API, parses it, and returns a JobInfo object along with any errors encountered.
1300	JobParameterized checks if any property has parameter definitions.
1301	EnsureBuildableJob checks for job existence, handles parameters, launches build, and waits for parameterization.
1302	LaunchBuild sends a POST request to build a job and returns an error if the response status is not 201.
1303	Build logs details and delegates to BuildFromSpec method.
1304	BuildFromSpec constructs a job from a spec, ensuring it's buildable before launching it.
1305	GetEnqueuedBuilds fetches enqueued builds from Jenkins and filters them based on provided job parameters.
1306	Abort sends a POST request to stop a job and returns an error if unsuccessful
1307	PresubmitToJobSpec converts a presubmit configuration to a job specification.
1308	PostsubmitToJobSpec converts a postconfig to a JobSpec.
1309	PeriodicToJobSpec converts a Periodic config to a JobSpec.
1310	GetBuildID fetches build ID from URL or generates a new one on failure.
1311	listGcsObjects retrieves objects from GCS and returns their names, handling prefixes and delimiters, logging at the end.
1312	FindBaseProfile retrieves a coverage profile from GCS for a successful Prow job.
1313	sortBuilds converts a list of build strings to integers, sorts them in descending order, and returns the sorted indices.
1314	GetAll retrieves all AWS EC2 regions from the given session and returns them as a slice of strings along with any errors encountered.
1315	NewEventClient creates a new EventClient instance with provided parameters.
1316	PruneComments removes comments based on a condition and deletes them from the repository if necessary.
1317	FormatResponse constructs a formatted response string using template literals.
1318	FormatSimpleResponse generates a formatted response string with the recipient's name, message, and additional information about the bot.
1319	FormatICResponse formats an issue comment response by calling FormatResponseRaw with the comment body, HTML URL, user login, and input string.
1320	FormatResponseRaw formats a raw response by quoting the user's comment and using a specified format.
1321	Validate checks options for GCS path, bucket, and credentials returning an error if any required fields are missing.
1322	Encode converts options to JSON string and returns it along with any errors.
1323	RegisterIssueHandler associates a name with an issue handler and its help provider.
1324	RegisterIssueCommentHandler associates a comment handler with its name and help provider.
1325	RegisterPullRequestHandler associates a handler and help provider with a given name.
1326	RegisterStatusEventHandler associates a status event handler with its name and provides help information.
1327	RegisterPushEventHandler associates a push event handler with its name and help provider
1328	RegisterReviewEventHandler associates a review event handler with its name and help provider.
1329	RegisterReviewCommentEventHandler associates a review comment event handler with a name and help provider
1330	RegisterGenericCommentHandler associates a comment handler and help provider with a given name.
1331	NewAgent constructs an Agent instance using configurations from various agents and a logger.
1332	InitializeCommentPruner sets up a new event client for comment pruning with GitHub client, logger, organization, repository, and pull request number.
1333	CommentPruner returns the comment pruner client or an error if it's not initialized
1334	Load reads a YAML file, parses it, validates the configuration, and sets it in ConfigAgent.
1335	ConfigAgent's Config method returns its configuration after locking the mutex.
1336	Set updates the configuration of ConfigAgent with a mutex lock to ensure thread safety.
1337	Start method loads config from given path starts a goroutine to reload every minute logs errors on reload failure
1338	GenericCommentHandlers returns a map of comment handlers for a given owner and repository
1339	IssueHandlers returns a map of issue handlers for a given owner and repo, locking to ensure thread safety.
1340	IssueCommentHandlers returns a map of issue comment handlers for a given owner and repo, locking during operation.
1341	PullRequestHandlers returns a map of PR handlers for a given owner/repo.
1342	ReviewEventHandlers returns a map of ReviewEventHandler based on plugins for given owner and repo.
1343	ReviewCommentEventHandlers returns a map of event handlers for a given owner and repo
1344	StatusEventHandlers retrieves and returns status event handlers for a given owner and repository.
1345	PushEventHandlers locks the agent, retrieves plugins, filters handlers, and returns them.
1346	EventsForPlugin returns a list of events associated with a plugin name based on predefined handlers.
1347	insertLink updates the URL in the metadata and returns whether it was changed or an error if invalid data is found
1348	HelpProvider creates and returns help information for the cherrypick plugin.
1349	getPatch retrieves a patch from GitHub and saves it to a local file
1350	releaseNoteFromParentPR extracts a release note from a PR body using regex and formats it
1351	ValidatePayload checks if the payload's signature matches its HMAC using the given key and returns true if valid.
1352	PayloadSignature generates a SHA-1 HMAC signature for a given payload using a secret key and returns it as a hexadecimal string.
1353	updateString updates have to match want, returns true if updated
1354	updateBool updates a boolean pointer to match another if different, returning true if updated
1355	configureOrgMeta updates organization metadata fields and saves changes if any field has been updated.
1356	configureTeamRepos configures team repositories based on desired permissions, handling additions, updates, and removals, returning errors if any operations fail.
1357	ShouldReport checks if ProwJob has non-empty PubSub project and topic labels.
1358	Run method processes job spec and uploads files to GCS or simulates upload based on options.
1359	Format combines default and entry fields before passing them to the wrapped formatter.
1360	FindLabels filters issue labels using a regex and returns matching labels.
1361	AddFlags method adds flags to the FlagSet for Options struct.
1362	NewAgent creates a new agent instance with the given configuration and logger.
1363	HandleLogin sets up an OAuth login process and redirects the user to the authentication provider.
1364	HandleLogout clears user sessions and redirects after logout.
1365	serverError logs an error and sends a 500 response with details.
1366	FromItem converts an item to a ResourcesConfigObject and updates the receiver if successful.
1367	GetItems retrieves all objects from ResourcesConfigCollection.
1368	SetItems assigns resources config objects to collection.
1369	UnmarshalText sets the permission level from text or returns an error if invalid.
1370	IsAssignee checks if the given login matches any assignee's login in the issue.
1371	IsAuthor checks if the issue's author matches the given login after normalization.
1372	HasLabel checks if an issue has a specific label ignoring case sensitivity
1373	Branch returns the branch or tag name from a push event's reference.
1374	truncate will return a truncated string with ellipsis in the middle if it exceeds the maximum length
1375	reportStatus updates GitHub status based on Prow job details, handling multiple pull requests and truncating descriptions.
1376	parseIssueComments processes issue comments, filtering, updating, and deciding whether to create a new comment based on the ProwJob status and bot's role.
1377	createComment generates a comment based on a template, ProwJob, and test entries, returning the comment text and any errors encountered.
1378	Lens's Config method returns a LensConfig struct with specified Name, Title, and Priority.
1379	Lens.Callback processes artifacts and returns a string.
1380	FormatRecord constructs a formatted string from a record containing various fields and commands.
1381	Namespace method sets the client's namespace to the given string and returns a new client instance.
1382	NewFakeClient creates a new fake client with default namespace and given deck URL
1383	NewClientInCluster initializes a Kubernetes client using in-cluster credentials and returns it or an error.
1384	NewClientFromFile reads cluster configuration from a file and creates a new client with it.
1385	NewClient initializes a new Client instance with TLS configuration using certificates from Cluster.
1386	ReplaceConfigMap updates a ConfigMap and returns it or an error.
1387	GetDiskUsage calculates disk usage statistics for a given path, returning free space percentage, free bytes, used bytes, and any errors encountered.
1388	GetATime retrieves access time or returns default if failed.
1389	RegisterLens registers a new lens with validation and logs registration details.
1390	GetLens retrieves a Lens by name or returns an error if invalid.
1391	LastNLines returns the last n lines of an artifact using chunked processing with a buffer size of 300n+1 bytes.
1392	NewClient creates a new Slack client using a token generator function.
1393	WriteMessage logs details, checks if fake, constructs URL values, posts message, and returns any errors.
1394	MarkAndSweep marks NAT gateways for deletion and deletes them using AWS SDK.
1395	ListAll retrieves all NAT gateways for an account and region, returning their ARNs and first seen times.
1396	NewClient creates a new Client instance with specified owner and URL, configuring its transport and retry settings.
1397	Acquire locks, checks resource, adds to storage, returns resource or error
1398	AcquireWait attempts to acquire a resource repeatedly until it becomes available, respecting the context's deadline or cancellation.
1399	AcquireByState fetches resources by state, locks client, adds to storage, returns resources and error
1400	ReleaseAll releases all resources to a destination and returns errors if any occur during the process.
1401	ReleaseOne will release a resource from storage and handle errors
1402	UpdateAll locks client, updates resources, accumulates errors, returns them.
1403	SyncAll locks client, lists resources, converts items, updates states, and aggregates errors.
1404	UpdateOne updates a resource's state and user data, locking access during operation.
1405	Metric retrieves a metric using the specified type from the client.
1406	HasResource checks if any resources exist in storage.
1407	DialContext will establish a connection with retries based on the dialer's configuration and context.
1408	NewDashboardAgent creates a new DashboardAgent instance with the given repositories, configuration, and logger.
1409	QueryPullRequests fetches PRs using GraphQL, handling pagination and logging costs.
1410	GetHeadContexts retrieves PR context using GitHub client and returns a list of statuses or an error.
1411	ConstructSearchQuery builds a search query for a dashboard agent based on login and repository information
1412	NewBundledStates creates a new instance of BundledStates with the given description and an empty states map.
1413	ReceiveEvent updates state for given ID based on event details and returns if state has changed.
1414	ages calculates the duration since each active state was last updated
1415	Percentile calculates the duration at a specified percentile from bundled states, or panics if invalid.
1416	NewMetrics creates a new Metrics instance with specified ClientMetrics and ResyncPeriod values.
1417	NewDiskCache creates a new HTTP round tripper with disk caching.
1418	NewMemCache creates a new memory cache with a delegate and maximum concurrency.
1419	NewFromCache creates a new RoundTripper that caches responses using the provided cache and limits concurrency.
1420	ProwV1 returns a fake ProwV1 interface for the clientset.
1421	Prow returns a fake ProwV1 interface for testing purposes.
1422	NewOwners initializes a new Owners struct with provided parameters.
1423	GetApprovers returns a map of owners to their approvers based on the owners set.
1424	GetAllPotentialApprovers returns a sorted list of unique potential approvers from leaf approver lists, logging if none found.
1425	GetReverseMap constructs a reverse mapping from approvers to their associated owners files
1426	temporaryUnapprovedFiles filters files based on unapproved approvers.
1427	KeepCoveringApprovers filters potential approvers based on reverse map and unapproved files, returning a set of kept approvers.
1428	GetSuggestedApprovers finds approvers based on file coverage, returning suggested approvers or current ones if no suggestions possible.
1429	GetOwnersSet returns a set of unique owners from filenames after removing subdirectories.
1430	GetShuffledApprovers returns shuffled list of potential approvers based on seed
1431	Approval's String method returns a formatted HTML link string
1432	IntersectSetsCase returns the intersection of two sets in a case-insensitive manner.
1433	NewApprovers creates a new approvers object initialized with given owners and default values.
1434	AddLGTMer updates approvers map if conditions met
1435	RemoveApprover deletes an approver from the Approvers map using their login.
1436	AddAssignees adds lowercase logins to the assignees set
1437	GetCurrentApproversSetCased returns a set of cased usernames from the approvers list.
1438	GetFilesApprovers returns a map of file names to sets of approvers, intersecting current and potential approvers while preserving casing.
1439	NoIssueApprovers returns a map of logins to approvals for users without issue permissions who have owners.
1440	UnapprovedFiles returns a set of files with no approvers.
1441	GetFiles returns a list of approved and unapproved files based on approvers
1442	IsApproved checks if requirements are met or manually approved
1443	ListApprovals returns a list of approvals for the current approvers.
1444	ListNoIssueApprovals returns a list of approvals for no-issue approvers.
1445	GenerateTemplate will render a template with given data and return the result or an error
1446	writeTemplate renders a template from a file to another file using provided data, handling errors in setup and execution.
1447	Labels combines default and repository labels into a sorted list without duplicates.
1448	LabelsForTarget filters labels by target and sorts them alphabetically by name.
1449	LoadConfig reads a YAML config file at the given path, validates it against the provided organizations, and returns the configuration or an error.
1450	loadLabels fetches labels for multiple repositories concurrently and aggregates results or errors
1451	kill logs the repository and label information and returns an update object indicating the resource is dead.
1452	create logs repo and label info then returns an Update object
1453	classifyLabels organizes labels based on their lifecycle and categorizes them into required, archaic, and dead groups
1454	linkify replaces spaces with dashes, removes certain characters, and converts to lowercase
1455	NewCache creates a new cache instance with a trimmed disk root path.
1456	KeyToPath converts a cache key to its corresponding disk path
1457	ensureDir checks if a directory exists, creates it if not, and returns an error if creation fails
1458	Put adds content to the cache at a specified key, optionally verifying its SHA256 hash.
1459	Cache.Get fetches file from path using key and calls readHandler with existence status and file object or error
1460	Delete removes a cache entry by key, returning an error if the operation fails.
1461	NewGCSArtifact creates a new GCSArtifact instance with given parameters
1462	Size returns the size of the GCS artifact or an error if it cannot retrieve the attributes.
1463	ReadAll method reads content from GCSArtifact ensuring it does not exceed size limit and returns byte array or error.
1464	ReadTail reads the last n bytes of a GCSArtifact, returning an error if the artifact is compressed or if there's an issue reading it.
1465	gzipped checks if GCS artifact's content encoding is gzip and returns a boolean along with any errors encountered.
1466	optionsForRepo returns a repository configuration based on the organization and repository name, or an empty configuration if none found
1467	List will return all ProwJobs matching the given selector from the indexer.
1468	ProwJobs returns a lister for prow jobs in a given namespace
1469	List all ProwJobs matching a label selector in a specific namespace
1470	RunsAgainstAllBranch checks if there are no branches to skip or run against.
1471	Intersects checks if two Branchers have intersecting branches or run against all branches.
1472	ShouldRun checks if changes match the matcher's criteria and returns whether to run based on those changes.
1473	RegexpChangeMatcher determines if any changes match its regex pattern.
1474	CouldRun checks if the postsubmit brancher should run for the given base reference.
1475	ShouldRun determines if a postsubmit should run based on base ref and changed files, considering regexp matches and defaults to true if undetermined.
1476	CouldRun checks if the presubmit brancher should run for the given base reference.
1477	ShouldRun determines if presubmit checks should run based on base ref, changes, and flags.
1478	GetPresubmit retrieves a presubmit configuration based on repo and jobName from JobConfig.
1479	SetPresubmits updates Presubmits field with a copy of input jobs and sets regexes, returning an error if any regex setting fails
1480	SetPostsubmits updates JobConfig's Postsubmits field with a copy of input jobs and validates regexes, returning an error if any validation fails.
1481	AllPresubmits returns all presubmits for specified repos or all if none specified
1482	AllPostsubmits returns all postsubmits for specified repositories or all if none specified
1483	AllPeriodics returns all periodic jobs from JobConfig.
1484	ClearCompiledRegexes sets regex fields to nil for each Presubmit in the list
1485	Empty checks if all config fields are empty.
1486	NewClient creates a new client instance with Git, GitHub clients, and various configuration functions.
1487	ExpandAlias returns a set of strings representing expanded aliases, normalizing the input alias first.
1488	ExpandAliases expands aliases in a set of logins and returns the updated set.
1489	ParseFullConfig will unmarshal byte slice into FullConfig struct and return it along with any encountered error.
1490	ParseSimpleConfig unmarshals YAML byte slice into SimpleConfig and returns it along with any error encountered.
1491	decodeOwnersMdConfig reads a YAML configuration file and parses its header into a SimpleConfig struct, returning an error if unsuccessful
1492	findOwnersForFile determines the file's owner based on its path and a map of regex patterns.
1493	FindApproverOwnersForFile retrieves approvers for a given file path using logger and approvers list.
1494	FindReviewersOwnersForFile returns the reviewers owners for a given file path using the repo owners log and reviewers list.
1495	FindLabelsForFile retrieves labels for a file path from RepoOwners entries.
1496	IsNoParentOwners checks if a path has no parent owners based on the options.
1497	Ratio calculates coverage percentage based on covered vs total statements
1498	FromPayload will unmarshal JSON data into PeriodicProwJobEvent and return an error if unmarshalling fails
1499	ToMessage converts PeriodicProwJobEvent to a pubsub.Message with JSON data and attributes.
1500	UnmarshalText updates the Privacy instance with a valid text representation or returns an error if the text is invalid.
1501	compileApplicableBlockades filters and compiles applicable blockades based on organization, repository, and regex patterns, logging errors if compilation fails.
1502	calculateBlocks aggregates changes based on blockades and returns a summary
1503	MergeMultipleProfiles combines multiple coverage profiles into one, returning an error if any merge fails.
1504	AddFlags method adds command-line flags to FlagSet for Options struct fields.
1505	processNextItem handles items from a queue, processes them, logs results, and updates the queue status.
1506	handleErr will log and requeue errors up to five times before giving up on a log upload task
1507	AggregateFilter combines multiple filters into a single function that returns results based on the first matching filter.
1508	FilterPresubmits filters presubmits based on filter criteria and returns two lists: those to trigger and those to skip.
1509	MakeCommand creates a Cobra command for filtering Go coverage files based on flags.
1510	Push method adds an event to the EventTimeHeap
1511	Pop removes and returns the minimum element from the heap.
1512	NewFakeOpenPluginWrapper creates a wrapper for a plugin, initializing it with an empty map to track open states.
1513	ReceiveIssue processes issues, adds fake "opened" events if necessary, then passes them to plugin.
1514	Validate checks Options fields for required values and duplicate refs, returning an error if any issues are found.
1515	Complete populates GitRefs and KeyFiles with aliases and clone URIs from options.
1516	Set assigns a format to an orgRepo instance and parses it, returning an error if invalid.
1517	ensure checks if a binary exists, returns an error if it doesn't with installation instructions
1518	output executes a command with arguments and returns its trimmed output or an error
1519	projects retrieves a list of project IDs up to a specified maximum and returns them as a slice of strings along with any errors encountered during the process.
1520	selectProject selects a GCP project based on user input or defaults.
1521	createCluster initializes a new GCP cluster based on user input or default values, then retrieves and parses its details.
1522	createContext creates a new or reuses an existing GKE cluster based on user input and returns its context
1523	contextConfig checks for kubectl and gcloud, loads client config, returns loader, config, and error
1524	selectContext selects a Kubernetes context based on user input or predefined options.
1525	applyCreate runs a kubectl command to create resources and applies them, handling errors during execution.
1526	determineSkippedPresubmits filters out presubmits based on whether their contexts are already triggered, returning those that should be skipped.
1527	Dispatch processes plugin data from issues and events, pushing it to an InfluxDB instance.
1528	CreateIssue creates a new GitHub issue with optional labels and assignees, handling retries on failure.
1529	CreateStatus sends a new repository status update and returns it or an error
1530	`ForEachPR iterates over PRs, applying a transformation function and handling errors based on options.`
1531	GetCollaborators retrieves users collaborating on a GitHub repository and handles pagination.
1532	GetCombinedStatus retrieves a repository's combined status for a specified reference.
1533	GetIssues fetches issues from a GitHub repository and returns them along with any errors encountered during pagination.
1534	GetRepoLabels retrieves repository labels from GitHub, handling pagination and type conversion.
1535	GetUser fetches a GitHub user by login and returns the user object or an error
1536	checkConfigValidity verifies if the necessary configuration flags are set and activates the GCloud service account.
1537	createSystemdLogfile runs journalctl command for specified service and outputs it to a log file
1538	createFullSystemdLogfile runs journalctl command and saves its output to a log file in specified directory
1539	createSystemdLogfiles creates log files for systemd services and handles errors during the process.
1540	prepareLogfiles gathers logs based on cloud provider and configuration, then copies them to specified directory.
1541	writeSuccessMarkerFile creates a success marker file on GCS with public read access
1542	MakeCommand creates a Cobra command to summarize coverage profiles and produce JUnit XML output.
1543	warnDeprecated checks if it's been long enough since the last warning and logs a message if so, ensuring only one warning per frequency interval.
1544	Describe generates a description string based on the missing label, comment, issues, PRs, branch, organization, repository, and regular expression.
1545	TriggerFor checks config triggers for matching org and repo returning first match or empty trigger
1546	EnabledReposForPlugin returns organizations and repositories where a given plugin is enabled, categorized by whether they contain slashes or not.
1547	EnabledReposForExternalPlugin returns organizations and repositories enabled for an external plugin based on configuration.
1548	SetDefaults sets default config files and maps namespaces for ConfigUpdater.
1549	validatePlugins checks plugin configurations for unknown plugins and duplicate plugin usage across repositories, returning an error if any issues are found.
1550	ShouldReport determines if a ProwJob should be reported based on its state and Gerrit annotations.
1551	Run executes git clone commands and records results, handling errors and timestamps.
1552	PathForRefs constructs a path for repository references based on the provided base directory and refs information.
1553	gitCtxForRefs constructs a git context using refs, baseDir, and env variables.
1554	commandsForBaseRef generates git clone and config commands based on input references and user credentials
1555	gitTimestampEnvs creates environment vars for Git author and committer timestamps
1556	gitRevParse retrieves the current Git commit hash as a string.
1557	`commandsForPullRefs generates git clone and merge commands based on provided pull request references, handling SHA and submodule updates.`
1558	ProduceCovList creates a CoverageList from cover.Profiles by summarizing blocks and appending them to Group.
1559	popRandom removes and returns a random element from a string set
1560	resolve will configure Kubernetes options based on cluster configs and return an error if configuration fails
1561	ProwJobClientset returns a prow.Interface or an error based on namespace and dryRun mode
1562	ProwJobClient returns a client for managing Prow jobs based on options and namespace, handling dry run scenarios.
1563	InfrastructureClusterClient returns a Kubernetes client or an error if dry-run is enabled or resolution fails.
1564	BuildClusterClients creates clients for building clusters in a given namespace, resolving options and handling dry-run scenarios.
1565	Age calculates the duration since the active state started.
1566	ReceiveEvent checks event and returns new state or same state along with flag.
1567	ReceiveEvent processes events, transitioning to ActiveState if match occurs, returning new state and success flag.
1568	Active checks if all states in MultiState are active
1569	`Age calculates the minimum age among states at a given time.`
1570	ReceiveEvent updates states and returns the updated MultiState and whether any state changed.
1571	ProwJobs method returns a new prowJobInformer instance initialized with the version's factory, namespace, and tweakListOptions.
1572	ItemToResourcesConfig converts an Item to a ResourcesConfig or returns an error if conversion fails.
1573	Copy creates a new instance of TypeToResources with the same key-value pairs as the original.
1574	MakeCommand creates a Cobra command to aggregate Go coverage files.
1575	incrementNumPendingJobs will increase the count of pending jobs for a given job name in the Controller's map while ensuring thread safety.
1576	setPreviousReportState updates the previous report state of a ProwJob in the controller's Kubernetes client.
1577	SyncMetrics locks project lock, gathers Prow job metrics, then unlocks.
1578	DumpProfile will write profiling data to a writer, returning an error if it fails
1579	blocksEqual checks if two profile blocks are equal based on their column and line numbers and number of statements.
1580	NewProwJobInformer creates a new shared informer for Prow jobs with optional filter.
1581	NewFilteredProwJobInformer creates a SharedIndexInformer for ProwJobs with list and watch functions that apply tweaks to ListOptions.
1582	New creates a Spyglass instance with JobAgent, config, and other components initialized.
1583	Lenses filters matchCache, returns sorted Lens list
1584	JobPath processes a source string to extract and validate a job path based on its type, returning an error if invalid.
1585	RunPath processes a source path, trims trailing slashes, splits it into components, and converts Prow keys to GCS keys based on the key type, returning the appropriate result or an error.
1586	ExtraLinks fetches and parses started.json to extract extra links, returning them or an error if parsing fails.
1587	needDemux filters external plugins based on repository and event type
1588	demuxExternal processes external plugins, dispatches events, logs errors or successes
1589	dispatch sends a POST request to the specified endpoint with the given payload and headers, reads the response, and returns an error if the status code indicates failure.
1590	AddFlags adds flags to a command for configuring state description and percentiles.
1591	CheckFlags initializes states with bundled values from description and returns an error if any issue arises
1592	ReceiveIssueEvent processes an issue event, updates state, calculates metrics, and returns a Point containing counts and sums.
1593	Load config and validate components, jobs. Return Config or error.
1594	loadConfig parses prowConfig and optionally jobConfig, merging them into a Config object while validating file paths and avoiding duplicate basenames.
1595	yamlToConfig reads a YAML file and converts it to a config object, setting the source path for each job.
1596	ReadFileMaybeGZIP reads a file, checks if it's GZIP compressed, and returns its contents or decompressed contents.
1597	finalizeJobConfig sets default values and validates regexes for job configurations.
1598	validateComponentConfig checks Config's plank and slack configurations for validity and returns an error if any issues are found
1599	ConfigPath returns the provided config path or a default warning message.
1600	ValidateController checks controller settings and parses URL/Report templates, returning errors for invalid configurations.
1601	defaultJobBase sets default values for job configuration fields
1602	SetPresubmitRegexes compiles trigger and rerun regexes for each presubmit job, validates them, and sets branch and change regexes.
1603	setBrancherRegexes compiles regex patterns from branches and skipBranches in a Brancher object, returning an updated Brancher or an error if compilation fails
1604	SetPostsubmitRegexes updates postsubmit configurations with branch and change regexes, returning an error if any step fails.
1605	Body processes artifacts to generate HTML content based on metadata.
1606	NewBoskosHandler sets up HTTP routes for managing resources.
1607	ErrorToStatus returns an HTTP status code based on the type of error
1608	DumpProfile outputs coverage profile data to specified destination or stdout, returning an error if it fails.
1609	LoadProfile reads a coverage profile from a file or stdin and returns a list of profiles and an error if any.
1610	NewClient creates a new git client with a temporary directory and sets up logging.
1611	SetCredentials updates client credentials with user and token generator.
1612	repo.checkout will execute git checkout command and log the operation or return an error if it fails
1613	CheckoutNewBranch creates a new git branch and checks it out, returning an error if unsuccessful.
1614	Merge attempts to merge a commit and rolls back on failure, returning success or an error.
1615	CheckoutPullRequest will checkout a pull request from the repository and return an error if it fails.
1616	Config sets Git configuration and logs the command output or error.
1617	retryCmd will execute a command up to three times, doubling the sleep duration on failure, and returns the combined output or an error.
1618	LabelsAndAnnotationsForSpec generates labels and annotations for a ProwJobSpec, applying validation and truncation rules.
1619	ProwJobToPod converts a ProwJob to a Pod, applying decoration and handling environment variables and service accounts.
1620	CloneLogPath constructs the path to a log file by joining the mount path and a constant log path.
1621	cloneEnv clones environment variables based on options, returning them or an error if encoding fails
1622	sshVolume creates a Secret Volume and its corresponding VolumeMount for SSH keys.
1623	InjectEntrypoint configures container command and environment for entrypoint injection, returning wrapper options and error.
1624	PlaceEntrypoint creates a container with specified image, command, arguments, and volume mounts.
1625	kubeEnv converts a map to a sorted list of EnvVars
1626	Client returns a Kubernetes client based on options and namespace, using fake or file-based client depending on dryRun flag.
1627	handle manages labels on events based on their draft status and title regex match, logging any errors encountered.
1628	SendHook sends a POST request to a webhook address with JSON payload and verifies response status.
1629	janitorClean executes a cleaning command for a given resource and logs the result or error
1630	janitor processes resources from a channel, cleans them using a function, and releases them back to Boskos with appropriate status.
1631	Run will execute a pull server handling configuration updates and shutdown gracefully.
1632	specToStarted converts a JobSpec to a Started object with timestamp, repo version, pull number, and refs.
1633	Run will execute a series of steps to resolve a job spec, process clone logs, convert data to JSON, and upload it to GCS, returning any encountered errors.
1634	hasPRChanged returns true if PR action is opened, reopened, or synchronized.
1635	UpdateIssues updates issues in the database from a client, handling updates, deletions, and fetching new comments/events.
1636	handleReviewEvent invokes handleReview with necessary parameters from pc and re.
1637	findAssociatedIssue extracts an issue number from the body using a regex pattern for the specified organization, returning the number and an error if unsuccessful
1638	optionsForRepo returns Approve configuration for a given repository or organization, using defaults from config if not found.
1639	localOnlyMain sets up routes on a ServeMux and returns it.
1640	summarize method updates NumCoveredStmts and NumAllStmts by iterating over Group items
1641	Subset filters CoverageList by prefix and returns a new list
1642	ListDirectories returns a list of unique directories from the coverage group names.
1643	readRequest reads an HTTP request and returns an AdmissionRequest object or an error if the content type is incorrect or the body cannot be decoded.
1644	handle processes HTTP requests, reads them, and writes responses while logging errors.
1645	writeResponse processes an AdmissionRequest, decides on a response using a decider, constructs an AdmissionReview, marshals it to JSON, and writes it to a writer, handling errors appropriately
1646	onlyUpdateStatus checks if the request updates the status or has equivalent specs and returns an appropriate response.
1647	convertSuiteMeta will transform gcs.SuitesMeta into resultstore.Suite, populating it with suite and test details including failures and durations.
1648	NewHealth initializes a new HTTP server to handle health checks on "/healthz" path.
1649	ServeReady sets up a health check endpoint.
1650	NewController initializes a controller with various dependencies and starts its status update goroutine.
1651	newExpectedContext creates a new context with expected state and empty description
1652	contextsToStrings converts a slice of Context objects to a slice of their Context string representations.
1653	filterSubpools filters subpools concurrently using goroutines, initializes data, and applies filters, returning a filtered map.
1654	filterSubpool filters out PRs from a subpool based on a condition and returns the modified subpool or nil if no PRs remain.
1655	poolPRMap aggregates PullRequests from subpools into a single map
1656	unsuccessfulContexts filters out successful and optional contexts, appends missing required ones, logs, and returns failing contexts
1657	accumulate organizes PullRequests based on their test results and categorizes them into successes, pendings, or nones.
1658	tryMerge attempts to execute a merge function with retries and handles various error types, returning success and error status.
1659	prChanges fetches or returns cached pull request changes
1660	prune method updates change cache with next change cache and resets next change cache
1661	dividePool organizes PullRequests and ProwJobs into subpools based on organization, repository, and branch, handling errors during GitHub API calls.
1662	AggregateProfiles aggregates multiple profile sets into a single set, returning an error if merging fails.
1663	countToBoolean converts block counts to boolean values in coverage profiles
1664	NewStorage creates a Storage instance from a file or returns an error if the file does not exist or cannot be parsed.
1665	AddResource adds a resource to storage and returns an error if it fails
1666	DeleteResource removes a resource from storage and returns an error if the operation fails
1667	UpdateResource updates a resource in storage and returns an error if it fails
1668	GetResource fetches a resource by name from storage, converting it to a Resource type and returning it along with any errors encountered.
1669	GetResources retrieves sorted list of resources from storage.
1670	SyncResources updates storage resources based on provided data, handling deletions and additions while logging changes and errors.
1671	ParseConfig reads a config file, parses it using YAML, and returns a list of resources or an error.
1672	problemsInFiles checks each file's content for issues and returns a map of problematic files and their associated errors
1673	NewPodLogArtifact creates a new PodLogArtifact instance or returns an error if input parameters are invalid
1674	CanonicalLink constructs a URL for accessing a log artifact using the pod's name and build ID.
1675	ReadAt reads bytes from pod logs at specified offset and returns the number of bytes read and any error encountered
1676	ReadAll retrieves pod logs within a size limit, returning them or an error if unsuccessful.
1677	ReadAtMost reads up to n bytes from the pod log and returns them along with an error if any occurs.
1678	ReadTail reads the last n bytes of a pod log, returning them and any errors encountered. If n exceeds log size, it returns the entire log.
1679	newProblems removes lint problems associated with comments from a list of review comments.
1680	problemsInFiles analyzes git repo files, identifies lint problems, and collects review comments
1681	undoPreset modifies a PodSpec to remove settings matching a Preset's labels, env vars, and volume mounts.
1682	undoPresubmitPresets will revert presets for a given presubmit configuration
1683	yamlBytesStripNulls removes lines containing ': null' from YAML byte slice
1684	monitorDiskAndEvict checks disk usage, triggers eviction if below threshold, sorts files by access time, deletes oldest files until free space meets criteria.
1685	difference calculates the difference between two orgRepoConfig instances, updating repositories and exceptions accordingly.
1686	union combines two orgRepoConfig instances, updating org exceptions and adding unique repos to the result.
1687	clearStaleComments deletes stale comments from a pull request if the PR follows a specific process and the release note has been added
1688	determineReleaseNoteLabel processes a body to derive a release note label based on its content
1689	getReleaseNote extracts and trims release notes from a given body text
1690	NewClient creates a new Client instance with the given boskosClient and initializes resources as an empty map.
1691	Acquire will acquire resources based on type, state, and destination, handling errors and releasing resources on failure.
1692	ReleaseOne releases resources associated with a client, handling errors and nested resource management.
1693	UpdateAll updates client's state and returns error if update fails
1694	GetGitHubClient creates a new GitHub client using an OAuth2 token.
1695	GetUsername fetches the username from GitHub API and returns it or an error if the response is invalid.
1696	CreateTokenHandler reads a token stream, creates a GitHub client, retrieves the username, and returns a TokenHandler instance or an error.
1697	CreateTokenHandlers reads token files and returns handlers or an error.
1698	String method returns formatted job identifier.
1699	TerminateOlderPresubmitJobs cancels older presubmit jobs based on completion time and cleans up their resources.
1700	PushMetrics will periodically send metrics from a gatherer to a specified endpoint until interrupted.
1701	RateLimiter creates a named rate-limiting queue for a given controller.
1702	checkExistingStatus checks GitHub PR statuses and returns the DCO status or an error
1703	checkExistingLabels checks GitHub issue labels for DCO approval and rejection, returning their presence.
1704	handle processes a GitHub pull request, checks its commits, status, and labels, then takes appropriate action based on the results.
1705	MarkdownSHAList generates a markdown list of commits with shortened SHAs and messages.
1706	PathForSpec returns a log path based on the job specification and repository path builder, handling different job types and logging unknown types.
1707	AliasForSpec returns a directory path based on the job spec type or logs an error for unknown types.
1708	RootForSpec returns the log root directory based on the job type, or logs an error if the type is unknown.
1709	NewSingleDefaultRepoPathBuilder creates a closure to build repository paths based on organization and repository names, using defaults when they match.
1710	NewExplicitRepoPathBuilder returns a function to build repository paths with underscores instead of slashes.
1711	RegisterSourceOrDie will log an error and exit if an IssueSource with the same name is already registered, otherwise it will register the source and log a success message.
1712	CreateAndSync initializes, generates, and syncs issues from various sources, logging progress and errors.
1713	loadCache fetches user, labels, and collaborators, populating the issue cache or returning errors.
1714	setIntersect returns two slices: filtered elements from a that exist in b and removed elements that do not
1715	sync checks if an issue exists and updates it or creates a new one based on conditions.
1716	GetAWSCreds retrieves AWS credentials from a resource's user data and returns them as a Value object or an error if the required keys are missing.
1717	stopper creates a channel to handle graceful shutdown on interrupt or SIGTERM signals
1718	newPipelineConfig initializes a pipeline configuration with a Kubernetes client and starts a shared informer for watching PipelineRuns.
1719	KubeClient retrieves Kubernetes client from options and master URL.
1720	ProwJobClient retrieves a Prow job client using Kubernetes client options.
1721	resolveSymLink reads an object and returns its resolved path or an error
1722	readJSON fetches JSON data from a storage bucket and unmarshals it into a given data structure, returning an error if any step fails.
1723	listSubDirs retrieves subdirectories from a GCS bucket based on a given prefix and returns their names along with any errors encountered during the process.
1724	listAll retrieves all objects with a given prefix from GCS bucket and returns their names along with any errors encountered.
1725	listBuildIDs retrieves build IDs from GCS buckets based on root path, returning a slice of int64 IDs and an error if any issues occur during listing or parsing.
1726	FilterProfilePaths filters cover profiles based on given paths and inclusion flag.
1727	LoadSecrets loads multiple secrets from given paths and returns them as a map with errors if any fail.
1728	LoadSingleSecret reads a file at the given path, trims whitespace, and returns its contents along with any errors encountered during the process.
1729	Set will update the Bool value with parsed boolean from string, setting Explicit to true and returning error if parsing fails.
1730	NewOpener creates a new Opener using the provided context and credentials, returning an error if the credentials are invalid or cannot be loaded.
1731	IsNotExist checks if an error indicates non-existence.
1732	LogClose will attempt to close a Closer and log any errors encountered
1733	opener.Writer returns a writer for a given path or creates a new file if the GCS object is nil.
1734	InitGitHubOAuthConfig registers OAuth2 token type and sets the cookie store for GitHub OAuth configuration
1735	deltaDisplayed calculates the percentage difference between new and base ratios, returning it as a string formatted to one decimal place.
1736	makeTable generates a table comparing two coverage lists and returns it along with a boolean indicating if coverage is low
1737	ContentForGitHubPost generates a GitHub post content and checks if coverage is low based on provided profiles and thresholds.
1738	AddFlags method sets up command-line flags for the Client struct.
1739	CheckFlags checks and normalizes organization and project flags, returning an error if any are missing.
1740	getGitHubClient fetches or creates a GitHub client using a token from either memory or a file, returning it along with any errors encountered.
1741	limitsCheckAndWait checks GitHub rate limits and sleeps if exceeded.
1742	Fetches issues from GitHub after a specified time and sends them through a channel, handling pagination and errors.
1743	hasID checks if an issue event with the given ID exists in the list.
1744	FetchIssueEvents fetches issue events from GitHub and sends them to a channel until all events are fetched or the latest event is reached.
1745	isPRChanged checks if a pull request event indicates a change.
1746	NewFetcher creates a new Fetcher instance with specified repository and initializes channels for issues and events/comments.
1747	fetchRecentIssues retrieves recent issues from the database, updates the last fetched issue, and pushes them to a channel.
1748	fetchRecentEventsAndComments retrieves recent events and comments from a database and pushes them to a channel, updating last seen IDs.
1749	Fetcher's Fetch method retrieves recent issues and events/comments from the database, returning an error if any step fails.
1750	Issues will create issues from flaky jobs data retrieved via HTTP and parsed by the reporter.
1751	Title returns a formatted string indicating the job name and its flake count for the last week.
1752	Labels method returns a slice of strings containing job labels including default and SIG-specific labels.
1753	ReadHTTP attempts to fetch data from a URL with retries on server errors or network issues.
1754	String method sorts lines and formats them into a timestamped log string.
1755	NewJobSpec constructs a JobSpec from ProwJobSpec and additional metadata.
1756	ResolveSpecFromEnv retrieves a JobSpec from environment variables and unmarshals it into a JobSpec object, returning an error if the environment variable is not set or malformed.
1757	EnvForSpec constructs a map of environment variables from a JobSpec, handling different job types and agent configurations.
1758	EnvForType returns environment variables based on the ProwJobType
1759	getRevisionFromRef extracts the first pull request's SHA or base SHA/ref from refs.
1760	GetRevisionFromSpec retrieves a revision from job or extra refs, returning empty if none found
1761	helpProvider returns plugin help for a merge commit blocker plugin
1762	load processes input from a reader to parse repository paths and flags, returning a list of paths and any encountered errors.
1763	loadPaths reads file paths from a reader, ignoring comments and empty lines, and stores them in g.Paths.
1764	Match checks if path or its base matches any group paths or prefixes.
1765	CreateDatabase initializes InfluxDB connection, drops existing series, creates batch points, and returns InfluxDB instance or error.
1766	mergeTags combines two maps, prioritizing values from the second map
1767	tagsToWhere converts a map of tags to a SQL WHERE clause
1768	Push adds a point to InfluxDB batch and returns error on failure
1769	artifact fetches a pod log artifact with specified parameters and returns it or an error
1770	serve sets up HTTP server to expose metrics and logs errors
1771	gather will periodically sync metrics or shut down on interrupt signal
1772	makeRequest converts policy to BranchProtectionRequest
1773	makeReviews constructs a RequiredPullRequestReviews object from a ReviewPolicy, handling cases where approvals or dismissal restrictions may be missing or set to zero.
1774	Header method returns a template rendered with logs view based on artifacts and resource directory.
1775	Callback processes artifacts, extracts request, retrieves logs, highlights lines, and executes template.
1776	logLinesAll reads all lines from an artifact's content and returns them as a slice of strings or an error if reading fails
1777	executeTemplate loads a template file and executes it with provided data, returning the rendered string or an error message
1778	DeepCopyObject creates a deep copy of ResourceObject or returns nil if copying fails.
1779	FromItem converts an item to a resource object.
1780	SetItems updates the Items field with a slice of ResourceObjects converted from a slice of Objects.
1781	DeepCopyObject returns a deep copy of the ResourceCollection or nil if the copy fails.
1782	useContext runs a kubectl command to switch contexts and returns an error if it fails
1783	currentContext will execute kubectl config current-context and return the current context or an error
1784	command will execute a binary with arguments and return the combined command and the Cmd object
1785	describeCluster will return details about a Kubernetes cluster and an error if any step fails
1786	Set appends a string to strslice and returns an error
1787	parseXML will unmarshal XML body into gcsDir and adjust paths based on object, returning the parsed directory or an error if parsing fails
1788	Render will generate an HTML page for a directory listing with pagination and navigation buttons.
1789	Render method formats and outputs a file or directory record's details to HTTP response.
1790	Render method outputs HTML grid item for given path and prefix.
1791	txnLogger's Printf prepends nonce to log message.
1792	NewClient creates a new Gerrit client with handlers for each instance.
1793	SetReview sends a review message and labels to a Gerrit instance.
1794	GetBranchRevision fetches a branch's revision from a Gerrit instance, returning the revision or an error if the instance is inactive or the request fails.
1795	queryAllChanges aggregates changes from all projects, logging errors and continuing on failure.
1796	NewTypeFilterWrapperPlugin creates a new instance of TypeFilterWrapperPlugin wrapping a given plugin and initializing an empty pass map.
1797	AddFlags adds flags to a command to ignore pull requests and issues.
1798	CheckFlags ensures only one flag (pullRequests or issues) is set, returning an error if both are ignored.
1799	AddFlags method adds Kubernetes client options to flag set.
1800	Validate checks Kubernetes client options and returns an error if kubeConfig file does not exist.
1801	Client will return a Kubernetes client based on options and type, or an error if it fails.
1802	newCRDClient initializes a Kubernetes client for a custom resource definition with the given type and configuration.
1803	createRESTConfig initializes a REST config and scheme from a kubeconfig file or in-cluster configuration, setting up versioning and serialization details.
1804	registerResource creates or updates a CRD based on config and resource type, returning an error if it fails
1805	newDummyClient creates a new dummy client instance with the given type and initializes its objects map.
1806	Update method updates an object in dummyClient if it exists, returns the updated object or an error if not found.
1807	TrustedPullRequest checks if the author is a trusted user and if the PR has the ok-to-test label.
1808	buildAll processes GitHub pull requests, filters presubmit jobs, determines skipped jobs, and runs the remaining jobs.
1809	Run will execute tasks based on options and handle interruptions gracefully, returning failure count and an error if any.
1810	AddConfig adds a configuration to storage and returns an error if it fails
1811	DeleteConfig removes a configuration from storage and returns an error if unsuccessful
1812	UpdateConfig updates the storage's configuration with new resources.
1813	GetConfig retrieves a configuration from storage and converts it to ResourcesConfig, returning an error if any step fails.
1814	GetConfigs retrieves all resource configurations from storage and returns them, handling errors during listing or conversion.
1815	SyncConfigs updates, adds, and deletes resource configurations based on differences between current and new sets.
1816	addKnownTypes registers known types with the scheme and group version.
1817	NewController initializes and returns a Controller instance with specified parameters.
1818	Run method handles controller's reconciliation loop until stop signal received
1819	addedBlockingPresubmits identifies new blocking presubmits based on changes in configuration.
1820	removedBlockingPresubmits identifies and logs removed blocking presubmits between two configurations.
1821	migratedBlockingPresubmits compares old and new presubmits, identifies context changes, logs each migration, and returns a map of migrated presubmits.
1822	Load will load configuration from environment or command-line arguments and return an error if it fails.
1823	canExecuteConcurrently checks if a ProwJob can run concurrently based on global and job-specific limits, updating pending jobs count accordingly.
1824	getJenkinsJobs filters out completed ProwJobs and constructs BuildQueryParams for active ones
1825	terminateDupes will identify and cancel duplicate presubmit jobs based on their organization, repository, number, and start time, ensuring only the most recent job is kept.
1826	Throttle method adjusts token rate limiting on client requests based on input parameters.
1827	NewClientWithFields creates a new client with specified fields, token retrieval function, GraphQL endpoint, and optional base URLs.
1828	NewClient creates a new client instance with default fields using provided token function, GraphQL endpoint, and base URLs.
1829	NewDryRunClient creates a new client with default fields for logging.
1830	NewFakeClient creates a new fake client with logging, standard time, and dry run enabled.
1831	request sends a raw request and parses the response to the given struct, returning the status code and any errors encountered
1832	`requestRaw sends a request and returns the response status, body, and any errors.`
1833	getUserData fetches user data from API, logs it, sets bot name and email, and returns any errors encountered.
1834	readPaginatedResultsWithValues fetches paginated results from a server, processes each page using accumulate, and returns an error if any step fails.
1835	UpdatePullRequest updates a pull request with specified details and returns an error if the update fails.
1836	getLabels retrieves labels from a GitHub API endpoint and returns them as a slice of Label objects, handling pagination and fake mode.
1837	stateCannotBeChangedOrOriginalError checks if an error contains a specific message prefix and returns a custom error if so, otherwise it returns the original error
1838	IsMergeable checks if a pull request is mergeable with exponential backoff on failure.
1839	reloadingTokenSource's Token method returns an OAuth2 token or an error
1840	ListArtifacts fetches artifacts from a source, handles GCS and Prow keys, appends "build-log.txt" if missing, and returns artifact names with an error if parsing fails.
1841	KeyToJob extracts jobName and buildID from a source string, returning them along with any errors encountered during parsing.
1842	prowToGCS extracts a GCS path from a Prow key, returning an error if the job URL does not match the expected prefix.
1843	FetchArtifacts retrieves artifacts from specified sources based on given parameters, handling different key types and fetching logs if needed.
1844	DeepCopy creates a deep copy of DecorationConfig.
1845	DeepCopy creates a copy of GCSConfiguration.
1846	DeepCopy creates a deep copy of JenkinsSpec instance.
1847	DeepCopy creates a copy of ProwJob object or returns nil if input is nil.
1848	DeepCopy creates a deep copy of ProwJobList returning the copied object or nil if input is nil.
1849	DeepCopy creates a copy of ProwJobSpec and returns it.
1850	DeepCopy will create a copy of ProwJobStatus and return it
1851	DeepCopy creates a deep copy of Pull instance or returns nil if input is nil.
1852	DeepCopy creates a deep copy of the Refs object and returns it.
1853	DeepCopy creates a deep copy of UtilityImages instance.
1854	upload will create an invocation, target, configuration, configured target, and action, returning the URL or an error
1855	ApplyDefault merges two DecorationConfig objects, prioritizing non-nil values from the first argument or using defaults from the second.
1856	Validate checks utility images and GCS config validity returning an error if any required field is missing or invalid.
1857	ApplyDefault merges two UtilityImages instances, preferring non-empty values from the second instance.
1858	ApplyDefault merges two GCSConfigurations, preferring non-nil values from the first argument.
1859	Validate checks if GCS configuration settings are valid and returns an error if they are not.
1860	ClusterAlias returns the cluster alias or default if not specified
1861	NewResource constructs a new resource object with given parameters.
1862	NewResourcesFromConfig creates resources from config entries.
1863	UserDataFromMap creates a new UserData instance from a map, storing each key-value pair.
1864	Set will add values to CommaSeparatedStrings if it's empty or return an error if it's not
1865	UnmarshalJSON will unmarshal JSON data into a temporary map and then convert it to UserData using FromMap method, returning any errors encountered during the process.
1866	Extract will load content by id and unmarshal it to out, returning an error if the id is not found or content cannot be unmarshalled
1867	Set will marshal an interface to YAML and store it with an ID, returning any errors encountered.
1868	userData update method updates keys with non-empty strings or deletes them if empty
1869	ToMap converts UserData to UserDataMap using Range method.
1870	FromMap will populate UserData from a map.
1871	ItemToResource converts an Item to a Resource, returning an error if unsuccessful.
1872	Run will execute Git operations using specified options and log the results.
1873	addSSHKeys adds SSH keys from specified paths to the ssh-agent and returns the environment variables.
1874	Issues retrieves issues from clusters using HTTP data.
1875	loadClusters processes JSON input to filter, validate, and aggregate data into clusters.
1876	parseTriageData will unmarshal JSON into a triageData struct and validate required keys, populating Jobs with appropriate Indexers based on mapper types, returning the parsed data or an error
1877	topClusters returns the top 'count' clusters based on total builds, sorting them in descending order. If 'count' exceeds available clusters, it returns all clusters.
1878	topJobsFailed returns the specified number of jobs with the most failed builds sorted by build count.
1879	Title returns a formatted string summarizing cluster failure details
1880	Labels method returns cluster labels including top tests failed and their corresponding SIGs.
1881	New creates a new Cron instance with initialized fields.
1882	QueuedJobs returns a list of triggered jobs and resets their trigger status.
1883	HasJob checks if a job exists in the cron scheduler.
1884	addJob adds a new cron job and returns an error if it fails
1885	removeJob will delete a named cron job from the agent and log the removal.
1886	UpdateComments updates issue comments based on the latest update and optionally pulls request comments.
1887	GatherProwJobMetrics aggregates ProwJob metrics into a map and updates Prometheus metrics accordingly.
1888	optionOrDefault returns default value if option is zero otherwise it returns option
1889	newGCSJobSource creates a GCS job source from a URL, parsing the bucket, job prefix, job name, and build ID, returning an error if the format is incorrect.
1890	GCSArtifactFetcher retrieves artifacts from a specified bucket and prefix, handling retries on errors.
1891	canonicalLink constructs the canonical link using the job source's link prefix, bucket, and job prefix.
1892	jobPath returns the full path to a job using bucket and prefix
1893	targetURL retrieves the target URL based on configuration or constructs it using pull request details and logs errors if parsing fails.
1894	newBuildConfig initializes a build configuration and starts a shared informer to watch builds, returning an error if any step fails
1895	NewClient creates a new GitHub client with OAuth authentication and returns it along with a Client struct containing various services and configurations.
1896	retry will attempt to execute a function up to a specified number of retries handling specific errors and logging attempts
1897	depaginate fetches all pages of results from GitHub API using a given action and options, appending each page's items to a slice and handling pagination until all pages are retrieved or an error occurs.
1898	NewHelpAgent initializes a HelpAgent with logging and client details.
1899	GeneratePluginHelp constructs help information for plugins based on configuration and repository mappings.
1900	getPullCommitHash extracts commit hash from pull request string or returns error
1901	listJobBuilds retrieves job builds from a bucket for given prefixes, returning a list of job builds or an error.
1902	getPRBuildData fetches build data from multiple sources and consolidates it into a single list.
1903	getGCSDirsForPR retrieves GCS directories for a PR based on configuration and returns a map of buckets to paths or an error.
1904	imageDeleteFromDisk removes image files from disk based on the given fingerprint, logging errors if deletion fails.
1905	doNetworksCreate starts a network, handles errors, and cleans up on failure.
1906	networkLoadByName fetches a network by name and returns it along with its ID and configuration details, or an error if the network does not exist
1907	Transaction executes a function within a database transaction on a Node object.
1908	ForLocalInspectionWithPreparedStmts prepares statements for local inspection and returns a Cluster object or an error.
1909	SetDefaultTimeout sets the default timeout for the database driver.
1910	Transaction executes a function within a cluster transaction context while holding a read lock.
1911	EnterExclusive acquires an exclusive lock on the cluster DB with a timeout error if it takes too long.
1912	ExitExclusive releases exclusive lock on cluster db and executes transaction function.
1913	Close method closes all statements and the database connection of a cluster.
1914	TxCommit commits a transaction or returns an error if not done properly
1915	ParseRemote splits input into remote and name, returns default or specific values based on existence.
1916	GetContainerServer retrieves a container server from the configuration or returns an error if it doesn't exist or is improperly configured.
1917	GetImageServer retrieves an image server from configuration based on the specified name, handling different protocols and addressing schemes.
1918	initAppArmor checks system capabilities and configurations to determine if AppArmor can be used for security.
1919	appArmorCanStack checks if AppArmor domain supports stacking and has version 1.2 or higher.
1920	containerDeviceAdd adds a new device to a specified container and returns an error if the operation fails or the device already exists
1921	profileDeviceAdd adds a new device to a container's profile or returns an error if the device already exists
1922	ensureImageAliases updates container image aliases based on provided list, removing old matching ones and creating new ones.
1923	GetExistingAliases filters image aliases based on provided names and returns matching entries.
1924	String method returns a human-readable representation of a StatusCode enum.
1925	ImagesGetExpired retrieves expired images based on their expiry time.
1926	ImageSourceInsert inserts image source details into the database and returns an error if the protocol is invalid.
1927	ImageSourceGet retrieves an image source from the database based on the image ID and returns its details along with any errors encountered.
1928	ImageExists checks if an image exists in a project's database with given fingerprint, handling transactions and errors gracefully.
1929	ImageGet retrieves an image from the database based on project, fingerprint, and public status, returning its details or an error.
1930	ImageGetFromAnyProject retrieves an image by its fingerprint from any project, returning the image details and any errors encountered.
1931	imageFill updates an image's details and properties from the database.
1932	ImageLocate finds an image's location based on its fingerprint, returning the address of a non-local online node or an error if not found.
1933	ImageAssociateNode associates a node with an image based on project and fingerprint, handling transactions and errors accordingly.
1934	ImageDelete deletes an image from the database and returns an error if it fails
1935	ImageAliasesGet retrieves image aliases for a project, handling transactions and database queries.
1936	ImageAliasGet retrieves image alias details from the database based on project and name, handling trusted client access and returning an error if not found.
1937	ImageAliasRename updates image alias name and returns error if failed
1938	ImageAliasDelete deletes an image alias from the database within a transaction, handling project defaults and errors gracefully.
1939	ImageAliasesMove updates the image_id in the database from source to destination.
1940	ImageAliasAdd inserts an alias for an image and handles transactions and project defaults.
1941	ImageAliasUpdate updates an alias for a specific image in the database and returns an error if the operation fails
1942	ImageLastAccessUpdate updates the last use date of an image in the database using its fingerprint.
1943	ImageLastAccessInit updates image cache status and records last access time.
1944	ImageUpdate updates image details and properties within a transaction.
1945	ImageInsert inserts image details into database, handling transactions and properties.
1946	ImageGetPools fetches storage pool IDs for a given image fingerprint from the database and returns them along with any errors encountered.
1947	ImageGetPoolNamesFromIDs fetches pool names from IDs using a database query and returns them along with any errors encountered
1948	ImageUploadedAt updates the upload date of an image in the database and returns an error if the operation fails.
1949	ImagesGetOnCurrentNode returns images on the current node ID
1950	ImagesGetByNodeID retrieves project names associated with an image using a node ID, returning a map of fingerprints to project lists and an error if the query fails.
1951	getNodesByImageFingerprint will fetch distinct node addresses associated with a given image fingerprint from the database.
1952	ImageGetNodesWithoutImage retrieves nodes without a specific image by fingerprint.
1953	Add a task to the group with a given function and schedule, returning the new task.
1954	Start method initializes a context, cancels it on exit, waits for tasks to complete, and runs each task concurrently while tracking their execution status.
1955	zfsIsEnabled checks if the 'zfs' command is available on the system and returns true if it is found.
1956	zfsToolVersionGet retrieves the ZFS tool version from dpkg-query and trims whitespace from the output, returning it as a string or an error if the command fails.
1957	zfsModuleVersionGet retrieves the ZFS module version from either /sys/module/zfs/version or using modinfo, returning it as a trimmed string or an error.
1958	zfsPoolVolumeCreate creates a ZFS volume with specified properties and returns the command output or an error
1959	zfsPoolVolumeExists checks if a dataset exists in ZFS pool and returns a boolean result along with any errors encountered during execution.
1960	NetworkIDsNotPending fetches non-pending network IDs and names from the database and returns them as a map.
1961	NetworkConfigAdd adds a network configuration to the transaction and returns an error if it fails
1962	NetworkNodeJoin inserts or updates network node information and returns an error if unsuccessful.
1963	NetworkCreatePending checks if a network exists and creates it if not, ensuring it's in the pending state before adding a node and its configuration.
1964	NetworkCreated method updates cluster's network state to created for given name and returns any error encountered
1965	NetworkErrored checks if a network error occurred for a given cluster transaction and returns an error if so.
1966	NetworkGet retrieves network details from the database and returns the ID, network object, and any errors encountered.
1967	networkNodes retrieves node names associated with a given network ID from the database within a transaction, returning them or an error.
1968	NetworkGetInterface retrieves network details for a given device name from the database, returning the ID, network object, and any errors encountered.
1969	NetworkConfigGet retrieves network configuration settings based on ID and returns them as a map or an error if not found.
1970	NetworkCreate inserts a new network with the given parameters and returns its ID and any errors encountered.
1971	NetworkUpdate updates network description and config within a transaction.
1972	NetworkUpdateDescription updates the network description for a given ID and returns an error if the operation fails.
1973	NetworkConfigClear deletes a network configuration from the database using a transaction and returns any errors encountered.
1974	NetworkDelete removes a network by name and returns an error if the operation fails.
1975	NetworkRename updates a network's name in the database using its ID.
1976	GetContainers fetches all containers using a GET request and returns them as a list or an error if the request fails.
1977	GetContainersFull fetches all container details from the LXD server and returns them or an error if the required extension is missing or fetching fails.
1978	GetContainer fetches a container's details and returns it along with its ETag or an error.
1979	CreateContainerFromBackup creates a container from a backup, handling pool overrides and errors.
1980	CreateContainer sends a POST request to create a container and returns an operation or an error if the container only migration extension is missing or the request fails.
1981	CreateContainerFromImage creates a container from an image, handling both local and remote cases, setting appropriate source fields and performing necessary operations.
1982	UpdateContainer sends a PUT request to update a container and returns the operation and error.
1983	RenameContainer will rename a container and return an operation or an error if the request fails
1984	ExecContainer sends a command to a container and handles input/output streams accordingly.
1985	GetContainerFile sends a GET request to retrieve a container file or directory, parses the response, and returns the file content or metadata along with an error.
1986	CreateContainerFile sends a POST request to create or update a file in a container, checking required extensions and setting appropriate headers.
1987	DeleteContainerFile will delete a file from a container and return an error if the operation fails or the server lacks the necessary extension.
1988	GetContainerSnapshotNames retrieves container snapshot names from LXD API, returning a list of names or an error if the request fails.
1989	GetContainerSnapshots retrieves container snapshots using the ProtocolLXD client.
1990	GetContainerSnapshot fetches a container snapshot and returns it along with its ETag and any errors encountered during the process.
1991	CreateContainerSnapshot sends a POST request to create a container snapshot and returns an operation or an error
1992	MigrateContainerSnapshot sends a migration request for a container snapshot and returns an operation or an error
1993	UpdateContainerSnapshot updates a snapshot and returns an operation or error if the server lacks the required "snapshot_expiry" extension
1994	GetContainerState fetches a container's state and returns it along with its ETag or an error.
1995	UpdateContainerState sends a PUT request to update a container's state and returns an operation or an error.
1996	GetContainerLogfiles fetches container logs and returns their filenames along with any errors encountered during the process.
1997	GetContainerLogfile retrieves a container's logfile and returns a reader or an error if unsuccessful.
1998	GetContainerMetadata fetches container metadata from the server and returns it along with ETag or an error if the extension is missing.
1999	SetContainerMetadata updates container metadata and returns an error if the operation fails due to missing extension or other issues
2000	GetContainerTemplateFiles fetches container template files from the server, returning them or an error if the required extension is missing.
2001	CreateContainerTemplateFile sends a POST request to create a container template file.
2002	DeleteContainerTemplateFile will remove a container template file and return an error if the operation fails or the required API extension is missing
2003	`ConsoleContainer establishes a console session for a container, handling operations, terminals, and websockets.`
2004	GetContainerConsoleLog fetches console log for a container and returns a reader or an error if the server lacks necessary extensions or the request fails.
2005	DeleteContainerConsoleLog deletes a container's console log if the "console" API extension is available
2006	GetContainerBackups fetches container backups using the ProtocolLXD client, returning a list of api.ContainerBackup objects or an error if the "container_backup" extension is missing or the query fails.
2007	GetContainerBackup retrieves container backup details and ETag or returns an error if the "container_backup" extension is missing.
2008	CreateContainerBackup sends a POST request to create a container backup and returns an operation or an error
2009	RenameContainerBackup sends a POST request to rename a container backup and returns an operation or an error.
2010	DeleteContainerBackup will perform a delete operation on a container backup and return the operation object and any errors encountered
2011	GetContainerBackupFile fetches a container backup file and handles the response, including progress tracking and error handling.
2012	RsyncSend transfers files over WebSocket using specified parameters and handles errors during transfer.
2013	patchesGetNames retrieves names from patches and returns them as a string slice.
2014	patchRenameCustomVolumeLVs renames custom LVM volumes across storage pools.
2015	patchLvmNodeSpecificConfigKeys updates LVM pool configurations across all nodes in a transaction.
2016	GetHTTPClient retrieves an HTTP client from ProtocolLXD, returning it or an error if not set.
2017	do method sends HTTP request using bakeryClient or http depending on availability
2018	RawQuery sends a raw HTTP request to the LXD server and returns the response and any errors encountered.
2019	RawWebsocket returns a websocket connection for a given path or an error if it fails.
2020	RawOperation invokes queryOperation to execute a raw LXD operation and returns the result.
2021	ProfileToAPI converts a local profile to an API-compatible profile.
2022	Profiles returns a list of profiles for a given project or default if none exist
2023	ProfileGet fetches a profile by project and name within a transaction, returning its ID and API representation or an error.
2024	ProfilesGet retrieves API profiles for given names in a project, handling transactions and errors.
2025	ProfileConfig fetches a profile's configuration from the database and returns a map of key-value pairs or an error if the profile does not exist.
2026	ProfileConfigClear deletes records from multiple tables based on a given ID and returns an error if any deletion fails.
2027	ProfileConfigAdd inserts configuration values into the database for a given profile ID, skipping empty values.
2028	ProfileContainersGet retrieves container names by project and profile, returning a map of project names to lists of container names.
2029	ProfileCleanupLeftover will delete unused profiles from various tables in the database and return an error if the execution fails.
2030	ProfilesExpandConfig merges multiple profile configurations into a single map, prioritizing the input config.
2031	ProfilesExpandDevices combines multiple device profiles into a single map, prioritizing the input devices.
2032	GetServer fetches the server details, populates missing fields, caches the result, and returns the server, ETag, and any errors encountered.
2033	UpdateServer sends a PUT request to update a server with the given details and ETag, returning an error if the request fails.
2034	HasExtension checks if a protocol LXD server has a specific extension.
2035	GetServerResources retrieves server resources or returns an error if the "resources" API extension is missing.
2036	UseProject updates the project field of ProtocolLXD instance and returns a new instance.
2037	sqliteOpen opens a SQLite database at the given path with a specified busy timeout and transaction lock mode. It returns a pointer to the DB object and an error if the operation fails.
2038	Rebalance updates Raft cluster by promoting a spare node to a database node, handling transactions and errors gracefully.
2039	Promote will promote a node to a database node, ensuring it's not already a database node, has an address, and joins the raft cluster successfully.
2040	Purge removes a node from the database within a transaction, handling errors appropriately.
2041	List retrieves cluster members' statuses and versions from the given state.
2042	Count returns the number of nodes in the cluster along with any errors encountered during the transaction.
2043	Enabled checks if a db node has any Raft addresses and returns a boolean indicating its status along with any errors encountered.
2044	membershipCheckNodeStateForBootstrapOrJoin checks if a node can bootstrap or join a cluster based on its state and configuration.
2045	membershipCheckClusterStateForBootstrapOrJoin checks cluster state during bootstrap or join ensuring only one node exists, returning an error otherwise.
2046	membershipCheckClusterStateForAccept checks if a cluster state is acceptable by validating node details.
2047	membershipCheckClusterStateForLeave verifies if a node can leave the cluster by checking if it has containers/images and ensuring it's not the last node.
2048	membershipCheckNoLeftoverClusterCert checks if any cluster certificates exist in the given directory and returns an error if they do.
2049	ConfigLoad loads configuration from database and returns a Config object or an error.
2050	Replace updates Config values with new ones and returns updated string map or error.
2051	Patch updates Config with a given map and returns updated values or an error.
2052	HTTPSAddress retrieves the HTTPS address from a database node, returning an error if unsuccessful.
2053	CertificatesGet fetches all certificates from the database within a transaction and returns them along with any errors encountered.
2054	CertificateGet retrieves a certificate by its fingerprint from the database or returns an error if it does not exist.
2055	CertSave inserts certificate info into database within a transaction and returns any errors encountered.
2056	CertDelete will delete a certificate from the database based on its fingerprint and return an error if the operation fails
2057	CertUpdate updates certificate details in a transaction and returns an error if any step fails
2058	createDevLxdlListener creates a Unix socket listener in a directory, removing any stale sockets first, setting appropriate permissions, and handling errors.
2059	Servers returns a list of servers or an error if the instance is not the leader.
2060	Shutdown will stop the raft instance and return an error if it fails to do so within a timeout or if closing the logs store fails.
2061	raftNetworkTransport initializes a network transport for Raft using given parameters and returns a transport, handler, and layer along with any errors encountered during initialization.
2062	raftConfig adjusts raft configuration based on latency and returns it
2063	raftMaybeBootstrap checks if raft needs to be bootstrapped and does it if necessary.
2064	CPUResource gathers CPU resource details including total count, sockets, cores, and other attributes from threads data.
2065	MemoryResource reads memory info from /proc/meminfo and returns used and total memory in bytes.
2066	GetOperationUUIDs fetches operation URLs and extracts UUIDs from them
2067	GetOperations retrieves all LXD operations as a list
2068	GetOperation fetches an operation by UUID and returns it along with its ETag and any errors encountered.
2069	GetOperationWebsocket retrieves a WebSocket connection for a specific operation and secret.
2070	tryMount attempts to mount a filesystem up to 20 times with a 500ms delay between attempts returns an error if mounting fails after retries
2071	lxdUsesPool checks if a specific storage pool exists and matches given criteria, returning its name or indicating no match found.
2072	ProjectURIs returns URIs of projects matching a given filter or an error if the query fails.
2073	ProjectList filters projects based on name, executes SQL queries, populates project details, and returns them along with related configurations and usages.
2074	ProjectGet retrieves a project by name and returns it or an error if multiple projects match or none found.
2075	ProjectExists checks if a project exists by name and returns a boolean indicating its existence and any potential error.
2076	ProjectCreate checks for existing projects, inserts new ones, and handles errors gracefully.
2077	ProjectUsedByRef returns a map of project names to their used values using a filter, or an error if fetching fails.
2078	ProjectRename renames a project and checks if exactly one row was affected.
2079	ProjectDelete will execute a delete statement on the cluster transaction and verify that exactly one row was affected, returning an error if not.
2080	PasswordCheck verifies if the provided password matches the stored hash using a salt.
2081	LoadCert loads a TLS certificate from a directory and returns its information or an error.
2082	WriteCert saves certificate and key files to specified directory with given prefix and optional CA file.
2083	NewDaemon initializes a new daemon instance with configuration and OS references.
2084	DefaultDaemon creates a new daemon instance using default configuration and OS settings.
2085	AllowProjectPermission checks user permissions for a project feature and returns a response accordingly.
2086	checkTrustedClient verifies client auth and returns error if unauthorized
2087	Authenticate checks request's validity based on TLS, certificates, and headers, returning authentication status, username, and method used.
2088	State returns a new state object initialized with daemon's dependencies.
2089	UnixSocket returns the path to the Unix socket file, either from the environment or default location.
2090	Stop will initiate a graceful shutdown of the daemon, logging progress and handling errors encountered during endpoint, task, and cluster operations.
2091	setupExternalAuthentication configures external authentication with an endpoint, public key, expiry, and domains, handling errors and setting up necessary components.
2092	initializeDbObject initializes the local database, renames old databases if necessary, applies legacy patches, and creates a new database node with hooks.
2093	WriteJSON encodes JSON to response writer, captures it if debug enabled, and logs the JSON.
2094	EtagHash generates a SHA-256 hash of JSON-encoded data and returns it as a hexadecimal string.
2095	EtagCheck verifies if the If-Match header matches the calculated ETag for the given data, returning an error if they don't match or if there's an issue generating the ETag.
2096	HTTPClient creates an HTTP client with optional TLS configuration and custom proxy settings, handling certificate validation and redirect policies.
2097	IsRecursionRequest checks if the request contains a non-zero "recursion" parameter.
2098	GetListeners returns network listeners from inherited file descriptors or an empty slice on error.
2099	internalSQLGet handles SQL requests, validates database, starts transaction, dumps data, and returns response.
2100	internalSQLPost handles SQL queries, validates input, executes them, and returns results or errors.
2101	PublicKey returns the PEM-encoded certificate from CertInfo's KeyPair
2102	PrivateKey method returns private key in PEM format or nil if unsupported key type
2103	CertInfo's Fingerprint method returns its public key's fingerprint or panics on invalid key material.
2104	GenCert generates a certificate and key file at specified paths, returning an error if any step fails.
2105	PrintServerInfo prints information about the LXD server and returns an error if it fails to retrieve the server details.
2106	LaunchContainers launches multiple containers in batches, managing creation, starting, and freezing based on input parameters.
2107	CreateContainers launches multiple containers concurrently and returns the total duration.
2108	GetContainers retrieves containers with a specific config key and returns them along with any errors encountered.
2109	StartContainers starts multiple containers concurrently, logging progress and errors, and returns the total duration.
2110	setQueryParam adds or updates a query parameter in a URI and returns the modified URI as a string.
2111	GetImages retrieves all images using ProtocolLXD's queryStruct method.
2112	GetImageFile fetches an image file using a fingerprint and request, delegating to GetPrivateImageFile.
2113	GetImageSecret retrieves an image secret using its fingerprint and returns the secret or an error.
2114	GetPrivateImage fetches an image using its fingerprint and optional secret, returning the image data, ETag, and any errors encountered.
2115	GetPrivateImageFile fetches an image file from a private repository, handling both Unix socket and HTTP connections based on input parameters.
2116	GetImageAliases retrieves image aliases from LXD and returns them or an error.
2117	tryCopyImage attempts to copy an image from multiple URLs, handling aliases and errors.
2118	CopyImage transfers an image from a source server to the target server, handling authentication, aliases, and other parameters.
2119	UpdateImage sends a PUT request to update an image and returns an error if it fails
2120	DeleteImage sends a DELETE request to remove an image by fingerprint and returns the operation or an error.
2121	RefreshImage sends a POST request to refresh an image and returns an operation or an error if the server lacks the required extension.
2122	CreateImageAlias sends a POST request to create an image alias and returns an error if unsuccessful.
2123	UpdateImageAlias updates an image alias with new details and checks the ETag for concurrency control.
2124	RenameImageAlias sends a POST request to rename an image alias and returns an error if the request fails
2125	DeleteImageAlias sends a DELETE request to remove an image alias and returns an error if the request fails
2126	Open will attempt to open a SQLite database file located at dir/local.db and return the DB object or an error if it fails
2127	EnsureSchema updates the database schema, runs hooks, and handles backups.
2128	FilesystemDetect identifies the type of filesystem at a given path and returns its name or an error.
2129	Schema creates a new schema from updates and applies freshSchema to it
2130	updateFromV37 updates cluster configuration from version 37, copying https_address if clustering enabled.
2131	ArchitectureGetLocal returns local machine architecture or default on error
2132	NewController initializes a controller for interacting with MAAS, connecting to it using a URL, API key, and specifying a machine. It returns an error if any step fails.
2133	CreateContainer initializes a new container with specified name and interfaces, handling errors during device creation and setup.
2134	DefinedContainer checks if a container with the given name exists on the machine and returns a boolean indicating its existence along with any errors encountered during the process.
2135	UpdateContainer updates network interfaces for a container based on provided specifications, handling additions, deletions, and updates.
2136	RenameContainer updates a container's name by sending a PUT request to the server.
2137	DeleteContainer removes a container by name, returning an error if it fails.
2138	Add updates to Schema's updates slice.
2139	ensureSchemaTableExists checks if a schema table exists and creates it if it doesn't, returning any errors encountered during the process
2140	queryCurrentVersion checks database schema versions and inserts missing ones, returning the highest version or an error.
2141	ensureUpdatesAreApplied will apply pending database schema updates using a transaction, executing hooks before each update and recording applied versions, returning an error if any step fails
2142	checkSchemaVersionsHaveNoHoles verifies consecutive version numbers for gaps.
2143	checkAllUpdatesAreApplied verifies all database schema updates have been applied correctly
2144	formatSQL formats SQL statements by adding newlines before commas for better readability, excluding lines with UNIQUE constraints.
2145	GetAllXattr retrieves all extended attributes of a file and returns them as a map, handling errors if the attributes change or are invalid.
2146	GetErrno extracts the underlying errno from a given error and returns it along with a boolean indicating success.
2147	Uname retrieves system information using syscall and converts integer arrays to strings before returning them.
2148	RegisterStmt assigns a unique code to an SQL statement and returns it.
2149	PrepareStmts prepares SQL statements and returns a map of codes to statement objects along with any errors encountered.
2150	NewGateway creates a new Gateway instance with the given database, certificate, and options, initializing it and returning any errors encountered.
2151	DialFunc returns a function to establish network connections using either a memory dialer or a network dialer with TLS certificates.
2152	Shutdown will stop the database gateway, close the server, sync data, unset memory dial, and handle any errors during raft shutdown.
2153	Sync will attempt to dump the database to disk and log any errors encountered.
2154	Reset shuts down the gateway, removes global files, updates Raft nodes, sets new cert, and initializes gateway.
2155	LeaderAddress retrieves the leader's address from a gateway, handling both Raft and non-Raft scenarios with timeouts and retries.
2156	waitLeadership will retry up to 80 times every 250ms until the RAFT node becomes leader or return an error
2157	currentRaftNodes returns a list of Raft nodes and an error if the Gateway's raft instance is not initialized or fetching server addresses fails.
2158	cachedRaftNodes retrieves raft node addresses from the database with transaction handling and returns them or an error.
2159	dqliteMemoryDial returns a dial function that connects to a Unix socket using the listener's address.
2160	DqliteLog formats and logs messages at different levels using a switch statement.
2161	MetadataAsMap converts response metadata to a map, returning it and any errors encountered.
2162	MetadataAsOperation converts response metadata to operation struct and returns it with potential error
2163	MetadataAsStringSlice converts response metadata to a string slice and returns it along with any errors encountered during conversion.
2164	MetadataAsStruct unmarshals JSON metadata into a target struct, returning an error if unsuccessful.
2165	Load reads a CSV file and adds records to a report, returning an error if any step fails.
2166	Write CSV report to file, log on success, return error if failed
2167	AddRecord adds a CSV record with timestamp, duration, label, and success status to the report.
2168	LoadConfig reads a YAML config file, decodes it, sets defaults, applies static remotes, and upgrades users to simplestreams if needed.
2169	SaveConfig saves a modified configuration to a specified path, excluding certain static remotes.
2170	Get will open a file at the given path within a chroot environment and return its contents as a reader, or an error if the path is invalid or inaccessible.
2171	ConfigPath combines the ConfigDir with additional paths and returns the joined path.
2172	ServerCertPath returns the path to a server certificate file based on the remote address.
2173	NewConfig initializes a Config struct with specified directory and optional default settings.
2174	checkForPreDumpSupport determines whether pre-dump support is enabled based on CRIU response and configuration settings, returning a boolean indicating support and the maximum number of iterations.
2175	preDumpLoop performs a CRIU pre-dump, sends it using Rsync, reads stats, checks skipped pages against threshold, updates final status, and sends sync message.
2176	newRoot initializes a Cobra command for LXD code generation with a placeholder implementation.
2177	APIExtensionsCount returns the total number of API extensions, adjusted by an optional artificial bump from an environment variable.
2178	SelectURIs executes a SQL statement, retrieves URIs using a formatter function, and returns them along with any encountered errors.
2179	SelectStrings executes a SQL query on a transaction and returns a slice of strings from the result set, handling errors during scanning.
2180	scanSingleColumn executes a SQL query on a transaction and scans each row using a provided scanning function, handling errors appropriately.
2181	LazyHandler processes a handler, evaluating lazy functions and handling errors.
2182	Callers retrieves the stack trace of the caller and returns it as a slice of Call objects.
2183	name method returns the function name for a given call pointer
2184	TrimBelow removes leading calls from trace until it matches given call or trace becomes empty
2185	TrimAbove removes calls above the given call from the trace.
2186	TrimBelowName removes all trace entries below the specified name.
2187	TrimAboveName will remove trace entries above the specified name and return the modified trace.
2188	TrimRuntime removes runtime entries from the trace.
2189	GetCaps retrieves the security capability from xattrs of a given path and returns it as bytes or an error if not found.
2190	SetCaps applies file capabilities to a path and returns an error if unsuccessful.
2191	ReadCloser's Read method is called, then ProgressTracker updates total and calls update with number of bytes read.
2192	Supported checks if quota is supported for a given path and returns a boolean and error
2193	GetProject retrieves a project ID from a given path using ioctl and returns it as a uint32, handling errors if the retrieval fails.
2194	SetProject sets the project ID for a given path using ioctl and returns an error if it fails.
2195	DeleteProject will unset a project's quota and remove it from the specified path, returning an error if either operation fails
2196	GetProjectUsage fetches disk usage for a project by ID and returns the size or an error.
2197	SetProjectQuota sets the project quota for a given ID and path, returning an error if unsuccessful.
2198	backupLoadByName retrieves a backup by name and loads its associated container, returning a backup struct or an error
2199	backupCreate creates a backup, handles existing backups, loads the backup, creates an empty snapshot, and cleans up on failure.
2200	Rename will rename a backup and its associated files and update the database record
2201	`Delete` method on `backup` struct calls `doBackupDelete` to remove backup and returns any errors encountered.
2202	backupFixStoragePool updates backup.yaml files to fix storage pool references.
2203	Count executes a SQL query to count rows in a table based on optional conditions and returns the count or an error.
2204	CountAll retrieves table counts from a SQLite database and returns them in a map, handling errors appropriately.
2205	InitTLSConfig returns a TLS configuration with specified cipher suites and settings.
2206	copyContainerThinpool creates a snapshot, generates a new UUID, and handles mounting/unmounting during the process.
2207	copyContainerLv checks if target container exists, creates it if necessary, starts containers, copies data using rsync, and sets read-only flag if specified.
2208	copyContainer will copy a container from source to target, handling thinpool optimizations and applying templates, returning any errors encountered
2209	copyVolume copies a volume from a source to a target mount point handling thinpool volumes separately
2210	GetPrivateImage returns an error indicating private images are unsupported by the simplestreams protocol
2211	GetPrivateImageFile returns an error indicating private images aren't supported by the simplestreams protocol
2212	GetImageAliasNames retrieves image alias names using a client and returns them along with any errors encountered.
2213	ProtoRecv reads a binary message from a WebSocket connection and unmarshals it into a protocol buffer message.
2214	ProtoSend sends a protobuf message over a websocket connection
2215	ProtoSendControl sends control message over websocket with success status and error message.
2216	Read from stdinMirror and handle escape sequence for 'q'.
2217	doContainersGetFromNode fetches containers from a specified node using a timeout mechanism.
2218	Retry attempts to execute a function up to 5 times, logging errors and retrying on retriable issues.
2219	IsRetriableError checks if an error is retryable based on its type and message.
2220	AppArmorProfile reads the current profile from /proc/self/attr/current and returns it after trimming whitespace, or an empty string on error.
2221	StoragePoolVolumeCreate will create a BTRFS storage volume and apply a quota if specified.
2222	ContainerStorageReady checks if a Btrfs subvolume exists at the mount point of a given container.
2223	ContainerCreateFromImage creates a BTRFS storage volume for a container using an image, handling mounts and snapshots.
2224	ContainerSnapshotRename renames a BTRFS snapshot subvolume and logs the operation.
2225	ContainerSnapshotCreateEmpty creates an empty BTRFS snapshot and sets up necessary mount points.
2226	btrfsSubVolumesDelete deletes a Btrfs subvolume and its sub-subvolumes, returning an error if any deletion fails
2227	isBtrfsSubVolume checks if a given path is a Btrfs subvolume by verifying its inode number
2228	SelectConfig retrieves configuration from a database table based on a query and returns a map of key-value pairs along with any errors encountered.
2229	UpdateConfig updates config entries for a given table, handling both inserts and deletes.
2230	deleteConfig deletes rows from a specified table where keys match those provided, returning an error if unsuccessful
2231	FormatSection appends a header and indents content, adding a section separator when needed
2232	GetProjects retrieves all projects from the LXD server and returns them as a list of api.Project objects, or an error if the "projects" API extension is not available.
2233	GetProject fetches a project by name, returns it along with ETag and an error if the "projects" extension is missing or fetching fails
2234	CreateProject checks if the server supports projects and sends a POST request to create a new project, returning an error if unsuccessful.
2235	UpdateProject updates a project's details on the LXD server, returning an error if the operation fails.
2236	RenameProject sends a POST request to rename a project and returns an operation or an error.
2237	Reader's Read method retries on EAGAIN or EINTR errors.
2238	Writer's Write method retries on EAGAIN or EINTR errors
2239	NewCanceler initializes a new canceler instance and locks it before setting up a request cancellation channel map.
2240	Cancelable checks if there are any cancel requests in the channel.
2241	Canceler's Cancel method closes all cancellation channels and returns an error if cancelation isn't possible.
2242	CancelableDownload sends HTTP request and returns response, cancellation channel, and error.
2243	clusterGet retrieves cluster info, handling transactions and errors.
2244	clusterGetMemberConfig retrieves configuration keys for storage pools and networks, excluding volatile properties, returning them as ClusterMemberConfigKey objects.
2245	clusterPutDisable stops clustering by closing the DB, removing cert files, resetting the gateway, re-opening the DB, stopping tasks, and removing the cluster flag.
2246	tryClusterRebalance attempts to connect to the cluster leader and trigger a rebalance operation, returning any errors encountered.
2247	internalClusterPostRebalance redirects requests to the cluster leader or handles rebalancing if the current node is the leader.
2248	internalClusterPostPromote processes a promotion request, validates Raft nodes, promotes them, and returns a response.
2249	Filters extracts and sorts object names based on a given entity prefix.
2250	Parse will extract a struct from a package and return its mapping along with an error if not found or parsing fails.
2251	findStruct searches for a struct type by name in the given scope and returns it if found.
2252	parseStruct extracts fields from a Go struct, including nested structs, returning them and handling errors
2253	GetProfileNames fetches profile names from LXD and returns them as a list.
2254	GetProfiles fetches all LXD profiles returning them or an error
2255	GetProfile fetches a profile by name, returning the profile data, ETag, and any errors encountered during the process.
2256	CreateProfile sends a POST request to create a profile and returns an error if unsuccessful.
2257	UpdateProfile sends a PUT request to update a profile and returns an error if it fails.
2258	RenameProfile sends a POST request to rename a profile and returns an error if unsuccessful
2259	Load populates a new Map with schema and values, returning any errors encountered during initialization.
2260	Dump method returns a map of visible schema values excluding defaults.
2261	GetRaw retrieves a value from a map using a given name, returning the default value if the key does not exist.
2262	GetString retrieves a string value from the map using the specified name after asserting its type.
2263	GetBool retrieves a boolean value from the map using the specified name after asserting its type.
2264	GetInt64 retrieves an integer from a map after asserting its type and converting it to int64.
2265	update method updates a Map with new values, returns list of updated keys and any errors encountered.
2266	set updates or deletes a map value based on the provided key and returns whether the operation was successful and any errors encountered
2267	DoesSchemaTableExist checks if a specific schema table exists in a SQLite database using a transaction and returns a boolean indicating its existence along with any errors encountered during the process.
2268	selectSchemaVersions retrieves all schema versions from the database in ascending order
2269	selectTablesSQL retrieves table names from a SQLite database using a transaction, returning them as a slice or an error if the query fails.
2270	createSchemaTable creates a table named "schema" within a given transaction context and returns an error if the operation fails.
2271	insertSchemaVersion inserts a new schema version into the database and returns an error if it fails
2272	NewState initializes a new state object with the given dependencies.
2273	containerLXCUnload removes finalizers and releases resources associated with a container.
2274	containerLXCInstantiate creates a new containerLXC instance from db.ContainerArgs.
2275	initStorage initializes container storage or returns an error if it fails
2276	OnNetworkUp updates device name and sets up host VETH device
2277	setupHostVethDevice configures network settings for a container, setting up host device resolution, refreshing traffic control limits, and configuring static routes, returning any encountered errors.
2278	getLxcState returns the current state of an LXC container or an error if it cannot determine the state within 5 seconds
2279	StorageStartSensitive initializes storage and starts sensitive operation based on snapshot status.
2280	deviceExistsInDevicesFolder checks if a device exists in the devices folder using a specified prefix and path
2281	createDiskDevice creates a disk device with specified properties and returns its path or an error
2282	setNetworkRoutes configures network routes for a container based on device settings.
2283	containerLXC's Path method returns a container's path based on its name, project, and whether it's a snapshot.
2284	maasInterfaces filters network devices and constructs container interface objects with IP addresses.
2285	getSystemHandler returns a system handler based on syslog configuration and debug mode
2286	findNvidiaMinor retrieves the Nvidia GPU minor number from /proc or uses an alternative method if unsuccessful
2287	GetLogger configures logger based on syslog, logfile, verbose, debug flags, and customHandler returns a configured logger or error
2288	SetLogger replaces the current logger with a new one and returns a function to restore the original logger.
2289	WaitRecord waits on a log record or times out after a specified duration, returning the record or nil if timed out.
2290	AddContext adds context to a logger and returns it or logs an error if downcasting fails
2291	NewDottedVersion parses a version string into a DottedVersion struct or returns an error if the format is invalid.
2292	Parse checks if input string matches version pattern and returns DottedVersion or error
2293	String method returns formatted version string based on Major, Minor, and optional Patch values
2294	Compare two dotted version numbers and return the difference.
2295	projectCreateDefaultProfile creates a new default profile for a given project in the database.
2296	projectChange updates project settings, validates config, and manages profiles accordingly.
2297	projectIsEmpty checks if a project has no entities or only the default profile used.
2298	GetCertificateFingerprints fetches and parses certificate fingerprints from LXD API.
2299	GetCertificates fetches all certificates using LXD API and returns them along with any errors encountered.
2300	GetCertificate fetches a certificate by fingerprint and returns it along with its ETag and any errors encountered.
2301	CreateCertificate sends a POST request to create a certificate and returns any errors encountered.
2302	UpdateCertificate updates a certificate on the server and returns an error if the update fails
2303	DeleteCertificate sends a DELETE request to remove a certificate by fingerprint and returns an error if unsuccessful
2304	containerMetadataTemplatesGet handles requests for container metadata templates, forwarding them if necessary, loading the container, starting storage if needed, processing the request to list or retrieve a specific template, and returning the appropriate response.
2305	containerMetadataTemplatesPostPut handles POST/PUT requests for container metadata templates, validates paths, checks existence, and saves new templates.
2306	containerMetadataTemplatesDelete handles deletion of a container metadata template, forwarding requests if necessary, loading the container, starting storage if required, checking template existence, deleting the template, and returning a response.
2307	getContainerTemplatePath constructs the path to a template file within a container's directory structure, ensuring the filename does not contain invalid characters.
2308	Error implements the error interface, returning a descriptive message based on its fields.
2309	ErrorList's Error method returns a formatted error message or "no errors" if empty.
2310	add method appends an Error to ErrorList with specified name, value, and reason
2311	UpdateSchema updates database schemas for cluster and node, returning an error if any update fails.
2312	doProfileUpdateCluster updates cluster profiles and returns an error if any container fails to update.
2313	doProfileUpdateContainer updates a container's configuration based on profiles and returns an error if the operation fails.
2314	getProfileContainersInfo retrieves container info from the database for a given profile and project, handling transactions and errors gracefully.
2315	GetNetworkNames retrieves network names from the server, handling errors and parsing responses.
2316	GetNetworks retrieves all networks from the LXD server and returns them as an array of api.Network objects. If the "network" API extension is not available, it returns an error.
2317	GetNetwork fetches a network resource by name and returns its details along with ETag and an error if any.
2318	GetNetworkLeases retrieves network lease information for a specified network and returns it as a list of NetworkLease objects or an error if the required API extension is missing or the query fails.
2319	GetNetworkState retrieves network state from the server and returns it or an error if the "network_state" extension is missing or fetching fails
2320	CreateNetwork checks for the "network" API extension and sends a POST request to create a new network, returning any errors encountered.
2321	UpdateNetwork updates a network on the server, returning an error if the operation fails.
2322	RenameNetwork checks if the server supports the "network" API extension, then sends a POST request to rename a network and returns any errors encountered.
2323	Open initializes a new SQL database using the dqlite driver and returns it or an error.
2324	URLEncode will take a path and query parameters, encode them, and return the URL string along with any errors encountered.
2325	IsUnixSocket checks if a given path represents a Unix socket file.
2326	HostPath prefixes relative paths with the current working directory of the parent process if running inside a snap package and ensures the path is snap-aware.
2327	FileMove attempts to rename a file, falls back to copying if fails, then removes the old file.
2328	DirCopy copies a directory recursively and returns an error if any step fails.
2329	StringMapHasStringKey checks if any key exists in the given map.
2330	TextEditor opens a text editor for editing input content and returns the edited content or an error if the editor fails.
2331	WriteTempFile creates a temporary file in specified directory with given prefix and writes content to it, returning the filename and any errors encountered.
2332	RenderTemplate processes a template string with context, rendering it and recursively handling nested templates until no more can be found.
2333	Every creates a schedule that runs at regular intervals, skipping the first run if specified.
2334	StoragePoolMount checks if the storage pool's source is absolute, mounts it if necessary, handles concurrent operations, and returns success or an error.
2335	Dump function generates a SQL dump of a database schema and optionally its data, handling transactions and errors gracefully.
2336	dumpTable generates SQL INSERT statements for all rows in a specified table within a given schema.
2337	ProjectHasProfiles checks if a cluster transaction has profiles for a given name and returns a boolean and an error.
2338	ProjectNames fetches project names from the database and returns them along with any errors encountered during the process.
2339	ProjectMap retrieves a project map from the database and returns it along with any errors encountered.
2340	ProjectHasImages checks if images feature is enabled for a given project name and returns a boolean and error.
2341	ProjectUpdate updates a project's details and config, returning an error if any step fails.
2342	GetCluster retrieves cluster info from LXD server and returns it along with ETag and error.
2343	UpdateCluster updates the cluster configuration and returns an operation or an error if clustering extensions are missing or if there's an issue with the request.
2344	GetClusterMemberNames retrieves cluster member names from the server, returning an error if the clustering extension is missing or the query fails.
2345	GetClusterMembers retrieves cluster members from the server, returning them or an error if clustering is unsupported.
2346	GetClusterMember retrieves a cluster member's details and ETag or errors if clustering is unsupported.
2347	RenameClusterMember updates a cluster member's details or returns an error if the clustering extension is missing
2348	Disconnect method removes event listener from global list and marks it as disconnected
2349	CompareVersions checks two version pairs and returns an integer indicating their relationship or an error if they are inconsistent.
2350	HasClientCertificate checks if client certificate and key files exist at specified paths.
2351	GenerateClientCertificate will check if client certificate exists, generate it if not, and return an error if generation fails
2352	LoadModule loads a kernel module or returns an error if it already exists
2353	Parse function reads Go source files from GOPATH or default directory, parses them, and returns an AST package.
2354	PprofAddress returns the address of the pprof listener or an empty string if it doesn't exist
2355	PprofUpdateAddress updates the address for pprof monitoring and handles errors during listener setup or rollback.
2356	NewMethod creates a new Method instance with provided parameters and returns it along with any errors encountered.
2357	Generate will process different types of methods based on their kind and write to a buffer, returning an error if the method kind is unknown
2358	fillSliceReferenceField populates a slice reference field using a buffer and returns an error if fetching fails
2359	StoragePoolID retrieves the ID of a storage pool by name or returns an error if not found or ambiguous.
2360	StoragePoolIDsNotPending retrieves IDs of non-pending storage pools from the database and returns them as a map.
2361	StoragePoolNodeJoin adds a new entry to the storage pools nodes table and returns an error if it fails.
2362	StoragePoolNodeJoinCeph adds a new Ceph node to a pool and copies its volumes and configurations.
2363	StoragePoolConfigAdd adds a storage pool configuration to a cluster transaction and returns an error if it fails.
2364	StoragePoolCreatePending checks for or creates a pending storage pool, ensuring consistency and proper node configuration.
2365	StoragePoolCreated updates the state of a storage pool to created.
2366	StoragePoolErrored updates the state of a storage pool to errored and returns any resulting error.
2367	StoragePoolNodeConfigs retrieves storage pool configurations for specified nodes, returning an error if the pool isn't defined on some nodes.
2368	StoragePoolsGetDrivers retrieves distinct storage pool drivers from the database, returning them as a slice or an error if no drivers are found.
2369	StoragePoolGetID retrieves a storage pool's ID by name or returns an error if not found.
2370	StoragePoolGet retrieves a storage pool by name, returning its ID, details, and an error if not found or invalid.
2371	storagePoolNodes retrieves node names associated with a given storage pool ID within a transaction.
2372	StoragePoolConfigGet retrieves a storage pool's configuration from the database and returns it as a map.
2373	StoragePoolCreate inserts a new storage pool and returns its ID or an error.
2374	storagePoolConfigAdd inserts config values into the database for a given pool and node, skipping empty values and handling specific keys differently.
2375	StoragePoolUpdate updates a cluster's storage pool with new details and configuration within a transaction.
2376	StoragePoolConfigClear deletes entries from storage_pools_config where storage_pool_id matches poolID and node_id matches or is null
2377	StoragePoolDelete deletes a storage pool by name and returns the deleted pool or an error.
2378	StoragePoolVolumesGetNames retrieves volume names from a database for a given pool ID and node ID, returning them as a slice or an error if the query fails.
2379	StoragePoolVolumesGet fetches storage volumes for a given project, pool ID, and types, joining with projects table.
2380	StoragePoolNodeVolumesGet retrieves storage volumes for a specified node and volume types.
2381	storagePoolVolumesGet retrieves storage volumes by project, pool ID, node ID, and volume types, returning them or an error if none found.
2382	StoragePoolVolumesGetType retrieves storage volumes of a specific type from a cluster's database, returning their names and handling errors.
2383	StoragePoolVolumeSnapshotsGetType fetches snapshot names from the database based on volume details.
2384	StoragePoolNodeVolumesGetType retrieves node volumes of a specific type from a storage pool.
2385	StoragePoolVolumeGetType retrieves storage volume details by type, project, name, and other identifiers, returning volume ID, configuration, and description.
2386	StoragePoolNodeVolumeGetType delegates to StoragePoolNodeVolumeGetTypeByProject with "default" project.
2387	StoragePoolNodeVolumeGetTypeByProject calls StoragePoolVolumeGetType with additional nodeID parameter.
2388	StoragePoolVolumeUpdate updates a volume's details within a cluster transactionally.
2389	StoragePoolVolumeDelete deletes a volume from the cluster and handles replication if needed.
2390	StoragePoolVolumeRename updates a volume's name within a cluster and handles transactions.
2391	storagePoolVolumeReplicateIfCeph replicates volume changes on Ceph pools
2392	StoragePoolVolumeCreate creates a new volume in a storage pool and returns its ID or an error.
2393	StoragePoolVolumeGetTypeID retrieves a volume's type ID based on project, name, type, pool, and node IDs, returning an error if not found.
2394	StoragePoolNodeVolumeGetTypeID retrieves volume type ID using default pool name.
2395	StoragePoolVolumeTypeToName maps a volume type to its corresponding name or returns an error for invalid types.
2396	DevicesAdd inserts devices and their configurations into a database transactionally.
2397	Devices retrieves device information based on project and query parameters, handling both profile and container types.
2398	Patches will execute a SQL query to retrieve patch names and return them as a slice of strings, handling any errors that occur during the process.
2399	PatchesMarkApplied inserts a patch record with the current timestamp into the database and returns any errors encountered
2400	entityType generates a type name based on package and entity names
2401	entityPost generates a post action for a given entity
2402	stmtCodeVar constructs a variable name based on entity, kind, and optional filters
2403	destFunc generates a function string based on input parameters and field names.
2404	CompareConfigs checks for differences between two configuration maps, excluding specified keys, and returns an error if any discrepancies are found.
2405	CopyConfig creates a deep copy of a configuration map.
2406	NewNotifier creates a notifier based on cluster state and policy, sending notifications to online peers asynchronously.
2407	Events returns a function to update event listeners and a schedule to run it every second.
2408	eventsConnect establishes an event listener at a given address using TLS and returns it or an error
2409	StoragePoolInit initializes storage pool by calling StorageCoreInit and returns any errors encountered.
2410	getAAProfileContent constructs AppArmor profiles based on container configurations and system state.
2411	AALoadProfile loads an AppArmor profile for a container, updating it if necessary.
2412	AADestroy unloads AppArmor policies for a container if it has admin privileges or stacking enabled.
2413	AAParseProfile checks if AppArmor is available and runs the parse command if so.
2414	getSystemHandler returns a log handler based on syslog, debug mode, and log format
2415	NotifyUpgradeCompleted sends a notification to all clients when an upgrade is completed, handling errors and ensuring successful communication.
2416	KeepUpdated will return a function to update state and a schedule to run every 5 minutes
2417	maybeUpdate checks if the cluster node needs updating and triggers the update process if necessary
2418	NewServer creates a new server instance with API credentials and authentication details.
2419	StartStatusCheck initializes status check, runs goroutine to periodically flush cache if status changes.
2420	SyncProjects updates RBAC resources based on server's ProjectsFunc, handling errors and locking resource map.
2421	AddProject updates RBAC and project map with given id and name, returning error if update fails
2422	DeleteProject removes a project by ID and updates RBAC and resource map.
2423	RenameProject calls AddProject to rename a project by adding it with the same ID and new name, returning any errors encountered.
2424	IsAdmin checks if a user has admin privileges by verifying their username against cached permissions or syncing them if necessary.
2425	HasPermission checks user permissions for a project and returns true if allowed
2426	rsyncSend transfers files over websocket and handles errors
2427	rsyncSendSetup sets up rsync command execution over Unix socket, returns command, connection, and error
2428	tlsClientConfig creates a TLS configuration using certificate information from CertInfo.
2429	tlsCheckCert verifies TLS certificate trust status
2430	internalClusterContainerMovedPost handles container movement post request by processing project and container name, creating mount point, and returning response.
2431	containerPostCreateContainerMountPoint ensures proper setup of container and its snapshots on target node.
2432	Contains checks if a device exists in a map with a given key and returns true if they match.
2433	Update will compare two device lists and return devices to remove, add, update, and a diff of updated devices
2434	DeviceNames returns a sorted list of device names.
2435	Infof logs a message using the specified format and arguments if a logger is available
2436	Debugf logs debug messages using the provided format and arguments if a logger is available.
2437	Warnf logs a warning message using the provided format and arguments if the Log object is not nil.
2438	Errorf logs an error message using the provided format and arguments if the Log object is not nil.
2439	Critf logs critical messages using the provided format and arguments if a logger is available.
2440	eventForward processes events based on type and metadata, forwarding them or logging errors as necessary.
2441	StorageProgressReader returns a function that wraps an io.ReadCloser to track progress using an operation object and description.
2442	StorageProgressWriter returns a WriteCloser that tracks progress using the provided operation, key, and description.
2443	GetLSBRelease reads OS release info from /etc/os-release or /usr/lib/os-release, returning a map and error.
2444	Reset will write Go package content to a specified path or stdout, handling imports and errors.
2445	Append will write a code snippet to a specified file or stdout, handling errors during file operations and snippet generation.
2446	ContainerToArgs converts a container to its argument representation, initializing Devices if nil.
2447	ContainerNames retrieves container names from the database for a given project and container type.
2448	ContainerNodeAddress fetches a container's node address from the database based on project and container name, returning an error if the object does not exist or if more than one node is associated with the container.
2449	ContainersListByNodeAddress retrieves container names by node address, filtering offline nodes and returning a map of addresses to container names.
2450	ContainerListExpanded fetches expanded container list with associated profiles.
2451	ContainersByNodeName fetches container names and their corresponding node names from the database based on the project name.
2452	SnapshotIDsAndNames retrieves container IDs and names from the database based on a given prefix and returns them as a map.
2453	ContainerNodeList fetches container list for the local node with regular type.
2454	ContainerNodeProjectList retrieves containers based on project, node, and type, returning a list or an error.
2455	ContainerRemove deletes a container within a project using a transactional operation.
2456	ContainerProjectAndName retrieves project and container names by ID from the database, returning an error if not found.
2457	ContainerConfigClear deletes records from multiple tables related to a container ID and returns an error if any deletion fails.
2458	ContainerConfigGet retrieves a config value from the database for a given container ID and key, returning an error if the object does not exist.
2459	ContainerConfigRemove deletes a config entry from the database for a given container ID and key, returning an error if unsuccessful.
2460	ContainerSetStateful updates a container's stateful status in the database and returns any errors encountered
2461	ContainerProfilesInsert inserts profiles into containers_profiles table and handles transaction and errors
2462	ContainerProfiles retrieves container profiles for a given ID and returns them as a list.
2463	ContainerConfig retrieves container configuration from the database and returns it as a map with key-value pairs.
2464	ContainerSetState updates the container's power state in the database using a transaction.
2465	ContainerUpdate updates container details in database.
2466	ContainerLastUsedUpdate updates the last use date for a container in the database and returns an error if the update fails.
2467	ContainerGetSnapshots retrieves snapshots for a container and returns them as a list of strings.
2468	ContainerGetSnapshotsFull retrieves snapshots for a container and returns them along with any errors encountered.
2469	ContainerNextSnapshot finds next available snapshot number based on given project, container name, and pattern.
2470	ContainerPool retrieves a container's storage pool using project and container name, returning the pool name or an error if not found.
2471	ContainerGetBackup retrieves backup details for a specified project and container, returning an error if no such object exists.
2472	ContainerGetBackups retrieves container backups for a given project and name from the database, returning a list of backup names and an error if any occurs during the process.
2473	ContainerBackupCreate inserts a new backup record into the database and returns an error if the name already exists or there's a transaction issue.
2474	ContainerBackupRemove deletes a backup container by name and returns an error if it fails.
2475	ContainerBackupRename updates container backup name within a transaction, logging the query details.
2476	ContainerBackupsGetExpired retrieves expired container backups from the database based on their expiry date.
2477	DefaultOS initializes a new OS instance with default directory paths and sets up an Inotify watch.
2478	Init initializes OS struct fields and returns an error if any step fails.
2479	GetWebsocket retrieves a websocket connection using the operation's ID and secret, returning an error if unsuccessful.
2480	Refresh updates the operation's state with the latest version from the repository and returns any errors encountered.
2481	CancelTarget cancels the associated target operation and returns an error if none exists
2482	GetTarget retrieves the target operation and returns it along with any errors encountered.
2483	up method initializes and starts various listeners based on configuration, handling errors and logging status updates.
2484	Endpoints.Down stops all listeners and tomb processes, returning any errors encountered.
2485	serveHTTP binds listeners to servers and logs the operation
2486	closeListener will close a listener and remove it from the map, returning any errors encountered
2487	activatedListeners filters and categorizes systemdListeners based on their type, applying TLS to TCP listeners.
2488	CandidServer retrieves configuration values for API URL, key, expiry, and domains from Config struct.
2489	RBACServer extracts and returns various configuration values from a Config object.
2490	AutoUpdateInterval retrieves auto update interval from config in hours.
2491	MAASController retrieves API URL and key from config.
2492	OfflineThreshold returns the cluster's offline threshold duration in seconds.
2493	ConfigGetString retrieves a string value from a cluster's configuration using a given key and returns it along with any potential errors.
2494	ConfigGetBool fetches a boolean value from the cluster configuration and returns it along with any errors encountered.
2495	ConfigGetInt64 fetches an int64 value from cluster configuration using a given key.
2496	ClusterAddress returns the address of the cluster endpoint or an empty string if it's not available.
2497	Debug logs a message with file, line, and function name if Log is not nil
2498	RestServer initializes and configures an HTTP server with routes and handlers based on the daemon's gateway and API endpoints.
2499	projectParam extracts the "project" query param from request or returns "default" if not present
2500	queryParam extracts the value of a specified key from a URL's query parameters, returning an empty string if the key is not found or if parsing fails.
2501	newDb creates a Cobra command for database operations with subcommands for schema and mapper generation.
2502	Description returns a human-readable string for each OperationType enum value.
2503	Permission method returns a permission string based on operation type.
2504	OperationsUUIDs retrieves UUIDs from operations table for given node ID.
2505	OperationNodes fetches distinct node addresses for a given project from the database.
2506	OperationByUUID fetches an operation by UUID and returns it or an error if not found or ambiguous.
2507	OperationAdd inserts or updates an operation in the database and returns the number of affected rows or an error
2508	OperationRemove will execute a delete query on operations table where uuid matches and verify if exactly one row was affected, returning an error if not.
2509	operations retrieves database rows matching conditions and returns them as Operation structs.
2510	expireLogsTask sets up a daily task to expire log files using an operation object.
2511	absPath calculates the absolute path based on the caller's file and appends a given path.
2512	Keys returns sorted list of schema keys
2513	Schema.Defaults returns a map of default values for each field.
2514	mustGetKey retrieves a key from the schema or panics if the key does not exist
2515	assertKeyType checks if the specified key's type matches the expected type and panics if they don't match.
2516	validate checks if a given value is valid according to the Key's rules and returns an error if it is not
2517	GetStoragePoolVolumes fetches storage pool volumes using LXD protocol, returning a list of volumes or an error if the "storage" extension is missing or fetching fails.
2518	GetStoragePoolVolume fetches storage volume details from LXD server and returns the volume object, ETag, and an error.
2519	CreateStoragePoolVolume sends a POST request to create a storage pool volume, returning an error if the "storage" extension is missing or the request fails.
2520	CreateStoragePoolVolumeSnapshot sends a POST request to create a storage pool volume snapshot and returns an operation or an error
2521	GetStoragePoolVolumeSnapshots retrieves storage pool volume snapshots using the LXD API and returns them or an error if the required extension is missing or the query fails.
2522	GetStoragePoolVolumeSnapshot retrieves a storage pool volume snapshot and its ETag, handling errors if the required API extension is missing or the query fails.
2523	UpdateStoragePoolVolumeSnapshot updates a storage pool volume snapshot and returns an error if the operation fails
2524	MigrateStoragePoolVolume sends a POST request to migrate a storage pool volume and returns an operation or an error if the server lacks the necessary extension or the request is invalid.
2525	MoveStoragePoolVolume moves a storage volume from one location to another and returns a RemoteOperation object or an error if the operation fails.
2526	UpdateStoragePoolVolume updates a storage pool volume and returns an error if the operation fails due to missing extensions or other issues
2527	DeleteStoragePoolVolume deletes a storage pool volume and returns an error if the operation fails
2528	RenameStoragePoolVolume checks if the server supports renaming volumes, constructs the API path, sends a POST request to rename a storage pool volume, and returns an error if the operation fails.
2529	doStoragePoolCreateInternal manages storage pool creation, handles notifications, updates configurations, and ensures cleanup on failure.
2530	containerGetParentAndSnapshotName splits a name into parent and snapshot parts returning them along with a boolean indicating if a snapshot was present
2531	containerLoadFromAllProjects fetches all containers across projects and returns them or an error if any project fails to load.
2532	containerLoadNodeAll retrieves all containers from the cluster and loads them internally, returning any errors encountered.
2533	containerLoadNodeProjectAll fetches containers for a project and loads them, returning an error if unsuccessful
2534	heartbeatNode sends a heartbeat request to a specified address using TLS, encodes raftNodes as JSON, sets a timeout, and handles errors or cancellations.
2535	dotPrefixMatch checks if the short string is a prefix match for each member of the full string when split by '.'
2536	ContainerMount checks if a container is mounted using its project, name, and privileged status, returning a boolean indicating success and any errors encountered.
2537	ContainerStorageReady checks if a ZFS filesystem exists for a given container's volume.
2538	AskChoice prompts user for input until valid choice is selected.
2539	AskInt prompts user for an integer input within specified range, returning default if invalid.
2540	AskString prompts user for input, validates it, and returns a valid string or default.
2541	AskPassword prompts user for password twice to ensure accuracy before returning it.
2542	AskPasswordOnce prompts user for password and returns it as string
2543	askQuestion will print a question prompt the user to input an answer using the default answer if no input is provided
2544	readAnswer reads input from stdin, trims newline and whitespace, returns or uses default if empty
2545	profilePost handles renaming a project profile, validating input, checking for conflicts, and updating the database transactionally.
2546	profileDelete deletes a specified profile, ensuring it's not the default or in use, and handles database transactions accordingly.
2547	IsRootDiskDevice checks if a device is the root disk by verifying its type, path, and source.
2548	GetRootDiskDevice identifies and returns the root disk device from a list, or an error if none found or more than one exists.
2549	ForwardedResponse creates a new forwardedResponse instance encapsulating the given client and request objects.
2550	ForwardedResponseIfTargetIsRemote checks if a target node is remote, resolves its address, and forwards the response if necessary.
2551	ForwardedResponseIfContainerIsRemote forwards response if container is remote
2552	ForwardedOperationResponse creates a new response object encapsulating an operation and its associated project
2553	Done marks progress as complete, updates message, handles truncation, and prints to console.
2554	Update progress status, handle terminal rendering, and manage quiet mode.
2555	Warn updates progress renderer with a warning message and timeout, truncating it to fit terminal width.
2556	UpdateProgress updates progress text using provided data.
2557	UpdateOp updates progress renderer based on operation metadata.
2558	updateFromV6 updates zfs.pool_name config across all nodes and returns an error if any step fails
2559	localCreateListener sets up a Unix listener on a specified path, ensuring it's not already running and adjusting permissions, returning the listener or an error.
2560	NewStmt creates a new statement object with the given parameters and returns it along with any errors encountered.
2561	Generate method processes different types of statements based on their kind attribute and invokes corresponding handler functions.
2562	register will add a SQL statement to a buffer with proper formatting and variable naming based on the input parameters
2563	httpsLXD creates a ProtocolLXD instance using the provided URL and ConnectionArgs, initializing it with TLS settings and authentication options before testing the connection.
2564	Container's IsActive method checks its StatusCode and returns true unless it's Stopped or Error.
2565	RaftNodeAddress retrieves a node's address by ID from the database or returns an error if not found.
2566	RaftNodeFirst inserts a new raft node or updates the existing one at the given address, returning an error if unsuccessful.
2567	RaftNodeAdd inserts a new address into raft_nodes table and returns the number of affected rows or an error
2568	RaftNodeDelete removes a node from the database and returns an error if it does not exist.
2569	RaftNodesReplace deletes existing nodes and inserts new ones in the database
2570	initCGroup initializes OS's cgroup controllers based on their existence and logs warnings if missing.
2571	sqliteDirectAccess configures SQLite connection settings for replication safety.
2572	ContainerGet retrieves a container by project and name, returning it or an error if none or multiple match.
2573	ContainerID retrieves a container's ID from the database using project and name parameters, returning an error if the query fails or if multiple rows are returned.
2574	ContainerExists checks if a container exists in a project by ID, returning true if it does and false otherwise with an error if there's an issue other than the object not existing.
2575	ContainsFields checks if all specified fields exist in the mapping with matching names and types.
2576	FieldByName searches for a field by name in the mapping and returns it if found.
2577	FieldColumnName returns a column name for a given field name using the mapping's table name.
2578	FilterFieldByName checks if a field exists and is a column, returning it or an error.
2579	ColumnFields filters out excluded fields and returns only those with type Code equal to TypeColumn
2580	ScalarFields returns a list of fields with "join" config set.
2581	RefFields returns slice of fields with type slice or map
2582	Column returns the column name of a field, formatted according to its configuration or panics if it's not a column type.
2583	ZeroValue returns a default value based on the field type, or panics if the field is not a column.
2584	FieldColumns converts a list of fields to a comma-separated string of column names.
2585	FieldArgs constructs a string from field names and types, separated by commas.
2586	FieldParams converts field names to lowercase and joins them with commas.
2587	FieldCriteria constructs SQL criteria from a list of fields
2588	initDataClusterApply will initialize or update a cluster configuration based on the input config and return an error if any step fails
2589	JsonFormatEx formats JSON data with optional pretty printing and line separation.
2590	formatLogfmtValue formats logfmt values, escaping strings and converting others to strings
2591	ResolveTarget resolves a target to its address within a cluster, returning an error if the target does not exist.
2592	WriteCloser's Write method called, progress tracked, total updated, error returned
2593	updateNodeVersion updates node version and returns error if not exactly one row is affected
2594	selectNodesVersions fetches node versions from a database transaction and returns them as a slice of 2-element integer arrays.
2595	GetArchitectures retrieves local architecture and its personalities, returning a list and any errors encountered.
2596	RuntimeLiblxcVersionAtLeast checks if liblxc version meets or exceeds specified major, minor, and micro versions.
2597	GetExecPath retrieves the executable path from LXD_EXEC_PATH or /proc/self/exe, defaulting to "bad-exec-path" on failure.
2598	Connect establishes an LXD connection using the given address, certificate, and notification flag, returning the server and any errors encountered.
2599	ConnectIfContainerIsRemote connects to a remote container if it's not running locally, returning the server or an error.
2600	ConnectIfVolumeIsRemote checks remote volumes and connects to the appropriate server.
2601	SetupTrust connects to a target LXD node, decodes a certificate, encodes it, creates a new certificate post request, calculates its fingerprint, adds it to the trust store, and returns an error if any step fails.
2602	GetStoragePools retrieves storage pools from the LXD server, returning them or an error if the "storage" API extension is missing or fetching fails.
2603	GetStoragePool retrieves a storage pool by name, returns it along with its ETag, and handles errors if the "storage" extension is missing or the request fails.
2604	CreateStoragePool checks for required extensions and creates a storage pool via API if valid.
2605	UpdateStoragePool updates a storage pool with new settings or returns an error if the "storage" extension is missing.
2606	DeleteStoragePool checks if the storage extension is enabled, sends a DELETE request to remove a storage pool, and returns an error if the operation fails.
2607	GetStoragePoolResources fetches storage pool resources by name and returns them or an error if the "resources" extension is missing or the query fails
2608	initDirs creates directories with specified paths and permissions, returning an error if any creation fails.
2609	query.SelectConfig retrieves config settings from the database and returns them as a map.
2610	UpdateConfig updates the node's configuration using the provided values and returns any errors encountered during the process.
2611	query.SelectConfig retrieves config data from tx and returns it as a map or an error
2612	UpdateConfig updates the configuration in the database using the provided transaction and values.
2613	storagePoolClusterConfigForEtag removes specific keys from a copy of the input configuration map and returns it.
2614	GetEvents initializes a new event listener, manages connections, and spawns watchers to handle events asynchronously.
2615	LogfmtFormat returns a log format that serializes records using the logfmt encoding.
2616	StorageVolumeNodeAddresses retrieves sorted list of storage volume node addresses excluding current node's address.
2617	StorageVolumeNodeGet retrieves the node name associated with a given volume ID from the database, returning an error if no such object exists or if another error occurs during the query.
2618	StorageVolumeConfigGet retrieves configuration for a specific volume from the database and returns it as a map.
2619	StorageVolumeDescriptionGet retrieves a volume's description from the database and returns it or an error if not found.
2620	StorageVolumeIsAvailable checks if a storage volume is available in a Ceph cluster.
2621	StorageVolumeDescriptionUpdate updates a volume's description in the database and returns an error if it fails.
2622	StorageVolumeConfigAdd inserts volume configuration into the database for a given volume ID.
2623	StorageVolumeConfigClear deletes a storage volume config from the database by ID and returns an error if it fails.
2624	storageVolumeIDsGet retrieves IDs of storage volumes based on project, name, type, and pool ID.
2625	StorageVolumeCleanupImages deletes images from storage volumes based on fingerprints and returns an error if execution fails.
2626	StorageVolumeMoveToLVMThinPoolNameKey updates config to use LVM thin pool name and removes old entry, returning error if any step fails.
2627	L formats and appends to buffer with values
2628	code formats the buffer's bytes and returns the formatted code or an error
2629	Pretty formats JSON input with indentation or returns raw input on error.
2630	NetworkPublicKey returns the public key from the certificate while holding a read lock on the endpoints structure.
2631	NetworkPrivateKey returns the network private key from Endpoints after acquiring a read lock.
2632	NetworkCert returns the certificate info after acquiring a read lock
2633	NetworkAddress returns the network address of a listener or empty if none exists
2634	NetworkUpdateAddress updates the endpoint's network address, handling retries and listeners accordingly.
2635	NetworkUpdateCert updates the certificate and configures listeners for network and cluster.
2636	networkCreateListener creates a TCP listener with TLS enabled using the provided address and certificate info, returning the listener or nil on error.
2637	Accept method returns a TLS server connection or an error if the listener fails to accept a connection or the configuration is invalid.
2638	Config updates the listener's TLS configuration with the provided certificate info.
2639	NodeInfo.IsOffline checks if a node is offline based on its heartbeat and a given threshold.
2640	NodeByAddress retrieves a node by its address and returns it along with any errors encountered during the process. If no matching node is found, it returns an empty NodeInfo object and ErrNoSuchObject. If more than one node matches, it returns an error indicating ambiguity.
2641	NodePendingByAddress retrieves a single node's info based on its address or returns an error if not found or multiple matches exist.
2642	NodeByName retrieves a node by name, returning an error if none or multiple match.
2643	NodeName fetches a unique node name from the database or returns an error if the ID is inconsistent.
2644	NodeAddress retrieves a node's address from the database or returns an error if the ID is inconsistent.
2645	NodeIsOutdated checks if any node has a newer version than the current node.
2646	NodesCount will return the number of nodes and an error if counting fails
2647	NodeRename updates a node's name in the database and returns an error if the operation fails or if the new name already exists.
2648	nodes retrieves node information from the database based on conditions and returns a list of NodeInfo objects along with any errors encountered during the process.
2649	NodeAdd inserts a new node with name and address into the nodes table and returns the number of affected rows and an error if any.
2650	NodePending updates the 'pending' status of a node in the database and returns an error if the update fails or affects the wrong number of rows.
2651	NodeUpdate updates a node's details and returns an error if the update fails or affects multiple rows.
2652	NodeRemove deletes a node from the database and returns an error if the deletion fails or affects the wrong number of rows.
2653	NodeHeartbeat updates node's heartbeat and checks if one row was affected.
2654	NodeIsEmpty checks if a cluster node has empty resources and returns a message or error accordingly.
2655	NodeClear deletes a node from the cluster and cleans up associated images.
2656	NodeOfflineThreshold retrieves the cluster offline threshold from the database or returns the default value.
2657	NodeUpdateVersion updates node version and returns error if update fails
2658	Transaction starts a database transaction, executes a function within it, and handles commit or rollback based on the function's result.
2659	rollback will attempt to rollback a transaction and log any errors before returning the original error
2660	ProfileURIs filters and queries URIs based on project and name criteria.
2661	ProfileGet retrieves a unique profile matching the given project and name or returns an error.
2662	ProfileExists checks if a project's profile exists and returns a boolean and error.
2663	ProfileConfigRef filters cluster transactions by project and name, returning a nested map of configuration values.
2664	ProfileUsedByRef filters profiles by project and/or name and returns them indexed by project and name.
2665	ProfileCreate inserts a new profile with its configuration and devices into the database, returning the profile ID or an error.
2666	ProfileRename updates a cluster transaction's profile name and returns an error if unsuccessful or if it affects more than one row.
2667	ProfileDelete executes a delete statement and checks if exactly one row was affected.
2668	ServerTLSConfig initializes TLS configuration with client certificate requirements and optional CA verification.
2669	NetworkInterfaceAddress returns the first non-loopback IP address or empty string if none found.
2670	IsAddressCovered checks if one address covers another by comparing hosts and ports.
2671	SelectObjects executes a SQL query and scans results into destination objects, returning an error if any step fails.
2672	DeleteObject will delete a row from a specified table where the ID matches and return true if exactly one row was deleted, false otherwise, or an error if there's an issue.
2673	loop manages task execution based on a schedule, executing it periodically or immediately, handling errors, and responding to context and reset signals.
2674	IsTerminal checks if a file descriptor corresponds to a terminal by verifying if GetState returns no error.
2675	socketUnixListen creates a Unix socket listener at the given path, returning it or an error if unsuccessful.
2676	socketUnixRemoveStale will remove a stale Unix socket file at the specified path and log the deletion process, returning an error if the removal fails
2677	socketUnixSetPermissions changes file permissions at a given path and returns an error if it fails
2678	socketUnixSetOwnership changes file ownership on a Unix socket based on the provided group or current GID
2679	cephOSDPoolExists checks if a Ceph OSD pool exists by running a command and returns true if it does.
2680	cephOSDPoolDestroy deletes a Ceph OSD pool with user confirmation and returns an error if it fails
2681	cephRBDVolumeExists checks if a RBD volume exists by running a command and returns true if it does.
2682	cephRBDSnapshotProtect protects a RBD snapshot and returns an error if protection fails
2683	cephRBDCloneCreate clones a RBD volume from source to target with specified details and returns an error if the operation fails
2684	cephRBDSnapshotListClones retrieves a list of clones for a specified RBD snapshot and returns an error if unsuccessful
2685	cephRBDVolumeMarkDeleted moves an RBD volume to a deleted state
2686	cephRBDVolumeUnmarkDeleted renames a deleted RBD volume in Ceph storage.
2687	cephRBDVolumeRename renames a Ceph RBD volume and returns an error if the operation fails
2688	cephRBDVolumeSnapshotRename renames a snapshot on a Ceph RBD volume and returns an error if the operation fails
2689	cephRBDSnapshotDelete deletes a RBD snapshot and returns an error if it fails
2690	cephRBDVolumeCopy will copy a RBD volume from an old name to a new name using the specified user and cluster, returning an error if the operation fails
2691	cephRBDVolumeListSnapshots retrieves snapshots for a Ceph RBD volume and returns their names or an error.
2692	getRBDSize retrieves the RBD size from configuration or defaults to "10GB" and returns it in bytes.
2693	getRBDFilesystem returns the block filesystem from volume or pool config, defaulting to "ext4"
2694	copyWithoutSnapshotsFull will copy RBD volumes between containers without snapshots, handling errors and logging details.
2695	`copyWithoutSnapshotsSparse creates a sparse copy of a RBD storage volume from source to target without snapshots.`
2696	GetConfigCmd creates a Cobra command to retrieve and display Pachyderm's authentication configuration in JSON or YAML format.
2697	SetConfigCmd creates a Cobra command to set Pachyderm's authentication configuration, reading from a specified file or stdin.
2698	NewSharder creates a new sharder instance using the provided discovery client, number of shards, and namespace.
2699	NewRouter creates a router instance with given sharder, dialer, and local address.
2700	renewUserCredentials extends a user's authentication token using provided credentials and TTL
2701	NewLocalClient creates a new local client with the specified root directory and returns it or an error if creation fails.
2702	AddSpanToAnyExisting starts a new span or uses existing, tags it, and returns updated context and span.
2703	InstallJaegerTracerFromEnv initializes Jaeger tracing based on environment variables, setting up a tracer only if necessary and configuring it with specific settings.
2704	UnaryClientInterceptor returns a gRPC client interceptor for OpenTracing.
2705	StreamClientInterceptor returns an OpenTracing stream client interceptor.
2706	UnaryServerInterceptor returns a gRPC server interceptor for OpenTracing.
2707	StreamServerInterceptor returns a gRPC stream server interceptor with OpenTracing tracing.
2708	CloseAndReportTraces closes the tracer if it implements io.Closer.
2709	newWriter initializes a Writer object with a given context, client, and prefix.
2710	For sets the maximum elapsed time and returns the backoff instance.
2711	Log records request, response, error, and duration at appropriate level, then reports metric asynchronously.
2712	FormatterFunc's Format method applies a formatting function to a log entry and returns the formatted bytes or an error.
2713	NewGRPCLogWriter creates a new GRPCLogWriter instance with the specified logger and source.
2714	Read will load or generate a Config struct from a JSON file, handling errors and updating it if necessary.
2715	Write will serialize a Config struct to JSON and write it to a file, handling both default and custom paths and creating necessary directories.
2716	Read will unmarshal a protobuf message from the buffer and return any errors encountered
2717	Write serializes a protocol buffer message to bytes and writes them using WriteBytes method.
2718	NewReadWriter creates a new ReadWriter using the given io.ReadWriter.
2719	RunGitHookServer initializes and starts a git hook server with specified addresses and prefix, handling errors during setup and serving HTTP requests.
2720	newLoggingPipe initializes a logging pipe with client and server readers/writers, teeing data to buffers.
2721	Read method from loggingConn reads data into buffer and returns number of bytes read and any errors encountered.
2722	Write method on loggingConn calls underlying write method and returns number of bytes written and any error encountered
2723	Accept method returns a network connection from channel or an error if already called.
2724	Close method on TestListener closes connection channel if it's not already closed.
2725	errorf formats an error message using a format string and returns a hashTreeError with the specified error code.
2726	InitWithKube initializes a service environment with Kubernetes client setup asynchronously and returns the environment before it's fully initialized.
2727	GetEtcdClient retrieves an etcd client from the environment or panics if not available.
2728	GetKubeClient returns a Kubernetes client or panics if it cannot connect.
2729	NewHasher creates a new Hasher instance with specified job and pipeline moduli
2730	HashJob computes the Adler-32 checksum of jobID and returns it modulo JobModulus.
2731	HashPipeline computes a hash value for a pipeline name using Adler-32 checksum and returns it modulo PipelineModulus.
2732	Status retrieves worker statuses from clients and returns them or an error.
2733	Cancel will cancel a job across multiple worker clients and return an error if no datum matches the filter
2734	Conns retrieves gRPC client connections from etcd based on the pipeline name and returns them along with any errors encountered.
2735	Clients retrieves client connections from etcd and converts them to Client objects.
2736	NewClient initializes a gRPC client using an address from environment variables and returns it along with any errors encountered.
2737	RunFixedArgs ensures correct argument count before executing the provided function, printing usage or exiting on error.
2738	RunBoundedArgs validates command-line arguments before running a function, ensuring they fall within specified bounds and handling errors appropriately.
2739	Run will execute a command with arguments and handle errors by exiting.
2740	ErrorAndExit logs an error message to stderr and exits with status 1.
2741	ParseCommit extracts repository name and optional commit ID from input string, returning a Commit object or an error if the format is invalid.
2742	ParseBranch parses a branch argument and returns a Branch object or an error if parsing fails.
2743	ParseFile extracts repository, commit, and path from input string and returns a File object or an error.
2744	Set appends a string to RepeatedStringArg and returns nil
2745	SetDocsUsage configures command usage to display associated commands with padding.
2746	makeCronCommits creates commits on a schedule based on input specifications, handling existing commits and ensuring proper timing.
2747	tracingObjClient's Writer method adds a span to the context, then calls the underlying Client's Writer method and returns the result.
2748	Reader method on tracingObjClient returns io.ReadCloser and error, tracing span is added to context.
2749	tracingObjClient's Delete method adds a span, deletes a resource, and finishes the span.
2750	`Walk` method adds a span to the context, executes a callback function on each item matching the given prefix, and finishes the span before returning any errors encountered during traversal.
2751	tracingObjClient's Exists checks if a resource exists using a traced span
2752	GetBlock will encode a hash to a URL-safe base64 string and return it wrapped in a Block struct.
2753	Health checks server readiness and returns an empty response or an error.
2754	split returns directory and file name from path
2755	ValidatePath checks if the given path contains only printable ASCII characters and does not include any globbing characters, returning an error if either condition is violated.
2756	MatchDatum checks if all filters match any datum path or hash encoding.
2757	NewCacheServer initializes a cache server with a router and shard count, registering it as a peer picker.
2758	authorizePipelineOp checks user permissions for specified pipeline operations and inputs/outputs
2759	sudo function executes a given function with elevated privileges using a cached superuser token.
2760	setPipelineDefaults sets default values for pipeline configuration fields
2761	incrementGCGeneration increments the garbage collection generation key in etcd or creates it if it doesn't exist.
2762	NewDebugServer creates a new debug server instance with the given parameters.
2763	APIClient's Health method checks server health using gRPC and returns an error if unsuccessful.
2764	newObjBlockAPIServer creates a new server instance and initializes caches and storage testing.
2765	watchGC continuously watches for changes to the GC generation key in etcd, updating the local generation number on change.
2766	splitKey appends generation to key, splitting it if necessary
2767	NewWriter initializes a writer with a header, ensuring it ends with a newline character.
2768	Write will write bytes to a writer, flushing and writing header if necessary, and count lines.
2769	PrintRepoHeader prints a repository header to writer w, optionally including authentication details.
2770	PrintRepoInfo outputs repository information to a writer with optional full timestamps.
2771	PrintDetailedRepoInfo will print detailed repository information using a template and return an error if parsing or execution fails.
2772	PrintBranch outputs branch name and head ID to writer, or "-" if no head.
2773	PrintCommitInfo outputs commit details to writer based on commit info and timestamp preference.
2774	PrintDetailedCommitInfo will print detailed commit information using a Go template and return an error if parsing or executing the template fails.
2775	PrintFileInfo prints file info to writer w in specified format
2776	PrintDetailedFileInfo will print file details using a template and return an error if parsing fails
2777	Add appends ancestors to the end of string s separated by ~
2778	RetryNotify will retry an operation using exponential backoff, notifying on each failure until successful or stopped.
2779	Get retrieves data from cache, filters it, and writes to writer, handling errors.
2780	Delete method removes an item from cache using its ID.
2781	PrintJobInfo outputs formatted job information to writer based on jobInfo details.
2782	PrintPipelineInfo outputs pipeline info to writer with optional full timestamps.
2783	PrintWorkerStatus prints worker status to writer with optional full timestamps.
2784	PrintDetailedJobInfo prints job information using a template and returns an error if the template parsing or execution fails.
2785	PrintDetailedPipelineInfo will execute a Go template to print detailed pipeline information and return an error if execution fails
2786	PrintDatumInfo outputs datum info to writer including ID, state, and total time in human-readable format.
2787	PrintDetailedDatumInfo prints detailed information about a datum to a writer.
2788	PrintFile outputs file details to writer in tab-separated format
2789	ShorthandInput converts ppsclient.Input to a shorthand string representation
2790	Retrieve will fetch AWS credentials from Vault, validate them, and spawn a goroutine to renew the lease.
2791	IsExpired checks if vault credentials have expired based on lease duration.
2792	NewBranch creates a new branch object with the specified repository and name.
2793	NewCommit creates a new commit object with the specified repository name and commit ID.
2794	NewCommitProvenance creates a new commit provenance object
2795	NewFile creates a new file object with the given repository name, commit ID, and path.
2796	APIClient's CreateRepo method sends a request to create a repository and returns an error if unsuccessful.
2797	InspectRepo retrieves repository information using the APIClient.
2798	ListRepo sends a request to list repositories and returns their information or an error if unsuccessful.
2799	DeleteRepo method deletes a repository using APIClient, handling errors and force flag.
2800	BuildCommit constructs a commit object using provided repository, branch, parent, and tree object details, returning the created commit or an error if the operation fails.
2801	StartCommitParent initiates a new commit based on a parent commit and returns the created commit object or an error.
2802	FinishCommit sends a request to finish a commit and returns any errors encountered.
2803	InspectCommit will fetch information about a specific commit in a repository and return it along with any errors encountered.
2804	APIClient's BlockCommit method returns a commit info or error after inspecting a finished commit.
2805	APIClient's ListCommit fetches commit info from a repository within specified range and returns a list of commit details or an error.
2806	ListCommitF fetches commit info using API client and processes each commit with a callback function.
2807	APIClient's ListCommitByRepo method retrieves commit info for a specified repository using ListCommit.
2808	APIClient's CreateBranch method creates a new branch in a repository, setting its head commit and provenance, and returns an error if the operation fails.
2809	InspectBranch retrieves branch information from a repository using APIClient and handles gRPC errors.
2810	ListBranch retrieves branch info from API client and handles errors.
2811	APIClient's SetBranch sets a branch for a repository and returns an error if unsuccessful.
2812	DeleteBranch method sends a request to delete a branch and returns an error if unsuccessful.
2813	DeleteCommit deletes a commit from a repository and returns an error if unsuccessful.
2814	FlushCommit sends commit data to a server and returns an iterator over commit info or an error.
2815	FlushCommitF flushes commits to repositories and processes commit info using a callback function, handling errors appropriately.
2816	FlushCommitAll commits changes to repositories and returns commit information or an error.
2817	SubscribeCommit will initiate a commit subscription for a given repository, branch, and state, returning a stream of CommitInfo updates or an error if the request fails.
2818	APIClient's SubscribeCommitF method subscribes to commit events in a repository and processes them using a callback function, handling errors appropriately.
2819	APIClient's PutObjectAsync creates a new write closer for asynchronous object uploads and handles errors.
2820	APIClient's PutObject method uploads an object with optional tags and returns the uploaded object and the number of bytes written or an error.
2821	APIClient's PutObjectSplit reads from reader, writes to gRPC stream, returns objects and bytes written or error.
2822	GetObject retrieves an object from the API client and writes it to the provided writer, handling any errors appropriately.
2823	GetObjectReader returns an io.ReadCloser for a given object hash and an error if the request fails.
2824	GetObjects retrieves objects from API client and writes them to writer, handling errors.
2825	TagObject will add tags to an object identified by a hash and return an error if it fails
2826	ListObject iterates over objects using a callback function and returns an error if any occurs during iteration or if gRPC communication fails.
2827	InspectObject fetches object info using API client and handles errors.
2828	APIClient's GetTag fetches a tag from ObjectAPIClient and writes it to a writer, handling errors.
2829	GetTagReader fetches a tag reader from the API client or returns an error.
2830	ListTag retrieves tags using a client and processes each response with a callback function, handling errors appropriately.
2831	Compact will call ObjectAPIClient's Compact method and return any error encountered.
2832	NewPutFileClient creates a new PutFileClient instance or returns an error if the creation fails.
2833	putFileOverwrite uploads a file to a repository, overwriting it if specified, and returns the number of bytes written and any errors encountered
2834	Close will close the gRPC connection and return any errors encountered during the process.
2835	CopyFile method in APIClient copies a file from source to destination repository, handling errors and overwriting options.
2836	APIClient's GetFile method fetches a file from a repository using gRPC, handling rate limiting and errors gracefully.
2837	APIClient.GetFileReader fetches file reader for specified repo, commit, path, offset, and size, handling errors and returning a streaming reader.
2838	APIClient's GetFileReadSeeker fetches file info and reader, returning a custom ReadSeeker with file details and client context.
2839	InspectFile retrieves file info from a repository using an API client.
2840	ListFile retrieves file info from a repository using an API client.
2841	APIClient's ListFileHistory fetches file history for a given repo, commit, path, and history count, returning a list of FileInfo objects or an error if the operation fails.
2842	ListFileF fetches file info from a repository using API client and processes it with a callback function.
2843	Walk will recursively walk through files in a repository and apply a function to each file, returning an error if the traversal fails or the function returns an error other than ErrBreak
2844	DeleteFile will delete a file from a repository and return an error if it fails
2845	Write method asynchronously handles data writing and returns written bytes or error.
2846	Close method sends buffer to write channel closes it waits for error handling before returning gRPC scrubbed error
2847	PrettyPrintVersionNoAdditional formats a version number to a human-readable string.
2848	recursiveBlockQuoteExamples adds block quotes to examples in a Cobra command tree
2849	errMissingField generates a logical response indicating a missing required field error
2850	validateFields checks for unknown fields in request data and returns an error if any are found
2851	putConfig saves config to storage with error handling
2852	getConfig retrieves configuration from storage, decodes it, and returns a pointer to the config or an error.
2853	Serve registers gRPC servers with options, validating configurations and handling TLS if enabled.
2854	NewPuller creates a new Puller instance with an error channel and a map to track pipes.
2855	PullTree fetches a tree from a Pachyderm client using concurrency control and handles file or pipe retrieval based on input parameters.
2856	Push uploads files from a directory to a Pachyderm repository, optionally overwriting existing files.
2857	PushObj uploads files from a Pachyderm commit to an object storage system using multiple concurrent workers.
2858	PushFile uploads a file to PFS by comparing chunks and overwriting existing data.
2859	APIClient's Dump method writes debug information to a writer, handling errors gracefully.
2860	APIClient's Profile method sends a debug request and writes the response to a writer, handling errors gracefully.
2861	APIClient's Binary method writes binary data to writer or returns error.
2862	RegisterCacheStats registers cache statistics with Prometheus, handling registration errors gracefully.
2863	wait will block until counter's n is greater than or equal to n
2864	RunWorkload executes multiple jobs using a worker and checks their success state.
2865	createRepo generates a random repository name, creates it using the client, tracks the repo, starts its initial commit, and records the commit.
2866	advanceCommit manages worker's commit state, either finishing random started commits or starting new ones parented from finished ones.
2867	RandString generates a random string of specified length using given rand source
2868	NewReader creates a new reader with specified random source and byte count.
2869	iterDir will iterate over a BoltDB directory and apply a function to each key-value pair, returning an error if the operation fails or if iteration is interrupted.
2870	FSSize returns the size of the file system tree starting from the root node.
2871	Diff compares two hash trees, executing a callback for differences.
2872	Serialize method writes dbHashTree to io.Writer using protobuf encoding.
2873	Deserialize reads data from a reader and deserializes it into a dbHashTree structure.
2874	Copy creates a new dbHashTree instance by hashing, serializing, and deserializing the original tree, returning it and any errors encountered.
2875	Destroy method closes the hash tree and removes its file path.
2876	putFileOverwrite calls putFile with overwrite flag set to true
2877	PutDirHeaderFooter updates a directory's header and footer in the database, ensuring the path points to a directory.
2878	putFileHeaderFooter will call putFile to store file header/footer with specified path, objects, and size, returning an error if unsuccessful
2879	deleteDir removes a directory and its contents from a BoltDB transaction
2880	NewReader creates a new reader with a given input and filter.
2881	Read will return a MergeNode and an error if it fails to read key or value bytes. If filter is set, it will skip keys until a match is found.
2882	NewWriter creates a new Writer instance wrapping the given io.Writer.
2883	Write will marshal a node, update size info, write indices, and serialize key and value to a buffer.
2884	Copy will transfer data from reader to writer until EOF or error occurs
2885	Index method returns serialized indices data or an error
2886	GetRangeFromIndex reads from reader to find range based on prefix, returning offsets and size or error
2887	NewFilter creates a function to filter keys based on their path to a specific tree.
2888	PathToTree converts a path to a tree representation with a specified number of trees.
2889	Merge will combine multiple readers into a single writer, merging their contents and handling errors during the process
2890	Hash will execute a batch operation on the database to canonicalize the hash tree and return an error if it fails
2891	IsGlob checks if the pattern matches a glob expression.
2892	GlobLiteralPrefix returns the literal prefix of a pattern after cleaning it
2893	GetHashTreeObject retrieves a hash tree object from Pachyderm using a client and storage root.
2894	GetHashTreeTag retrieves a hash tree tag using a Pachyderm client and storage root.
2895	PutHashTree serializes a hash tree to a pipe and uploads it using Pachyderm's API, returning the object reference and any errors encountered.
2896	NewChildCursor creates a cursor for a given BoltDB transaction and path, navigating to the specified directory or returning nil if the path is invalid.
2897	Next advances cursor to next key-value pair, returning them or nil if done.
2898	NewOrdered initializes an ordered file system with a given root directory
2899	MkdirAll creates directories for a given path from top to bottom
2900	putDir updates Ordered with a directory node at the given cleaned path
2901	Serialize method will write ordered data to writer and return error if serialization fails
2902	NewUnordered creates an unordered file system with a root directory.
2903	Ordered method sorts file system paths and organizes them into an ordered structure.
2904	revokeUserCredentials will revoke a user's credentials using an admin token and return an error if it fails
2905	NewAPIServer creates a new API server instance with the specified version and options.
2906	String converts a version object to a formatted version string
2907	getPipelineInfo retrieves pipeline info using Pachyderm API client and environment settings, returning a PipelineInfo object or an error.
2908	removeStr removes a string from a slice and returns whether it was found and removed
2909	PublicCertToPEM converts TLS certificate to PEM format
2910	GenerateSelfSignedCert creates a self-signed TLS certificate for the given address and name.
2911	ActivateCmd configures and runs a command to activate Pachyderm authentication, setting up initial admin permissions and handling token exchanges.
2912	DeactivateCmd creates a Cobra command to deactivate Pachyderm authentication, prompting user confirmation before proceeding.
2913	LoginCmd creates a Cobra command for logging into Pachyderm using OTP or GitHub token, handling authentication and writing token to config.
2914	LogoutCmd creates a Cobra command to log out of Pachyderm by deleting the local credential.
2915	WhoamiCmd creates a Cobra command to print user's Pachyderm identity and session details.
2916	CheckCmd creates a Cobra command to check repository access permissions.
2917	GetCmd creates a Cobra command to retrieve repository ACLs or user scopes, handling both single and double argument scenarios.
2918	SetScopeCmd creates a Cobra command to set access scope for a user on a repository, handling metrics and port forwarding options.
2919	ListAdminsCmd creates a command to list cluster admins, handling metrics and port forwarding options.
2920	ModifyAdminsCmd creates a command to modify cluster admins, handling add and remove flags and returning an error if modification fails.
2921	getAuthTokenCmd creates a command to fetch an authentication token for a given username.
2922	UseAuthTokenCmd creates a Cobra command to read a Pachyderm auth token from stdin and write it to the current user's config file.
2923	Cmds returns a slice of Cobra commands for managing authentication and configuration in a Pachyderm cluster.
2924	ParseScope will convert a string to a Scope enum or return an error if unrecognized.
2925	IsErrNotActivated checks if an error indicates that something is not activated, returning true if so.
2926	IsErrPartiallyActivated checks if an error contains a specific message related to partial activation.
2927	IsErrNotSignedIn checks if an error indicates the user is not signed in.
2928	IsErrBadToken checks if an error contains a specific bad token message.
2929	IsErrNotAuthorized checks if an error indicates lack of authorization.
2930	IsErrInvalidPrincipal checks if an error indicates an invalid principal format.
2931	IsErrTooShortTTL checks if an error indicates that the provided TTL is shorter than the existing TTL.
2932	NewDatumFactory creates a datum factory based on the input type and returns an error if the type is unrecognized
2933	NewCollection initializes a new Collection object with specified parameters ensuring the prefix ends with a slash.
2934	Path concatenates collection's prefix with given key to form a full path.
2935	getIndexPath retrieves the indexed path for a given value, index, and key using reflection.
2936	getMultiIndexPaths retrieves multiple index paths from a collection based on a given value, index, and key.
2937	Upsert updates or inserts a key-value pair in a collection, applying a function before putting the value, ensuring type correctness and handling errors appropriately.
2938	get retrieves a value from etcd using a key and options, returning the response and any errors encountered
2939	List method iterates over key-value pairs, unmarshals values into provided message, and applies a callback function to keys after trimming the prefix.
2940	Watch method on readonlyCollection creates and returns a new watcher with specified options.
2941	WatchByIndex sets up a watcher on a collection's index, handling put and delete events to return relevant data or errors.
2942	WatchOne creates a watcher for a single key and returns it along with any errors.
2943	WatchOneF sets up a watcher on a key and calls a callback function for each event, returning an error if the context is canceled or the callback returns an error.
2944	Get retrieves a file from the cache using a key, returning a reader and error if not found.
2945	Cache.Keys returns sorted list of cache keys.
2946	Clear will remove all keys from the cache and delete their corresponding files, returning an error if any file deletion fails
2947	NewHTTPServer creates a new HTTP server with routes for file, service, login, logout, and not found handlers.
2948	NewDeployServer creates a new APIServer instance with the given kubeClient and kubeNamespace.
2949	Export will pull specified Docker images using authentication and export them to the given writer.
2950	Import loads a Docker image from input stream, tags it, and pushes it to specified registries with authentication.
2951	DatumTagPrefix generates a short hash from a given salt using SHA-256 and returns the first four characters.
2952	NewPFSInput creates a new PPS input object with specified repository and glob pattern.
2953	NewPFSInputOpts creates a new PPS input object with specified parameters
2954	NewJobInput creates a new JobInput struct with the given repoName, commitID, and glob.
2955	NewPipelineInput creates a new pipeline input with a repository name and a glob pattern.
2956	APIClient's CreateJob method sends a request to create a new job using the specified pipeline and output commit, returning the created job or an error.
2957	APIClient's ListJob fetches job information for a given pipeline and commits, returning a list of JobInfos or an error.
2958	ListJobF processes job information from a stream using a callback function, handling errors and breaking on specific conditions.
2959	FlushJob sends a request to flush jobs and processes job info using a callback function, handling errors appropriately.
2960	APIClient's FlushJobAll method processes commits to specified pipelines, collecting job information and returning it along with any errors encountered.
2961	DeleteJob deletes a job using its ID and returns an error if unsuccessful.
2962	StopJob sends a stop request to the API client for a given job ID and returns any errors encountered during the process.
2963	RestartDatum restarts a datum for a job using the provided filter and returns any errors encountered.
2964	ListDatum retrieves datum information from a job using pagination and returns the response or an error.
2965	ListDatumF fetches datum information from a job using pagination and processes each item with a callback function, handling errors appropriately.
2966	InspectDatum retrieves datum info using job and datum IDs, returning an error if unsuccessful.
2967	Next advances to the next log message or returns false if an error occurs.
2968	InspectPipeline fetches details of a specified pipeline returning its info or an error if the request fails.
2969	ListPipeline fetches pipeline info from API client and returns it or an error if failed.
2970	DeletePipeline method sends a request to delete a pipeline and returns an error if unsuccessful.
2971	APIClient's StartPipeline initiates a pipeline and returns an error if unsuccessful.
2972	StopPipeline stops a pipeline by name and returns an error if unsuccessful
2973	RerunPipeline will rerun a pipeline with specified commits to include and exclude, returning an error if unsuccessful.
2974	CreatePipelineService sends a request to create a pipeline service using the provided parameters and returns an error if unsuccessful.
2975	GetDatumTotalTime calculates total time from process stats durations.
2976	Mount will mount a filesystem using the provided API client and options, handling signals to unmount gracefully.
2977	NewBufPool creates a new buffer pool with a specified size.
2978	StorageRootFromEnv retrieves the storage root from environment variables, adjusting it for specific backends.
2979	BlockPathFromEnv constructs the path to a block using the storage root from environment and the block's hash.
2980	NewGoogleClient creates a new Google client using a bucket name and options, returning the client and any errors encountered.
2981	NewGoogleClientFromSecret creates a Google client using credentials from environment or files, returning an error if any required file is missing.
2982	NewGoogleClientFromEnv creates a new Google client using environment variables for bucket and credentials, returning an error if either is missing.
2983	NewMicrosoftClientFromSecret creates a new Microsoft client using secrets from files or returns an error if any file is missing.
2984	NewMicrosoftClientFromEnv creates a new Microsoft client using environment variables or returns an error if they're missing.
2985	NewMinioClientFromSecret initializes a MinIO client using secrets from files or returns an error if any file cannot be read.
2986	NewMinioClientFromEnv creates a new Minio client using environment variables and returns it along with any errors encountered.
2987	NewAmazonClientFromSecret constructs an Amazon client from secret files, handling optional reversal.
2988	NewAmazonClientFromEnv creates an Amazon client from environment variables.
2989	NewClientFromURLAndSecret creates a client from a URL and secret, handling different storage types and returning an error if unrecognized.
2990	ParseURL parses a URL string and returns an ObjectStoreURL or an error if the format is invalid.
2991	NewClientFromEnv creates a client based on the storage backend from environment variables and returns it along with any errors encountered.
2992	NewExponentialBackOffConfig creates a new exponential backoff configuration with custom settings.
2993	Close will close the reader and finish any tracing span
2994	Close method on BackoffWriteCloser will close the writer and return any non-ignorable errors after adding a tracing span
2995	IsRetryable checks if an error is retryable based on network conditions or client settings.
2996	RunStdin will execute commands with input from stdin and arguments.
2997	RunIODirPath executes a command with specified directory path and arguments, capturing and returning any errors or debug output.
2998	NewAuthServer initializes and returns an AuthServer instance with specified environment, prefix, and public flag.
2999	expiredClusterAdminCheck checks if a user has admin rights when Pachyderm Enterprise is inactive.
3000	getOneTimePassword generates and stores a unique auth code for a user with optional expiration.
3001	hashToken computes the SHA-256 hash of a token and returns it as a hexadecimal string
3002	getAuthToken retrieves the authentication token from context metadata, returning an error if multiple or no tokens are present.
3003	canonicalizeSubjects processes a list of subjects concurrently, returning their canonical forms or an error if any processing fails
3004	Matches verifies if the actual string matches the expected regex pattern, reporting errors if it doesn't.
3005	OneOfMatches checks if any actual string matches the expected regex pattern and reports failure if none do.
3006	Equal checks if two values are equal and reports an error if they are not.
3007	NotEqual checks if two values are not equal and logs an error if they are.
3008	oneOfEquals checks if an element exists within a slice, returning true if found and handling pointer types appropriately.
3009	NoneEquals checks if actuals equals any of expected values and reports failure if they do.
3010	NoError asserts no error occurred and logs a fatal error message if it does.
3011	NoErrorWithinT will execute a function within a timeout and fail the test if an error occurs or if the operation takes longer than specified
3012	NoErrorWithinTRetry runs a function until it succeeds or times out, logging an error if it fails to complete within the specified duration.
3013	YesError asserts that an error is received and logs a fatal error message if none is found.
3014	NotNil checks if the given object is not nil and reports an error if it is.
3015	Nil checks if an object is nil and reports an error if it's not.
3016	False checks if a boolean value is false and reports an error using tb if it's true.
3017	NewSTM creates a transactional state machine response using a client and an application function, handling errors appropriately.
3018	NewDryrunSTM creates a new STM serializable object and returns an error if it fails
3019	newSTMRepeatable creates a new STM transaction and runs it with the given apply function, returning a TxnResponse or an error
3020	newSTMSerializable creates a transactional operation using STM and applies it, returning the response or error.
3021	newSTMReadCommitted initializes a transactional read committed operation using etcd client and applies a function to it, returning a transaction response or an error.
3022	commit resets rset and returns stm's commit result
3023	Pipelines creates a new collection using etcd client and prefix
3024	Jobs creates a collection from an etcd client with specified prefix and indices.
3025	NewTicker creates a new ticker with exponential backoff and starts it in a goroutine.
3026	nodeToMap converts etcd Node to a map, updating values or removing keys as needed
3027	ServiceAccount creates a new v1.ServiceAccount resource with specified options.
3028	ClusterRole creates a new cluster role with specified options, metadata, and rules.
3029	RoleBinding creates a new role binding with specified options, namespace, service account, and role reference.
3030	GetSecretEnvVars constructs environment variables based on storage backend and predefined mappings, returning them as a list.
3031	PachdService creates a Kubernetes Service with specific annotations and ports based on AssetOpts.
3032	GithookService creates a new Service resource for Git hook operations in the specified namespace.
3033	EtcdDeployment creates an app Deployment for etcd with specified CPU, memory, and storage options.
3034	EtcdStorageClass creates a StorageClass object based on the backend type and returns it along with an error if any.
3035	EtcdVolume creates a PersistentVolume based on the specified backend and options.
3036	EtcdNodePortService creates a Service with NodePort type based on local flag and AssetOpts.
3037	EtcdHeadlessService creates a headless Service resource with specified properties
3038	EtcdStatefulSet generates a Kubernetes manifest for deploying an etcd cluster with specified resources and configurations.
3039	DashDeployment creates a Deployment resource with specified container configurations and settings based on AssetOpts.
3040	DashService creates a Service resource with specified ports and selector.
3041	WriteSecret encodes a secret using the provided encoder and options.
3042	GoogleSecret returns a map with encoded bucket and credential values
3043	WriteDashboardAssets encodes dashboard service and deployment using given encoder and options, returning error if encoding fails.
3044	WriteLocalAssets will write assets and a secret to a local path using the provided encoder and options, returning an error if any step fails.
3045	WriteCustomAssets processes custom assets based on specified backends and options, returning an error if configuration is incorrect or unrecognized.
3046	WriteAmazonAssets will write assets to Amazon S3 using specified credentials and options, handling different credential types and returning an error if any step fails.
3047	WriteGoogleAssets encodes assets to Google backend and writes secrets using provided credentials.
3048	WriteMicrosoftAssets encodes assets to Microsoft backend and writes secret using encoder and options
3049	Images returns a list of images based on AssetOpts and predefined constants.
3050	AddRegistry combines registry and imageName into a full image path
3051	withCanonicalRandomizationFactor adjusts RandomizationFactor to ensure it's between 0 and 1
3052	Reset method sets current interval to initial and records the start time using the clock.
3053	incrementCurrentInterval will increase the current interval of ExponentialBackOff, or set it to the maximum if overflow occurs.
3054	NewBlockAPIServer creates a BlockAPIServer instance based on the specified backend, handling directory paths and returning an error if creation fails.
3055	LocalStorage sets up a local client and storage object for testing.
3056	deleteJob updates job counts and deletes a job from storage
3057	writeXML encodes a Go value to XML and sends it as a response with the appropriate headers. If encoding fails, it logs an error.
3058	clean1_7HashtreePath cleans the input path by ensuring it starts with a slash and then normalizes it using pathlib.Clean before appending the default root.
3059	NewFromAddress creates an APIClient instance from an address and optional settings, applying options to configure its behavior before establishing a connection.
3060	getUserMachineAddrAndOpts retrieves the user's machine address and options from environment variables or configuration, defaulting to a broadcast address if necessary.
3061	NewInCluster creates a new APIClient using environment variables for PACHD_SERVICE_HOST and PACHD_SERVICE_PORT, returning an error if either is unset.
3062	Close method closes the API client connection and port forwarder if it exists.
3063	DeleteAll method deletes all resources using APIClient, handling errors appropriately.
3064	APIClient's SetMaxConcurrentStreams sets the maximum number of concurrent streams using a limiter.
3065	WithCtx sets the context for APIClient and returns a new instance.
3066	NewDLock creates a new distributed lock implementation using etcd.
3067	DatumID computes a hash ID for given input data using file paths and hashes.
3068	runUserErrorHandlingCode executes a command with error handling, logging, and context management.
3069	HashDatum computes a SHA-256 hash based on pipeline details and input data, prefixed with a salt.
3070	HashDatum15 generates a hash from pipeline info and input data, ensuring deterministic output despite potential map non-determinism.
3071	API server returns worker status or error.
3072	Cancel will cancel a job if it matches the request and return a response indicating success or failure.
3073	mergeStats combines two ProcessStats objects and returns an error if any duration addition fails
3074	mergeChunk merges data chunks, logs progress, and handles errors
3075	IsCommitNotFoundErr checks if an error indicates a missing commit.
3076	IsCommitDeletedErr checks if an error indicates a deleted commit.
3077	IsCommitFinishedErr checks if an error indicates a finished commit.
3078	IsRepoNotFoundErr checks if an error indicates a repository not found.
3079	IsBranchNotFoundErr checks if an error indicates a missing branch.
3080	IsFileNotFoundErr checks if the given error indicates a "file not found" condition.
3081	APIClient's Version method retrieves and formats its version using GetVersion and PrettyPrintVersion, returning the result or an error.
3082	validateRepoName checks if the repo name contains only valid characters and returns an error if it doesn't.
3083	newDriver initializes a driver with environment, cache, and storage parameters, validates inputs, creates a default repository, and returns the driver instance or an error.
3084	inspectCommit checks authorization, resolves commit info, waits for provenant commits, and watches commit state.
3085	scratchCommitPrefix generates a prefix for a commit's scratch space using its repository name and ID.
3086	scratchFilePrefix returns the prefix for a scratch file given a PFS file object
3087	getTreeForFile returns a hash tree for a given file, creating it if necessary, or retrieving it from a commit.
3088	provenantOnInput checks if there's any provenance other than the spec repo
3089	nodeToFileInfo converts a commit info, path, and node to file info with optional full details.
3090	fileHistory will process file history using a callback function, stopping after a specified number of commits or when no more history is available.
3091	upsertPutFileRecords updates or inserts file records in a database using a transactional approach.
3092	ReadRow reads a row from PGDumpReader, handling headers, footers, and special end-of-row markers.
3093	NewReporter creates a Reporter instance, initializes it with clusterID and kubeClient, starts a goroutine to report metrics, and returns the Reporter.
3094	ReportUserAction will log user actions with start, finish, or error details based on the provided action string and error.
3095	FinishReportAndFlushUserAction creates a closure to report and flush user actions based on success or failure.
3096	Read reads data from multiple sources until EOF or an error occurs
3097	ActivateCmd creates a Cobra command to activate Pachyderm with an activation code, handling optional metrics and port forwarding, and supports an expiration timestamp.
3098	GetStateCmd creates a Cobra command to check Pachyderm cluster's enterprise feature status and prints token state and expiration.
3099	Cmds generates and returns a list of Cobra commands for enterprise features, activation, and state retrieval.
3100	NewConfiguration creates a Configuration instance based on the input type, setting appropriate fields or returning nil for unknown types.
3101	Repos creates a new collection using etcdClient and etcdPrefix
3102	PutFileRecords creates a new collection using the given etcd client and prefix.
3103	Commits creates a new collection using etcdClient, etcdPrefix, repo, and ProvenanceIndex.
3104	Branches creates a new collection using etcd client, prefix, and repository, validating branch names to ensure they're not UUIDs without dashes.
3105	OpenCommits initializes a new collection using etcd client and prefix.
3106	NewDAG creates a Directed Acyclic Graph from a map of nodes and their parents.
3107	NewNode adds a node to the DAG with specified ID and parents, updating parent and leaf information accordingly.
3108	DFS on DAG parents to sort nodes.
3109	Leaves returns all leaf node IDs from the DAG.
3110	Ancestors finds all ancestors of a node in a DAG starting from specified nodes.
3111	Descendants will find all descendants of a given node using BFS, considering only specified nodes.
3112	Ghosts method returns nodes without parents in the DAG.
3113	NewPortForwarder initializes a new port forwarder with default or specified namespace and sets up Kubernetes client configuration and resources.
3114	Run will initiate port forwarding to a randomly selected pod for the specified application, handling errors and ensuring proper resource management.
3115	RunForDaemon starts port forwarding for daemon using specified or default ports and returns an error if it fails
3116	RunForSAMLACS will run port forwarding for SAML ACS on the specified local port or default port, returning an error if it fails.
3117	RunForDashUI starts port forwarding for Dash UI on specified or default local port
3118	RunForDashWebSocket starts dash WebSocket server on specified or default port
3119	RunForPFS starts port forwarding for PFS using the specified or default local port.
3120	RunForS3Gateway starts PortForwarder for S3 Gateway on specified or default local port
3121	Lock method sets the PID file path and writes it, returning an error if unsuccessful.
3122	Close method stops the port forwarder and logs errors
3123	Unmarshal will set key to event's key and unmarshal event's value into provided message, returning an error if types don't match.
3124	UnmarshalPrev sets key to event's previous key unmarshals prev value into message and returns error if type check fails
3125	MakeWatcher creates a new watcher instance with given channels for events and completion.
3126	CheckType verifies if the value's type matches the template's type returning an error if they mismatch.
3127	NewPool initializes a new connection pool for a gRPC service, watching endpoints based on labels and handling connections asynchronously.
3128	Do method acquires a gRPC client connection from a pool, executes a function with it, and ensures proper resource management.
3129	Close pool connections and return first error encountered
3130	buildImage constructs a Docker image using the specified parameters and returns an error if the build fails
3131	pushImage tags and pushes a Docker image from one repository to another, returning the destination image name and any errors encountered.
3132	newMinioClient creates a MinIO client with the specified endpoint, bucket, credentials, and security settings.
3133	newMinioClientV2 creates a MinIO client with endpoint, bucket, credentials, and security settings, returning an error if creation fails.
3134	newMinioWriter creates a minioWriter to upload data asynchronously using a pipe and returns it
3135	Close method closes the minioWriter pipe and returns any errors encountered during the process
3136	PipelineRepo extracts repo name from pipeline object
3137	PipelineRcName converts a name to lowercase, replaces underscores with hyphens, and appends a version number to create a valid Kubernetes resource name.
3138	GetRequestsResourceListFromPipeline extracts resource list from pipeline info.
3139	GetLimitsResourceListFromPipeline extracts resource limits from pipeline info and returns them along with any errors encountered.
3140	getNumNodes returns the number of Kubernetes nodes or an error if unable to retrieve or find any nodes
3141	GetExpectedNumWorkers calculates the expected number of workers based on Kubernetes client and parallelism specification, returning an integer or an error if the specification is invalid.
3142	GetExpectedNumHashtrees calculates expected hashtrees based on spec, returning a count or error.
3143	FailPipeline updates pipeline state to failure and sets reason in etcd.
3144	JobInput updates pipeline input with commit IDs from provenance branches.
3145	PipelineReqFromInfo creates a CreatePipelineRequest from PipelineInfo.
3146	NewPipelineManifestReader creates a reader for a manifest file or stdin, decodes JSON, and returns it.
3147	NextCreatePipelineRequest unmarshals the next create pipeline request from the reader or returns an error if the data is malformed.
3148	DescribeSyntaxError provides a detailed error message for JSON syntax errors, indicating the line number and position within the input buffer.
3149	UpdateJobState updates job state and counts in pipelines and job info, handling errors during updates.
3150	New generates a new UUID using exponential backoff on failure.
3151	Code will return HTTP status code from error or default OK if error is nil
3152	NewHTTPError creates a new HTTPError instance with the given code and formatted error message.
3153	NewStorage initializes a new Storage instance with given client and prefix.
3154	DeleteAll deletes all objects under a specified prefix in storage.
3155	Chunk will split data into chunks of specified size and return them as a slice of slices.
3156	ChunkReader reads data from reader in chunks, processes each chunk with function f, and returns total bytes read or error.
3157	NewStreamingBytesReader creates a reader from a client and cancellation context.
3158	WriteToStreamingBytesServer transfers data from a reader to a streaming server using a buffer, returning any errors encountered.
3159	WriteFromStreamingBytesClient transfers data from a streaming client to a writer until EOF or an error occurs
3160	NewSidecarAPIServer creates and returns a new Sidecar API server instance with specified configurations and environment settings.
3161	NewEnterpriseServer initializes an enterprise API server with environment and token management.
3162	validateActivationCode checks if the activation code is valid and returns its expiration time or an error
3163	Activate will process an activation request, validate the code, update expiration, and respond with token info or an error.
3164	Deactivate method deactivates enterprise token and waits for confirmation before returning response.
3165	lookExtensions will search for executable extensions in a given directory and return the full path with the correct extension or an error if not found
3166	Start method initiates command execution, handling errors and setting up file descriptors before launching process.
3167	CombinedOutput captures command stdout and stderr into a byte buffer and returns it along with any error.
3168	StdinPipe sets up a pipe for input to a command and returns it, or an error if stdin is already set or the process has started.
3169	StdoutPipe returns a pipe reader and writer for stdout, setting up redirection or returning an error if already configured or process started.
3170	dedupEnvCase removes duplicate environment variable keys while preserving original order, considering case sensitivity based on input flag.
3171	InputName recursively extracts the name from nested Input structures.
3172	SortInput sorts inputs based on their names using VisitInput and SortInputs functions
3173	InputBranches processes input and returns branches based on PFS, Cron, or Git details.
3174	ValidateGitCloneURL checks if a given Git clone URL is valid and follows specific formats, returning an error otherwise.
3175	containsEmpty checks if any string in the slice is empty and returns true if so.
3176	NewAPIServer creates a new API server instance with specified address, storage root, and cluster info.
3177	Ago calculates the time duration since a given timestamp in a human-readable format.
3178	TimeDifference calculates the duration between two timestamps and returns it as a human-readable string.
3179	Duration converts a protobuf duration to a human-readable format.
3180	InspectCluster will fetch and return cluster info using AdminAPIClient or return an error if failed.
3181	Extract will process operations from an API client, invoking a callback for each, handling errors appropriately.
3182	APIClient's ExtractAll method extracts all admin operations and returns them along with any errors encountered.
3183	APIClient's ExtractWriter method uses a protobuf writer to extract data from objects and write it to a specified writer, returning any errors encountered during the process.
3184	ExtractURL sends a URL to an admin API client and handles errors or unexpected responses.
3185	ExtractPipeline extracts a pipeline from an API client and returns a CreatePipelineRequest or an error.
3186	Restore sends operations to the admin API client and handles errors.
3187	RestoreReader sends data from a reader to a client using gRPC and handles errors.
3188	RestoreFrom will call another client's Extract method to send operations using a restore client, handling errors appropriately.
3189	RestoreURL sends a URL to the admin API client and returns any errors encountered.
3190	IgnoreTypes filters specified types using cmp library's path filtering.
3191	AppendEllipsis updates or appends ellipsis to textList based on diffStats presence.
3192	IsType checks if a given type matches any of several function signatures and returns true if it does.
3193	NameOf retrieves the full qualified method name from a reflect.Value.
3194	PointerOf converts a reflect.Value to a Pointer, using unsafe.Pointer for the address.
3195	EditScript's String method returns a human-readable representation of the script.
3196	stats calculates and returns the counts of identity, unique X, unique Y, and modified edits in an EditScript.
3197	connect method updates path based on direction and similarity between points using given function
3198	EquateNaNs returns comparison options to treat NaN values equally for float64 and float32 types
3199	Index returns the PathStep at position i, adjusting negative indices to wrap around. If out of bounds, it returns an empty PathStep.
3200	SliceIndex.Key returns xkey if it equals ykey, otherwise returns -1
3201	defaultReporter's String method returns formatted diff or empty string based on root's NumDiff.
3202	FormatType adjusts text based on type options, wrapping it conditionally.
3203	formatMapKey formats a map key using reflection and returns it as a trimmed string
3204	formatString converts a string to a quoted or raw string based on its length and content
3205	formatHex converts a uint64 to a hexadecimal string with appropriate padding based on its size
3206	formatPointer converts a reflect.Value to a formatted pointer string
3207	Visit checks if a pointer has been visited and marks it as visited.
3208	retrieveUnexportedField extracts and returns the value of an unexported field from a struct using reflection and unsafe pointer arithmetic.
3209	insert will add a field name to the tree and mark it as valid if no more names are left
3210	matchPrefix checks if a path matches the field tree and returns true if it does
3211	canonicalName extracts the canonical name of a struct field, considering nested structs and handling errors for invalid input or unexported fields.
3212	FilterPath applies a filter function to an option and returns a new option or nil.
3213	normalizeOption will flatten options and return the first if only one, otherwise return all flattened options
3214	flattenOptions combines multiple options into a single flat list recursively handling nested options.
3215	CanFormatDiffSlice determines if a value node can be formatted in diff mode based on various conditions including type, validity, and length requirements.
3216	formatASCII replaces non-printable ASCII characters with dots in a given string
3217	coalesceAdjacentEdits aggregates edits into groups based on their type and returns a list of stats for each group
3218	SortKeys sorts and removes duplicates from reflect.Values.
3219	FormatDiff formats a value node according to specified options and returns a text node representing the formatted difference.
3220	coalesceAdjacentRecords aggregates similar records into groups based on their values
3221	Diff compares two values and returns their differences as a string, panicking if the difference and equality results are inconsistent.
3222	statelessCompare resets state, compares step, then restores state and returns result
3223	sanitizeValue corrects reflect values to avoid bugs
3224	Check validates path segments for recursive transformers and panics if found.
3225	makeAddressable ensures a value can be addressed, returning it or a new addressable copy
3226	Marshal method serializes a field based on its type using a visitor pattern.
3227	Field's String method returns a string representation combining key and Value.
3228	Set tag of span with key and value from tag.
3229	Inject method sets trace context and baggage items to a carrier using TextMapWriter.
3230	Extract will parse a text map carrier to extract trace context information and return it as a MockSpanContext or an error if extraction fails
3231	ToLogRecord converts LogData to LogRecord using current timestamp or provided one, and includes event and payload fields accordingly.
3232	New creates a new MockTracer instance with default injectors and extractors for TextMap and HTTPHeaders propagators.
3233	StartSpan creates a mock span using tracer options
3234	RegisterInjector associates an injector with a format in MockTracer.
3235	RegisterExtractor associates an extractor with a format in MockTracer.
3236	Inject will add span context to carrier based on format or return error if unsupported format or invalid carrier
3237	Extract will retrieve a span context from a carrier using a specified format, returning an error if the format is unsupported.
3238	ContextWithSpan adds a span to the given context.
3239	Set tag on span using uint32 value
3240	Set tag on span with given name and value
3241	Set tag on span with boolean value
3242	ipv4Tag.SetString sets a tag on a span with the given value
3243	EmitString assigns key and value to MockKeyValue instance
3244	EmitLazyLogger updates mock key-value with lazy logger's data.
3245	RunAPIChecks executes API checks using a test suite and custom options.
3246	CheckBaggageValues sets the baggage values check option for API requests
3247	CheckExtract sets whether to extract API checks based on the given boolean value
3248	CheckInject sets whether to inject values during API checks.
3249	CheckEverything sets up API check options to verify baggage values, extraction, and injection.
3250	UseProbe sets a probe option on an API check suite
3251	MockSpanContext.WithBaggageItem adds a key-value pair to baggage and returns a new MockSpanContext.
3252	Tags method returns a copy of the span's tags map with read lock.
3253	Tag method returns the value associated with the given key from tags map after acquiring a read lock on MockSpan object.
3254	Logs returns a copy of the MockLogRecords held by the MockSpan.
3255	MockSpan's Context method returns its SpanContext while locking and unlocking the instance.
3256	SetTag updates span tags and sampling priority based on input key-value pairs.
3257	SetBaggageItem updates span context with key-value pair and returns the updated span.
3258	BaggageItem retrieves a baggage item from a MockSpan using a key while ensuring thread safety.
3259	Finish method updates span finish time, unlocks mutex, and records span using tracer.
3260	FinishWithOptions updates a mock span's finish time, logs log records, handles bulk log data, and records the span.
3261	String method returns a formatted string representation of MockSpan.
3262	LogFields logs span fields with the current timestamp.
3263	logFieldsWithTimestamp logs fields with a timestamp to a mock span's logs.
3264	`LogKV logs key-value pairs or errors if input is invalid`
3265	LogEvent logs an event using LogFields with a "event" field set to the given string.
3266	LogEventWithPayload logs an event with a given payload using LogFields.
3267	SetOperationName updates the operation name for a MockSpan and returns the updated span.
3268	registriesDirPath returns the registries directory path from SystemContext or the default path
3269	loadAndMergeConfig reads directory contents, merges Docker configurations, and returns the combined configuration or an error
3270	ParseReference validates and normalizes an image reference, returning it or an error if invalid.
3271	NewReference constructs an ImageReference from a Docker reference, validating the format and extracting namespace and stream components.
3272	CheckAuth verifies user credentials against a Docker registry and returns an error if authentication fails.
3273	doHTTP sends an HTTP request using TLS transport and returns the response or error.
3274	detectPropertiesHelper will attempt to detect Docker registry properties by pinging it over HTTPS or HTTP if configured, handling errors and checking for V1 support.
3275	detectProperties checks properties once and returns any errors encountered during detection.
3276	getExtensionsSignatures fetches extension signatures from a Docker client and returns them or an error if the request fails or the response is invalid.
3277	NewTransport initializes an HTTP transport with specified dialer settings and environment-based proxy configuration.
3278	readRegistryConf reads the registry configuration file and returns its content along with any errors encountered.
3279	GetRegistries fetches registries from system context and returns them or an error.
3280	GetInsecureRegistries loads registry configuration and returns list of insecure registries or error
3281	RegistriesConfPath returns the configuration path for registries based on the provided context.
3282	NewOptionalBool returns an OptionalBool based on the input boolean value.
3283	changeState updates PolicyContext state if it matches expected state
3284	policyContext.Destroy changes state from ready to destroying and then to destroyed, returning any errors encountered during the process
3285	policyIdentityLogName constructs a log name using image reference's transport and policy configuration identity.
3286	requirementsForImageRef checks image reference against policy scopes and returns matching requirements or default.
3287	ParseImageName splits the input image name into transport and reference, validates the transport, and returns an ImageReference or an error.
3288	BlobInfoFromOCI1Descriptor converts OCI descriptor to blob info.
3289	OCI1FromManifest parses JSON manifest to OCI1 struct and returns it or an error.
3290	OCI1FromComponents creates an OCI1 object from image descriptor and layers.
3291	newReference creates a docker reference from a named reference, returning an error if the reference has both a tag and a digest.
3292	tagOrDigest returns the tag or digest of a Docker reference, or an error if neither is present.
3293	updateEmbeddedDockerReference updates the embedded Docker reference if possible and returns an error if not.
3294	isTTY checks if the writer is a terminal
3295	copyUpdatedConfigAndManifest updates the image configuration and manifest, handles potential errors, and returns the new manifest or an error.
3296	createProgressBar creates a progress bar for copying files and returns it.
3297	copyConfig copies image configuration from source to destination, handling errors and verifying digests
3298	diffIDComputationGoroutine calculates the digest of a layer stream using a decompressor and sends the result or error through a channel.
3299	computeDiffID computes the diff ID from a reader using an optional decompressor, returning the digest or an error
3300	compressGoroutine compresses data from src using gzip and writes it to dest, handling errors and closing resources properly
3301	newDockerClient creates a Docker client with a specified host and configures the HTTP client based on the URL scheme.
3302	defaultPolicyPath returns the path to the signature policy based on the provided SystemContext or falls back to the default path
3303	NewPolicyFromFile reads a file and returns a Policy object or an error if the file cannot be read or the policy is invalid.
3304	NewPolicyFromBytes converts JSON data to a Policy object and returns it or an error if formatting is invalid.
3305	newPolicyRequirementFromJSON parses JSON data to create a PolicyRequirement based on the type field, returning an error if the format is invalid.
3306	newPRSignedBy creates a new policy reference signed by a key, validating inputs and returning an error if any conditions are not met.
3307	newPRSignedByKeyPath creates a new prSignedBy instance using the specified key type, path, and signed identity.
3308	NewPRSignedByKeyPath creates a policy requirement using a key path and signed identity.
3309	newPRSignedByKeyData creates a new prSignedBy instance with the given key data and signed identity, using an empty string for the second argument.
3310	NewPRSignedByKeyData creates a new policy requirement object using the provided key type, data, and signed identity, returning it along with any errors encountered.
3311	IsValid checks if the key type is valid.
3312	newPRSignedBaseLayer creates a new signed base layer with the given identity and returns it or an error if the identity is invalid.
3313	newPolicyReferenceMatchFromJSON unmarshals JSON data into a PolicyReferenceMatch based on the type field, returning an appropriate concrete type or an error if the format is invalid.
3314	newPRMExactReference will parse a Docker reference and return a PRMExactReference object or an error if the format is invalid
3315	newPRMExactRepository creates a new repository object from a Docker repository string, validating its format and returning an error if invalid.
3316	newImageSource resolves an image reference to create a storage image source with metadata parsing.
3317	getBlobAndLayerID fetches a blob and its corresponding layer ID from storage, handling different cases based on the blob type and applying compression options.
3318	computeID calculates an image ID based on the given manifest and its diff IDs.
3319	PutManifest checks manifest digest matches before storing it
3320	PutSignatures will store signatures and their sizes in storageImageDestination.
3321	newImage creates an ImageCloser from a storage reference, handling errors during source creation, image extraction, and size retrieval.
3322	newImageSource creates a temporary directory, extracts an image source, and returns it along with any errors encountered during the process. If there's an error, it deletes the temporary directory before returning the error.
3323	LoadManifestDescriptor extracts OCI archive reference, creates temp dir, loads manifest descriptor, and returns it or error.
3324	Close method releases resources by deleting a temporary directory and closing an unpacked source, returning any errors encountered.
3325	append adds a unique string to orderedSet list
3326	isMultiImage checks if the image has a multi-image manifest and returns an error if it fails
3327	lockPath acquires a lock on the specified path ensuring it's thread-safe
3328	unlockPath unlocks a path's mutex and decrements its reference count, removing it if count reaches zero
3329	view executes fn within a read-only BoltDB transaction, handling errors and locking/unlocking path.
3330	update will execute a transactional function on a BoltDB cache, locking the path during operation and handling errors gracefully.
3331	uncompressedDigest retrieves an uncompressed digest from a BoltDB transaction or returns an empty string if not found
3332	appendReplacementCandidates updates cache bucket with new candidates based on scope and digest, returning updated list.
3333	indexExists checks if an index file exists at the given OCI reference path, returning true if it does or if there's any other error besides non-existence.
3334	createSignature generates a signature for a Docker manifest using GPG, handling errors and logging the process.
3335	ParseReference extracts directory and image from reference and returns an ImageReference object or an error.
3336	NewReference creates a new OCI image reference from directory and image name, validating paths and names.
3337	ociReference's getIndex method opens, reads, and decodes an image index file returning the parsed Index object or an error.
3338	LoadManifestDescriptor converts ImageReference to OCIReference and retrieves manifest descriptor.
3339	blobPath constructs a blob path from a digest and optional shared directory, validating the digest and handling errors gracefully.
3340	SignDockerManifest generates a signature for a Docker manifest and returns it along with any errors encountered during the process.
3341	VerifyDockerManifestSignature checks Docker manifest signature against expected values and returns a Signature object or an error.
3342	newOpenshiftClient creates an OpenShift client using reference and returns it or an error
3343	doRequest sends an HTTP request using the openshiftClient, handling authentication and logging details.
3344	getImage fetches an image from OpenShift API and returns it along with any errors encountered during the process.
3345	convertDockerImageReference converts Docker image reference to openshift client reference
3346	ensureImageIsResolved checks if image is resolved and sets docker reference
3347	newImageDestination creates a new image destination using OpenShift client and returns it along with any errors encountered during the process.
3348	newUntrustedSignature constructs an untrusted signature with the given Docker manifest digest, reference, creator ID, and timestamp.
3349	MarshalJSON method serializes untrustedSignature to JSON format, returning byte slice or error.
3350	UnmarshalJSON method unmarshals JSON data into the struct, returns error if format is invalid.
3351	verifyAndExtractSignature validates and extracts a signature from unverified data, returning a Signature object or an error if validation fails.
3352	RewriteReference modifies a container image reference by replacing a specified prefix with a new location, returning the updated reference or an error if the operation fails.
3353	getV1Registries processes a TOML configuration to extract and categorize registries based on search, block, and insecure settings, returning them in a specific order.
3354	getConfigPath determines the configuration path based on the provided context, using default or custom paths.
3355	GetRegistries retrieves registries from a configuration file, caches them, and handles errors.
3356	readRegistryConf reads a configuration file and returns its contents as bytes along with any errors encountered
3357	Manifest returns image manifest blob and MIME type.
3358	ConfigUpdate updates the tarball reference's configuration and annotations, returning an error if any issues arise during the process.
3359	parseImageAndDockerReference extracts two Docker references from input image and string, returning them or an error if parsing fails
3360	parseDockerReferences parses two Docker references and returns them or an error
3361	ListNames returns sorted list of non-deprecated transport names.
3362	NewReference creates an OSTree image reference with a default tag if none specified and resolves the repository path, returning an error if invalid.
3363	signaturePath returns the path to the signature file at the given index
3364	ValidateImageName checks if an image name is valid and returns an error if it's not.
3365	SplitPathAndImage returns path and image based on OS
3366	ValidateOCIPath checks if a given path contains a colon, allowing multiple on Windows.
3367	ValidateScope checks if a given scope is valid on the current OS and returns an error if it's invalid or uses a non-canonical path format.
3368	BlobInfoFromSchema2Descriptor constructs a BlobInfo from a Schema2Descriptor.
3369	Schema2FromManifest converts manifest JSON to Schema2 struct.
3370	Schema2FromComponents constructs a new Schema2 object from components.
3371	SetAuthentication updates authentication details in system context for given registry, username, and password.
3372	RemoveAuthentication deletes authentication for a given registry from system context or returns an error if not logged in.
3373	RemoveAllAuthentication clears authentication information from a system context.
3374	readJSONFile reads a Docker config file and returns its contents or an error if the file is not found or cannot be parsed
3375	modifyJSON updates a JSON file using a given editor function and handles errors during file operations
3376	findAuthentication locates authentication details from a JSON file or credential helpers, returning them or an error if not found
3377	NewDestination initializes a Destination struct with writer, tar writer, repository tags, and blob map.
3378	AddRepoTags will add repository tags to the destination object
3379	writeLegacyLayerMetadata processes layer descriptors to generate legacy metadata files, returning paths and IDs.
3380	sendSymlink sends a symbolic link using tar format and logs the operation
3381	sendBytes sends file data using sendFile method
3382	sendFile sends a file as a tar archive and validates its size.
3383	Commit will close the tar archive associated with the destination and return any errors encountered
3384	imageMatchesRepo checks if an image's name matches a given repository reference.
3385	resolveImage fetches an image from storage based on reference, handling various cases including digest resolution and updating image digest.
3386	Transport method returns a new ImageTransport instance with store and UID/GID maps from the original reference.
3387	storageReference.StringWithinTransport will generate a string representation of the reference including transport options and identifiers
3388	PolicyConfigurationNamespaces generates a list of configuration namespaces based on the storage reference's properties.
3389	GzipDecompressor takes a reader and returns a decompressed reader along with any errors encountered
3390	Bzip2Decompressor returns a reader for decompressing data using Bzip2 algorithm.
3391	XzDecompressor decompresses data from an io.Reader using the xz algorithm and returns an io.ReadCloser along with any errors encountered during the process.
3392	DetectCompression identifies and returns the appropriate decompression function along with a reader for further processing.
3393	newImageDestination creates a Docker image destination using system context and reference, returning an error if unsuccessful
3394	mountBlob attempts to mount a blob and handles different HTTP responses accordingly.
3395	bicTransportScope returns a BICTransportScope with Opaque set to the domain of the given Docker reference.
3396	newBICLocationReference creates a BICLocationReference from a docker reference by using the repository name
3397	parseBICLocationReference will parse a BIC location reference and return a named reference or an error
3398	NewSourceFromStream creates a new source from an input stream, saves it to a temp file, decompresses if necessary, and returns a pointer to the source along with any errors encountered.
3399	readTarComponent reads a tar component from a source and returns its bytes or an error
3400	ensureCachedDataIsPresent will cache data from tar manifest and config, handling errors and updating fields accordingly
3401	loadTarManifest reads tar component and parses JSON to extract ManifestItems.
3402	Close method on Source object removes tar file path if configured and returns error
3403	newImageDestination initializes a Docker image destination with validation and asynchronous loading.
3404	imageLoadGoroutine loads an image from a reader using Docker client, handles errors, and sends status updates.
3405	NewReference creates a new OCI image reference from file and image strings, validating paths and names and returning an error if any validation fails
3406	createOCIRef generates a temporary directory and creates an OCI reference, returning an error if any step fails
3407	createUntarTempDir creates a temporary directory, untars a file to it, and returns the OCI reference or an error
3408	destructivelyPrioritizeReplacementCandidatesWithMax sorts candidates based on timestamps and returns top N replacements.
3409	newImageDestination creates a new image destination and returns it along with any errors encountered during the process.
3410	resolveExistingPathToFullyExplicit returns the absolute path with symlinks resolved and cleaned, or an error if any step fails.
3411	newImageDestination creates or overwrites a directory for storing images, ensuring it's correctly formatted and empty.
3412	isDirEmpty checks if a directory is empty and returns a boolean and an error if the directory cannot be read
3413	removeDirContents will delete all contents of a directory at the specified path, returning an error if any file cannot be removed
3414	GetRepositoryTags retrieves repository tags using Docker API, handling pagination and parsing JSON response.
3415	DefaultCache returns a BlobInfoCache from disk or memory if an error occurs.
3416	uncompressedDigestLocked retrieves or returns an uncompressed digest from cache, or an empty digest if not found
3417	Close method closes ociArchiveImageDestination, deletes temp dir, returns error from unpackedDest close
3418	ociArchiveImageDestination's PutManifest forwards the manifest to unpackedDest.
3419	Commit method commits the unpacked destination, wraps any errors, and then tars the source directory to the destination file.
3420	tarDirectory will create a tar file from a directory and return an error if it fails
3421	ParseStoreReference processes a storage reference and returns a storage reference object along with any errors encountered during processing.
3422	chooseDigestFromManifestList selects a digest from a manifest list based on system context or defaults.
3423	ChooseManifestInstanceFromManifestList selects an instance from a Docker V2 list manifest or returns an error.
3424	manifestSchema1FromComponents constructs a generic manifest from schema1 components, handling errors gracefully.
3425	manifestDigest retrieves a manifest digest from the source or returns an error if loading fails
3426	deleteImage deletes a Docker image using its reference and system context, handling various registry behaviors and ensuring proper cleanup of signatures.
3427	Schema1FromComponents constructs a Schema1 object from components and returns it or an error.
3428	initialize checks schema validity and parses V1 compatibility data.
3429	ToSchema2Config converts a schema 1 image to a schema 2 config, handling compatibility issues and building history and rootfs information.
3430	Digest computes the manifest's digest, handling Docker V2 schema 1 signed manifests by parsing signatures and extracting payloads before computing the digest.
3431	MatchesDigest checks if the manifest's digest matches the expected digest and returns a boolean result along with any errors encountered.
3432	NormalizedMIMEType returns the normalized MIME type based on the input string, defaulting to DockerV2Schema1SignedMediaType if unrecognized.
3433	FromBlob processes a blob based on its MIME type and returns a Manifest or an error.
3434	NewReference resolves a path to an image reference.
3435	dirReference.layerPath combines path and digest to form a layer path
3436	dirReference's signaturePath generates a file path for a given index
3437	New creates a new pool with n workers using the provided constructor function.
3438	NewFunc creates a pool of workers using a closure to process tasks.
3439	ProcessTimed processes a job with a timeout, returning results or errors accordingly.
3440	SetSize adjusts pool worker count asynchronously and synchronously.
3441	GetSize returns the number of workers in the pool
3442	TL returns the top-left corner of the rectangle as a Point.
3443	BR method returns bottom-right corner point of rectangle
3444	CVBox converts a Box2D struct to a C-compatible CvBox2D struct
3445	Points method returns calculated points from a Box2D object as Point2D32f slices.
3446	FOURCC generates a 32-bit integer from four 8-bit integers
3447	Merge combines four images into one destination image using unsafe pointers.
3448	Split will separate channels from an image into individual images.
3449	AddWeighted combines two images using weighted sums.
3450	And will apply bitwise AND operation to two images and store the result in the third image.
3451	AndWithMask applies a bitwise AND operation between two images using a mask.
3452	AndScalar applies a scalar operation to an image without a mask.
3453	AndScalarWithMask applies a scalar operation to an image using a mask.
3454	Or combines two images using bitwise OR operation, storing result in third image.
3455	OrWithMask applies a bitwise OR operation between two images using a mask.
3456	OrScalar applies OR operation between src image and scalar value, storing result in dst image.
3457	OrScalarWithMask applies a bitwise OR operation between a scalar value and an image, using a mask to determine which pixels to modify.
3458	AddWithMask adds two images with a mask using OpenCV's cvAdd function.
3459	AddScalar applies a scalar value to an image, optionally using a mask.
3460	AddScalarWithMask adds a scalar value to an image using a mask.
3461	Subtract performs image subtraction using two source images and stores the result in a destination image without applying any mask.
3462	SubtractWithMask performs image subtraction using a mask.
3463	SubScalar subtracts a scalar from an image and stores the result in another image with optional mask.
3464	SubScalarWithMask subtracts a scalar from an image using a mask.
3465	SubScalarRev subtracts a scalar from an image without applying a mask.
3466	SubScalarWithMaskRev subtracts a scalar from an image using a mask.
3467	AbsDiff calculates the absolute difference between two images and stores it in a destination image.
3468	AbsDiffScalar calculates the absolute difference between a scalar and each pixel of an image, storing the result in another image.
3469	MeanStdDevWithMask calculates mean and standard deviation of an image with a mask.
3470	CreateSeq creates a new sequence with specified flags and element size.
3471	Push adds an element to a sequence and returns the new element.
3472	`Pop` removes and returns an element from the sequence.
3473	PushFront adds an element to the front of a sequence and returns the new head.
3474	PopFront removes the front element from a sequence and stores it in the given pointer.
3475	GetElemAt retrieves an element from a sequence at a specified index and returns it as an unsafe pointer.
3476	RemoveAt removes an element from the sequence at the specified index using a C function.
3477	Delay returns a function to set the delay option on a Config object
3478	BackOffDelay calculates exponential backoff delay based on retry count and configuration.
3479	Error method returns a formatted string with all non-nil errors from a list, prefixed with their index.
3480	Arguments appends strings to RequestBuilder's args field and returns the builder.
3481	BodyString sets request body to a string and returns the builder.
3482	BodyBytes sets the request body to bytes and returns the RequestBuilder.
3483	Body method sets request body and returns builder
3484	Option sets a key-value pair in RequestBuilder's options map and returns the builder.
3485	Header method sets request header and returns builder
3486	Send sends the request using the specified HTTP client and returns the response or an error.
3487	Exec sends HTTP request, decodes response or closes it if no response struct is provided.
3488	Next retrieves the next message from the subscription, decoding JSON data and handling errors.
3489	Cancel will close the subscription's output channel if it is open and return any errors encountered
3490	FileList fetches the first file from the specified directory or returns an error if none found.
3491	Cat sends a request to retrieve file content at the specified path and returns a reader or an error.
3492	List will return a list of links and an error if the server response is invalid
3493	Pin will send a request to add a file or directory to the shell's pinset with optional recursion.
3494	Pins method returns a map of pin info from shell request or an error.
3495	Shell's Version method retrieves version and commit info from a request.
3496	SwarmPeers sends a request to retrieve swarm peer information and returns it along with any errors encountered.
3497	SwarmConnect attempts to establish a connection using provided addresses and returns an error if unsuccessful.
3498	DagPutOptions configures DagPutSettings with optional parameters and returns them or an error.
3499	Pin sets the pin value for dag put options and returns an error if unsuccessful
3500	Kind sets the kind option for dagput and returns a DagPutOption error if it fails
3501	Hash sets the dag option's hash and returns an error if it fails
3502	AddDir adds a directory to Shell, returns its hash or error.
3503	Publish method sends a publish request to a shell with a node and value, returning any errors encountered during execution
3504	PublishWithDetails sends a publish request with details and returns the response or an error.
3505	ResolveValue determines the value based on key or bind variables, returning the appropriate Value or an error if conditions are not met.
3506	GenerateQuery constructs SQL query using bind variables and extras, handling errors during variable fetching and encoding.
3507	EncodeValue encodes a bind variable to SQL, handling tuples by wrapping values in parentheses.
3508	Lex tokenizes input skipping comments if allowed, updating lval and lastToken.
3509	skipStatement advances the tokenizer until it encounters a semicolon or end-of-file
3510	reset will clear all fields in Tokenizer struct
3511	Preview will analyze SQL query and return statement type or unknown
3512	NewPlanValue processes an expression and returns a PlanValue or an error based on its type.
3513	StringIn checks if a string matches any given value and returns true if it does.
3514	NewTrackedBuffer creates a TrackedBuffer instance with a buffer and nodeFormatter.
3515	NewStringArena creates a new StringArena with a byte buffer of specified size.
3516	NewString appends byte slice to StringArena's buffer and returns new string or original if no space.
3517	SpaceLeft returns the remaining capacity in the StringArena buffer.
3518	ParseStrictDDL parses SQL into a Statement with errors.
3519	ParseNext processes the next token using a tokenizer, skipping semicolons and handling errors or partial DDL statements.
3520	Append formats a SQLNode to a buffer using a TrackedBuffer.
3521	ExprFromValue converts a sqltypes.Value to its corresponding AST expression.
3522	Backtick will enclose input string in backticks, escaping any existing backticks within the string.
3523	NewValue creates a new Value from a byte slice based on its type, returning an error if parsing fails.
3524	Value's String method returns a formatted string based on its type and whether it's quoted
3525	EncodeSQL method encodes a value to SQL format using a binary writer, handling null, quoted, and unquoted cases.
3526	EncodeSQL appends SQL-encoded values to a buffer, separating each row with a comma and enclosing each value in parentheses.
3527	EncodeSQL encodes tuple equality list to SQL buffer using different methods based on column count
3528	WalkStatement processes SQL nodes, converting specific types and stopping for Select nodes.
3529	WalkSelect processes SQL nodes, converting values or comparisons, and returns true with no error.
3530	BindVariablesEqual checks if two maps of bind variables are equal using reflection.
3531	New creates a JWTMiddleware instance with default or specified options.
3532	HandlerWithNext checks JWT and calls next handler if valid.
3533	FromAuthHeader extracts token from Authorization header or returns error if format is incorrect
3534	FromParameter creates a TokenExtractor from a request parameter.
3535	FromFirst combines multiple TokenExtractors to return the first non-empty token or an error.
3536	getHelloPacket constructs an RPC with subscription options for each topic in PubSub's myTopics.
3537	NewFloodsubWithProtocols creates a new PubSub instance using FloodSubRouter with specified protocols and options.
3538	NewFloodSub creates a new Floodsub pubsub instance with default protocols.
3539	NewLRUBlacklist creates a new LRU blacklist instance with the specified capacity, returning it or an error if creation fails.
3540	NewRandomSub creates a new PubSub instance using a RandomSubRouter and provided options.
3541	NewGossipSub initializes a new PubSub instance with a GossipSubRouter and returns it along with any errors encountered.
3542	NewPubSub creates a new PubSub instance with specified options and initializes its channels and maps, attaching it to a router and setting stream handlers.
3543	WithValidateThrottle sets a throttle limit for validation and returns an Option to apply it to a PubSub instance.
3544	WithBlacklist sets a blacklist option for a PubSub instance
3545	handleRemoveSubscription cancels a subscription, closes its channel, and removes it from topic tracking if no more subscriptions exist
3546	handleAddSubscription manages subscription requests, announces topics, and tracks subscribers.
3547	announce sends subscription options to peers or schedules retries if queues are full.
3548	notifySubs sends messages to subscribers for each topic, logging if delivery fails due to slow subscribers.
3549	seenMessage checks if a message ID has been seen using a set.
3550	subscribedToMsg checks if the pubsub instance is subscribed to a message based on topic IDs
3551	msgID constructs a message ID from a protobuf message's sender and sequence number.
3552	pushMsg filters and validates messages before processing them or dropping them based on certain conditions.
3553	validate checks message signature and topic values, logs errors if invalid, sends valid messages
3554	validateSingleTopic checks if message validation is allowed for a topic based on a throttle channel, returning the result or indicating throttling.
3555	getValidators retrieves validators for a given message's topics.
3556	Subscribe to a topic with options and return a subscription or error.
3557	SubscribeByTopicDescriptor will subscribe to a topic using a descriptor and options, returning a subscription or an error if authentication or encryption modes are not supported.
3558	GetTopics sends a request to PubSub to retrieve topics and returns them when available.
3559	Publish sends a message to subscribers on a given topic with optional signing.
3560	ListPeers sends a request to list peers for a given topic and returns their IDs.
3561	WithValidatorTimeout sets a timeout for validators and returns an option function to apply it.
3562	WithValidatorConcurrency sets concurrency level for validator.
3563	RegisterTopicValidator adds a validator to a topic and returns an error if validation fails
3564	UnregisterTopicValidator sends a request to remove a topic validator and returns any errors encountered.
3565	DefaultMetricPrefix prepends "tchannel." to a metric name with optional tags
3566	MetricWithPrefix generates a metric name with a prefix, name, and tags, ensuring proper formatting and adding relevant keys based on the metric name.
3567	NewClient creates a new Client instance using provided Channel, target service name, and optional options, setting HostPort if specified.
3568	Call makes a remote procedure call using the provided method, arguments, and context, handling retries and errors appropriately.
3569	CallPeer initiates a peer call using TChannel and wraps it with additional logic.
3570	CallSC initiates a remote procedure call using TChannel and returns an error if it fails
3571	ReadResponse parses a TChannel call to construct an HTTP response object.
3572	writeHeaders method on tchanResponseWriter writes status code and headers to response writer and handles errors
3573	ResponseWriter creates a new HTTP response writer and returns it along with a finish function to complete the response.
3574	ReadHeaders reads headers from a reader and returns them as a map or an error if reading fails.
3575	NewTCPRawRelay creates a TCP relay to forward data between multiple destinations using io.Copy.
3576	NewClient creates a new client instance with default options, configures it based on input, sets up timeouts, handlers, and adds initial peers, returning the client or an error.
3577	`Advertise` method registers services, performs initial advertisement, triggers handler, and starts advertising loop.
3578	Handle parses JSON from inbound call, processes it, and sends response or error accordingly.
3579	Start initializes and runs a TChannel server on the specified host port, setting default values and handling errors.
3580	Port extracts the port number from the HostPort field of a Server instance.
3581	SetStrategy updates the score calculation strategy and recalculates scores for all peers.
3582	Add will add a peer to the list if it doesn't exist and return the peer
3583	GetNew selects a new peer from the list, avoiding previously chosen ones, and returns it or an error if no suitable peer is found.
3584	Get selects a peer from a list, preferring new ones unless none are available, then choosing any. It returns an error if no peers are found.
3585	Remove deletes a peer from the list and returns an error if not found
3586	PeerList's Copy method returns a copy of the peers map with read lock.
3587	Len returns the number of peers in the list, ensuring thread safety through locking.
3588	exists checks if a hostPort exists in the peer list and returns the associated score and a boolean indicating its presence.
3589	getPeerScore retrieves peer score and existence from list based on hostPort
3590	onPeerChange updates peer score if it has changed
3591	updatePeer updates a peer's score in the list and heap if it has changed.
3592	getConn retrieves a connection from either inbound or outbound list based on index
3593	GetConnection fetches or creates a connection, ensuring only one attempt at creation per time.
3594	getConnectionRelay returns a connection or error, creating a new one if necessary with a timeout and hiding listening addresses.
3595	canRemove checks if all connections are closed
3596	addConnection adds a new connection to a Peer in a specified direction, checking state and updating status.
3597	removeConnection removes a connection from a slice and updates the pointer, returning true if found
3598	connectionCloseStateChange updates Peer state when a connection changes, removes it from lists, and notifies if found.
3599	Connect method establishes a connection using the peer's channel and host port, returning the connection and any errors encountered.
3600	BeginCall starts a new RPC call and returns an OutboundCall object or an error.
3601	NumConnections returns the number of inbound and outbound connections for a Peer.
3602	NumPendingOutbound calculates total pending outbound connections for a peer
3603	isEphemeralHostPort checks if a host port is empty or matches specific ephemeral values
3604	Get retrieves a value from a handler using a key, locking the handler during retrieval.
3605	Set method updates key-value pairs in kvHandler ensuring key validity and setting response headers with count.
3606	ClearAll clears all key-value pairs in handler if admin.
3607	NewChannel initializes a new channel with options and returns it along with an error if any validation fails
3608	Serve method listens on a network connection and handles client requests in a goroutine.
3609	ListenAndServe starts a TCP server on the specified host and port, handling connections until an error occurs or the server is stopped.
3610	Register method on Channel struct registers a handler for a specific method name if the channel is configured with a default root handler.
3611	PeerInfo returns local peer info from a channel safely
3612	GetSubChannel retrieves or adds a sub-channel based on service name and applies options.
3613	serve method handles incoming connections, retries on temporary errors, and performs handshakes asynchronously.
3614	Ping checks connection to a peer and returns error if failed
3615	StatsTags returns a copy of the common stats tags for the channel.
3616	Connect method establishes a connection to a remote host using context, handles timeouts, and manages connection states.
3617	exchangeUpdated updates peer info in channel if remote peer exists
3618	updatePeer updates peer information and notifies relevant components
3619	addConnection adds a connection to the channel if it's active and the channel is in the correct state.
3620	removeClosedConn removes a closed connection from the channel's mutable connections map
3621	connectionCloseStateChange updates channel state based on connection close events and peer states.
3622	Channel's State method returns its current state while holding a read lock.
3623	NewReader retrieves a Reader from a pool, initializes it with the given reader, and returns it.
3624	ReadUint16 reads two bytes from the reader and returns a uint16 value or zero on error
3625	ReadString reads up to n bytes from reader and returns them as a string, or an empty string on error
3626	ReadLen16String reads a 16-bit unsigned integer as length and returns a string of that length.
3627	Register method on Behavior struct registers Thrift and JSON on given channel
3628	Run executes a behavior test, logs parameters, parses sampled flag, sets up request levels, starts tracing, validates response, and logs results.
3629	Get retrieves a relayTimer from the pool or creates a new one if none available. If retrieved, it resets the release flag. Otherwise, it initializes a new timer with a large timeout and stops it immediately.
3630	relayTimerPool's Put method releases a relayTimer unless verification is enabled.
3631	Start will activate a relay timer with specified duration, items, ID, and originator status, panicking if already active or if the underlying timer is reset twice.
3632	Relay timer's release method sets the timer as released and returns it to the pool after verifying it's not active.
3633	NewLogger creates a logger instance using a writer and optional log fields.
3634	NewTCPFrameRelay creates a new TCP frame relay instance and returns it along with any errors encountered during initialization.
3635	tallyTags aggregates tags from knownTags into a map, skipping empty values
3636	Isolated locks the SubChannel, creates a new sibling for peers, sets strategy, then unlocks.
3637	Isolated checks if the channel has isolated peers.
3638	Register adds a handler for a specific method on a SubChannel.
3639	GetHandlers retrieves a copy of the registered handlers for a SubChannel, ensuring thread safety through RLock.
3640	StatsTags returns a map of stats tags with the subchannel name added
3641	registerNewSubChannel adds a new subchannel to the map if it doesn't exist and returns the existing or new subchannel along with a boolean indicating if it was added
3642	get retrieves a SubChannel by serviceName from subChMap with a read lock.
3643	getOrAdd retrieves or adds a service channel, returning the channel and whether it was newly added
3644	Discover will return a list of host ports for a given service name and an error if the discovery fails
3645	Start method starts a client by listening and serving HTTP requests concurrently.
3646	listen method sets up HTTP server on Client's host port, handles requests using crossdock handler, and returns error if setup fails.
3647	WriteRequest sends HTTP request details over TChannel using write buffers and writers.
3648	ReadRequest parses a TChannel request to create an HTTP request object.
3649	NewReadBufferWithSize creates a new ReadBuffer with a specified size and initializes it with an empty buffer.
3650	ReadByte reads a single byte from the buffer and returns it along with any error encountered.
3651	ReadBytes reads 'n' bytes from buffer or returns EOF error
3652	ReadString reads n bytes from the buffer and returns them as a string, or an empty string if no bytes are available.
3653	ReadUint16 reads two bytes from buffer and returns them as a big-endian uint16, or zero if no bytes are available.
3654	ReadUint32 reads 4 bytes from the buffer and returns them as a uint32 in big-endian format or 0 if no bytes are available.
3655	ReadUint64 reads 8 bytes from buffer and returns a big-endian uint64 or zero if no bytes are read
3656	ReadUvarint reads an unsigned variable-length integer from the buffer and returns its value.
3657	ReadLen8String reads a single byte to determine the length and then reads that many characters from the buffer.
3658	ReadLen16String reads a 16-bit unsigned integer from the buffer and returns a string of that length.
3659	FillFrom reads data from an io.Reader into the buffer, returning the number of bytes read or an error if the buffer is too small.
3660	Wrap method sets buffer, remaining, and err fields of ReadBuffer struct
3661	WriteSingleByte will write a single byte to the buffer and set an error if the buffer is full or already has an error
3662	WriteBytes reserves space in buffer and copies input bytes there if possible.
3663	WriteUint16 reserves space in buffer and writes a big-endian uint16.
3664	WriteUint32 will write a 32-bit unsigned integer to the buffer if there is enough space available.
3665	WriteUint64 reserves space in buffer and writes big-endian uint64 value
3666	WriteUvarint writes a variable-length unsigned integer to the buffer.
3667	WriteString reserves space in WriteBuffer and copies string data into it.
3668	WriteLen8String writes an 8-bit length-prefixed string to the buffer, setting an error if the string is too long.
3669	WriteLen16String writes a string to buffer with a 16-bit length prefix.
3670	DeferByte will return a reference to a byte from the buffer or an empty reference if the buffer is full
3671	DeferBytes defers n bytes and returns a reference to them
3672	FlushTo will write the buffer to the specified writer and return the number of bytes written and any error encountered
3673	Reset will clear the buffer and reset the error to nil
3674	Wrap assigns input byte slice to buffer and sets remaining data accordingly
3675	Update method updates the referenced Uint16 value with new value if reference is valid.
3676	Update method sets the referenced Uint32 value to n using BigEndian encoding.
3677	Update will update the Uint64Ref with a new value using big-endian byte order
3678	Update copies byte slice b to BytesRef if it's not nil
3679	UpdateString updates the string at the reference if it's not nil
3680	`ArgReader initializes argument reading and returns itself or an error.`
3681	finish updates checksum and flags based on whether more fragments are present
3682	newWritableChunk creates a new writable chunk with given checksum and contents.
3683	writeAsFits writes up to remaining bytes and updates checksum, size.
3684	newFragmentingWriter initializes and returns a new fragmentingWriter instance with specified dependencies and initial state.
3685	ArgWriter starts an argument and returns the writer or an error
3686	BeginArgument starts an argument, checks state, requests fragments, ensures space, and updates writer state.
3687	Write implements io.Writer interface, handling buffer chunks and flushing on overflow.
3688	flushFragment and newFragment will be called to manage chunks and fragments, returning an error if any step fails
3689	Close method handles fragmenting writer closure, flushing fragments, and managing argument states.
3690	handleCallRes forwards frame to outbound and returns true on error
3691	Arg2Reader reads method from arg1Reader and returns arg2Reader or error
3692	handleError processes an error frame, logs issues, forwards frames, and returns whether forwarding occurred.
3693	doneReading updates stats and logs based on call outcome and handles retries.
3694	newFragment creates a new writable fragment with a message and checksum, handling errors and pooling resources.
3695	flushFragment sends a fragment over the connection or returns an error if there's an issue
3696	failed logs writer error and returns it
3697	arg1Reader returns an ArgReader and an error by calling argReader with specific arguments.
3698	arg2Reader returns an ArgReader and an error based on the reader's state
3699	arg3Reader returns an ArgReader for the third argument or an error if it fails
3700	argReader updates state and returns ArgReader or error
3701	recvNextFragment retrieves the next fragment of data, handling initial fragments and parsing messages, returning a readable fragment or an error.
3702	releasePreviousFragment will clear the previous fragment and call done() on it if it exists
3703	failed updates reader's error logs shuts down mex and returns the new error
3704	parseInboundFragment processes a frame to extract a readableFragment and handles errors
3705	NewContext creates a new context with a timeout and returns it along with a cancel function.
3706	WithHeaders wraps a context with additional headers returning a new Context.
3707	healthCheck monitors connection health using a ticker and logs failures, closing the connection if too many occur consecutively.
3708	SetTimeout updates ContextBuilder's timeout and returns itself.
3709	AddHeader adds or updates a header in the ContextBuilder and returns the updated builder.
3710	SetHeaders updates ContextBuilder's headers and marks parent headers for replacement, returning the builder.
3711	SetConnectTimeout sets the connection timeout duration on ContextBuilder and returns itself
3712	SetRetryOptions updates RetryOptions in ContextBuilder and returns the builder
3713	SetTimeoutPerAttempt updates retry options on ContextBuilder with given timeout per attempt and returns self.
3714	SetParentContext sets the parent context and returns the modified ContextBuilder
3715	Build constructs a new ContextWithHeaders using parameters from ContextBuilder, applying a timeout or cancellation based on parent context settings.
3716	overrideHeaders updates headers based on CallOptions fields
3717	read reads data from the reader into bs and returns any errors encountered
3718	ReadJSON decodes JSON from a reader into an interface, handling empty inputs gracefully.
3719	NewArgWriter initializes ArgWriteHelper with writer and error.
3720	write method calls inner write function to handle byte array writing with error handling
3721	WriteJSON encodes data to JSON using writer and returns error
3722	Register registers an HTTP handler for pprof using the provided registrar.
3723	Count returns the number of active items in the relay after subtracting tombstones.
3724	Get retrieves a relay item by ID and returns it along with a boolean indicating its existence.
3725	Add will add or update a relay item by ID while ensuring thread safety.
3726	Entomb marks a relay item for deletion after a delay or immediately if too many tombstones exist.
3727	NewRelayer creates a new Relayer instance with specified channel and connection details.
3728	Relay processes a Frame, handling non-call requests or forwarding them if necessary, and manages call requests using a lazy approach.
3729	Receive processes a frame, handles timeouts, and manages connections, returning whether the call was sent successfully and any failure reason.
3730	handleNonCallReq processes non-call requests using outbound or inbound maps, remaps IDs, receives frames, handles failures, and completes relays.
3731	addRelayItem adds a new relay item to either inbound or outbound based on originator status and sets its timeout.
3732	failRelayItem marks a relay item as failed and handles potential timeouts.
3733	WriteStruct serializes a struct to a writer using a Thrift protocol and returns any errors encountered.
3734	ReadStruct reads a struct from a reader using a protocol and returns any errors encountered.
3735	EnsureEmpty checks if reader has unexpected bytes after specified stage returns error if found
3736	NewServer creates a server using options, handles external servers, sets up Thrift and raw handlers, and registers them.
3737	Advertise sets up a Hyperbahn client and advertises it, returning an error if setup fails.
3738	handleCallReqContinue forwards a frame and returns true if successful.
3739	dispatchInbound handles incoming calls, reads methods, updates stats, and manages timeouts/cancellations.
3740	CallOptions returns a new instance of CallOptions with callerName, Format, ShardKey, RoutingDelegate, and RoutingKey set to the corresponding values from InboundCall.
3741	Response returns the InboundCallResponse object or marks it as failed if the original call had an error.
3742	SendSystemError sets system error flag, updates state, releases previous fragment, and sends error message.
3743	SetApplicationError updates state and sets application error if conditions are met, returning any resulting errors.
3744	Arg2Writer initializes ArgWriter for arg1Writer and returns arg2Writer or error.
3745	doneSending updates spans, records latency, increments counters based on error type, cancels context, and shuts down mex if no errors.
3746	newState creates a new state object with typedefs and enum mappings
3747	rootType recursively resolves types based on includes and typedefs
3748	checkInclude splits thriftType name, updates type, retrieves include, and returns new state, type, and include
3749	isResultPointer checks if the given Thrift type corresponds to a pointer in Go.
3750	goType returns a Go type based on the given Thrift type with a specified prefix.
3751	goTypePrefix returns a Go type based on the Thrift type, handling binary, list, set, map, imports, and typedefs.
3752	NewContext creates a new context with a specified timeout and returns it along with a cancel function.
3753	newIncomingContext creates a new context with a timeout and incoming call details
3754	CurrentCall retrieves the current call from context or returns nil if not available.
3755	New initializes a new random number generator using a given seed.
3756	Health checks if service is up and returns status along with optional message.
3757	headerCtx.Headers retrieves request headers or returns nil
3758	ResponseHeaders returns response headers from the context or nil if not available
3759	headerCtx's SetResponseHeaders sets response headers or panics if invalid context used.
3760	Child method returns a new context with a copy of headers or an empty headers container.
3761	Wrap will add headers to the given context or return a new context with an empty header container
3762	WrapWithHeaders adds headers to a context and returns a new context with those headers.
3763	WithoutHeaders removes headers from a context by setting them to nil.
3764	Notify will send an error notification once and return an error if it has already been notified
3765	forwardPeerFrame forwards a peer frame prioritizing ctx errors, then buffer space, followed by other errors.
3766	recvPeerFrame checks ctx, reads from recvCh or errCh, prioritizes recvCh, returns Frame or error
3767	recvPeerFrameOfType receives a specific type of peer frame and returns it or an error if the type is incorrect or the frame cannot be parsed.
3768	shutdown ensures messageExchange is closed only once, notifies error channel, and removes exchange from set
3769	newMessageExchangeSet creates a new message exchange set with the given logger and name, initializing necessary maps for exchanges and expired exchanges.
3770	addExchange adds a message exchange to the set and returns an error if the set is shutdown or the message ID already exists
3771	newExchange creates a new message exchange and logs the creation if debugging is enabled, handles errors during addition, and returns the created exchange or an error.
3772	deleteExchange removes a message exchange from either active or expired sets and returns whether it was found and if it had timed out.
3773	removeExchange removes a message exchange by ID, logs debug info, locks, deletes, unlocks, and cleans up if found or expired.
3774	expireExchange removes a message exchange due to timeout/cancellation/blackhole and records it if expired.
3775	forwardPeerFrame forwards a peer frame to the appropriate exchange, logging details on success or failure.
3776	copyExchanges creates a copy of message exchanges and returns whether shutdown occurred and the copied exchanges
3777	stopExchanges will log and stop message exchanges due to an error, notifying blocked callers without shutting down the exchange.
3778	NewFrame initializes a new frame with a buffer and returns a pointer to it.
3779	ReadBody processes a frame's header and body, validating the payload size and reading data accordingly.
3780	WriteOut method writes frame header and data to writer, returning error if any step fails
3781	CanRetry determines if an error can trigger a retry based on the retry policy and error code.
3782	HasRetries checks if retries are allowed based on the current attempt and error.
3783	SinceStart calculates time duration since request started or returns fallback duration if RequestState is nil.
3784	AddSelectedPeer adds a peer to the selected peers list in RequestState, handling host and port combinations.
3785	RunWithRetry executes a function with retries based on options until successful or max attempts reached.
3786	ChecksumSize returns the size of the checksum based on the type.
3787	New will create a new checksum from the pool and reset it
3788	parseTemplates processes template files, optionally skipping TChannel, and returns parsed templates along with any errors encountered.
3789	NewStringSliceFlag creates a flag for a slice of strings and returns it.
3790	withStateFuncs adds goType function to template with data
3791	IntrospectOthers returns a map of service to ChannelInfo for other channels based on options.
3792	ReportInfo returns channel info based on options.
3793	IntrospectState returns peer runtime states based on introspection options
3794	IntrospectState returns a map of subchannel states with runtime details.
3795	Peer's runtime state is introspected and returned with options.
3796	IntrospectState returns connection runtime state including ID, state, addresses, exchanges, health checks, last activity, and relayer state if available.
3797	IntrospectState calculates runtime state by summing inbound and outbound counts and retrieving introspection details.
3798	IntrospectState returns the state of relay items based on options and name.
3799	IntrospectState retrieves runtime state of messageExchangeSet including exchanges if specified.
3800	NewContext creates a new timeouted context and returns it along with a cancel function
3801	WriteResponse sends a response to an inbound call, handling errors and application-specific data.
3802	Wrap will take a handler and return a new handler that reads arguments, processes them, and writes a response or error back.
3803	initFromOpenTracing injects a tracing context from an OpenTracing span into a zipkin format on the receiver.
3804	startOutboundSpan initializes and configures an outbound RPC span with tracing details.
3805	intToIP4 converts a 32-bit integer to an IPv4 address
3806	servicePeerToHostPort converts a peer to its host and port as a string
3807	NewStatsdReporter creates a new Statsd reporter using the provided address and prefix, returning it or an error if the client cannot be created.
3808	UnmarshalText will update the receiver with the corresponding value from a map or return an error if the input data is invalid
3809	peerHeap's Push method adds a new peer score to the heap and updates its index.
3810	Pop removes the last item from peerScores and returns it, setting index to -1 for safety.
3811	peerHeap's updatePeer method adjusts heap position based on peer score index.
3812	removePeer removes a peer from the heap based on its score.
3813	pushPeer adds a peer to the heap with a randomized order.
3814	addPeer adds a peer to the heap and swaps it with a random peer
3815	NewClient creates a new TChanClient using the given channel, service name, and options.
3816	Add checks if peer exists, creates new if not, returns existing or new peer
3817	Get retrieves a peer by hostPort from the RootPeerList and returns it along with a boolean indicating if the peer was found.
3818	WithTimeout returns an option to set a timeout duration.
3819	Methods returns sorted list of service methods or cached result if available.
3820	InheritedMethods returns a list of inherited methods from the service's parent services, sorted alphabetically.
3821	Arguments method returns a slice of Field pointers from Method's arguments.
3822	ArgList generates a comma-separated list of method arguments including context.
3823	CallList constructs a method call string using provided arguments.
3824	RetType returns method's return type or "error" if no return type exists
3825	WrapResult will return a pointer to the response variable if the method has a result pointer type, otherwise it returns the variable itself.
3826	ReturnWith formats response and error names or returns error name if no return exists
3827	Declaration returns a string representing the field's name and argument type.
3828	startIdleSweep initializes and starts an idle sweep process for a channel with given options.
3829	start method initializes and starts the idle connections poller if not already running
3830	Stop will stop the idle connection poller and log the action
3831	ResolveWithGoPath searches for a file using GOPATH candidates and returns the first valid path or an error if not found.
3832	setExtends updates service extends references in a parse state map, returning an error if any extends are invalid.
3833	register adds a handler to the map for a specific HTTP method
3834	NewClient creates a client instance based on options and hosts.
3835	ListenIP fetches network interfaces and returns the IP address for listening or an error.
3836	listener Close method closes the listener and waits for references to finish before returning an error if closing fails
3837	ReadArgsV2 reads arguments from a TChannel reader and returns them along with any errors encountered.
3838	WriteArgs sends arguments over a TChannel call and returns the response arguments along with the response object or an error.
3839	Call initiates a remote procedure call and sends arguments, returning responses and errors.
3840	CallSC initiates a channel call with specified parameters and returns response data or error.
3841	CallV2 initiates a call using a sub-channel, sends arguments, and returns results or an error.
3842	NewRealRelay creates a new real relay instance and sets up a channel with specified options and listeners.
3843	NewServer initializes a server with a registrar, sets up logging and handlers, registers metadata, and optionally creates a sub-server.
3844	RegisterHealthHandler registers a health check handler function on the server
3845	Handle processes incoming RPC calls by parsing the method, validating the service, invoking the appropriate handler, and handling errors.
3846	MetricsKey returns a string representation of SystemErrCode or a default value if the code is unknown
3847	NewSystemError creates a new system error with a given code, message, and arguments.
3848	NewWrappedSystemError wraps an error with a system error if possible, otherwise returns a new SystemError.
3849	SystemError's Error method returns a formatted error message combining its code and message.
3850	GetContextError converts context errors to custom errors.
3851	GetSystemErrorCode extracts a system error code from an error object, returning a default code if the input is nil or not a recognized system error.
3852	ping sends a ping request and waits for a response or an error
3853	handlePingRes forwards peer frame or logs warning if error occurs, returning true if ping request was waiting
3854	handlePingReq processes incoming ping requests and sends pong responses or errors accordingly
3855	SendSystemError sends an error message over a connection and returns an error if the send fails or the connection is closed.
3856	connectionError logs connection issues, stops health checks, closes connection, and notifies exchanges on errors.
3857	withStateLock ensures exclusive access to the connection state during execution of function f
3858	withStateRLock acquires a read lock on stateMut executes function f releases the lock returns any error encountered
3859	readFrames reads frames from a connection, handles errors, updates activity, and manages frame pooling based on relay status.
3860	writeFrames sends frames over a connection, logs debug info, updates activity, and handles stop signal.
3861	hasPendingCalls checks if there are any pending calls or if the relay cannot close, returning true if either condition is met.
3862	checkExchanges updates the connection's state based on various conditions and calls relevant functions accordingly
3863	closeNetwork closes the network connection logs the action stops health checks sets a flag and handles any errors gracefully
3864	getLastActivityTime retrieves the last activity time from a connection object.
3865	Validate checks each method in a service for errors and returns the first encountered error or nil if no errors are found.
3866	logFailedRegistrationRetry logs registration failure and retries, warning if failures exceed max limit.
3867	initialAdvertise attempts to send an advertise message multiple times, backing off on failure, until successful or max retries reached.
3868	Service extracts and returns the service name from the payload using indices.
3869	TTL calculates the time-to-live duration from the payload using big-endian byte order.
3870	SetTTL updates the TTL field in Payload using big-endian encoding.
3871	finishesCall checks if a frame's message type indicates it concludes a call or response.
3872	Flat method returns a sorted slice of unique strings from multiple slices within PlatformStrings.
3873	Map applies a function to each string in PlatformStrings, collecting errors and filtering empty results.
3874	MapSlice applies a function to slices within various maps in PlatformStrings, collecting errors and returning a new PlatformStrings instance.
3875	GetProtoConfig retrieves a ProtoConfig from config if it exists.
3876	MapExprStrings applies a transformation to all string expressions within a Bazel expression tree.
3877	FlattenExpr simplifies expressions by extracting platform strings and squashing them into a list, returning the modified expression or original on error.
3878	makePlatformStringsExpr constructs a Bazel expression based on platform-specific strings, handling generic, OS, architecture, and platform selects, ensuring multiline formatting when necessary.
3879	String method returns OS_Arch or just OS or Arch based on non-empty values, otherwise empty string.
3880	Find will search for a file starting from a given directory and moving up until found or reaching the root directory, returning the path of the file or an error if not found.
3881	runGazelle runs Gazelle with specified mode and directories, handling errors and logging the command execution.
3882	restoreBuildFilesInRepo will walk through the current directory and call restoreBuildFilesInDir on each file or directory, logging any errors encountered
3883	FixLoads updates rule file loads based on known information, ensuring consistency and adding necessary statements.
3884	fixLoad adjusts a rule's load based on file content and known kinds, removing symbols not matching specified kinds
3885	newLoadIndex calculates the next available index for rules based on dependencies.
3886	removeLegacyGoRepository removes legacy go_repository rules from .bzl files
3887	Compare two versions lexicographically and return the difference.
3888	ParseVersion extracts version numbers from a string and returns them as integers, handling errors for invalid formats or negative values.
3889	EmptyFile creates a new File instance with specified path and package.
3890	LoadWorkspaceFile reads file data from path and loads workspace data using LoadWorkspaceData.
3891	LoadMacroFile reads file data from path and loads macro data using LoadMacroData.
3892	EmptyMacroFile creates an empty file and loads macro data into it.
3893	LoadData parses a BUILD file at the given path and returns a File object and an error if parsing fails.
3894	LoadWorkspaceData parses workspace data from a file and returns a File object along with any errors encountered.
3895	LoadMacroData parses a .bzl file and returns a File object along with any errors encountered.
3896	ScanAST initializes AST scanning for a given package and Bazel file.
3897	ScanASTBody processes a Bazel file to extract rules, loads, and functions, handling default definitions and directives.
3898	MatchBuildFileName returns the path to the first non-directory file matching the given names in the specified directory, or an empty string if no match is found.
3899	SyncMacroFile updates or appends a function statement from another file to the current file's statements.
3900	MacroName returns the name of the macro or an empty string if not set
3901	Sync method updates file loads and rules, handling deletions, insertions, and synchronization logic.
3902	Format method on File object returns formatted byte slice after syncing.
3903	Save method on File object formats its content and writes it to specified path, syncing changes first.
3904	HasDefaultVisibility checks if any rule has package kind and default_visibility attribute.
3905	NewLoad creates a new Load instance with the given name and initializes its fields.
3906	Symbols returns a sorted list of keys from the symbols map
3907	Has checks if a symbol exists in the symbols map of Load.
3908	Add symbol to Load's symbols map if it doesn't exist, update flag accordingly.
3909	Remove will delete a symbol from symbols map and set updated to true if the symbol exists
3910	Insert file load at specified index.
3911	NewRule creates a new Rule instance with the given kind and name.
3912	SetKind updates the rule's kind and marks it as updated
3913	AttrKeys returns sorted attribute keys based on priority and lexicographical order.
3914	Attr retrieves an attribute's RHS from a rule by key, returning nil if not found.
3915	AttrString retrieves the string value associated with a key from a rule's attributes, returning an empty string if the key or value is missing or incorrect.
3916	AttrStrings retrieves string values from rule attributes or returns nil.
3917	DelAttr removes an attribute from a rule and marks it as updated.
3918	SetAttr updates or adds an attribute to a rule with the given key and value.
3919	PrivateAttrKeys returns sorted private attribute keys from a Rule object
3920	SetPrivateAttr assigns a value to a private attribute of a Rule instance using a key.
3921	Insert rule into file's statement list.
3922	IsEmpty checks if all non-empty attributes in info are absent from r's attrs.
3923	CheckInternalVisibility determines package visibility based on internal path
3924	New creates a new Label instance with the specified repository, package, and name.
3925	Rel method adjusts label based on repository and package comparison.
3926	Label's Equal method checks if two labels are equivalent based on their Repo, Pkg, Name, and Relative fields.
3927	Label.Contains checks if another label's package path is a prefix of its own, assuming neither label is relative.
3928	generateFromPath walks through a directory and outputs paths and labels for .proto files, excluding those in special directories.
3929	shouldCall checks if rel should be called based on mode and updateRels
3930	shouldUpdate determines if an update should occur based on mode and relationship status
3931	shouldVisit checks if relation should be visited based on mode and update relations
3932	SquashRules combines attributes from two rules, updating the destination rule and appending comments, returning an error if expressions cannot be squashed.
3933	runClient establishes a connection to a Unix socket, retries if necessary, copies data from the connection to stderr, logs the duration, and returns any errors encountered.
3934	UpdateRepo retrieves repository details from a RemoteCache based on the import path.
3935	NewRemoteCache initializes a new RemoteCache instance with specified repositories and returns it along with a cleanup function.
3936	remote retrieves remote and VCS values from cache or calculates them using RepoRootForImportPath.
3937	get retrieves a value from remoteCacheMap using a key, locking the map during access.
3938	ensure checks if a key exists in the cache, loads it using a provided function if not, and returns the cached value or error
3939	RelBaseName returns the relative base name after removing specified prefixes and handling edge cases
3940	Clone creates a copy of Config with new maps for Exts and KindMap.
3941	IsValidBuildFileName checks if a given build file name is valid based on the configuration's allowed list.
3942	check will return true if any group matches the config and system details
3943	fileNameInfo extracts file info from a given path including extension, test status, and OS/architecture details.
3944	otherFileInfo retrieves file information, reads tags, and updates the fileInfo struct.
3945	protoFileInfo extracts file info from a protobuf definition, parsing options and setting defaults.
3946	AddRule adds a rule to the index if it's importable, records its details, and avoids duplicates based on labels.
3947	Finish method processes rules to collect embeddings and builds import index
3948	buildImportIndex populates importMap with rules based on imported packages, skipping embedded rules
3949	IsSelfImport checks if a result is self-importing or embedded within another label.
3950	applyKindMappings updates rule loads based on kind mappings, returning updated loads.
3951	appendOrMergeKindMapping adds or merges a kind mapping to the list based on the name.
3952	RuleName will return a proto name based on input names, prioritizing non-empty valid identifiers
3953	buildPackages processes proto files to create packages based on configuration and file paths.
3954	selectPackage selects a package based on directory and relative path, returning the first matching package or an error if multiple packages are found
3955	generateProto creates a proto_library rule with various attributes based on ProtoConfig and Package inputs
3956	generateEmpty filters proto_library rules without known sources and returns them
3957	ImportRepoRules reads a repository lock file, parses it using the appropriate parser, sorts the repositories, generates rules for each, and returns them along with any errors encountered.
3958	MergeRules combines generated and existing rules, sorting them, updating file paths, merging rules, and returning updated files.
3959	GenerateRule creates a new rule object from a repository and sets its attributes based on the repository's properties.
3960	FindExternalRepo locates an external repo path based on the given repo root and name, returning the cleaned path or an error if not found or invalid.
3961	ListRepositories processes workspace rules to collect repositories and their names, handling macro directives.
3962	migrateLibraryEmbed updates Go rules to use 'embed' instead of 'library'
3963	migrateGrpcCompilers updates go_grpc_library rules to go_proto_library with grpc compiler
3964	squashCgoLibrary updates or merges cgo_library with go_library based on config and file rules.
3965	removeLegacyProto removes legacy proto rules from a config and file if the proto mode is default and fixing is enabled.
3966	removeLegacyGazelle will iterate over loads in a file and remove "gazelle" if present, deleting the load if empty
3967	selectPackage filters and selects a buildable Go package from a directory, handling multiple or no packages appropriately.
3968	AddBuiltin adds a builtin resolver to the metaResolver for the given kindName
3969	MappedKind appends a kind to the mappedKinds map using pkgRel as the key
3970	metaResolver's Resolver method returns a resolver based on the rule's kind and package relationship, using built-in resolvers when no mapping is found.
3971	sortExprLabels sorts labels in a Bazel expression list if all elements are strings.
3972	checkRulesGoVersion checks Gazelle compatibility with rules_go and logs warnings if the version is outdated
3973	preprocessTags adds "gc" tag to genericTags map
3974	setBuildTags sets build tags for goConfig and returns an error if any tag is negated
3975	splitValue splits a comma-separated string into trimmed parts
3976	copyGoModToTemp creates a temporary directory, copies a go.mod file to it, and returns the path or an error
3977	findGoTool determines the Go tool path, preferring GOROOT or the system PATH, appending .exe on Windows.
3978	isBuildable checks if a Go package has a go file or non-empty proto sources
3979	startServer starts a new server process with the given arguments and logs the command before starting it
3980	watchDir sets up a watcher for directory changes and records them using a callback function. It returns a cancel function to stop watching.
3981	listDirs will walk through a directory and return a list of directories and any errors encountered
3982	shouldIgnore checks if a file path should be ignored based on certain conditions
3983	recordWrite sets a directory path to true in a map while ensuring thread safety with a mutex lock.
3984	getAndClearWrittenDirs will return all written directories and clear the set
3985	CombineHandlers merges multiple HTTP handlers into a single handler
3986	VerifyContentType checks HTTP request's Content-Type header against expected type.
3987	VerifyMimeType ensures the request's Content-Type matches the specified mimeType.
3988	VerifyBasicAuth checks HTTP request's Authorization header against provided credentials.
3989	VerifyJSONRepresenting will return an HTTP handler to verify JSON content type and representation of a given object.
3990	VerifyFormKV returns a handler to verify form key-value pairs
3991	RespondWithProto returns an HTTP handler to respond with a protobuf message and status code, optionally setting headers.
3992	RegisterFailHandlerWithT sets the global fail handler for Gomega with a testing T object.
3993	EventuallyWithOffset sets up an assertion with optional timeouts and polling intervals, returning an asynchronous assertion object.
3994	asyncassertion.New creates an assertion with consistent checking using specified intervals and offset
3995	Expect sets up an assertion with actual value and additional context.
3996	Eventually sets up asynchronous assertions with customizable timeout and polling intervals.
3997	Consistently checks if a condition holds within a specified timeout interval using a given polling interval and returns an assertion object.
3998	TimeoutCloser wraps a closer with a timeout.
3999	TimeoutReader wraps a reader with a timeout duration.
4000	TimeoutWriter wraps a writer with a timeout functionality.
4001	Nest will recursively nest errors with a given path.
4002	SetMockService configures mock services for various components.
4003	FindMachineByIdOrAddress retrieves a machine by ID or address from a collection, returning an error if not found.
4004	FlushingWriter's Write method locks, sets wrote flag, writes data, flushes if possible, and handles errors.
4005	Hijack method on FlushingWriter returns net.Conn and ReadWriter or an error if hijacking is not supported.
4006	ListDeploys filters and lists deploy data based on app name and pagination parameters.
4007	DelayAdd routes to multiple HTTP methods.
4008	samlRequestTimeout extracts the request timeout from the scheme data as an integer.
4009	RegisterHandler registers an HTTP handler for a given path and method using version "1.0".
4010	RegisterHandlerVersion adds a new handler to a list with specified version, path, method, and handler function.
4011	Check verifies components based on names and returns their health status.
4012	DiscoverRepositoryPath checks if a directory contains a .git folder and returns its path or an error if not found.
4013	OpenRepository checks if the given path points to a Git repository and returns a Repository object or an error if it does not exist.
4014	Repository.RemoteURL returns remote URL for a given name or an error if not found
4015	appLister's List method returns a list of apps matching the given selector and an error if any occurs during retrieval.
4016	Apps returns an AppNamespaceLister for a given namespace.
4017	appNamespaceLister's List method retrieves apps matching a label selector in a specific namespace.
4018	StreamJSONResponse sends JSON response to writer and returns error if any.
4019	DropDatabase deletes a database with the given name from the storage session.
4020	Collection returns a new Collection instance for the given name
4021	SetLogger updates Target's logger field with new Logger instance while ensuring thread safety.
4022	Error logs the error using a mutex lock to ensure thread safety.
4023	Errorf logs an error message using a target's logger, ensuring thread safety.
4024	Fatal logs a message and exits if logger is set.
4025	Target's Debugf method logs debug messages using a mutex lock to ensure thread safety.
4026	GetStdLogger returns a standard logger or nil if none is set.
4027	Namespace returns cluster namespace from custom data or default "tsuru".
4028	recreateContainers will restart containers for specified nodes using a Docker provisioner and writer, returning an error if any issues occur
4029	checkProvisioner checks if the provisioner is set to default or empty, then calls checkDocker if so.
4030	checkDocker verifies Docker configuration and checks various components before returning an error if any step fails.
4031	checkScheduler will return an error or warning based on deprecated or misconfigured settings in the configuration file
4032	checkRouter ensures correct router configuration and warns about deprecated settings.
4033	Available checks if unit status is Started, Starting, or Error.
4034	Get retrieves a provisioner function by name or returns an error if not found.
4035	Registry constructs a list of Provisioners from registered functions, returning an error if any function fails.
4036	Error method returns error message combining underlying error and reason.
4037	validateVersion checks if the current version meets or exceeds the supported version.
4038	ReadTarget retrieves a target configuration from environment or file, handling errors and copying files if necessary.
4039	WriteTarget writes a string to a target file, ensuring it's created or truncated, and returns an error if writing fails.
4040	WriteOnTargetList adds a new target label and its corresponding target to a file, returning an error if the label already exists or if writing fails.
4041	Conn initializes a Storage instance using database configuration and returns it along with any errors encountered.
4042	Apps method returns a collection of apps ensuring uniqueness by name.
4043	PoolsConstraints ensures unique index on pool constraints and returns collection.
4044	Users method returns a collection of users with an email index ensuring uniqueness.
4045	SAMLRequests method returns a Collection object from storage with an index on id field.
4046	AppLogCollection returns a log collection for a given app name or nil if the app name is empty
4047	CreateAppLogCollection creates a log collection for an app and returns it along with any errors encountered
4048	LogsCollections retrieves all log collection names from storage and returns their corresponding Collection objects.
4049	ArchiveBuildCmds constructs a list of commands to build and archive an application using a specified URL.
4050	ArchiveDeployCmds generates deployment commands for an app using an archive URL
4051	DeployCmds constructs a deployment command for an app using unit agent commands and returns it as a string slice.
4052	runWithAgentCmds constructs a command to run a Tsuru agent with app details and configuration settings.
4053	newApps creates a new apps instance with the given client and namespace
4054	Commit container, tag, and push to repository with retries on failure.
4055	processTags removes duplicates and trims whitespace from a list of tags
4056	aggregateContainersBy filters containers using a matcher, groups them by host address, counts occurrences, and returns a map of host addresses to counts.
4057	chooseNodeToAdd selects a node to add a container based on criteria, updates its address, and returns the chosen node or an error.
4058	chooseContainerToRemove selects a node based on min/max criteria, retrieves a container from it, and returns the container ID or an error.
4059	Get retrieves a Router based on its type and prefix, returning an error if not found or creation fails.
4060	Default returns the name of the default router or an error if none found
4061	Store updates or inserts a document in a MongoDB collection based on the app name.
4062	TsuruV1 returns a fake TsuruV1 interface for the clientset.
4063	`Tsuru returns a fake TsuruV1 interface for testing.`
4064	NewAppInformer creates a new shared informer for apps in a specific namespace.
4065	NewFilteredAppInformer creates a shared index informer for Tsuru apps with filtering options.
4066	Watch method returns a watch interface and an error based on the list options provided
4067	Patch will update a resource with the given patch type and data, returning the updated object and any errors encountered.
4068	NewSharedInformerFactory creates a new shared informer factory with default resync duration and watches all namespaces.
4069	NewFilteredSharedInformerFactory creates a new shared informer factory with specified parameters and returns it.
4070	Proxy method returns an error indicating service proxy is unavailable for broker services
4071	UnbindUnit will remove a unit from an instance and return an error if it fails
4072	Create validates plan fields before inserting it into storage.
4073	Remove deletes a plan from storage using its name and returns an error if unsuccessful.
4074	ensureDefault checks if plans exist, if not, it inserts a default plan using configuration values.
4075	DeleteInstance will remove a service instance if it's not bound to any apps and handle errors accordingly.
4076	ToInfo converts a service instance to a service instance with additional information, handling errors gracefully.
4077	ServiceInstance.Update validates, processes, and executes service updates with error handling.
4078	BindApp binds an app to a service instance, executes a series of actions, and returns an error if any step fails.
4079	BindUnit binds a unit to a service instance and updates the database, rolling back on failure.
4080	UnbindApp will remove an app from a service instance and execute a series of actions to update the system state, returning an error if the app is not bound.
4081	Status checks service instance's production endpoint status.
4082	ProxyInstance routes requests to appropriate services, handling errors and validating paths.
4083	Inc increases quota for an app and returns an error if limit exceeded or storage operation fails
4084	SetLimit updates the quota for an app, ensuring it's non-negative and greater than or equal to in-use resources, returning any errors encountered during the process.
4085	Set updates the usage of an app's quota and returns an error if the update fails or exceeds the limit.
4086	Get retrieves quota for an application from storage.
4087	RemoveImage removes a Docker image from a registry and returns an error if it fails.
4088	RemoveAppImages deletes Docker images associated with an app and returns any errors encountered.
4089	Create method validates, inserts platform, creates image, adds platform, handles errors, and rolls back on failure.
4090	List returns all or only enabled platforms based on the enabledOnly flag
4091	FindByName retrieves a platform by name from storage, returning it or an invalid platform error if not found.
4092	Update platform options, validate name, handle input data, update image, fetch and update apps, set platform update flag, handle disabled state.
4093	Remove platform by name, check dependencies, delete from builder, registry, and storage.
4094	Rollback updates platform image and marks affected apps for update.
4095	GetPoolByName retrieves a pool by name from the database and returns it or an error if not found
4096	Manager returns a RepositoryManager based on configuration or default.
4097	Register adds a repository manager to a map using its name as the key
4098	start method initializes and starts a bindSyncer instance, handling app listing and synchronization with configurable intervals and shutdown functionality.
4099	Shutdown signal sent to bindSyncer, waits for completion or context cancellation, then returns any error.
4100	GetForProvisioner fetches a Builder based on the Provisioner's name or returns a default one if not found.
4101	get retrieves a Builder instance by name, returning an error if the builder is unknown.
4102	Registry returns a list of builders and an error if any.
4103	RegisterQueueTask registers a task to the queue using the provided DockerProvisioner.
4104	Apps method returns an AppInformer instance initialized with factory, namespace, and tweakListOptions from version struct.
4105	DeepCopy creates a deep copy of the App instance, returning the copied instance or nil if input is nil.
4106	DeepCopy creates a copy of AppList.
4107	DeepCopy creates a deep copy of AppSpec and returns it.
4108	Write method on LogWriter handles writing data to a channel or directly if closed.
4109	ResetPassword updates user password using valid token and sends new password asynchronously.
4110	addKnownTypes registers known types with a scheme for serialization and deserialization
4111	Register adds a Shutdownable to the registered list after acquiring a lock.
4112	Do will run all registered handlers for graceful shutdown and return an error if the context is canceled before completion.
4113	ListImagesOrDefault returns platform images or a default image if none found
4114	MigrateAppsCRDs sets config, gets provisioner, lists pools, filters apps, provisions them, and returns errors.
4115	Register will execute a migration function under a given name and return an error if the registration fails
4116	RegisterOptional registers an optional migration function with a given name and returns an error if registration fails.
4117	Run executes commands based on provided arguments or returns errors for invalid inputs.
4118	Units retrieves provisioner units or returns an empty list if nil.
4119	MarshalJSON serializes App struct to JSON, handling errors and including various fields like name, platform, teams, units, repository, plan, routers, and more.
4120	AcquireApplicationLockWait attempts to acquire a lock on an application and waits until it succeeds or times out, returning whether the lock was acquired and any errors encountered.
4121	ReleaseApplicationLock attempts to release an application lock up to three times, backing off on failure.
4122	GetByName retrieves an application by its name from the database and returns it or an error if not found.
4123	AddUnits adds units to an app after validating its status and writing logs. It returns an error if validation fails or if adding units encounters issues.
4124	SetUnitStatus updates a unit's status by ID or returns an error if not found.
4125	UpdateNodeStatus updates node status and returns results or errors based on node data and healer instance.
4126	available checks if any unit is available and returns true if so
4127	Grant will add a team to an app and update permissions for users, returning an error if any step fails.
4128	Revoke removes a team from an application, updates database, and revokes access for non-deploying users.
4129	GetTeams retrieves teams based on their names from the service manager.
4130	setEnv updates app's environment with given EnvVar, logs if public
4131	getEnv retrieves an environment variable by name or returns an error if it's not found.
4132	validateNew checks if the app name is valid and returns an error if it's not.
4133	validate checks pool and plan validity returning first error encountered
4134	InstanceEnvs filters service environments by name and returns matching environment variables.
4135	Run method executes command with logging and checks if App is available.
4136	GetUnits retrieves bound units from app's Units method, returning them or an error if fetching fails.
4137	GetUUID returns a UUID for an App, generating one if necessary and updating the database.
4138	Envs merges environment variables from App and ServiceEnvs into a single map.
4139	SetEnvs updates application environments, validates each, logs changes, updates database, and restarts units if required.
4140	UnsetEnvs removes specified environment variables from app and updates the database, optionally restarting units.
4141	AddCName processes CNAMEs through validation, setting, saving, and updating actions before rebuilding routes and returning any errors.
4142	Log message with source and unit, insert into database if logs exist
4143	LastLogs returns the last 'lines' logs filtered by 'filterLog', returning an error if unsuccessful.
4144	List filters apps based on query and statuses, returning filtered list or error
4145	Swap will exchange two applications' details and update their CNAMEs in the database.
4146	Start initializes the application or process logs it starts the provisioner rebuilds routes returns any errors encountered
4147	GetDbDriver retrieves a database driver by name, returning it or an error if unknown.
4148	GetCurrentDbDriver retrieves the database driver, initializing it if necessary and returning an error on failure.
4149	NewForConfig creates a new clientset from a rest config, applying rate limiting if needed, and returns it along with any errors encountered.
4150	GetAppFromUnitID retrieves an application using its unit ID and returns it along with any errors encountered during the process.
4151	NewPipeline creates a new pipeline from given actions ensuring each has its own isolated result.
4152	Result returns the final result from the pipeline's last action, ensuring thread safety with a mutex lock.
4153	DecodeJsonPayload reads request body content, unmarshals JSON into provided variable, returns error if any.
4154	UrlFor constructs a URL from a base URL, path, and query parameters, returning the result.
4155	GetCorsInfo determines CORS info based on request headers.
4156	MiddlewareFunc normalizes allowed methods and headers, validates CORS requests, and sets appropriate response headers.
4157	MiddlewareFunc records HTTP response status and byte count
4158	recorderResponseWriter's WriteHeader method sets status code and flag if header already written
4159	MakeRouter creates a router with given routes, starts it, and returns an App instance or an error.
4160	AppFunc returns a handler to process requests based on routes and parameters.
4161	escapedPath extracts and returns the path part from a URL, ignoring query parameters.
4162	escapedPathExp validates and escapes a URL path expression.
4163	start initializes router's trie, inserts routes, and optionally compresses it
4164	ofFirstDefinedRoute finds the first defined route from a list of matches based on index.
4165	findRouteFromURL searches for a route based on HTTP method and URL, returning the matching route, parameters, and whether a path match was found.
4166	Middleware checks content type and charset, returns error if invalid.
4167	CloseNotify returns a channel that receives a value when the underlying connection has been closed.
4168	AccessLogApacheMiddleware logs requests using middleware, setting defaults and formatting.
4169	executeTextTemplate renders a text template using AccessLogApacheMiddleware and returns the result as a string.
4170	RemoteUser retrieves the REMOTE_USER from the environment or returns an empty string.
4171	ApacheQueryString returns "?" followed by the raw query string from the URL if it's not empty, otherwise returns an empty string
4172	StartTime retrieves the start time from the environment or returns nil if not set.
4173	ApacheRemoteAddr extracts IP from RemoteAddr or returns empty string
4174	ResponseTime returns the elapsed time from access log util's environment or nil if not set.
4175	JsonIndentMiddleware wraps a handler to indent JSON responses using specified indentation and prefix.
4176	EncodeJson marshals and indents JSON data from a given interface and returns the byte array along with any errors encountered
4177	WriteHeader sets response header and marks it as written
4178	MakePath replaces placeholders in route's path with corresponding values from pathParams.
4179	RecoverMiddleware handles panics in user code, logs the error, and returns a proper HTTP response.
4180	WrapMiddlewares will apply a series of middleware functions to a handler function in reverse order.
4181	GzipMiddleware's MiddlewareFunc wraps a handler to enable gzip compression if supported by the client.
4182	`WriteHeader sets response headers, including Vary and Content-Encoding if applicable.`
4183	Hijack method returns network connection and buffer for reading/writing, or error if failed
4184	gzipResponseWriter's Write method ensures headers are set, checks if compression is enabled, and handles both compressed and uncompressed writes accordingly.
4185	AuthBasicMiddleware provides HTTP basic authentication middleware.
4186	printDebug recursively prints debug information for a node at a given level
4187	Trie's AddRoute method adds a route to the trie with specified HTTP method and path expression, returning an error if unsuccessful.
4188	printDebug will recursively print a Trie structure in a debug format
4189	FindRoutes searches for matching routes based on HTTP method and path, returning a list of matches.
4190	FindRoutesAndPathMatched searches for routes matching HTTP method and path, returning matched routes and whether any path was matched.
4191	findRoutesForPath searches for routes matching a given path and returns them along with their parameters.
4192	Use appends middlewares to api's stack.
4193	MakeHandler creates a handler from API's application function or a default empty function, wrapped by middlewares.
4194	`MiddlewareFunc adds "X-Powered-By" header to responses using the specified or default value.`
4195	StatusMiddleware logs request status and response time, counting occurrences.
4196	GetStatus retrieves server status including uptime, response counts, and times.
4197	JsonpMiddleware wraps a handler to conditionally respond with JSONP based on a query parameter.
4198	jsonPResponseWriter's flush method ensures headers are written before flushing the response writer
4199	AccessLogJsonMiddleware logs JSON records of HTTP requests using a specified logger or default logger.
4200	Fetch will return an io.Reader from S3, or an error if retrieval fails or data is unchanged.
4201	sanityCheck checks environment variables and prints their values, returning true if any are set
4202	release will stop accepting connections, initiate a timeout, and forcefully close if the deadline is exceeded.
4203	fetchLoop ensures minimum interval between fetch operations
4204	forkLoop continuously forks a command until an error occurs
4205	Init initializes a File struct with default values and updates its hash, returning an error if any step fails.
4206	Fetch opens a file if it has changed since last access, ensuring it's not mid-write by checking its hash periodically.
4207	Fetch will return a reader from a URL after checking headers and handling gzip compression, or an error if the request fails or headers don't match.
4208	NewConfig initializes a Config object with default settings and custom configurations.
4209	Validate will check the configuration settings and return an error if any of the values are invalid.
4210	NewClient creates a new Sarama client with the given addresses and configuration, returning it or an error if validation fails.
4211	AsyncClose asynchronously closes the partition consumer and signals its death.
4212	close partition consumer and wait for shutdown error
4213	MarkOffset updates the consumer's offset and metadata if the new offset is greater than the current one.
4214	NewConsumer creates a new Kafka consumer using provided addresses, group ID, topics, and configuration, returning an error if any step fails.
4215	MarkOffsets updates offsets in a stash for subscribed topics.
4216	ResetOffset updates the consumer's offset for a given message and metadata.
4217	Close will release resources and close channels for a Consumer instance.
4218	hbLoop manages heartbeats for a consumer, handling errors and stopping on signals.
4219	twLoop handles periodic topic updates and stops on certain signals.
4220	cmLoop commits offsets at intervals or on stop signals.
4221	fetchOffsets retrieves consumer group offsets for specified topics and partitions.
4222	MarkOffset updates the offset stash with a message's topic, partition, offset, and metadata.
4223	ResetOffset resets partition offset for given message and metadata.
4224	Offsets returns a map of topic partitions to their offsets, locking access to ensure thread safety.
4225	`Actual method retrieves or caches an instance group's actual state based on the provided cluster configuration and returns it along with any associated resources.`
4226	Expected calculates the expected cluster state based on the instance group and returns it along with any cached expected state or an error.
4227	`Delete` method removes an instance group, handling errors and updating Kubernetes API.
4228	GetReconciler returns a cloud reconciler based on the provider configuration and runtime parameters or an error if the cloud type is invalid
4229	GetVersion returns the current version details as a Version struct.
4230	GetVersionJSON returns a JSON string representation of the version information or an empty string on error.
4231	Actual method updates resource group details and renders a cluster based on immutable state.
4232	Expected calculates the expected cluster state based on the immutable input, returning the new cluster, resource, and any errors encountered.
4233	CreateCmd creates a Cobra command for creating a Kubicorn API model with optional flags and validation.
4234	NewUbuntuCluster creates a new cluster configuration with specified control plane and machine sets.
4235	ProviderConfig unmarshals cluster's raw provider configuration into a ControlPlaneProviderConfig object or logs an error if it fails.
4236	SetProviderConfig marshals a control plane provider config to JSON, logs any errors, and sets it on the cluster's API spec.
4237	MachineProviderConfigs will parse provider configurations from machine sets and return them as a list, logging errors if parsing fails.
4238	SetMachineProviderConfigs updates machine sets with provider configurations or logs warnings if no match found.
4239	NewCluster initializes a new cluster object with the given name and default settings.
4240	DeployControllerCmd creates a Cobra command for deploying a controller, handling flags and input arguments.
4241	NewRetrier creates a new Retrier instance with specified retries, sleep time, and retryable function.
4242	RunRetry will attempt retries based on configured settings, handling signals and errors until successful or max retries reached.
4243	MustGenerateRandomBytes will panic if it cannot generate random bytes, otherwise it returns the generated bytes
4244	ExplainCmd creates a Cobra command to explain a cluster, handling input arguments and running the explain operation with appropriate options.
4245	TimeOrderedUUID generates a UUID ordered by time using Unix timestamp and random bytes.
4246	GetConfigCmd creates a Cobra command for managing Kubernetes configurations, handling input arguments and running the get-config operation.
4247	RunAnnotated executes a task asynchronously, logs activity, and returns any errors encountered.
4248	ListCmd creates a Cobra command to list available states, binds common flags, and runs the list operation.
4249	NewUbuntuCluster creates a new Kubernetes cluster with Ubuntu nodes using Packet Cloud.
4250	EditCmd creates and returns a Cobra command for editing a cluster state with options for name, editor, and Git remote.
4251	RemoveKey removes a key from the agent and returns an error if it fails
4252	RemoveKeyUsingFile reads a public key file and removes the corresponding key from the Keyring.
4253	Actual will retrieve firewall details, update them, and render a new cluster configuration.
4254	Expected method calculates expected cluster state based on current and immutable states, returning updated cluster and resource objects along with any errors.
4255	Apply firewall rules to resources, ensuring droplets are active before creating the firewall.
4256	Delete firewall resource and return updated cluster and deleted resource or error
4257	DeleteCmd creates a Cobra command for deleting Kubernetes clusters with options for purging resources and binding common flags.
4258	NewStateStore selects a state store based on options and returns it along with an error if the type is invalid.
4259	Commit saves cluster data to Git, handling errors and marshaling JSON.
4260	`ApplyCmd creates a Cobra command for applying cluster resources, handling options and running the apply process.`
4261	ExpandPath expands a given path to its absolute form, resolving '.' to the current working directory and '~' to the user's home directory.
4262	CompletionCmd generates completion code for bash and zsh shells, handling different shell arguments and logging options.
4263	AdoptCmd returns a Cobra command for adopting a Kubernetes cluster into a Kubicorn state store.
4264	StrEnvDef returns environment variable value or default if unset
4265	IntEnvDef returns an integer environment variable or default if not set or invalid.
4266	BoolEnvDef checks environment variable and returns default value if not set or invalid.
4267	readFromFS reads a file from the filesystem and returns its contents as a string, expanding ~ to $HOME if present.
4268	VersionCmd creates a Cobra command to display Kubicorn's version.
4269	NewSignalHandler initializes a signal handler with a specified timeout and sets up notification for interrupt and kill signals.
4270	Register starts a goroutine to handle signals and timeouts, logging and exiting based on received signals or timer expiration.
4271	NewUbuntuCluster creates a new Kubernetes cluster with specified configurations for the control plane and worker nodes.
4272	BeginningOfHour returns the start of the current hour.
4273	BeginningOfDay returns the start of the day for the given Now instance.
4274	BeginningOfWeek calculates the start of the current week based on the configured start day.
4275	BeginningOfMonth returns the first day of the current month's time.Time
4276	BeginningOfQuarter calculates the first day of the quarter for the given date.
4277	BeginningOfYear returns the first day of the current year.
4278	EndOfMinute returns the time at the end of the minute
4279	EndOfHour returns the time at the end of the hour based on the current time.
4280	EndOfDay returns the last second of the current day.
4281	EndOfWeek calculates the end of the week for a given time.
4282	EndOfMonth calculates the last day of the current month.
4283	EndOfQuarter calculates the last moment of the current quarter.
4284	EndOfYear calculates the last moment of the current year by adding one year to the beginning of the year and subtracting one nanosecond.
4285	MustParse parses strings to time and panics on error
4286	Between checks if the current time is between two specified times.
4287	ParseInLocation converts strings to time.Time in a specific location, returning the parsed time and any errors encountered.
4288	MustParse will parse strings into time.Time using New and MustParse, returning current time if parsing fails.
4289	MustParseInLocation parses strings to time.Time using specified location, returning current time if parsing fails.
4290	Between checks if the current time is between two given times.
4291	NewChannelMemoryBackend creates a new channel memory backend with a specified size and starts it.
4292	Start method locks backend, checks if running, then launches process goroutine.
4293	ChannelMemoryBackend's Flush method sends a flush event and waits for it to complete before returning.
4294	Stop method sets running to false, sends stop event, waits for stopWg.
4295	Formatted returns the record's formatted string, caching the result.
4296	Message returns the message from Record, formatting args if necessary and redacting any redactable ones.
4297	SetBackend updates Logger's backend and marks it as initialized
4298	MustGetLogger returns a Logger instance or panics if it cannot be obtained.
4299	Reset initializes logging settings with default formatter and current time.
4300	IsEnabledFor checks if logging at a given level is enabled for a specific module
4301	Criticalf logs critical messages using a logger.
4302	Warningf logs a warning message using the provided format and arguments.
4303	Noticef logs a notice level message using the specified format and arguments.
4304	Logger's Infof method logs an info message using the provided format and arguments.
4305	SetFormatter sets the default formatter using a mutex lock to ensure thread safety.
4306	MustStringFormatter returns a Formatter or panics if initialization fails.
4307	formatFuncName returns a formatted function name based on the given format verb and full function path.
4308	Log method formats a record and delegates logging to another backend with increased call depth.
4309	LogLevel converts a log level string to its corresponding enum value or returns an error if invalid.
4310	AddModuleLevel converts a backend to a LeveledBackend, wrapping it if necessary.
4311	GetLevel retrieves the logging level for a module or the default level if none is configured
4312	SetLevel updates the logging level for a specific module.
4313	IsEnabledFor checks if a log level is enabled for a given module
4314	MultiLogger combines multiple logging backends into a single, leveled logger.
4315	Log level, call depth, and record to multiple backends, returning first error encountered.
4316	GetLevel determines the highest logging level among backends for a given module.
4317	SetLevel updates logging level for all backends in multiLogger
4318	IsEnabledFor checks if any backend in multiLogger is enabled for given level and module
4319	ConvertColors converts color integers to strings with optional bold formatting.
4320	NewSyslogBackend creates a new SyslogBackend instance and returns it along with any error encountered during initialization.
4321	NewSyslogBackendPriority creates a new SyslogBackend instance with specified priority and prefix, returning any errors encountered.
4322	SetBackend configures the logging backend and returns a leveled backend instance
4323	NewCommander initializes a Commander with flags and outputs.
4324	Execute runs a command based on input arguments and returns an exit status.
4325	explain outputs usage instructions for Commander's commands and flags
4326	explainGroup will write out subcommands and their synopses to a writer, handling aliases and sorting them.
4327	explain will print command usage and subflags to writer
4328	dealias recursively resolves command aliases
4329	Execute will run a command using the default commander and return its exit status
4330	LoadFromData reads config data from byte slice, saves it temporarily, parses it, and returns a ConfigFile object or an error.
4331	LoadFromReader reads configuration from a reader and returns a ConfigFile object or an error.
4332	ReloadData updates ConfigFile from reader, overwriting existing data if single file loaded, returns error on failure
4333	AppendFiles adds files to ConfigFile's list and reloads it, returning an error if appending to in-memory data is attempted.
4334	GetKeyList retrieves keys from a specified section, handling default sections and locking in block mode.
4335	SaveConfigData will write a ConfigFile to an io.Writer in a specified format, handling comments and escaping special characters.
4336	SaveConfigFile saves a ConfigFile to a specified filename and returns any errors encountered during the process.
4337	Find method returns a Selection object based on the given CSS selector.
4338	FindByXPath appends an XPath selector to session's selectors and returns a new Selection object.
4339	FindByLink will find a single element matching the given link text and return it as a Selection object
4340	FindByLabel returns a Selection object based on the label text
4341	FindByName returns a Selection object for the given name from selectable session.
4342	FindByClass filters elements by class name and returns a Selection object.
4343	FindByID will search for a selection by ID and return it or nil if not found
4344	First will apply a CSS selector to the current selection and return a new Selection object.
4345	FirstByXPath returns the first element matching the XPath selector.
4346	FirstByLink creates a Selection object from the first element matching a link selector with the given text.
4347	FirstByLabel returns the first selection matching a label.
4348	FirstByName returns the first selection matching the given name
4349	All method appends a CSS selector to selectable's selectors and returns a MultiSelection object.
4350	AllByXPath appends an XPath selector to the session's selectors and returns a MultiSelection object
4351	AllByLink appends a link selector to the selectable object and returns a MultiSelection.
4352	AllByLabel constructs a MultiSelection using the session and selectors for a label match.
4353	AllByName returns a MultiSelection containing all selectors matching the given name.
4354	AllByClass returns a MultiSelection containing elements matching the specified class selector.
4355	AllByID appends a target ID selector to the session and returns a MultiSelection object
4356	FindForAppium returns a Selection object based on the session and selector type for Appium.
4357	Timeout sets a configuration option to specify a timeout duration in seconds.
4358	ChromeOptions sets a Chrome option and its value in a configuration map.
4359	JoinPage combines URL and options to create a new Page object using API session.
4360	Destroy method deletes session and returns error if failed
4361	Reset will clear cookies, local storage, session storage, and navigate to about:blank, returning any errors encountered
4362	Navigate sets the URL and returns an error if it fails.
4363	GetCookies retrieves cookies from session, converts API cookies to http.Cookie structs, and returns them along with any errors encountered.
4364	SetCookie sets a cookie on the page session and returns an error if the operation fails.
4365	DeleteCookie removes a cookie from the session and returns an error if it fails.
4366	ClearCookies method deletes cookies from session and returns error if failed
4367	URL method returns the page's URL or an error if retrieval fails
4368	Page.Size sets window dimensions and returns error if unsuccessful
4369	Screenshot saves a page's image to a file and returns an error if any step fails
4370	Title retrieves the page's title or returns an error
4371	HTML method retrieves page's HTML content and returns it along with any errors encountered during retrieval
4372	PopupText retrieves alert text from session or returns error.
4373	EnterPopupText sets alert text in session or returns error
4374	ConfirmPopup confirms a popup dialog or returns an error if it fails.
4375	CancelPopup attempts to dismiss an alert and returns an error if it fails
4376	SwitchToParentFrame attempts to switch to the parent frame and returns an error if it fails
4377	SwitchToRootFrame will switch the session to the root frame and return an error if it fails
4378	NextWindow changes the active browser window to the next one in a circular manner.
4379	CloseWindow deletes the active window session and returns an error if it fails.
4380	WindowCount returns the number of windows or an error if failed to retrieve them.
4381	LogTypes retrieves log types from session and returns them or an error.
4382	MoveMouseBy updates page's session with mouse movement offsets and returns an error if failed.
4383	DoubleClick will perform a double-click action on the page and return an error if it fails
4384	Click method handles different click events on a page session, returning an error if invalid.
4385	Click method iterates over each selected element, attempting to click it and handling any errors encountered.
4386	DoubleClick method executes a double-click action on each selected element and handles potential errors during mouse movement or clicking.
4387	Fill method updates selected elements with new text, returning error on failure
4388	Tap applies touch actions based on the event type to each selected element, returning an error if any action fails.
4389	Touch will execute a touch action based on the event type on each selected element and return an error if any step fails.
4390	FlickFinger selects an element and performs a touch flick gesture at specified offsets and speed, returning an error if any step fails.
4391	ScrollFinger scrolls selected element by specified offsets and returns an error if it fails.
4392	NewCapabilities creates a new Capabilities instance with the given features.
4393	Capabilities.JSON converts object to JSON string and returns it along with any error encountered during conversion.
4394	HaveTitle returns a matcher to check if a title matches the expected value
4395	HaveURL returns a Gomega matcher to check if the URL matches the expected value.
4396	HavePopupText returns a GomegaMatcher to check if text matches the expected popup text
4397	HaveLoggedError checks if any of the given messages match a logged error at WARNING or SEVERE levels.
4398	Text retrieves the text content of the single selected element or returns an error if selection fails.
4399	Active checks if the selected element matches the currently active element and returns an error if any step fails
4400	Attribute checks if an element has a specific attribute and returns its value or an error.
4401	CSS method retrieves a CSS property from Selection object.
4402	Selected checks if the element has the 'selected' state and returns a boolean and error.
4403	Visible checks if the selection is displayed and returns a boolean and an error.
4404	Enabled checks if the selection has the enabled state and returns a boolean and an error.
4405	HaveCount returns a Gomega matcher to check if the element count matches the expected value
4406	HaveAttribute creates a matcher to check if an attribute has a specific value.
4407	EdgeDriver initializes WebDriver based on OS, sets default port and address, and applies optional configurations.
4408	Selendroid initializes a WebDriver instance using a JAR file and optional configurations.
4409	SwitchToFrame selects an element and switches the session to its frame, returning an error if either step fails.
4410	Count method returns the number of selected elements or an error if selection fails
4411	EqualsElement checks if two selections have the same single element.
4412	MouseToElement moves mouse to selected element or returns error
4413	loggingMiddleware logs request details before passing it to the next handler
4414	chainHandlers combines multiple middleware functions into a single handler.
4415	HTTPReverseProxy starts a reverse proxy server using provided options, handling middleware and logging.
4416	CheckInstallation verifies each binary's version against a specified range and returns an error if any check fails
4417	CheckVersion verifies if a binary's version matches a specified range, returning an error if it doesn't.
4418	GetVersionForBinary runs a binary to fetch its version and logs the command execution.
4419	getUser fetches a user from the server using the provided ID and returns the user data or an error if the request fails
4420	login sends a JSON request to the server and returns a user object or an error
4421	loginHandler processes HTTP requests to authenticate users and redirects based on authentication success or failure.
4422	logoutHandler resets user and error then redirects to root
4423	viewHandler processes HTTP requests to render a login template with user data and errors.
4424	Run sets up HTTP handlers and starts a server on port 8081.
4425	WithRequest updates the interaction's request and logs a warning if the request body looks like a JSON object.
4426	WillRespondWith sets the response of Interaction and returns the modified Interaction
4427	isJSONFormattedObject checks if input is a valid JSON object or byte array
4428	ByUsername retrieves a user by username from the repository or returns an error if not found
4429	ByID retrieves a user by their ID from the repository, returning the user and nil if found, or nil and an error if not found.
4430	UserLogin handles user authentication, setting headers, reading request body, validating credentials, and responding accordingly.
4431	newClient initializes and returns a PactClient instance with setup service managers and a default timeout.
4432	NewClient initializes a PactClient with mock services.
4433	ListServers logs debug info, retrieves mock servers from manager, constructs MockServer structs, and returns them.
4434	UpdateMessagePact updates a Pact message and returns an error if the operation fails
4435	PublishPacts starts a service with given request args, waits for its completion, logs the response, and returns any error encountered during publishing.
4436	getPort extracts the port number from a URL, defaulting to 443 for HTTPS and 80 otherwise.
4437	getAddress extracts the host from a URL and returns it without the port
4438	sanitiseRubyResponse removes comments, bundle exec commands, and extra newlines from a Ruby response
4439	Publish method sends a validation request to the pact client
4440	FindPortInRange parses a port range or list, returning the first valid port and an error if none are usable.
4441	EachLike creates a matcher that checks if content meets minimum requirements.
4442	Term constructs a Matcher using the provided generate and matcher strings
4443	UnmarshalJSON converts JSON to map Matcher.
4444	objectToString converts an object to a string, returning the original string if possible or a JSON representation otherwise.
4445	match determines a Matcher based on srcType and params, handling various types including pointers, slices, structs, strings, booleans, integers, floats, and panicking for unsupported types.
4446	AddMessage to Pact adds a new Message and returns it.
4447	AddInteraction method on Pact struct sets up interaction, logs debug, creates new Interaction, appends to Interactions slice, and returns it.
4448	Teardown logs debug info stops server updates state returns pact instance
4449	Verify will run an integration test against mock server and clear interactions on failure.
4450	stateHandlerMiddleware processes HTTP requests, invoking state handlers based on the URL path.
4451	VerifyMessageProviderRaw sets up a server to handle message verifications using a Pact client and returns a response or error based on the verification result.
4452	VerifyMessageConsumerRaw verifies a message using a handler and updates the pact if successful.
4453	VerifyProvider returns predefined response and error based on mockClient's state.
4454	NewService appends command arguments to MockService and returns it
4455	Setup initializes channels and starts monitoring goroutines for service management.
4456	addServiceMonitor starts a goroutine to monitor created services, logging and adding them to a map.
4457	removeServiceMonitor listens for completed commands and interrupts their process.
4458	List method returns a map of service processes with their IDs and commands.
4459	Command method creates and returns an exec.Cmd with service manager's command and arguments, incorporating additional environment variables.
4460	call sends a request to a URL using the specified method and content, returning an error if unsuccessful
4461	DeleteInteractions logs debug info, constructs URL, and calls DELETE method.
4462	MockService's AddInteraction logs a debug message, constructs a URL, and calls another method to handle the POST request.
4463	MockService.WritePact logs debug info, validates inputs, constructs pact data, and makes a POST request.
4464	ExpectsToReceive sets message description and returns self
4465	WithMetadata updates a message's metadata and returns the updated message.
4466	AsType sets the decoding type of a message and returns the modified message.
4467	UserLogin handles JSON login requests, authenticates users, and returns appropriate responses based on authentication status.
4468	Region method returns AWS S3 bucket region based on domain and environment variable, handling different cases and potential panics.
4469	New initializes an S3 client with a given domain and keys, using default if domain is empty.
4470	Bucket returns a new bucket object with the given name and default configuration
4471	PutWriter writes to a bucket using a writer, header, and config, returning a write-closer and error.
4472	url will construct a URL object based on bucket name, path, and config settings, handling special cases for versioning and dot-separated bucket names
4473	SetLogger configures the logger with output writer, prefix, logging flags, and debug mode.
4474	InstanceKeys retrieves AWS credentials from metadata and returns them as Keys.
4475	EnvKeys retrieves AWS credentials from environment variables and returns them along with an error if any key is missing.
4476	Sign method sets headers for HTTP request including security token and user agent, then signs the request using provided credentials.
4477	getAWSKeys retrieves AWS credentials from environment or instance metadata, returning an error if none are found.
4478	homeDir returns the home directory path or an error if not found
4479	ACL sets the x-amz-acl header if acl is non-empty
4480	putPart sends a PUT request with part data and validates the response ETag.
4481	abort sends a DELETE request to cancel a multipart upload and logs errors if the response status is not 204.
4482	growPartSize determines if increasing part size is feasible based on max object size and number of parts.
4483	CheckDisallowed verifies disallowed environment variables based on a given prefix and specification, returning an error if any unknown variables are found.
4484	Process handles configuration fields by gathering info, looking up environment values, applying defaults, checking requirements, and processing each field.
4485	MustProcess will panic if Process returns an error
4486	toTypeDescription converts a reflect.Type to its description based on its kind.
4487	Usage will print the command-line usage information using a specified prefix and format.
4488	Usagef generates a formatted usage message using a template and returns any parsing errors.
4489	Usaget processes template data and outputs it using a specified prefix and template.
4490	Scan assigns a time value or nil to a Time struct and returns an error if the input type is invalid.
4491	Time's Value method returns its underlying time or nil if it's invalid.
4492	NewTime creates a new Time struct with given time and validity flag
4493	TimeFromPtr converts a pointer to time.Time to a custom Time type.
4494	ValueOrZero returns the time value or zero if the time is invalid.
4495	MarshalJSON for Time returns JSON representation or null if invalid.
4496	SetValid updates a Time object with a new value and marks it as valid.
4497	Time.Ptr returns a pointer to time.Time or nil if invalid.
4498	NewBool creates a new Bool instance wrapping a boolean value and its validity status.
4499	BoolFromPtr converts a pointer to a bool to a custom Bool type, handling nil cases.
4500	UnmarshalJSON will parse JSON data into a Bool struct, handling different types like bool, map, and nil, and setting Valid accordingly.
4501	UnmarshalText converts text to bool and sets validity accordingly
4502	MarshalJSON converts Bool to JSON format, returning "null", "false", or "true" based on its value and validity.
4503	SetValid updates the boolean value and sets Valid to true
4504	NewString creates a new String struct with the given string and validity flag
4505	UnmarshalJSON method parses JSON data into a String object, handling different types and validating the result.
4506	MarshalText will convert a valid String to its byte representation or return an empty slice if it's invalid.
4507	UnmarshalText sets the String field to the text and updates Valid based on whether text is empty.
4508	SetValid updates a String instance with a new valid string value.
4509	StringFromPtr returns a new String from a pointer, handling nil values gracefully.
4510	MarshalJSON will convert a valid string to JSON format, returning null if invalid.
4511	NewInt creates a new Int instance with the given integer value and validity flag.
4512	IntFromPtr converts a pointer to int64 to an Int, returning zero if the pointer is nil.
4513	UnmarshalJSON parses JSON data into an Int object, handling various types including float64, string, map, and nil, ensuring proper validation and error handling.
4514	MarshalText converts integer to byte slice representation.
4515	SetValid updates the Int instance with a new integer value and marks it as valid.
4516	UnmarshalText converts text to Int64 and sets Valid based on parsing success.
4517	MarshalText converts Bool to text representation.
4518	SetValid updates the Float value and marks it as valid
4519	Time.MarshalJSON returns JSON representation or error if time is invalid
4520	UnmarshalJSON converts JSON data to a Float value, handling various types including float64, string, and map, while setting Valid based on success.
4521	UnmarshalText will parse a float from text and set Valid to true if successful, otherwise it sets Valid to false and returns an error
4522	MarshalJSON converts a Float to JSON, handling null, infinity, and NaN values appropriately.
4523	newGossipChannel creates and returns a new gossipChannel instance with the provided parameters.
4524	GossipUnicast sends a unicast gossip message to a destination peer.
4525	GossipBroadcast sends an update to all peers in the gossip channel.
4526	Send data through gossip channel relayed from ourselves
4527	gossipChannel.SendDown sends data to a connection using its sender method
4528	gobEncode serializes a slice of interfaces to a byte buffer and returns it
4529	newTokenBucket initializes a token bucket with given capacity and interval
4530	wait method ensures token bucket's rate limit by sleeping or adjusting the next available token time
4531	capacityToken calculates the last refill time for a token bucket based on current time, refill duration, and token interval
4532	PrefixRangeEnd increments the last byte of a given prefix or returns [0] if increment wraps around.
4533	newLocalPeer creates a new local peer with a name, nickname, and router, starts its actor loop, and returns it
4534	getConnections returns a set of connections held by the local peer
4535	createConnection establishes a TCP connection between two peers, checks limits, resolves addresses, and starts connections with logging.
4536	doAddConnection sends add connection action to localPeer's actionChan and returns result from handleAddConnection.
4537	startLocalConnection initializes a local connection with remote, TCP, and router details, starts a goroutine to run it, and validates the local peer.
4538	SendProtocolMsg sends a protocol message over the connection or shuts it down on error.
4539	NewStatus creates a new Status object from a Router instance.
4540	makePeerStatusSlice converts peers to a slice of PeerStatus, including connection statuses.
4541	makeUnicastRouteStatusSlice will return a slice of unicast route statuses from the routes object
4542	makeBroadcastRouteStatusSlice will return a slice of broadcast route statuses from a routes object, locking it during access.
4543	makeLocalConnectionStatusSlice will create a slice of LocalConnectionStatus based on connectionMaker's connections and targets, handling states and attributes accordingly.
4544	makeTrustedSubnetsSlice converts IPNet objects to their string representations
4545	Range method handles etcd range requests, processes them internally, and returns responses or errors accordingly.
4546	etcdStore's Put method processes a put request, proposing it internally, handling responses or errors accordingly.
4547	DeleteRange deletes a range of keys from the store and returns a response or an error.
4548	Txn processes a transaction request and returns a response or error based on the outcome of the proposal and context.
4549	Compact method returns an error indicating functionality is not implemented.
4550	proposeInternalRaftRequest marshals request, checks size, registers pending, sends data, returns channels and error
4551	applyCompare evaluates a comparison operation on a key-value pair and returns the revision number and a boolean indicating whether the comparison succeeded.
4552	Descriptions method returns a list of PeerDescription objects containing details about each peer, ensuring thread safety through RLock and RUnlock.
4553	OnGC adds a callback to the Peers struct's onGC slice while holding a lock.
4554	OnInvalidateShortIDs adds a callback to peers when short IDs invalidate.
4555	chooseShortID picks a free short ID from a set or returns false if none are available
4556	fetchWithDefault will find or add a peer to the peers map, incrementing its local reference count and returning it.
4557	Fetch will return a peer based on its name while ensuring thread safety
4558	fetchAndAddRef updates the reference count of a peer by name and returns the peer object
4559	FetchByShortID retrieves a peer using its short ID, locking the Peers object during access.
4560	GarbageCollect locks peers, runs garbageCollection, then unlocks and notifies pending notifications.
4561	newRoutes initializes routes with channels and starts a goroutine to run them
4562	OnChange appends a callback to routes onChange slice after locking routes.
4563	Unicast returns the peer name and whether it was found in the routes map.
4564	UnicastAll returns a peer name and whether it was found based on the given name.
4565	Broadcast returns peers associated with a given name or calculates them if necessary.
4566	BroadcastAll will return all peers for a given name, or calculate them if necessary.
4567	NewPeer initializes a new peer with given name, UID, and logger, starts its loop goroutine, and returns the peer instance.
4568	Register updates the peer's gossip state asynchronously.
4569	ReadFrom reads data from a peer, copying it into a buffer and returning the number of bytes read, the remote address, and any errors encountered.
4570	WriteTo sends data to a peer using gossip, handling errors and broadcasting.
4571	LocalAddr returns the local address of the peer
4572	OnGossip processes a buffer to create a gossip packet and returns it along with any errors.
4573	OnGossipBroadcast processes gossip data, parses it, sends to receiver, and returns parsed data.
4574	OnGossipUnicast processes unicast gossip messages by parsing the buffer and sending the packet to the receiver channel.
4575	NewDefaultServer initializes a new server with default configurations and returns a Server instance.
4576	PeerNameFromUserInput converts user input to a fixed-length peer name using SHA-256 hashing.
4577	PeerName.bytes converts a hexadecimal string to a byte array, panicking on failure.
4578	NewRouter initializes a router with given config, name, nickName, overlay, and logger, returns the router and an error if initialization fails
4579	sendAllGossip sends all gossips from registered channels to their respective destinations.
4580	sendAllGossipDown sends all gossips from channels to a connection
4581	broadcastTopologyUpdate updates router's topology gossip data with given peers.
4582	OnGossipUnicast logs an error when receiving unexpected topology gossip unicast messages
4583	OnGossipBroadcast processes gossip updates and returns topology data or an error.
4584	Gossip method returns topology gossip data containing router peers and their names.
4585	OnGossip processes gossip updates, applies topology changes, and returns updated peer data or an error.
4586	Encode method returns encoded peers data as byte slices
4587	newState creates a new state object initialized with a peer name and an empty map.
4588	Merge combines two states and returns a complete gossip data.
4589	mergeReceived updates the state's set with received data, filtering out duplicates and returning the updated state.
4590	mergeComplete updates the state's set with values from another set, ensuring no lock contention, and returns the updated state.
4591	OnGossipBroadcast processes gossip data and returns a surrogate gossip data object along with no error.
4592	OnGossip checks if an update is already known or too old, then stores it if new.
4593	generateKeyPair generates a cryptographic key pair and returns the public and private keys along with any errors encountered
4594	formSessionKey generates a session key using Diffie-Hellman and SHA-256.
4595	newTCPCryptoState initializes a TCP crypto state with a session key and sets nonce flags based on direction.
4596	Send method encodes and sends message using encoder
4597	Send method sends a TCP message prefixed with its length, returns error if message is too large
4598	Send method locks the sender, encrypts the message using secretbox, advances the state, and sends the encoded message.
4599	Receive decodes a message from a TCP connection and returns it along with any errors encountered.
4600	Receive reads a TCP message prefixed by its length and returns it or an error if the message is too large.
4601	Receive method reads encrypted message, decrypts it using session key and nonce, advances state, and returns decrypted message or error.
4602	newPeer initializes a peer with a name, logger, and starts its loop goroutine
4603	incr increments peer's state, broadcasts update, returns new state
4604	Gossip copies peer's state and logs it before returning.
4605	OnGossipUnicast decodes a map from a byte buffer, merges it with peer state, logs the result, and returns any errors encountered.
4606	makeRaftPeer creates a new raft peer from a network address.
4607	peer.String returns a formatted string representation of the peer object.
4608	forEachConnectedPeer iterates over connected peers, applying a function to each based on connection status and exclusion criteria.
4609	parsePeerUID converts a string to a PeerUID and returns it along with any parsing errors
4610	Swap two elements in a list of peers by their indices.
4611	listOfPeers.Less will compare two peers based on their names and return true if the first peer's name is lexicographically less than the second peer's name.
4612	doIntro sets connection deadlines, exchanges protocol header, generates key pair, sets new deadlines, and performs intro based on protocol version.
4613	filterV1Features filters out features from the input map based on predefined protocolV1Features.
4614	newConnectionMaker initializes a connection maker with necessary parameters and starts a query loop in a goroutine
4615	connectionAborted updates target state and error info on connection failure
4616	newGossipSender initializes a gossip sender with message creation functions, a sender interface, and channels for control flow.
4617	Send method updates gossip data atomically, merging new data if already present.
4618	Broadcast updates gossip data for a peer or merges it if already present.
4619	Flush sends a signal to the gossipSender to flush its data and returns whether the flush was successful.
4620	Sender returns a gossip sender for the given channel name or creates it if it doesn't exist.
4621	Flush sends data from gossip senders and returns true if any data was sent
4622	findMainPath returns the file path of the main function or an empty string if not found
4623	Create generates a channel token using a client ID and returns it along with any errors encountered during the process.
4624	Send sends a message using a client ID and returns an error if the call fails.
4625	SendJSON marshals a Go value to JSON and sends it using Send with the given context and client ID, returning any errors encountered during the process.
4626	remapError will modify the service field of internal.APIError to "channel" if it's currently "xmpp", then return the error
4627	NamespacedContext adds a namespace to the context
4628	protoToItem converts a protobuf item to a local Item object
4629	singleError extracts the first error from MultiError or returns the original error
4630	Get retrieves an item from cache using a given key and returns it or an error if the key is not found.
4631	GetMulti fetches multiple items from memcache using keys and returns a map of items along with any errors encountered during the process.
4632	Delete will remove a key from the cache and return an error if it fails
4633	DeleteMulti deletes multiple keys from memcache and returns an error if any deletion fails
4634	Increment updates a counter and returns its new value or an error.
4635	IncrementExisting will increase the value associated with the given key by the specified delta and return the new value along with any potential error.
4636	set updates items in memcache with specified values and policies, handling errors and conflicts.
4637	Codec.Get retrieves an item from a cache and unmarshals its value into a specified variable, returning the item or an error.
4638	Stats retrieves memcache stats using a gRPC call and returns them as a Statistics struct or an error if unsuccessful.
4639	Flush sends a Memcache flush request and returns an error if it fails.
4640	RunInBackground executes a function asynchronously using a background request and sends the result through a channel.
4641	List sends a request to retrieve modules and returns their names along with any errors encountered.
4642	SetNumInstances updates the number of instances for a specified module and version, returning an error if the call fails.
4643	Versions fetches module versions using gRPC and returns them along with any errors.
4644	DefaultVersion fetches the default version for a given module using gRPC and returns it along with any errors encountered.
4645	Start sends a request to start a module with optional parameters and returns an error if unsuccessful.
4646	Stop sends a stop request to a module and returns an error if the call fails.
4647	Ancestor sets the ancestor key for a query and returns the modified query or an error if the ancestor is nil.
4648	EventualConsistency sets eventual consistency on query and returns it.
4649	Project clones the query and sets the projection to specified fields.
4650	Distinct method sets distinct flag to true and returns cloned query object
4651	DistinctOn method clones query and sets distinct fields
4652	KeysOnly sets keysOnly to true on a Query instance and returns it.
4653	Limit sets the query's result count and returns the modified query or an error if the limit is out of range.
4654	Offset sets the query's offset to a non-negative integer, returns an error if out of range.
4655	BatchSize sets the query's batch size and returns the modified query object or an error if the size is invalid.
4656	Start method clones a query and sets its start cursor based on the given cursor.
4657	End method updates query with cursor data or sets error if cursor is invalid.
4658	Count will return the number of entities matching a query, adjusting for offset and limit.
4659	Run will execute a query and return an iterator or an error
4660	Next method retrieves the next key-value pair from iterator, loads entity into destination if specified, and returns key along with any errors encountered.
4661	Iterator.Cursor returns a cursor based on the iterator's position and previous cursor, handling edge cases where the iterator is at the start or end of a result batch.
4662	Cursor's String method returns a base64 URL-encoded string of its protobuf data or panics on error.
4663	DecodeCursor converts a URL-encoded string to a Cursor object and handles potential errors during decoding and unmarshalling.
4664	saveEntity saves an entity to proto using defaultAppID, key, and src; returns EntityProto or error
4665	Namespace validates and returns a new context with the given namespace.
4666	typeof retrieves variable or function type from configuration based on name
4667	dot method returns field or method value from type or embedded types
4668	joinFunc combines input and output parameters into a function signature string.
4669	validPropertyName checks if a property name is valid according to certain rules.
4670	getStructCodec retrieves a codec for a struct type, locking to ensure thread safety.
4671	LoadStruct will load properties into a struct, returning an error if it fails
4672	SaveStruct converts an interface to a struct and saves it, returning properties and any errors encountered.
4673	ServingURL generates a secure URL for a blob key based on options, handling resizing and cropping parameters.
4674	DeleteServingURL deletes a URL using a blob key and returns an error if the operation fails
4675	CurrentOAuth retrieves OAuth user details using a given context and optional scopes, returning a User object or an error if the request fails.
4676	OAuthConsumerKey retrieves the consumer key from the response or returns an error.
4677	String method returns user's email or federated identity, removing domain if present.
4678	LoginURL returns a federated login URL for a given destination and context, returning an error if unsuccessful.
4679	LoginURLFederated generates a login URL using federated identity and handles errors.
4680	LogoutURL constructs a logout request, sends it, and returns the logout URL or an error.
4681	insertContext adds a context to an AST call expression if it's not already present.
4682	NewClient creates a new Client instance with appcfg header and validates the app ID.
4683	NewContext creates a new context with call, log, and app ID overrides from the Client.
4684	NewRemoteContext creates a new context using a remote host and HTTP client, returning an error if creation fails.
4685	Debugf logs a message at debug level using the internal logger.
4686	guestbookKey returns a datastore key for the default guestbook
4687	toRetryParameters converts RetryOptions to TaskQueueRetryParameters with various fields conditionally set based on input options.
4688	NewPOSTTask creates a new POST task with the given path and parameters, setting the appropriate headers and payload.
4689	ParseRequestHeaders extracts headers from HTTP request and populates a RequestHeaders struct.
4690	Add will add a task to a queue and return the updated task or an error if the operation fails
4691	AddMulti adds multiple tasks to a queue and returns the updated task list and any errors encountered.
4692	Delete removes a task from a queue and returns any errors encountered. If multiple errors occur, only the first one is returned.
4693	DeleteMulti deletes multiple tasks from a queue and returns an error if any task fails to delete.
4694	Lease acquires tasks from a queue with a specified lease time and returns them or an error.
4695	LeaseByTag acquires tasks from a queue based on a tag and returns them along with any errors encountered during the process.
4696	Purge deletes all tasks from a specified queue or the default queue if none is provided.
4697	ModifyLease updates a task's lease time and returns an error if the update fails.
4698	QueueStats retrieves stats for multiple queues and returns them as QueueStatistics objects, handling errors during the process.
4699	IsTimeoutError checks if an error is a timeout error
4700	Func registers a function with a unique key, validates its signature, and handles errors.
4701	Task validates function arguments, encodes them using Gob, and returns a task queue task.
4702	RequestHeaders retrieves headers from context or returns an error.
4703	WithContext creates a new context with the given parent and request.
4704	WithAPICallFunc overrides API call behavior in the given context.
4705	APICall sends a request to a specified service and method using the given input message and returns the response or an error.
4706	ModuleHostname retrieves a hostname based on module, version, and instance parameters, returning an error if the request fails.
4707	AccessToken retrieves an access token with specified scopes and returns it along with its expiration time or an error.
4708	PublicCertificates retrieves public certificates from a service and returns them as a list of Certificate objects along with any errors encountered during the process.
4709	ServiceAccount fetches service account name using gRPC and returns it or error
4710	SignBytes signs bytes using a service and returns the key name and signature or an error.
4711	fetch retrieves data from a blob store and updates reader's buffer and offset, returning an error if unsuccessful or if no data is found.
4712	seek adjusts reader offset within buffer bounds or resets it if out of bounds
4713	multiKeyToProto converts a list of keys to protobuf references for a given app ID
4714	referenceValueToKey converts a reference value to a key and returns it along with any errors encountered
4715	keyToReferenceValue converts a Key to a ReferenceValue with PathElements.
4716	Put will store a key-value pair in the context and return the key and an error if it fails
4717	`PutMulti saves multiple entities to the datastore and returns their keys or an error.`
4718	Delete removes a key from the cache and returns an error if the operation fails
4719	DeleteMulti deletes multiple keys in a datastore using a given context and returns an error if any issues occur.
4720	deploy runs a command with arguments from flags and captures its output, returning any errors encountered.
4721	Next method retrieves the next record from Result or returns an error if no more records are available.
4722	protoToAppLogs converts protocol buffer log lines to application logs
4723	protoToRecord converts a protobuf RequestLog to a Record object, handling errors and converting various fields appropriately.
4724	Run sends query parameters and returns a result object containing request details and any errors.
4725	run method executes log read request updates logs and resultsSeen returns error if failed
4726	Current extracts user details from headers and returns a User object or nil if no valid email or federated identity is found.
4727	IsAdmin checks if the request is from an admin based on headers.
4728	isErrFieldMismatch checks if an error is a datastore field mismatch error
4729	Stat retrieves blob info from datastore using blob key and returns it or an error if retrieval fails.
4730	Send sets the X-AppEngine-BlobKey header and ensures Content-Type is set correctly.
4731	UploadURL creates a blob upload URL with options and returns it or an error.
4732	Delete will remove a single blob key and return an error if it fails
4733	DeleteMulti deletes multiple blobs using their keys and returns an error if any operation fails
4734	NewReader creates a new reader for a given blob key in a specific context.
4735	Handle registers an HTTP handler to process XMPP chat messages using a provided function.
4736	Send method sends an XMPP message and returns an error if the response status is not successful
4737	Invite sends an XMPP invite request and returns an error if it fails.
4738	Send sends presence information using XMPP and returns an error if the request fails
4739	GetPresence checks user availability and returns corresponding presence or error
4740	GetPresenceMulti fetches presence statuses for multiple JIDs, handling errors and mapping presence values.
4741	newStructFLS returns a FieldLoadSaver for a struct pointer or an error if invalid
4742	SaveStruct saves a struct to a list of fields and returns an error if it fails
4743	Namespaces retrieves all namespace keys from the datastore and returns their names.
4744	Kinds retrieves all keys from a query and returns their names, handling errors appropriately.
4745	RunInTransaction executes a function within a transaction with retries on concurrent errors.
4746	imports checks if a file has an import matching the given path
4747	importSpec finds an import spec in a file by its path.
4748	declImports checks if a given import path exists in an AST GenDecl node
4749	isPkgDot checks if expression selects a package member with given name
4750	isTopName checks if expression is an identifier matching the given name and has no object associated
4751	isName checks if the given expression is an identifier matching the specified name
4752	isCall checks if expression is a call to specified package and function name
4753	refersTo checks if two AST nodes refer to the same identifier
4754	isEmptyString checks if an AST expression represents an empty string literal
4755	countUses counts how many times an identifier is used within a given scope
4756	assignsTo checks if an identifier is assigned within a given scope
4757	newPkgDot creates a selector expression for a package and its member
4758	renameTop renames identifiers from old to new in an AST, fixing imports and declarations.
4759	matchLen calculates the length of the longest common prefix between two strings
4760	deleteImport removes an import statement from an AST file and updates the imports slice accordingly
4761	rewriteImport updates import paths in an AST file, returning whether any changes were made.
4762	DefaultTicket returns a cached default ticket string based on environment and app details
4763	flushLog will send logs to a server and return whether it was successful. If force is true, it will always send logs.
4764	withDeadline returns a new context with a deadline, or the parent context if no deadline is specified
4765	KeepAlive sends a request to get the socket name and returns any errors.
4766	applyTransaction applies a transaction to a protocol buffer message using a type-specific setter function
4767	analyze evaluates tags to determine if they contain a main package and lists imported packages, returning an app struct or an error.
4768	buildContext creates a new build context with additional tags appended to default tags
4769	synthesizeMain creates a unique main Go file name, adds it to a tar archive, and returns an error if the file cannot be created or written.
4770	findInGopath searches for a directory within GOPATH and returns its path or an error if not found
4771	copyTree recursively copies files and directories from srcDir to dstDir using tar.Writer, skipping certain files specified in skipFiles.
4772	copyFile copies contents from source file to destination file within a tar archive, returning an error if any step fails
4773	checkMain verifies Go package and searches for main function returning its existence and file paths or errors
4774	isMain checks if a function declaration represents the main function
4775	readFile checks if a Go source file contains a main function and returns true if it does.
4776	initField navigates through nested struct fields based on indices and returns the target field, creating pointers as needed
4777	loadEntity converts protobuf to entity and loads properties into destination or returns an error
4778	validIndexNameOrDocID checks if a string is a valid index name or document ID
4779	Open creates an Index object from a valid name or returns an error.
4780	Put will store a value in the index and return the stored ID or an error
4781	`Get retrieves a document by ID from the index and loads it into the destination.`
4782	Delete removes an item from the index using a context and ID, delegating to DeleteMulti for a single item.
4783	DeleteMulti deletes multiple documents from index and returns error if any document fails to delete.
4784	Search method on Index struct returns an Iterator based on query and options, handling cursor, limit, fields, etc.
4785	fetchMore attempts to retrieve more data from the iterator if no errors have occurred and there is still data to process.
4786	Next retrieves the next document ID and loads it into dst if not idsOnly, returning an error on failure.
4787	Iterator's Facets method returns a slice of facet results and an error if any.
4788	DefaultBucketName retrieves the default GCS bucket name from the RPC response or returns an error if not found.
4789	valid checks if a key's structure is correct and consistent up its parent chain
4790	Equal checks if two keys are equivalent by comparing their attributes and parent nodes.
4791	root will return the top-level Key object by traversing up its parent pointers
4792	marshal will write a Key's parent, kind, and ID to a buffer
4793	String method returns a marshaled representation of Key or empty string if Key is nil
4794	Encode converts Key to a URL-safe base64 encoded string.
4795	DecodeKey converts a URL-encoded string to a Key object, handling padding and unmarshalling.
4796	NewIncompleteKey creates a new key with empty name and zero ID from a parent key in a given context.
4797	NewKey creates a new Key instance using the provided context, kind, stringID, intID, and parent, setting the appropriate namespace based on the presence of a parent or the context.
4798	AllocateIDs will allocate a range of IDs based on the specified kind, parent, and count, returning the lower and upper bounds of the allocated IDs and an error if the allocation fails.
4799	IsOverQuota checks if an error indicates exceeding a quota limit.
4800	ClassicContextFromContext extracts an appengine context from a standard netcontext or returns an error if not available.
4801	send message using context
4802	sendToAdmins sends a message to admins using the given context and returns an error if it fails
4803	Failures method counts the number of failed tests in a report.
4804	decodeFieldNumberAndTyp3 extracts field number and type from binary data, returning error on invalid format.
4805	checkTyp3 verifies if the given type matches the expected type and returns an error if they don't match.
4806	decodeTyp3 decodes a typ3 byte and returns it along with the number of bytes read or an error if invalid
4807	NewPrefixBytes creates a new PrefixBytes instance from given byte slice.
4808	getLengthStr returns the size of a variable in hexadecimal or "variable" if it's not an array or numeric type
4809	collectImplementers_nolock updates info.Implementers with concrete types implementing info.Type.
4810	checkConflictsInPrio_nolock verifies type conflicts within interface implementations, ensuring all types are prioritized appropriately.
4811	constructConcreteType creates a new concrete type based on TypeInfo and returns its reflect values.
4812	MarshalBinaryLengthPrefixedWriter serializes an object to binary format with length prefix and writes it to a writer, returning the number of bytes written and an error if serialization fails.
4813	cdc.MarshalBinaryBare encodes a Go value to Amino binary format, returning byte slice and error.
4814	UnmarshalBinaryLengthPrefixed reads a length-prefixed binary data and decodes it into the given pointer, returning an error if the data is invalid or incomplete.
4815	UnmarshalBinaryBare decodes binary data into a given struct, handling prefixes and ensuring full consumption.
4816	MustMarshalJSON marshals JSON and panics on error
4817	MustUnmarshalJSON unmarshals JSON from byte slice to pointer, panicking on error.
4818	MarshalJSONIndent marshals JSON data with indentation using the specified prefix and indent strings, returning the indented byte slice or an error if formatting fails.
4819	newDataReader wraps an io.Reader with a buffered reader and returns it encapsulated in an internalDataReader struct.
4820	Read method parses TELNET commands and returns data.
4821	ListenAndServeTLS starts a TLS listener on the given address and serves HTTPS requests using the specified certificate and key files.
4822	Produce returns a Handler by invoking the ProducerFunc with the given context, name, and arguments.
4823	PromoteHandlerFunc wraps a HandlerFunc with pipes for input/output/error streams, copying arguments, and returns a promoted handler.
4824	Serve starts a network server using the given listener and handler, returning any errors encountered.
4825	Serve listens on a network listener, handles incoming connections using a specified or default handler, and spawns goroutines to process each connection.
4826	Fail method prints usage, error message, and exits with status -1
4827	WriteUsage method formats and outputs the usage message for a command-line tool based on its specifications and configuration.
4828	WriteHelp method outputs parser's usage, description, positionals, options, and built-in options to writer.
4829	MustParse creates a new Parser, parses flags, handles help/version errors, and exits on failure.
4830	Parse initializes a parser with given destinations and parses flags, returning any errors encountered.
4831	walkFields recursively visits each field in a struct, applying a custom visitor function to process them.
4832	Parse checks command-line flags and processes arguments accordingly.
4833	setSlice sets the elements of a slice from a list of strings, handling pointers and truncation.
4834	canParse determines if a type can be parsed, returning whether it's parseable, boolean, and if it supports multiple values
4835	isBoolean checks if a type is a boolean or pointer to boolean
4836	NewFromMap creates a Tree from a given map by inserting each key-value pair into the tree.
4837	Insert method adds a key-value pair to a Tree data structure, updating or creating nodes as necessary, and returns the old value and whether it was updated.
4838	Delete will remove a string from the tree and return its value and whether it was found
4839	DeletePrefix removes all keys with the given prefix from the tree and returns the number of deleted keys.
4840	deletePrefix removes nodes matching a given prefix recursively and merges parents if necessary.
4841	Get method searches for a key in a tree and returns its value and presence.
4842	LongestPrefix searches for the longest prefix in a Tree and returns the corresponding key, value, and existence flag.
4843	Minimum will return the smallest key-value pair from the Tree or indicate if the tree is empty.
4844	WalkPrefix traverses a tree starting with a given prefix and applies a function to matching nodes.
4845	recursiveWalk traverses a tree structure applying a function to each node's key-value pair, returning true if the function returns true for any pair
4846	ToMap converts tree to a map using Walk method.
4847	checkip determines IP type, converts to big.Int, and calculates index based on metadata
4848	readuint32 reads a 32-bit unsigned integer from a file at a specified position in little-endian format and returns it along with any errors encountered during the process.
4849	readuint128 reads a 128-bit unsigned integer from a file at a given position, converting it from little-endian to big-endian format and returning the result as a big.Int.
4850	loadmessage assigns input string to all fields of IP2Locationrecord and returns it
4851	Printrecord will print details of an IP2Location record.
4852	Main will scale down a drawing and save it to a file with a specified extension, returning the output filename.
4853	SaveToPdfFile saves a PDF file to a specified path using the given Fpdf instance.
4854	CubicCurveTo updates path components based on control points and end point, ensuring initial move-to if necessary
4855	ArcTo defines an arc path component and updates the current position accordingly.
4856	String method returns a formatted string representation of Path components.
4857	VerticalFlip will flip a path vertically by negating the y-coordinates of its points and returning the modified path
4858	NewGlyphCache initializes a new GlyphCacheImp with an empty map for storing glyphs.
4859	Fetch retrieves or renders a glyph from cache.
4860	renderGlyph draws a glyph for a given character using the specified font and returns it
4861	Copy method returns a deep copy of Glyph object
4862	Fill method applies transformation and fills path on graphic context, returning width.
4863	Main will render a graphic and save it to a file with the given extension.
4864	Draw will draw a line from (x0, y0) to (x1, y1) using the GraphicContext gc
4865	Paint method updates vertices and colors slices based on input spans, handling buffer capacity and color calculations.
4866	SetColor updates painter's color based on input RGBA values
4867	NewPainter initializes a Painter struct with pre-allocated slices for vertices and colors.
4868	GetStringBounds calculates bounds for a given string using the current font, returning left, top, right, and bottom coordinates.
4869	recalc updates GraphicContext's scale based on font size, DPI, and fixed ratio.
4870	SetFont updates the current font in the GraphicContext
4871	ClearRect updates SVG groups with a new masked group based on specified coordinates.
4872	drawString will render text based on font mode and calculate its width
4873	newGroup creates a new SVG group based on drawType and attaches it to the GraphicContext's svg.Groups slice.
4874	newMask creates a new mask object and attaches it to the GraphicContext's SVG masks list, returning the mask.
4875	embedSvgFont adds SVG font data to the GraphicContext, creating or updating the font element and filling it with glyphs from the input text.
4876	TraceQuad processes a quadratic Bézier curve, tracing it or subdividing until it meets a threshold.
4877	GetFontName returns a formatted string combining font name, family, style, and size from ContextStack
4878	NewStackGraphicContext creates a new StackGraphicContext with default settings.
4879	NewFolderFontCache creates a new FolderFontCache instance with specified folder path.
4880	NewSyncFolderFontCache creates a new SyncFolderFontCache instance with the given folder path.
4881	Main sets up a graphic context, draws a gopher, and returns the output filename.
4882	NewPdf creates a new PDF document with specified orientation, unit, and size, setting initial properties and adding a page.
4883	clearRect clears a rectangular area on a graphic context with white color and restores the previous fill color and position.
4884	NewGraphicContext creates a new GraphicContext object with a stack graphic context, PDF document, and DPI setting.
4885	clearRect will clear the graphic context's rectangle based on the PDF page size
4886	GetStringBounds calculates text bounds using font metrics and returns left, top, right, and bottom coordinates.
4887	CreateStringPath sets up text path on graphic context and returns cursor position
4888	FillStringAt creates a string path at specified coordinates and returns the cursor position
4889	SetStrokeColor updates stroke color in GraphicContext
4890	SetFillColor updates fill and text colors in GraphicContext.
4891	SetLineDash updates the dash pattern for graphics context
4892	SetLineWidth updates the line width for both graphic context and PDF.
4893	Main function draws "Hello World" text using GraphicContext and returns the output file name with specified extension.
4894	Draw will render a rounded rectangle with bold italic text "Hello World" at position 8,52.
4895	SaveToPngFile will save an image to a PNG file at the specified path and return an error if it fails
4896	LoadFromPngFile opens a PNG file and returns its image data or an error.
4897	Resource constructs a file path based on folder, filename, and extension, prepending '../' for specific extensions.
4898	Output constructs file paths based on name and extension, using a root directory for specific extensions.
4899	Main draws a tiger on a graphic context and returns the output filename
4900	Draw opens a PostScript file and interprets it using the provided GraphicContext.
4901	Main function draws a droid and returns the output filename.
4902	Bubble will draw a bubble shape on a graphic context at specified coordinates and dimensions.
4903	Dash draws a dashed line on a graphic context at specified coordinates and dimensions.
4904	CubicCurve draws a cubic Bézier curve and segments on a GraphicContext with specified dimensions and colors.
4905	FillStroke draws a stroke with specified dimensions and color on a graphic context.
4906	FillStyle fills a style on a graphic context with wheels and rectangles.
4907	PathTransform modifies graphic context to draw a scaled arc.
4908	Star will draw a star shape using GraphicContext at specified coordinates and dimensions
4909	Draw will render various shapes and patterns on a graphic context.
4910	ConvertPath converts a draw2d path to a PDF vectorized format.
4911	Draws lines with different cap and join styles and returns the output filename.
4912	Draw will render a line with a thick stroke and a thinner helper line using the provided graphic context and coordinates.
4913	DrawContour draws a contour using a path builder and a list of truetype points, applying translation offsets.
4914	Flatten converts a complex path into simpler segments using a flattener and scale factor.
4915	Clear will reset the graphic context's image to its original state by clearing the entire area.
4916	ClearRect will clear a rectangle on the graphic context using the current fill color.
4917	DrawImage applies a transformation to an image based on the specified filter.
4918	Main will draw a gopher on an image and save it with a frame, returning the filename and any errors encountered.
4919	Draw will render a PNG image within a frame with specified dimensions and margins, applying transformations and handling errors.
4920	Draw will render a droid shape on a canvas at specified coordinates using graphics context.
4921	ChecksumString32S calculates checksum for non-empty string or returns result of Checksum32S for empty string.
4922	ChecksumString64S calculates a checksum for a string using a given seed.
4923	NewS32 creates and initializes a new XXHash32 instance with the given seed.
4924	NewS64 creates a new XXHash64 instance with the given seed and resets it.
4925	round64 rounds a 64-bit unsigned integer using a hash algorithm
4926	Checksum32S calculates a 32-bit checksum for input bytes using a seed and specific primes.
4927	Checksum64S calculates a 64-bit checksum for input bytes using a seed, applying different algorithms based on input length.
4928	getStage initializes stage, advanceStage, and resetEnv functions based on environment variable values and returns them.
4929	New initializes Glg with default settings and logger configurations.
4930	Get returns a singleton instance of Glg ensuring it's initialized once with specified time format.
4931	SetMode updates logger mode and returns Glg instance.
4932	SetPrefix updates the prefix of the logger and returns the Glg instance
4933	GetCurrentMode retrieves the current mode from the logger at the specified level or returns NONE if not found
4934	InitWriter sets writers to nil and updates logger modes for all levels in Glg.
4935	SetWriter updates logger writers and modes for all levels
4936	SetLevelColor updates the color function for a specific log level in Glg
4937	SetLevelWriter updates logger's writer for a given level and returns the Glg instance.
4938	AddStdLevel increments the logger's level counter, updates the level map, creates a new logger instance, and stores it based on the level.
4939	EnableColor updates logger color setting and returns Glg instance
4940	EnableLevelColor sets color mode for a log level and returns the Glg instance
4941	DisableLevelColor disables color for a given log level in Glg.
4942	RawString extracts a substring from byte data based on separators and offsets.
4943	TagStringToLevel converts a tag to a level using a map, returning 255 if not found.
4944	Println outputs values with formatting or returns an error if logging fails
4945	Fatal logs a message with level FATAL, formats it, and panics on error.
4946	Fatalf logs a fatal error message and exits the program
4947	isModeEnable checks if a given mode is enabled in Glg
4948	CaptureMetrics captures metrics for an HTTP handler and returns them.
4949	get retrieves a value using a key and returns its address
4950	Save method encodes Cedar data to specified format using writer and returns error for invalid data type
4951	SaveToFile opens a file and writes data to it using Save method.
4952	Load will decode data from reader based on data type and return error if type is invalid
4953	LoadFromFile opens a file and loads its contents using Load method.
4954	Key method returns a reversed key for a given ID or an error if invalid.
4955	Value retrieves the value at a given ID, or an error if no value exists.
4956	Delete removes a key from a Cedar data structure, handling siblings and empty nodes efficiently.
4957	Set updates Version struct fields from a string representation.
4958	Version.Compare will compare two versions and return an integer indicating their order, using recursive comparison first and then pre-release comparison if needed.
4959	Slice method returns version components as int64 slice
4960	BumpMajor increments the major version number and resets minor, patch, pre-release, and metadata fields to zero.
4961	BumpMinor increments minor version, resets patch, pre-release, and metadata.
4962	BumpPatch increments the patch version and clears pre-release and metadata fields.
4963	validateIdentifier checks if a string is a valid semver identifier and returns an error if it's not
4964	newStream initializes a Stream with given buffer size and replay option, returning a pointer to it.
4965	addSubscriber adds a new subscriber to the stream and returns it
4966	New creates a new Server instance with default settings
4967	Close will stop all streams and release resources held by the server
4968	CreateStream method creates a stream if it doesn't exist and returns it
4969	RemoveStream deletes a stream from server's map by ID.
4970	StreamExists checks if a stream exists by its ID.
4971	Publish sends an event to a stream identified by id, locking the server during operation.
4972	NewClient creates a new client with given URL and default settings.
4973	Subscribe method attempts to subscribe to a stream, handling events with a given callback, retrying on errors using exponential backoff.
4974	SubscribeChan handles client subscription to a stream, processes events, and retries on failure.
4975	SubscribeRaw will call Subscribe with an empty topic and return an error if it fails
4976	Unsubscribe will signal a channel to unsubscribe from events if subscribed.
4977	NewEventStreamReader creates a reader to parse events from a stream using a custom split function.
4978	ReadEvent reads an event from scanner or returns an error or EOF
4979	HTTPHandler manages server-side streaming, handling connections, sending events, and managing subscribers.
4980	Add event to log with current index and timestamp.
4981	Replay sends events to subscriber's connection from event log starting from specific ID.
4982	readKey reads a private key from a file and returns a crypto.Signer or an error if the file is not found or the key type is unsupported
4983	writeKey saves an ecdsa private key to a file at a given path
4984	anyKey generates or reads a crypto key from a file, returning it along with an error if unsuccessful
4985	sameDir joins the directory of existing path with filename
4986	printAccount formats and prints account details to a writer
4987	tmpl will execute a template and write its output to a writer, handling errors appropriately
4988	printUsage outputs usage information to the specified writer using a template.
4989	FromRequest extracts a client's IP address from HTTP headers or request metadata.
4990	Do method executes a command to clear parameters within a given context and returns any errors encountered
4991	Do method executes a command and returns an error
4992	Do will execute a command to remove a DOM storage item and return any errors encountered
4993	Do method executes a command to set DOM storage item with given parameters in the specified context and returns an error if any.
4994	Do method executes a command to deliver push message parameters in a given context.
4995	Do method executes a command with parameters and returns an error.
4996	Do will execute a command using the provided parameters and context, returning any errors encountered
4997	Do will execute a command to set force update on page load and return any error encountered
4998	Do method executes a command with SkipWaiting parameters in the given context and returns an error if any.
4999	Do will execute a command to start a worker and return an error if it fails
5000	Do method executes a command to stop all workers and returns any errors encountered
5001	Do method executes a command to stop worker and returns an error if it fails
5002	Do method on UnregisterParams struct executes a command with provided context and parameters, returning any errors encountered.
5003	Do will execute a command to update registration parameters and return any errors encountered.
5004	Do method executes a command with bind parameters in the given context and returns any errors encountered
5005	Do will execute a command using the UnbindParams and return any errors encountered.
5006	ExceptionDetails.Error returns a formatted string describing the exception.
5007	Do method executes a command to release animations and returns any errors encountered
5008	Do executes a command to seek animations using the provided parameters and returns any errors encountered.
5009	Do method executes a command to pause and returns an error if it fails
5010	Do method executes a command to set playback rate with parameters and returns an error.
5011	Do will execute a command to set timing parameters with the given context and return any errors encountered.
5012	Do will execute a command to prepare for leak detection and return any errors encountered.
5013	Do method executes JavaScript memory purge command and returns error if failed
5014	Do will execute a command to set pressure notifications suppressed and return an error if it fails
5015	Do method executes pressure notification command with params and returns error
5016	WithSamplingInterval sets the sampling interval for StartSamplingParams and returns the updated parameters.
5017	WithSuppressRandomness updates SuppressRandomness field and returns updated params pointer
5018	Do method executes a command to start sampling with given parameters and returns an error if execution fails
5019	Do will execute a command to stop sampling and return an error if it fails
5020	Do executes ClearDeviceOrientationOverride command and returns an error
5021	Do method executes a command to set device orientation override parameters.
5022	Do will execute a command to start violations report and return an error
5023	Do method executes a command to stop violations report and returns any errors encountered.
5024	String method returns a string representation of the Modifier enum.
5025	WithNodeID sets the NodeID field of GetPartialAXTreeParams and returns the modified params pointer.
5026	WithBackendNodeID sets the BackendNodeID field in GetPartialAXTreeParams and returns the modified instance.
5027	WithObjectID updates the ObjectID field of GetPartialAXTreeParams and returns the updated params.
5028	WithFetchRelatives sets whether to fetch relatives and returns updated params
5029	Do method executes a command to set time domain parameters with a given context and returns any errors encountered.
5030	WithClipRect updates the ClipRect field of ProfileSnapshotParams and returns the updated struct.
5031	Do method executes a command to release a snapshot and returns any errors encountered.
5032	Do method executes ClearObjectStore command with given parameters and returns an error.
5033	Do method executes a command to delete a database with parameters and returns an error.
5034	Do method executes a command to delete object store entries with parameters and returns an error.
5035	WithKeyRange updates the KeyRange field in RequestDataParams and returns the updated instance.
5036	Do will execute a command to set sampling interval and return an error if it fails
5037	Do method executes a command and returns an error
5038	WithCallCount updates CallCount field and returns updated params
5039	WithDetailed updates the Detailed field of StartPreciseCoverageParams and returns the updated instance.
5040	Do will execute a command to start precise coverage and return any errors encountered
5041	Do will execute a command to start type profiling and return any errors encountered.
5042	Do will execute a command to stop precise coverage and return any errors encountered.
5043	Do will execute a command to stop type profiling and return any errors encountered
5044	Do method executes a command to ignore certificate errors using context.
5045	Do method executes a command to inspect a heap object and returns an error if it fails
5046	Do will execute a command to collect garbage and return any errors encountered
5047	WithSamplingInterval updates SamplingInterval in StartSamplingParams and returns updated pointer.
5048	Do will execute a command to start tracking heap objects and return an error if it fails
5049	WithReportProgress sets ReportProgress and returns updated params
5050	Do method executes a command to stop tracking heap objects with potential errors.
5051	WithReportProgress updates the ReportProgress field of TakeHeapSnapshotParams and returns the updated instance.
5052	Do will execute a command to take a heap snapshot and return any errors encountered
5053	WithBrowserContextID updates the BrowserContextID field and returns the updated GrantPermissionsParams instance.
5054	Do method executes a command to grant permissions with parameters and returns an error
5055	WithBrowserContextID sets the BrowserContextID field and returns the modified ResetPermissionsParams instance.
5056	Do method executes a command to reset permissions using provided parameters in a given context and returns any resulting errors.
5057	Do method executes a crash command using cdp Execute function with given context and returns any errors encountered
5058	Do will execute a command to crash the GPU process and return an error if it fails
5059	WithQuery sets the query parameter for GetHistogramsParams and returns the updated instance
5060	WithTargetID sets the TargetID field and returns the modified params object.
5061	Do method executes a command to set window bounds with given parameters and returns any errors encountered during execution.
5062	WithImage updates the Image field of SetDockTileParams and returns the updated instance.
5063	Do method executes a command to set dock tile parameters with context and returns any errors encountered
5064	Do method executes a command to delete cache using provided parameters and context.
5065	Do method executes DeleteEntry command using CDP protocol and returns any errors encountered.
5066	WithPathFilter updates PathFilter field in RequestEntriesParams and returns updated instance
5067	Do method executes a command to discard search results using context and returns an error.
5068	Do method executes a command with focus parameters in a given context and returns an error.
5069	Do will execute a command to mark undoable state with an error if it fails
5070	WithIncludeUserAgentShadowDOM updates the IncludeUserAgentShadowDOM field and returns the updated PerformSearchParams instance.
5071	Do method executes a command using the RedoParams context and returns an error.
5072	Do method executes RemoveAttribute command using provided parameters and context, returning any errors encountered.
5073	Do method executes RemoveNode command using CDP and returns any errors encountered
5074	Do method executes a command to request child nodes with parameters and returns an error.
5075	WithNodeID sets the NodeID field of ResolveNodeParams and returns the modified params.
5076	WithBackendNodeID sets the BackendNodeID field and returns the updated ResolveNodeParams instance
5077	WithExecutionContextID sets the execution context ID and returns the updated params
5078	Do method executes a command to set attribute value using CDP and returns an error.
5079	WithName sets the Name field of SetAttributesAsTextParams and returns the updated instance.
5080	Do executes CommandSetAttributesAsText with the given parameters in the specified context and returns any errors encountered.
5081	Do method executes a command to set file input files parameters with context and returns an error.
5082	Do will execute a command to set the inspected node and return an error
5083	Do method executes a command to set node value using provided parameters and context.
5084	Do method executes a command to set outer HTML with parameters and returns any errors encountered
5085	Do method executes undo command and returns error
5086	Do will execute a command with pseudo state parameters in the given context and return any errors encountered.
5087	Do method executes a command to set effective property value for a node.
5088	Do method executes a command to track rule usage tracking parameters in a given context and returns an error if any occurs.
5089	Do method executes a Close command using provided parameters and context, returning any errors encountered.
5090	Do will execute a command to clear data for an origin and return an error if it fails
5091	Do will execute a command on the context and return an error
5092	Do method executes a command to track IndexedDB for an origin with potential errors.
5093	Do method executes a command to untrack cache storage for an origin with potential errors.
5094	Do will execute a command to untrack IndexedDB for a specific origin and return an error if the execution fails.
5095	Do method executes a command to hide highlight with context and returns an error
5096	Do method executes a command to highlight a frame with given parameters and returns any errors encountered
5097	WithNodeID sets the NodeID field in HighlightNodeParams and returns a pointer to the updated struct.
5098	WithBackendNodeID sets the BackendNodeID field in HighlightNodeParams and returns a pointer to the updated params.
5099	WithObjectID sets the ObjectID field in HighlightNodeParams and returns the updated struct pointer.
5100	WithSelector sets the selector property on HighlightNodeParams and returns the updated instance.
5101	Do method executes a command to highlight a node with given parameters in the context.
5102	Do method executes a command with HighlightQuadParams and returns an error
5103	Do method executes a command to highlight a rectangle using params and returns an error
5104	WithHighlightConfig updates the highlight config and returns the modified params
5105	Do method executes a command to set inspect mode and returns an error
5106	Do method executes a command to set ad highlights parameters with a given context and returns an error if any occurs.
5107	WithMessage sets the message field of SetPausedInDebuggerMessageParams and returns the updated struct pointer.
5108	Do method executes a command to set paused in debugger message with given parameters and returns any encountered error
5109	Do will execute a command to set debug borders with parameters and return any errors encountered.
5110	Do will execute a command to set the FPS counter parameters and return an error if it fails
5111	Do method executes a command to show paint rects with given parameters in the specified context and returns any errors encountered.
5112	Do method executes a command to show scroll bottleneck rects and returns an error
5113	Do method executes a command to show hit test borders with parameters in the given context and returns any error encountered.
5114	Do will execute a command to set viewport size on resize and return an error if it fails
5115	Do will execute a command to clear browser cache and return an error if it fails
5116	Do method executes ClearBrowserCookies command using Chrome DevTools Protocol.
5117	WithErrorReason sets the error reason for the request parameters and returns the updated object.
5118	WithRawResponse updates the RawResponse field and returns the updated params object
5119	WithURL updates the URL field of ContinueInterceptedRequestParams and returns the updated instance.
5120	WithMethod sets the request method and returns the updated params
5121	WithPostData sets the PostData field and returns the modified params object
5122	WithHeaders updates the headers and returns the modified request parameters.
5123	WithAuthChallengeResponse sets the AuthChallengeResponse field and returns the modified params object
5124	Do method executes a command to continue an intercepted request and returns any errors encountered.
5125	WithURL sets the URL field of DeleteCookiesParams and returns the updated struct pointer
5126	WithDomain sets the domain field of DeleteCookiesParams and returns the updated params.
5127	WithPath updates the Path field of DeleteCookiesParams and returns the updated instance.
5128	Do method executes DeleteCookies command on context with parameters and returns error.
5129	WithConnectionType updates the connection type and returns the modified params object.
5130	Do method executes network condition emulation command and returns an error if it fails
5131	Do method executes a command using EnableParams and returns an error.
5132	WithUrls sets the URLs field of GetCookiesParams and returns the updated instance
5133	Do method executes a replay XHR command using the provided parameters and context, returning any errors encountered.
5134	Do method executes a command to set blocked URLs with parameters and returns an error.
5135	Do method executes a command to bypass service worker and returns an error
5136	Do method executes a command to disable cache using provided parameters and returns any errors encountered.
5137	WithURL sets the URL field of a SetCookieParams instance and returns it.
5138	WithDomain sets the cookie's domain and returns the modified params
5139	WithPath sets the cookie's path and returns the updated SetCookieParams object
5140	WithSecure sets the Secure flag and returns the updated SetCookieParams instance
5141	WithHTTPOnly sets the HTTPOnly flag on the cookie parameters and returns the updated set
5142	WithSameSite updates the SameSite field of SetCookieParams and returns the updated object.
5143	WithExpires sets the expiration time for cookie parameters and returns updated params.
5144	Do method on SetCookiesParams executes a command with the given parameters and returns an error if any.
5145	Do will execute a command with the given parameters and return an error if it fails
5146	Do method executes a command to set extra HTTP headers with parameters and returns an error.
5147	Do method executes a command to set request interception parameters with given context and returns an error.
5148	Do will execute a command to clear device metrics override parameters with the given context and return an error if it fails
5149	Do will execute a command to clear geolocation override parameters and return any errors encountered
5150	Do method executes a command to reset page scale factor and returns any error encountered
5151	Do method executes a command to set focus emulation enabled with parameters and returns an error.
5152	Do method executes CPU throttling rate command with given parameters and returns an error.
5153	WithColor sets the color parameter and returns the updated params object
5154	Do method executes a command to set default background color override with given parameters and returns any errors encountered.
5155	WithScale sets the scale parameter in SetDeviceMetricsOverrideParams and returns the updated params pointer
5156	WithDontSetVisibleSize sets the DontSetVisibleSize field and returns the modified params object.
5157	WithScreenOrientation sets the ScreenOrientation field and returns the modified params object
5158	Do method executes a command to set device metrics override with given parameters.
5159	Do method executes a command to set scrollbars hidden with given parameters in the specified context and returns any errors encountered.
5160	Do will execute a command to set document cookie disabled and return any errors encountered
5161	Do method executes a command to set touch events for mouse parameters with context and returns an error
5162	Do method executes a command to set emulated media parameters in a given context and returns an error if the execution fails.
5163	WithLatitude sets the latitude parameter in SetGeolocationOverrideParams and returns the updated parameters.
5164	WithLongitude updates the longitude field and returns the modified params object
5165	WithAccuracy updates the geolocation override parameters with the specified accuracy and returns the updated params
5166	Do will execute a command to set geolocation override parameters and return any errors encountered
5167	Do method executes a command to set page scale factor with parameters and returns an error
5168	Do method executes a command to disable script execution with potential errors
5169	WithMaxTouchPoints sets the maximum touch points and returns the updated params
5170	Do method executes a command to set touch emulation enabled with parameters and returns an error
5171	WithBudget updates the budget of SetVirtualTimePolicyParams and returns the updated instance.
5172	WithMaxVirtualTimeTaskStarvationCount sets the maximum virtual time task starvation count and returns the updated parameters.
5173	WithWaitForNavigation sets the WaitForNavigation field and returns the updated params
5174	WithAcceptLanguage sets the Accept-Language header and returns the modified params
5175	WithPlatform sets the platform field of SetUserAgentOverrideParams and returns the updated params
5176	Do method executes SetUserAgentOverride command using given parameters and returns any errors encountered.
5177	Do method executes a command to dispatch a key event with parameters and returns an error.
5178	Do method executes a command to insert text using context and parameters.
5179	WithButtons updates the mouse event parameters with new button values and returns the updated params
5180	Do method executes a command to dispatch a mouse event with parameters and returns any errors encountered.
5181	Do method executes a command to dispatch touch event with parameters and returns an error.
5182	Do method executes a command to emulate touch from mouse event parameters.
5183	Do method executes a command to set ignore input events with parameters and returns an error
5184	Do will execute a pinch gesture command with the given parameters and context, returning an error if it fails.
5185	WithXOverscroll sets the xOverscroll property of SynthesizeScrollGestureParams and returns the updated params.
5186	WithYOverscroll sets the YOverscroll field and returns the updated SynthesizeScrollGestureParams instance
5187	Do will execute a scroll gesture command and return an error if it fails
5188	Do will execute a tap gesture command using SynthesizeTapGestureParams and return any errors encountered during execution
5189	Domain method returns the substring before the first dot in MethodType
5190	WithDepth sets the depth parameter and returns the updated GetEventListenersParams instance.
5191	Do method executes RemoveDOMBreakpoint command using cdp package.
5192	WithTargetName sets the target name and returns the updated params
5193	Do will execute RemoveEventListenerBreakpoint command on the context and return an error if any.
5194	Do method executes RemoveInstrumentationBreakpoint command using cdp library and returns any errors encountered
5195	Do will execute a command to remove an XHR breakpoint and return any errors encountered
5196	Do method executes a command to set a DOM breakpoint and returns an error if it fails.
5197	Do will execute a command to set an event listener breakpoint and return any errors encountered
5198	Do method executes a command to set instrumentation breakpoint and returns any errors encountered.
5199	Do will execute a command to set an XHR breakpoint and return any error encountered
5200	WithExecutor attaches an Executor to a context, returning a new context with the Executor stored as a value.
5201	Execute checks for an Executor in context and executes the method with params and result handling errors accordingly.
5202	AttributeValue returns the value of an attribute by name, or empty if not found
5203	xpath returns an XPath expression for the node, optionally stopping at document or ID nodes
5204	String method returns a human-readable representation of NodeType enum values or its integer value if unknown.
5205	Do method executes CommandSetSinkToUse command with given parameters in the specified context and returns any errors encountered.
5206	Do method executes StartTabMirroring command with params and returns error
5207	Do method executes a command to stop casting using StopCastingParams and returns any errors encountered
5208	Do will execute a command with parameters and return an error
5209	Do method on StopObservingParams executes a command with given context and parameters, returning any errors encountered.
5210	Do method executes a command with given parameters and returns an error.
5211	Do will execute a command to clear events and return any errors encountered
5212	WithObjectID sets the ObjectID field of CallFunctionOnParams and returns the updated params.
5213	WithArguments sets the arguments for CallFunctionOnParams and returns the updated instance.
5214	WithExecutionContextID sets the execution context ID on CallFunctionOnParams and returns the modified instance.
5215	WithObjectGroup sets the object group for the call parameters and returns the updated params pointer
5216	Do will execute a command to discard console entries and return any errors encountered
5217	WithContextID sets the context ID in EvaluateParams and returns the modified params
5218	WithOwnProperties sets OwnProperties field in GetPropertiesParams struct and returns updated pointer to it.
5219	WithGeneratePreview sets the GeneratePreview field and returns the modified params object
5220	WithExecutionContextID sets the execution context ID in GlobalLexicalScopeNamesParams and returns the updated struct pointer.
5221	WithObjectGroup updates the ObjectGroup field in QueryObjectsParams and returns the updated instance.
5222	Do method executes a command to release an object with parameters in the given context.
5223	Do method executes a command to release object group parameters.
5224	Do method executes a command to run if waiting for debugger with given context and returns an error.
5225	Do method executes a command to set custom object formatter enabled with parameters and returns an error
5226	Do method executes a command to set max call stack size for capturing.
5227	Do method on TerminateExecutionParams executes a command to terminate execution and returns any errors encountered.
5228	Do method executes a command to add a binding with parameters and returns an error
5229	Do method executes a command to remove a binding with potential errors.
5230	Do method executes a command with context and returns an error
5231	Do will execute a command to record a clock sync marker and return any errors encountered
5232	WithBufferUsageReportingInterval updates the reporting interval for buffer usage in StartParams and returns the updated instance.
5233	WithNoDisplayUpdates sets the NoDisplayUpdates field and returns the modified BeginFrameParams pointer.
5234	WithScreenshot sets the screenshot parameter in BeginFrameParams and returns the updated params.
5235	Do method executes a command to bring something to front in a context and returns any error encountered.
5236	WithClip sets the clip property of CaptureScreenshotParams and returns the updated object
5237	WithFromSurface sets the FromSurface field of CaptureScreenshotParams and returns the modified instance.
5238	WithWorldName sets the world name and returns the updated params
5239	WithGrantUniveralAccess sets GrantUniveralAccess field and returns updated params
5240	Do method executes a command to reset navigation history and returns any errors encountered
5241	WithPromptText sets the prompt text for JavaScript dialog parameters and returns the updated params object.
5242	Do will execute a JavaScript dialog command and return an error
5243	WithReferrer sets the referrer in NavigateParams and returns the updated instance.
5244	WithTransitionType sets the transition type in NavigateParams and returns the updated params
5245	WithFrameID updates the FrameID field of NavigateParams and returns the updated instance.
5246	Do method executes NavigateToHistoryEntry command using Context and returns an error.
5247	WithLandscape sets the Landscape field of PrintToPDFParams and returns the modified struct pointer.
5248	WithDisplayHeaderFooter sets DisplayHeaderFooter and returns updated PrintToPDFParams pointer
5249	WithPrintBackground updates the print background setting in PrintToPDFParams and returns the updated instance.
5250	WithScale sets the scale parameter and returns the updated PrintToPDFParams object
5251	WithPaperWidth updates PaperWidth and returns modified PrintToPDFParams
5252	WithPaperHeight sets the paper height for PrintToPDFParams and returns the updated parameters
5253	WithIgnoreInvalidPageRanges sets whether to ignore invalid page ranges in PrintToPDFParams and returns the updated params.
5254	WithFooterTemplate updates the footer template and returns the modified PrintToPDFParams instance.
5255	WithPreferCSSPageSize sets PreferCSSPageSize field and returns updated PrintToPDFParams instance
5256	WithScriptToEvaluateOnLoad sets the script to evaluate on load and returns the updated ReloadParams.
5257	Do method executes a command with parameters and returns an error
5258	Do method executes a command to remove script on new document load and returns an error if execution fails.
5259	Do executes a command to acknowledge a screencast frame and returns any errors.
5260	Do will execute the SetAdBlockingEnabled command on the target context and return any errors encountered
5261	Do method executes a command to bypass CSP parameters using a context and returns any errors encountered.
5262	setFontFamiliesParams will execute a command to set font families and return an error if the execution fails
5263	Do will execute a command to set font sizes and return any errors encountered
5264	Do method executes a command to set document content and returns any errors encountered.
5265	WithDownloadPath updates the download path and returns the modified parameters
5266	Do executes a command to set download behavior parameters and returns an error if it fails
5267	Do will execute a command to set lifecycle events enabled and return an error if it fails
5268	WithFormat sets the screencast format and returns the updated parameters
5269	WithMaxWidth sets the maximum width for screencast parameters and returns the updated parameters object.
5270	WithMaxHeight sets the maximum height for a screencast parameter and returns the updated parameters object.
5271	WithEveryNthFrame sets EveryNthFrame and returns modified StartScreencastParams
5272	Do method executes StartScreencast command using provided parameters and returns an error if any issue occurs.
5273	Do method on StopLoadingParams executes a command to stop loading and returns any errors encountered
5274	Do method executes a command to set web lifecycle state with parameters and returns an error.
5275	Do method executes a command to stop screencast and returns any errors encountered
5276	Do method executes a command using a context and returns an error.
5277	Do method executes a command to add compilation cache and returns an error if unsuccessful
5278	Do method executes a command to clear compilation cache with given context and returns an error.
5279	WithGroup updates the Group field of GenerateTestReportParams and returns the updated params
5280	Do will execute a command to wait for a debugger to connect and return any errors encountered during execution.
5281	Do method executes a command to activate a target with given parameters in a specific context and returns any encountered errors.
5282	ExposeDevToolsProtocolParams.WithBindingName sets the BindingName field and returns the modified params object.
5283	ExposeDevToolsProtocolParams.Do executes a command using the Chrome DevTools Protocol with the given context and returns any errors encountered.
5284	WithBrowserContextID sets the browser context ID and returns the updated params
5285	WithSessionID sets the session ID in DetachFromTargetParams and returns the updated params pointer
5286	Do will execute a command to detach from a target and return any errors encountered
5287	Do method executes a command to dispose a browser context with error handling
5288	WithSessionID sets the session ID and returns the updated parameters
5289	Do method executes SendMessageToTarget command with params and returns error
5290	Do method executes a command to set auto attach parameters in the given context and returns any errors encountered
5291	Do will execute a command to discover targets using parameters and return any errors encountered
5292	Do method executes a command to set remote locations with parameters and returns an error
5293	WithPatterns sets the patterns field of EnableParams and returns the updated instance
5294	WithHandleAuthRequests sets the HandleAuthRequests field of EnableParams and returns a pointer to the updated instance
5295	Do method executes a command with parameters and returns an error.
5296	WithBody sets the request body and returns the updated params
5297	WithResponsePhrase updates the ResponsePhrase field in FulfillRequestParams and returns a pointer to the updated instance.
5298	Do method executes a command with parameters and returns an error
5299	WithURL sets the URL field of ContinueRequestParams and returns a pointer to the updated struct
5300	WithMethod updates the Method field of ContinueRequestParams and returns the updated instance.
5301	WithPostData updates the PostData field of ContinueRequestParams and returns the updated instance.
5302	WithHeaders updates the headers in ContinueRequestParams and returns the updated instance.
5303	Do method executes a command using ContinueRequestParams and returns any errors encountered
5304	Do will execute a command with authentication parameters and return any errors encountered.
5305	Do will execute a command to continue to a location with parameters and return any errors encountered.
5306	WithIncludeCommandLineAPI sets IncludeCommandLineAPI field and returns updated params
5307	Do method on PauseParams executes a pause command and returns an error if unsuccessful
5308	Do method executes PauseOnAsyncCall command on ctx with params p and returns error.
5309	Do method executes a command to remove a breakpoint with parameters and returns an error.
5310	Do will execute a command to resume something in the context and return an error if it fails
5311	Do method executes a command to set async call stack depth and returns any errors encountered.
5312	Do method executes a command to set blackbox patterns with parameters in a given context.
5313	Do method executes a command with parameters and returns an error
5314	WithURL sets the URL field and returns the modified params object
5315	WithURLRegex sets URLRegex property and returns pointer to updated struct
5316	WithScriptHash sets the script hash and returns the updated parameters
5317	WithColumnNumber sets the column number for breakpoint parameters and returns the updated struct pointer
5318	WithCondition sets the breakpoint condition and returns the updated params
5319	Do method executes SetBreakpointsActive command on CDP with given parameters and returns error
5320	Do method executes a command to set pause on exceptions with parameters and returns an error.
5321	Do method executes a command with parameters and returns an error
5322	WithDryRun sets the DryRun field of SetScriptSourceParams and returns a pointer to the updated object
5323	Do method executes a command to skip all pauses with parameters and returns an error
5324	Do will execute a command to set variable value using provided parameters and context, returning any errors encountered.
5325	WithBreakOnAsyncCall sets whether to break on async calls and returns the modified StepIntoParams object
5326	Do method executes a step into command with given parameters and returns an error
5327	Do executes a step-out command using the Chrome DevTools Protocol.
5328	Do method executes a step-over command using the given context and returns any resulting error.
5329	Listen method triggers the ListenF callback with network and multiaddress if it's set
5330	ListenClose will call the callback function if it exists
5331	Connected calls the connected callback if it exists.
5332	DisconnectedF callback is invoked if it exists
5333	OpenedStream calls a callback if it exists when a stream is opened.
5334	ClosedStream invokes a callback if it's set.
5335	WithNoDial adds a no-dial reason to the context.
5336	GetNoDial extracts noDial flag and its reason from context.
5337	WithDialPeerTimeout sets a timeout value in the given context using a custom key.
5338	Open method opens a database connection and wraps it with additional functionality based on its interfaces.
5339	Prevpos returns the previous position in the ring buffer or -1/2 if out of bounds or no elements.
5340	Last returns the index of the last element in the buffer or -1 if empty
5341	DeleteMostRecentBytes removes the most recent `n` bytes from the buffer if possible.
5342	NewFloat64RingBuf creates a new ring buffer for float64 values with a specified maximum view items.
5343	TwoContig splits float64s into two contiguous slices based on buffer state.
5344	Earliest returns the earliest value in the ring buffer and a boolean indicating if it exists.
5345	Values returns all elements from a Float64RingBuf as a single slice
5346	NewAtomicFixedSizeRingBuf initializes a new ring buffer with fixed size and returns it.
5347	Reset method locks the buffer, resets its indices and readable flag, then unlocks it.
5348	NewPointerRingBuf creates a new ring buffer with a specified number of elements.
5349	TwoContig splits the buffer into two contiguous slices.
5350	NumPage returns the total number of pages in a PDF document.
5351	Page's Font method returns a Font struct referencing a resource key.
5352	Font's Width method returns the width of a character based on its Unicode code point.
5353	Font.Encoder determines text encoding based on font properties or returns a nopEncoder for unknown cases.
5354	Interpret processes a stream of values using a stack and executes operations based on keywords encountered.
5355	Open opens a file and returns a Reader along with an error if any.
5356	NewReader creates a new encrypted reader from an input reader and size.
5357	NewReaderEncrypted creates a Reader for encrypted PDF files, validating headers, positions, and encryption.
5358	Trailer method returns a Value containing reader, trailer pointer, and trailer data
5359	Kind method returns the type of Value as a ValueKind enumeration.
5360	newBuffer creates a buffer with the given reader and offset.
5361	Paginate method calculates pagination details based on records and requested page size.
5362	CascadeDelete will delete documents based on cascading configurations and IDs.
5363	cascadeDeleteWithConfig will perform cascading delete based on relation type and configuration, returning updated info or error.
5364	cascadeSaveWithConfig updates documents based on relation type and configuration, handling both one-to-one and many-to-many relationships, and returns change information or an error.
5365	MapFromCascadeProperties constructs a nested map from document properties using dot notation.
5366	Connect method establishes a MongoDB connection using the configuration details, handling errors and panics gracefully.
5367	lowerInitial converts the first character of a string to lowercase and returns the modified string.
5368	Find method retrieves data based on a query and returns a ResultSet object containing the results.
5369	RawInformationQuery sends an XML IQ request and returns the ID and any errors encountered
5370	NewClient creates a new Client instance using options, handles TLS configuration, and initializes it before returning.
5371	Close method closes the connection if it exists and returns an error if it fails
5372	startTLSIfRequired initiates TLS if required, handling server and client options, and returns updated stream features or an error.
5373	startStream initializes XML decoder, sends stream request, expects <stream>, decodes <features>, returns stream features or error
5374	IsEncrypted checks if client connection is encrypted using TLS.
5375	Recv processes incoming XMPP stanzas and returns corresponding structs or errors.
5376	Send method constructs and sends an XML message using client connection.
5377	SendOrg sends an organization name to the client connection and returns the number of bytes sent and an error if any.
5378	SendKeepAlive sends a keep-alive message to the client's connection and returns the number of bytes sent and any error encountered.
5379	SendHtml sends an HTML message over a connection using XML formatting and returns the number of bytes sent and any errors encountered.
5380	nextStart reads XML tokens until it finds a StartElement or returns an error
5381	JoinProtectedMUC sends a presence request to join a protected MUC chat room with optional history settings.
5382	LeaveMUC sends an unavailable presence message to a JID and returns the number of bytes sent and an error if the operation fails
5383	AttachBuffer adds a file attachment to a message with optional inline display.
5384	Attach file to message and return error
5385	Inline attaches a file to the message as an inline attachment.
5386	AddHeader appends a new header to the message and returns it
5387	Tolist method concatenates To, Cc, and Bcc fields of a Message struct into a single list of strings.
5388	Bytes method constructs an email message in bytes format with headers and attachments encoded in base64.
5389	Send will send an email using the given SMTP address, authentication, message from, to list, and byte data, returning an error if any step fails.
5390	GetHeader retrieves the header value by name from the envelope, decoding it if necessary.
5391	GetHeaderValues retrieves decoded header values by name from an envelope.
5392	SetHeader updates the header of an envelope with given name and values, encoding them in UTF-8 and handling multiple values.
5393	AddHeader adds a header to the Envelope with UTF-8 encoding and returns an error if the name is empty
5394	DeleteHeader removes a header from an envelope and returns an error if the header name is empty
5395	AddressList retrieves email addresses from a header, handling encoding and formatting errors.
5396	Clone method creates a deep copy of Envelope instance, returning a new instance with cloned root and other parts.
5397	ReadEnvelope reads MIME parts from a reader and returns an envelope or an error.
5398	EnvelopeFromPart processes email parts, constructs an envelope, handles multipart messages, binary bodies, and converts HTML to text, accumulating errors.
5399	parseTextOnlyBody processes a part's content based on its MIME type, converting it to UTF-8 or HTML as needed.
5400	parseMultiPartBody parses a multipart body and populates an Envelope with its text, HTML, attachments, inlines, and other parts.
5401	matchHTMLBodyPart checks if part content type is text/html and disposition is not attachment
5402	ensureCommaDelimitedAddresses normalizes whitespace and ensures addresses are comma-delimited within quotes
5403	MailBuilder's Date method sets the email's date and returns itself for chaining.
5404	MailBuilder's From method sets the sender's email address and returns the builder.
5405	MailBuilder's Subject method sets the email subject and returns the builder instance.
5406	To appends a recipient's email address to the MailBuilder object and returns it.
5407	MailBuilder.ToAddrs sets the recipient addresses and returns the builder.
5408	MailBuilder's CC method appends a new email address to the cc list and returns the builder instance.
5409	CCAddrs sets the carbon copy addresses in the mail builder and returns the updated builder
5410	MailBuilder's ReplyTo method sets the reply-to address and returns the builder.
5411	MailBuilder adds a header to its MIME header map and returns itself.
5412	AddAttachment method appends a new attachment to the mail builder and returns the updated builder
5413	MailBuilder's AddFileAttachment method adds a file attachment to an email, handling errors and setting appropriate content type.
5414	MailBuilder's AddInline method appends a new inline part to the email with specified content type, file name, and content ID.
5415	MailBuilder.Equals checks if two instances are deeply equal.
5416	Encode method serializes a Part object to writer, handling headers, content, and nested parts.
5417	encodeHeader encodes part header fields in sorted order using appropriate transfer encoding and writes them to a buffer.
5418	encodeContent encodes content based on transfer encoding and writes it to a buffer, handling errors during encoding or writing.
5419	selectTransferEncoding determines the best transfer encoding based on the content and whether to quote line breaks
5420	setParameterValue updates a map with a key-value pair if the value is non-empty
5421	NewBase64Cleaner creates a new Base64Cleaner instance with an empty errors slice and the given reader.
5422	decodeToUTF8Base64Header converts RFC2047 encoded headers to UTF-8 base64
5423	parseMediaType parses a content type string and returns the main type, parameters, and any invalid parameters encountered during parsing.
5424	fixMangledMediaType repairs media types by fixing placeholders, escaping special characters, and removing duplicates.
5425	detectMultipartMessage checks if the message has a multipart content type.
5426	detectBinaryBody checks if the root part has a binary body based on its headers.
5427	BreadthMatchFirst performs a breadth-first search on a part tree using a matcher to find a matching part.
5428	BreadthMatchAll performs a breadth-first search on a tree structure using a PartMatcher to find all matching nodes.
5429	DepthMatchFirst traverses the tree using depth-first search to find the first part that matches the given matcher.
5430	DepthMatchAll will recursively find all parts matching the given matcher and return them.
5431	ToASCII converts a string to its ASCII representation by normalizing and removing non-spacing marks.
5432	NewPart creates a new part with the given content type and initializes its header.
5433	AddChild method adds a child part to the parent part, handling recursion prevention and updating parent references.
5434	TextContent checks if part's content type is text or multipart.
5435	setupHeaders configures headers for a part, sets content type, and handles warnings or errors
5436	setupContentHeaders sets up content headers based on media parameters and header values, handling disposition, filename, charset, and file modification date.
5437	convertFromDetectedCharset attempts to detect the charset of the input reader, converting it if necessary based on detection or declaration, returning the converted reader or an error
5438	Clone creates a deep copy of Part with updated parent references.
5439	ReadParts reads parts from a reader, parses them based on content type, and returns a Part object along with any errors encountered.
5440	parseParts recursively parses MIME parts, handling headers and nested structures, accumulating content until the final boundary.
5441	UUID generates a random UUID string according to RFC 4122 standards.
5442	NewQPCleaner creates a new QPCleaner instance with a buffered reader wrapping the input reader.
5443	Error will return a formatted error message with severity level.
5444	addError appends an Error to Part's Errors slice with the given name, formatted detail, and a flag indicating it's new.
5445	addWarning appends a new warning to Part's Errors slice with the given name and formatted detail.
5446	Wrap will wrap a slice of strings into lines no longer than max characters, breaking at spaces or tabs.
5447	ConvertToUTF8String converts byte array to UTF-8 string based on given charset, returns error if unsupported charset
5448	JoinAddress combines mail addresses into a single comma-separated string
5449	Printf formats and writes to markdown using Fprintf
5450	EnvelopeToMarkdown converts an email envelope to markdown format and writes it to a writer, handling headers, addresses, body text, attachments, inlines, other parts, and errors.
5451	FormatPart recursively formats and prints email parts with indentation.
5452	newBoundaryReader initializes a boundary reader with specified boundary and returns it
5453	Read data from boundary reader into destination buffer, handling partial reads and boundaries.
5454	boundaryReader.Next reads lines until it finds a terminator or delimiter, handling edge cases like blank lines and EOF.
5455	Parse will extract and return an object from the buffer at the specified offset, handling any errors encountered during parsing.
5456	Assign assigns a value to a symbol based on its type and returns the byte representation or an error.
5457	NewRClient creates a new RClient instance with default authentication.
5458	NewRClientWithAuth creates a new R client with authentication details and tests the connection.
5459	Register maps an identifier to a generator function using CamelCase conversion.
5460	Fuzz function sets fields of a struct to random values if they are settable.
5461	findFakeFunctionFor returns a function based on input string or an empty function if no match found
5462	Apply applies a list of options to an Options object and returns an error if any option fails.
5463	ToOption converts Options to an Option function
5464	waitThenClose waits for context cancellation then closes channel safely.
5465	send method sends a QueryEvent to the event channel safely using a mutex lock and handles context cancellation.
5466	NewMovingAverage creates a moving average object based on input ages.
5467	Set updates the EWMA value and increments count if below warmup samples.
5468	calcKeys50 generates cryptographic keys using PBKDF2 algorithm with HMAC-SHA256, returning them in a slice.
5469	getKeys reads encryption parameters from buffer, checks cache, calculates keys if necessary, and stores them in cache.
5470	checkPassword validates password against hash and key, returns error on mismatch
5471	parseFileEncryptionRecord checks file encryption record version, parses flags, retrieves keys, validates IV, and processes encryption flags.
5472	parseEncryptionBlock reads encryption block and validates password if necessary
5473	newArchive50 creates a new archive reader with a buffer and password
5474	Read method from cipherBlockReader reads data into buffer or returns error
5475	ReadByte reads a single byte from cipherBlockReader, refilling buffer if needed.
5476	newCipherBlockReader initializes a reader for cipher block mode encryption/decryption.
5477	newAesDecryptReader creates a decrypting reader using AES encryption and CBC mode
5478	limitByteReader creates a limitedByteReader that restricts reading to 'n' bytes from the original reader 'r'.
5479	Mode returns the file mode based on the attributes and host OS.
5480	nextBlockInFile reads the next block from the file and updates the header, returning an error if the block is invalid or the archive ends unexpectedly
5481	next reads the next file block header, skipping blocks until the end of the current file. If no more blocks are available, it returns io.EOF.
5482	Read method reads data from a packed file, handling blocks and EOF errors.
5483	Read method reads data from Reader and checks file checksum before returning bytes read and error.
5484	Next reads the next file header and applies decryption, decompression, and checksumming as needed.
5485	NewReader creates a new reader from an input source and password, handling buffered reading and file block decryption.
5486	OpenReader opens a volume with name and password and returns a ReadCloser or an error.
5487	getV3Filter checks filter type, then parses and executes it or returns error
5488	init initializes decoder29 with reader, resets if needed, and handles block decoding setup
5489	readBlockHeader decodes block header and initializes decoder based on bit value, returns error if out of data
5490	readCodeLengthTable updates Huffman decoder based on bit reader input and modifies codeLength slice accordingly
5491	shrinkStates adjusts the state block size by moving or freeing memory
5492	expandStates expands states in a context, allocating new units if needed, and returns the updated state slice.
5493	pushByte updates subAllocator's states based on byte position and returns heap adjustment or zero.
5494	subAllocator's succByte calculates successor based on index and state array
5495	succContext returns a context for a given index or nil if invalid
5496	calcAes30Params computes AES-30 encryption parameters from password and salt, returning key and IV.
5497	parseDosTime converts a DOS timestamp to a Go time.Time object
5498	decodeName extracts a null-terminated string from a buffer, decodes it according to a custom encoding scheme, and returns the resulting UTF-8 string.
5499	readExtTimes updates file times based on flags and buffer data.
5500	readBlockHeader reads the header from an archive, decrypts it if necessary, validates the CRC, and returns the parsed block header or an error.
5501	newArchive15 initializes a fileBlockReader with a reader, password, and checksum.
5502	readFilter5Data reads bits from a reader to construct an integer, handling errors and masking.
5503	writeByte will store a byte in the buffer and update the write pointer with wrapping
5504	copyBytes will copy up to 'len' bytes from window buffer starting at 'off', wrapping around if necessary
5505	read method on window object reads data into buffer and returns number of bytes read
5506	queueFilter will add a filter block to the decoder's queue if it meets certain conditions and return an error otherwise
5507	processFilters processes filters on a decode reader, handling offsets, lengths, and errors
5508	fill method updates the reader's window and queues filter blocks, handling errors accordingly.
5509	Read will read data from a buffer or process filters before reading from a window, returning the number of bytes read and any errors encountered.
5510	readFull reads from reader until buffer is full or EOF is reached, returning an error if unexpected EOF occurs
5511	findSig reads a signature from a reader and returns its version or an error
5512	execute runs a series of commands on a virtual machine, updating the instruction pointer and executing each command's function.
5513	newVM creates a new virtual machine instance with memory initialization and sets the program counter.
5514	limitBitReader wraps a bitReader with a limited number of bits and an error.
5515	readUint32 reads a variable-length unsigned integer from rarBitReader and returns it along with any errors encountered
5516	step3 checks if a specific suffix exists in R2 and removes it if found
5517	Stem will reduce a word to its base form, considering special cases and stopwords.
5518	step6 removes accents from specific characters in a word based on their position and neighboring vowels.
5519	step5 checks for specific suffixes and removes the last rune if found, returning false
5520	step2a checks if a word ends with specific suffixes and removes them if they do, returning true if any suffix was removed
5521	step4 modifies a snowballword by removing specific endings and doubling "н".
5522	Stem processes a word based on its language, applying stemming rules and optionally removing stop words, returning the stemmed word or an error for unknown languages
5523	step1c checks if a word's last character is 'y' or 'Y', replaces it with 'i' if preceded by a non-vowel, and returns true if modified.
5524	step3 applies suffix rules to words using snowball algorithm logic.
5525	isStopWord checks if a given word is a stop word and returns true if it is
5526	capitalizeYUI capitalizes certain vowels in a given word based on their neighbors.
5527	step2 processes word suffixes to apply stemming rules and returns whether any changes were made.
5528	step3 checks if word ends with specific suffixes and removes them, adjusting for certain conditions.
5529	step0 removes possessive suffix from word if present
5530	VnvSuffix identifies the suffix in a word based on vowel transitions, returning the index where it ends or the total length if no suffix is found.
5531	step1 removes specific suffixes from a word based on conditions and returns whether a change was made.
5532	step2a checks for specific suffixes in RV and deletes them if preceded by a non-vowel.
5533	removePerfectiveGerundEnding removes the perfective gerund ending from a word if it follows certain rules
5534	removeAdjectivalEnding removes adjectives and certain participles from a word, returning true if any changes were made.
5535	step2b removes specific suffixes from a word based on certain conditions.
5536	step4 processes words according to specific rules, modifying them based on certain conditions and returning whether any changes were made.
5537	step5 checks if a word's ending needs modification based on specific conditions related to R1 and R2 ranges and replaces suffixes accordingly.
5538	Stem will return a stemmed version of the input word, optionally removing stopwords
5539	Stem will process a word by converting it to lowercase, removing whitespace, and applying stemming rules unless it's a stop word or too short.
5540	isStopWord checks if a word is a common stopword and returns true if it is
5541	isStopWord checks if a given word is a common Swedish stop word.
5542	New creates a new SnowballWord instance from a given string, initializing its rune slice and R1start, R2start, RVstart to the length of the string.
5543	RemoveLastNRunes removes the last n runes from SnowballWord RS and resets R1R2
5544	resetR1R2 adjusts R1, R2, RV starts to match RS length
5545	slice will return a substring of RS within specified bounds, adjusting for out-of-bounds indices
5546	FitsInR1 checks if x fits within R1 range.
5547	FitsInR2 checks if word fits within R2 range.
5548	FitsInRV checks if x fits within RVstart bounds.
5549	FirstPrefix checks prefixes against RS and returns the first matching one along with its runes.
5550	HasSuffixRunes checks if the word has a given suffix at any position.
5551	FirstSuffixIfIn checks if any suffix is present within specified bounds and returns it along with runes, or empty if none found.
5552	RemoveFirstSuffixIfIn removes the first matching suffix from a word starting at startPos and returns it along with the removed runes.
5553	RemoveFirstSuffix removes the first matching suffix from SnowballWord and returns it along with its runes.
5554	FirstSuffix returns the first matching suffix from a list within a word's range.
5555	preprocess cleans word by normalizing apostrophes, trimming left ones, capitalizing misbehaving Y's, and finding R1 & R2 regions
5556	step0 processes a word to remove specific suffixes based on certain conditions and returns true if any changes were made.
5557	step1b processes word suffixes and applies transformations based on specific rules, updating the word's runic representation and suffix tracking accordingly.
5558	step2b checks for specific suffixes in RV and deletes them based on conditions, returning true if any deletion occurs.
5559	capitalizeYs capitalizes 'y's in a word based on certain conditions and returns the number of capitalizations made.
5560	uncapitalizeYs converts all 'Y's to 'y's in a given SnowballWord object
5561	stemSpecialWord reduces words to their stems based on predefined cases.
5562	isShortWord checks if a word is short based on R1 and ending syllable
5563	step1a processes word suffixes and modifies them based on specific rules, returning true if any modifications were made.
5564	Set stores a key-value pair in the current goroutine's data map
5565	Get retrieves a value from a map using a key and goroutine ID, returning nil if the key does not exist.
5566	Cleanup removes data associated with the current goroutine ID
5567	getValues retrieves values associated with the current goroutine ID from a shared data structure.
5568	linkGRs associates current goroutine ID with parent data safely using a lock.
5569	unlinkGRs removes the current goroutine ID from the data map safely
5570	AppUri constructs and returns a URI using the provided app name, path, and configuration.
5571	CurlAppWithTimeout uses a configuration to execute an application curl command with a specified timeout and arguments, returning the result as a string.
5572	CurlApp uses AppCurler to execute a curl command with given configuration, application name, path, and arguments, returning the result or an empty string on failure.
5573	CurlAppRoot uses CurlConfig to fetch an application's root URL.
5574	GetTags extracts tags from a string based on a prefix and optional terminators, returning a slice of Tag structs.
5575	GetTagsAsUniqueStrings extracts unique strings from input based on prefix and terminator, returning them as a slice.
5576	isTerminator checks if a rune matches any given terminators or is whitespace/non-printable
5577	uniquify removes duplicates from a list of strings, returning a new list without them
5578	New creates a middleware to apply location settings to Gin context
5579	Get retrieves a URL from Gin context or returns nil if not found or invalid type.
5580	GenerateRSAKeyPair creates RSA key pair and returns private and public keys along with error if any
5581	Verify checks RSA public key against data and signature returning verification result and error if any.
5582	Encrypts input byte slice using RSA PKCS1v15 encryption.
5583	Sign method generates a signature using RSA private key for given message
5584	GetPublic returns the public key from RSA private key or creates it if not already set.
5585	Decrypt will decrypt data using RSA PKCS1v15 padding and return the original plaintext or an error
5586	UnmarshalRsaPrivateKey parses PKCS1 RSA private key and returns it or an error if invalid or too small.
5587	GenerateKeyPair will generate a key pair using the specified type and bit size, returning private and public keys along with any errors encountered.
5588	GenerateKeyPairWithReader generates key pairs based on the specified type and source reader, returning private and public keys or an error for invalid types.
5589	GenerateEKeyPair creates ECDSA key pair and returns public key, shared key generator, and error.
5590	UnmarshalPublicKey converts protobuf data to a PublicKey object using appropriate unmarshaller or returns an error if the key type is invalid.
5591	MarshalPublicKey converts a public key to a protobuf message and then marshals it to bytes.
5592	UnmarshalPrivateKey converts byte data to a private key using protocol buffers and a specific unmarshaller based on the key type.
5593	MarshalPrivateKey converts a private key to a protobuf message and returns the marshaled byte slice or an error.
5594	KeyEqual checks if two keys are equal by comparing their byte representations and errors.
5595	GenerateECDSAKeyPair creates a new ECDSA key pair using the specified curve and source reader.
5596	GenerateECDSAKeyPairWithCurve generates an ECDSA key pair using the specified curve and source reader, returning private and public keys along with any errors encountered.
5597	ECDSAKeyPairFromKey generates private and public keys from an ecdsa private key object
5598	UnmarshalECDSAPrivateKey converts DER-encoded private key data to ECDSA private key structure.
5599	UnmarshalECDSAPublicKey parses data to extract ECDSA public key and returns it along with any parsing errors
5600	Equals checks if two ECDSA private keys are equal by comparing their D values.
5601	Sign will generate a signature for data using ECDSA and return it or an error
5602	Equals checks if two ECDSA public keys are equal by comparing their X and Y coordinates.
5603	Verify checks ECDSA signature validity for given data and returns boolean result and error.
5604	GenerateSecp256k1Key generates secp256k1 private and public keys from a source reader, returning them along with any errors encountered.
5605	UnmarshalSecp256k1PrivateKey converts byte data to a private key or returns an error if invalid.
5606	UnmarshalSecp256k1PublicKey parses byte data to Secp256k1 public key or returns error
5607	Equals checks if two Secp256k1 private keys are equal by comparing their D values.
5608	Sign will generate a signature for given data using private key and return serialized signature or error
5609	Equals checks if two Secp256k1 public keys are equal.
5610	Verify checks if the signature matches the data using the public key.
5611	Raw method returns a copy of the Ed25519 private key as a byte slice along with any errors encountered during the process.
5612	Sign will generate a signature for a given message using Ed25519 private key and return it along with an error
5613	Equals checks if two Ed25519 public keys are equal.
5614	Verify checks Ed25519 signature validity and returns bool and error.
5615	UnmarshalEd25519PublicKey will parse 32-byte data into an Ed25519 public key or return an error if the data size is incorrect
5616	UnmarshalEd25519PrivateKey will convert byte data to Ed25519 private key and remove redundant public key if present. It returns an error if data size is incorrect.
5617	EditScriptForStrings generates an edit script for transforming source to target using specified options.
5618	EditScriptForMatrix generates an edit script for a given matrix using specified options through backtracking.
5619	WriteMatrix prints a matrix representation of two rune slices to a writer.
5620	New creates a new Lockfile instance from an absolute path, returning an error if the path is not absolute.
5621	GetOwner retrieves the owner process from a lockfile, checking for staleness and running status.
5622	TryLock attempts to acquire a lockfile, handling existing locks and cleaning up stale ones before retrying.
5623	Unlock method removes lockfile if owned by current process, otherwise returns an error.
5624	NewBase initializes a new Base instance with default values and applies optional configurations.
5625	SetFallbackLogger sets a new fallback logger or shuts down the current one if it's initialized.
5626	AddLogger will add a logger to the Base object, initializing or shutting down as needed, and setting hooks if applicable.
5627	LogWithTime logs messages with timestamps and attributes, handling initialization and hooks.
5628	Log method logs a message at a specified level with attributes and arguments.
5629	Warnm delegates to Warningm with provided attributes, message, and arguments, returning any resulting error.
5630	NewTemplateWithFuncMap creates a new template with a given function map and log levels.
5631	Execute template with message and optional colorization, returning rendered string or error
5632	NewTemplateMsg creates a new template message with the given attributes and returns it
5633	NewLogAdapterFor creates a new log adapter with optional attributes.
5634	SetAttr updates log adapter's attributes with given key-value pair
5635	LogWithTime logs a message at a specified level with timestamp and attributes, respecting log level filtering.
5636	LogAdapter's Log method checks log level and merges attributes before delegating to base logger.
5637	Dbgm delegates to Debugm with the same arguments and returns its result.
5638	NewAttrsFromMap creates a new Attrs object from a map of attributes.
5639	NewAttrsFromAttrs creates a new Attrs instance by merging multiple input Attrs instances.
5640	MergeAttrs combines attributes from another Attrs instance into the current instance, updating existing attributes and adding new ones.
5641	SetAttr sets an attribute key to its value and returns the updated Attrs object. If the value is a function, it stores the function's type instead.
5642	GetAttr retrieves an attribute using a key with a lock to ensure thread safety.
5643	RemoveAttr removes an attribute from Attrs using a key and ensures thread safety with a lock.
5644	`Attrs returns a copy of the attributes map while holding the lock.`
5645	Debugm logs a message using the current default logger with attributes.
5646	Infom logs a message with attributes and arguments using the current default logger.
5647	Warningm delegates message formatting to curDefault's Warningm method.
5648	Errm calls Errorm with the given message and arguments and returns the result.
5649	Errorm will delegate error creation to curDefault with message and attributes.
5650	Fatalm logs a fatal message using default logger with attributes and returns an error.
5651	Dief logs an error message and exits with the given exit code.
5652	Diem logs a message with attributes at a given exit code.
5653	ToLogLevel converts a log level string to its corresponding LogLevel enum or returns an error if unknown.
5654	CallErr executes a function returning an error asynchronously and returns the result.
5655	New initializes a StackdriverHook with options, applying them and checking required settings before returning the hook or an error.
5656	Fire sends log entry using agent or API based on availability.
5657	Levels sets logging levels for a StackdriverHook.
5658	ProjectID sets the project ID option for StackdriverHook
5659	EntriesService sets up logging entries service for StackdriverHook.
5660	LoggingService configures StackdriverHook with logging entries from a given service.
5661	ErrorService sets up error reporting service for StackdriverHook.
5662	HTTPClient configures StackdriverHook with custom logging and error reporting services using provided http.Client.
5663	MonitoredResource sets the monitored resource for a StackdriverHook
5664	ErrorReportingLogName sets the log name for error reporting in StackdriverHook.
5665	Labels sets hook's labels option
5666	PartialSuccess sets partial success option on StackdriverHook and returns an error if unsuccessful
5667	GoogleComputeCredentials sets up authentication for Stackdriver using a service account's credentials and required scopes.
5668	NewEncoder initializes an encoder using a writer and codec's emitter.
5669	NewDecoder initializes a decoder using a parser created from a reader.
5670	NewStreamEncoder initializes a new stream encoder using the given writer.
5671	NewStreamDecoder creates a new decoder using a parser from the reader.
5672	Register method adds a codec to the registry for a given MIME type
5673	Registry.Unregister removes a MIME type from its codecs map while ensuring thread safety through mutex locking and unlocking.
5674	Lookup checks if a codec exists for a given mimetype and returns it along with a boolean indicating success.
5675	Codecs returns a copy of the codecs map from the registry.
5676	Type method extracts the uppercase prefix from an error message or returns an empty string if no uppercase prefix exists
5677	Install registers an adapter for a given type, ensuring both encode and decode functions are non-nil, then updates the adapter store and clears the struct cache.
5678	AdapterOf retrieves an adapter based on type and checks its existence.
5679	AppendDuration appends a human-readable duration to a byte slice and returns the updated slice
5680	fmtInt converts a uint64 to a decimal string and returns the number of bytes written.
5681	NewDecoder creates a new decoder using the given reader and parser.
5682	NewStreamDecoder creates a new stream decoder using the provided reader and parser.
5683	Unmarshal converts byte slice to struct using a pool of decoders.
5684	String method returns type name as string
5685	zeroValueOf returns the zero value for a given type, caching results to improve performance.
5686	NewValueParser initializes a new ValueParser with the given value on its stack.
5687	ParseTag extracts tag details like name and options from a string and returns them as a struct.
5688	NewEncoder creates an object encoder for writing to a writer.
5689	NewStreamEncoder creates a new stream encoder using the provided writer.
5690	NewPrettyEncoder creates a new pretty encoder using the given writer.
5691	NewPrettyStreamEncoder creates a stream encoder with a pretty emitter for writing to a writer.
5692	Marshal converts an object to JSON format and returns the byte slice and an error if any.
5693	NewEncoder creates a new encoder instance with the given emitter, panicking if the emitter is nil.
5694	EncodeArray encodes an array using a callback function, emitting array elements and handling errors.
5695	EncodeMap encodes a map using a callback function, handling keys and errors during iteration.
5696	NewStreamEncoder creates a new StreamEncoder instance with the given Emitter, panicking if the Emitter is nil.
5697	Open method sets up stream encoder with max size and emits array begin if not oneshot, returns error if already closed or previously opened.
5698	Close method ensures stream encoder is closed properly, emitting array end if not oneshot.
5699	Encode serializes a value using the StreamEncoder's emitter and handles errors and limits.
5700	newStructType creates a struct type from reflection data, skipping anonymous and non-exported fields, and caches the result.
5701	lookup retrieves or generates a struct type from the cache with thread-safe access
5702	clear will remove all entries from the cache store while holding the mutex lock
5703	CheckUint64Bounds ensures a uint64 value does not exceed a specified maximum and returns an error if it does.
5704	CheckInt64Bounds ensures int64 value is within specified bounds and returns an error if it exceeds them.
5705	NewDecoder creates a new Decoder instance with the given Parser, panicking if the Parser is nil.
5706	Decode will decode JSON data into a Go value and return an error if decoding fails
5707	DecodeArray decodes a JSON array using a callback function, handling errors during parsing and decoding.
5708	DecodeMap will parse and decode a map using a given function and return an error if parsing fails.
5709	NewStreamDecoder creates a new decoder using a given parser, panicking if the parser is nil.
5710	Len returns the number of unread bytes or zero if an error occurred.
5711	Err method returns decoder's error or nil if no error has occurred
5712	Decode reads data from a stream into a Go value, handling errors and updating decoder state accordingly.
5713	Encoder parses type from decoder and creates encoder accordingly.
5714	init sets default logging flags based on environment variable LOGFLAGS
5715	LevelFromString converts a string to a corresponding log level and returns it along with a boolean indicating success.
5716	NewBackend creates a new backend instance with given writer and options.
5717	callsite returns caller's file and line number with optional shortening
5718	print logs messages with timestamp, level, tag, and arguments to backend writer
5719	Logger method returns a new logger instance with specified subsystem tag and backend.
5720	Trace logs message if level is trace or lower
5721	Tracef logs a trace message if the log level allows it
5722	`Debug logs a message at debug level if enabled.`
5723	Debugf logs debug messages if the log level is set to debug or lower.
5724	Info logs messages if level is Info or higher
5725	`Infof logs an info message if the log level allows it.`
5726	Warn logs a warning message if the current level allows it
5727	Warnf logs a warning message if the current log level allows it.
5728	slog's Error method logs error messages if the current level allows it
5729	slog's Errorf logs an error message if the current level is at or above Error.
5730	`Critical logs messages if level is critical or lower.`
5731	`Criticalf logs critical messages if the level allows.`
5732	Level method returns the current logging level of slog instance
5733	SetLevel updates the log level atomically.
5734	Concat combines two permissions, updating the role and appending allowed/denied roles accordingly.
5735	HasPermission checks if user has specified permission based on roles and mode
5736	ConcatPermissioner combines multiple Permissioner instances into a single instance, filtering out any nil values.
5737	permissioners.HasPermission checks if any role has the specified permission mode.
5738	Register will add or overwrite a checker for a role based on its name.
5739	NewPermission creates a new Permission instance linked to the Role with empty allowed and denied roles maps.
5740	Get method retrieves checker from role definitions based on name.
5741	isPtrFromHeap checks if address a points to a heap object using process's heap info and pointer size
5742	IsPtr checks if an address points to a valid pointer in the process's memory or heap.
5743	FindObject returns an object and its size at a given address, checking heap info and marking.
5744	ForEachObject applies a function to each object in the process's pages, stopping if the function returns false.
5745	ForEachRoot applies a function to each root, stopping if the function returns false
5746	Addr converts an object to a core address
5747	Size method returns heap size of given object using process's findHeapInfo function.
5748	Type method returns object's type and reference count
5749	ForEachRootPtr applies a function to each root pointer recursively.
5750	edges1 traverses object graph recursively applying a callback to each edge, returning false if any callback returns false.
5751	setHeapPtr updates the heap pointer based on address and processor architecture
5752	findHeapInfo retrieves heap info from address, returns pointer to heapInfo or nil if not found
5753	allocHeapInfo calculates heap info for a given address, creating entries if necessary
5754	runtimeName returns a string representation of a Go type based on its DWARF type information
5755	readRuntimeConstants populates a map with runtime constant values from both hardcoded and DWARF records.
5756	add will append a new function entry to the table
5757	sort sorts entries in funcTab based on their min values
5758	find searches for a function at a given program counter and returns it if found
5759	read reads variable integers from memory, updates pc values based on architecture, and stores them in entries.
5760	readVarint reads a variable-length integer from memory and returns its value and size
5761	useLine constructs a usage line for a Cobra command, incorporating parent commands, flags, and disabling flag inclusion options.
5762	commandPath recursively builds the full path of a Cobra command
5763	readCore retrieves or creates core processes and handles errors
5764	typeName returns a type name based on object properties and size
5765	fieldName constructs a field name based on process, object, and offset, handling singletons and repeated sections.
5766	typeFieldName returns a field name based on offset and type kind
5767	FindFunc searches process's funcTab for function at given address and returns it.
5768	Core processes a core.Process object, initializes various fields, reads dependencies, and returns a Process object along with any errors encountered.
5769	Address method returns the address of a pointer region or panics if it's not a pointer.
5770	region.Int returns the integer value at the address if it's an integer type, otherwise it panics.
5771	Uintptr returns the uintptr value from the region if it matches the type and size requirements, otherwise it panics.
5772	region.Cast will transform a region's type based on the provided string and return the updated region
5773	Deref will return a new region pointing to the dereferenced value or panic if the current region is not a pointer.
5774	Uint64 reads an 8-byte unsigned integer from the region's process memory.
5775	region's Uint32 method returns a uint32 value from the process memory or panics if the type is incorrect.
5776	region.Int32 returns an int32 value from a process at a specific address, panicking if the type is incorrect.
5777	region's Uint16 method returns a 16-bit unsigned integer or panics if the type is incorrect
5778	region.Uint8 returns a uint8 value from a buffer, panicking if the type is incorrect
5779	region's String method returns its byte content as a string, panicking if not a string type.
5780	region.SlicePtr returns a new region representing a pointer to the original slice region.
5781	region.SliceLen returns the length of a slice or panics if the type is not a slice.
5782	region.Field retrieves a sub-region based on a field name, updating offset and type accordingly or panicking if the field doesn't exist.
5783	ReadUint8 reads an 8-bit unsigned integer from a specified address in a process's memory mapping, panicking if the address is not mapped.
5784	ReadUint16 reads a 16-bit unsigned integer from the process's memory at the given address, handling endianness and ensuring sufficient data is available.
5785	ReadUint32 reads a 32-bit unsigned integer from a specified address in a process's memory mapping, handling endianness and potential buffer resizing.
5786	ReadUint64 reads an unsigned 64-bit integer from a specified address in the process's memory, handling endianness and mapping errors.
5787	ReadInt8 converts uint8 to int8 from memory address
5788	ReadInt16 reads a 2-byte unsigned integer at the specified address and converts it to a signed 16-bit integer.
5789	ReadInt32 converts uint32 to int32 from memory address.
5790	ReadInt64 converts uint64 to int64 at given address
5791	ReadUintptr reads a uintptr from memory at the specified address based on pointer size.
5792	ReadPtr reads a pointer from memory at address a and returns it as an Address.
5793	ReadCString reads a null-terminated C string from memory and returns it as a Go string.
5794	Source returns file name and offset from Mapping object
5795	findMapping retrieves a mapping from a nested page table based on the address
5796	Max will return the greater address between two addresses
5797	Min method returns the smaller of two addresses
5798	Align will adjust the address to the nearest multiple of x
5799	initialize method constructs a spanning tree for objects, assigns vertex numbers, and manages work items for traversal.
5800	calculate performs an iterative algorithm to determine the immediate dominator tree of a directed graph using semidominance and path compression techniques.
5801	eval returns the label of a node after compressing its path, or the node itself if it has no ancestor
5802	compress will update labels and ancestors for nodes in a tree structure
5803	link updates the ancestor map of ltDom with the given values.
5804	reverse will reverse the dominator tree by swapping in-edges with out-edges and updating indices accordingly
5805	calcSize calculates the size of nodes using dominator tree and DFS traversal
5806	objField extracts field name from object based on offset and type information.
5807	Readable checks if a mapping exists for the given address.
5808	ReadableN checks if 'n' bytes starting at address 'a' can be read based on memory mappings.
5809	splitMappingsAt splits memory mappings at a given address
5810	DynamicType returns the dynamic type of an interface or panics if called on a non-interface.
5811	Create initializes a Btrfs filesystem image and mounts it at a specified path.
5812	Resolve will parse a URL to extract its IP address, returning an error if invalid.
5813	Equal checks if two Token instances are equal based on their type and value.
5814	newDefaultClassifier initializes a tokenClassifier with predefined rune classes
5815	Lexer's Next method returns the next word token or skips comments, returning an error for unknown token types.
5816	NewTokenizer initializes a tokenizer with input reader and default classifier.
5817	Split will return a slice of substrings and an error if any occurs during parsing
5818	Between extracts content between specified left and right delimiters in a string.
5819	BetweenF creates a closure that trims a string using specified left and right delimiters.
5820	Camelize converts string to camel case by replacing matches and converting to uppercase.
5821	Capitalize converts the first character to uppercase and the rest to lowercase
5822	CharAt returns a single character from a string at a specified index or an empty string if the index is out of bounds.
5823	CharAtF returns a function that retrieves the character at a specified index from a given string.
5824	ChompLeft removes a specified prefix from a string if it exists.
5825	ChompLeftF returns a function that removes a specified prefix from the left side of a given string
5826	ChompRight removes the specified suffix from the end of the string if present
5827	ChompRightF returns a function that removes the specified suffix from a given string
5828	ClassifyF returns a closure that classifies input strings using the Classify function
5829	Clean removes extra spaces from both ends of a string.
5830	Dasherize removes spaces, replaces underscores and capital letters with hyphens, and converts to lowercase.
5831	EscapeHTML will escape HTML special characters in a given string, using html.EscapeString for the actual escaping.
5832	DecodeHTMLEntities will decode HTML entities in the input string and print a warning if verbose mode is enabled
5833	EnsurePrefixF returns a closure that ensures a given string starts with a specified prefix.
5834	EnsureSuffixF returns a function that ensures a given string has a specified suffix.
5835	Humanize converts a string to a human-readable format by replacing underscores with spaces, removing trailing "_id", and capitalizing the first letter.
5836	Iif returns truthy if condition is true, otherwise it returns falsey.
5837	IndexOf returns the position of the first occurrence of needle in s starting from start, or -1 if not found
5838	IsLower checks if a string contains only lowercase alphabetic characters.
5839	IsUpper checks if a string contains only uppercase letters.
5840	Left returns the first n characters of a string, or the last n characters if n is negative.
5841	LeftF returns a closure that trims 'n' characters from the left of a given string.
5842	Letters converts a string to a slice of its individual characters.
5843	Lines converts a string to a slice of lines, replacing Windows-style newlines with Unix-style.
5844	Map applies a transformation to each element in an array and returns a new array with the transformed elements.
5845	Match checks if a string matches a given regular expression pattern and returns a boolean result.
5846	tasks defines project tasks including install, lint, readme, and test
5847	Pad will add padding to a string until it reaches the desired length
5848	PadF creates a new function that pads input strings with character c to length n
5849	PadLeft will add padding to the left of a string until it reaches a specified length
5850	PadLeftF creates a closure that pads strings to the left with a specified character and count.
5851	PadRightF returns a function that pads a string to the right with a specified character and number of times.
5852	Pipe applies a series of functions to a string sequentially.
5853	QuoteItems will quote each item in the array using strconv.Quote
5854	ReplaceF returns a function that replaces up to n occurrences of old with new in a given string.
5855	ReplacePatternF returns a closure that replaces occurrences of a pattern with a replacement string in a given input string.
5856	Reverse will return the reversed version of the input string
5857	RightF returns a function that pads a string on the right with spaces to a specified length.
5858	Slice extracts a substring from a given string based on start and end indices. If end is negative, it calculates the index from the end of the string.
5859	SliceF creates a closure that slices a string from start to end.
5860	SliceContains checks if a slice contains a specific value and returns a boolean result.
5861	SliceIndexOf returns index of val in slice or -1 if not found
5862	Slugify converts a string to a URL-friendly format by removing special characters, converting to lowercase, and replacing spaces with hyphens.
5863	StripPunctuation removes punctuation from a string and replaces whitespace with a single space.
5864	StripTags removes specified HTML tags from a string, returning the cleaned string.
5865	Substr extracts a substring from a given string based on the specified index and length, handling edge cases like invalid indices or negative lengths.
5866	SubstrF creates a closure that returns a substring based on given index and length.
5867	TemplateWithDelimiters replaces placeholders in a string with corresponding values from a map using custom delimiters.
5868	ToArgv converts a string into a list of arguments, handling quotes and escapes appropriately.
5869	ToBool converts a string to a boolean value based on certain conditions.
5870	ToBoolOr converts a string to a boolean or returns a default value if conversion fails.
5871	ToIntOr attempts to convert a string to an integer, returning a default value if conversion fails.
5872	ToFloat32Or converts a string to a float32 or returns a default value if parsing fails
5873	ToFloat64Or converts a string to a float64 or returns a default value if conversion fails
5874	UnescapeHTML will replace HTML entities with their corresponding characters, logging a warning if verbose mode is enabled.
5875	WrapHTML wraps a given string with HTML tags and escapes attribute quotes.
5876	WrapHTMLF creates a closure that wraps input string in HTML tags with given attributes.
5877	ReapChildren manages child process reaping using signals, locks, and channels, handling errors and notifying on completion.
5878	SdNotify sends a state update to a systemd socket and returns an error if the connection fails.
5879	NewAuthenticator initializes an Authenticator with given store and policy, setting up token and client models.
5880	Endpoint processes HTTP requests, handles authorization, token, and revocation using a state object and a tracer.
5881	Unique removes duplicate bson.ObjectIds from a slice and returns the unique list.
5882	Contains checks if a list of bson.ObjectIds includes a specific id.
5883	Includes checks if all elements of subset are in all.
5884	Require checks if specified flags are set on a model.
5885	Enqueue adds a new job to the store with optional data and delay, returning the created job or an error.
5886	A constructs and returns an Authorizer with a given name, Matcher, and Handler.
5887	Run initializes an Authorizer with specified Enforcers.
5888	And combines two Authorizers, returning a new Authorizer that applies both matchers and handlers sequentially.
5889	Or combines two Authorizers, returning true or the first non-nil Enforcers from either.
5890	Enqueue adds a new job to the queue and returns it along with any errors.
5891	Callback creates a new callback with specified parameters and enqueues a job based on conditions.
5892	NewWatcher initializes a new Watcher with an empty streams map and a new manager.
5893	Watcher's Add method adds a stream, initializes its model, checks for existing streams, saves it, opens it, handles events, and broadcasts them.
5894	Watcher's Action method returns a fire.Action with GET method and a callback to handle connections.
5895	Operation.Write checks if operation is create, update, or delete.
5896	Operation.String returns a string representation of the operation type.
5897	Query combines selector and filters into a MongoDB query using $and operator.
5898	Respond encodes and sends a JSON response using the Context's ResponseWriter, returning any errors encountered during encoding or writing.
5899	EnsureApplication checks if an application exists, creates it if not, and returns its key or an error.
5900	EnsureFirstUser checks if a user exists in the store, creates it if not, and returns an error if validation fails.
5901	Callback constructs and returns a fire.Callback based on Strategy's actions and operations.
5902	OpenStream creates a Stream object, sets its properties, and opens it asynchronously.
5903	Close will lock the mutex, set the closed flag, and close any active change stream.
5904	AddTokenIndexes adds token indexes to an indexer with optional expiration.
5905	GetTokenData retrieves token details: type, scope, expiration, app ID, user ID.
5906	SetTokenData updates token properties with given values
5907	ValidSecret checks if a secret matches its hashed counterpart using bcrypt.
5908	HashSecret will generate a bcrypt hash from the secret and store it, clearing the original secret on success or returning an error.
5909	ValidPassword checks if the given password matches the user's hashed password using bcrypt.
5910	HashPassword will hash user's password and store it, clearing the original password on success or returning an error.
5911	MustCreateStore creates a store from a URI and panics if an error occurs.
5912	CreateStore establishes a database session from a URI and returns a Store object or an error.
5913	C method returns MongoDB collection for given model.
5914	NewAssetServer creates a new HTTP handler for serving files from a specified directory with a given prefix.
5915	DefaultGrantStrategy checks if scope is empty and returns an error if not
5916	DefaultTokenData returns user ID from resource owner or nil
5917	GenerateToken creates a JWT token from policy details and returns it as a string along with any errors encountered during signing.
5918	ParseToken validates JWT token claims and returns them or an error if invalid.
5919	E constructs an enforcer using name, matcher, and handler.
5920	MustGet retrieves a field's value by name from a model struct, panicking if the field doesn't exist.
5921	MustSet will update a field's value on a model struct or panic if the field doesn't exist
5922	NewGroup initializes and returns a new Group instance with empty controllers and actions maps.
5923	Add adds controllers to a group, panicking if a controller with the same name already exists.
5924	Endpoint processes HTTP requests, handles routing, and invokes appropriate controllers or actions based on the request path and method, managing errors and tracing throughout.
5925	Add model to indexer with optional uniqueness, expiration, and specific fields
5926	AddRaw appends a raw index to the indexer's list.
5927	Ensure method ensures all indexes in the Indexer are present in the Store.
5928	NewCatalog creates a new catalog with given models and returns it
5929	Add models to catalog, panic if duplicate name found
5930	All will return all models from the catalog.
5931	Visualize generates a graph representation of the catalog's models and their relationships, using the specified title as the graph label.
5932	NewErrorReporter returns a function to report errors to a writer.
5933	EnsureIndexes verifies and sets model indexes in the store.
5934	E formats an error message using a format string and arguments, then returns it wrapped in a safe error.
5935	Compose combines multiple middleware functions into a single http.Handler.
5936	Includes checks if all items in subset are contained within all.
5937	Intersect finds common elements between two lists and returns them.
5938	E creates a new Error instance with the given reason and retry flag
5939	RootTracer wraps an HTTP handler to add tracing functionality, replacing IDs in URLs and tagging the trace with request details.
5940	NewTracerFromRequest creates a new tracer from an HTTP request and operation name.
5941	NewTracer creates a new tracer instance with a root span and an empty spans slice.
5942	Push method adds a new span to the tracer's stack using the current or root context.
5943	Last will return the last span or the root if no spans exist
5944	Tracer's Tag method sets a tag on its last item.
5945	Tracer's Log method logs a key-value pair using the last tracer's LogKV method.
5946	Context will add tracer's last span to given context
5947	Pop removes the last span from the tracer's stack and finishes it.
5948	Finish will stop all spans in the tracer, optionally finishing the root span too
5949	NewPool initializes and returns a new Pool instance.
5950	Add task to pool, check if exists, save task and queue.
5951	Run method starts all queues and tasks in a pool
5952	NewBodyLimiter creates a BodyLimiter struct with a limited reader.
5953	LimitBody sets or resets a request body size limit using BodyLimiter.
5954	C creates a new Callback with a given name, Matcher, and Handler, panicking if either Matcher or Handler is nil. The Handler wraps the original handler to add tracing functionality before and after its execution.
5955	Only returns a matcher that allows operations listed in ops.
5956	BasicAuthorizer checks HTTP request credentials against provided map and returns a callback or access denied error.
5957	ModelValidator returns a callback to validate models, checking if they implement ValidatableModel and then calling Validate on them.
5958	TimestampValidator ensures correct timestamp values on create and update operations.
5959	RelationshipValidator validates model relationships, returning callbacks for validation logic.
5960	Inspect will run multiple workers to process object groups and collect secrets using rules and exceptions.
5961	NewRule creates a new rule with a given name and match pattern, returning it and any errors encountered during compilation.
5962	AddUnmatch appends a case-insensitive regular expression to Rule's Unmatch field and returns an error if compilation fails.
5963	Run will process content and return matching lines along with their numbers
5964	NewSecret creates a new Secret instance with the given Object, Rule, line number, and line content.
5965	NewObject creates a new object with limited content length and initializes its properties.
5966	SetMetadata updates object's metadata with key, value, and attributes, recalculating primary key hash if needed.
5967	GetMetadata retrieves a metadata value by key from an Object instance, returning an error if the key does not exist.
5968	GetMetadataAll retrieves all metadata from an object and returns it as a map.
5969	SetRule compiles a regular expression from a given rule string and assigns it to x.Rule, returning an error if compilation fails.
5970	SetObject sets a case-insensitive regular expression for the given object string.
5971	SetNline updates the line number in the exception and returns nil
5972	SetContent compiles a case-insensitive regular expression from the input string and assigns it to the Content field of the Exception object, returning any errors encountered during compilation.
5973	Run checks if secret matches exception rules and content.
5974	AddRule enables a rule if specified and appends it to the rule list.
5975	LoadRulesFromFile reads rules from a YAML file, creates Rule objects, and adds them to Seekret with default enabled status.
5976	LoadRulesFromDir loads rules from all .rule files in a directory, returning an error if any file cannot be loaded or if the path is not a directory.
5977	DefaultRulesPath returns the path to default rules, prioritizing an environment variable.
5978	EnableRule enables a rule by name on a Seekret instance and returns an error if unsuccessful
5979	DisableRule updates the rule enabled status in Seekret's ruleList and returns an error if unsuccessful.
5980	EnableRuleByRegexp sets a rule enabled by its regexp in Seekret.
5981	DisableRuleByRegexp toggles a rule based on its name using a regular expression and returns the number of rules affected.
5982	LoadObjects will load objects from a source and append them to the seekret's object list returning an error if loading fails
5983	GroupObjectsByMetadata will group objects by metadata key and return a map of strings to object arrays
5984	GroupObjectsByPrimaryKeyHash groups objects in s by primary key hash using models package.
5985	AddException appends an exception to Seekret's exception list.
5986	LoadExceptionsFromFile reads exceptions from a YAML file and adds them to the Seekret object.
5987	printPlainResults will iterate through results, printing each source, string, and non-error fields, returning an error if any occur
5988	printJsonResults converts results to JSON and prints it to stdout, returning an error if either conversion or printing fails
5989	NewXor64Source initializes a new Xor64Source with the given seed.
5990	xor64 applies bitwise XOR operations to input x with shifts to produce a transformed value
5991	next updates the state of Xor64Source and returns the new value
5992	Seed sets the source's seed to a given value or a default if zero.
5993	NewFrameSet creates a new FrameSet from a frame range string and returns an error if the format is incorrect
5994	handleMatch processes different types of frame matches and appends unique frames to rangePtr based on the input.
5995	Index returns the range pointer's index for the given frame
5996	Frame will return the value at the specified index and an error if out of range
5997	HasFrame checks if a frame exists within a FrameSet's range.
5998	FrameRangePadded returns the padded frame range as a string.
5999	Normalize will return a new FrameSet with normalized range pointer.
6000	FramesToFrameRange converts a list of frames to a string representation, handling ranges and steps with zero-padding.
6001	frameRangeMatches parses a comma-separated frame range, removing padding characters and matching patterns, returning a slice of parsed ranges or an error if parsing fails
6002	toRange generates a sequence of integers from start to end with a given step size, handling both ascending and descending ranges.
6003	NewWorkManager creates a workManager instance with configured file options based on global Options.
6004	processSources scans directories and sequences, processing them and sending results to outSeqs.
6005	isInputDone checks if input directories or sequences are nil, returning true if both are empty
6006	closeInputs will close input directories and sequences if they are not nil.
6007	load processes paths, sending sequences to inSeqs and directories to inDirs
6008	loadRecursive traverses paths recursively, processing directories and sequences according to options and skipping hidden directories.
6009	preparePaths cleans paths, filters duplicates, checks directories, and identifies file sequences
6010	PadFrameRange pads each frame range in a string with leading zeros based on a given padding length.
6011	zfillString prepends zeros to a string until it reaches the specified length, handling negative numbers appropriately
6012	zfillInt pads integer with zeros to specified width
6013	NewInclusiveRange creates a new InclusiveRange object with the given start, end, and step values, adjusting the step to 1 or -1 if it's zero.
6014	String method for InclusiveRange returns a string representation including start, end, and step values.
6015	End method returns the cached end value or calculates it based on range properties.
6016	Len returns the cached length of the range or calculates it if needed.
6017	Min returns the lower bound of the range.
6018	Max returns the larger of two values, Start or End, from InclusiveRange.
6019	Contains checks if a value is within an inclusive range by comparing it to the closest value in the range.
6020	closestInRange will find the closest value to a given number within a specified range and step size
6021	Index will find the index of a value within an inclusive range or return -1 if not found
6022	String method returns a comma-separated string representation of inclusive ranges.
6023	`Len` calculates total length of inclusive ranges by summing up lengths of individual blocks.
6024	Start returns the start position of the first block in InclusiveRanges or 0 if empty
6025	InclusiveRanges' End returns the last block's end or 0 if no blocks exist.
6026	Min returns the smallest value from the inclusive ranges
6027	Max returns the maximum value among all ranges in the InclusiveRanges object
6028	numRanges returns the number of blocks in InclusiveRanges or 0 if no blocks exist.
6029	rangeAt returns the InclusiveRange at the specified index or nil if out of bounds
6030	Append adds a new inclusive range to the list
6031	AppendUnique adds a new range to InclusiveRanges ensuring uniqueness and handles both increasing and decreasing steps.
6032	Contains checks if a value is within any block in InclusiveRanges and returns true if found
6033	Index method returns the position of a value in inclusive ranges or -1 if not found
6034	FrameRange returns the frame range as a string or empty if frameSet is nil
6035	FrameRangePadded returns a padded frame range string or empty if frameSet is nil
6036	Index retrieves a frame's path from a file sequence or returns the sequence's string representation if no frames are set.
6037	SetDirname updates the directory name with a trailing separator if missing.
6038	SetPadding sets the padding characters and calculates the zero fill size for a file sequence.
6039	SetPaddingStyle updates the padding style and applies it to the sequence.
6040	SetExt updates the file extension with a dot prefix if necessary.
6041	SetFrameRange updates the file sequence's frame set with a new range or returns an error if invalid.
6042	Len method returns the number of frames in the frameSet or 1 if it's nil
6043	`String method returns file sequence as string using directory, basename, frame set, padding, and extension.`
6044	Copy creates a new FileSequence from the current one
6045	NewClient creates a new client with the given URL, TLS setting, and header.
6046	UnmarshalXML will decode XML data into Header's Content field until it encounters the end element.
6047	UnmarshalXML will unmarshal XML data into a Body struct, handling Fault elements and ensuring proper nesting.
6048	Call sends a SOAP request using the provided parameters and returns any encountered error.
6049	JSONDoc loads JSON data from a file or URL and returns it as a RawMessage or an error.
6050	AddLoader adds a new loader to the chain with a given predicate and function.
6051	JSONSpec reads a JSON file and returns its analyzed document or an error.
6052	Embedded takes two JSON messages, unmarshals them into Swagger specs, and returns a Document containing both.
6053	Spec parses a spec file using various loaders and returns a Document object or an error.
6054	Analyzed will parse JSON or YAML data based on the specified version and return a Document object along with any errors encountered during parsing.
6055	Expanded method processes JSON document with optional expansion options, returning expanded Document or error.
6056	ResetDefinitions clears document's definitions and returns updated document.
6057	Pristine returns a new Document after analyzing its raw data and version.
6058	OpenDb opens a GeoIP database from a list of possible files, returning an error if none are found or accessible.
6059	GetOrg retrieves organization name from IP using GetName method
6060	GetRegion retrieves country and region codes from a GeoIP database for a given IP address.
6061	GetRegionName converts country and region codes to a region name using GeoIP library.
6062	GetCountry retrieves country code and netmask for given IP using GeoIP database.
6063	NewRotatingFileHandler creates a file handler that rotates files when they reach a certain size, returns an error if invalid parameters are provided
6064	Close will close the file descriptor if it's not nil and return any errors encountered.
6065	Level's String method returns its corresponding log level as a string.
6066	New creates a Logger instance with specified handler, level, flag, and buffer pool.
6067	Logger's Close method locks handler before closing it
6068	SetLevelByName sets logger level based on name input.
6069	Logger's Output formats log message based on specified flags and writes to handler.
6070	OutputJson formats log data as JSON and outputs it using a handler based on logger settings and flags.
6071	Print logs at trace level using Logger's Output method.
6072	Logger's Println method outputs a trace-level message with the given arguments.
6073	`Debug logs messages at the debug level.`
6074	Logger's Debugln method outputs debug messages with a newline character.
6075	Error logs the message using the logger at the error level.
6076	Errorln logs an error message with optional arguments at level 2.
6077	`Info logs informational messages at level INFO.`
6078	Infoln logs informational messages with optional arguments at level Info using Logger's Output method.
6079	Logger's Warn method logs a warning message with optional arguments at level 2.
6080	Warnln logs a warning message with the given arguments.
6081	NewStreamHandler creates a new stream handler with the given writer and returns it along with any errors encountered
6082	Right pads a string to a given length.
6083	New creates a new API instance with the given host and authenticator, setting metadata using GenMetadata.
6084	setupMetadata populates a metadata resource map by iterating through different sources and removing specific prefixes from path patterns.
6085	recordTypes traverses a data type tree to record object types and their fields recursively
6086	appendSorted adds a new parameter to the list and sorts it alphabetically
6087	parseDataType determines the data type based on the class field and constructs the corresponding DataType object.
6088	parseParam will analyze path, update param with data type, and return updated ActionParam
6089	newParam creates an ActionParam from a parameter map and updates LeafParams if it's a leaf node
6090	toGoReturnTypeName returns a Go type name with an optional pointer and slice prefix based on input parameters
6091	toGoTypeName converts a name to a Go type name, handling specific cases and panicking for unnamed structs/collections.
6092	prettify converts an object to a pretty-printed JSON string or its default representation if serialization fails
6093	isBuiltInType checks if a given type name is among predefined built-in types and returns true if it is.
6094	MatchHref checks if a given href matches any of the path patterns defined in Action, considering both the href and its trailing slash.
6095	Substitute replaces placeholders in a path pattern with variable values, returning the resulting string and any unused variables.
6096	MarshalJSON reads file content and returns JSON-encoded data or an error.
6097	writeMultipartParams recursively adds fields to a multipart writer based on APIParams input, handling nested structures and different data types.
6098	PerformRequest sends HTTP request, signs it if authentication is set, returns response or error.
6099	PerformRequestWithContext sends HTTP request using client with optional authentication, returning response or error.
6100	LoadResponse reads HTTP response and parses JSON or returns Location header as map.
6101	ScheduleLocator creates a new instance with Href and API references.
6102	TemplateLocator creates a new instance of TemplateLocator with Href set to href and api as its receiver.
6103	fetchDetails populates sshConfig with details from API response based on environment configuration
6104	buildAliases constructs SSH command aliases based on configuration and user details
6105	serverArray retrieves instances of a specific server array by name from the CM15 API, handling errors and ensuring only one matching array is found.
6106	server retrieves a server instance by name from the API and handles errors if the server is not found or multiple servers match the name.
6107	toPackageName converts version string to package name by replacing dots with underscores and removing trailing zeros
6108	loadFile checks if a file exists and reads its contents, returning the bytes and any errors encountered.
6109	main parses command line, executes command, handles response, prints output, sets exit status.
6110	runCommand executes a command using a client and returns the response or an error based on the command line input.
6111	CreateJSONResponse removes BOM from JSON byte array and returns HTTP response
6112	AccountLocator creates an AccountLocator instance with the provided href and API reference.
6113	AccountGroupLocator creates and returns a new instance with Href set to href and API reference.
6114	AlertLocator returns a new instance of AlertLocator with the provided href and API reference.
6115	AlertSpecLocator constructs a new instance with the given href and API reference.
6116	AuditEntryLocator constructs an AuditEntryLocator instance with Href and API references.
6117	BackupLocator creates a new instance of BackupLocator with the given href and API reference.
6118	ChildAccountLocator returns a new instance initialized with href and API reference
6119	CloudLocator returns a new CloudLocator instance with the given href and API reference.
6120	CloudAccountLocator creates a new locator with the given href and API reference.
6121	CookbookLocator returns a new locator with the given href and API instance.
6122	CookbookAttachmentLocator constructs a new locator with the given href and API reference.
6123	CredentialLocator returns a new instance of CredentialLocator with Href set to href and API set to api.
6124	DatacenterLocator method returns a new instance of DatacenterLocator struct with Href set to input href and API reference.
6125	DeploymentLocator constructs a new instance with Href and API reference.
6126	HealthCheckLocator returns a new instance of HealthCheckLocator with the given href and API reference.
6127	IdentityProviderLocator returns a new instance of IdentityProviderLocator with the provided href and API reference.
6128	ImageLocator method returns an ImageLocator object initialized with href and api parameters
6129	InputLocator returns a new InputLocator instance with the given href and API reference.
6130	InstanceLocator constructs an instance locator from a href string and API reference.
6131	InstanceTypeLocator returns a new instance with Href set and API reference.
6132	IpAddressLocator method returns a new instance of IpAddressLocator struct with Href set to input href and api reference.
6133	IpAddressBindingLocator returns a new instance initialized with the provided href and API reference.
6134	MonitoringMetricLocator constructs a new instance with Href set to href and API reference.
6135	MultiCloudImageLocator returns a new instance of MultiCloudImageLocator with the given href and API reference.
6136	API.MultiCloudImageMatcherLocator returns a new instance of MultiCloudImageMatcherLocator with Href set to href and API reference.
6137	MultiCloudImageSettingLocator returns a new instance of itself with Href set to href and API reference.
6138	NetworkLocator creates a new NetworkLocator instance with the given href and API reference.
6139	NetworkGatewayLocator returns a new instance of NetworkGatewayLocator with the provided href and API reference.
6140	NetworkOptionGroupLocator constructs a new locator with the given href and API reference.
6141	NetworkOptionGroupAttachmentLocator constructs a new instance with Href and API references.
6142	Oauth2Locator returns a new instance of Oauth2Locator with the provided href and API reference.
6143	PermissionLocator creates a new instance with Href set to href and api reference.
6144	PlacementGroupLocator returns a new instance of PlacementGroupLocator with Href set to href and api set to the current API instance
6145	PreferenceLocator creates a new instance of PreferenceLocator with Href set to href and api set to the receiver.
6146	PublicationLocator returns a new PublicationLocator instance with the given href and API reference.
6147	PublicationLineageLocator constructs a new locator with the given href and API instance.
6148	RecurringVolumeAttachmentLocator returns a new instance of locator with href and API reference
6149	RepositoryLocator returns a pointer to a new RepositoryLocator struct with the given href and API instance.
6150	RepositoryAssetLocator creates a new locator with the given href and API reference.
6151	ResourceGroupLocator constructs a new locator from a href string and API reference
6152	RightScriptLocator constructs a new instance with the given href and API reference.
6153	RightScriptAttachmentLocator constructs a new locator with the given href and API reference
6154	RouteLocator returns a new instance of RouteLocator with Href set to href and API set to api.
6155	RouteTableLocator creates a new instance with Href and API references.
6156	RunnableBindingLocator creates a new instance with Href and API references.
6157	SchedulerLocator creates a new instance of SchedulerLocator with the given href and API reference.
6158	SecurityGroupLocator creates a new locator for a security group using the given href and API instance.
6159	SecurityGroupRuleLocator returns a new locator for a security group rule using the given href and API instance.
6160	ServerLocator creates a new instance of ServerLocator with the given href and API reference.
6161	ServerArrayLocator constructs a new locator with the given href and API reference.
6162	ServerTemplateLocator returns a new instance of ServerTemplateLocator with the given href and API reference.
6163	ServerTemplateMultiCloudImageLocator returns a new instance initialized with the given href and API reference.
6164	SessionLocator returns a new instance of SessionLocator with the given href and API reference.
6165	SshKeyLocator constructs a new SSH key locator with the given href and API reference.
6166	SubnetLocator creates a new instance with Href and API reference.
6167	TagLocator creates a new instance of TagLocator with Href and API as parameters
6168	TaskLocator constructs a new locator for a task using the given href and API instance.
6169	UserLocator returns a new UserLocator instance with Href set to href and API set to api.
6170	UserDataLocator creates a new instance of UserDataLocator with the provided href and API reference.
6171	VolumeLocator returns a new VolumeLocator instance with the given href and API reference.
6172	VolumeAttachmentLocator returns a new locator for the given href and API instance
6173	VolumeSnapshotLocator constructs a new locator using the provided href and API instance.
6174	VolumeTypeLocator constructs a new locator for the given href and API instance
6175	RegisterCommands registers action commands using a registrar.
6176	ShowCommandHelp will display help for a given command using API's ShowHelp method
6177	ShowAPIActions calls ShowActions with specific parameters.
6178	ShowHelp displays help for a command, parsing flags and showing usage details.
6179	ParseCommandAndFlags processes a command to extract its target resource, action, and flags, returning errors if the command is invalid.
6180	validateFlagValue checks if the flag value meets the specified criteria including regex, non-blank check, and valid values list.
6181	buildQuery aggregates multiple APIParams into a single map, merging values for duplicate keys
6182	buildPayload combines multiple APIParams into a single flattened payload, returning it or an error if normalization fails
6183	shortenPattern checks if a pattern ends with a given suffix, trims it if so, and compares it to resource path patterns, returning the original pattern or a shortened version if a match is found
6184	cleanDescription removes unnecessary parts from a document and returns the cleaned version.
6185	fileExists checks if a file exists by returning true if no error is encountered when attempting to get file stats
6186	AnalysisSnapshotLocator constructs a new instance with Href set to href and api reference.
6187	BudgetAlertLocator creates a new instance of BudgetAlertLocator with the given href and API reference.
6188	CloudBillLocator constructs a new instance with Href set to href and api reference.
6189	CloudBillMetricLocator creates a new instance with Href and API reference
6190	CurrentUserLocator returns a new instance initialized with the href and API reference.
6191	InstanceCombinationLocator returns a new instance combining href and api
6192	InstanceMetricLocator returns a new instance with Href set to href and API reference.
6193	InstanceUsagePeriodLocator returns a new instance with Href set to href and API reference.
6194	PatternLocator returns a new instance of PatternLocator with Href set to href and API set to api
6195	`ReservedInstanceLocator constructs a new locator from a href string and API instance`
6196	ReservedInstancePurchaseLocator constructs a new locator with the given href and API reference.
6197	ScenarioLocator constructs a new instance of ScenarioLocator with the provided href and API reference.
6198	ScheduledReportLocator creates a new instance of ScheduledReportLocator with Href set to href and API set to api.
6199	TempInstancePriceLocator returns a new instance of TempInstancePriceLocator with Href set to href and API set to api.
6200	UserSettingLocator creates a new locator for a user setting given a href and API instance.
6201	readAllAsync reads from a reader asynchronously and returns the data and a channel signaling when reading is complete
6202	extractArg finds argument value by name and updates remaining arguments
6203	write will append data to an output file or create it if it doesn't exist
6204	AppliedPolicyLocator returns a pointer to a new AppliedPolicyLocator instance initialized with the provided href and API reference.
6205	ApprovalLocator creates a new instance with the provided href and API reference.
6206	IncidentLocator returns a new IncidentLocator instance with the provided href and API reference.
6207	PolicyTemplateLocator returns a new instance with Href set to href and API reference.
6208	PublishedTemplateLocator returns a new instance of PublishedTemplateLocator with the provided href and API reference.
6209	DebugCookbookPathLocator initializes a new instance with the given href and API reference.
6210	DockerControlLocator constructs a new locator using the provided href and API instance.
6211	EnvLocator creates a new instance of EnvLocator with Href set to href and API set to api.
6212	LoginControlLocator constructs a new instance with the provided href and API reference.
6213	ProcLocator creates a new ProcLocator instance with the given href and API reference.
6214	Rl10Locator returns a new instance of Rl10Locator with Href set to href and api reference.
6215	TSSLocator creates a new TSSLocator instance with the given href and API reference.
6216	TSSControlLocator creates a new instance with the provided href and API reference.
6217	TSSPluginLocator returns a new instance of TSSPluginLocator with the given href and API.
6218	NewAngularWriter initializes a new AngularWriter with custom template functions and parses an angular template, returning an error if unsuccessful.
6219	WriteResource executes angular template on given resource and writer
6220	path constructs a URL path using action's variables
6221	mandatory checks if a parameter is mandatory for a given action
6222	New initializes an API instance with a host and authenticator, setting up the client and adjusting the host if necessary.
6223	FromCommandLine creates an API client based on command-line arguments and returns it along with an error if authentication is missing.
6224	CanAuthenticate checks authentication and returns an error if failed
6225	Encrypt converts plaintext to base64-encoded ciphertext using AES encryption.
6226	Decrypt will decrypt a Base64-encoded string using AES encryption and return the original plaintext or an error if decryption fails.
6227	guessType determines the data type based on API reference and media type attributes.
6228	addType updates API with new object data type, handling collisions and warnings.
6229	extractCmdLineParams processes action parameters recursively, handling different data types and constructing a list of action parameters with updated properties based on their type and parent context.
6230	NewMetadataWriter creates a MetadataWriter instance with parsed templates using a FuncMap for various functions.
6231	WriteHeader will execute the header template with the given package name and write it to the writer, returning any errors encountered
6232	WriteMetadata will execute a template with API descriptor resources and write to writer, returning any errors.
6233	location returns metadata based on ActionParam's Location field
6234	New creates an API instance using the given host and authenticator.
6235	fromAPI will generate metadata and create a new API instance using the provided rsapi.API object
6236	BuildRequest constructs an HTTP request using API metadata and parameters.
6237	setupMetadata creates a map from metadata resources
6238	NewDisplayer reads an HTTP response, parses JSON, and returns a Displayer object or an error.
6239	ApplySingleExtract processes a single JSON extract, handling errors, validating output count, and converting types before returning the result.
6240	ApplyExtract processes a JSON selector and returns parsed values or an error if the operation fails.
6241	ApplyHeaderExtract sets RawOutput to the specified header's value or returns an error if the header is missing.
6242	Output will format raw output to string based on prettify option and handle errors gracefully.
6243	NewAPIAnalyzer creates an APIAnalyzer instance with given resources and attribute types.
6244	APIAnalyzer's Analyze method processes raw resources to generate an APIDescriptor, sorting and analyzing each resource before finalizing type names.
6245	AnalyzeAliases updates method parameters, status codes, and access rules in API resources based on alias mappings.
6246	LocatorFunc checks if 'Links' attribute exists and returns a locator for the 'self' link.
6247	ParseRoute parses routes based on moniker and constructs path patterns.
6248	isDeprecated checks if a path contains /api/session but not /api/sessions
6249	isQueryParam checks if a query parameter is valid based on its name and optionally its parent name.
6250	isPathParam checks if a parameter matches any variable in given path patterns.
6251	fetchAuditEntries retrieves audit entries from the API filtered by email, returning them or an error
6252	formatTime converts a time.Time to a formatted UTC string
6253	printAudits logs each audit entry's update time, user email, and summary
6254	extractUnique filters out duplicate AuditEntry instances based on hrefs from two lists.
6255	getHref extracts the self-link's href from an AuditEntry.
6256	fail logs an error message and exits the program
6257	parameters constructs a comma-separated list of required and optional parameters based on the action object.
6258	paramsInitializer constructs API parameters based on action details, handling mandatory and optional fields accordingly.
6259	commandLine constructs a command line string from os.Args.
6260	toVerb converts text to title case and appends "Raw" for specific HTTP verbs
6261	escapeBackticks will concatenate backtick-separated elements with ' + '`
6262	AccountPreferenceLocator creates a new locator for account preferences using the given href and API instance.
6263	ApplicationLocator creates a new locator with the given href and API instance.
6264	EndUserLocator returns a new instance of EndUserLocator with the given href and API reference.
6265	NotificationRuleLocator creates a new locator for a notification rule using the given href and API instance.
6266	API's UserPreferenceLocator method returns a new UserPreferenceLocator instance with Href set to the input href and API reference.
6267	UserPreferenceInfoLocator constructs a new locator with the given href and API reference
6268	LoadConfig reads a configuration file, decrypts sensitive information, and returns the parsed Config object or an error.
6269	CreateConfig reads user input to update or create a configuration file, saving changes to the specified path.
6270	fromAPI configures and returns a new API instance with specific settings.
6271	HostFromLogin modifies the input host string by changing certain elements based on conditions and returns the modified host.
6272	AnalyzeParam processes a parameter, setting up an ActionParam with details like name, description, type, and validation rules based on the input schema or basic type.
6273	AnalyzeAttribute processes attribute data to create an ActionParam object with type analysis.
6274	AnalyzeType processes a type definition and query to determine its data type, handling various cases including built-in types, custom structs, and more.
6275	CreateType generates a struct from a query and attributes, returning an ObjectDataType or an error.
6276	Ref method returns Definition based on $ref key or nil
6277	Type method returns "object" if "$ref" exists, otherwise returns the value associated with "type" as a string, or an empty string if neither exist.
6278	Ref.Required returns required strings or empty list if not present
6279	ID returns the reference ID or an empty string if not found.
6280	Service returns the first tag or operation ID without fragment, or empty string if none available.
6281	Method extracts segment after "#" in OperationID or returns empty string
6282	NewTypeRegistry initializes a new TypeRegistry instance with empty maps for named and inline types.
6283	GetNamedType retrieves a named type from the registry using its Go-formatted name.
6284	CreateNamedType registers a new type or panics if it already exists.
6285	CreateInlineType adds a new inline type to the registry and returns it
6286	FinalizeTypeNames updates type registry and descriptor with inline types.
6287	Merge combines two APIDescriptors, handling version conflicts, duplicate resources, and updating type names accordingly.
6288	FinalizeTypeNames normalizes and deduplicates type names to avoid clashes with resource names and ensures uniqueness across the API descriptor.
6289	uniqueTypeName generates a unique type name based on a prefix and checks if it's already taken, incrementing the index until a unique name is found.
6290	MandatoryParams returns a list of mandatory action parameters from the given action.
6291	HasOptionalParams checks if any action parameter is optional.
6292	MakeUniq generates a unique string by appending an index to the base if it's already taken.
6293	NewClientWriter initializes templates with functions and returns a ClientWriter instance or an error.
6294	WriteHeader executes a template with package, version, time, and JSON flags, writing to the specified writer and returning any errors.
6295	WriteResourceHeader will write a header to the writer with the given resource name
6296	WriteType will write a Go struct declaration to the writer based on the object's fields.
6297	WriteResource executes a template with a resource and writes it to a writer, returning an error if execution fails.
6298	WithTrail appends a trail to the evaluation context and returns the updated context.
6299	AnalyzeEndpoint processes API endpoint details, constructs resource actions, analyzes parameters and responses, and returns any encountered errors.
6300	NetworkInterfaceLocator constructs a new locator with href and API reference.
6301	NetworkInterfaceAttachmentLocator constructs a new locator with the given href and API reference.
6302	UnmarshalJSON parses JSON string to RubyTime struct
6303	ExecutionLocator creates a new locator with the given href and API instance.
6304	NotificationLocator creates a new instance of NotificationLocator with Href and API.
6305	OperationLocator creates a new instance of OperationLocator with the given href and API reference.
6306	ScheduledActionLocator creates a new locator for a scheduled action with the given href and API reference.
6307	NewBasicAuthenticator creates an authenticator using a username, password, and account ID.
6308	NewSSAuthenticator wraps an authenticator with SSAuthenticator if not already wrapped.
6309	newCookieSigner creates a new authenticator using a login request builder, account ID, current time, and a no-redirect HTTP client.
6310	Sign method signs http request using cookies and refreshes them if needed.
6311	CanAuthenticate checks if authentication can be performed for a given host using a cookie signer.
6312	refresh updates cookies and refresh time if response status is 204
6313	Sign method sets Authorization header and X-Account header if accountID is non-zero returns nil
6314	Sign sets the X-RLL-Secret header on an HTTP request and returns nil
6315	Sign method authenticates request using session or refreshes it if expired.
6316	SetHost updates the authenticator's host based on domain components.
6317	CanAuthenticate checks host's authorization by sending a GET request to the API and verifying the response status.
6318	extractRedirectURL will parse the Location header from a response to extract a redirect URL, returning it and an error if parsing fails or no redirect is found
6319	buildURL constructs a URL using the provided host and path, defaulting to HTTPS unless Insecure is true, then using HTTP.
6320	GetAction retrieves an action by name from a resource's actions list, returning the action if found or nil otherwise.
6321	HasLink checks if a resource has a link with the given name.
6322	findMatches filters href against Resource actions' PathPatterns returning matching patterns
6323	NewPB creates an HTTPClient from ParamBlock, setting defaults and copying values to avoid side effects.
6324	newVariableDumpClient creates a new HTTP client with specific configurations for insecure requests, dump format, and hidden headers.
6325	newRawClient creates a custom HTTP client with specified options.
6326	DoHidden will send a hidden HTTP request and return the response or an error
6327	Do method on dumpClient sends HTTP request and returns response or error.
6328	doImp sends HTTP requests, sets headers, logs, dumps data, and handles errors.
6329	getClientWithoutTimeout creates a new HTTP client from the dumpClient instance without setting a timeout.
6330	dumpRequest processes HTTP requests based on dump format, logging or returning the body accordingly.
6331	writeHeaders will add filtered HTTP headers to a buffer
6332	copyHiddenHeaders clones a map of hidden headers
6333	validateCommandLine checks command-line arguments for setup, actions, json, help, RL10, account, OAuthToken, APIToken, NoAuth, Host, and Password. It ensures required options are provided and exits with an error message if any are missing.
6334	APIClient returns a command client based on the given name and command line, or an error if the name is unknown.
6335	RegisterClientCommands registers client commands using kingpin and API registrars.
6336	Interactive sets up logging to stderr for error level messages.
6337	toPattern generates a PathPattern struct from a verb and path, handling path variables and creating regex patterns.
6338	WithClientIP sets the client IP address in the given context if it's not nil.
6339	ClientIP retrieves IP address from context using clientIPKey.
6340	NewProducer creates a new producer instance with default values and returns it along with any errors encountered during initialization.
6341	StartProducer initializes a new producer with given config, starts it, and returns the producer instance or error.
6342	`Start initializes producer with concurrency control, panicking if already started.`
6343	Stop will stop the producer and wait for all requests to complete with an error indicating the producer is stopped
6344	Publish sends a message to a topic and returns an error if it fails.
6345	PublishTo sends a message to a topic on a producer and handles errors including timeout and connection loss.
6346	NewLocalEngine creates a new local engine with default timeouts if not specified, starts its goroutine, and returns it.
6347	validate checks ConsumerConfig's Topic and Channel fields to ensure they are not empty, returning an error if either is missing.
6348	defaults sets default values for consumer configuration fields
6349	NewConsumer creates a new consumer instance with default values from configuration.
6350	StartConsumer initializes a new consumer with given config and starts it, returning the consumer and any error encountered.
6351	Consumer's Start method starts a goroutine to run if it hasn't been started yet, panicking otherwise.
6352	RateLimit limits message rate and returns a channel with filtered messages
6353	RawResponse.Write sends response data to a writer.
6354	ReadResponse reads a response from a reader and returns it as a structured type or an error.
6355	backoff calculates a backoff duration using a random number generator, current attempt, minimum, and maximum durations, with a hardcoded coefficient.
6356	FrameType's String method returns a human-readable representation of the frame type.
6357	NewConsulEngine initializes a new ConsulEngine instance with default values if not specified.
6358	ParseMessageID converts a hex string to a MessageID.
6359	MessageID.WriteTo converts ID to 16-byte hex string and writes it to writer.
6360	NewMessage constructs a new message object with given ID, body, and command channel.
6361	Finish method on Message panics if already called, recovers from async close, sends finish command and closes channel.
6362	Requeue will send a message to the command channel if it's not complete and handle panics if the connection closes asynchronously.
6363	ReadCommand parses a command from a reader and returns the corresponding Command object or an error.
6364	funcMapMaker combines multiple function maps from different sources into a single FuncMap
6365	Funcs updates the template's function map and returns the updated template.
6366	Execute will render a template and write the result to the response writer, setting the content type if necessary, and return any errors encountered during rendering or writing.
6367	RegisterPath checks if a path exists, adds it to paths if not already present, returns error if not found.
6368	AssetFileSystem will return the content of a file or an error if not found
6369	Glob will find all paths matching the given pattern in AssetFileSystem and return them as a list of strings.
6370	NameSpace creates or retrieves a namespace within AssetFileSystem and returns its interface.
6371	New initializes a Render instance with provided or default configuration and view paths.
6372	RegisterViewPath updates render's view paths based on absolute or relative paths, resolving them to absolute if necessary and registering with AssetFileSystem.
6373	SetAssetFS updates render's AssetFileSystem with paths from ViewPaths.
6374	Layout creates a new template associated with the renderer.
6375	Funcs updates template functions and returns modified template.
6376	Execute template with given name, context, request, and writer
6377	RegisterFuncMap adds a function to the template's FuncMap under the specified name.
6378	Asset retrieves a file's content from the AssetFileSystem.
6379	NewPlainClient creates a new plain client instance with the given identity, username, and password.
6380	Create initializes an uploader with a URL, headers, and config, returning a writer-closer or error.
6381	Open sends a GET request to the specified URL with the given configuration and returns the response body or an error. If no config is provided, it uses default settings.
6382	Sign applies DefaultService's signature method to the request using the provided keys.
6383	Sign method sets security token, computes HMAC signature, and adds authorization header to HTTP request.
6384	Readdir reads directory entries from a file and returns them as os.FileInfo slices or an error if the request fails or no more entries are available.
6385	Find searches nodes based on axis and returns matching nodes.
6386	Lex processes an XPath string and returns a channel of tokenized items.
6387	MustParseXML will parse XML from a reader and panic if an error occurs, returning the parsed tree node otherwise.
6388	ParseXML parses XML from reader into tree structure with optional settings.
6389	Call method checks argument count based on LastArgOpt and invokes Fn if valid.
6390	Parse will execute an XPath expression and return an XPathExec object along with any parsing errors.
6391	MustParse will execute a given XPath expression and panic if it fails to parse.
6392	XPathExec's Exec method executes an XPath expression on a given node with optional options and returns the result or an error.
6393	ExecBool evaluates an XPath expression on a node and returns a boolean value or an error if the result cannot be converted to a boolean.
6394	XPathExec's ExecNum converts execution result to a float64 or returns an error if conversion fails.
6395	XPathExec's ExecNode method executes an XPath expression on a given node, returning a NodeSet or an error if the conversion fails.
6396	MustExec executes XPath expression on given node and panics if error occurs.
6397	ParseExec parses an execution string and executes it on a given tree node with optional functions, returning the result or an error.
6398	CreateNode will create an XML node based on options and add it to the parent element's children, returning the created node or an error if the operation fails
6399	GetChildren returns a slice of child nodes from an XMLElement object.
6400	GetAttrs returns a slice of attributes from the XMLEle node.
6401	ResValue concatenates the result values of child nodes recursively.
6402	Parse converts a string to a Node using a lexer and returns it along with any errors encountered during parsing.
6403	GetToken returns token from XMLNode, handling attributes specially.
6404	ResValue returns the text content of an XML node based on its type.
6405	Exec will execute a parser node and return a result or an error based on the input tree and variable maps
6406	Num's String method returns its string representation or "Infinity" or "-Infinity" if it's infinite.
6407	Num method converts string to float64 and returns it as Num type, handling errors by returning NaN
6408	BuildNS constructs XML namespace attributes from an element, filtering out empty xmlns attributes, sorting them, and assigning positions.
6409	GetAttribute searches for an XML attribute with matching local and namespace strings, returning it and a boolean indicating success.
6410	GetAttributeVal retrieves attribute value from element and returns it along with existence flag
6411	GetAttrValOrEmpty returns the attribute value or an empty string if not found.
6412	FindNodeByPos searches for a node at a given position within a tree structure.
6413	Marshal will serialize a node to writer and return an error if serialization fails
6414	MarshalStr converts a tree node to a JSON string with potential errors.
6415	NewLexer creates a lexer with specified reader, tokenizer, and options.
6416	NewLexerString creates a new lexer from a string with specified options.
6417	Split splits a string using a lexer and returns a slice of substrings along with an error if any occurs.
6418	Register will add an error to the registry and panic if the code is already registered or no code is defined.
6419	Get retrieves an ErrDescriptor from the registry using a code, locking the registry during access.
6420	GetAll retrieves all ErrDescriptors from the registry safely.
6421	From will convert an error to a custom Error type or use FromGRPC if it's not already an Error.
6422	Descriptor converts an error to an ErrDescriptor with sensible defaults if no matching descriptor is found.
6423	GetAttributes extracts attributes from an error or returns empty attributes.
6424	HTTPStatusCode returns appropriate HTTP status code based on the type.
6425	HTTPStatusCode extracts an HTTP status code from an error or returns a default one.
6426	HTTPStatusToType maps HTTP status codes to corresponding error types
6427	ToHTTP sets response headers based on error type and encodes error to JSON response.
6428	toImpl converts an Error to an *impl, creating a new one if necessary.
6429	MetadataFromIncomingContext extracts and returns metadata from an incoming context.
6430	MetadataFromOutgoingContext extracts metadata from an outgoing context.
6431	TokenFromMetadata retrieves a token from metadata or returns an error if not found.
6432	TokenFromIncomingContext extracts token from incoming context using metadata.
6433	OutgoingContextWithToken adds a token to the context metadata.
6434	KeyFromMetadata retrieves the first value from the "key" metadata field or returns an error if it's missing.
6435	KeyFromIncomingContext retrieves key from metadata extracted from incoming context.
6436	OutgoingContextWithKey adds a metadata key-value pair to a context
6437	IDFromMetadata extracts the first "id" value from metadata or returns an error if not found.
6438	IDFromIncomingContext retrieves an ID from metadata extracted from the incoming context.
6439	OutgoingContextWithID adds an "id" metadata to the given context.
6440	ServiceInfoFromMetadata extracts service info from metadata and returns it as strings or an error
6441	ServiceInfoFromIncomingContext extracts service info from metadata retrieved from incoming context
6442	OutgoingContextWithServiceInfo adds service info to context
6443	LimitFromMetadata extracts a limit from metadata and returns it as a uint64 or an error if not found.
6444	OffsetFromMetadata extracts offset from metadata and returns its uint64 value or an error if missing or invalid.
6445	LimitAndOffsetFromIncomingContext extracts limit and offset from context metadata.
6446	OutgoingContextWithLimitAndOffset adds pagination parameters to a context if limit or offset is non-zero.
6447	before determines if the end time of schedule item i is less than the start time of schedule item j
6448	New creates a new error instance with formatted message and attributes.
6449	WithNamespace adds a namespace field to a logging context.
6450	Wrap creates a new Namespaced instance with the given context and namespaces.
6451	WithField adds a field to a logger if it's a namespace key, otherwise delegates to the underlying logger.
6452	WithFields adds fields to a logger interface and returns a new Namespaced instance.
6453	Format replaces placeholders in a string with corresponding values from a map, returning the formatted string or the original if errors occur.
6454	fix will recursively dereference pointers and convert non-nil values to their string representation
6455	GRPCCode returns gRPC status code based on Type
6456	GRPCCodeToType maps gRPC status codes to custom types
6457	GRPCCode returns the gRPC status code from an error.
6458	FromGRPC converts gRPC errors to custom Error type with message, type, and attributes.
6459	ToGRPC converts an error to gRPC error by checking its type and attributes.
6460	IsEnabled checks if a namespace is enabled based on rules and returns true if it matches or if there's a wildcard.
6461	Set updates the namespaces slice while holding the lock on ns.
6462	Cause extracts the underlying error from an error object's attributes.
6463	parseCode converts a string to an integer and returns it as a Code type, defaulting to 0 on error
6464	UnaryServerInterceptor will apply a conversion function to the server response or error before returning it.
6465	StreamServerInterceptor applies a conversion function to a gRPC stream handler.
6466	UnaryClientInterceptor applies a conversion function to gRPC client invocations.
6467	StreamClientInterceptor creates a gRPC client interceptor that applies a conversion function to errors.
6468	Interceptor creates a gRPC stream client interceptor with retry logic based on settings.
6469	Wrap logger to logrus entry wrapper
6470	NewCounter creates a new counter with specified bucket size and retention period
6471	NewRedisCounter initializes a new Redis counter with given parameters.
6472	NewLimiter creates a new limiter with the given counter, duration, and limit.
6473	WithInsecure sets allowInsecure to true and returns the modified TokenCredentials instance.
6474	WithTokenFunc creates a new TokenCredentials instance with a given key and token transformation function.
6475	GetRequestMetadata retrieves metadata for a request, including a token, using various sources like context and configuration.
6476	FieldsFromIncomingContext extracts log fields from context.
6477	String method returns type description or "Unknown" for unrecognized types
6478	UnmarshalText will update the receiver with a value parsed from a text representation, returning an error if parsing fails.
6479	fromString converts a string to a corresponding Type and returns it along with an error if invalid
6480	Start logs interval and starts a goroutine to report memory stats at regular intervals.
6481	NewSimple creates a new instance of simpleQueue with a condition variable for synchronization.
6482	Wrap creates a Filtered object that applies filters to logs using the specified logger.
6483	WithFilters adds filters to a Filtered instance and returns it.
6484	WithField applies filters to a field value before returning a new log interface.
6485	WithFields applies filters to log fields and returns a new Filtered instance.
6486	FilterSensitive returns a filter that replaces values of specified keys with elided.
6487	SliceFilter applies a filter to each element in a slice.
6488	MapFilter applies a filter to each element of a map or returns the original value if it's not a map.
6489	RestrictFilter applies a filter to a specific field in a data structure.
6490	LowerCaseFilter applies a case-insensitive filter to keys.
6491	newBatchPoints creates a BatchPoints object from a configuration or panics if invalid.
6492	NewSinglePointWriter creates a new SinglePointWriter instance with the provided logger and batch points writer.
6493	Write adds a point to a batch and forwards it to the writer
6494	WithScalingInterval sets the scaling interval for a batching writer option
6495	NewBatchingWriter creates a new instance of BatchingWriter with specified options and logs configuration.
6496	BatchingWriter.Write configures and manages channels to write points efficiently.
6497	MustParseLevel attempts to parse a log level from a string, logs an error and exits if parsing fails, otherwise sets the parsed level.
6498	New initializes a new Stream with a given buffer size and setup function.
6499	SetLogger updates the logger for a Stream instance while ensuring thread safety with mutex locking.
6500	CloseRecv locks the stream's mutex, closes and sets to nil the receive buffer, then unlocks the mutex.
6501	Stats method returns the number of sent and dropped packets from a stream.
6502	Run starts a streaming process handling send and receive operations, logging errors and managing context cancellation.
6503	ServerOptions configures gRPC server options using provided logger.
6504	ClientOptions configures gRPC client options with logging interceptors.
6505	UnaryServerInterceptor logs method calls, durations, and errors for gRPC servers
6506	StreamServerInterceptor logs RPC stream events and measures duration.
6507	UnaryClientInterceptor logs gRPC calls with duration and errors.
6508	StreamClientInterceptor logs RPC client stream events and handles errors.
6509	defaults sets default values for Config fields if they are unset
6510	Flush locks handler, flushes batch asynchronously, then resets batch.
6511	New creates a Handler instance with Writer set to w and UseColor based on environment variables.
6512	HandleLog processes log entries, formats them based on severity and options, and outputs to writer with optional coloring.
6513	New creates a new instance of TTNRandom using a given seed.
6514	Names extracts names from URI template parts.
6515	String method formats performance datum into a readable string.
6516	RenderPerfdata will concatenate performance data values into a single string, prefixed with " |".
6517	Exit will print the given status and message then terminate the program with the specified status code.
6518	NewCheckWithOptions creates a new check instance with optional status policy.
6519	AddResult updates check's results and status based on new result.
6520	AddResultf formats a message using a status and variable arguments before adding it to the Check's results.
6521	String method returns formatted check status and performance data
6522	Exitf formats a message and adds it to the check's results before finishing
6523	Criticalf logs a critical message and exits with CRITICAL level.
6524	Unknownf logs an unknown error message using Exitf.
6525	NewDefaultStatusPolicy creates a new default status policy object
6526	NewStatusPolicy creates a new status policy from a list of statuses and validates it against default policies, returning an error if any status is missing.
6527	ParseRange will parse a range string and return a Range object with start, end, and alert on inside properties, or an error if parsing fails.
6528	Check determines if a value falls within a range's bounds and returns whether to alert based on the range's configuration.
6529	CheckInt checks if an integer falls within the range using float64 conversion
6530	CheckUint64 checks if a uint64 value falls within the Range's bounds by converting it to float64 and using Check method.
6531	NewClient creates a new HTTP client with TLS configuration based on ClientConfig and returns it along with an API URL.
6532	GetKeyMeta retrieves metadata for a key at a specified path using the Client's get method.
6533	GetKeysInDirMeta retrieves key metadata from a specified directory and returns it along with any errors encountered during the process.
6534	GetKeyContent fetches key content from a specified path using the client's rawGet method, returning the content as a string and an error if the request fails.
6535	GetJobSummariesForProject fetches summaries for jobs within a project and returns them along with any errors encountered during the process.
6536	GetJobsForProject retrieves jobs for a given project and returns a list of JobDetails or an error if the request fails.
6537	GetJob retrieves a job detail by ID from the client, returning the job or an error if not found.
6538	CreateJob will create a job and return a summary and error
6539	CreateOrUpdateJob updates or creates a job and returns its summary and any errors.
6540	DeleteJob will call delete method on Client instance to remove a job by its ID and return any errors encountered
6541	JobSummary returns a job's summary based on its ID, Name, GroupName, and ProjectName.
6542	GetSystemInfo retrieves system information from the client and returns it along with any errors encountered.
6543	DateTime converts SystemTimestamp to time.Time using RFC3339 format.
6544	GetAllProjects fetches all projects and returns their summaries along with any errors encountered during retrieval.
6545	GetProject fetches a project by name from the client and returns it along with any errors encountered
6546	CreateProject sends a POST request to create a new project and returns the created project and any errors encountered.
6547	DeleteProject will delete a project by name and return an error if it fails
6548	SetProjectConfig updates project configuration using put method.
6549	NewClient creates a new client instance using the provided username and password.
6550	NewClientbyToken creates a new client using a token.
6551	SetDepth updates client's depth with given integer value as a string.
6552	ListDatacenters fetches datacenters from the client's URL and returns them along with any errors encountered.
6553	CreateDatacenter sends a POST request to create a datacenter and returns the created datacenter and any errors encountered.
6554	GetDatacenter retrieves a Datacenter object from a client using a given data center ID and returns it along with any errors encountered during the process.
6555	UpdateDataCenter sends a PATCH request to update a data center and returns the updated data center and any errors encountered
6556	DeleteDatacenter deletes a datacenter and returns HTTP headers and an error
6557	WaitTillProvisioned will attempt to get the status of a request at a specified path up to 300 times, sleeping for 1 second between attempts, and returns an error if the request does not complete within the timeout period.
6558	ListFirewallRules fetches firewall rules for a given data center, server, and NIC ID, returning the result or an error.
6559	GetFirewallRule fetches a firewall rule using client details and IDs, returning the rule or an error.
6560	CreateFirewallRule sends a POST request to create a firewall rule and returns the created rule or an error.
6561	UpdateFirewallRule updates a firewall rule using client's patch method and returns the updated rule or an error.
6562	DeleteFirewallRule sends a DELETE request to remove a firewall rule and returns the response headers and any errors encountered.
6563	ListLoadbalancers retrieves load balancers using client and dcid, returning them or an error.
6564	GetLoadbalancer fetches a load balancer by ID and returns it or an error
6565	UpdateLoadbalancer updates a load balancer and returns it along with any errors encountered
6566	DeleteLoadbalancer sends a DELETE request to remove a load balancer and returns the response headers and any errors encountered
6567	ListBalancedNics retrieves network interfaces for a load balancer and returns them along with any errors encountered.
6568	AssociateNic sends a POST request to associate a NIC with a load balancer and returns the associated Nic object and any errors encountered.
6569	GetBalancedNic retrieves a Nic object using a client and specific IDs, returning it or an error.
6570	DeleteBalancedNic deletes a balanced nic and returns the response headers and an error
6571	ListLans sends a GET request to retrieve LANs data for a given dcid and returns the response or an error.
6572	GetLan fetches LAN details using client and returns it along with any errors encountered
6573	DeleteLan deletes a LAN and returns the response header and any errors encountered
6574	ListNics fetches network interfaces using client details and returns them or an error.
6575	CreateNic sends a POST request to create a NIC and returns the created NIC or an error.
6576	GetNic fetches a Nic object from the server using DCID, SRVID, and NICID parameters and returns it along with any errors encountered during the request.
6577	UpdateNic sends a PATCH request to update a NIC's properties and returns the updated NIC object or an error.
6578	DeleteNic sends a DELETE request to remove a NIC and returns HTTP headers and an error.
6579	ListSnapshots retrieves snapshots from the client's URL and returns them or an error.
6580	GetSnapshot retrieves a snapshot using its ID and returns it along with any errors encountered.
6581	DeleteSnapshot removes a snapshot and returns the response headers and any errors encountered
6582	UpdateSnapshot sends a PATCH request to update a snapshot and returns the updated snapshot and any errors encountered.
6583	ListIPBlocks retrieves IP blocks from the client's API endpoint and returns them along with any errors encountered.
6584	ReserveIPBlock sends a POST request to reserve an IP block and returns the reserved block or an error.
6585	GetIPBlock fetches an IP block using its ID and returns it along with any errors encountered during the request.
6586	UpdateIPBlock updates an IP block's properties and returns the updated block or an error.
6587	ReleaseIPBlock deletes an IP block and returns HTTP headers and an error.
6588	ListVolumes fetches volumes for a data center ID and returns them or an error.
6589	GetVolume fetches a volume by ID and returns it along with any errors encountered.
6590	UpdateVolume sends a PATCH request to update a volume's properties and returns the updated volume or an error.
6591	CreateVolume sends a POST request to create a volume and returns the created volume or an error
6592	DeleteVolume sends a DELETE request to remove a volume and returns the response header and any errors encountered.
6593	CreateSnapshot sends a POST request to create a snapshot and returns the created Snapshot object and any errors encountered.
6594	RestoreSnapshot sends a POST request to restore a snapshot and returns the response header and any errors encountered
6595	ListServers retrieves servers from the client using a URL constructed with the dcid parameter and returns a pointer to Servers along with any errors encountered during the GET request.
6596	GetServer fetches a server using client's depth and pretty settings, returning the server data and any errors encountered.
6597	DeleteServer sends a DELETE request to remove a server and returns the response headers and any errors encountered.
6598	ListAttachedCdroms fetches attached CD-ROM images for a given DCID and SRVID, returning a list and any errors encountered.
6599	AttachCdrom sends a POST request to attach a CD-ROM and returns the image or an error
6600	GetAttachedCdrom fetches attached CD-ROM details from the server and returns an Image object along with any errors encountered.
6601	DetachCdrom sends a DELETE request to detach a CD-ROM and returns the response header and error.
6602	ListAttachedVolumes fetches attached volumes using client details and returns them or an error.
6603	AttachVolume sends a POST request to attach a volume and returns the resulting Volume object or an error.
6604	GetAttachedVolume retrieves a volume's details using client parameters and returns the volume object or an error.
6605	DetachVolume deletes a volume and returns the HTTP headers and an error.
6606	StartServer sends a POST request to start a server and returns the response headers and any errors.
6607	ListLocations fetches locations data from the server and returns it along with any errors encountered.
6608	GetRegionalLocations fetches regional locations using a client and returns them or an error.
6609	GetLocation fetches a location using the client's depth and pretty settings, returning the location data and any errors encountered.
6610	GetContractResources fetches contract resources from the client's URL with specified depth and pretty format, returning the resources or an error.
6611	ListImages sends a request to retrieve images and returns them along with any errors encountered.
6612	GetImage fetches an image using its ID from a client and returns the Image object or an error.
6613	PrintHeaders will print each header key and its first value from the Resp struct.
6614	ListGroups sends a GET request to retrieve groups and returns them along with any errors encountered
6615	GetGroup fetches a group using its ID and returns the result along with any errors encountered.
6616	CreateGroup sends a POST request to create a group and returns the created group and any errors encountered.
6617	UpdateGroup sends a PUT request to update a group and returns the updated group and any errors encountered.
6618	DeleteGroup deletes a group by ID and returns the HTTP headers and any errors encountered
6619	ListShares fetches shares from a client using a group ID and returns them along with any errors encountered.
6620	GetShare fetches a share using group ID and resource ID, returning the share details and any errors encountered.
6621	AddShare sends a POST request to add a share and returns the response or an error
6622	UpdateShare sends a PUT request to update a share object and returns the updated share and any errors encountered.
6623	DeleteShare removes a share from a group and returns the response headers and any errors.
6624	ListGroupUsers fetches users in a group using client's depth and pretty settings, returning Users struct or error.
6625	AddUserToGroup adds a user to a group and returns the updated user or an error.
6626	DeleteUserFromGroup sends a DELETE request to remove a user from a group and returns the response headers and any errors encountered
6627	ListUsers fetches users from API and returns them or an error.
6628	GetUser fetches user details from the API and returns a User object along with any errors encountered.
6629	CreateUser sends a POST request to create a user and returns the created user or an error.
6630	UpdateUser updates a user's details and returns the updated user object along with any errors encountered during the process.
6631	DeleteUser sends a DELETE request to remove a user and returns the response headers and any errors encountered.
6632	ListResources sends a GET request to retrieve resources and returns them along with any errors.
6633	GetResourceByType fetches a resource by type and ID, returning it or an error.
6634	ListResourcesByType sends a GET request to retrieve resources of a specified type and returns them along with any errors encountered.
6635	ListRequests fetches requests using the client's URL and returns them along with any errors encountered during the process.
6636	GetRequest fetches a request using a client and returns it along with any errors encountered.
6637	GetRequestStatus fetches status for a request at given path and returns it along with any errors encountered
6638	Close method locks mutex, closes file, and returns any errors encountered
6639	GetSerializableArgument retrieves the serializable argument from either the original value or a resource, unmarshalling it if necessary.
6640	BoolVar sets a boolean flag with a given name, default value, and usage description
6641	Bool sets up a boolean flag with a name, default value, and usage message in environment flags
6642	IntVar sets an integer flag with a default value and usage message
6643	Int returns a pointer to an integer flag with the given name, initial value, and usage message.
6644	Int64Var sets an integer variable in environment flags
6645	Int64 sets and returns an environment flag with a name, value, and usage message.
6646	UintVar sets a flag's value from the environment.
6647	Uint returns a pointer to a uint flag from EnvironmentFlags with the given name, default value, and usage message.
6648	Uint64Var sets a variable's value from environment flags.
6649	Uint64 retrieves a 64-bit unsigned integer from environment flags.
6650	StringVar sets a string flag in the EnvironmentFlags with the given name, value, and usage.
6651	String returns a pointer to a string flag in the environment flags.
6652	Float64Var sets a flag to parse a float64 value from the environment.
6653	Float64 returns a pointer to a float64 environment flag.
6654	DurationVar sets a duration flag in the environment with a default value and usage message.
6655	Duration returns a pointer to a duration value from environment flags
6656	Parse sets environment flags from OS environment variables.
6657	WriteStringToFile will write text to a file at the specified path, returning an error if it fails
6658	ReadFileToString opens a file at the given path and returns its contents as a string, or an error if the file cannot be opened or read.
6659	LineReader returns a channel of strings from a reader and an error if reading fails
6660	LineReaderFrom reads lines from a file at a given path and returns a channel of strings and an error if the file does not exist or cannot be opened
6661	FileExists checks if a file exists at the specified path and returns true if it does.
6662	FileExistsInPath checks if a file exists in the system path and returns true if it does.
6663	GetPathParts returns directory path, file name, and absolute path from given path.
6664	GetThisPathParts returns directory path, file name, and absolute path of the executable.
6665	RandomString generates a random string of specified length using cryptographically secure randomness.
6666	ParseAddress extracts protocol and path from address, returns them or an error if invalid.
6667	HomeDir returns the current user's home directory or an empty string if it cannot be determined.
6668	IsTCPPortAvailable checks if a TCP port is available on localhost.
6669	RandomTCPPort returns a random available TCP port or -1 if none found
6670	HashString computes a hash value for a given key using the specified number of buckets.
6671	`Context retrieves session from request metadata and returns response or error.`
6672	Token method returns an OAuth2 token object from session data or an error if parsing fails.
6673	NewDaemon creates a new daemon instance with default options, sets PostgreSQL connection parameters, and validates input options.
6674	Close method stops server and closes resources gracefully.
6675	NewAccessTokenContext adds an access token to a context.
6676	AccessTokenFromContext extracts a token from context returning it and a boolean indicating its presence.
6677	RandomAccessToken generates a random access token using SHA3 hashing and returns it as a hexadecimal string.
6678	Init initializes a logger based on options, setting appropriate configurations and levels.
6679	Load reads a dictionary file from a given path and populates a Dic struct with various parts of the dictionary.
6680	Start initiates a storage session using provided credentials and bag data, returning a session object or an error.
6681	Get retrieves a session from storage using an access token and returns it as a Session object or an error if the session is not found or there's an issue with the database query.
6682	List retrieves sessions from storage with optional filters on expiration time.
6683	Exists checks if a resource exists using PostgreSQL and returns a boolean indicating success or failure along with any errors encountered.
6684	Abandon checks if a session exists and deletes it if found.
6685	SetValue updates a session's bag with a new key-value pair using a transaction, returning the updated bag or an error.
6686	Delete will delete sessions based on criteria and return the number of rows affected or an error
6687	Setup creates database schema and table if they don't exist, sets up indexes, and returns an error if execution fails.
6688	TearDown will drop an existing schema and return an error if it fails
6689	initJaeger initializes Jaeger tracing and returns a tracer, closer, and error.
6690	Usage prints help message to errorWriter
6691	Build constructs a DoubleArray from a list of keywords using unique IDs.
6692	Read reads a DoubleArray from an io.Reader and returns it along with any errors encountered during the process.
6693	Get will return a node from the cluster at index k or nil if out of bounds
6694	ExternalNodes filters out internal nodes from a cluster and returns the external ones.
6695	GetOther checks if a node exists and is accessible using the given access token. If found and not the local node, it returns the node and true; otherwise, it returns nil and false.
6696	GoString method returns a JSON representation of Cluster object properties.
6697	Scan method decodes input data into Bag instance or returns error for unsupported types
6698	Bag's Value method encodes bag to gob format and returns byte slice or error.
6699	Has checks if a key exists in the Bag.
6700	WriteTo method writes index table data to writer, including duplicate entries encoded in gob format, returning total bytes written and any errors encountered.
6701	ReadIndexTable reads data from a reader to populate an IndexTable object, handling errors during reading and decoding processes.
6702	New creates an ActionBar instance and registers handlers for switch_mode and inline_edit routes.
6703	RegisterAction adds an action to the ActionBar's list of global actions.
6704	Actions method adds action interfaces to ActionBar and returns a new instance
6705	Render method processes HTTP request to render action bar template with user context and actions.
6706	FuncMap returns a map of functions for rendering edit buttons in templates.
6707	EditMode checks if admin context indicates edit mode
6708	SwitchMode sets a cookie based on URL query and redirects to referrer or root.
6709	controller.InlineEdit will render "action_bar/inline_edit" template and write it to context.Writer
6710	Error method returns formatted error message including filename, line number, and message.
6711	ParseFile opens a file and parses its contents into machines and macros, returning any errors encountered.
6712	FindMachine searches for a named machine in a file, returning it or a default if not found.
6713	New creates a Kace instance from a map of initialisms, sanitizes it, and returns an error if the trie creation fails.
6714	Camel converts a string to camel case using the Kace struct's transformation rules.
6715	Pascal method converts string to Pascal case using camelCase helper function
6716	Snake method converts a string to snake_case format using a helper function.
6717	SnakeUpper converts a string to snake case with uppercase delimiters
6718	Kebab converts a string to kebab case using a helper function.
6719	KebabUpper converts a string to kebab-case with uppercase letters.
6720	isPathSafe checks if a URL path is safe by parsing it, unescaping, checking for "..", and matching against a whitelist pattern, returning an error if any condition fails.
6721	Start will record the start time and details of an HTTP request
6722	ParseAuthHeaders extracts authentication credentials from HTTP headers or query parameters, returning them as AuthCreds or errors for invalid formats.
6723	Tracer sets a new tracer on a client and returns an error if it fails
6724	HTTPClient sets the client parameter of a Client object using an http.Client instance.
6725	BasicAuth sets up client authentication with username and password.
6726	BearerAuth sets authentication for a client using a bearer token.
6727	CookieJar sets the cookie jar on the client and returns an error if it fails
6728	SanitizerEnabled sets whether sanitization is enabled on a client and returns a ClientParam to apply this setting.
6729	OpenFile opens a file at a specified endpoint with given parameters and returns a ReadSeekCloser or an error if the operation fails.
6730	RoundTrip executes a request using the provided function and returns a response or an error.
6731	SetAuthHeader sets the Authorization header if auth is not nil
6732	FileName extracts filename from Content-Disposition header or returns empty string on error.
6733	newBuffersFromFiles creates a slice of fileBuffers from a list of Files
6734	newFileBuffer creates a buffered reader from a file
6735	rewind updates fileBuffer's Reader to use cache and File.Reader sequentially
6736	ConvertResponse will convert a response object and wrap any errors encountered during the conversion process. If no error occurs, it returns the converted response along with any additional error information from the response.
6737	Set will update BoolOption's Value from a string, setting Source and Defined flags.
6738	WriteAnswer updates BoolOption with a boolean value from an interface, setting Defined and Source fields, or returns an error if types don't match.
6739	BoolOption's String method returns a formatted string based on whether StringifyValue is true or false.
6740	TriggerIncidentKey invokes trigger with description, key, and an empty map, returning incidentKey and any resulting error.
6741	TriggerWithDetails will call trigger with description, empty string, and details, returning incidentKey and any error encountered
6742	TriggerIncidentKeyWithDetails will call trigger with description, key, and details and return incidentKey and an error
6743	Merge combines two structs using reflection.
6744	setSource recursively sets the source for structs, maps, arrays, and slices in a given reflection value.
6745	convertString attempts to convert a string to various numeric or floating-point types, returning an error if the conversion is not possible.
6746	Do will execute a transaction using the provided database and function, committing or rolling back based on errors.
6747	NewFile creates a new file or truncates it and returns a writer.
6748	internalRun executes concurrent requests within a time limit and returns aggregated results.
6749	Row's String method returns a formatted string representation of its fields.
6750	Tabulate aggregates ResultSet data into Rows with calculated statistics.
6751	AmazonRequest sends HTTP GET to Amazon UK and returns error if failed or status code is not 200.
6752	WriteTabularData formats tabular data from a result set based on a time interval and writes it to a writer with each row separated by a newline.
6753	Reduce organizes results into time-based intervals, returning a slice of ResultSets.
6754	NewSemaphore initializes a semaphore with a given capacity and ramp-up duration, returning a pointer to the semaphore.
6755	Release decrements the semaphore count, ensuring no concurrent resizing.
6756	Resize will adjust the capacity of a semaphore, ensuring exclusive access during modification.
6757	AddOutput adds a new output container to Bench with specified interval, writer, and output function
6758	RunBenchmarks executes benchmarks using a request function, processes results, and shows progress if enabled.
6759	parseBool checks if byte slice has a valid ASN.1 boolean encoding and returns corresponding boolean value or error
6760	checkInteger validates ASN.1 integers ensuring they are minimally encoded and returns an error if invalid
6761	parseInt64 converts byte slice to int64, handling errors for invalid integers or overflow
6762	parseInt32 converts byte array to int32, checking for errors and overflow.
6763	parseBigInt converts byte slice to big.Int, handling negative numbers correctly
6764	parseBitString extracts bit string from bytes, handling padding and errors
6765	parseObjectIdentifier extracts integers from ASN.1 object identifiers and returns them as a slice, handling errors if the input is invalid.
6766	parseBase128Int parses a base 128 integer from bytes and returns it along with the new offset and an error if the integer is too large
6767	parseGeneralizedTime converts ASN.1 generalized time to a Go time.Time value and validates its serialization
6768	parsePrintableString checks each byte for validity before converting to string
6769	isPrintable checks if a byte is printable
6770	parseSequenceOf parses a byte sequence into a Go slice, handling different ASN.1 types and structures.
6771	invalidLength checks if adding length to offset exceeds sliceLength or underflows
6772	setDefaultValue sets a default value to a variable if it's optional and has a default value defined.
6773	UnmarshalWithParams will unmarshal JSON data into a Go struct using custom parameters and return the remaining data and any errors encountered
6774	parseFieldParameters parses parameters from a comma-separated string into fieldParameters.
6775	getUniversalType returns tag number, compound status, and boolean indicating success based on input type
6776	DecodeString decodes a base32 encoded string with padding.
6777	MailNotifier retrieves a mail notifier from MongoDB or returns an error if not found.
6778	SaveMailNotifier updates or inserts a mail notifier in MongoDB and logs any errors encountered.
6779	RegisterProvider registers a new auth provider and logs a critical error if it's already registered.
6780	InitDb initializes MongoDB user table logging any errors encountered.
6781	Until repeatedly executes f at a specified interval until stopCh is closed, handling panics with HandleCrash.
6782	logPanic logs a stack trace when a panic occurs.
6783	User method retrieves a user from MongoDB by username and returns the user object or an error if the user does not exist.
6784	MongoDb's Users method fetches users based on a filter and returns them along with any errors encountered during the database operation.
6785	SaveUser saves a user to MongoDB, updating if exists, and handles errors.
6786	MongoDb.DeleteUser removes a user by username, closing the connection afterward.
6787	LoadCACertFile reads a CA certificate file and returns a CertPool or an error.
6788	NewAuth creates an Auth instance with optional options and sets the authentication error handler.
6789	ValidateRequest checks TLS cert chain and ensures first peer cert matches first verified chain leaf.
6790	Process method validates request, OU, and CN, returning error if any validation fails.
6791	ValidateCN checks if the certificate's common name matches any allowed CN and returns an error if it doesn't.
6792	ValidateOU checks if the certificate's OU matches any allowed OUs and returns an error if it doesn't.
6793	KeyLen calculates the number of bytes required to represent a given uint64 value.
6794	DefaultConfig initializes a Vault client with default settings and returns a Config object containing the client.
6795	New creates a new CertSigner instance and validates its VaultClient dependency.
6796	New will create a VaultFactory instance from the given config or return an error if any required fields are missing.
6797	DefaultServiceConfig initializes a Vault client with default config and sets its address, then returns a service config with the Vault client dependency.
6798	NewService creates a new service instance from configuration, validating VaultClient dependency.
6799	Delete method unmounts a PKI backend if it exists using a Vault client.
6800	IsNoVaultHandlerDefined checks if an error indicates no vault handler is defined.
6801	New creates a new Service instance using the provided configuration, validating dependencies and returning an error if any required fields are missing.
6802	Create method saves role configuration to Vault with provided parameters.
6803	CreateJob returns a new Config object with default values.
6804	Run ensures Config has lock then runs worker, panics on error
6805	newWatcher initializes a Watcher with optional directory notifications and initial paths, syncing or adding them accordingly.
6806	Start method initializes watcher notification channel and starts watching process.
6807	Stop method closes notify\_chan and add\_chan channels if they are not nil
6808	Active checks if Watcher has any active paths.
6809	Watcher's Add method adds paths to monitor, expanding glob patterns and handling auto-watch logic.
6810	watcher watches paths and sends notifications on changes
6811	Watcher.Watching returns a list of paths being watched
6812	State returns current notifications or an empty list if no paths are set.
6813	Store will set the error in the request context if it's configured.
6814	Get retrieves an error from the request context and returns it.
6815	Catch middleware wraps handler to capture errors and pass them to a handler function.
6816	Try wraps an HTTP handler to store errors.
6817	Recover middleware to handle panics and store error information.
6818	main sends a GET request to a server, reads the response body in chunks, logs the size of each chunk, and closes the connection when done.
6819	SyncHandler returns an HTTP handler that calls Sync with the given struct and request, logging errors and waiting on the connection.
6820	connect handles HTTP requests, chooses transport based on headers, performs non-blocking connect, sends initial ping, starts ping loop, and waits for disconnection.
6821	send updates over transport ensuring thread safety
6822	NumConnections returns the number of connections while ensuring thread safety
6823	Push attempts to mark a state as 'pushing', starts a goroutine if successful, otherwise marks it as 'queued'.
6824	gopush updates JSON state, calculates changes, notifies subscribers, and manages queue throttling.
6825	NewOutForward initializes OutForward with Fluent loggers connected to config servers, sending empty logs.
6826	Run will process input and watch file events, reopening the file if necessary, handling signals and errors appropriately.
6827	New initializes a Fluent instance with default values if necessary and establishes a connection, returning any errors encountered.
6828	Close method on Fluent struct closes connection if not already closed and returns any errors encountered
6829	IsReconnecting checks if Fluent is reconnecting by locking the mutex and returning the reconnecting status.
6830	connect method attempts to establish a TCP connection using server address and port, handling both IPv4 and IPv6 formats, and logs the connection details before returning any errors encountered.
6831	Notification creates a new notifier instance with specified title, message, timeout, and empty sound path.
6832	NullNotification creates a new GNotifier with null implementation.
6833	New creates an Identity instance using provided options and generates it
6834	Issue will create a new Identity using the provided options and set the issuer to the current identity.
6835	Subject sets the subject field of a configuration using a pkix.Name value.
6836	PrivateKey sets a private key on a configuration object
6837	NotBefore sets the notBefore field of a configuration to a given time value.
6838	NotAfter sets the expiration date for a configuration option.
6839	IssuingCertificateURL appends a list of strings to the issuing certificate URL option in a configuration.
6840	OCSPServer appends OCSP server values to configuration.
6841	New initializes a Telegram bot API with the given API key, sets up channels, fetches user info, removes webhook, starts update loop, and returns the bot instance or an error.
6842	NewWithWebhook creates a Telegram bot API instance with webhook support, handling errors and setting up updates channel.
6843	Close will close the Telegram bot API connection and wait for all goroutines to finish.
6844	GetMe method retrieves user information from Telegram API and returns UserResponse object or error
6845	RunBot initializes a bot with an API key, starts listening for updates, and handles graceful shutdown.
6846	RunBotOnWebhook starts a bot on a webhook server handling updates and graceful shutdown.
6847	NewOutgoingMessage creates a new outgoing message object with default parse mode
6848	NewOutgoingLocation creates a new outgoing location message for Telegram Bot API
6849	NewOutgoingVenue constructs a new outgoing venue message with the specified details.
6850	NewOutgoingVideo creates a new video message with the given parameters.
6851	NewOutgoingVideoResend creates a new OutgoingVideo message for a Telegram bot API.
6852	NewOutgoingPhoto creates an OutgoingPhoto instance with specified parameters.
6853	NewOutgoingPhotoResend creates a new OutgoingPhoto instance with the given recipient and file ID
6854	NewOutgoingSticker creates a new outgoing sticker message with the given recipient, file name, and reader.
6855	NewOutgoingStickerResend creates a new sticker message to resend
6856	NewOutgoingVoice creates a new outgoing voice message object
6857	NewOutgoingVoiceResend creates a new outgoing voice message object with the given recipient and file ID.
6858	NewOutgoingAudio creates an OutgoingAudio struct with the given parameters.
6859	NewOutgoingAudioResend creates a new OutgoingAudio object with specified recipient and fileID.
6860	NewOutgoingDocument creates a new document message for Telegram API
6861	NewOutgoingDocumentResend creates a new document message to be sent
6862	NewOutgoingForward creates a new OutgoingForward object for forwarding messages in Telegram.
6863	NewOutgoingChatAction creates a new OutgoingChatAction instance with the given parameters
6864	NewOutgoingUserProfilePhotosRequest creates a new request to get user profile photos.
6865	NewOutgoingKickChatMember creates a new outgoing kick chat member object
6866	NewOutgoingUnbanChatMember creates a new unban chat member request for Telegram API
6867	NewOutgoingCallbackQueryResponse creates a new outgoing callback query response object for Telegram bot API.
6868	NewInlineQueryAnswer creates a new InlineQueryAnswer object for TelegramBotAPI
6869	Type determines the message type based on its fields.
6870	Type method determines update type based on message, inline query, or chosen result returning UnknownUpdate if none match.
6871	MarshalJSON will convert Recipient to JSON format, returning byte array or error
6872	querystring method constructs a map with URL if set and returns it as a querystring object
6873	getBaseQueryString constructs a querystring based on recipient type and ID
6874	getBaseQueryString constructs a URL query string from outgoing message parameters.
6875	querystring constructs a query string from OutgoingAudio properties
6876	querystring method constructs a querystring from outgoing photo properties
6877	querystring method constructs a URL query string from user ID, offset, and limit fields of OutgoingUserProfilePhotosRequest.
6878	querystring constructs a URL query string from outgoing video properties.
6879	querystring constructs a query string from OutgoingVoice's properties
6880	NewInlineQueryResultArticle constructs an InlineQueryResultArticle object with specified ID, Title, and Text.
6881	NewInlineQueryResultPhoto creates a new photo result for an inline query
6882	NewInlineQueryResultGif creates a new GIF inline query result with specified ID, GIF URL, and thumbnail URL.
6883	NewInlineQueryResultMpeg4Gif creates a new instance of InlineQueryResultMpeg4Gif with the given ID, mpeg4URL, and thumbURL.
6884	NewInlineQueryResultVideo creates a new inline query result video object with specified parameters.
6885	Send sends a request to retrieve user profile photos and returns the response or an error
6886	Send sends a chat action and returns an error if it fails
6887	Send sends an inline query answer and returns an error if it fails.
6888	Send method sends a chat member kick request and checks response for errors
6889	Send method sends unban chat member request and checks response error
6890	Send sends a callback query response using an API and checks the response for errors.
6891	NewAPIClient initializes an APIClient with default HTTPClient if none provided and sets up API services.
6892	BeforeInsert updates CreatedAt and UpdatedAt to current time and returns nil
6893	ColumnName formats column name based on dialect rules, quoting if necessary.
6894	New creates a new DB instance using the given dialect and data source name, returning an error if it fails to open the database connection.
6895	From will create a new From instance from a struct argument and panic if the argument is not a struct or its pointer.
6896	Where method on DB struct returns a Condition instance with applied where clause
6897	newCondition(db) creates a Condition instance and calls its OrderBy method with the given arguments
6898	Limit sets the limit for database query results
6899	Offset method sets the offset for database query and returns a condition object
6900	JoinCondition will join a table to the database and return the join condition object
6901	Count method returns a Function instance with "COUNT" name and arguments.
6902	Update method updates a database record based on the object's fields and returns the number of affected rows.
6903	Delete method deletes objects from database, returns affected rows and error if any.
6904	Begin starts a new transaction and locks the database.
6905	Commit locks the database, checks if a transaction exists, commits it, sets tx to nil, and returns any errors.
6906	Quote method returns a quoted version of the input string using the database dialect's quoting mechanism.
6907	SetLogOutput sets the logger's output to the specified writer or uses a default logger if the writer is nil.
6908	selectToSlice reads SQL rows into a slice of structs, handling pointers and nested types
6909	selectToValue reads data from sql.Rows into a Go struct, handling pointer types and returning the value and any errors encountered
6910	fieldIndexByName recursively finds the index of a struct field by name, returning an empty slice if not found.
6911	columns constructs SQL column names from input interfaces, handling distinct and raw types
6912	tagsFromField extracts tags from a struct field, skipping if tagged to skip.
6913	hasSkipTag checks if a struct field's tag indicates it should be skipped
6914	hasPKTag checks if a struct field has the "pk" tag in its database tags.
6915	isAutoIncrementable checks if a struct field type is auto-incrementable
6916	collectFieldIndexes gathers field indexes from a struct type, excluding unexported fields and those skipped or marked as primary keys without auto-increment.
6917	findPKIndex will recursively search through struct fields to find primary key indices, appending them to the provided index slice.
6918	`sizeFromTag extracts the size from a struct field tag and returns it as a uint64 along with any parsing errors.`
6919	columnFromTag retrieves a database column name from a struct field's tag or converts the field name to snake case
6920	defaultFromTag extracts a default value from a struct tag and formats it according to the database dialect.
6921	Where appends a WHERE clause to the query based on the condition and returns the modified Condition object
6922	append "And" condition to query
6923	append OR condition to query
6924	Like appends a LIKE query to Condition and returns it
6925	appendQuery method adds a BETWEEN condition to the Condition object and returns it
6926	`OrderBy` method constructs SQL `ORDER BY` clause from table, column, and order options.
6927	Limit sets a limit on the query and returns the modified Condition object
6928	Offset method adjusts condition query by appending an offset parameter.
6929	SetFormat updates the logger's format with a new template and returns an error if parsing fails.
6930	Print logs with optional arguments and measure execution duration
6931	Print method does nothing and returns nil
6932	Quote wraps a string in backticks and escapes any existing backticks within the string.
6933	SQLType determines PostgreSQL data types based on Go interface values and options, returning type name and nullability.
6934	New creates an archive from a file based on its extension, returning a zip or tar archive.
6935	Disconnect method handles host disconnection, ensuring handle validity before calling VixHost_Disconnect and setting it to invalid afterward.
6936	nextNetworkAdapterID finds the next available network adapter ID from a VMX configuration.
6937	totalNetworkAdapters calculates the highest ethernet adapter number from VMX settings
6938	RemoveAllNetworkAdapters deletes all ethernet adapters from a VMX file and returns an error if it fails.
6939	RemoveNetworkAdapter will remove a network adapter from the VM's vmx file and return an error if the operation fails or the VM is running.
6940	NetworkAdapters retrieves VM network adapters from the VMX file and returns them as a list.
6941	newArchive creates a new Archive object from a given path and optional password, parsing the archive list output using 7z command.
6942	GetFileReader searches for a file in an Archive and returns a reader or an error if not found.
6943	ExtractToWriter extracts a file from an archive to a writer and returns any errors encountered.
6944	ExtractToFile creates a file at dstPath and extracts the specified archive entry to it, returning any errors encountered.
6945	SharedFoldersParentDir retrieves the parent directory of shared folders, returning an error if unsuccessful.
6946	Name returns snapshot's display name or error
6947	Description retrieves snapshot description from handle and returns it or an error if failed.
6948	cleanupSnapshot releases a VIX handle if it's valid and sets it to invalid.
6949	BusTypeFromID determines the VMX bus type based on the ID prefix.
6950	Read method reads VMX file data, unmarshals it to VirtualMachine model, and sets it in VMXFile instance.
6951	Write will create a file, marshal VMX data, write it to the file, and return any errors encountered.
6952	NewVirtualMachine creates a new virtual machine instance from a VMX file and Vix handle, returning an error if the VMX file cannot be read.
6953	Vcpus method retrieves the number of virtual CPUs for a VM and returns it as a uint8, handling errors appropriately.
6954	VmxPath retrieves the VMX file path from a virtual machine handle, returning it as a string or an error if unsuccessful.
6955	MemorySize retrieves VM memory size and returns it along with any errors encountered.
6956	VM ReadOnly checks if VM is read-only and returns boolean and error if failed
6957	InVMTeam checks VM's team status and returns bool and error
6958	PowerState retrieves VM power state and handles errors.
6959	get vm tools state returns current tools state or error
6960	IsRunning checks VM status and returns whether it's running or an error if failed
6961	GuestOS retrieves the guest OS name from VM handle, returning an error if unsuccessful.
6962	cleanupVM releases the VM handle if it's valid and sets it to invalid
6963	updateVMX applies a function to modify VMX settings, ensuring VM is off and handling errors during file operations.
6964	SetMemorySize updates VM memory size ensuring it's divisible by 4 before applying changes through updateVMX.
6965	SetNumberVcpus sets the number of virtual CPUs for VM model, ensuring at least one CPU.
6966	SetDisplayName updates VM's display name and returns an error if update fails.
6967	SetAnnotation updates VM's annotation field and returns error if update fails.
6968	SetVirtualHwVersion updates VM's hardware version and compatibility model.
6969	Error method returns formatted error message containing text, code, and operation details
6970	Errorf constructs an error from a message and arguments, wrapping it with additional information.
6971	Error method returns error message with stack trace for traceableError
6972	string method returns stack frame details as formatted string
6973	newStackFrame creates a stack frame from a program counter, extracting file, line, package path, and function signature.
6974	captureStack captures stack traces skipping specified number of entries up to max depth returning slice of stack frames
6975	parseFuncName extracts package path and signature from function name using regex
6976	Stack logs an error along with its stack trace.
6977	StackWithCaller logs an error along with its call stack, optionally including the package name.
6978	Write method executes before functions then delegates to Writer's Write method.
6979	ResponseStatus retrieves the HTTP status code from a response writer.
6980	httpResponseStruct recursively finds the http.response type within a struct or pointer.
6981	SetDetectedContentType sets or detects content type and returns it
6982	New method sets HTTPCode, Errno, and Message fields of ServerError instance and returns it.
6983	New creates a new DBError instance with the specified database name and message, setting HTTPCode to 500 and Errno to 0.
6984	New method initializes ValidationError with specified message, setting HTTPCode to Bad Request and Errno to zero.
6985	New creates a new NotFoundError instance with specified message and sets HTTPCode to 404.
6986	StrLength checks field length and returns string or panics on validation failure.
6987	StrLenIn checks if the length of a string matches any specified lengths and returns the string or panics with an error if it doesn't.
6988	StrIn checks if a field's string value matches any given options and returns it or panics with validation errors.
6989	GetEmail retrieves email from input ensuring it's valid and returns it or panics on error.
6990	MostSpecificType returns the most specific type from a list or an error if none are provided
6991	FullTypeHierarchy returns a slice of type URIs from highest to lowest level.
6992	SortTypes sorts strings hierarchically and returns them or an error if invalid.
6993	Delete removes a key from redisStore and refreshes the provider, returning any errors.
6994	Set method updates Redis store with given key and values, returning updated store and any errors encountered.
6995	refresh updates Redis store with values and expiration time
6996	redisProvider's Get retrieves a redisStore from a pool, populating it with values from a hash and returning any errors encountered.
6997	redisProvider's Destroy method removes a session ID from Redis and returns an error if unsuccessful
6998	UpExpire sets expiration time for a session ID in Redis and returns an error if it fails
6999	Use appends a router handler to the stack's handlers list
7000	ServeHTTP handles HTTP requests, sets response headers, recovers from panics, processes handlers, and cleans up context.
7001	Use adds middleware to a router group and returns the router object.
7002	Group creates a new router group with combined handlers and calculated absolute path.
7003	Run initializes services, parses flags, sets logging, configures routing, starts a graceful HTTP server, and handles errors.
7004	create initializes a new Engine instance with default settings and returns it
7005	Redirect sends an HTTP redirect to the specified URL with the given status code.
7006	`Ok` method sets response status to OK and writes JSON format success message along with provided data.
7007	Fail handles errors by logging them, setting response status, and writing JSON format error response.
7008	ResStatus sets response status and returns written bytes or error if already written.
7009	Next method increments context index and calls next handler if not written and within stack bounds.
7010	GetSession retrieves the session from context data if it exists and implements IStore interface.
7011	GetBodyJSON reads request body JSON or form data based on content type and stores it in ctx.BodyJSON.
7012	SetSession stores session data, generates SID and token, updates response cookie.
7013	FreshSession will expire a session key and return an error if it fails
7014	DeleteSession will remove the session by setting it to nil and updating the cookie max age to -1
7015	contextWriter's Write method marks the context as written and delegates to ResponseWriter's Write method.
7016	contextWriter's WriteHeader sets written flag and calls ResponseWriter's method
7017	New creates a new Client instance with the given PEM path and optional configurations, returning an error if any configuration fails.
7018	setAllowLargeResults updates client settings and returns no error
7019	connect method initializes BigQuery service using client credentials, returns service instance or error
7020	InsertRow inserts a row into BigQuery and returns an error if it fails.
7021	AsyncQuery sends a query to the server asynchronously and returns results through a channel.
7022	Query sends a dataset, project, and query to a client and returns results and column names or an error.
7023	stdPagedQuery performs a paginated BigQuery query and returns processed results or an error
7024	largeDataPagedQuery executes a BigQuery query in chunks, handling pagination and errors, then returns results and headers.
7025	pagedQuery sends a paginated query to a service and returns results or an error
7026	pageOverJob fetches query results in pages, handling pagination and sending data through channels.
7027	Count returns the number of rows in a specified table using a SQL query.
7028	work will process URL, depth, and fetcher to return crawl result or error
7029	subworker executes a job, handling panics and setting results or errors accordingly
7030	worker processes jobs from a pool until killed
7031	supervisor manages job lifecycle in Pool: accepting new jobs, distributing them, handling completions, and providing stats until shutdown.
7032	Run starts workers in a pool and supervises them if necessary, panicking if already started.
7033	Add will schedule a new job to the pool and wait for it to be added
7034	Wait method blocks until all workers have finished their tasks
7035	Results retrieves completed jobs from a pool and returns them as a slice.
7036	WaitForJob waits for a job from the pool and returns it or nil if no more jobs are available
7037	Status method returns pool's stats or a zeroed struct if supervisor isn't started
7038	WrapHTTPHandlerFunc converts an HTTP handler function to a custom HandlerFunc.
7039	WebSocketHandlerFunc wraps a WebSocket handler function and returns an HTTP handler function
7040	StaticFile returns a staticFile struct with the given filename and content type
7041	PreloadFile reads file content and returns it along with content type header
7042	InitHtmlTemplates will parse HTML templates using a glob pattern and return an error if parsing fails
7043	InitTextTemplates initializes text templates using a pattern and returns an error if parsing fails.
7044	Html generates a template with specified content type and character set
7045	Text creates a template with specified content type and character set, initializing it with default values if none provided.
7046	InitWatcher sets up a file watcher that triggers a callback on pattern changes or errors.
7047	CloseWatcher sends close signals to all watchers and closes the main watcher.
7048	Find method returns URL values, handler func, and view from routers based on path or nil if not found
7049	Add will add a new route to the routers with its handler and view, locking and unlocking the routers during the process.
7050	NewRouters initializes a new Routers instance with an empty map and a new linked list.
7051	NewServerMux creates a new server mux with default configurations.
7052	mux.err logs errors using custom handler if available
7053	HandleFunc adds a route handler to the server mux.
7054	handleError sets response status and data based on error type and returns true if handled
7055	Redirect sets HTTP response status and data to specified values.
7056	InitPProf initializes pprof handlers on a server mux.
7057	StartSession initializes a new session using a factory function and returns any errors encountered.
7058	combinations generates all possible combinations of selecting 'select_num' elements from 'list' using depth-first search and returns them through a channel 'c'.
7059	repeated_combinations generates all combinations of selecting 'select_num' elements from 'list' using buffered channel 'c'
7060	permutations generates all possible permutations of a given list with a specified number of elements using a channel to return the results.
7061	repeated_permutations generates all possible permutations of selecting 'select_num' elements from 'list', using a buffered channel to store results asynchronously
7062	gformat replaces placeholders in a format string with values from a map, returning the modified string and corresponding parameters.
7063	Errorm formats a message using a format string and arguments, then returns it as an error.
7064	Fprintm formats and writes a map to the given writer using the specified format string.
7065	Printm formats a message using a format string and a map of arguments, then prints it to standard output.
7066	Sprintm formats a string using a format string and a map of arguments, returning the resulting string.
7067	Validate checks if a password meets specified strength requirements and returns validation result and message.
7068	MakeRequirements analyzes password strength based on character types and total length.
7069	passwordSanityCheck verifies requirements and returns validity status and error message
7070	password generates a garbled password based on strength requirements
7071	NewPassword generates a password based on given requirements or default medium level if none provided, returning an error if requirements are invalid.
7072	NewPasswords generates n passwords based on given requirements or defaults to medium if none provided.
7073	Garbler's addNums appends random numbers to input string until desired digit count is reached.
7074	punctuate appends or prepends random punctuation to a string based on the number of punctuation marks specified
7075	deprecated_init sets Stdin based on command-line arguments or stdin mode
7076	ParamSet's Param method sets a parameter's value by name.
7077	Parse method reads JSON data from reader, unmarshals it into params, and returns an error if any issues occur.
7078	Unmarshal will decode JSON data from ParamSet reader into given variable v, returning error if decoding fails.
7079	GetDefaultHTTPClient creates an HTTP client with a specified timeout and returns it as an IHTTPClient interface.
7080	Pushy.DeviceInfo fetches device info using API and returns it along with possible errors.
7081	DevicePresence checks device presence using API and returns response or error.
7082	NotificationStatus fetches a notification's status using Pushy API and returns it along with potential errors.
7083	DeleteNotification sends a request to delete a notification and returns success or error responses.
7084	NotifyDevice sends a notification to a device using Pushy's API and returns a response or an error
7085	Assert checks a condition and logs an error with caller info if it fails.
7086	CreateFile creates a new file with specified filename and size, writing zero bytes to it and returning any errors encountered during the process.
7087	AddError to FormErrors appends an error message.
7088	AddFieldError adds an error to the specified field in FormErrors
7089	FormErrors.HasErrors checks if there are any errors or field errors present.
7090	NewError creates a new instance of FormErrors and adds an error message to it.
7091	NewFieldError creates a new FormErrors instance with an added field error.
7092	ChainHandlers applies multiple middleware functions to an HTTP handler sequentially.
7093	FinalHandler returns a handler that ignores its argument and returns the original handler.
7094	Hash reader content to generate a trimmed MD5 hash string based on specified length
7095	IsHash checks if a given string is a valid MD5 hash based on its length and characters.
7096	WithBaseDir sets a base directory option for file paths.
7097	WithFileFindFunc sets a file find function option.
7098	WithTemplateFromFiles sets file mapping for a named template option
7099	WithTemplatesFromFiles sets options using template file paths
7100	WithTemplateFromStrings sets options for named templates from multiple strings.
7101	WithTemplatesFromStrings sets templates from strings in options.
7102	WithFunction associates a function with a name and returns an Option to modify Options.
7103	WithFunctions adds functions to a template's FuncMap.
7104	WithDelims sets delimiter options for parsing.
7105	New creates templates with options, applying defaults and custom settings.
7106	RespondWithStatus renders a template with given data and status, logging errors if any.
7107	RespondTemplate calls RespondTemplateWithStatus with default status.
7108	Respond calls RespondWithStatus with status 0
7109	RenderTemplate will execute a template and return its rendered string or an error if the template is unknown or fails to execute
7110	New creates a new server instance with the given handler and options.
7111	ServeUDP assigns local address to server and serves connection.
7112	Shutdown will close the server and return any errors encountered
7113	QuicHeadersHandler wraps an HTTP handler to set QUIC headers before serving the request.
7114	GetRequestIPs extracts IP addresses from HTTP request headers and returns them as a comma-separated string.
7115	DomainRedirectHandler modifies an HTTP handler to redirect requests based on domain and HTTPS settings.
7116	New initializes a Servers instance with default options and applies additional options.
7117	Add server details to the Servers instance while locking.
7118	TCPAddr returns a TCP address for a given server name, or nil if not found.
7119	UDPAddr retrieves a server's UDP address by name, locking to ensure thread safety.
7120	Close method stops all servers concurrently and waits for their completion.
7121	Shutdown will wait for all servers to gracefully shut down, logging errors if any occur.
7122	TLSListener's Accept method returns a net.Conn, handling TLS connections or errors.
7123	NewStaticFilesHandler returns an HTTP handler that serves static files from a specified filesystem, delegating to another handler if the file is not found.
7124	ServeHTTP authenticates request, handles post-auth actions, checks validity, and delegates to handler or returns unauthorized.
7125	MarshalJSON will convert Options to JSON format and return byte slice or error
7126	UnmarshalJSON will unmarshal JSON data into options and convert durations to time.Duration type.
7127	MarshalYAML converts Options to YAML-compatible format
7128	UnmarshalYAML will unmarshal YAML data into options and set the corresponding fields in the Options struct.
7129	NewHandler wraps an HTTP handler with logging functionality, capturing request details and response status.
7130	WithPanicResponse sets panic response body and content type for handler.
7131	WithPanicResponseHandler sets the panic response handler option for a handler.
7132	New creates a new Handler instance with the given handler and options.
7133	ServeHTTP recovers from panics, logs details, notifies, and handles responses gracefully.
7134	NewContextFunc creates a closure that retrieves values from a map using keys.
7135	NewMapErrorRegistry creates a new MapErrorRegistry instance with optional error and handler maps.
7136	AddError will register an error if it's not already registered under the same code, returning an error if it is.
7137	AddMessageError will add a new error message to the registry and return it or an error if the code is already registered
7138	MustAddError adds an error to the registry or panics if it fails.
7139	MustAddMessageError will add a message error to the registry or panic if an error occurs.
7140	AddHandler registers a new error handler for a given error code and returns an error if the code is already registered
7141	MustAddHandler adds a handler to the registry or panics if it fails
7142	Handler returns a handler function based on the given error code from the registry.
7143	New creates a new Client instance with default settings and custom endpoint and error registry.
7144	Request sends HTTP request using client and returns response or error
7145	Client.JSONContext sends a JSON request and unmarshals the response.
7146	StreamContext sends a request using a client and returns the response body, content type, and any errors encountered during the process.
7147	Stream sends HTTP request and returns response data, content type, and error.
7148	JSONUnmarshal will unmarshal JSON data into a Go value, returning an error with line and column information if there's a syntax or type error.
7149	ServeTCP starts a TCP server with optional TLS and keep-alive settings, returning any errors except for ErrServerClosed.
7150	ServeTCP delegates TCP serving to the Server instance.
7151	Shutdown stops the server gracefully and returns any errors encountered
7152	HandleMethods processes HTTP requests using method handlers, sets appropriate headers, and returns responses based on request method.
7153	NewSetHeadersHandler wraps an HTTP handler to set custom headers before processing the request.
7154	New creates a Server instance with default or provided Options, setting root, dir, hashes, and mu.
7155	HashedPath returns a hashed path for a given string or the original path if hashing fails
7156	New creates a new service instance with default logger and memory store unless specified otherwise.
7157	HTMLHandler wraps an HTTP handler, checking maintenance status and serving HTML or the wrapped handler accordingly.
7158	Service's status method returns whether it's on and any associated error.
7159	Service's StatusHandler responds with maintenance status or internal server error.
7160	OnHandler checks maintenance status, logs accordingly, and sends appropriate HTTP response.
7161	OffHandler updates maintenance status and logs changes
7162	`MarshalJSON will convert PostIRCMessageRequest to JSON format and return the byte array and error if any.`
7163	`MarshalJSON converts PostArtifactRequest to JSON format.`
7164	`MarshalJSON converts PostArtifactResponse to JSON format.`
7165	`MarshalJSON will serialize a HookChangedMessage to JSON format, returning the byte slice and any encountered errors.`
7166	`MarshalJSON will convert TriggerHookRequest to JSON format`
7167	TriggerHookResponse's MarshalJSON method returns JSON representation or an error.
7168	UnmarshalJSON will update the TriggerHookResponse instance with JSON data and return an error if the input is nil.
7169	LaunchInfo's MarshalJSON method converts it to JSON using RawMessage.
7170	Var's MarshalJSON method returns JSON encoding or error
7171	MarshalJSON method converts Var1 to JSON format by calling MarshalJSON on its underlying json.RawMessage type.
7172	Var3's MarshalJSON method converts it to JSON using json.RawMessage.
7173	MarshalJSON method converts Time to JSON format ensuring the year is within the valid range.
7174	UnmarshalJSON parses JSON data to a time.Time object and assigns it to the receiver, handling fractional seconds implicitly.
7175	Write method in ReadWriteSeeker struct writes byte slice to buffer and updates position, resizing buffer if necessary.
7176	Seek updates the position within the buffer based on the offset and whence flag and returns the new position or an error if invalid.
7177	Read method from ReadWriteSeeker reads data into buffer and updates position, returns number of bytes read and error if EOF is reached.
7178	MarshalJSON method converts LaunchSpecsResponse struct to JSON format
7179	RegionLaunchSpec's MarshalJSON method converts the object to JSON format using the underlying RawMessage type.
7180	GenerateCode processes APIDefinitions, setting package names, example var names, creating directories, generating Go types and methods, and saving model data.
7181	postPopulate updates APIEntry URLs based on input/output values and appends them to schemaURLs.
7182	CreateTemporaryCredentials generates temporary credentials from permanent ones with specified duration and scopes.
7183	setURL constructs a full URL from a client's base URL, route, and optional query parameters, handling any necessary path separators and returning the resulting URL or an error if parsing fails.
7184	SignRequest method sets Authorization header for HTTP request using Hawk authentication.
7185	APICall makes an HTTP request with a payload and returns the response or an error.
7186	SignedURL generates a signed URL using client credentials, route, query parameters, and duration.
7187	HawkSignatureAuthenticationResponse's MarshalJSON method returns JSON representation or error
7188	bmw256 will compress input data using the BMW256 algorithm and return a 32-byte hash
7189	NewCubeHash initializes a CubeHash struct with predefined IV values.
7190	cubehash256 computes a hash using CubeHash algorithm for given input data and returns a 256-bit hash value
7191	Sum will compute multiple hash values from input data using Blake256, Keccak256, CubeHash256, Lyra2, Skein, and BMW algorithms, returning the final BMW hash result and any errors encountered.
7192	squeeze processes state to produce output using Blake2b hashing, copying data in blocks.
7193	reducedSqueezeRow0 updates a matrix row using a sponge state through repeated transformations
7194	reducedDuplexRow1 updates the state using values from rowIn and stores results in rowOut, applying a transformation function along the way
7195	NewReaderByteCodeLoader creates a new ReaderByteCodeLoader instance with default flags and provided parser/compiler.
7196	LoadReader will parse and compile bytecode from a reader, returning the ByteCode and any errors encountered. If AST dumping is enabled, it will print the parsed AST to stderr.
7197	NewV3 creates a version 3 UUID from a namespace and name.
7198	txLiteral updates state by setting argument and advancing operation
7199	txFetchSymbol fetches symbol from state based on current operation argument
7200	txMarkRaw will convert st.sa to raw string type if it's not already and then advance the state
7201	txUnmarkRaw modifies state to convert raw strings and advances it
7202	txPrint handles printing based on argument type, appending to output or warning if nil.
7203	txPrintRaw processes state and appends raw argument to output or warns if nil.
7204	NewLoopVar creates a new LoopVar instance with initialized properties based on the given index and array.
7205	txMakeArray creates an array from stack elements between current mark and stack tip, advancing the state.
7206	txFunCallOmni processes state based on type, calling txMacroCall or txFunCall accordingly, or warning and advancing if unknown.
7207	Toggle AST dump flag based on boolean input
7208	DumpByteCode toggles the MaskDumpByteCode flag on or off based on the boolean input.
7209	Optimize bytecode by replacing certain operations with optimized ones.
7210	NewFuncDepot creates a new FuncDepot instance with the given namespace and initializes its method map.
7211	Get retrieves a function from the FuncDepot by key and returns its reflect.Value and presence.
7212	Set method stores a value in the FuncDepot using a key
7213	NewFileTemplateFetcher returns a FileTemplateFetcher with absolute file paths or an error if any path is invalid.
7214	LastModified returns the last modified time of the file at Path, caching the result for up to 1 second.
7215	Reader method opens file source and returns file handle or error
7216	Bytes method reads all data from FileSource's reader and returns it as a byte slice or an error
7217	NewState initializes and returns a new state object with default values.
7218	PushFrame adds a new frame to the state's stack and returns it.
7219	PopFrame removes the top frame from the stack and adjusts the stack accordingly.
7220	CurrentFrame returns the top frame from the state's stack or nil if empty
7221	Warnf logs a warning message using the State's warn writer.
7222	AppendOutputString writes a string to the state's output.
7223	Popmark removes the top element from the markstack and returns it as an integer.
7224	CurrentMark returns the top mark from the stack or zero if empty.
7225	LoadByteCode retrieves ByteCode using a key from Loader.
7226	Reset will clear all state data and prepare for new execution.
7227	DeclareVar pushes a variable onto the stack and returns its index.
7228	GetLvar retrieves a local variable from the stack and returns it along with an error if unsuccessful.
7229	SetLvar updates the local variable at index i with value v in the frame's stack.
7230	NewByteCode creates a new ByteCode instance with default values.
7231	Append operation to ByteCode's OpList
7232	AppendOp appends an operation to the bytecode and returns it
7233	String method returns formatted bytecode details including name and operations list.
7234	NewCachedByteCodeLoader initializes a cached bytecode loader with specified cache, cache level, fetcher, parser, and compiler.
7235	Load bytecode from cache or fetch, validate, and store.
7236	NewFileCache creates a new file cache instance with the specified directory and returns it along with an error.
7237	GetCachePath will compute the cache file path for a given key by cleaning it, removing the leading slash, and joining it with the cache directory.
7238	Get retrieves a cached entity by key, decoding it from a file and handling errors.
7239	Set will store an entity in the cache at a specified key, creating directories and handling errors gracefully.
7240	Delete will remove a file from the cache and return an error if it fails
7241	MemoryCache's Get method retrieves a CacheEntity by key, returning it or an error if missing.
7242	MemoryCache's Set method stores a CacheEntity under a given key and returns no errors.
7243	Delete removes a key from the memory cache and returns no error
7244	NewStringLexer creates a lexer for parsing strings with custom tag delimiters.
7245	NewReaderLexer creates a new lexer for parsing from a reader using custom tag delimiters.
7246	NewV4 generates a random UUID version 4 and returns it.
7247	Parse converts byte array to AST using Kolonish parser.
7248	ParseReader reads input from a reader and returns an AST or an error.
7249	Visit method returns a channel of nodes after traversing the AST.
7250	String method returns AST nodes as formatted string using buffer pool.
7251	Run will execute bytecode on VM and handle variables and output.
7252	DefaultParser sets tx.Parser based on args["Syntax"], defaulting to "TTerse".
7253	DefaultLoader configures Xslate's template loader with cache settings and paths.
7254	DefaultVM initializes a new VM with the loader from the transaction and assigns it to the transaction's VM field.
7255	Get retrieves the value associated with the given key from Args and returns it along with a boolean indicating whether the key was found.
7256	NewHTTPSource reads HTTP response body, creates an HTTPSource object, sets LastModifiedTime from header or current time, returns the object and any error.
7257	NewStringByteCodeLoader creates a new instance of StringByteCodeLoader with default flags and provided parser and compiler.
7258	LoadString parses a string template into AST and then compiles it into bytecode, returning the result or an error.
7259	Get method retrieves value from Vars using key, returns value and existence flag
7260	NewOp creates an operation with type and optional arguments
7261	MarshalBinary encodes operation details and arguments into binary format, returning the byte slice and any errors encountered.
7262	UnmarshalBinary reads binary data into op struct fields, handling different types of arguments and comments.
7263	ArgInt converts an argument to an integer.
7264	ArgString returns a string representation of the argument or converts it to a string if necessary
7265	AppendOp appends an operation to the bytecode and returns the operation
7266	Compile AST to bytecode with optimization and END opcode appended.
7267	NewV5 generates a version 5 UUID using a SHA-1 hash and a namespace UUID.
7268	LexSymbolList's Sort method sorts symbols using a custom sorter and returns the sorted list.
7269	LexSymbolSorter's Less method determines if symbol at index i has higher priority than symbol at index j.
7270	LexSymbolSorter's Swap method swaps elements at indices i and j in its list.
7271	Copy creates a new LexSymbolSet with copied values from the original.
7272	Set assigns a priority to a symbol in a lexical set.
7273	GetSortedList returns a sorted list of lex symbols based on priority and length
7274	Top returns the top element of the stack or an error if the stack is empty.
7275	Resize will adjust the capacity of the stack to the specified size while preserving its contents.
7276	Extend stack size by specified amount
7277	Stack.Grow will automatically resize the stack buffer if its current size is insufficient to meet the minimum required capacity.
7278	Get retrieves an element from the stack at index i, returning an error if the index is out of range.
7279	Set updates the stack at index i with value v and returns an error if the index is invalid or buffer needs resizing.
7280	Push adds a value to the stack resizing it if necessary
7281	Pop removes and returns the top element of a stack or nil if empty
7282	String method returns stack items as formatted string
7283	GetHostIPs fetches non-docker host IPs and returns them along with any errors encountered.
7284	GetPrivateHostIPs retrieves private IPv4 addresses from all host IPs, excluding loopbacks and public ones.
7285	IsPrivate checks if an IP address belongs to any listed private networks and returns true if it does.
7286	Environ retrieves environment variables based on flag values and returns them as strings.
7287	getenv retrieves environment variable value and checks if it exists
7288	flagAsEnv converts a given name to uppercase, prepends EnvPrefix, replaces dots and hyphens with underscores
7289	NewPolicy initializes a default policy for password validation.
7290	CreateRandom generates a random byte slice of specified length using elements from input slice.
7291	Shuffle will randomly rearrange the elements in the byte slice.
7292	Generate creates a password based on given policy rules and returns it as a string along with any errors encountered during generation.
7293	ExecutableFolder returns the path to the executable's folder or an error if it cannot be determined.
7294	Ignore will add functions to filter errors before they are logged or acted upon.
7295	Sigs sets shutdown signals for a sentinel and returns an error if already started
7296	Logf sets a logging function on a Sentinel object and returns an Option.
7297	Errorf sets the error formatting function for a Sentinel object and returns an Option.
7298	New creates a Sentinel instance with default values and applies provided options, returning an error if any option fails.
7299	Run starts Sentinel service, handles servers, and waits for shutdown signals before shutting down gracefully or returning error.
7300	Shutdown will execute all registered functions with a timeout and return the first error encountered
7301	ShutdownIgnore checks if an error should be ignored based on registered functions and returns true if it should.
7302	Register adds server and shutdown functions to Sentinel and appends error ignore functions, returning any errors encountered.
7303	Mux will start a new network listener with options and return a Netmux instance or an error if already started
7304	HTTP method starts a new server with given handler and options, returns error if already started or registration fails
7305	IgnoreError creates a function that checks if an error matches a specified error.
7306	IgnoreNetOpError checks if an error is a network operation error indicating a closed connection.
7307	convertAndAppendContextFuncs appends functions to a slice, handling different input types and returns an updated slice or an error if invalid types are encountered.
7308	router sets up HTTP routes for services, handles API data, and provides health checks.
7309	buildInfoHandler sends "build-info" response to HTTP request
7310	Encode converts input values to JSON format and returns byte array or error
7311	Json decodes JSON from request body to struct, validates it, and maps to context or interface pointer.
7312	validateAndMap validates obj, combines errors, maps them to context and optionally ifacePtr
7313	Count returns total number of errors in Overall and Fields.
7314	Header method sets CORS headers based on origin and options.
7315	PreflightHeader checks if origin, method, and headers are allowed and returns appropriate CORS headers.
7316	IsOriginAllowed checks if the given origin matches any allowed pattern in Options.
7317	Allow sets response headers based on request options and method.
7318	Renderer returns a Martini handler for rendering templates with given options.
7319	AcceptLanguages String method returns a comma-separated list of languages and their quality values or "[]" if empty.
7320	Languages sets up a Martini handler to parse and sort accept-language headers.
7321	Prefix middleware removes specified path prefix or returns 404 if prefix does not match.
7322	Basic sets up HTTP authentication using username and password.
7323	UpdateUser sets the session key to the user's unique ID and returns no error.
7324	GetById retrieves user data from the database using the provided ID and returns any errors encountered during the process.
7325	AddressToAccountId converts a Stellar address to an AccountId and returns it along with any errors encountered during the process.
7326	MutateChangeTrust updates an operation if the asset is not native, converting it to XDR format.
7327	MutateChangeTrust sets the limit of a ChangeTrust operation using a parsed amount from a string.
7328	Trust constructs a change trust operation with optional arguments and ensures a limit is set.
7329	RemoveTrust constructs a ChangeTrustBuilder with specified credit asset, limit, and additional mutators.
7330	MutatePayment updates payment or path payment operation amounts and assets based on CreditAmount values.
7331	MutatePayment updates payment destination based on operation type and returns an error for unexpected types
7332	MutatePayment updates payment or path payment operations based on the provided object and returns an error if the operation type is unexpected.
7333	MutatePayment updates a payment operation with max amount, path, and send asset from struct fields, returning an error if parsing fails.
7334	MutateAccountMerge updates the destination account ID using the address or seed from the given builder.
7335	MustParse parses a string to Int64 or panics on error
7336	Parse converts a string to an Int64 and returns it along with an error if parsing fails
7337	String converts int64 to float string with 7 decimal places
7338	CreateOffer initializes an offer with given rate and amount using ManageOffer function.
7339	CreatePassiveOffer creates a passive offer using the given rate and amount.
7340	UpdateOffer constructs a ManageOfferBuilder instance with specified parameters.
7341	DeleteOffer constructs a ManageOfferBuilder to delete an offer with specified rate and ID.
7342	ManageOffer sets PassiveOffer based on input and applies mutations before returning the result.
7343	Mutate method applies a series of mutations to the offer or operation based on their types and sets an error if any mutation fails.
7344	MutateManageOffer updates an offer's amount based on its type, returning an error if the operation is unexpected.
7345	MutateManageOffer updates ManageOfferOp's OfferId with OfferID's value or returns an error for unexpected operation types.
7346	MutateManageOffer updates an offer object based on its type and sets selling, buying, and price fields.
7347	MutateOperation sets the source account of an operation to a new AccountId and returns an error if setting fails.
7348	Price's String method returns its rational value as a formatted float string.
7349	Transaction builds a new transaction applying given mutations and default values.
7350	Mutate will apply a series of mutations to a transaction builder, setting an error if any mutation fails
7351	Hash calculates and returns the SHA-256 hash of the transaction builder's components.
7352	HashHex returns a hexadecimal representation of the transaction hash or an error.
7353	Sign method mutates transaction builder with signers and returns a new TransactionEnvelopeBuilder
7354	MutateTransaction updates transaction builder with allow trust operation and returns error
7355	MutateTransaction updates transaction with change trust operation or returns error if builder has issues.
7356	MutateTransaction updates a transaction builder with a create account operation and returns any errors encountered.
7357	MutateTransaction adjusts transaction fee and network ID if unset.
7358	MutateTransaction updates transaction builder with inflation operation or returns error
7359	MutateTransaction updates transaction operations with manage data body and returns any errors encountered.
7360	MutateTransaction updates TransactionBuilder with Offer details based on PassiveOffer flag and returns an error if any occurs
7361	MutateTransaction updates transaction memo with hash value and returns error
7362	MutateTransaction updates a transaction's memo field with the memo ID's value and returns any errors encountered.
7363	MutateTransaction updates the transaction memo with the MemoReturn value and returns any errors encountered.
7364	MutateTransaction checks memo length and sets transaction memo.
7365	MutateTransaction updates the transaction builder's network ID with the network's ID and returns no error.
7366	MutateTransaction updates transaction builder based on payment type and returns error if any.
7367	MutateTransaction updates transaction options and returns an error if failed
7368	MutateTransaction updates the transaction sequence number with the given sequence.
7369	MutateTransaction updates the transaction source account with the given address or seed and returns an error if the update fails
7370	Scan updates the Int64 value from the given source and returns an error if the type is invalid.
7371	b.InitialState returns the initial state of a ledger entry or an error if not found
7372	Changes returns ledger entry changes for a given target key.
7373	StateAfter retrieves the last change for a given key and operation index, returning the associated ledger entry or an error if no change exists or the change type is unexpected.
7374	changes filters LedgerEntryChanges matching target key up to maxOp operations
7375	MustDecode decodes a string to bytes or panics on error
7376	Encode will convert version and source data to a Base32 encoded string with a CRC16 checksum.
7377	MustEncode encodes data using a version byte and panics on error.
7378	checkValidVersionByte checks if the version byte is valid and returns an error if it's not
7379	Checksum calculates the CRC-16 checksum of data and returns it as a byte slice.
7380	Validate checks data's checksum against expected and returns an error if they don't match.
7381	LedgerKey returns the ledger key based on the change type or panics if unknown.
7382	checkPlausible verifies if each rune in prefix is part of the base32 alphabet and exits if any invalid rune is found
7383	Address method returns the encoded account ID based on its type or an empty string if the AccountId is nil.
7384	Equals checks if two AccountIds are equal based on their types and values, returning true if they match and false otherwise.
7385	SetAddress assigns a valid Stellar account ID to the AccountId instance or returns an error if the address is invalid.
7386	ToXdrObject converts an Asset to XDR format, handling different code lengths and returning appropriate XDR assets or errors.
7387	append asset to pathSend and return modified pathSend
7388	PayWith creates a new PayWithPath struct with the provided asset and maximum amount.
7389	continuedFraction converts a string to an XDR price using continued fraction approximation.
7390	Mutate applies a series of mutations to a transaction envelope builder, stopping on the first error.
7391	MutateTX applies mutators to a transaction envelope builder and updates the error accordingly.
7392	Bytes method returns serialized transaction envelope bytes or an error if marshaling fails.
7393	Base64 method encodes transaction envelope builder to base64 string and returns it along with any potential error
7394	MutateTransactionEnvelope updates transaction envelope and returns error if builder has errors
7395	MutateSetOptions will update the HomeDomain field of SetOptionsOp and return an error if the domain is too long
7396	MutateSetOptions sets the inflation destination on a SetOptionsOp object and returns an error if the operation fails
7397	MutateSetOptions updates the MasterWeight in SetOptionsOp and returns an error
7398	MutateSetOptions updates a signer's weight and public key in a transaction.
7399	SetThresholds creates a new Thresholds struct with pointers to low, medium, and high values.
7400	MutateSetOptions updates o with thresholds from m, returning an error if any threshold is invalid
7401	MutateSetOptions updates the set options with the given flag or returns an error if the flag is invalid
7402	MutateSetOptions will modify the ClearFlags field of the SetOptionsOp object based on the ClearFlag value, returning an error if the flag is invalid.
7403	MutateCreateAccount sets the account ID using the provided address or seed and returns an error if it fails.
7404	MutateCreateAccount sets the starting balance of an account using the NativeAmount's Amount field and returns an error if parsing fails.
7405	Random generates a secure seed using rand.Reader and creates a Full keypair from it, returning any errors encountered.
7406	Master derives a keypair from a network passphrase and panics on failure
7407	Parse checks if input is a valid account ID or seed and returns corresponding KP type or error.
7408	MustParse will panic if Parse returns an error, otherwise it returns a KP object
7409	MutateAllowTrust sets the authorize field of AllowTrustOp to the value of Authorize and returns nil.
7410	MutateAllowTrust modifies an AllowTrustOp asset based on the length of m.Code, returning an error if the length is invalid.
7411	MutateAllowTrust updates the trustor's account ID and returns an error if unsuccessful.
7412	ToAsset converts AllowTrustOpAsset to Asset based on its Type and returns it or panics on unexpected type.
7413	SetNative updates Asset to native type and returns error if creation fails.
7414	String method returns asset details as a formatted string
7415	Equals method checks if two assets are equal based on their type and specific fields.
7416	MustExtract will extract data from an asset and panic if an error occurs
7417	Unmarshal will delegate to xdr package's Unmarshal to convert data from reader to specified interface and return the number of bytes read and any errors encountered.
7418	Marshal will write the given value to the writer using the xdr package's Marshal function and return the number of bytes written or an error.
7419	ValidEnum checks if the input value exists in the cryptoKeyTypeMap dictionary and returns true if it does, otherwise false.
7420	NewPublicKey creates a new public key with the specified type and value, returning an error if the value is invalid.
7421	MustEd25519 returns the Ed25519 value or panics if not set.
7422	NewNodeId generates a new node ID from a public key and returns it along with any errors encountered.
7423	NewAccountId generates an AccountId from a public key and type, returning an error if invalid.
7424	ValidEnum checks if v is a valid enum value for AssetType
7425	ArmForSwitch returns asset type or "-" along with a boolean indicating if it's valid
7426	NewAsset creates a new asset based on type and validates the value accordingly.
7427	MustAlphaNum4 will return the AssetAlphaNum4 value or panic if it's not set
7428	GetAlphaNum4 retrieves AlphaNum4 asset based on type, returns it and true if found, otherwise returns zero value and false.
7429	MustAlphaNum12 will panic if Asset's AlphaNum12 is not set and return the value otherwise
7430	GetAlphaNum12 retrieves AlphaNum12 asset details if available.
7431	ValidEnum checks if v is a valid enum value for ThresholdIndexes.
7432	ValidEnum checks if v is a valid LedgerEntryType
7433	ValidEnum checks if an integer value is a valid enum in AccountFlags
7434	NewAccountEntryExt creates an AccountEntryExt instance based on integer input and an interface value, returning the created instance or an error.
7435	ValidEnum checks if v is a valid enum value for TrustLineFlags.
7436	NewTrustLineEntryExt initializes a TrustLineEntryExt struct with given values and handles specific cases based on integer input.
7437	ValidEnum checks if v is a valid OfferEntryFlags value.
7438	NewOfferEntryExt initializes an OfferEntryExt instance with given values and returns it along with any errors encountered during initialization.
7439	NewDataEntryExt creates a new data entry with an integer value and returns it along with any errors encountered during creation.
7440	NewLedgerEntryData creates a new LedgerEntryData instance based on the given type and value, returning an error if the value is invalid.
7441	NewLedgerEntryExt creates a new ledger entry with extended properties based on integer value and returns it or an error.
7442	EnvelopeType's ValidEnum checks if v is a valid enum value.
7443	ValidEnum checks if an integer is a valid enum value for OperationType.
7444	ArmForSwitch returns asset type codes based on input or "-" and false if not found
7445	NewAllowTrustOpAsset creates an AllowTrustOpAsset based on asset type and value, returning an error if the value is invalid
7446	MustAssetCode4 returns asset code as byte array or panics if not set
7447	GetAssetCode4 returns AssetCode4 if available.
7448	MustAssetCode12 returns the asset code as a 12-byte array or panics if not set.
7449	GetAssetCode12 returns AssetCode12 if available, otherwise returns zero value and false
7450	NewOperationBody creates an OperationBody based on the given OperationType and value, setting the appropriate operation type field and validating the value. If the value is invalid, it returns an error.
7451	MustCreateAccountOp returns the CreateAccountOp from OperationBody or panics if it's not set.
7452	GetCreateAccountOp retrieves CreateAccountOp from OperationBody if applicable.
7453	MustPaymentOp returns the PaymentOp from OperationBody or panics if it's not set.
7454	GetPaymentOp retrieves PaymentOp from OperationBody if armName matches.
7455	MustPathPaymentOp returns PathPaymentOp from OperationBody or panics if not set
7456	GetPathPaymentOp retrieves PathPaymentOp from OperationBody if available.
7457	MustManageOfferOp returns ManageOfferOp from OperationBody or panics if not set
7458	GetManageOfferOp returns a ManageOfferOp instance and a boolean indicating success based on the operation type.
7459	MustCreatePassiveOfferOp returns the CreatePassiveOfferOp from OperationBody or panics if it's not set
7460	GetCreatePassiveOfferOp returns a CreatePassiveOfferOp object and a boolean indicating success based on armName.
7461	MustSetOptionsOp returns the SetOptionsOp from OperationBody or panics if not set
7462	GetSetOptionsOp retrieves SetOptionsOp from OperationBody if type matches.
7463	MustChangeTrustOp returns the ChangeTrustOp value or panics if it's not set.
7464	GetChangeTrustOp retrieves ChangeTrustOp from OperationBody if type matches.
7465	MustAllowTrustOp retrieves AllowTrustOp from OperationBody or panics if not set.
7466	GetAllowTrustOp retrieves AllowTrustOp from OperationBody if type matches.
7467	MustDestination returns the destination account ID or panics if not set
7468	GetDestination retrieves the destination account ID from the operation body if the ARM name matches "Destination".
7469	MustManageDataOp returns ManageDataOp from OperationBody or panics if not set
7470	GetManageDataOp retrieves ManageDataOp from OperationBody if type matches.
7471	MemoType.ValidEnum checks if a given integer is a valid enum value based on memoTypeMap
7472	ArmForSwitch returns a string representation of a memo type and a boolean indicating success.
7473	NewMemo creates a new memo object based on type and validates the input value.
7474	MustText returns the text from Memo or panics if it's not set
7475	Memo.GetText returns text result and ok status if armName is "Text".
7476	MustId returns the ID value from Memo or panics if it's not set.
7477	GetId retrieves the ID from Memo if the Arm matches "Id".
7478	MustHash returns a hash value from Memo or panics if not set.
7479	GetHash retrieves the hash result based on the memo type, returning it along with a boolean indicating success.
7480	MustRetHash retrieves a hash value from a memo or panics if not set.
7481	NewTransactionExt creates a new transaction extension based on input values.
7482	ValidEnum checks if v is a valid CreateAccountResultCode.
7483	ArmForSwitch checks account creation result and returns success message and flag.
7484	NewCreateAccountResult initializes a CreateAccountResult with a code and returns it along with any errors.
7485	ValidEnum checks if a given integer is a valid enum value for PaymentResultCode.
7486	ArmForSwitch checks payment result and returns success status
7487	NewPaymentResult creates a new PaymentResult based on the given code and value, returning any errors encountered.
7488	ValidEnum checks if v is a valid enum value for PathPaymentResultCode
7489	ArmForSwitch returns a string and a boolean indicating success or failure based on the PathPaymentResultCode.
7490	NewPathPaymentResult initializes a PathPaymentResult based on code and value, setting appropriate fields or returning an error if the value type is incorrect.
7491	MustNoIssuer will return the asset from PathPaymentResult or panic if it's not set.
7492	GetNoIssuer returns the asset and true if no issuer is found
7493	ValidEnum checks if v is a valid enum value for ManageOfferResultCode.
7494	ValidEnum checks if v is a valid enum value for ManageOfferEffect
7495	ArmForSwitch returns "Offer" and true for specific switch values, otherwise returns empty string and true.
7496	NewManageOfferSuccessResultOffer initializes a success result based on offer effect and validates the value type.
7497	ArmForSwitch returns a success message and true if switch code is ManageOfferSuccess, otherwise it returns empty string and true
7498	NewManageOfferResult initializes a new ManageOfferResult based on the given code and value, setting the success field if applicable or returning an error if the value is invalid.
7499	ValidEnum checks if v is a valid SetOptionsResultCode enum value.
7500	ArmForSwitch checks switch status and returns empty string and true for success or default case
7501	NewSetOptionsResult initializes a new result object with a given code and value, returning it along with any errors encountered.
7502	ValidEnum checks if v is a valid ChangeTrustResultCode
7503	ArmForSwitch checks if ChangeTrustResultCode matches ChangeTrustSuccess and returns empty string and true in all cases.
7504	NewChangeTrustResult initializes a ChangeTrustResult based on code and value, handling success or other cases.
7505	ValidEnum checks if v is a valid AllowTrustResultCode
7506	ArmForSwitch checks switch result and returns empty string and true
7507	NewAllowTrustResult constructs an AllowTrustResult based on the given code and value, handling specific cases and returning the result along with any errors.
7508	ValidEnum checks if v is a valid enum value for AccountMergeResultCode.
7509	ArmForSwitch determines whether to switch based on the account merge result code and returns the corresponding source account balance or an empty string.
7510	NewAccountMergeResult initializes an AccountMergeResult based on code and value, setting appropriate fields or returning an error for invalid types.
7511	MustSourceAccountBalance will return the source account balance or panic if it's not set.
7512	GetSourceAccountBalance retrieves the source account balance from an account merge result.
7513	InflationResultCode.ValidEnum checks if a given integer is a valid enum value.
7514	ArmForSwitch returns a payout status based on inflation result code
7515	NewInflationResult initializes an InflationResult based on the given code and value, setting payouts if successful or returning an error otherwise.
7516	MustPayouts returns inflation payouts or panics if not set.
7517	GetPayouts retrieves payouts if arm name matches "Payouts".
7518	ValidEnum checks if v is a valid enum value for ManageDataResultCode.
7519	ArmForSwitch returns success message and true if switch result is successful.
7520	NewManageDataResult initializes a new ManageDataResult object with a given code and value, returning it along with any errors encountered during initialization.
7521	ValidEnum checks if a given integer is a valid enum value in OperationResultCode
7522	ArmForSwitch returns result type and success flag based on operation type
7523	NewOperationResultTr initializes an OperationResultTr based on OperationType and validates the input value accordingly.
7524	MustCreateAccountResult will return the CreateAccountResult from OperationResultTr, panicking if it's not set.
7525	GetCreateAccountResult returns CreateAccountResult and a boolean indicating success based on operation type.
7526	MustPaymentResult returns the PaymentResult or panics if it's not set
7527	GetPaymentResult returns PaymentResult and a boolean indicating success based on operation type.
7528	MustPathPaymentResult returns PathPaymentResult or panics if not set.
7529	GetPathPaymentResult retrieves the PathPaymentResult from OperationResultTr if available.
7530	MustManageOfferResult will return the ManageOfferResult from OperationResultTr and panic if it's not set
7531	GetManageOfferResult returns ManageOfferResult from OperationResultTr if armName matches.
7532	MustCreatePassiveOfferResult returns the passive offer result from OperationResultTr or panics if not set.
7533	MustSetOptionsResult returns the SetOptionsResult from OperationResultTr or panics if not set.
7534	GetSetOptionsResult returns SetOptionsResult from OperationResultTr if armName matches.
7535	MustChangeTrustResult returns the ChangeTrustResult from OperationResultTr or panics if it's not set.
7536	GetChangeTrustResult retrieves ChangeTrustResult from OperationResultTr based on Type.
7537	MustAllowTrustResult returns AllowTrustResult from OperationResultTr or panics if not set.
7538	GetAllowTrustResult retrieves AllowTrustResult from OperationResultTr based on its type.
7539	MustAccountMergeResult returns the AccountMergeResult from OperationResultTr or panics if it's not set.
7540	GetAccountMergeResult returns the account merge result and a boolean indicating success.
7541	MustInflationResult returns InflationResult or panics if not set
7542	GetInflationResult retrieves inflation result from operation result if available.
7543	MustManageDataResult returns the ManageDataResult or panics if not set
7544	GetManageDataResult retrieves ManageDataResult from OperationResultTr based on ArmForSwitch result.
7545	ArmForSwitch determines the operation result based on the switch value and returns a string and a boolean flag.
7546	NewOperationResult creates an operation result based on the given code and value, setting the appropriate fields or returning an error if the value type is incorrect.
7547	MustTr panics if arm Tr is not set and returns Tr otherwise
7548	GetTr returns Tr result and a boolean indicating success based on operation result.
7549	ValidEnum checks if v is a valid enum value for TransactionResultCode.
7550	ArmForSwitch returns a status message and a boolean indicating success based on the transaction result code.
7551	NewTransactionResultResult creates a new transaction result based on the code and value, returning an error if the value type is incorrect.
7552	MustResults returns results or panics if unset.
7553	GetResults returns operation results and a boolean indicating success based on arm name.
7554	NewTransactionResultExt creates a new transaction result with an integer value and an optional interface value, returning it and any potential errors.
7555	NewStellarValueExt creates a new StellarValueExt instance with given integer and interface values.
7556	NewLedgerHeaderExt initializes a LedgerHeaderExt instance with a version and value, returning it or an error if invalid.
7557	ValidEnum checks if v is a valid enum value for LedgerUpgradeType
7558	ArmForSwitch returns upgrade type based on input int32.
7559	NewLedgerUpgrade creates a LedgerUpgrade instance based on type and validates the value.
7560	MustNewLedgerVersion returns a new ledger version or panics if not set
7561	GetNewLedgerVersion retrieves the new ledger version based on the upgrade type, returning the result and whether it was successfully obtained.
7562	MustNewBaseFee returns the new base fee from the ledger upgrade or panics if not set.
7563	GetNewBaseFee retrieves the new base fee from the ledger upgrade if available.
7564	MustNewMaxTxSetSize returns the new maximum transaction set size or panics if not set
7565	GetNewMaxTxSetSize retrieves the new maximum transaction set size from the ledger upgrade if available.
7566	LedgerKey's ArmForSwitch method returns a string representation and a boolean indicating if the switch case matches a known type.
7567	NewLedgerKey creates a new LedgerKey based on type and validates the input value.
7568	ValidEnum checks if a given integer is a valid enum value for BucketEntryType.
7569	ArmForSwitch returns a string and a boolean based on the bucket entry type.
7570	NewBucketEntry creates a new bucket entry based on type and validates the provided value.
7571	MustLiveEntry will panic if arm LiveEntry is not set otherwise it returns the LedgerEntry
7572	GetLiveEntry retrieves the LiveEntry from BucketEntry if available.
7573	MustDeadEntry will return the LedgerKey of the dead entry or panic if it's not set.
7574	GetDeadEntry retrieves a LedgerKey if the bucket entry's arm is "DeadEntry".
7575	NewTransactionHistoryEntryExt initializes a TransactionHistoryEntryExt with a version and value, handling specific cases based on the version.
7576	ArmForSwitch returns a status based on switch value
7577	NewTransactionHistoryResultEntryExt creates a new transaction history result entry with an integer and an interface, returning the entry and any errors encountered.
7578	NewLedgerHeaderHistoryEntryExt initializes a LedgerHeaderHistoryEntryExt with a version and value, returning an error if invalid.
7579	NewScpHistoryEntry creates a new ScpHistoryEntry based on the input version and value, returning an error if the value type is invalid.
7580	ValidEnum checks if v is a valid enum value for LedgerEntryChangeType
7581	ArmForSwitch returns a string describing the type of ledger entry change and a boolean indicating success.
7582	NewLedgerEntryChange creates a new ledger entry change based on type and validates the value accordingly.
7583	MustCreated returns the created ledger entry or panics if it's not set.
7584	GetCreated retrieves the created ledger entry if available.
7585	MustUpdated returns the updated LedgerEntry or panics if it's not set.
7586	GetUpdated checks if the ledger entry type corresponds to "Updated" and returns the updated entry if so.
7587	MustRemoved returns the removed LedgerKey or panics if it's not set.
7588	GetRemoved returns the removed ledger key and true if the entry type corresponds to removal, otherwise returns zero values.
7589	MustState retrieves the ledger state or panics if not set.
7590	GetState retrieves the state from LedgerEntryChange if the arm name matches "State".
7591	NewTransactionMeta creates a new transaction meta object with the given version and value, setting the operations field if the version is 0 and the value is a valid OperationMeta slice.
7592	MustOperations returns the operations from TransactionMeta or panics if not set.
7593	GetOperations retrieves operations based on arm name and returns them along with a boolean flag.
7594	ValidEnum checks if an integer value corresponds to a valid enum in ErrorCode.
7595	ValidEnum checks if an integer value is a valid enum in IpAddrType.
7596	ArmForSwitch returns address type based on integer input, or "-" if invalid.
7597	NewPeerAddressIp creates a PeerAddressIp based on the IP address type and value, returning an error if the value is invalid
7598	MustIpv4 returns IPv4 address as byte array or panics if not set
7599	GetIpv4 extracts IPv4 address from PeerAddressIp if available.
7600	MustIpv6 returns IPv6 address or panics if not set
7601	PeerAddressIp.GetIpv6 returns IPv6 address and a boolean indicating success
7602	ValidEnum checks if an integer is a valid enum value for MessageType.
7603	ArmForSwitch returns a message type string and a boolean indicating success based on the input switch value
7604	NewStellarMessage constructs a StellarMessage based on the given type and value, returning an error if the value is invalid.
7605	MustError will return the error from StellarMessage or panic if it's not set
7606	StellarMessage.GetError returns an Error instance and a boolean indicating success based on the ArmForSwitch result.
7607	MustHello returns the Hello value or panics if not set
7608	GetHello retrieves the Hello message from a StellarMessage if the ArmForSwitch result matches "Hello".
7609	MustAuth retrieves authentication from StellarMessage or panics if not set.
7610	GetAuth retrieves authentication information from a StellarMessage if the arm name matches "Auth".
7611	MustDontHave will return the DontHave value from StellarMessage or panic if it's not set.
7612	GetDontHave returns a DontHave object and a boolean indicating success based on the message type.
7613	MustPeers returns peers from StellarMessage or panics if not set.
7614	GetPeers retrieves peer addresses from a Stellar message if the arm name matches "Peers".
7615	MustTxSetHash returns the transaction set hash or panics if it's not set
7616	GetTxSetHash retrieves the transaction set hash from a Stellar message if available.
7617	MustTxSet returns the TransactionSet from StellarMessage, panicking if it's not set.
7618	StellarMessage.GetTxSet retrieves the transaction set and indicates success if the message type corresponds to "TxSet".
7619	MustTransaction returns the transaction envelope or panics if not set.
7620	GetTransaction retrieves the transaction envelope from a Stellar message if it matches the specified arm name.
7621	MustQSetHash returns the QSetHash value or panics if not set.
7622	GetQSetHash returns QSetHash from StellarMessage if available.
7623	MustQSet returns the quorum set from StellarMessage or panics if not set
7624	GetQSet retrieves a QuorumSet from a StellarMessage if its type corresponds to "QSet".
7625	MustEnvelope will return the envelope from StellarMessage or panic if it's not set.
7626	GetEnvelope retrieves the envelope from a StellarMessage if it matches the specified type.
7627	MustGetScpLedgerSeq returns SCP ledger sequence or panics if not set
7628	GetGetScpLedgerSeq returns the SCP ledger sequence number if available.
7629	ArmForSwitch returns a switch version and a boolean indicating if it's valid
7630	NewAuthenticatedMessage constructs an authenticated message from a version and value, handling specific versions and type assertions.
7631	ValidEnum checks if v is a valid enum value for ScpStatementType.
7632	ArmForSwitch returns a string representation and a boolean indicating if the switch case was found
7633	NewScpStatementPledges creates a new SCP statement pledge based on type and value, returning an error if the value is invalid.
7634	MustPrepare ensures arm Prepare is set and returns its value or panics otherwise.
7635	GetPrepare retrieves Prepare statement from ScpStatementPledges based on Type.
7636	MustConfirm returns confirmed SCP statement or panics if not set
7637	GetConfirm returns a confirmation statement and whether it's valid based on the statement type.
7638	MustExternalize returns externalized value or panics if not set.
7639	GetExternalize returns externalize statement and true if found, otherwise returns default values
7640	MustNominate returns the nomination value or panics if not set
7641	GetNominate retrieves nomination from SCP statement if type matches.
7642	SafeUnmarshalBase64 decodes a base64 string into a given destination while ensuring full consumption of input data.
7643	SafeUnmarshal reads data into dest and returns an error if not fully consumed.
7644	SendAmount calculates the total bought amount for the first asset in successful offers.
7645	LoadAccount fetches an account using its ID from the server and decodes the response into an Account object, handling errors appropriately.
7646	SequenceForAccount retrieves an account's sequence number from the server and returns it as an xdr.SequenceNumber. If there's an error during loading or parsing, it returns an error.
7647	SubmitTransaction sends a transaction envelope XDR to the server and returns the response or an error.
7648	Equals checks if two LedgerKeys are equal based on their type and specific fields.
7649	SetAccount updates key with new account info and returns error if failed
7650	SetData assigns account and name to key, returns error on failure
7651	SetOffer updates a ledger key with an offer account ID and ID, returning an error if the operation fails
7652	SetTrustline updates key with a new trustline entry and returns error if failed
7653	Add method appends key-value pairs to CHDBuilder instance
7654	tryHash updates a hash table by adding new entries and checking for duplicates, returning true if successful.
7655	HashIndexFromKey calculates hash index from key using hasher and bucket count.
7656	ReadInt reads a 4-byte little-endian integer from sliceReader and returns it as a uint64
7657	Read reads from reader r and returns a *CHD or an error if reading fails
7658	Get retrieves a value from a hash table using a key, returning the value or nil if the key is not found.
7659	Iterate will return an iterator or nil if no keys exist
7660	Write method serializes CHD data to writer using binary format.
7661	RegisterDatasources converts path to CString registers mapnik datasources returns error if registration fails
7662	RegisterFonts will register fonts from a given path and return an error if registration fails
7663	New initializes a Map struct with default dimensions.
7664	NewSized creates a new Map instance with specified width and height.
7665	Load stylesheet into map and return error if failed
7666	Resize method adjusts map dimensions using C library and updates local width/height properties
7667	Free will release the memory associated with the map and set the internal pointer to nil
7668	SRS retrieves the spatial reference system of a map.
7669	ZoomAll method on Map struct calls C mapnik_map_zoom_all and returns last error or nil
7670	ZoomTo adjusts map zoom based on specified bounding box coordinates.
7671	Render map to image with optional scaling and format conversion
7672	RenderImage will generate an NRGBA image from a Map object with specified render options, handling scaling and errors gracefully.
7673	RenderToFile will render a map to a file using specified options and return an error if it fails.
7674	SetBufferSize sets the buffer size of the map using a C function.
7675	Search sends a query and returns matching responses within a timeout.
7676	Get retrieves a connection from a blocking pool, returning an error if the pool is closed or times out.
7677	put adds a connection to the blocking pool or closes it if the pool is closed or the connection is unusable.
7678	MonoToStereoF32 converts mono audio to stereo by duplicating each sample and updating buffer properties.
7679	BitCrush reduces audio buffer resolution based on a factor.
7680	NormalizeMax scales audio buffer data to have maximum absolute value of 1
7681	Gain adjusts each sample in a buffer by multiplying it with a given factor and returns an error if the buffer is invalid.
7682	MonoDownmix reduces stereo audio to mono by averaging channel data.
7683	Quantize adjusts audio data to specified bit depth by rounding values.
7684	PCMScale scales audio data based on bit depth and returns an error if the buffer is invalid
7685	StereoPan adjusts audio buffer's channels based on pan value, returning error if invalid input.
7686	Leader method returns the current leader string after acquiring lock on Follower object
7687	IsLeader checks if candidate is leader using mutex lock
7688	NewResponse constructs a new Response object with provided parameters.
7689	GetRequestID retrieves request ID from context or returns error if not found
7690	Log method calculates duration, sets default code, filters logs, formats message, and prints it to writer.
7691	SendMailSSL establishes an SSL connection to send an email, handling authentication and errors.
7692	Send email using SMTP with specified message details.
7693	WaitForIt attempts to establish a TCP or HTTP connection within a specified timeout period and returns any encountered errors.
7694	Get reads a configuration from a source or file, unmarshals it, retrieves an environment-specific configuration, and returns it or an error.
7695	initConfig sets up Viper configuration with specified file or default paths, reads and prints the used config file
7696	WritePluginResultsToDatabase inserts or updates plugin results in a database.
7697	NewAuthController initializes and returns an AuthController instance with UserManager and Config.
7698	Authenticate processes HTTP requests to authenticate users, generating JWTs upon successful validation.
7699	NewOAuth2Controller initializes and returns a new instance of OAuth2Controller with the given ApplicationManager and Config.
7700	Refresh token endpoint validates parameters, parses JWT, generates new token, and returns it in JSON format.
7701	OAuth2Controller's Token method handles OAuth2 token requests, validates parameters, decodes codes, generates tokens, and returns them or errors accordingly.
7702	Logging middleware logs HTTP requests with client IP, latency, response length, and status code.
7703	SingleFile returns an HTTP handler serving a single file.
7704	Write data to response writer and update length
7705	Hijack method returns net.Conn and bufio.ReadWriter or an error if w is not a Hijacker
7706	NewMongo creates a MongoDB client from a configuration file and environment, handling authentication and connection errors.
7707	Disconnect method will close MongoDB connection and log error if it fails.
7708	New initializes a new Table struct with given fields and empty rows and field sizes map.
7709	PrintTable prints a table with given fields and rows.
7710	PrintHorizontal prints a table of key-value pairs from a map.
7711	PrintRow prints a table row using specified fields and data.
7712	AddRow adds a new row to the table, formatting values as strings and calculating sizes.
7713	Print will display table rows and footer with calculated sizes and dashes based on options.
7714	String method generates a formatted table string based on input rows and footer, optionally including a title and markdown formatting.
7715	getHead constructs a header row for a table by concatenating field names in title case.
7716	rowString constructs a table row from a map of field values
7717	fieldString adds padding to align table fields based on predefined sizes.
7718	stringTableDash returns a dash representation based on Markdown flag
7719	printMarkdownDash prints a markdown table row with dashes based on field sizes.
7720	stringMarkdownDash generates a markdown dash row based on field sizes
7721	HashPassword generates a hashed password using scrypt with given salt and parameters.
7722	EncodeOAuth2Code generates a JWT token containing clientID, redirectURI, userID, expiration, and random string, signed with HS512 algorithm using sharedKey.
7723	DecodeOAuth2Code verifies and decodes a JWT using a shared key, returning a response or an error.
7724	NewServer initializes a server with configuration from a file and sets up logging based on the config.
7725	Start will initiate a server, listen for connections, serve HTTP or HTTPS, handle errors, and shutdown gracefully.
7726	Stop method stops the server if it's started, otherwise returns an error indicating it's not running.
7727	NewLoggingServeMux creates a new logging serve mux with the given configuration.
7728	Handler returns the handler for the given request along with the matching pattern.
7729	LoggingServeMux handles routes with logging.
7730	LoggingServeMux handles HTTP requests using a pattern and a handler function.
7731	Init initializes Elasticsearch connection and creates index if it doesn't exist.
7732	WaitForConnection attempts to establish a connection to Elasticsearch within a specified timeout, retrying every second until successful or the timeout is reached, returning an error if unsuccessful.
7733	StoreFileInfo saves file info to Elasticsearch and returns response or error.
7734	StorePluginResults stores plugin results in Elasticsearch, updating existing records or creating new ones based on the ID.
7735	CamelCase converts a string to camel case format by splitting it into chunks based on regex and capitalizing each chunk except the first one.
7736	Getopt retrieves environment variable or default value.
7737	Getopts returns user input or environment variable value or default value.
7738	GetSHA256 calculates and returns the SHA-256 hash of a file's contents.
7739	RunCommand executes a command with optional context and returns its output or an error.
7740	RemoveDuplicates removes duplicates from a list of strings and returns the unique ones.
7741	Unzip will extract files from a zip archive to a specified target directory, handling directories and returning an error if extraction fails
7742	SliceContainsString checks if a string exists within a slice of strings and returns true if found.
7743	NewSMTP creates an SMTP client from configuration file and environment, handling SSL if needed.
7744	SendMail sends an email using SMTP server details and returns an error if sending fails.
7745	GetEnvironment retrieves configuration based on environment name from SMTPEnvironment.
7746	GetSMTP retrieves SMTP configuration from source based on environment, returning it and any errors encountered.
7747	GetConfig retrieves server configuration from source based on environment.
7748	GetEnvironment retrieves configuration for a specified environment from the Environment struct, returning the configuration or nil if not found.
7749	GetMongo retrieves MongoDB configuration from source based on environment.
7750	TokenHandler wraps HTTP handlers to validate JWT tokens before serving requests, redirecting unauthorized access to the root path.
7751	Receive method processes XMPP stanzas, parses JSON, handles different message types, and sends acknowledgments as needed.
7752	Send will marshal and send an OutMsg over XMPP, generating a message ID if needed.
7753	allBoshReleaseNames combines release names from two maps and returns them as a slice
7754	AddedProperty updates DeltaJob's AddedProperties map with the given name and property.
7755	RemovedProperty updates DeltaJob's RemovedProperties map with the given name and property.
7756	AddDeltaJob appends a DeltaJob to Result's DeltaJob slice
7757	Concatenate DeltaJob slices from two Result objects.
7758	Read will open a file from a release location and return a reader-closer or an error if it fails
7759	Pull will download a release from a specified location and return the filename and any errors encountered.
7760	BuildJob serializes job metadata to JSON, creates job files, writes monit and spec files, and returns any errors encountered.
7761	LoadBoshRelease reads a BOSH release file from the given path using the provided release repository and returns the parsed BoshRelease object along with any errors encountered.
7762	readBoshRelease reads a BOSH release from a reader and returns it along with any errors encountered.
7763	readBoshRelease reads a BOSH release from a reader, decoding the manifest and jobs.
7764	readBoshJob reads a BOSH job manifest from a reader and returns it along with any errors encountered
7765	NewRequest creates an HTTP request with authentication set.
7766	PushCloudConfig sends a manifest to BOSH and returns an error if unsuccessful.
7767	Generate will process job manifest, create object fields, generate structs, and write them to disk.
7768	CreateNewRecord constructs a new record from a property string and YAML data, splitting the property by "." and storing the elements and metadata in the record.
7769	NewShowCmd initializes and returns a new ShowCmd instance with provided release repo and release details.
7770	All checks the file extension of the release and prints the BOSH release details to the writer.
7771	GetDefaultTaskImageResource returns default image resource configuration
7772	AddRawJob appends a raw job to the pipeline's jobs list
7773	AddGroup method adds a group with a name and jobs to the ConcoursePipeline.
7774	GetResourceByName returns a resource config from a pipeline by name or nil if not found
7775	AddRawResource adds a resource to the pipeline's resources list
7776	AddResource appends a new resource configuration to the pipeline's resources list.
7777	AddGithubResource adds a GitHub resource to the pipeline
7778	AddBoshIOResource adds a BOSH IO resource to the pipeline
7779	AddBoshDeploymentResource adds a bosh deployment resource to the pipeline
7780	AddGitResource adds a git resource to the pipeline
7781	allJobNames returns a list of unique job names from two BOSH releases.
7782	NewDeploymentManifestFromFile reads a file and returns a deployment manifest object.
7783	NewDeploymentManifest parses byte slice to DeploymentManifest object
7784	AddRemoteRelease adds a new release to the DeploymentManifest and returns an error if it fails
7785	AddRemoteStemcell method appends a new stemcell to DeploymentManifest's Stemcells slice
7786	Tag retrieves the value associated with a key from the Tags map of a DeploymentManifest object, returning an empty string if the key does not exist.
7787	RemoveTag removes a tag from the deployment manifest if it exists
7788	LoadPivnetRelease pulls a release from a repository, initializes a PivnetRelease object, reads the release data, and returns it along with any errors encountered.
7789	BoshReleaseOrEmpty returns the BoshRelease for a given name or an empty one if it doesn't exist
7790	readPivnetRelease reads a BOSH release from a zip file at the specified path and stores it in the PivnetRelease's BoshRelease map
7791	decodeYaml reads YAML data from a reader and unmarshals it into a Go value, returning any errors encountered.
7792	NewZipWalker creates a new ZipWalker instance initialized with the specified zip file path and empty callbacks map.
7793	NewDiffCmd creates a new DiffCmd instance with specified release repository and releases.
7794	All method generates a diff between two releases and prints it to the writer.
7795	Job method runs a job using DiffCmd and prints the result to a writer, returning any errors encountered.
7796	New creates a differ based on the release type and paths, returning an error if unsuccessful.
7797	StructName determines struct name based on index and package name, considering parent elements and properties.
7798	TypeName returns the type name of the element at index i considering its parent elements and properties. If i is out of bounds, it returns "interface{}".
7799	NewTgzWalker initializes a new TgzWalker with the given reader and empty callbacks map.
7800	NewBackoff creates a new backoff instance with given strategy, start duration, and limit duration.
7801	Reset will set backoff count and duration to initial values and calculate next duration
7802	NewExponential creates a new backoff strategy with exponential delay between retries.
7803	NewExponentialFullJitter creates a new backoff strategy with exponential full jitter algorithm.
7804	NewLinear creates a new linear backoff instance with specified start and limit durations.
7805	GetLineSize calculates the size of a line on a Sapin based on floor and line numbers
7806	GetMaxSize returns the maximum size by calling GetLineSize with calculated parameters.
7807	compute will generate a sapin tree representation using asterisks and pipes based on the Sapin struct's properties
7808	Set timeout on PostAppsParams and return it
7809	WithContext sets the context for PostAppsParams and returns it
7810	WithHTTPClient sets the HTTP client for PostAppsParams and returns it.
7811	Set body for PostAppsParams and return updated instance
7812	WithTimeout sets the timeout on GetAppsAppParams and returns it.
7813	WithContext sets the context for GetAppsAppParams and returns the updated object
7814	WithHTTPClient sets the HTTP client for GetAppsAppParams and returns itself.
7815	WithApp sets the app parameter and returns the modified GetAppsAppParams object
7816	UnmarshalBinary converts binary data to RouteWrapper using JSON and updates the current instance.
7817	WithTimeout sets timeout on GetAppsParams and returns it
7818	WithContext sets the context for GetAppsParams and returns it
7819	Set HTTP client for GetAppsParams and return modified instance
7820	WithTimeout sets the timeout duration on DeleteAppsAppParams and returns it
7821	WithContext sets the context for DeleteAppsAppParams and returns it
7822	Set HTTP client for DeleteAppsAppParams and return it
7823	WithApp sets the app field and returns the updated object
7824	WithTimeout sets the timeout on the route parameters and returns the updated object
7825	WithContext sets the context for the route parameters and returns the updated object
7826	Set HTTP client for route parameters and return updated params
7827	WithApp sets the app field and returns the updated route params object
7828	WithBody sets the body for PatchAppsAppRoutesRouteParams and returns it.
7829	Set route on PatchAppsAppRoutesRouteParams and return it
7830	WithTimeout sets the timeout on PostAppsAppRoutesParams and returns it.
7831	WithContext sets the context for PostAppsAppRoutesParams and returns it
7832	WithHTTPClient sets the HTTP client and returns the modified object
7833	WithApp sets the app parameter on the PostAppsAppRoutesParams object and returns it
7834	WithBody sets the body on PostAppsAppRoutesParams and returns it.
7835	WithTimeout sets timeout on PutAppsAppRoutesRouteParams and returns it
7836	WithContext sets the context for PutAppsAppRoutesRouteParams and returns it.
7837	WithApp sets the app parameter on the PutAppsAppRoutesRouteParams object and returns it.
7838	Set body on PutAppsAppRoutesRouteParams and return it
7839	WithRoute sets the route on PutAppsAppRoutesRouteParams and returns it.
7840	WithTimeout sets the timeout for GetAppsAppRoutesParams and returns the updated params
7841	WithContext sets the context for GetAppsAppRoutesParams and returns it
7842	WithHTTPClient sets the HTTP client and returns the updated params object.
7843	WithApp sets app parameter and returns modified GetAppsAppRoutesParams instance
7844	WithTimeout sets the timeout on PatchAppsAppParams and returns the updated object
7845	WithContext sets the context on PatchAppsAppParams and returns it.
7846	WithHTTPClient sets the HTTP client for PatchAppsAppParams and returns it
7847	WithApp sets app on PatchAppsAppParams and returns it
7848	WithBody sets the body of PatchAppsAppParams and returns the modified instance
7849	WithTimeout sets timeout on PutAppsAppParams and returns it
7850	WithContext sets the context for PutAppsAppParams and returns it
7851	WithApp sets the app parameter and returns the updated PutAppsAppParams object
7852	WithBody sets the body and returns the updated PutAppsAppParams object
7853	UnmarshalJSON unmarshals JSON data into Task and its embedded fields, returning an error if parsing fails.
7854	MarshalJSON converts Task to JSON by combining parts of NewTask and TaskAllOf1.
7855	Validate checks task fields and returns validation errors if any.
7856	GetRanges returns IP networks from a list of IPs and CIDRs, handling both IPv4 and IPv6 formats, and validating CIDR lengths.
7857	WithTimeout sets the timeout for the GetAppsAppRoutesRouteParams instance and returns it.
7858	WithContext sets the request context and returns the modified object
7859	WithHTTPClient sets the HTTP client for GetAppsAppRoutesRouteParams and returns it
7860	WithApp sets the app parameter on GetAppsAppRoutesRouteParams and returns the modified object
7861	WithRoute sets the route parameter on GetAppsAppRoutesRouteParams and returns it.
7862	New creates a new instance of Functions with specified transport and formats.
7863	SetTransport updates the transport for all components in Functions
7864	WithTimeout sets timeout on DeleteAppsAppRoutesRouteParams and returns it
7865	WithContext sets the context for DeleteAppsAppRoutesRouteParams and returns it.
7866	WithHTTPClient sets the HTTP client for DeleteAppsAppRoutesRouteParams and returns the updated object.
7867	WithApp sets the app parameter and returns the modified object
7868	WithRoute sets the route parameter and returns the modified object.
7869	WithTimeout sets the timeout on GetTasksParams and returns it.
7870	WithContext sets the context on GetTasksParams and returns it
7871	WithHTTPClient sets HTTP client for GetTasksParams and returns it
7872	NewValueStore initializes a new ValueStore instance with specified parameters and sets up goroutines for handling different types of requests.
7873	Close method locks store, shuts it down, closes handler channel, then unlocks store.
7874	SetBackend sets the server's backend service safely using mutex locking.
7875	Ring method returns a copy of the server's ring while holding a read lock
7876	GetLocalID returns the local ID of the server safely using RLock.
7877	GetListenAddr retrieves the local node's address from a server's ring structure while ensuring thread safety.
7878	Startup initializes ring server if not already running.
7879	shutdownFinished will pause execution for 10ms then signal completion
7880	Stop will stop the server and return an error if it's already stopped.
7881	Exit method stops server backend and sets stopped flag.
7882	SelfUpgrade checks server version and applies binary upgrade, returning success status and error message.
7883	SoftwareVersion returns the current software version of the server after acquiring a read lock on cmdCtrlLock.
7884	Shutdown method locks the store, shuts it down, unlocks, and returns any errors encountered.
7885	Rant method fetches a rant and its comments using an ID, returning models and any encountered errors.
7886	Profile fetches user and content models from an API using a username.
7887	Search method fetches rants based on a search term from the API and returns them or an error if unsuccessful.
7888	Surprise method fetches a rant from an API and returns it or an error if unsuccessful.
7889	WeeklyRants fetches weekly rants from the server and returns them or an error.
7890	getUserId fetches user ID from API and returns it or an error if unsuccessful
7891	Shutdown method stops the server and closes all stores, handling errors and context cancellation.
7892	FExists checks if a file exists and returns true if it does.
7893	outbound handles sending messages over a connection, logging errors, and shutting down gracefully.
7894	parse reads messages from a pool, parses them, logs errors, and sends valid messages to Inbound.
7895	Create a new Group instance with the given domain, name, and members.
7896	Groups will fetch all groups from Domain returning them and any errors encountered
7897	GetGroup fetches group details from domain, parses members XML, returns Group object or error.
7898	Reticence trims input string to specified length, removing trailing punctuation or ".." sequences
7899	CheckPassword checks if the password length is within limits and contains only printable characters, returning an error if not.
7900	CleanUrl will clean a URL and validate its length before returning it, or an error if invalid.
7901	NewParameter creates a new parameter with a given name and value.
7902	MakeParams creates a Params instance with initialized maps and slices based on fieldCount.
7903	Parse populates Params from a struct, handling slices and aliases.
7904	Email constructs and returns an email address using the Forwarder's Name and Domain's Name.
7905	Forwarder creates a new Forwarder instance with the given domain, name, and destination.
7906	`Forwarders retrieves domain forwarders and handles errors.`
7907	GetForwarder retrieves a forwarder for a domain and returns it or an error.
7908	New creates a new CGP instance with the given URL, user, and password.
7909	EscapeCommaSeparated takes a list of strings, escapes special characters, and joins them with commas.
7910	`Alias creates a new alias linked to the account with the given name.`
7911	Alias's Email method returns a formatted email address combining Name and Domain.
7912	Aliases method fetches and compacts alias values from account's domain, returning them as []*Alias.
7913	Account.RealName retrieves real name from settings using email.
7914	Email method returns a formatted email address using account name and domain name.
7915	Account method returns a new account instance associated with the given domain and name
7916	Accounts retrieves all accounts from the domain and returns them as a list along with any errors encountered during the process.
7917	Exists checks if a domain exists and returns a boolean and error.
7918	`Aliases retrieves domain aliases from CGP and returns them as a compacted list or an error.`
7919	Domain creates a new Domain instance associated with CGP and named accordingly
7920	Domains method retrieves list of domains from CGP object and returns them along with any errors encountered during the request.
7921	New creates an error with debug stack and given information.
7922	Wrap wraps an error with additional information and context, returning a custom Err type.
7923	mergeIn updates error info and message based on provided details
7924	wrappedErrStr returns the error message of the wrapped error or an empty string if the error is nil
7925	concatArgs joins arguments into a single string without the trailing newline
7926	MailingList creates a new mailing list object with the given domain and name.
7927	Subscriber creates a new subscriber object linked to a mailing list
7928	Subscribers method fetches subscribers from mailing list and returns them along with any errors encountered during the process.
7929	`MailingLists retrieves domain's mailing lists from CGP and returns them as []*MailingList.`
7930	NewByteKeyItem converts a byte slice to a pointer.
7931	CompareBytes compares two byteKeyItems using bytes.Compare and returns the result.
7932	CompareInt compares two integer key items and returns their difference.
7933	Malloc allocates memory and returns a pointer, incrementing allocation stats if debugging is enabled.
7934	Free will release memory at the given pointer and increment free count if debug is enabled
7935	Stats retrieves memory statistics and returns them as a string.
7936	FreeOSMemory will release OS memory and return an error if the operation fails
7937	Add will insert a new item into the segment's builder store and update relevant statistics and pointers.
7938	NewSegment initializes a new segment with random values and returns it.
7939	Assemble combines multiple segments into a Skiplist and updates the builder's store.
7940	CompareNodeTable calculates the difference between two pointers.
7941	New creates a new NodeTable instance with hash and key equality functions, initializes internal maps, allocates buffer, inserts into database, and returns the table.
7942	Stats method returns formatted string with NodeTable statistics.
7943	MemoryInUse calculates total memory usage based on fast and slow hash table counts.
7944	Get retrieves a node pointer from the table using a key, returning it if found or nil otherwise.
7945	Update will modify or insert a node in the NodeTable and return whether it was updated and the old pointer.
7946	Remove will delete a key from NodeTable and return a pointer to its value and success status. If the key is not found, it will return nil and false.
7947	Close method resets counters and clears hash tables before deleting the node table instance.
7948	MemoryInUse calculates total memory used by database instances
7949	debugMarkFree updates a node's memory block to mark it as free.
7950	Iterator's Seek method updates its iteration to match the given byte slice and skips unwanted items.
7951	Iterator's Next method advances iteration, increments count, skips unwanted items, and refreshes when necessary based on refresh rate.
7952	Refresh updates iterator to point to the current item safely.
7953	Close will release resources held by Iterator.
7954	NewIterator creates an iterator from a snapshot, returning it or nil if the snapshot is not open.
7955	SeekFirst initializes MergeIterator by seeking each sub-iterator to its first element, collecting valid nodes, and then initializing a heap for efficient retrieval.
7956	Next advances the MergeIterator to the next item, updating its internal state and pushing the next element from the current iterator onto the heap if available.
7957	Seek will iterate over iterators to find the item and update the heap if valid.
7958	Keys method retrieves all keys from a linked list and returns them as byte slices.
7959	Remove will delete a node from NodeList based on the given key and return the deleted node or nil if not found
7960	Add appends a node to the head of NodeList.
7961	NewWithConfig creates a new Skiplist instance using a configuration, adjusting settings based on architecture and memory management preferences.
7962	FreeNode releases a node from the skiplist and updates stats.
7963	MakeBuf creates a new ActionBuffer instance with initialized predecessors and successors arrays.
7964	Skiplist's Size method returns total size including item and node sizes.
7965	NewLevel calculates the next level for a skiplist using a random function, ensuring it doesn't exceed max level and updates the current level atomically.
7966	Insert will add an item to the skiplist and return true if successful
7967	Insert2 inserts an item into the skiplist and returns the new node and whether it was inserted.
7968	Insert3 inserts an item into a SkipList and returns the new node and a boolean indicating success.
7969	Delete node from skiplist if found using compare function and buffer.
7970	deleteNode deletes a node from a skiplist using a barrier and returns success
7971	GetRangeSplitItems retrieves items from a skiplist split among multiple ways, handling deletions and ensuring proper splitting.
7972	Bytes method returns byte slice from Item's data with correct header.
7973	ItemSize calculates the total size of an item using its pointer and data length.
7974	KVFromBytes extracts key-value pairs from byte slice.
7975	CompareKV compares two key-value pairs based on their values and returns the result.
7976	Emit sends an event to all handlers concurrently and returns the count of handlers notified.
7977	UnregisterHandler removes a handler from the controller's map and returns an error if it fails.
7978	IsHandlerRegistered checks if a handler is registered under a given name.
7979	CompareNitro compares two Nitro structs using their id field and returns the difference as an integer.
7980	DefaultConfig initializes a Config with default values.
7981	Delete method attempts to remove byte slice from writer and returns success status
7982	GetNode retrieves a node from the store using the provided byte slice and comparison functions, returning the found node or nil.
7983	SetKeyComparator updates configuration with custom key comparator functions.
7984	UseMemoryMgmt sets memory management functions for amd64 architecture.
7985	NewWithConfig initializes a new Nitro instance with given configuration and returns it.
7986	MemoryInUse calculates total memory usage by summing up aggregated store stats, snapshots, and garbage collection snapshots.
7987	Close method waits for snapshots to finish, shuts down GC, deletes instance, frees memory if needed.
7988	NewWriter creates a new writer instance, initializes it, adds it to the writer list, starts collection worker, and optionally memory management worker.
7989	SnapshotSize calculates the total size of a snapshot object by summing the sizes of its fields.
7990	Encode method encodes snapshot data into buffer and writes it to writer, returning error if not enough space or write fails
7991	Decode reads a snapshot from a reader into the buffer and updates the snapshot's sequence number.
7992	Open increments refCount if greater than zero and returns true
7993	CompareSnapshot compares two Snapshot pointers and returns their difference.
7994	Nitro's GC method runs garbage collection atomically.
7995	GetSnapshots retrieves all snapshots from Nitro's snapshot store.
7996	MemoryInUse calculates total memory used by iterating through database instances.
7997	CompareBS compares two BarrierSession pointers based on their seqno field.
7998	Acquire method attempts to acquire a BarrierSession from AccessBarrier ensuring it's active and retrying if necessary until successful or session is invalid.
7999	Release decrements the live count and cleans up if necessary.
8000	FlushSession updates session data atomically if active.
8001	Apply updates StatsReport with aggregated stats from another Stats instance.
8002	AddInt64 updates src with val using atomic operation if Stats is local.
8003	AddUint64 updates src by adding val using atomic operation if necessary.
8004	Merge combines two Stats instances, summing their counters and resetting the second instance's values.
8005	GetStats retrieves statistics from a skiplist and returns them in a report.
8006	NewIterator initializes and returns a new iterator for the skiplist with given comparison function and buffer.
8007	SeekFirst sets iterator to first element in list.
8008	SeekWithCmp searches for an item using comparison functions and updates iterator state based on the result.
8009	Seek updates iterator state based on search result.
8010	Valid checks if the iterator has reached the end of the sequence and updates its validity accordingly.
8011	Iterator's Delete method marks the current item as soft deleted, updates stats, moves to the next item, and sets deleted flag.
8012	Next advances iterator to next item or retries on conflict.
8013	Init initializes SkuM1SmallBuilder and registers it with skurepo.
8014	FromURL replaces substrings in a URL based on predefined replacements and returns the modified URL.
8015	ToURL converts folder path by replacing specified substrings and returns the modified URL.
8016	TupleHeader's Size calculates total size based on version and field details.
8017	WriteTo encodes TupleHeader to io.Writer and returns written bytes and error if encoding fails
8018	Static will handle GET/HEAD requests, serve files from a directory, optionally strip a prefix, try to serve index files, and add expiration headers.
8019	Read reads configuration file and sets values in Config object
8020	Del removes a key from a config section and deletes the section if empty.
8021	WriteTo will write the configuration to a file and return an error if it fails
8022	checkSection trims line and checks if it's a valid section; returns section name and validity
8023	checkLine splits a line into key-value pairs, trims whitespace, and returns them along with a boolean indicating success
8024	checkComment verifies if a line starts with any comment prefix and returns true if it does
8025	NewResponseWrapper creates a new ResponseWrapper instance wrapping an http.ResponseWriter.
8026	Hijack method returns a net.Conn and bufio.ReadWriter or an error if the writer is not a hijacker
8027	CloseNotify returns a channel that notifies when the response writer is closed
8028	DateFormat returns an Option to set the date format
8029	Logger logs HTTP requests and responses, including latency, status codes, and methods.
8030	GetAvailableInventory fetches inventory using a registry and starts task polling if not already done.
8031	Expiration sets token expiration duration through options
8032	Claimer sets a claimer function for token options.
8033	Issuer returns a TokenOpt to set the issuer option on a token.
8034	User returns a TokenOpt to set the user option
8035	Password returns a TokenOpt to set the password option
8036	Extractor sets the extractor field of options.
8037	TokenGenerator generates a middleware to authenticate requests using JWT and invoke the next handler with the token.
8038	Token retrieves a string token from HTTP request context or returns empty string if not found
8039	Claims extracts JWT claims from HTTP request context or returns nil if not found.
8040	Token's String method returns its value or a truncated version, depending on its type and length.
8041	NewLexer creates a lexer object with the given name, input, and handler.
8042	run will execute lexer states until no more states are available
8043	emit will generate and handle a new token if the lexer's position has changed from its start
8044	skipWhitespace advances lexer past whitespace characters
8045	next advances lexer to next rune and returns it
8046	LineNum returns the current line number based on the position in the input.
8047	Offset calculates the position relative to the last line break or the start if at the beginning.
8048	errorf logs an error token with formatted message and returns nil
8049	lexText processes input using a lexer to identify and emit tokens based on different prefixes and characters, handling comments, packages, types, and more until reaching EOF.
8050	lexComment skips whitespace, advances past a comment, emits it, then skips more whitespace before continuing.
8051	New creates a new tuple type with the given namespace and name, hashing them and initializing fields and indices.
8052	AddVersion appends new fields to TupleType and updates field indices.
8053	Contains checks if a field exists within a tuple type
8054	Offset retrieves the field's offset and existence from TupleType's fields map.
8055	TupleType's Versions method returns a slice of versions based on the number of versions it contains. Each version has a uint8 index and a corresponding value from the tuple.
8056	SetPrivateMeta updates or adds private metadata for a task
8057	SetPublicMeta updates task metadata with a given name and value, initializing metadata map if necessary.
8058	GetRedactedVersion returns a redacted version of Task by copying its fields and holding the mutex lock during the operation.
8059	Equal checks if two Task instances are equal based on their properties.
8060	HTTP returns a handler that only allows specified HTTP methods.
8061	PutUint8 will store an unsigned 8-bit integer in the buffer and return the number of bytes written or an error if the operation fails.
8062	PutInt8 method checks type, ensures space, writes type code and value, sets offset, increments position, returns written bytes and error
8063	PutUint16 will store a uint16 value in a buffer and update the position and offsets accordingly, returning the number of bytes written and any errors encountered.
8064	PutInt16 writes an int16 value to a buffer, handling both short and long formats, returns written bytes and error.
8065	PutUint32 writes a 32-bit unsigned integer to a buffer and returns the number of bytes written or an error if the operation fails
8066	PutInt32 adds an int32 to a tuple, returns written bytes and error
8067	PutUint64 adds a uint64 value to a buffer, returns bytes written and error if out of range or invalid type.
8068	PutInt64 adds a 64-bit integer to the buffer with appropriate type code and checks available space.
8069	NewPackageList creates a new package list with a mutex for thread-safe access.
8070	PutFloat32 adds a float32 to the buffer, updates offsets, increments position, and returns written bytes or error.
8071	NewRouter, New, Logger, Recovery, Static, ContextRender, MapTo, Action -> ClassicMartini
8072	Languages sets languages option with given tags
8073	Session sets the session option for a handler.
8074	Data retrieves ContextValue from http request context or returns empty ContextValue if not found
8075	URL constructs a full path using the given components, ensuring proper formatting and concatenation.
8076	Size returns terminal width and height or an error if termsize is not initialized
8077	GetRequestIDFromTaskResponse extracts the request ID from a task response's metadata, handling errors during JSON marshaling and unmarshaling.
8078	PutString will store a string in a buffer with a specified field and return the number of bytes written and an error if there's insufficient space or invalid type.
8079	LoadDirectory reads a directory recursively using a parser, handling errors and filtering files by extension.
8080	LoadFile opens a file, reads its contents, converts them to a string, and parses the string using a given parser, returning the parsed package and any errors encountered.
8081	LoadPackage uses a parser to load a package from given name and text, returning the parsed package or an error if parsing fails.
8082	NewDecoder creates a new decoder with a registry, max size, buffer, and reader.
8083	NewDecoderSize creates a new decoder with a given registry, maximum size, and reader.
8084	Panic wraps an HTTP handler to log panics, print stack traces, and return a custom error message.
8085	DeployVApp returns a fake VApp and an error based on client's configuration
8086	UnDeployVApp returns a task and an error based on FakeVCDClient's state.
8087	FakeVCDClient's Auth method returns an authentication error.
8088	QueryTemplate retrieves a fake VApp template record and any associated error.
8089	NewEncoder creates a new encoder with specified writer and buffer sizes.
8090	Getter returns an Option to set the getter for options
8091	Setter returns an Option to set a NonceSetter on options.
8092	Age returns a functional option to set the age field in options.
8093	Nonce adds a middleware to HTTP handlers, generating and validating nonces with customizable options.
8094	NonceValueFromRequest retrieves nonce status from request context or returns default if not found
8095	StoreNonce sets a nonce using a context value and returns an error if setting fails.
8096	PutFloat32Array adds a float32 array to the buffer, handling different sizes and checking available space.
8097	PutFloat64Array adds a float64 array to the buffer and returns the number of bytes written or an error if out of range
8098	ClientDoer's Do method sets SpyRequest and returns Response and Error.
8099	NewLease initializes a Lease struct with taskCollection, taskManager, availableSkus, and Task.
8100	Delete method handles HTTP request to delete lease, updates task collection, logs restock action, returns status code and response based on success or failure.
8101	Post processes HTTP requests to manage leases, setting status codes and responses accordingly.
8102	ReStock updates SKU task or marks it unavailable based on availability.
8103	Procurement processes a lease's SKU and returns a task or marks it unavailable.
8104	InitFromHTTPRequest reads JSON from HTTP request body and unmarshals it into Lease struct, handling errors and initializing ProcurementMeta if needed.
8105	Is checks if a tuple matches a given type based on hash values
8106	Offset will return the field's offset and an error if the field does not exist or has an invalid index
8107	WriteTo method for Tuple type writes data to an io.Writer and returns total bytes written and any errors encountered
8108	PutTuple method writes a tuple to buffer based on its size and updates offsets map
8109	WriteString writes content to the response writer.
8110	NotFound sets 404 status and writes message to response writer
8111	Run starts a task poller and listener, updates task status, decorates process exit handler, and waits for completion.
8112	NewWaitGroup initializes a new WaitGroup with the given throttle value.
8113	WaitGroup's Add method increments outstanding count and waits if exceeds throttle limit.
8114	Wait decrements outstanding counter and waits until it reaches zero by completing tasks.
8115	Gzip wraps HTTP handlers to compress responses using gzip when accepted.
8116	New creates a new InnkeeperClient instance with the given URI, user, and password.
8117	Render's Error method sets HTTP status and writes a message if provided
8118	Renderer prepares render options, compiles templates, and returns a handler to process HTTP requests.
8119	NewClient creates a new PDClient instance with the given API key, URL, and HTTP client.
8120	GetTask sends a GET request to retrieve a task by ID and parses the JSON response.
8121	WriteImageToHTTP encodes an image to PNG and sends it via HTTP response with appropriate headers.
