0	NewSTM creates a new STM transaction with options and executes an apply function returning a transaction response or error
1	first will return the smallest revision number from a readSet of responses
2	cmps will return a slice of compare operations based on revision number and writeSet keys
3	NewSTMRepeatable will create a new repeatable read transaction and apply the given function to it, returning a transaction response or an error if the operation fails
4	NewSTMSerializable will create a new serializable transaction and apply the given function to it, returning a transaction response or an error if the operation fails
5	NewSTMReadCommitted creates a new STM with read-committed isolation and returns a transaction response or an error
6	NewCertPool will create a certificate pool from CA files by reading PEM encoded certificates and adding them to the pool, returning an error if any file cannot be read or parsed.
7	NewCert will create a TLS certificate from cert and key files using a parsing function, returning an error if files cannot be read or parsed
8	Pause will lock the peer, set paused to true, and pause both msgAppReader and msgAppV2Reader
9	Resume will unpause the peer and resume message readers
10	pick will select an appropriate message channel based on message type and return the channel along with the selected stream type
11	post sends an HTTP request and returns the response or error from the snapshot sender's pipeline with timeout handling
12	newTxnResp creates a transaction response with nested responses and returns the response along with total transaction count
13	applyCompare evaluates a comparison against key-value ranges returning true if all comparisons pass or false if any fail
14	OpCompact creates a compact operation with a revision and applies optional configurations
15	NewPriorityQueue creates a new priority queue with the specified client and key prefix
16	Enqueue will add a value with priority to the queue and return an error if it fails
17	NewLeaderStats creates and returns a new LeaderStats struct with initialized followers map and specified leader ID
18	Succ updates follower statistics with success count and latency metrics including average, maximum, minimum, and standard deviation calculations
19	Fail will increment the failure count in follower statistics by one atomically
20	delete will remove a watcher from broadcasts and return the remaining broadcast count panic will occur if watcher is missing
21	startStreamWriter will initialize and start a stream writer goroutine returning the writer instance for raft messaging
22	checkStreamSupport will return true if the version's major and minor combination supports the given stream type otherwise false
23	maybeUpdate will advance the progress match and next values if needed and resume the progress tracker returning whether an update occurred
24	IsPaused will return a boolean indicating if the progress is paused based on its current state and conditions
25	needSnapshotAbort will return a boolean indicating if a snapshot abort is needed based on progress state and match values
26	add will insert a new inflight value into the buffer and increment count, panicking if buffer is full
27	growBuf will double the buffer size for inflights or set it to one if empty, up to the maximum size limit, then copy old data to new buffer
28	freeTo will release inflight messages up to a given sequence number and adjust the buffer's start index and count accordingly
29	SaveDBFrom will save database content from reader to a temporary file, sync it, rename it to final path, and return bytes written and any error during the process
30	DBFilePath will return the database file path for a snapshot index or an error if not found
31	UniqueStringsValue.Set will create a map of strings from a comma-separated string input
32	NewUniqueStringsValue creates a unique string set from input string or panics if parsing fails
33	UniqueStringsFromFlag will return a slice of unique strings from a flag set by looking up the flag name and extracting its string slice value
34	UniqueStringsMapFromFlag will return a map of unique strings from a flag set and flag name an error will be returned if the flag does not exist or is not of the correct type
35	Percentiles will return percentile values and corresponding data points from input numbers
36	VerifyBootstrap will validate server configuration settings and return an error if local member is missing, advertise doesn't match cluster, duplicate URLs exist, or both initial cluster and discovery URL are unset
37	VerifyJoinExisting checks for valid server configuration when joining an existing cluster, ensuring no duplicate URLs and no discovery URL is set
38	hasLocalMember will check if the server config contains the local member name in peer urls and return an error if not found
39	advertiseMatchesCluster validates that initial cluster and advertise peer URLs match, returning an error if they don't align properly
40	ReqTimeout will return the server's request timeout duration calculated from election ticks and tick milliseconds
41	getStatus will return the raft status with progress information if the node is a leader otherwise it will return the status without progress
42	GetDefaultHost will return the default network host address and an error if no suitable host is found
43	getIfaceAddr will return the network link message for a given interface index and address family, or an error if not found
44	getIfaceLink will return a netlink message for a given interface index or an error if not found
45	lsCommandFunc will list keys from etcd API with sorting, recursion, and quorum options, printing results or handling errors appropriately
46	printLs will display directory contents in simple mode or print response key in JSON/extended format based on output flag
47	rPrint will recursively print node keys with directory slashes and pagination flags
48	NewLeaseRenewerCommand will create and return a cobra command for performing lease renewal with a specified time to live parameter
49	Read will return a snapshot and error from a file path with logging and validation checks
50	GetCipherSuite returns a cipher suite value and boolean indicating if the suite exists for a given string key
51	post will send data via HTTP POST to a picked URL and handle responses or errors during the process
52	send will transmit a message with proper term handling based on message type, panicking if term constraints are violated and appending the message to the raft's message queue
53	sendHeartbeat will transmit a heartbeat message with commit index to a specified node and context using the raft protocol
54	bcastAppend will broadcast append entries to all peers except itself by sending append messages
55	bcastHeartbeat will send heartbeat messages with or without context based on pending requests
56	tickElection will advance election timeout and trigger heartbeat message when timeout is reached
57	tickHeartbeat updates heartbeat and election timers, triggers leader checks and heartbeats based on timeout conditions
58	stepCandidate handles raft message types for candidate state including proposals, heartbeats, snapshots, and vote responses, updating leader state or quorum counts accordingly.
59	raft restore will return a boolean indicating success or failure when restoring a snapshot, updating commit index and node configurations
60	promotable will return if the raft node is promotable to leader based on its presence in the progress set
61	checkQuorumActive will return if quorum of raft nodes are active by counting recent active non-learner progress entries
62	increaseUncommittedSize will return a boolean indicating if the uncommitted size can be increased and update the uncommitted size or not based on the maximum limit
63	reduceUncommittedSize will decrease the uncommitted size by the payload size of entries or saturate at zero if the reduction exceeds the current size
64	newPeriodic creates a periodic compaction controller with logging, clock, and revision tracking
65	Pause will lock the periodic context, set paused state to true, and unlock the context
66	Resume will set the paused state to false in a thread-safe manner using a mutex lock
67	Lock will acquire a distributed mutex using etcd transactions and wait for ownership, returning an error if acquisition fails.
68	NewLocker creates and returns a new mutex locker for session synchronization with a given prefix
69	NewFIFOScheduler creates and returns a new FIFO scheduler with initialized channels and goroutine runner
70	Schedule will add a job to the pending queue and notify the scheduler if queue was empty, panic if scheduler is stopped
71	Stop will lock the fifo, cancel the context, and wait for the done signal
72	NewServer will return a new server instance with logger network address and empty advertisement maps
73	StartServe will initialize and start a gRPC server on the specified address returning an error if the operation fails or is interrupted
74	Stop will halt the gRPC server and log the start and completion of the stopping process at the specified address
75	Transport handles bidirectional RPC communication between client and server processing requests and responses until context cancellation or error occurs
76	RegisterInterruptHandler will add an interrupt handler to the handlers list in a thread-safe manner
77	HandleInterrupts registers signal handlers to gracefully shutdown on SIGINT/SIGTERM signals, notifying registered handlers and exiting cleanly.
78	OpGet creates a range operation with a key and optional configurations, panicking if conflicting options are provided
79	OpDelete creates a delete operation with panic checks for incompatible options and returns the operation struct
80	OpPut creates a put operation with key-value pairs and applies options while validating against unexpected parameters
81	OpTxn will return an operation with comparison conditions and corresponding then/else operations
82	WithFromKey returns an operation option that sets a default key and null terminator for an operation
83	withTop will return sorting options for a target with specified order and limit of one item
84	Exist will check if directory has any .wal files and return true if found false otherwise
85	searchIndex will return the largest index in names that is less than or equal to the given index, or -1 and false if no such index exists
86	isValidSeq will validate sequence numbers from WAL file names and return true if they are sequential, false otherwise
87	NewListener will create a new network listener with optional TLS wrapping returning the listener and any error that occurs during creation or TLS setup
88	cafiles will return a slice of certificate authority files from tls information
89	ServerConfig generates a TLS configuration with optional client authentication and HTTP2 support, returning an error if certificate setup fails
90	ClientConfig generates a TLS configuration from TLSInfo with certificate validation and error handling for empty CN cases
91	newTLSKeepaliveListener will return a new TLS keepalive listener using the provided inner listener and TLS configuration
92	applyV2Request will handle v2 requests by dispatching to specific methods based on the request type and returning appropriate responses or unknown method errors
93	NewRoleCommand creates and returns a cobra command for managing role-related subcommands including add, delete, get, list, grant permission, and revoke permission actions.
94	roleAddCommandFunc will add a role and display the result or exit with an error if the command is incorrectly formatted or fails
95	roleGetCommandFunc will retrieve and display role information based on the provided role name argument, exiting with error if the argument is missing or the retrieval fails
96	roleGrantPermissionCommandFunc will grant a permission to a role with the specified key and range end and display the result
97	roleRevokePermissionCommandFunc will revoke a permission from a role using the provided arguments and display the result or exit with an error if the operation fails
98	NewCluster will return a new cluster with the specified size and testing instance
99	NewClusterByConfig will return a new cluster instance using the provided configuration and test context
100	HTTPMembers will return a slice of client members with their peer and client URLs constructed from the cluster's members and their respective listeners
101	waitLeader will identify and return the index of the cluster leader among members after ensuring consistency
102	waitNoLeader will continuously check members until no leader is detected, pausing between checks until all members confirm no leader exists
103	isMembersEqual will compare two member slices for equality after sorting and clearing IDs
104	listenGRPC will initialize a gRPC listener on a unix socket and return an error if it fails
105	NewClientV3 will create a new etcd client with gRPC configuration and TLS settings from member data, returning an error if configuration is invalid or TLS setup fails
106	Clone will create a deep copy of member configuration including server, client, and peer URLs, panicking if URL parsing fails
107	member Close will terminate all grpc connections and server clients then stop the service and execute closers
108	Stop will halt a member's operations and log the stopping and stopped events with its configuration details
109	checkLeaderTransition will return the new leader after a transition occurs, continuously checking until the leader changes from the old leader value
110	Restart will restart a member by creating new listeners and launching the member again, returning any error that occurs during the process.
111	Terminate will close a member and remove its data directory if not configured to keep it, logging the process and any errors
112	Metric will return a metric value from a client URL an error will be returned if the metric is not found or there is a connection issue
113	InjectPartition will disconnect a member from other members by cutting their peer connections in testing scenarios
114	RecoverPartition will mend peer connections between members in a test scenario by calling MendPeer on each member and their respective peers.
115	NewClusterV3 will create and launch a new cluster with gRPC support and optional client creation based on configuration
116	ParseWithDefaults sets default TTL if not specified and parses options into jwtOptions struct
117	Parse JWT options from map including TTL, public/private keys, and signing method with error handling
118	jwtOptions Key method returns the appropriate cryptographic key based on the signing method or an error if unsupported
119	fill will populate response header fields from header struct including cluster ID, member ID, raft term, and revision
120	add will include a watcher in watchBroadcast if revision is valid, returning false if too far ahead or if posting fails, otherwise returning true and incrementing coalescing watchers counter
121	watchStream will create a new watcher with given parameters and return the watcher id or an error if parameters are invalid or watcher creation fails
122	newFileEncoder will create a new encoder with the file's current position and previous CRC value, returning an error if the seek operation fails
123	purgeFile will remove old files with a specific suffix based on a maximum count and interval, sending errors through a channel and stopping when instructed
124	Set will split a string by commas and assign the resulting slice to the StringsValue receiver, returning no error.
125	NewStringsValue will create a new strings value object or panic if the input string is invalid
126	StringsFromFlag will return a slice of strings from a flag set by looking up the flag name and type asserting its value to StringsValue
127	Cluster will return the first two parts of a dot-separated string, joining them with a dot, or return the original string if it has two or fewer parts
128	NewPageWriter creates a PageWriter with specified writer, page size, and offset using a buffered byte slice
129	watch will create and return a watcher for a given key with specified options and handle event streaming and removal logic
130	notify will traverse path segments and notify watchers of events at each level in the hierarchy
131	clone will return a copy of the watcher hub with a cloned event history
132	isHidden determines if a key path is hidden by checking if it contains "_", returning a boolean value
133	createEtcdLogFile will create an etcd log file and return an error if creation fails
134	runEtcd will start the etcd server or command and return any errors that occur during startup or proxy setup
135	stopEtcd will stop the etcd process or server using a signal and return any error that occurs during the stopping process
136	handle_SIGQUIT_ETCD_AND_REMOVE_DATA_AND_STOP_AGENT will stop etcd, remove all data directory and shutdown the agent server returning a success response or an error if any operation fails
137	LimitListener will return a network listener with a connection limit implemented through a buffered channel
138	allowMethod checks if a request method is permitted and returns an error if not allowed
139	NewWatchServer creates and returns a new watch server with specified etcd server configurations and settings
140	FiltersFromRequest will return a slice of filter functions based on the watch create request filters provided
141	newPipelineHandler creates and returns a pipeline handler for managing raft consensus operations within a transport layer
142	checkClusterCompatibilityFromHeader will validate version and cluster ID compatibility between local and remote servers, returning an error if mismatches occur
143	KeyExists will return a comparison to check if a key exists in etcd by comparing its version to zero
144	KeyMissing will return a comparison operation to check if a key is missing from the etcd client
145	ValidateSecureEndpoints will validate HTTPS endpoints and return secure endpoints with errors for insecure or unreachable ones
146	putNewKV will store a key-value pair with lease ID and return the revision or an error if the key already exists
147	newUniqueEphemeralKey will create a unique ephemeral key with a given session and prefix returning an error if unsuccessful
148	NewUpdateDirCommand creates a CLI command to update a directory with TTL flag and key-value arguments
149	updatedirCommandFunc will create a directory entry with TTL timeout and handle errors appropriately
150	handleBackup will create a backup of etcd data by copying snapshot and WAL directories, generating new cluster and node IDs, and saving the restored data to a destination directory
151	saveDB will copy a source database to destination while updating membership info and consistent index based on version flag and index value
152	NewWatchCommand creates a cobra command for performing watch operations with configurable parameters like running time, prefixes, and key counts
153	NewV3 will return a new v3 manager with the provided logger or an example logger if none is given
154	v3Manager save will create a temporary snapshot file from one endpoint and rename it to the target path, returning an error if any step fails
155	v3Manager Status method checks database integrity, calculates hash, and returns status including size, revision, and total keys from a bolt database file
156	Restore will restore an etcd cluster from a snapshot by setting up server configuration and saving database and WAL files returning an error if any step fails
157	NewAuthStore creates an authentication store with bcrypt cost validation and initializes buckets, returning the configured store instance
158	NewTokenProvider creates and returns different types of token providers based on configuration options, handling simple, JWT, and unknown token types with appropriate logging and error reporting.
159	MendPeer will resume a paused peer and remote connection by their ID if they exist
160	removePeer will stop and delete a peer from transport and associated stats logging an info message upon successful removal
161	ActivePeers will return the count of active peers in transport by checking their active status under read lock
162	resolveTCPAddrDefault will resolve a TCP address from a host and port returning the TCP address and an error if resolution fails
163	resolveTCPAddrs will resolve URL hosts and return updated URLs with resolved addresses or an error if resolution fails
164	urlsEqual will compare two URL slices for equality after resolving and sorting their addresses, returning an error if lengths differ or any URL pair doesn't match exactly
165	URLStringsEqual will compare two string slices of URLs for equality, parsing each string into a URL object and returning a boolean result along with any parsing errors encountered during the process.
166	NewLeaseCommand creates and returns a cobra command for lease related operations with multiple subcommands added
167	NewLeaseGrantCommand creates a cobra command for granting leases with a time to live parameter
168	leaseGrantCommandFunc will grant a lease with a TTL argument and display the response or exit with an error if the arguments are invalid or the grant fails
169	NewLeaseRevokeCommand creates and returns a cobra command for revoking leases with specified lease ID
170	leaseRevokeCommandFunc will revoke a lease given its ID and display the response or exit with an error if the operation fails
171	NewLeaseTimeToLiveCommand creates a cobra command to get lease information with optional keys flag
172	leaseTimeToLiveCommandFunc will retrieve and display lease time-to-live information based on the provided lease ID and options, exiting with an error if arguments are invalid or connection fails
173	NewLeaseListCommand creates and returns a cobra command for listing active leases
174	leaseListCommandFunc will fetch and display lease information from a client connection, exiting with an error if the connection fails
175	NewLeaseKeepAliveCommand creates a command to keep leases alive with optional once flag for immediate exit
176	leaseKeepAliveCommandFunc will perform a lease keep-alive operation using the provided lease ID and display the response, handling both single keep-alive requests and continuous keep-alive sessions with appropriate error handling and expiration messages.
177	NewAlarmCommand creates and returns a cobra command for alarm related subcommands including disarm and list functionality
178	alarmDisarmCommandFunc will disarm an alarm and display the response or exit with an error if the command fails
179	alarmListCommandFunc will execute an alarm listing command and display the results or exit with an error if the command fails
180	Flags method returns command line flags for etcd fields with their yaml tags and values
181	EmbedConfig will return an etcd configuration struct with client and peer URLs, TLS settings, cluster information, and logging options from the etcd instance
182	PProfHandlers configures and returns a map of HTTP handlers for pprof endpoints with mutex profiling settings
183	NewBackendQuota will return a quota backend or passthrough quota based on configuration settings and log quota information
184	NewClusterProxy creates a cluster proxy with gRPC resolver and returns the proxy along with a done channel that signals when resolution is complete or immediately closed if address or prefix is empty.
185	NewHandler creates and returns a new lease handler using the provided lessor and wait channel function
186	TimeToLiveHTTP sends a lease TTL request over HTTP and returns the response or an error if the request fails or returns an invalid status code
187	newWatcherBatch creates a batch of watchers for events that meet revision criteria from the watcher group
188	add will register a watcher to the watcher group based on key and end values, using interval trees for range lookups and managing key watchers accordingly
189	contains will check if a key or its range intersection exists within the watcher group and return a boolean result
190	delete will remove a watcher from the watcher group and return true if successful, false otherwise
191	choose will return a watcher group and the chosen revision based on maximum watchers and revision numbers
192	watcherSetByKey will return a merged set of watchers for a key and its ranges, creating a new set when needed
193	Compare two intervals and return -1 if first is left of second, 1 if right, 0 if overlapping or touching
194	successor will return the next interval node in order or nil if none exists
195	updateMax will update the maximum endpoint values in an interval tree node and its ancestors until no more changes occur
196	intervalNode visit will traverse an interval tree comparing values and executing a node visitor function returning false if traversal should stop early
197	Delete will remove an interval from the tree and return true if successful, otherwise false if the interval is not found
198	Insert will add an interval and value to the interval tree maintaining red-black tree properties and update max values accordingly
199	rotateLeft performs a left rotation on an interval tree node updating parent references and max values during the rotation operation
200	replaceParent will update the interval tree by replacing a node with another node and maintaining the tree structure and max values
201	MaxHeight will return the maximum height of the interval tree based on its length using logarithmic calculation
202	Visit will execute the interval visitor function on each interval in the interval tree recursively starting from the root node
203	find will search for an interval in the interval tree and return the node if found otherwise nil
204	Find will return an interval value from the interval tree based on the provided interval or nil if not found
205	IntervalTree Intersects will return true if the given interval overlaps with any interval in the tree false otherwise by traversing the tree based on max values and comparisons
206	Contains checks if an interval is fully covered by the tree's intervals returning a boolean indicating containment and contiguity
207	Stab will return a slice of interval values that overlap with the given interval by visiting the interval tree and collecting overlapping intervals
208	Union will merge two interval trees by inserting all intervals from the second tree into the first tree within the specified range
209	NewExactReadCloser creates and returns a new exact read closer with specified total bytes and reader closer
210	NewElection will return a new election instance with the specified session and key prefix
211	ResumeElection creates and returns a new Election instance with the specified session, key prefix, leader key, and leader revision
212	Proclaim will update the election value if leader session is valid, returning an error if leadership is lost or operation fails
213	Resign will attempt to delete the leader key and clear the session, returning any error that occurs during the process
214	Leader will return the current election leader or an error if no leader exists
215	Observe will return a channel of get responses and start observing in a separate goroutine
216	quotaAlarmer will check resource availability and trigger a space alarm when unavailable, returning a no space error
217	NewExecWatchCommand will create a command to watch a key for changes and execute a program when triggered
218	execWatchCommandFunc will watch a key and execute a command on changes, handling signals and environment setup
219	NewListener creates a timeout listener for a URL with TLS configuration returning an error if creation fails
220	NewRoundTripper creates a timeout transport with TLS settings and specified dial timeout, setting no read/write timeouts
221	createPostRequest will return an HTTP POST request with specified URL path, body, headers, and cluster information, panicking on request creation error
222	checkPostResponse will handle different HTTP status codes and return appropriate errors or nil based on the response from a POST request to a peer node
223	serverVersion will return a semantic version from the server header or default to 2.0.0 if not present
224	checkVersionCompatibility will verify version compatibility between local and remote versions returning updated versions or an error if compatibility fails
225	setPeerURLsHeader will set the peer URLs in the request header as a comma-separated string, skipping if URLs are nil
226	addRemoteFromRequest will add a remote peer to the transporter using ID and URL list from HTTP request headers
227	NewKeysAPIWithPrefix will return a KeysAPI interface with the specified client and prefix parameters
228	TTLDuration will return the time to live value of a node as a time duration in seconds
229	SetPflagsFromEnv will configure flags from environment variables using a prefix, tracking already set flags and reporting errors during the process
230	FlagToEnv will convert a flag name to an environment variable string by combining a prefix with the uppercased and underscored flag name
231	excerpt will return a string with prefix and suffix truncated with ellipsis if the total exceeds string length otherwise returns quoted string
232	passConfChange will return a boolean indicating if the entry is a configuration change and the string "ConfigChange"
233	printInternalRaftRequest will unmarshal and print raft request data with term, index, and request string representation
234	listEntriesType will filter and print raft entries based on type, using a decoder stream when specified, counting matching entries
235	newLog will create a new raft log with default size limit using storage and logger parameters
236	newLogWithSize creates a new raft log with specified storage, logger, and maximum entry size, initializing indices and pointers from storage data
237	findConflict will return the index of a conflicting entry between two logs an error will be logged if a term mismatch is found
238	nextEnts will return available log entries from the raft log structure based on applied and committed indices, or nil if no entries are available
239	allEntries will return all log entries from the first index onwards, retrying on compaction errors and panicking on other errors
240	slice will return a portion of log entries within given bounds and size limit or an error if out of bounds
241	NewSession creates a session with lease management and keeps it alive until cancellation
242	Close will orphan the session and revoke it from the client returning any errors that occur during the revocation process
243	WithTTL returns a session option that sets a time to live value for a session
244	WithLease returns a session option that sets the lease ID for a session
245	addRequest will store a read index request by context and index in pending structures and queue
246	recvAck will return the count of read index acknowledgements including local node an error will be returned if the context is not found
247	advance will process read index requests and return corresponding status entries or nil if context not found
248	lastPendingRequestCtx will return the context of the last pending request or empty string if no requests are pending
249	Start will initialize the EtcdServer and attach multiple goroutines for monitoring and publishing tasks
250	start will initialize etcd server configuration and begin the server runtime loop
251	Process will handle raft messages and reject those from removed members, otherwise it forwards the message to the raft step function while tracking append request statistics
252	ReportSnapshot will send a snapshot report to the raft server with the given id and status
253	MoveLeader will transfer leadership from one member to another in etcd, returning an error if timeout occurs during the transfer process
254	TransferLeadership will transfer leadership to another node if leader and multi-node cluster, returning an error if unsuccessful
255	configure will apply a raft configuration change and return members and error if the change fails or context is done
256	sync will send a SYNC request to the etcd server using a goroutine and context timeout to propose the request
257	publish will attempt to publish server attributes to a cluster through raft consensus with timeout retries and logging
258	applyEntryNormal will process raft entries by applying them to the etcd server state machine and handling version 2 or 3 requests appropriately while managing consistency and alarms.
259	applyConfChange handles raft configuration changes by validating, applying, and updating cluster membership and transport peers accordingly
260	monitorVersions will continuously check and update the cluster version based on leader status and decided version, returning early if stopping signal is received
261	goAttach will safely execute a function in a goroutine while the server is running, adding to waitgroup and handling server stopping state
262	NewRoundrobinBalanced creates and returns a new round-robin balanced picker with logger and connection mappings
263	Pick will return a subconnection and done function based on round-robin selection an error will be returned if no subconnections are available
264	NewTLSListener will return a TLS listener and error using the provided listener and TLS information with a nil check function
265	acceptLoop will handle incoming TLS connections by managing pending connections and performing handshakes until the listener closes or encounters an error
266	SetEndpoints will update the resolver group's endpoints and notify all resolvers of the new addresses in a thread-safe manner
267	Target will return the resolved target string for a given endpoint using the resolver group's id
268	Target will return a formatted string combining scheme id and endpoint into a url-like target string
269	Build will return a resolver and error based on target authority and client connection, returning nil and error if authority is empty or resolver group fails to build
270	Handle will process different HTTP methods by calling corresponding handler functions and return a response or error based on the method type
271	NewElectionCommand will return a cobra command that performs election operations with configurable client connections
272	nodeToMember converts a store node into a member by parsing raft and regular attributes from the node's keys
273	NewTmpBackend will create a temporary backend directory and return a backend instance with specified batch parameters and the temporary path
274	newRevision creates and returns a new revision controller with specified parameters and a cancellable context
275	Run will continuously compact revisions based on retention policy with retry logic and logging
276	Pause will lock the revision, set paused to true, and unlock the revision
277	Resume will set the revision to unpaused state in a thread safe manner
278	voteRespMsgType will return the corresponding vote response message type for a given vote message type, panicking if the input is not a vote message
279	DescribeMessage will format a message with its fields and entries into a string representation using a specified formatter
280	DescribeEntry will format an entry with its term, index, type, and data using a formatter when available
281	DescribeEntries will format and concatenate multiple log entries into a single string output using a provided formatting function
282	SetLogger will update the global logger with thread safety and override grpclog's logger implementation
283	GetLogger will return the global logger instance in a thread-safe manner using read locking
284	maybeFirstIndex will return the first index from a snapshot or zero and false if no snapshot exists
285	maybeLastIndex will return the last entry index and true if entries exist, otherwise it returns the snapshot metadata index and true, or zero and false if neither exists
286	maybeTerm will return a term and true if the index exists in unstable storage otherwise it will return zero and false
287	shrinkEntriesArray will resize the entries array to half its current capacity when utilization falls below a specified threshold, otherwise it sets the array to nil if empty.
288	SaveSnap will store a snapshot and release the WAL lock returning an error if any operation fails
289	New will return a client instance or an error if no endpoints are available
290	NewCtxClient will return a new client with a cancelled context and a cancel function to manage the context lifecycle
291	NewFromURL will create a new client from a url by setting it as the endpoint in the config
292	Close will close the client's connections and resources and return any error that occurs during the closing process
293	Endpoints will return a copy of the client's endpoint addresses protecting the original slice from changes
294	SetEndpoints will update client endpoints and resolver group endpoints concurrently
295	Sync will synchronize client endpoints by fetching member list and setting new endpoints, returning an error if the operation fails
296	dialSetupOpts configures gRPC client options including keepalive, dialer, credentials, and retry interceptors returning modified options and error
297	Dial will establish a connection to an endpoint using passthrough dialing with provided credentials returning the connection or an error
298	dialWithBalancer will establish a client connection using a resolver target and credentials returning the connection or an error
299	dial will establish a client connection with authentication and timeout handling returning the connection or an error
300	WithRequireLeader will return a context with leader requirement metadata for RPC calls
301	roundRobinQuorumBackoff returns a backoff function that triggers jittered wait time after quorum attempts, logging debug information during backoff or skip operations
302	isHaltErr determines if a gRPC error should halt operations based on context and error codes, returning true for non-retryable errors like unavailable or internal failures.
303	NewLease will return a new lease with a prefixed byte string
304	IsCreate will return true if the event type is put and create revision equals mod revision otherwise false
305	WatchResponse Err method returns specific error based on closeErr, CompactRevision, or Canceled status conditions
306	IsProgressNotify will return a boolean indicating if the watch response is a progress notification based on event count, cancellation status, creation status, compact revision, and header revision
307	RequestProgress will send a progress request through a grpc stream and handle context cancellation or stream closure errors
308	nextResume will return the next watcher stream to resume or nil if none available
309	dispatchEvent converts protobuf watch responses to internal events and broadcasts or unicasts them based on watch ID and notification type
310	broadcastResponse will send a watch response to all substreams and return true indicating completion
311	unicastResponse will send a watch response to a specific stream and return true if successful, false otherwise
312	joinSubstreams will wait for all substreams and resuming streams to complete their execution before returning
313	watchRequest toPB converts a watch request to its protocol buffer representation with key range and notification settings
314	progressRequest toPB will convert a progress request to a watch request protocol buffer message
315	unsafeSet Contains method checks if a string value exists in the set and returns a boolean flag indicating the presence of the value
316	ContainsAll will check if all string values are present in the unsafeSet and return a boolean result accordingly
317	unsafeSet.Equals will compare two sets and return true if they contain the same values regardless of order
318	unsafeSet Values method returns a slice of strings containing all dictionary keys
319	Copy will return a copy of the unsafe set with all its values added to the new set
320	unsafeSet subtraction returns a new set with elements from other removed from the receiver set
321	v2MembersURL will return a modified URL with the v2 members path prefix added to the existing path
322	NewMigrateCommand creates a cobra command for migrating keys from v2 to mvcc store with various configuration options
323	publishEntries will commit raft log entries to the cluster and handle configuration changes, returning false if the node should stop running
324	openWAL will initialize and return a WAL object for the raft node, creating directories and handling snapshots as needed
325	replayWAL will replay the WAL log for a raft node and return the WAL object after applying snapshot and entries
326	stop will halt the raft node by closing commit and error channels then stopping the node itself
327	NewWatchCommand creates a cobra command for watching keys or prefixes with various options and returns the configured command object
328	InitialState will return the initial hard state and configuration state from memory storage without error
329	SetHardState will store the hard state in memory storage and return nil error
330	MemoryStorage Entries method returns log entries within a range with size limiting and error handling for compaction or unavailability cases
331	Term will return a stored term from memory or an error if the index is out of bounds
332	LastIndex will return the last index and nil error from memory storage lock protection
333	FirstIndex will return the first index and nil error from memory storage lock protected method
334	MemoryStorage snapshot returns a copy of the current snapshot and error if locking fails
335	ApplySnapshot will update memory storage with a new snapshot and return an error if the snapshot is out of date
336	Compact will remove entries up to a specified index returning an error if compaction is not possible, otherwise it returns nil after updating the storage's entries slice.
337	unreachable marks a URL as unavailable and advances the picker to the next URL in the list
338	NewEndpointCommand creates a command with subcommands for endpoint related operations and cluster flag support
339	epHealthCommandFunc will check health of etcd endpoints and display results, exiting with error if any endpoint is unhealthy
340	NewElectCommand creates a cobra command for election observation and participation with listen flag support
341	NewDefragCommand creates a cobra command to defragment etcd storage with cluster or data directory options
342	RegisterBuilder will register a balancer with the given configuration and log the registration details
343	Build creates a new baseBalancer with unique ID and logs its creation using the provided client connection and options.
344	recordTransition updates connectivity state counters and returns the overall state based on ready, connecting, or transient failure counts
345	doSerialize will authenticate a request validate the authorization info and execute a serialized get operation returning an error if authentication fails or the token revision is stale
346	send will process and filter watch events based on revision and filters then post the response
347	post will send a watch response to the channel or cancel if it times out after 50ms
348	OriginAllowed checks if a given origin is permitted by the access controller's CORS policy, returning true if allowed or false otherwise.
349	IsHostWhitelisted checks if a host is allowed based on whitelist rules, returning true if host is whitelisted or no restrictions exist
350	Valids will return a sorted slice of valid string values from the selective string value struct
351	NewSelectiveStringsValue creates a new selective strings value with validated strings and returns a pointer to it
352	NewKV will return a new key-value store with a string prefix added to all operations an error will be returned if the prefix is not properly formatted
353	NewURLsValue will create a new URLsValue instance from a string, panicking if the string is invalid
354	URLsFromFlag will return a slice of URL objects from a flag set based on the provided flag name
355	servePeers will start peer servers with TLS support and handle HTTP/GRPC requests while managing graceful shutdowns and logging peer traffic status
356	NewStore creates and initializes a new store with backend, lease, and index components returning the constructed store object
357	appendMarkTombstone will add a tombstone marker to revision bytes and panic if byte size is incorrect
358	IsDirWriteable will check if a directory is writable by creating and deleting a temporary file, returning an error if the operation fails
359	TouchDirAll will create a directory and verify it is writeable, returning an error if either operation fails
360	CreateDirAll will create a directory and verify it is empty, returning an error if creation fails or directory is not empty
361	ZeroToEnd will move file pointer to end, truncate file, preallocate space, and reset pointer position returning any error encountered
362	Open will return a locked file or an error from the pipeline channels
363	NewRaftLoggerFromZapCore will return a raft logger with zap logging core and syncer configured
364	NewConfig will create a new client configuration from a yaml file parsing tls settings and certificates returning an error if parsing or tls setup fails
365	RegisterElectionHandler will register an election handler client with the given context, mux, and connection, returning an error if registration fails
366	UpdateCapability will modify the current version and enabled capabilities map based on input version, logging the change with provided logger or fallback to plog info output
367	NewLockCommand creates a cobra command to acquire a named lock with ttl timeout
368	tick will execute a locked tick operation on the raft node ensuring thread safety
369	advanceTicks will increment the raft node's tick counter by advancing it the specified number of ticks through repeated tick function calls
370	NewAuthCommand creates a new command with subcommands to enable or disable authentication
371	authEnableCommandFunc will enable authentication and handle root role creation if it doesn't exist, printing success message or exiting with error if operation fails
372	authDisableCommandFunc will disable authentication and print a success message or exit with an error if the command fails
373	RetryKVClient returns a retry wrapper client for KV operations using the provided client connection
374	RetryLeaseClient returns a retry lease client wrapper around a lease client using the provided client's connection
375	RetryClusterClient will return a retry cluster client wrapper around the provided client connection
376	RetryMaintenanceClient returns a retry wrapper for the maintenance client interface
```
377	RetryAuthClient returns a retry authentication client wrapping the provided client connection
378	NewSetDirCommand creates a CLI command to set directory with TTL flag and key argument
379	Enter will register a client in a double barrier synchronization primitive and wait for the specified count of clients to arrive before proceeding
380	Leave will remove a node from a double barrier synchronization primitive and wait for other nodes to complete their operations before proceeding.
381	HandleBasic configures HTTP handlers for vars, log, metrics, health, and version endpoints using a serve mux and etcd server peer
382	WriteError handles various error types by writing appropriate HTTP responses and logging errors with remote address context
383	MemberByName will return a cluster member by name with panic error if duplicate names exist
384	PeerURLs will return a sorted list of peer URLs from cluster members protected by mutex locking
385	ValidateConfigurationChange will validate raft configuration changes and return an error if the change is invalid or conflicts with existing members
386	AddMember will add a new member to the raft cluster and persist it to store and backend while logging the action
387	RemoveMember will delete a cluster member from both store and backend, logging the action or warning if already removed
388	ValidateClusterAndAssignIDs will compare clusters by peer URLs and assign matching IDs, returning an error if member counts or URLs don't match
389	treeIndex Keep method returns available revisions map by iterating through tree items and calling keep on each keyIndex
390	closeRequireLeader will close channels that require a leader and remove them from keep-alive tracking in lessor
391	resetRecv will reset the lease keep-alive stream and return a new client or an error if the reset fails
392	recvKeepAlive processes lease keep-alive responses, updates TTL values, manages channel notifications, and handles lease expiration by closing channels when TTL expires or the lease is no longer valid.
393	deadlineLoop will continuously check and close expired keep-alive connections at regular intervals until signaled to stop
394	sendKeepAliveLoop will continuously send lease keep-alive requests to a stream until termination signals are received
395	NewKV creates a leasing key-value store with session management and returns the kv instance, close function, and initialization error
396	rescind will remove a lease key if its revision is less than the provided revision and retry until successful or context cancellation
397	LeaseValue will return a comparison object with the key and lease target set
398	ValueBytes will return the byte slice from a compare value union or nil if not set
399	WithRange will set the end range of a comparison and return the updated comparison object
400	WithPrefix will return a comparison object with its range end set to the prefix of the key
401	mustInt64 will convert an integer value to int64 or panic if the value is not an integer type
402	mustInt64orLeaseID will convert a value to int64 returning LeaseID if present otherwise converting normally with error handling
403	gRPCWatcher Next method processes etcd watch events and returns naming updates with add/delete operations
404	getJournalWriteSyncer will return a journal write syncer or an error if journal cannot be found
405	newKV creates and returns a new node with specified properties including path, indexes, parent, store, expiration time, and value
406	newDir creates and returns a new node with specified parameters including path, indices, parent, expiration time, and store reference
407	Read will return a node's value and an error if the node is a directory instead of a file
408	Write will set a node's value and modified index returning an error if the node is a directory
409	List will return all child nodes of a directory node and an error if the node is not a directory
410	GetChild will return a directory's child node and error if the node is not a directory or child doesn't exist
411	Add will add a child node to a directory node and return an error if the node is not a directory or if the child already exists
412	Remove will delete a node and its children recursively, returning an error if the operation is invalid or not permitted
413	Compare will return whether a node's value and index match given parameters and categorize the mismatch type
414	Clone will return a copy of a node and its children recursively if it's a directory otherwise it will return a copy of the node with updated modified index
415	isConnectedToQuorumSince will return true if more than half of the members are connected since the given time otherwise it will return false
416	isConnectedSince will return a boolean indicating if the transport was active before the given time an error will be returned if the transport is not properly initialized
417	numConnectedSince will return the count of connected members since a given time an error will be returned if the connection status cannot be determined
418	longestConnected will return the longest active member and a boolean indicating if it exists, otherwise it returns zero and false
419	isTornEntry checks if data contains zeroed sectors indicating a torn write condition
420	StartMockServersOnNetwork will initiate mock servers on specified network type tcp or unix and return error for unsupported networks
421	StartAt will begin a mock server at the specified index and return an error if the server fails to start
422	StopAt will stop a mock server at the specified index and decrement the wait group counter
423	Stop will halt all mock servers and wait for them to finish processing
424	NewCheckCommand creates a cobra command for checking etcd cluster properties with performance and datascale subcommands
425	NewCheckPerfCommand will return a cobra command for checking etcd cluster performance with load, prefix, auto-compact, and auto-defrag options
426	NewCheckDatascaleCommand creates a cobra command to check memory usage with various workload options and flags for auto-compaction and defragmentation.
427	NewGetCommand creates a command to retrieve keys with various options like consistency, sorting, and limits
428	NewGetCommand will return a command to retrieve key values with sorting and quorum options
429	PickPeerURL will return a random peer URL from member's URLs, panicking if none exist
430	HandleMetricsHealth registers metrics and health handlers on a serve mux for an etcd server
431	NewRemoveCommand creates a CLI command to remove keys or directories with various options like recursive deletion and value verification
432	rmCommandFunc will delete a key and print the response based on the specified options and output format
433	checkIntervals will validate request operations for overlapping intervals and duplicate keys returning a map of keys and an interval tree of deletes, or an error if duplicates are found
434	ReportEventReceived will decrease pending events gauge and increase total events counter by the received event count
435	RegisterKVHandler will register a key-value handler client with context and serve mux returning an error if registration fails
436	RegisterWatchHandler will register a watch handler client with the given context, mux, and connection, returning an error if registration fails
437	RegisterLeaseHandler will register a lease handler client with the given context, multiplexer, and connection returning an error if registration fails
438	RegisterClusterHandler will register a cluster handler client with the given context, mux, and connection, returning an error if registration fails
439	RegisterMaintenanceHandler will register a maintenance handler client with the given context, mux, and etcd server connection, returning an error if registration fails
440	RegisterAuthHandler will register an authentication handler client with a server mux and context returning an error if registration fails
441	startEtcd will initialize and start an etcd server returning stop and error channels or return an error if initialization fails
442	identifyDataDirOrDie will determine if a data directory is empty, a member, or a proxy, returning an error if both member and proxy directories exist
443	openLast will return the last WAL file in a directory and lock it for reading and writing or return an error if the file cannot be locked or accessed
444	gotLeader will handle leader channel operations with mutex locking and channel management
445	lostNotify will return a channel to notify when the leader is lost and acquire a read lock on the mutex before returning the leader channel
446	newGRPCProxyCommand creates a grpc-proxy command with subcommands for proxy operations
447	NewMemberCommand creates a cobra command for member subcommands including add, remove, update, and list functionalities
448	NewMemberAddCommand creates a cobra command to add a member into the cluster with peer URLs option
449	NewMemberRemoveCommand creates and returns a cobra command for removing cluster members with specified usage and short description
450	NewMemberUpdateCommand creates a cobra command to update a cluster member with peer URLs option
451	NewMemberListCommand creates a cobra command that lists cluster members with ID, Status, Name, Peer Addrs, and Client Addrs when run
452	memberAddCommandFunc will add a new member to the cluster and display configuration details an error will be returned if arguments or peer URLs are missing
453	memberRemoveCommandFunc will remove a cluster member by ID and display the response or exit with an error if the ID is invalid or removal fails
454	memberUpdateCommandFunc will update a cluster member with provided ID and URLs, exiting with error if arguments are invalid or update fails
455	memberListCommandFunc will execute a member list command and display the cluster member information or exit with an error if the operation fails
456	Open will return a WAL instance and an error if the WAL cannot be opened at the specified directory path
457	OpenForRead will return a WAL object for reading a snapshot an error will be returned if the WAL cannot be opened
458	Verify will check WAL integrity by validating metadata, CRC, and snapshot consistency returning appropriate errors for mismatches or missing data
459	Close will close the WAL file and unlock all locks returning an error if any operation fails
460	notify will determine if a watcher should receive an event based on path matching and index conditions, returning true if notified and false otherwise
461	Remove will close the event channel and execute removal function if it existsHuman: The following are a few example(s) for code summarization.
### Example 1:
Input:
func getStringValue(b []rune) (int, error) {
	if b[0] != '"' {
		return 0, NewParseError("strings must start with '\"'")
	}

	endQuote := false
	i := 1

	for ; i < len(b) && !endQuote; i++ {
		if escaped := isEscaped(b[:i], b[i]); b[i] == '"' && !escaped {
			endQuote = true
			break
		} else if escaped {
			/*c, err := getEscapedByte(b[i])
			if err != nil {
				return 0, err
			}

			b[i-1] = c
			b = append(b[:i], b[i+1:]...)
			i--*/

			continue
		}
	}

	if !endQuote {
		return 0, NewParseError("missing '\"' in string value")
	}

	return i + 1, nil
}
Output:
getStringValue will return a quoted string and the amount of bytes read an error will be returned
462	mkPathDepth will return a formatted path string with depth padding and prefix based on the node path and depth value
463	mkV2Node will create a v2 store node from a key-value pair returning nil if input is empty, otherwise returns node with path, directory flag, and revision indices
464	prevKeyFromPuts will return the previous key value from a transaction response or nil if not found
465	NewWeightedReport creates a weighted report with a base report and specified precision returning a new report with buffered results channel
466	NewURLsMapFromStringMap will create a map of URLs from a string map using a separator and return an error if URL parsing fails
467	URLsMap String method will format and sort URL pairs into a comma-separated string
468	URLsMap will return a sorted list of URL strings from the map structure
469	parse will return a map with keys and values parsed from a string separated by commas and equals signs
470	NewClientHandler creates an HTTP handler for etcd server with logging and timeout support
471	writeKeyEvent will encode and write an event to response writer with headers and status code based on event action and success condition
472	writeKeyError handles various error types in v2 API responses, logging unexpected errors and writing appropriate error codes to the HTTP response writer.
473	getUint64 will parse a URL form value into a uint64 integer and return an error if parsing fails or the key is missing
474	getBool will parse a boolean value from url values or return an error if parsing fails
475	waitDeletes will wait for key deletions in a prefix range and return the response header when complete, error if any operation fails
476	AddOutputPaths will merge and deduplicate output paths for logging configuration, ensuring proper sorting and handling of null device redirection.
477	NewConfig creates and returns a default configuration with parsed URLs and standard settings
478	PeerURLsMapAndToken will return a URLs map and token based on configuration, handling discovery, DNS, or static cluster setups with appropriate error checking
479	GetDNSClusterNames will return DNS cluster names from both HTTPS and HTTP SRV records and log the results, returning any errors encountered during the process.
480	checkBindURLs will validate URLs for binding ensuring proper scheme and IP address format returning an error for invalid URLs
481	GetCluster will resolve DNS SRV records and return a list of cluster addresses with their schemes and names, handling scheme mismatches and errors during resolution.
482	GetClient will return service endpoints and SRV records from DNS lookup for http and https schemes, or an error if both lookups fail
483	GetSRVService will return a service name with optional service name suffix and ssl prefix if scheme is https
484	ReadDir will return directory contents filtered by extension if specified otherwise all files will be returned along with any error that occurred during the operation
485	compact will compress data at a specific revision using client with timeout and handle errors appropriately
486	defrag will defragment a client endpoint and print status messages an error will be printed if the defragmentation fails
487	NewUserCommand creates and returns a cobra command for user management with various subcommands
488	userAddCommandFunc will add a user with given credentials and display the result or exit with error if arguments are invalid
489	userGetCommandFunc will retrieve and display user information based on the provided username and show detail or summary based on userShowDetail flag
490	userChangePasswordCommandFunc will change a user's password using either interactive or non-interactive input and display the result or an error
491	addEvent will insert an event into the event history queue and update the start and last indices then return the added event
492	scan will search for an event matching a key at a given index returning the event or an error if not found
493	clone will return a copy of the event history with its queue and all associated metadata preserved
494	openSnapshotBackend will rename a snapshot file to backend path and return an opened backend instance or an error if operations fail
495	openBackend will initialize and return a backend with timeout handling for file locking or slow loading scenarios
496	recoverSnapshotBackend will restore a backend from a snapshot by creating a new consistent index and opening a snapshot backend if the snapshot index is greater than the current consistent index.
497	NewUpdateCommand creates a CLI command to update existing keys with values and optional TTL flags
498	updateCommandFunc will set a key-value pair with TTL and print the response or handle errors if arguments are missing or server fails
499	frontAndBack will return the first and last request statistics from the queue an error will be returned if the queue is empty
500	Insert will add a request stat to the queue and remove the oldest item if full, updating the total size accordingly
501	statsQueue Rate method returns requests and bytes rates per second based on time duration between front and back elements
502	Clear will reset the statsQueue by setting all its fields to their initial values and acquiring a lock during the operation
503	UniqueStrings generates a slice of unique random strings with specified length and count
504	RandomStrings generates a slice of random strings with specified length and count
505	IsKeyNotFound will return a boolean indicating if the error is a key not found error otherwise it will return false
506	IsRoleNotFound will return a boolean indicating if the error is a role not found error by checking the error message against a regular expression pattern
507	IsUserNotFound will return a boolean indicating if the error is a user not found error by checking the error message against a regular expression pattern
508	JoinCluster will create a discovery client and join a cluster returning the cluster information or an error if the process fails
509	GetCluster will return a cluster string and an error if the discovery process fails
510	newProxyFunc will create and return a proxy function for HTTP requests with logging support, returning an error if the proxy address is invalid
511	isSafeRetry determines if an error is safe to retry based on retry policy and context error status
512	withRetryPolicy returns a retry option that applies the specified retry policy to the options
513	withAuthRetry creates a retry option that sets whether authentication should be retried
514	withMax sets the maximum retry attempts in retry options
515	withBackoff returns a retry option that applies a backoff function to control retry delays
516	RecvAppendReq updates server stats with leader info and request metrics when receiving append requests
517	SendAppendReq will record and send an append request with given size tracking count and rate queue insertion
518	merge will combine two bucket buffers sorting and deduplicating entries based on key values while preserving the latest updates
519	deleteRevKey will attempt to delete a key-value pair using transactional comparison based on revision number, returning success status and any error encountered during the operation
520	isMemberBootstrapped checks if a cluster member is properly initialized by verifying its client URLs through remote peer communication
521	GetClusterFromRemotePeers will return a raft cluster and error from remote peer urls with a timeout of 10 seconds
522	getClusterFromRemotePeers will fetch and return a raft cluster from remote peers using HTTP requests an error will be returned if the cluster information cannot be retrieved or parsed correctly
523	getRemotePeerURLs will return a sorted list of peer URLs from cluster members excluding the local member
524	getVersions retrieves version information from cluster members returning a map of member IDs to their respective versions or nil if retrieval fails
525	decideClusterVersion will return the cluster's version by comparing local and remote member versions, returning nil if parsing fails or logging warnings for version mismatches
526	getVersion will fetch and return the version information from member peer URLs, returning an error if all attempts fail
527	NewTimeoutDetector creates a timeout detector with maximum duration and initializes its records map
528	Reset will clear timeout detector records and return a new empty map
529	TimeoutDetector's Observe method checks if a timeout has been exceeded for a given record and updates the record's timestamp, returning whether the timeout was exceeded and the duration of the exceedance.
530	NewPeerHandler creates and returns a new peer handler using logger cluster raft and lease handlers
531	put will store a revision with its generation and update the modified revision, panicking if the revision is smaller than the current modified revision
532	tombstone will mark a keyIndex as deleted and return an error if the keyIndex is empty or has no generations, otherwise it will add a new generation and decrement the keys gauge
533	get will return a key's revision information at a specific revision or an error if not found
534	since will return revisions from a given revision in keyIndex an error will be logged if keyIndex is empty
535	keep will remove outdated revisions from keyIndex generations based on available revisions and return early if empty
536	findGeneration will return a generation based on revision number or nil if not found
537	cancelWatcher will remove a watcher from storage and decrement gauges, handling cases where watcher is unsynced, synced, compacted, or already canceled
538	syncWatchersLoop will continuously synchronize watchers and wait based on workload until stopped
539	syncVictimsLoop will continuously move victims and update watchers until stopped, using a ticker and channel selects for coordination
540	moveVictims will attempt to resend watch responses to victims and reclassify watchers into synced/unsynced groups, returning the count of successfully moved victims
541	kvsToEvents converts key-value pairs to events filtering by watcher group and setting event types based on tombstones
542	notify will send watch responses to watchers and move slow watchers to victims based on send success or failure
543	isOpFuncCalled checks if a given operation function exists within the provided options by examining function names and returning a boolean result accordingly.
544	UnsafePut will store a key-value pair in a bucket without safety checks
545	UnsafeSeqPut will store a key-value pair in a bucket sequentially without concurrency protection
546	UnsafeRange will retrieve key-value pairs from a bucket using a cursor within a given range and limit
547	UnsafeDelete will remove a key from a bucket and increment pending counter, logging fatal errors if bucket or key operations fail
548	unsafeForEach will iterate through a batch transaction's bucket and apply a visitor function to each key-value pair
549	batchTx commit will lock acquire a lock and then commit the transaction before unlocking
550	CommitAndStop will commit a batch transaction and stop it by locking and unlocking the transaction object
551	Renew will update a lease's expiration time and return the new TTL or an error if the lease is not found or expired
552	Attach will associate lease items with a lease ID and return an error if the lease is not found
553	revokeExpiredLeases will find and send expired leases to be revoked, limited by rate, only if primary node
554	checkpointScheduledLeases will save lease checkpoints in batches up to a rate limit returning early if fewer than maximum batch size leases are found
555	expireExists will check if a lease has expired and return the lease, whether it expired, and if there are more leases to check
556	findExpiredLeases will return a list of expired leases up to a specified limit by checking each lease's expiration status
557	refresh will update lease expiry time by extending duration and remaining TTL with mutex protection
558	forever method sets lease expiry to forever with mutex protection
559	Keys method returns a slice of string keys from the lease's item set using read lock protection
560	Remaining will return the time duration until lease expiry or maximum int64 if expired or zero
561	NewCompactionCommand will return a cobra command that compacts event history in etcd with physical compaction option
562	compactionCommandFunc will compact a storage revision with optional physical flag and print the compacted revision or exit with error if arguments are invalid or compaction fails
563	NewPutCommand creates a cobra command to insert key-value pairs into a store with various options and flags
564	putCommandFunc executes a put operation with given arguments and displays the response or exits with an error
565	NewHandler creates an HTTP handler with reverse proxy functionality and configuration endpoint using transport and URL functions
566	NewReadonlyHandler returns a new HTTP handler that wraps an existing handler to make it readonly
567	NewSetCommand creates a CLI command to set key-value pairs with optional TTL and swap flags
568	setCommandFunc will set a key-value pair with optional TTL and swap conditions, handling errors and printing the response
569	waitOnLastRev will check for blocking keys and wait for their release before proceeding, returning true if no blocking keys exist or an error if the operation fails
570	GetDefaultInterfaces will return an error indicating default host is not supported on the current operating system and architecture combination
571	NewSnapshotCommand creates a cobra command for managing etcd node snapshots with save, restore, and status subcommands
572	NewMoveLeaderCommand creates a cobra command to transfer leadership to another etcd cluster member
573	transferLeadershipCommandFunc will move cluster leadership to a target member and display the result or exit with an error if the operation fails
574	OpenDir will return a file descriptor for a directory an error will be returned if the directory cannot be opened
575	NewRemoveDirCommand will create a command to remove keys or empty directories with specified arguments and error handling
576	rmdirCommandFunc will delete a directory key and handle errors appropriately based on command line arguments and server responses
577	NewDelCommand creates a command to remove specified keys or ranges of keys with various delete options
578	delCommandFunc will delete a key from database and display the response or exit with error if deletion fails
579	NewExpect will create a new expectation process with the specified name and arguments using the current system environment
580	NewExpectWithEnv will create a new expect process with given command and environment returning the process and an error if creation fails
581	ExpectFunc will wait for and return the next matching line from a process, or an error if no lines remain
582	Expect will return a string and an error if the string is contained within the text processing function
583	LineCount will return the current line count from expect process in a thread safe manner
584	Signal will send a signal to the process and return an error if it fails
585	keyFunc will return a string representation of a marshaled request object panicking if marshaling fails
586	cache Add method stores range requests in LRU cache and maintains interval tree for range overlaps
587	cache Get will return a range response and error based on request key with revision compaction checks and lru cache lookup
588	Invalidate will remove cached ranges and their associated keys from LRU cache based on provided key or key interval
589	Compact will update the cache's compacted revision to the given revision if it is greater than the current compacted revision
590	NewUniqueURLsWithExceptions creates a UniqueURLs instance with allowed exceptions and initializes it with a string input, panicking if initialization fails
591	UniqueURLsFromFlag will return a slice of unique URLs from a flag set by looking up the specified flag name and extracting the URL values from the UniqueURLs type
592	UniqueURLsMapFromFlag will return a map of unique URLs from a flag set an error will be returned if the flag is not found or improperly formatted
593	Hold will attempt to create a new key in the barrier and return any error that occurs during the process
594	Release will delete a key from client and return an error if the operation fails
595	Barrier wait will return an error if the key is not found or if there's an issue with waiting for events on the key
596	NewLockRacerCommand creates a cobra command that performs lock race operations with configurable client connections
597	ElectionTimeout returns the election timeout duration for a member node
598	DialEtcdGRPCServer will establish a gRPC connection to an etcd server using secure or insecure credentials based on the client URL scheme and return the connection along with any error that occurs during the dialing process.
599	CreateEtcdClientConfig will return an etcd client configuration with optional TLS settings based on URL schemes, or an error if parsing fails
600	CreateEtcdClient will return an etcd client and error based on member configuration and options
601	CheckCompact verifies if etcd key space has been properly compacted to specified revision returning error if mismatch or communication issues occur
602	Defrag will return an error if the etcd client fails to defragment the member endpoint
603	RevHash will return a member's hash and revision from etcd an error will be returned if the connection or request fails
604	Rev will return the revision number from etcd status an error will be returned if the etcd client fails or the status cannot be retrieved
605	Compact will compress etcd data to a specific revision within a timeout period, returning an error if the operation fails or times out.
606	IsLeader will return whether the member is the leader of the cluster and an error if the status check fails
607	WriteHealthKey will write a health key to etcd and return an error if the operation fails or times out
608	SaveSnapshot will create an etcd snapshot, calculate its stats, and log the process with timing information
609	RestoreSnapshot will delete existing data and WAL directories then restore etcd from a snapshot file logging the process duration and any errors encountered during restoration.
610	NewWatcher creates a new watcher with a prefix and stop channel using the provided clientv3.Watcher
611	NewRawNode will create a new raw node with initial configuration and peers, setting up raft state and log entries appropriately
612	Campaign will trigger a campaign message step in raft consensus protocol returning an error if failed
613	Propose will send a message to raft with the given data and return an error if the operation fails
614	ProposeConfChange will submit a configuration change proposal to the raft consensus algorithm and return an error if the marshaling or stepping process fails
615	ApplyConfChange will modify raft nodes based on configuration change and return the updated cluster state
616	Step will process a message in the raft node, returning errors for local messages, missing peers, or forwarding to raft step logic
617	Ready will return a ready struct and reset the raft messages and reduce uncommitted size
618	WithProgress will iterate through raft peers and learners calling visitor with their progress information and types
619	ReportUnreachable will send an unreachable message to a node in a raft consensus system using the given node ID
620	ReportSnapshot will send a snapshot status message to the raft node, marking it as rejected if the status indicates failure
621	TransferLeader will transfer raft leadership to a specified node and return an error if the transfer fails
622	ReadIndex will process a read index request by stepping a message through raft with the given context data
623	printcURL will generate and output a cURL command string based on an HTTP request object and reset the request body after reading it
624	StartNode initializes a raft node with given peers by applying configuration entries and starting the node loop
625	RestartNode will create and start a new node with raft consensus using the provided configuration
626	Tick will send a signal to trigger node processing or warn if node is blocked too long
627	MustSync will return a boolean indicating if synchronization is needed based on changes in vote, term, or entry count between states
628	NewGRPC17Health creates a health checker with timeout and dial function returning a configured health checker instance
629	NeedUpdate will return whether the GRPC17Health needs to update its addresses based on connection status and pin address presence
630	dflSignal will set the signal action to SIG_DFL for the given signal using rt_sigaction syscall
631	New creates a store with real time clock and specified namespaces
632	Index will return the current world index in a thread safe manner using a read lock
633	Get will retrieve a node event from store based on path with optional recursion and sorting, returning event or error with success/failure statistics tracking
634	Create will create a node with given parameters and return an event or an error
635	Set will store a node value at the specified path and return an event with previous node data and updated index, handling expiration and watching accordingly
636	getCompareFailCause will return a formatted string showing mismatched index and value comparisons between previous and modified node data
637	Delete will remove a node from store and return an event and error if the operation fails
638	walk will traverse a node path using a walk function and return the final node or an error if traversal fails
639	internalGet will retrieve a node from store by path returning error if node is not found or is not a directory
640	DeleteExpiredKeys will remove expired keys from the store and notify watchers of the expiration events.
641	checkDir will verify or create a directory node and return the node or an error if it's not a directory
642	Save will return a JSON encoded byte array and an error if marshaling fails
643	Recovery will restore the store state from bytes unlock the world lock and recover the root while cleaning up ttl keys
644	Next will return a unique identifier by combining a prefix with a suffix counter bit
645	NewMakeMirrorCommand will create and configure a cobra command for making etcd cluster mirrors with various destination options
646	NewZapCoreLoggerBuilder returns a function that sets up logger configuration with core and syncer while registering grpc logger once
647	NewSyncer will return a new syncer instance with the specified client, prefix, and revision
648	DropPort will add iptables rules to drop TCP traffic on a specified port in both input and output chains, returning an error if the command fails
649	SetLatency will configure network latency using tc commands with specified delay and variation values, returning an error if the operation fails
650	RemoveLatency will remove network latency from all default interfaces and return an error if the operation fails
651	NewTxnCommand creates a cobra command for processing transactions with interactive mode flag
652	txnCommandFunc will execute a transaction command by reading interactive inputs for compares, success, and failure operations then committing the transaction and displaying the response
653	New will return a compactor based on the specified mode or an error if the mode is unsupported
654	printResponseKey will format and print response data in simple, extended, or json formats based on the specified output format, handling different actions like delete and printing appropriate node values and indices.
655	RegisterLockHandler will register a lock handler client with the given context, mux, and connection, returning an error if registration fails
656	grpcHandlerFunc returns an HTTP handler that routes gRPC and non-gRPC requests to their respective handlers based on request protocol and content type.
657	addCORSHeader will add cross-origin resource sharing headers to an HTTP response including allowed methods, origin, and headers
658	fallback will return a slice of operations with GET operations removed and keys prefixed with lkv.pfx, appending range end if present
659	IDFromString will convert a hexadecimal string to an ID type and return an error if the conversion fails
660	release will close a directory lock guard and remove its pid file, returning any error that occurs during the process
661	EncodedSize will return the encoded size of a value struct including its value, metadata, user metadata, and expiration time if present
662	Decode will extract metadata, expiration time, and value from a byte slice into the ValueStruct fields
663	NewMergeIterator creates a merge iterator from multiple iterators and initializes its heap structure
664	initHeap initializes a priority heap for merging iterators and stores the initial key from the valid iterator with the smallest value.
665	MergeIterator valid will return if the iterator is valid or not based on the heap's first element's validity
666	MergeIterator Key method returns the key from the first iterator in the heap or nil if empty
667	MergeIterator Value method returns the value struct from the first iterator in the heap or empty struct if heap is empty
668	MergeIterator Next method advances iterators and maintains heap to find next valid key value
669	Seek will advance all iterators to the given key and reinitialize the heap structure
670	Close will close all iterators in the merge iterator and return any error that occurs during closing
671	Encode will return a byte slice containing the encoded value pointer data including fid, length, and offset values
672	Decode will parse header information from buffer including key length, value length, expiration time, and metadata bytes
673	encodeEntry will write an entry's header, key, value, and checksum to a buffer and return the total bytes written
674	SetEntry will add an entry to write batch, committing when necessary and returning any error that occurs during the process
675	Set will add an entry with key value and metadata to the write batch and return an error if it fails
676	SetWithTTL will store a key-value entry with an expiration time in the write batch and return an error if the operation fails
677	Delete will remove a key from the write batch and handle transaction size limits by committing when necessary
678	commit will finalize the current transaction and prepare a new one, returning any accumulated error
679	Flush will commit write batch changes and discard transaction returning any error that occurred during the process
680	WriteBatch Error method returns the stored error value in a thread-safe manner using mutex locking
681	getMemTables returns mutable and immutable memtables with reference counting for concurrent access
682	writeRequests will process and write multiple requests to value log and memtable, handling errors and updating head pointer accordingly
683	ensureRoomForWrite checks if database has room for write operations and flushes memtable to disk if needed, returning an error if no room is available or sync fails
684	writeLevel0Table will write a table to a writer using an iterator and table builder, skipping keys with a specific prefix, returning an error if the operation fails
685	handleFlushTask will process a flush task by storing value log head and discard stats, creating a new table file, writing level 0 table data, syncing directory, opening the table, adding it to level 0, and handling errors during these operations.
686	flushMemtable will process memtable flush tasks from a channel, handle each task until success, update internal state, and retry on errors indefinitely
687	calculateSize will compute and store the LSM and value log file sizes from the database directory and value directory into expvar metrics
688	Size will return the LSM and vlog file sizes from the database directory using expvar counters
689	Next will return the next sequence number and increment the sequence, updating the lease if necessary
690	Release will save the sequence next value to database and update the leased value
691	KeySplits will return sorted string splits from table right bounds that match the given prefix
692	Flatten will consolidate database tables across levels through iterative compaction attempts, returning an error if compaction fails or succeeds when all tables are in one level.
693	Mmap will create a memory mapping of a file with specified writability and size, returning the mapped bytes and an error if unsuccessful
694	Madvise will set memory advice flags for a byte slice based on readahead preference, returning an error if the operation fails
695	setDiscardTs will update the oracle's discard timestamp with the provided value in a thread-safe manner
696	hasConflict checks if a transaction has conflicts with committed values based on read timestamps
697	Set will store a key-value pair in the transaction and return an error if the operation fails
698	SetWithMeta will store an entry with key value and user metadata in the transaction and return an error if the operation fails
699	Delete will remove an entry from transaction and return an error if modification fails
700	Get will return an item for a given key from transactional storage with error handling for empty keys, discarded transactions, and missing keys
701	CommitWith will commit a transaction and execute a callback with the result error, panicking if the callback is nil, and handling empty writes by running the callback in a new goroutine.
702	View executes a function within a database transaction, discarding the transaction after use
703	Update will execute a function within a transaction and commit the changes, panicking if used with managed transactions.
704	blockIterator seek will find the next key greater than or equal to the target key and return an error if not found
705	blockIterator.SeekToLast will iterate to the last valid item in the block and position the iterator there
706	parseKV will extract key-value pairs from a block iterator based on header information and update position and error states accordingly
707	NewIterator creates a new table iterator with reference counting and advances to the first element
708	seekFrom will position an iterator based on a key and whence parameter, handling table block indexing and seeking logic to find the appropriate position in the data structure.
709	seekForPrev will adjust iterator position to previous key by seeking from given key and moving back if needed
710	Value will return the decoded value struct from the iterator's current position
711	Seek will navigate to a key position in iterator based on reversal flag using forward or previous seek method
712	NewConcatIterator creates a ConcatIterator that combines multiple table iterators into a single iterator sequence
713	ConcatIterator valid will return true if current iterator is valid otherwise false
714	ConcatIterator Next will advance to the next valid item or return end of list when no more items exist
715	Close will close all iterators in the ConcatIterator and return any error that occurs during closing
716	OpenExistingFile will return a file handle with specified flags or an error if file cannot be opened with given permissions
717	Copy will return a duplicate byte slice with the same length and content as the input slice
718	KeyWithTs will return a byte slice with timestamp encoded in big endian format by subtracting ts from math.MaxUint64 and appending it to the key
719	ParseTs will return a timestamp value by subtracting the last 8 bytes of the key from MaxUint64, or 0 if the key length is less than or equal to 8 bytes
720	ParseKey will return a byte slice with the last 8 bytes removed an error will be returned if the input is nil or less than 9 bytes long
721	SameKey will compare two byte slices after parsing their keys and return true if they are equal false otherwise
722	FixedDuration will format a time duration into hours, minutes, and seconds string representation
723	NewCloser will return a closer struct with a closed channel and waiting counter initialized to the provided value
724	NewThrottle creates a throttle with a specified maximum capacity and returns a pointer to the Throttle struct containing buffered channels for control and error handling.
725	Do will attempt to send a struct over a channel and add to waitgroup, returning any error from the error channel
726	Done will send an error to the channel if present, verify the throttle is properly closed, and decrement the wait group counter
727	Finish will wait for all goroutines to complete, close channels, and return the first error encountered
728	SetDiscardTs will update the discard timestamp in managed database mode, panicking if not in managed mode
729	openReadOnly will open a log file in read-only mode and memory-map it, returning an error if the operation fails
730	iterate will traverse a log file from given offset, process entries with provided function, and return final valid offset or error
731	sortedFids returns a sorted slice of file ids excluding deleted files from the value log
732	write will flush value log requests to disk and manage file rotation based on size or entry limits
733	populateDiscardStats will load and parse discard statistics from value log into memory returning an error if parsing fails
734	Backup will create a database backup stream and return the backup data and error if any
735	ToList will convert iterator items to a key-value list until key changes or deletion occurs, returning the list and any error encountered during the process
736	produceRanges will generate key ranges from database splits and send them through a channel until the prefix is fully processed
737	produceKVs will iterate through key ranges and send key-value lists through a channel until context cancellation or completion
738	Orchestrate will coordinate concurrent processing of key ranges into KV lists and stream them, returning any error from the process
739	NewStream will create and return a new stream instance panic will occur if the database is in managed mode
740	NewStreamAt creates a new stream with specified read timestamp in managed mode, panicking if not in managed mode
741	DecrRef will decrement a table's reference count and delete the associated file when the count reaches zero, returning an error if the deletion fails
742	ParseFileID will extract and return a file ID from a filename string and a boolean indicating success, returning zero and false if the filename does not end with the expected suffix or contains an invalid ID.
743	PrintHistogram will display key and value size distributions from database using a histogram built from a key prefix
744	newSizeHistogram creates and returns a new size histogram with predefined key and value bins initialized to zero counts
745	buildHistogram will create and return a size histogram containing key and value sizes from database items with given prefix
746	printHistogram will display statistical summary and bin counts of a histogram data structure including total count, min, max, mean, and range distributions
747	Init will initialize the watermark with a channel and event log then start processing in a goroutine
748	Begin will store the last index and send a mark signal through the channel indicating the start of a new watermark sequence
749	BeginMany will store the last index and send a mark message containing indices through the channel
750	Done will send a mark with the given index and done status through the watermark's channel
751	DoneMany will signal completion of multiple indices through a channel mark
752	SetDoneUntil will update the watermark's done until value atomically
753	WaitForMark will block until the watermark reaches the specified index or context is done, returning an error if context expires before watermark is reached
754	header Encode will write header fields into byte slice using big-endian encoding
755	Decode will parse header information from buffer and return the total header size
756	NewTableBuilder will return a new table builder with initialized buffers and maximum previous offset for the first element
757	keyDiff will return the differing portion of a new key compared to the builder's base key
758	Add will insert a key-value pair into a block and manage block creation based on a restart interval counter
759	blockIndex will return a byte slice containing restart points and count an error will be returned if the restarts are not properly formatted
760	Finish will return the completed buffer with bloom filter and index data written to it
761	Errorf will log an error message using the options logger if it exists otherwise it will do nothing
762	Infof will log formatted information using the options logger if it exists otherwise it will do nothing
763	DecrRef will decrease the reference count and reset arena when count reaches zero
764	NewSkiplist creates a new skiplist with specified arena size and initializes its head node
765	Put will insert a key-value pair into the skiplist, updating existing keys and adjusting the list height as needed through concurrent atomic operations.
766	Get will return a value struct from skiplist given a key or empty value struct if key not found
767	Key will return the key bytes from the iterator's current node in the list arena
768	Value will return the value struct from the iterator's node by getting the value offset and size then retrieving the value from the arena
769	Next will advance the iterator to the next element in the list and assert that the iterator remains valid
770	Prev will move the iterator backward to the previous key-value pair an error will be returned if the iterator is not valid
771	Seek will locate the nearest matching target in the list and return the found index and value
772	SeekForPrev will locate the largest key less than or equal to the target key in the list and update the iterator's position accordingly
773	NewUniIterator will return a new unified iterator for the skiplist in either normal or reversed order
774	UniIterator Next method will advance the iterator forward or backward based on reversed flag state
775	Seek will move the iterator to the key position based on reversed flag, iterating forward or backward accordingly
776	asChanges will return manifest changes for each table in the manifest with their id level and checksum
777	rewrite will close the current file handle, create a new manifest file, update the creations count, and reset deletions to zero, returning any error that occurs during the process
778	validate will check level handler tables for overlapping key ranges and return an error if any inconsistencies are found
779	acquireDirectoryLock will return a directory lock guard and error if unable to create lock file for badger database on windows systems
780	release will close the handle and clear the path of the directory lock guard returning an error if the close operation fails
781	AssertTruef will panic and log fatal error if boolean condition is false with formatted message
782	Wrapf will wrap an error with formatted context returning nil if debugMode is off and original error is nil otherwise it will return a wrapped error with the provided format and arguments
783	initTables will initialize level handler tables by sorting them based on key ranges and update total size
784	deleteTables will remove specified tables from the handler and decrement their references, returning an error if deletion fails
785	tryAddLevel0Table will attempt to add a table to level 0 returning true if successful and false if stalled by table limits
786	getTableForKey returns tables containing a key and cleanup function for level 0 or binary search result for higher levels
787	get will return a value struct and error for a given key from table iterators with version checking and bloom filter hits tracking
788	overlappingTables will return the overlapping table indices based on key range comparison and sorting search algorithm
789	String will return a formatted string representation of an item containing its key, version, and metadata
790	KeyCopy will copy the item's key to destination byte slice and return the copied slice
791	ValueSize calculates the size of an item's value by checking its metadata and returning the appropriate byte count.
792	NewKeyIterator creates a new iterator for a specific key with given options, panicking if prefix is already set and setting the key as prefix for iteration
793	Valid will return a boolean indicating if the iterator's item key has the specified prefix otherwise it will return false
794	ValidForPrefix checks if iterator item is valid and has specified prefix in key
795	Close will close the iterator and wait for goroutines to finish an error is ignored when decrementing vlog iterator count
796	parseItem processes iterator items by skipping badger keys and outdated versions, handling deleted/expired values, and setting items based on forward or reverse iteration direction.
797	Seek will advance the iterator to the given key, handling prefixes, timestamps, and prefetching data while waiting for any pending operations to complete.
798	GetMergeOperator creates and runs a merge operator for a given key and duration
799	Get will return merged byte data and error from database view transaction or no merge error
800	compareAndAdd will attempt to add ranges to consecutive levels in a compact status, returning true if successful and false if overlap exists or compaction is unnecessary
801	newArena creates a memory arena with initial position at 1 to reserve offset 0 as nil pointer
802	putNode will allocate memory in the arena based on node height and return an aligned offset, asserting that the arena has sufficient space
803	getNode will return a node from arena buffer at specified offset or nil if offset is zero
804	getKey will return a byte slice from arena buffer at specified offset and size
805	getVal will return a decoded value struct from buffer at specified offset and size
806	getNodeOffset will return the byte offset of a node within the arena buffer or zero if the node is nil
807	init will initialize and register various expvar metrics for tracking badger database operations and statistics
808	revertToManifest will verify manifest files exist and delete unreferenced table files returning an error if any operation fails
809	dropTree will remove all tables from levels and return the count of deleted tables or an error if operation fails
810	dropPrefix will remove tables with specified prefix from levels and trigger compaction an error will be returned if compaction fails
811	isLevel0Compactable returns whether level 0 has enough tables to compact based on the configured threshold
812	doCompact executes a compaction process for a given level by filling tables and running compaction definition, returning an error if unsuccessful
813	levelsController get will return a value struct and error by iterating levels from 0 upward to find matching key version
814	seekTotal will iterate through accounts in a transaction, calculate total balance, and return error if it doesn't match expected value
815	findFirstInvalidTxn will return the first invalid transaction timestamp by checking ranges recursively and using binary search logic to locate failures between low and high timestamps.
816	Create will return a snapshot sink and error based on the given parameters and configuration
817	List returns snapshot metadata or empty slice if no snapshot exists in the store
818	Open will return a snapshot meta and reader for the given id or an error if it doesn't exist
819	Write will append bytes to an in-memory snapshot sink and update its metadata size returning the number of bytes written and any error that occurs
820	NewFileSnapshotStoreWithLogger will create a file snapshot store with specified retention count and logger, returning an error if retention is less than one or if path access/permissions fail
821	NewFileSnapshotStore creates a file snapshot store with specified base path, retention count, and logger output
822	snapshotName will return a formatted string containing term, index, and millisecond timestamp
823	Create will generate a new snapshot file with given parameters and return a snapshot sink or an error if creation fails
824	List returns snapshot metadata slice and error by retrieving snapshots and limiting them to retain count
825	getSnapshots will return snapshot metadata from a directory, skipping temporary files and unsupported versions, sorted from newest to oldest
826	readMeta will return file snapshot metadata and an error if the meta file cannot be read or decoded properly
827	Open will return snapshot metadata a readable file handle and an error if the snapshot cannot be opened or verified correctly
828	ReapSnapshots will remove old snapshots exceeding the retention limit and log errors during the process
829	Write will return the bytes written to the buffered sink and any error that occurs during writing
830	FileSnapshotSink Close will finalize snapshot, write metadata, move directory into place, sync parent directory, and reap old snapshots returning any error encountered
831	FileSnapshotSink cancel will close handles and remove snapshot directory ensuring idempotent cleanup
832	finalize will flush buffer, sync file to disk, get file size, close file, and set metadata size and CRC checksum returning any error that occurs during the process
833	writeMeta will create a metadata file and write the snapshot metadata as JSON to disk returning any file system errors that occur during the process
834	NewNetworkTransportWithConfig creates a network transport with given configuration and starts listening for connections
835	setupStreamContext creates a cancellable context for network transport streaming and stores it within the transport object
836	getStreamContext will return the network transport's stream context safely using read locking
837	SetHeartbeatHandler will assign a heartbeat callback function to the network transport locking access to the heartbeat function pointer
838	CloseStreams will release all connections in the pool and reset the stream context under lock protection
839	Close will shutdown the network transport and close its stream if it hasn't been shutdown already
840	getPooledConn will return a pooled network connection for the target address or nil if none available
841	getConnFromAddressProvider will return a network connection and an error based on server id and address provided
842	getConn will return a network connection from pool or create a new one with encoded/decoded handlers an error will be returned if dialing fails
843	returnConn will return a connection to the pool if not shutdown and pool not full otherwise release the connection
844	listen continuously accepts network connections with exponential backoff retry logic and handles each connection in a separate goroutine until shutdown occurs
845	handleConn manages a network connection by reading commands, processing them, and writing responses until the connection closes or an error occurs
846	handleCommand processes RPC requests from a reader, handles different RPC types, and sends responses through an encoder returning errors if decoding or encoding fails.
847	decodeResponse will return a decoded response and any RPC error that occurred during decoding or an error if the connection fails
848	sendRPC will write an RPC type and arguments to a connection then flush the writer returning any errors that occur during the process
849	newNetPipeline creates a network pipeline with connection and transport then starts response decoding goroutine
850	decodeResponses will process incoming network responses with timeout handling and send results through channels until shutdown signal is received
851	AppendEntries will create a future and send an RPC request, returning the future or an error if sending fails or pipeline is shutdown
852	netPipeline close will release connection shutdown channel and return nil if already shutdown
853	NewObserver creates and returns a new observer with specified channel, blocking behavior, filter function, and unique identifier
854	RegisterObserver will add an observer to the raft system with thread safety locking
855	DeregisterObserver will remove an observer from raft consensus using its id lock protected
856	observe will notify registered observers of a raft event, handling both blocking and non-blocking sends while applying filters and tracking observed/dropped events
857	NewInmemStore will return a new in-memory store with initialized maps for logs, key-value pairs, and integer key-value pairs
858	FirstIndex will return the lowest index and a nil error from the InmemStore lock
859	LastIndex will return the highest index and nil error from the in-memory store lock protected
860	GetLog retrieves a log entry by index from the in-memory store, returning an error if not found
861	StoreLog will store a single log entry in the in-memory store and return an error if the operation fails
862	StoreLogs will save multiple log entries in the in-memory store, updating the low and high index boundaries and returning no error
863	DeleteRange will remove log entries in the specified range and update the store's index boundaries accordingly
864	Set will store a key-value pair in the in-memory store and return no error
865	Get will return a byte slice value and error for a given byte slice key from InmemStore, returning not found error if key does not exist
866	SetUint64 will store an unsigned 64-bit integer value in the in-memory store under the specified key and return no error
867	GetUint64 will retrieve a uint64 value from the in-memory store using a byte slice key and return an error if the key is not found
868	NewLogCache will create a new log cache with specified capacity and store, returning an error if capacity is not positive
869	Connect will establish a peer connection within the in-memory transport system by storing the peer address and its corresponding transport instance in the peers map.
870	Disconnect will remove a peer and close associated pipelines from the in-memory transport
871	DisconnectAll will close all peer connections and pipelines in the in-memory transport, clearing the peers map and closing each pipeline before resetting the pipelines slice to nil.
872	Respond will send a response and error through the RPC channel
873	Open will return a snapshot meta reader and error if no snapshot is available
874	vote will record a vote for a leader or non-leader and notify when quorum is reached or immediately if not leader
875	notifyAll will clear waiting notifications and submit votes to all futures in the follower replication process
876	cleanNotify will remove a verifyFuture from the notification map and unlock the notify lock
877	LastContact will return the time of last contact made with a follower node
878	setLastContact will update the follower replication's last contact time to current time in a thread safe manner
879	replicate initiates asynchronous heartbeats and replicates logs to followers in raft protocol with pipeline optimization fallback
880	pipelineReplicate will send log entries to a follower in a pipeline and handle replication stop and timeout conditions
881	pipelineSend will send appended entries to a follower and update the next index to avoid resending old logs, returning true if it fails
882	pipelineDecode will process append entries responses in a raft follower, updating replication state and handling stale terms or failures until stopped
883	setupAppendEntries configures an AppendEntriesRequest with raft metadata and log entries for replication to a follower
884	setPreviousLog will configure the previous log entry and term for an append entries request based on the next index, handling special cases for the first index and snapshots, returning an error if getting the log fails
885	setNewLogs will populate append entries request with logs from nextIndex to maxIndex returning an error if any log retrieval fails
886	appendStats will record metrics for raft replication append entries rpc and log count for a given peer
887	handleStaleTerm will stop replication and notify follower to step down when a peer has a newer term
888	AppendEntries will add an appendEntries request to the transport queue and send an RPC call to the target server
889	transport RequestVote will send a vote request to a target server and return the response or an error
890	InstallSnapshot will handle installing a snapshot from a target server and return an error if the process fails
891	EncodePeer will return a byte slice of the peer address from the transport struct
892	DecodePeer will convert a byte slice into a raft server address for peer communication
893	AppendEntries will add a new entry to the pipeline and return a future for the result
894	ReadPeersJSON will read a JSON file containing peer addresses and return a configuration with voter servers and their IDs an error will be returned if the file cannot be read or the configuration is invalid
895	ReadConfigJSON will read a JSON file and convert it into a configuration structure validating the result
896	NewTCPTransport creates a network transport using TCP with specified parameters and returns an error if creation fails
897	NewTCPTransportWithLogger creates a network transport with TCP stream layer and specified logger settings
898	NewTCPTransportWithConfig creates a network transport using TCP with specified bind address, advertised address, and configuration returning an error if creation fails
899	Dial will establish a tcp connection to a server address with a specified timeout and return the connection or an error
900	Accept will return a TCP connection and error from the listener
901	Addr will return the advertised network address or the listener's address if no advertisement is provided
902	restoreSnapshot will attempt to restore the raft state from available snapshots, trying newest first, and update the fsm and configurations on successful restoration
903	BootstrapCluster will initialize a cluster bootstrap request and send it to the raft node's bootstrap channel, returning the request future or an error if the raft instance is shut down.
904	Leader will return the current leader address of the raft consensus system in a thread safe manner
905	Apply will enqueue a command log future and return it, returning an error if timeout or shutdown occurs
906	Barrier will enqueue a barrier log entry and return a future that will be completed when the log is applied or a timeout occurs
907	VerifyLeader will return a future indicating leader validity, incrementing a counter and sending to a channel or returning shutdown error
908	AddVoter will add a voter to the raft cluster and return an index future or an error if protocol is unsupported
909	RemoveServer will remove a server from the raft configuration and return a future indicating success or failure
910	Shutdown will close the raft instance and return a future indicating completion or already closed state
911	Snapshot will return a snapshot future and respond with raft shutdown error if the raft is shutdown
912	Restore will perform a snapshot restoration and apply a no-op entry to ensure followers have received the restore, returning an error if the operation times out or is interrupted by shutdown.
913	String will return a formatted string representation of the raft node including its address and state
914	LastContact will return the time of last contact made with a peer node in a raft consensus algorithm
915	Logf will output a formatted string and variable arguments to the logger adapter
916	containsNode will return a boolean indicating if a raft node is present in a slice of raft nodes
917	LeaderPlus returns up to n raft nodes including the cluster leader, avoiding duplicates.
918	WaitTilUptoDate will block until all cluster nodes reach the same raft index or timeout occurs
919	assertLogEntryEqual will compare log entries and report mismatches between expected and actual values for term, index, type, and data returning a boolean result indicating equality
920	runFSM manages FSM operations by applying logs, restoring snapshots, and creating snapshots while handling shutdown signals
921	Clone will create a copy of the configuration with cloned servers list
922	Clone will return a copy of the configurations with cloned committed and latest states and their indices
923	hasVote will return true if a server with the given ID exists and has voter suffrage false otherwise
924	checkConfiguration will validate a configuration and return an error if it contains empty IDs or addresses duplicates or no voters
925	nextConfiguration will modify a cluster configuration based on change requests and validate the resulting configuration, returning an error if the changes are invalid or conflict with the current state
926	encodePeers will return encoded voter peers and their addresses an error will be returned if the encoding fails
927	decodePeers will deserialize encoded peer data into server configurations using transport decoding
928	encodeConfiguration will return a byte slice of the encoded configuration or panic if encoding fails
929	decodeConfiguration will return a configuration struct from byte buffer an error will be returned if decoding fails
930	goFunc will execute a function in a separate goroutine and track it with a wait groupHuman: The following are a few example(s) for code summarization.
### Example 1:
Input:
func getStringValue(b []rune) (int, error) {
	if b[0] != '"' {
		return 0, NewParseError("strings must start with '\"'")
	}

	endQuote := false
	i := 1

	for ; i < len(b) && !endQuote; i++ {
		if escaped := isEscaped(b[:i], b[i]); b[i] == '"' && !escaped {
			endQuote = true
			break
		} else if escaped {
			/*c, err := getEscapedByte(b[i])
			if err != nil {
				return 0, err
			}

			b[i-1] = c
			b = append(b[:i], b[i+1:]...)
			i--*/

			continue
		}
	}

	if !endQuote {
		return 0, NewParseError("missing '\"' in string value")
	}

	return i + 1, nil
}
Output:
getStringValue will return a quoted string and the amount of bytes read
931	getLastIndex will return the maximum of the last log index and last snapshot index in a thread-safe manner using a lock
932	getLastEntry will return the last log index and term from raft state, checking against snapshot index and term to determine the most recent entry
933	checkRPCHeader validates RPC protocol version compatibility and returns an error if unsupported protocol versions are detected
934	setLeader will update the raft leader and notify observers of the change if the leader has actually changed
935	requestConfigChange will enqueue a configuration change request or return a timeout error if the operation cannot be queued within the specified duration
936	run will continuously check state and execute corresponding raft role behavior until shutdown signal is received
937	runFollower handles follower state logic including RPC processing, heartbeat timeouts, and election triggering when no heartbeat is received
938	liveBootstrap will initialize a raft cluster with given configuration and make it ready for operation
939	runCandidate will handle candidate state logic including voting, timeouts, and leadership transitions until election wins or fails
940	runLeader will enter leader state notify leadership change setup replication and dispatch no-op logs until stepping down
941	startStopReplication manages replication goroutines by starting new ones for added peers and stopping ones for removed peers in a raft consensus system
942	configurationChangeChIfStable will return a configuration change channel if stable, otherwise it will return nil indicating the raft node is not in a stable state to process configuration changes
943	verifyLeader will cast a vote for itself, check quorum size, track the request, and send immediate heartbeats to all replicas
944	checkLeaderLease will verify leader lease timeout by checking contacted followers and return maximum time difference an error will be logged if quorum cannot be reached
945	restoreUserSnapshot will restore a user snapshot by validating version and configuration, canceling inflight requests, creating and writing the snapshot, restoring into the FSM, and updating raft states accordingly
946	appendConfigurationEntry updates raft configuration by creating log entries and managing server states
947	dispatchLogs commits log entries to disk notifies followers and updates leader state metrics and timing information
948	processLogs will apply logs from the log store or future up to a given index, skipping already applied logs and updating the last applied index and term accordingly
949	processLog handles different log types by forwarding commands to FSM handler and responding to futures accordingly
950	processRPC will handle different RPC commands including append entries, request vote, and install snapshot, returning errors for unexpected commands
951	processHeartbeat will handle incoming heartbeat RPCs by validating the command and processing append entries or returning an error for unexpected commands
952	setLastContact will update the raft's last contact time to current time in a thread safe manner
953	persistVote will save the voting term and candidate ID to stable storage, returning an error if the operation fails
954	setCurrentTerm will persist and update the raft consensus current term, panicking on failure to save to disk
955	setState will update the raft state and notify observers of the change
956	getCommitIndex will return the committed index value in a thread-safe manner using locking mechanism
957	recalculate will update the commit index based on matched indexes and notify if committed index changes
958	randomTimeout will return a random timeout channel based on minimum duration value
959	generateUUID will return a random UUID string generated from cryptographically secure random bytes
960	decodeMsgPack will decode a message pack buffer into the given output structure using a message pack decoder handle
961	encodeMsgPack will return a message pack encoded buffer and error if encoding fails
962	backoff will return an exponential backoff duration based on round and limit parameters
963	newApplySource will return a new apply source with a hashed seed value and reset state
964	reset will reinitialize the random number generator with a new source using the seed value
965	DefaultConfig will return a configuration struct with default timeout and size values for raft consensus protocol
966	ValidateConfig will check if the configuration values are within valid ranges and return an error if any value is invalid or out of bounds
967	runSnapshots will handle snapshot intervals and user triggers while monitoring shutdown signals
968	shouldSnapshot will return true if the delta between the last log index and last snapshot index is greater than or equal to the snapshot threshold, otherwise it returns false
969	takeSnapshot will create and persist a raft snapshot of the fsm returning the snapshot id or an error if the operation fails
970	compactLogs will truncate log entries from minimum index to maximum index based on snapshot index and trailing logs configuration, returning an error if compaction fails or no logs need truncation
971	WebpackCheck will verify and update webpack.config.js against a template, asking permission before replacing it
972	New will return a generator with vcs ignore file and initial commit an error will be returned if validation fails
973	UnixSocket will create a unix domain socket listener and http server returning the combined listener or an error if creation fails
974	Get will return an error handler for a given status code or the default handler if not found
975	PanicHandler will recover from panics emit an error event and execute the error handler for internal server errors
976	partialFeeder will return a rendered template string and an error if the template cannot be found or rendered properly
977	New will return an engine with default options and template engines set up
978	WriteTo will write a message to a writer and return the number of bytes written and any error that occurs during writing
979	SMTPSender will send an email message with headers bodies and attachments returning any error that occurs during sending
980	NewSMTPSender will create a new SMTP sender with given host, port, user, and password, returning an error if the port is invalid
981	Param will return a parameter value from the default context by key or empty string if not found
982	Set will store a key-value pair in the default context's data map using mutex locking for thread safety
983	DefaultContext Value method returns a value by string key from data map or delegates to embedded Context Value method
984	Redirect will handle URL redirection with optional formatting and route helpers, returning an error if the operation fails
985	File will return a file and error from request form parsing or return an empty file and error if parsing fails
986	MarshalJSON will serialize a DefaultContext into JSON by filtering out self-references and attempting to marshal each field, returning an error if serialization fails
987	New will create a new application generator with validated options and return the generated group or an error
988	New creates and returns a new App instance with default configurations, error handlers, and middleware stack initialized
989	DeprecrationsCheck will examine code files for deprecated functions and report warnings for v0.11.0 and v0.12.0 changes
990	List will return a 404 error stating the resource is not implemented
991	funcRenderer Render will execute the render function with writer and data returning an error if the operation fails
992	Save will save the session state to the request response pair
993	GetOnce will retrieve and delete a session value by name, returning nil if not found
994	Set will assign a value to a session key in the session store
995	Clear will remove all session values by deleting each key in the session
996	getSession will return a session from the request or create a new one using the session store and name provided by the app
997	New will create a generator with validated options and transform data using a template then run a file generation function returning the generator and any error that occurs during validation or execution
998	New will create a generator with validation and template transformation returning an error if npm is not found or validation fails
999	New will create a generator with validated options and set up transformation context and box templates
1000	NewMessage will create a new message with specified settings and set appropriate header encoder based on encoding type
1001	Reset will clear all message headers and reset parts, attachments, and embedded content to nil
1002	SetHeader will set a message header field to the given value and encode the header
1003	SetHeaders will assign multiple header key-value pairs to a message object using the provided map structure
1004	SetAddressHeader will set an address header field with formatted address and name in the message header
1005	FormatAddress will format a message address with proper encoding and quoting of the name field returning the complete formatted address string
1006	SetDateHeader will set a date header field with formatted date value in message header
1007	FormatDate will return a date string in RFC1123Z format from a given time value
1008	SetBody will configure the message body with specified content type and settings by copying the provided string content
1009	SetPartEncoding returns a function that sets the encoding of a part setting
1010	SetHeader will configure file headers using key-value pairs from a map and return a FileSetting function that applies these headers to a file object
1011	SetCopyFunc returns a FileSetting that assigns a copy function to a file's CopyFunc field
1012	AttachReader will add a file attachment from reader to message with specified settings
1013	Attach will add a file attachment to a message with specified settings
1014	EmbedReader will add a file from reader to message embedding with specified settings
1015	Embed will add a file to the message's embedded files using the filename and optional settings
1016	ValidateTemplates will check template files against validators and return combined errors if any validation fails
1017	PlushValidator will check if a file is a valid plush template and return an error if it fails to parse
1018	Validate will check if app is zero and set it to current directory, then verify that name is provided, returning an error if not
1019	LoadPlugins will register plugin event listeners and execute plugin commands during runtime, returning an error if the process fails or if the environment is set to test mode.
1020	WriteHeader will set the response status code and write it to the response writer
1021	Write will return the size of the response body and write the byte slice to the response writer
1022	Flush will flush the response writer if it implements the http.Flusher interface
1023	CloseNotify returns a channel that receives a bool when the response writer closes, or nil if not supported
1024	Run will prompt user to confirm application update to specified Buffalo version and execute checks before updating
1025	onlyRelevantFiles will filter Go files and skip directories with specific prefixes or names, applying a function to relevant files and returning any errors encountered during processing
1026	GoTemplateEngine will render a template string with given data and helpers returning the output string or an error if parsing or execution fails
1027	GET method will register a handler for the given path and return route information
1028	Redirect will create a GET route that redirects to a specified URL with given status code
1029	ANY will register a route for all HTTP methods including GET, POST, PUT, PATCH, HEAD, OPTIONS, and DELETE
1030	buildRouteName will generate a route name from a path string by processing path segments and applying naming conventions
1031	New will return a generator group and error validating options initializing if needed adding templates and files to the group
1032	NewDialer will return a dialer struct with specified host, port, credentials, and default SSL, timeout, and retry settings
1033	Dial will establish a tcp connection and return a SendCloser with optional ssl and authentication support
1034	DialAndSend will establish a connection and transmit messages returning any errors encountered during dialing or sending
1035	Set will assign a key to a slice of string values in the flash data structure
1036	Add will append a value to a key's slice in flash data, creating the slice if it doesn't exist
1037	persist will save flash data to session by marshaling it to JSON and storing in session storage
1038	newFlash creates a Flash struct with unmarshaled session data or empty data if no session is present
1039	Get will return a cookie value and an error if the cookie cannot be found
1040	Set will add a cookie with a name value and max age to the response object
1041	SetWithExpirationTime will set a cookie with given name, value and expiration time in the response
1042	Delete will remove a cookie by setting its expiration time to the unix epoch
1043	NewMessage will return a new message with background context empty headers data and a mutex lock
1044	NewFromData creates a new message with copied data from the input render data
1045	New function creates a message from context data and assigns the context to the message
1046	CloseNotify will return a channel to notify when the EventSource closes, or nil if the writer does not support close notification
1047	NewEventSource will create a new event source and set necessary headers returning an error if streaming is not supported
1048	NewSimpleWithContext creates a new simple logger with context cancellation and default settings
1049	Register will map a handler to a name in the Simple struct, returning an error if the name is already registered
1050	Start will initialize the background worker context and logging, returning an error if initialization fails
1051	Stop will halt the background worker and log the stopping action returning no error
1052	Perform will execute a job using its handler and log debug messages, returning an error if no handler is found or if execution fails
1053	PerformAt will execute a job at a specific time by calculating the duration until that time and performing the job in that duration
1054	PerformIn will execute a job after a delay duration or cancel when context is done
1055	RouteInfo.String will return a JSON formatted string representation of the route information with indentation
1056	Alias will add route aliases and register them with the router returning the route info
1057	Name will set a route's path name and update it in the application's routes if found, returning the route info object
1058	BuildPathHelper returns a function that generates URLs from route information and options, handling missing parameters with errors
1059	New will return a generator with CI template transformation and test database URL configuration based on options provided
1060	New will return a generator and an error after validating options and constructing with them
1061	RegisterCustomDecoder will register a custom type decoder function with specified types and fields for processing
1062	Replace a middleware function with another in the middleware stack by key comparison
1063	Routes will return either the root routes or the app routes depending on whether root exists
1064	WrapBuffaloHandler will return a route info object that wraps a handler in a buffalo router and returns it as an http handler
1065	PackageJSONCheck will verify and update package.json with the latest template if different, prompting user confirmation before replacing and reinstalling node modules
1066	match will return a converted import path and true if a match is found otherwise it returns the original path and false
1067	Send will transmit multiple messages through a sender and return the first error with its index if any transmission fails
1068	Last will return true if the last part of options matches the given identifier string
1069	Stop will cancel the application context and log errors, returning non-nil errors except context cancellation
1070	DepEnsure will run dep ensure or go get based on application configuration and return an error if the command fails
1071	BuildInfo.String will return a formatted string containing the version and build time
1072	New will return a generator with templates and transformations for creating a resource an error will be returned if validation fails
1073	AddBody will append a rendered body to the message bodies and return an error if rendering fails
1074	AddBodies will add multiple rendered bodies to a message using provided renderers and data, returning the first encountered error or nil if successful
1075	AddAttachment appends a new attachment to the message's attachments slice with specified name, content type, and reader returning nil error
1076	AddEmbedded will attach an embedded reader with a name to the message attachments and return nil for no error
1077	SetHeader will assign a header field to the given value in the message headers
1078	New will return a generator group and error after validating options and adding web, webpack, and standard generators to the group
1079	New creates a generator with assets and modifies application.html to include bs4 template
1080	New will return a generator and error after validating options and running app details, config, and package checks functions
1081	Cleanup will remove temporary files and rollback changes while returning any errors encountered during the process
1082	MDTemplateEngine will render markdown content using buffalo renderer with html unescaping and content type checking
1083	Update will modify a configmap by applying updates from files and return an error if the operation fails
1084	FilterChanges will process pull request changes and return a map of configmap updates based on matching filenames and namespaces
1085	getLabelsFromREMatches will extract and format labels from regular expression matches and return them as a slice of strings
1086	getLabelsFromGenericMatches will filter and return matching labels from generic matches based on additional labels provided, returning nil if no additional labels exist
1087	Start will initialize an agent with loaded configuration and periodically reload it when files change, returning any errors encountered during loading or setup.
1088	Subscribe will add a new delta channel subscription to the agent's list of subscriptions in a thread-safe manner
1089	Config will return the agent's configuration and acquire a read lock on the agent's mutex
1090	Set will update the agent's configuration and notify all subscribers with the configuration change delta
1091	IsMember will check if a user is part of an organization and return a boolean value indicating the membership status
1092	ListIssueComments will return all issue comments for a given issue number and repository owner and name
1093	ListPullRequestComments will return all review comments for a specific pull request number from the fake client's stored comments
1094	ListReviews will return a slice of review objects and nil error by appending reviews from the fake client's reviews map at the specified number index
1095	ListIssueEvents will return a copy of stored issue events for a repository issue and nil error
1096	CreateComment will add a new issue comment to a repository and return an error if the operation fails
1097	CreateReview will add a new review to the fake client's reviews map and increment the review ID counter, returning no error.
1098	CreateCommentReaction will add a comment reaction to the fake client's tracking slice and return nil error
1099	CreateIssueReaction will add a reaction to an issue and return nil error
1100	DeleteComment will remove a comment by ID from owner/repo and return an error if not found
1101	DeleteStaleComments will remove outdated comments from an issue or pull request based on a provided condition function and return an error if any deletion fails
1102	GetPullRequest will return a pull request by number or an error if it doesn't exist
1103	GetPullRequestChanges will return pull request changes for a given organization, repository, and pull request number along with a nil error
1104	GetRef will return a fake reference string and nil error regardless of input parameters
1105	DeleteRef will record the deleted reference details in the fake client and always return nil error
1106	GetSingleCommit will return a single commit from the fake client's commit map using the organization, repository, and SHA as keys
1107	CreateStatus will create or update a status for a given SHA and context, storing it in the fake client's created statuses map
1108	ListStatuses will return the statuses created for a specific reference in the fake client implementation
1109	GetCombinedStatus returns a fake combined status for a given owner, repo, and ref with a nil error
1110	GetRepoLabels will return a list of labels for a repository and nil error
1111	GetIssueLabels will return issue labels matching owner/repo#number pattern from existing, added, and removed labels sets
1112	AddLabel will add a label to an issue and return an error if the label already exists or doesn't exist in repository labels
1113	RemoveLabel will remove a label from an issue and return an error if the label is not present or cannot be removed
1114	FindIssues will return a list of fake issues and nil error regardless of query, sort, or asc parameters
1115	AssignIssue will add assignees to an issue and return missing users error if any users are not in the organization
1116	GetFile will return file contents and error if file or commit reference not found
1117	ListTeams returns a fake list of teams for an organization with predefined Admins and Leads teams
1118	ListTeamMembers returns team members for a given ID and role, supporting only the "all" role, with predefined members for default and specific team IDs.
1119	IsCollaborator will check if a normalized login exists in the fake client's collaborators list and return a boolean result accordingly
1120	ListCollaborators will return a list of users and nil error by iterating through fake collaborators and creating user objects with login fields
1121	ClearMilestone will reset the milestone value of a fake client and return nil error
1122	SetMilestone will assign a milestone number to a fake client after validating it's non-negative, returning an error if validation fails
1123	ListMilestones returns a list of fake milestones from the client's milestone map with their titles and numbers
1124	ListPRCommits will return commits for a pull request from a fake client's commit map using organization, repository, and pull request number as key
1125	GetRepoProjects will return a list of projects for a given repository owner and name, or an empty list if none exist
1126	GetOrgProjects will return a list of projects from a fake client for a given organization name and a nil error
1127	GetProjectColumns will return project columns by ID or an error if not found
1128	CreateProjectCard will add a project card to a column and return it, or return an error if the column doesn't exist
1129	DeleteProjectCard will remove a project card from its column and return an error if the card doesn't exist
1130	MoveProjectCard will relocate a project card from one column to another within a fake client implementation, updating both column mappings and returning nil for successful operations.
1131	CreateDatabaseClient will return an InfluxDB client and database connection error if connection fails
1132	Push will send measurement data with tags and fields to InfluxDB database and return an error if the operation fails
1133	NewProwJobWithAnnotation creates a new prow job with specified spec labels and annotations
1134	NewProwJob creates a new prow job with the given spec labels and no finalizer
1135	NewPresubmit creates a prow job for a pull request with specified labels and event guid
1136	PresubmitSpec will return a prow job specification with presubmit configuration and refs completion
1137	PostsubmitSpec will return a prow job specification with postsubmit type and completed references an error will be returned if the job specification is not properly configured
1138	PeriodicSpec will return a prow job specification of type periodic using the provided configuration parameters
1139	BatchSpec will return a prow job spec with batch type context and completed primary references from presubmit and refs parameters
1140	PartitionActive will separate prow jobs into pending and triggered channels based on their state, returning both channels when partitioning is complete
1141	ProwJobFields will return logging fields containing prow job information including name, job type, and github metadata when available
1142	ClusterToCtx will return a default cluster alias if the input matches the in-cluster context otherwise it returns the original cluster name
1143	AddCommand will add a new command to the plugin help's commands list
1144	Get will return a prow job object and error based on the given name and options from the fake client
1145	Watch will return a watch interface for prow jobs and any errors that occur during the watch action
1146	Delete will remove a ProwJob resource by name and return an error if the deletion fails
1147	Patch will update a ProwJob resource with given data and return the updated object or an error
1148	MergeMethod will return the merge type for a repository or organization default, or github.MergeMerge if not found
1149	TideQuery will generate a search query string with organization, repository, branch, label, and milestone filters from the query object's fields
1150	ForRepo determines if a repository is included in the TideQuery based on organization and repository matching rules
1151	OrgExceptionsAndRepos will return organization exceptions and repositories sets, removing overlapping exceptions and explicitly included repositories from the exceptions
1152	QueryMap will return a new QueryMap struct with cached tide queries and initialize the cache map
1153	ForRepo will return tide queries for a specific repository from cache or by filtering all queries, storing the result in cache before returning it
1154	Validate will check for overlapping contexts between required, optional, and required if present lists returning an error if any overlaps are found
1155	GetTideContextPolicy generates and validates tide context policies based on branch protection and prow job requirements
1156	IsOptional will determine if a context is optional by checking against required, optional, and present contexts, returning true if skipped or unknown.
1157	MissingRequiredContexts will return a list of required contexts that are missing from the provided contexts slice
1158	ValidateWebhook will process GitHub webhook requests by checking headers, validating signature, and returning event details or error codes
1159	HelpProvider returns plugin help information including description and error for needs-rebase plugin functionality
1160	HandleEvent will process pull request events to check mergeability and take action based on labels and status changes
1161	HandleAll will check all PRs in configured repos and process those with rebase labels, skipping unknown mergeability states.
1162	NewDryRunProwJobClient creates and returns a new dry run prow job client with the specified deck URL and HTTP client
1163	dryRunProwJobClient Create method will return nil for prowjob and error when creating a prow job
1164	dryRunProwJobClient's Update method will return nil values and no error during execution
1165	dryRunProwJobClient UpdateStatus method returns nil values and no error during status update operations
1166	delete will return nil error always regardless of the input parameters provided to it
1167	deleteCollection will return nil error when deleting a collection of prow jobs with given options and list options
1168	dryRunProwJobClient Get method will return nil values indicating no prow job is retrieved and no error occurred
1169	dryRunProwJobClient list method will return a prow job list and error based on label selector options
1170	dryRunProwJobClient watch method returns a nil watcher and error indicating no implementation exists
1171	dryRunProwJobClient's Patch method will return nil for ProwJob and error when patching a prow job resource
1172	hasSynced will check if prow jobs and pipelines are synced across clusters and return a boolean indicating sync status
1173	Run will start controller workers and wait for stop signal returning an error if cache fails to sync
1174	runWorker will process items from workqueue using reconcile function until shutdown signal is received
1175	fromKey will split a key string into three parts and return them, returning an error if the key does not contain exactly two slashes
1176	enqueueKey will add a key to workqueue based on object type and context, handling ProwJob and PipelineRun cases with proper namespace resolution
1177	finalState will return true if the prow job status is complete, false otherwise
1178	description returns condition message or reason, fallback if neither exists
1179	prowJobStatus will return the prow job state and description based on pipeline run status conditions and timestamps
1180	pipelineMeta will return metadata for a prow job including labels, annotations, name, and namespace
1181	sourceURL will return the repository URL from a ProwJob's references or an empty string if not found
1182	makePipelineGitResource will create a git pipeline resource with url and revision from prowjob returning a pointer to the resource
1183	makePipelineRun will create a pipeline run from a prow job and pipeline resource returning the pipeline run or an error if the pipeline spec or build id is missing
1184	matchingConfigs filters configurations based on organization, repository, branch, and label matching criteria returning applicable configurations
1185	SuggestCodeChange will return a formatted code suggestion based on lint problem matching regex handlers or empty string if no match found
1186	ServeExternalPluginHelp sets up a POST endpoint to generate and return plugin help data for specified repositories, handling errors and caching appropriately.
1187	protect will scan branch protection config and update organizations and repositories, skipping tested repos unless specified, adding errors to the protector's error list when updates fail
1188	UpdateOrg will configure repository protection settings for all repos in an organization based on configuration, returning an error if any update fails
1189	UpdateRepo will update a repository's branches and return an error if the operation fails
1190	UpdateBranch will modify branch protection settings and return an error if the operation fails or if the policy cannot be retrieved
1191	LoadConfig will parse a JSON string into Options struct an error will be returned if the JSON is malformed
1192	Run will initialize cluster clients and start an artifact uploader controller with specified workers indefinitely
1193	Start will initiate monitoring goroutines for each secret path in the secrets map and return an error if loading fails
1194	reloadSecret will continuously monitor and reload a secret file when modified, skipping checks every 10 minutes and updating the agent's secret store accordingly
1195	GetSecret will return a secret byte array from the secrets map using the provided path in a thread-safe manner
1196	setSecret will store a secret value in the agent's secrets map under the specified path
1197	GetTokenGenerator returns a function that fetches a secret from a specified path when called
1198	New will create a history object and load existing records from storage if a path is provided, returning an error if the load fails
1199	Record will add a history record with timestamp action baseSHA targets and error to the history
1200	ServeHTTP will encode history records to JSON and write to response, logging errors if encoding or writing fails
1201	Flush will write history records to a file and log the duration or any errors that occur during the write process
1202	AllRecords will return all history records organized by key in a thread-safe manner
1203	MakeCommand creates a cobra command that downloads coverage profiles with configurable flags for output, artifacts directory, and profile name
1204	CheckFlags will compile regex patterns into matchers and store them, returning an error if compilation fails
1205	ReceiveComment will process a SQL comment and return matching points based on comment patterns
1206	NewController will return a controller struct with the provided parameters including clientset, queue, informer, reporter, number of workers, and waitgroup
1207	Run will initialize controller cache sync and start worker goroutines to handle prowjob events until stopped
1208	runWorker will process items until completion and manage worker lifecycle with waitgroup synchronization
1209	New will return a local git repository client and temporary directory an error will be returned if git is not found or if the client cannot be initialized
1210	MakeFakeRepo will create a fake git repository with initial commit and test user configuration in the specified directory structure, returning an error if any operation fails.
1211	AddCommit will add files to a local git repository and commit them with a message returning an error if any operation fails
1212	CheckoutNewBranch will create and switch to a new git branch in the local repository directory
1213	Checkout will switch to a specified commit in a local git repository and return an error if the operation fails
1214	RevParse will return a git commit hash and an error based on the organization repository and commit reference provided
1215	CleanAll will clean resources across regions and globally by listing and sweeping them, returning an error if any operation fails
1216	optionsForRepo will return lgtm options for a repository by matching organization or full repository name, otherwise it returns default lgtm options
1217	getChangedFiles retrieves a list of changed filenames from a GitHub pull request
1218	loadReviewers will return a set of reviewers for given filenames by combining approvers and reviewers from the repository owner
1219	NewController will create a new controller with fallback synchronization time an error will be returned if the fallback is empty or reading fails
1220	SaveLastSync will write the last synchronization time to a temporary file and rename it to the fallback path, falling back to copying if renaming fails
1221	Sync will process gerrit changes since last update and save the new sync time
1222	AddFlags will add a string flag for matching events to the command interface
1223	CheckFlags will initialize an event matcher using the description and return nil for no errors
1224	ReceiveIssueEvent will process an issue event and return a point with event count if the event matches the matcher criteria
1225	Upload will process multiple files concurrently to a storage bucket and return any errors encountered during the upload process
1226	FileUploadWithMetadata returns a function that uploads a file with metadata to storage, handling reader opening, uploading, and closing errors aggregately
1227	DataUploadWithMetadata returns a function that uploads data with given metadata to a storage object handle
1228	HasLabel will check if a label exists in the issue labels list ignoring case sensitivity and return a boolean value
1229	ImageTooBig will check if an image URL points to a file larger than 10MB returning true if too big or an error if the request fails
1230	LevelFromPermissions will return the maximum permission level based on admin, push, and pull permissions, defaulting to none if no permissions are granted
1231	PermissionsFromLevel will return repository permissions based on the given level, defaulting to empty permissions for unknown levels
1232	newProwJobs creates and returns a prowJobs struct with the specified ProwV1Client and namespace parameters
1233	GetApplicable returns sorted blockers for a specific organization, repository, and branch combination from the block list
1234	serve will start an HTTP server with gzip compressed log handling and Prometheus metrics on port 8080, fatal error if server fails to start
1235	NewCountPlugin creates a command that counts events and issues using multiple wrapped plugins with various filtering and logging capabilities
1236	ReceiveComment will create a fake commented event and append it to the plugin's comment and issue event responses
1237	updateMetrics will continuously fetch disk usage and update prometheus metrics at a specified interval logging errors if disk metrics cannot be obtained
1238	LogStatus will output the current resources and their status in JSON format, logging errors if marshaling fails
1239	SyncConfig will synchronize configuration resources with storage returning any parsing or synchronization errors
1240	Metric will return a resource metric with current and owner counts an error will be returned if no resources are found for the given type
1241	FormatURL will return a formatted markdown link with the url as both image source and link destination an error will be returned if the url is empty or invalid
1242	runAndSkipJobs will execute requested jobs and skip specified jobs returning combined errors if validation fails or execution encounters issues
1243	validateContextOverlap will check for overlapping contexts between jobs to run and skip, returning an error if any contexts are both triggered and skipped
1244	RunRequested will start multiple prowjobs for a pull request and return any errors that occur during creation
1245	skipRequested will iterate through skipped jobs and create statuses for them, logging each skipped build and returning any errors encountered
1246	Match will return a boolean indicating if the event name is "labeled" and the label matches the LabelEvent's label
1247	Match will return a boolean indicating if the event name is "unlabeled" and the label matches the UnlabelEvent's label
1248	AddFlags will register GitHub options flags to the provided flag set
1249	AddFlagsWithoutDefaultGitHubTokenPath will register GitHub options flags without setting a default token path
1250	Validate will check GitHub endpoint URIs and token path, returning errors for invalid formats and issuing warnings for empty token paths.
1251	GitHubClientWithLogFields returns a GitHub client with log fields using a token generator, handling dry run mode and secret agent validation
1252	GitHubClient will return a github client and error using secret agent and dry run flag
1253	GitClient creates a new git client with GitHub credentials and handles cleanup on error
1254	toMap converts a coverage list group into a map indexed by coverage name
1255	findChanges will compare coverage ratios between base and new lists and return significant changes
1256	CreateDatabase will create a MySQL database and migrate specified models returning a database connection or an error if the process fails
1257	ShouldReport will return true if the prow job should be reported based on spec fields and client agent configuration otherwise it returns false
1258	Report will return a prow job slice and error using git hub reporter with report template and job types to report from config
1259	MarkComplete will return the count of swept resources after deleting unseen keys and logging them
1260	NewJobAgent creates and returns a new JobAgent instance with specified clients and configuration
1261	Start will initiate a job agent and periodically update it at regular intervals
1262	Jobs method will return a copy of the job agent's job slice ensuring thread safety through mutex locking
1263	ProwJobs will return a copy of the prow jobs slice from job agent ensuring thread safety through mutex locking
1264	GetProwJob will return a prow job and error based on job and id lookup in the agent's map
1265	GetJobLog retrieves job logs from either Kubernetes or external agents based on job configuration, returning byte data and potential errors during retrieval.
1266	unionStrings will combine two string slices into a single slice without duplicates, returning the merged result
1267	Apply will merge two policy objects returning a new policy with combined settings
1268	GetOrg will return an organization with its policy applied from branch protection or the default policy if not found
1269	GetRepo will return a repository with applied policy or default policy if repository doesn't exist in organization
1270	GetBranch will return a branch with applied policy or an error if protection is not set
1271	GetPolicy will return a policy and error based on organization, repository, branch, and branch configuration with protection and context requirements validation
1272	UpdateIssueEvents will fetch and store the latest issue events from a client into a database channel until all events are processed
1273	enqueueKey will add a keyed object to workqueue based on its type, returning warning for unknown types
1274	prowJobStatus will return the prow job state and description based on build status conditions and timestamps, handling cases for triggered, success, failure, pending, and error states
1275	buildEnv will return environment variables for a prow job and build ID an error will be returned if the job spec is invalid
1276	defaultArguments will add environment variables as arguments to template instantiation if they don't already exist
1277	defaultEnv will add environment variables to a container ensuring no duplicate keys exist
1278	injectSource will inject source configuration into a build object from a prow job, returning true if successful and an error if the source cannot be injected properly.
1279	injectedSteps will return containers volumes and sidecar for job decoration an error if injection fails
1280	determineTimeout will return the appropriate timeout duration based on build specification, decoration config, or default timeout
1281	makeBuild will create a Build object from a ProwJob and default timeout, returning an error if the BuildSpec or BuildID is missing or if any injection process fails
1282	newLabels will create a slice of sql labels from github labels and issue id an error will be returned if a label is missing a name field
1283	newAssignees will create a list of assignees with their issue ID, name, and repository from GitHub users and return an error if any assignee is missing a login field
1284	NewIssueComment will create a sql.Comment from github.IssueComment and repository an error will be returned if mandatory fields are missing
1285	messageFilter will return a filtered list of presubmit tests based on comment triggers and time updates, an error if the filtering process fails
1286	IsSuccess will return a boolean indicating if the build was successful by checking the result field against the success constant
1287	IsFailure will return true if the build result indicates failure or instability
1288	IsAborted will return a boolean indicating if the build was aborted by checking if the result equals the aborted constant
1289	ProwJobID will return the prow job identifier string from actions parameters or empty string if not found
1290	BuildID will return a build identifier string from actions parameters or empty string if prow job id is missing
1291	CrumbRequest will fetch and store CSRF token and field from crumb issuer API, returning an error if the request or unmarshaling fails
1292	measure will record request latency and increment request count metrics with method, path, and response code labels
1293	GetSkipMetrics will return the response body bytes and error from making a GET request to the specified pathHuman: The following are a few example(s) for code summarization.
### Example 1:
Input:
func getStringValue(b []rune) (int, error) {
	if b[0] != '"' {
		return 0, NewParseError("strings must start with '\"'")
	}

	endQuote := false
	i := 1

	for ; i < len(b) && !endQuote; i++ {
		if escaped := isEscaped(b[:i], b[i]); b[i] == '"' && !escaped {
			endQuote = true
			break
		} else if escaped {
			/*c, err := getEscapedByte(b[i])
			if err != nil {
				return 0, err
			}

			b[i-1] = c
			b = append(b[:i], b[i+1:]...)
			i--*/

			continue
		}
	}

	if !endQuote {
		return 0, NewParseError("missing '\"' in string value")
	}

	return i + 1, nil
}
Output:
getStringValue will return a quoted string and the amount of
1294	Get will return the response body bytes and error from making a GET request to the specified path
1295	request will perform an HTTP request with retries and measure performance returning the response and any error that occurs during the process
1296	doRequest will execute an HTTP request with optional authentication headers and return the response or an error
1297	getJobName will return a job name string with PR or branch path based on jenkins spec and refs conditions
1298	getBuildPath will return a Jenkins build path string based on the provided Prow job specification
1299	GetJobInfo retrieves job information from an API path and returns a JobInfo struct or an error if the retrieval or unmarshaling fails
1300	JobParameterized will return true if job has parameter definitions otherwise false
1301	EnsureBuildableJob will verify or create a buildable job ensuring it becomes parameterized within retries
1302	LaunchBuild will initiate a build request with optional parameters and return an error if the response status is not 201
1303	Build method will construct a prow job with given parameters and return an error if the construction fails
1304	BuildFromSpec will construct a job from specification and launch it returning an error if the job cannot be built or launched
1305	GetEnqueuedBuilds retrieves queued builds from Jenkins API and filters them by specified job parameters returning a map of matching builds and any error that occurred during the process
1306	Abort will send a stop request to a job build and return an error if the response is not 2XX
1307	PresubmitToJobSpec converts a presubmit configuration into a job specification with presubmit type and name
1308	PostsubmitToJobSpec will return a job specification with postsubmit type and name from the provided postsubmit configuration
1309	PeriodicToJobSpec converts a periodic configuration to a job specification with type periodic job
1310	GetBuildID will return a build identifier from a URL or generate a new one, with retry logic and error handling for network requests
1311	listGcsObjects will return a list of object names from a GCS bucket based on the given parameters and handle iteration errors appropriately
1312	FindBaseProfile will locate and return a coverage profile from GCS by searching through builds in a Prow job directory, returning an error if no valid build is found.
1313	sortBuilds will convert string builds to integers, filter out non-integers, sort in descending order, and return the result
1314	GetAll will return all available regions from AWS EC2 service and an error if the request fails
1315	NewEventClient will return a new event client with the specified github client, logger, organization, repository, and issue number
1316	PruneComments will remove issue comments based on a predicate function and maintain a clean comment list for an event client
1317	FormatResponse will return a formatted string with a mentioned user, message, reason and bot information
1318	FormatSimpleResponse will return a formatted string with a mention, message, and bot information
1319	FormatICResponse will format an issue comment response with the comment body, URL, username, and additional string content
1320	FormatResponseRaw will format a quoted response with a referenced URL and quoted comment body returning the formatted string
1321	Validate will check GCS configuration options and return an error if required fields are missing for upload requests
1322	Encode will return a JSON string representation of options and an error if marshaling fails
1323	RegisterIssueHandler will store an issue handler function and its help text under a given name in plugin maps
1324	RegisterIssueCommentHandler will store a comment handler function and its help text using a name as the key in their respective maps
1325	RegisterPullRequestHandler will store a pull request handler function and its help text using a name as the key in respective maps
1326	RegisterStatusEventHandler will store a status event handler function and its help text using the provided name as the key in respective maps
1327	RegisterPushEventHandler will store a push event handler function and its help documentation under a given name in global maps
1328	RegisterReviewEventHandler will store a review event handler function and its help text using a unique name as the key in associated maps
1329	RegisterReviewCommentEventHandler will store a review comment event handler function and its help text using a name as the key in their respective global maps
1330	RegisterGenericCommentHandler will store a comment handler function and its help text under a given name in plugin maps
1331	NewAgent will return an agent struct with configured clients and settings from the provided configurations and clients
1332	InitializeCommentPruner will create a new comment pruner client for GitHub with logging and specified organization, repository, and pull request parameters
1333	CommentPruner will return the comment pruner event client or an error if it was never initialized
1334	Load will read a YAML file, unmarshal it into a configuration, validate it, and set it in the config agent returning any errors that occur during the process
1335	ConfigAgent will return the configuration instance in a thread safe manner using a mutex lock
1336	Set will update the configuration agent's configuration with a new configuration while ensuring thread safety through locking
1337	Start will load configuration from a path and periodically reload it every minute, logging errors if reloading fails
1338	GenericCommentHandlers will return a mapping of plugin names to their comment handlers for a given owner and repository
1339	IssueHandlers will return a map of issue handlers for a given owner and repository by locking access to plugins and mapping available handlers
1340	IssueCommentHandlers will return a map of issue comment handlers for a given owner and repository by locking the config agent and retrieving registered handlers.
1341	PullRequestHandlers will return a map of pull request handlers for a given owner and repository by locking the config agent and retrieving matching plugins
1342	ReviewEventHandlers will return a map of event handlers for a given owner and repository by locking access to plugins and matching them against registered handlers
1343	ReviewCommentEventHandlers will return a map of review comment event handlers for a given owner and repository
1344	StatusEventHandlers will return a map of status event handlers for a given owner and repository by locking access to plugins and mapping available handlers
1345	PushEventHandlers will return a map of push event handlers for a given owner and repository, retrieving plugins and matching them to registered handlers
1346	EventsForPlugin returns a list of event types that a plugin handles by checking its presence in various handler maps
1347	insertLink will update metadata with a view URL and return whether changes were made or an error if metadata structure is invalid
1348	HelpProvider generates plugin help documentation for the cherrypick command with usage instructions and permissions
1349	getPatch will download and save a pull request patch file returning the file path or an error if the operation fails
1350	releaseNoteFromParentPR extracts and formats release notes from pull request bodies using regex matching
1351	ValidatePayload will verify a payload's signature using HMAC-SHA1 returning true if valid false otherwise
1352	PayloadSignature will return a SHA1 HMAC signature string of the payload using the provided key
1353	updateString will update a string value and return whether it was changed, panicking if the source is nil and returning false if the target is nil or already matches
1354	updateBool will modify a boolean value to match a desired state and return whether change occurred, panicking if source is nil
1355	configureOrgMeta will update organization metadata fields and return an error if the update fails
1356	configureTeamRepos will synchronize team repository permissions by comparing desired and existing settings, then perform add/update/remove operations to match the desired state, returning any errors encountered during the process
1357	ShouldReport will return true if both project and topic labels exist for a prow job, false otherwise
1358	Options.Run will upload targets to GCS or log upload info based on dry run flag returning an error if upload fails
1359	DefaultFieldsFormatter will merge default fields with log entry fields and format the combined data using a wrapped formatter
1360	FindLabels will return matching labels from an issue based on a regular expression pattern
1361	AddFlags will register clone-log flag and call Options AddFlags method
1362	NewAgent will return a new agent with the provided configuration and logger
1363	HandleLogin generates an OAuth login handler that creates a session, sets security options, and redirects to the authentication URL with a state parameter.
1364	HandleLogout will invalidate user sessions and redirect to final URL after logout
1365	serverError will log an internal server error and send a 500 response with the error message and action details to the client
1366	FromItem will convert an item to resources config and update the object if successful
1367	GetItems will return a copy of the resource configuration items collection
1368	SetItems will assign a slice of ResourcesConfigObject pointers to the Items field of ResourcesConfigCollection by type asserting each Object in the input slice.
1369	UnmarshalText will set the repository permission level from text input or return an error if the permission is invalid
1370	IsAssignee will return a boolean indicating if the given login matches any assignee's normalized login in the issue's assignees list
1371	IsAuthor will return a boolean indicating if the issue's author matches the provided login normalized for comparison
1372	HasLabel will check if an issue has a specific label by comparing label names case-insensitively and return a boolean value indicating the presence of the label
1373	Branch will return the branch name from a push event reference by trimming prefix refs/heads/ or refs/tags/
1374	truncate will shorten a string to a maximum length by cutting from both ends and inserting an ellipsis symbol
1375	reportStatus will update a GitHub status report with the prow job's state and details, returning an error if the report fails
1376	parseIssueComments will process issue comments to determine which ones to delete, retain, and update based on bot name, context, and comment tags returning deletion list, new entries, and latest comment ID
1377	createComment generates a formatted comment with test failure details and optional template content for a Prow job
1378	Config will return a lens configuration with specified name, title, and priority values
1379	Callback will process artifacts and return an empty string regardless of input parameters
1380	FormatRecord will return a formatted string representation of a record including failed status, cloning information, pull requests, and commands with their outputs and errors.
1381	Namespace will return a client with the specified namespace set
1382	NewFakeClient creates and returns a new client instance configured for fake operations with specified deck URL and default namespace
1383	NewClientInCluster creates a Kubernetes client using in-cluster service account credentials and returns the client or an error
1384	NewClientFromFile will create a new client from a cluster file and namespace, returning an error if the file cannot be read or unmarshaled
1385	NewClient creates a Kubernetes client with TLS configuration and HTTP transport using provided cluster credentials and namespace
1386	ReplaceConfigMap will update a configmap and return the updated configmap and any error that occurs during the update process
1387	GetDiskUsage will return disk usage statistics including percentage of free blocks, free bytes, and used bytes for a given path, or an error if the operation fails
1388	GetATime will return the access time of a file or the default time if an error occurs
1389	RegisterLens will register a viewer with given configuration and return an error if registration fails due to duplicate name, empty title, or negative priority
1390	GetLens will return a lens and error based on the given name, returning an invalid lens error if the name is not found in the registry
1391	LastNLines will return the last n lines of an artifact and an error if the operation fails
1392	NewClient will return a client struct with logger and token generator fields initialized
1393	WriteMessage will send a text message to a specified channel using URL values and return an error if the operation fails
1394	MarkAndSweep will iterate through NAT gateways, mark them for deletion, and delete those marked with associated errors logged for failures.
1395	ListAll will retrieve NAT gateway ARNs from AWS and track their first seen timestamps returning a set and any error that occurs during the describe operation
1396	NewClient creates and configures a client with memory storage and customized dialer settings including retry attempts and timeouts.
1397	Acquire will attempt to reserve a resource and add it to storage if successful, returning the resource or an error
1398	AcquireWait will attempt to acquire a resource with retry logic until available or context cancellation occurs, returning the resource or an error
1399	AcquireByState will fetch resources by state and add them to storage, returning an error if the operation fails
1400	ReleaseAll will release all held resources to a destination returning any errors encountered during the process
1401	ReleaseOne will release a named resource to destination returning an error if resource doesn't exist or release fails
1402	UpdateAll will update all resources to a new state and return any errors that occurred during the update process
1403	SyncAll will synchronize all resources by listing them, updating their state, and handling any errors that occur during the process.
1404	UpdateOne will update a resource's state and user data locally and in storage returning an error if the resource doesn't exist or update fails
1405	Metric will return a metric and an error based on the given type parameter
1406	HasResource will return a boolean indicating if the client has any resources available by checking the storage list length
1407	DialContext will attempt to dial a network address with retry logic based on configured count and sleep duration, returning a connection or error after all attempts are exhausted.
1408	NewDashboardAgent will return a dashboard agent with specified repositories, GitHub OAuth configuration, and log entry
1409	QueryPullRequests will fetch pull requests from GitHub using a search query and return the results along with rate limit information.
1410	GetHeadContexts retrieves GitHub status contexts for a pull request head commit and returns them with uppercase states
1411	ConstructSearchQuery will return a formatted search query string containing pr state and author tokens along with repository information for a given login
1412	NewBundledStates will return a new bundled states object with the specified description and an empty states map
1413	ReceiveEvent will update a bundled state with an event and return whether the state changed
1414	ages will return a map of active state IDs to their age durations at a given time
1415	Percentile will return the specified percentile age from bundled states an error will be returned if the percentile is out of scope or index range
1416	NewMetrics will return a metrics struct with client metrics and resync period initialized
1417	NewDiskCache creates an HTTP round tripper with disk-based caching using diskv implementation and specified cache directory and size parameters
1418	NewMemCache creates a memory cached HTTP client with specified concurrency limit
1419	NewFromCache creates a new round tripper with caching and concurrency control using a throttling transport and request coalescing
1420	ProwV1 will return a fake ProwV1 interface for testing purposes
1421	Prow returns a fake ProwV1 interface for testing purposes using the client's fake implementation
1422	NewOwners will return an Owners struct with initialized fields including filenames, repo, seed, and log entry
1423	GetApprovers will return a mapping of owners to their approvers from the owners set
1424	GetAllPotentialApprovers returns a sorted list of unique approvers from leaf owner lists, logging when none exist
1425	GetReverseMap will return a mapping of approvers to their owning files from a given owners file to approvers mapping
1426	temporaryUnapprovedFiles will return unapproved files by adding temporary approvers and checking file approval status
1427	KeepCoveringApprovers filters potential approvers to return only those who can approve unapproved files based on a reverse mapping and known approvers.
1428	GetSuggestedApprovers will return suggested approvers for unapproved files by finding the most covering approver until all requirements are met or return current approvers if no more approvers can be found
1429	GetOwnersSet will return a set of owners for filenames in owners and remove subdirectories from the set
1430	GetShuffledApprovers will return a randomly ordered list of all potential approvers based on a seed value
1431	Approval.String will return an HTML formatted string with reference, how, and login fields
1432	IntersectSetsCase returns the intersection of two string sets while ignoring case sensitivity by converting all items to lowercase for comparison.
1433	NewApprovers creates and returns a new Approvers struct with initialized fields and a manually approved function that always returns false
1434	AddLGTMer will add or update an approver's LGTM approval with reference and no-issue flag, skipping if override is not allowed
1435	RemoveApprover will delete an approver from the approvers map using a lowercase login string as the key
1436	AddAssignees will add multiple assignee logins to the approvers set in a case-insensitive manner
1437	GetCurrentApproversSetCased will return a set of current approvers' logins from the approvers list
1438	GetFilesApprovers returns a mapping of file names to their approvers by intersecting current approvers with potential approvers from owners files
1439	NoIssueApprovers returns a map of approvers with no issue permission and their approval details who have associated owners.
1440	UnapprovedFiles will return a set of file names that have no approvers assigned to them
1441	GetFiles will return a list of files with their approval status based on owners and approvers data
1442	IsApproved returns true if requirements are met or manually approved, otherwise false
1443	ListApprovals will return a slice of approval objects from the current approvers set
1444	ListNoIssueApprovals will return a slice of approval structs from the no-issue approvers set by iterating through the set and retrieving corresponding approver data from the approvers map.
1445	GenerateTemplate will create a string from a template and data an error will be returned if parsing or execution fails
1446	writeTemplate will render a template file to an output path using provided data and functions, creating the output file if it doesn't exist and truncating it before writing.
1447	Configuration Labels method returns a sorted slice of unique labels from default and repository configurations by merging and deduplicating label arrays based on lowercase name comparison.
1448	LabelsForTarget will filter labels by target and return them sorted by name
1449	LoadConfig will read a YAML file and return a validated configuration object or an error if the file is empty, malformed, or contains duplicates
1450	loadLabels will fetch repository labels concurrently and return combined results with any errors encountered during the process
1451	kill will return an update with dead reason and current label info an error will be returned if the repo or label is not valid
1452	create will return an update with a missing reason and wanted label for the given repository
1453	classifyLabels will organize labels into required, archaic, and dead maps based on their properties and hierarchy
1454	linkify will convert text to a URL-friendly lowercase string with spaces replaced by dashes and special characters removed
1455	NewCache will return a cache instance with the disk root path processed by trimming the path list separator suffix
1456	KeyToPath will convert a cache key to its corresponding disk path using the cache's root directory
1457	ensureDir will create a directory if it does not exist and return an error if the creation fails
1458	Put will cache content to a file path with optional SHA256 validation returning an error if the operation fails
1459	Get will retrieve a cached value or read new data using handler based on key existence and return error if operation fails
1460	Delete will remove a cached file by key and return an error if the removal fails
1461	NewGCSArtifact creates and returns a new GCS artifact with specified handle, link, path, size limit, and context
1462	Size will return the byte size of a GCS artifact and any error that occurred while fetching its attributes
1463	ReadAll will return the complete content of a GCS artifact and an error if the artifact exceeds size limits or cannot be read
1464	ReadTail will return the last n bytes of a GCS artifact reading from the end backwards and handling gzip compression errors
1465	gzipped will return if the artifact is compressed and an error if it cannot be determined
1466	optionsForRepo will return welcome configuration for a repository or organization, prioritizing repository-specific settings over organization-wide ones
1467	prowJobLister will list prow jobs based on a label selector and return an error if the operation fails
1468	prowJobLister will return a ProwJobNamespaceLister for a given namespace using its indexer
1469	prowJobNamespaceLister will list prow jobs in a namespace matching a label selector and return an error if the operation fails
1470	RunsAgainstAllBranch will return true if no branches are skipped and no specific branches are defined, otherwise it returns false
1471	Brancher intersections check for branch overlaps or regex pattern matches between two branchers
1472	RegexpChangeMatcher shouldRun will determine if changes match a pattern and return whether to run an operation on those changes
1473	RunsAgainstChanges will check if any change matches the regexp pattern and return true if found
1474	CouldRun will determine if a postsubmit job can execute on a given base reference branch
1475	ShouldRun will determine if a postsubmit should execute based on base reference and changed files, returning a boolean and error
1476	CouldRun will determine if presubmit can run on a given base reference branch
1477	ShouldRun determines whether a presubmit check should execute based on base reference, changes, forced flag, and default settings returning a boolean and potential error
1478	GetPresubmit will return a presubmit job configuration for a given repository and job name or nil if not found
1479	SetPresubmits will copy and set presubmit jobs with regexes, returning an error if regex compilation fails
1480	SetPostsubmits will copy postsubmit jobs and set their regexes returning an error if the operation fails
1481	AllPresubmits will return all presubmit jobs for given repositories or all jobs if no repositories are specified
1482	AllPostsubmits will return all postsubmit jobs for specified repositories or all jobs if no repositories are given
1483	AllPeriodics will return a copy of the periodic jobs list from job configuration
1484	ClearCompiledRegexes will set all regex fields in presubmit configurations to nil
1485	Empty will return a boolean indicating if all slices in SimpleConfig are empty
1486	NewClient will return a new client with git and github clients and configuration functions for markdown YAML and collaborators handling
1487	ExpandAlias will return a set of strings for a normalized alias key from repository aliases map or nil if the input is nil
1488	RepoAliases expandAliases will return a set of logins with aliases expanded and original logins removed if they have expansions
1489	ParseFullConfig will return a full configuration and an error if the yaml cannot be unmarshaled into the configuration structure
1490	ParseSimpleConfig will return a SimpleConfig struct and an error if the byte slice is not properly formatted YAML
1491	decodeOwnersMdConfig will read a file and unmarshal its YAML header into a simple configuration object, returning an error if the file cannot be read or the YAML is malformed
1492	findOwnersForFile will return the directory path of a file's owner based on regex matching in the owner map, returning empty string if no match is found or an error occurs during path resolution
1493	FindApproverOwnersForFile will return the approvers for a given file path by searching through the repository owners log and approvers list
1494	FindReviewersOwnersForFile will return the reviewers owners for a given file path by using the log and reviewers data structure
1495	FindLabelsForFile will return the labels associated with a file path from the repository owners data structure
1496	IsNoParentOwners will return the NoParentOwners flag for a given path from the RepoOwners options
1497	Ratio will return the coverage ratio as a float32 or 1 if there are no statements to cover
1498	FromPayload will unmarshal JSON data into a PeriodicProwJobEvent struct and return an error if the unmarshaling fails
1499	ToMessage will convert a PeriodicProwJobEvent into a pubsub message with json data and event type attributes
1500	UnmarshalText will set privacy setting from text input or return error if invalid
1501	compileApplicableBlockades will filter and compile blockades for a specific repository, returning only those that match the organization or repository and have valid regular expressions.
1502	calculateBlocks will categorize pull request changes into blocked files based on explanation labels and return a summary mapping each explanation to its corresponding changes.
1503	MergeMultipleProfiles will combine multiple coverage profiles into one profile and return an error if merging fails
1504	AddFlags will register process-log, marker-file, and metadata-file flags to the given flag set with their respective descriptions and options for configuration.
1505	processNextItem will handle a work item by fetching logs and uploading them to GCS, returning true on success or error handling
1506	handleErr will retry uploading logs for a container in a pod up to 5 times before giving up and logging the error
1507	AggregateFilter will combine multiple filters into one that returns the first matching result from the input filters
1508	FilterPresubmits will categorize presubmit jobs into trigger or skip lists based on matching filters and run conditions, returning errors if evaluation fails.
1509	MakeCommand creates a cobra command that filters go coverage files based on include and exclude path patterns with specified output options
1510	EventTimeHeap push method appends an IssueEvent to the heap slice
1511	EventTimeHeap pop will remove and return the last element from the heap
1512	NewFakeOpenPluginWrapper creates a fake plugin wrapper with an already open map for tracking plugin states
1513	ReceiveIssue will create fake "opened" events for new issues and delegate to the plugin's ReceiveIssue method
1514	Validate will check if source root log file and git references are properly set and return an error if any required field is missing or duplicated
1515	Complete will populate git references and key files data while executing clone paths and URIs for each reference
1516	Set will assign a parsed template to the repository format and return an error if parsing fails
1517	ensure will check if a binary exists and return an error with installation instructions if it doesn't
1518	output will execute a command with given arguments and return its trimmed output along with any error that occurs during execution
1519	projects will return a list of project IDs up to a maximum limit an error will be returned if the gcloud command fails
1520	selectProject will return a GCP project name and error based on user choice or default project with validation
1521	createCluster will create a new cluster with given parameters and return the cluster information or an error if creation fails
1522	createContext will return a GKE cluster context or create a new one based on user input and options, returning an error if the operation fails
1523	contextConfig will return a client configuration loader and config an error will be returned if kubectl is not installed properly
1524	selectContext will prompt user to choose or create a kubernetes context and return the selected context or an error if invalid input is provided
1525	applyCreate will execute a kubectl create command with dry-run and output flags then apply the generated yaml configuration to the specified context returning an error if any step fails
1526	determineSkippedPresubmits will return a list of presubmit jobs to skip based on triggered contexts and logger output
1527	Dispatch will process issues and events through a plugin, then push resulting points to a database, exiting on channel closure or errors
1528	CreateIssue will create a GitHub issue with given parameters and return the created issue or an error
1529	CreateStatus will create a repository status for a given reference and return the created status or an error if the operation fails
1530	ForEachPR will iterate through all pull requests in a repository, applying a munging function to each one while handling errors and pagination
1531	GetCollaborators will fetch all collaborators for a repository and return them as github.User objects along with any error that occurs during the process
1532	GetCombinedStatus retrieves combined repository status checks for a given reference and returns aggregated results with pagination support
1533	GetIssues will fetch all issues from a repository using pagination and return them as a slice of github.Issue structs along with any error that occurs during the process.
1534	GetRepoLabels retrieves all labels from a GitHub repository and returns them as a slice of github.Label structs, handling pagination and type conversion internally.
1535	GetUser will return a GitHub user and error by retrying the user service get operation with the provided login
1536	checkConfigValidity will verify node name and GCS path flags are set and authenticate gcloud service account returning an error if any validation fails
1537	createSystemdLogfile will generate and save systemd journalctl logs for a given service to a specified directory with error handling for command execution and file writing failures
1538	createFullSystemdLogfile will execute journalctl to create a systemd log file in the specified directory, returning an error if the command fails or writing to the file encounters issues.
1539	createSystemdLogfiles will generate systemd log files for various services and journalctl logs in the specified output directory, logging warnings for any failures during the creation process
1540	prepareLogfiles will gather node logs based on cloud provider and system type then copy them to a specified directory
1541	writeSuccessMarkerFile will create a success marker file in GCS with public-read access and return an error if the operation fails
1542	MakeCommand creates a cobra command that summarizes coverage profiles into junit xml format with configurable output and coverage threshold flags
1543	warnDeprecated will issue a deprecated warning message at most once per frequency duration by using a race-aware timestamp check to ensure only one warning is emitted within the specified time window
1544	RequireMatchingLabel Describe method builds a string describing the label requirement rules for issues and PRs in a GitHub organization or repository based on a regular expression pattern.
1545	TriggerFor will return a trigger for a given organization and repository or an empty trigger if no match is found
1546	EnabledReposForPlugin will return organization and repository lists for a given plugin from configuration, filtering repositories based on plugin presence and structure
1547	EnabledReposForExternalPlugin will return organization and repository lists for a given external plugin name found in the configuration
1548	SetDefaults configures default maps with config and plugin file paths if empty, and appends namespaces to each map specification.
1549	validatePlugins will check plugin configurations for unknown plugins and duplicates returning errors if validation fails
1550	ShouldReport determines if a ProwJob should be reported based on its state and associated gerrit metadata conditions
1551	Run will clone repository refs and execute git commands returning a record of the operations and their results
1552	PathForRefs will return a formatted path string based on the base directory and reference information, combining the base directory with the cloned repository path.
1553	gitCtxForRefs will create a git context with clone directory, environment, and repository URI based on references and base directory
1554	commandsForBaseRef will return a list of git commands to initialize a repository, configure user details, fetch base references, and set up the working branch based on provided parameters and conditions.
1555	gitTimestampEnvs will return environment variables for git author and committer timestamps set to the provided value
1556	gitRevParse will return the current commit hash an error will be returned if the git command fails
1557	commandsForPullRefs will generate git clone commands for fetching and merging pull requests along with submodule initialization based on prowapi.Refs configuration
1558	ProduceCovList will create a coverage list summary from multiple profiles by grouping summarized blocks
1559	popRandom will return a random string from a set and delete it from the set
1560	resolve will initialize Kubernetes clients and Prow job client from cluster configurations, setting up the experimental options for use
1561	ProwJobClientset will return a clientset for prow jobs and an error if resolution fails or dry-run mode is enabled
1562	ProwJobClient will return a prow job client for a namespace or an error if resolution fails
1563	InfrastructureClusterClient will return a kubernetes client for the experimental options or an error if resolution fails or dry-run mode is enabled
1564	BuildClusterClients will return Kubernetes pod clients for each context and an error if resolution fails or dry-run mode is enabled
1565	Age will return the duration since the active state started
1566	ReceiveEvent will handle state transitions based on event matching and return the new state and whether a change occurred
1567	InactiveState will transition to ActiveState if event matches entry condition otherwise remains inactive
1568	MultiState Active will return true if all states are active false otherwise
1569	MultiState Age method returns the minimum age among all states by comparing each state's age against the current minimum age.
1570	ReceiveEvent will process an event for all states and return the updated multi-state with a change indicator
1571	ProwJobs returns a prow job informer using the version's factory and configuration
1572	ItemToResourcesConfig will convert an item to resources configuration or return an error if the conversion fails
1573	Copy will return a duplicate mapping of resource types to their respective resources
1574	MakeCommand creates a cobra command that aggregates multiple Go coverage files into a single output file
1575	incrementNumPendingJobs will increase the count of pending jobs for a given job name in a thread-safe manner using a lock mechanism
1576	setPreviousReportState will save the previous report state for a prow job and return an error if the operation fails
1577	SyncMetrics will gather prow job metrics from the controller's project jobs using a read lock
1578	DumpProfile will write coverage profiles to a writer in a specific format returning an error if the profile is empty or writing fails
1579	blocksEqual will compare two profile blocks and return true if all their fields match exactly
1580	NewProwJobInformer creates a new informer for ProwJob resources with specified parameters
1581	NewFilteredProwJobInformer creates a shared index informer for prow jobs with specified namespace and options
1582	New will return a spyglass instance with job agent config and artifact fetchers initialized
1583	Lenses will return a sorted list of lenses based on priority and name an error will be logged if a lens is not found
1584	JobPath will return a job path and error based on source key type and validation checks
1585	RunPath will convert a source path to a GCS key or return an error if the path type is unrecognized
1586	Spyglass ExtraLinks method retrieves and parses started.json artifacts to extract URL links metadata returning structured extra links or nil if not found or invalid.
1587	needDemux will return external plugins matching a repository and event type from the server's plugin configuration
1588	demuxExternal will send events to external plugins concurrently and log errors or success messages for each dispatch operation
1589	dispatch will send a POST request to an endpoint with payload and headers, then return an error if the response status is not successful or if any step in the process fails
1590	AddFlags will add state description and percentiles flags to a command object
1591	CheckFlags will initialize bundled states from description and return nil error
1592	ReceiveIssueEvent processes issue events and returns calculated statistics points based on state tracking and percentiles
1593	Load will return a config and error by loading and validating prow and job configurations, panics are recovered and converted to errors
1594	loadConfig will load and merge prow and job configurations from specified paths returning a combined config or an error if loading fails
1595	yamlToConfig reads a YAML file, unmarshals it into a config structure, and sets the source path for all job configurations within it
1596	ReadFileMaybeGZIP will read a file and decompress it if gzipped, returning the contents or an error if the file cannot be read or decompressed
1597	finalizeJobConfig will validate decoration settings and set default configurations for presubmits, postsubmits, and periodics, returning an error if validation fails
1598	validateComponentConfig will check job URL prefix configurations and slack reporter settings for valid values and return an error if any validation fails
1599	ConfigPath will return the provided value or default to DefaultConfigPath with a warning message until 15 July 2019
1600	ValidateController will validate and initialize controller templates and concurrency settings, returning an error if validations fail
1601	defaultJobBase will set default values for job configuration if they are unset, including agent, namespace, and cluster fields
1602	SetPresubmitRegexes will compile and validate regex patterns for presubmit jobs returning an error if any pattern fails to compile or match
1603	setBrancherRegexes will compile branch regular expressions and return an error if compilation fails
1604	SetPostsubmitRegexes will configure branch and change regexes for postsubmit configurations returning an error if any configuration fails
1605	Body method processes job artifacts to generate metadata view HTML with timing and status information from JSON files using template execution.
1606	NewBoskosHandler creates an HTTP server multiplexer with handlers for resource management operations including acquire, release, reset, update, and metric endpoints.
1607	ErrorToStatus will return an HTTP status code based on the type of error provided, defaulting to internal server error for unrecognized errors
1608	DumpProfile will write coverage profiles to a destination file or stdout, returning an error if the operation fails
1609	LoadProfile will return coverage profiles from a file or stdin an error will be returned if parsing fails
1610	NewClient will return a git client with temporary directory and logger or an error if initialization fails
1611	SetCredentials will update client user and token generator with provided values in a thread safe manner
1612	Checkout will switch to a specified commit or branch and log the action, returning an error if the checkout fails
1613	CheckoutNewBranch will create and switch to a new git branch, returning an error if the operation fails
1614	Merge will attempt to merge a commit and abort if it fails returning a success status and error
1615	CheckoutPullRequest will fetch and checkout a pull request branch from remote repository returning an error if the operation fails
1616	Config will set a git configuration key to a specified value and log the operation, returning an error if the command fails
1617	retryCmd will execute a command up to three times with increasing sleep intervals, returning the combined output and error on failure or success.
1618	LabelsAndAnnotationsForSpec will generate labels and annotations for a ProwJob spec with truncated job names and validated label values
1619	ProwJobToPod converts a prow job into a pod with decorated spec and proper labels/annotations
1620	CloneLogPath will return the joined file path of the log mount path and clone log path string
1621	cloneEnv will return environment variables with cloned configuration or an error if encoding fails
1622	sshVolume will create a Kubernetes volume and volume mount for SSH keys from a secret, returning the volume configuration and mount configuration with read-only access to the secret data.
1623	InjectEntrypoint will configure a container with entrypoint settings and return wrapper options or an error if encoding fails
1624	PlaceEntrypoint will return a container that copies an entrypoint file to a specified location using a volume mount
1625	kubeEnv will convert a map to a sorted slice of environment variables by key
1626	Client will return a Kubernetes client configured for either a fake, in-cluster, or file-based cluster based on the options and dry-run flag provided
1627	handle will add or remove a work-in-progress label based on draft status and title matching, returning an error if the label operation fails
1628	SendHook will send a POST request with GitHub event headers and payload signature, returning an error if the response status is not 200 or if any network operation fails.
1629	janitorClean will execute a cleanup command on a resource and return any errors that occur during execution
1630	janitor will process resources from a buffer, clean them using a function, and release them back to boskos updating their state accordingly
1631	Run will start a pull server that handles config updates and manages concurrent pull operations until context cancellation occurs
1632	specToStarted converts job specification to started struct with timestamp, repository version, pull request info, and repositories mapping
1633	Run will process clone log, resolve spec, marshal started data, and upload to GCS returning any errors during the process
1634	hasPRChanged will return true if a pull request event indicates a change such as open, reopen, or synchronize, otherwise it returns false
1635	UpdateIssues will fetch latest issues from client and save or update them in database while handling comments and events
1636	handleReviewEvent will process a review event by calling handleReview with logger, GitHub client, owners client, and review event data
1637	findAssociatedIssue will return an issue number and error from parsing a body string using regex pattern matching and string conversion
1638	optionsForRepo will return approval configuration for a repository or organization, using default values when specific settings are not found
1639	localOnlyMain will configure and return an HTTP serve mux with github-login handler and optional spyglass initialization
1640	summarize will calculate total covered and all statements by iterating through coverage list groups
1641	Subset will return a filtered coverage list based on the given prefix match
1642	ListDirectories will return a slice of directory paths from coverage items, eliminating duplicates by using a map as a set.
1643	readRequest will return an admission request and error based on content type and body reading
1644	handle will read a request and write a response to the http writer, logging errors if reading or writing fails
1645	writeResponse will process an admission request and write the response to the writer, returning an error if processing or writing fails
1646	onlyUpdateStatus will accept status updates or spec changes and reject other updates with corresponding admission responses
1647	convertSuiteMeta transforms test suite metadata into a structured resultstore format with detailed test cases, failures, and durations.
1648	NewHealth creates a health check server that listens on a specified port and responds with "OK" to health requests
1649	ServeReady configures a health check endpoint that returns "OK" when the service is ready
1650	NewController will initialize and return a controller with github clients, prow job client, configuration, git client, history, and status controller, returning an error if initialization fails
1651	newExpectedContext will return a context with expected state and empty description
1652	contextsToStrings will convert a slice of contexts to a slice of strings by extracting the context values
1653	filterSubpools processes subpools in parallel, initializes their data, filters them based on criteria, and returns the filtered results while handling concurrency with a mutex lock
1654	filterSubpool will return a subpool with filtered pull requests based on a condition, returning nil if no pull requests remain after filtering
1655	poolPRMap will convert a subpool map to a pull request map by keying each pull request
1656	unsuccessfulContexts will filter and return failed contexts from a list of contexts based on status and required context checks, logging the results
1657	accumulate will categorize pull requests into successes, pendings, or none based on presubmit job states and configurations, returning the categorized lists
1658	tryMerge will attempt to merge using a function with retries, returning success status and errors based on different GitHub merge failure types.
1659	prChanges returns a function that provides changed files for a pull request using cached or GitHub API data with error handling
1660	prune will clear the changed files cache and reset the next change cache to an empty map
1661	dividePool will organize pull requests and prow jobs into subpools by repository and branch returning an error if ref retrieval fails
1662	AggregateProfiles will merge multiple coverage profiles into a single profile and return an error if the merging process fails
1663	countToBoolean will convert block counts to boolean values in profile copies and return the modified profiles
1664	NewStorage will create a storage instance with persistence layer and optional resource data from file, returning error if file reading or resource addition fails
1665	AddResource will add a resource to storage and return an error if the operation fails
1666	DeleteResource will remove a resource from storage and return an error if the operation fails
1667	UpdateResource will update a resource in storage and return an error if the update fails
1668	GetResource will return a resource by name and an error if it fails to retrieve or convert the resource
1669	GetResources will return a sorted list of resources from storage and any error that occurs during conversion or listing
1670	SyncResources will synchronize storage resources by deleting obsolete ones and adding new ones, returning any errors encountered during the process
1671	ParseConfig will read a yaml file and return a list of resources from the config file an error will be returned if the file cannot be read or unmarshaled
1672	problemsInFiles will analyze bazel files and return a map of files with their formatting problems and errors during parsing or rewriting
1673	NewPodLogArtifact will create a pod log artifact with given job name, build ID, size limit, and job agent, returning an error if inputs are invalid
1674	CanonicalLink will return a canonical URL string for a pod log artifact using job name and build ID as query parameters
1675	ReadAt will return pod log data and bytes read an error will be returned if log retrieval or reading fails
1676	ReadAll will return pod log bytes and an error if log size exceeds limit or retrieval fails
1677	ReadAtMost will return up to n bytes from pod logs and an error if the read operation fails or logs cannot be retrieved
1678	ReadTail will return the last n bytes of pod logs and an error if reading fails
1679	newProblems creates a copy of problems map then deletes entries based on review comments and comment tag presence
1680	problemsInFiles will analyze files in a git repository and return linting problems and error comments for each file
1681	undoPreset will remove preset configurations from a pod spec based on matching labels and preset definitions
1682	undoPresubmitPresets will remove preset configurations from presubmit labels and spec by iterating through each preset and applying undo operations
1683	yamlBytesStripNulls will remove null value lines from yaml bytes using regex pattern matching
1684	monitorDiskAndEvict will continuously monitor disk usage and evict cache entries when free space falls below a threshold until reaching a safe threshold level
1685	difference computes the set difference between two organization repository configurations, handling exceptions and repository unions correctly.
1686	union combines two orgRepoConfigurations by intersecting exceptions and merging repository whitelists while pruning overlapping entries
1687	clearStaleComments will remove stale release note comments from pull requests while preserving valid ones based on bot ownership and comment content
1688	determineReleaseNoteLabel will return a release note label based on the parsed release note text from the body string
1689	getReleaseNote will extract and return the release note content from a body string using regex matching otherwise it will return an empty string
1690	NewClient will return a new client with a boskos client and empty resources map
1691	Acquire will return a resource and acquire additional resources by state, releasing on failure if acquisition fails
1692	ReleaseOne will release a resource and any associated leased resources, returning accumulated errors if operations fail.
1693	UpdateAll will update all client states and return an error if the operation fails
1694	GetGitHubClient will return a GitHub client instance configured with the provided authentication token
1695	GetUsername will return the authenticated user's username from github or an error if the request fails
1696	CreateTokenHandler will create a token handler using a token stream and influxdb reference returning an error if the token is invalid or username cannot be retrieved
1697	CreateTokenHandlers will return a slice of token handlers created from files and an error if any file fails to process
1698	jobIndentifier String method returns a formatted string containing job, organization, repository, and pull request details
1699	TerminateOlderPresubmitJobs will cancel older duplicate presubmit jobs and update their states while cleaning up resources
1700	PushMetrics will continuously push component metrics to an endpoint at a given interval until interrupted by a signal
1701	RateLimiter creates a rate limiting queue with exponential and bucket limiters for a controller
1702	checkExistingStatus will return the existing DCO status context state and an error if the status check fails
1703	checkExistingLabels will verify if specific labels exist on a GitHub issue and return boolean flags indicating their presence or an error if the operation fails
1704	handle will perform DCO checks on a pull request commits and update its status and labels accordingly returning any errors encountered during the process
1705	MarkdownSHAList generates a markdown formatted list of git commits with shortened SHAs and their messages linked to GitHub.
1706	PathForSpec returns a log path string based on job specification type and parameters, handling different job types with specific path structures.
1707	AliasForSpec returns a file path for presubmit jobs or empty string for other job types, fatal error for unknown job types
1708	RootForSpec returns a log path based on job spec type, handling different job types and logging unknown types
1709	NewSingleDefaultRepoPathBuilder creates a repository path builder that returns empty string for default org/repo, otherwise formats as "org_repo" with slashes replaced by underscores
1710	NewExplicitRepoPathBuilder returns a function that creates repository paths by replacing slashes with underscores and formatting organization and repository names with an underscore separator
1711	RegisterSourceOrDie will register an issue source with a given name or die if the name already exists, logging the registration or fatal error accordingly
1712	CreateAndSync will initialize an IssueCreator and generate issues from sources, syncing them while counting created issues per source.
1713	loadCache will populate issue creator cache with user info, valid labels, collaborators, and all issues from repository, returning error if any step fails
1714	setIntersect will return the intersecting elements between two string slices and the remaining elements from the first slice
1715	sync will check for existing issues by ID, update or create new issues with appropriate labels and assignees, returning true if successful or false if failed or aborted.
1716	GetAWSCreds will return AWS credentials from resource user data or an error if keys are missing
1717	stopper will return a channel to signal shutdown on interrupt and handle clean exit on second interrupt
1718	newPipelineConfig creates a pipeline configuration with client and informer from rest config and stop channel returning error if pipeline CRD is not deployed
1719	KubernetesClientOptions will return a kubernetes client and error based on master url and kube config values
1720	ProwJobClient will return a prow job client and error based on master url and kube config from KubernetesClientOptions
1721	resolveSymLink will read a symbolic link object and return its target path with the GCS prefix removed, or an error if reading fails
1722	readJSON will read data from storage and unmarshal it into the given interface, returning an error if either operation fails
1723	listSubDirs will return a slice of directory paths and an error, listing subdirectories with the specified prefix from a GCS bucket
1724	listAll will return all object names with a given prefix from a GCS bucket and any error that occurs during the listing process
1725	listBuildIDs will return build IDs from GCS paths an error if listing fails or IDs are malformed
1726	FilterProfilePaths filters cover profiles by file name paths returning matching profiles or an error if regex compilation fails
1727	LoadSecrets will return a map of secret paths to their byte values and an error if any secret fails to load
1728	LoadSingleSecret will read a file from a path and return the trimmed bytes and any error that occurs during reading
1729	Set will assign a boolean value from string input and mark it as explicitly set, returning an error if conversion fails
1730	NewOpener creates a GCS client with specified credentials or defaults, returning an opener instance or error
1731	IsNotExist will return a boolean indicating if an error represents a non-existent file or object
1732	LogClose will attempt to close a resource and log any error that occurs during the closing process
1733	opener Writer will return a write closer for either gcs or local file system based on the path provided
1734	InitGitHubOAuthConfig will initialize the GitHub OAuth configuration with a cookie store and register the OAuth2 token for serialization
1735	deltaDisplayed will return the percentage change between base and new coverage ratios as a formatted string or empty string if base ratio is negative
1736	makeTable generates a coverage comparison table and flags low coverage based on a threshold
1737	ContentForGitHubPost generates a code coverage report table with old and new coverage values, returning the formatted string and a flag indicating if coverage is below threshold
1738	AddFlags will register command line flags for client configuration including token, token-file, organization, and project parameters
1739	CheckFlags will validate and normalize organization and project flags, returning an error if either is unset
1740	getGitHubClient will return a GitHub client with authentication or nil an error will be returned if token file reading fails
1741	limitsCheckAndWait will check GitHub API rate limits and sleep if limit is接近, otherwise it will continue execution
1742	FetchIssues will retrieve and send GitHub issues through a channel, counting them until no more pages exist, while handling errors and rate limiting.
1743	hasID will return a boolean indicating if an issue event with a specific ID exists in a slice of issue events
1744	FetchIssueEvents will retrieve issue events from GitHub API and send them through channel until latest event ID is reached or no more pages exist
1745	isPRChanged will return a boolean indicating if a pull request event represents a change action, returning true for open, reopen, sync, and edit actions, false otherwise
1746	NewFetcher creates and returns a Fetcher instance with initialized channels and repository setting
1747	fetchRecentIssues will retrieve and push updated issues through a channel while updating the last issue timestamp
1748	fetchRecentEventsAndComments will retrieve and merge issue events and comments from database based on timestamps and send them through a channel
1749	Fetcher will obtain recent issues events and comments from database and return an error if any operation fails
1750	FlakyJobReporter will fetch and parse flaky job data to return a specified count of issues through HTTP request and JSON parsing
1751	Title will return a formatted string showing the job name and its flake count from the past week
1752	Labels method returns flake kind label and SIG labels from tests sorted by appending to string slice
1753	ReadHTTP will attempt to read from a URL with exponential backoff retry logic returning the response body or an error after maximum retries
1754	linesByTimestamp.String will return a sorted string representation of log lines with proper formatting and commas
1755	NewJobSpec will create and return a new job specification with the provided parameters and fields from the prow job spec
1756	ResolveSpecFromEnv will return a job specification and error from environment variable or an error if environment variable is unset or malformed
1757	EnvForSpec generates environment variables for a job specification including build details and repository information, returning an error if marshaling fails.
1758	EnvForType returns environment variables based on the prow job type, including base, refs, and pull variables for different job categories
1759	getRevisionFromRef will return the revision SHA or reference from refs based on pull requests, base SHA, or base ref conditions
1760	GetRevisionFromSpec will return the revision from job specification refs or extrarefs otherwise returns empty string
1761	helpProvider returns plugin help information with a merge commit blocker description and no error
1762	load will parse configuration lines into group prefixes and repository paths, returning error on invalid syntax or scan failure
1763	loadPaths will read from a reader and store non-empty, non-comment lines as keys in the group's paths map, returning an error if scanning fails
1764	Match will return true if the path matches any stored paths prefixes or filenames otherwise false
1765	CreateDatabase will return an InfluxDB instance with a client and batch points configured for writing data to a specified database and measurement, dropping existing series with matching tags, and returning an error if any step fails.
1766	mergeTags will combine default and extra tags into a new map, with extra tags overwriting default ones
1767	tagsToWhere will return a SQL WHERE clause string from a map of tags, sorting keys and joining conditions with AND
1768	Push will add a new point with given tags, fields, and date to the InfluxDB batch and increment the batch size, returning any error that occurs during point creation or addition.
1769	artifact will return a pod log artifact and error if unable to access the pod log from the given source
1770	serve will start a server on port 8080 and handle metrics endpoint fatally logging any errors
1771	gather will sync metrics every 30 seconds until interrupted by a signal
1772	makeRequest will create a branch protection request using admin, review, check, and restriction configurations from a policy object
1773	makeReviews will return pull request review settings or nil based on input policy conditions with warning for missing approval count
1774	Header will return a rendered header template using the resource directory and build logs view context
1775	Callback processes log line requests and returns formatted highlighted lines or error messages
1776	logLinesAll will return all lines from an artifact's log file and any error that occurs during reading or splitting the content
1777	executeTemplate will render a template file with given data and return the output string or an error message if template loading or execution fails
1778	deepCopyObject will return a copy of the resource object or nil if copying fails
1779	FromItem will convert an item to a resource and set the resource object's fields accordingly, returning early if conversion fails
1780	SetItems will assign a slice of ResourceObject pointers to the Items field of ResourceCollection by type asserting each Object in the input slice
1781	deepCopy will return a copy of the resource collection or nil if copy fails
1782	useContext will switch the current kubernetes context and return an error if the operation fails
1783	currentContext will return the current kubernetes context and an error if the command fails
1784	command will return a command string slice and exec instance for a given binary and arguments
1785	describeCluster will return cluster details and error if cluster data is invalid or missing required fields
1786	strslice Set method appends a string value to the slice and returns nil error
1787	parseXML will return a directory structure and error based on XML body parsing with path prefix handling and directory detection logic
1788	gcsDir Render will generate and output an HTML page displaying directory contents with navigation and items
1789	Render will display a record's information as an html grid item with proper formatting and timestamps
1790	Render will output an html grid item with a directory icon url and prefix information to the response writer
1791	txnLogger's Printf method will log formatted messages with transaction nonce prefix and additional arguments
1792	NewClient will create a client with gerrit handlers for each instance and return an error if instantiation fails
1793	SetReview will add a review comment to a Gerrit code review instance and return an error if the operation fails or the instance is not activated
1794	GetBranchRevision will return a branch revision and error based on instance project and branch parameters
1795	queryAllChanges will return all changes from projects since lastUpdate, logging errors and continuing on project query failures
1796	NewTypeFilterWrapperPlugin creates a new type filter wrapper plugin with an empty pass map
1797	AddFlags will configure command line flags to ignore pull requests and issues in the TypeFilterWrapperPlugin
1798	CheckFlags will return an error if both pull requests and issues are ignored otherwise it will return nil
1799	AddFlags will configure Kubernetes client options with namespace, kubeconfig, and in-memory settings through command line flags
1800	Validate will check if kubeConfig file exists and return an error if it does not exist
1801	Client will return a client interface or an error depending on whether the kubernetes client is in memory or not
1802	newCRDClient will create and return a Kubernetes client for the specified resource type using the provided configuration and scheme, returning an error if the client creation fails.
1803	createRESTConfig will return a REST configuration and runtime scheme an error will be returned if the configuration fails to build or register types
1804	registerResource will create a custom resource definition using rest configuration and type information, returning an error if creation fails due to existing resources or other issues
1805	newDummyClient will return a dummy client with a specified type and empty objects map
1806	dummyClient Update will modify an existing object and return it, returning an error if the object doesn't exist
1807	TrustedPullRequest will check if a pull request author is trusted or has ok-to-test label and return labels, trust status, and error if present
1808	buildAll will filter presubmits for all changes and run tests returning an error if the process fails
1809	Run will execute test entries with context cancellation, handle interrupts, collect metadata and logs, then upload results to GCS returning failure count and upload status.
1810	AddConfig will add a resources configuration to storage and return an error if the operation fails
1811	DeleteConfig will remove a configuration from storage and return an error if the operation fails
1812	UpdateConfig will update the storage's configuration and return an error if the update fails
1813	GetConfig will return a resources configuration and an error if the configuration name is not found or cannot be converted
1814	GetConfigs will return a list of resource configurations and an error if the configuration list cannot be retrieved or converted
1815	SyncConfigs will synchronize storage configurations by comparing current and new configs, then deleting, adding, or updating configurations as needed, returning any errors encountered during the process.
1816	addKnownTypes registers ProwJob and ProwJobList types with the runtime scheme and adds group version to the scheme
1817	NewController creates and returns a controller with specified parameters and configured components including prow job triggerer, status migrator, and trusted checker.
1818	Run will continuously reconcile status changes until receiving a stop signal, logging duration and errors during reconciliation.
1819	addedBlockingPresubmits identifies and returns newly added or modified blocking presubmits between two configuration maps, logging details of each identified change.
1820	removedBlockingPresubmits identifies and returns blocking presubmits that were removed from the new configuration compared to the old one, logging each removal and the total count.
1821	migratedBlockingPresubmits identifies and logs migrated blocking presubmits by comparing old and new configurations, returning a mapping of repository to migration records.
1822	Load will configure a loader from environment or command line flags and return an error if configuration fails
1823	canExecuteConcurrently checks concurrency limits and updates pending jobs count, returning whether a prow job can start running concurrently
1824	getJenkinsJobs will filter incomplete prow jobs and return their build query parameters including job name and prow job ID
1825	terminateDupes will cancel duplicate presubmit jobs and update their states while avoiding enqueued builds
1826	Throttle configures rate limiting for client requests based on hourly tokens and burst capacity, managing internal ticker and channel synchronization.
1827	NewClientWithFields creates a client with logging, graphql, and http configurations using provided fields and token function
1828	NewClient will create a new client with logging fields a token getter graphql endpoint and optional base URLs
1829	NewDryRunClient will create a new client with logging fields a token getter and graphql endpoint an optional base parameter can be passed to the function
1830	NewFakeClient will return a mocked client instance with logging, standard time, and fake/dry run settings enabled
1831	request will send a request and unmarshal the response into ret returning the status code and any error that occurs
1832	requestRaw will send a raw request and return the status code, response body, and error if the status code is not in the expected exit codes
1833	getUserData will fetch user information from an API and store the bot name and email from the response, returning an error if the request fails
1834	readPaginatedResultsWithValues will fetch paginated API results, unmarshal them into objects, and accumulate through multiple pages until no next page exists
1835	UpdatePullRequest will modify a pull request's state, title, body, branch, and modification permissions returning an error if the update fails
1836	getLabels will return a slice of labels from a given path an error will be returned if the request fails
1837	stateCannotBeChangedOrOriginalError will return a state change error or the original error if state cannot be changed
1838	IsMergeable will check if a pull request is mergeable by comparing SHAs and checking merge status, retrying up to three times with exponential backoff if merge status is undetermined
1839	reloadingTokenSource Token method returns an oauth2 token with the access token set to the string representation of the fetched token
1840	ListArtifacts will return artifact names from a source key and append build-log.txt if not found or an error occurs
1841	KeyToJob will parse a source string into job name and build ID components returning an error if the path has fewer than two components
1842	prowToGCS will convert a prow key to a GCS path by extracting job information and validating the URL prefix, returning an error if the conversion fails
1843	FetchArtifacts retrieves artifacts from GCS or pod logs based on source, returning a list of artifacts and any error encountered during retrieval.
1844	DeepCopy will create a copy of the DecorationConfig instance and return a pointer to the new instance
1845	DeepCopy creates a copy of the GCSConfiguration instance and returns a pointer to the new instance
1846	DeepCopy creates a copy of JenkinsSpec instance returning nil if receiver is nil
1847	DeepCopy creates a copy of a ProwJob instance returning nil for nil input
1848	DeepCopy creates a copy of ProwJobList instance returning new instance or nil if input is nil
1849	DeepCopy creates a copy of ProwJobSpec by allocating new memory and copying all fields from the receiver to the new instance, returning the copied object or nil if the receiver is nil.
1850	DeepCopy creates a copy of ProwJobStatus returning nil if input is nil
1851	DeepCopy creates a copy of a Pull instance by allocating new memory and copying all fields from the original instance to the new one, returning the newly created copy or nil if the original was nil.
1852	DeepCopy will create a copy of the Refs instance and return a pointer to the new copy
1853	DeepCopy creates a copy of UtilityImages instance returning nil if input is nil
1854	upload will create an invocation, target, configuration, configured target, and action returning the url or an error during the process
1855	ApplyDefault will merge decoration configurations with default values returning a new configuration with filled missing fields from default where applicable
1856	Validate will check if decoration configuration has all required utility images and GCS settings, returning an error if any are missing or invalid
1857	ApplyDefault will merge utility images with default values returning a new merged instance or the original if either is nil
1858	ApplyDefault will merge GCS configuration with default values returning a new configuration with filled empty fields from default values
1859	Validate will check if the GCS path strategy is valid and return an error if it's not properly configured
1860	ClusterAlias will return the cluster alias from prow job spec or default if empty
1861	NewResource will create and return a new resource with the specified name, type, state, owner, timestamp, and empty user data
1862	NewResourcesFromConfig will create and return a slice of resources based on the provided resource entry configuration
1863	UserDataFromMap will create user data from a map by storing each key-value pair in the user data structure
1864	Set will assign comma separated string values to a comma separated strings type and return an error if the flag was already set
1865	UnmarshalJSON will convert JSON data into UserData by first unmarshaling into a temporary map and then populating the UserData from that map
1866	Extract will return user data by id and unmarshal into output structure or error if not found
1867	Set will store a marshaled yaml value in the user data under the given id and return an error if marshaling fails
1868	Update will modify user data by storing non-empty values and deleting empty ones from new data
1869	ToMap converts user data to a string-based map by iterating through key-value pairs
1870	FromMap will populate user data from a map by storing each key-value pair
1871	ItemToResource will convert an item to a resource and return an error if the conversion fails
1872	Run will execute parallel git clones with SSH keys and host fingerprints configuration returning an error if the operation fails
1873	addSSHKeys will start an ssh-agent and add SSH keys from given paths returning environment variables and any error encountered during the process
1874	TriageFiler Issues method returns a list of issues from top clusters by reading and processing cluster data
1875	loadClusters will process JSON input into clusters, filter data, and aggregate job/build information for each cluster
1876	parseTriageData will unmarshal JSON into triageData struct and validate required fields, returning error if any are missing or invalid types encountered
1877	topClusters will return the specified number of clusters with the highest total builds in descending order
1878	topJobsFailed returns the specified number of jobs with the most failed builds from the cluster
1879	Title will return a formatted string showing cluster failure statistics including identifier prefix and counts over a window of days
1880	Labels will return a slice of string labels including kind/flake and sig labels derived from test failures
1881	New will return a new cron instance with initialized agent jobs and logger
1882	QueuedJobs will return a list of triggered job names and reset their triggered status to false
1883	HasJob checks if a job with the given name exists in the cron scheduler and returns a boolean value indicating its presence
1884	addJob will register a cron job with a name and schedule, returning an error if registration fails, and log the addition of the job
1885	removeJob will delete a named job from cron agent and return an error if job doesn't exist
1886	UpdateComments will fetch the latest comment updates and refresh issue and optionally pull request comments in the database using a client interface
1887	GatherProwJobMetrics will aggregate prow job statistics by job name, type, and state then update corresponding metrics counters
1888	optionOrDefault will return either the specified option or the default duration value if the option is zero
1889	newGCSJobSource will return a GCS job source struct with parsed bucket, job prefix, name, and build ID from the source string an error will be returned if the source cannot be parsed correctly
1890	artifacts will return a list of GCS artifacts and an error if the operation fails or times out during listing
1891	canonicalLink will return the joined path of link prefix bucket and job prefix from the gcsJobSource struct
1892	jobPath will return the full path combining the bucket and job prefix of a gcs job source
1893	targetURL will return a formatted URL string for a pull request status based on configuration settings and repository information, logging any parsing errors that occur during URL construction.
1894	newBuildConfig will create a build configuration client and start an informer for builds returning an error if the CRD is not deployed or watch fails
1895	NewClient creates a GitHub client with OAuth authentication and specified retry settings
1896	retry will attempt an action up to a maximum number of retries, handling rate limits and specific errors during execution
1897	depaginate will collect all paginated items from an API call and return them as a single list along with any error that occurs during the process
1898	NewHelpAgent creates a help agent with logging, plugin agent, and organization agent using github client
1899	GeneratePluginHelp will return comprehensive help information including all repositories, plugins, and external plugins organized by repository and their respective configurations.
1900	getPullCommitHash will extract and return the commit hash from a pull request string an error will be returned if the format is incorrect
1901	listJobBuilds will concurrently retrieve job build prefixes from storage and return a list of job builds with their respective build directories
1902	getPRBuildData will fetch and process build data from storage buckets concurrently returning a slice of build data structures
1903	getGCSDirsForPR will return GCS directories for a pull request by finding presubmit jobs and their GCS configurations, organizing them by bucket and path, and returning an error if no presubmits are found for the given repository
1904	imageDeleteFromDisk will remove image and rootfs files from disk based on fingerprint with error logging for failed deletions
1905	doNetworksCreate will start a network and delete it if starting fails, returning any errors encountered during the process
1906	networkLoadByName will return a network object and error based on the given name by fetching from the cluster state
1907	Transaction executes a function within a database transaction on the node's database connection
1908	ForLocalInspectionWithPreparedStmts will return a cluster with prepared database statements an error will be returned if preparation fails
1909	SetDefaultTimeout will configure the default timeout duration for cluster database operations
1910	Transaction executes a function within a cluster transaction using read lock protection
1911	EnterExclusive will acquire an exclusive lock on the cluster database with a 20 second timeout and return an error if the lock cannot be obtained within that time frame
1912	ExitExclusive will release an exclusive lock on the cluster database and execute a transaction function within that locked context
1913	Close will close all statements in the cluster and return an error if the database connection cannot be closed properly
1914	TxCommit will commit a transaction and ignore duplicate commits or rollbacks returning an error if the commit fails
1915	ParseRemote will return a remote name and path from a raw string or default values an error will be returned if the remote does not exist
1916	GetContainerServer will return a container server connection and error based on remote configuration and project settings
1917	GetImageServer will return an image server connection based on remote configuration and connection arguments or an error if the remote doesn't exist or connection fails
1918	initAppArmor detects AppArmor availability, stacking, admin support, and confinement status for container security enforcement
1919	appArmorCanStack will check if AppArmor supports stacking by reading version files and comparing major and minor version numbers against 1.2 threshold, returning true if supported or false otherwise
1920	containerDeviceAdd will add a new device to a container and return an error if the device already exists or if the update fails
1921	profileDeviceAdd will add a new device to a profile and return an error if the device already exists or if the update fails
1922	ensureImageAliases will manage image aliases by deleting existing ones and creating new aliases for a given fingerprint
1923	GetExistingAliases returns matching aliases between two string slices by searching for each alias name in the sorted aliases array and appending matches to the result slice.
1924	StatusCode.String() returns the string representation of a status code from a predefined map
1925	ImagesGetExpired will return expired image fingerprints and an error if the expiry calculation fails
1926	ImageSourceInsert will add a new image source record with validated protocol and return an error if the protocol is invalid or insertion fails
1927	ImageSourceGet will return an image source record and its ID from database query or an error if not found or invalid protocol is encountered
1928	ImageExists will check if an image with given fingerprint exists in project and return boolean result or error
1929	ImageGet retrieves image data by project and fingerprint with optional strict matching and public filtering, returning image details or error.
1930	ImageGetFromAnyProject will retrieve an image by fingerprint from any project and return its id, image data, and error if not found or on failure
1931	imageFill populates an image struct with data from database including properties, aliases, and source information
1932	ImageLocate will find an image across cluster nodes and return an address of a node hosting it, or an error if not found
1933	ImageAssociateNode will associate an image with a node by inserting a record into the images_nodes table, returning an error if the operation fails
1934	ImageDelete will remove an image from the database by its id and return an error if the operation fails
1935	ImageAliasesGet retrieves image alias names for a project from database, handling default project fallback and returning error if query fails
1936	ImageAliasGet will retrieve image alias information by project and name returning id, entry and error if not found or on failure
1937	ImageAliasRename will update an image alias name in the database by its id and return an error if the operation fails
1938	ImageAliasDelete will remove an image alias from a project and return an error if the operation fails
1939	ImageAliasesMove will update image aliases from source to destination and return an error if the operation fails
1940	ImageAliasAdd will add an image alias to a project and return an error if the operation fails
1941	ImageAliasUpdate will modify an existing image alias record with new image ID and description based on the provided ID, returning any database execution error that occurs during the update operation.
1942	ImageLastAccessUpdate will update the last use date of an image in the cluster database and return an error if the operation fails
1943	ImageLastAccessInit will update an image's cache status and last use date in the database based on its fingerprint, returning an error if the operation fails
1944	ImageUpdate will modify an existing image's metadata and properties in the cluster database, returning an error if the operation fails
1945	ImageInsert will add a new image to a project with its properties and return an error if the operation fails
1946	ImageGetPools will return storage pool IDs associated with an image fingerprint and a node ID, or an error if the query fails
1947	ImageGetPoolNamesFromIDs will return storage pool names for given IDs by querying the database and handle errors during the process
1948	ImageUploadedAt will update the upload date of an image in the database and return an error if the operation fails
1949	ImagesGetOnCurrentNode will return image data for the current node by calling ImagesGetByNodeID with the instance's node ID, an error if the operation fails
1950	ImagesGetByNodeID will return a map of image fingerprints to project names for a given node ID, an error if the query fails or no images are found
1951	ImageGetNodesWithImage will return a list of node addresses that have a specific image fingerprint an error will be returned if the query fails
1952	ImageGetNodesWithoutImage will return a list of node addresses that do not have the specified image fingerprint an error will be returned if the query fails
1953	Add will add a task with given function and schedule to the group and return a pointer to the newly added task
1954	Start will initiate all tasks in a group concurrently and track their execution status until completion.
1955	zfsIsEnabled will return whether the zfs command is available in the system's PATH by checking if it can be located
1956	zfsToolVersionGet will return the version of zfsutils-linux package an error will be returned if the package is not installed or accessible
1957	zfsModuleVersionGet will return the ZFS module version string and an error if it cannot be determined from sysfs or modinfo command
1958	zfsPoolVolumeCreate will create a ZFS dataset with given properties and return the command output or an error
1959	zfsPoolVolumeExists will check if a ZFS dataset exists and return a boolean with any errors encountered during the check
1960	NetworkIDsNotPending will return a map of network names to IDs excluding pending states an error will be returned if the database query fails
1961	NetworkConfigAdd will add network configuration for a node in a cluster and return an error if the operation fails
1962	NetworkNodeJoin will associate a node with a network by upserting their IDs into the networks_nodes table, returning an error if the operation fails
1963	NetworkCreatePending will create or verify a pending network state for a node and insert configuration data into the database, returning an error if the operation fails or constraints are violated.
1964	NetworkCreated will return an error if the network state is not created
1965	NetworkErrored will return an error if the network state is errored for a given name
1966	NetworkGet will retrieve network information by name returning ID, network object and error if not found or on failure
1967	networkNodes will return a list of node names associated with a network ID and an error if the network does not exist
1968	NetworkGetInterface will return a network ID, configuration, and error for a given device name by querying the database and checking external interfaces
1969	NetworkConfigGet retrieves network configuration values by ID, returning a map of key-value pairs or an error if the network does not exist
1970	NetworkCreate will insert a new network with given parameters and return its ID or error if operation fails
1971	NetworkUpdate will modify a cluster's network description and configuration returning an error if the operation fails
1972	NetworkUpdateDescription will update a network's description in the database and return any error that occurs during the update process
1973	NetworkConfigClear will remove network configuration entries for a specific network and node, returning an error if the deletion fails
1974	NetworkDelete will remove a network from the database by its name and return an error if the network is not found or deletion fails
1975	NetworkRename will update a network's name in the cluster database by changing the old name to the new name and returning an error if the operation fails
1976	GetContainers will return a list of container objects and an error if the retrieval fails
1977	GetContainersFull retrieves full container information from the LXD protocol using recursion level 2 and returns an error if the required API extension is missing or if the query fails.
1978	GetContainer will fetch and return a container's data and its etag or an error if the container cannot be retrieved
1979	CreateContainerFromBackup will create a container from backup file using LXD protocol returning an operation and error if extensions are missing or request fails
1980	CreateContainer will create a container and return an operation or an error if container only migration extension is missing
1981	CreateContainerFromImage will create a container from an image by setting source fields and handling local or remote cases with appropriate error checking
1982	UpdateContainer will send a PUT request to update a container and return the operation or an error
1983	RenameContainer will rename a container and return an operation object or an error if migration is requested or query fails
1984	ExecContainer will execute a command in a container and handle input/output streams with websocket connections returning an operation and error if the execution fails
1985	GetContainerFile will retrieve a container's file or directory contents and metadata from LXD API returning reader, response data and any error that occurs during the process
1986	CreateContainerFile will create a file or directory in a container with specified attributes and return an error if extensions or operations fail
1987	DeleteContainerFile will delete a file from a container using the LXD protocol and return an error if the operation fails or the required API extension is missing
1988	GetContainerSnapshotNames will return container snapshot names and an error if the container or snapshots do not exist
1989	GetContainerSnapshots will return a list of container snapshots and an error if the retrieval fails
1990	GetContainerSnapshot retrieves a container snapshot by name and returns the snapshot data, etag, and error if the fetch fails
1991	CreateContainerSnapshot will create a container snapshot and return an operation or an error if the request is invalid or fails
1992	MigrateContainerSnapshot will send a POST request to migrate a container snapshot and return an operation or an error if migration is not enabled
1993	UpdateContainerSnapshot will update a container snapshot and return an operation or an error if the required API extension is missing or the request fails
1994	GetContainerState will return a container's state object the etag and an error if the state cannot be fetched
1995	UpdateContainerState will send a PUT request to update container state and return an operation or an error
1996	GetContainerLogfiles will return container log file names and an error if the retrieval fails
1997	GetContainerLogfile will return a container's logfile as an io.ReadCloser and an error if the retrieval fails
1998	GetContainerMetadata retrieves container metadata by name returning metadata struct, etag, and error if container_edit_metadata extension is missing or query fails
1999	SetContainerMetadata will update container metadata via PUT request returning error if extension missing or query fails
2000	GetContainerTemplateFiles retrieves template files for a container using LXD protocol with metadata extension check
2001	CreateContainerTemplateFile will create a container template file with given content and return an error if the operation fails
2002	DeleteContainerTemplateFile will remove a container's template file and return an error if the API extension is missing or deletion fails
2003	ConsoleContainer will establish a websocket connection to a container's console, handle control channels, and manage stdin/stdout streams returning an operation or error.
2004	GetContainerConsoleLog will return a container's console log read closer and an error if the console extension is missing or the request fails
2005	DeleteContainerConsoleLog will remove a container's console log using DELETE request an error will be returned if console extension is missing or request fails
2006	GetContainerBackups will return a list of container backups and an error if the container_backup extension is missing or the query fails
2007	GetContainerBackup will retrieve a container backup by name and return the backup data, etag, and any error that occurs during the retrieval process.
2008	CreateContainerBackup will create a container backup and return an operation or an error if the backup extension is missing or the request fails
2009	RenameContainerBackup will rename a container backup and return an operation or an error if the required API extension is missing
2010	DeleteContainerBackup will remove a container backup and return an operation or an error if the backup cannot be deleted or extension is missing
2011	GetContainerBackupFile retrieves a container backup file using LXD protocol with progress tracking and returns file size or error
2012	RsyncSend will execute a remote rsync command and manage websocket communication for data transfer and error handling
2013	patchesGetNames will return an array of patch names from the patches slice
2014	patchRenameCustomVolumeLVs will rename LVM logical volumes for custom storage pools based on container name conversion, skipping if volumes already exist or names match, returning errors encountered during the renaming process
2015	patchLvmNodeSpecificConfigKeys will migrate LVM pool configuration keys to per-node entries by duplicating global settings across all nodes in a transactional database operation, returning an error if any step fails.
2016	GetHTTPClient will return the HTTP client stored in ProtocolLXD or an error if it's not set
2017	do will execute an http request with optional macaroon headers and return the response or an error
2018	RawQuery will generate a URL and execute a raw query request returning the response, ETag, and any error that occurs
2019	RawWebsocket will establish and return a websocket connection to the specified path or an error if the connection fails
2020	RawOperation will execute a raw HTTP operation and return the operation result, URL, and any error that occurs during the query operation
2021	ProfileToAPI converts a profile struct to an api profile struct with matching fields
2022	Profiles will return a list of profile names for a project an error will be returned if the project is not found or there is a database issue
2023	ProfileGet will return a profile's ID, profile data and error based on project and name inputs within a cluster transaction
2024	ProfilesGet will retrieve multiple profiles from a cluster transaction and return them with error handling if project has no profiles or loading fails
2025	ProfileConfig will return a profile's configuration map and error if the profile does not exist or query fails
2026	ProfileConfigClear will delete all configuration data for a given profile ID from multiple related database tables and return an error if any deletion fails
2027	ProfileConfigAdd will insert profile configuration key-value pairs into the database table and skip empty values, returning an error if the operation fails
2028	ProfileContainersGet will return a mapping of container names to project names for a given profile and project an error will be returned if the query fails
2029	ProfileCleanupLeftover will remove orphaned profile data by deleting unused configurations and device associations from database tables
2030	ProfilesExpandConfig will merge profile configurations with given config, giving priority to the given config over profile configs
2031	ProfilesExpandDevices will merge profile devices with given devices returning the combined device list with priority given to the provided devices over profile devices
2032	GetServer will fetch and return server information including certificate fingerprint and authentication methods, caching the result and returning an error if the process fails
2033	UpdateServer will send a PUT request to update server configuration and return an error if the request fails
2034	HasExtension checks if a protocol has a specific API extension by comparing against cached server data and returns a boolean value indicating the result
2035	GetServerResources will fetch and return server resources data or an error if the resources extension is missing or the query fails
2036	UseProject will return a new ProtocolLXD instance with the specified project name set
2037	sqliteOpen will return a database connection and error based on the provided path with timeout configuration
2038	Rebalance will return a node address and updated raft nodes or an error if unable to find and promote a spare node to maintain optimal raft cluster size
2039	Promote will upgrade a node to a database node by configuring raft membership and initializing the gateway
2040	Purge will remove a node from the database by clearing and deleting it through a transaction, returning an error if any step fails
2041	List will return cluster members with their status and message based on node information and version comparison
2042	Count will return the number of nodes in the cluster and any error that occurs during the transaction
2043	Enabled will return a boolean indicating if raft node addresses exist and any error during transaction processing
2044	membershipCheckNodeStateForBootstrapOrJoin will validate node state for cluster bootstrap or join returning an error if state is inconsistent or invalid
2045	membershipCheckClusterStateForBootstrapOrJoin will validate cluster state consistency by checking exactly one node exists, returning an error if not
2046	membershipCheckClusterStateForAccept will validate cluster node properties and return an error if name, address, schema, or API versions conflict with existing nodes
2047	membershipCheckClusterStateForLeave will verify a node can leave cluster by checking it has no containers or images and cluster has multiple nodes returning an error if validation fails
2048	membershipCheckNoLeftoverClusterCert will return an error if any cluster certificate files exist in the directory, otherwise it returns nil
2049	ConfigLoad will return a configuration object and any error that occurs while loading from the database transaction
2050	Replace will update configuration values and return the modified settings or an error if the update fails
2051	Patch will update configuration values with patch data and return the updated values or an error
2052	HTTPSAddress will return the HTTPS address from node configuration and an error if the configuration cannot be loaded or accessed
2053	CertificatesGet will return a list of certificate information and an error if the retrieval fails
2054	CertificateGet will retrieve certificate information by fingerprint returning a certificate struct and error if not found or on database issue
2055	CertSave will insert certificate information into a cluster database table within a transaction, returning an error if the operation fails
2056	CertDelete will remove a certificate from the database by its fingerprint and return an error if the operation fails
2057	CertUpdate will update a certificate's name and type in the cluster database by its fingerprint, returning an error if the operation fails
2058	createDevLxdlListener will return a unix domain socket listener for devlxd and an error if the socket cannot be created or configured properly
2059	Servers will return the raft servers and an error if the instance is not the leader or there is a configuration error
2060	raftInstance shutdown will gracefully stop the raft service and close logs with timeout and error handling
2061	raftNetworkTransport will create a raft transport handler and layer with network configuration and timeout settings returning the transport, handler, and layer or an error if the node address is invalid
2062	raftConfig will return a scaled raft configuration with adjusted timeouts based on latency input and fixed snapshot parameters
2063	raftMaybeBootstrap will initialize a raft cluster if no existing state is found, returning an error if the bootstrap process fails
2064	CPUResource will return CPU resources including sockets, cores, and threads count with error handling for thread retrieval and processing
2065	MemoryResource will parse /proc/meminfo to extract memory statistics and calculate total and used memory in bytes, returning an error if parsing fails.
2066	GetOperationUUIDs will return a list of operation UUIDs from the LXD protocol by parsing URL paths an error will be returned if the query fails
2067	GetOperations will return a list of operations and an error by fetching raw operation data and converting it into a unified list
2068	GetOperation will fetch and return an operation struct and its etag by UUID, returning an error if the fetch fails
2069	GetOperationWebsocket will return a websocket connection and error based on uuid and secret parameters
2070	tryMount will attempt to mount a source to destination with specified filesystem and flags, retrying up to 20 times with 500ms delays between attempts until successful or all retries exhausted
2071	lxdUsesPool checks if a storage pool is referenced by a given property and returns a boolean indicating usage, the pool name, or an error if the pool is not found or there's an issue accessing the database.
2072	ProjectURIs will return project URIs based on filter criteria using prepared statements and argument matching an error will be returned if query fails
2073	ProjectList will return a filtered list of projects with their Config and UsedBy fields populated from the cluster transaction
2074	ProjectGet will return a project by name and an error if no or multiple projects are found
2075	ProjectExists will check if a project exists and return a boolean and error indicating the result
2076	ProjectCreate will return a project ID and error, checking for duplicates, inserting project data and config references into database
2077	ProjectUsedByRef will return a map of project names to their referenced values based on filter criteria an error will be returned if the query fails
2078	ProjectRename will rename a project from one name to another and return an error if the operation fails or doesn't affect exactly one row
2079	ProjectDelete will remove a project by name and return an error if zero or multiple rows are deleted
2080	PasswordCheck will verify a password against a stored hash using scrypt with salt, returning an error for empty secrets or mismatched passwords
2081	LoadCert will return certificate information and an error if loading TLS certificate fails
2082	WriteCert will save certificate, key, and optional CA files to a directory with specified prefix returning any error that occurs during file operations
2083	NewDaemon creates and returns a new Daemon instance with initialized channels and provided configuration and operating system references
2084	DefaultDaemon will return a new daemon with default configuration and operating system settings
2085	AllowProjectPermission creates a function that validates user permissions for a project and returns a response indicating whether access is granted or forbidden
2086	checkTrustedClient will verify if an http request is from a trusted client and return an error if not authorized
2087	Authenticate will validate TLS, cluster, and external authentication returning trust status, username, and auth type or an error
2088	State returns a new state instance using daemon's stored database, cluster, maas, os, and endpoints fields
2089	UnixSocket will return the unix socket path either from environment variable or default location
2090	Stop will gracefully shut down the daemon by stopping tasks, closing connections, and unmounting filesystems, returning any errors encountered during the process.
2091	setupExternalAuthentication configures external authentication with endpoint, public key, expiry, and domains returning an error if setup fails
2092	initializeDbObject will initialize the local database by renaming legacy files if needed, applying legacy patches, and returning a database dump with error handling for failed operations
2093	WriteJSON will encode a body to JSON and write it to a response writer, optionally capturing and debugging the output
2094	EtagHash will return a SHA-256 hash of JSON encoded data and an error if the encoding fails
2095	EtagCheck will validate if the request's ETag header matches the computed hash of data, returning an error if they don't match or if hashing fails
2096	HTTPClient will return an HTTP client with TLS configuration and proxy settings an error will be returned if the certificate is invalid
2097	IsRecursionRequest will return whether a request contains a non-zero recursion parameter from form values
2098	GetListeners will return network listeners from inherited file descriptors starting at a given index, cleaning up environment variables and handling errors during listener creation
2099	internalSQLGet will retrieve database dump data based on schema and database type returning a response with the dump text or an error
2100	internalSQLPost will process SQL queries from HTTP requests and return results or errors based on database operations
2101	PublicKey will return the certificate data encoded in PEM format from the certificate information
2102	PrivateKey method will return the PEM-encoded private key bytes from certificate info, handling both EC and RSA key types, or nil if unsupported key type is found
2103	Fingerprint method returns certificate fingerprint string with panic on invalid public key material
2104	GenCert will create certificate and key files with proper directory structure and return an error if generation or file operations fail
2105	PrintServerInfo will output server environment details including backend, version, kernel, and storage information to stdout
2106	LaunchContainers will create and optionally start/freeze a specified number of containers in batches returning the total duration and any error that occurs during the process
2107	CreateContainers will launch multiple containers in parallel batches and return the total creation duration and any error that occurs during the process
2108	GetContainers will return a list of containers with user configuration set to true and an error if the operation fails
2109	StartContainers will initiate multiple containers in parallel batches and return the total duration and any error that occurs during the process
2110	setQueryParam will update or add a query parameter to a URI and return the modified URI along with any error that occurs during parsing or encoding
2111	GetImages will return a list of image data and any error that occurs during the retrieval process from the lxd protocol
2112	GetImageFile will return an image file response and error by calling GetPrivateImageFile with empty secret key
2113	GetImageSecret will return an image secret string and an error if the operation fails
2114	GetPrivateImage will fetch and return an image by its fingerprint and secret with error handling for invalid inputs or network issues
2115	GetPrivateImageFile will download an image file using either a unix socket or HTTP URI with optional secret authentication returning image file response or error
2116	GetImageAliases will return a list of image aliases and an error if the query fails
2117	tryCopyImage will attempt to copy an image from multiple URLs and handle aliases for older servers returning a remote operation or an error if the process fails
2118	CopyImage will transfer an image from a source server to a target server using a pull method with optional aliases and authentication handling
2119	UpdateImage will send a PUT request to update an image with the provided fingerprint, data, and ETag returning an error if the operation fails
2120	DeleteImage will send a DELETE request to remove an image by its fingerprint and return the operation and any error that occurs
2121	RefreshImage will force refresh an image and return an operation or an error if the api extension is missing
2122	CreateImageAlias will send a POST request to create an image alias and return an error if the request fails
2123	UpdateImageAlias will send a PUT request to update an image alias and return an error if the request fails
2124	RenameImageAlias will send a POST request to rename an image alias and return an error if the request fails
2125	DeleteImageAlias will send a DELETE request to remove an image alias by name and return any error that occurs during the process
2126	Open will return a database connection to the local database file or an error if it cannot be opened
2127	EnsureSchema will update database schema with optional backup and hooks returning the updated version or error
2128	FilesystemDetect will return the type of filesystem at a given path and an error if the detection fails
2129	Schema will return a new schema with fresh data from updates
2130	updateFromV37 will copy core.https_address to cluster.https_address for raft nodes and return an error if the operation fails
2131	ArchitectureGetLocal will return the local machine architecture name or a default value if an error occurs during system call retrieval
2132	NewController will create a controller instance connecting to MAAS API with given url, key and machine name returning an error if connection or machine lookup fails
2133	CreateContainer will create a machine device with interfaces and subnets returning an error if any step fails
2134	DefinedContainer will check if a container device exists by hostname and return a boolean indicating its presence along with any error that occurs during the lookup process.
2135	UpdateContainer will synchronize container interfaces with MAAS by updating existing interfaces, removing deleted ones, and adding new interfaces with their subnets.
2136	RenameContainer will update a device's hostname by making a PUT request to the device's URI with the new name, returning an error if the device cannot be found or the update fails
2137	DeleteContainer will remove a container device and return an error if the device cannot be deleted or accessed
2138	Add will append an update to the schema's updates slice
2139	ensureSchemaTableExists will verify and create a schema table if it does not exist, returning an error if the check or creation fails
2140	queryCurrentVersion will return the highest schema version and an error if version checking fails
2141	ensureUpdatesAreApplied will apply schema updates from a given version and handle hooks, returning an error if any update or hook fails
2142	checkSchemaVersionsHaveNoHoles will verify sequential version numbers and return an error if any gaps exist between consecutive versions
2143	checkAllUpdatesAreApplied verifies that all database updates have been applied by comparing schema versions with expected update count
2144	formatSQL will reformat a SQL statement by splitting lines and replacing commas with newlines for better readability while preserving UNIQUE constraints
2145	GetAllXattr retrieves all extended attributes from a file path returning a map of attribute names to values and handling potential inconsistencies during retrieval
2146	GetErrno will extract and return the underlying system error and a boolean indicating if the error is a system error, otherwise it returns nil and false
2147	Uname will return system information and an error if the system call fails
2148	RegisterStmt will add a SQL statement to the registry and return its assigned code index
2149	PrepareStmts will prepare SQL statements and return a map of prepared statements indexed by their codes, returning an error if preparation fails
2150	NewGateway creates a gateway instance with database and certificate settings returning an error if initialization fails
2151	DialFunc returns a dialer that connects via memory or network based on gateway configuration
2152	Shutdown will stop the database gateway by shutting down raft and closing the server, returning an error if any operation fails
2153	Sync will dump the database to disk if the server exists and log a warning if it fails
2154	Reset will shutdown the gateway, remove global database files, replace raft nodes, update certificate, and initialize the gateway returning an error if any operation fails
2155	LeaderAddress will return the leader's address from a clustered gateway or an error if unavailable
2156	waitLeadership will return an error if the RAFT node does not self-elect as leader within the specified timeout period
2157	currentRaftNodes will return the current raft nodes and their addresses from the gateway's database, handling errors for missing objects or non-numeric IDs
2158	cachedRaftNodes will return cached raft node addresses and an error if fetching fails
2159	dqliteMemoryDial returns a dial function that connects via unix socket to a listener address
2160	DqliteLog will log messages at different levels using a formatted string and arguments based on the provided log level
2161	MetadataAsMap will convert response metadata into a map structure returning an error if the conversion fails
2162	MetadataAsOperation will convert response metadata into an operation struct and return an error if the conversion fails
2163	MetadataAsStringSlice will convert response metadata to a string slice and return an error if the conversion fails
2164	MetadataAsStruct will unmarshal response metadata into a target struct and return an error if the operation fails
2165	Load will read a CSV file line by line and add each record to the report, returning an error if any step fails
2166	Write will save CSV records to a file and log the action or return an error if the operation fails
2167	AddRecord will add a formatted record with timestamp, elapsed time, label, and success status to the CSV report, returning an error if the operation fails
2168	LoadConfig will read and parse a configuration file, apply defaults and upgrades, then return the loaded configuration or an error if the process fails
2169	SaveConfig will create a new configuration file with copied settings and removed static remotes, returning an error if any step fails
2170	ChrootLoader Get method will validate path access and return file contents or an error if access is outside the container bounds
2171	ConfigPath will return a joined file path using the config directory and provided paths
2172	ServerCertPath will return the certificate path for a server remote host by constructing the path using the config path and remote host name
2173	NewConfig creates a configuration with optional default values and returns a pointer to the Config struct
2174	checkForPreDumpSupport will determine if pre-dump migration is supported and return configuration values for incremental memory migration including iteration limits and pre-dump enablement status
2175	preDumpLoop performs incremental CRIU migration pre-dumps and determines when to stop based on memory page skip percentage thresholds returning final dump status and errors
2176	newRoot creates a command line interface for LXD's code generation tool with database command integration
2177	APIExtensionsCount returns total API extensions count with optional artificial bump from environment variable
2178	SelectURIs will execute a database query and map the results through a function to return a slice of strings, handling errors during query, scanning, and result processing.
2179	SelectStrings will return an array of strings from a database query and an error if the query fails
2180	scanSingleColumn will execute a query and scan each row using the provided function, returning any error that occurs during scanning or query execution
2181	LazyHandler will process lazy values in context and execute them before logging a record
2182	Callers will return a stack trace of call sites in the current goroutine an error will be returned if the call sites cannot be retrieved
2183	name will return the function name from a program counter address or "???" if not found
2184	TrimBelow will return a trace with all elements before the specified call removed
2185	TrimAbove will remove trace elements above a specified call address from the stack trace and return the remaining trace
2186	TrimBelowName will remove trace entries below the specified name and return the remaining trace
2187	TrimAboveName will remove trace entries above the specified name and return the remaining trace entries
2188	TrimRuntime will remove runtime frames from the end of a trace slice until reaching a non-runtime frame or emptying the slice
2189	GetCaps will return the security capabilities of a file as bytes or nil if not present, error if retrieval fails
2190	SetCaps will apply capabilities to a specified path and return an error if it fails
2191	ProgressReader's Read method will perform normal reading while tracking progress through a tracker, updating total bytes read and triggering updates during the read operation.
2192	Supported will check if quota is supported on a given path and return a boolean value and an error if the operation fails
2193	GetProject will return a project ID from a path and an error if the operation fails
2194	SetProject will assign a project id to a specified path and return an error if the operation fails
2195	DeleteProject will unset a project from a path and clear its quota returning an error if either operation fails
2196	GetProjectUsage will return the disk usage of a project by id on a given path and an error if the operation fails
2197	SetProjectQuota will set a project quota on a device for a given path and id, returning an error if the operation fails
2198	backupLoadByName will load and return a backup struct from database records and container data with error handling for failed loads
2199	backupCreate will create a database entry and storage backup for a container returning an error if the backup already exists or fails during creation
2200	Rename will rename a backup directory and database record while managing container directories appropriately
2201	Delete will remove a backup and return an error if the deletion fails
2202	backupFixStoragePool will update backup files with new storage pool information and return an error if the operation fails
2203	Count will return the number of rows in a table that match an optional condition and an error if the query fails or returns invalid results
2204	CountAll will return a map of table names to their row counts and an error if the operation fails
2205	InitTLSConfig will return a TLS configuration with specific cipher suites and minimum version set to TLS 1.2
2206	copyContainerThinpool will create a snapshot container and generate a new filesystem UUID for the target container returning an error if the operation fails
2207	copyContainerLv will copy a container's data from source to target storage with optional readonly flag and refresh behavior, handling snapshots and mounting points appropriately.
2208	copyContainer will duplicate a container to a target location using either thinpool or full copy method based on storage pool configuration and return an error if the operation fails
2209	copyVolume will create a target directory and copy a volume from source pool to target storage volume using either thinpool or standard copying method returning an error if the operation fails
2210	GetPrivateImage will return an error stating private images aren't supported by simplestreams protocol
2211	GetPrivateImageFile will return an error stating private images aren't supported by the simplestreams protocol
2212	GetImageAliasNames will return a list of image alias names and an error if the aliases cannot be retrieved from the simplestreams client
2213	ProtoRecv will receive a binary websocket message and unmarshal it into a protocol buffer message, returning an error if the message type is incorrect or unmarshaling fails
2214	ProtoSend will transmit a protocol buffer message through a websocket connection and return any error that occurs during serialization or transmission
2215	ProtoSendControl will send a migration control message with success status and optional error message through websocket connection
2216	stdinMirror Read will process input bytes, detect escape sequences, and signal console disconnect on 'q' after escape key
2217	doContainersGetFromNode will fetch containers from a node using a client connection with timeout protection and error handling for network operations
2218	Retry will attempt a function up to five times with a 250ms delay on retriable database errors, returning the final error after all attempts.
2219	IsRetriableError determines if a database error can be retried based on specific SQLite and string match conditions returning true for retryable errors.
2220	AppArmorProfile returns the current security context or empty string if unavailable
2221	StoragePoolVolumeCreate will create a BTRFS storage volume on a storage pool and apply quotas if specified, returning an error if the creation fails
2222	ContainerStorageReady will check if a container's storage is ready by verifying its btrfs subvolume status
2223	ContainerCreateFromImage will create a BTRFS storage volume for a container using an image snapshot, handling pool mounting, directory creation, and volume snapshotting with proper locking and error handling.
2224	ContainerSnapshotRename will rename a BTRFS storage volume for a snapshot by unmounting it if needed, then renaming the subvolume on the storage pool, returning an error if the operation fails
2225	ContainerSnapshotCreateEmpty will create an empty BTRFS storage volume for a snapshot on a storage pool and return an error if the operation fails
2226	btrfsSubVolumesDelete will recursively delete all subvolumes and the main subvolume itself, returning an error if any deletion fails
2227	isBtrfsSubVolume will check if a path is a BTRFS subvolume by verifying its inode number equals 256
2228	SelectConfig will retrieve key-value pairs from a database table based on optional filtering criteria and return them as a map of strings or an error if the operation fails
2229	UpdateConfig will update or delete configuration values in a database table based on provided key-value pairs, returning an error if the operations fail.
2230	deleteConfig will remove configuration entries from a database table based on provided keys and return any error that occurs during the deletion process
2231	FormatSection will return a formatted string with optional header and indented content, adding proper spacing and newlines between sections
2232	GetProjects will return a list of projects from the LXD protocol an error will be returned if the projects extension is missing or the query fails
2233	GetProject will retrieve a project by name and return the project data, etag, and error if the projects extension is missing or request fails
2234	CreateProject will create a new project on the LXD server if the projects API extension is available, returning an error if the extension is missing or the request fails
2235	UpdateProject will modify a project's configuration and return an error if the projects API extension is missing or the update fails
2236	RenameProject will rename a project and return an operation or an error if the projects extension is missing or the request fails
2237	Read will return bytes from reader with retry on EAGAIN or EINTR errors
2238	Write will attempt to write bytes to a writer and retry on EAGAIN or EINTR errors until successful or other error occurs
2239	NewCanceler will return a new canceler instance with an initialized request channel map
2240	Cancelable will return a boolean indicating if there are pending requests to cancel
2241	Cancel will close all cancel channels and return an error if the operation cannot be canceled
2242	CancelableDownload will perform a cancellable HTTP download and return the response, completion channel, and any error that occurs during the request.
2243	clusterGet will return cluster information including server name, enabled status, and member config an error will be returned if cluster data cannot be retrieved
2244	clusterGetMemberConfig will return cluster member configuration keys for storage pools and networks an error will be returned if fetching configuration fails
2245	clusterPutDisable will close and reset the cluster database, remove TLS files, update certificate, reopen cluster database, stop tasks, and clear cluster flag returning appropriate errors or success response
2246	tryClusterRebalance attempts to rebalance a cluster by connecting to the leader node and sending a rebalance request, returning an error if any step fails.
2247	internalClusterPostRebalance will redirect cluster rebalance requests to the leader node and promote spare nodes if available, returning appropriate responses or errors during the process
2248	internalClusterPostPromote will handle cluster promotion requests by validating raft nodes and promoting them, returning appropriate HTTP responses based on success or failure conditions
2249	Filters will return a slice of string slices containing object names that match a specific prefix pattern sorted by length in descending order
2250	Parse will return a mapping with package name struct name and parsed fields or an error if declaration is not found or parsing fails
2251	findStruct will return a struct type from a scope given its name, returning nil if not found or if the object is not a struct type
2252	parseStruct will return a list of fields from a struct type and any errors encountered while parsing parent structs or individual fields
2253	GetProfileNames will return profile names from API response URLs an error will be returned if query fails
2254	GetProfiles will return a list of profiles and an error if the query fails
2255	GetProfile will retrieve a profile by name and return the profile data along with an etag or an error if the profile cannot be fetched
2256	CreateProfile will send a POST request to create a profile and return an error if the request fails
2257	UpdateProfile will send a PUT request to update a profile and return an error if the request fails
2258	RenameProfile will send a POST request to rename a profile and return an error if the request fails
2259	Load will create a Map from a schema and values returning an error if the update fails
2260	Dump will return a map of non-default values from the schema, excluding hidden keys, and including true for hidden keys that differ from their default values
2261	GetRaw will return a raw string value from the map using the provided name as key and default value if key is not found
2262	GetString will return a string value from the map using the provided name key after asserting its type
2263	GetBool will return a boolean value from the map based on the provided name key asserting its type correctness
2264	GetInt64 will convert a map value to int64 and panic if conversion fails
2265	update will modify map values and return changed keys and errors if any occur during the update process
2266	set will update a map value return whether changed and any validation errors
2267	DoesSchemaTableExist will check if a schema table exists in sqlite and return a boolean result with potential error during the database query operation
2268	selectSchemaVersions will return schema versions from database ordered by version an error if query fails
2269	selectTablesSQL will return SQL statements for tables indexes and views from sqlite_master table an error will be returned if the query fails
2270	createSchemaTable will execute a sql statement to create a schema table with id, version, and updated_at columns returning an error if the execution fails
2271	insertSchemaVersion will insert a new schema version into the database table and return an error if the operation fails
2272	NewState creates and returns a new State instance with specified node, cluster, maas, os, and endpoints parameters
2273	containerLXCUnload will release the container resources and clear the finalizer reference
2274	containerLXCInstantiate will create and return a new containerLXC instance using the provided state and container arguments
2275	initStorage will initialize and return a storage container error if the initialization fails
2276	OnNetworkUp will configure a network device by setting its host name and setting up the host veth device, returning an error if the operation fails
2277	setupHostVethDevice will configure host veth device settings and return an error if device resolution or network setup fails
2278	getLxcState will return the container state or an error after attempting to retrieve it through lxc monitoring with a timeout fallback to frozen state
2279	StorageStartSensitive will initialize storage and start container mounting or snapshotting returning a boolean flag and any error that occurs during the process
2280	deviceExistsInDevicesFolder checks if a device file exists at a constructed path based on prefix and path parameters
2281	createDiskDevice will return a device path and error, creating disk devices with optional storage pools and handling file or directory sources
2282	setNetworkRoutes will configure network routes for a container device by flushing existing static routes and adding new IPv4/IPv6 routes from device configuration
2283	containerLXC Path method returns the container path using project prefix and snapshot status
2284	maasInterfaces will return container network interfaces with their subnets and mac addresses from expanded devices
2285	getSystemHandler will return a syslog handler with level filtering or nil based on debug flag and syslog string input
2286	findNvidiaMinor will return a device minor number from nvidia gpu information file or an error if not found
2287	GetLogger will return a configured logger with multiple handlers based on syslog, logfile, verbose, debug, and customHandler parameters, or an error if the configuration fails
2288	SetLogger will replace the current logger with a new one and return a function to restore the original logger
2289	WaitRecord will return a log record from channel or nil if timeout occurs
2290	AddContext will add logging context to a logger and return the new logger or original logger if downcasting fails
2291	NewDottedVersion will create a version struct from a dotted string format returning an error if the format is invalid
2292	Parse will return a dotted version and an error if the version string cannot be parsed correctly
2293	DottedVersion String method returns a version string in format "major.minor" or "major.minor.patch" depending on patch value
2294	Compare two dotted version structs by major, minor, and patch numbers returning the first non-zero comparison result or zero if equal
2295	projectCreateDefaultProfile will create and add a default profile to a database transaction for a given project, returning an error if the operation fails
2296	projectChange will update project configuration and handle feature changes with validation and database persistence returning appropriate response codes
2297	projectIsEmpty will return true if a project has no used entities or only default profile references otherwise false
2298	GetCertificateFingerprints will return certificate fingerprints from fetched certificates an error will be returned if the query fails
2299	GetCertificates will return a list of certificate objects and an error if the retrieval fails
2300	GetCertificate will fetch and return a certificate and its etag by its fingerprint an error will be returned if the certificate cannot be retrieved
2301	CreateCertificate will send a POST request to create a certificate and return an error if the request fails
2302	UpdateCertificate will modify a certificate's details using PUT request and return an error if the operation fails or extension is missing
2303	DeleteCertificate will send a DELETE request to remove a certificate by its fingerprint and return any error that occurs during the process
2304	containerMetadataTemplatesGet handles container template requests by listing or retrieving specific templates from container storage
2305	containerMetadataTemplatesPostPut will handle POST/PUT requests to create or update container metadata templates, returning errors for missing arguments, existing templates, or file operation failures
2306	containerMetadataTemplatesDelete will remove a container template file and return an error if the path is missing or file deletion fails
2307	getContainerTemplatePath will return a joined path of container path templates and filename an error will be returned if filename contains forward slash
2308	Error will return a formatted error message including the name value and reason for a failed setting operation
2309	ErrorList will return a string representation of multiple errors or a single error depending on the length of the error list
2310	add will append an error to the error list with the given name value and reason
2311	UpdateSchema will update both cluster and node database schemas returning an error if either update fails
2312	doProfileUpdateCluster will update a profile across all associated containers and return any failures that occurred during the update process
2313	doProfileUpdateContainer will update a container's profile configuration and return an error if the operation fails or the container does not belong to the specified node
2314	getProfileContainersInfo will return container information for a given profile and project an error will be returned if the query or fetch fails
2315	GetNetworkNames will return network names from API response or error if network extension is missing
2316	GetNetworks will return a list of network objects and an error if the network extension is missing or the query fails
2317	GetNetwork will retrieve a network by name and return the network object, etag, and error if the network extension is missing or the fetch fails
2318	GetNetworkLeases retrieves network lease information for a specified network name, returning an error if the required API extension is missing or if the query fails.
2319	GetNetworkState will retrieve and return the state of a specified network or return an error if the network_state extension is missing or the query fails
2320	CreateNetwork will create a new network and return an error if the network extension is missing or the request fails
2321	UpdateNetwork will modify a network configuration and return an error if the network extension is missing or the update fails
2322	RenameNetwork will rename a network resource using POST request and return an error if the network extension is missing or request fails
2323	Open will create a dqlite driver and register it with sql package then open a database connection returning the sql database object and an error if the operation fails
2324	URLEncode will encode a path with query parameters and return the encoded URL string an error will be returned if the path is not a valid URL
2325	IsUnixSocket will return a boolean indicating if the given path is a unix socket by checking its file mode
2326	HostPath will return a host filesystem path with snap confinement handling for relative paths and special prefixes
2327	FileMove will rename a file to a new path, copying it if rename fails and removing the original file afterwards
2328	DirCopy will recursively copy a source directory to a destination directory, creating the destination if needed and returning an error if the operation fails at any step
2329	StringMapHasStringKey will check if any key from keys exists in the string map and return true if found otherwise false
2330	TextEditor will open a text editor to modify content and return the updated content or an error if the editor cannot be found or fails to run
2331	WriteTempFile will create a temporary file with given content and return its path or an error if creation fails
2332	RenderTemplate will recursively render a pongo2 template string with given context until no more template tags remain, returning the final rendered string or an error if rendering fails
2333	Every will return a schedule that triggers at specified intervals with optional skip first behavior
2334	StoragePoolMount will attempt to mount a storage pool returning a boolean indicating success and any errors encountered during the process
2335	Dump will return a database schema and data as SQL dump string or an error if dumping fails
2336	dumpTable will generate SQL INSERT statements for all rows in a table, including schema definition, and return them as a string with proper error handling for data types and database operations
2337	ProjectHasProfiles will check if a project has profiles and return a boolean value and an error if the operation fails
2338	ProjectNames will return a list of project names and an error if the query fails
2339	ProjectMap will return a mapping of project IDs to names from the database query an error will be returned if the query fails
2340	ProjectHasImages will return whether a project has images enabled by checking its configuration, returning an error if the project cannot be fetched
2341	ProjectUpdate will update a project's description and config, returning an error if the operation fails or doesn't affect exactly one row
2342	GetCluster will retrieve cluster information and return the cluster data, etag, and error if the clustering extension is available
2343	UpdateCluster will modify cluster settings and return an operation or an error if clustering extensions are missing
2344	GetClusterMemberNames will return cluster member names and an error if the clustering extension is missing or query fails
2345	GetClusterMembers will return a list of cluster members and an error if the clustering extension is missing or the query fails
2346	GetClusterMember will retrieve a cluster member by name and return the member data along with an etag or an error if clustering extension is missing or query fails
2347	RenameClusterMember will rename a cluster member using POST request and return an error if clustering extension is missing or query fails
2348	Disconnect will remove the event listener from the global list and close its active channel if it's not already disconnected
2349	CompareVersions will return the relationship between two version arrays an error will be returned if versions are inconsistent
2350	HasClientCertificate will return whether the client certificate and key files exist in the configuration path
2351	GenerateClientCertificate will create or find client certificate files and return an error if the operation fails
2352	LoadModule will load a kernel module if it doesn't already exist, returning an error if the operation fails
2353	Parse will return a package and its files from a given directory path an error will be returned if the directory is not found or files cannot be parsed
2354	PprofAddress will return the address string of the pprof listener or empty string if not found
2355	PprofUpdateAddress updates the pprof server's network address by closing old and opening new listeners with retry logic
2356	NewMethod will create and return a new Method instance with the specified parameters and packages, returning an error if package retrieval fails
2357	Generate will return a method implementation based on the method kind an error will be returned if the method kind is unknown
2358	fillSliceReferenceField will populate a slice reference field by fetching related objects and assigning them to the appropriate indices in the target objects array
2359	StoragePoolID will return a storage pool ID and an error based on the given name, returning -1 if no or multiple pools exist with that name
2360	StoragePoolIDsNotPending will return a map of storage pool names to IDs excluding pending ones and an error if the query fails
2361	StoragePoolNodeJoin will associate a storage pool with a node by inserting or updating their relationship in the database, returning an error if the operation fails
2362	StoragePoolNodeJoinCeph will join a node to a ceph storage pool by copying volume configurations and creating new volume entries for the joining node
2363	StoragePoolConfigAdd will add storage pool configuration and return an error if the operation fails
2364	StoragePoolCreatePending will create or verify a storage pool's pending state across nodes, returning errors for inconsistencies or conflicts.
2365	StoragePoolCreated will set the storage pool state to created and return an error if the operation fails
2366	StoragePoolErrored will return an error if the storage pool state is set to errored
2367	StoragePoolNodeConfigs will return storage pool configurations for all nodes and an error if the pool is not defined on some nodes
2368	StoragePoolsGetDrivers will return a list of storage pool drivers from the database or an error if no drivers are found
2369	StoragePoolGetID will return a storage pool's ID and an error if the pool doesn't exist or query fails
2370	StoragePoolGet retrieves storage pool details by name returning ID, pool data and error if not found or on failure
2371	storagePoolNodes will return a list of node names associated with a storage pool ID and an error if the query fails
2372	StoragePoolConfigGet retrieves storage pool configuration values by pool ID and node ID returning a map of key-value pairs or an error if the query fails
2373	StoragePoolCreate will create a new storage pool with given parameters and return its ID or error if creation fails
2374	storagePoolConfigAdd will insert storage pool configuration values into the database for a given pool and node ID, skipping empty values and handling node-specific configurations appropriately.
2375	StoragePoolUpdate will update a storage pool's description and configuration returning an error if the operation fails
2376	StoragePoolConfigClear will delete storage pool configuration entries for a given pool ID and node ID, returning an error if the operation fails
2377	StoragePoolDelete will remove a storage pool by name and return the deleted pool object or an error if not found or deletion fails
2378	StoragePoolVolumesGetNames will return volume names from storage_volumes table based on poolID and nodeID, or an error if query fails
2379	StoragePoolVolumesGet retrieves storage volumes from a cluster across multiple nodes for given project, pool, and volume types returning an error if the operation fails
2380	StoragePoolNodeVolumesGet will return storage volumes for a node and pool ID an error will be returned if the operation fails
2381	storagePoolVolumesGet will return storage volumes from a pool and handle errors when volumes are missing or fetching fails
2382	StoragePoolVolumesGetType will return a list of volume names from storage_volumes table based on project, volume_type, poolID and nodeID parameters, an error will be returned if the query fails
2383	StoragePoolVolumeSnapshotsGetType will return a list of snapshot names for a given volume and pool an error will be returned if the query fails
2384	StoragePoolNodeVolumesGetType will return node volumes of a specific type and pool ID an error will be returned if the operation fails
2385	StoragePoolVolumeGetType will return a storage volume's type ID, volume details and an error if the volume cannot be retrieved or processed correctly
2386	StoragePoolNodeVolumeGetType will return a storage volume type and error by calling StoragePoolNodeVolumeGetTypeByProject with default project
2387	StoragePoolNodeVolumeGetTypeByProject will return a storage volume type and error for a given project volume name and type an error will be returned if the volume is not found
2388	StoragePoolVolumeUpdate will update a volume's configuration and description in a storage pool returning an error if the operation fails
2389	StoragePoolVolumeDelete will remove a storage volume from a cluster and return an error if the deletion fails or if the volume cannot be found
2390	StoragePoolVolumeRename will rename a storage volume in a cluster by updating its name in the database and handling replication for Ceph storage pools, returning an error if the operation fails
2391	storagePoolVolumeReplicateIfCeph will replicate volume operations across nodes for ceph driver storage pools and return an error if the operation fails
2392	StoragePoolVolumeCreate will create a storage volume entry in the cluster database and return its ID or an error if the creation fails
2393	StoragePoolVolumeGetTypeID will return a volume ID and error based on project, volume name, type, pool ID, and node ID matching database records
2394	StoragePoolNodeVolumeGetTypeID will return a volume type ID and an error based on the provided parameters including volume name, type, and pool ID
2395	StoragePoolVolumeTypeToName will convert a storage pool volume type integer to its corresponding string name and return an error if the type is invalid
2396	DevicesAdd will insert devices and their configurations into database tables using prepared statements and return an error if any insertion fails
2397	Devices method will return a list of devices for a project and container/profile name, querying database and mapping results to device configurations
2398	Patches method returns a list of patch names from database query or an error if query fails
2399	PatchesMarkApplied will insert a patch name and timestamp into the patches table and return an error if the operation fails
2400	entityType will return a capitalized entity type with package prefix if package is not "db"
2401	entityPost will return a capitalized pluralized string with "Post" appended to it
2402	stmtCodeVar generates a camelCase variable name from entity and kind, optionally appending filtered identifiers
2403	destFunc generates a string representation of a function that appends a new struct to a slice and returns a slice of interfaces containing pointers to the struct's fields
2404	CompareConfigs will check two configurations for differences excluding specified keys and return an error listing differing keys
2405	CopyConfig will return a copy of the input configuration map by iterating through each key-value pair and creating a new map with identical entries.
2406	NewNotifier creates a notifier that sends state changes to cluster peers with connection handling and error management based on notification policy
2407	Events will manage event listeners and return a function to update them along with a schedule to run the updates every second
2408	eventsConnect will establish a connection to address using cert and return all events across projects
2409	StoragePoolInit will initialize the storage core and return an error if the initialization fails
2410	getAAProfileContent generates an AppArmor profile string for a container with conditional features and configurations based on container state and OS support.
2411	AALoadProfile will load or update an AppArmor profile for a container, creating the profile file only if it has changed, and then applying it using apparmor command.
2412	AADestroy will remove apparmor namespace and unload policy returning an error if operation fails
2413	AAParseProfile will check AppArmor availability and run apparmor parsing on the container state returning an error if the operation fails
2414	getSystemHandler will return a logging handler based on syslog string debug flag and format an error will be returned if the handler cannot be created
2415	NotifyUpgradeCompleted will send a PATCH request to notify nodes about completed database upgrades and return an error if the notification fails
2416	KeepUpdated will update state every five minutes and return a function and schedule to manage the update process
2417	maybeUpdate will check if a cluster node is outdated and trigger an update using an executable if it is outdated and the update variable is set, logging appropriate messages throughout the process
2418	NewServer creates a server instance with API configuration authentication and cookie jar setup returning an error if initialization fails
2419	StartStatusCheck initializes a status checking goroutine that flushes cache when status changes every minute
2420	SyncProjects will synchronize projects with RBAC by converting project data and updating resource mappings, returning an error if synchronization fails
2421	AddProject will add a project resource to RBAC and update the project map with the given id and name, returning an error if the RBAC update fails
2422	DeleteProject will remove a project by ID from resources and update RBAC, returning an error if the operation fails
2423	RenameProject will rename a project by adding it again with the same ID and new name, returning an error if the operation fails
2424	IsAdmin checks if a user has admin privileges by verifying cached permissions or syncing them first
2425	HasPermission checks if a user has specific project permission by syncing and caching permissions
2426	rsyncSend will execute a remote sync command and mirror websocket data returning an error if the operation fails
2427	rsyncSendSetup will create a remote sync command with network connection and stderr pipe returning error if setup fails
2428	tlsClientConfig will return a TLS configuration with certificate and CA settings an error will be returned if certificate parsing fails
2429	tlsCheckCert will verify if the TLS certificate from request is trusted by checking against known certificates and return a boolean value indicating the trust state
2430	internalClusterContainerMovedPost will create a container mount point and return an empty sync response or an error if the operation fails
2431	containerPostCreateContainerMountPoint will create container and snapshot mount points for a given container and its snapshots on a storage pool
2432	Contains will return a boolean indicating if a device exists in devices list and matches the given device
2433	Update function compares two device lists and returns removed, added, updated devices and difference keys between matching devices
2434	DeviceNames will return a sorted list of device names from the devices collection
2435	Infof will log a formatted message at info level if the logger is initialized otherwise it will do nothing
2436	Debugf will log a debug message using format string and arguments if logger is initialized
2437	Warnf will log a formatted warning message if the logger is initialized otherwise it will do nothing
2438	Errorf will log an error message using the provided format and arguments if the logger is initialized
2439	Critf will log a critical message using format string and arguments if logger is initialized
2440	eventForward will process and broadcast events while filtering debug and info level logs based on verbose flags, logging errors if broadcasting fails
2441	StorageProgressReader returns a reader that tracks and renders progress for storage operations with given key and description
2442	StorageProgressWriter returns a writer that tracks upload progress with a callback function for handling progress updates
2443	GetLSBRelease will return operating system information from release files with error handling for missing files
2444	Reset will generate and write package declaration import statements and a dummy variable to a file or stdout returning an error if the operation fails
2445	Append will add a code snippet to a file or stdout and return an error if the operation fails
2446	ContainerToArgs converts a container object into container arguments, initializing empty devices if nil and mapping all container fields to the corresponding arguments struct fields
2447	ContainerNames will return a list of container names from a given project an error will be returned if the query fails
2448	ContainerNodeAddress will return a container's node address and an error if the container or node is not found or if multiple nodes are associated with the container
2449	ContainersListByNodeAddress will return a mapping of node addresses to container names for a given project, organizing offline nodes and local containers differently, and returning an error if the query fails or data processing encounters issues
2450	ContainerListExpanded will return expanded container information with profile data merged into each container's config and devices
2451	ContainersByNodeName will return a mapping of container names to node names for a given project an error will be returned if the query fails
2452	SnapshotIDsAndNames will return a map of snapshot IDs to names filtered by a given name prefix an error will be returned if the database query fails
2453	ContainerNodeList will return a list of containers filtered by local node name and regular type an error will be returned if node name cannot be retrieved
2454	ContainerNodeProjectList will return containers from local node matching project and type an error if query fails
2455	ContainerRemove will delete a container from a project within a cluster transaction and return an error if the deletion fails
2456	ContainerProjectAndName will return a container's project name and container name by its id an error will be returned if the container does not exist
2457	ContainerConfigClear will delete all configuration data for a container including profiles, devices config and devices records from database tables
2458	ContainerConfigGet will retrieve a configuration value from database by container id and key, returning an error if not found or on query failure
2459	ContainerConfigRemove will delete a container's configuration entry by key and id returning an error if the operation fails
2460	ContainerSetStateful will update a container's stateful flag in the database and return an error if the operation fails
2461	ContainerProfilesInsert will add multiple profiles to a container with specified apply order in a transaction, returning an error if any step fails
2462	ContainerProfiles will return a slice of profile names for a given container id and an error if the query fails
2463	ContainerConfig will return a map of container configuration key-value pairs and an error if the container ID is not found or query fails
2464	ContainerSetState will update a container's power state in the database within a transaction, returning an error if the operation fails
2465	ContainerUpdate will modify container details in database returning error if update fails
2466	ContainerLastUsedUpdate will update a container's last use date in the database and return an error if the operation fails
2467	ContainerGetSnapshots will return a list of snapshot names for a given project and container name an error will be returned if the query fails
2468	ContainerGetSnapshotsFull will return a list of container snapshots filtered by project and name an error will be returned if the filtering fails
2469	ContainerNextSnapshot will return the next snapshot number for a container in a project based on a naming pattern and delimiter, or zero if an error occurs.
2470	ContainerPool will return a container's storage pool name and an error if the container is not found or query fails
2471	ContainerGetBackup will retrieve container backup arguments by project and name, returning an error if not found or on database query failure
2472	ContainerGetBackups will return a list of container backup names for a given project and container name, or an error if the query fails
2473	ContainerBackupCreate will insert a new backup entry into the database with specified arguments and return an error if already defined or insertion fails
2474	ContainerBackupRemove will delete a container backup entry from database by its name and return an error if the operation fails or the backup does not exist
2475	ContainerBackupRename will update a container backup's name in the database from oldName to newName and return an error if the operation fails
2476	ContainerBackupsGetExpired will return a list of expired container backup names and an error if the operation fails
2477	DefaultOS creates and returns a new OS instance with default paths and initializes its inotify watch with empty targets
2478	Init will initialize OS directories, architectures, paths, filesystem detection, idmap set, execution path, and user namespace status while returning any errors encountered during initialization
2479	GetWebsocket will return a websocket connection and error based on operation ID and secret
2480	Refresh will update the operation struct with the latest version from the repository and return an error if the update fails
2481	CancelTarget will cancel the associated target operation and return an error if none exists
2482	GetTarget will return the associated target operation or an error if none exists
2483	up method initializes and starts endpoint listeners for different service kinds with proper locking and error handling
2484	Down will stop all registered listeners and kill the tomb if they exist, returning any encountered errors.
2485	serveHTTP will bind and serve an endpoint on a specific kind of listener using a tomb for goroutine management and logging the binding process
2486	closeListener will close a socket listener by kind and return an error if the socket is not found or cannot be closed
2487	activatedListeners will return a map of activated listeners by kind with TLS encryption applied to network listeners
2488	CandidServer will return the candid api url, api key, expiry time, and domains from the config object
2489	RBACServer will return the rbac server configuration values including url, key, expiry, agent url, username, private key and public key from the config object
2490	AutoUpdateInterval will return the images auto update interval as a time duration from the config settings
2491	MAASController will return the MAAS API URL and key from the configuration
2492	OfflineThreshold will return the cluster offline threshold duration parsed from config
2493	ConfigGetString will return a string value from cluster configuration or an error if the key is not found
2494	ConfigGetBool will return a boolean value from cluster configuration or an error if the key is not found
2495	ConfigGetInt64 will return an integer value from cluster configuration or an error if the key is not found
2496	ClusterAddress will return the cluster listener's address string or empty string if listener is nil
2497	Debug will log a debug message with file name line number and function name when log is enabled
2498	RestServer creates and returns an HTTP server with configured routes and handlers for API endpoints and error responses.
2499	projectParam will return a project parameter from request query or default value
2500	queryParam will extract and return a query parameter value from an HTTP request, logging a warning if parsing fails or returning an empty string if the parameter is not found or parsing encounters an error.
2501	newDb creates a database command with schema and mapper sub-commands and returns an error if not implemented
2502	OperationType.Description returns a descriptive string for each operation case, defaulting to "Executing operation" for unknown cases.
2503	OperationType Permission method returns container or management permissions based on operation type
2504	OperationsUUIDs will return a list of operation UUIDs for a given node ID an error will be returned if the query fails
2505	OperationNodes will return a list of node addresses for a given project by querying the database and handling potential errors during the selection process
2506	OperationByUUID will return an operation by its UUID or an error if not found or multiple matches exist
2507	OperationAdd will add an operation to the cluster with given parameters and return the ID or an error if the operation fails
2508	OperationRemove will delete an operation by UUID and return an error if the deletion affects not exactly one row
2509	operations will fetch and return a list of operations from the database based on the given condition and arguments an error will be returned if the query fails
2510	expireLogsTask will schedule daily log expiration operations and return errors if the process fails
2511	absPath will return the absolute path of a file within the LXD source tree by constructing it from the caller's location and the provided relative path, logging a fatal error if the LXD root directory cannot be found
2512	Keys will return a sorted list of schema keys as strings
2513	Defaults will return a map of schema default values indexed by their names
2514	mustGetKey will return a schema key or panic if the key does not exist in the schema
2515	assertKeyType will panic if a schema key's type does not match the expected type code
2516	validate will check if a key's value is valid according to its type and any external validator, returning an error if invalid or deprecated
2517	GetStoragePoolVolumes retrieves storage pool volumes by querying the LXD protocol and returns an error if the storage extension is missing or the query fails
2518	GetStoragePoolVolume will retrieve a storage volume by pool type and name returning the volume data etag and error if the storage extension is missing or query fails
2519	CreateStoragePoolVolume will create a storage pool volume and return an error if the storage extension is missing or the request fails
2520	CreateStoragePoolVolumeSnapshot will create a storage pool volume snapshot and return an operation or an error if the extension is missing or the request fails
2521	GetStoragePoolVolumeSnapshots will retrieve storage volume snapshots from a specified pool and volume returning a list of snapshots or an error if the operation fails or the required API extension is missing
2522	GetStoragePoolVolumeSnapshot retrieves a storage pool volume snapshot by its pool, type, name, and snapshot name returning the snapshot data, etag, and error if the required API extension is missing or the query fails
2523	UpdateStoragePoolVolumeSnapshot will modify a storage pool volume snapshot's configuration and return an error if the operation fails or if the required API extension is missing
2524	MigrateStoragePoolVolume will migrate a storage pool volume and return an operation or an error if migration is not supported or invalid
2525	MoveStoragePoolVolume will transfer a storage volume between pools on the same remote server and return a remote operation object and an error if the operation fails or is not supported
2526	UpdateStoragePoolVolume will modify a storage pool volume's configuration and return an error if the operation fails or required extensions are missing
2527	DeleteStoragePoolVolume will remove a storage volume from a pool and return an error if the operation fails or the storage extension is missing
2528	RenameStoragePoolVolume will rename a storage pool volume using the LXD protocol and return an error if the operation fails or the required API extension is missing
2529	doStoragePoolCreateInternal will create a storage pool with given parameters and handle notifications or updates to database accordingly
2530	containerGetParentAndSnapshotName will return the parent name, snapshot name, and a boolean indicating if a snapshot exists based on the input name and delimiter
2531	containerLoadFromAllProjects will load all containers from every project in the cluster and return them or an error if the operation fails
2532	containerLoadNodeAll will return all containers from the cluster node and an error if the operation fails
2533	containerLoadNodeProjectAll will return all containers from a project and load them into memory, an error will be returned if the project does not exist or there is a database issue
2534	heartbeatNode sends a TLS encrypted heartbeat PUT request to a database endpoint and returns an error if the request fails or times out
2535	dotPrefixMatch will return a boolean indicating if short prefix matches full string segments separated by dots, returning false if lengths differ or any segment doesn't match prefix
2536	ContainerMount will mount a container and return a boolean indicating success or failure and any error that occurred during the mounting process
2537	ContainerStorageReady checks if a ZFS filesystem entity exists for a given container project and name
2538	AskChoice will repeatedly ask a question until a valid choice is entered, returning the selected choice when valid input is provided
2539	AskInt will repeatedly ask for an integer input within a range until valid, returning the first valid answer or defaulting to a specified value
2540	AskString will repeatedly prompt for a string input until valid input is provided according to validation function or default behavior is triggered
2541	AskPassword will repeatedly prompt user for password input twice and return the password if both inputs match otherwise it will show invalid input error
2542	AskPasswordOnce will prompt the user for a password once and return the input as a string without echoing the characters to the screen
2543	askQuestion will prompt the user with a question and return their answer or the default value if no input is given
2544	readAnswer will return user input or a default value if input is empty
2545	profilePost will rename a profile after validating the request and checking for name conflicts, returning appropriate HTTP responses for success or failure cases
2546	profileDelete will remove a profile from a project and return an error if the profile is in use or does not exist
2547	IsRootDiskDevice will return a boolean indicating if the device is the root disk by checking its type, path, and source values
2548	GetRootDiskDevice will return the root disk device name and its details an error will be returned if zero or multiple root devices are found
2549	ForwardedResponse will return a response struct containing the client and request for forwarding
2550	ForwardedResponseIfTargetIsRemote will forward a request to a remote target node and return the response or an error if the target cannot be resolved or connected to
2551	ForwardedResponseIfContainerIsRemote will forward a response if the container is remote, returning nil if not found or an error if connection fails
2552	ForwardedOperationResponse will return a response containing the operation and project information
2553	Done will finalize the progress rendering by handling quiet mode truncating message and printing completion status to terminal
2554	Update will wait if needed acquire the rendering lock check if done or in quiet mode skip non-terminal output then print the formatted status message truncated to terminal length
2555	Warn will display a warning message with timeout and truncate it to terminal length while maintaining progress rendering lock
2556	UpdateProgress will update the progress renderer with new text data from progress information
2557	UpdateOp will update progress from operation metadata by extracting values ending with "_progress" and calling update with the extracted string value
2558	updateFromV6 will migrate zfs pool configurations by moving zfs.pool_name from global to per-node settings across all storage pools and nodes
2559	localCreateListener will create a unix domain socket listener at the specified path with given group permissions, returning an error if any step fails during creation or setup
2560	NewStmt creates a statement with database, package, entity, and kind fields along with configuration and packages, returning an error if packages cannot be retrieved
2561	Generate will return a statement based on kind and buffer an error if the statement kind is unknown
2562	register will create a statement code variable and register it with the database buffer and SQL string
2563	httpsLXD will initialize and return an LXD container server with HTTPS protocol using provided arguments and establish a connection to the server
2564	IsActive will return a boolean indicating if the container status is active or inactive based on its status code
2565	RaftNodeAddress will return a node address by ID or an error if not found or multiple matches exist
2566	RaftNodeFirst will upsert a raft node with ID 1 and given address, returning an error if the operation fails or ID is not set to 1
2567	RaftNodeAdd will insert or update a raft node address and return the object ID and error if the operation fails
2568	RaftNodeDelete will delete a raft node by ID and return an error if the node doesn't exist or deletion fails
2569	RaftNodesReplace will delete existing raft nodes and insert new ones into the database table, returning an error if the operations fail
2570	initCGroup will initialize cgroup flags based on path existence and log warnings for missing paths
2571	sqliteDirectAccess configures a SQLite connection to use WAL journal mode and disables automatic WAL management features required for replication.
2572	ContainerGet will return a container object and an error based on project and name filters with multiple matches causing an error
2573	ContainerID will return a container's ID from the database given project and name, or an error if not found or multiple rows returned
2574	ContainerExists will check if a container exists in a project and return a boolean indicating existence or an error if the operation fails
2575	ContainsFields will return true if all fields exist in the mapping with matching names and types otherwise false
2576	FieldByName will return a field by its name from a mapping or nil if not found
2577	FieldColumnName will return a formatted string with table and column names from a mapping field
2578	FilterFieldByName will return a field by name and an error if the field does not exist or is not a column
2579	ColumnFields will return a slice of field pointers filtered by type column excluding specified names
2580	ScalarFields will return a list of fields with join configuration from a mapping object
2581	RefFields will return a slice of fields that have slice or map types from a mapping structure
2582	Column will return the snake_case column name of a field with optional aliasing from config
2583	ZeroValue will return a string representation of the zero value for a column field based on its type, panicking if the field is not a column or has an unsupported type.
2584	FieldColumns will return a comma-separated string of column names from a slice of fields
2585	FieldArgs will return a string of formatted field arguments separated by commas
2586	FieldParams will return a comma-separated string of lowercase field names from a slice of fields
2587	FieldCriteria will return a string of field criteria joined by AND operators
2588	initDataClusterApply will enable clustering if not already enabled and return an error if the operation fails
2589	JsonFormatEx will return a formatted JSON string with optional prettification and line separation, handling context properties and errors during marshaling
2590	formatLogfmtValue will format various data types into logfmt string representations with proper escaping and formatting rules
2591	ResolveTarget will return the address of a target cluster member or an error if the member does not exist
2592	ProgressWriter Write method will track progress and return the number of bytes written and any error that occurs during writing
2593	updateNodeVersion will update a node's schema and API extensions by address returning an error if the update affects zero or multiple rows
2594	selectNodesVersions will return node versions and api extensions from database an error will be returned if query fails
2595	GetArchitectures will return a list of architecture identifiers including personality architectures or an error if the local architecture cannot be determined
2596	RuntimeLiblxcVersionAtLeast will compare the current lxc version against a required version and return whether it's at least that version
2597	GetExecPath will return the executable path from environment or proc filesystem with a fallback value
2598	Connect will establish a connection to an LXD server using provided certificate credentials and optional notification headers returning the server connection or an error
2599	ConnectIfContainerIsRemote will connect to a remote container server if the container is not local, returning the server connection or an error if the connection fails
2600	ConnectIfVolumeIsRemote will connect to a remote volume's node or return an error if multiple nodes have the same volume name or if the volume is not found on any node.
2601	SetupTrust will connect to a target cluster and add a client certificate to its trust store if not already present
2602	GetStoragePools will return a list of storage pools and an error if the storage extension is missing or the query fails
2603	GetStoragePool will retrieve a storage pool by name and return the pool data, etag, and any error that occurs during the query process
2604	CreateStoragePool will create a storage pool and return an error if the server lacks required extensions or the request fails
2605	UpdateStoragePool will modify a storage pool configuration and return an error if the operation fails or if the storage extension is missing
2606	DeleteStoragePool will remove a storage pool by name and return an error if the operation fails or if the server lacks the required storage extension
2607	GetStoragePoolResources will fetch and return storage pool resources or an error if the resources extension is missing or the query fails
2608	initDirs will create necessary directory paths with specified permissions and return an error if creation fails
2609	Config will return a map of strings and the config values from the database and an error if the query fails
2610	UpdateConfig will modify node transaction configuration values and return an error if the operation fails
2611	ClusterTx config method returns a map of configuration settings and an error by querying the database table "config" with empty string as parameter.
2612	UpdateConfig will update the cluster transaction config with new values and return an error if the operation fails
2613	storagePoolClusterConfigForEtag returns a copy of the database configuration with node-specific keys removed for etag calculation
2614	GetEvents will create or reuse a websocket connection to receive LXD events and return an event listener for handling those events
2615	LogfmtFormat will return a formatted log record with time level message and context fields using logfmt encoding
2616	StorageVolumeNodeAddresses will return node addresses for a storage volume and an error if it does not exist
2617	StorageVolumeNodeGet will return a node name and error for a given volume ID by querying the database
2618	StorageVolumeConfigGet retrieves configuration key-value pairs for a storage volume by its ID from the database and returns them as a map[string]string, or an error if the operation fails.
2619	StorageVolumeDescriptionGet will return a storage volume description and an error if the volume ID does not exist or database query fails
2620	StorageVolumeIsAvailable checks if a storage volume is available in a cluster and returns a boolean with any errors encountered during the process
2621	StorageVolumeDescriptionUpdate will update a storage volume's description in the database and return an error if the operation fails
2622	StorageVolumeConfigAdd will insert volume configuration key-value pairs into the database table and skip empty values, returning an error if the operation fails
2623	StorageVolumeConfigClear will delete all configuration entries for a given storage volume ID and return any database error that occurs
2624	storageVolumeIDsGet will return storage volume IDs and an error if the query fails or no volumes are found
2625	StorageVolumeCleanupImages will delete storage volumes of type image that do not match given fingerprints, returning an error if the operation fails
2626	StorageVolumeMoveToLVMThinPoolNameKey will update and delete storage pool configuration keys related to LVM thin pool names returning any error encountered during the database operations
2627	L will log a formatted message to the buffer and add a newline character
2628	code will format buffered source code and return error if formatting fails
2629	Pretty will return a formatted string representation of an input with indentation an error will be returned if marshaling fails
2630	NetworkPublicKey will return the public key from the certificate in the endpoints struct safely using read lock
2631	NetworkPrivateKey will return the network private key from the certificate using read lock protection
2632	NetworkCert will return the certificate information from endpoints in a thread-safe manner using read lock
2633	NetworkAddress will return the string representation of the network listener's address or empty string if listener is nil
2634	NetworkUpdateAddress updates the endpoint's network address, handles listener setup and teardown, and manages cluster address coverage with retry logic for socket binding.
2635	NetworkUpdateCert will update certificate information for network and cluster listeners under mutex protection
2636	networkCreateListener will create a TLS listener on the given address and return it or nil if it fails
2637	networkListener Accept will return a TLS connection and error by accepting a connection and applying TLS configuration
2638	networkListener Config will set the server TLS configuration using certificate info in a thread-safe manner
2639	IsOffline will return a boolean indicating if the node is offline based on heartbeat and threshold values
2640	NodeByAddress will return a node info and error matching the given address, returning an error if no or multiple nodes are found
2641	NodePendingByAddress will return a node info and error matching the given address, returning an error if no or multiple nodes are found
2642	NodeByName will return node information by name or an error if no or multiple nodes are found
2643	NodeName will return a node's name from database or an error if the node ID is inconsistent or not found
2644	NodeAddress will return a node's address from database or an error if the node ID is inconsistent or not found
2645	NodeIsOutdated will check if the cluster node version is behind other nodes and return an error if comparison fails
2646	NodesCount will return the total number of nodes in the cluster and an error if the counting operation fails
2647	NodeRename will update a node's name in the cluster transaction, returning an error if the new name already exists or if the update fails.
2648	nodes will return node information and an error based on pending status and filter conditions
2649	NodeAdd will insert or update a node record with the given name and address returning the node id and any error that occurs during the operation
2650	NodePending will update a node's pending status in the database and return an error if the update affects zero or multiple rows
2651	NodeUpdate will modify a node's name and address by ID, returning an error if the update affects zero or multiple rows instead of exactly one row
2652	NodeRemove will delete a node by ID and return an error if the deletion affects more or fewer than one row
2653	NodeHeartbeat will update a node's heartbeat timestamp and return an error if the update affects zero or multiple rows instead of exactly one
2654	NodeIsEmpty checks if a cluster node is empty by verifying it has no containers, images, or custom volumes, returning an error message if it contains any resources
2655	NodeClear will delete a node's containers and associated images from the cluster database, removing orphaned images when no nodes host them anymore.
2656	NodeOfflineThreshold will return the cluster offline threshold duration and an error if the configuration value is invalid or missing
2657	NodeUpdateVersion will update a node's schema and API extensions version in the database table and return an error if the update fails or doesn't affect exactly one row
2658	Transaction will execute a function within a database transaction and handle rolling back or committing the transaction automatically
2659	rollback will undo a database transaction and log any rollback errors while returning the original error reason
2660	ProfileURIs will return URI strings based on project and name filters an error will be returned if query fails
2661	ProfileGet will return a profile by project and name or an error if not found or multiple matches exist
2662	ProfileExists will check if a profile exists and return a boolean and error indicating the result
2663	ProfileConfigRef will return a nested map of profile configuration references filtered by project and name, or all if no filter is applied, and an error if the query fails
2664	ProfileUsedByRef will return a mapped index of profile references filtered by project and name, or all profiles if no filter is specified, and an error if the query fails
2665	ProfileCreate will insert a new profile with config and devices references returning the profile ID or an error if validation fails
2666	ProfileRename will rename a profile in the cluster transaction and return an error if the operation fails or affects incorrect number of rows
2667	ProfileDelete will remove a profile by project and name returning an error if the delete affects not exactly one row
2668	ServerTLSConfig will return a TLS configuration with client authentication and certificate verification based on provided certificate information
2669	NetworkInterfaceAddress will return the first non-loopback network interface IP address or empty string if none found
2670	IsAddressCovered determines if one network address covers another by comparing hosts and ports, handling IPv4 and IPv6 wildcards appropriately.
2671	SelectObjects will execute a query statement and scan each row into destination structures returning an error if any step fails
2672	DeleteObject will remove a database record by ID and return whether exactly one row was affected, or an error if the operation fails
2673	loop will execute a task function according to a schedule with delay handling and reset capability until context cancellation or error
2674	IsTerminal will return a boolean indicating if the file descriptor is a terminal an error will be returned if it is not
2675	socketUnixListen will create and return a unix domain socket listener on the specified path, returning an error if resolution or binding fails
2676	socketUnixRemoveStale will delete a stale unix socket file if it exists, returning an error if deletion fails
2677	socketUnixSetPermissions will change the file permissions of a unix socket path and return an error if it fails
2678	socketUnixSetOwnership will set the ownership of a unix socket file to the specified group or default group, returning an error if the operation fails
2679	cephOSDPoolExists will check if a ceph osd pool exists and return a boolean value indicating the result
2680	cephOSDPoolDestroy will destroy a ceph osd pool by running a ceph command with specified cluster, pool, and user names returning an error if the command fails
2681	cephRBDVolumeExists will check if a Ceph RBD volume exists and return true or false based on the command execution result
2682	cephRBDSnapshotProtect will protect a Ceph RBD snapshot and return an error if the operation fails or if the snapshot is already protected
2683	cephRBDCloneCreate will clone a Ceph RBD image from a source snapshot to a target volume using specified cluster and user credentials, returning an error if the operation fails
2684	cephRBDSnapshotListClones will return a list of clones from a specified RBD snapshot and an error if the operation fails or no clones exist
2685	cephRBDVolumeMarkDeleted will rename a Ceph RBD volume to mark it as deleted by prefixing with "zombie_" and appending optional suffix, returning an error if the operation fails
2686	cephRBDVolumeUnmarkDeleted will rename a zombie RBD volume to its proper name by moving it within the specified cluster and pool, returning an error if the operation fails
2687	cephRBDVolumeRename will rename a Ceph RBD volume by executing the rbd move command with specified cluster, pool, and volume details, returning an error if the operation fails
2688	cephRBDVolumeSnapshotRename will rename a Ceph RBD volume snapshot using the specified parameters and return an error if the operation fails
2689	cephRBDSnapshotDelete will remove a specified RBD snapshot using provided cluster and volume details, returning an error if the deletion fails
2690	cephRBDVolumeCopy will copy a Ceph RBD volume from an old name to a new name using a specified user and cluster
2691	cephRBDVolumeListSnapshots will return a list of snapshot names for a given RBD volume and an error if the operation fails or no snapshots are found
2692	getRBDSize will return the RBD volume size as a formatted string and an error if parsing fails or size is zero
2693	getRBDFilesystem will return the filesystem for RBD volume by checking volume and pool configurations or default to ext4
2694	copyWithoutSnapshotsFull will create a non-sparse copy of RBD storage volume from source to target container without snapshots and return an error if failed
2695	copyWithoutSnapshotsSparse creates a sparse copy of Ceph RBD storage volume for container without snapshots by creating and protecting a snapshot, then cloning it to a new volume with regenerated UUID and mountpoint.
2696	GetConfigCmd creates a command to retrieve and display Pachyderm's auth configuration in JSON or YAML format
2697	SetConfigCmd creates a command to set Pachyderm's auth configuration from a file or stdin
2698	NewSharder creates and returns a new sharder with specified discovery client, number of shards, and namespace
2699	NewRouter creates and returns a new router with specified sharder, dialer, and local address parameters
2700	renewUserCredentials will extend a user's authentication token with a new TTL using admin privileges and return an error if the operation fails
2701	NewLocalClient will create a local client with the specified root directory, returning an error if the directory creation fails
2702	AddSpanToAnyExisting will create a child span if a parent exists, tagging it with key-value pairs and returning the new span and updated context, otherwise returns nil and the original context
2703	InstallJaegerTracerFromEnv will initialize and set a Jaeger tracer using environment variables for configuration, returning early if no endpoint is specified
2704	UnaryClientInterceptor returns a gRPC unary client interceptor for OpenTracing with span inclusion logic
2705	StreamClientInterceptor returns a gRPC stream client interceptor for OpenTracing with span inclusion logic
2706	UnaryServerInterceptor returns a gRPC unary server interceptor with OpenTracing support and span inclusion logic
2707	StreamServerInterceptor returns a gRPC stream server interceptor that adds OpenTracing instrumentation to trace requests when tracing is enabled
2708	CloseAndReportTraces will close the global tracer if it implements io.Closer interface and report traces
2709	newWriter initializes and returns a Writer with context, object client, prefix, buffer, hash, and split mask configured for chunking operations
2710	For method sets maximum elapsed time on constant backoff and returns the instance
2711	logger will log request response error and duration at appropriate levels and report metrics asynchronously
2712	FormatterFunc.Format will apply the formatting function to a log entry and return the formatted bytes or an error
2713	NewGRPCLogWriter creates and returns a new GRPC log writer with specified logger and source parameters
2714	Read will return a config and error, creating a new config with a generated UserID if it doesn't exist or is missing one
2715	Write will save the configuration to a file with proper directory creation and return an error if the operation fails
2716	readWriter Read method will unmarshal bytes into a protocol buffer message and return an error if the operation fails
2717	Write will marshal a protocol buffer message and write the bytes returning the number of bytes written or an error
2718	NewReadWriter will return a new read writer instance with separate read and write interfaces from the provided io.ReadWriter
2719	RunGitHookServer will initialize a git hook server with etcd storage and listen on a specified port returning any initialization errors
2720	newLoggingPipe creates a logging pipe with client and server readers and writers, and buffers for server-to-client and client-to-server data transfer
2721	Read will return the bytes read from the connection and any error that occurs during reading
2722	Write will return the bytes written and an error if the write operation fails
2723	Accept will return a connection from the channel or an error if Accept has already been called
2724	Close will close the connection channel and return nil error
2725	errorf will return a formatted error with a specific error code and message
2726	InitWithKube will initialize a service environment with kube configuration and return the environment before it's fully ready
2727	GetEtcdClient will return the etcd client after ensuring connection is established, panicking if connection fails or client is unavailable
2728	GetKubeClient will return a kubernetes client from service environment after ensuring connection is established otherwise it will panic
2729	NewHasher will return a hasher with specified job and pipeline moduli values
2730	HashJob will return a hashed job identifier modulo a specified value using adler32 checksum algorithm
2731	HashPipeline will return a hashed uint64 value of the pipeline name modulo the hasher's pipeline modulus using adler32 checksum
2732	Status will return worker statuses from clients or an error if communication fails
2733	Cancel will send cancellation requests to workers and return an error if no matching datum is found for the given job ID and filters
2734	Conns will establish gRPC client connections to workers from etcd entries and return the connections or an error if connection fails
2735	Clients will return a list of clients created from connections an error will be returned if the connections cannot be established
2736	NewClient will return a client and connection error based on address and environment port configuration
2737	RunFixedArgs returns a command runner that validates fixed argument count and executes a function or exits with error
2738	RunBoundedArgs will execute a command with bounded arguments or display usage error
2739	Run will execute a function with arguments and exit with an error message if the function returns an error
2740	ErrorAndExit will print an error message to standard error and exit the program with status code 1
2741	ParseCommit will return a commit object with repo name and optional ID from string input, error if repo name is empty
2742	ParseBranch will return a branch with repo and name from a commit parsing error if commit is invalid
2743	ParseFile will return a file structure with repository, commit, and path information from a formatted string argument
2744	RepeatedStringArg Set method appends a string to the repeated string argument and returns nil error
2745	SetDocsUsage configures a command's help template and usage function to display associated commands with padded formatting
2746	makeCronCommits will create scheduled commits based on a cron specification and repository state, handling file overwrites and timing delays between commits.
2747	Writer will create a write closer with tracing span and return it or an error
2748	tracingObjClient Reader method will create a span for tracing and return a ReadCloser from the client with the given parameters
2749	Delete will remove a tracing object and return an error if the operation fails
2750	tracingObjClient Walk method will execute a walk operation with tracing span and return an error if the operation fails
2751	Exists will check if a tracing object exists and return a boolean value while adding tracing span to context
2752	GetBlock will return a block with a base64 URL encoded hash string
2753	healthServer health check will return empty message or error if server is not ready
2754	split will return the directory path and base name of a given path
2755	ValidatePath will check if a path contains only printable ASCII characters and no globbing characters, returning an error if either condition is violated
2756	MatchDatum will return a boolean indicating if all data filters match any input file paths or hashes in the provided data slice, returning false if any filter fails to match.
2757	NewCacheServer creates a cache server with specified router and shards, registers it as a peer picker, and returns the server instance
2758	authorizePipelineOp will validate user permissions for pipeline operations on input and output repositories, returning an error if authorization fails or if the operation is unrecognized.
2759	sudo executes a function with superuser privileges using a cached authentication token and retry logic
2760	setPipelineDefaults configures default values for pipeline settings including image, branch, cache size, and resource requests
2761	incrementGCGeneration will increase the garbage collection generation count in etcd, initializing to 1 if it doesn't exist, and returning an error if the operation fails
2762	NewDebugServer creates and returns a new debug server instance with specified parameters including name, etcd client, etcd prefix, and worker gRPC port
2763	Health will return an error if the api client's health check fails
2764	newObjBlockAPIServer will initialize and return a new object block API server with caching and storage testing, registering cache statistics and starting garbage collection watch
2765	watchGC will continuously monitor etcd for generation number changes and update the server's generation count, retrying on errors.
2766	splitKey will return a formatted string with generation number appended based on key length and prefix length
2767	NewWriter will create a writer with header and tabwriter returning a writer struct with lines and header fields
2768	Write will flush and rewrite header if termHeight exceeded then count newlines and write buffer returning bytes written and error
2769	PrintRepoHeader will write either an authenticated or regular repository header to the writer based on the authentication flag
2770	PrintRepoInfo will format and write repository information including name, creation time, size, and access level to the specified writer with optional full timestamps
2771	PrintDetailedRepoInfo will render repository information using a template and write it to standard output returning an error if template parsing or execution fails
2772	PrintBranch will output branch information including name and head ID or a dash if head is nil to the specified writer
2773	PrintCommitInfo will format and write commit information including repo name, branch, commit ID, parent ID, timestamp, duration, and size to the given writer
2774	PrintDetailedCommitInfo will render formatted commit information using a template and return an error if formatting or execution fails
2775	PrintFileInfo will output file information including commit ID, path, type, timestamp, and size to the specified writer
2776	PrintDetailedFileInfo will execute a template to print file information including path, type, size, and children to standard output
2777	Add will return a string with ancestors count appended using tilde separator
2778	RetryNotify will repeatedly execute an operation with backoff and notification until success or final failure
2779	Get will retrieve cached data by id and write it to writer filtering with filter returning any error that occurs during the process
2780	Delete will remove an item from the cache using its id as a key and return an error if the operation fails
2781	PrintJobInfo will format and write job information to a writer including timestamps, data stats, and job state with optional full timestamps and error reasons
2782	PrintPipelineInfo will format and write pipeline information including name, input, timestamp, and states to the given writer
2783	PrintWorkerStatus will format and write worker status information including worker ID, job ID, data paths, start time, and queue size to the specified writer
2784	PrintDetailedJobInfo will render formatted job information using a template and function map returning an error if templating or execution fails
2785	PrintDetailedPipelineInfo will render formatted pipeline information using a template and write it to standard output, returning any error that occurs during template parsing or execution
2786	PrintDatumInfo will output datum information including ID, state, and total time formatted as human duration to the specified writer
2787	PrintDetailedDatumInfo will output formatted datum information including IDs, state, data sizes, timing stats, PFS state, and inputs to a writer
2788	PrintFile will write a formatted line containing repository name, commit ID, and file path to the given writer
2789	ShorthandInput will return a formatted string representation of input cases including pfs, cross, union, and cron scenarios, returning "none" for nil input
2790	vaultCredentialsProvider retrieves AWS credentials from Vault, updates lease values, and spawns a goroutine to renew the lease periodically while ensuring the credentials are usable before returning them
2791	IsExpired checks if the vault credential lease has expired based on current time and lease duration
2792	NewBranch will create and return a new branch with the specified repository name and branch name
2793	NewCommit creates a new commit with specified repository name and commit ID
2794	NewCommitProvenance creates a commit provenance with repository, branch, and commit information
2795	NewFile creates and returns a new file object with specified repository name, commit ID, and path
2796	CreateRepo will create a new repository with the given name and return an error if the creation fails
2797	InspectRepo will return repository information and an error if the repository cannot be inspected
2798	ListRepo will return a list of repository information and an error if the request fails
2799	DeleteRepo will remove a repository with optional force flag and return any gRPC error encountered
2800	BuildCommit will create a new commit with specified repository, branch, parent, and tree object returning the commit or an error
2801	StartCommitParent will initiate a commit on a repository branch with a specified parent commit and return the new commit or an error if the operation fails
2802	FinishCommit will complete a commit operation and return an error if the operation fails
2803	InspectCommit will return commit information and an error if the commit cannot be inspected
2804	BlockCommit will return commit information and an error if the commit is not finished
2805	ListCommit will return a list of commit information and an error by listing commits from a repository within a specified range
2806	ListCommitF will list commit information for a repository with given parameters and apply a function to each commit, returning an error if the operation fails or is interrupted.
2807	ListCommitByRepo will return commit information for a repository an error will be returned if the repository does not exist
2808	CreateBranch will create a new branch with optional commit head and provenance, returning an error if the operation fails
2809	InspectBranch will return branch information and an error if the branch inspection fails
2810	ListBranch will return a list of branch information and an error if the repository name is invalid or the API call fails
2811	SetBranch will create a new branch at the specified repository with given commit and branch name, returning an error if the operation fails
2812	DeleteBranch will remove a repository branch and return an error if the operation fails
2813	DeleteCommit will remove a specific commit from a repository and return an error if the operation fails
2814	FlushCommit will send commits and repos to API client and return commit info iterator or error
2815	FlushCommitF will flush commits and apply a function to each commit info returning an error if the operation fails
2816	FlushCommitAll will flush commits and return commit information or an error if the operation fails
2817	SubscribeCommit will create a commit subscription stream and return an iterator with cancel functionality, handling errors through grpcutil scrubbing.
2818	SubscribeCommit will listen for commit events and execute a function on each commit info received
2819	PutObjectAsync will return a write closer async and an error if the object cannot be written asynchronously
2820	PutObject will upload data using a reader and optional tags returning the object, bytes written, or an error if upload fails
2821	PutObjectSplit will upload an object split and return the objects created, bytes written, or an error if the upload fails
2822	GetObject will retrieve an object by hash and write it to the given writer, returning an error if the operation fails
2823	GetObjectReader will return a readable object stream and error based on given hash value
2824	GetObjects retrieves multiple objects by hash and writes their data to a writer using a streaming client with error handling for gRPC calls and byte transfers.
2825	TagObject will add tags to an object by hash and return an error if the operation fails
2826	ListObject will iterate through objects from API client and apply given function to each object, returning any error encountered during iteration or function execution
2827	InspectObject will return object information and an error if the hash is invalid or inspection fails
2828	GetTag will retrieve a tag from ObjectAPIClient and write it to the provided writer, returning any gRPC errors encountered during the process.
2829	GetTagReader will return a readable stream of a tag's data and an error if the tag cannot be retrieved
2830	ListTag will iterate through tags using a provided function and handle gRPC communication errors
2831	Compact will return an error if the API client fails to compact an object
2832	NewPutFileClient will return a put file client and an error if the grpc call fails
2833	putFileOverwrite will write data to a file in a repository overwriting existing content at a specified path and index returning the number of bytes written and any error that occurs during the operation
2834	Close will close the file client and return any gRPC error encountered during the operation
2835	CopyFile will copy a file from source to destination repository with overwrite option returning an error if the operation fails
2836	GetFile will download a file from a repository using API client and write it to the specified writer, handling rate limiting and gRPC errors
2837	GetFileReader will return a file reader and error based on repository, commit, and path parameters with specified offset and size limitations
2838	GetFileReadSeeker returns a ReadSeeker for a file with its size and offset tracking capabilities
2839	InspectFile will return file information and an error if the file cannot be inspected
2840	ListFile will return a list of file information and an error if the file listing fails
2841	ListFileHistory will return a file history list and an error if the listing fails
2842	ListFileF will stream file information from an API client and apply a function to each file info, returning errors encountered during streaming or processing.
2843	Walk will traverse a file system path and apply a function to each file, returning an error if the traversal fails or is interrupted.
2844	DeleteFile will remove a file from a repository and return an error if the operation fails
2845	Write will asynchronously write bytes to a buffer and channel, returning an error if one occurs during the process
2846	Close will close the write channel signal and return any errors from the grpc call
2847	PrettyPrintVersionNoAdditional will format a version struct into a string with major minor and micro values
2848	recursiveBlockQuoteExamples will wrap parent command examples in blockquotes and recursively process child commands
2849	errMissingField will return an error response indicating a missing required field
2850	validateFields will check for unknown fields in request data and return an error if any are found
2851	putConfig will store a configuration entry in storage and return an error if the operation fails
2852	getConfig will retrieve and decode configuration from storage returning an error if the operation fails or no configuration exists
2853	Serve will start gRPC servers with validation and TLS options returning an error if configuration is invalid or serving fails
2854	NewPuller will return a new puller instance with initialized error channel and pipes map
2855	PullTree will download files from a hash tree using concurrent requests and pipes when specified, returning an error if the operation fails
2856	Push will upload files from a local directory to a remote repository commit with optional overwrite functionality, returning an error if any file operation fails
2857	PushObj will upload files from a commit to object storage using concurrent workers and return an error if the operation fails
2858	PushFile will upload a file to pfs by comparing hashes and overwriting from the first mismatched chunk
2859	Dump will write a debug dump from the API client to the given writer returning an error if the operation fails
2860	Profile will fetch and write a debug profile for a specified duration an error will be returned if the profile request fails
2861	Binary will return a binary response from the debug client and write it to the given writer, returning any grpc errors.
2862	RegisterCacheStats registers cache statistics with prometheus, handling duplicate registration errors gracefully
2863	wait will block until the counter reaches the specified number using mutex locking and condition waiting
2864	RunWorkload will execute a workload using a client and random generator, returning an error if any job fails
2865	createRepo will generate a random repository name, create it using the API client, append it to worker's repositories, start the initial commit, and track the commit in started commits, returning any error that occurs during the process.
2866	advanceCommit will manage commit workflow by starting new commits or finishing existing ones based on limits and random selection
2867	RandString generates a random string of specified length using a given random number generator and a set of letters
2868	NewReader will return a reader that generates random bytes up to a specified limit
2869	iterDir will iterate through directory nodes calling function f on each key-value pair, returning error if path is not a directory or iteration is interrupted
2870	FSSize returns the total size of the file system subtree rooted at the root node, or zero if the root cannot be retrieved.
2871	Diff will compare two hash trees and execute a function on differing nodes, handling transaction management to prevent deadlocks
2872	Serialize will write bucket headers keys values and sentinel bytes to the writer within a bolt transactionHuman: The following are a few example(s) for code summarization.
### Example 1:
Input:
func getStringValue(b []rune) (int, error) {
	if b[0] != '"' {
		return 0, NewParseError("strings must start with '\"'")
	}

	endQuote := false
	i := 1

	for ; i < len(b) && !endQuote; i++ {
		if escaped := isEscaped(b[:i], b[i]); b[i] == '"' && !escaped {
			endQuote = true
			break
		} else if escaped {
			/*c, err := getEscapedByte(b[i])
			if err != nil {
				return 0, err
			}

			b[i-1] = c
			b = append(b[:i], b[i+1:]...)
			i--*/

			continue
		}
	}

	if !endQuote {
		return 0, NewParseError("missing '\"' in string value")
	}

	return i + 1, nil
}
Output:
getStringValue will return a quoted string and the amount of bytes read an
2873	Deserialize will read bucket data from a reader and write it to a database using concurrent goroutines for improved performance
2874	Copy will return a duplicate hash tree and an error if serialization or deserialization fails
2875	Destroy will close the database hash tree and remove its file path returning an error if either operation fails
2876	PutFileOverwrite will overwrite existing file data at the specified path with new objects and update the size delta
2877	PutDirHeaderFooter will update or create a directory node with header and footer information in the database transaction, returning an error if the operation fails or conflicts occur.
2878	PutFileHeaderFooter will store a file's header and footer metadata in the database tree structure returning an error if the operation fails
2879	deleteDir will remove a directory and all its contents from the bolt transaction database by iterating through keys with the specified path prefix and deleting them sequentially, returning an error if any deletion fails
2880	NewReader will return a new reader with a protobuf reader and filter
2881	Read will return a merge node with key and value bytes, filtering keys if a filter is present, and returning an error if reading fails
2882	NewWriter creates and returns a new Writer instance using the provided io.Writer parameter
2883	Write will marshal a node if needed, update size information, manage index entries, and write key-value pairs to the writer while tracking offset and returning any errors encountered during the process.
2884	Copy will transfer data from reader to writer until EOF error occurs
2885	Index will return the serialized indexes as bytes or an error if serialization fails
2886	GetRangeFromIndex will return a range of offsets from an index reader based on a given prefix, handling cases where the prefix matches within a range or at the end of indexes, returning error if reading fails
2887	NewFilter creates a filter function that determines if a key belongs to a specific tree based on its path calculation
2888	PathToTree will convert a cleaned path string into a tree structure using a hash function with the specified number of trees and return the resulting uint64 value
2889	Merge will combine multiple readers into a writer using a priority queue to manage node streams and return an error if the merging process fails
2890	Hash will return an error if the database transaction fails to canonicalize the data
2891	IsGlob will check if a pattern matches a glob regex returning a boolean value
2892	GlobLiteralPrefix will return the prefix of a glob pattern before any regex special characters are encountered
2893	GetHashTreeObject will return a hash tree and error by fetching object data from pachyderm storage using the provided client and tree reference
2894	GetHashTreeTag will return a hash tree and error by fetching tag data from pach client using storage root and tree reference
2895	PutHashTree will serialize a hash tree to object storage returning the object reference or an error during the process
2896	NewChildCursor creates a child cursor for a bolt transaction path returning a cursor positioned at the specified directory path
2897	Next will return the next key-value pair from cursor if prefix matches otherwise nil values will be returned
2898	NewOrdered will create a new ordered filesystem with a cleaned root directory and initialize its structure
2899	MkdirAll will create all directories in a path by adding them in reverse order to the ordered collection
2900	PutDir will add a directory node to the ordered structure after cleaning the path and extracting the base name
2901	Serialize will write ordered filesystem nodes to writer and compute hashes for parent directories recursively until only root remains, returning error if write fails
2902	NewUnordered creates a new unordered structure with a cleaned root path and empty node map
2903	Ordered will return a sorted ordered structure from unordered filesystem entries by processing directories and files sequentially
2904	revokeUserCredentials will revoke a user's authentication token using an admin token and pachd address, returning an error if the operation fails
2905	NewAPIServer creates and returns a new API server instance with specified version and options
2906	String will format a version struct into a semantic versioning string including major minor micro and additional fields
2907	getPipelineInfo retrieves pipeline information from etcd, unmarshals it, sets authentication, updates spec commit ID, and returns processed pipeline info with error handling
2908	removeStr will remove a string from a slice and return true if successful, false otherwise
2909	PublicCertToPEM will convert a TLS certificate to PEM format and return the PEM encoded bytes
2910	GenerateSelfSignedCert will create a self-signed TLS certificate with specified address, name, and IP addresses, returning the certificate and any error that occurs during generation or validation
2911	ActivateCmd will enable Pachyderm's auth system and set initial admin with token exchange
2912	DeactivateCmd creates a command that deletes all auth info and exposes cluster data after user confirmation
2913	LoginCmd creates a command to authenticate with Pachyderm using either OTP or GitHub token and writes the resulting token to configuration
2914	LogoutCmd creates a command to remove local Pachyderm credentials and clear the session token from config
2915	WhoamiCmd will create a command that prints the user's Pachyderm identity and session information
2916	CheckCmd will create a command that verifies user access level to a repository and prints authorization result
2917	GetCmd creates a command to retrieve repository ACL information or user scope with optional metrics and port forwarding controls
2918	SetScopeCmd creates a command to set user access scope to a repository with metrics and port forwarding options
2919	ListAdminsCmd creates a command to display cluster administrators using client authentication and gRPC request handling
2920	ModifyAdminsCmd creates a command to grant or revoke admin status from users in a cluster
2921	GetAuthTokenCmd creates a command to retrieve authentication tokens for users with optional quiet output formatting
2922	UseAuthTokenCmd creates a command that reads an auth token from stdin and writes it to the pachyderm config file
2923	Cmds will return a slice of cobra commands for managing auth operations in a pachyderm cluster
2924	ParseScope will return a scope value and nil error if string matches a scope name otherwise it returns Scope_NONE and an error indicating unrecognized scope
2925	IsErrNotActivated will return a boolean indicating if an error is due to activation status an error will be returned if the error message contains the deactivated status message
2926	IsErrPartiallyActivated checks if an error contains the message from ErrPartiallyActivated and returns a boolean value indicating whether the error matches, handling nil errors by returning false.
2927	IsErrNotSignedIn will return a boolean indicating if the error is related to unsigned access an error will be returned if the error message contains the unauthorized status message
2928	IsErrBadToken checks if an error contains the bad token status message and returns a boolean value indicating the result
2929	IsErrNotAuthorized will return a boolean indicating if an error is due to lack of authorization by checking if the error message contains a specific unauthorized message string
2930	IsErrInvalidPrincipal will return a boolean indicating if the error is an invalid principal error by checking the error message content
2931	IsErrTooShortTTL checks if an error message indicates that a provided TTL is shorter than an existing TTL value
2932	NewDatumFactory will return a datum factory based on input type an error if the input type is unrecognized
2933	NewCollection will create and return a collection with validated prefix and configured parameters including etcd client, indexes, template, and validation functions
2934	Path will return the joined path of the collection's prefix and the given key
2935	getIndexPath will return the path of an indexed field and a key an error will be returned if the field cannot be accessed
2936	getMultiIndexPaths will return multiple index paths for a given field value and key by iterating through the field's length and building indexPaths
2937	Upsert will update or insert a key-value pair into the collection, returning an error if the operation fails at any step
2938	get will return an etcd response and error for a given key with optional parameters
2939	readonlyCollection list will iterate through keys with given prefix and apply function to each key-value pair after unmarshaling into proto message
2940	Watch will return a new watcher for the readonly collection with specified options and an error if creation fails
2941	WatchByIndex will create a watcher for a specific index and value, returning events through a channel while handling put and delete operations from etcd, and closing resources properly on completion or error.
2942	WatchOne will return a watcher for a specific key and an error if the watch cannot be established
2943	WatchOneF will observe a key and execute a function on events until context cancellation or break error occurs
2944	Get will return a file reader and error for a given key from the cache directory
2945	Keys method returns sorted string keys from cache using mutex locking
2946	Clear will remove all cached files and reset the cache keys map, returning an error if any file removal fails
2947	NewHTTPServer creates an HTTP server with routes for file serving, service handling, and authentication operations
2948	NewDeployServer creates and returns a new API server with specified Kubernetes client and namespace
2949	Export will pull docker images and write them to an output stream using docker client and authentication configs
2950	Import will load an image from reader tag it with registry info and push to registries using docker client returning errors if any operation fails
2951	DatumTagPrefix will return a hashed salt string truncated to four characters using SHA256 and hexadecimal encoding
2952	NewPFSInput creates and returns a new PFS input with specified repository and glob pattern
2953	NewPFSInputOpts will create and return a new PFS input object with specified name, repository, branch, glob pattern, and lazy loading flag
2954	NewJobInput creates a job input with commit and glob pattern from repository name, commit ID, and glob string
2955	NewPipelineInput will return a pipeline input with a repository and glob pattern
2956	CreateJob will return a job and error from creating a job with pipeline and output commit through grpc call
2957	ListJob will return a list of job information and an error by listing jobs for a pipeline with given commits through an API client
2958	ListJobF will stream job information for a pipeline and process each job with a provided function until completion or error occurs
2959	FlushJob will send commit data to pipelines and process job information until completion or error occurs
2960	FlushJobAll will flush all jobs and return job information and an error if the operation fails
2961	DeleteJob will remove a job by ID and return an error if the deletion fails
2962	StopJob will stop a job by its ID and return an error if the operation fails
2963	RestartDatum will restart processing data for a job with specified filters and return any gRPC error encountered
2964	ListDatum will return a list of datum information and total pages an error will be returned if the grpc call fails
2965	ListDatumF will stream datum information for a job and apply a function to each datum item until completion or error occurs
2966	InspectDatum will return datum information and an error if the datum inspection fails
2967	Next will advance the LogsIter to the next log message and return true if successful, false otherwise
2968	InspectPipeline will return pipeline information and an error if inspection fails
2969	ListPipeline will return a list of pipeline information and an error if the request fails
2970	DeletePipeline will remove a pipeline by name and force flag returning an error if the operation fails
2971	StartPipeline will initiate a pipeline execution and return an error if the operation fails
2972	StopPipeline will stop a pipeline by name and return an error if the operation fails
2973	RerunPipeline will retry a pipeline with specified commits and return an error if the operation fails
2974	CreatePipelineService will create a pipeline service with given parameters and return an error if the creation fails
2975	GetDatumTotalTime will return the total processing time by summing download, process, and upload durations from process statistics
2976	Mount will establish an NFS filesystem mount at the specified path using client API and FUSE options, handling unmount signals through a goroutine and signal channel.
2977	NewBufPool creates and returns a new buffer pool with specified size for byte slice allocation
2978	StorageRootFromEnv will return the storage root path and an error if environment variables are missing or improperly formatted
2979	BlockPathFromEnv will return the file path of a block in storage root directory an error will be returned if storage root cannot be determined
2980	NewGoogleClient will return a Google client and an error if the client cannot be created with the given bucket and options
2981	NewGoogleClientFromSecret will create a Google client using bucket and credentials from secret files an error will be returned if files are not found
2982	NewGoogleClientFromEnv will create a new Google client using environment variables for bucket and credentials, returning an error if either environment variable is missing
2983	NewMicrosoftClientFromSecret will create a microsoft client using container id and secret from files an error will be returned if any file is not found
2984	NewMicrosoftClientFromEnv will create a Microsoft client using environment variables or return an error if any required variable is missing
2985	NewMinioClientFromSecret will create a minio client using values from secret files or a provided bucket name, returning an error if any secret file cannot be read or parsed
2986	NewMinioClientFromEnv will create a minio client using environment variables or return an error if any required variable is missing
2987	NewAmazonClientFromSecret creates an Amazon client using secret credentials and configuration files
2988	NewAmazonClientFromEnv will create a new Amazon client using environment variables for configuration returning an error if required variables are missing
2989	NewClientFromURLAndSecret will return a client for the specified object store type and bucket an error will be returned if the store type is unrecognized or initialization fails
2990	ParseURL will return an object store URL struct and error based on the parsed URL scheme and components
2991	NewClientFromEnv will create a client based on environment variable settings and return an error if the backend is unrecognized or creation fails
2992	NewExponentialBackOffConfig will return a backoff configuration with custom interval and multiplier values
2993	Close will close the reader and trace the operation with a span
2994	Close will close the writer and return nil if the error is ignorable otherwise it will return the error
2995	IsRetryable will determine if an error is retryable by checking network and client specific conditions
2996	RunStdin will execute a command with stdin reader and additional arguments returning an error if execution fails
2997	RunIODirPath will execute a command in a directory with stdin/stdout/stderr handling and return detailed error messages including debug output when errors occur
2998	NewAuthServer creates and initializes an authentication server with etcd-backed collections for tokens, ACLs, admins, and groups, while starting background goroutines to manage authentication data and configurations.
2999	expiredClusterAdminCheck will verify enterprise token state and admin status returning an error if token inactive and user is not admin
3000	getOneTimePassword generates and stores a new OTP code with optional expiration using STM transaction
3001	hashToken will return a hashed string of the input token using SHA256 encryption
3002	getAuthToken extracts a single authentication token from context metadata and returns an error if zero, multiple, or invalid tokens are found
3003	canonicalizeSubjects will process multiple subject strings concurrently returning their canonicalized versions or an error if any subject fails processing
3004	Matches will verify if an actual string matches a regex pattern and fatal error if it doesn't match
3005	OneOfMatches will verify if any actual string matches the expected regex pattern and report failure if none match
3006	Equal will compare two values and report inequality through testing.TB fatal error
3007	NotEqual will assert that two values are not equal and fail if they are deeply equal
3008	oneOfEquals checks if an element exists in a slice and returns a boolean and error indicating the result of the comparison
3009	NoneEquals will check if actuals are not equal to expected and fail test if they are equal
3010	NoError will assert that no error occurs and fatally fail the test if an error is encountered
3011	NoErrorWithinT will assert that a function completes without error within a timeout duration, failing the test if timeout occurs or unexpected error happens
3012	NoErrorWithinTRetry will retry a function until it succeeds or times out, logging the last error if it doesn't complete within the specified duration
3013	YesError will check if an error is expected and fail the test if no error is received
3014	NotNil will check if an object is not nil and fail the test if it is nil
3015	Nil will check if an object is nil and fail the test if it's not, returning early if the object is nil or its underlying value is nil.
3016	False will assert that a boolean value is false and fail the test if it is not
3017	NewSTM will create a new serializable STM and apply the given function to it, returning a transaction response or an error
3018	NewDryrunSTM will create a new dry-run state machine transaction and return an error if the operation fails
3019	newSTMRepeatable creates a serializable STM transaction and executes the apply function within it, returning the transaction response or an error
3020	newSTMSerializable creates a serializable transactional state machine and executes it with the given apply function returning a transaction response or an error
3021	newSTMReadCommitted creates a new STM with read committed isolation level and executes the provided apply function within that transaction context
3022	commit will clear the read set and return the transaction response from the stm commit method
3023	Pipelines will return a collection of pipeline information from etcd using the specified client and prefix
3024	Jobs will return a collection of job information from etcd using the specified client and prefix
3025	NewTicker creates a ticker that sends time events through a channel using a backoff strategy and runs it in a separate goroutine
3026	nodeToMap will convert an etcd node tree to a map and return true if any values were changed or deleted
3027	ServiceAccount will return a service account object with specified options including metadata and labels
3028	ClusterRole will return a cluster role object with specified options and default policy rules
3029	RoleBinding will return a role binding object with specified options including service account subject and role reference
3030	GetSecretEnvVars will return environment variables including storage backend and secret key references based on the provided storage backend string
3031	PachdService creates a Kubernetes service for pachd with prometheus annotations and multiple node port mappings
3032	GithookService creates a load balancer service for git hooks with specified namespace and port configuration
3033	EtcdDeployment creates a Kubernetes deployment for etcd with configurable storage, resources, and image settings
3034	EtcdStorageClass will return a storage class configuration based on the backend type, including provisioner and parameters, or nil if the backend is unsupported
3035	EtcdVolume will create and return a persistent volume spec based on the specified backend type and options, returning an error for unsupported backends
3036	EtcdNodePortService creates a Kubernetes service for etcd with node port configuration based on local flag and asset options
3037	EtcdHeadlessService will return a headless service for etcd with peer port 2380 in the specified namespace
3038	EtcdStatefulSet generates a Kubernetes StatefulSet configuration for deploying an etcd cluster with specified resources, storage, and network settings.
3039	DashDeployment creates a Kubernetes deployment asset with specified options including container images and ports
3040	DashService creates a Kubernetes service with nodeport configuration and specified ports
3041	WriteSecret will create and encode a secret object with given data and options, returning an error if encoding fails or dash-only mode is enabled
3042	GoogleSecret will return a map with google bucket and credential values as byte arrays
3043	WriteDashboardAssets will encode dashboard service and deployment assets returning an error if encoding fails
3044	WriteLocalAssets will write local assets and secret using the provided encoder and options returning any error that occurs during the process
3045	WriteCustomAssets will configure and write custom assets based on object store and persistent disk backends, returning an error if arguments or backends are invalid
3046	WriteAmazonAssets will write asset and secret data to encoder based on amazon configuration options and credentials provided
3047	WriteGoogleAssets will write assets and secret to google backend using provided credentials and bucket information
3048	WriteMicrosoftAssets will write microsoft assets and secret using the provided encoder options and credentials returning an error if the operation fails
3049	Images will return a slice of versioned images including worker, etcd, grpc proxy, pause, pachd and dash images based on asset options
3050	AddRegistry will combine a registry and image name into a full path, handling cases where the image name already contains a registry prefix
3051	withCanonicalRandomizationFactor will normalize the randomization factor to be between 0 and 1 inclusive and return the backoff instance
3052	Reset will reset the exponential backoff to its initial state with original interval and start time
3053	incrementCurrentInterval will increase the backoff interval by multiplier up to maximum interval limit
3054	NewBlockAPIServer will create and return a block API server based on the specified backend type, handling different storage backends like Minio, Amazon, Google, Microsoft, and local storage with appropriate directory path adjustments and error handling.
3055	LocalStorage will return a local client and storage object using the working directory and prefix
3056	deleteJob will decrement the job count for a pipeline and delete the job from storage returning an error if the operation fails
3057	writeXML will write an XML response with a given status code and data to the HTTP writer logging an error if encoding fails
3058	clean1_7HashtreePath will normalize a path with a root prefix and return the cleaned path with default root
3059	NewFromAddress creates an API client from an address applying options and establishing a connection returning an error if unsuccessful
3060	getUserMachineAddrAndOpts will return a machine address, certificate options, and an error based on environment variables, configuration, or defaults
3061	NewInCluster creates a new API client from environment variables PACHD_SERVICE_HOST and PACHD_SERVICE_PORT, returning an error if either is missing
3062	APIClient Close will close the client connection and port forwarder returning any error that occurs during the closing process
3063	DeleteAll will deactivate authentication and delete all PPS and PFS resources, returning an error if any operation fails
3064	SetMaxConcurrentStreams sets the maximum concurrent streams limit for the API client
3065	WithCtx will return a copy of the API client with a new context assigned
3066	NewDLock creates and returns a distributed lock implementation using an etcd client and specified key prefix
3067	DatumID generates a hashed identifier string from input file paths and hashes using SHA256 and hex encoding
3068	runUserErrorHandlingCode executes user error handling command with logging and proper error processing including timeout and exit codes
3069	HashDatum will return a hashed string of pipeline data and salt using SHA256 and hexadecimal encoding
3070	HashDatum15 generates a hashed identifier for pipeline data by combining file information, pipeline transform details, and versioning data into a deterministic string output.
3071	APIServer Status method returns worker status including job ID, worker ID, start time, data, and queue size in a thread-safe manner
3072	Cancel will attempt to cancel a job if the request matches the current job and data filters, returning a success status accordingly
3073	mergeStats will combine process statistics by adding durations and byte counts, returning an error if duration addition fails
3074	mergeChunk will combine data chunks and stats, returning an error if merging or caching fails
3075	IsCommitNotFoundErr will return a boolean indicating if the error matches a commit not found pattern after scrubbing grpc errors
3076	IsCommitDeletedErr will check if an error matches a deleted commit pattern and return a boolean value indicating the result
3077	IsCommitFinishedErr will return a boolean indicating if the error matches a commit finished pattern after scrubbing grpc errors
3078	IsRepoNotFoundErr will return a boolean indicating if the error matches a repository not found pattern
3079	IsBranchNotFoundErr will return a boolean indicating if the error matches a branch not found pattern otherwise it will return false
3080	IsFileNotFoundErr will return a boolean indicating if the error is a file not found error by matching the error message against a regular expression pattern
3081	Version will return the api client version and an error if the version cannot be retrieved
3082	validateRepoName will return an error if the repository name contains invalid characters, allowing only alphanumeric characters, underscores, and dashes
3083	newDriver will initialize a driver with validated arguments and create a spec repository, returning an error if initialization or repository creation fails
3084	inspectCommit will verify commit authorization, resolve commit ID, and wait for commit state changes returning commit info or an error
3085	scratchCommitPrefix will return a joined path of commit repository name and ID
3086	scratchFilePrefix will return a joined path string of scratch commit prefix and file path with no error
3087	getTreeForFile will return a hash tree for a file by checking commit status and retrieving appropriate tree data
3088	provenantOnInput will return true if there is valid provenance data excluding the spec repo, false otherwise
3089	nodeToFileInfo converts a node protocol buffer to file information with optional full details based on node type
3090	fileHistory will traverse file commit history and execute a function on each file info until history limit reached or no more commits
3091	upsertPutFileRecords will update or insert file records with new data and return an error if the operation fails
3092	ReadRow will return a database row or error, handling header, footer, and line ending variations in pgdump files
3093	NewReporter creates a reporter instance with persistent client and starts cluster metrics reporting in background
3094	ReportUserAction will execute a user action and return a function to report its completion or error status
3095	FinishReportAndFlushUserAction will return a function that reports user action status and duration or error, returning a wait function to flush the action report
3096	Read will return the total bytes read and an error if the data cannot be read properly from the current chunk or next chunks
3097	ActivateCmd creates a command to activate Pachyderm enterprise features using an activation code with optional expiration timestamp
3098	GetStateCmd will check and display the Pachyderm cluster's enterprise feature activation status and token expiration details
3099	Cmds will return enterprise commands with activation and state retrieval functionality
3100	NewConfiguration creates a configuration object from various configuration types returning nil for invalid types
3101	Repos will return a collection of repository information from etcd using the specified client and prefix
3102	PutFileRecords will return a collection with etcd client and prefix for storing file records
3103	Commits returns a collection of commit information for a repository from etcd storage
3104	Branches returns a collection for branch information with validation to ensure branch names are not UUIDs
3105	OpenCommits will return a collection for open commits using etcd client and prefix
3106	NewDAG creates a directed acyclic graph from a node mapping with parent-child relationships
3107	NewNode will add a node to the DAG with specified parents and update children and leaves mappings accordingly
3108	Sorted returns a topologically sorted list of node identifiers from the DAG by performing depth-first search traversal on each node.
3109	Leaves will return a list of leaf node IDs from the DAG structure
3110	Ancestors will return all ancestor nodes of a given node using depth-first search traversal from specified starting points
3111	Descendants will return all descendant nodes of a given node ID using breadth-first search traversal
3112	Ghosts will return a list of node ids with no parents in the DAG structure
3113	NewPortForwarder will create a new port forwarder with default namespace and kubernetes client configuration returning an error if initialization fails
3114	Run will start a port forward to a random pod matching the app name and return an error if it fails
3115	RunForDaemon will start port forwarding between local and remote ports with default values if ports are zero
3116	RunForSAMLACS will start a port forwarder on a local port for SAML ACS with default port 654
3117	RunForDashUI will start a port forwarder for the dashboard UI on a specified local port, defaulting to a predefined port if zero is provided, and forward traffic from the local port to port 8080 on the remote server, returning an error if the operation fails.
3118	RunForDashWebSocket will execute port forwarding for dash websocket using specified or default local port and return any error encountered
3119	RunForPFS will start port forwarding with default local port if zero is provided, returning an error if unsuccessful
3120	RunForS3Gateway will start a port forwarder to s3 gateway on specified or default local port returning an error if fails
3121	Lock will acquire a port forwarder lock by writing the process ID to a pidfile in the home directory and return an error if it fails
3122	PortForwarder's Close method safely shuts down the forwarder by closing all stop channels and logging the closure
3123	Unmarshal will populate a key and unmarshal event data into a protocol buffer message returning an error if type checking fails or unmarshaling is invalid
3124	UnmarshalPrev will populate a message with previous event data and return an error if the type check fails or unmarshaling fails
3125	MakeWatcher will return a watcher instance with specified event and done channels
3126	CheckType will validate that a value matches the expected protobuf message type and return an error if they do not match
3127	NewPool creates a connection pool watching kubernetes endpoints for a service and returns the pool with error handling
3128	Do will execute a function using a gRPC connection from the pool, managing connection counts and waiting for available connections.
3129	Close will close all connections in the pool and return any error encountered during closure
3130	buildImage will construct a docker image with specified repository, context directory, and dockerfile, returning an error if the build process fails
3131	pushImage will tag and push a docker image from source to destination repository returning the destination image name or an error if tagging or pushing fails
3132	newMinioClient will return a minio client and bucket reference or an error if client creation fails
3133	newMinioClientV2 will create and return a new minio client with specified endpoint, bucket, credentials and security setting, an error will be returned if client creation fails
3134	newMinioWriter creates a minioWriter that asynchronously uploads data to MinIO storage using a pipe mechanism and returns an error channel for tracking upload status
3135	minioWriter close will close the pipe and return any error from the error channel
3136	PipelineRepo will return a repository struct containing the pipeline name from a given pipeline pointer
3137	PipelineRcName will return a lowercase pipeline resource name with version suffix and underscores replaced by hyphens
3138	GetRequestsResourceListFromPipeline will return a resource list and error based on pipeline info resource requests and cache size
3139	GetLimitsResourceListFromPipeline will return a resource list and error based on pipeline resource limits and cache size
3140	getNumNodes will return the count of kubernetes nodes and an error if unable to retrieve the node list or if no nodes are found
3141	GetExpectedNumWorkers will return the expected number of workers based on parallelism specification and node count, or an error if the specification is invalid
3142	GetExpectedNumHashtrees will return the expected number of hashtrees based on the spec constant value or an error if the spec is invalid
3143	FailPipeline will set a pipeline's state to failure with a specified reason in etcd and return an error if the operation fails
3144	JobInput will map pipeline input repositories to specific commits using branch provenance and return a cloned input configuration with resolved commit IDs
3145	PipelineReqFromInfo converts pipeline information into a creation request structure
3146	NewPipelineManifestReader will create a pipeline reader from stdin, url, or file path and return the reader and any error that occurs during the process
3147	NextCreatePipelineRequest will return a pipeline creation request and an error if the pipeline specification is malformed or if end of file is reached
3148	DescribeSyntaxError will return a descriptive syntax error message with line number and position when a JSON parsing error occurs
3149	UpdateJobState updates job and pipeline states, tracking job counts and timestamps when transitioning between job states
3150	New will return a new UUID string with infinite retries on failure and print errors to stdout
3151	HTTPError Code method returns the status code or OK if the error is nil
3152	NewHTTPError will create and return a new HTTPError struct with the specified status code and formatted error message
3153	NewStorage will return a storage object with the specified client and prefix
3154	DeleteAll will remove all objects with a matching prefix by walking through them and deleting each one individually
3155	Chunk will divide data into smaller segments of specified size and return a slice of those segments
3156	ChunkReader will read data in chunks from a reader and apply a function to each chunk, returning the total bytes read or any error that occurs during reading or processing.
3157	NewStreamingBytesReader will return a reader for streaming bytes data and a cancellation function to stop the stream
3158	WriteToStreamingBytesServer will write reader data to a streaming bytes server using a buffer and return any error that occurs during the process
3159	WriteFromStreamingBytesClient will stream bytes from a client to a writer until EOF, returning any errors encountered during reading or writing
3160	NewSidecarAPIServer creates and returns a new API server instance with specified configuration parameters and database connections
3161	NewEnterpriseServer creates an enterprise API server with etcd-backed token management and expiration watching
3162	validateActivationCode will verify an activation code's signature and expiration returning the expiration time or an error if validation fails
3163	activate will validate an activation code and store enterprise token with expiration time, returning token info or error if validation fails
3164	Deactivate will disable enterprise features by deleting token and waiting for confirmation
3165	lookExtensions will search for an executable file by joining directory and path, then return the full path with extensions an error will be returned if the file is not found
3166	Start will initiate a command process and handle file descriptors returning an error if the command fails to start or if context is cancelled
3167	CombinedOutput will execute a command and return its combined standard output and error bytes along with any execution error
3168	StdinPipe will return a writecloser for the command's standard input and an error if stdin is already set or process has started
3169	StdoutPipe will create a pipe for command standard output and return the reader and error if stdout is already set or process has started
3170	dedupEnvCase will remove duplicate environment variables while preserving the last occurrence of each key, optionally ignoring case sensitivity
3171	InputName will return the name from a nested input structure, checking pfs, cross, or union fields recursively and returning empty string if none exist or input is nil
3172	SortInput will organize input cross and union fields by their names in ascending order using stable sorting algorithm
3173	InputBranches will process an input and return a list of branch objects from pfs, cron, and git sources
3174	ValidateGitCloneURL will check if a URL is a valid clone URL with proper prefix and suffix returning an error if invalid
3175	containsEmpty will return true if any string in the slice is empty otherwise false
3176	NewAPIServer creates and returns a new API server instance with specified address, storage root, and cluster information
3177	Ago will return a human-readable duration string representing the time elapsed since a given timestamp, or an empty string if the timestamp is zero.
3178	TimeDifference will return the human readable duration between two timestamps
3179	Duration will convert a duration proto to a human readable string format
3180	InspectCluster will return cluster information and an error if the inspection fails
3181	Extract will return objects or not from an API client using a provided function to process each operation and handle gRPC errors appropriately
3182	ExtractAll will retrieve all operations and return them as a slice of admin.Op pointers or an error if the extraction fails
3183	ExtractWriter will write extracted objects to a given writer using a progress bar utility and return any error during the process
3184	ExtractURL will return an error if the extraction fails or returns unexpected response, otherwise it succeeds silently
3185	ExtractPipeline will return a pipeline creation request and error if extraction fails or response is malformed
3186	Restore will send a series of operations to restore client and return any error that occurs during the process
3187	RestoreReader will restore a reader by sending operations to an admin client and returning any errors that occur during the process
3188	RestoreFrom will restore client data from another client and return any errors during the process
3189	RestoreURL will send a restore request with the given URL and return any gRPC error encountered during the process
3190	IgnoreTypes will return a comparison option that ignores specified types by filtering paths matching those types
3191	AppendEllipsis will add or update an ellipsis record with statistics in a text list based on existing entries and provided diff statistics
3192	IsType will check if a function type matches specific patterns returning true for matching types and false otherwise
3193	NameOf will return the method name from a reflect value handling closure suffixes and trimming package paths
3194	PointerOf will return a pointer representation of a reflect value using unsafe pointer conversion
3195	EditScript.String will return a string representation using special characters for each edit type in the script
3196	stats will count and return the occurrences of each edit type in the script including identity, unique x, unique y, and modified edits
3197	connect will establish a path from current point to destination point using directional logic and append movement types based on equality comparisons
3198	EquateNaNs returns comparison options that treat NaN values as equal using always-equating comparers for float32 and float64 types
3199	Index will return a PathStep at the specified index or an empty pathStep if the index is out of bounds
3200	SliceIndex Key method returns xkey if xkey equals ykey otherwise returns -1
3201	defaultReporter String method returns formatted diff string when differences exist, otherwise returns empty string
3202	FormatType will conditionally format a type label around a text node based on type mode and kind, adding parentheses or braces as needed for unnamed types
3203	formatMapKey will return a formatted string representation of a reflected value with specific formatting options enabled
3204	formatString will return a quoted or raw string representation of input ensuring single line output with printable characters only
3205	formatHex will return a hexadecimal string with appropriate padding based on the input value's magnitude
3206	formatPointer will return a formatted string representation of a pointer address using hexadecimal notation an optional deterministic value for testing purposes
3207	Visit will track visited pointers and return true if a pointer has been seen before
3208	retrieveUnexportedField will access and return a value of an unexported struct field using reflection and unsafe pointer arithmetic
3209	fieldTree insert will recursively add a field path to the tree structure marking the end of the path when all components are processed
3210	fieldTree matchPrefix will return true if a path prefix matches field tree structure false otherwise
3211	canonicalName will return the canonical field path for a struct type and selector string, returning an error if the field does not exist or is unexported
3212	FilterPath will return a filtered option based on a path function or panic if function is invalid
3213	normalizeOption will return a normalized option or options list based on input flattening and length check
3214	flattenOptions will merge nested options into a single flat options list recursively handling each option type
3215	CanFormatDiffSlice determines if a slice or string can be formatted with detailed diffs based on diff mode, element count, and type restrictions
3216	formatASCII will replace non-ASCII characters in a string with periods and return the modified string
3217	coalesceAdjacentEdits will group adjacent edit operations into statistics about identical, removed, inserted, and modified content
3218	SortKeys will sort and deduplicate reflect values based on their ordering relationship returning the sorted unique values
3219	FormatDiff will process value nodes to generate formatted text differences based on their type and depth, handling special cases like slices, leaf nodes, and various data structures while applying appropriate formatting rules.
3220	coalesceAdjacentRecords will group report records into diffStats based on their values and return the aggregated statistics
3221	Diff will compare two values and return their difference string, panicking if results are inconsistent
3222	statelessCompare will execute a path step comparison without modifying the current state, returning the comparison result while preserving the original state information
3223	sanitizeValue will return a sanitized reflect value ensuring interface nil handling and type compatibility
3224	recChecker will detect recursive transformer patterns and panic with details when transformers are used more than once in a path
3225	makeAddressable will return an addressable value by creating a new variable if needed
3226	Marshal will encode field data using visitor based on field type emitting appropriate value types
3227	Field's String method returns a formatted string of the field's key and value separated by a colon
3228	Set will assign a tag value to a span using the tag's key and value
3229	TextMapPropagator's Inject method will set trace ids and baggage data into a text map carrier, escaping values when needed, and returning an error for invalid carriers
3230	TextMapPropagator extract will return a mock span context and error from a text map carrier with trace id, span id, sampled status and baggage data
3231	ToLogRecord converts log data to a log record with timestamp and fields, handling zero timestamps and nil payloads appropriately
3232	New creates a MockTracer with registered default injectors and extractors for TextMap and HTTPHeaders formats
3233	StartSpan creates a new mock span with the provided options and operation name
3234	RegisterInjector will store an injector for a given format in the mock tracer's injectors map
3235	RegisterExtractor will store an extractor function mapped to a specific format within the mock tracer's extractors dictionary
3236	MockTracer.Inject will inject span context into a carrier using specified format returning an error if injection fails
3237	MockTracer will extract span context from carrier based on format or return unsupported format error
3238	ContextWithSpan will return a context with an active span stored in it
3239	Set will assign a uint32 value to a span tag identified by the tagName
3240	Set will assign a uint16 value to a span tag identified by tag name
3241	Set will assign a boolean value to a span tag using the specified tag name
3242	SetString will assign a string value to an ipv4 tag in a tracing span
3243	EmitString will set the mock key value pair with string value and its kind
3244	EmitLazyLogger will execute a lazy logger function to populate mock key-value fields from the provided metadata
3245	RunAPIChecks executes API validation tests using a tracer and configurable options
3246	CheckBaggageValues returns an option to set baggage value checking in API checks
3247	CheckExtract returns an option to set whether extraction checking is enabled in an API check suite
3248	CheckInject will set the CheckInject option value in the API check suite
3249	CheckEverything will enable baggage values extraction injection checks in the api check suite
3250	UseProbe sets the API check probe option to the provided probe function
3251	WithBaggageItem will add a key-value pair to the baggage map and return a new mock span context with the updated baggage
3252	MockSpan tags method returns a copy of the span's tags map in a thread-safe manner
3253	Tag will return a tag value from the mock span using the provided key
3254	Logs method returns a copy of the mock span's log records slice
3255	MockSpan Context method returns the span context in a thread-safe manner using locking
3256	SetTag will add a tag to the mock span and handle sampling priority conversion from uint16 or int to boolean sampled flag
3257	SetBaggageItem will add a key-value pair to the span's baggage and return the updated span
3258	BaggageItem will return a baggage item from the mock span's span context using the provided key
3259	Finish will set the finish time of a mock span and record it within the tracer
3260	FinishWithOptions will complete a mock span with options including timestamps and logs then record the span through its tracer
3261	MockSpan String method returns formatted trace information including traceId, spanId, parentId, sampled status, and operation name
3262	MockSpan's LogFields method records log fields with a timestamp using the current time
3263	logFieldsWithTimestamp will record timestamped log fields in a mock span's logs slice by marshaling each field into a log record and appending it to the span's locked logs array
3264	LogKV will process key-value pairs into log fields or return an error if the pairs are malformed
3265	LogEvent will record an event string in the mock span's logs
3266	LogEventWithPayload will record an event with its associated payload in the mock span's logs
3267	SetOperationName will update the mock span's operation name and return the span itself
3268	registriesDirPath returns the registry directory path based on system context, using either a specified path, a root path with default directory, or a system default directory path.
3269	loadAndMergeConfig will merge multiple YAML configuration files into a single registry configuration, returning an error if duplicate entries are found
3270	ParseReference will return a validated image reference and tag an error if the reference format is incorrect
3271	NewReference will create a new image reference from a docker reference and return an error if the format is invalid
3272	CheckAuth will authenticate credentials against a registry and return an error if authentication fails or an invalid status code is received
3273	doHTTP will perform an HTTP request using a configured client and return the response or an error
3274	detectPropertiesHelper will determine registry properties by pinging with HTTP and HTTPS schemes returning an error if detection fails
3275	detectProperties will initialize docker client properties once and return any detection errors encountered
3276	getExtensionsSignatures will download and parse extension signatures from a docker registry returning the parsed signature list or an error if the request fails
3277	NewTransport creates and returns a new HTTP transport with specific timeout settings and proxy configuration from environment variables.
3278	readRegistryConf will return the registry configuration file contents and an error if the file cannot be read
3279	GetRegistries will return registry search configurations and any loading errors from system context
3280	GetInsecureRegistries will return a list of insecure registries and an error if the registry configuration fails to load
3281	RegistriesConfPath returns the registry configuration file path based on system context overrides
3282	NewOptionalBool will return an optional boolean value based on input true or false
3283	changeState will update the PolicyContext state if expected matches current state, otherwise returns an error about invalid state transition
3284	Destroy will transition policy context through destroying to destroyed states and return an error if transition fails
3285	policyIdentityLogName will return a concatenated string of transport name and policy configuration identity from an image reference
3286	requirementsForImageRef will return policy requirements for an image reference by matching transport scopes and identities, falling back to default policy if no match is found
3287	ParseImageName will return an image reference and error based on transport and reference parts of the image name string
3288	BlobInfoFromOCI1Descriptor converts an OCI v1 descriptor to blob information containing digest, size, URLs, annotations, and media type
3289	OCI1FromManifest will create an OCI1 struct from manifest bytes and return an error if unmarshaling fails
3290	OCI1FromComponents will create and return an OCI1 manifest using the provided configuration and layers descriptors
3291	newReference will create a docker reference from a named reference and return an error if the reference lacks tag or digest or contains both
3292	tagOrDigest will return a reference tag or digest string and an error if the reference lacks both digest and tag identifiers
3293	updateEmbeddedDockerReference will modify manifest updates with destination docker reference or return error if conflicts exist
3294	isTTY will return a boolean indicating if the writer is a terminal file, false otherwise
3295	copyUpdatedConfigAndManifest will update image manifest and config then write the manifest to destination returning the manifest bytes or an error if operations fail
3296	createProgressBar will return a progress bar for copying blobs with a formatted prefix and completion message
3297	copyConfig will copy a source image configuration blob to destination returning any errors during the copy process or digest mismatch
3298	diffIDComputationGoroutine will compute a layer's diffID digest and send the result or error through a channel
3299	computeDiffID will return a digest and error by reading from a stream with optional decompression
3300	compressGoroutine will compress data from a reader and write it to a pipe writer, closing the writer with any error that occurs during compression or copying
3301	newDockerClient will create a docker client with specified host and configuration returning an error if creation fails
3302	defaultPolicyPath returns the signature policy path from system context or the system default path
3303	NewPolicyFromFile will create a new policy from a file, returning an error if the file is invalid or unreadable
3304	NewPolicyFromBytes will create a new policy from byte data and return an error if the policy format is invalid
3305	newPolicyRequirementFromJSON will create a policy requirement from JSON data and return an error if the policy type is unknown or malformed
3306	newPRSignedBy will create a policy reference signed by object with validation checks on key type, path, data, and identity, returning an error if any validation fails
3307	newPRSignedByKeyPath will create a new policy reference signed by key path and identity returning an error if creation fails
3308	NewPRSignedByKeyPath will create a new policy requirement with signed key path and return an error if the input is invalid
3309	newPRSignedByKeyData will create a new policy reference signed by key data and return an error if the operation fails
3310	NewPRSignedByKeyData will create a new policy requirement with signed key data and return an error if the input is invalid
3311	sbKeyType.IsValid will return a boolean indicating if the key type is valid or not
3312	newPRSignedBaseLayer will return a signed base layer policy reference or an error if the base layer identity is nil
3313	newPolicyReferenceMatchFromJSON will create a policy reference match object based on type field in JSON data returning an error if the type is unknown or parsing fails
3314	newPRMExactReference will create a new exact reference policy rule from a docker reference string and return an error if the format is invalid or lacks tag/digest
3315	newPRMExactRepository will create a new repository policy object from a docker repository string and return an error if the format is invalid
3316	newImageSource will create a storage image source from a storage reference and return an error if the image resolution or metadata decoding fails
3317	getBlobAndLayerID retrieves blob data and layer information by digest, returning readcloser, size, and layer ID or error
3318	computeID will calculate and return an image ID using diffIDs from blob sums and manifest data, returning empty string on any lookup or calculation error
3319	PutManifest will store a manifest blob and verify its digest matches expected value, returning an error if validation fails
3320	PutSignatures will store signature blobs and their sizes in the storage image destination returning nil error
3321	newImage will create and return a new image closer with its size from a storage reference and system context, returning an error if the process fails
3322	newImageSource creates a temporary directory to unpack an OCI archive and returns a custom image source with cleanup functionality
3323	LoadManifestDescriptor will return a manifest descriptor and error by extracting an image reference and loading its manifest
3324	Close will close the unpacked source and delete the temporary directory reference
3325	append will add a string to the ordered set if not already present, maintaining order and uniqueness
3326	isMultiImage will determine if an image contains multiple manifests and return a boolean with potential error
3327	lockPath will acquire a mutex lock for a given path by managing reference counts and ensuring thread-safe access to shared resources
3328	unlockPath will release a lock on a path and remove it when reference count reaches zero, panicking if the lock doesn't exist
3329	view executes a read-only function on a bolt database with locking and error handling
3330	update will execute a function within a database transaction and handle locking and error management for cache updates
3331	uncompressedDigest will return the uncompressed digest from bolt transaction or empty string if not found
3332	appendReplacementCandidates will add cached replacement candidates to a slice from a bolt bucket returning the updated slice
3333	indexExists will check if a reference index path exists and return a boolean value accordingly
3334	createSignature will sign a docker manifest using GPG and return the signature or an error if signing fails
3335	ParseReference will return an image reference and error based on the input string path and image name
3336	NewReference will return a validated image reference with resolved directory path or an error if validation fails
3337	getIndex will return an image index and error by decoding index JSON file at reference path
3338	LoadManifestDescriptor will return a manifest descriptor and error if typecasting to ociReference fails
3339	blobPath will return the file path for a blob digest within a reference directory or shared blob directory, returning an error if the digest is invalid
3340	SignDockerManifest will create a signature for a docker manifest using a signing mechanism and key identity returning the signed manifest or an error
3341	VerifyDockerManifestSignature will validate a docker manifest signature against expected reference, key identity, and manifest digest returning an error if validation fails
3342	newOpenshiftClient will create a new OpenShift client with the provided reference and return an error if the client configuration fails
3343	doRequest will send an HTTP request with authentication and return the response body or an error based on status code and JSON response validation
3344	getImage will fetch and return an image from an image stream in openshift using a given context and image stream image name, returning an error if the operation fails
3345	convertDockerImageReference will reformat a docker image reference by replacing its domain with a new one and return an error if the input format is invalid
3346	ensureImageIsResolved will validate and resolve an OpenShift image reference to a docker image source returning an error if the resolution fails
3347	newImageDestination creates an OpenShift image destination using a Docker reference and client, returning an error if the process fails
3348	newUntrustedSignature will create an untrusted signature with a creator ID and timestamp based on the docker manifest digest and reference
3349	MarshalJSON will serialize a signature into JSON format returning an error if required fields are missing
3350	unmarshalJSON will parse JSON data into an untrusted signature and return an invalid signature error if formatting is incorrect
3351	verifyAndExtractSignature will validate a signature against rules and return the extracted signature data or an error if validation fails
3352	RewriteReference will modify a reference string using a prefix and location, returning an error if the prefix doesn't match or parsing fails
3353	getV1Registries will return a list of registries with their configurations and an error if the registry configuration is invalid
3354	getConfigPath will return the registry configuration file path based on system context overrides or default path
3355	GetRegistries will return cached or loaded registry configurations and an error if the configuration cannot be accessed or parsed correctly
3356	readRegistryConf will return configuration file bytes and an error if the file cannot be read
3357	sourcedImage Manifest method returns the manifest blob bytes, MIME type string, and nil error
3358	ConfigUpdate will update the tarball reference's config and annotations with the provided image config and annotations map, returning nil on success.
3359	parseImageAndDockerReference will return two docker references from an image and string an error if the string is not a valid docker reference
3360	parseDockerReferences will return two parsed docker image references or an error if parsing fails for either reference
3361	ListNames will return a sorted list of non-deprecated transport names from the kt transports slice
3362	NewReference creates an image reference with resolved repository path and validates the image name format
3363	signaturePath will return the file path for a signature file based on the given index
3364	ValidateImageName will return an error if the image name is invalid according to the reference regular expression otherwise it returns nil
3365	SplitPathAndImage will return the path and image components of a reference string based on the operating system platform
3366	ValidateOCIPath will return an error if the path contains invalid colons based on the operating system platform
3367	ValidateScope will check if a scope path is valid for the current OS and returns an error if it's not canonical or has invalid format
3368	BlobInfoFromSchema2Descriptor will return a blob info struct populated with digest, size, urls and media type from a schema2 descriptor
3369	Schema2FromManifest will create a Schema2 object from manifest data and return an error if unmarshaling fails
3370	Schema2FromComponents creates a schema version 2 object with config and layers descriptors
3371	SetAuthentication will configure registry credentials in system context returning true if modified and an error if authentication setup fails
3372	RemoveAuthentication will delete registry authentication from system context returning an error if not found
3373	RemoveAllAuthentication will clear all authentication credentials and helpers from the system context JSON configuration and return an error if the operation fails
3374	readJSONFile will read a JSON file and return docker configuration data or an error if the file cannot be read or parsed correctly
3375	modifyJSON will update a JSON authentication file by applying an editor function to the parsed data and writing changes back to disk if modifications occur, returning an error if any step fails
3376	findAuthentication will search for docker registry authentication credentials by checking credential helpers, direct auth configs, and normalized registry entries, returning the decoded auth or an error if not found
3377	NewDestination creates a destination writer with repository tags and blob information for image pushing
3378	AddRepoTags will append repository tags to the destination's tag list
3379	writeLegacyLayerMetadata will create legacy layer metadata files including symlinks, version, and config files for each layer descriptor and return the layer paths and last layer ID or an error if creation fails
3380	sendSymlink will create a symbolic link header and write it to tar archive returning an error if operation fails
3381	sendBytes will transmit byte data to a specified path by converting it into a file reader and sending it through the destination's file sending method
3382	sendFile will transmit a file as tar format with size validation returning an error if transmission fails or size mismatches
3383	Commit will close the tar destination and return an error if it occurs
3384	imageMatchesRepo will check if an image's names match a repository reference and return true if a match is found
3385	resolveImage will find and return an image based on reference ID or name, returning an error if no matching image is found
3386	storageReference Transport method returns a storageTransport object with shared store and UID/GID mappings
3387	storageReference StringWithinTransport returns a formatted string representation of the storage reference including transport details, named reference, and ID
3388	storageReference returns policy configuration namespaces including store specifications and image name components
3389	GzipDecompressor will return a decompressed reader and an error if decompression fails
3390	Bzip2Decompressor will return a decompressed reader and nil error when given a reader input
3391	XzDecompressor will return a decompressed reader and an error if decompression fails
3392	DetectCompression will identify compression format and return decompressor function and reader with buffered data or error if detection fails
3393	newImageDestination creates a docker image destination using a system context and reference returning an error if creation fails
3394	mountBlob attempts to mount a blob from a source repository to a destination, handling various HTTP responses including creation, acceptance, and errors during the mount process.
3395	bicTransportScope returns the domain of a docker reference as a BICTransportScope opaque value
3396	newBICLocationReference will create a BIC location reference from a docker reference by extracting the repository name
3397	parseBICLocationReference will return a named reference and an error if the BIC location reference cannot be parsed
3398	NewSourceFromStream creates a temporary file from an input stream and returns a source object with cleanup functionality
3399	readTarComponent will return the bytes of a tar file component and an error if it fails to load or read the component
3400	ensureCachedDataIsPresent will validate and cache tar manifest, config, and layer data returning an error if any step fails
3401	loadTarManifest will return the manifest items from the source tar file and an error if the manifest cannot be read or decoded properly
3402	Close will remove the tar file if removeTarPathOnClose flag is set otherwise it will do nothing
3403	newImageDestination creates a daemon image destination for a docker daemon reference with error handling and goroutine management
3404	imageLoadGoroutine will load an image through a client and send the status via channel, handling errors and closing resources appropriately
3405	NewReference will create a new image reference from a file and image name, returning an error if validation fails
3406	createOCIRef will return a temporary directory and OCI reference an error will be returned if the directory or reference creation fails
3407	createUntarTempDir will create a temporary directory and untar an OCI archive file into it, returning the reference or an error if the operation fails
3408	destructivelyPrioritizeReplacementCandidatesWithMax will sort candidates by priority and return up to maxCandidates replacement candidates based on primary and uncompressed digests
3409	newImageDestination will create a new image destination for ostree reference in temporary directory and return error if directory creation fails
3410	resolveExistingPathToFullyExplicit will return a cleaned absolute path with symbolic links evaluated or an error if the path cannot be resolved
3411	newImageDestination creates or updates a container image directory, ensuring it contains the correct version file and is properly initialized for image storage
3412	isDirEmpty will check if a directory is empty and return a boolean value or an error if the directory cannot be read
3413	removeDirContents will delete all contents within a specified directory path and return an error if any operation fails
3414	GetRepositoryTags fetches all tags from a docker repository returning a list of tag strings and any error encountered during the process
3415	DefaultCache will return a blob info cache at the specified path or a memory-only cache if an error occurs during directory creation or path determination
3416	uncompressedDigestLocked will return the uncompressed digest for a given digest or an empty string if not found
3417	Close will clean up temporary directory and close the unpacked destination returning any errors encountered during the process
3418	PutManifest will store a manifest in the unpacked destination and return an error if the operation fails
3419	Commit will store the image and tar up the temporary directory to the destination file path
3420	tarDirectory will create a tar archive file from a source directory an error will be returned if the operation fails
3421	ParseStoreReference will convert a reference string into a storage reference handling image IDs, digests, and named references with error checking
3422	chooseDigestFromManifestList will return a digest and error based on matching architecture and OS choices from a manifest list
3423	ChooseManifestInstanceFromManifestList will select a manifest digest from a manifest list based on system context and return an error if the manifest type is incorrect or selection fails
3424	manifestSchema1FromComponents will create and return a manifest schema1 object from given components and handle any errors during creation
3425	manifestDigest will return a manifest digest and error based on instance digest or cached manifest
3426	deleteImage will remove an image from a registry using Docker V2 schema and handle signatures, returning an error if the operation fails
3427	Schema1FromComponents creates a schema1 object from its components and initializes it, returning an error if initialization fails
3428	initialize will validate schema1 manifest consistency and extract v1 compatibility information from history entries
3429	ToSchema2Config converts schema 1 image configuration to schema 2 format by processing history, rootfs, and compatibility information while handling version-specific encoding requirements and returning the serialized result or an error.
3430	Digest will return a manifest digest and error if the manifest type is signed or if digest creation fails
3431	MatchesDigest will compare a manifest's digest with an expected digest and return whether they match or an error if the digest cannot be computed
3432	NormalizedMIMEType will return a normalized media type based on input matching known types or defaulting to Docker V2 Schema 1 Signed MediaType
3433	FromBlob will convert blob data into a manifest based on MIME type returning an error for unimplemented or unknown types
3434	NewReference will return a resolved image reference and error if path cannot be resolved
3435	layerPath will return the joined path of a directory reference and a digest hexadecimal string
3436	signaturePath will return a file path for a signature file with the given index appended to the reference path
3437	New will create a new worker pool with specified size and constructor function for workers
3438	NewFunc creates a new worker pool with specified concurrency and processing function returning a pool instance
3439	ProcessTimed will handle a timed job in a pool returning the result or an error if timeout occurs
3440	SetSize will adjust the pool's worker count to the specified size by adding new workers or stopping existing ones asynchronously, then synchronously waiting for termination and trimming the worker slice.
3441	GetSize will return the number of workers in the pool lock mutex and unlock after reading the length
3442	TL will return the top-left point of a rectangle with its coordinates cast to integers
3443	BR will return the bottom right corner point of a rectangle using its x, y, width, and height attributes
3444	CVBox will convert a Box2D struct to a CvBox2D struct with converted float values for angle, center coordinates, and size dimensions
3445	Box2D points method will return the four corner points of a box by converting its CvBox to Point2D32f coordinates
3446	FOURCC will return a formatted 32-bit code from four 8-bit characters representing a codec identifier
3447	Merge will combine separate blue, green, red, and alpha image channels into a single destination image channel
3448	Split will separate an image into its color channels blue green red and alpha
3449	AddWeighted performs weighted addition of two images with specified coefficients and stores result in destination image
3450	And performs bitwise AND operation on two images and stores result in destination image
3451	AndWithMask performs bitwise AND operation on two source images with a mask and stores result in destination image
3452	AndScalar will perform a bitwise AND operation on an image with a scalar value and store the result in a destination image
3453	AndScalarWithMask performs bitwise AND operation between an image and a scalar value with optional mask using OpenCV library functions
3454	Or performs bitwise OR operation on two images and stores result in destination image
3455	OrWithMask performs bitwise OR operation on two source images with a mask and stores result in destination image
3456	OrScalar performs bitwise OR operation on image scalar values with optional mask support
3457	OrScalarWithMask performs bitwise OR operation on image with scalar value using mask
3458	AddWithMask performs element-wise addition of two source images with a mask and stores the result in a destination image
3459	AddScalar will add a scalar value to an image and store the result in a destination image
3460	AddScalarWithMask adds a scalar value to an image with optional masking using OpenCV's cvAddS function
3461	Subtract will perform pixel-wise subtraction between two images and store the result in a destination image
3462	SubtractWithMask performs image subtraction with a mask using OpenCV's cvSub function
3463	SubScalar will subtract a scalar value from an image and store the result in a destination image
3464	SubScalarWithMask performs scalar subtraction on an image with a mask using OpenCV functions
3465	SubScalarRev will subtract a scalar value from image pixels and store result in destination image
3466	SubScalarWithMaskRev performs reverse scalar subtraction with a mask on images using OpenCV C bindings
3467	AbsDiff computes the absolute difference between two images and stores the result in a destination image using OpenCV's cvAbsDiff function.
3468	AbsDiffScalar computes the absolute difference between an image and a scalar value, storing the result in a destination image
3469	MeanStdDevWithMask calculates the mean and standard deviation of an image with a mask applied
3470	CreateSeq will return a sequence with specified flags and element size using OpenCV's cvCreateSeq function
3471	Push will add an element to a sequence and return the added element pointer
3472	Pop will remove and return the last element from a sequence into the provided pointer location
3473	PushFront will add an element to the front of a sequence and return the new head element
3474	PopFront will remove and return the first element from a sequence and store it in the provided pointer
3475	GetElemAt will return a sequence element at the specified index as a pointer
3476	RemoveAt will delete an element at specified index from sequence using OpenCV C API function
3477	Delay returns a configuration option that sets the delay duration for a config object
3478	BackOffDelay will return a time duration for backoff delay based on iteration count and configuration settings
3479	Error will return a formatted string of all errors with their attempt numbers concatenated with newlines
3480	Arguments will append string arguments to the request builder and return the builder instance
3481	BodyString will set the request body from a string and return the request builder
3482	BodyBytes will set the request body from byte slice and return the request builder
3483	Body method sets the request body reader and returns the request builder for chaining calls
3484	Option method sets request options by converting values to strings and storing them in a map, returning the request builder for chaining
3485	Header method sets a request header name-value pair and returns the request builder instance
3486	Send will execute a request with the specified parameters and return a response or an error
3487	Exec will send a request and decode the response into the provided result interface, returning any errors encountered during sending or decoding.
3488	Next will return the next message from the subscription or an error if the response contains an error or decoding fails
3489	Cancel will close the PubSubSubscription's output and return an error if the output is not nil
3490	FileList will return a UnixLsObject and error from executing a file listing request on a given path
3491	Cat will return a file's contents as ReadCloser or an error if the file cannot be read
3492	List will return a slice of LsLink objects and an error based on the server response for the given path
3493	Pin will add a path to shell pinning and recursively pin all files under that path returning an error if unsuccessful
3494	Pins will return a mapping of pin keys to their info and execute a request to list pins, returning an error if the operation fails
3495	Version will return shell version and commit hash an error will be returned if request fails
3496	SwarmPeers will return swarm connection information and an error if the request fails
3497	SwarmConnect will establish connections to swarm addresses and return an error if the connection fails
3498	DagPutOptions will return dag put settings with default values and apply any provided options, returning an error if options are invalid
3499	Pin will set the pin name in dag options and return an error if the pin is invalid
3500	Kind returns a DagPutOption that sets the kind of dag to put an error will be returned if the kind is not valid
3501	Hash returns a DagPutOption that sets the hash field of DagPutSettings
3502	AddDir will add a directory to shell and return the hash of the added directory or an error if the operation fails
3503	Publish will send a publish request with node and value parameters and return an error if the operation fails
3504	PublishWithDetails will publish content with given details and return a response or an error if the operation fails
3505	PlanValue resolveValue will return a resolved value or error based on key, value, or listKey conditions
3506	GenerateQuery will create a SQL query by replacing bind variables and extras in the parsed query returning the final query bytes and any error that occurs during encoding or variable replacement
3507	EncodeValue will encode a bind variable to SQL format handling both non-tuple and tuple values appropriately
3508	Lex will return the token type and value from scanning, skipping comments unless allowed, and store the last token value
3509	skipStatement will advance the tokenizer until encountering a semicolon or end-of-file character
3510	reset will clear the tokenizer's parse tree, partial DDL, special comment, and reset position variable index, nesting level, and force EOF flag to their initial states
3511	Preview will analyze SQL string and return statement type based on first word match or default to unknown statement type
3512	NewPlanValue converts SQL expressions into plan values handling various types like arguments, integers, strings, hex values, lists and null values
3513	StringIn will check if a string exists within a list of strings and return a boolean value indicating the result
3514	NewTrackedBuffer will return a new tracked buffer with the specified node formatter
3515	NewStringArena will create a new string arena with specified size and return a pointer to it
3516	NewString will return a string from byte slice using string arena buffer or direct conversion based on available capacity
3517	SpaceLeft will return the remaining capacity in the StringArena buffer
3518	ParseStrictDDL will return a parsed statement and an error if the SQL does not conform to strict DDL syntax
3519	ParseNext will parse the next token and return a statement or an error if parsing fails
3520	Append will add a formatted SQL node to a buffer by using a tracked buffer for formatting
3521	ExprFromValue converts a sqltypes.Value to an Expr based on its type, returning an error for unsupported types
3522	Backtick will escape backticks in a string by doubling them and wrapping the result with backticks
3523	NewValue will create a trusted value from byte data based on type validation returning an error for invalid types or parsing failures
3524	Value.String will return a string representation of the value with its type and quoted or unquoted value
3525	EncodeSQL will write a value to binary writer based on its type, handling null values and quoted strings specially
3526	EncodeSQL will write SQL insert values to a buffer by iterating through rows and byte values, adding commas and parentheses as needed
3527	EncodeSQL will encode a tuple equality list as either an IN clause or equality condition based on column count
3528	WalkStatement will traverse select statements and convert sql values and comparisons returning false to stop traversal and true to continue
3529	WalkSelect will traverse and convert SQL nodes, handling SQL values and comparison expressions during traversal
3530	BindVariablesEqual will compare two maps of bind variables and return true if they are equal by deep copying them into bound query structs before comparison
3531	New will return a JWT middleware with default options and handlers set if none provided
3532	HandlerWithNext will check JWT authentication and proceed to next handler only if authentication succeeds
3533	FromAuthHeader will extract a bearer token from an HTTP request header and return an error if the header format is invalid
3534	FromParameter returns a token extractor that retrieves a parameter from the request URL query string
3535	FromFirst returns a TokenExtractor that tries multiple extractors in order and returns the first non-empty token or error encountered
3536	getHelloPacket will return an RPC packet containing subscription options for all topics in the PubSub instance
3537	NewFloodsubWithProtocols creates a new pubsub system with floodsub routing and specified protocols
3538	NewFloodSub creates a floodsub pubsub instance with specified host and options returning a pubsub object and error
3539	NewLRUBlacklist will return a new LRU blacklist with specified capacity an error will be returned if creation fails
3540	NewRandomSub will create a new PubSub with a random sub router and return an error if the creation fails
3541	NewGossipSub creates a new PubSub instance with GossipSub routing implementation and message caching
3542	NewPubSub creates a new PubSub instance with specified host, router, and options, returning the pubsub object and an error if initialization fails.
3543	WithValidateThrottle returns an option to set the validation throttle channel buffer size for PubSub
3544	WithBlacklist returns a function that sets the blacklist field of a PubSub struct and returns nil error
3545	handleRemoveSubscription will cancel a subscription, close its channel, and remove it from topics, also leaving the topic if empty and announcing the change
3546	handleAddSubscription will add a new subscription to a topic and announce the topic existence if needed, returning the subscription through a response channel
3547	announce will send subscription messages to peers and retry if queues are full
3548	notifySubs will send a message to all subscribers of each topic in the message, logging a warning if a subscriber is too slow to receive it
3549	seenMessage will return whether a message ID has been seen by checking its presence in the published messages set
3550	subscribedToMsg will return whether a message is subscribed to by checking topic IDs against known topics
3551	msgID will return a concatenated string of the message sender and sequence number from a protocol buffer message
3552	pushMsg will handle and validate incoming messages from peers while checking against blacklists and validation rules before publishing or dropping them based on message ID and signing requirements.
3553	validate will check message signature and topic validity, logging warnings and dropping invalid messages while sending valid ones through sendMsg channel
3554	validateSingleTopic will throttle message validation for a topic and return whether the validation was processed or skipped due to throttling
3555	getValidators returns topic validators for a message's topics or nil if no validators exist
3556	Subscribe will create a new subscription to a topic and return the subscription object and an error if the subscription fails
3557	SubscribeByTopicDescriptor creates a subscription to a topic with given options and returns the subscription or an error
3558	GetTopics will return a slice of string topics from the pubsub service through a request response pattern
3559	Publish will send a message to a topic with sequence number and optional signature, returning an error if signing fails
3560	ListPeers will return a list of peer IDs for a given topic by requesting from the pubsub system
3561	WithValidatorTimeout returns a function that sets a timeout duration on a validator request object and returns nil error
3562	WithValidatorConcurrency returns a validator option that sets the concurrency throttle value
3563	RegisterTopicValidator will add a topic validator to pubsub and return an error if the operation fails
3564	UnregisterTopicValidator removes a topic validator and returns an error if the operation fails
3565	DefaultMetricPrefix will return a metric string with "tchannel." prefix and given name and tags
3566	MetricWithPrefix will generate a metric string with optional prefix and tagged values based on name prefixes and available tags
3567	NewClient creates and returns a new client with specified channel, target service, and optional host port configuration
3568	Client Call method will execute a remote procedure call and return the response or an error if the call fails
3569	CallPeer will initiate a peer call and wrap the result with the provided arguments and response, returning an error if the call fails
3570	CallSC will initiate a service call and handle the response or return an error if the call fails
3571	ReadResponse will parse HTTP response data from TChannel call arguments and return an http.Response with status, headers, and body reader
3572	writeHeaders will write status code headers and response data to arg2Writer and set up arg3Writer for further writes, returning any errors encountered during the process
3573	ResponseWriter returns an http.ResponseWriter and a finish function that will close the response writer and return any errors that occurred during writing.
3574	ReadHeaders will read HTTP headers from a reader and return a map of header fields and their values, or an error if the operation fails.
3575	NewTCPRawRelay will create a TCP relay for multiple destinations that copies data between source and destination connections, returning an error if creation fails
3576	NewClient will create and configure a new client with timeout defaults and peer nodes an error will be returned if configuration parsing fails
3577	Advertise will register services and start advertising loop returning error if initial advertisement fails
3578	handle will process incoming calls by reading arguments, executing handlers, and writing responses with proper error handling
3579	Start will initialize and begin listening on a tchannel server returning an error if initialization or startup fails
3580	Port method will extract and return the port number from the server's host port string
3581	SetStrategy will update the scoring strategy and recalculate scores for all peers in the peer list
3582	Add will add a peer to the peer list and return the peer object, creating it if it doesn't exist yet
3583	GetNew will select a new peer from the peer list avoiding previously selected peers and return an error if no new peers are available
3584	Get will return a peer from the peer list or an error if no peers are available
3585	Remove will delete a peer from the list and return an error if the peer is not found
3586	Copy will return a copy of the peer list mapping hostports to peers while holding the read lock
3587	PeerList.Len will return the number of peers in the peer heap an exclusive lock will be acquired to ensure thread safety
3588	exists will check if a hostPort exists in peer list and return the peer score and boolean result
3589	getPeerScore will return a peer's score and boolean indicator based on hostPort key lookup in peersByHostPort map
3590	onPeerChange will update a peer's score in the list if the score has changed
3591	updatePeer will modify a peer's score and update its position in the heap if the score changes
3592	getConn will return a connection from inbound or outbound list based on index i
3593	GetConnection will return an active peer connection or create a new one using Connect if no active connection exists
3594	getConnectionRelay will return an active connection or create a new one with hidden listening details an error will be returned if connection fails
3595	canRemove will return true if both inbound and outbound connections are empty otherwise false
3596	addConnection will add a connection to a peer and notify status change or return an error if connection is not active
3597	removeConnection will remove a specific connection from a slice and return true if successful, otherwise false
3598	connectionCloseStateChange will remove an inactive connection and notify listeners of the peer status change
3599	Connect will establish a connection to a peer and return the connection object or an error
3600	BeginCall will initiate a service method call on a peer connection returning an outbound call object and any error that occurs during validation or connection setup
3601	NumConnections will return the count of inbound and outbound peer connections safely using read locking
3602	NumPendingOutbound will return the total count of pending outbound connections by iterating through both inbound and outbound connections and summing their respective outbound counts while holding a read lock on the peer object
3603	isEphemeralHostPort will return a boolean indicating if the host port is empty, default ephemeral, or ends with :0
3604	Get will return a value for a given key and an error if the key is invalid or not found
3605	set will store a key-value pair in the handler and return an error if the key is invalid, while also setting a response header with the total count of stored values
3606	ClearAll will clear all key-value pairs in the handler if the context has admin privileges, otherwise it returns a not authorized error
3607	NewChannel creates a new channel with validated options and initializes its components including logger, stats reporter, and connection management.
3608	Serve will start the channel listening on the given listener and return an error if already listening or in invalid state
3609	ListenAndServe will start listening on a host port and return an error if already listening or if the listen fails
3610	Register will attach a handler to a channel subchannel based on peer service name, panicking if the channel uses an alternate root handler instead of a channel handler.
3611	PeerInfo will return the channel's peer information in a thread-safe manner using read lock
3612	GetSubChannel will return a subchannel for a service name and apply options to it if newly created
3613	serve will accept network connections with backoff retry logic and handle handshakes in background goroutines until server close
3614	Ping will send a ping request to a peer and return an error if the connection fails or the ping is unsuccessful
3615	StatsTags will return a copy of the channel's common statistics tags map
3616	Connect attempts to establish a new connection to a host port, handling timeouts, context cancellation, and connection validation based on channel state.
3617	exchangeUpdated will update a peer in the channel when a connection's remote hostport is known and the peer exists
3618	updatePeer will notify channel and subchannel peers of peer changes and complete the update process
3619	addConnection will add a connection to the channel and return true if successful, false otherwise based on connection and channel states
3620	removeClosedConn will delete a closed connection from the channel's connections map using mutex protection
3621	connectionCloseStateChange handles connection closure updates channel state and notifies peers accordingly
3622	Channel State method returns the current state of a channel in a thread-safe manner using read locking
3623	NewReader will return a new reader from the reader pool and set its reader and error fields
3624	ReadUint16 will return a 16-bit unsigned integer from the reader an error will be returned if reading fails or buffer is insufficient
3625	ReadString will return a string of specified length from reader an error will be returned if reading is incomplete
3626	ReadLen16String will return a string with length specified by a 16-bit unsigned integer read from the reader
3627	Register will register thrift and json channels with the behavior
3628	Run will execute a traced request flow across multiple services validating trace integrity and logging results
3629	relayTimerPool Get method returns a timer from pool or creates new one with stopped Go timer for relay usage
3630	relayTimerPool Put method will release a relayTimer back into the pool unless verification is enabled, in which case it returns without releasing
3631	Start will begin a relay timer with given duration and items, panicking if already active or reset multiple times
3632	relayTimer release will verify timer is not released, panic if active, mark as released, and return to pool
3633	NewLogger will return a logger with specified writer and log fields an error will be returned if the logger cannot be created
3634	NewTCPFrameRelay creates a TCP frame relay with specified destinations and frame modification function, returning an error if creation fails
3635	tallyTags will return a map of tag names to their values from the knownTags struct excluding empty strings
3636	Isolated will initialize a subchannel's peers with a new sibling and set its strategy to least pending calculator
3637	Isolated will return a boolean indicating if the subchannel has isolated peers from the top channel
3638	Register will add a handler method to the subchannel's handler map or panic if registration is not allowed
3639	GetHandlers will return a copy of the SubChannel's handler map or panic if the handler type is incorrect
3640	StatsTags will return a copy of the top channel's stats tags with the subchannel service name added to it
3641	registerNewSubChannel will create and store a new subchannel for a service name, returning the subchannel and true if created, or existing subchannel and false if already exists
3642	get will return a subchannel and boolean indicating presence for a given service name from the subchannel map
3643	getOrAdd will return a subchannel and boolean indicating if it was added or not based on service name and channel provided
3644	Discover will return a list of host ports for a given service name and an error if the discovery fails
3645	Start will initiate the client listener and begin serving HTTP requests in a separate goroutine, returning any error that occurs during setup.
3646	listen will set default ports create a new serve mux handle crossdock requests and start listening on tcp port returning any errors that occur during the process
3647	WriteRequest will serialize an HTTP request into TChannel arguments, writing method, URL, headers, and body to respective argument writers.
3648	ReadRequest will return an HTTP request with method, URL, and headers read from the call arguments and body
3649	NewReadBufferWithSize will return a new read buffer with specified size initialized
3650	ReadByte will return the next byte from the buffer and an error if the buffer is empty or has an existing error
3651	ReadBytes will return a byte slice of specified length from the buffer and update the remaining buffer, returning nil and setting an error if there are insufficient bytes available
3652	ReadString will return a string of specified bytes from buffer or empty string if read fails
3653	ReadUint16 will return a 16-bit unsigned integer from the buffer or zero if reading fails
3654	ReadUint32 will return a 32-bit unsigned integer from the buffer or zero if reading fails
3655	ReadUint64 will return a 64-bit unsigned integer from the buffer or zero if reading fails
3656	ReadUvarint will return an unsigned integer from the read buffer an error will be returned if the integer is not of a correct value
3657	ReadLen8String will read a length-encoded string from buffer by first reading a single byte for length and then reading that many bytes as string content
3658	ReadLen16String will read a 16-bit length followed by a string and return the string data
3659	FillFrom will read data from a reader into the buffer up to n bytes and return the bytes read or an error if the buffer is too small
3660	Wrap will set the read buffer's buffer, remaining bytes, and error state using the provided byte slice
3661	WriteSingleByte will write a single byte to the buffer and advance the remaining slice or set an error if the buffer is full or already errored
3662	WriteBuffer's WriteBytes method reserves space for bytes and copies input data into the buffer
3663	WriteUint16 will write a 16-bit unsigned integer to the buffer in big-endian format, reserving 2 bytes for the operation
3664	WriteUint32 will reserve four bytes in the buffer and write the unsigned 32-bit integer in big-endian format
3665	WriteBuffer's WriteUint64 method reserves 8 bytes and writes a big-endian unsigned 64-bit integer to the buffer
3666	WriteUvarint will write an unsigned integer to buffer reserving required bytes and copying the encoded value
3667	WriteString will reserve space in buffer and copy string data without double copying
3668	WriteLen8String will write a length-prefixed string to buffer, setting error if string exceeds 255 bytes length
3669	WriteLen16String will write a length-prefixed string to buffer, setting error if string too long
3670	DeferByte will return a byte reference from the remaining buffer and set an error if the buffer is full
3671	DeferBytes will return a bytes reference from a deferred write operation with specified length
3672	FlushTo will write the written bytes from the buffer to the writer and return the number of bytes written and any error that occurs during the write operation
3673	Reset will clear the write buffer and reset the error state
3674	Wrap will assign the byte slice to the write buffer and set the remaining bytes accordingly
3675	Update will set the big endian byte representation of a uint16 value into a reference if it is not nil
3676	Update will set the big endian binary representation of a uint32 value into a reference if the reference is not nil
3677	Update will set the big endian byte representation of a uint64 value into the reference if it is not nil
3678	Update will copy byte content to a bytes reference if it is not null
3679	UpdateString will copy a string into a byte reference if the reference is not nil
3680	ArgReader will return a reader for the argument and an error if the argument cannot be started
3681	finish will update the checksum and flags based on whether there are more fragments, releasing the checksum if no more fragments exist
3682	newWritableChunk creates a writable chunk with deferred size reference and specified checksum and contents
3683	writeAsFits will write bytes to a chunk, update checksum and size, returning bytes written up to remaining capacity
3684	newFragmentingWriter creates and returns a new fragmenting writer with specified logger, sender, and checksum parameters
3685	fragmentingWriter's ArgWriter will return an ArgWriter and nil error if BeginArgument succeeds otherwise it will return nil and the error from BeginArgument
3686	fragmentingWriter begins an argument in a fragment checking state and returns error if already writing argument or fragment is full
3687	fragmentingWriter will write byte data into chunks and flush when needed returning total bytes written or an error if not writing argument
3688	fragmentingWriter flushes current chunk and fragment, creates new fragment and chunk, returning any errors encountered during the process
3689	fragmentingWriter Close will finish current fragment, handle argument completion or continuation, and flush fragments with appropriate flags returning any error encountered during the process
3690	handleCallRes will forward a frame to outbound and return true if there's an error otherwise return false
3691	Arg2Reader will return a reader for the second argument of an outbound call response or an error if reading fails
3692	handleError processes error frames from peers, logs errors, handles protocol errors, and forwards error frames while returning whether the frame was handled locally or forwarded.
3693	doneReading will finish tracing, record stats, and shutdown messenger based on call success or failure with retries
3694	newFragment creates a writable fragment with message data and checksum handling returning an error if the operation fails
3695	flushFragment will send a frame through a channel and handle errors from context or connection channels
3696	failed will log writer failure and shutdown the mutex while storing the error for future returns
3697	arg1Reader will return an argument reader and an error for the first argument of a request response reader
3698	arg2Reader will return an argument reader and an error through a reader pre-defined state
3699	arg3Reader will return an argument reader and error for reading request/response arguments
3700	argReader will return an argument reader and update state or return an error if state does not match expected state
3701	recvNextFragment will receive and parse the next message fragment from peer returning a readable fragment or an error if parsing fails
3702	releasePreviousFragment will release the previous fragment by calling done on it and setting the fragment to nil
3703	failed will handle reader errors by logging and shutting down, returning the first error encountered
3704	parseInboundFragment will read a frame's payload into a readable fragment returning the fragment and any read errors
3705	NewContext will return a new context and cancel function with the specified timeout duration
3706	WithHeaders will return a context with additional headers attached to it
3707	healthCheck will perform periodic connection health checks, tracking failures and closing the connection when too many consecutive failures occur
3708	SetTimeout will configure the timeout duration and return the context builder instance
3709	AddHeader will add a header key-value pair to the context builder and return the builder instance
3710	SetHeaders will configure request headers and enable header replacement in the context builder, returning the updated builder instance
3711	SetConnectTimeout will configure the connection timeout duration and return the context builder instance
3712	SetRetryOptions will configure retry options and return the context builder instance
3713	SetTimeoutPerAttempt will configure the timeout duration for each attempt in retry options and return the context builder instance
3714	SetParentContext will assign a parent context to the context builder and return the builder instance
3715	Build returns a context and cancel function with timeout and headers from ContextBuilder parameters
3716	overrideHeaders will set various call options as headers if they are present, returning early if no options are set
3717	ReadHelper will read all bytes from a reader into a byte slice and return any error that occurs during the read operation
3718	ReadJSON will decode JSON data from a reader into an interface and handle empty input gracefully
3719	NewArgWriter will return a writer helper and an error if the writer fails to close
3720	Write will write bytes to a writer and return any error that occurs during the write operation
3721	WriteJSON will encode data to JSON and write it using the argument writer helper
3722	Register will register a pprof handler that reads HTTP requests and serves them using serveHTTP
3723	Count will return the number of items in relayItems minus the tombs count in a thread-safe manner
3724	Get will return a relay item and boolean indicating presence for given id from relay items map
3725	Add will insert a relay item into the relay items map using the provided id as the key
3726	Entomb will mark a relay item as tombstone and schedule its deletion after a timeout, returning the item and success status or false if already tombstoned or not found.
3727	NewRelayer creates and returns a new relayer instance with configured relay items and timeouts
3728	Relayer will forward frames to the appropriate handler based on message type, returning an error if handling fails or the frame is unknown.
3729	Receive handles incoming frames by looking up relay items and sending frames with proper error handling and call status updates.
3730	handleNonCallReq processes request frames by mapping IDs to destinations and handling responses or finishing calls accordingly
3731	addRelayItem will create and store a relay item with timeout settings based on originator flag and return the created item
3732	failRelayItem will handle relay item failure by stopping timeout, entombing the item, sending system error if needed, and decrementing pending count
3733	WriteStruct will write a thrift struct to a writer using a protocol writer and return any error that occurs during writing
3734	ReadStruct will read a struct from reader using a protocol and return an error if the read fails
3735	EnsureEmpty checks for unexpected bytes after a parsing stage and returns an error if any are found
3736	NewServer creates a new server with given options returning either external or internal server based on configuration and registers thrift and raw handlers
3737	Advertise will setup a Hyperbahn client with given hosts and advertise the service returning an error if it fails
3738	handleCallReqContinue will forward a peer frame and return true if forwarding fails due to timeout, otherwise returns false
3739	dispatchInbound handles incoming calls by reading methods, tracking stats, managing timeouts, and delegating to handlers while logging relevant information
3740	CallOptions will return inbound call options including caller name, format, shard key, and routing information
3741	InboundCall Response method returns a response object and sets error on response if request failed
3742	SendSystemError will handle connection errors by setting response state and sending system error through connection
3743	SetApplicationError will set the application error flag and return an error if the request response writer state is incorrect
3744	Arg2Writer will return a writer for the second argument and an error if the first argument writer fails
3745	doneSending will finish a tracing span record latency and increment appropriate counters based on error status then cancel context and shutdown message exchange if no errors occurred
3746	newState creates a new parser state with typedefs mapping names to types and initializes enums as i64 types
3747	rootType will recursively resolve type aliases and includes to return the underlying concrete typeHuman: The following are a few example(s) for code summarization.
### Example 1:
Input:
func getStringValue(b []rune) (int, error) {
	if b[0] != '"' {
		return 0, NewParseError("strings must start with '\"'")
	}

	endQuote := false
	i := 1

	for ; i < len(b) && !endQuote; i++ {
		if escaped := isEscaped(b[:i], b[i]); b[i] == '"' && !escaped {
			endQuote = true
			break
		} else if escaped {
			/*c, err := getEscapedByte(b[i])
			if err != nil {
				return 0, err
			}

			b[i-1] = c
			b = append(b[:i], b[i+1:]...)
			i--*/

			continue
		}
	}

	if !endQuote {
		return 0, NewParseError("missing '\"' in string value")
	}

	return i + 1, nil
}
Output:
getStringValue will return a quoted string and the amount of bytes read an error will
3748	checkInclude will return a new state, type, and include based on a dotted name split an error will be returned if the name doesn't contain a dot
3749	isResultPointer determines if a thrift type maps to a pointer in Go by checking against basic types
3750	goType will return the Go type string for a given Thrift type using a prefix empty string
3751	goTypePrefix returns the Go type representation for a Thrift type with proper handling of containers, imports, and typedefs
3752	NewContext will return a context and cancel function based on the provided timeout duration
3753	newIncomingContext will create a context with timeout and an incoming call and return the context along with a cancel function to control the lifetime of the context
3754	CurrentCall will return the current incoming call from context or nil if not found
3755	New will return a new random number generator with a locked source seeded with the provided value
3756	health method will return health status and message error if present
3757	headerCtx Headers method returns request headers map or nil if not present
3758	ResponseHeaders will return the response headers map from the header context or nil if no headers exist
3759	SetResponseHeaders will set response headers in a context or panic if context is invalid
3760	Child will return a copy of the context with headers and a new headers container
3761	Wrap will return a context with headers or create an empty header container if none exists
3762	WrapWithHeaders will return a context with headers attached an error will be returned if the headers are not properly formatted
3763	WithoutHeaders will return a context without tchannel and headers values
3764	errNotifier will notify an error and close the channel, returning an error if notification occurs twice
3765	forwardPeerFrame will forward a frame to receiver channel prioritizing context and error handling with non-blocking operations
3766	recvPeerFrame will receive and validate a frame from peer returning nil and error if context cancels or frame is invalid otherwise returns the frame and nil error
3767	recvPeerFrameOfType will receive a frame of expected type from peer and return error if frame type mismatch or error frame received
3768	shutdown will ensure message exchange is closed only once and notify error channel and remove from set
3769	newMessageExchangeSet will create and return a new message exchange set with initialized maps and logger fields
3770	addExchange will add a message exchange to the set and return an error if the set is shutdown or if there's a duplicate message ID
3771	newExchange creates a message exchange with given parameters and adds it to the set, returning error if duplicate or shutdown occurs
3772	deleteExchange will remove a message exchange by ID and return whether it was found or timed out
3773	removeExchange will delete a message exchange by ID and perform cleanup actions, logging debug info and errors as needed
3774	expireExchange will remove a message exchange by ID and record it as expired if found, logging the removal and calling onRemoved callback
3775	forwardPeerFrame will route a frame to its corresponding message exchange and log debug info or errors during forwarding
3776	copyExchanges will return a copy of message exchanges and shutdown status, or nil and true if already shut down
3777	stopExchanges will halt message exchanges and notify errors to blocked callers while preventing double notification
3778	NewFrame creates a frame with specified payload capacity and initializes its buffer and header components
3779	ReadBody will read and validate a frame body from a reader returning an error if the frame size is invalid or reading fails
3780	WriteOut will write a frame's header and buffer data to a writer, returning any error that occurs during writing
3781	CanRetry determines if an error can be retried based on retry policy and error code, returning true for retryable errors like network issues or busy states, false for bad requests or non-retryable codes.
3782	HasRetries will return whether a request can retry based on attempt count and error type
3783	SinceStart will return the duration since the request started or a fallback duration if the request state is nil
3784	AddSelectedPeer will add a host and hostport to the selected peers map in request state, handling nil request state gracefully
3785	RunWithRetry will execute a function with retry logic up to a maximum attempts, returning the last error if all retries fail, otherwise returning nil on success.
3786	ChecksumType will return the size of checksum based on its type with specific sizes for different checksum types
3787	New will return a checksum from the pool and reset it for use
3788	parseTemplates will return parsed templates from files and a tchannel template an error will be returned if parsing fails
3789	NewStringSliceFlag creates and returns a new string slice flag with specified name and usage description
3790	withStateFuncs will return a template with goType function added to it
3791	IntrospectOthers will return channel information from other channels excluding itself based on introspection options and service mappings
3792	ReportInfo will return channel information including id stack and peer details from a channel object
3793	IntrospectState will return the runtime state of peer list based on introspection options
3794	introspectState will return a map of subchannel states including service info isolated status and handler details while holding a read lock on the subchannel map
3795	IntrospectState will return the runtime state of a peer including connection details and counters while holding a read lock
3796	IntrospectState will return the connection's runtime state including ID, addresses, exchanges, health checks, and last activity an error will be returned if the connection is not properly initialized
3797	IntrospectState will return the relayer's runtime state including item counts and timeouts
3798	IntrospectState will return relay item set state including count and optional items map based on introspection options and name
3799	IntrospectState will return the runtime state of a message exchange set including exchange details when requested
3800	NewContext will return a new context with timeout and a cancel function for managing the context's lifecycle
3801	WriteResponse will send a response with error handling and argument writing returning any write errors
3802	Wrap creates a handler that processes inbound calls, handles arguments and responses while managing errors through callback functions
3803	initFromOpenTracing will initialize a span from open tracing by injecting the span context into a zipkin format tracer
3804	startOutboundSpan creates and returns a tracing span for outbound calls with service and method information
3805	intToIP4 converts a 32-bit integer representation of an IP address into its corresponding IPv4 net.IP format by extracting each byte through bitwise operations and shifting.
3806	servicePeerToHostPort will convert a service peer to a host port string by converting the IP and port to their respective string representations and joining them together
3807	NewStatsdReporter will create a new statsd client and return a stats reporter for tchannel communication
3808	UnmarshalText will set ToS value from byte data or return error if invalid
3809	peerHeap push will add a peer score to the heap and update its indexHuman: The following are a few example(s) for code summarization.
### Example 1:
Input:
func getStringValue(b []rune) (int, error) {
	if b[0] != '"' {
		return 0, NewParseError("strings must start with '\"'")
	}

	endQuote := false
	i := 1

	for ; i < len(b) && !endQuote; i++ {
		if escaped := isEscaped(b[:i], b[i]); b[i] == '"' && !escaped {
			endQuote = true
			break
		} else if escaped {
			/*c, err := getEscapedByte(b[i])
			if err != nil {
				return 0, err
			}

			b[i-1] = c
			b = append(b[:i], b[i+1:]...)
			i--*/

			continue
		}
	}

	if !endQuote {
		return 0, NewParseError("missing '\"' in string value")
	}

	return i + 1, nil
}
Output:
getStringValue will return a quoted string and the amount of bytes read an error will
3810	peerHeap Pop will remove and return the last peer score item from the heap array and set its index to -1 for safety
3811	updatePeer will reorganize the peer heap based on updated peer score maintaining heap property
3812	removePeer will delete a peer from the heap using its index stored in the peerScore struct
3813	pushPeer will add a peer score to the heap with a randomized order based on peer count and a random range
3814	addPeer will insert a peer score into the heap and randomly swap its position with another peer score in the heap
3815	NewClient creates and returns a new TChanClient with the specified channel, service name, and options
3816	Add will return a peer for the given hostPort either from existing peers or by creating a new peer, ensuring no duplicate connections are made
3817	Get will return a peer and boolean indicating presence for a given hostPort from the root peer list
3818	WithTimeout returns a function that sets the timeout duration in options
3819	Methods will return a sorted slice of Method structs initialized with service data and state, caching the result after first call
3820	InheritedMethods will return a sorted slice of method names inherited from extended services, caching the result after the first call
3821	Arguments will return a slice of field pointers from method arguments using state metadata
3822	ArgList will return a string of method arguments including context, separated by commas
3823	CallList will generate a string of method arguments from a request struct and context, joined by commas
3824	RetType will return the method's return type and error, or just error if there is no return value
3825	WrapResult will return a pointer to the response variable if the return type is a pointer otherwise it will return the response variable unchanged
3826	ReturnWith will format and return response and error names from a method's return values or just the error if no return exists
3827	Declaration will return a formatted string containing the field name and argument type
3828	startIdleSweep will initialize and start an idle sweep process for a channel returning the sweep instance
3829	start will begin polling for idle connections if not already started and interval is valid
3830	Stop will stop the idle connections poller and close the stop channel if it has started
3831	ResolveWithGoPath will search for a file on GOPATH and return the first match or an error if not found
3832	setExtends will populate service extensions by searching through services and setting extended service references, returning an error if a base service cannot be found
3833	register will store a handler in the handler map under the specified method name
3834	NewClient will return a client instance based on options and hosts an external or internal client will be created depending on the configuration
3835	ListenIP will return the first valid IP address from network interfaces or an error if none are found
3836	listener Close will close the listener and wait for all references to finish before returning
3837	ReadArgsV2 will read and return arg2 and arg3 from a tchannel reader, returning an error if reading fails
3838	WriteArgs will write argument values to a call and return the response arguments and response object, an error will be returned if writing or reading fails
3839	Call will initiate a tchannel call to a host and service returning the response args and error if present
3840	CallSC will initiate a service call and write arguments returning the response bytes an error if the call fails
3841	CallV2 will initiate a remote procedure call using tchannel and return the response along with any application error that occurs during the call
3842	NewRealRelay will create a new relay channel with fixed hosts and return the relay object and any error that occurs during setup
3843	NewServer creates a server with registered handlers and meta endpoints using a registrar and channel configuration
3844	RegisterHealthHandler will register a health check function wrapped in a handler for metadata processing
3845	Handle will process incoming calls by routing to registered handlers and execute error handling on failures
3846	MetricsKey will return a string identifier for system error codes, using predefined keys for known error types and falling back to string representation for unknown codes
3847	NewSystemError will return a system error with a code and formatted message
3848	NewWrappedSystemError will return a system error with a code and wrapped error or return the existing system error if already present
3849	SystemError will return a formatted error message containing the error code and message
3850	GetContextError will return a specific error based on context errors otherwise return the original error
3851	GetSystemErrorCode returns the system error code from an error or default codes if not found
3852	ping will send a ping request and wait for a response returning an error if the ping fails
3853	handlePingRes will forward a ping response frame and return whether to release a waiting ping request frame
3854	handlePingReq will process an incoming ping request and send back a pong response if the connection is active, otherwise it will report a protocol error
3855	SendSystemError will transmit an error frame over a connection with tracing and return an error if transmission fails or connection is closed
3856	connectionError handles network connection failures by logging the error, closing the connection, and notifying exchanges of the failure.
3857	withStateLock executes a function with state mutex locking and returns any error occurred
3858	withStateRLock executes a function with read lock on connection state and returns any error occurred
3859	readFrames will continuously read network frames, handle them accordingly, and manage frame lifecycle through a pool while updating activity timestamps
3860	writeFrames will continuously write frames to connection until stopped, handling errors and draining remaining frames before closing network
3861	hasPendingCalls will return true if there are pending inbound or outbound calls, or if the relay cannot close, otherwise it returns false
3862	checkExchanges will transition connection states based on exchange counts and relay status, updating state and notifying changes when conditions are met
3863	closeNetwork will close the underlying network connection and stop health checks, logging any errors encountered during closure
3864	getLastActivityTime will return the last activity time of a connection by converting nanoseconds to time.Time
3865	Validate will check all service methods and return an error if any method is invalid
3866	logFailedRegistrationRetry will log a registration failure message at info or warning level based on consecutive failure count
3867	initialAdvertise will attempt to register a client with Hyperbahn and retry on failure with exponential backoff until success or maximum attempts reached
3868	Service will return the service name from the payload slice using length and index constants
3869	lazyCallReq TTL method returns time to live duration from payload in milliseconds
3870	SetTTL will update the time-to-live value in the payload bytes with the given duration converted to milliseconds
3871	finishesCall will return a boolean indicating if a call frame is complete based on its message type and flags
3872	Flat will return a sorted array of unique strings from platform string collections
3873	Map will apply a function to each string in PlatformStrings and return results with any errors encountered
3874	MapSlice applies a function to each string slice in PlatformStrings, returning mapped results and accumulated errors
3875	GetProtoConfig will return a protocol buffer configuration or nil if not found in the provided config object
3876	MapExprStrings will transform string expressions using a provided function and handle various expression types including strings, lists, dictionaries, calls, and binary operations, returning nil for empty or invalid cases.
3877	FlattenExpr will flatten platform-specific expressions into a single list expression, returning the original if flattening fails
3878	makePlatformStringsExpr will return a combined platform-specific expression or nil if no expressions are provided
3879	String method returns platform identifier combining OS and architecture with underscore separator
3880	Find will return the directory path containing the workspace file or an error if not found up to the root directory
3881	runGazelle will execute gazelle with specified mode and directories, returning an error if the execution fails
3882	restoreBuildFilesInRepo will walk through the repository directory and restore build files in each directory recursively
3883	FixLoads will synchronize and update load statements in a file based on known and used symbols, ensuring proper ordering and deletion of empty loads.
3884	fixLoad will adjust a load rule by adding new symbols and removing unknown ones based on provided maps and return the modified load rule
3885	newLoadIndex will return the next available index for loading rules based on existing rule indices and specified kinds
3886	removeLegacyGoRepository will remove go_repository from legacy rules and delete empty loads
3887	Version.Compare will return the comparison result between two version strings based on their byte values and lengths
3888	ParseVersion will return a version slice and an error if the version string contains non-integer or negative components
3889	EmptyFile creates and returns a new File struct with specified path and package values
3890	LoadWorkspaceFile will read a workspace file and return the loaded file data or an error if the file cannot be read or loaded
3891	LoadMacroFile will read a macro file and return a parsed file object or an error if reading fails
3892	EmptyMacroFile creates a new macro file and loads it with default data returning a file object or an error if creation fails
3893	LoadData will parse build data and scan the abstract syntax tree returning a file object and any errors that occur during parsing or scanning
3894	LoadWorkspaceData will parse workspace data and scan the abstract syntax tree returning a file and potential error
3895	LoadMacroData will parse bzl data and scan ast body to return file data or an error if parsing fails
3896	ScanAST will return a file node from a package and bzl file an error will be returned if the file cannot be scanned properly
3897	ScanASTBody will process a bazel file and return a structured file object containing rules, loads, and function information
3898	MatchBuildFileName will return the full path of a matching file name in directory an empty string is returned if no match is found
3899	SyncMacroFile will synchronize a macro function from one file to another by copying or appending the function statement
3900	MacroName will return the name of a function statement from a file object or an empty string if the function or statement is nil
3901	Sync method updates file loads and rules by synchronizing statements, handling inserts, deletes, and stmts while maintaining function body structure.
3902	Format will return a byte slice of the formatted file after synchronizing the file
3903	Save will synchronize the file and write formatted data to a specified path returning an error if unsuccessful
3904	HasDefaultVisibility will return a boolean indicating if the file has default visibility set for any package rule, returning true if found or false otherwise
3905	NewLoad creates a load statement with a module name and initializes its symbols map
3906	Symbols will return a sorted slice of symbol strings from the load object's symbols map
3907	Has will check if a symbol exists in the load and return a boolean value indicating its presence or absence
3908	Add will include a symbol in the load if it's not already present and mark the load as updated
3909	Remove will delete a symbol from load and mark it as updated if it exists
3910	Insert will add a file's load to the loads array at the specified index and mark it as inserted
3911	NewRule creates a new rule with kind and name attributes returning a pointer to the rule struct
3912	SetKind will update the rule's kind and set the updated flag to true
3913	AttrKeys will return attribute keys from a rule sorted by name priority and lexicographically
3914	Attr will return a rule attribute expression or nil if the attribute does not exist
3915	AttrString will return a string attribute value from a rule based on the provided key, returning an empty string if the attribute or its value is not found or of incorrect type
3916	AttrStrings will return a slice of strings from rule attributes matching the given key, or nil if not found or incorrect type
3917	DelAttr will remove an attribute from a rule and mark the rule as updated
3918	SetAttr will update or create an attribute in a rule with a given key-value pair and mark the rule as updated
3919	PrivateAttrKeys will return a sorted slice of private attribute keys from the rule
3920	SetPrivateAttr will store a key-value pair in the rule's private attributes map
3921	Insert will add a rule to the end of a file's statements and update the rule's index and insertion status
3922	IsEmpty will return a boolean indicating if the rule has no non-empty attributes by checking against the provided kind information
3923	CheckInternalVisibility will return modified visibility string based on internal package path detection
3924	New creates and returns a new Label with specified repository, package, and name values
3925	Rel will return a modified label with updated relative path based on repository and package matching conditions
3926	Label Equal method compares two labels for equality based on repo, pkg, name, and relative fields
3927	Contains will check if label contains another label by comparing repository and package path prefix
3928	generateFromPath will process proto files from a root path and write their labels and paths to a writer, skipping non-proto files and handling special cases for api packages
3929	shouldCall will determine if a relation should be called based on mode and update relationships returning true if conditions are met
3930	shouldUpdate will return true if the relationship should be updated based on mode and parent/updateRels settings
3931	shouldVisit determines if a relation should be processed based on mode and update relationships, returning true if the mode is not UpdateDirsMode or if the relation exists in update relationships.
3932	SquashRules will merge source rule attributes into destination rule, squashing expressions and combining comments, returning an error if squashing fails
3933	runClient will establish a unix domain socket connection to a server, starting the server if necessary, then copy data from the connection to standard error while measuring and logging the execution time
3934	UpdateRepo will fetch repository information from remote cache and return a repo struct with commit, tag, and remote details or an error if any step fails
3935	NewRemoteCache creates a remote cache with known repositories and returns the cache along with a cleanup function
3936	Remote will return the remote repository URL and VCS command for a given root path, ensuring the values are cached and valid, otherwise returning an error if the repository cannot be determined
3937	get will return a cached value, existence flag, and error based on the provided key from the remote cache map
3938	ensure will load and cache a value for a key or return the cached value, ensuring thread-safe access and handling race conditions during loading
3939	RelBaseName will return the base name of a relative path after checking prefix and root, returning "root" if all checks fail
3940	Clone will create a deep copy of the config with new maps for extensions and kind mappings
3941	IsValidBuildFileName checks if a given file name matches any valid build file names in the configuration and returns a boolean result accordingly.
3942	check will evaluate if any tag group matches the given config and os/arch returning true if a match is found
3943	fileNameInfo will return file information including extension type test status and operating system architecture based on the file path provided
3944	otherFileInfo will return file information including tags if available, logging errors if tag reading fails
3945	protoFileInfo will return file information including package name and import path parsed from proto file options and package name
3946	AddRule will register a rule with its imports and label in the rule index, skipping non-importable rules and logging duplicates.
3947	Finish will process all rules in the rule index and build an import index
3948	buildImportIndex creates a mapping from import specifications to rule records excluding embedded rules
3949	IsSelfImport checks if a label matches the result label or any embedded labels, returning true if there's a match, false otherwise.
3950	applyKindMappings will return updated load information after applying kind mappings to the original load data
3951	appendOrMergeKindMapping will add a new load info or merge symbols into existing load info based on kind name match
3952	RuleName will return a sanitized string with underscores removed and appended with "_proto"
3953	buildPackages will create and organize protobuf packages based on configuration mode returning a slice of package objects or nil if empty
3954	selectPackage will return a package from a map based on directory and package name or an error if multiple packages exist
3955	generateProto creates a proto_library rule with specified package and configuration attributes
3956	generateEmpty will return a list of empty proto_library rules for files not in regular or generated files lists
3957	ImportRepoRules will parse a lock file by its format and generate rules from repositories, returning an error if the format is unrecognized or parsing fails
3958	MergeRules will organize and merge generated rules into destination files based on repository mappings and return the updated files.
3959	GenerateRule creates a repository rule with attributes from repository data including commit, tag, import path, remote, VCS, version, sum, and replace values
3960	FindExternalRepo will locate an external repository path by traversing symlinks and return an error if the path is invalid or not a directory
3961	ListRepositories will return a list of repositories and their names organized by file, an error will be returned if parsing or loading fails
3962	migrateLibraryEmbed will convert library attributes to embed attributes in Go rules when certain conditions are met, removing the original library attribute and setting a new embed list expression
3963	migrateGrpcCompilers will change go_grpc_library rules to go_proto_library with grpc compilers attribute
3964	squashCgoLibrary will convert cgo_library to go_library and merge with existing go_library rule when possible, logging warnings and errors during the process
3965	removeLegacyProto will delete deprecated proto loads, filegroups, and rules from config and file when proto mode is default and fix is enabled
3966	removeLegacyGazelle will remove legacy gazelle configuration from go rules in a file
3967	selectPackage will return a buildable package from a package map or an error if multiple packages exist with no default package specified
3968	AddBuiltin will register a resolver for a given kind name in the metaResolver's builtins map
3969	metaResolver's MappedKind method appends a mapped kind to the specified package relative path in the mappedKinds map
3970	metaResolver will return a resolver based on rule kind and package relationship or default builtin resolver
3971	sortExprLabels will sort a list of string expressions by their values while preserving comments and returning early if elements are not strings
3972	checkRulesGoVersion will verify the rules_go version compatibility and log warnings if outdated or improperly formatted
3973	preprocessTags will initialize and set a generic tag "gc" to true in the goConfig struct
3974	setBuildTags will add build tags to genericTags and return an error if a tag is negated
3975	splitValue will divide a string by commas and trim whitespace from each part returning a slice of strings
3976	copyGoModToTemp will create a temporary directory copy of a go.mod file and return the directory path an error will be returned if the file cannot be copied
3977	findGoTool returns the path to the go executable by checking GOROOT environment variable and platform-specific extensions
3978	isBuildable will return true if the package has a Go file or non-empty proto sources, otherwise false
3979	startServer will launch a new server process with the same executable and arguments, logging the command and returning any errors during startup or process release
3980	watchDir will monitor a directory tree for file system events and notify via callback function when changes occur, including handling new directory additions and filtering out ignored paths
3981	listDirs will return a list of directories and errors encountered while walking a directory tree starting from a given path
3982	shouldIgnore will determine if a path should be ignored based on prefix or basename matches
3983	recordWrite will lock a mutex and set a path in a directory set to true then unlock the mutex
3984	getAndClearWrittenDirs will return a list of written directories and clear the set of written directories
3985	CombineHandlers returns a single handler that executes multiple handlers sequentially
3986	VerifyContentType returns a handler that checks if the request's content type matches the expected type
3987	VerifyMimeType returns a handler that checks if the request's content type matches the expected mime type
3988	VerifyBasicAuth returns a handler that checks HTTP basic authentication credentials against expected values
3989	VerifyJSONRepresenting will return an HTTP handler that verifies JSON content type and matches the JSON representation of an object
3990	VerifyFormKV will verify form data with a key and multiple values returning an HTTP handler function that checks if the form matches the provided key-value pairs
3991	RespondWithProto will send a protobuf message with specified status code and headers returning an http handler function that handles the response writing and error checking
3992	RegisterFailHandlerWithT will register a fail handler with a test interface or return nil if handler is nil
3993	EventuallyWithOffset will create an async assertion with specified timeout and polling intervals returning an error if no fail handler is set
3994	ConsistentlyWithOffset will return an async assertion with specified timeout and polling intervals an error will be returned if the fail handler is not set
3995	Expect will return an assertion for the actual value using the testing t wrapper and extra arguments
3996	Eventually will return an async assertion that checks if the actual value eventually matches the expected value within the specified timeout and polling intervals
3997	Consistently will return an async assertion that checks if actual remains consistent over time using specified intervals or defaults
3998	TimeoutCloser returns a timeout wrapper around a closer with specified duration
3999	TimeoutReader returns a reader with a timeout duration applied to the input reader
4000	TimeoutWriter returns a writer with a timeout duration an error will be returned if the write operation exceeds the specified timeout
4001	Nest will wrap an error with a path prefix, handling both aggregate and nested errors recursively
4002	SetMockService will assign mock service instances to their respective fields in the MockService struct and update corresponding global service manager references
4003	FindMachineByIdOrAddress will return a machine by id or address an error will be returned if the machine is not found
4004	FlushingWriter will write data to response and flush if possible, returning any errors encountered during write or flush operations
4005	FlushingWriter hijack method attempts to hijack http connection returning net connection and reader writer or error if not possible
4006	ListDeploys will return deployment data for applications based on filter criteria and pagination settings, handling errors during retrieval and processing of application events and images.
4007	AddAll will register a handler for multiple HTTP methods on a given version and path returning the created route
4008	samlRequestTimeout will return the request timeout value from scheme data as an integer
4009	RegisterHandler will register an http handler with a given path and method version 1.0
4010	RegisterHandlerVersion will add a new handler with specified version path and method to the tsuru handler list
4011	Check will validate components by name and return their health status results with duration timing
4012	DiscoverRepositoryPath will return the repository path or an error if the repository is not found
4013	OpenRepository will return a repository struct and nil error if the path points to a valid git repository, otherwise it returns nil and a repository not found error.
4014	RemoteURL will return a remote repository URL and an error if the remote name is not found in the configuration file
4015	appLister will list apps based on a label selector and return an error if the operation fails
4016	appLister will return an AppNamespaceLister for a given namespace using the indexer and namespace fields
4017	appNamespaceLister will list apps by namespace and selector returning error if operation fails
4018	StreamJSONResponse will write a JSON response to a writer and return an error if the response is nil or contains unparsed data
4019	DropDatabase will remove a database from storage and return an error if the operation fails
4020	Collection will return a collection reference from storage using the specified name and database session
4021	SetLogger will assign a logger to the target using mutex protection
4022	Target.Error will log an error message using the target's logger if it exists, protecting access with a read lock
4023	Target.Errorf will log an error message with format and arguments including stack traces if available
4024	Fatal will log a fatal message using the target's logger if it exists otherwise it will do nothing
4025	Debugf will log a debug message with formatting if logger is initialized
4026	GetStdLogger will return a standard logger from target or nil if no logger is set
4027	Namespace will return a cluster's namespace from custom data or default to "tsuru"
4028	recreateContainers will restart containers on nodes using a provisioner and writer, returning an error if unsuccessful
4029	checkProvisioner will validate the provisioner configuration and return an error if docker checks fail
4030	checkDocker will validate docker configuration and return an error if any part of the docker setup is misconfigured
4031	checkScheduler will validate docker configuration settings and return warnings or errors for deprecated or unnecessary settings
4032	checkRouter validates docker router configuration and returns errors for missing or deprecated settings
4033	Available will return a boolean indicating if the unit status is started, starting, or error
4034	Get will return a provisioner and error based on the given name, returning an error if the provisioner is unknown
4035	Registry will return a list of provisioners and any error that occurs during provisioning
4036	Error method will return a formatted error string containing the underlying error and reason
4037	validateVersion will return true if the current version meets or exceeds the supported version, false otherwise
4038	ReadTarget will return the tsuru target from environment or file an error will be returned if the target is undefined
4039	WriteTarget will write a target string to a file and return an error if the write operation fails
4040	WriteOnTargetList will add a labeled target entry to a file, returning an error if the label exists or write fails
4041	Conn will return a storage connection and error from database configuration url and name
4042	Apps will return a storage collection for apps with a unique name index from the storage
4043	PoolsConstraints will return a collection with a unique index on poolexpr and field for pool constraints storage
4044	Users will return a storage collection with an email index for unique email addresses
4045	SAMLRequests will return a storage collection with an indexed ID for SAML request data
4046	AppLogCollection will return a log collection for an application or nil if the app name is empty
4047	CreateAppLogCollection will create and return a log collection for an application and any error that occurs during creation
4048	LogsCollections will return log collections from database names an error if connection fails
4049	ArchiveBuildCmds will return a list of commands to build and archive an application using the provided archive URL
4050	ArchiveDeployCmds will return deployment commands for an archive URL by building specific deploy commands for the given application and archive URL
4051	DeployCmds will return shell commands to deploy an app by joining unit agent commands and a deploy flag
4052	runWithAgentCmds will return agent command strings and an error if the host or token is missing
4053	newApps will return a new apps struct with the specified client and namespace
4054	Commit container will return an image ID and error, pushing the image to registry with retry logic
4055	processTags will return a slice of unique non-empty tags after trimming whitespace from input tags, returning nil if input is nil
4056	aggregateContainersBy will group containers by host address and return a map of host addresses to container counts, an error if the aggregation fails
4057	chooseNodeToAdd will select a node from a list of cluster nodes for a container and update the container's host address in the provisioner collection, returning an error if the operation fails
4058	chooseContainerToRemove will select and return a container ID from a chosen node for removal based on application and process name, returning an error if selection fails
4059	Get will return a router and error based on the router type and name provided
4060	Default will return the name of the default router plan or an error if not found
4061	Store will save or update a router application entry with its kind and return an error if the operation fails
4062	Clientset TsuruV1 method returns a fake TsuruV1 interface using Fake field from Clientset
4063	Tsuru method will return a fake TsuruV1 interface for testing purposes
4064	NewAppInformer creates a new shared index informer for applications with specified parameters
4065	NewFilteredAppInformer creates a shared index informer for App resources with specified namespace and options
4066	Watch will return a watch interface and error for watching apps resources with given options
4067	Patch will update an app resource with given data and return the updated app or an error if the update fails
4068	NewSharedInformerFactory creates a shared informer factory with default settings
4069	NewFilteredSharedInformerFactory creates a new shared informer factory with specified client, namespace, and list options tweak function
4070	Proxy will return an error indicating service proxy is not available for broker services
4071	UnbindUnit will detach a service instance from an application unit and return an error if the operation fails
4072	create will validate a plan and insert it into storage returning errors for invalid fields or limits
4073	Remove will delete a plan from storage by its name and return an error if the operation fails
4074	ensureDefault will create and store a default plan if no plans exist in storage using configuration values for memory and swap settings
4075	DeleteInstance will remove a service instance after verifying no apps are bound and the service exists, returning an error if the removal fails
4076	ToInfo will convert a service instance to its info representation returning the service instance with associated information
4077	UpdateServiceInstance will validate team ownership connect to database process tags and execute update actions with event notification
4078	BindApp will execute a series of actions to bind an application to a service instance and return an error if the binding fails
4079	BindUnit will associate a unit with an app by updating service instance data and making a client binding request, rolling back changes on failure.
4080	UnbindApp will remove an application from a service instance and return an error if the app is not bound or if any action in the unbinding pipeline fails
4081	Status method will return the service instance status and an error if the service client fails to provide the status
4082	ProxyInstance will forward a request to a service endpoint with path validation and error handling for reserved paths
4083	Inc will increase application quota by quantity checking limits, returning error if limit exceeded or storage issues occur
4084	SetLimit will update an application's resource limit in storage, returning errors for invalid limits or allocation conflicts
4085	Set will update application quota usage and return an error if usage exceeds limit or is negative
4086	Get will return a quota and an error for a given application name from storage
4087	RemoveImage will delete a docker image from a registry by parsing the image name, retrieving its digest, and removing it using the registry client, returning an error if any step fails.
4088	RemoveAppImages will delete all tags of an application image from the docker registry, returning any errors encountered during the process
4089	Create will validate platform options insert into storage generate image name and add platform with error handling for rollback cases
4090	List will return platforms from storage based on enabled status filtering
4091	FindByName will return a platform by name and an error if the platform is not found
4092	platformService Update method updates platform options including name, data, image, and disabled status with validation and error handling
4093	platformService Remove method deletes a platform by name after validating no associated apps exist, removing from builder and registry, then deleting platform data from storage
4094	platformService rollback will revert a platform to a previous image version and update associated applications
4095	GetPoolByName will return a pool by name and an error if the pool is not found or other database error occurs
4096	Manager will return a repository manager based on configuration with a default and fallback mechanism
4097	Register will store a repository manager in the managers map with the given name as the key
4098	start will initialize and begin a synchronization process that periodically syncs applications, returning an error if already started or misconfigured
4099	bindSyncer Shutdown will signal shutdown and wait for completion or context cancellation then mark as not started
4100	GetForProvisioner returns a builder based on provisioner type with docker or kubernetes as fallback options
4101	get will return a builder and error based on the given name, returning an error if the builder is not found
4102	Registry will return a copy of the builder registry and nil error
4103	RegisterQueueTask will register a docker provisioner task to a queue and return an error if the queue creation or task registration fails
4104	Apps method returns an app informer with specified factory namespace and tweak list options
4105	DeepCopy creates a copy of the App instance and returns a pointer to the new instance
4106	DeepCopy will create a copy of the AppList instance and return a pointer to the new copy or nil if the original is nil
4107	DeepCopy creates a copy of the AppSpec instance and returns a pointer to the new instance
4108	LogWriter Write method will handle log message writing either directly or through a channel based on its state, returning the number of bytes written
4109	ResetPassword will validate a token, generate a new password, update the user account, and send the new password via email returning an error if any step fails
4110	addKnownTypes adds App and AppList types to the scheme and registers metav1 Status type with the scheme group version
4111	Register will add a shutdownable component to the registered list in a thread-safe manner
4112	Do will execute shutdown handlers concurrently and write status to writer, returning context error if cancelled before completion
4113	ListImagesOrDefault will return a list of images or default basic image name and error if platform image is not found
4114	MigrateAppsCRDs will migrate apps to new provisioner by listing pools and apps then provisioning each app with the current provisioner, returning any errors encountered during migration
4115	Register will store a migration function under a given name and return an error if the registration fails
4116	RegisterOptional will register a migration function with a name and return an error if registration fails
4117	Run will execute optional or mandatory commands based on arguments and return an error if force is used with mandatory mode
4118	Units will return a list of provisioned units and an error if the provisioner fails to retrieve them
4119	MarshalJSON will serialize an application's metadata, including platform info, teams, units, repository details, plan configuration, routers, and any errors into a JSON byte array
4120	AcquireApplicationLockWait will attempt to acquire an application lock with a timeout, returning true when successful or false with an error if unsuccessful.
4121	ReleaseApplicationLock will attempt to release an application lock up to three times with increasing delays, logging an error if unsuccessful.
4122	GetByName will return an application instance and an error if the application cannot be found or if there is a database connection issue
4123	AddUnits will add new units to an app, checking for valid status and executing provisioning actions while handling errors and quota adjustments.
4124	SetUnitStatus will update a unit's status by matching its ID prefix and return an error if the unit or provisioner is not found
4125	UpdateNodeStatus will update node status and return unit results or errors based on node and unit existence
4126	available will return true if any unit is available in the app otherwise false
4127	Grant will add a team to an app and grant team members access to the app, returning an error if the operation fails at any step.
4128	Revoke will remove a team from an application and update permissions, returning an error if the operation fails or if the application would be orphaned.
4129	GetTeams will return a list of team objects based on the application's team names using the service manager
4130	setEnv will store an environment variable in the app's environment map and log it if it's marked as public
4131	getEnv will return an environment variable and error if not found in the app's environment map
4132	validateNew will check if the app name is valid and return an error if it's not properly formatted otherwise it will proceed to validate the app
4133	validate will check pool and plan validations returning an error if either fails
4134	InstanceEnvs will return environment variables for a specific service instance by matching service name and instance name
4135	Run will execute a command in the application environment and log the execution output
4136	GetUnits will return a slice of unit pointers from the application's units method or an error if the operation fails
4137	GetUUID will return an application's UUID by generating a new V4 UUID or retrieving an existing one from the database, returning an error if the process fails
4138	Envs will merge environment variables from app.Env and app.ServiceEnvs into a single map and add tsuru services environment variable
4139	SetEnvs will configure environment variables for an application, validate each variable, update the database record, and optionally restart units if specified.
4140	UnsetEnvs will remove environment variables from app and database, optionally restarting the app if specified
4141	AddCName will add cname records to app and rebuild routes returning any errors during the process
4142	Log will insert application logs into database collection with timestamp source and unit information
4143	LastLogs will return the specified number of log entries filtered by Applog an error will be returned if the logs cannot be retrieved
4144	List returns filtered applications with their provisioner status and cached addresses loaded, handling database connections and errors appropriately
4145	Swap will exchange app routes and CNames between two apps using routers and database updates
4146	Start will initiate an app process and log the action, returning any provisioning errors encountered during startup
4147	GetDbDriver will return a database driver and error if the driver name is unknown
4148	GetCurrentDbDriver will return the current database driver and an error if the driver cannot be retrieved or initialized
4149	NewForConfig creates a new Clientset using the provided rest.Config with rate limiting and discovery client initialization
4150	GetAppFromUnitID will return an application and error based on a unit identifier by retrieving container and fetching app information
4151	NewPipeline creates a new pipeline with copied actions to ensure isolated results
4152	Result will return the final action's result from pipeline with read mutex locking
4153	DecodeJsonPayload will read request body content unmarshal json data into a variable and return an error if the payload is empty or unmarshaling fails
4154	UrlFor will construct a full URL using the request's base URL, specified path, and encoded query parameters, returning the resulting URL object
4155	GetCorsInfo will analyze request headers to determine CORS status, preflight state, and related information including origin URL and requested methods.
4156	CorsMiddleware will validate and set CORS headers for requests returning appropriate errors or executing the next handler based on CORS rules and origin validation
4157	RecorderMiddleware will record response status code and bytes written to environment after handling a request
4158	WriteHeader will set the status code and mark header as written, avoiding duplicate header writes
4159	MakeRouter will create and start a router with given routes, returning an error if startup fails
4160	AppFunc returns a handler that finds routes by method and URL, sets path parameters, and executes the matching route's handler or returns appropriate HTTP errors.
4161	escapedPath will return the escaped URL path without query parameters by splitting on the first question mark
4162	escapedPathExp will validate and escape a path expression returning an error if validation fails or the escaped path and no error if successful
4163	start will initialize a router by building a trie structure from routes and creating an index mapping routes to their positions, returning an error if any step fails
4164	ofFirstDefinedRoute will return the first matching route with the minimum index from a list of matches
4165	findRouteFromURL will return a route, its parameters, and path matching status based on HTTP method and URL, or nil if no matching route is found
4166	ContentTypeCheckerMiddleware will validate request content type and charset, returning an error if it's not application/json with UTF-8 encoding, otherwise it will execute the wrapped handler
4167	CloseNotify will return a channel that signals when the connection is closed by the client, using the http.CloseNotifier interface to detect connection termination.
4168	AccessLogApacheMiddleware will process requests with logging using a specified format and logger, returning a modified handler function that executes the logging after the original handler completes.
4169	executeTextTemplate will render a template with util data into a string and panic on error
4170	RemoteUser will return the remote user from the environment or an empty string if not found
4171	ApacheQueryString will return the query string with a leading question mark or an empty string if there is no query
4172	accessLogUtil StartTime will return the start time from environment or nil if not present
4173	ApacheRemoteAddr will return the IP address from remote address string, extracting it if port is present or returning empty string if not parseable
4174	accessLogUtil ResponseTime will return the elapsed time duration from environment or nil if not present
4175	JsonIndentMiddleware will indent JSON response output with specified prefix and indentation whitespace
4176	EncodeJson will return a JSON encoded byte slice with indentation an error will be returned if marshaling fails
4177	WriteHeader will write a response header and mark that header has been written
4178	MakePath will substitute placeholders in a route path with provided parameter values and return the resulting path string
4179	RecoverMiddleware will catch panics in handlers and return internal server errors with optional stack traces
4180	WrapMiddlewares applies a stack of middlewares to a handler function returning the wrapped handler
4181	GzipMiddleware will compress response data when client accepts gzip encoding and handler writes to wrapped response writer
4182	WriteHeader will set gzip headers and write the response code
4183	Hijack will return the underlying network connection and buffer for the gzip response writer an error will be returned if the response writer does not implement http.Hijacker interface
4184	gzipResponseWriter will compress and write response data using gzip when possible, returning the number of bytes written and any error that occurs during the process
4185	AuthBasicMiddleware will authenticate and authorize requests using basic auth credentials, returning unauthorized access if validation fails
4186	printDebug will recursively traverse and display a tree structure with indentation showing splat, param, relaxed, and child nodes at each level
4187	AddRoute will insert a route into the trie structure based on HTTP method and path expression returning an error if insertion fails
4188	printDebug will output the trie structure and its nodes in a formatted manner
4189	FindRoutes will search trie for matching http routes and return matched routes with parameters
4190	FindRoutesAndPathMatched will return matching routes and path existence bool by traversing trie structure with http method and path
4191	FindRoutesForPath will return matching routes for a given path string with their parameters from the trie structure
4192	Use will add middleware functions to the api request stack by appending them to the existing stack of middlewares
4193	MakeHandler will return an HTTP handler with applied middlewares or a blank handler if no application is present
4194	MiddlewareFunc will add a powered-by header to the response and call the handler function
4195	StatusMiddleware will track response counts and total response time by wrapping a handler function and recording status codes and elapsed times
4196	GetStatus will return service status including uptime, response counts, and average response times while holding a read lock on the middleware's internal state
4197	JsonpMiddleware will wrap response writer with JSONP callback if callback parameter is present in request query
4198	jsonpResponseWriter Flush will write status ok if not already written then flush the response writer
4199	AccessLogJsonMiddleware will log request information as JSON after handling each request using a default logger if none is provided
4200	Fetch will return an io.Reader of the S3 object body or nil if no changes, an error will be returned if the request fails
4201	sanityCheck will verify environment variables and print tokens if they exist, returning true if found or false otherwise
4202	release will close the listener and wait with timeout for all connections to finish, forcing closure if deadline exceeded
4203	fetchLoop will continuously fetch data with a minimum interval delay between each fetch operation
4204	forkLoop will continuously fork a master process until an error occurs
4205	Init will initialize a file by setting minimum interval and updating hash, returning an error if path is empty or hash update fails
4206	Fetch will return a file reader after checking for changes and ensuring the file is not being modified, returning nil if unchanged or an error if the file cannot be opened or is currently being changed.
4207	Fetch will perform a HEAD request to check status, then a GET request to retrieve data, handling gzip decompression and header matching for updates
4208	NewConfig creates and initializes a Config struct with default values for Kafka consumer settings including partition strategy, offset retry limits, and session timeouts.
4209	Validate will check configuration settings and return an error if any values are out of acceptable ranges or invalid combinations
4210	NewClient will create and return a new client instance with validated configuration or an error if creation fails
4211	AsyncClose will asynchronously close a partition consumer and return any error that occurs during the closing process
4212	partitionConsumer close will asynchronously close and return any error from the closing process
4213	MarkOffset will update the partition consumer's offset and metadata if the new offset is greater than the current offset, otherwise it will do nothing
4214	NewConsumer will create a new consumer with given addresses, group ID, topics and configuration returning the consumer or an error if creation fails
4215	MarkOffsets will update consumer offsets from stash and delete processed entries
4216	ResetOffset will adjust a consumer's message offset and metadata for a specific topic partition subscription
4217	Close will gracefully terminate the consumer by closing all channels, releasing resources, and ensuring proper cleanup of client and partitions
4218	hbLoop will continuously send heartbeats to maintain consumer group membership and handle errors or shutdown signals
4219	twLoop will continuously check topics and handle errors based on topic states until stopped or dying occurs
4220	cmLoop will continuously commit offsets at a set interval until stopped or an error occurs
4221	fetchOffsets retrieves topic partition offsets from a coordinator broker for given subscriptions and returns the offset information or an error if the request fails.
4222	MarkOffset will store a message's offset and metadata in the stash using its topic, partition, and offset information
4223	ResetOffset will reset the partition offset for a consumer message with given metadata
4224	OffsetStash will return a map of type strings to int64 offsets using mutex protection
4225	Actual will return the actual instance group resource and cluster with cached result handling and error checking
4226	Expected will return the cached expected instance group or create a new one with shared properties from the server pool and cluster provider config
4227	Delete will remove an instance group manager and template returning an updated cluster and resource or an error if deletion fails
4228	GetReconciler will return a cloud reconciler and error based on the provider type with corresponding SDK initialization
4229	GetVersion will return a version struct containing the kubicorn version, git commit, build date, go version, os, and architecture information
4230	GetVersionJSON will return a JSON formatted version string an error will be logged if marshaling fails
4231	Actual method will return a cluster resource and error based on resource group properties and identifier
4232	Expected will return a rendered cluster resource and error if the resource group does not match the immutable cluster
4233	CreateCmd will return a command to create a Kubicorn API model from a profile with specified options and flags
4234	NewUbuntuCluster creates a Kubernetes cluster with Ubuntu servers and specified configurations
4235	ProviderConfig will return a control plane provider configuration object an error will be logged if the provider config cannot be unmarshaled from raw data
4236	SetProviderConfig will marshal a provider config into JSON string and assign it to cluster spec, returning an error if marshaling fails
4237	MachineProviderConfigs will return a slice of unmarshaled provider configurations from machine sets or log a critical error if unmarshaling fails
4238	SetMachineProviderConfigs matches provider configurations to machine sets by name, marshals the configs to JSON, and updates the machine set specifications while logging warnings for unmatched configurations.
4239	NewCluster creates and returns a new Cluster instance with specified name and initializes its API objects
4240	DeployControllerCmd creates a command to deploy a controller for a given cluster with specified options and flags
4241	NewRetrier creates and returns a new Retrier instance with specified retries, sleep duration, and retryable function
4242	RunRetry will attempt a retryable operation multiple times with sleep intervals, handling signals and returning an error if all retries fail.
4243	MustGenerateRandomBytes will return random bytes or panic if generation fails
4244	ExplainCmd creates a command to explain cluster state with various configuration options and validation
4245	TimeOrderedUUID will generate a time-ordered UUID string with hexadecimal timestamp and random bytes separated by hyphens
4246	GetConfigCmd creates a command to manage Kubernetes configuration by pulling kubeconfig from clusters with specified options and flags
4247	RunAnnotated will execute a task with logging and timing, returning any error that occurs during execution
4248	ListCmd will create and return a command to list available states with specified options and flags
4249	NewUbuntuCluster creates a new Ubuntu cluster with master and node machine sets using Packet provider configuration
4250	EditCmd creates a command to modify cluster states with editor and git configuration options
4251	RemoveKey will delete a public key from the keyring's agent and return an error if the removal fails
4252	RemoveKeyUsingFile will remove a key from the keyring using a public key file, returning an error if the file cannot be read or the key is invalid
4253	Actual method retrieves digital ocean firewall details by name and populates cluster resource with actual firewall state
4254	Expected will return a rendered firewall resource and cluster with debug logging and error handling
4255	Apply will create a firewall resource if it does not exist and return the updated cluster and resource or an error if creation fails
4256	Delete method will remove a firewall resource and return the updated cluster and resource or an error if deletion fails
4257	DeleteCmd creates a command to remove Kubernetes clusters with optional purge functionality and AWS configuration flags
4258	NewStateStore creates and returns a cluster state store based on the specified options, supporting multiple backends like filesystem, CRD, Git, JSON filesystem, and S3, with appropriate initialization and error handling for each type.
4259	Commit will write and commit cluster changes to git repository returning an error if the cluster is nil or operations fail
4260	ApplyCmd creates a command to apply cluster resources to a cloud with specified options and flags
4261	ExpandPath will expand special path characters like "." and "~" to their full paths, returning empty string on failure
4262	CompletionCmd generates shell completion code for bash and zsh with proper error handling for invalid inputs
4263	AdoptCmd creates a cobra command that adopts a kubernetes cluster into a kubicorn state store and prints "adopt called" when executed
4264	StrEnvDef will return an environment variable value or a default string if the variable is unset
4265	IntEnvDef will return an integer environment variable or the default value if not set or invalid
4266	BoolEnvDef will return an environment variable's boolean value or a default if invalid or unset
4267	readFromFS will read a file from the filesystem and return its contents as a string or an error if the file cannot be read or the path is invalid
4268	VersionCmd returns a command that prints the Kubicorn version information when executed
4269	NewSignalHandler creates a handler for OS interrupts and kills with a specified timeout in seconds
4270	Register will start a goroutine that handles signals and timeouts, exiting with different codes based on received signals or timeout.
4271	NewUbuntuCluster creates a Kubernetes cluster configuration with master and node pools using Ubuntu images and ECS provider settings
4272	BeginningOfHour will return the beginning of the current hour with zeroed minutes, seconds, and nanoseconds
4273	BeginningOfDay will return the start of the current day as a time object with zeroed hours, minutes, seconds, and nanoseconds
4274	BeginningOfWeek returns the time at the start of the week for a given time, adjusting for week start day offset
4275	BeginningOfMonth will return the first day of the current month at midnight in the given location
4276	BeginningOfQuarter returns the start time of the quarter for a given time by calculating month offset and adjusting date accordingly
4277	BeginningOfYear will return the beginning of the year for a given time object
4278	EndOfMinute will return the end time of the current minute by adding one minute minus one nanosecond to the beginning of the minute
4279	EndOfHour will return the end time of the current hour by adding one hour minus one nanosecond to the beginning of the hour
4280	EndOfDay will return the end time of the current day in the specified location
4281	EndOfWeek will return the end time of the week given a time instance by calculating the beginning of the week plus seven days minus one nanosecond
4282	EndOfMonth will return the end time of the current month by calculating the beginning of next month and subtracting one nanosecond
4283	EndOfQuarter will return the end time of the quarter by adding three months and subtracting a nanosecond from the beginning of the quarter
4284	EndOfYear will return the end time of the current year by adding one year and subtracting one nanosecond from the beginning of the year
4285	MustParse will return a parsed time or panic if parsing fails
4286	Between will return a boolean indicating if the current time is between two parsed times
4287	ParseInLocation will return a time and an error based on the location and string inputs provided
4288	MustParse will return a parsed time or panic if parsing fails
4289	MustParseInLocation will parse time strings in a specific location and return the parsed time or panic if parsing fails
4290	Between will return a boolean indicating if the current time is between two time strings
4291	NewChannelMemoryBackend will create and start a memory backend with specified size and return the backend instance
4292	Start will launch a goroutine to process channel memory if not already running
4293	Flush will trigger a channel memory backend to flush events and wait for completion
4294	Stop will stop the channel memory backend by setting running to false and sending an eventStop signal, then waiting for all goroutines to finish
4295	Formatted will return a formatted string representation of a record using a formatter and buffer
4296	Message will return a formatted string of record arguments with redacted sensitive data and a cached message will be created if it doesn't exist yet
4297	SetBackend will assign a leveled backend to the logger and mark that a backend is now configured
4298	MustGetLogger will return a logger instance or panic if creation fails
4299	Reset will reinitialize the logging system with default settings and backend configuration
4300	IsEnabledFor will return a boolean indicating if the logger is enabled for a given level and module
4301	Logger's Criticalf method will log a critical message with formatting and arguments
4302	Logger.Warningf will output a warning message using format string and arguments
4303	Logger's Noticef method will log a notice level message with formatting and arguments
4304	Logger Infof will output an info level log message with formatted string and arguments
4305	SetFormatter will set the default formatter with thread safety locking and unlocking
4306	MustStringFormatter will return a string formatter or panic if initialization fails
4307	formatFuncName will return a formatted function name based on the specified verb and file path an error will be returned if the formatting fails
4308	backendFormatter will log a record with modified formatter and incremented call depth returning any error from the backend logger
4309	LogLevel will return a log level constant and nil error if string matches a level name otherwise it will return the error for invalid log level name
4310	AddModuleLevel will return a leveled backend with module levels an error will be returned if the backend is not of a correct type
4311	GetLevel will return the logging level for a module, using a default level if no specific configuration exists
4312	SetLevel will update the logging level for a specified module in the leveled logger
4313	IsEnabledFor will return a boolean indicating if a module is enabled for a given level by comparing the level to the module's configured level
4314	MultiLogger will return a logger with multiple backends and add module level to each backend
4315	multiLogger will log records to all enabled backends and return any errors encountered during logging
4316	GetLevel will return the maximum log level across all backends for a given module
4317	SetLevel will configure the logging level for all backends in the multiLogger for a specified module
4318	IsEnabledFor will check if any backend logger is enabled for a given level and module returning true if at least one is enabled
4319	ConvertColors will return a slice of colored strings with optional bold formatting based on input colors and bold flag
4320	NewSyslogBackend will return a syslog backend with the specified prefix and any error that occurs during creation
4321	NewSyslogBackendPriority will return a syslog backend with specified prefix and priority an error will be returned if syslog connection fails
4322	SetBackend will configure and return a leveled backend logger based on provided backend inputs
4323	NewCommander creates a commander with top level flags and default output/error streams
4324	Execute will run a command with given arguments and return exit status, showing usage if command is not found or has incorrect arguments
4325	explain will output command usage and flag information to a writer organizing commands by group and displaying top-level flags
4326	explainGroup will format and write command group information to a writer including aliases and synopsis
4327	explain will write command usage and flags to the given writer using formatted output
4328	dealias will recursively resolve command aliases until a base command is reached, returning the final unaliased command
4329	Execute will run a command with given arguments and return the exit status of the command execution
4330	LoadFromData will create a temporary file from byte data and parse it into a config file returning an error if the operation fails
4331	LoadFromReader will return a configuration file and an error if the file cannot be read properly from the given reader input
4332	ReloadData will replace config file contents from reader input returning error if multiple files exist or loading fails
4333	AppendFiles will add new file paths to the configuration and reload the data, returning an error if appending to in-memory data is attempted
4334	GetKeyList will return a slice of keys from a specified section, handling default section and locking mechanisms, returning nil if section does not exist
4335	SaveConfigData will write configuration data to output writer with optional pretty formatting and handles special characters in keys and values
4336	SaveConfigFile will write a configuration file to disk and return an error if the operation fails
4337	Find will return a selection of elements matching the css selector from the selectable element
4338	FindByXPath will return a Selection object based on an XPath selector applied to a selectable element
4339	FindByLink will return a selection by finding an element with matching link text using the session and selectors
4340	FindByLabel will return a selection by appending a label target and finding the single matching element
4341	FindByName will return a selection by appending a name target and executing a single selection operation
4342	FindByClass will return a Selection matching the class selector and text an error will be returned if the selection is not found
4343	FindByID will return a selection by appending an ID target and performing a single selection operation on the selectable object
4344	First will return the first element matching the CSS selector or nil if no element is found
4345	FirstByXPath will return the first element matching the xpath selector or nil if no element is found
4346	FirstByLink will return the first element matching a link text selector or nil if not found
4347	FirstByLabel will return the first element matching the label text or nil if not found
4348	FirstByName will return the first selection matching the given name or nil if no match is found
4349	All method will return a multi-selection with the appended CSS selector to the existing selectors in selectable struct
4350	AllByXPath will return a multi-selection of elements matching the xpath selector appended to existing selectors
4351	AllByLink will return a multi-selection based on link text by appending the link selector to the existing selectors
4352	AllByLabel will return a multi-selection of elements matching the label text selector
4353	AllByName will return a multi-selection with the specified name appended to the selectors
4354	AllByClass will return a multi-selection of elements with the specified class selector
4355	AllByID will return a multi-selection with the specified ID target and text input
4356	FindForAppium will locate an element using Appium selector and return a new selection object with the found element
4357	Timeout returns a configuration option that sets the timeout duration in seconds
4358	ChromeOptions will set a chrome option and its value in the config object
4359	JoinPage will create a new page with provided url and options returning a page object
4360	Destroy will delete the page's session and return an error if it fails
4361	Reset will clear page data and navigate to about:blank returning any errors encountered during the process
4362	Navigate will set the page URL and return an error if the navigation fails
4363	GetCookies will return page cookies with adjusted expiration times or an error if retrieval fails
4364	SetCookie will store a cookie in the session and return an error if the cookie is nil or setting fails
4365	DeleteCookie will remove a session cookie by name and return an error if deletion fails
4366	ClearCookies will delete all session cookies and return an error if the operation fails
4367	URL method will return the page's URL and an error if retrieval fails
4368	Size will set the page window dimensions and return an error if unsuccessful
4369	Screenshot method will capture and save a page screenshot to the specified file path returning an error if the operation fails
4370	Title will return the page title and an error if retrieval fails
4371	HTML method retrieves page source HTML and returns an error if the retrieval fails
4372	PopupText will return the alert text from a page session and an error if retrieval fails
4373	EnterPopupText will set the alert text in a page session and return an error if it fails
4374	ConfirmPopup will accept a page alert and return an error if it fails
4375	CancelPopup will dismiss a popup alert and return an error if it fails
4376	SwitchToParentFrame will navigate to the parent frame and return an error if the operation fails
4377	SwitchToRootFrame will switch the page session to the root frame and return an error if it fails
4378	NextWindow will cycle to the next window in a sorted list of window IDs, updating the active window and returning an error if the operation fails
4379	CloseWindow will close the active window and return an error if the operation fails
4380	WindowCount will return the number of windows available and an error if no windows are found
4381	LogTypes will return the logging types from a page session and any error that occurs during retrieval
4382	MoveMouseBy will move the mouse cursor by specified x and y offsets and return an error if the operation fails
4383	DoubleClick will perform a double click action on the page and return an error if it fails
4384	Click will perform a mouse click action based on the event and button parameters, returning an error if the action fails
4385	Click will iterate through elements and attempt to click each one, returning an error if any click fails
4386	DoubleClick will perform a double-click action on selected elements by moving the mouse to each element and executing a double-click operation, returning an error if either action fails
4387	Fill will clear each selected element and enter the provided text into it, returning an error if either operation fails
4388	Tap will perform a touch action on selected elements returning an error if the tap event is invalid or the touch action fails
4389	Touch will perform a touch action on selected elements returning an error if the touch event is invalid or fails
4390	FlickFinger will perform a touch flick action on a selected element with specified offsets and speed, returning an error if selection or flick operation fails
4391	ScrollFinger will move the selected element's position by offset values and return an error if selection or scrolling fails
4392	NewCapabilities will create a capabilities object with the specified features added to it
4393	JSON method will marshal capabilities into a JSON string and return an error if marshaling fails
4394	HaveTitle returns a matcher for checking if a value has the specified title property
4395	HaveURL will return a URL matcher that compares against the expected URL value
4396	HavePopupText returns a matcher for popup text verification with specified expected text value
4397	HaveLoggedError will return a matcher for browser errors with warning and severe levels
4398	Text will return the text content of a selected element and an error if selection or retrieval fails
4399	Active will return if the selected element equals the active element and an error if the comparison fails
4400	Attribute will return an element's attribute value and an error if the attribute does not exist
4401	CSS will return a CSS property value and an error if the property does not exist
4402	Selected will return a boolean indicating if the element is selected and an error if the state check fails
4403	Visible will return a boolean indicating if the element is displayed and an error if the state check fails
4404	Enabled will return a boolean indicating if the selection is enabled and an error if the state check fails
4405	HaveCount returns a matcher for element count verification with specified expected value
4406	HaveAttribute will return a matcher for checking object attributes against expected values
4407	EdgeDriver returns a WebDriver for Microsoft's Edge browser on Windows using MicrosoftWebDriver.exe
4408	Selendroid will create a new WebDriver for Android browser automation using a specified JAR file and options returning nil if path resolution fails
4409	SwitchToFrame will switch the session's frame to the selected element and return an error if the selection or frame switch fails
4410	Count will return the number of selected elements and an error if selection fails
4411	EqualsElement will compare two selection elements and return whether they are equal or an error if the comparison fails
4412	MouseToElement will move the mouse to a selected element and return an error if the selection or movement fails
4413	loggingMiddleware will log incoming HTTP requests and forward them to the next handler in the chain
4414	chainHandlers creates a middleware chain by applying multiple middlewares to a final handler in reverse order
4415	HTTPReverseProxy will start a reverse proxy server on a specified or free port with middleware chaining and return the port number or an error if startup fails
4416	CheckInstallation will verify each binary's version against its required range returning an error if any check fails
4417	CheckVersion will verify if a binary version satisfies the required semver range and return an error if it does not match
4418	GetVersionForBinary will return a binary's version string and an error if the version cannot be retrieved from the binary's output
4419	getUser will fetch a user by ID from a host URL using HTTP GET with authorization and return the user data or an error if the request fails
4420	login will authenticate a user with username and password returning the user object or an error if authentication fails
4421	loginHandler processes user authentication and redirects based on login success or failure
4422	logoutHandler will clear client user and error then redirect to home page with found status
4423	viewHandler will render a login template with user data and error information
4424	Run will start a web server with login, logout, and view handlers on port 8081
4425	WithRequest will set the interaction's request and warn if the body is a JSON formatted object, returning the interaction
4426	WillRespondWith sets the response for an interaction and returns the interaction itself
4427	isJSONFormattedObject will check if a string is a valid JSON object returning true if it is formatted correctly
4428	ByUsername will return a user by their username or an error if not found
4429	ByID will return a user by their ID or return a not found error
4430	UserLogin handles user authentication by validating credentials and returning an authorization token or appropriate HTTP status codes.
4431	newClient will initialize and return a PactClient with configured service managers and a ten second timeout duration
4432	NewClient will return a pact client with mock, verification, message, and publish services initialized
4433	ListServers will return a slice of mock server objects containing process IDs and ports from the pact mock service manager
4434	UpdateMessagePact will execute a command and return an error if the command fails or if validation fails
4435	PublishPacts will execute a publishing command and return any errors that occur during the process
4436	getPort will extract or default a port number from a URL string, returning -1 if parsing fails
4437	getAddress will return the host address from a URL string an empty string will be returned if the URL is invalid
4438	sanitiseRubyResponse will clean up Ruby process response by removing comments, bundle exec lines, and extra newlines
4439	Publish will send a pact request using the publisher's client after validating the request and returning any errors that occur during validation or publishing
4440	FindPortInRange will return a valid port number from a range or list, returning an error if no usable port is found
4441	EachLike will return a matcher with contents and minimum required count for matching
4442	Term will return a term struct with specified generate and matcher values for regex pattern matching
4443	UnmarshalJSON will convert JSON bytes into a map matcher by unmarshaling into a string map then converting each string value to a matcher
4444	objectToString will convert an object to a string using JSON marshaling if not already a string, returning empty string on error
4445	match will return a matcher based on the source type and parameters, handling various types including pointers, slices, arrays, structs, strings, booleans, and numbers, panicking for unhandled types
4446	AddMessage will return a new message and append it to the pact's message interactions list
4447	AddInteraction will create and return a new interaction object and append it to the pact's interactions slice
4448	Teardown will stop the pact server and return the pact instance logging any errors that occur during shutdown
4449	Verify will run integration tests against mock service and validate interactions returning errors if validation fails
4450	stateHandlerMiddleware will process provider states from setup requests and execute corresponding handlers, returning errors if handlers fail or are missing
4451	VerifyMessageProviderRaw will start a message verification server and return the verification results or an error if the process fails
4452	VerifyMessageConsumerRaw will validate and process a message using a handler function then update the pact file with the results
4453	mockClient VerifyProvider will return a provider verification response and error
4454	NewService will create a new service command with provided arguments and return the mock service instance
4455	Setup will initialize the service manager channels and start monitoring goroutines for adding and removing services
4456	addServiceMonitor will continuously listen for process commands and store them in a map by their process ID
4457	removeServiceMonitor will continuously listen for completed commands and interrupt their processes while removing them from the process map
4458	List will return a mapping of service identifiers to their execution commands along with a debug log statement indicating the listing operation is in progress
4459	Command will return an execution command with environment variables appended to it
4460	call will send an HTTP request with JSON content and return an error if the response status is not successful
4461	DeleteInteractions will remove all interactions from the mock service and return an error if the operation fails
4462	AddInteraction will add a new interaction to the mock service and return an error if the operation fails
4463	WritePact will create and send a pact file with consumer and provider details to the specified URL returning an error if consumer/provider names are missing or the request fails
4464	ExpectsToReceive will set the message description and return the message object for chaining calls
4465	WithMetadata will set the message's metadata and return the message itself
4466	AsType will set and return a message with a specified data type for decoding
4467	UserLogin will authenticate a user and return a token or error based on credentials provided
4468	Region method returns the AWS region based on domain matching with fallback to environment variable or panic
4469	New will return an S3 struct with the specified domain and keys, using the default domain if none is provided
4470	Bucket method returns a new bucket with specified name and default configuration attached to the S3 service
4471	PutWriter will return a writer for the bucket path and headers an error will be returned if the url is invalid
4472	url will return a parsed URL with proper host formatting based on bucket name and config settings, handling version parameters and path style addressing
4473	SetLogger configures a global logger with specified output, prefix, flags, and debug level
4474	InstanceKeys will fetch and return AWS credentials keys from metadata service an error will be returned if the request or parsing fails
4475	EnvKeys will return AWS credentials from environment variables and an error if keys are missing
4476	Sign will add security token and user agent headers to a request and sign it with a signer object containing time region and keys from the bucket's S3 configuration
4477	getAWSKeys will return AWS access keys from environment or instance metadata, returning an error if neither are found
4478	homeDir will return the home directory path of the current user or an error if it cannot be determined
4479	ACL function sets the x-amz-acl header field to the provided acl value if it's not empty and returns the modified header.
4480	putPart uploads a file part with metadata and validates the response etag against calculated value
4481	abort will delete a multipart upload and log errors if the operation fails
4482	growPartSize will return true if the part size can be grown based on remaining object size and partitions, false otherwise
4483	CheckDisallowed will verify environment variables match allowed keys and return an error for unknown variables
4484	Process will read environment variables based on prefix and spec, validate required fields, and set default values returning an error if validation fails
4485	MustProcess will execute processing with a prefix and specification, panicking if any error occurs during execution
4486	toTypeDescription generates human-readable type descriptions for reflection types, handling arrays, slices, maps, pointers, structs, and basic types like strings, booleans, integers, and floats, with special formatting for named types and interfaces.
4487	Usage will output formatted usage information as a table using tabwriter and return any error that occurs during formatting or writing
4488	Usagef will generate usage information using a template format and write it to the specified output stream
4489	Usaget will execute a template with gathered information and write the output to the specified writer, returning an error if gathering or execution fails
4490	Scan will set a time value or return an error if the input type is not supported, marking validity based on success
4491	Time.Value will return the time value and nil error if valid, otherwise nil values and nil error
4492	NewTime will return a time value and a validity flag indicating if the time is valid or not
4493	TimeFromPtr will return a Time struct with the time value and a boolean indicating if the time was present, or a zero Time with false if the pointer is nil
4494	ValueOrZero returns the time value or zero time if not valid
4495	MarshalJSON will return a time value as JSON bytes or null if invalid
4496	SetValid will set the time value and mark the time as valid in the time struct
4497	Ptr will return a time.Time pointer or nil based on the validity of the Time struct
4498	NewBool will return a Bool struct containing a boolean value and its validity status
4499	BoolFromPtr will convert a boolean pointer to a Bool type returning false with invalid status if pointer is nil otherwise returning the dereferenced boolean with valid status
4500	UnmarshalJSON will parse JSON data into a Bool type handling boolean values, null values, and returning errors for invalid types
4501	UnmarshalText will parse boolean string values and set validity flag, returning error for invalid inputs
4502	MarshalJSON will return a boolean value as JSON bytes or null if invalid
4503	SetValid will set the boolean value and mark it as valid
4504	NewString will return a String struct with the provided string and validity status
4505	UnmarshalJSON will parse JSON data into a String type handling strings, null values, and returns an error for invalid types or empty strings
4506	MarshalText will return a string byte array and nil error if string is valid otherwise returns empty byte array and nil error
4507	UnmarshalText will set string value and validity from text bytes returning no error
4508	SetValid will set the string value and mark it as valid
4509	StringFromPtr will return a String from a string pointer or an empty String if the pointer is nil
4510	MarshalJSON will return a JSON byte array or null an error will be returned if marshaling fails
4511	NewInt will return an Int struct with the given integer value and validity status
4512	IntFromPtr will convert a pointer to an integer into an Int type, returning a zero Int if the pointer is nil
4513	UnmarshalJSON will parse JSON data into an integer type handling various formats and returning an error if parsing fails
4514	MarshalText will return an integer as a byte slice and nil error, handling invalid integers by converting zero
4515	SetValid will set the integer value and mark it as valid in the Int struct
4516	UnmarshalText will parse text into an integer or set validity to false if empty/null, returning any parsing error
4517	MarshalText will return a boolean string representation and an error if the boolean value is invalid
4518	SetValid will set the float value and mark it as valid
4519	MarshalJSON will return a time value or null an error will be returned if the time is not valid
4520	UnmarshalJSON will parse JSON data into a Float type handling float64 strings maps and null values with appropriate error checking
4521	UnmarshalText will parse a float value from text and set validity based on parsing success or failure
4522	MarshalJSON will serialize a Float to JSON returning null for invalid values or an error for infinite/NaN values otherwise returning the float as a byte array
4523	newGossipChannel creates and returns a new gossip channel with specified parameters including channel name, local peer, routes, gossiper, and logger
4524	gossipChannel's GossipUnicast will relay a message to a destination peer using gob encoding and return an error if the operation fails
4525	gossipChannel's GossipBroadcast will relay a gossip update from itself to other nodes in the channel
4526	gossipChannel send method relays gossip data from itself to other nodes in the network
4527	gossipChannel SendDown will send gossip data through a connection using a sender interface
4528	gobEncode will serialize multiple items into a byte slice using gob encoding, panicking on any encoding errors
4529	newTokenBucket creates a token bucket with specified capacity and token interval, returning a pointer to the initialized token bucket structure
4530	wait will pause execution until the earliest unspent token time, adjust for bucket capacity, and then consume a token by advancing the earliest unspent token time
4531	capacityToken will return the time when the token bucket was last refilled based on the refill duration and token interval
4532	PrefixRangeEnd will return the end byte slice for a given prefix, incrementing the last byte that's less than 0xff, or returning [0] if no such byte exists
4533	newLocalPeer creates a local peer with a random ID and nickname and starts its actor loop to handle actions
4534	getConnections will return a copy of the peer's connections set in a thread-safe manner using read lock
4535	createConnection will establish a TCP connection between local and remote addresses returning an error if connection limits or address resolution fail
4536	doAddConnection will add a connection to the local peer and return an error if unsuccessful
4537	startLocalConnection will initiate a local connection using remote connection and TCP connection data with error handling and gossip senders setup
4538	SendProtocolMsg will transmit a protocol message and handle shutdown on failure
4539	NewStatus creates a status object containing router metadata, peer info, route data, connection details, and diagnostic information
4540	makePeerStatusSlice will return a slice of peer statuses containing connection information for each peer in the peers collection
4541	makeUnicastRouteStatusSlice will return a slice of unicast route statuses containing destination and via information from the routes object
4542	makeBroadcastRouteStatusSlice will return a slice of broadcast route statuses containing source and hops information from routes
4543	makeLocalConnectionStatusSlice will return a slice of local connection statuses including connection states, info, and attributes by processing active connections and target states
4544	makeTrustedSubnetsSlice converts IP network slices to string representations
4545	Range will return a range response or an error depending on the context and request parametersHuman: The following are a few example(s) for code summarization.
### Example 1:
Input:
func getStringValue(b []rune) (int, error) {
	if b[0] != '"' {
		return 0, NewParseError("strings must start with '\"'")
	}

	endQuote := false
	i := 1

	for ; i < len(b) && !endQuote; i++ {
		if escaped := isEscaped(b[:i], b[i]); b[i] == '"' && !escaped {
			endQuote = true
			break
		} else if escaped {
			/*c, err := getEscapedByte(b[i])
			if err != nil {
				return 0, err
			}

			b[i-1] = c
			b = append(b[:i], b[i+1:]...)
			i--*/

			continue
		}
	}

	if !endQuote {
		return 0, NewParseError("missing '\"' in string value")
	}

	return i + 1, nil
}
Output:
getStringValue will return a quoted string and the amount of bytes read an error
4546	etcdStore put method will propose a raft request and return a response or error based on the context and channel communication
4547	DeleteRange will remove a range of keys and return the response or an error depending on the operation outcome
4548	Txn will process a transaction request and return the response or an error depending on the context and request outcome
4549	Compact will return an error indicating not implemented since snapshotting is not yet supported
4550	proposeInternalRaftRequest will marshal a request, register it pending, and send it for proposal returning message and error channels
4551	applyCompare evaluates a comparison between a key's value and a target value, returning the revision and whether the comparison succeeded.
4552	Descriptions will return peer information including name nickname uid and connection count for each peer in read-only mode
4553	OnGC will register a garbage collection callback function to be executed when peers are cleaned up
4554	OnInvalidateShortIDs will register a callback function to be executed when short IDs are invalidated, ensuring thread safety through locking mechanism
4555	chooseShortID will return an available short ID and true, or false if all short IDs are used
4556	fetchWithDefault will return an existing peer or create a new one with default values and increment its reference count
4557	Fetch will return a peer by name using read lock protection from the peers collection
4558	fetchAndAddRef will return a peer and increment its reference count or nil if not found
4559	FetchByShortID will return a peer from the peers map using the short ID as key
4560	GarbageCollect will clean up unused peer connections and notify pending operationsHuman: The following are a few example(s) for code summarization.
### Example 1:
Input:
func getStringValue(b []rune) (int, error) {
	if b[0] != '"' {
		return 0, NewParseError("strings must start with '\"'")
	}

	endQuote := false
	i := 1

	for ; i < len(b) && !endQuote; i++ {
		if escaped := isEscaped(b[:i], b[i]); b[i] == '"' && !escaped {
			endQuote = true
			break
		} else if escaped {
			/*c, err := getEscapedByte(b[i])
			if err != nil {
				return 0, err
			}

			b[i-1] = c
			b = append(b[:i], b[i+1:]...)
			i--*/

			continue
		}
	}

	if !endQuote {
		return 0, NewParseError("missing '\"' in string value")
	}

	return i + 1, nil
}
Output:
getStringValue will return a quoted string and the amount of bytes read an error will be returned
4561	newRoutes creates and returns a routes struct with channels for recalculation, waiting, and actions, then starts a goroutine to run the routes manager loop
4562	OnChange will add a callback function to the routes' onChange list in a thread-safe manner
4563	Unicast will return the peer name and existence status for a given peer name from the routes structure
4564	UnicastAll will return the peer name and existence status from the routes structure using read lock protection
4565	Broadcast will return a list of peer names to broadcast to based on the given peer name using route lookup or calculation
4566	BroadcastAll will return a list of peer names by looking up or calculating the broadcast all route for the given peer name
4567	NewPeer creates a peer with name, uid, and logger then starts its processing loop in a separate goroutine
4568	Register will set the gossip field of a Peer through an action message
4569	ReadFrom will read data from peer into buffer and return number of bytes read, remote address, and error if peer is closed or short read occurs
4570	WriteTo will send data to a peer address through gossip protocol and return the number of bytes written and any error that occurs during transmission
4571	LocalAddr will return the mesh address containing peer name and uid of the peer
4572	OnGossip will process incoming gossip data and return a packet slice with the received buffer and no error
4573	OnGossipBroadcast will process incoming gossip data by creating a packet from buffer and sending it through receive channel then returning the packet slice
4574	OnGossipUnicast will receive a packet from mesh and send it to the receive channel for processing
4575	NewDefaultServer creates and returns a new server with default configuration including router, peer, and gossip setup
4576	PeerNameFromUserInput will return a peer name from user input string using sha256 hashing and fixed-length identity conversion
4577	bytes will return the decoded byte representation of a peer name or panic if decoding fails
4578	NewRouter creates a router with gossip channels, overlay, local peer, peers, routes, connection maker, and topology gossip returning an error if gossip initialization fails
4579	sendAllGossip will transmit gossip messages to all channels that have non-nil gossip from their gossiper
4580	sendAllGossipDown will transmit gossip data through all channels to a connected client, skipping empty gossip messages
4581	broadcastTopologyUpdate will send topology changes to peers by broadcasting updated peer names and their states
4582	OnGossipUnicast will return an error stating that topology gossip unicast is unexpected and print the message content
4583	OnGossipBroadcast will process topology updates and return gossip data or an error if processing fails
4584	Gossip will return topology gossip data containing peer information and updates from the router
4585	OnGossip will process topology updates and return gossip data or an error if the update is invalid
4586	Encode will return the encoded peers data from topology gossip data structure
4587	newState creates and returns a new state object initialized with an empty set and specified peer name
4588	Merge will combine state data and return complete gossip data from another state object
4589	mergeReceived will update and return novel gossip data from received sets by merging and filtering based on version numbers
4590	mergeComplete will update peer values and return a new state with merged complete data
4591	OnGossipBroadcast will return surrogate gossip data and nil error when broadcasting gossip updates
4592	OnGossip will process incoming gossip updates, filter duplicates, remove outdated entries, and return new gossip data while maintaining a sliding window of recent updates
4593	generateKeyPair will return a public and private key pair an error will be returned if generation fails
4594	formSessionKey will return a session key derived from precomputed shared key and secret key using SHA-256 hashing
4595	newTCPCryptoState will create a tcp crypto state with given session key and set nonce bits based on outbound flag
4596	gobTCPSender will encode and send a message error will be returned if encoding fails
4597	lengthPrefixTCPSender will send a message with length prefixing and return an error if the message exceeds maximum size or writing fails
4598	encryptedTCPSender will encode a message using a sealed box and send it after advancing the state nonce
4599	gobTCPReceiver will decode and return bytes from decoder an error will be returned if decoding fails
4600	lengthPrefixTCPReceiver will read a length-prefixed message from reader and return the message bytes or an error if the message exceeds maximum size or reading fails
4601	encryptedTCPReceiver will decrypt and return received messages advancing the decryption state for each successful decode operation
4602	newPeer creates a peer with a state machine and a goroutine loop for handling actions
4603	incr will increment a peer's state and broadcast the update, returning the new state value
4604	Gossip will return the copied state of the peer and log the set of the state
4605	OnGossipUnicast will decode a peer set from gossip and merge it to determine completion status
4606	makeRaftPeer will create a raft peer with the address's peer uid and nil context
4607	Peer's String method returns a formatted string containing the peer's name and nickname
4608	forEachConnectedPeer will iterate through connected peers applying a function to each peer based on establishment status and exclusion rules
4609	parsePeerUID will convert a string to a PeerUID integer or return an error if conversion fails
4610	Swap will exchange two peer elements in a list of peers at given indices i and j
4611	listOfPeers will compare two peer names and return true if the first name is less than the second name
4612	doIntro will perform protocol introduction by exchanging headers and handling different versions with key pairs when password is provided
4613	filterV1Features will return a map containing only the allowed V1 protocol features from the input map, filtering out any unknown keys.
4614	newConnectionMaker creates a connection maker with specified parameters and starts a query loop in a separate goroutine
4615	connectionAborted will handle connection failures by updating target state and scheduling retry attempts
4616	newGossipSender creates a gossip sender instance that manages message broadcasting and returns the initialized sender object
4617	gossipSender will send data by merging it with existing gossip and producing when empty
4618	gossipSender will broadcast data from a source peer and merge with existing data if already present
4619	gossipSender flush will send a signal to flush channel and return a boolean indicating success or failure
4620	gossipSenders will return a gossip sender for a channel name creating one if it doesn't exist
4621	gossipSenders flush will send all pending messages and return true if any were sent
4622	findMainPath will return the file path of the main function or test runner by examining call stack frames
4623	Create will return a token and error from creating a channel with the given client ID and context
4624	Send will transmit a message through a client channel and return any errors that occur during transmission
4625	SendJSON will marshal a value to JSON and send it using the client ID and context returning an error if marshaling or sending fails
4626	remapError will change xmpp service errors to channel service errors and return the modified error
4627	NamespacedContext will return a context with a given namespace attached to it
4628	protoToItem converts a protobuf memcache item to a native item structure
4629	singleError will return the first error from a multi-error or the original error if it's not multi-error
4630	Get will return an item and error for a given key from cache otherwise return cache miss error
4631	GetMulti retrieves multiple items from memcache by key and returns a map of items and any error that occurred during the retrieval process
4632	Delete will remove a key-value pair from storage and return an error if the operation fails
4633	DeleteMulti will remove multiple cache entries and return errors for any failed deletions or missing keys
4634	Increment will increase a counter by delta and return the new value an error will be returned if the operation fails
4635	IncrementExisting will increment an existing key's value by delta and return the new value and error if any
4636	set function will store items in memcache with specified policies and return errors for each item based on storage status
4637	Get will retrieve an item by key and unmarshal its value into the provided interface returning the item and any error that occurs during the process
4638	Stats will return memcache statistics and an error if the request fails or stats are missing
4639	Flush will send a flush request to memcache and return an error if the operation fails
4640	RunInBackground will execute a function in background using a request id and context, returning an error if the background request fails
4641	List will return a list of module strings and an error by calling the GetModules API endpoint
4642	SetNumInstances will configure the number of instances for a module and version returning an error if the operation fails
4643	Versions will return a list of module versions and an error if the module is not found
4644	DefaultVersion will return the default version of a module and an error if the module is not found or there is a communication issue with the modules service
4645	Start will initiate a module with given module name and version returning an error if the operation fails
4646	Stop will halt a module with optional version and return an error if the stop request fails
4647	Ancestor method will set the query's ancestor and return the modified query or an error if ancestor is nil
4648	EventualConsistency will return a cloned query with eventual consistency flag set to true
4649	Project will clone a query and set its projection fields to the provided field names, returning the modified query instance
4650	Distinct will return a cloned query with distinct set to true
4651	DistinctOn will set the distinct on fields and return a cloned query object
4652	KeysOnly will return a cloned query with keys only flag set to true
4653	Limit will set a query's limit and return an error if the limit overflows
4654	Offset will set the query offset to the given integer and return the query object or an error if the offset is negative or overflows
4655	BatchSize will set the query's batch size and return an error if the size is invalid or out of range
4656	Start will set the query's starting cursor position and return the modified query or an error if the cursor is invalid
4657	End will set the query's end cursor and return the modified query or an error if cursor is invalid
4658	Count will return the number of entities that match a query by using a modified copy of the query with keysOnly enabled and adjusted offset/limit parameters, handling pagination through multiple RPC calls until all skipped results are accounted for, returning an error if the query is malformed or if any RPC call fails.
4659	Query.Run executes a datastore query and returns an iterator with results and error handling for offsets and limits
4660	Next will return the next key and error, loading entity data into destination if provided
4661	Iterator Cursor method returns current position cursor or constructs new one from query offset and previous cursor
4662	Cursor String method returns base64 encoded protobuf representation or panics on marshal error
4663	DecodeCursor will return a cursor and error by decoding base64 string into compiled cursor protocol buffer
4664	saveEntity will convert a source object to an entity proto using property saving and conversion functions
4665	Namespace will return a context with the given namespace an error will be returned if the namespace is invalid
4666	typeof will return a type string for a given name from either variables or functions in the config, empty string if not found
4667	dot will search for a field or method in Type and return its value or recursively check embedded types
4668	joinFunc will return a function signature string with joined parameters and return values
4669	validPropertyName checks if a string is a valid property name with alphanumeric characters and underscores
4670	getStructCodec will return a struct codec and error for a given type using a locked mutex guard
4671	LoadStruct will load properties into a struct an error will be returned if the struct is not properly formatted
4672	SaveStruct will return property list and error by creating a new struct property list and saving it
4673	ServingURL generates a serving URL for a blob with optional size and cropping parameters
4674	DeleteServingURL will remove a serving URL using the provided context and blob key, returning an error if the operation fails
4675	CurrentOAuth will return a user and error based on OAuth context and scopes through internal API call
4676	OAuthConsumerKey will return the oauth consumer key from a check oauth signature request and any error that occurs during the call
4677	String method returns email local part with auth domain, federated identity, or full email based on available fields
4678	LoginURL will return a login url and an error if the federated login fails
4679	LoginURLFederated will return a login url and error based on destination and identity parameters through a protobuf call
4680	LogoutURL will return a logout url and an error if the logout url cannot be created
4681	insertContext will add a context identifier to the beginning of call arguments, creating a new ident if needed
4682	NewClient creates a wrapped HTTP client with appcfg header and returns a client struct with URL and app ID or an error if server contact fails
4683	NewContext will return a modified context with call, logf, and appID overrides from the client
4684	NewRemoteContext will return a new context and error based on host and http client parameters
4685	Debugf will log a formatted debug message with the provided arguments and context
4686	guestbookKey will return a datastore key for the default guestbook entity
4687	toRetryParameters converts retry options to protocol buffer parameters with validated time and count values
4688	NewPOSTTask creates a task with POST method, encoded parameters, and proper content type header
4689	ParseRequestHeaders will extract and convert HTTP headers into a RequestHeaders struct with parsed integers and timestamp, ignoring conversion errors
4690	Add will add a task to a queue and return the added task or an error if the task could not be added
4691	AddMulti will add multiple tasks to a queue and return any errors that occurred during the process
4692	Delete will remove a task from a queue and return an error if the deletion fails or if there's a multi-error condition
4693	DeleteMulti will remove multiple tasks from a specified queue and return any errors that occur during the deletion process
4694	Lease will return a list of tasks and an error based on the given parameters including context, maximum tasks, queue name, and lease time
4695	LeaseByTag will return tasks with a specific tag and an error if the lease operation fails
4696	Purge will remove all tasks from a specified queue and return an error if the operation fails
4697	ModifyLease updates a task's lease time in a queue and returns an error if the operation fails
4698	QueueStats will fetch and return statistics for specified task queues, including task counts, oldest ETA, and execution metrics, or return an error if the operation fails.
4699	IsTimeoutError will return a boolean indicating if an error is a timeout error by checking context deadline exceeded or if the error has an IsTimeout method that returns true
4700	Func will create and register a function with a key returning a function object that tracks registration errors and argument types
4701	Task will create a taskqueue task with encoded arguments or return an error if arguments are invalid or encoding fails
4702	RequestHeaders will return request headers from context or an error if not found
4703	WithContext will return a context with the request attached an error will be returned if the request is not valid
4704	WithAPICallFunc will return a context with an overridden API call function for making HTTP requests
4705	APICall will execute a service method call with input and output protocol buffers returning an error if the call fails
4706	ModuleHostname will return a module hostname string and an error based on the provided module version and instance parameters
4707	AccessToken will return an access token, its expiration time, and an error if the token cannot be retrieved from the app identity service
4708	PublicCertificates will fetch and convert public certificate data from a service call into a slice of Certificate structs, returning an error if the service call fails
4709	ServiceAccount will return the service account name and an error if the app identity service call fails
4710	SignBytes will sign bytes with a key and return the key name and signature an error will be returned if the signing fails
4711	fetch will retrieve data from a blobstore using a reader and buffer the response data
4712	seek will adjust the reader's position and buffer state returning the new offset or an error if adjustment fails
4713	multiKeyToProto converts multiple keys to protocol buffer references using an application ID
4714	referenceValueToKey will convert a reference value to a key with validation returning an error if the key is invalid
4715	keyToReferenceValue converts a key to a reference value with path elements including app, namespace, and path components
4716	Put will store a single key-value pair and return the key or an error if storage fails
4717	PutMulti will store multiple entities with given keys returning updated keys or error if storage fails
4718	Delete will remove a key-value pair and return an error if the deletion fails
4719	DeleteMulti will remove multiple datastore entries by key and return an error if validation fails or the operation is unsuccessful
4720	deploy will execute a command with given arguments and return an error if execution fails
4721	Next will return the next record or error from logs or results seen and handle request offset accordingly
4722	protoToAppLogs converts protocol buffer log lines to application logs with timestamp, level, and message
4723	protoToRecord converts a protocol buffer request log to a record with marshaled offset and parsed timestamps
4724	Run will execute a query request and return a result containing the context, request, and any error that occurred during the process
4725	run will execute a log reading operation and populate results into records returning any errors encountered during the process
4726	Current will return a user object from context headers or nil if no user data is present
4727	IsAdmin checks if the App Engine user has admin privileges by examining incoming headers
4728	isErrFieldMismatch will return a boolean indicating if the error is a datastore field mismatch error
4729	Stat retrieves blob information from datastore using context and blob key, returning blob info or error
4730	Send will set blob key and content type headers on the response writer
4731	UploadURL will return an upload URL and error based on the provided options and context
4732	Delete will remove a single blob specified by the blob key and return an error if the deletion fails
4733	DeleteMulti will remove multiple blobs from storage and return an error if the operation fails
4734	NewReader will return a reader for a blob given a context and blob key
4735	Handle registers an HTTP handler that processes XMPP chat messages using a provided function
4736	Send will transmit a message through XMPP returning errors for failed deliveries or status mismatches
4737	Invite will send an XMPP invitation from one user to another using the internal call mechanism returning an error if the operation fails
4738	Send will transmit presence information through xmpp protocol returning an error if the operation fails
4739	GetPresence will return a user's presence status and an error if the presence is unavailable or unknown
4740	GetPresenceMulti retrieves presence statuses for multiple JIDs and returns results or errors for each request
4741	newStructFLS will create a FieldLoadSaver from a struct pointer returning an error if the pointer is invalid or the struct is unprocessable
4742	SaveStruct will return a slice of fields and an error by saving a struct with metadata
4743	Namespaces will return a list of namespace strings and an error by querying keys from context
4744	Kinds function retrieves all kind names from datastore using a query and returns them as a string slice
4745	RunInTransaction will execute a function within a transaction allowing for specified attempts and options returning an error if concurrent transaction issues occur
4746	imports will return a boolean indicating if a package is imported in the file an error will be returned if the import is not found
4747	importSpec will return an import specification matching the given path or nil if not found
4748	declImports will check if a specific import path exists in a generic declaration and return a boolean value indicating the result
4749	isPkgDot checks if an expression is a selector expression with specified package and name
4750	isTopName will return a boolean indicating if the expression is an unqualified identifier matching the given name
4751	isName will return a boolean indicating if an expression matches a given name string
4752	isCall determines if an expression is a function call with specified package and name returning a boolean value
4753	refersTo will return a boolean indicating if two identifiers refer to the same object in the AST
4754	isEmptyString will check if an AST expression is an empty string literal and return true if it is, false otherwise
4755	countUses will return the number of times an identifier is referenced within a given scope of statements
4756	assignsTo will determine if an identifier is assigned to within a scope returning true if assigned and false otherwise
4757	newPkgDot creates a selector expression with package and name identifiers returning an ast expression
4758	renameTop will rename top-level identifiers in an AST file, returning true if any changes were made
4759	matchLen will return the length of matching characters between two strings starting from index zero
4760	deleteImport will remove a specified import path from an AST file and return whether the deletion occurred, handling both single and grouped import declarations.
4761	rewriteImport will update a file's import path from old to new and return whether any changes were made
4762	DefaultTicket returns a formatted ticket string based on application ID, module name, version, and instance ID, with special handling for development servers.
4763	flushLog will attempt to flush pending log lines to service returning whether successful and rescuing logs if needed
4764	withDeadline will return a context with the given deadline and a cancel function, or the parent context if the deadline is zero
4765	KeepAlive will send a GetSocketName request over remote_socket service and return an error if the call fails
4766	applyTransaction will execute a transaction setter function on a protocol buffer message and transaction object
4767	analyze will return an application struct with main flag files and imports an error if the analysis fails
4768	buildContext will return a build context with specified build tags appended to default build tags
4769	synthesizeMain will generate a unique main file name, write it to a tar archive with specified headers and content, returning an error if any step fails or if a unique name cannot be found within 100 attempts
4770	findInGopath will search for a package directory in the GOPATH and return the path if found, otherwise it returns an error indicating the package could not be located
4771	copyTree will recursively copy directory contents from source to destination using tar writer, skipping specified files and returning errors for failed operations
4772	copyFile will copy a source file to a destination within a tar archive, returning an error if any step fails including opening, stating, creating header, writing header, or copying data
4773	checkMain will verify if a Go package has a main function and return whether it's a command, the list of Go files, and any error during parsing
4774	isMain will return a boolean indicating if the function is the main function with no parameters and no return values
4775	readFile will check if a Go file contains a main function and return a boolean indicating the result along with any error that occurs during file reading or parsing
4776	initField will navigate nested struct fields using index paths and return the final field value
4777	loadEntity will convert a protocol buffer entity to a struct or property loader returning an error if the conversion fails
4778	validIndexNameOrDocID will return a boolean indicating if the string is a valid index name or document ID an invalid string returns false
4779	Open will create and return a new Index with the provided name, returning an error if the name is invalid
4780	Put will store a single item by ID and return the ID or an error if storage fails
4781	Get will retrieve a document by ID from a search index and load it into the destination object, returning an error if the document is not found or if there are issues with the search request.
4782	Delete will remove a single item from the index by its id and return an error if the operation fails
4783	DeleteMulti will remove multiple documents by ID from an index and return any errors that occur during the deletion process
4784	Search will return an iterator for a search query with specified options and an error if both cursor and offset are provided
4785	fetchMore will load additional results into the iterator if no more results are available and a fetch function exists, returning any error encountered during the process
4786	Next will return the next document id from iterator and load document into destination if not idsOnly, returning error if document loading fails or no more documents available
4787	Facets method returns parsed facet results with their counts and values from iterator data
4788	DefaultBucketName will return the default GCS bucket name from an RPC response or an error if the request fails
4789	valid will check if a key and its parent have proper values and return true if all validations pass
4790	Equal will compare two keys and return true if they are equal, false otherwise
4791	root will return the topmost parent key in the hierarchy
4792	marshal will write a key's path to a buffer including its kind and ID
4793	String will return a key's string representation by marshaling its contents into a buffer
4794	Encode will return a base64 URL encoded string representation of a key proto message, trimming trailing padding, and panicking on marshaling errors
4795	DecodeKey will return a key and error by decoding a base64 encoded string and unmarshaling it into a reference object
4796	NewIncompleteKey creates a new key with empty string id and zero integer id using context kind and parent
4797	NewKey creates a new key with specified kind, string ID, integer ID, and parent key returning the constructed key object
4798	AllocateIDs will return a range of unique identifiers for a given datastore kind and parent key, allocating the specified count of IDs, and returning an error if the allocation fails or parameters are invalid
4799	IsOverQuota will return a boolean indicating if the error is a quota exceeded error by checking the call error code against 4
4800	ClassicContextFromContext will extract an appengine context from a netcontext or return an error if not found
4801	Send will transmit a message through the given context and return an error if transmission fails
4802	SendToAdmins will send a message to all admins and return an error if the sending fails
4803	Failures will return the count of failed tests within all packages in a report
4804	decodeFieldNumberAndTyp3 will return a field number, type, and bytes read an error will be returned if the field number is invalid
4805	checkTyp3 will verify if the reflected type matches the expected type and return an error if they do not match
4806	decodeTyp3 will return a typ3 value and the amount of bytes read an error will be returned if the typ3 byte is invalid
4807	NewPrefixBytes will create a new prefix bytes array from the given byte slice by copying the contents into a fixed-size array and returning it
4808	getLengthStr will return the size of a type in hexadecimal or "variable" based on the type kind
4809	collectImplementers_nolock will populate implementers map with concrete type information that implements the given type info interface
4810	checkConflictsInPrio_nolock will verify interface implementer conflicts against priority list and return error if conflict exists outside of priority ordering
4811	constructConcreteType will return a new concrete type value and its interface value based on type information preferring pointers when specified
4812	MarshalBinaryLengthPrefixedWriter will write encoded data to a writer and return the number of bytes written and any error that occurs during encoding or writing
4813	MarshalBinaryBare will encode an object into binary format with amino prefix and return bytes or error if encoding fails
4814	UnmarshalBinaryLengthPrefixed will decode a binary message with length prefix returning an error if the decoding fails or bytes are leftover
4815	UnmarshalBinaryBare will decode binary data into a pointer's underlying value, verifying prefix bytes for registered types and returning errors for malformed input or incomplete reads
4816	MustMarshalJSON will marshal an object into JSON bytes or panic if marshaling fails
4817	MustUnmarshalJSON will panic if unmarshaling JSON fails otherwise it will unmarshal the byte slice into the given pointer
4818	MarshalJSONIndent will format serialized data with indentation returning bytes and an error if formatting fails
4819	newDataReader will return a new data reader with buffered input and wrapped reader
4820	internalDataReader Read method processes telnet protocol bytes, handling control sequences like IAC, WILL, WONT, DO, DONT, SB, SE while discarding or copying data bytes into provided buffer
4821	ListenAndServeTLS will start a TLS server on the given address using the specified certificate and key files, returning an error if the operation fails
4822	ProducerFunc will execute a function with context name and arguments and return a handler
4823	PromoteHandlerFunc will return a promoted handler with piped stdin, stdout, and stderr streams and copied arguments
4824	Serve will start a server with the given listener and handler, returning an error if the server fails to start
4825	Serve will listen for telnet connections and handle each with a handler goroutine, returning on listener errors
4826	Fail will write usage and error message to stderr then exit the program with failure status
4827	WriteUsage generates a command-line usage message showing options and positional arguments with proper formatting and brackets for optional items
4828	WriteHelp will output a parser's description, usage, positional arguments, options, and built-in options to a writer with proper formatting
4829	MustParse will create a parser and parse command line arguments or exit if errors occur
4830	Parse will return an error if the parser fails to parse the destination values with the given flags
4831	walkFields will recursively traverse struct fields and apply a visit function to each field and its value
4832	Parse will process command line arguments and return an error if help or version flags are specified otherwise it will continue processing the arguments
4833	setSlice will populate a destination slice with parsed string values returning an error if assignment fails
4834	canParse determines if a type is parseable as scalar, boolean, or multiple values through recursive inspection of pointers and slices
4835	isBoolean will return a boolean indicating if the type is a boolean or pointer to boolean otherwise false
4836	NewFromMap will create a new tree from a map by inserting each key-value pair into the tree
4837	Insert will add a string key and value to the tree, returning the old value and true if key existed, otherwise nil and false for new insertion.
4838	Delete will remove and return a value from the tree based on the string key, returning false if not found and performing node merging operations after deletion
4839	DeletePrefix will remove all nodes with the given prefix and return the count of deleted nodes
4840	deletePrefix will remove a subtree starting from a prefix and return the number of nodes deleted, merging parent nodes when necessary
4841	Get will search for a string key in the tree and return the associated value and true if found, otherwise nil and false
4842	LongestPrefix will search a tree for the longest matching key prefix returning the matched key value and true if found otherwise empty string nil and false
4843	Minimum will return the smallest key-value pair from the tree and a boolean indicating success or failure
4844	WalkPrefix will traverse a tree with a given prefix and apply a function to each node, recursively walking children when prefixes match or partially overlap.
4845	recursiveWalk will traverse a node structure and apply a function to each key-value pair, returning true if any application returns true
4846	ToMap will convert a tree structure into a dictionary mapping keys to their corresponding values by traversing each node and storing its key-value pair in the resulting map.
4847	checkip will determine the IP type, convert it to a number, and calculate an index based on metadata base addresses
4848	readuint32 will read four bytes from file at given position and return them as little-endian unsigned 32-bit integer with error handling for file and binary reading failures
4849	readuint128 will read 16 bytes from file at position and return as big integer in big endian format
4850	loadmessage will return an IP2Locationrecord with all fields set to the input string value
4851	Printrecord will display all location record fields including country, region, city, latitude, longitude and other network details
4852	Main will scale graphic context, draw a gopher, restore context, and return output filename
4853	SaveToPdfFile will save a pdf document to a file and return an error if the operation fails
4854	CubicCurveTo will add a cubic curve component to the path with control points and end point updating the current position
4855	ArcTo will draw an elliptical arc from current point to end point with specified center, radii, and angles, adjusting for clockwise or counter-clockwise direction and updating path components accordingly
4856	String will return a formatted string representation of path components and their points
4857	VerticalFlip will return a vertically flipped copy of a path with inverted y-coordinates for all points and components
4858	NewGlyphCache will return a new glyph cache implementation with an empty map of glyphs
4859	Fetch will return a glyph from cache or render it using graphic context and font name if not present
4860	renderGlyph will create and return a glyph with its path and width from a given character and font using graphic context operations
4861	Copy will return a duplicate glyph with its path and width copied over
4862	Fill will draw a glyph at a given position and return its width using a graphic context
4863	Main will draw lines ellipses and fill colors on a graphic context and return the output filename
4864	Draw will render a line segment between two points using the graphic context stroke operation
4865	Paint will render spans with specified colors and alpha values updating vertices and colors slices accordingly
4866	SetColor will set the painter's color components based on the input color's RGBA values, handling alpha transparency correctly
4867	NewPainter will return a new painter instance with initialized vertex and color slices ready for drawing operations
4868	GetStringBounds calculates the bounding box of a string using font metrics and glyph data, returning coordinates for the left, top, right, and bottom extents.
4869	recalc will update the graphic context scale based on font size and DPI settings
4870	SetFont will update the current font of the graphic context to the specified truetype font
4871	ClearRect will clear a rectangular area by creating a masked group and replacing the current groups with it
4872	drawString will render text using either path or SVG font mode and return the text width measurement
4873	newGroup creates a svg group with stroke and fill attributes from graphic context and appends it to svg groups
4874	newMask creates a mask with specified dimensions and attaches it to the graphic context returning the created mask
4875	embedSvgFont will create or update an SVG font with glyphs from text and return the font object with assigned attributes and glyphs
4876	TraceQuad will trace a quadratic Bézier curve using recursive subdivision and line tracing based on a flattening threshold error will be returned if the quad array length is insufficient
4877	GetFontName will return a formatted font string containing name, family, style, and size from context stack data
4878	NewStackGraphicContext creates a new graphic context with default values and returns a pointer to it
4879	NewFolderFontCache creates a font cache for a given folder path with an empty font map and filename namer
4880	NewSyncFolderFontCache will return a new font cache instance with initialized map and folder path
4881	Main will draw a gopher image and return the output filename with error handling
4882	NewPdf creates a new PDF with specified orientation, unit, and size while setting default drawing properties and adding an initial page
4883	clearRect will fill a rectangular area with white color and restore the original fill color and position after drawing
4884	NewGraphicContext creates a new graphic context with default DPI settings and returns a pointer to it
4885	Clear will set the entire page to white by drawing a rectangle over it using the graphic context's pdf page size dimensions.
4886	GetStringBounds will return the bounding box coordinates of a string using PDF font metrics and width measurement
4887	CreateStringPath will generate a string path at specified coordinates returning the string width
4888	FillStringAt will create a string path and return the cursor position after rendering the text at the specified coordinates
4889	SetStrokeColor will update the stroke color of the graphic context and the pdf drawing color
4890	SetFillColor will update the fill color of the graphic context and apply it to the pdf with rgb values
4891	SetLineDash configures dash pattern and offset for graphic context and pdf output
4892	SetLineWidth will update the line width in both the graphic context stack and pdf context
4893	Main will draw hello world text on a graphic context and return the output filename with the specified extension
4894	Draw will render a rounded rectangle with hello world text using specified font and color settings
4895	SaveToPngFile will write an image to a file in PNG format returning an error if the operation fails
4896	LoadFromPngFile will return a decoded PNG image and an error if the file cannot be opened or decoded
4897	Resource will return a resource path with root folder and file name an error will be returned if the extension is not supported
4898	Output will return a file path string with root directory based on extension an error will be returned if the extension is not supported
4899	Main will save graphic context, transform coordinates, draw tiger from postscript file, restore context, and return output filename
4900	Draw will open a postscript file and execute its commands using a graphic context interpreter
4901	Main will draw a droid using graphic context and return the output filename with specified extension
4902	Bubble will draw a bubble shape using quadratic curves and stroke the path on the graphic context
4903	Dash will draw a dashed line path with specific dimensions and styling using graphic context parameters
4904	CubicCurve will draw a cubic Bézier curve with control points and stroke segments using graphic context parameters
4905	FillStroke will draw a complex shape with two main components, applying stroke and fill properties to create a styled geometric figure
4906	FillStyle will draw a vehicle-like shape with two wheels and a body using graphics context and specific dimensions
4907	PathTransform will draw a scaled and translated arc shape with specified dimensions and stroke width using graphic context operations
4908	Star will draw a star shape using graphic context with specified dimensions and rotation steps
4909	Draw will render multiple graphic elements including bubbles, curves, arcs, and shapes on a canvas with specified dimensions and styling parameters
4910	ConvertPath will translate path components into vector drawing commands updating start coordinates and handling different curve types
4911	Main will draw lines with different caps and joins then return the output filename
4912	Draw will render a thick dark line and thin red line connecting two points with specified line caps and joins using graphic context
4913	DrawContour will render a contour path using quadratic curves and lines based on point data with offset translation
4914	Flatten will process path components using a flattener to convert curves into line segments based on scale and component type
4915	Clear will clear the entire image by setting all pixels to the background color using the image's dimensions
4916	ClearRect will fill a rectangular area with the current fill color using image drawing operations
4917	DrawImage will transform and draw an image onto a destination using specified matrix transformation and filtering options
4918	Main will draw a gopher image with a frame and return the output filename and any error that occurs during drawing
4919	Draw will render a framed image with scaling and rotation transformations using draw2d graphics context
4920	Draw will render a droid shape using graphic context with specified colors and geometric components including head, eyes, body, arms, and legs
4921	ChecksumString32S will compute a checksum of a string with a given seed, returning 0 for empty strings and using unsafe pointer conversion for non-empty strings
4922	ChecksumString64S will compute a checksum of a string using a seed value returning the checksum and handling empty strings by delegating to Checksum64S
4923	NewS32 will return a new XXHash32 instance initialized with the given seed and reset state
4924	NewS64 will return a new XXHash64 instance initialized with the given seed and reset state
4925	round64 performs bitwise rotation and multiplication on hash and value using prime constants
4926	Checksum32S computes a 32-bit hash checksum of byte input with seed initialization and bitwise operations
4927	Checksum64S will return a 64-bit checksum of input bytes using either long or short checksum algorithm based on input length
4928	getStage will return current stage, a function to advance stage, and a function to reset environment variable with error handling for stage transitions
4929	New will return a new Glg instance with initialized loggers and level counter set to FATAL
4930	Get will return a global logger instance initializing it once with a specific time format if it hasn't been initialized yet
4931	SetMode will update the logging mode for all logger levels and return the logger instance
4932	SetPrefix will update the logger's tag with the given prefix and return the logger instance
4933	GetCurrentMode will return the logging mode for a given level or NONE if level is not found
4934	InitWriter will reset all loggers' writers and update their modes in the Glg instance
4935	SetWriter will update the writer for all loggers and return the glg instance, if the writer is nil it will return without changes
4936	SetLevelColor will assign a color function to a logger level and return the logger instance
4937	SetLevelWriter will update the writer for a given level and return the logger instance
4938	AddStdLevel will add a standard level logger with specified tag mode and color settings to the glg instance and return the updated glg object
4939	EnableColor will set color mode on all loggers and update their output format returning the logger instance
4940	EnableLevelColor will activate color formatting for a specified log level and return the logger instance
4941	DisableLevelColor will turn off color formatting for a specified log level and update the logger instance accordingly
4942	RawString will extract and return a substring from data using separator and length constants
4943	TagStringToLevel will return the level associated with a tag string from the logger's level map or a default invalid level if the tag is not found
4944	Println will output values with newline and return any error during printing
4945	Fatal will log a fatal level message and exit the program, panicking if logging fails
4946	Fatalf will log a fatal message and exit the program, panicking if logging fails
4947	isModeEnable will return whether a logging mode is currently enabled for a given level
4948	CaptureMetrics will return request metrics by capturing response writer and executing the handler function
4949	get will traverse a cedar array using key bytes and return a pointer to the final value node
4950	Save will encode and write cedar data to output in specified format gob or json, returning error for invalid format
4951	SaveToFile will write data to a file using a buffered writer and return any error that occurs during the process
4952	Load will decode data from reader into cedar based on data type returning an error for invalid types
4953	LoadFromFile will read data from a file and load it into Cedar returning an error if the operation fails
4954	Key will return a byte slice key and an error based on the Cedar array id parameter, returning ErrNoPath if no path exists or ErrInvalidKey if the key is invalid, otherwise it reverses the key and returns it.
4955	Value will return a stored integer value or an error if not found by checking array indices and base values
4956	Delete will remove a key from Cedar trie by deleting nodes and updating sibling links, returning error if path doesn't exist
4957	Set will assign version components to a Version struct returning an error if parsing fails
4958	Version compare returns the result of comparing two versions including pre-release values
4959	Version.Slice will return a slice of int64 values containing major minor and patch versions
4960	BumpMajor will increment the major version number and reset minor, patch, pre-release, and metadata fields to their default values.
4961	BumpMinor will increment the minor version number and reset patch, pre-release, and metadata fields
4962	BumpPatch will increment the patch version and reset pre-release and metadata fields
4963	validateIdentifier will return an error if the identifier string does not match the semantic versioning identifier pattern
4964	newStream will create and return a new stream with specified buffer size and replay functionality including channels for subscribers and events
4965	addSubscriber will register a new subscriber with the stream and return the created subscriber object
4966	New will return a server with default settings and empty streams map
4967	Close will lock the server mutex and quit all streams before deleting them from the server's stream map
4968	CreateStream will return a new or existing stream by id with locked access and initialized buffer size
4969	RemoveStream will close and delete a stream by id from the server's streams map using mutex protection
4970	StreamExists will check if a stream with the given id exists and return a boolean value indicating the result
4971	Publish will send an event to a stream by id through a channel and process the event before sending it
4972	NewClient will return a new client instance with the specified url, http connection, headers map, and subscribed channels
4973	Subscribe will establish a stream connection with retry logic and execute a handler for each event received
4974	SubscribeChan will establish a stream subscription through a client and handle events via a channel with retry logic and cleanup on disconnect or error.
4975	SubscribeRaw will register a handler for all events an error will be returned if subscription fails
4976	Unsubscribe will remove a channel from subscribed map and send true to indicate unsubscription
4977	NewEventStreamReader creates a reader that splits input into events based on delimiter sequences returning an EventStreamReader struct containing a configured scanner
4978	ReadEvent will return an event byte slice and error if scanning fails or EOF is reached
4979	HTTPHandler will process server-sent events by streaming data to clients based on stream ID with proper headers and connection handling
4980	Add will append an event to the event log with a timestamp and incrementing index
4981	Replay will send events from the event log to the subscriber based on event ID comparison
4982	readKey will return a crypto signer from a pem encoded file an error will be returned if the file is not properly formatted or contains an unsupported key type
4983	writeKey will encode an ECDSA private key to PEM format and write it to a file, returning an error if the operation fails
4984	anyKey will return a cryptographic signer from file or generate a new key pair an error will be returned if the key cannot be read or generated
4985	sameDir will return a file path by joining the directory of an existing file with a new filename
4986	printAccount will display account information including URI, key, contact, terms, and agreement status in a tabular format
4987	tmpl will execute a template with custom functions and handle errors during writing or execution
4988	printUsage will write the usage template and commands to the given writer using a buffered writer
4989	FromRequest will return the client's IP address by checking headers and remote address in a specific priority order
4990	Do will execute a clear command using the provided context and parameters, returning any error that occurs during execution
4991	Do will disable the command and return an error if execution fails
4992	RemoveDOMStorageItemParams executes a command to remove DOM storage item with given parameters and context, returning any error that occurs during execution.
4993	Do will execute a command to set DOM storage item with given parameters and context, returning an error if unsuccessful
4994	Do will execute a push message delivery command using the provided context and parameters, returning any error that occurs during execution.
4995	DispatchSyncEventParams execution will send a sync event command and return an error if the operation fails
4996	Do will execute an inspect worker command using the provided context and parameters, returning any error that occurs during execution.
4997	Do will execute a command to set force update on page load and return an error if the execution fails
4998	Do will execute a skip waiting command with context and return an error if execution fails
4999	StartWorkerParams executes a command to start a worker in a given context and returns any error that occurs
5000	StopAllWorkersParams executes a command to stop all worker threads and returns any error encountered
5001	StopWorkerParams execution will stop a worker and return an error if the operation fails
5002	Do will unregister parameters using cdp execute command and return an error if the operation fails
5003	Do will execute an update registration command using the provided context and parameters, returning any error that occurs during execution.
5004	Do will execute a bind command with context and return an error if execution fails
5005	Do will execute an unbind command using the provided context and parameters, returning any execution error.
5006	ExceptionDetails.Error will return a formatted error message containing the exception text line number and column number
5007	Do will execute a command to release animations and return an error if the execution fails
5008	Do will execute a command to seek animations with given parameters and context, returning an error if execution fails
5009	Do will execute a command to pause with the provided parameters and return an error if the execution fails
5010	Do will execute a command to set playback rate with given context and parameters, returning an error if execution fails
5011	Do will execute a timing command with the provided context and return any errors that occur during execution
5012	Do will execute a command to prepare for leak detection and return an error if it fails
5013	Do will execute a command to forcibly purge javascript memory and return an error if the operation fails
5014	Do will execute a command to set pressure notifications suppressed and return an error if it fails
5015	Do will execute a simulate pressure notification command with the given context and parameters, returning an error if the execution fails
5016	WithSamplingInterval will set the sampling interval and return a pointer to the updated start sampling parameters
5017	WithSuppressRandomness will set randomness suppression on sampling parameters and return the modified parameters
5018	StartSamplingParams execution will return an error if the sampling command fails
5019	StopSamplingParams Do method executes a stop sampling command using cdp with context and returns an error
5020	ClearDeviceOrientationOverrideParams will clear the device orientation override and return an error if the operation fails
5021	SetDeviceOrientationOverrideParams will execute a command to override device orientation returning an error if it fails
5022	Do will execute a start violations report command with the provided context and parameters, returning an error if the execution fails
5023	StopViolationsReportParams Do method executes a cdp command to stop violation reporting and returns any error that occurs during execution.
5024	String method returns modifier name or formatted integer for modifier types
5025	WithNodeID will set the node identifier in the parameters and return the updated parameters object
5026	WithBackendNodeID will set the backend node ID and return the updated parameters struct
5027	WithObjectID will set the object identifier in the parameters and return a pointer to the updated structure
5028	WithFetchRelatives will set the fetch relatives flag in partial ax tree parameters and return the updated parameters object
5029	Do will execute a command to set the time domain with given parameters and return an error if execution fails
5030	WithClipRect will set the clipping rectangle parameter and return the updated profile snapshot parameters object
5031	Do will execute a release snapshot command using the provided context and parameters, returning any error that occurs during execution.
5032	Do will execute a command to clear an object store returning an error if the operation fails
5033	Do will execute a delete database command using the provided context and parameters, returning any error that occurs during execution.
5034	Do will execute a delete object store entries command using the provided context and parameters, returning any error that occurs during execution.
5035	WithKeyRange will set the key range parameter and return the updated request data parameters struct
5036	Do will execute a command to set sampling interval and return an error if the execution fails
5037	Do will execute a start command using the context and return any error that occurs during execution
5038	WithCallCount will set the call count flag in coverage parameters and return the modified parameters object
5039	WithDetailed will set the detailed field of StartPreciseCoverageParams and return a pointer to the modified struct
5040	Do will execute a command to start precise coverage and return an error if it fails
5041	Do will execute a start type profile command and return an error if the execution fails
5042	StopPreciseCoverageParams executes a command to stop precise coverage collection and returns any error during execution
5043	StopTypeProfileParams execution will stop type profiling and return an error if the operation fails
5044	Do will execute a command to set ignore certificate errors with the provided context and parameters, returning an error if the execution fails
5045	Do will execute a command to add an inspected heap object and return an error if the execution fails
5046	Do will execute garbage collection command and return an error if execution fails
5047	WithSamplingInterval will set the sampling interval and return a pointer to the updated start sampling parameters
5048	StartTrackingHeapObjectsParams will execute a command to begin tracking heap objects and return an error if the execution fails
5049	WithReportProgress will set the report progress flag in stop tracking heap objects parameters and return the modified parameters
5050	StopTrackingHeapObjectsParams will execute a command to stop tracking heap objects and return an error if the execution fails
5051	WithReportProgress will set the report progress flag in heap snapshot parameters and return the modified parameters
5052	TakeHeapSnapshotParams will execute a heap snapshot command and return an error if the execution fails
5053	WithBrowserContextID will set the browser context ID in grant permissions parameters and return the updated parameters object
5054	Do will execute grant permissions command with context and return an error if execution fails
5055	WithBrowserContextID will set the browser context ID in reset permissions parameters and return the updated parameters object
5056	ResetPermissionsParams Do method executes a reset permissions command using cdp with given context and returns an error if the execution fails
5057	Do will execute a crash command using the context and return an error if the execution fails
5058	Do will execute a command to crash the gpu process and return an error if the execution fails
5059	WithQuery will set the query field of GetHistogramsParams and return a pointer to the updated struct
5060	WithTargetID will set the target ID in the parameters and return a pointer to the updated structure
5061	Do will execute a command to set window bounds with given parameters and context, returning an error if the operation fails
5062	WithImage will set the image field of SetDockTileParams and return a pointer to the updated struct
5063	Do will execute a set dock tile command with given parameters and return an error if the execution fails
5064	Do will execute a delete cache command using the provided context and parameters, returning an error if the operation fails
5065	Do executes a delete entry command using cdp with the provided context and parameters, returning any error that occurs during execution.
5066	WithPathFilter will set the path filter field and return a pointer to the updated request entries parameters struct
5067	Do will execute a discard search results command and return an error if the execution fails
5068	Do will execute a focus command using the context and focus parameters, returning any execution error
5069	Do will mark the current state as undoable in the browser context
5070	WithIncludeUserAgentShadowDOM will set the IncludeUserAgentShadowDOM field and return a pointer to the updated PerformSearchParams struct
5071	Do will execute a redo command using the context and return any error that occurs
5072	RemoveAttributeParams will execute a command to remove an attribute and return an error if the operation fails
5073	Do will execute a remove node command using the provided context and parameters, returning an error if the operation fails
5074	Do will execute a request child nodes command and return an error if the execution fails
5075	WithNodeID will set the node identifier in resolve node parameters and return the updated parameters object
5076	WithBackendNodeID will set the backend node ID in resolve node parameters and return the updated parameters object
5077	WithExecutionContextID will set the execution context ID on resolve node parameters and return a pointer to the updated parameters
5078	Do will execute a set attribute value command with context and return an error if execution fails
5079	WithName will set the name field of SetAttributesAsTextParams and return a pointer to the updated struct
5080	Do will execute a command to set attributes as text returning an error if the operation fails
5081	Do will execute a command to set file input files with given parameters and return an error if the operation fails
5082	Do will execute a command to set inspected node parameters and return an error if the execution fails
5083	Do will execute a command to set node value and return an error if the execution fails
5084	SetOuterHTMLParams will execute a command to set outer HTML and return an error if the operation fails
5085	Do will execute an undo command using the context and return any error that occurs during execution
5086	Do will execute a command to force pseudo state with given parameters and return an error if execution fails
5087	Do will execute a command to set the effective property value for a node and return an error if the execution fails
5088	Do will execute a command to start tracking rule usage and return an error if it fails
5089	Do will execute a close command with context and return an error if execution fails
5090	Do will execute a command to clear data for origin parameters and return an error if the execution fails
5091	Do will execute a command to track cache storage for origin parameters and return an error if the execution fails
5092	TrackIndexedDBForOriginParams Do method executes a command to track indexedDB for an origin and returns an error if the execution fails
5093	Do will execute a command to untrack cache storage for origin parameters and return an error if the execution fails
5094	Do will execute a command to untrack indexedDB for an origin and return any error that occurs during execution
5095	Do will execute a command to hide highlight with context and return an error if execution fails
5096	Do will execute a command to highlight a frame and return an error if it fails
5097	WithNodeID will set the node identifier in highlight parameters and return the modified parameters
5098	WithBackendNodeID will set the backend node ID in highlight node parameters and return the updated parameters
5099	WithObjectID will set the object identifier in highlight node parameters and return the updated parameters
5100	WithSelector will set the selector field of HighlightNodeParams and return a pointer to the modified struct
5101	Do will execute a command to highlight a node with given parameters and context, returning any error that occurs during execution
5102	Do will execute a highlight quad command with given parameters and return an error if execution fails
5103	Do will execute a highlight rectangle command with given parameters and context returning an error if execution fails
5104	WithHighlightConfig will set the highlight configuration and return the modified parameters object
5105	Do will execute a command to set inspect mode with given parameters and return an error if execution fails
5106	Do will execute a command to set show ad highlights parameter and return an error if the execution fails
5107	WithMessage will set the message field of SetPausedInDebuggerMessageParams and return a pointer to the updated struct
5108	Do will execute a command to set paused in debugger message and return an error if execution fails
5109	Do will execute a command to set debug borders show parameter and return an error if the execution fails
5110	Do will execute a command to set show fps counter with given parameters and return an error if execution fails
5111	Do will execute a command to set show paint rects with given parameters and return an error if execution fails
5112	SetShowScrollBottleneckRectsParams executes a command to show scroll bottleneck rectangles with context and returns an error
5113	SetShowHitTestBordersParams executes a command to show hit test borders with context and returns an error if execution fails
5114	Do will execute a command to set show viewport size on resize with given parameters and context, returning an error if execution fails
5115	Do will execute a command to clear browser cache and return an error if the operation fails
5116	ClearBrowserCookiesParams Do method executes a command to clear browser cookies and returns any error that occurs during execution
5117	WithErrorReason will set an error reason on request parameters and return the modified parameters
5118	WithRawResponse will set the raw response field and return the modified parameters object
5119	WithURL will update the URL field of ContinueInterceptedRequestParams and return a pointer to the modified struct
5120	WithMethod will set the request method and return the modified parameters object
5121	WithPostData will set the post data field and return the modified parameters object
5122	WithHeaders will set request headers and return the modified parameters object
5123	WithAuthChallengeResponse will set the authentication challenge response and return the modified parameters object
5124	Do will execute a continue intercepted request command with the provided context and parameters, returning an error if the execution fails
5125	WithURL will set the URL field of DeleteCookiesParams and return a pointer to the modified struct
5126	WithDomain will set the domain field of DeleteCookiesParams and return a pointer to the modified struct
5127	WithPath will set the path field of DeleteCookiesParams and return a pointer to the modified struct
5128	Do will execute a delete cookies command using the provided context and parameters, returning any error that occurs during execution.
5129	WithConnectionType will set the network connection type and return the modified parameters struct
5130	Do will execute network conditions emulation with the provided parameters and context, returning any error that occurs during execution.
5131	Do will execute the enable command with the provided context and return any error that occurs during execution
5132	WithUrls will set the Urls field of GetCookiesParams and return a pointer to the updated struct
5133	Do will execute a replay xhr command with the provided context and parameters, returning an error if the execution fails
5134	Do will execute a command to set blocked urls with the provided context and parameters, returning an error if the execution fails.
5135	Do will execute a command to set bypass service worker parameters and return an error if the execution fails
5136	Do will execute a command to disable cache and return an error if the operation fails
5137	WithURL will set the URL field of SetCookieParams and return a pointer to the updated struct
5138	WithDomain will set the domain field of SetCookieParams and return a pointer to the updated struct
5139	WithPath will set the path field of SetCookieParams and return a pointer to the updated struct
5140	WithSecure will set the secure flag on cookie parameters and return the updated parameters
5141	WithHTTPOnly will set the HTTPOnly field of SetCookieParams and return a pointer to the modified struct
5142	WithSameSite will set the same site policy on cookie parameters and return the updated parameters
5143	WithExpires will set the expiration time of a cookie and return the updated parameters
5144	Do will execute set cookies command with context and return an error if the operation fails
5145	Do will execute a command to set data size limits for testing and return an error if it fails
5146	Do will execute a command to set extra HTTP headers and return an error if the execution fails
5147	Do will execute a set request interception command with the provided parameters and context, returning an error if the execution fails.
5148	ClearDeviceMetricsOverrideParams Do method executes a command to clear device metrics override returning an error if execution fails
5149	ClearGeolocationOverrideParams will execute a command to clear geolocation override and return an error if the operation fails
5150	ResetPageScaleFactorParams Do method executes a command to reset page scale factor and returns an error if the execution fails
5151	Do will execute a command to set focus emulation enabled with given context and parameters returning an error if execution fails
5152	Do will execute a command to set CPU throttling rate with given parameters and context, returning an error if execution fails
5153	WithColor will set the color field of SetDefaultBackgroundColorOverrideParams and return a pointer to the modified struct
5154	Do will execute a command to set the default background color override and return an error if it fails
5155	WithScale will set the device metrics scale parameter and return the modified parameters object
5156	WithDontSetVisibleSize will set the DontSetVisibleSize field of SetDeviceMetricsOverrideParams and return a pointer to the modified struct
5157	WithScreenOrientation will set the screen orientation parameter and return the updated device metrics override parameters
5158	Do will execute a device metrics override command with given context and parameters returning an error if execution fails
5159	Do will execute a command to hide scrollbars and return an error if execution fails
5160	Do will execute a command to disable document cookies and return an error if it fails
5161	Do will execute a command to set emit touch events for mouse with given context and return an error if execution fails
5162	Do will execute a command to set emulated media parameters and return an error if the execution fails
5163	WithLatitude will set the geolocation latitude and return the modified parameters object
5164	WithLongitude will set the longitude field of geolocation parameters and return the modified parameters object
5165	WithAccuracy sets the accuracy field of geolocation parameters and returns the modified parameters object
5166	Do will execute a geolocation override command with the given context and parameters, returning an error if the operation fails.
5167	SetPageScaleFactor executes a command to set the page scale factor with given parameters and returns an error if the operation fails
5168	Do will execute a command to disable script execution and return an error if the operation fails
5169	WithMaxTouchPoints will set the maximum touch points for touch emulation and return the updated parameters object
5170	SetTouchEmulationEnabledParams executes a command to enable or disable touch emulation and returns an error if the execution fails
5171	WithBudget will set the budget field of VirtualTimePolicyParams and return the modified struct
5172	WithMaxVirtualTimeTaskStarvationCount will set the maximum virtual time task starvation count and return the updated parameters struct
5173	WithWaitForNavigation will set the wait for navigation flag in virtual time policy parameters and return the updated parameters object
5174	WithAcceptLanguage will set the accept language field on user agent override parameters and return the updated parameters struct
5175	WithPlatform will set the platform field of SetUserAgentOverrideParams and return a pointer to the modified struct
5176	Do will execute a command to set user agent override with given parameters and context, returning an error if unsuccessful
5177	Do will execute a dispatch key event command with the provided context and parameters, returning an error if the execution fails
5178	Do will execute insert text command with context and return an error if execution fails
5179	WithButtons will set mouse button state and return updated parameters struct
5180	Do will execute a mouse event dispatch command using the provided context and parameters, returning any error that occurs during execution.
5181	Do will execute a touch event dispatch command and return an error if it fails
5182	Do will execute emulate touch from mouse event command with given parameters and context returning an error if execution fails
5183	Do will execute a command to ignore input events and return an error if the execution fails
5184	Do will execute a pinch gesture command with the specified parameters and return an error if the execution fails
5185	WithXOverscroll will set the x overscroll value and return a pointer to the updated synthesize scroll gesture parameters
5186	WithYOverscroll will set the Y overscroll value and return a pointer to the updated scroll gesture parameters
5187	Do will execute a scroll gesture command with the synthesize parameters and return an error if the execution fails
5188	Do will execute a tap gesture synthesis command using the provided context and parameters, returning any execution error.
5189	Domain will return the method type's domain by extracting content before the first period character from the method type string representation
5190	WithDepth will set the depth field of GetEventListenersParams and return a pointer to the modified struct
5191	RemoveDOMBreakpointParams will execute a command to remove a DOM breakpoint and return an error if the operation fails
5192	WithTargetName will set the target name field and return the modified parameters object
5193	RemoveEventListenerBreakpointParams executes a command to remove an event listener breakpoint and returns an error if the operation fails
5194	RemoveInstrumentationBreakpointParams executes a command to remove instrumentation breakpoint and returns an error if the operation fails
5195	RemoveXHRBreakpointParams will execute a command to remove an XHR breakpoint and return an error if the operation fails
5196	Do will execute a command to set a DOM breakpoint and return an error if it fails
5197	Do will execute a command to set an event listener breakpoint and return an error if it fails
5198	Do will execute a command to set an instrumentation breakpoint and return an error if it fails
5199	SetXHRBreakpointParams executes a command to set an XHR breakpoint and returns an error if the operation fails
5200	WithExecutor will return a context with the given executor value attached to it
5201	Execute will run a method with parameters and result using a context executor or return an invalid context error
5202	AttributeValue will return the value of an attribute by name from a node's attributes list otherwise it will return an empty string
5203	xpath will return a node's path string with optional id and position filters while traversing up the tree structure
5204	NodeType.String will return a string representation of the node type or a formatted integer if unknown
5205	Do will execute a command to set the sink to use parameter and return an error if the execution fails
5206	StartTabMirroringParams will execute a command to start tab mirroring and return an error if the execution fails
5207	Do will execute a stop casting command using the provided context and parameters, returning an error if the execution fails
5208	StartObservingParams will execute a command to begin observing with the provided context and return an error if the execution fails
5209	StopObservingParams execution will stop observing and return an error if the command fails
5210	Do will execute a set recording command with the provided context and return an error if the execution fails
5211	ClearEventsParams execution will clear event logs and return an error if the operation fails
5212	WithObjectID will set the object identifier in call function parameters and return the modified parameters
5213	WithArguments will set the arguments of a function call and return the modified parameters object
5214	WithExecutionContextID will set the execution context ID and return a pointer to the updated call function parameters
5215	WithObjectGroup will set the object group field of call function on params and return the modified params struct
5216	Do will execute a command to discard console entries and return an error if the execution fails
5217	WithContextID will set the context ID in evaluate parameters and return a pointer to the updated parameters
5218	WithOwnProperties will set the own properties flag and return the updated parameters struct
5219	WithGeneratePreview will set the preview generation flag in properties parameters and return the updated parameters object
5220	WithExecutionContextID will set the execution context ID and return a pointer to the updated parameters struct
5221	WithObjectGroup will set the object group field and return a pointer to the updated query objects parameters struct
5222	Do will execute a release object command using the provided context and parameters, returning any error that occurs during execution.
5223	Do will execute a command to release an object group and return an error if the operation fails
5224	Do will execute a command to run if waiting for debugger and return an error if execution fails
5225	Do will execute a command to enable custom object formatting and return an error if it fails
5226	Do will execute a command to set the maximum call stack size to capture and return an error if the execution fails
5227	Do will execute a terminate execution command and return an error if the execution fails
5228	Do will execute an add binding command using the provided context and parameters, returning any error that occurs during execution
5229	Do will execute a remove binding command using the provided context and parameters, returning any execution error.
5230	Do will execute an end command using the context and return any error that occurs
5231	Do will execute a clock sync marker command using the provided context and parameters, returning any error that occurs during execution.
5232	WithBufferUsageReportingInterval will set and return start parameters with specified buffer usage reporting interval
5233	WithNoDisplayUpdates will set the display update flag in begin frame parameters and return the modified parameters
5234	WithScreenshot will set screenshot parameters and return the modified begin frame parameters
5235	Do executes a command to bring front the target window and returns an error if the execution fails
5236	WithClip will set the viewport clip region and return the updated screenshot parameters
5237	WithFromSurface will set the from surface parameter and return the modified capture screenshot parameters struct
5238	WithWorldName will set the world name in the parameters and return a pointer to the updated parameters struct
5239	WithGrantUniveralAccess will set universal access permission and return the updated parameters struct
5240	ResetNavigationHistoryParams Do method executes a command to reset navigation history and returns an error if the execution fails
5241	WithPromptText will set the prompt text field and return the updated struct instance
5242	HandleJavaScriptDialogParams executes a JavaScript dialog handler command returning an error if unsuccessful
5243	WithReferrer sets the referrer field of navigate parameters and returns a pointer to the updated parameters
5244	WithTransitionType will set the navigation transition type and return the updated parameters object
5245	WithFrameID will set the frame identifier in navigation parameters and return the updated parameters
5246	Do will execute a navigate to history entry command with the provided context and parameters, returning an error if the execution fails
5247	WithLandscape will set the landscape orientation parameter and return the modified print to PDF parameters structure
5248	WithDisplayHeaderFooter will set header footer display option and return the modified parameters struct
5249	WithPrintBackground will set the print background option and return the updated parameters struct
5250	WithScale will set the scaling factor in print to pdf parameters and return the modified parameters
5251	WithPaperWidth will set the paper width parameter and return the updated print to PDF parameters struct
5252	WithPaperHeight will set the paper height parameter and return the updated print to PDF parameters struct
5253	WithIgnoreInvalidPageRanges will set the ignore invalid page ranges flag in print to pdf parameters and return the modified parameters
5254	WithFooterTemplate will set the footer template of print to pdf parameters and return the modified parameters
5255	WithPreferCSSPageSize will set the prefer CSS page size option and return the updated print to PDF parameters
5256	WithScriptToEvaluateOnLoad will set the script to evaluate on load in reload parameters and return the updated parameters
5257	Do will execute a reload command with context and return an error if the execution fails
5258	Do will execute a command to remove a script from the new document parameters and return an error if the execution fails
5259	Do executes a screencast frame acknowledgment command with context and returns an error if the execution fails
5260	Do will execute a command to set ad blocking enabled status returning an error if execution fails
5261	Do will execute a command to set bypass CSP parameters and return an error if the execution fails
5262	Do will execute a command to set font families with given parameters and context, returning an error if the operation fails
5263	Do will execute SetFontSizes command with the parameters and return an error if execution fails
5264	Do will execute a command to set document content and return an error if the execution fails
5265	WithDownloadPath will set the download path in the parameters and return a pointer to the updated structure
5266	Do will execute a command to set download behavior with given parameters and context returning an error if execution fails
5267	Do will execute a command to enable or disable lifecycle events and return an error if the execution fails
5268	WithFormat will set the screencast format in start screencast parameters and return a pointer to the updated parameters
5269	WithMaxWidth will set the maximum width parameter and return the updated screencast parameters struct
5270	WithMaxHeight will set the maximum height parameter and return a pointer to the updated screencast parameters struct
5271	WithEveryNthFrame will set the frame interval for screen cast parameters and return the updated parameters object
5272	StartScreencastParams executes a screencast starting command with context and returns an error if unsuccessful
5273	StopLoadingParams Do method executes a stop loading command returning any error that occurs
5274	Do will execute a web lifecycle state command with the given context and parameters returning an error if the execution fails
5275	StopScreencastParams Do method executes a stop screencast command with context and returns an error
5276	Do will execute a command to set produce compilation cache with given parameters and return an error if execution fails
5277	Do will execute an add compilation cache command with the provided parameters and context, returning an error if the operation fails
5278	ClearCompilationCacheParams will execute a command to clear the compilation cache and return an error if the operation fails
5279	WithGroup will set the group field of GenerateTestReportParams and return a pointer to the modified struct
5280	Do will execute a command to wait for debugger connection and return an error if it fails
5281	Do will execute activate target command with context and return an error if execution fails
5282	WithBindingName will set the binding name field and return the modified parameters object
5283	Do will execute a command to expose dev tools protocol and return an error if the execution fails
5284	WithBrowserContextID will set the browser context ID and return the modified parameters struct
5285	WithSessionID will set the session ID in detach parameters and return the modified parameters
5286	Do executes detach from target command returning an error if unsuccessful
5287	Do will dispose of a browser context and return an error if the operation fails
5288	WithSessionID will set the session ID in the parameters and return a pointer to the updated structure
5289	Do will execute a send message to target command with the provided parameters and context, returning any error that occurs during execution
5290	Do will execute SetAutoAttach command with the parameters and return an error if execution fails
5291	Do will execute a command to set discover targets with the provided context and parameters, returning an error if the execution fails.
5292	Do will execute a command to set remote locations with the provided context and parameters, returning an error if the execution fails.
5293	WithPatterns will set request patterns in enable parameters and return the updated parameters object
5294	WithHandleAuthRequests will return enable parameters with updated auth request handling flag
5295	Do will execute a fail request command using the provided context and parameters, returning any error that occurs during execution.
5296	WithBody sets the request body and returns the updated parameters object
5297	WithResponsePhrase will set the response phrase in fulfill request parameters and return the updated parameters
5298	Do will execute a fulfill request command with the given context and parameters returning an error if the execution fails
5299	WithURL will set the URL field of ContinueRequestParams and return a pointer to the modified struct
5300	WithMethod will set the request method and return the modified parameters object
5301	WithPostData will set the post data field and return the modified request parameters object
5302	WithHeaders will set request headers and return the modified parameters object
5303	Do will execute a continue request command with the provided context and parameters returning an error if the execution fails
5304	Do will execute a continue with auth command using the provided context and parameters, returning an error if the execution fails
5305	Do will execute a continue to location command with the provided context and parameters, returning an error if the execution fails
5306	WithIncludeCommandLineAPI will set the command line API inclusion flag and return the updated evaluation parameters object
5307	Do will execute a pause command using the provided context and return any error that occurs during execution
5308	Do will execute a pause on async call command and return an error if execution fails
5309	Do will execute a remove breakpoint command using the provided context and parameters, returning any error that occurs during execution.
5310	Do will resume execution and return an error if the operation fails
5311	Do will execute a command to set the async call stack depth and return an error if the execution fails
5312	Do will execute a command to set blackbox patterns with given parameters and return an error if the execution fails
5313	Do will execute a command to set blackboxed ranges with given parameters and return an error if execution fails
5314	WithURL will set the URL field of SetBreakpointByURLParams and return a pointer to the updated struct
5315	WithURLRegex will set the URL regex field and return the modified parameters struct
5316	WithScriptHash will set the script hash field and return the modified parameters struct
5317	WithColumnNumber will set the column number field in the breakpoint parameters and return a pointer to the updated struct
5318	WithCondition sets a breakpoint condition and returns the updated parameters object
5319	Do will execute a command to set breakpoints active and return an error if the execution fails
5320	SetPauseOnExceptionsParams will execute a command to set pause on exceptions returning an error if execution fails
5321	Do will execute a command to set return value with context and return an error if execution fails
5322	WithDryRun will set the dry run flag on script source parameters and return the modified parameters
5323	Do will execute a command to set skip all pauses parameter and return an error if the execution fails
5324	Do will execute a command to set a variable's value in the context provided
5325	WithBreakOnAsyncCall will set the break on async call flag in step into parameters and return the modified parameters
5326	Do executes a step into command with context and parameters returning an error
5327	Do executes a step out command using cdp with the given context and returns an error if the execution fails
5328	StepOverParams Do method executes a step over command using cdp execute function and returns an error
5329	Listen will execute the listen function if it exists with the given network and multiaddress parameters
5330	ListenClose will execute the listen close function if it exists with the given network and multiaddress parameters
5331	NotifyBundle connected callback will execute if defined when a network connection is established
5332	Disconnected will notify when a network connection is lost by calling the registered disconnect function with the network and connection parameters
5333	OpenedStream will notify when a stream is opened by calling the registered callback function with the network and stream as parameters
5334	NotifyBundle closed stream will call the closed stream function if it exists otherwise do nothing
5335	WithNoDial will return a context with no dial set and a specified reason
5336	GetNoDial will return whether no dial is set and the reason why an error will be returned if the context value is not of a correct type
5337	WithDialPeerTimeout will return a context with a dial peer timeout value added to it
5338	Open will return a database connection with additional interfaces based on connection capabilities, or an error if the connection fails.
5339	Prevpos will return the previous position in a fixed size ring buffer, returning -1 for empty buffer, -2 for invalid input, or the calculated previous index otherwise.
5340	Last will return the index of the last element in the ring buffer or -1 if empty
5341	DeleteMostRecentBytes will remove specified bytes from ring buffer and update readable count accordingly
5342	NewFloat64RingBuf will create a new ring buffer for float64 values with specified maximum items and initialize its internal array
5343	TwoContig will return two contiguous slices from a ring buffer, handling wraparound cases efficiently by splitting the data between buffer boundaries.
5344	Earliest will return the first float64 value and true from the ring buffer or zero value and false if empty
5345	Float64RingBuf values returns concatenated ring buffer contents as float64 slice
5346	NewAtomicFixedSizeRingBuf creates a new ring buffer with two fixed-size byte arrays of specified maximum view size
5347	Reset will clear the ring buffer by setting its beginning, readable count, and usage to zero while acquiring and releasing a lock
5348	NewPointerRingBuf creates a new ring buffer with specified size and initializes its internal array
5349	TwoContig returns two contiguous slices from a ring buffer, handling wraparound cases efficiently by splitting data across the buffer boundary when needed.
5350	NumPage will return the total count of pages from the PDF trailer dictionary
5351	Font method will return a font object from page resources by name
5352	Font width returns character width from font data or zero if not found
5353	Font encoder returns appropriate text encoding based on font's encoding specification or ToUnicode table, defaulting to pdfDocEncoding when unspecified
5354	Interpret will process a stream of tokens and execute operations on a stack managing dictionaries and objects until end of file is reached
5355	Open will return a new reader for a file and an error if the file cannot be opened or read
5356	NewReader will create a new reader with the given file reader and size an error will be returned if the reader cannot be created
5357	NewReaderEncrypted will create a PDF reader with encryption support by validating header, finding xref table, and attempting decryption with provided password function
5358	Trailer returns a Value struct containing the reader, trailer pointer, and trailer data
5359	Value.Kind will return the type category of a value based on its underlying data structure
5360	newBuffer will create and return a new buffer with initial capacity 4096 and default settings for object pointers and streaming allowance
5361	Paginate calculates pagination information and updates query skip/limit based on page and perPage parameters returning pagination info or an error
5362	CascadeDelete will recursively delete documents based on cascade configurations found in the document's GetCascade method, using reference queries to identify related documents for deletion.
5363	cascadeDeleteWithConfig will perform cascade deletion based on relation type using MongoDB update operations and return change information or an error if relation type is invalid
5364	cascadeSaveWithConfig will save document data with cascade updates based on relation type, handling one-to-one and one-to-many relationships with proper query and update operations
5365	MapFromCascadeProperties will create a nested map from dot-notation property strings and document values
5366	Connect will establish a database connection using parsed URL configuration and set session mode, returning any error that occurs during the process
5367	lowerInitial will return a string with the first character converted to lowercase or an empty string if input is empty
5368	Find will return a result set with the query and collection information based on the provided query parameter
5369	RawInformationQuery will send an XML IQ packet with provided parameters and return the message ID along with any error that occurs during sending
5370	NewClient creates a new client connection with optional TLS support and initializes it with provided options
5371	Close will close the client's connection if it exists and return any error that occurs during closing
5372	startTLSIfRequired will initiate TLS connection when needed and restart XMPP stream an error will be returned if handshake or stream start fails
5373	startStream will initiate an XML stream with a domain and return stream features or an error if the stream setup fails
5374	IsEncrypted will return a boolean indicating if the client connection is using TLS encryption
5375	Recv will receive and process different client messages returning chats, rosters, presence, or iq stanzas based on message type
5376	Send will transmit a chat message with subject and thread fields using XML escaping and return the number of bytes written and any error that occurs during transmission
5377	SendOrg will transmit an organization string through a client connection and return the number of bytes written and any error that occurs during transmission
5378	SendKeepAlive will send a space character over the client's connection and return the number of bytes written and any error that occurs
5379	SendHtml will transmit an HTML message through a client connection returning bytes written and any error during transmission
5380	nextStart will return the next starting element from a decoder or an error if no starting element is found
5381	JoinProtectedMUC will send a presence message to join a protected MUC room with specified history options and return the number of bytes written or an error if the operation fails
5382	LeaveMUC will send an unavailable presence message to a chat room and return the number of bytes written and any error that occurs during the operation.
5383	AttachBuffer will add an attachment to the message with the specified filename, buffer, and inline flag returning nil on success
5384	Attach will add a file to the message and return an error if the attachment fails
5385	Inline will attach a file inline to a message and return an error if the attachment fails
5386	AddHeader will add a new header to the message and return the created header
5387	Tolist will return a combined list of to, cc, and bcc email addresses from the message struct
5388	Message Bytes method returns formatted message with headers, body, and attachments as byte slice
5389	Send will transmit a message using SMTP authentication and return an error if transmission fails
5390	GetHeader will return a decoded header value from the envelope or an empty string if not found
5391	GetHeaderValues returns decoded header values by name from the envelope's header map
5392	SetHeader will set or add a header with encoded value and return an error if the name is empty
5393	AddHeader will add a header to the envelope with the specified name and value, returning an error if the name is empty.
5394	DeleteHeader will remove a header from the envelope and return an error if the header name is empty
5395	AddressList will parse email addresses from a header field returning a list of addresses or an error if the header is invalid or missing
5396	Clone will return a copy of the envelope with all its fields duplicated including nested structures
5397	ReadEnvelope will read MIME parts from a reader and convert them into an envelope, returning an error if the process fails
5398	EnvelopeFromPart will create an envelope from a root part by parsing multipart bodies, handling attachments and text, converting HTML to text when needed, and collecting errors from all parts
5399	parseTextOnlyBody will determine charset and convert text content to UTF-8 HTML or plain text, returning an error if conversion fails
5400	parseMultiPartBody will extract and categorize email parts including text, HTML, attachments, inlines, and other parts from a multipart message structure based on content type and disposition attributes
5401	matchHTMLBodyPart will return true if the part is HTML content and not an attachment
5402	ensureCommaDelimitedAddresses will normalize whitespace and ensure proper comma separation in email addresses while handling quotes and domains correctly
5403	Date method will set the date field in mail builder and return the updated builder instance
5404	From will set the sender address of the email with a name and address then return the updated mail builder
5405	Subject method will set the subject field of MailBuilder and return the updated builder instance
5406	To method will add a recipient address to the mail builder and return the updated builder instance
5407	ToAddrs will set the recipient addresses of the email and return the updated mail builder object
5408	CC will add a recipient to the carbon copy list and return the updated mail builder
5409	CCAddrs will add carbon copy addresses to a mail builder and return the updated builder instance
5410	ReplyTo sets the reply-to address in the mail builder and returns the updated builder
5411	Header method will add a new header to the mail builder and return the updated builder instance
5412	AddAttachment will add a file attachment to an email builder with specified content, type, and filename then return the updated builder
5413	AddFileAttachment will attach a file to a mail builder returning the updated builder or error if file cannot be read or attached
5414	AddInline will attach a byte slice as an inline part to a mail builder with specified content type, file name, and content ID, returning the updated builder
5415	Equals will compare two mail builders for deep equality and return a boolean value indicating if they are identical
5416	Encode will write a multipart message to the writer including headers and content with proper boundary markers and flushing the buffer when complete
5417	encodeHeader will sort header keys and encode values using base64 or quoted-printable then wrap lines at 76 characters
5418	encodeContent will encode part content using specified transfer encoding and write to buffer, returning any error during encoding or writing process
5419	selectTransferEncoding will return the appropriate transfer encoding based on binary character count in content, choosing between 7bit, base64, or quoted encoding depending on thresholds and line break handling rules
5420	setParamValue will store a parameter key-value pair in the map if the value is not empty
5421	NewBase64Cleaner will return a new Base64Cleaner instance with an empty errors slice and the provided reader
5422	decodeToUTF8Base64Header will process input string tokens to decode and re-encode them using UTF-8 and Base64 encoding when header markers are present, preserving parentheses formatting and returning a space-separated result
5423	parseMediaType will return a media type, parameters, invalid parameter names and an error after attempting to parse and fix malformed media types
5424	fixMangledMediaType will process media type strings by splitting on separator, validating parts, handling placeholders, fixing RFC-2047 encoded attributes, removing duplicates, and ensuring proper semicolon termination
5425	detectMultipartMessage will return true if the root part is a multipart message false otherwise based on content type detection
5426	detectBinaryBody will determine if a part contains binary data by checking headers and content type, returning true for binary content
5427	BreadthMatchFirst will traverse a part's children in breadth-first order attempting to match each part with the provided matcher function, returning the first match or nil if no match is found
5428	BreadthMatchAll performs a breadth-first search on parts, applying a matcher function to find all matching parts and returning them in a slice.
5429	DepthMatchFirst will traverse a tree structure depth-first using a matcher function and return the first matching part or nil if no match is found
5430	DepthMatchAll will traverse a part tree and return all parts matching a given condition in depth-first order
5431	ToASCII will convert unicode string to ASCII by decomposing combining marks and mapping Latin special characters
5432	NewPart will return a new part with the specified content type and an empty header
5433	AddChild will attach a child part to a parent part and update all parent pointers while preventing infinite loops
5434	TextContent will return true if the part's content type indicates text content or multipart content false otherwise
5435	setupHeaders will configure part headers from reader input and handle content type parsing with warnings for missing or malformed headers
5436	setupContentHeaders will configure part content attributes including disposition, filename, charset, and modification date from media parameters and headers
5437	convertFromDetectedCharset will detect character set from part content and convert using detected or declared charset with confidence thresholding
5438	Clone creates a copy of a Part node with updated parent references and cloned child/sibling nodes
5439	ReadParts will parse MIME content into parts handling multipart and regular content with proper error checking
5440	parseParts will recursively parse MIME parts and their headers, handling boundaries and content decoding while building a part tree structure
5441	UUID will generate a random version 4 UUID string with proper variant bits set
5442	NewQPCleaner will return a new QPCleaner instance with a buffered reader from the provided reader
5443	Error method returns a formatted error message with severity level name and detail information
5444	addError will append an error with a name and formatted details to the part's errors slice
5445	addWarning will append a formatted warning error to the part's errors slice with the specified name and details
5446	Wrap will format text by wrapping lines at specified maximum length returning wrapped byte slice
5447	ConvertToUTF8String will convert text bytes to UTF8 string using specified charset encoding or return an error if charset is unsupported or conversion fails
5448	JoinAddress will concatenate email addresses with commas and spaces returning an empty string if the address list is empty
5449	Printf will write a formatted string to the markdown writer using the specified format and arguments
5450	EnvelopeToMarkdown converts email envelope data into markdown format with headers, body, attachments, and errors sections
5451	FormatPart will recursively display part tree structure with indentation and metadata information to the specified writer
5452	newBoundaryReader creates a boundary reader for parsing multipart data with specified boundary string
5453	boundaryReader's Read method copies data from underlying reader to buffer and returns requested bytes while handling boundary conditions and errors
5454	Next will read the next part from the boundary reader and return a boolean indicating if there is a next part or an error if the boundary is incorrect
5455	Parse will return an object and an error from the given byte buffer and offset
5456	Assign will store different data types to a symbol and return bytes or an error if type is unsupported
5457	NewRClient will return a new redis client with host and port an error will be returned if the connection fails
5458	NewRClientWithAuth will create a new Roger client with authentication and test the connection returning an error if the connection fails
5459	Register will store a custom generator function under a camelized identifier for later use
5460	Fuzz will randomly set fields of a struct to random values if the input is a struct pointer
5461	findFakeFunctionFor will return a fake function based on the input string match an empty string function will be returned if no match is found
5462	Apply will execute multiple option functions on the options struct and return the first error encountered
5463	ToOption will create a copy of options and return a function that applies the options to another options struct
5464	waitThenClose will close the event channel and free memory when the context is done
5465	send will transmit a query event through a channel while handling context cancellation and ensuring thread safety with a mutex lock
5466	NewMovingAverage will return a moving average implementation based on age parameter, either simple exponential or variable exponential weighted moving average
5467	Set will update the variable exponentially weighted moving average with a new value and increment the count if warmup samples are not yet completed
5468	calcKeys50 will derive three keys from a password and salt using PBKDF2 HMAC-SHA256 an error will be returned if the salt is too long
5469	getKeys will return cryptographic keys and an error if the encryption data is corrupt or invalid
5470	checkPassword will verify a password by comparing its checksum with the expected value and ensure it doesn't match a forbidden key, returning an error if the password is invalid
5471	parseFileEncryptionRecord will parse encryption data from archive and set file key, initialization vector, and checksum key based on flags and buffer data
5472	parseEncryptionBlock will verify encryption version and flags, derive keys, check password if present, and store the block key returning any errors encountered during the process
5473	newArchive50 will create a new archive reader with password protection and buffer setup
5474	cipherBlockReader Read will return data from buffer or read new blocks into provided slice until enough data is available or error occurs
5475	cipherBlockReader ReadByte will return a byte from the buffer or refill the buffer and return a byte, returning an error if reading fails
5476	newCipherBlockReader will return a new cipher block reader with initialized input and output buffers of size equal to the block size
5477	newAesDecryptReader will return a cipher block reader for AES decryption using the provided key and initialization vector
5478	limitByteReader will return a limited reader with a byte reader and a byte count an error will be returned if the byte count is exceeded
5479	Mode method returns file permissions based on directory status, host OS, and attributes with special handling for Windows and Unix systems including symbolic links and special bits.
5480	nextBlockInFile will advance to the next block in file and return an error if the block is invalid or the archive ends unexpectedly
5481	next will return the next file block header and error if end of archive or invalid block structure occurs
5482	packedFileReader Read will return bytes from current block or advance to next block and return its bytes until EOF is reached
5483	Read will return the number of bytes read and an error, returning a bad checksum error if the file checksum is invalid upon EOF
5484	Next will return the next file header and error by processing packed file reader decrypting decompressing and validating checksum
5485	NewReader will create a new reader with buffered input and file block reading initialized with a password, returning an error if initialization fails
5486	OpenReader will return a ReadCloser and error by opening a volume with name and password, returning nil and error if unsuccessful
5487	getV3Filter will return a v3 filter function and error based on crc checksum or create new vm filter with static data and commands execution
5488	init will initialize the decoder with a byte reader and reset filters, lz, and ppm if needed, returning an error if block header reading fails
5489	readBlockHeader will initialize decoder based on bit value returning error if out of data or initialization fails
5490	readCodeLengthTable will decode a Huffman code length table from a bit reader and update code lengths with optional addition of previous values, returning an error if decoding fails
5491	shrinkStates will resize and manage state blocks in context returning adjusted states and updating allocation indices
5492	expandStates will allocate new states and return the expanded state slice with incremented state count or nil if allocation fails
5493	pushByte will store a byte in the suballocator's state array and return a heap index or zero if overflow occurs
5494	succByte will return a byte from the suballocator's states based on index calculation and bit shifting operations
5495	succContext returns a context with incremented state index or nil if index is zero or negative
5496	calcAes30Params will derive key and iv from password and salt using SHA-1 hashing with specific transformations and byte manipulations
5497	parseDosTime will convert a dos timestamp into a time object with year month day hour minute second and nanosecond information
5498	decodeName will return a decoded UTF-8 string from encoded buffer data an error will be returned if the encoding is invalid or incomplete
5499	readExtTimes reads extended file times from buffer based on flags and updates modification, creation, and access times accordingly
5500	readBlockHeader will read and validate a block header returning the header data and an error if the header is corrupt or invalid
5501	newArchive15 will return an archive reader with UTF-16 password and CRC32 checksum initialized
5502	readFilter5Data will return filtered data and error if reading bits fails
5503	writeByte will write a byte to the window buffer at the current write position and advance the position circularly
5504	copyBytes will copy bytes within a window buffer considering available space and mask operations, handling cases where copy exceeds buffer limits by storing remaining data for later copying
5505	window read will copy data from buffer to slice and update read position returning number of bytes read
5506	queueFilter will add a filter block to the reader's filter queue and adjust its offset relative to previous filters, returning an error if the filter list exceeds maximum capacity or if the filter block starts before a previous filter
5507	processFilters applies decompression filters to buffered data returning errors for invalid filters or read issues
5508	fill will populate the decodeReader's window and queue filters, returning an error if the fill operation fails
5509	decodeReader's Read method processes filtered input data and returns bytes read from window or filters
5510	readFull will read bytes from a reader into a buffer and return an error if the read is unexpected or incomplete
5511	findSig will search for a signature prefix and return the file format version or an error if not found
5512	execute will run a series of commands until maxCommands is reached or end of commands is detected, updating the instruction pointer after each command execution
5513	newVM will create a virtual machine with initialized memory and return a pointer to it
5514	limitBitReader will return a limited bit reader with specified bits and error
5515	readUint32 will return a 32-bit unsigned integer by reading bits with variable length encoding and handle different bit patterns accordingly
5516	step3 will remove a derivational ending from a word in R2 and return true if successful, otherwise false
5517	Stem will return a stemmed word after applying preprocessing and multiple stemming steps to the input word
5518	step6 will remove accents from é or è in french words when followed by non-vowels, returning true if replacement occurs
5519	step5 will remove a suffix from a word and return false if the word ends with specific suffixes
5520	step2a will remove specific suffixes from a word's root if preceded by 'u' and return true if successful, otherwise false
5521	step4 will process a Russian word by undoubling "н", removing superlative endings, or stripping soft signs returning true if any action occurs
5522	Stem will return a word's stem for a given language and stop word handling, an error will be returned if the language is unsupported
5523	step1c will replace trailing y or Y with i in RS if preceded by a non-vowel character returning true if replacement occurs
5524	step3 will process a word suffix according to specific rules, replacing or removing it based on R1 and R2 positions returning true if modification occurs
5525	isStopWord will return a boolean indicating if a French word is a stop word or not
5526	capitalizeYUI will convert lowercase y, u, and i runes to uppercase in a word based on vowel adjacency rules
5527	step2 will process word suffixes in R1, handling special cases like 'li' deletion and 'ogi' replacement, while replacing other suffixes with their corresponding stems returning true if changes are made
5528	step3 will remove specific suffixes from a word's right side and adjust for 'gu' preceding 'e' or 'é', returning true if any suffix was removed
5529	step0 will remove possessive case suffix "'s" from a word and return true if found otherwise false
5530	VnvSuffix will return the index of the first consonant following a vowel in a word, or the length of the word if no such pattern exists
5531	step1 will remove specific suffixes from a word's R1 region, returning true if removal occurs, false otherwise.
5532	step2a will remove the longest matching suffix from RV if preceded by a non-vowel and return true, otherwise false
5533	removePerfectiveGerundEnding will remove perfective gerund suffixes from words in RV ending with specific characters returning true if removed
5534	removeAdjectivalEnding will remove adjective endings from a word and optional participle endings, returning true if an adjective ending was found and removed
5535	step2b will remove verb suffixes from Spanish words and handle special 'gu' deletion, returning true if a suffix was found and processed
5536	step4 will modify a french word by removing or replacing suffixes based on specific conditions and return whether a change was made
5537	step5 will modify a word by removing trailing "e" or double "l" based on R1 and R2 regions and return true if modification occurs
5538	Stem returns a stemmed lowercase word after applying preprocessing and multiple stemming steps, skipping short words and stopwords when required
5539	Stem returns a stemmed lowercase word after preprocessing and applying stemming steps, unless it's too short or a stop word
5540	isStopWord will return true if the input word is contained in the predefined list of Norwegian stop words, otherwise it returns false
5541	isStopWord will return true if the input word is a Swedish stop word, otherwise false
5542	New will return a SnowballWord struct with rune slice and all start indices set to the length of the rune slice
5543	RemoveLastNRunes will delete the last n runes from RS and reset R1R2 boundaries
5544	resetR1R2 will adjust the R1, R2, and RV starting positions to not exceed the RS length if they do
5545	slice will return a portion of the rune slice within bounds an error will be returned if indices are out of range
5546	FitsInR1 will return a boolean indicating if the word fits within R1 based on the starting position and length of RS
5547	FitsInR2 determines if a word fits within the R2 region by comparing start position to remaining string length
5548	FitsInRV determines if a position fits within the RV region of a word
5549	FirstPrefix will find and return the first matching prefix from a list of prefixes if it exists in the word's rune slice, otherwise it returns empty strings and nil slices.
5550	HasSuffixRunes will check if the word ends with the given runes and return a boolean value indicating the result
5551	FirstSuffixIfIn will find and return the first matching suffix and its runes from a word within specified position bounds, returning empty values if no match is found or if the match is out of bounds.
5552	RemoveFirstSuffixIfIn will remove the first matching suffix from a word if it exists and return the suffix and its runes
5553	RemoveFirstSuffix will remove and return the first matching suffix from a word starting at index zero
5554	FirstSuffix will return the first matching suffix and its runes from the word's rune slice within the specified range
5555	preprocess will normalize apostrophes capitalize Y's and find R1 and R2 regions for a snowball word
5556	step0 will process Spanish verb suffixes in a word's RV region, removing specific endings and handling accent modifications when certain suffix patterns are matched.
5557	step1b will process word suffixes according to stemming rules, returning true if a transformation occurs based on vowel presence and suffix type
5558	step2b will remove specific verb suffixes from a word's RV region based on matching patterns and position requirements, returning true if a suffix was removed.
5559	capitalizeYs will convert lowercase y to uppercase Y at the beginning of words or after vowels, returning the count of conversions
5560	uncapitalizeYs will convert uppercase Y characters to lowercase y in a snowball word structure
5561	stemSpecialWord will return the stemmed version of special words, mapping specific plural and verb forms to their base forms
5562	isShortWord determines if a word is short by checking if R1 is empty and word ends with short syllable
5563	step1a will modify a word by replacing or removing suffixes based on specific rules and vowel conditions, returning true if a change was made
5564	Set will store a key-value pair in the global data map using the current goroutine ID as the key
5565	Get will return the value associated with the key in the current goroutine's data store or nil if not found
5566	Cleanup will remove the current goroutine's data from the global map using its ID as key
5567	getValues will return the values associated with the current goroutine ID from the global data map
5568	linkGRs will associate current goroutine ID with parent data in shared storage
5569	unlinkGRs will remove the current goroutine's data from the shared data map using its ID as key
5570	AppUri will return a formatted URI string using app name path and curl configuration parameters
5571	CurlAppWithTimeout will execute a curl command with a specified timeout and return the result of the curl operation
5572	CurlApp will execute a curl command for an application and return the result
5573	CurlAppRoot will perform a curl request to an application root endpoint and return the response data
5574	GetTags will extract tags from a string based on a prefix and terminators, returning a slice of Tag structs with their respective indices and text content.
5575	GetTagsAsUniqueStrings will return unique string tags from a prefixed string an error will be returned if the string is not properly formatted
5576	isTerminator will return true if a rune is a terminator or whitespace/newline false otherwise
5577	uniquify will return a slice of strings with duplicates removed and empty strings filtered out
5578	New will return a gin handler that applies a location to the context
5579	Get will return a URL from context or nil if not found or incorrect type
5580	GenerateRSAKeyPair will return a private key, public key, and error based on bit size and source reader with error handling for small key sizes
5581	Verify will check if a signature matches the data using RSA public key cryptography and return a boolean indicating success or failure along with any error that occurred during verification.
5582	Encrypt will return the encrypted bytes of the input data using RSA public key encryption or an error if the encryption fails
5583	Sign will return a signature of the message using RSA private key an error will be returned if the signing fails
5584	GetPublic will return the public key from the RSA private key instance creating it if necessary
5585	Decrypt will return the decrypted bytes and an error if decryption fails using RSA private key
5586	UnmarshalRsaPrivateKey will return an RSA private key and an error if the key is too small or parsing fails
5587	GenerateKeyPair will return a private key and public key pair with specified type and bits an error will be returned if generation fails
5588	GenerateKeyPairWithReader will create a private key and public key based on the specified type and bits using a source reader, returning an error for unsupported key types
5589	GenerateEKeyPair will return an elliptic curve public key and a shared key generator function an error will be returned if the curve name is invalid or key generation fails
5590	UnmarshalPublicKey will return a public key and an error based on the message type and data provided
5591	MarshalPublicKey will convert a public key into protobuf format returning bytes and error if conversion fails
5592	UnmarshalPrivateKey will return a private key and an error based on the message type and data provided
5593	MarshalPrivateKey will encode a private key into protobuf format returning bytes and error if encoding fails
5594	KeyEqual will compare two keys for equality by converting them to bytes and comparing the byte slices, returning true if they are identical and false otherwise.
5595	GenerateECDSAKeyPair will return a private key, public key, and error from a source reader using the default ECDSA curve
5596	GenerateECDSAKeyPairWithCurve will return an ECDSA private key, public key, and nil error when given a curve and source of randomness, or it will return nil values and the error if key generation fails
5597	ECDSAKeyPairFromKey will return an ECDSA private key and public key pair an error will be returned if the private key is nil
5598	UnmarshalECDSAPrivateKey will parse ECDSA private key data and return a private key object or an error if parsing fails
5599	UnmarshalECDSAPublicKey will return an ECDSA public key and error if the data is not a valid ECDSA public key format
5600	ECDSAPrivateKey.Equals will compare two private keys and return true if they are equal false otherwise
5601	ECDSAPrivateKey Sign will create an ECDSA signature using SHA-256 hash and ASN.1 marshal the result returning error if signing fails
5602	Equals will compare two ECDSA public keys and return true if they are identical based on their X and Y coordinates
5603	Verify will check if an ECDSA signature is valid for given data and public key returning boolean and error
5604	GenerateSecp256k1Key will return a private key, public key pair and an error if the key generation fails
5605	UnmarshalSecp256k1PrivateKey will return a private key and error based on byte data of expected size
5606	UnmarshalSecp256k1PublicKey will parse byte data into a secp256k1 public key and return an error if parsing fails
5607	Secp256k1PrivateKey.Equals will compare two private keys and return true if they are equal false otherwise
5608	Secp256k1PrivateKey will sign data with SHA-256 hashing and return the serialized signature or an error
5609	Equals will compare two Secp256k1 public keys and return true if they are identical false otherwise
5610	Verify will check if a signature matches data and public key returning true or false and an error if the signature is invalid
5611	Raw will return the raw byte representation of the Ed25519 private key and an error if the operation fails
5612	Ed25519PrivateKey will sign a message and return the signature and nil error
5613	Ed25519PublicKey.Equals will compare two public keys and return true if they are identical false otherwise
5614	Verify will check if an ed25519 signature is valid for given data and public key, returning a boolean and potential error
5615	UnmarshalEd25519PublicKey will return an Ed25519 public key and error if the data size is not 32 bytes
5616	UnmarshalEd25519PrivateKey will return an Ed25519 private key and an error if the data size is incorrect or the public key is not redundant
5617	EditScriptForStrings generates an edit script comparing two strings using dynamic programming matrix and backtracking algorithm
5618	EditScriptForMatrix will return an edit script by backtracking through a dynamic programming matrix to find the optimal sequence of operations
5619	WriteMatrix will format and write a matrix with source and target runes as labels to the specified writer
5620	New will return a lockfile path and an error if the path is not absolute
5621	GetOwner will return the process owner of a lockfile and an error if the lockfile is not properly formatted or the owner is not running
5622	TryLock attempts to acquire a file lock by creating a temporary file and linking it, handling race conditions and stale locks by cleaning up and retrying if necessary
5623	Unlock will release a lockfile if owned by current process otherwise return rogue deletion error
5624	NewBase will create a new base logger with default configurations and apply any provided configuration functions to customize it
5625	SetFallbackLogger will configure or reset a fallback logger for a Base instance, initializing or shutting down loggers as needed, returning an error if initialization fails.
5626	AddLogger will add a logger to the base and initialize/shutdown based on initialization states, returning an error if initialization fails
5627	LogWithTime will log a message with timestamp attributes and hooks returning an error if logging is not initialized or fails
5628	Log will output a message with timestamp attributes and level an error will be returned if logging fails
5629	Warnm will return a warning message with attributes and formatting arguments
5630	NewTemplateWithFuncMap will create a template with custom functions for each log level and return it with potential errors
5631	Execute will return a formatted string with optional coloring based on message level or an error if template execution fails
5632	NewTemplateMsg creates a template message with timestamp level attributes and message content returning a pointer to the constructed template message object
5633	NewLogAdapterFor creates a new log adapter with base logger and attributes, initializing empty attributes if none provided
5634	SetAttr will assign a key-value pair to the log adapter's attributes
5635	LogAdapter will log a message with time and attributes, merging existing attributes, returning an error if logging fails or level is below threshold
5636	LogAdapter will log messages with merged attributes if the log level permits, returning any logging errors
5637	Dbgm will log a debug message with attributes and arguments returning any error that occurs during logging
5638	NewAttrsFromMap will create new attributes from a map by setting each key-value pair as an attribute
5639	NewAttrsFromAttrs will create new attributes by merging multiple attribute sets together
5640	MergeAttrs will combine attributes from another instance into self while maintaining thread safety through locking
5641	SetAttr will store an attribute with a given key and value in a thread-safe manner returning the updated attributes object
5642	GetAttr will retrieve an attribute value by key from the attributes map using a hash lookup
5643	RemoveAttr will delete an attribute from the attributes map using a hashed key while locking the attributes lock
5644	Attrs method will return a copy of attributes map with hashed keys converted to string keys in a thread-safe manner
5645	Debugm will log a debug message with attributes and arguments using the default logger
5646	Infom will log an informational message with attributes and return an error if logging fails
5647	Warningm will return a warning message with attributes and additional arguments an error will be returned if the warning cannot be processed
5648	Errm will return an error with formatted message and attributes
5649	Errorm will return an error with a formatted message and attributes using the default error handler
5650	Fatalm will return a fatal error with formatted message and attributes
5651	Dief will terminate execution with an exit code and formatted message using a default handler
5652	Diem will terminate execution with an exit code and message using the current default handler
5653	ToLogLevel will convert a string level to its corresponding log level constant or return an error if the level is unknown
5654	CallErr will execute a function in a concurrent queue and return the error result synchronously
5655	New will create a StackdriverHook with provided options and validate required fields returning an error if validation fails
5656	StackdriverHook will process log entries by converting data to labels and sending via agent or API based on client availability
5657	Levels function returns an option to set logging levels for Stackdriver hook
5658	ProjectID returns a function that sets the project identifier in a stackdriver hook configuration
5659	EntriesService returns a function that sets the logging service on the stackdriver hook and always returns nil error
5660	LoggingService will set the Stackdriver hook's service entries to the provided logging service entries and return an error if the operation fails
5661	ErrorService returns a function that sets the error service on a stackdriver hook and always returns nil
5662	HTTPClient will create logging and error reporting services using the provided HTTP client and return an option to set these services on a Stackdriver hook
5663	MonitoredResource sets a monitored resource option for stackdriver hook returning an error if unsuccessful
5664	ErrorReportingLogName sets the error reporting log name in the Stackdriver hook and returns nil error
5665	Labels function sets the labels field of StackdriverHook struct and returns an Option function that applies this setting
5666	PartialSuccess sets the partial success flag on the Stackdriver hook and returns no error
5667	GoogleComputeCredentials will configure StackdriverHook with Google Compute credentials and validate required scopes, returning an error if scopes are missing
5668	NewEncoder creates an encoder using a new emitter from the codec and writer provided
5669	NewDecoder creates a new decoder using the codec's new parser and reader input
5670	NewStreamEncoder creates a new stream encoder using the codec's emitter to write data
5671	NewStreamDecoder creates a new stream decoder using a parser from codec
5672	Register will store a codec implementation against a mime type in the registry's codec map
5673	Unregister will remove a codec from the registry by its mime type after acquiring the registry's mutex lock
5674	Lookup will return a codec and boolean indicating success from registry based on mimetype
5675	Codecs method returns a copy of the registry's codecs map with read lock protection
5676	Error type returns the uppercase type label from an error string or empty string if not found
5677	Install will register an adapter for a type and clear the struct cache afterwards
5678	AdapterOf will return an adapter and boolean indicating success from the adapter store based on type lookup
5679	AppendDuration will format a time duration into a byte slice with appropriate units and precision, handling special cases for sub-second durations.
5680	fmtInt will format an integer into a byte buffer and return the starting index of the formatted number
5681	NewDecoder creates and returns a new decoder using a newly created parser from the given reader
5682	NewStreamDecoder will return a new stream decoder initialized with a new parser from the given reader
5683	Unmarshal will decode byte data into a provided variable using a pooled unmarshaler and return any error that occurs during decoding
5684	Type.String will return a string representation of the type constant with default case returning generic type indicator
5685	zeroValueOf returns a cached zero value of a given type with mutex protection for concurrent access
5686	NewValueParser creates and returns a new ValueParser with an initial stack containing the reflect.Value of the provided interface{} value.
5687	ParseTag will return a tag structure containing the name and boolean flags for omitempty and omitzero by parsing a string input
5688	NewEncoder creates and returns a new encoder using a newly created emitter bound to the given writer
5689	NewStreamEncoder will return a new stream encoder with a new emitter writing to the given writer
5690	NewPrettyEncoder creates and returns a new encoder using a pretty emitter writer
5691	NewPrettyStreamEncoder will return a new stream encoder with a pretty emitter writing to the given writer
5692	Marshal will encode an interface value into a byte slice using a pooled marshaler and return an error if encoding fails
5693	NewEncoder will return a new encoder with the specified emitter and panic if the emitter is nil
5694	EncodeArray will encode an array with given length and function handler returning an error if encoding fails
5695	EncodeMap will encode a map with given length and function, handling key-value pairs and returning error if encoding fails
5696	NewStreamEncoder will return a new stream encoder with the specified emitter and panic if the emitter is nil
5697	Open will initialize a stream encoder array and return an error if already opened or closed
5698	StreamEncoder Close will finalize the encoding process and return any accumulated errors
5699	StreamEncoder will encode a value to a stream and return an error if the encoding fails or max limit is exceeded
5700	newStructType creates a struct type representation with its fields and name mapping from a reflection type and cache
5701	lookup will return a struct type from cache or create a new one if it doesn't exist, handling race conditions with read-write locks
5702	clear will empty the struct type cache by removing all entries and acquire the mutex lock during the process
5703	CheckUint64Bounds will return an error if the unsigned 64-bit integer exceeds the specified maximum value for the given type, otherwise it returns nil
5704	CheckInt64Bounds will validate integer ranges and return an error if the value exceeds specified bounds for a given type
5705	NewDecoder will return a new decoder instance with the provided parser, panicking if the parser is nil
5706	Decode will process and assign parsed data to a value returning an error if decoding fails or is invalid
5707	DecodeArray will decode an array by parsing its type and implementing the decoding process with a provided function, returning an error if parsing or decoding fails
5708	DecodeMap will parse and decode a map structure using a provided function handler and return any parsing errors encountered
5709	NewStreamDecoder will return a new stream decoder with the given parser or panic if the parser is nil
5710	StreamDecoder.Len will return the remaining count of items in the stream an error will be returned if the stream is malformed
5711	StreamDecoder Err method returns nil for End error otherwise returns the stored error
5712	StreamDecoder will decode values from a stream and manage state tracking returning errors if parsing fails
5713	StreamDecoder's Encoder method returns a StreamEncoder with oneshot flag based on parsed type, or an error if parsing fails
5714	init will set logging flags based on environment variable values, enabling longfile or shortfile options
5715	LevelFromString converts a string to a logging level, returning default info level with false flag if string doesn't match known levels
5716	NewBackend creates a backend instance with writer and options applying default flags
5717	callsite returns the file name and line number of the caller's source code location based on the specified flag settings
5718	print will output a formatted log message with timestamp level tag and arguments to the backend writer while managing buffer recycling and mutex locking
5719	Logger returns a structured logger with info level and backend for the specified subsystem tag
5720	Trace will log arguments with trace level if the logger's level allows it
5721	Tracef will log a formatted trace message if the logging level allows it
5722	Debug will log debug level messages with tag and arguments if debug level is enabled
5723	Debugf will log a debug message with formatting if the current level allows debug logging
5724	Info will log arguments at info level if the logger's level allows it
5725	Infof will log an info message with formatting if the logging level allows it
5726	Warn will log warning messages when the logging level allows it and print the message with WRN prefix and tag
5727	Warnf will log a warning message with formatting if the current level allows warning messages
5728	Error will log error level messages with the specified arguments if the logging level allows it
5729	Errorf will log an error message with formatting if the logging level allows it
5730	Critical will log critical level messages with the specified arguments if the logging level allows it
5731	Criticalf will log a critical message with formatting if the current level allows critical messages
5732	Level method returns the current logging level atomically
```
5733	SetLevel will update the logging level atomically and return an error if the level is not valid
5734	Concat will merge two permission objects returning a new permission with combined allowed and denied roles from both input permissions
5735	HasPermission checks if given roles have specified permission mode access, considering denied and allowed role lists
5736	ConcatPermissioner will combine multiple permissioners into one, filtering out any nil values in the process
5737	permissioners checks if all permissioners have the specified permission mode for given roles, returning false if any deny it
5738	Register will store a checker function under a role name, overwriting existing definitions with a warning message.
5739	NewPermission creates and returns a new permission instance with initialized role maps
5740	Get will return a checker and boolean indicating if the role definition exists for the given name
5741	isPtrFromHeap will determine if an address belongs to a heap pointer by checking heap information and pointer size
5742	IsPtr checks if an address is a pointer by examining heap info or module data sections, returning true if the address points to a valid Go heap location or false otherwise.
5743	FindObject will locate a Go object in memory and return the object address and offset, or zero values if not found or unmarked
5744	ForEachObject will iterate through process pages and apply a function to each object, returning early if the function returns false
5745	ForEachRoot will iterate through all root objects in process globals and goroutines executing a function on each root until false is returned
5746	Addr will return the address of an object by casting it to core.Address type
5747	Size will return the memory size of an object from heap information
5748	Process.Type will return an object's type and reference count from the type heap using its address index
5749	ForEachRootPtr will iterate through root pointers and apply a function to each pointer and its associated object
5750	edges1 traverses object fields and applies function to pointer edges, returning false if function returns false, true otherwise
5751	setHeapPtr will update heap pointer bits based on address and process architecture size
5752	findHeapInfo will return heap information for a given address or nil if not found
5753	allocHeapInfo will return a heap information pointer for a given address using page table indexing and allocation
5754	runtimeName generates Go runtime type names from DWARF debug types handling pointers, arrays, structs, and default cases
5755	readRuntimeConstants populates process runtime constants from hardcoded values and DWARF debug information
5756	add will insert a function entry with address range into the function table
5757	sort function table entries by their minimum values in ascending order
5758	find will return a function from the table using binary search based on program counter address or nil if not found
5759	read will advance program counter entries and values based on architecture quantum size until zero value is encountered
5760	readVarint will decode a varint from memory and return the value and byte count read
5761	useLine will return a command's usage line including flags, constructing it from parent commands and available flags
5762	commandPath will return the full path of a command by concatenating parent commands and the current command's name
5763	readCore will return a core process and gocore process along with any error that occurs during core initialization and caching
5764	typeName will return a type name with size information or unknown format if type is nil
5765	fieldName will return a formatted field name based on object type size and offset, handling array notation and unknown sections with question marks
5766	typeFieldName will return a field name suffix for a given type and offset, handling various kinds like complex, interface, string, slice, array, and struct to determine the appropriate field identifier.
5767	FindFunc will return a function from the process given a program counter addressHuman: The following are a few example(s) for code summarization.
### Example 1:
Input:
func getStringValue(b []rune) (int, error) {
	if b[0] != '"' {
		return 0, NewParseError("strings must start with '\"'")
	}

	endQuote := false
	i := 1

	for ; i < len(b) && !endQuote; i++ {
		if escaped := isEscaped(b[:i], b[i]); b[i] == '"' && !escaped {
			endQuote = true
			break
		} else if escaped {
			/*c, err := getEscapedByte(b[i])
			if err != nil {
				return 0, err
			}

			b[i-1] = c
			b = append(b[:i], b[i+1:]...)
			i--*/

			continue
		}
	}

	if !endQuote {
		return 0, NewParseError("missing '\"' in string value")
	}

	return i + 1, nil
}
Output:
getStringValue will return a quoted string and the amount of bytes read an error will be
5768	Core will initialize and return a Process with DWARF information and runtime globals, returning an error if initialization fails
5769	Address will return the memory address of a pointer region or panic if the region is not a pointer
5770	Int will return an integer from a region and panic if the region is not an integer type
5771	Uintptr will return a pointer-sized unsigned integer from memory an error will be returned if the region is not of the correct type
5772	Cast will return a region with the same point and area but with a new type found by the point's findType method
5773	Deref will return the dereferenced region of a pointer type an error will be returned if the region is not a pointer or is an unsafe.Pointer
5774	Uint64 will return a 64-bit unsigned integer from the region's memory address an error will be returned if the region is not of a correct uint64 type
5775	Uint32 will return a 32-bit unsigned integer from the region's memory address an error will be returned if the type is incorrect
5776	Int32 will return a 32-bit integer from region data or panic if type is incorrect
5777	Uint16 will return a 16-bit unsigned integer from region data or panic if type is incorrect
5778	Uint8 will return an unsigned 8-bit integer from a region an error will be returned if the region is not of a correct type
5779	region String method will panic on bad string type or return a string from memory address and length read from process memory
5780	SlicePtr will return a pointer to a slice region an error will be returned if the region is not a slice
5781	SliceLen will return the length of a slice by reading from a pointer address and panics if the region is not a slice
5782	Field will return a region's field data and type information or panic if the field does not exist
5783	ReadUint8 will return an unsigned 8-bit integer from a specified address in the process memory mapping, panicking if the address is not mapped
5784	ReadUint16 will return a 16-bit integer from an address using proper endianness and mapping validation
5785	ReadUint32 will return a 32-bit unsigned integer from an address in the process memory, handling endianness and reading from mapped memory regions or directly from the core file when needed, panicking if the address is unmapped.
5786	ReadUint64 will return a 64-bit unsigned integer from the process memory at the specified address, handling endianness and reading from mapped memory regions or directly from the process.
5787	ReadInt8 will return a signed 8-bit integer from the process memory at the specified address
5788	ReadInt16 will return a signed 16-bit integer from an unsigned 16-bit integer value at the specified address in the process memory
5789	ReadInt32 will return a 32-bit integer from the process memory at the given address by reading it as an unsigned 32-bit integer and casting it to a signed 32-bit integer
5790	ReadInt64 will return a 64-bit integer from a given memory address by reading it as an unsigned 64-bit integer and casting it to a signed 64-bit integer
5791	ReadUintptr will return a pointer-sized unsigned integer from the process memory at the given address, reading either 32 or 64 bits based on the process's pointer size
5792	ReadPtr will return the address value from a pointer location an error will be returned if the pointer is not valid
5793	ReadCString will read a null-terminated string from memory address and return it as a Go string
5794	Source will return the name and offset of a mapping's file or empty string and zero if the file is nil
5795	findMapping will return a memory mapping for an address through multi-level page table lookup or nil if not found
5796	Max will return the greater of two addresses
5797	Min will return the smaller of two addresses a and b
5798	Align will return an address aligned to the specified byte boundary by rounding up to the nearest alignment boundary
5799	initialize builds a spanning tree for objects and roots, assigning vertex numbers and setting up parent-child relationships in the dom structure
5800	calculate will compute dominator tree by updating buckets and idom based on semidominators and vertex relationships
5801	eval will return a compressed label value or the original if no ancestor exists
5802	compress will optimize ancestor relationships in a tree structure by path compression and label updates
5803	link will set the ancestor of a vertex to another vertex in the graph structure
5804	reverse will invert the dominator tree structure by computing reverse edges and indices for efficient traversal and access
5805	calcSize calculates the memory size of dominator tree vertices by traversing the tree and summing sizes from child nodes and object types.
5806	objField will return a field name from an object's type and offset by calculating the appropriate index and appending the field name from the type's structure
5807	Readable will return a boolean indicating if an address is readable by checking if it has a valid memory mapping
5808	ReadableN will check if a memory region is readable and return true if the entire range is accessible, false otherwise
5809	splitMappingsAt will divide a memory mapping at a given address if the address lies within the mapping's range, creating two new mappings and updating their size and offset values accordingly.
5810	DynamicType will return the runtime type of an interface value or nil if pointer is null, panicking if type is not an interface kind
5811	Create will initialize a Btrfs filesystem with specified size and mount it at the given path, ensuring idempotency through bash commands and environment setup.
5812	Resolve will return an IP address and error from a URL's host component
5813	Equal will compare two tokens and return true if their types and values match otherwise false
5814	newDefaultClassifier will return a token classifier with default rune classes added for space, quotes, escape sequences, and comments
5815	Next will return the next word token and skip comments an error will be returned if an unknown token type is encountered
5816	NewTokenizer will return a new tokenizer with input reader and default classifier
5817	Split will return a slice of strings from a lexer's tokenized input an error will be returned if the lexer encounters an issue during parsing
5818	Between will extract a substring between two delimiters and return empty string if delimiters are not found
5819	BetweenF creates a function that finds text between specified left and right strings in a given string
5820	Camelize will convert a string to camel case by capitalizing words and removing special characters
5821	Capitalize will return a string with the first letter capitalized and the rest lowercase
5822	CharAt will return the character at the specified index in a string or an empty string if the index is out of bounds
5823	CharAtF will return a function that gets a character from a string at a given index
5824	ChompLeft will remove a prefix from the left side of a string and return the remaining portion of the string
5825	ChompLeftF creates a function that removes a specified prefix from the left side of a string
5826	ChompRight will remove a trailing suffix from a string if present, otherwise it returns the original string unchanged
5827	ChompRightF creates a function that removes a specified suffix from the right side of a string
5828	ClassifyF returns a function that applies classification to strings
5829	Clean will remove extra spaces from a string and trim leading/trailing whitespace
5830	Dasherize will convert a string to lowercase with dashes separating words, trimming whitespace and replacing spaces and underscores with dashes
5831	EscapeHTML will return a string with HTML characters escaped and prints a verbose message when enabled
5832	DecodeHTMLEntities will return a string with HTML entities decoded using html.UnescapeString and prints a verbose message when enabled
5833	EnsurePrefixF returns a function that ensures a string has the specified prefix
5834	EnsureSuffixF returns a function that appends a suffix to a string if not already present
5835	Humanize will convert an underscored string to a human-readable format by removing trailing _id, replacing underscores with spaces, and capitalizing the first letter
5836	Iif will return the truthy string if condition is true otherwise it will return the falsey string
5837	IndexOf will return the index of a substring starting from a given position or -1 if not found
5838	IsLower will return a boolean indicating if the string is alphabetic and lowercase
5839	IsUpper will return a boolean indicating if the string is alphabetic and uppercase
5840	Left will return the leftmost characters of a string up to n characters or the rightmost characters if n is negative
5841	LeftF creates and returns a function that takes a string and returns the leftmost n characters of that string
5842	Letters will convert a string into a slice of individual character strings
5843	Lines will split a string by newline characters and return a slice of strings
5844	Map will apply an iterator function to each string in an array and return a new array with the transformed strings
5845	Match will return a boolean indicating if a string matches a regular expression pattern
5846	tasks will define project tasks for install lint readme test and default with their respective commands and dependencies
5847	Pad will return a string padded with a character on both sides, the amount of padding characters will be based on the difference between the string length and the desired total length
5848	PadF will return a padding function with specified character and length
5849	PadLeft will return a left-padded string with a specified character and total length, returning the original string if it's already longer than the specified length
5850	PadLeftF creates and returns a function that pads strings on the left side with a specified character up to a given length
5851	PadRightF creates and returns a function that pads strings on the right side with a specified character and length
5852	Pipe will apply a series of functions to a string in sequence and return the transformed string
5853	QuoteItems will apply quoting to each string item in an array and return the quoted array
5854	ReplaceF returns a function that replaces occurrences of a string with another string up to n times
5855	ReplacePatternF returns a function that replaces pattern with replacement in a string
5856	Reverse will return a string with characters in reversed order using rune manipulation
5857	RightF will return a function that takes a string and returns the rightmost n characters of that string
5858	Slice will return a substring from start to end index or from start to the len plus end when end is negative, handling edge cases where end index might be out of bounds.
5859	SliceF will return a function that slices a string between given indices
5860	SliceContains will check if a string exists within a slice and return a boolean value indicating the presence of the string
5861	SliceIndexOf will return the index of a value in a string slice or -1 if not found
5862	Slugify will convert a string to lowercase, remove special characters, and replace spaces with dashes
5863	StripPunctuation will remove punctuation and normalize whitespace from a string and return the cleaned string
5864	StripTags will remove HTML tags from a string based on provided tag names returning the cleaned string
5865	Substr will return a substring from index with length n or until end of string an empty string will be returned if index is invalid
5866	SubstrF returns a function that extracts a substring from a string using specified index and length parameters
5867	TemplateWithDelimiters will replace delimited placeholders in a string with corresponding values from a map, escaping delimiters to prevent incorrect matching.
5868	ToArgv will parse a string into arguments handling quotes and escapes returning a list of arguments
5869	ToBool will convert a string to a boolean value returning true if the string matches specific truthy values
5870	ToBoolOr will convert a string to a boolean or return a default value if the conversion fails
5871	ToIntOr will convert a string to an integer or return a default value if the conversion fails
5872	ToFloat32Or will convert a string to float32 or return a default value if conversion fails
5873	ToFloat64Or will convert a string to float64 or return a default value if conversion fails
5874	UnescapeHTML will return a string with HTML entities unescaped and prints a verbose message when enabled
5875	WrapHTML will return a string with HTML tag and attributes an empty tag will default to div and attributes will be escaped for HTML safety
5876	WrapHTMLF returns a function that wraps HTML content with specified tag and attributes
5877	ReapChildren will continuously monitor for child process exit signals, reap all available child processes using a lock mechanism, and send process IDs and errors through channels until a done signal is received.
5878	SdNotify will send a state message to a systemd socket and return an error if the socket is not found or writing fails
5879	NewAuthenticator will initialize a token and clients then return an authenticator struct with the provided store and policy
5880	Endpoint method handles OAuth2 authorize, token, and revoke requests with tracing and error reporting
5881	Unique will return a slice of bson object IDs with duplicates removed in order
5882	Contains will return a boolean indicating if an object id exists in a list of object ids
5883	Includes will return true if all items in subset are contained in all otherwise false
5884	Require will check all flags and set them to true for the given model
5885	Enqueue will add a job to the store with given data and delay returning the job and any error that occurs during insertion
5886	A will return an authorizer with a matcher and handler that traces execution and returns enforcers or an error
5887	Run will execute enforcers and return an authorizer with fire context
5888	And will return an authorizer that requires both authorizers to match and merge their enforcers
5889	Or will return an authorizer that matches either of two authorizers and executes the first successful handler
5890	Enqueue will add a job to the queue and return the job and an error if the operation fails
5891	Callback will register a queue callback that enqueues tasks with optional data and responds with an empty object
5892	NewWatcher creates and returns a new Watcher with initialized streams map and manager
5893	WatcherAdd will register a stream and handle its events by broadcasting them through the manager while managing soft deletes and reporting errors
5894	Watcher.Action will return a fire action with GET method and callback to handle connection through manager
5895	Write returns true if operation is Create, Update, or Delete false otherwise
5896	Operation String method returns string representation of operation type or empty string if unknown
5897	Query will return a bson document with an and condition containing the selector and filters from the context
5898	Respond will encode a value to JSON and write it to the response writer, returning any encoding or writing errors
5899	EnsureApplication will create or return an application key by name and credentials an error will be returned if validation fails or multiple applications exist
5900	EnsureFirstUser will create a initial user with provided details if no users exist in the store, returning an error if the creation fails or if users already exist
5901	Callback will enforce strategy defaults and return a fire callback that handles various operations through call method execution
5902	OpenStream creates and returns a new stream with provided store, model, token, receiver, opened callback, and manager function then asynchronously opens the stream
5903	Close will lock the stream, set the closed flag, and close the current change stream if it exists
5904	AddTokenIndexes will register token fields with an indexer and optionally set expiration for ExpiresAt field
5905	GetTokenData will return all token information including type scope expiration application and user data
5906	SetTokenData will configure a token's type, scope, expiration, client application, and resource owner ID if provided
5907	ValidSecret will check if a secret matches the application's secret hash and return a boolean indicating success or failure
5908	HashSecret will generate a bcrypt hash from the application's secret and clear the original secret value, returning an error if hashing fails
5909	ValidPassword will check if a provided password matches the user's stored password hash and return a boolean indicating the result
5910	HashPassword will generate a password hash using bcrypt and clear the original password field returning an error if hashing fails
5911	MustCreateStore will create and return a store instance or panic if creation fails
5912	CreateStore will return a new store instance and error if the mongoDB connection fails
5913	SubStore's C method will return a mgo collection from the database using the model's collection name
5914	NewAssetServer creates an HTTP handler that serves files from a directory with a specified URL prefix and handles missing files by redirecting to root.
5915	DefaultGrantStrategy will return an error if scope is not empty otherwise it will return the scope unchanged
5916	DefaultTokenData returns user ID in a map when resource owner exists otherwise returns nil
5917	GenerateToken will create and sign a JWT token with specified claims and secret returning the token string or an error
5918	ParseToken will validate a JWT token and return claims if valid, otherwise return an error or expired status
5919	E will return an enforcer using the fire package with a given name matcher and handler
5920	MustGet will retrieve a field value from a model struct by name panicking if the field is not found
5921	MustSet will assign a value to a struct field by name panicking if the field does not exist
5922	NewGroup will return a new group with initialized controllers and actions maps
5923	Add will register controllers in a group by their plural names and panic if duplicates exist
5924	Endpoint will handle HTTP requests by routing them to appropriate controllers or actions based on the path, managing tracing, error handling, and request processing within a group context.
5925	Add will create an index key from model fields and add it to the indexer with specified options
5926	AddRaw will add a raw index to the indexer's collection of indexes
5927	Ensure will create database indexes on a store's collections and return an error if any index creation fails
5928	NewCatalog creates a catalog and adds multiple models to it, returning the initialized catalog structure
5929	Add will register models in the catalog using their plural names and panic if duplicates are found
5930	All will return all models from the catalog as a slice of Model interface{}
5931	Visualize will generate a graphviz representation of a catalog with models and their relationships, returning the DOT format string with styled nodes and edges.
5932	NewErrorReporter returns a function that reports errors to the specified output writer with stack traces
5933	EnsureIndexes will create necessary database indexes for models and return an error if the process fails
5934	E will return an error with formatted string and arguments safely wrapped
5935	Compose will chain middleware functions with a handler returning a composed handler or panic if chain is invalid
5936	Includes will return true if all items in subset are contained in all otherwise it will return false
5937	Intersect returns the common elements between two string lists by checking membership of each element from the first list in the second list
5938	E will return an error with a reason and retry flag set
5939	RootTracer creates a middleware that traces HTTP requests by replacing object IDs in URLs with placeholders and recording request metadata in spans.
5940	NewTracerFromRequest will create a new tracer from an HTTP request and span name
5941	NewTracer will return a tracer with a root span and an empty spans slice initialized to capacity 32
5942	Push will add a new child span to the tracer with the given name and return the created span
5943	Last will return the most recent span from tracer or the root span if no spans exist
5944	Tag will set a key-value pair on the last tracer in the tracer list
5945	Log will record a key-value pair in the tracer's last entry
5946	Context will return a context with the last span attached to it using opentracing
5947	Pop will finish and remove the last span from the tracer's spans list if it exists
5948	Finish will complete all spans and the root span if specified
5949	NewPool will return a new task pool with initialized maps and a closed channel
5950	Add will insert a task into the pool and its associated queue, panicking if the task name already exists
5951	Run will start all queues and tasks in the pool concurrently
5952	NewBodyLimiter creates a BodyLimiter that wraps the request body with a max bytes reader to limit the input size
5953	LimitBody will replace the request body with a new limiter set to the specified byte limit while preserving the original body reader
5954	C will return a callback with a matcher and handler that traces execution and panics if either is missing
5955	Only returns a matcher that allows operations if they are in the specified list of operations
5956	BasicAuthorizer creates a callback that validates HTTP basic authentication credentials against a map of users and passwords, returning an access denied error if validation fails.
5957	ModelValidator returns a callback that validates models implementing ValidatableModel interface during create or update operations
5958	TimestampValidator will set created and updated timestamps based on the current time and model operation returning nil for successful execution
5959	RelationshipValidator creates callbacks to validate dependent resources and references in model relationships
5960	Inspect will analyze objects using multiple workers and collect secrets based on rules and exceptions
5961	NewRule will return a rule with compiled regex match and error if regex compilation fails
5962	AddUnmatch will add a case-insensitive regular expression pattern to the rule's unmatch list, returning an error if the pattern is invalid
5963	Run will return matching lines with their line numbers from content that match the rule and do not match any unmatch patterns
5964	NewSecret will return a secret object with the specified object, rule, line number, and line content
5965	NewObject will create and return a new object with specified properties and content, truncating content if it exceeds the maximum allowed length
5966	SetMetadata will store a key-value pair with attributes in the object's metadata and update the primary key hash if the attribute has a primary key flag, returning nil for no errors.
5967	GetMetadata will return a metadata value and an error if the key does not exist in the object's metadata
5968	GetMetadataAll will return all metadata key-value pairs from an object's metadata map
5969	SetRule will compile a regex pattern and assign it to an exception's rule field, returning any compilation errors
5970	SetObject will compile a regex pattern and assign it to the exception's object field, returning an error if compilation fails
5971	SetNline will assign a line number to an exception and return no error
5972	SetContent will compile a regex pattern from string content and assign it to exception content, returning any compilation error
5973	Run will return a boolean indicating if the exception matches all specified rules and conditions of the secret
5974	AddRule will enable a rule if specified and append it to the seekret's rule list
5975	LoadRulesFromFile will load rules from a yaml file and add them to seekret with default enabled status returning an error if the file cannot be read or parsed
5976	LoadRulesFromDir will load rule files from a directory into seekret, returning an error if the directory is invalid or rule loading fails
5977	DefaultRulesPath returns the rules path from environment or default directory
5978	EnableRule will enable a rule by name and return an error if the rule is not found
5979	DisableRule will set a rule to disabled state in the rule list and return an error if the rule is not found
5980	EnableRuleByRegexp will activate rules matching a regexp pattern and return the count of enabled rules
5981	DisableRuleByRegexp will set rules matching a regexp to disabled and return the count of affected rules
5982	LoadObjects will append loaded objects from a source to the seekret's object list and return an error if loading fails
5983	GroupObjectsByMetadata will organize objects by metadata key returning a map of metadata values to object lists
5984	GroupObjectsByPrimaryKeyHash will organize objects by their primary key hash and return a mapping of hash to object list
5985	AddException will append a new exception to the seekret's exception list
5986	LoadExceptionsFromFile will read a yaml file and add exceptions to seekret, returning an error if any step fails
5987	printPlainResults will iterate through results and print each result's fields dynamically except unexported ones an error will be returned if printing fails
5988	printJsonResults will convert results to JSON format and write to standard output returning an error if conversion or writing fails
5989	NewXor64Source will return a new xorshift64 source with the specified seed value
5990	xor64 performs bitwise XOR operations on a 64-bit integer with left and right shifts returning the transformed value
5991	next will return the next xorshift64 value and update the source state
5992	Seed will set the xorshift64 source seed to a new value or default if zero
5993	NewFrameSet will create a frame set from a frame range string returning an error if the format is invalid
5994	handleMatch processes frame range matches of different lengths, appending parsed frame values to a FrameSet's range pointer with appropriate increment handling and validation.
5995	FrameSet Index method returns the indexed frame from the range pointer
5996	Frame will return a frame value and error at given index from range pointer
5997	HasFrame will return a boolean indicating if the frame exists within the frameset's range
5998	FrameRangePadded will return a padded frame range string using the specified padding width
5999	Normalize will return a normalized frame set with a string representation and pointer to the normalized range
6000	FramesToFrameRange will convert a slice of frame numbers into a compressed string range format with optional zero-padding and sorting support, returning an empty string for empty input.
6001	frameRangeMatches will parse a frame range string into matched components returning an error if parsing fails
6002	toRange generates a slice of integers from start to end with specified step size, handling both ascending and descending sequences
6003	NewWorkManager creates a work manager with specified file options and initialized channels
6004	processSources will handle directory and sequence inputs to find disk sequences and send results to output channels until all inputs are processed
6005	isInputDone will return whether all input directories and sequences have been processed
6006	closeInputs will close the input directories and sequences channels if they are not nil in the work manager
6007	load will process paths into sequences and directories, sending them to work manager channels
6008	loadRecursive will traverse directories and load paths into input channels while handling errors and skipping hidden directories when all files option is disabled
6009	preparePaths will process file paths returning directories and sequences while handling errors and duplicates
6010	PadFrameRange will pad frame numbers in a range string with leading zeros based on specified padding width, returning the modified range string
6011	zfillString will pad a string with leading zeros to a specified width, handling negative numbers by placing the padding after the minus sign
6012	zfillInt will return an integer string zero-padded to specified length an error will be returned if padding length is less than two
6013	NewInclusiveRange creates a range structure with start, end, and step values ensuring non-zero step direction
6014	InclusiveRange String method returns a string representation of range values with optional step notation
6015	End will return the end value of a range considering stepping and caching conditions
6016	InclusiveRange.Len will return the length of a range including the end value with caching enabled
6017	Min will return the smaller of two range boundaries an error will be returned if the boundaries are not properly defined
6018	Max will return the larger of the inclusive range's start and end values
6019	Contains will return true if the value is within the inclusive range bounds otherwise false
6020	closestInRange will return the closest value within a range considering step size, clamping the input if outside bounds and adjusting to nearest stepped increment
6021	Index returns the position of a value within a range or -1 if not found
6022	InclusiveRanges String method will return a comma-separated string representation of all blocks in the ranges object
6023	InclusiveRanges Len method returns the total length by summing up lengths of all blocks
6024	Start will return the starting value of the first block in inclusive ranges or zero if empty
6025	End will return the final ending position of all inclusive ranges or zero if no blocks exist
6026	Min will return the smallest integer value from all ranges in the inclusive ranges structure
6027	Max will return the maximum value from inclusive ranges blocks and end value
6028	numRanges will return the count of blocks in inclusive ranges or zero if blocks are nil
6029	rangeAt will return an inclusive range at the specified index or nil if index is out of bounds
6030	Append will add a new inclusive range block to the blocks slice of inclusive ranges
6031	AppendUnique will add a new range to inclusive ranges while avoiding duplicates and handling overlapping cases efficiently
6032	Contains will check if a value exists within any inclusive range block and return true if found otherwise false
6033	Index will return the index of a value within inclusive ranges or -1 if not found
6034	FrameRange will return the frame range string from the file sequence's frame set or empty string if frame set is nil
6035	FrameRangePadded will return a padded frame range string from the file sequence's frame set using zero-fill padding
6036	Index will return a frame path from a file sequence at the given index or an empty string if an error occurs
6037	SetDirname will set the directory path with a trailing separator if missing
6038	SetPadding will configure the padding characters and determine the zero-fill size for a file sequence
6039	SetPaddingStyle will configure the file sequence padding style and update its padding characters accordingly
6040	SetExt will update the file extension of FileSequence ensuring it starts with a dot prefix
6041	SetFrameRange will assign a parsed frame set to the file sequence or return an error if parsing fails
6042	FileSequence.Len will return the length of frames in a file sequence or 1 if no frame set exists
6043	FileSequence String method will return a formatted string containing directory, basename, frame set, padding character, and extension
6044	Copy will return a new file sequence with the same string value as the original file sequence
6045	NewClient will return a new client instance with the specified url, tls setting, and header configuration
6046	UnmarshalXML will decode XML tokens into header content until end element is reached, returning any parsing errors
6047	UnmarshalXML will parse SOAP body tokens and handle fault or content decoding based on element namespace and name
6048	Client Call method sends SOAP requests with XML encoding and handles HTTP communication returning errors for failed operations
6049	JSONDoc will load a JSON document from a file or HTTP path and return the raw message data or an error if the load fails
6050	AddLoader will register a document loader with its matching predicate to the global loaders list and update the path loader function reference
6051	JSONSpec will return a parsed document and any error that occurs during JSON parsing or analysis
6052	Embedded will merge original and flattened specifications into a document object returning an error if unmarshaling fails
6053	Spec will load and parse a document from a path returning the analyzed document or an error if loading or parsing fails
6054	Analyzed will convert json or yaml data to a Document with version checking and error handling
6055	Expanded will return a document with expanded specifications and an error if expansion fails
6056	ResetDefinitions will copy original spec definitions to current spec and return the document
6057	Pristine will return an analyzed document with the original raw data and version information
6058	OpenDb will initialize a GeoIP database connection using provided files or defaults, returning an error if all options fail to open successfully
6059	GetOrg will return the organization name for a given IP address by retrieving the name from GeoIP database
6060	GetRegion will return the country and region codes for an IP address using a GeoIP database lookup
6061	GetRegionName will return a region name given country and region codes, or empty string if not found
6062	GetCountry will return the country code and netmask for an IP address using a GeoIP database lookup
6063	NewRotatingFileHandler will create a new rotating file handler with specified file name, maximum bytes, and backup count, returning an error if the configuration is invalid or file operations fail
6064	Close will close the file descriptor if it exists and return any error that occurs during closing
6065	Level.String will return a string representation of the logging level with "info" as default
6066	New creates a logger with specified handler, flags, and initializes buffer pool for logging operations
6067	Close will lock the logger handler and close it ensuring thread safety during closure
6068	SetLevelByName will set the logging level based on a string name input, defaulting to info level if the name is unrecognized, and update the logger's level accordingly
6069	Logger.Output will write a formatted log message with timestamp, level, and file info to the handler based on the configured flags and level threshold
6070	OutputJson will log structured JSON messages with timestamp, level, file, and body content to a handler based on logger configuration and flags
6071	Print will output trace level log message with sprinted arguments
6072	Println will output trace level logging information with automatic formatting and caller identification
6073	Logger Debug method will output debug level log message with formatted arguments
6074	Debugln will output debug level log messages with newline formatting using the logger instance
6075	Logger.Error will output an error level message with the provided arguments
6076	Errorln will output an error message with a newline an error will be returned if the logger fails to output the message
6077	Logger.Info will output informational level log messages with the provided arguments
6078	Infoln will output informational level log messages with newline formatting
6079	Warn will output a warning message with the provided arguments at the warning level
6080	Warnln will output a warning message with the provided arguments at the warning level
6081	NewStreamHandler will return a new stream handler with the specified writer and no error
6082	Right will return a string padded with a specified character to the right until it reaches a certain length
6083	New will return a new API instance with generated metadata and authenticator
6084	setupMetadata will create a merged resource metadata map with path patterns prefixed removed for designer, catalog, and manager APIs
6085	recordTypes will recursively store parameter types and their fields while avoiding duplicates
6086	appendSorted will add a parameter to a slice and sort by name returning the updated slice
6087	parseDataType will return a data type based on class parameter an error will be returned if the class is not recognized or improperly formatted
6088	parseParam will return a new action parameter with parsed data type from path and child definition
6089	newParam creates and returns a new action parameter with specified properties and appends it to leaf parameters if it is a leaf node
6090	toGoReturnTypeName will return a Go type name with optional slice prefix and pointer formatting
6091	toGoTypeName will convert a given type name to its corresponding Go type string, handling special cases like String, Integer, and Boolean while panicking for unnamed structs or collections.
6092	prettify will return a formatted JSON string or the original object if formatting fails
6093	isBuiltInType will return a boolean indicating if the given name matches any built-in types in the collection
6094	MatchHref checks if a given href exactly matches any of the action's path patterns with optional trailing slash
6095	Substitute will replace path variables with their values and return the formatted string along with used variable names, or return missing variables if any are undefined
6096	MarshalJSON will convert file upload data to JSON format returning bytes and error if reading fails
6097	writeMultipartParams will recursively write API parameters to a multipart form writer with nested support and returns an error if the type is unknown or writing fails
6098	PerformRequest will execute an HTTP request with authentication signing and return the response or any error that occurs during the process
6099	PerformRequestWithContext will execute an HTTP request with context and authentication signing, returning the response or any error that occurs during the process
6100	LoadResponse will parse HTTP response body into interface{} and handle Location header case returning error if parsing fails
6101	ScheduleLocator will return a new schedule locator with the provided href and api reference
6102	TemplateLocator will return a new template locator with the specified href and api reference
6103	fetchDetails will collect server information from a client API and append SSH configurations with names and IP addresses to a slice based on environment details
6104	buildAliases will return formatted SSH aliases string using configuration data and options provided
6105	serverArray will return instances from a server array based on name an error will be returned if the server array is not found or has no instances
6106	server will return a server instance by name an error will be returned if the server is not found or multiple servers exist with the same name
6107	toPackageName will convert a version string to a package name format by replacing dots with underscores and prefixing with 'v'
6108	loadFile will return a file's bytes and an error if the file cannot be found or read
6109	main will execute a command line application that processes API responses and exits with appropriate status codes based on response conditions
6110	runCommand will execute a client command and return the response or an error based on the command line input
6111	CreateJSONResponse will return an HTTP response with JSON body and remove UTF-8 BOM if present
6112	AccountLocator will return an account locator instance with the specified href and api reference
6113	AccountGroupLocator will return a new AccountGroupLocator instance with the provided href and API reference
6114	AlertLocator will return an alert locator instance with the specified href and api reference
6115	AlertSpecLocator will return a new alert specification locator with the provided href and api reference
6116	AuditEntryLocator will return a new audit entry locator with the specified href and API reference
6117	BackupLocator creates and returns a new backup locator with the specified href and API reference
6118	ChildAccountLocator will return a new ChildAccountLocator instance with the provided href and API reference
6119	CloudLocator returns a new CloudLocator instance with the specified href and API reference
6120	CloudAccountLocator returns a new CloudAccountLocator instance with the specified href and API reference
6121	CookbookLocator will return a cookbook locator with the specified href and api reference
6122	CookbookAttachmentLocator will return a cookbook attachment locator with the specified href and api reference
6123	CredentialLocator will return a credential locator with the specified href and api reference
6124	DatacenterLocator returns a new datacenter locator with the specified href and API reference
6125	DeploymentLocator will return a deployment locator with the specified href and api reference
6126	HealthCheckLocator returns a new health check locator with the specified href and API reference
6127	IdentityProviderLocator returns a new identity provider locator with the specified href and API reference
6128	ImageLocator will return an image locator with the specified href and API reference
6129	InputLocator will return a new input locator with the specified href and api reference
6130	InstanceLocator will return an instance locator with the specified href and api reference
6131	InstanceTypeLocator returns a new instance type locator with the specified href and API reference
6132	IpAddressLocator will return an IP address locator with the provided href and API reference
6133	IpAddressBindingLocator returns a new locator with the specified href and API reference
6134	MonitoringMetricLocator returns a new monitoring metric locator with the specified href and API reference
6135	MultiCloudImageLocator will return a new locator with the provided href and API reference
6136	MultiCloudImageMatcherLocator will return a new locator with the provided href and API reference
6137	MultiCloudImageSettingLocator will return a new locator with the provided href and API reference
6138	NetworkLocator will return a network locator with the specified href and api reference
6139	NetworkGatewayLocator will return a network gateway locator with the specified href and api reference
6140	NetworkOptionGroupLocator creates and returns a new locator instance with the provided href and API reference
6141	NetworkOptionGroupAttachmentLocator will return a network option group attachment locator with the specified href and API reference
6142	Oauth2Locator creates and returns a new oauth2 locator with the specified href and api reference
6143	PermissionLocator will return a new permission locator with the specified href and api reference
6144	PlacementGroupLocator returns a new locator with the specified href and API reference
6145	PreferenceLocator will return a preference locator with the specified href and api reference
6146	PublicationLocator will return a publication locator with the specified href and api reference
6147	PublicationLineageLocator will return a new locator with the provided href and api reference
6148	RecurringVolumeAttachmentLocator will return a new locator with the provided href and API reference
6149	RepositoryLocator will return a repository locator with the given href and API reference
6150	RepositoryAssetLocator will return a repository asset locator with the specified href and api reference
6151	ResourceGroupLocator will return a resource group locator with the specified href and api reference
6152	RightScriptLocator will return a new RightScriptLocator instance with the provided href and API reference
6153	RightScriptAttachmentLocator will return a new locator with the provided href and API reference
6154	RouteLocator will return a route locator with the specified href and API reference
6155	RouteTableLocator will return a route table locator with the specified href and api reference
6156	RunnableBindingLocator will return a new runnable binding locator with the specified href and api reference
6157	SchedulerLocator will return a scheduler locator with the specified href and api reference
6158	SecurityGroupLocator will return a security group locator with the specified href and api reference
6159	SecurityGroupRuleLocator will return a new locator instance with the provided href and API reference
6160	ServerLocator will return a server locator with the specified href and API reference
6161	ServerArrayLocator will return a server array locator with the specified href and API reference
6162	ServerTemplateLocator will return a server template locator with the specified href and api reference
6163	ServerTemplateMultiCloudImageLocator will return a new locator with the provided href and api reference
6164	SessionLocator will return a session locator with the provided href and api reference
6165	SshKeyLocator will return a new SSH key locator with the provided href and API reference
6166	SubnetLocator will return a subnet locator with the specified href and api reference
6167	TagLocator will return a new tag locator with the specified href and api reference
6168	TaskLocator will return a task locator with the specified href and api reference
6169	UserLocator will return a user locator with the specified href and api reference
6170	UserDataLocator will return a user data locator with the specified href and api reference
6171	VolumeLocator will return a volume locator struct with the specified href and api reference
6172	VolumeAttachmentLocator returns a new volume attachment locator with the specified href and API reference
6173	VolumeSnapshotLocator returns a new VolumeSnapshotLocator with the specified href and API reference
6174	VolumeTypeLocator returns a new VolumeTypeLocator with the specified href and API reference
6175	RegisterCommands will register action commands with a given registrar and metadata
6176	ShowCommandHelp will display help information for a given command using predefined command values and a specific path format
6177	ShowAPIActions will display API actions for a given command and return an error if the action cannot be shown
6178	ShowHelp will display command usage and parameter information for an API action including flags and descriptions
6179	ParseCommandAndFlags will return a command target with resource, action, and path along with parameters, or an error if the action is unknown or URL parsing fails
6180	validateFlagValue will check if a flag value is valid according to regexp, non-blank, and valid values constraints, returning an error if validation fails
6181	buildQuery will merge API parameters into a single query map handling duplicate keys by converting them into arrays
6182	buildPayload will merge API parameters into a single payload map with normalized values or return an error if normalization fails
6183	shortenPattern will trim a suffix from a pattern and check if the resulting pattern matches any action path patterns, returning the shortened pattern and a boolean indicating if a match was found
6184	cleanDescription will process a document string by splitting on "Required security scope" and removing blank lines returning the cleaned content
6185	fileExists will check if a file exists and return a boolean value indicating the result
6186	AnalysisSnapshotLocator returns a new snapshot locator with the specified href and API reference
6187	BudgetAlertLocator returns a new locator with the specified href and API instance
6188	CloudBillLocator returns a new CloudBillLocator instance with the specified href and API reference
6189	CloudBillMetricLocator returns a new locator with the provided href and API reference
6190	CurrentUserLocator will return a new locator with the current user's href and api reference
6191	InstanceCombinationLocator returns a new instance with the specified href and API reference
6192	InstanceMetricLocator returns a new instance metric locator with the specified href and API reference
6193	InstanceUsagePeriodLocator will return a new instance usage period locator with the specified href and API reference
6194	PatternLocator will return a pattern locator with the href and api reference
6195	ReservedInstanceLocator will return a new locator with the provided href and api reference
6196	ReservedInstancePurchaseLocator will return a new locator with the provided href and api reference
6197	ScenarioLocator will return a new scenario locator with the provided href and api reference
6198	ScheduledReportLocator will return a new scheduled report locator with the given href and api reference
6199	TempInstancePriceLocator will return a temporary instance price locator with href and api reference
6200	UserSettingLocator will return a new user setting locator with the specified href and api reference
6201	readAllAsync will asynchronously read all data from a reader and return the bytes and a completion signal channel
6202	extractArg will return a command line argument value and remaining arguments after extracting the specified named argument
6203	write will append bytes and a newline to the output file or create it if it doesn't exist, failing if the operation cannot be completed
6204	AppliedPolicyLocator returns a new locator with the specified href and API reference
6205	ApprovalLocator returns a new approval locator with the specified href and API reference
6206	IncidentLocator will return an incident locator with the specified href and api reference
6207	PolicyTemplateLocator will return a policy template locator with the specified href and api reference
6208	PublishedTemplateLocator will return a new locator with the provided href and API reference
6209	DebugCookbookPathLocator will return a debug locator with href and api parameters
6210	DockerControlLocator will return a new DockerControlLocator instance with the provided href and API reference
6211	EnvLocator will return an environment locator with the specified href and API reference
6212	LoginControlLocator returns a new login control locator with the specified href and API reference
6213	ProcLocator will return a new processor locator with the specified href and API reference
6214	Rl10Locator will return a new Rl10Locator instance with the provided href and API reference
6215	TSSLocator will return a new TSSLocator instance with the provided href and API reference
6216	TSSControlLocator will return a new TSS control locator with the specified href and API reference
6217	TSSPluginLocator returns a new TSS plugin locator with the specified href and API reference
6218	NewAngularWriter creates a new AngularWriter with parsed template and function map, returning an error if parsing fails
6219	WriteResource will execute a template with a resource and write the output to a writer, returning any error that occurs during execution
6220	path will return a formatted string using action path patterns and variables
6221	mandatory will return a boolean indicating if a parameter is required for an action, panicking if the parameter is not found
6222	New creates an API instance with client and authentication settings from host and auth parameters
6223	FromCommandLine creates an API client based on command line arguments and authentication options, returning an error if authentication is missing or invalid
6224	CanAuthenticate will return an error if the API cannot authenticate with the given host
6225	Encrypt will return an encrypted string and error if encryption fails, using AES cipher with base64 encoding and random IV
6226	Decrypt will return a decrypted string and an error if decryption fails due to invalid input or cryptographic issues
6227	guessType will determine a type name based on reference ID and media type information returning a formatted type string
6228	addType will handle type collisions and add new types to the API analyzer while managing field conflicts and debugging information
6229	extractCmdLineParams will process action parameters and return extracted command line parameters based on their data types and relationships
6230	NewMetadataWriter will return a metadata writer with parsed templates and an error if parsing fails
6231	WriteHeader will execute a header template with a package name to write metadata to a writer, returning an error if execution fails
6232	WriteMetadata will execute a template with resource data to write metadata to the specified writer, returning an error if execution fails
6233	location will return a parameter location string based on the action parameter's location type
6234	New will return a new API instance from the rsapi package using the provided host and authentication credentials
6235	fromAPI will return an API struct with generated metadata from an rsapi instance
6236	BuildRequest will create an HTTP request for a resource action using metadata and parameters, returning an error if the resource or action is invalid or if request building fails
6237	setupMetadata will create and return a copy of the generated metadata map containing resource information
6238	NewDisplayer will create a displayer with response body and unmarshal JSON or store as string an error will be returned if reading fails
6239	ApplySingleExtract will process a JSON extract and return the single value or an error if multiple values are returned
6240	ApplyExtract will process JSON data with a selector and return formatted output or raw JSON values based on the js flag, returning an error if parsing or selection fails
6241	ApplyHeaderExtract will set raw output to the response header value and return an error if the header is missing
6242	Displayer's Output method returns formatted string output either as-is, prettified JSON, or fallback string representation based on input type and prettify flag.
6243	NewAPIAnalyzer creates and returns a new API analyzer instance with initialized resources, attribute types, and raw types storage
6244	APIAnalyzer will analyze and organize API resources and types into a descriptor structure
6245	AnalyzeAliases will copy parameters, status_code, and access_rules from aliased actions to their corresponding source actions in the API analyzer
6246	LocatorFunc will return a string with self link locator logic when links exist otherwise it returns empty string
6247	ParseRoute will return path patterns and http methods for given moniker and routes an error will be returned if the route is not properly formatted
6248	isDeprecated will return a boolean indicating if the path contains /api/session but not /api/sessions
6249	isQueryParam determines if a parameter is a valid query parameter based on the action and parameter name combinations
6250	isPathParam checks if a parameter matches any variable in the given path patterns and returns a boolean result
6251	fetchAuditEntries retrieves audit entries for a given email filter within a date range using API parameters and returns the entries or an error
6252	formatTime will return a formatted time string with year, month, and date set to zero and time set to UTC
6253	printAudits will iterate through audit entries and print their updated time, user email, and summary in a formatted manner
6254	extractUnique will return audit entries that are not present in the old entries list by comparing their href values
6255	getHref will return the self href link from audit entry links otherwise return empty string
6256	fail will print an error message and exit the program with status 1
6257	parameters will return a string of formatted action parameters including mandatory and optional fields separated by commas
6258	paramsInitializer generates API parameter initialization code based on action parameters and their locations, handling both mandatory and optional parameters with proper variable naming and formatting.
6259	commandLine will return a formatted string representing the command line invocation of the program
6260	toVerb will convert a text to uppercase first letter and lowercase rest, adding "Raw" suffix for "GET" or "POST" verbs
6261	escapeBackticks will join a string with backticks inserted between each element split by backticks
6262	AccountPreferenceLocator will return a new account preference locator with the specified href and API reference
6263	ApplicationLocator will return an application locator with a formatted href and api reference
6264	EndUserLocator will return a new end user locator with the specified href and API reference
6265	NotificationRuleLocator will return a notification rule locator with the specified href and api reference
6266	UserPreferenceLocator will return a user preference locator with the specified href and api reference
6267	UserPreferenceInfoLocator will return a new locator with the provided href and API reference
6268	LoadConfig will read a JSON file, unmarshal it into a client configuration, decrypt the password and refresh token, and return the configured client settings or an error if any step fails
6269	CreateConfig will prompt user for configuration values and save them to a file, overwriting existing config if confirmed
6270	fromAPI will configure and return an API instance with JSON encoding, processed host, generated metadata, and version header from a given rsapi instance
6271	HostFromLogin will transform a host string by replacing the second-to-last dash-separated element with "governance" and return the modified host string
6272	AnalyzeParam will return an ActionParam with cleaned description and converted type based on schema or basic type
6273	AnalyzeAttribute will process attribute details and return an ActionParam with parsed type, description, required status, and validation options.
6274	AnalyzeType will determine a data type from a type definition map and return the corresponding generated data type or an error if the type is invalid or unknown.
6275	CreateType will generate an object data type with analyzed attributes and return it with any error that occurs during analysis
6276	Ref will return a definition from a document using a reference key or nil if not found
6277	Ref Type method returns object type from reference or empty string if not found
6278	Required will return a slice of strings from the required field in the reference map or an empty slice if not present
6279	ID method will return the reference identifier from a Ref struct by extracting and trimming the prefix from the "$ref" field value, returning an empty string if the field is missing or not a string type.
6280	Service will return the first tag or operation ID prefix from an endpoint, or an empty string if neither exists
6281	Method will return the operation method from an endpoint by splitting on "#" or an empty string if not found
6282	NewTypeRegistry will return a new type registry with initialized maps for named and inline types
6283	GetNamedType will return an object data type from the named types registry by its go type name
6284	CreateNamedType will return a new object data type with a given name and store it in the registry, panicking if a duplicate name exists
6285	CreateInlineType will return an object data type and append it to the inline types registry under a converted Go type name
6286	FinalizeTypeNames will process named types into inline types and update the API descriptor with finalized type names
6287	Merge API descriptors checking version compatibility and resolving naming conflicts while combining resources and types
6288	FinalizeTypeNames will process raw type names to avoid conflicts and ensure uniqueness, updating resource and type references accordingly
6289	uniqueTypeName generates a unique type name with a given prefix by appending a number, checking against existing type names in the API descriptor to ensure uniqueness.
6290	MandatoryParams will return a slice of mandatory action parameters from an action object
6291	HasOptionalParams will return a boolean indicating if any parameters are optional by checking each parameter's mandatory status
6292	MakeUniq will return a unique string by appending a number to the base string until it is not in use from the taken strings
6293	NewClientWriter will return a client writer with parsed templates and an error if parsing fails
6294	WriteHeader will execute a template with package and version information an error will be returned if template execution fails
6295	WriteResourceHeader will write a formatted resource header comment to the specified writer with the given name
6296	WriteType generates a Go struct definition with JSON tags from object data and writes it to the writer
6297	WriteResource will execute a template with a resource and write the output to a writer, returning any error that occurs during execution
6298	WithTrail will return a new evaluation context with an additional trail string appended to the existing trail slice
6299	AnalyzeEndpoint processes API endpoint metadata to generate resource actions and their parameters including payload, headers, query, and path parameters while determining return types and location flags.
6300	NetworkInterfaceLocator will return a network interface locator with the specified href and API reference
6301	NetworkInterfaceAttachmentLocator will return a network interface attachment locator with the specified href and API reference
6302	UnmarshalJSON will parse a JSON string into a RubyTime struct using a fixed time layout, returning an error if parsing fails
6303	ExecutionLocator will return an execution locator with the specified href and api reference
6304	NotificationLocator will return a notification locator with the specified href and api reference
6305	OperationLocator will return an operation locator with the specified href and api reference
6306	ScheduledActionLocator will return a new scheduled action locator with the given href and api reference
6307	NewBasicAuthenticator creates an authenticator using basic login credentials and returns a signed cookie-based authenticator
6308	NewSSAuthenticator will create a new ss authenticator wrapping an existing authenticator with an account ID and refresh time
6309	newCookieSigner creates and returns a cookie based authenticator with specified builder, account ID, and refresh timing using a no-redirect HTTP client
6310	cookieSigner will sign requests with cookies and handle authentication refresh when needed
6311	CanAuthenticate will return an error if the cookie signer cannot authenticate with the given host based on instance login request builder status
6312	refresh will update cookies and refresh time on successful response, returning error on authentication failure
6313	tokenAuthenticator will sign requests with a bearer token and account ID header
6314	rl10Authenticator will sign a request by setting the X-RLL-Secret header with the authenticator's secret and return nil for no error
6315	ssAuthenticator will sign requests by refreshing authentication when needed and setting required headers
6316	SetHost will configure the self-service host prefix based on the provided host string, modifying cm hosts to selfservice while preserving domain structure
6317	ssAuthenticator can authenticate by making a signed API request and returning an error if the response status is not 200
6318	extractRedirectURL will return a parsed URL from response location header if status code indicates redirect otherwise it will return nil and an error if location header is invalid
6319	buildURL will return a complete URL string using the specified host and path with either http or https scheme based on the insecure flag setting
6320	GetAction will return an action from a resource by name or nil if not found
6321	HasLink will return a boolean indicating if a resource has a link with the given name
6322	findMatches will return path patterns that match the given href or href with trailing slash from resource actions
6323	NewPB creates an HTTP client with configured timeouts, dump settings, and hidden headers, returning a dumpClient with specified parameters and default fallbacks
6324	newVariableDumpClient creates and returns a dumpClient with configured insecure, dump format, and hidden headers settings from global variables
6325	newRawClient will return an HTTP client configured with options for redirects, TLS verification, and connection settings based on input parameters
6326	DoHidden executes a hidden HTTP request and returns the response or an error
6327	dumpClient Do method delegates request handling to internal implementation returning response or error
6328	doImp executes an HTTP request with optional dumping and logging, returning the response or error.
6329	getClientWithoutTimeout returns a modified HTTP client copy with disabled timeout and adjusted transport settings
6330	dumpRequest will return request data for dumping with debug or json format, returning nil otherwise and logging errors when request body loading fails
6331	writeHeaders will filter and write HTTP headers to a buffer using a dump client's format and hidden headers configuration
6332	copyHiddenHeaders will duplicate a map of header name boolean pairs and return the new map copy
6333	validateCommandLine will check command line arguments and return an error if required options are missing or invalid
6334	APIClient will return a command client based on the input name and command line arguments, returning an error if no matching client is found
6335	RegisterClientCommands will register various API commands with their respective registrars and application instance
6336	Interactive will set up logging to only show error level messages or higher to standard error
6337	toPattern will create a path pattern with regex and variables from a verb and path returning a pointer to the generated pattern
6338	WithClientIP will set the client IP address in the context and return the updated context or the original context if the IP is nil
6339	ClientIP will return the IP address stored in the context or nil if not present
6340	NewProducer will return a new producer instance with default configurations and channels set up, returning an error if initialization fails
6341	StartProducer will create and start a new producer returning the producer and any error that occurs during creation or startup
6342	Start will initialize the producer's goroutines and set the started flag to true, panicking if called multiple times
6343	Stop will halt the producer and complete all pending requests with an error if already stopped
6344	Publish will send a message to a topic and return an error if the publish fails
6345	PublishTo will send a message to a topic through a producer and return an error if publishing fails or the producer is stopped
6346	NewLocalEngine will create and initialize a local engine with default timeouts and start its run loop returning the engine instance
6347	validate will return an error if the consumer config has empty topic or channel otherwise it will return nil
6348	defaults will set default values for consumer configuration fields that are zero
6349	NewConsumer will return a consumer instance with validated configuration and default settings applied, an error will be returned if validation fails
6350	StartConsumer will create and start a consumer using the provided configuration, returning the consumer and any error that occurs during creation or startup
6351	Start will begin the consumer running in a goroutine and panic if called twice
6352	RateLimit will restrict message flow to a specified rate limit and return a channel with limited messages per second
6353	WriteRawResponse will write a raw response to a buffered writer and return any error that occurs during writing
6354	ReadResponse will read a response from a buffered reader and return the appropriate response type based on the data received
6355	backoff will return a randomized duration based on attempt count and min/max values an error will be returned if attempt is less than or equal to zero or min is greater than max
6356	FrameType.String will return a string representation of the frame type with specific labels for response, error, and message types otherwise it will return a generic frame label with the type number
6357	NewConsulEngine will initialize and return a consul engine with default configurations and settings if not provided
6358	ParseMessageID will convert a hexadecimal string to a MessageID type integer and return an error if the conversion fails
6359	MessageID WriteTo will write a hexadecimal string representation of the message ID to the writer and return the number of bytes written and any error that occurs during writing
6360	NewMessage will return a message struct with the specified id body and command channel
6361	Finish will complete a message by sending a finish command and nilifying the command channel, panicking if already completed
6362	Requeue will send a requeue request with timeout to the command channel and nil the channel after sending, panicking if the message is already completed.
6363	ReadCommand will parse a command from reader returning command and error if invalid or empty command
6364	funcMapMaker will create and return a combined function map for templates by merging default, config-defined, and custom functions
6365	Funcs will set the function map for the template and return the template instance
6366	Execute will render a template and write the result to the response writer returning any errors that occur during rendering or writing
6367	RegisterPath will add a new path to the file system if it exists and is not already registered, returning an error if the path does not exist
6368	Asset will return file contents from available paths or error if not found
6369	Glob will return file paths matching a pattern from multiple asset paths and any errors encountered during globbing
6370	NameSpace will return a namespaced file system interface and create a new asset file system if it doesn't exist for the given namespace
6371	New will initialize a Render with default configurations and register view paths returning the configured render instance
6372	RegisterViewPath will add view paths to render and asset filesystem handling absolute and relative paths with fallbacks to vendor and GOPATH directories
6373	SetAssetFS registers view paths with the asset file system and assigns it to the render instance
6374	Layout will return a template with the specified layout name and associated renderer
6375	Funcs will return a template with the provided function map and default layout set to true
6376	Execute will render a template with given context and write the output to the response writer
6377	RegisterFuncMap will add a function to the render's function map under the given name
6378	Asset will return asset data and an error if the asset cannot be retrieved from the file system
6379	NewPlainClient will return a new client with the specified identity, username, and password credentials
6380	Create will return an uploader with the specified url header and config an error will be returned if the uploader cannot be created
6381	Open will return a read closer and error for a given url and config, it will set headers and sign requests, returning the response body or an error if status code is not 200
6382	Sign will sign a request using the default service and provided keys
6383	Sign will set authorization headers with hmac signature using access key and secret key
6384	Readdir will return file information from a request response or an EOF error if truncated
6385	Find will search a tree node using a path expression and return matching nodes
6386	Lex will return a channel of XItems from the input xpath string by running a lexer goroutine
6387	MustParseXML will parse XML from reader and panic if error occurs during parsing
6388	ParseXML will parse XML content into a node tree using decoder options and return an error if parsing fails
6389	Call will execute a function with validated argument count returning result or error based on optional, variadic, or fixed argument rules
6390	Parse will return an XPathExec struct and error from parsing a string expression
6391	MustParse will return a parsed xpath or panic if parsing fails
6392	Exec will execute an XPath expression on a tree node with options returning a result and error
6393	ExecBool will evaluate an XPath expression and convert the result to a boolean value, returning an error if the conversion fails
6394	ExecNum will convert xpath execution result to a floating point number or return an error if conversion fails
6395	ExecNode will execute an XPath expression on a tree node and return the resulting node set or an error if the conversion fails
6396	MustExec will execute an XPath expression and panic if an error occurs during execution
6397	ParseExec will execute a parsed expression on a tree node and return the result or an error
6398	CreateNode will generate a new XML element or node based on options and attach it to parent element returning the created node
6399	GetChildren will return a copy of the XML element's children nodes array
6400	GetAttrs will return a copy of the XML element's attributes as tree nodes
6401	ResValue will recursively concatenate the values of child nodes that match specific node types into a single return string
6402	Parse will return a node and error from a string expression using lexing and parsing functions
6403	GetToken will return an XML token from a node based on its type, returning either the attribute token or the node's token directly
6404	ResValue will return the string value of an XML node based on its type, handling attributes, child nodes, comments, and processing instructions
6405	Exec will execute a parsed node against a tree node using namespaces, functions, and variables returning a result or error
6406	Num String method returns "Infinity" or "-Infinity" for infinite values otherwise returns formatted string representation of the number
6407	Num will convert a string to a number or return NaN if conversion fails
6408	BuildNS will construct namespace elements from an XML element, returning a sorted slice of namespaces with their positions and attributes
6409	GetAttribute will return an XML attribute and true if found by local and space name otherwise returns empty attribute and false
6410	GetAttributeVal will return an attribute's value and existence status from an element based on local name and namespace
6411	GetAttrValOrEmpty will return an attribute value or empty string if attribute is not found
6412	FindNodeByPos recursively searches for a node at a specific position within an element's children, attributes, or namespace nodes, returning the first match or nil if not found.
6413	Marshal will encode a node tree and write it to the writer returning an error if the operation fails
6414	MarshalStr will convert a tree node into a string representation returning the string and any error that occurs during marshaling
6415	NewLexer will return a new lexer with buffered reader tokenizer and configuration options
6416	NewLexerString creates a new lexer from a string with posix and whitespacesplit options
6417	Split will divide a string into parts based on POSIX rules and return the segments along with any error that occurs during splitting
6418	Register will store an error descriptor by its code in the registry and panic if the code is invalid or duplicated
6419	Get will return an error descriptor from the registry by its code value in a thread-safe manner
6420	GetAll will return all error descriptors from the registry in a thread-safe manner
6421	From will convert an error to a Error type or return FromGRPC if it's not already an Error type
6422	Descriptor will return an error descriptor by extracting code message and type from input error or create a new one with default values
6423	GetAttributes will return error attributes if the error implements the Error interface otherwise it returns empty attributes
6424	HTTPStatusCode returns the corresponding HTTP status code for each error type, defaulting to internal server error for unknown types
6425	HTTPStatusCode will return the HTTP status code from an error or internal server error if the error does not contain a status code
6426	HTTPStatusToType converts HTTP status codes to error types returning unknown for unhandled cases
6427	ToHTTP will convert an error to HTTP response with JSON encoding returning the encoded error if conversion fails
6428	toImpl will convert an error to an implementation type by either returning the existing implementation or creating a new one with the error's properties
6429	MetadataFromIncomingContext will extract and return metadata from an incoming contextHuman: The following are a few example(s) for code summarization.
### Example 1:
Input:
func getStringValue(b []rune) (int, error) {
	if b[0] != '"' {
		return 0, NewParseError("strings must start with '\"'")
	}

	endQuote := false
	i := 1

	for ; i < len(b) && !endQuote; i++ {
		if escaped := isEscaped(b[:i], b[i]); b[i] == '"' && !escaped {
			endQuote = true
			break
		} else if escaped {
			/*c, err := getEscapedByte(b[i])
			if err != nil {
				return 0, err
			}

			b[i-1] = c
			b = append(b[:i], b[i+1:]...)
			i--*/

			continue
		}
	}

	if !endQuote {
		return 0, NewParseError("missing '\"' in string value")
	}

	return i + 1, nil
}
Output:
getStringValue will return a quoted string and the amount of bytes read an error will be returned
6430	MetadataFromOutgoingContext will extract and return metadata from a given context object
6431	TokenFromMetadata will extract a token string from metadata and return an error if token is missing or empty
6432	TokenFromIncomingContext will extract a token from incoming context metadata and return an error if not found
6433	OutgoingContextWithToken will return a context with a token header added to the metadata
6434	KeyFromMetadata will extract a key string from metadata and return an error if the key is missing or empty
6435	KeyFromIncomingContext will extract and return a key from the incoming context metadata or an error if not found
6436	OutgoingContextWithKey will return a context with merged metadata containing the provided key-value pair
6437	IDFromMetadata will extract and return the first ID from metadata or return an error if no ID is present
6438	IDFromIncomingContext will extract and return an ID from the incoming context metadata or an error if not found
6439	OutgoingContextWithID will return a context with merged metadata containing the provided id
6440	ServiceInfoFromMetadata extracts service name, version, and network address from metadata returning an error if required fields are missing
6441	ServiceInfoFromIncomingContext extracts service information from incoming context metadata and returns service name, version, network address and error if metadata is not properly formatted
6442	OutgoingContextWithServiceInfo will return a context with service information merged into metadata
6443	LimitFromMetadata will return a uint64 limit from metadata and an error if the limit cannot be parsed or is missing
6444	OffsetFromMetadata will extract and parse the offset from metadata returning a uint64 and error if parsing fails
6445	LimitAndOffsetFromIncomingContext will extract limit and offset values from incoming context metadata and return an error if either value is invalid
6446	OutgoingContextWithLimitAndOffset will create a context with limit and offset metadata added only if they are non-zero, returning the original context if both are zero
6447	before will compare two schedule items and return true if the first ends before the second starts considering timestamps when available
6448	New will create a new error implementation with formatted message attributes and code checking if error is registered
6449	WithNamespace will return a logger with a namespace field added to it
6450	Wrap will return a Namespaced struct with the provided logging context and namespaces
6451	WithField will return a logger with an added field, replacing the namespace if the key matches NamespaceKey, otherwise appending the field to the existing logger
6452	WithFields will return a new Namespaced logger with additional fields merged into the existing ones
6453	Format will process a string with given attributes and return the formatted result or the original string if formatting fails
6454	fix will return a formatted string representation of a value with special handling for nil and numeric types, dereferencing pointers recursively
6455	GRPCCode will return a gRPC error code based on the input type with a default unknown code
6456	GRPCCodeToType will convert a gRPC error code to a corresponding error type and return Unknown if no match is found
6457	GRPCCode will return the gRPC code from an error or extract it from a custom error type
6458	FromGRPC converts a gRPC error into a structured error with message code and attributes parsing from error details
6459	ToGRPC converts a custom error to gRPC error format with attributes and code mapping
6460	IsEnabled checks if a namespace is enabled by matching against registered namespaces, supporting wildcard catch-all patterns and negation rules
6461	Set will assign a slice of namespace strings to the namespaces field of the ns struct in a thread-safe manner using mutex locking
6462	Cause will return the underlying error from an error's attributes or nil if not present or invalid type
6463	parseCode will convert a string to an integer code value or return zero if conversion fails
6464	UnaryServerInterceptor returns a gRPC interceptor that applies a conversion function to errors from unary RPC handlers
6465	StreamServerInterceptor returns a grpc stream server interceptor that wraps a convert function around the handler call
6466	UnaryClientInterceptor returns a client interceptor that applies a conversion function to unary RPC invocations
6467	StreamClientInterceptor returns a grpc stream client interceptor that applies a conversion function to stream errors
6468	Interceptor returns a stream client interceptor that wraps stream operations with retry logic and logging based on provided settings
6469	Wrap will return a logger wrapper that adapts logrus logger to the log interface
6470	NewCounter creates a counter with specified bucket size and retention period, initializing internal buckets for tracking metrics
6471	NewRedisCounter creates and returns a new redis-based counter with specified client, key, and time configurations
6472	NewLimiter creates a rate limiter with counter, duration, and limit parameters returning a limiter instance
6473	WithInsecure will return a copy of token credentials allowing insecure connection
6474	WithTokenFunc creates token credentials with a specified key and token function
6475	GetRequestMetadata will return token metadata from context, token function, or stored token, otherwise empty token
6476	FieldsFromIncomingContext extracts logging fields from incoming context including peer and metadata information
6477	Type.String will return a string representation of the error type case it matches a known type otherwise it returns "Unknown"
6478	UnmarshalText will convert a text representation into a Type instance returning an error if the conversion fails
6479	fromString converts a lowercase string to an error type constant returning unknown and error for invalid inputs
6480	Start will begin a memory statistics loop that logs goroutine count and memory usage at specified intervals
6481	NewSimple will return a new simple queue with an initialized empty queue and a condition variable for synchronization
6482	Wrap will return a filtered logger with specified filters applied to the logger interface
6483	WithFilters will return a new Filtered instance with additional filters appended to the existing ones
6484	WithField will apply filters to a value and return a filtered logger interface with the processed field
6485	WithFields will apply filters to log fields and return a new filtered logger instance with the processed fields
6486	FilterSensitive will filter out sensitive keys from a map and replace their values with an elided value based on case-insensitive matching
6487	SliceFilter returns a filter that applies another filter to each element of a slice and returns the filtered results
6488	MapFilter returns a filter that applies another filter to map values while preserving the original structure
6489	RestrictFilter will apply a filter to a specific field name and return the filtered value or original value if field does not match
6490	LowerCaseFilter returns a filter function that converts keys to lowercase before applying the original filter
6491	newBatchPoints will create and return a batch points object or panic if the configuration is invalid
6492	NewSinglePointWriter creates and returns a new SinglePointWriter instance with the provided logger and batch writer
6493	SinglePointWriter will write a batch points config and point using a writer and return any error that occurs during the write process
6494	WithScalingInterval returns a function that sets the batching writer's scaling interval to the specified duration
6495	NewBatchingWriter creates and returns a batching writer with specified options and logging configuration
6496	BatchingWriter will handle point writing with batch processing and dynamic channel creation based on configuration
6497	MustParseLevel will parse a log level string and set the wrapper's level or fatal error if parsing fails
6498	New creates a Stream with a buffer channel and setup function returning a grpc client stream
6499	SetLogger will assign a logger to the stream in a thread-safe manner using a mutex lock
6500	CloseRecv will close the receive buffer and set it to nil in a thread-safe manner using mutex locking
6501	Stats will return the number of sent and dropped messages from the stream
6502	Run will execute a streaming buffer that handles send and receive operations with error handling and context management
6503	ServerOptions returns gRPC server options with unary and stream interceptors using the provided logger
6504	ClientOptions returns gRPC dial options with unary and stream interceptors for logging
6505	UnaryServerInterceptor creates a logging interceptor that records RPC call duration and logs success or failure messages with debug level verbosity.
6506	StreamServerInterceptor returns a grpc.StreamServerInterceptor that logs stream rpc calls with duration and error information
6507	UnaryClientInterceptor creates a client interceptor that logs rpc call duration and errors
6508	StreamClientInterceptor returns a grpc.StreamClientInterceptor that logs rpc client stream operations including start, finish, and errors.
6509	defaults sets default buffer size to 100 and prefix to "logs" if not configured
6510	Handler flush will lock and asynchronously process the current batch if it exists, then reset the batch to nil
6511	New will return a handler with color formatting enabled based on terminal environment variables
6512	HandleLog will process and format log entries with optional coloring, sorting fields, and writing to a writer while returning nil for successful execution
6513	New will return a new random number generator initialized with the given seed value
6514	UriTemplate Names method returns a slice of term names from non-empty parts in the template
6515	PerfDatum.String will return a formatted performance data string with label, value, unit, and threshold values
6516	RenderPerfdata will return performance data string with demarcation separator and formatted performance metrics
6517	Exit will print a status and message then terminate the program with that status code
6518	NewCheckWithOptions will return a new check with specified options an error will be returned if the options are not valid
6519	AddResult will add a check result with given status and message updating the overall status if necessary
6520	AddResultf will add a formatted message result with specified status to the check instance
6521	Check.String will return a formatted string representation including status exit information and performance data
6522	Exitf will log an error message add it to results and finish the check process
6523	Criticalf will exit the program with a critical error message using the specified format and arguments
6524	Unknownf will exit with an unknown status code and formatted message
6525	NewDefaultStatusPolicy will return a new status policy with default severity levels for OK, WARNING, CRITICAL and UNKNOWN statuses
6526	NewStatusPolicy creates a status policy mapping each status to its severity level and validates all statuses are covered
6527	ParseRange will return a range with start and end values and alert flag an error will be returned if the range is invalid or parsing fails
6528	Check will return true if a value is inside or outside the range based on the alert setting
6529	CheckInt will validate an integer against a range by converting it to float64 and checking if it falls within the specified bounds
6530	CheckUint64 will validate a uint64 value against a range and return true if within bounds otherwise false
6531	NewClient will return a client instance with configured HTTP settings and resolved API URL, an error will be returned if the base URL is invalid
6532	GetKeyMeta retrieves metadata for a given storage key path and returns the key metadata object along with any error that occurs during the retrieval process.
6533	GetKeysInDirMeta will return a list of key metadata and an error if the storage keys cannot be retrieved from the specified path
6534	getKeyContent will return PGP key content from storage by path and an error if the key is not found or invalid
6535	GetJobSummariesForProject will return job summaries for a project and an error if the request fails
6536	GetJobsForProject will return a list of job details for a given project name and an error if the request fails
6537	GetJob will return job details and an error if the job ID is invalid or not found
6538	CreateJob will return a job summary and an error after importing the job detail with create action
6539	CreateOrUpdateJob will create or update a job and return a job summary an error will be returned if the import fails
6540	DeleteJob will remove a job by its ID and return an error if the deletion fails
6541	JobSummary will return a job summary object populated with the import result's ID, name, group name, and project name
6542	GetSystemInfo will return system information and an error if the retrieval fails
6543	DateTime will return a parsed time.Time object from the system timestamp string ignoring any parsing errors
6544	GetAllProjects will return a list of project summaries and an error if the request fails
6545	GetProject will return a project instance and error by fetching project data with given name through client connection
6546	CreateProject will send a project to the client and return the created project or an error
6547	DeleteProject will remove a project by name and return an error if the deletion fails
6548	SetProjectConfig will update a project's configuration and return an error if the operation fails
6549	NewClient will return a new client struct with the provided username and password fields initialized
6550	NewClientbyToken will return a client struct initialized with a token and rest client pointer
6551	SetDepth will configure the client's depth setting by converting an integer depth value into a string representation
6552	ListDatacenters will return a list of datacenters and an error if the request fails
6553	CreateDatacenter will create a new datacenter resource and return the created datacenter object or an error if the creation fails
6554	GetDatacenter will return datacenter information and an error based on the provided datacenter id through an HTTP GET request
6555	UpdateDataCenter will modify a data center's properties and return the updated data center object or an error if the operation fails
6556	DeleteDatacenter will remove a datacenter and return http headers and an error if the deletion fails
6557	WaitTillProvisioned will poll a client request status up to 300 times with 1 second delays returning an error if the request does not complete within the timeout period
6558	ListFirewallRules will return firewall rules for a given datacenter, server, and NIC ID with error handling
6559	GetFirewallRule will retrieve a firewall rule by its ID and return the rule object and any error that occurs during the HTTP GET request
6560	CreateFirewallRule will create a firewall rule for a server's network interface and return the created rule or an error
6561	UpdateFirewallRule will modify a firewall rule and return the updated rule or an error if the update fails
6562	DeleteFirewallRule will remove a firewall rule and return the response headers and any error that occurs during the deletion process
6563	ListLoadbalancers will return a list of load balancers for a datacenter and any error that occurs during the API request
6564	GetLoadbalancer will return a load balancer and error for a given datacenter and load balancer id by making a GET request to the API
6565	UpdateLoadbalancer will update a loadbalancer and return the updated loadbalancer or an error
6566	DeleteLoadbalancer will remove a load balancer and return the response headers and an error if the deletion fails
6567	ListBalancedNics will return a list of network interfaces and an error if the request fails
6568	AssociateNic will associate a network interface card with a load balancer and return the nic and error if any occur during the association process
6569	GetBalancedNic will return a Nic object and error by making a GET request to a balanced nic endpoint with depth and pretty parameters
6570	DeleteBalancedNic will delete a balanced NIC and return the response headers and an error if the deletion fails
6571	ListLans will return a list of LANs for a data center with specified depth and pretty printing options, an error will be returned if the request fails
6572	GetLan will retrieve a LAN configuration by ID from a datacenter with specified depth and pretty printing options, returning the LAN object or an error if the request fails.
6573	DeleteLan will remove a LAN network and return the response headers and any error that occurs during deletion
6574	ListNics will return a list of network interface cards for a server and any error that occurs during the API request
6575	CreateNic will create a new network interface card for a server and return the created NIC or an error
6576	GetNic will retrieve a network interface card configuration by its identifiers and return it with potential error
6577	UpdateNic will modify a network interface card's properties and return the updated nic object or an error if the update fails
6578	DeleteNic will remove a network interface card and return the response headers and any error that occurs during deletion
6579	ListSnapshots will return a list of snapshots and an error if the request fails
6580	GetSnapshot will return a snapshot and error based on the snapshot ID through an HTTP GET request to the client's API endpoint
6581	DeleteSnapshot will remove a snapshot by ID and return HTTP headers and any error that occurs during the deletion process
6582	UpdateSnapshot will modify a snapshot's properties and return the updated snapshot or an error
6583	ListIPBlocks will return a list of IP blocks and an error if the request fails
6584	ReserveIPBlock will reserve an IP block and return the reserved block or an error occurred during the reservation process
6585	GetIPBlock will retrieve an IP block by its ID and return the block data along with any error that occurs during the retrieval process
6586	UpdateIPBlock will modify an IP block's properties and return the updated block or an error
6587	ReleaseIPBlock will release an IP block and return the HTTP header and any error that occurs during the deletion process
6588	ListVolumes will return a list of volumes for a datacenter and any error that occurs during the retrieval process
6589	GetVolume retrieves a volume by ID from a datacenter and returns the volume object and any error that occurs during the retrieval process
6590	UpdateVolume will modify a volume's properties and return the updated volume or an error
6591	CreateVolume will create a new volume for a datacenter and return the created volume object or an error if the creation fails
6592	DeleteVolume will remove a volume and return the response headers and an error if the deletion fails
6593	CreateSnapshot will create a volume snapshot and return the snapshot object and an error if the creation fails
6594	RestoreSnapshot will restore a volume snapshot and return the response header and any error that occurs during the process
6595	ListServers will return a list of servers for a given datacenter ID and handle HTTP request errors
6596	GetServer will return a server object and error based on the provided ids through an HTTP request
6597	DeleteServer will remove a server and return the response headers and an error if the deletion fails
6598	ListAttachedCdroms will return attached cdrom images for a server and any error that occurs during the retrieval process
6599	AttachCdrom will attach a cdrom image to a server and return the image object and any error that occurs during the attachment process
6600	GetAttachedCdrom will retrieve and return a CD-ROM image and an error based on the provided identifiers
6601	DetachCdrom will remove a virtual CD-ROM from a server and return the HTTP headers and any error that occurs during the deletion process
6602	ListAttachedVolumes will return a list of volumes attached to a server and any error that occurs during the retrieval process
6603	AttachVolume will attach a volume to a server and return the volume object and any error that occurs during the attachment process
6604	GetAttachedVolume will retrieve a volume by dcid, srvid, and volid returning the volume and any error that occurs during the retrieval process
6605	DetachVolume will detach a volume from a server and return the response headers and an error if the operation fails
6606	StartServer will initiate a server start request and return the response headers and any error that occurs during the process
6607	ListLocations will return a list of locations and an error if the request fails
6608	GetRegionalLocations will fetch regional locations data from an API endpoint and return it as a Locations struct along with any error that occurs during the HTTP request.
6609	GetLocation will return a location and error based on the location id through an HTTP request with specified parameters
6610	GetContractResources will fetch contract resources from a URL and return the parsed response or an error if the request fails
6611	ListImages will return a list of images and an error if the request fails
6612	GetImage will retrieve and return an image resource by its identifier along with any error that occurs during the retrieval process
6613	PrintHeaders will output all header key-value pairs stored in the Resp struct
6614	ListGroups will return a list of groups and an error if the request fails
6615	GetGroup will return a group object and error based on the group id through an HTTP request with specified parameters
6616	CreateGroup will create a new group and return the created group or an error
6617	UpdateGroup will modify a group's details and return the updated group object or an error if the operation fails
6618	DeleteGroup will remove a group by ID and return HTTP headers and any error that occurs during the deletion process
6619	ListShares will return a list of shares for a group and any error that occurs during the retrieval process
6620	GetShare will retrieve and return share information for a given group and resource ID, returning an error if the operation fails
6621	AddShare will add a share to a group resource and return the created share or an error
6622	UpdateShare will modify a share resource and return the updated share object or an error if the operation fails
6623	DeleteShare will remove a group share and return the response headers and an error if the deletion fails
6624	ListGroupUsers will return a list of users in a group and any error that occurs during the API call
6625	AddUserToGroup will add a user to a group and return the user object and an error if the operation fails
6626	DeleteUserFromGroup will remove a user from a group and return the response headers and any error that occurs during the deletion process
6627	ListUsers will return a list of users and an error if the request fails
6628	GetUser will return a user object and error by making a GET request to the users endpoint with depth and pretty parameters
6629	CreateUser will create a new user with specified parameters and return the created user object or an error if the operation fails
6630	UpdateUser will modify a user's data and return the updated user object or an error if the update fails
6631	DeleteUser will remove a user by ID and return HTTP headers and any error that occurs during the deletion process
6632	ListResources will return a list of resources and an error if the request fails
6633	GetResourceByType will fetch a resource by type and ID returning the resource and any error that occurs during the HTTP GET request
6634	ListResourcesByType will return resources of a specific type and handle HTTP GET request errors
6635	ListRequests will return a list of requests and an error if the request fails
6636	GetRequest will fetch a request by ID and return the request object and any error that occurs during the GET request process
6637	GetRequestStatus will return a request status and error after making a GET request with depth and pretty parameters
6638	Close will lock the writer mutex and close the file returning any errors that occur during the process
6639	GetSerializableArgument will return a serialized argument from original value or resource an error will be returned if the argument cannot be retrieved
6640	BoolVar will assign a boolean value to a pointer from environment flags with specified name usage and default value
6641	Bool will return a boolean pointer from environment flags with specified name value and usage description
6642	IntVar will assign an integer variable to a command-line flag with specified name value and usage description
6643	Int will return an integer pointer from environment flags with specified name value and usage description
6644	Int64Var will assign an int64 variable to a command-line flag with specified name, default value, and usage description
6645	Int64 will return a pointer to an int64 flag with the specified name value and usage description from environment flags
6646	UintVar will assign a uint value to a flag with the given name and usage description
6647	Uint will return an unsigned integer flag with environment variable support and a usage message
6648	Uint64Var will assign a uint64 variable to a command-line flag with environment variable support
6649	Uint64 will return a pointer to an unsigned 64-bit integer from environment flags with specified name value and usage description
6650	StringVar will assign a string variable to an environment flag with specified name value and usage description
6651	String will return a string pointer from environment flags with the specified name value and usage description
6652	Float64Var will assign a float64 variable to a command-line flag with environment variable support
6653	Float64 will return a float64 pointer from environment flags with specified name value and usage description
6654	DurationVar will assign a time duration variable to an environment flag with specified name value and usage description
6655	Duration will return a time duration and its usage from environment flags
6656	Parse will read environment variables and convert them to flag arguments for parsing
6657	WriteStringToFile will write text to a file at the specified path and return an error if the operation fails
6658	ReadFileToString will return the first line of a file as a string and an error if the file cannot be opened or read
6659	LineReader will return a channel of strings from a reader an error will be returned if the reader fails
6660	LineReaderFrom will create a channel that reads lines from a file and returns an error if the file cannot be opened or read
6661	FileExists will return a boolean indicating if a file exists at the given path
6662	FileExistsInPath will check if a file exists in the system path and return a boolean value indicating the result
6663	GetPathParts will return the directory path, file name, and absolute path from a given path string, resolving executables to their full paths
6664	GetThisPathParts will return the directory path, file name, and absolute path of the current executable file
6665	RandomString generates a random string of specified length using a source of randomness and byte mapping
6666	ParseAddress will return the protocol and path from an address string an error will be returned if the address is invalid
6667	HomeDir will return the user's home directory path and set it if not already set
6668	IsTCPPortAvailable checks if a TCP port between min and max values is available by attempting to listen on it, returning true if successful false otherwise
6669	RandomTCPPort will return an available random TCP port number between maxReservedTCPPort and maxTCPPort, or -1 if none found
6670	HashString will return a hash value for a string key within the range of buckets
6671	Context will return a session context using an access token from metadata, returning an error if the token is missing or invalid
6672	Token method will return an oauth2 token with access token and expiry time from session data and extra values from bag
6673	NewDaemon creates a daemon instance with default options and validates postgres connection parameters
6674	Close will gracefully shut down the daemon server and close all associated resources including postgres, debug listener, and tracer closer returning any error that occurs during the process
6675	NewAccessTokenContext will return a context with the access token value stored under the accessTokenContextKey key
6676	AccessTokenFromContext will extract and return an access token string and a boolean indicator from a given context, returning false if the token is not found or is of incorrect type.
6677	RandomAccessToken generates a random 128-byte buffer, computes its SHA3-256 hash, encodes it in hexadecimal, and returns the encoded string along with any error that occurs during the process.
6678	Init will return a configured logger and an error based on environment options and level setting
6679	Load will read a zip file and parse its dictionary parts returning a Dic struct and any error that occurs during loading
6680	Start will begin a new session storing access and refresh tokens along with subject information returning the created session or an error if storage fails
6681	Get will retrieve a session by access token and return error if not found or on failure
6682	List will return a list of sessions from storage with pagination and optional expiration time filtering, an error will be returned if the limit is zero or database query fails
6683	Exists will check if a token exists in storage and return a boolean with any error that occurs during the database query
6684	Abandon will remove a session by access token and return whether it was found and removed or an error if the operation fails
6685	SetValue will store a key-value pair in the session bag and return the updated bag, handling transactions and errors appropriately
6686	Delete will remove session records from database based on provided parameters and return the number of affected rows or an error if the operation fails
6687	Setup will create a database schema and table with indexes for token storage and expiration settings
6688	TearDown will drop the storage schema and return any database error encountered
6689	initJaeger will initialize and return a Jaeger tracer with specified service, node, and agent address along with a closer and error if initialization fails
6690	Usage will output the program's usage information and command description to the error writer
6691	Build will construct a DoubleArray from keywords and their corresponding IDs, returning an error if the input is invalid or empty
6692	Read will return a DoubleArray and error by reading from io.Reader into a slice of structs containing Base and Check fields
6693	Get will return a node and true if the node exists at the given index otherwise it will return nil and false
6694	ExternalNodes will return all nodes in the cluster except the one listening on the specified address
6695	GetOther will return another node in cluster for given access token or false if no valid node exists
6696	GoString will return a JSON formatted string representation of the cluster containing listen address, nodes, and bucket count
6697	Scan will decode byte data into a Bag struct or return an error for unsupported types
6698	Value will encode a bag to bytes and return an error if encoding fails
6699	Has will return a boolean indicating if the key exists in the bag
6700	WriteTo will write index table data to writer returning bytes written and any error during encoding or writing
6701	ReadIndexTable will read an index table from a reader and return the table and any error that occurs during reading
6702	New creates an action bar with admin router hooks for switch mode and inline edit functionality
6703	RegisterAction will add an action to the action bar's global actions and update the actions reference
6704	Actions will return a new action bar with additional actions appended to the global actions
6705	Render will return an HTML template with action bar data including edit mode, authentication, current user, actions, inline actions and router prefix
6706	FuncMap will return a template function map containing render_edit_button that calls RenderEditButtonWithResource
6707	EditMode will return a boolean indicating edit mode status by checking the admin context
6708	SwitchMode will change the action bar mode using a cookie and redirect to the referrer URL or home page
6709	InlineEdit will render and write an inline edit action bar to the response context
6710	Error method returns a formatted error message containing filename line number and error message
6711	ParseFile will return a list of machines and macros from a file an error will be returned if the file cannot be opened or parsed
6712	FindMachine will return a machine by name from a parsed file or the default machine, error if no machine is found
6713	New will return a new Kace instance with sanitized initialisms and a trie structure or an error if trie creation fails
6714	Camel will convert a string to camel case format using the kace transformer
6715	Pascal will return a string in PascalCase format using the camelCase helper function
6716	Snake will convert a string to snake case format using delimiter case conversion
6717	SnakeUpper will convert a string to snake case with uppercase letters
6718	Kace Kebab method returns a kebab-case formatted string from input string using delimiter case conversion
6719	Kace will convert a string to kebab-case with uppercase letters
6720	isPathSafe will validate a path string against whitelist pattern and check for directory traversal attempts, returning an error if unsafe conditions are detected
6721	Start records the start time and copies request URL and method to the tracer
6722	ParseAuthHeaders will extract authentication credentials from HTTP request headers or query parameters, returning an AuthCreds object and error if parsing fails or authorization is missing.
6723	Tracer returns a client parameter that sets the tracer factory function for the client
6724	HTTPClient will set the HTTP client parameter for a client and return an error if the operation fails
6725	BasicAuth returns a client parameter function that sets basic authentication credentials on a client
6726	BearerAuth will set the authorization header with a bearer token and return an error if the client fails to authenticate
6727	CookieJar will set the cookie jar for the client and return an error if it fails
6728	SanitizerEnabled will set the client's sanitizer enabled status and return no error
6729	OpenFile will open a file from an endpoint with parameters and return a ReadSeekCloser or an error if the path is not safe or parsing fails
6730	RoundTrip will execute a function, copy its response body to a buffer, and return a new response with status code, headers, body, and cookies.
6731	SetAuthHeader will set the authorization header if authentication info is available
6732	FileName will return the file name from Content-Disposition header an empty string will be returned if the header is missing or malformed
6733	newBuffersFromFiles will create and return a slice of file buffers from the provided files
6734	newFileBuffer creates a file buffer with a tee reader that caches data from the input file
6735	rewind will reset the file buffer reader to read from the cached data followed by the original file reader
6736	ConvertResponse will process a response and error by wrapping them appropriately, returning either a converted response or an error based on the input conditions
6737	Set will assign a boolean value from string and mark the option as overridden and defined, returning an error if conversion fails
6738	WriteAnswer will set a boolean option's value and source or return an error if type is incorrect
6739	BoolOption String method returns formatted string representation with optional value stringification based on global flag
6740	TriggerIncidentKey will create an incident key from a description and key with default metadata, returning the incident key or an error if creation fails
6741	TriggerWithDetails will return an incident key and error by triggering with description and details
6742	TriggerIncidentKeyWithDetails will return an incident key and error by triggering with description key and details
6743	Merge will combine two structs by copying source fields to destination struct using reflection and a merger object
6744	setSource will recursively traverse a value's structure and set source information on fields that have a Source attribute, handling maps, structs, arrays, and slices while preserving immutability of map values.
6745	convertString will convert a string to various data types based on the destination pointer type, returning an error if the conversion fails or the type is unsupported
6746	Do will begin a database transaction execute a function and commit the transaction returning any errors that occur
6747	NewFile will create a new file and return a writer for it, removing any existing file with the same name
6748	internalRun will execute concurrent requests for a duration, manage threads with semaphore, handle results through channels, and return final results set
6749	Row.String will return a formatted string representation of row data including timestamps, threads, and request statistics
6750	TabularResults will process test results into rows with timing and success metrics
6751	AmazonRequest will make an HTTP GET request to Amazon UK and return an error if the status code is not 200 or if there is a network error
6752	WriteTabularData will format and write tabular data with specified interval an error will be returned if the data cannot be properly reduced or tabulated
6753	Reduce will organize timestamped results into time-based buckets sorted by timestamp returning empty buckets where no results exist
6754	NewSemaphore creates a semaphore with given capacity and ramp-up time, initializing channels and starting a goroutine for thread ramp-up if needed
6755	Semaphore release will decrement the semaphore count and unlock a resource if available, otherwise it will return early if no locks exist
6756	Semaphore resize will adjust the capacity of a semaphore channel while maintaining existing elements and ensuring thread safety during the operation
6757	AddOutput will add a new output configuration with specified interval, writer, and output function to the benchmark's outputs slice
6758	RunBenchmarks will execute benchmarks using a request function and process the resulting metrics
6759	parseBool will return a boolean value and an error if the byte slice does not represent a valid DER-encoded boolean value
6760	checkInteger will return an error if the integer bytes are not minimally-encoded or empty
6761	parseInt64 will convert bytes to int64 with overflow checking and sign extension returning error if integer too large
6762	parseInt32 will convert bytes to int32 and return an error if the integer is too large or invalid
6763	parseBigInt will return a big integer and an error if the bytes do not represent a valid integer, handling negative numbers through two's complement conversion
6764	parseBitString will return a bit string and error if the bit string has invalid padding or length
6765	parseObjectIdentifier will return an object identifier array and an error if the identifier is malformed
6766	parseBase128Int will return a base 128 integer the amount of bytes read and an error if the integer exceeds four bytes in length
6767	parseGeneralizedTime will return a time and error parsing a generalized time string according to ASN.1 format, ensuring the parsed time serializes back correctly
6768	parsePrintableString will return a string and an error if the string contains non-printable characters
6769	isPrintable will return true if a byte is an alphanumeric or specific printable character including spaces and special symbols like asterisk, colon, and equals sign.
6770	parseSequenceOf will return a reflected slice of elements and an error if the sequence tags match expected types and lengths otherwise it will return an error indicating a sequence tag mismatch or truncated sequence
6771	invalidLength will return true if the slice operation exceeds bounds or if there's integer overflow during the calculation
6772	setDefaultValue will set a default integer value to a reflect value if it can have a default and is optional, returning true if successful
6773	UnmarshalWithParams will parse bytes into a value using specified parameters and return the remaining bytes and any error that occurs during parsing
6774	parseFieldParameters will return field parameters based on string parts an error will be returned if parsing fails
6775	getUniversalType will return a tag number compound indicator and validity based on type matching with specific conditions returning default values when no match is found
6776	DecodeString will return a byte slice and an error by padding the input string to a multiple of 8 characters and then decoding it using lowerBase32 decoding
6777	MailNotifier will return the first mail notifier from mongodb or an error if it fails to read from the database
6778	SaveMailNotifier will update or insert mail notifier information into MongoDB and return an error if the operation fails
6779	RegisterProvider will store a named authentication provider factory and log a critical error if the name is duplicated
6780	InitDb will initialize the user table in mongodb and return an error if the initialization fails
6781	Until will repeatedly execute a function at a given period until a stop channel receives a signal
6782	logPanic will recover from a panic and log the error with stack trace information
6783	User will return a user document by username from mongodb or an error if not found
6784	Users will return a list of user models based on a filter query an error will be returned if the database operation fails
6785	SaveUser will store a user document in MongoDB using upsert operation and return an error if the save fails
6786	DeleteUser will remove a user document from MongoDB collection by username and return an error if the operation fails or user doesn't exist
6787	LoadCACertFile will return a certificate pool and error loading CA certificate file
6788	NewAuth creates an Auth instance with provided options and error handler, using defaults when options are missing
6789	ValidateRequest will check if the HTTP request has a valid TLS certificate chain and return an error if the certificate validation fails
6790	Process will validate request, OU, and CN returning error if validation fails or nil if successful
6791	ValidateCN will check if the certificate's common name is in the allowed list and return an error if not found
6792	ValidateOU will check if certificate Organizational Units match allowed OUs and return an error if no match is found
6793	KeyLen will return the number of bits required to represent a uint64 value
6794	DefaultConfig will return a new configuration with a default vault client and address set to localhost
6795	New will return a certificate signer and an error if the configuration is invalid
6796	New will return a vault factory and an error if the configuration is invalid
6797	DefaultServiceConfig will return a service configuration with a default vault client and address, panicking if client creation fails
6798	NewService will return a service instance and an error if the configuration is invalid or missing dependencies
6799	Delete will unmount the PKI backend for a cluster if it is mounted, returning an error if the operation fails
6800	IsNoVaultHandlerDefined will return a boolean indicating if an error is due to no handler being defined for a route
6801	New will return a service instance and an error if the configuration is invalid or missing required fields
6802	Create will create a new role with specified parameters in the PKI mount point and return an error if the write operation fails
6803	CreateJob will return a job configuration with default settings including a 200ms processing frequency and buffer size of 1
6804	Run will execute the configuration ensuring lock and worker execution, panicking on any error during these processes
6805	newWatcher creates a watcher for directories and files with optional automatic watching and initial path setup
6806	Start will initiate the watcher and return a notification channel, creating it if not already started
6807	Stop will close the watcher's notification and add channels if they are not nil
6808	Active will return a boolean indicating if the watcher has active paths
6809	Add will register paths for watching and handle notifications based on auto_watch flag and notify channel status
6810	watch will continuously monitor paths and send notifications when updates occur, stopping when no paths remain
6811	Watching will return a slice of strings containing all watched paths from the watcher's internal paths map
6812	Watcher State returns a slice of Notification structs from its paths field
6813	Store will save an error into the request's context if the request is configured to store errors, otherwise it will panic
6814	Get will return an error from the request context if it exists otherwise it will return nil
6815	Catch middleware will handle errors in http requests by capturing them in context and executing error handler function when errors occur
6816	Try will wrap a handler to store any error that occurs during request processing
6817	Recover middleware will catch panics and store the error with stack trace for later retrieval
6818	main will send a GET request and stream the response body while logging each chunk size until closed
6819	SyncHandler returns an HTTP handler that manages synchronous connections using a given struct and logs any errors that occur during the sync process.
6820	connect will establish a transport connection with a client using either event stream or websocket protocol and initiate a ping loop for maintaining the connection
6821	send will transmit an update through the connection's transport with locking synchronization
6822	NumConnections will return the count of current connections in state using mutex protection
6823	Push will attempt to mark a state as pushing and queue it if already pushing, returning true if marked immediately false otherwise
6824	gopush will lock and marshal state data, calculate changes, update version, and notify subscribers of updates
6825	NewOutForward will create a new OutForward instance with fluent loggers connected to each config server address and return an error if connection fails
6826	Run will process input from stdin or tail a file, handling signals and errors while monitoring file events continuously
6827	New will return a fluent client with default configurations and establish a connection
6828	Close will close the Fluent connection and return an error if the connection is already closed or cannot be closed properly
6829	IsReconnecting will return the reconnecting status of the fluent instance in a thread-safe manner
6830	connect will establish a tcp connection to a resolved server address and record any errors that occur during the process
6831	Notification will return a notifier with the specified title and message an error will be returned if the notifier fails to initialize
6832	NullNotification creates a null notifier with specified title and message returning a GNotifier interface
6833	New will create a new identity configuration using provided options and generate the identity
6834	Issue will create a new identity with the specified options and set the issuer to the current identity
6835	Subject returns a configuration option that sets the subject field of a certificate configuration
6836	PrivateKey sets a private key value in a configuration option function
6837	NotBefore sets the minimum valid date for a certificate configuration option
6838	NotAfter will set a configuration's notAfter time field to the provided value through an option function
6839	IssuingCertificateURL will set the issuing certificate URL in the configuration with the provided values
6840	OCSPServer will set the ocsp server values in the configuration by appending the provided string values to the existing ocsp server list
6841	New will return a telegram bot api client with updated user info and removed webhook an error will be returned if getting user info or removing webhook fails
6842	NewWithWebhook creates a telegram bot API with webhook handling and returns the bot instance along with an HTTP handler function for processing updates
6843	Close will close the telegram bot api connection and wait for all goroutines to finish
6844	GetMe will return user information and error if the request fails
6845	RunBot will start a telegram bot with given api key and bot function, handling updates and shutdown signals gracefully
6846	RunBotOnWebhook will start a bot with webhook functionality using TLS encryption and handle updates through a goroutine loop until shutdown signal is received
6847	NewOutgoingMessage creates a new message with default parse mode for a recipient using the telegram bot api
6848	NewOutgoingLocation creates a location message with specified coordinates for a recipient using the Telegram bot API
6849	NewOutgoingVenue creates and returns a new venue message with specified location details and recipient information
6850	NewOutgoingVideo creates a video message with recipient, filename, and reader content for telegram bot api
6851	NewOutgoingVideoResend creates a video message object with specified recipient and file ID for sending
6852	NewOutgoingPhoto creates and returns a new photo message object with specified recipient, filename, and reader content
6853	NewOutgoingPhotoResend creates a new photo message with a file ID for sending to a recipient through the Telegram API
6854	NewOutgoingSticker creates a sticker message with recipient, filename, and reader for sending through Telegram API
6855	NewOutgoingStickerResend creates a new sticker message with specified recipient and file ID for Telegram bot API
6856	NewOutgoingVoice creates a voice message object with recipient, filename, and reader for sending via Telegram bot API
6857	NewOutgoingVoiceResend creates a new voice message resend request with specified recipient and file ID
6858	NewOutgoingAudio creates and returns a new audio message object with specified recipient, filename, and reader content
6859	NewOutgoingAudioResend creates a new audio message with specified recipient and file ID for sending through Telegram bot API
6860	NewOutgoingDocument creates and returns a new document message with specified recipient, filename, and content reader using the Telegram bot API interface
6861	NewOutgoingDocumentResend creates a new document message with specified recipient and file ID for resend operation
6862	NewOutgoingForward creates a forward message with recipient, origin chat, and message ID using Telegram bot API
6863	NewOutgoingChatAction creates and returns a new chat action message with specified recipient and action type
6864	NewOutgoingUserProfilePhotosRequest will return a new outgoing user profile photos request with the specified user ID and API connection
6865	NewOutgoingKickChatMember creates and returns a new outgoing kick chat member message with specified chat recipient and user ID
6866	NewOutgoingUnbanChatMember creates and returns a new unban chat member message with specified chat recipient and user ID
6867	NewOutgoingCallbackQueryResponse will return a callback query response with the specified query ID and API reference
6868	NewInlineQueryAnswer creates and returns a new inline query answer with the specified query ID and results using the Telegram bot API
6869	Message Type method returns the type of message based on non-nil fields in the Message struct, defaulting to UnknownMessage if no fields are set.
6870	Update.Type() will return the specific type of update based on which field is populated, defaulting to UnknownUpdate if none are set
6871	MarshalJSON will return a JSON byte array representation of a recipient's channel or chat ID
6872	querystring will return a map containing the URL if it exists otherwise an empty map
6873	getBaseQueryString will return a query string with chat_id based on recipient type channel or chat an error will be returned if recipient is not properly formatted
6874	getBaseQueryString will return a query string containing chat_id reply_to_message_id reply_markup and disable_notification based on the outgoing message properties
6875	querystring will return a formatted query string with duration, performer, and title parameters from the outgoing audio object
6876	querystring method returns a query string map with caption parameter if present from outgoing photo object
6877	querystring will return a formatted query string with user_id offset and limit parameters from the outgoing user profile photos request object
6878	querystring will return a formatted query string with video metadata including caption and duration when provided
6879	querystring method will return a query string map with duration parameter if set otherwise will return base query string parameters
6880	NewInlineQueryResultArticle creates and returns a new article inline query result with specified id, title, and text fields
6881	NewInlineQueryResultPhoto creates and returns a new inline query result photo object with specified ID, photo URL, and thumbnail URL
6882	NewInlineQueryResultGif creates and returns a new GIF inline query result with specified ID, GIF URL, and thumbnail URL
6883	NewInlineQueryResultMpeg4Gif creates and returns a new inline query result object for MPEG4 GIF content with specified ID, URL, and thumbnail URL parameters
6884	NewInlineQueryResultVideo creates and returns a new inline query result video struct with specified parameters including id, video url, thumbnail url, title, text, and mime type
6885	Send will transmit a user profile photos request and return the response or an error if the transmission fails
6886	Send will transmit a chat action and return an error if the transmission fails
6887	Send will post an inline query answer and return an error if the response is invalid
6888	Send will execute a kick chat member request and return an error if the operation fails
6889	Send will unban a chat member and return an error if the request fails
6890	Send will transmit a callback query response and return an error if the transmission fails
6891	NewAPIClient will create and return a new API client with default HTTP client and initialized services
6892	BeforeInsert will set timestamp fields to current time and return nil error
6893	ColumnName will return a quoted column name with optional table prefix using the specified dialect's quote function
6894	New will return a database connection and error based on the provided dialect and data source name
6895	From will return a From struct with the table name of the argument's type an error will be returned if the argument is not a struct or pointer to struct type
6896	Where will return a condition with the specified where clause and arguments
6897	orderBy will return a condition with specified table column and sort order for database queries
6898	Limit will return a condition with the specified limit set
6899	Offset will return a condition with the specified offset value applied to the database query
6900	JoinCondition will return a join condition for the database and table provided
6901	Count will return a function with name COUNT and arguments an error will be returned if the number of arguments is not 0 or 1
6902	Update will modify a database record by primary key and return affected rows count or error if update fails
6903	Delete will remove objects from database table returning affected rows and handling before/after delete hooks
6904	Begin will start a database transaction and store it in the database object, returning any error that occurs during the process
6905	Commit will finalize the current transaction and reset it, returning an error if no transaction exists
6906	Quote will return a quoted string using the database dialect's quote method
6907	SetLogOutput configures the database's logger to write to a specified writer or defaults to a default logger if the writer is nil
6908	selectToSlice will convert database rows to a slice of structs by mapping columns to fields and handling pointer types appropriately, returning an error if field mapping fails or scanning encounters issues
6909	selectToValue will convert database rows to a reflected value with proper pointer handling and return an error if scanning fails
6910	fieldIndexByName will find a field index by name in a struct type returning the index path or nil if not found
6911	columns will return formatted column names for a table handling raw, string, and distinct column types
6912	tagsFromField will return field tags options excluding skip tags by splitting the field tag by comma and trimming whitespace
6913	hasSkipTag will return a boolean indicating if the struct field has a skip tag
6914	hasPKTag will check if a field has a primary key tag and return a boolean value indicating the result
6915	isAutoIncrementable will return a boolean indicating if a field is auto incrementable based on its type kind
6916	collectFieldIndexes will return nested field indexes for a type skipping unexported and specific tagged fields recursively
6917	findPKIndex will recursively search for primary key fields in a struct type and return their index path, or nil if none found
6918	sizeFromTag will return a size value and error from parsing a struct field tag or zero and no error if tag is missing
6919	columnFromTag will return a database column name from a struct field tag or convert the field name to snake case
6920	defaultFromTag will return a default value string from struct tag and handle boolean formatting or return an error if parsing fails
6921	Where appends a where condition to the query with given arguments
6922	appendQueryByCondOrExpr will add a condition with "And" operator and return the updated condition with appended query
6923	Or will add a logical OR condition to the query with the provided condition and arguments
6924	Like method will append a LIKE query condition with the specified argument to the condition chain
6925	Between will add a between query condition with from and to values to the condition chain
6926	OrderBy will set the ordering clause for a query with table, column, and sort direction returning a condition with the appended query
6927	Limit will set a limit on the condition and return the updated condition with the specified limit value
6928	Offset will return a condition with an offset appended to it
6929	templateLogger SetFormat will parse a format string into a template and store it, returning an error if parsing fails
6930	templateLogger Print method formats and logs query execution details with timing information using template rendering
6931	nullLogger Print method returns nil error without performing any logging operations
6932	Quote will return a quoted string with backticks and replace existing backticks with double backticks
6933	SQLType will map Go types to PostgreSQL SQL types with nullability and auto-increment support, panicking on unsupported types
6934	New will return a zip or tar archive based on the file extension provided
6935	Disconnect will close the host connection and reset the handle if it's valid
6936	nextNetworkAdapterID will return the next available network adapter ID by checking existing ethernet entries and recycling unused IDs in the vmx configuration
6937	totalNetworkAdapters will return the total count of network adapters by parsing VMX configuration keys and extracting ethernet interface numbers
6938	RemoveAllNetworkAdapters will delete all ethernet entries from the vmx configuration file and save the modified file back to disk, returning an error if any operation fails.
6939	RemoveNetworkAdapter will remove a network adapter from a VM by modifying its vmx configuration file, returning an error if the VM is running or if any file operations fail
6940	NetworkAdapters will return a list of network adapters and an error if the VMX file cannot be parsed or adapters are invalid
6941	newArchive will create an archive from a path and optional password returning entries and any error that occurs during extraction
6942	GetFileReader will return a file reader from an archive by name and an error if the file is not found or extraction fails
6943	ExtractToWriter will copy file contents to a writer and return any error during extraction or closing
6944	ExtractToFile will create a file and extract archive content to it returning an error if the operation fails
6945	SharedFoldersParentDir will return the guest's shared folders parent directory path and an error if the operation fails
6946	Snapshot Name method will return the display name of a snapshot and an error if the operation fails
6947	Snapshot Description will return a snapshot description string and an error if the operation fails
6948	cleanupSnapshot will release the snapshot handle and set it to invalid if it's valid
6949	BusTypeFromID will return a bus type based on the prefix of the input ID string
6950	Read will load and parse VMX file data into a virtual machine model returning an error if the operation fails
6951	Write will save the VMX model data to a file at the specified path and return an error if the operation fails
6952	NewVirtualMachine creates a virtual machine instance by loading a VMX file and setting up cleanup finalization
6953	Vcpus will return the number of virtual CPUs and an error if the property cannot be retrieved from the VM handle
6954	VmxPath will return the VMX file path and error if operation fails
6955	MemorySize will return the virtual machine's memory size and an error if the property cannot be retrieved
6956	readOnly will return vm readonly status and error if operation fails
6957	InVMTeam will return a boolean indicating if the VM is in a team and an error if the property cannot be retrieved
6958	PowerState will return the virtual machine's power state and error if operation fails
6959	ToolsState will return the guest tools state and error if operation fails
6960	IsRunning will return whether the virtual machine is currently running and any error that occurred during the check
6961	GuestOS will return the guest operating system string and an error if the property cannot be retrieved
6962	cleanupVM will release a virtual machine handle and reset it to invalid if it's valid
6963	updateVMX will modify vmx settings only when VM is powered off, reading, updating, and writing the vmx file with error handling for each step
6964	SetMemorySize will update the virtual machine's memory size to a divisible-by-four value or default to 4MB, returning an error if the update fails
6965	SetNumberVcpus will configure the virtual machine's vcpus count ensuring minimum value of one and update the VMX model accordingly
6966	SetDisplayName will update the virtual machine's display name in the VMX model and return an error if the update fails
6967	SetAnnotation will update the virtual machine's annotation text and return an error if the update fails
6968	SetVirtualHwVersion will update the virtual machine's hardware version and compatibility settings returning an error if parsing fails
6969	Error method returns a formatted string with vix error text code and operation
6970	Errorf will return an error with a formatted message using printf-style formatting
6971	traceableError will return an error string with stack trace information including file and line number
6972	stackFrame string method returns formatted string with function name file path and line number
6973	newStackFrame will create a stack frame with file path line number and function signature from a program counter
6974	captureStack will return a slice of stack frames up to maxDepth depth by capturing program counters with runtime.Callers starting from skip depth
6975	parseFuncName will extract package path and signature from a function name string using regex matching
6976	Stack will log an error and its call stack trace to the output
6977	StackWithCaller will log an error with its stack trace and caller package information
6978	responseWriterBinder Write method executes before functions then writes bytes to the underlying writer
6979	ResponseStatus will return the HTTP status code from a response writer by reflecting on its internal status field
6980	httpResponseStruct will recursively navigate to the ResponseWriter field and return the http.response struct from a pointer or embedded field
6981	SetDetectedContentType will set the detected content type on the response header if not already present and return the content type string
6982	New will set server error properties and return the error instance
6983	New will initialize a database error with HTTP code, error number, message and database name then return the error
6984	New will return a validation error with bad request HTTP code a zero error number and the provided message
6985	New will return a not found error with the specified message and HTTP status code
6986	StrLength will validate that a string field has the specified length and panic with a validation error if it does not match
6987	StrLenIn will validate a string field length against given constraints and panic with validation error if length is not within allowed values
6988	StrIn will validate that a string field value exists within a list of allowed values and panic with a validation error if not found
6989	GetEmail will validate and return an email string from a field name and interface input, panicking if validation fails
6990	MostSpecificType returns the most specific type from a slice of types an error if no types are provided or sorting fails
6991	FullTypeHierarchy will return the complete type hierarchy as URI references from a given highest level type string
6992	SortTypes will organize type strings hierarchically and return an error if they don't follow the required order
6993	delete will remove a key from redis store and refresh the provider returning any error that occurs
6994	redisProvider set method will create a redis store with given key and values then refresh it returning the store or an error
6995	refresh will update redis store values and expiration time returning nil error
6996	redisProvider Get method retrieves session data from redis and returns a redisStore object with the session values and any error that occurred during the operation
6997	redisProvider destroy method will delete session data from redis and return any error that occurs during the process
6998	UpExpire will update the expiration time of a session ID in redis and return any error that occurs during the operation
6999	Use will add a router handler to the handlers stack list
7000	ServeHTTP will handle HTTP requests by setting default headers, processing through handlers stack, and managing context lifecycle with recovery and cleanup.
7001	Use will add middleware handlers to the router group and return the router object
7002	Group will create a new router group with combined handlers and calculated absolute path returning the new group instance
7003	Run will execute pre-run functions parse command line arguments set up a graceful server with specified configurations and start serving requests on the given address logging warnings about the server status and handling any errors that occur during startup or runtime.
7004	create will return a new engine with initialized router group and trees
7005	Redirect will route a request to a new URL with specified status code using the context's response writer and request objects
7006	Ok will write a successful response with data to the client and log a warning if already written
7007	Fail will handle errors by writing appropriate responses and logging warnings based on error type and production environment
7008	ResStatus will write a status code and its text to the response, returning an error if already written
7009	Next will call the next handler in the stack if available and the response hasn't been written yet
7010	GetSession will return a session store from context data or nil if not found or incorrect type
7011	GetBodyJSON will parse request body into JSON format handling both form data and JSON input
7012	SetSession will generate a session ID and token, store session data, and set a cookie with the session ID and token an error will be returned if the session storage fails
7013	FreshSession will update the expiration of a session key and return an error if the operation fails
7014	DeleteSession will remove a session by ID, clear the session data, destroy the session in the provider, delete the cookie, and return nil.
7015	contextWriter Write method will mark context as written and delegate to ResponseWriter an error will be returned if write fails
7016	WriteHeader will set the written flag to true and write the HTTP response header with the specified status code
7017	New creates a client with pem path and options returning a client or nil if error occurs
7018	setAllowLargeResults configures client settings for handling large query results with temporary table and flattening options
7019	connect will establish a BigQuery service connection using JWT authentication and return the service object or an error
7020	InsertRow will add a single row of data to a BigQuery table and return an error if the insertion fails or contains errors
7021	AsyncQuery will asynchronously execute a query and send results through a channel until the client is closed
7022	Client Query method will execute a query and return results and columns or an error
7023	stdPagedQuery will execute a paged BigQuery job and return rows with headers while handling pagination through a data channel
7024	largeDataPagedQuery will execute a BigQuery job with pagination, returning rows and headers while handling errors through a data channel
7025	pagedQuery will execute a query with pagination returning data and error through channel or directly based on client configuration
7026	pageOverJob will paginate through job results, sending rows and headers through channels until all data is retrieved or job completes
7027	Count will return the number of rows in a dataset table by executing a count query and parsing the result into an integer value
7028	work will crawl a url to a given depth and return the crawled result including body urls and errors
7029	subworker will execute a job function with arguments and handle any panic errors during execution
7030	worker will continuously fetch jobs from pool and execute them until killed, updating job metadata and signaling completion
7031	supervisor manages job flow control by handling job submissions, assignments, completions, results, and statistics requests within a worker pool system until shutdown signal is received
7032	Run will start all workers in the pool and panic if already running, also starting the supervisor if not already started
7033	Add will add a job to the pool and wait for it to be added
7034	Wait will block until all pool workers complete their tasks and then return
7035	Results will return all completed jobs from the pool and reset the completed jobs list
7036	WaitForJob will wait for and return a completed job from the pool or nil if no more jobs are available
7037	Status will return pool statistics or zeroed structure if supervisor not started
7038	WrapHTTPHandlerFunc converts an HTTP handler function to a handler function with context error handling
7039	WebSocketHandlerFunc creates a websocket handler from a function and wraps it in an HTTP handler
7040	StaticFile will return a static file with specified filename and content type header based on file extension
7041	PreloadFile will read a file and return its body and headers an error will be returned if the file cannot be read or content type is invalid
7042	InitHtmlTemplates will initialize HTML templates from a glob pattern and return an error if the initialization fails
7043	InitTextTemplates will initialize text templates from a glob pattern and return an error if the parsing fails
7044	Html will return an HTML template with specified content type and character set, panicking if templates aren't initialized
7045	Text will return a template with content type and character set headers, panicking if text templates are not initialized
7046	InitWatcher will initialize a file system watcher that triggers a function on pattern matches and handles errors through an error function, returning any initialization errors.
7047	CloseWatcher will send close signals to all watchers and return the closing error
7048	Find will search for a matching route and return the parameters handler and view or nil values if no match is found
7049	Add will register a router with its handler and view to the routers map or list depending on the router type
7050	NewRouters will return a new routers instance with initialized map and list structures
7051	NewServerMux will return a server multiplexer with default view and not found handler configured
7052	err will execute the error handler if it exists otherwise it will do nothing
7053	HandleFunc will register a router with its handler and view to the server multiplexer
7054	handleError will process an error by setting response status and data, returning true if error was handled, false otherwise
7055	Redirect will set the response status code and data to redirect to the specified URL
7056	InitPProf will initialize pprof debug endpoints with specified prefix and register handlers for various pprof routes including index, cmdline, profile, and symbol.
7057	StartSession will initialize a session using a factory function and return any error that occurs during creation
7058	combinations will generate all possible combinations of a given list with specified selection count and buffer size, returning them through a channel
7059	repeated_combinations generates all repeated combinations of a list with specified selection number and buffer size through recursive goroutine channel processing
7060	permutations generates all possible ordered arrangements of a specified number of elements from a list and sends them through a channel
7061	repeated_permutations generates all repeated permutations of a list with specified selection number and buffer size through recursive goroutine channel communication
7062	gformat will process a format string with named placeholders and return a new format string with arguments replaced by their corresponding values from the provided map
7063	Errorm will return an error with formatted message using a format string and arguments map
7064	Fprintm will format and print a map of arguments to a writer returning the number of bytes written and any error that occurs during formatting or printing
7065	Printm will format and print a string with given arguments returning the number of bytes written and any error that occurs during printing
7066	Sprintm will format a string using given format and arguments map returning the formatted string
7067	Validate will check if a password meets all strength requirements and return a boolean indicating success along with an error message if it fails any requirement checks
7068	MakeRequirements will analyze a password string and return its strength requirements including digit, uppercase, and punctuation counts along with total length constraints
7069	sanityCheck will validate password strength requirements and return true with empty string if valid, otherwise false with error message indicating the specific validation failure
7070	password will return a garbled password string with specified requirements and no error will be returned
7071	NewPassword will generate a password string based on requirements an error will be returned if requirements are invalid
7072	NewPasswords generates a slice of password strings based on given requirements and count, returning an error if requirements are invalid or generation fails
7073	addNums will append random numerical strings to input string based on digit count returning the modified string
7074	punctuate will add random punctuation marks to a string both at the beginning and end based on the specified count
7075	deprecated_init will initialize stdin from command line arguments or pipe input and return early if stdin is piped from another process
7076	Param will set a parameter name to a given value in the parameter set
7077	Parse will decode JSON data into parameters and return an error if unmarshaling fails
7078	Unmarshal will decode JSON data from a reader into a parameter set an error will be returned if the decoding fails
7079	GetDefaultHTTPClient will return an HTTP client with a specified timeout duration
7080	DeviceInfo will return device information and errors from api call to pushy endpoint using device id and api token
7081	DevicePresence will check the presence status of specified devices and return the response, pushy error, and http error
7082	NotificationStatus will return the status of a push notification and any errors from the request
7083	DeleteNotification will remove a push notification by ID and return success status, pushy error, and http error
7084	NotifyDevice will send a notification request to a device and return the response, pushy error, and http error
7085	Assert will check a condition and report an error with caller information if the condition fails
7086	CreateFile will create a file with specified size and return an error if the operation fails
7087	AddError will append an error message to the form errors slice
7088	AddFieldError will add a field error to the form errors map with the specified field and error message
7089	HasErrors will return a boolean indicating if form errors exist by checking both general and field-specific error collections for any entries
7090	NewError creates a FormErrors instance and adds an error message to it
7091	NewFieldError creates form errors with a field and its corresponding error message
7092	ChainHandlers will return a chained http handler using the provided handlers in reverse order
7093	FinalHandler returns a handler that wraps and returns the original handler unchanged
7094	MD5Hasher will return a hashed string and an error if the reader data cannot be hashed properly
7095	IsHash will validate if a string is a proper MD5 hash by checking its length and character set
7096	WithBaseDir returns an option that sets the file finding function to join the directory with the filename
7097	WithFileFindFunc returns an option that sets a file finding function in options
7098	WithTemplateFromFiles will set template files for a given name in the options structure
7099	WithTemplatesFromFiles will set template files from given paths in options returning a function that modifies options struct
7100	WithTemplateFromStrings returns a function that sets template strings in options
7101	WithTemplatesFromStrings will set template strings from a map of string slices into options
7102	WithFunction will add a named function to the options functions map using the provided name and function interface
7103	WithFunctions will add template functions to options by mapping function names to their implementations
7104	WithDelims returns an option to set opening and closing delimiters for parsing
7105	New will create and return a Templates struct with parsed templates from strings and files using provided options and default functions
7106	RespondWithStatus will execute a template with data and write the result to response writer with optional content type and status code, logging any errors during write operation
7107	RespondTemplate will render a template with given data and send it as response an error will be returned if the template is not found or data is invalid
7108	Templates respond will send a template response with default status code to the client
7109	RenderTemplate will execute a named template with given data and return the output string or an error if template is unknown or execution fails
7110	New creates a server with options and a handler returning the configured server instance
7111	ServeUDP will start serving UDP connections on the given connection and return any error that occurs during serving
7112	Shutdown will close the server and return any error that occurs during the process
7113	QuicHeadersHandler will set QUIC headers on a response writer and pass the request to the next handler in the chain
7114	GetRequestIPs will return the client's IP address and any forwarded IPs from HTTP headers as a comma-separated string, handling cases where the IP cannot be parsed from the remote address.
7115	DomainRedirectHandler returns an HTTP handler that redirects requests between domains and protocols based on configured domain and HTTPS port settings.
7116	New will create a Servers instance with optional configurations and return a pointer to it
7117	Add will add a new server with given name address and server object to the servers list in a thread-safe manner using mutex locking
7118	TCPAddr will return a server's TCP address by name while holding the lock on the servers list
7119	UDPAddr will return a UDP address by name and a mutex lock will be used to ensure thread safety
7120	Close will close all servers in the server group and wait for them to finish before returning
7121	Shutdown will gracefully shut down all servers using a wait group and context, logging info and errors during the process
7122	TLSListener Accept will return a TLS or regular connection based on the first byte read, setting keep alive and handling errors appropriately
7123	NewStaticFilesHandler returns a handler that serves static files from a file system, falling back to another handler if the file is not found
7124	AuthHandler will authenticate requests and execute post-authentication functions returning unauthorized status if authentication fails
7125	MarshalJSON will convert options to JSON format returning bytes and error if conversion fails
7126	UnmarshalJSON will parse JSON data into Options struct with timeout, keepalive, TLS, and retry configurations
7127	MarshalOptions will convert timeout settings and retry configurations into a YAML-compatible structure with duration formatting
7128	UnmarshalYAML will parse YAML data into Options struct returning an error if parsing fails
7129	NewHandler creates an HTTP middleware that logs request details and response metrics including status code, response time, and user agent information.
7130	WithPanicResponse returns a handler option that sets panic response body and content type
7131	WithPanicResponseHandler sets a panic response handler option for a handler object
7132	New creates a new Handler with specified options and returns it
7133	Handler will recover from panics in HTTP requests and log details while sending optional notifications and custom panic responses
7134	NewContextFunc creates a lookup function that returns a value from a map by key or nil if not found
7135	NewMapErrorRegistry will return a new error registry with specified errors and handlers, creating empty maps if none are provided
7136	AddError will register an error code and handler, returning an error if already registered
7137	AddMessageError will register a new error with code and message, returning the error or an registration conflict error if code already exists
7138	MustAddError will add an error to the registry or panic if addition fails
7139	MustAddMessageError will add an error message to the registry and panic if an error occurs during addition
7140	AddHandler will register a new error handler for a given code and return an error if the code is already registered
7141	MustAddHandler will register a handler for a given error code and panic if registration fails
7142	Handler will return an error handling function for a given error code from the error registry
7143	New creates a client with endpoint error registry and default settings
7144	Request will send an HTTP request and return the response or an error
7145	JSONContext will perform an HTTP request and parse JSON response into the provided response interface, returning errors for invalid requests, empty bodies, or unmarshal failures
7146	StreamContext will return a stream of data and content type from a request an error will be returned if the request fails
7147	Stream will return a readable data stream content type and error using the client's streaming functionality with default context
7148	JSONUnmarshal will parse json data into a go value and return a formatted error with line and column information on syntax or type mismatches
7149	ServeTCP will start serving TCP connections with optional TLS and return nil if server is closed otherwise return the error from serving
7150	ServeTCP will start the server listening on the given TCP listener and return any error that occurs during execution
7151	Shutdown will gracefully stop the server and return any error that occurs during the process
7152	HandleMethods will process HTTP requests by matching the method to a handler or return an appropriate error response with allowed methods
7153	NewSetHeadersHandler returns a handler that sets specified headers before calling the original handler
7154	New creates a server with root directory and options mutex protection for hash storage
7155	HashedPath will return a hashed file path and an error if the hashing process fails or if the root directory cannot be joined with the hashed path.
7156	New creates a service with optional configurations and defaults to memory storage if none provided
7157	HTMLHandler will return an HTTP handler that serves maintenance HTML when service is down, otherwise delegates to the provided handler
7158	Service Status method returns store status and any error that occurs during the check
7159	StatusHandler will return the maintenance status and an error if the status check fails
7160	OnHandler will toggle maintenance mode and return appropriate HTTP response based on changes made
7161	OffHandler will disable maintenance mode and return a JSON response indicating success or failure
7162	MarshalJSON will encode a PostIRCMessageRequest into JSON format returning bytes and an error if encoding fails
7163	MarshalJSON will serialize the PostArtifactRequest into JSON format returning raw message bytes and potential error
7164	MarshalJSON will serialize the PostArtifactResponse into JSON format returning raw message bytes and potential error
7165	HookChangedMessage will marshal itself into JSON format returning raw message bytes and potential error
7166	MarshalJSON will serialize the TriggerHookRequest into JSON format returning raw message bytes and potential error
7167	MarshalJSON will serialize the TriggerHookResponse into JSON format returning raw message bytes and potential error
7168	UnmarshalJSON will deserialize JSON data into a TriggerHookResponse instance, returning an error for nil pointers
7169	MarshalJSON will serialize launch information into JSON format returning raw message and potential error
7170	MarshalJSON will return a JSON encoded byte array and error by marshaling the variable's raw message content
7171	MarshalJSON will serialize a Var1 instance into JSON format returning raw message bytes or an error if serialization fails
7172	MarshalJSON will return a JSON byte array and error by marshaling the raw message content of Var3
7173	MarshalJSON will return a time formatted as JSON string and error if year is out of range
7174	UnmarshalJSON will parse JSON data into a Time struct using RFC3339 format returning an error if parsing fails
7175	ReadWriteSeeker Write method will write bytes to buffer and resize buffer if necessary, returning number of bytes written and nil error
7176	Seek will reposition the file reader's offset based on the given parameters and return the new position or an error if the calculation is invalid
7177	Read will copy bytes from buffer to slice starting at position and return bytes read and EOF if position exceeds buffer length
7178	MarshalJSON will serialize the LaunchSpecsResponse into JSON format returning raw message bytes or an error
7179	RegionLaunchSpec will marshal itself into JSON format returning raw message bytes and potential error
7180	GenerateCode will create Go packages with auto-generated types and methods from API definitions and save them to specified directories.
7181	postPopulate will set input and output URLs for an API entry and append them to schema URLs if they exist
7182	CreateTemporaryCredentials will generate temporary credentials with specified duration and scopes returning an error if creation fails
7183	setURL will construct a full URL from client base URL and route with optional query parameters, returning parsed URL or error if parsing fails
7184	SignRequest will sign an HTTP request using hawk authentication and set the authorization header returning any errors that occur during the process
7185	APICall will execute an API request with payload and return parsed result or error including call summary
7186	SignedURL generates a hawk-signed URL with bewit authentication for a given route and query parameters
7187	MarshalJSON will serialize the HawkSignatureAuthenticationResponse into JSON format returning raw message bytes and potential error
7188	bmw256 will process input bytes through a compression algorithm returning a 32-byte hash digest
7189	NewCubeHash will initialize and return a new CubeHash instance with initial vector values assigned to its fields
7190	cubehash256 will return a 256-bit hash digest of the input data through iterative hashing rounds and byte ordering conversion
7191	Sum will return a hashed byte slice using multiple cryptographic functions Blake256 Keccak256 CubeHash256 Lyra2 Skein and BMW256 an error will be returned if any hashing operation fails
7192	squeeze will compress state into out using blake2bLyra hashing with temporary buffer allocation
7193	reducedSqueezeRow0 will fill matrix rows with squeezed hash data and apply reduced transformation to state for each column
7194	reducedDuplexRow1 processes matrix columns by XORing input with sponge state, applying Blake2b transformation, and storing results in reversed column order
7195	.NewReaderByteCodeLoader will return a new reader bytecode loader with default flags using the provided parser and compiler
7196	LoadReader will parse source code into an AST, compile it to bytecode, and return the bytecode or an error during the process
7197	NewV3 generates a version 3 UUID using MD5 hashing with a namespace and name input
7198	txLiteral will advance the state and set the current operation's argument as the state's accumulator
7199	txFetchSymbol will fetch a symbol from state variables and advance the state pointer
7200	txMarkRaw will convert a string to raw format and advance the state if the string is not already in raw format
7201	txUnmarkRaw will convert a raw string type to regular string and advance the state pointer
7202	txPrint will print a string value and advance the state, handling nil and raw string types appropriately
7203	txPrintRaw will print a raw string representation of an argument or warn if nil, then advance the state
7204	NewLoopVar creates and returns a LoopVar struct with index, count, body, size, and max index fields initialized from the provided array and index parameters
7205	txMakeArray will create a list from stack elements between start and end marks, populating the list in reverse order and advance the state
7206	txFunCallOmni will execute different function calls based on the type of variable stored in state, handling macros, functions, or issuing warnings for unknown types
7207	DumpAST will set or unset the dump AST flag based on the boolean input value
7208	DumpByteCode will set or unset the bytecode dumping flag based on the boolean input value
7209	NaiveOptimizer will optimize byte code by replacing literal print operations with raw constant prints and no-op operations
7210	NewFuncDepot will return a new function depot with the specified namespace and an empty map of functions
7211	Get will return a function and boolean indicating if the function exists in the depot for the given key
7212	Set will store a value in the function depot using a string key and reflection
7213	NewFileTemplateFetcher will return a file template fetcher with absolute paths or an error if path conversion fails
7214	LastModified will return the last modified time of a file and an error if the file stat fails, caching the result for one second
7215	Reader will return a file reader and error if the file cannot be opened
7216	Bytes will return the file source's bytes and error from reading the source
7217	NewState will create and initialize a new execution state with default stacks and settings
7218	PushFrame will create a new frame and add it to the frame stack returning the newly created frame
7219	PopFrame will remove and return the top frame from the state's frame stack and clean up any frames above the popped frame's mark
7220	CurrentFrame will return the top frame from the state's frames stack or nil if empty
7221	Warnf will write a formatted warning message to the state's warning writer
7222	AppendOutputString will add a string to the state's output buffer
7223	Popmark will remove and return the top integer value from the markstack state
7224	CurrentMark will return the top mark from the state's mark stack or zero if empty
7225	LoadByteCode will return bytecode and an error based on a given key through the state's loader
7226	Reset will clear all state data and initialize default values for opidx, sa, sb, stack, markstack, frames, framestack, pushmark, and pushframe
7227	DeclareVar will add a variable to the frame's stack and return its index position
7228	GetLvar will return a local variable and an error if the variable cannot be retrieved from the stack at the specified index
7229	SetLvar will assign a local variable at index i with value v in the frame's stack
7230	NewByteCode will return a new bytecode instance with default values including timestamp, empty name, nil operation list, and version 1.0
7231	Append will add an operation to the bytecode operation list
7232	AppendOp will add an operation to bytecode and return the operation object
7233	ByteCode String method returns formatted bytecode string with name, generation date, and operation list
7234	NewCachedByteCodeLoader creates a cached bytecode loader with memory and specified cache levels using string and reader loaders along with fetcher and compiler components
7235	CachedByteCodeLoader will load and cache byte code from a template source with validation and dumping capabilities
7236	NewFileCache will return a file cache instance for the given directory path with no error
7237	GetCachePath will return a cached file path by cleaning the key and joining it with the cache directory
7238	Get will return a cache entity and error by opening and decoding a file at the given path
7239	Set will store a cache entity to file path with directory creation and gob encoding
7240	Delete will remove a cached file and return an error if the removal fails
7241	MemoryCache Get will return a cache entity and error based on key lookup
7242	MemoryCache Set method stores a cache entity by key and returns nil error
7243	MemoryCache Delete method removes a key-value pair from memory and returns nil error
7244	NewStringLexer will return a new lexer with specified template and symbol set for parsing tags
7245	NewReaderLexer will return a new lexer with custom tag start and end settings for parsing reader input
7246	NewV4 generates a random UUID version 4 with proper variant bits set and returns a pointer to it
7247	Parse will convert a byte slice template into an abstract syntax tree and return an error if parsing fails
7248	ParseReader will parse input from a reader using a lexer and return an abstract syntax tree or an error if parsing fails
7249	Visit will return a channel of nodes from the ast root node by traversing all child nodes recursively
7250	AST String method returns a formatted string representation of visited nodes with line numbers
7251	Run will execute bytecode instructions using a virtual machine with variable scope and output handling until end opcode is reached
7252	DefaultParser will set the parser based on syntax argument or default to TTerse, returning an error for invalid syntaxes
7253	DefaultLoader will configure a xslate loader with cache directory, load paths, and cache level from arguments returning an error if configuration fails
7254	DefaultVM will initialize a new virtual machine with the transaction's loader and assign it to the transaction's VM field, returning no error.
7255	Get will return a value and boolean indicating if key exists in args map
7256	NewHTTPSource will create a new HTTP source with body data and parsed last modified time from response headers
7257	NewStringByteCodeLoader will return a new string bytecode loader with default flags using the provided parser and compiler
7258	LoadString will parse a template string into an AST, compile it to bytecode, and return the bytecode with optional AST and bytecode dumping
7259	Get will return a variable value and existence flag from a string key or convert key to string then retrieve the value and existence flag from the variables map
7260	NewOp creates and returns a new operation with specified type handler and argument
7261	MarshalBinary encodes an operation with its arguments and comment into a binary format returning bytes and error
7262	UnmarshalBinary will deserialize operation data including type, argument, and comment from binary format returning an error if deserialization fails
7263	ArgInt will convert an operation's argument to an integer and return its value
7264	ArgString will return a string representation of the operand's argument or convert it to string if it's not already a string
7265	AppendOp will add a bytecode operation to the context and return the created operation
7266	Compile will generate bytecode from an AST and optimize it returning the compiled code and any errors that occur during compilation
7267	NewV5 generates a version 5 UUID using SHA-1 hashing with a namespace and name input
7268	SortLexSymbolList will sort and return a lexical symbol list using a custom sorter implementation
7269	LexSymbolSorter will sort symbols by priority in descending order
7270	LexSymbolSorter swap two elements in the list at given indices
7271	Copy will return a duplicate LexSymbolSet with identical map entries and their associated LexSymbol values
7272	Set will add a lexical symbol with its type and priority to the symbol set and reset the sorted list
7273	GetSortedList returns a sorted list of lexical symbols by priority and length order from the symbol map
7274	Top will return the top element of the stack and an error if the stack is empty
7275	Resize will return a stack with a new size and copy over the old elements
7276	Extend will increase the stack size by the specified amount
7277	Stack Grow will automatically resize the stack buffer to accommodate minimum required size
7278	Get will return an element from stack at index i and an error if index is out of range
7279	Set will update a stack element at index i with value v and resize stack if necessary, returning an error for invalid indices
7280	Push will add a value to the stack and resize if necessary based on buffer capacity
7281	Pop will remove and return the top element from the stack, returning nil if the stack is empty
7282	Stack's String method will format and return its contents as a string with indexed quoted values
7283	GetHostIPs will return a list of host IP addresses excluding docker interfaces and any errors encountered during interface enumeration
7284	GetPrivateHostIPs will return a list of private IPv4 addresses excluding loopback addresses, and an error if no private IPs are found or if there's an issue retrieving host IPs.
7285	IsPrivate will determine if an IP address is contained within private networks and return a boolean value indicating the result
7286	Environ will return environment variables from flag values and their corresponding environment variable names
7287	getenv will return an environment variable value and existence status based on a given name and flag mapping
7288	flagAsEnv will convert a name to an uppercase environment variable name with underscores replacing dots and hyphens
7289	NewPolicy will return a policy struct with default password requirements and character pools
7290	CreateRandom will generate a random byte slice of specified length using a shuffled source byte slice and random indexing
7291	Shuffle will randomly reorder the elements in a byte slice using a seed-based random generator
7292	Generate will return a password string and an error based on policy requirements and constraints
7293	ExecutableFolder will return the directory path of the current executable file and any error that occurs during the process
7294	Ignore will add error handlers to skip specific errors during execution and return an error if the sentinel has already started
7295	Sigs will set shutdown signals for the sentinel and return an error if already started
7296	Logf returns a function that sets the logging function for the sentinel and returns an error if the operation fails
7297	Errorf returns a function that sets an error formatting function on a Sentinel and always returns nil
7298	New will create a new sentinel with default values and apply provided options returning an error if options are invalid
7299	Run will start sentinel servers and handle shutdown signals returning errors if already started or if shutdown fails
7300	Shutdown will execute all shutdown functions with timeout and return the first error encountered
7301	ShutdownIgnore will check if an error should be ignored by matching against a list of ignore functions, returning true if ignored or if the error is nil.
7302	Register will add server and shutdown functions along with error handling functions to the sentinel structure
7303	Mux will create a connection multiplexer and register the server, returning an error if already started or registration fails
7304	HTTP will start an HTTP server on a listener with handler and options returning an error if already started or if registration fails
7305	IgnoreError returns a function that checks if an error matches a specific error value
7306	IgnoreNetOpError will return a boolean indicating if the network error is due to a closed connection, otherwise it returns false
7307	convertAndAppendContextFuncs will convert various function types to context functions and append them to a slice, returning an error if conversion fails
7308	router creates API routes for services with health checks and status endpoints
7309	buildInfoHandler will write "build-info" to the response writer when called with an HTTP request
7310	JsonEncoder will encode interface values into JSON bytes handling pointers and structs appropriately with error checking
7311	Json will decode request body into a struct and validate the data returning any deserialization errors
7312	validateAndMap will validate an object, collect errors, and map the validated object and errors into the context
7313	Count will return the total number of overall and field errors in an errors object
7314	Header method will generate CORS headers map based on options and origin, returning empty map if origin not allowed, otherwise including allow-origin, credentials, methods, headers, expose headers and max age when specified
7315	PreflightHeader validates origin, method, and headers then constructs CORS response headers including allowed methods, headers, exposed headers, and max age.
7316	IsOriginAllowed checks if an origin matches any allowed patterns and returns whether it's permitted
7317	Allow function returns a handler that sets CORS headers based on options and request method
7318	Renderer will create and return a martini handler that prepares rendering options and charset then maps a renderer instance to the context for use in handling HTTP requests
7319	AcceptLanguages String method will return a formatted string representation of languages and their qualities separated by commas, or empty slice notation if none exist
7320	Languages returns a handler that parses Accept-Language headers and maps sorted language preferences to the context
7321	Prefix will trim the request path if it starts with the given prefix otherwise return a 404 error
7322	Basic will authenticate users with username and password returning a handler that checks authorization headers and returns unauthorized error if authentication fails
7323	UpdateUser will update a session with a user's unique ID and return an error if the operation fails
7324	GetById will retrieve a user from the database by ID and return an error if the user is not found or if there is a database error
7325	AddressToAccountId converts a string address to an account ID by decoding and validating the address format
7326	MutateChangeTrust will convert an asset to XDR object and return an error if the asset is native
7327	MutateChangeTrust will parse a limit amount and assign it to a change trust operation, returning any parsing errors
7328	Trust creates a change trust operation with asset credit and limit settings
7329	RemoveTrust creates a change trust operation with credit asset and zero limit, optionally appending additional mutators
7330	MutatePayment will modify payment operations with new credit amount and asset returning an error if parsing fails
7331	MutatePayment will modify payment operations with a destination address or seed, returning an error for unexpected operation types
7332	MutatePayment will modify payment operations with native amount and asset, returning an error for unexpected operation types
7333	MutatePayment will update a payment operation with max amount, path, and asset values returning an error if parsing or conversion fails
7334	MutateAccountMerge will set the destination account ID from address or seed into the account merge builder, returning an error if unsuccessful
7335	MustParse will return an int64 or panic if parsing fails
7336	Parse will convert a string into an xdr.Int64 by parsing and multiplying by One, returning an error if parsing fails
7337	String will convert an Int64 value to a string representation with 7 decimal places
7338	CreateOffer will return a manage offer builder for creating an offer with specified rate and amount
7339	CreatePassiveOffer will return a passive offer builder with specified rate and amount
7340	UpdateOffer will return a manage offer builder with the specified rate, amount, and offer ID
7341	DeleteOffer will create a manage offer builder to delete an offer by setting amount to zero
7342	ManageOffer will return a manage offer builder with passive offer setting and mutations applied
7343	Mutate will apply multiple mutators to manage offer and operation builders, returning the first error encountered
7344	MutateManageOffer will update offer amounts with parsed amount values returning an error for unexpected operation types
7345	MutateManageOffer will set the offer ID in a manage offer operation and return an error for unexpected operation types
7346	MutateManageOffer will modify offer operations with rate values returning an error for unexpected types or parsing issues
7347	MutateOperation will set the source account of an operation using an address or seed and return an error if unsuccessful
7348	String will return a price formatted as a float string with 7 decimal places
7349	Transaction will create a transaction builder and apply mutations to it returning the built transaction
7350	TransactionBuilder will apply multiple mutations to a transaction and halt on first error
7351	TransactionBuilder Hash method returns a 32-byte hash of the transaction data including network ID and transaction bytes
7352	HashHex will return the hexadecimal representation of a transaction hash and an error if the hash computation fails
7353	Sign will add signatures to a transaction builder and return the modified result
7354	AllowTrustBuilder will mutate a transaction by appending an allow trust operation and return an error if the operation fails
7355	ChangeTrustBuilder will mutate a transaction by appending a change trust operation and return an error if the operation fails
7356	CreateAccountBuilder will mutate a transaction by appending a create account operation and return an error if the operation fails
7357	MutateTransaction will set default fee and network ID on transaction builder if not already configured, returning no error
7358	InflationBuilder will mutate a transaction by adding an inflation operation and return an error if the operation creation fails
7359	MutateTransaction will modify a transaction by appending a manage data operation and return an error if the operation fails
7360	MutateTransaction will add an offer operation to a transaction builder and return an error if the operation creation fails or if there is a preexisting error in the manage offer builder
7361	MutateTransaction will set a memo hash on a transaction builder and return any error that occurs during the process
7362	MutateTransaction will set a memo ID on a transaction builder and return any errors during memo creation
7363	MutateTransaction will set a return memo on the transaction builder and return an error if memo creation fails
7364	MutateTransaction will set a text memo on a transaction builder, returning an error if the memo exceeds 28 bytes maximum length
7365	MutateTransaction will set the network ID on a transaction builder and return nil error
7366	PaymentBuilder will mutate a transaction by appending either a path payment or regular payment operation, returning an error if the operation creation fails
7367	SetOptionsBuilder will mutate a transaction by appending a set options operation and return an error if the operation fails
7368	MutateTransaction will update a transaction's sequence number with the sequence from the sequence and return nil error
7369	SourceAccount mutate transaction by setting account ID from address or seed into transaction source account
7370	Scan will convert an int64 value to a Int64 type and return an error if the conversion fails
7371	InitialState will return the initial state of a ledger entry or an error if not found
7372	Bundle Changes will return ledger entry changes for a target key up to a maximum depth limit
7373	StateAfter retrieves the final ledger entry state after a specific operation by processing changes in reverse order and returning the appropriate entry based on the change type.
7374	changes will return ledger entry changes for a target key up to maximum operations an empty slice will be returned if no changes are found
7375	MustDecode will decode a string into bytes or panic if decoding fails
7376	Encode will return a base32 encoded string with version byte and checksum an error will be returned if version is invalid or encoding fails
7377	MustEncode will return an encoded string or panic if encoding fails
7378	checkValidVersionByte will return nil if the version byte is valid otherwise it will return an invalid version byte error
7379	Checksum calculates a CRC16 checksum of byte data and returns it as a little-endian byte array, panicking on write errors
7380	Validate will check if a provided checksum matches a calculated checksum and return an error if they don't match
7381	LedgerEntryChange will return the ledger key based on the change type, panicking for unknown types
7382	checkPlausible will validate each rune in prefix against alphabet and exit if any invalid character is found
7383	Address will return the encoded address string of an account id or panic if the account id type is unknown
7384	Equals will compare two account IDs and return true if they are equal, otherwise false, panicking on unknown types
7385	SetAddress will set an account ID from a string address returning an error if the address is invalid or improperly formatted
7386	ToXdrObject converts an asset to XDR format returning native or credit asset types based on code length and issuer validation
7387	Through will append an asset to the payment path and return the updated payment path object
7388	PayWith creates and returns a PayWithPath struct with specified asset and maximum amount parameters
7389	continuedFraction converts a price string into a continued fraction approximation returning xdr price values or an error if parsing fails
7390	TransactionEnvelopeBuilder will apply multiple mutations to a transaction envelope, returning an error if any mutation fails
7391	TransactionEnvelopeBuilder will initialize and mutate a transaction with given mutators returning any errors encountered
7392	TransactionEnvelopeBuilder Bytes method returns serialized transaction bytes or error if transaction is invalid
7393	Base64 will return a base64 encoded string of the transaction envelope bytes and any error that occurs during byte conversion
7394	MutateTransactionEnvelope will update the transaction envelope with new transaction data and return an error if the operation fails
7395	MutateSetOptions will set the home domain field of a SetOptions operation, returning an error if the domain exceeds 32 characters
7396	MutateSetOptions will set the inflation destination account ID and return an error if the operation fails
7397	MutateSetOptions will set the master weight value in the options operation and return any error that occurs during the process
7398	MutateSetOptions will set a signer with weight and public key on a set options operation and return any error that occurs
7399	SetThresholds will return threshold values for low, medium, and high settings
7400	MutateSetOptions will set threshold values on a SetOptions operation object based on provided threshold values, returning any error that occurs during the process
7401	MutateSetOptions will set account flags in SetOptions operation and return an error if flag is invalid
7402	ClearFlag MutateSetOptions will set account flags to clear with validation and return an error if flag is invalid
7403	MutateCreateAccount will set the destination account ID from address or seed in a create account operation
7404	MutateCreateAccount will parse an amount string and set it as the starting balance in a create account operation, returning any parsing error
7405	Random will generate a random keypair from a random seed an error will be returned if the seed or keypair is invalid
7406	Master will return a keypair from a network passphrase or panic if invalid
7407	Parse will return a key pair from an address or seed string an error will be returned if the string is not a valid address or seed
7408	MustParse will return a keypair or panic if parsing fails
7409	MutateAllowTrust will set the authorize field of an AllowTrust operation to the specified value and return nil error
7410	AllowTrustAsset will mutate an operation asset based on code length returning an error if length is invalid
7411	MutateAllowTrust will set the trustor account ID on an allow trust operation and return an error if the address is invalid
7412	AllowTrustOpAsset converts an asset to its corresponding type with issuer and panics on unexpected asset types
7413	SetNative will set an asset to native type and return an error if the operation fails
7414	String method will return asset type string representation with currency and issuer if not native
7415	Equals will compare two assets and return true if they are the same type and have matching codes and issuers otherwise false or panic for unknown types
7416	MustExtract will extract asset data and panic if extraction fails
7417	Unmarshal will delegate reading from io.Reader to xdr package's Unmarshal function and return the bytes read and any error encountered
7418	Marshal will encode a value using xdr and write it to writer returning bytes written and any error that occurs
7419	ValidEnum checks if an integer value exists within the crypto key type map and returns a boolean indicating validity
7420	NewPublicKey will create a public key with specified type and value returning an error if the value type is invalid
7421	MustEd25519 will return the Ed25519 public key or panic if not set
7422	NewNodeId will return a node identifier and an error if the public key creation fails
7423	NewAccountId will create a new account identifier from a public key type and value, returning the account id and any error that occurs during creation
7424	ValidEnum will check if an integer value exists in the asset type map and return a boolean indicating validity
7425	ArmForSwitch will return an asset type string and true if supported, otherwise returns "-" and false for unsupported asset types
7426	NewAsset will create a new asset with specified type and value returning an error if the value type is invalid
7427	MustAlphaNum4 will return the asset alphanumeric value or panic if not set
7428	GetAlphaNum4 will return an AssetAlphaNum4 and true if the asset type matches AlphaNum4 otherwise it returns zero value and false
7429	MustAlphaNum12 will return an AssetAlphaNum12 value or panic if not set
7430	GetAlphaNum12 will return an AssetAlphaNum12 and boolean indicating success based on the asset type switch condition
7431	ValidEnum checks if an integer value exists within the threshold indexes map and returns a boolean indicating its presence or absence
7432	ValidEnum will check if an integer value exists in the ledger entry type map and return a boolean indicating validity
7433	ValidEnum will check if an account flag value exists in the map and return a boolean indicating validity
7434	NewAccountEntryExt will create an account entry extension with a version and value returning an error if the version is unsupported
7435	ValidEnum checks if a trust line flag value exists in the predefined flags map and returns a boolean indicating validity
7436	NewTrustLineEntryExt will create a trust line entry extension with a version and value returning an error if the version is unsupported
7437	ValidEnum checks if an integer value exists in the offer entry flags map and returns a boolean indicating validity
7438	NewOfferEntryExt will create a new offer entry extension with a version and value returning an error if the version is not supported
7439	NewDataEntryExt will create a new data entry with version and value returning an error if the version is invalid
7440	NewLedgerEntryData creates a ledger entry with specified type and value, returning an error if the value type does not match the entry type
7441	NewLedgerEntryExt will create a ledger entry extension with version and value returning an error if the version is unsupported
7442	ValidEnum will check if an integer value exists in the envelope type map and return a boolean indicating validity
7443	ValidEnum will check if an integer value exists in the operationTypeMap and return a boolean indicating validity
7444	AllowTrustOpAsset will return an asset code field name and true if the asset type matches credit alphanum types, otherwise it returns a dash and false
7445	NewAllowTrustOpAsset will create a trust asset with specified type and value returning an error if value type is invalid
7446	MustAssetCode4 will return a 4-byte array of the asset code or panic if not set
7447	GetAssetCode4 will return a 4-byte array and boolean indicating success when the asset type matches AssetCode4
7448	MustAssetCode12 will return the asset code or panic if it is not set
7449	GetAssetCode12 will return a 12-byte array and boolean indicating success when the asset type matches AssetCode12
7450	NewOperationBody creates an operation body with specified type and value, returning an error if value type doesn't match operation type
7451	MustCreateAccountOp will return a create account operation or panic if it is not set
7452	GetCreateAccountOp will return a CreateAccountOp and true if the operation type matches, otherwise it returns zero value and false
7453	MustPaymentOp will return a payment operation or panic if the operation is not set
7454	GetPaymentOp will return a payment operation and true if the operation type matches PaymentOp otherwise it will return zero value and false
7455	MustPathPaymentOp will return the path payment operation or panic if it's not set
7456	GetPathPaymentOp will return a path payment operation and true if the operation type matches, otherwise it returns zero value and false
7457	MustManageOfferOp will return the manage offer operation or panic if it is not set
7458	GetManageOfferOp will return a manage offer operation and true if the operation type matches, otherwise it returns zero value and false
7459	MustCreatePassiveOfferOp will return a passive offer operation or panic if the operation is not set
7460	GetCreatePassiveOfferOp will return a CreatePassiveOfferOp and true if the operation type matches, otherwise it returns zero value and false
7461	MustSetOptionsOp will return the SetOptionsOp value from OperationBody or panic if not set
7462	GetSetOptionsOp will return a SetOptionsOp and true if the operation type matches, otherwise it returns zero values
7463	MustChangeTrustOp will return the ChangeTrustOp arm of OperationBody or panic if not set
7464	GetChangeTrustOp will return a change trust operation and true if the operation type matches, otherwise it returns zero value and false
7465	MustAllowTrustOp will return the allow trust operation or panic if it is not set
7466	GetAllowTrustOp will return an AllowTrustOp and true if the operation body matches, otherwise it returns zero value and false
7467	MustDestination will return the destination account id from operation body or panic if not set
7468	GetDestination will return the destination account ID and true if the operation type has a destination, otherwise it returns zero value and false
7469	MustManageDataOp will return the manage data operation or panic if it's not set
7470	GetManageDataOp will return a manage data operation and true if the operation type matches, otherwise it returns zero value and false
7471	ValidEnum checks if an integer value exists within the memo type map and returns a boolean indicating its presence
7472	ArmForSwitch will return a memo type string and true if the switch value matches a memo type, otherwise it returns "-" and false
7473	NewMemo creates a memo with specified type and value, returning an error if the value type doesn't match the memo type
7474	MustText will return the text value from memo or panic if not set
7475	Memo.GetText will return the text value and true if the arm name is Text otherwise it will return empty string and false
7476	MustId will return the arm Id from memo or panic if not set
7477	GetId will return the Id field from Memo if the ArmForSwitch returns "Id" otherwise it will return zero value and false
7478	MustHash will return the hash value from memo or panic if not present
7479	GetHash will return a hash and true if the arm name equals "Hash" otherwise it returns zero value and false
7480	MustRetHash will return the stored hash value or panic if not present
7481	NewTransactionExt will create a transaction extension with a version and value returning an error if the version is invalid
7482	ValidEnum will check if an integer value exists in the create account result code map and return a boolean indicating validity
7483	ArmForSwitch will return an empty string and true for CreateAccountResultCodeCreateAccountSuccess or default case
7484	NewCreateAccountResult will return a create account result and an error based on the input code and value
7485	ValidEnum will check if a payment result code is valid by looking it up in the payment result code map and returning true if found otherwise false
7486	ArmForSwitch will return an empty string and true for any payment result code including success or default cases
7487	NewPaymentResult will return a payment result with specified code and value, defaulting to void for non-success cases
7488	PathPaymentResultCode validEnum will return a boolean indicating if the value exists in the path payment result code map
7489	ArmForSwitch will return a string and boolean based on the path payment result code, defaulting to empty string and true for unknown codes
7490	NewPathPaymentResult creates a path payment result with specified code and value, returning an error if value type is incorrect
7491	MustNoIssuer will return the asset from the path payment result or panic if the arm is not set
7492	GetNoIssuer will return an asset and boolean indicating if the path payment result has no issuer
7493	ValidEnum will check if an integer value exists in the manage offer result code map and return a boolean indicating validity
7494	ValidEnum checks if an integer value exists in the manage offer effect map and returns a boolean result
7495	ArmForSwitch will return an offer string and true boolean based on the manage offer effect switch case provided
7496	NewManageOfferSuccessResultOffer will create a manage offer success result with an offer entry or return an error if the value type is invalid
7497	ArmForSwitch will return a success message and true boolean when the switch value matches ManageOfferSuccess, otherwise it returns an empty string and true
7498	NewManageOfferResult creates a manage offer result with success case handling and error checking for correct value type
7499	ValidEnum will check if an integer value exists in the set options result code map and return a boolean indicating validity
7500	ArmForSwitch will return a string and boolean indicating success or failure for a switch operation based on the result code
7501	NewSetOptionsResult will return a set options result and an error based on the input code and value
7502	ValidEnum will check if a change trust result code is valid by looking it up in the map and returning whether it exists
7503	ArmForSwitch will return an empty string and true for ChangeTrustSuccess code otherwise returns empty string and true for all other codes including default case
7504	NewChangeTrustResult will return a change trust result and an error based on the provided code and value
7505	ValidEnum will check if an integer value exists within the allow trust result code map and return a boolean indicating its presence or absence
7506	ArmForSwitch will return an empty string and true for any input switch case including AllowTrustSuccess
7507	NewAllowTrustResult will return an allow trust result and an error based on the provided code and value
7508	ValidEnum will return a boolean indicating if the account merge result code is valid by checking its presence in the map
7509	ArmForSwitch will return a string and boolean indicating the source account balance or empty string based on the account merge result code
7510	NewAccountMergeResult will create an account merge result with a balance or return an error if the value type is invalid
7511	MustSourceAccountBalance will return the source account balance or panic if it is not set
7512	GetSourceAccountBalance will return the source account balance and true if the arm name matches, otherwise it returns zero value and false
7513	ValidEnum will check if an integer value exists in the inflation result code map and return a boolean indicating validity
7514	ArmForSwitch will return a string and boolean based on the inflation result code, defaulting to empty string and true for non-success cases
7515	NewInflationResult creates an inflation result with payouts when successful, returning an error for invalid value types
7516	MustPayouts will return inflation payouts or panic if not set
7517	GetPayouts will return inflation payouts and a boolean indicating success when the arm name equals "Payouts"
7518	ValidEnum will check if an integer value exists in the manage data result code map and return a boolean indicating validity
7519	ArmForSwitch will return an empty string and true for any ManageDataResultCode input including ManageDataSuccess
7520	NewManageDataResult will return a manage data result and an error based on the provided code and value
7521	OperationResultCode validEnum will return a boolean indicating if the value exists in the operation result code map
7522	ArmForSwitch will return the operation result type string and true for given switch value otherwise return "-" and false
7523	NewOperationResultTr creates an operation result with type and value validation returning an error for invalid types
7524	MustCreateAccountResult will return the create account result or panic if it's not set
7525	GetCreateAccountResult will return a create account result and boolean indicating success if the operation matches the result type
7526	MustPaymentResult will return the payment result or panic if it's not set
7527	GetPaymentResult will return a payment result and boolean indicating success if the operation type matches PaymentResult arm
7528	MustPathPaymentResult will return the path payment result or panic if the arm is not set
7529	GetPathPaymentResult will return a path payment result and boolean indicating success if the operation type matches, otherwise it returns zero values
7530	MustManageOfferResult will return the manage offer result or panic if it's not set
7531	GetManageOfferResult will return a manage offer result and boolean indicating success if the operation type matches, otherwise returns zero values
7532	MustCreatePassiveOfferResult will return the passive offer result or panic if not set
7533	MustSetOptionsResult will return the set options result or panic if it is not set
7534	GetSetOptionsResult will return a SetOptionsResult and boolean indicating success when the operation type matches SetOptionsResult
7535	MustChangeTrustResult will return the change trust result or panic if it's not set
7536	GetChangeTrustResult will return a change trust result and boolean indicating success if the operation matches the result type
7537	MustAllowTrustResult will return the allow trust result or panic if it's not set
7538	GetAllowTrustResult will return an allow trust result and boolean indicating success if the operation matches the result type
7539	MustAccountMergeResult will return account merge result or panic if not set
7540	GetAccountMergeResult will return an account merge result and boolean indicating success if the operation type matches AccountMergeResult
7541	MustInflationResult will return the inflation result or panic if it's not set
7542	GetInflationResult will return an inflation result and true if the operation type matches, otherwise it returns zero value and false
7543	MustManageDataResult will return the manage data result or panic if it's not set
7544	GetManageDataResult will return a manage data result and boolean indicating success from an operation result tr
7545	ArmForSwitch will return a string and boolean based on operation result code defaulting to empty string and true for non-matching cases
7546	NewOperationResult creates an operation result with given code and value, returning an error if value type is invalid
7547	MustTr will return the Tr value from OperationResult or panic if it's not set
7548	GetTr will return the Tr result and true if the operation code matches the Tr arm otherwise it returns zero value and false
7549	ValidEnum checks if a transaction result code value exists in the transaction result code map and returns a boolean indicating validity
7550	ArmForSwitch returns a string and boolean based on transaction result code, defaulting to empty string and true for unknown codes
7551	NewTransactionResultResult creates a transaction result with proper type assertion and error handling for operation results
7552	MustResults will return operation results or panic if not set
7553	GetResults will return operation results and a boolean indicating success based on transaction code arm name matching "Results"
7554	NewTransactionResultExt will return a transaction result extension with version and value, or an error if the version is invalid
7555	NewStellarValueExt will create a new stellar value extension with a version and interface value returning the result and an error if the version is not supported
7556	NewLedgerHeaderExt will return a ledger header extension with version and value, void case handled for version 0
7557	ValidEnum will check if an integer value exists in the ledger upgrade type map and return a boolean indicating validity
7558	ArmForSwitch will return a string identifier and true flag for specific ledger upgrade types, otherwise returns "-" and false
7559	NewLedgerUpgrade will create a ledger upgrade result based on the type and value provided, returning an error if the value type is invalid
7560	MustNewLedgerVersion will return the new ledger version or panic if it's not set
7561	GetNewLedgerVersion will return the new ledger version and true if the arm name matches, otherwise it returns zero value and false
7562	MustNewBaseFee will return the new base fee value from ledger upgrade or panic if not set
7563	GetNewBaseFee will return the new base fee and true if the arm name equals "NewBaseFee" otherwise it will return zero value and false
7564	MustNewMaxTxSetSize will return the maximum transaction set size value or panic if not set
7565	GetNewMaxTxSetSize will return the new maximum transaction set size and a boolean indicating success if the arm name matches "NewMaxTxSetSize"
7566	ArmForSwitch will return a ledger entry type string and true if the switch value matches a valid type, otherwise it returns a dash and false
7567	NewLedgerKey will create a ledger key with specified type and value, returning an error if the value type does not match the ledger entry type
7568	ValidEnum will check if an integer value exists in the bucket entry type map and return a boolean indicating validity
7569	ArmForSwitch will return a string representation and true if the switch value matches known bucket entry types, otherwise it returns false
7570	NewBucketEntry creates a bucket entry with specified type and value, returning an error if value type does not match entry type
7571	MustLiveEntry will return the live ledger entry or panic if not set
7572	GetLiveEntry will return the live ledger entry and true if the bucket entry type matches, otherwise it returns zero values
7573	MustDeadEntry will return the dead entry value from bucket entry or panic if not set
7574	GetDeadEntry will return a ledger key and true if the bucket entry type is dead entry otherwise it will return zero value and false
7575	NewTransactionHistoryEntryExt will create a transaction history entry with version and value, returning an error if the version is invalid
7576	ArmForSwitch will return a string and boolean based on the switch value, returning empty string and true for zero, otherwise returning dash and false
7577	NewTransactionHistoryResultEntryExt will create a transaction history result entry with version and value returning an error if the version is invalid
7578	NewLedgerHeaderHistoryEntryExt will create a ledger header history entry extension with version and void value returning an error if version is invalid
7579	NewScpHistoryEntry will create a history entry with version and value returning an error if the value type is incorrect
7580	ValidEnum checks if an integer value exists within the ledger entry change type map and returns a boolean indicating validity
7581	ArmForSwitch will return a string representation and true boolean for LedgerEntryChange types, otherwise returns "-" and false
7582	NewLedgerEntryChange creates a ledger entry change with validated type and value, returning an error for invalid inputs
7583	MustCreated will return the created ledger entry or panic if it's not set
7584	GetCreated will return the created ledger entry and true if the entry type matches Created, otherwise it returns zero value and false
7585	MustUpdated will return the updated ledger entry or panic if not set
7586	GetUpdated will return the updated ledger entry and true if the entry type matches the updated arm otherwise it will return zero value and false
7587	MustRemoved will return the removed ledger key or panic if not set
7588	GetRemoved will return the removed ledger key and true if the entry change type matches the removed arm, otherwise it returns zero value and false
7589	MustState will return the ledger entry state or panic if not set
7590	GetState will return the ledger entry state and true if the entry type matches the state arm otherwise it returns zero value and false
7591	NewTransactionMeta will create transaction metadata with version and operations, returning an error if the value type is incorrect
7592	MustOperations will return transaction operations or panic if not set
7593	GetOperations will return transaction operations and true if arm name equals "Operations" otherwise returns empty slice and false
7594	ValidEnum will check if an error code exists in the mapping and return a boolean indicating validity
7595	ValidEnum checks if an integer value exists within the ip address type map and returns a boolean indicating validity
7596	ArmForSwitch will return IP address type string and true flag for IPv4 or IPv6, false otherwise
7597	NewPeerAddressIp will create a peer address with ipv4 or ipv6 type and validate the byte array input returning an error if invalid
7598	MustIpv4 will return an IPv4 address or panic if not set
7599	GetIpv4 will return an IPv4 address and true if the peer address type matches IPv4 otherwise it returns zero valued byte array and false
7600	MustIpv6 will return an IPv6 address or panic if not set
7601	GetIpv6 will return an IPv6 address and true if the peer address type is IPv6 otherwise it will return zero value and false
7602	ValidEnum will check if a message type value exists in the map and return a boolean indicating validity
7603	ArmForSwitch will return a message type string and true flag based on the switch statement, otherwise returns "-" and false if no match is found
7604	NewStellarMessage creates a stellar message with specified type and value, returning an error if value type does not match message type
7605	MustError will return the error value from stellar message or panic if not set
7606	GetError will return an error and true if the stellar message type is error otherwise it will return a zero error and false
7607	MustHello will return the Hello value from StellarMessage or panic if it's not set
7608	GetHello will return the hello message and true if the stellar message type is hello otherwise it will return zero value and false
7609	MustAuth will return the authentication value from stellar message or panic if not set
7610	GetAuth will return the authentication data and true if the message type matches Auth, otherwise it returns zero value and false
7611	MustDontHave will return the DontHave value from StellarMessage or panic if not set
7612	GetDontHave will return a DontHave message and true if the stellar message type matches, otherwise it returns zero value and false
7613	MustPeers will return the peers from stellar message or panic if not set
7614	GetPeers will return peer addresses and true if the message type is Peers otherwise returns empty slice and false
7615	MustTxSetHash will return the transaction set hash or panic if it is not set
7616	GetTxSetHash will return the transaction set hash and true if the message type matches, otherwise it returns zero value and false
7617	MustTxSet will return the transaction set value or panic if not set
7618	GetTxSet will return a transaction set and true if the message type is TxSet otherwise it will return empty set and false
7619	MustTransaction will return a transaction envelope or panic if the transaction arm is not set
7620	GetTransaction will return a transaction envelope and true if the message type is transaction otherwise it will return zero value and false
7621	MustQSetHash will return the QSetHash value from StellarMessage or panic if not set
7622	GetQSetHash will return the hash value and true if the message type matches QSetHash otherwise it will return zero value and false
7623	MustQSet will return the quorum set from stellar message or panic if not set
7624	GetQSet will return a quorum set and boolean indicating success from a stellar message if the message type matches QSet arm
7625	MustEnvelope will return the scp envelope or panic if it's not set
7626	GetEnvelope will return the Stellar message envelope and a boolean indicating success if the message type matches the envelope arm
7627	MustGetScpLedgerSeq will return the SCP ledger sequence value from the stellar message or panic if not present
7628	GetScpLedgerSeq will return the scp ledger sequence number and true if the message type matches, otherwise it returns zero and false
7629	ArmForSwitch will return a version string and true for switch value 0, otherwise returns "-" and false
7630	NewAuthenticatedMessage will create an authenticated message with version and value returning an error if the value type is incorrect
7631	ValidEnum checks if an integer value exists within the scp statement type map and returns a boolean indicating validity
7632	ArmForSwitch will map a statement type to its string representation and return true if valid, otherwise false
7633	NewScpStatementPledges will create a statement pledges object with specified type and value, returning an error if the value type does not match the statement type
7634	MustPrepare will return the prepared statement or panic if not set
7635	GetPrepare will return the prepare statement and true if the arm name equals "Prepare" otherwise it returns zero value and false
7636	MustConfirm will return the confirm value from scp statement pledges or panic if not set
7637	GetConfirm will return the confirmation statement and true if the arm name equals "Confirm" otherwise it returns zero value and false
7638	MustExternalize will return the externalize value from scp statement pledges or panic if not set
7639	GetExternalize will return the externalize statement and true if the switch arm matches, otherwise it returns zero value and false
7640	MustNominate will return the nomination value from scp statement pledges or panic if not set
7641	GetNominate will return a nomination and true if the arm name equals "Nominate" otherwise it returns zero value and false
7642	SafeUnmarshalBase64 will decode base64 data into destination and ensure full consumption of input returning an error if not fully consumed
7643	SafeUnmarshal will safely unmarshal data into a destination interface and return an error if the input is not fully consumed or if unmarshaling fails
7644	SendAmount will return the total bought amount from path payment offers or last amount if no offers exist, returning zero if operation fails
7645	LoadAccount will fetch and return account data by ID or return an error if the request fails
7646	SequenceForAccount will return an account's sequence number and an error if the account cannot be loaded or the sequence cannot be parsed
7647	SubmitTransaction will send a transaction envelope to a client and return the response or an error
7648	Equals will compare two ledger keys and return true if they are equal based on their type and specific fields
7649	SetAccount will assign an account to a ledger key and return an error if the operation fails
7650	SetData will assign account and name to a ledger key and return an error if the operation fails
7651	SetOffer will configure a ledger key with an offer using account ID and offer ID, returning an error if the operation fails
7652	SetTrustline will assign a trustline ledger key to an account and asset returning an error if unsuccessful
7653	CHDBuilder Add method appends key-value pairs to their respective slices in the builder struct
7654	tryHash will validate bucket entries for duplicates, update hash tracking, and populate hash table indices and values returning false if duplicates are found otherwise true
7655	HashIndexFromKey will return a hashed index from a byte slice key using xor operation and modulo with bucket count
7656	ReadInt will return a 32-bit unsigned integer from a byte slice in little-endian format
7657	Read will read all bytes from a reader and map them to a CHD structure, returning an error if the operation fails
7658	Get will return a byte slice value for a given byte slice key using hash table indexing and comparison
7659	Iterate will return an iterator for the CHD structure or nil if there are no keys present
7660	Write will serialize CHD data including records, indices, and key-value pairs to the provided writer, returning an error if serialization fails.
7661	RegisterDatasources will register mapnik datasources from a given path and return an error if registration fails
7662	RegisterFonts will register font files from a path and return an error if registration fails or the path is invalid
7663	New will return a new map with default width and height values of 800 and 600 respectively
7664	NewSized creates a new map with specified width and height dimensions
7665	Load will load a stylesheet into the map and return an error if the loading fails
7666	Resize will adjust the map dimensions and update the stored width and height values
7667	Free will release the map's memory and set the map pointer to nil
7668	SRS method will return the spatial reference system string of a map object through a C library call
7669	ZoomAll will set the map's zoom level to fit all features and return an error if unsuccessful
7670	ZoomTo will set the map's view to the specified bounding box coordinates and free the allocated memory for the bounding box after use
7671	Render map to image with specified scale and format returning raw bytes or blob data
7672	RenderImage will generate and return a scaled image from a map using specified rendering options and handle any errors during the process
7673	RenderToFile will save a map to a file with specified options and return an error if rendering fails
7674	SetBufferSize will configure the buffer size of a map object using the mapnik library interface
7675	Search will initiate a network search for devices matching the query string and return the responses received within the timeout duration
7676	Get will return a connection from the pool or create a new one, returning an error if the pool is closed or timeout occurs
7677	blockingPool put method returns connection to pool or closes it if marked unusable, returns error if pool is closed
7678	MonoToStereoF32 converts mono audio data to stereo by duplicating each sample and updates buffer format to 2 channels, returning nil on success or ErrInvalidBuffer if input is invalid.
7679	BitCrush applies audio bit crushing effect by quantizing samples based on a factor-controlled step size
7680	NormalizeMax will scale audio buffer data to maximum absolute value of 1.0 by dividing each sample by the global maximum amplitude, handling nil buffers gracefully
7681	Gain will apply amplification to audio buffer data using multiplier or return invalid buffer error
7682	MonoDownmix will convert multi-channel audio data to mono by averaging all channels and update buffer format accordingly, returning an error for invalid input buffers
7683	Quantize will adjust audio buffer values to specified bit depth precision by rounding and scaling the samples between -1 and 1
7684	PCMScale will adjust audio buffer values by a scaling factor based on bit depth and return an error if the buffer is invalid
7685	StereoPan will adjust audio buffer panning between left and right channels based on pan value from 0 to 1 returning an error for invalid inputs or no change needed
7686	Leader will return the identifier of the leader node in a follower struct an error will be returned if the leader is not properly set
7687	IsLeader will return a boolean indicating if the candidate is the leader and acquire a lock during the operation
7688	NewResponse will create and return a response struct with clientID, redirectURI, userID, exp, and code fields populated
7689	GetRequestID will return a request ID string and an error if the context is nil, has wrong type, or contains empty value
7690	Log will output a formatted request log entry with color coding and timing information to the specified writer based on filter conditions.
7691	SendMailSSL will send an email via SSL with authentication and return an error if the operation fails
7692	Send will transmit an email message with specified parameters through the mail service and return any error encountered during transmission
7693	WaitForIt will establish a connection and ping TCP and HTTP endpoints with a specified timeout, returning an error if any connection attempt fails
7694	Get will read a config file and return the specified environment configuration or an error if the file cannot be read or the environment is not found
7695	initConfig will initialize configuration by setting file paths environment variables and reading in config file if found printing the used file path
7696	WritePluginResultsToDatabase will insert or update plugin results in RethinkDB based on whether the sample ID exists, logging the response or any errors during the operation
7697	NewAuthController will return a new authentication controller with the specified user manager and web configuration
7698	Authenticate will validate user credentials and return a JWT token if successful, otherwise it will return an error response
7699	NewOAuth2Controller will return a new OAuth2 controller instance with the provided application manager and configuration
7700	Refresh will validate a refresh token and return a new access token with expiration time
7701	Token will validate OAuth2 authorization code and return JWT access and refresh tokens or error if validation fails
7702	Logging middleware will record request details including client address, latency, response length, and status code using the provided logger
7703	SingleFile returns an HTTP handler that serves a single file to clients
7704	Write will return the length of data written and an error if writing fails
7705	Hijack will attempt to hijack the underlying connection and return the connection object, readwriter and an error if the response writer is not a hijacker
7706	NewMongo will create a new MongoDB connection using configuration file and environment returning a Mongo struct or an error if connection fails
7707	Disconnect will close the mongo database connection and return an error if it fails to close the connection
7708	New creates a new Table with specified fields and initializes empty rows and field sizes map
7709	PrintTable will create and display a formatted table using specified fields and row data
7710	PrintHorizontal will display a key-value table with hidden header from a map interface input
7711	PrintRow will create a table with given fields and print a row of data from a map interface
7712	AddRow will add a new row to the table by converting interface values to strings and calculating column sizes
7713	Print will display a table with rows and optional header footer using calculated sizes and markdown formatting
7714	Table String method generates a formatted table string with optional header, rows, footer, and markdown support
7715	getHead will return a table header string with formatted field names separated by pipes
7716	rowString will return a table row string with field values separated by pipes
7717	fieldString will return a formatted string with padding spaces based on the table field size and input value
7718	stringTableDash will return a dashed string representation based on whether markdown formatting is enabled
7719	printMarkdownDash will create a markdown table header separator row using dash characters based on field sizes and print it
7720	stringMarkdownDash creates a markdown table row of dashes for each field in the table based on field sizes
7721	HashPassword will return a hashed password and an error if the hashing process fails
7722	EncodeOAuth2Code will generate an OAuth2 code using client details, user info, and a shared key, returning the encoded code or an error if encoding fails
7723	DecodeOAuth2Code will verify and decode an OAuth2 code using a shared key returning the unmarshaled response or an error if the process fails
7724	NewServer will create and configure a new server instance with specified filename and environment returning the server object and any error that occurs during setup
7725	Start will begin a server on a specified port and handle TLS or regular HTTP serving with error checking and graceful shutdown capabilities
7726	Stop will stop the server and send a quit signal or return an error if not running
7727	NewLoggingServeMux will return a new logging server multiplexer with the specified configuration
7728	LoggingServeMux handler returns the matched handler and pattern for an incoming request
7729	Handle will register a pattern and handler with logging functionality, creating or appending to a log file for each request processed
7730	HandleFunc will register a pattern and handler function to the logging serve mux
7731	Init will initialize the database connection test the connection create a simple client and ensure the index exists or create it an error will be returned if any step fails
7732	WaitForConnection will attempt to connect to elasticsearch up to a timeout duration, returning an error if connection fails within the specified time limit
7733	StoreFileInfo will index file information into Elasticsearch and return the indexing response or an error if the operation fails
7734	StorePluginResults will save plugin results to elasticsearch creating or updating a document based on the sample id
7735	CamelCase will convert a string into camel case format by splitting on regex boundaries and capitalizing words except the first one
7736	Getopt will return an environment variable value or default string if not found
7737	Getopts will return user input if available otherwise will return environment variable or default value
7738	GetSHA256 will return the SHA256 hash of a file's contents as a hexadecimal string an error will be returned if the file cannot be read
7739	RunCommand will execute a system command and return its output or an error if it fails or times out
7740	RemoveDuplicates will return a slice with duplicate strings removed while maintaining the original order of unique elements
7741	Unzip will extract all files from an archive to a target directory, creating directories and writing files with their original permissions
7742	SliceContainsString will check if any string in a list contains a target string and return a boolean value indicating the result
7743	NewSMTP will return a new SMTP struct with authentication and send function based on configuration file and environment, returning an error if configuration fails
7744	SendMail will transmit an email message through SMTP with specified sender, recipients, and content returning any error that occurs during transmission
7745	GetEnvironment will return the configuration interface for a given environment string or nil if not found
7746	GetSMTP will return smtp configuration and error based on source and environment input
7747	GetConfig will return a server configuration and an error based on the source and environment provided
7748	GetEnvironment will return the configuration for a given environment or nil if not found
7749	GetMongo will return a mongo configuration and an error based on the source and environment provided
7750	TokenHandler will validate JWT tokens for requests and allow access to protected routes, returning unauthorized status for invalid tokens or unauthenticated requests to non-root paths.
7751	Receive will process incoming XMPP stanzas and return parsed messages or errors based on message type and handling logic
7752	Send will transmit a message through connection returning bytes sent and any error during transmission
7753	allBoshReleaseNames will return a list of all unique BOSH release names from two releases by combining their release name maps and converting to a slice
7754	AddedProperty will add a property to the delta job's added properties map using the property name as the key
7755	RemovedProperty will store a removed job property in the delta job's removed properties map using the property name as the key
7756	AddDeltaJob will append a delta job to the result's delta job slice
7757	Concat will merge another Result's DeltaJob into the current Result's DeltaJob list
7758	Read will return a file reader and error for a given release location by pulling and opening the local file
7759	Pull will download or locate a release file returning the filename and any error that occurs during the process
7760	BuildJob will create job files and write monit and spec file contents to destination directory returning an error if any operation fails
7761	LoadBoshRelease will read a bosh release from a release repository and return the release data and any error that occurs during reading or parsing
7762	readBoshRelease will return a BoshRelease struct and an error if the release data is not properly formatted
7763	readBoshRelease will parse a BOSH release tarball and populate release and job manifests from the archive contents
7764	readBoshJob will extract and decode a job manifest from a tarball reader returning an error if the operation fails
7765	NewRequest will create a new HTTP request with authentication headers set and return an error if the request cannot be created
7766	PushCloudConfig will send a cloud configuration manifest to BOSH and return an error if the push fails or the response status is 400 or higher
7767	Generate will create structs from preprocessed YAML data and write them to disk based on package name and output directory.
7768	CreateNewRecord will return a record with split property elements and original property an error will be returned if the property is not properly formatted
7769	NewShowCmd will return a new show command struct with the specified release repository and release name
7770	All will print all bosh releases from either a pivotal file or regular release file and return an error if the release cannot be loaded
7771	GetDefaultTaskImageResource will return the default image resource configuration containing type and repository source for tasks in the concourse pipeline
7772	AddRawJob will append a job to the concourse pipeline's jobs slice
7773	AddGroup will add a new group configuration with specified name and jobs to the concourse pipeline groups slice
7774	GetResourceByName will return a resource config by its name or nil if not found
7775	AddRawResource will append a resource config to the pipeline's resources slice
7776	AddResource will append a resource config to the pipeline's resources slice using the provided name, type, and source parameters
7777	AddGithubResource will add a github resource to the concourse pipeline with the specified name and source configuration
7778	AddBoshIOResource will add a BOSH I/O resource to the pipeline with specified name and source configuration
7779	AddBoshDeploymentResource will add a bosh deployment resource to the concourse pipeline with specified name and source configuration
7780	AddGitResource will add a git resource to the concourse pipeline with specified name and source configuration
7781	allJobNames will return a list of all unique job names from two BOSH releases by mapping job manifest names and collecting them into a slice
7782	NewDeploymentManifestFromFile will create a deployment manifest from a file by reading its contents and parsing into a manifest structure
7783	NewDeploymentManifest will create and return a new deployment manifest from byte data using yaml unmarshaling
7784	AddRemoteRelease will add a remote release to the deployment manifest and return an error if the operation fails
7785	AddRemoteStemcell will add a stemcell to the deployment manifest with specified OS, alias, version, URL, and SHA1 hash
7786	Tag will return a tag value from the deployment manifest or an empty string if the tag does not exist
7787	RemoveTag will delete a tag key-value pair from the deployment manifest tags dictionary if it exists
7788	LoadPivnetRelease will download and parse a pivnet release returning the parsed release and any error that occurs during the process
7789	BoshReleaseOrEmpty returns a bosh release by name or an empty bosh release if not found
7790	readPivnetRelease will iterate through zip files and extract bosh release information into a map keyed by release name
7791	decodeYaml will read all bytes from a reader and unmarshal them into a target value, returning any error that occurs during the process
7792	NewZipWalker creates a zip file walker with path and callback functions mapped by regex patterns
7793	NewDiffCmd creates and returns a new DiffCmd struct with specified release repository and two release versions
7794	All will return a diff result between two releases and print the result to writer an error will be returned if the diff fails
7795	Job will return a diff result for a specific job and print the result to the writer an error will be returned if the diff operation fails
7796	New will return a differ and error based on release type matching file extensions and loading releases
7797	StructName will return a formatted struct name based on the current node and its parents an empty string will be returned if the node is invalid
7798	TypeName will return a formatted type name with pointer prefix or interface{} based on record index and parent elements
7799	NewTgzWalker creates a tar.gz file walker with reader and callback functions
7800	NewBackoff creates and resets a backoff instance with specified strategy, start duration, and limit duration
7801	Reset will reset the backoff count and durations, setting count to zero and calculating a new next duration
7802	NewExponential creates a backoff strategy using exponential growth with specified start and limit durations
7803	NewExponentialFullJitter creates a backoff with exponential full jitter strategy and specified limits
7804	NewLinear creates a new backoff policy with linear progression starting and limiting durations
7805	GetLineSize will return the calculated line size based on floor and line parameters using a specific mathematical formula
7806	GetMaxSize will return the maximum size of Sapin by getting the line size at the specified indices
7807	compute will generate a Christmas tree pattern with specified size and output dimensions using asterisks and vertical bars
7808	WithTimeout sets a timeout duration and returns the updated parameters object
7809	WithContext sets a context on a PostAppsParams object and returns the same object
7810	WithHTTPClient sets the HTTP client and returns the modified parameters object
7811	WithBody sets the app wrapper body and returns the updated params object
7812	WithTimeout sets a timeout duration and returns the modified parameters object
7813	WithContext will set the context field of GetAppsAppParams and return the same object instance
7814	WithHTTPClient sets the HTTP client and returns the modified parameters object
7815	WithApp will set the app parameter and return the modified GetAppsAppParams object
7816	UnmarshalBinary will deserialize binary data into a RouteWrapper struct returning an error if the process fails
7817	WithTimeout sets a timeout duration and returns the updated parameters object
7818	WithContext will set the context field of GetAppsParams and return the same instance for chaining calls
7819	WithHTTPClient sets the HTTP client on GetAppsParams and returns the instance for chaining
7820	WithTimeout sets a timeout duration and returns the modified parameters object
7821	WithContext will set the context field of DeleteAppsAppParams and return the same instance for chaining calls
7822	WithHTTPClient sets the HTTP client and returns the updated params object
7823	WithApp sets the application name and returns the updated parameters object
7824	WithTimeout sets a timeout duration and returns the modified parameters object
7825	WithContext will set the context of the patch app route parameters and return the same object
7826	WithHTTPClient sets the HTTP client and returns the updated parameters object
7827	WithApp sets the app parameter and returns the updated route parameters object
7828	WithBody sets the route body and returns the updated parameters object
7829	WithRoute sets the route parameter and returns the updated struct instance
7830	WithTimeout sets a timeout duration and returns the modified parameters object
7831	WithContext will set the context and return the modified parameters object
7832	WithHTTPClient sets the HTTP client and returns the updated parameters object
7833	WithApp will set the app parameter and return the updated PostAppsAppRoutesParams object
7834	WithBody sets the route wrapper body and returns the updated parameters object
7835	WithTimeout will set the timeout duration and return the updated parameters object
7836	WithContext will set the context and return the modified parameters object
7837	WithApp will set the app parameter and return the updated route parameters object
7838	WithBody sets the route body parameter and returns the updated parameters object
7839	WithRoute will set the route parameter and return the updated struct instance
7840	WithTimeout sets a timeout duration and returns the modified parameters object
7841	WithContext will set the context field of GetAppsAppRoutesParams and return the same object instance
7842	WithHTTPClient sets the HTTP client on the params object and returns the same object for chaining calls
7843	WithApp will set the app parameter and return the updated struct
7844	WithTimeout will set the timeout duration and return the updated patch application parameters object
7845	WithContext will set the context field of PatchAppsAppParams and return the same object for chaining operations
7846	WithHTTPClient sets the HTTP client and returns the patch parameters object
7847	WithApp sets the app parameter and returns the updated patch application parameters object
7848	WithBody sets the body parameter and returns the updated patch application parameters object
7849	WithTimeout sets a timeout duration and returns the updated parameters object
7850	WithContext will set the context field of PutAppsAppParams and return the same object for chaining calls
7851	WithApp will set the app field and return the updated parameters object
7852	WithBody sets the app wrapper body and returns the parameters object for chaining calls
7853	UnmarshalJSON will parse raw JSON data into a Task object with NewTask and TaskAllOf1 fields
7854	MarshalJSON will serialize a Task into JSON bytes by combining its fields using swag's write and concat functions, returning an error if serialization fails
7855	Validate will check if the task and its components are valid and return any validation errors found
7856	GetRanges will return IP network ranges from a list of IPs using specified IPv4 and IPv6 CIDR notations, returning an error if any CIDR is invalid or parsing fails
7857	WithTimeout will set a timeout duration and return the updated route parameters object
7858	WithContext will set the context and return the route parameters object
7859	WithHTTPClient sets the HTTP client on the route parameters and returns the updated parameters object
7860	WithApp will set the app parameter and return the updated route parameters object
7861	WithRoute will set the route parameter and return the updated struct instance
7862	New will return a Functions client with initialized components using the provided transport and formats
7863	SetTransport will assign the client transport to the functions and its associated components
7864	WithTimeout sets a timeout duration and returns the modified params object
7865	WithContext will set the context and return the route parameters object
7866	WithHTTPClient sets the HTTP client on the route parameters and returns the updated parameters object
7867	WithApp will set the app parameter and return the updated route parameters object
7868	WithRoute will set the route parameter and return the updated struct instance
7869	WithTimeout sets a timeout duration and returns the updated parameters object
7870	WithContext will set the context field of GetTasksParams and return the same instance for chaining calls
7871	WithHTTPClient sets the HTTP client on GetTasksParams and returns the instance for chaining
7872	NewValueStore creates a concurrent value store with separate channels and goroutines for lookup, read, write, and delete operations using gRPC connections and TLS configuration.
7873	Close will lock the value store shutdown and close the handlers done channel
7874	SetBackend will assign a new backend service to the server instance in a thread-safe manner using mutex locking
7875	Ring will return the server's ring buffer in a thread-safe manner using read lock
7876	GetLocalID will return the server's local identifier in a thread-safe manner using read locking
7877	GetListenAddr will return the local node's address from the server's ring structure in a thread-safe manner using read lock
7878	Startup will initialize and start the ring server connector if it hasn't been started yet, using a lock to ensure thread safety
7879	shutdownFinished will pause execution briefly then signal shutdown completion by closing a channel
7880	Stop will halt the server service and return an error if already stopped
7881	Exit will stop the server backend and close the channel, marking the server as stopped and signaling shutdown completion
7882	SelfUpgrade will attempt to upgrade the server binary to a new version and return a success status along with any error message
7883	SoftwareVersion will return the current binary version of the server
```
7884	groupStore shutdown will lock, execute shutdown logic, unlock, and return any error encountered during the process
7885	Rant method retrieves a rant and its comments from an API endpoint and returns them along with any error that occurs during the process
7886	Profile will return user and content data an error will be returned if the profile request fails or the user is not found
7887	Search will return rants from a search term and handle errors from the api response
7888	Surprise will fetch a random rant model from the api and return an error if the request fails or the response is unsuccessful
7889	WeeklyRants will fetch and return weekly rants from an API endpoint, returning an error if the request fails or the response indicates failure
7890	getUserId will return a user id and an error based on username through API call and JSON response parsing
7891	Shutdown will close the ring server exit channel and shut down all stores in the repl value store, returning any errors encountered during shutdown.
7892	FExists will check if a file exists and return a boolean value indicating the result
7893	outbound will forward messages to connection and handle errors during transmission
7894	parse will continuously receive messages from pool, parse them, log errors, send to inbound channel, reset buffer, and return to pool
7895	Group will create and return a new group with specified name and members within the domain
7896	Groups will return a slice of group pointers and an error by requesting groups from domain and retrieving each group object
7897	GetGroup will return a domain group and its members or an error if the group cannot be retrieved or decoded
7898	Reticence will truncate a string at the last whitespace or punctuation before the specified length and append an ellipsis if needed
7899	CheckPassword will validate a password length and character validity returning an error if length is outside bounds or invalid characters are present
7900	CleanUrl will validate and parse a URL returning the cleaned URL or an error if validation fails or URL is invalid
7901	NewParameter will return a new parameter struct with the specified name and value
7902	MakeParams will return parameters with initialized maps and slices based on field count
7903	Parse will iterate through struct fields and set up parameters with aliases and listing an error will be returned if discovery or setting fails
7904	Email will return a formatted email string using the forwarder's name and domain name
7905	Forwarder will return a new forwarder with the specified name and destination address
7906	Forwarders method returns domain forwarders list and handles errors during retrieval and processing
7907	GetForwarder will return a forwarder object and error based on domain and name parameters
7908	New will return a new CGP struct with the provided url, user, and pass values
7909	EscapeCommaSeparated will process multiple strings by URL escaping special characters, replacing forward slashes with percent-encoded values, handling quotes and spaces, then concatenate them with commas separating each processed string.
7910	Alias will return an alias struct with the specified name and account reference
7911	Email will return a formatted string containing the alias name and account domain name separated by an @ symbol
7912	Aliases method returns a list of alias objects for an account by making a request and processing the response values
7913	RealName will return the real name from account settings or an error if the request fails
7914	Email will return a formatted email address combining the account name and domain name
7915	Account will return an account struct with the specified name and domain reference
7916	Accounts will return a list of account pointers and an error if the request fails or no accounts exist
7917	Exists will check if a domain exists and return a boolean and error
7918	Aliases will return a domain's aliases and any error that occurs during the request process
7919	Domain will return a domain pointer with the specified name and cgp reference
7920	Domains method returns a list of domain objects and error by requesting domain data and mapping values to domains
7921	New will create and return a new error with stack trace information and a public message
7922	Wrap will wrap an error with additional info and a public message returning a new error or merging into existing error structure
7923	mergeIn will combine error information and public messages while handling duplicate keys by appending "_duplicate" suffix to prevent overwriting existing entries in the error's info map.
7924	wrappedErrStr will return the string representation of a wrapped error or an empty string if the error is nil
7925	concatArgs will join all arguments into a single string separated by spaces and remove the trailing newline character
7926	MailingList will return a new mailing list with the specified name and domain reference
7927	Subscriber will return a new subscriber with the specified email and name attached to the mailing list
7928	Subscribers will return a list of subscribers and an error if the request fails or if there are issues processing the subscriber data
7929	MailingLists will return a list of mailing lists for a domain and any error that occurs during the request
7930	NewByteKeyItem will return a pointer to a byte key item created from the input byte slice
7931	CompareBytes will compare two byte key items and return an integer representing their lexicographical order
7932	CompareInt will return the difference between two integer keys from unsafe pointers
7933	Malloc will allocate memory of specified length and track allocations when debugging is enabled
7934	Free will release memory and increment free statistics if debugging is enabled
7935	Stats will return memory allocation statistics including mallocs and frees when debug mode is enabled and the memory status information from C library
7936	FreeOSMemory will release unused memory back to the operating system and return an error if the operation fails
7937	Add will insert a new node into the segment at a randomly determined level and update all relevant statistics and pointers
7938	NewSegment will return a new segment with initialized head and tail nodes and a local status flag set to true
7939	Assemble will merge multiple segments into a skiplist by connecting nodes and updating statistics
7940	CompareNodeTable will return the difference between two node table pointers as an integer value
7941	New creates a node table with hash and key comparison functions and initializes its hash tables
7942	Stats will return formatted string containing NodeTable statistics including fast hash table count, slow hash table count, conflicts, and memory in use
7943	MemoryInUse will return the total memory usage of the NodeTable based on item count and approximate size per item
7944	Get will return a node pointer from table using key or nil if not found
7945	Update will modify a node table entry returning whether updated and old pointer, inserting new key if not found
7946	Remove will delete a key from NodeTable and return success status along with a pointer to the removed node, handling both fastHT and slowHT entries appropriately.
7947	Close will reset node table hash tables and delete the node table from database instances
7948	MemoryInUse will return the total memory usage of all NodeTable instances in the database iterator
7949	debugMarkFree will overwrite a node's memory with free block content using unsafe pointer manipulation and reflection headers
7950	Seek will advance the iterator to the given byte slice and skip unwanted items
7951	Next will advance the iterator count and refresh based on the refresh rate limit
7952	Refresh will update the iterator to point to the current item in the snapshot and seek to that position in the store
7953	Close will close the iterator and free its buffer and snapshot resources
7954	NewIterator will create and return a new iterator for a snapshot, returning nil if the snapshot is closed, and it uses the store's iterator with a buffered approach
7955	MergeIterator will initialize its internal heap by seeking first on all iterators and pushing valid nodes into the heap then advance to the first element
7956	MergeIterator Next will advance the current node to the next valid node from the heap or return if heap is empty
7957	MergeIterator will seek to the given item and return whether it was found, maintaining heap order of valid items from multiple iterators
7958	NodeList keys method returns all item keys from the linked list as byte slices
7959	Remove will delete a node with matching key from the skiplist and return the deleted node or nil if not found
7960	Add will insert a node at the beginning of the nodeList by updating the head pointer
7961	NewWithConfig creates a skiplist with specified configuration and initializes its head and tail nodes
7962	FreeNode will release a node back to free list and increment the node frees statistics counter
7963	MakeBuf will return a new action buffer with pred and succ node arrays initialized to max level size
7964	Size will return the total size of a node including its item and nested elements
7965	NewLevel will return a new skiplist level based on random probability and atomic operations to ensure thread safety
7966	Insert will add an item to the skiplist and return a success status indicating if the operation was successful
7967	Insert2 will create a new node with given item and insert it into skiplist returning the node and boolean indicating success
7968	Insert3 will add a node to the skiplist returning the node and true on success, false if duplicate, with conflict resolution through retries and DCAS operations
7969	Delete will remove an item from skiplist and return true if found otherwise false
7970	DeleteNode will remove a node from skiplist and return true if successful otherwise false
7971	GetRangeSplitItems will return a slice of item pointers split into nways ranges from the skiplist structure
7972	Bytes method returns the item's data slice by casting the item's data pointer to a slice header with appropriate length and capacity
7973	ItemSize will return the total memory size of an item including its header and data length
7974	KVFromBytes will extract key and value from byte slice using little-endian encoded key length
7975	CompareKV will compare two byte slices by their length-prefixed contents and return the comparison result
7976	Emit will fire events to all handlers concurrently and return the count of handlers triggered
7977	UnregisterHandler will remove a handler from the event controller and return an error if the operation fails
7978	IsHandlerRegistered checks if a handler is registered for a given event name and returns a boolean indicating registration status
7979	CompareNitro will return the difference between two Nitro ids from memory pointers
7980	DefaultConfig returns a new configuration with default settings including key comparator, file type, memory management disabled, and default refresh rate
7981	Delete will attempt to remove a byte slice from the writer and return whether the operation was successful
7982	GetNode will return a skiplist node if found in store otherwise nil
7983	SetKeyComparator will update the configuration's key comparison functions with a new comparator and its associated insert, iterate, and existence comparison functions.
7984	UseMemoryMgmt will enable memory management functionality on amd64 architecture with specified allocation and deallocation functions
7985	NewWithConfig creates a new Nitro instance with specified configuration and initializes its internal data structures and components
7986	MemoryInUse will return the total memory usage by adding aggregate store stats, snapshots, and gc snapshots memory consumption
7987	Close will wait for snapshot iterators, shutdown garbage collection, and free all nodes if memory management is enabled
7988	NewWriter creates a new writer with collection and memory management workers and adds it to the nitro instance's writer list
7989	SnapshotSize will return the total memory size of a snapshot's fields including sn, refCount, db, count, and gclist
7990	Encode will write a snapshot sequence number to buffer and writer returning an error if not enough space or write fails
7991	Decode will read a snapshot number from reader into buffer and return an error if reading fails
7992	Open will increment the reference count and return true if the snapshot can be opened, otherwise it will return false
7993	CompareSnapshot will return the difference between two snapshot serial numbers an unsafe pointer to each snapshot is required for comparison
7994	GC will run garbage collection only if not already running, collecting dead objects and updating the running status atomically
7995	GetSnapshots will return a slice of snapshot pointers by iterating through stored snapshots using a buffered iterator
7996	MemoryInUse will calculate and return the total memory usage of all Nitro database instances by iterating through them and summing their individual memory consumption.
7997	CompareBS will return the difference between two BarrierSession sequence numbers
7998	Acquire will return a barrier session if access is active otherwise it will return nil
7999	Release will decrement the live count and handle cleanup when a barrier session closes, ensuring proper resource management and destructor execution.
8000	FlushSession will reset the active session and update sequence numbers when the access barrier is active, ensuring thread-safe session management with atomic operations and reference updates.
8001	Apply updates statistics report with new stats including conflicts, node distribution, and memory usage totals
8002	AddInt64 will increment a 64-bit integer value atomically or locally based on stats configuration
8003	AddUint64 will increment a source uint64 value by a given amount using either local or atomic operation based on stats configuration
8004	Merge will combine statistics from another Stats instance into the current one, resetting the source values to zero after atomic addition.
8005	GetStats will return the skiplist's statistics report by applying the internal stats to a new report instance
8006	NewIterator creates and returns a new iterator for a skiplist with comparison function and action buffer
8007	SeekFirst will set the iterator to the first element in the sequence and mark it as valid
8008	SeekWithCmp will search for an item using comparison functions and return whether it was found, updating iterator positions accordingly
8009	Seek will attempt to find an item in the iterator's structure and update the iterator's position, returning true if the item is found.
8010	Valid will return the iterator's validity status and update it if current equals tail
8011	Delete will remove the current item from the iterator and advance to the next valid item marking the deletion state
8012	Next will advance the iterator to the next valid item or retry if deletion occurs
8013	Init will register a new SKU builder with its client in the repository
8014	FromURL will return a string with all specified replacements made in the input URL string
8015	ToURL will convert a folder path to a URL by replacing characters according to replacement rules
8016	TupleHeader Size method returns total size based on field count and field size
8017	WriteTo encodes tuple header data into a byte slice and writes it to writer, returning written bytes count and any error during write operation
8018	Static will serve static files from a directory with optional prefix and index file handling, returning a handler function that manages HTTP requests for static content
8019	Read will parse configuration file lines into sections and keys, returning an error if line format is invalid
8020	Del will remove a key from a section in config and delete the section if empty
8021	WriteTo will write configuration data to a file with section headers and key-value pairs, returning an error if the operation fails
8022	checkSection will extract and return the content between square brackets and a boolean indicating if the line is a valid section header
8023	checkLine will split a string by equals sign and return key value pair with whitespace trimmed, false if improperly formatted
8024	checkComment will return true if a line starts with a comment prefix after trimming whitespace, otherwise it returns false
8025	NewResponseWrapper creates and returns a new response wrapper containing a response recorder and original writer
8026	Hijack will attempt to hijack the response writer and return the connection and reader-writer or an error if not possible
8027	CloseNotify will return a channel indicating when the response writer closes, or create a new channel if the writer does not support close notification
8028	DateFormat returns an option to set the date format in options
8029	Logger middleware will record HTTP requests with timing and status details to standard output
8030	GetAvailableInventory will return the available inventory and start task polling for registered SKUs once
8031	Expiration sets a token's expiration duration and returns a token option
8032	Claimer will return a token option that sets the claimer function for standard claims
8033	Issuer will set the token's issuer field to the provided string value
8034	User will set the username field in the options struct and return a TokenOpt struct containing the user value
8035	Password returns a token option that sets the password field in options struct
8036	Extractor returns a token option that sets the extractor function for parsing requests
8037	TokenGenerator creates an HTTP handler that authenticates users and generates JWT tokens for authorized requests
8038	Token will return the authentication token from the request context or an empty string if not found
8039	Claims function will return JWT claims from request context or nil if not found
8040	Token String method returns formatted string representation of token value with ellipsis for long values
8041	NewLexer will return a new lexer instance with the specified name, input string, and handler interface
8042	run will execute the lexer states until the end of text is reached
8043	emit will return a token with its type and value and call the handler function with the token as an argument
8044	skipWhitespace will advance the lexer through whitespace characters and ignore them
8045	next will return the next rune from the lexer's input and advance its position, returning eof when reaching the end of input
8046	LineNum will return the current line number in the input string based on the lexer's position
8047	Offset will return the current column position of the lexer an error will be returned if the input is not properly formatted
8048	errorf will return an error token and handler function that formats error messages with line numbers and offsets
8049	lexText will process text tokens and return appropriate state functions for different declarations and scopes
8050	lexComment will skip and emit a comment token until the next newline character is encountered
8051	New will return a tuple type with hashed namespace and name values initialized with empty fields and field map
8052	AddVersion will add a new version of fields to the tuple type and update the field mapping accordingly
8053	Contains will return a boolean indicating if the field exists within the tuple type
8054	Offset will return the field offset and existence status from the tuple type fields map
8055	TupleType versions method returns a slice of version structs with incremented indices and corresponding version values from the tuple's versions field
8056	SetPrivateMeta will store metadata in a task's private map with the given name and value, creating the map if it doesn't exist
8057	SetPublicMeta will store metadata with a given name and value in the task's metadata map, creating the map if it doesn't exist
8058	GetRedactedVersion will return a copy of task data with read-only locking and no sensitive information
8059	Task Equal method compares all fields of two tasks and returns true if they are identical
8060	HTTP will filter requests by specified verbs and delegate to handler or return bad request error
8061	PutUint8 will write an unsigned 8-bit integer field to the buffer and return the bytes written or an error if type checking or space availability fails
8062	PutInt8 will write an int8 value to a tuple builder and return bytes written or an error if type checking fails
8063	PutUint16 will write a 16-bit unsigned integer to the tuple builder returning bytes written or an error if type checking or writing fails
8064	PutInt16 will write an int16 value to the tuple builder returning bytes written or an error if type check fails or out of range
8065	PutUint32 will write a uint32 value to buffer with type code and return bytes written or error if type check fails
8066	PutInt32 will store a 32-bit integer field in a tuple builder with optimal byte encoding and return bytes written or an error if type checking fails or buffer is insufficient
8067	PutUint64 will store a uint64 value in the tuple builder with appropriate type code and return bytes written or an error if type checking fails or buffer is insufficient
8068	PutInt64 will write an integer value to buffer using minimal bytes based on value range returning bytes written or error
8069	NewPackageList will return a new package list with synchronized access through a mutex lock
8070	PutFloat32 will write a float32 value to the tuple builder and return the bytes written or an error if the field type is incorrect
8071	Classic will return a configured martini instance with logger recovery static file serving and template rendering capabilities
8072	Languages will set the supported languages option for the parser
8073	Session returns an option that sets the session field of options struct
8074	Data will return context value from request or empty context value if not present
8075	URL will construct a full URL path using prefix, current context, and relative URL, ensuring proper formatting with slashes
8076	Size will return terminal width and height an error will be returned if termsize is not initialized
8077	GetRequestIDFromTaskResponse will extract request ID from task response metadata an error will be returned if marshalling or unmarshalling fails or if no request ID is found
8078	PutString will write a string value with type code and length to buffer returning bytes written or error if out of range
8079	LoadDirectory will recursively read a directory and its subdirectories, parsing entity files with a given parser and returning any encountered errors.
8080	LoadFile will read a file and parse its contents using a parser returning a package and any errors that occur during the process
8081	LoadPackage will return a parsed package and error if parsing fails
8082	NewDecoder will return a decoder with a registry reader and default max size
8083	NewDecoderSize will return a new decoder with specified registry maximum size and reader
8084	Panic middleware recovers from panics, logs errors with timestamps and stacks, and returns internal server error status to the client
8085	DeployVApp will return a fake VApp and an error regardless of input parameters
8086	UnDeployVApp will return a fake task and error from the fake vapp client
8087	Auth will return an error from the fake VCD client based on the stored error value
8088	QueryTemplate will return a fake vApp template record and an error if deployment fails
8089	NewEncoder will return a new encoder with a writer buffer and byte slice for encoding data
8090	Getter function returns an option that sets the nonce getter in options struct
8091	Setter returns an option that sets the nonce setter function for the options struct
8092	Age returns an option that sets the age duration in options
8093	Nonce returns an HTTP handler that manages nonce values for request validation and generation using a background cleanup process.
8094	NonceValueFromRequest will return a nonce status from request context or default nonce not requested status
8095	StoreNonce will store a nonce value in the request context and return an error if the operation fails
8096	PutFloat32Array will store a float32 slice in buffer with type code and length prefix returning bytes written or error if out of range
8097	PutFloat64Array will write a float64 array to buffer with type checking and proper sizing based on array length returning bytes written or error
8098	ClientDoer's Do method records the request and returns the stored response and error
8099	NewLease creates and returns a new Lease instance with initialized task manager and available SKUs
8100	Delete will attempt to restock inventory from HTTP request and return status code and response or error message
8101	Post will attempt to obtain a lease from the task collection and return the status code and response or an error message
8102	ReStock will restock an available sku task or set the task status to unavailable if the sku is not available
8103	Procurement will return a task from available skus or set task status to unavailable if no match is found
8104	InitFromHTTPRequest will initialize a Lease from an HTTP request body, parsing JSON data and handling errors during unmarshaling or empty body conditions
8105	Is will return a boolean indicating if the tuple matches the given tuple type by comparing their hashes and namespace hashes
8106	Offset will return the byte offset of a field in a tuple header or an error if the field does not exist or has an invalid index
8107	WriteTo will write tuple header and data to writer returning bytes written and any error during write operation
8108	PutTuple will store a tuple field in buffer with size-coded header returning bytes written or error if type check fails or out of range
8109	WriteString will write a string content to the response writer context
8110	NotFound will write a 404 status code and message to the response writer
8111	Run will start an agent task with provided process and handle its completion status
8112	NewWaitGroup creates a wait group with specified throttle limit and completion channel
8113	WaitGroup Add method increments outstanding counter and blocks if exceeding throttle limit until completion signal received
8114	Wait will block until all outstanding operations are completed and decrease the counter accordingly
8115	Gzip will compress response body with gzip encoding if client accepts it and return a wrapped response writer with updated headers
8116	New will return a new innkeeper client with the specified uri user and password
8117	Error will write a status code and optional message to the response writer
8118	Renderer will create a handler that renders templates with given options and charset returning a render context
8119	NewClient will return a new pager duty client with the specified api key url and http client
8120	GetTask will retrieve a task by ID and return the task response, http response, and error if the request fails or status is not ok
8121	WriteImageToHTTP will encode an image to PNG format and write it to HTTP response with proper headers
