0	Convert XML data to a list of URLs.
1	Downloads Dailymotion videos by URL.
2	Downloads Sina videos by URL
3	Formats text with specified ANSI escape codes into a string, or returns the original text if ANSI terminal is not supported or no colors are provided.
4	Print a log message to standard error.
5	Print an error log message and exit with a specified exit code if provided.
6	Exit the program with a failure message and an optional exit code.
7	Detect operating system.
8	Download videos from a Vimeo channel by URL.
9	Parse XML data to extract video information for CKPlayer API.
10	Splicing URLs according to video ID to get video details
11	Extract real URLs from a given MGTV URL.
12	Converts a string to a valid filename.
13	Downloads CBS videos by URL.
14	Override the original one. If 'json_output' in kwargs and kwargs['json_output']: json_output.output(self) If 'info_only' in kwargs and kwargs['info_only']: If 'stream_id' in kwargs and kwargs['stream_id']: Display the stream Else: Display all available streams Else: If 'stream_id' in kwargs and kwargs['stream_id']: Download the stream Else: Download stream with the best quality If 'index' not in kwargs: self.p(stream_id) Else: self.p_i(stream_id) If stream_id in self.streams: urls = self.streams[stream_id]['src'] ext = self.streams[stream_id]['container'] total_size = self.streams[stream_id]['size'] Else: urls = self.dash_streams[stream_id]['src'] ext = self.dash_streams[stream_id]['container'] total_size = self.dash_streams[stream_id]['size'] If not urls: log.wtf('[Failed] Cannot extract video source.') download_url_ffmpeg(urls[0], self.title, 'mp4', output_dir=kwargs['output_dir'], merge=kwargs['merge'], stream=False) If not kwargs['caption']: print('Skipping captions.') Return for lang in self.caption_tracks: filename = '%s.%s.srt' % (get_filename(self.title), lang) print('Saving %s ... ' % filename, end="", flush=True) srt = self.caption_tracks[lang] with open(os.path.join(kwargs['output_dir'], filename), 'w', encoding='utf-8') as x: x.write(srt) print('Done.')
15	Downloads Acfun video by vid using different extractors based on the source type.
16	Scans through a string for substrings matched some patterns. Returns a list of matched substrings, or an empty list if no matches are found.
17	Parse the query string of a URL and return the value of a parameter.
18	Gets the content of a URL via sending a HTTP GET request and returns the content as a string.
19	Post content of a URL via sending a HTTP POST request.
20	Parses host name and port number from a string.
21	Retrieve room ID from the showroom URL key
22	Get a proper title with courseid+topicID+partID.
23	Download a WHOLE course by iterating through topics and parts, reusing API calls for efficiency.
24	Download ONE PART of the course using video ID and title obtained from JSON API content.
25	Checks if a task is either queued or running in this executor.
26	Clear and return events from the buffer for specified or all DAGs.
27	Returns a snowflake.connection object
28	Returns AWS credentials from a Snowflake connection.
29	Fetches a field from extras, and returns it. This is some Airflow magic.
30	Executes SQL using psycopg2 copy_expert method, handling the creation of empty files if the specified input file does not exist.
31	Dumps a database table into a tab-delimited file.
32	Uploads the file to Google cloud storage
33	Get the max partition for a table.
34	Returns a mysql connection object
35	Returns the state of a TaskInstance at the command line.
36	Monitor the child processes of a Gunicorn master process and restart workers occasionally to maintain the expected number of running workers. The process involves waiting for workers to be ready, gracefully killing excess workers, and starting new workers as needed.
37	Retrieves connection to Cloud Translate
38	Translate a string or list of strings.
39	Retrieves a Cloud SQL instance resource.
40	Create a new Cloud SQL instance using the provided body and project ID, if specified.
41	Updates settings of a Cloud SQL instance.
42	Deletes a Cloud SQL instance.
43	Retrieves a database resource from a Cloud SQL instance.
44	Creates a new database inside a Cloud SQL instance.
45	Updates a database resource inside a Cloud SQL instance using patch semantics.
46	Deletes a database from a Cloud SQL instance.
47	Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL dump or CSV file.
48	Starts Cloud SQL Proxy. You have to remember to stop the proxy if you started it!
49	Stops running proxy, removes the socket directory, and deletes the proxy file if it was downloaded.
50	Returns version of the Cloud SQL Proxy.
51	Creates connection in the Connection table based on proxy, TCP, UNIX sockets, and SSL. Connection ID is randomly generated.
52	Retrieves the dynamically created connection from the Connection table.
53	Delete the dynamically created connection from the Connection table.
54	Retrieve Cloud SQL Proxy runner. It is used to manage the proxy lifecycle per task.
55	Retrieve database hook. This is the actual Postgres or MySQL database hook that uses proxy or connects directly to the Google Cloud SQL database.
56	Clean up database hook after it was used.
57	Reserve free TCP port to be used by Cloud SQL Proxy
58	Replaces invalid characters in MLEngine job_id with '_'. Adds a leading 'z' if job_id starts with an invalid character.
59	Extract error code from ftp exception
60	Removes any existing DAG runs for the perf test DAGs.
61	Removes any existing task instances for the perf test DAGs.
62	Toggle the pause state of the DAGs in the test.
63	Print operational metrics for the scheduler test.
64	Override the scheduler heartbeat to determine when the test is complete.
65	Invoke Lambda Function.
66	Creates Operators needed for model evaluation and returns. It gets prediction over inputs via Cloud ML Engine BatchPrediction API by calling MLEngineBatchPredictionOperator, then summarizes and validates the result via Cloud Dataflow using DataFlowPythonOperator.
67	Creates the directory specified by path, creating intermediate directories as necessary. If the directory already exists, this is a no-op. Set permissions for the directory using the provided mode value, ignoring the umask.
68	Converts a string to a numeric value if appropriate.
69	Make a naive datetime.datetime in a given time zone aware.
70	Make an aware datetime.datetime naive in a given time zone.
71	Create a datetime object with the settings.TIMEZONE as the timezone if not specified.
72	Establishes a connection to a Druid broker.
73	Returns http session for use with requests
74	Performs a request to the specified endpoint with the given data and headers. Handles different HTTP methods (GET, HEAD, POST, etc.).
75	Checks the status code and raises an AirflowException exception for non 2XX or 3XX status codes.
76	Grabs extra options like timeout and actually runs the request, checking for the result
77	Contextmanager that will create and teardown a session.
78	Function decorator that provides a session if it isn't provided. If you want to reuse a session or run the function as part of a database transaction, you pass it to the function, if not this wrapper will create one and close it for you.
79	Clear out the database
80	Parses some DatabaseError to provide a better error message
81	Get a set of records from Presto
82	Retrieve a pandas DataFrame from an SQL query.
83	Execute the statement against Presto. Can be used to create views.
84	Insert a set of tuples into a table.
85	Returns a Cosmos DB client.
86	Checks if a collection exists in CosmosDB.
87	```plaintext
Create a new collection in the CosmosDB database if it does not already exist.
```
88	Checks if a database exists in CosmosDB.
89	Creates a new database in CosmosDB if it does not already exist.
90	Deletes an existing database in CosmosDB.
91	Deletes an existing collection in the CosmosDB database. Raises an error if the collection name is None.
92	Insert a list of new documents into an existing collection in the CosmosDB database.
93	Delete an existing document from a collection in the CosmosDB database.
94	Get a document from an existing collection in the CosmosDB database.
95	Get a list of documents from an existing collection in the CosmosDB database via SQL query.
96	Returns the Cloud Function with the given name.
97	Creates a new function in Cloud Function in the specified location using the provided body and project ID.
98	Updates Cloud Functions according to the specified update mask.
99	Uploads a zip file with sources to a specified location and project, then returns the upload URL.
100	Deletes the specified Cloud Function.
101	Checks the dependency status for a task instance, considering global checks and context-specific settings.
102	Returns whether or not this dependency is met for a given task instance. A dependency is considered met if all of the dependency statuses it reports are passing.
103	Returns an iterable of strings that explain why a dependency wasn't met.
104	Parses a config file for S3 credentials. Can currently parse boto, s3cmd.conf, and AWS SDK config formats.
105	Get the underlying `botocore.Credentials` object for a given region.
106	Returns a Vertica connection object.
107	Ensure all logging output has been flushed
108	If the path contains a folder with a .zip suffix, then the folder is treated as a zip archive and path to zip is returned.
109	Traverse a directory and look for Python files.
110	Construct a TaskInstance from the database based on the primary key.
111	Launch DagFileProcessorManager processor and start DAG parsing loop in manager.
112	Send termination signal to DAG parsing processor manager and expect it to terminate all DAG file processors.
113	Exit the program gracefully upon receiving a signal.
114	Use multiple processes to parse and generate tasks for the DAGs in parallel. By processing them in separate processes, we can get parallelism and isolation from potentially harmful user code.
115	Parse DAG files repeatedly in a standalone loop.
116	Parse DAG files in a loop controlled by DagParsingSignal. Actual DAG parsing loop will run once upon receiving one agent heartbeat message and will report done when finished the loop.
117	Refresh file paths from dag dir if we haven't done it for too long.
118	Occasionally print out stats about file processing speed.
119	Clears import errors for files that no longer exist.
120	Print out stats about how files are getting processed.
121	Update this with a new set of paths to DAG definition files.
122	Sleeps until all the processors are done.
123	Update the heart beat of the manager loop. This method will kick off new processes to process DAG definition files and read the results from the finished processors.
124	Kills all child processes on exit to prevent them from becoming orphaned.
125	Opens a ssh connection to the remote host.
126	Creates a transfer job that runs periodically.
127	Get the latest state of a Google Storage Transfer Service job.
128	Lists long-running operations in Google Storage Transfer Service that match the specified filter.
129	Updates a transfer job that runs periodically.
130	Deletes a transfer job. This is a soft delete. After a transfer job is deleted, the job and all the transfer executions are subject to garbage collection. Transfer jobs become eligible for garbage collection 30 days after soft delete.
131	Cancels an transfer operation in Google Storage Transfer Service.
132	Pauses a transfer operation in Google Storage Transfer Service.
133	Resumes an transfer operation in Google Storage Transfer Service.
134	Waits until the job reaches the expected state.
135	Returns all task reschedules for the specified task instance and try number, sorted in ascending order by ID.
136	Returns the number of slots open at the moment.
137	Runs command and returns stdout
138	Remove an option from a configuration and optionally from a default configuration.
139	Returns the section as a dict. Values are converted to int, float, bool as required.
140	This interface is used to allocate IDs for incomplete keys using the Datastore API.
141	Begins a new transaction. Returns a transaction handle.
142	Commit a transaction, optionally creating, deleting or modifying some entities.
143	Lookup some entities by key.
144	Rollback a transaction.
145	This interface is used to run a query for entities and returns the batch of query results.
146	Get the latest state of a long-running operation.
147	Deletes the long-running operation.
148	Poll backup operation state until it's completed.
149	Export entities from Cloud Datastore to Cloud Storage for backup.
150	Import a backup from Cloud Storage to Cloud Datastore.
151	Publish a message to a topic or an endpoint.
152	Fetch the hostname using a callable from the config or fall back to `socket.getfqdn`.
153	Retrieves connection to Cloud Natural Language service
154	Find and process named entities within a given text document, including details such as entity types, salience, and mentions.
155	Convenience method to analyze text using sentiment, entities, and syntax all in one call.
156	Classifies a document into categories.
157	Return template fields for a specific operator class.
158	A role that allows you to include a list of template fields in the middle of the text. This is especially useful when writing guides describing how to use the operator. The result is a list of fields where each field is shorted in the literal block.
159	Properly close pooled database connections
160	Ensures that certain subfolders of AIRFLOW_HOME are on the classpath
161	Gets the returned Celery result from the Airflow task ID provided to the sensor, and returns True if the celery result has been finished execution.
162	Return true if the ticket cache contains "conf" information as is found in ticket caches of Kerberos 1.8.1 or later.
163	Transform a SQLAlchemy model instance into a dictionary
164	Yield successive chunks of a given size from a list of items.
165	Reduce the given list of items by splitting it into chunks of the given size and passing each chunk through the reducer.
166	Given a number of tasks, builds a dependency chain.
167	Returns a pretty ascii table from tuples
168	Render the log filename based on the task instance, try number, and filename template.
169	Returns a Google Cloud Dataproc service object.
170	Awaits for Google Cloud Dataproc Operation to complete.
171	Coerces content or all values of content if it is a dict to a string.
172	Handles the Airflow + Databricks lifecycle logic for a Databricks operator. It pushes the run ID and run page URL to XCom, logs the run status, and waits for the run to complete. If the run is successful, it logs the completion message; otherwise, it raises an AirflowException with an error message.
173	Run an Pig script using the pig cli
174	Fetch and return the state of the given celery task. The scope of this function is global so that it can be called by subprocesses in the pool.
175	How many Celery tasks should each worker process send.
176	How many Celery tasks should be sent to each worker process.
177	Like a Python builtin dict object,setdefault returns the current value for a key and if it isn't there,stores the default value and returns it.
178	Returns a Google MLEngine service object.
179	Launches a MLEngine job and waits for it to reach a terminal state.
180	Retrieves a MLEngine job using the provided `project_id` and `job_id`. Returns the job object if successful.
181	Waits for the Job to reach a terminal state. This method will periodically check the job state until the job reach a terminal state.
182	Creates a version on Google Cloud ML Engine and returns the operation if successful.
183	Sets a version to be the default. Blocks until finished.
184	Lists all available versions of a model. Blocks until finished.
185	Deletes a specific version of a model and waits until the deletion is complete.
186	Creates a Model in a specified project and blocks until the operation is complete.
187	Gets a Model. Blocks until finished.
188	Write batch items to DynamoDB table with provisioned throughput capacity.
189	Integrate plugins to the context.
190	Creates a new instance of the configured executor if none exists and returns it.
191	Creates a new instance of the named executor, with options for local, sequential, celery, dask, and kubernetes execution, and falls back to plugin-based execution if the executor name is not recognized.
192	Handles error callbacks when using Segment with segment_debug_mode set to True
193	Provides initialization and access to mssql connection object
194	Trigger a new DAG run with optional parameters like run ID, configuration, and execution date. If successful, return a message indicating the creation of the DAG run. If errors occur, return appropriate error messages and status codes.
195	Delete all DB records related to the specified Dag.
196	Returns a JSON with a task's public instance variables.
197	Get all pools.
198	Create a pool.
199	Delete pool.
200	Create a new container group
201	Get the state and exitcode of a container group.
202	Get the messages of a container group.
203	Get the tail of logs from a container group.
204	Deletes a container group.
205	Test if a container group exists.
206	Decorator to fill in unspecified arguments from "default_args" and alert about missing arguments.
207	Builds an ingest query for an HDFS TSV load.
208	Check for message on subscribed channels and write to xcom the message with key ``message``
209	Returns a set of dag runs for the given search criteria.
210	Returns the task instances for this dag run
211	Returns the task instance specified by task_id for this dag run
212	Return the previous DagRun if it exists.
213	Return the previous scheduled DagRun if one exists.
214	Determines the overall state of the DagRun based on the state of its TaskInstances.
215	Verify the DagRun by checking for removed tasks or tasks that are not in the database yet. It will set the state to removed or add the task if required.
216	Exception if an error occurs during the request.
217	Given a context, provide a dictionary of values that can be used to externally reconstruct relations between dags, dag_runs, tasks, and task_instances. Format the names as abc.def.ghi unless in_env_var_format is True.
218	This function decides whether or not to trigger a remote DAG based on a condition parameter.
219	Sends a single datapoint metric to DataDog.
220	Queries datadog for a specific metric, potentially with some function applied to it and returns the results.
221	Get the DAG object by ID, refresh it if expired.
222	Mark given zombie tasks as failed in the current DagBag.
223	Adds the DAG into the bag, recurses into sub dags. Throws AirflowDagCycleException if a cycle is detected in this dag or its subdags
224	Collects DAGs from a specified folder or file path, processes them, and adds them to the DAG bag collection.
225	Prints a report around DagBag loading stats
226	Add or subtract days from a YYYY-MM-DD.
227	Given a date string `ds` in a specified `input_format`, convert it to another string format `output_format`.
228	Poke matching files in a directory with the specified regex pattern.
229	Check if a directory is empty or contains files based on specified criteria.
230	Clears a set of task instances, ensuring running ones are killed.
231	Return the try number for the task, incrementing if not currently running.
232	Generates the shell command required to execute a task instance with various parameters.
233	Get the latest state from the database for a given task instance, optionally using an existing session.
234	Forces the task instance's state to FAILED in the database.
235	Refreshes the task instance from the database based on the primary key.
236	Clears all XCom data from the database for the task instance
237	Returns a tuple that identifies the task instance uniquely.
238	Checks whether the dependents of this task instance have all succeeded.
239	Get datetime of the next retry if the task instance fails, considering exponential backoff and constraints.
240	Checks if the task instance is in the right state and timeframe to be retried.
241	Returns a boolean indicating whether the slot pool has enough room for the current task to run.
242	Returns the DagRun for this TaskInstance
243	Make an XCom available for tasks to pull.
244	Pull XComs that optionally meet certain criteria
245	Sets the log context.
246	Close and upload local log file to remote storage Wasb.
247	Provides initialization and access to Google Compute Engine connection
248	Starts an existing instance defined by project_id, zone, and resource_id.
249	Sets the machine type of a Compute Engine instance by specifying the zone, resource ID, and body with optional project ID. Waits for the operation to complete.
250	Retrieve instance template by project_id and resource_id.
251	Inserts an instance template using the specified body.
252	Retrieves an Instance Group Manager by specifying project ID, zone, and resource ID.
253	Patches Instance Group Manager with the specified body.
254	Waits for the named operation to complete by checking the status of an asynchronous call.
255	Check if a bucket exists.
256	Creates an Amazon S3 bucket.
257	Checks that a prefix exists in a bucket
258	Lists prefixes in a bucket under the specified prefix.
259	Lists keys in a bucket under prefix and not containing delimiter
260	Checks if a key exists in a bucket.
261	Returns a boto3.s3.Object
262	Reads a key from S3.
263	Reads a key with S3 Select using a specified expression and serialization formats.
264	Checks that a key matching a wildcard expression exists in a bucket.
265	Returns a boto3.s3.Object object matching the wildcard expression
266	Loads a local file to S3.
267	Loads a string to S3
268	Uploads bytes data to an S3 bucket.
269	Loads a file object to S3
270	Creates a copy of an object that is already stored in S3.
271	Queries cassandra and returns a cursor to the results.
272	Convert a user type to RECORD containing n fields, where n is the number of attributes. Each element in the user type class will be converted to its corresponding data type in BQ.
273	Send an email with HTML content using Sendgrid, including options for CC, BCC, attachments, and sandbox mode.
274	Retrieves connection to Cloud Speech.
275	Recognizes audio input using Google Cloud Speech-to-Text API.
276	Call the SparkSqlHook to run the provided sql query.
277	Load AirflowPlugin subclasses from the entrypoints provided. The entry_point group should be 'airflow.plugins'.
278	Check whether a potential object is a subclass of the AirflowPlugin class.
279	Sets tasks instances to skipped from the same dag run.
280	Returns a AzureDLFileSystem object.
281	Check if a file exists on Azure Data Lake.
282	Upload a file to Azure Data Lake.
283	List files in Azure Data Lake Storage
284	Run Presto Query on Athena
285	Uncompress gz and bz2 files.
286	Queries MSSQL and returns a cursor of results.
287	Decorates function to execute function at the same time submitting action_logging but in CLI context. It will call action logger callbacks twice, one for pre-execution and the other one for post-execution.
288	Builds metrics dict from function args. It assumes that function arguments is from airflow.bin.cli module's function and has Namespace instance where it optionally contains "dag_id", "task_id", and "execution_date".
289	Create the specified cgroup returns the Node associated with the created cgroup.
290	Delete the specified cgroup.
291	Strips protocol from host
292	Utility function to perform an API call with retries
293	Signs into Salesforce, only if we are not already signed in.
294	Make a query to Salesforce.query The query to make to Salesforce.rtype dictThe query result.
295	Returns the description of a Salesforce object from its name, including the object's schema and extra metadata stored by Salesforce.
296	Get a list of all available fields for a given Salesforce object.
297	Get all instances of the `object` from Salesforce.
298	Convert a column of a dataframe to UNIX timestamps if applicable
299	Write query results to file. Acceptable formats are csv, json, ndjson. Convert datetimes to timestamps or leave as strings. Add a timestamp field marking data fetch time.
300	Fetches PyMongo Client
301	Fetches a mongo collection object for querying. Uses connection schema as DB unless specified.
302	Updates multiple documents in a MongoDB collection using bulk_replace operations.
303	Checks the mail folder for mails containing attachments with the given name.
304	Retrieves mail's attachments in the mail folder by its name.
305	Downloads mail's attachments in the mail folder by its name to the local directory.
306	Returns a list of tuples containing attachment names and payloads that match the specified name, with options to use regular expressions and stop after finding the first match.
307	Gets the file including name and payload.
308	Write batch records to Kinesis Firehose.
309	Determines whether a task is ready to be rescheduled. Only tasks in `NONE` state with at least one row in `task_reschedule` table are handled by this dependency class. This dependency fails if the latest reschedule request's reschedule date is still in future.
310	Sends email using backend specified in EMAIL_BACKEND.
311	Send an email with HTML content. Supports attachments and various options for recipients and email formatting.
312	Process DateTimes from the DB to ensure they are always returned as UTC.
313	Check if a blob exists on Azure Blob Storage.
314	Check if a prefix exists on Azure Blob storage.
315	Upload a string to Azure Blob Storage.
316	Read a file from Azure Blob Storage and return as a string.
317	Deletes a file from Azure Blob Storage.
318	List a directory in a standardized format using MLSD command (RFC-3659).
319	Returns a FTP connection object
320	Return a list of files on the remote system.
321	Transfers the remote file to a local location. If local_full_path_or_buffer is a string path, the file will be put at that location; if it is a file-like buffer, the file will be written to the buffer but not closed.
322	Transfers a local file to the remote location.
323	Returns a datetime object representing the last time the file was modified
324	Call the DiscordWebhookHook to post message
325	Return the FileService object.
326	Check if a directory exists on Azure File Share.
327	Check if a file exists on Azure File Share.
328	Return the list of directories and files stored on a Azure File Share.
329	Create a new directory on a Azure File Share.
330	Upload a file to Azure File Share.
331	Uploads a string to Azure File Share.
332	Upload a stream to Azure File Share.
333	Returns a Google Cloud Storage service object.
334	Copies an object from a bucket to another, with renaming if requested. destination_bucket or destination_object can be omitted, in which case source bucket/object is used, but not both.
335	Get a file from Google Cloud Storage.
336	Uploads a local file to Google Cloud Storage, with optional gzip compression.
337	Check for the existence of a file in Google Cloud Storage.
338	Checks if an blob_name is updated in Google Cloud Storage.
339	Deletes an object from the specified bucket.
340	List all objects from the bucket with a given string prefix in their names.
341	Begins a summary
342	Gets the CRC32c checksum of an object in Google Cloud Storage.
343	This interface is used to call the TotalSupply method in ope4 that initialize smart contract parameter.
344	Creates a new bucket in Google Cloud Storage.
345	Compose a list of existing objects into a new object in the same storage bucket.
346	Returns true if.training job's secondary status message has changed.
347	Returns a string containing the start time and secondary training job status message.
348	Tar the local file or directory and upload to s3
349	Extracts the S3 operations from the configuration and executes them.
350	Check if an S3 URL exists
351	Establish an AWS connection for retrieving logs during training.
352	create a training job
353	Create a tuning job
354	Create a transform job
355	Create an endpoint with optional parameters for waiting for completion, check interval, and maximum ingestion time.
356	Return the training job info associated with job_name and print CloudWatch logs.
357	Check status of a SageMaker job
358	Display log for given training, optionally tailing until job is complete
359	Execute the python dataflow job.
360	Run migrations in 'offline' mode by configuring the context with a URL and executing migration commands.
361	Run migrations in 'online' mode.
362	Delete the specified Cloud Bigtable instance. Raises an error if the instance does not exist.
363	Creates new instance.
364	Creates the specified Cloud Bigtable table. Raises ``google.api_core.exceptions.AlreadyExists`` if the table exists.
365	Deletes the specified table in Cloud Bigtable.
366	Updates number of nodes in the specified Cloud Bigtable cluster.
367	This function generates a command list for a CLI tool, considering the connection details and authentication methods.
368	Prepare a list of HiveConf parameters from a dictionary of key-value pairs.
369	Loads a pandas DataFrame into Hive. Hive data types will be inferred if not passed but column names will not be sanitized.
370	Loads a local file into Hive.
371	Returns a Hive thrift client.
372	Checks whether a partition with a given name exists.
373	Check if a table exists.
374	Returns a Hive connection object.
375	Get results of the provided hql in target schema.
376	Execute hql in target schema and write results to a csv file.
377	This interface is used to execute a Hive query and retrieve the records. It allows specifying the Hive query, target schema, and additional Hive configuration. The result is returned as a list of records.
378	Get a pandas dataframe from a Hive query
379	Retrieves connection to Cloud Vision.
380	Get Dingding endpoint for sending message.
381	Send Dingding message
382	Helper method that binds parameters to a SQL query.
383	Helper method that escapes parameters to a SQL query.
384	Helper method that casts a BigQuery row to the appropriate data types.
385	Check if the value has the expected type and raise a TypeError if it does not.
386	Returns a BigQuery PEP 249 connection object.
387	Returns a BigQuery service object.
388	Checks for the existence of a table in Google BigQuery.
389	Creates a new, empty table in the dataset. If a view is specified, it creates a view defined by a SQL query.
390	Patch information in an existing table. It only updates fields that are provided in the request object.
391	Cancel all started queries that have not yet completed.
392	Deletes an existing table from the dataset. If the table does not exist, returns an error unless ignore_if_missing is set to True.
393	Creates a new, empty table in the dataset; if the table already exists, update the existing table. This function simulates a BigQuery upsert operation by checking if the table exists and either updating or inserting it accordingly.
394	Grant authorized view access of a dataset to a view table. If the view has already been granted access to the dataset, do nothing.
395	Method returns dataset_resource if dataset exists and raises 404 error if dataset does not exist.
396	Get a list of all BigQuery datasets in a specified project.
397	Insert data into a BigQuery table one record at a time without using a load job.
398	This interface is used to execute a BigQuery query and returns the job ID.
399	Execute a BigQuery query multiple times with different parameters.
400	Fetches the next row from a buffered result set, loading the next page from the result set if necessary.
401	Queries Postgres and returns a cursor to the results.
402	Create all the intermediate directories in a remote host
403	Create a queue using the connection object.
404	Send message to the queue.
405	Run the task command.
406	A callback that should be called when this is done running. It removes a configuration file if it exists.
407	Parse options and process commands
408	generate HTML header content
409	Generate HTML div with specified width and height.
410	generate javascript code for the chart
411	Create x-axis for the plot.
412	Create Y-axis
413	Returns a sqlite connection object
414	Decorator to log user actions
415	Decorate a view to compress its response if the client can accept gzip encoding.
416	Returns the last dag run for a dag, None if there was none. Last dag run can be any type of run eg. scheduled or backfilled. Overridden DagRuns are ignored.
417	Creates a dag run from this dag including the tasks associated with this dag. Returns the dag run.
418	Publish the message to SQS queue. context the context object type dict return dict with information about the message sent For details of the returned dict see :py:meth:`botocore.client.SQS.send_message` rtype dict
419	```json
{
  "summary": "Returns a JSON response from a JSON serializable Python object."
}
```
420	Opens the given file. If the path contains a folder with a .zip suffix, then the folder is treated as a zip archive, opening the file inside the archive.
421	Used by cache to get a unique key per URL
422	Returns Gcp Video Intelligence Service client
423	Performs video annotation using the specified parameters.
424	Get Opsgenie api_key for creating alert
425	Overwrites HttpHook get_conn to use only base_url and headers
426	Execute the Opsgenie Alert call.
427	Construct the Opsgenie JSON payload. All relevant parameters are combined here to a valid Opsgenie JSON payload.
428	Call the OpsgenieAlertHook to post a message.
429	Checks if AWS conn exists already or creates one and returns it
430	Run Presto query on Athena with provided config and return submitted query_execution_id.
431	Fetch the status of submitted athena query. Returns None or one of valid query states.
432	Poll the status of a submitted Athena query until the query state reaches a final state. Returns the final state of the query after polling for a specified number of tries or until the maximum timeout is reached.
433	Returns an SFTP connection object
434	Handle a rate limit exception by logging the issue and pausing execution for the specified retry time, or 60 seconds if not specified.
435	Call Zendesk API and return results
436	Retrieves the partition values for a table.
437	This interface is used to get the information of a table within a specified Hive database.
438	This interface is used to get the physical location of a table in a Hive database.
439	Get the status of a cluster using its unique identifier.
440	Delete a cluster and optionally create a snapshot.
441	Retrieves a list of snapshots for a cluster, filters out snapshots with no status, and sorts them by creation time in descending order.
442	Restores a cluster from its snapshot.
443	Creates a snapshot of a cluster.
444	SlackAPIOperator calls will not fail if the call is not unsuccessful, ensuring it does not prevent a DAG from completing successfully.
445	Creates a job flow using the config from the EMR connection. Overrides for this config may be passed as the job_flow_overrides.
446	Will filter file paths in a list of dicts based on a minimum file size.
447	Returns a filtered list of_dicts based on ignored extensions and copying criteria.
448	Executes a task by fetching, transforming, and loading data into S3 based on whether it's a pipeline or not.
449	Get pool by a given name.
450	Create a pool with the given parameters.
451	Delete a pool by a given name.
452	Converts a python dictionary to the proto supplied
453	Wait for an operation to complete by continuously fetching its status from Google Cloud.
454	Fetches the operation from Google Cloud.
455	Append labels to provided Cluster Protobuf
456	Creates a Google Cloud Compute Engine cluster based on the provided cluster definition and project ID. Handles both protobuf and dictionary cluster representations, logs creation details, and manages retries and timeouts. Returns the cluster's self-link.
457	Gets details of specified cluster.
458	Return the default webhook endpoint or the manually supplied one for a Discord connection.
459	Construct the Discord JSON payload with relevant parameters including username, avatar URL, TTS status, and message content, ensuring the message length does not exceed 2000 characters.
460	Execute the Discord webhook call
461	Encrypts a plaintext message using Google Cloud KMS.
462	Imports table from a remote location to a target directory.
463	Imports a specific query from the RDBMS to HDFS.
464	Exports Hive table to remote location. Arguments are copies of direct sqoop command line Arguments
465	Retrieves connection to Cloud Text to Speech.
466	Synthesizes text input using the provided voice and audio configuration. Retries the request if retry is specified. Waits for the request to complete for the specified timeout.
467	Close and upload local log file to remote storage S3.
468	Define a git-sync init container for retrieving DAGs using Git, если Используется volume claims для монтирования DAGов, нет необходимости в init container'е.
469	Defines any necessary environment variables for the pod executor
470	Defines any necessary secrets for the pod executor
471	Defines the security context
472	Returns a URL link to the Qubole command result page based on the operator and datetime provided.
473	### Summary:
Heartbeats update the job's entry in the database with a timestamp for the latest_heartbeat and allows for the job to be killed externally. This ensures that system-level monitoring is possible, and jobs can be externally killed as needed. The method adjusts the sleep duration to maintain a steady heart rate based on the configured heartrate and the time since the last heartbeat. It also handles exceptions and logs errors if necessary.
474	Launch a process to process the given file.
475	Launches the process and starts processing the DAG.
476	Checks if the process launched to process this file is done. Returns True if the process is finished running.
477	Helper method to clean up processor_agent to avoid leaving orphan processes
478	Record import errors for DAGs in a DagBag and clear errors for files without them.
479	Scheduled the tasks for a single DAG by looking at the active DAG runs and adding task instances that should run to the queue.
480	Set task instances to a new state based on their current state and the existence of an associated DagRun.
481	Get the concurrency maps.
482	Changes the state of task instances in the list with one of the given states to QUEUED atomically, and returns the TIs changed in SimpleTaskInstance format.
483	Enqueue task instances with the executor in a queued state.
484	Attempts to execute TaskInstances that should be executed by the scheduler.
485	Reset the state of tasks that failed to execute to SCHEDULED.
486	Process executor events.
487	Process a Python file containing Airflow DAGs by loading it, extracting DAG and task information, and handling errors.
488	Updates the counters per state of the tasks that were running. Can re-add to tasks to run in case required.
489	Checks if the executor agrees with the state of task instances that are running.
490	Returns a dag run for the given run date, which will be matched to an existing dag run if available or create a new dag run otherwise. If the max_active_runs limit is reached, this function will return None.
491	Returns a map of task instance key to task instance object for the tasks to run in the given dag run.
492	Computes the dag runs and their respective task instances for the given run dates and executes the task instances. Returns a list of execution dates of the dag runs that were executed.
493	Go through the DAG runs and update the state based on the task_instance state. Then set DAG runs that are not finished to failed.
494	Initialize components, execute DAG tasks, handle backfilling, and manage executor lifecycle.
495	Ensure the task stops running if the hostname or PID changes. If the task's state is externally set to a non-running state, the task will also stop.
496	Provides a client for interacting with the Cloud Spanner API.
497	Gets information about a particular instance.
498	Invokes a method on a given instance by applying a specified Callable.
499	Creates a new Cloud Spanner instance.
500	Updates an existing Cloud Spanner instance with specified parameters such as configuration, node count, and display name.
501	Deletes an existing Cloud Spanner instance.
502	Retrieves a database in Cloud Spanner. If the database does not exist in the specified instance, it returns None.
503	Creates a new database in Cloud Spanner.
504	Updates DDL of a database in Cloud Spanner.
505	Drops a database in Cloud Spanner.
506	Pokes for a mail attachment on the mail server. Return True if attachment with the given name is present and False if not.
507	Merges user-specified additional parameters with language hints and web detection parameters.
508	Returns a cassandra Session object
509	Check if a table exists in Cassandra
510	Checks if a record exists in Cassandra based on the provided table and keys.
511	Construct the command to poll the driver status.
512	Remote Popen to execute the spark-submit job.
513	Processes a log file, extracts useful information, and logs relevant details based on the deployment mode (e.g., YARN, Kubernetes).
514	Parses the logs of the Spark driver status query process and extracts the driver status.
515	Get the task runner that can be used to run the given job.
516	Try to use a waiter to wait for a job execution to complete. If the waiter is not available, apply an exponential backoff.
517	Queries mysql and returns a cursor to the results.
518	Configure a csv writer with the file_handle and write schema as headers for the new file.
519	Takes a cursor, and writes the BigQuery schema in .json format for the results to a local file system. Returns a dictionary where key is a filename to be used as an object name in GCS, and values are file handles to local files that contains the BigQuery schema fields in .json format.
520	Return a dict of column name and column type based on self.schema if not None.
521	Helper function that maps from MySQL fields to BigQuery fields. Used when a schema_filename is set.
522	Executes an Sqoop job based on the provided command type (either 'import' or 'export').
523	Saves the lineage to XCom and if configured to do so sends it to the backend.
524	Returns the extra property by deserializing json.
525	Generate a date range based on a start date, end date, or number of entries, with an optional delta or cron expression.
526	Convert an array of time durations in seconds to the specified time unit.
527	Return a datetime object representing `n` days ago. By default the time is set to midnight.
528	Initializes the role with the specified permissions and related view-menus.
529	Delete the given Role.
530	Get all the roles associated with the user.
531	Returns a set of tuples with the perm name and view menu name
532	Whether the user has this role name
533	Whether the user has this perm
534	Cleans up faulty permissions left by FAB
535	Add the new permission and view-menu to ab_permission_view_role if not exists.
536	Ensure that the admin has all permission views by adding any missing ones to the table.
537	Set the access policy on the given DAG's ViewModel.
538	Create perm-vm if not exist and insert into FAB security model for all-dags.
539	Deferred load of Fernet key, handling potential failures related to Cryptography installation or key validity.
540	Checks for existence of the partition in the AWS Glue Catalog table
541	Gets the AwsGlueCatalogHook
542	Check for message on subscribed queue and write to xcom the message with key messages Returns True if message is available
543	Returns a snakebite HDFSClient object.
544	Establishes a connection depending on the security mode set via config or environment variable. Returns a hdfscli InsecureClient or KerberosClient object.
545	Check for the existence of a path in HDFS by querying FileStatus.
546	Uploads a file or directory to HDFS.
547	Establishes a connection to a pinot broker using pinot dbqpi
548	Get the connection URI for a Pinot broker.
549	Convert native python `datetime.date` object to a format supported by the API.
550	Convert native python datetime.time object to a format supported by the API.
551	Returns a Redis connection and initializes the Redis object if not already initialized.
552	Executes the SQL query and returns a pandas DataFrame
553	Run a command or a list of commands.
554	Sets the autocommit flag on the connection
555	Inserts a set of tuples into a table, creating a new transaction every commit_every rows.
556	Returns the SQL literal of the cell as a string.
557	An endpoint checking the health status of the Airflow instance, including the metadatabase and scheduler.
558	Retrieves external links for a given Operator based on DAG ID, task ID, execution date, and link name. Returns the URL if found, otherwise returns an error message.
559	Opens a connection to the cloudant service and closes it automatically if used as context manager.
560	Call the SlackWebhookHook to post the provided Slack message.
561	Returns the Credentials object for Google API.
562	Returns an authorized HTTP object to be used to build a Google cloud service hook connection.
563	Catch HTTP exceptions and raise AirflowException with an informative message.
564	Decorator to provide fallback for Google Cloud Platform project id. If the project is None, it will be replaced with the project_id from the service account the Hook is authenticated with. The project id can be specified either via project_id kwarg or via first parameter in positional args.
565	Returns a list of states indicating that a task either has not completed a run or has not even started.
566	Construct the spark-sql command to execute with various configurations and options.
567	Convert a "PIL Image" or "numpy.ndarray" to tensor.
568	Normalize a tensor image with mean and standard deviation.
569	Resize the input PIL Image to the given size.
570	Pad the given PIL Image on all sides with specified padding mode and fill value.
571	Crop the given PIL Image. Args: img (PIL Image): Image to be cropped. i (int): i in (i,j) i.e coordinates of the upper left corner. j (int): j in (i,j) i.e coordinates of the upper left corner. h (int): Height of the cropped image. w (int): Width of the cropped image. Returns: PIL Image: Cropped image.
572	Crop the given PIL Image and resize it to desired size.
573	Horizontally flip the given PIL Image.
574	Perform perspective transform of the given PIL Image.
575	Vertically flip the given PIL Image.
576	Crop the given image into four corners and the central crop.
577	Adjust the brightness of a PIL Image.
578	Adjusts the contrast of a PIL Image. Takes a PIL Image and a contrast factor as input, and returns a Contrast adjusted image.
579	Adjust the color saturation of an image by a specified factor.
580	Adjust hue of an image by converting it to HSV, cyclically shifting the intensities in the hue channel, and then converting it back to the original image mode. The hue factor determines the shift amount and must be in the interval `[-0.5, 0.5]`.
581	Adjusts the gamma of an image, making the shadows darker and dark regions lighter based on the given gamma value and gain constant.
582	Rotate the image by angle.
583	Apply affine transformation on the image keeping image center invariant.
584	Convert image to grayscale version of image. if num_output_channels = 1 : returned image is single channel if num_output_channels = 3 : returned image is 3 channel with r = g = b
585	Save a given Tensor into an image file.
586	Find the class folders in a dataset.
587	Return a Tensor containing the specified number of patches from images in the given directory with the specified extension.
588	Return a Tensor containing the list of labels Read the file and keep only the ID of the 3D point.
589	Reads a file containing ground truth matches and returns a Tensor with the 3D point IDs, where matches are represented with a 1 and non-matches with a 0.
590	Computes the accuracy over the k top predictions for the specified values of k.
591	This function disables printing when not in the master process.
592	Download a file from a URL and place it in a specified directory, optionally checking the integrity with an MD5 checksum.
593	List all directories at a given root.
594	List all files ending with a specific suffix in a given directory, and optionally prepend the directory path to the results.
595	Downloads a Google Drive file and saves it in the specified directory.
596	Get parameters for ``crop`` for a random crop.
597	Get parameters for ``perspective`` for a random perspective transform.
598	Gets parameters for "crop" for a random sized crop. Args : img (PIL Image) : Image to be cropped. scale (tuple) : range of size of the origin size cropped ratio (tuple) : range of aspect ratio of the origin aspect ratio cropped Returns : tuple : params (i, j, h, w) to be passed to "crop" for a random sized crop.
599	Get a randomized transform to be applied on image.
600	Gets parameters for affine transformation
601	Download and extract the tarball, and download each individual photo.
602	Download the MNIST data if it doesn't exist in processed_folder already.
603	Download the EMNIST data if it doesn't exist in processed_folder already.
604	Returns theme name by checking override, cookies, and settings in that order.
605	Return autocompleter results
606	Render preferences page and save user preferences.
607	Returns available themes list.
608	check if the searchQuery contain a bang, and create fitting autocompleter results
609	```plaintext
remove first and last lines to get only json.
```
610	Embeds a custom gradient into a Tensor. This function works by clever application of stop_gradient. It allows for embedding a custom gradient into a `Tensor` while preserving the gradient for other parts of the computation.
611	Convenience function to efficiently construct a MultivariateNormalDiag.
612	Return the joint log-probability for the eight-schools model.
613	Runs Hamiltonian Monte Carlo (HMC) on the eight-schools unnormalized posterior to benchmark its performance.
614	Expand the docstring of a function programmatically by replacing placeholders with given values.
615	Infer the original name passed into a distribution constructor.
616	Constructs a RandomVariable with a dummy name argument for compatibility with program transformations.
617	Wrap an existing distribution as a traceable random variable in Edward models.
618	Factory function to create random variable given distribution class.
619	Computes one-step-ahead predictive distributions for all timesteps. Given samples from the posterior over parameters, returns the predictive distribution over observations at each time `T`, given observations up to time `T-1`.
620	Construct predictive distribution over future observations using samples from the posterior over parameters.
621	Returns the maximum value in an array, or a specified mask value if the maximum is not finite.
622	Assert all elements of `x` are finite.
623	Assert 'x' has rank equal to 'rank' or smaller.
624	Computes the number of elements in a tensor with shape `event_shape`. Returns the number of elements as a numpy int when possible, otherwise returns a scalar tensor.
625	OneHotCategorical helper computing probs, cdf, etc over its support.
626	Return a function to convert a value to a tensor, based on the provided identifier, which can be a string, dictionary, property, or callable.
627	Number of `params` needed to create a `MixtureSameFamily` distribution.
628	Yields the top-most interceptor on the thread-local interceptor stack.
629	Decorator that wraps `func` so that its execution is intercepted.
630	Context manager for recording interceptable executions onto a tape.
631	Generate synthetic data for binary classification.
632	Utility method to visualize decision boundaries in R^2.
633	Builds a Dataset iterator for supervised classification using TensorFlow's `tf.data.Dataset`. Takes in feature and label arrays along with a batch size, and returns a batches of features and labels.
634	Validate `map_values` if `validate_args`==True.
635	Runs a `TransitionOperator` repeatedly and traces its outputs.
636	Calls a transition operator with args, unpacking args if it's a sequence.
637	Calls a function and returns the function's first output, a second output, and gradients of the first output with respect to the inputs.
638	Tilts `from_structure` to match the structure of `to_structure`.
639	Transform a log-prob function using a bijector, forward transforms state and calls the original log-prob function, returning the correctly transformed log-probability. If `init_state` is provided, the initial state in the transformed space is also returned.
640	Leapfrog `TransitionOperator` that performs a leapfrog integration step in Hamiltonian Monte Carlo. It takes in `leapfrog_step_state` (LeapFrogStepState), `step_size` (FloatTensor), `target_log_prob_fn` (PotentialFn), and `kinetic_energy_fn` (PotentialFn), and returns the updated `leapfrog_step_state` and `LeapFrogStepExtras`.
641	Metropolis-Hastings step.
642	Hamiltonian Monte Carlo transition operator for sampling from a target distribution using a symplectic integrator and Metropolis-Hastings acceptance criterion.
643	A function to do simple sign-based control using an adaptation rate to adjust a control variable based on whether the output is greater than or less than a set point.
644	Creates a layer from its configuration. This method uses the configuration dictionary to instantiate the same layer, reversing the process of `get_config`.
645	Convenience to convert to `Tensor` or leave as `None`.
646	Construct `scale` from various components.
647	Returns a callable that adds a random normal perturbation to the input.
648	Returns a callable that adds a random uniform perturbation to the input.
649	Expand the rank of x up to static_event_rank times for broadcasting.
650	A lower bound on the entropy of this mixture model.
651	Get a list of num_components batchwise probabilities.
652	Validate `outcomes`, `logits` and `probs`'s shapes.
653	Ensure TensorFlow is importable and version is sufficient.
654	Bayesian logistic regression, which returns labels given features.
655	Builds the Covertype data set and preprocesses it.
656	Cholesky factor of the covariance matrix of vector-variate random samples.
657	Estimate standard deviation using samples. Given `N` samples of scalar valued random variable `X`, standard deviation may be estimated as the square root of the variance, which is calculated as the average of the squared differences from the mean.
658	Estimate variance using samples.
659	Rectify possibly negatively axis. Prefer return Python list.
660	A version of tf.squeeze that works with dynamic axis and maintains the rank of the input tensor.
661	Standardize input `x` to a unit normal
662	Reconstruct input `x` from a its normalized version.
663	Build the transition matrix for a semi-local linear trend model.
664	Build the transition noise model for a semi-local linear trend model.
665	Returns a sample from the `dim` dimensional Halton sequence.
666	Return a tensor of uniform iid samples from the permutation space
667	Generates starting points for the Halton sequence procedure.
668	Computes the number of terms in the place value expansion of a number in specified bases.
669	Return a sorted array of primes such that 2 <= prime < n.
670	Returns the machine epsilon for the supplied data type.
671	Performs an inexact line search based on the Hager Zhang algorithm, which is used to find an appropriate step size along a search direction for optimization purposes.
672	Fix the step size by repeatedly halving it until the value and gradients are finite.
673	Bracket the minimum and perform a line search.
674	Perform line search after bracketing a minimum.
675	Performs bisection and updates the interval.
676	Prepares the arguments for the line search initialization.
677	Wrapper for tf.Print which supports lists and namedtuples for printing.
678	Use Gauss-Hermite quadrature to form quadrature on `K - 1` simplex for a `SoftmaxNormal` random variable.
679	Use SoftmaxNormal quantiles to form quadrature on `K - 1` simplex
680	Helper which checks validity of `loc` and `scale` init args.
681	Helper to infer batch_shape and event_shape from grid and endpoint_affine.
682	Helper function to interpolate between two locations using a quadrature grid.
683	Interpolates between two scales using a linear operator.
684	Creates a weighted `LinOp` from an existing `LinOp`.
685	Concatenates input vectors, statically if possible.
686	Multiply tensor of vectors by matrices assuming values stored are logs.
687	Multiply tensor of matrices by vectors assuming values stored are logs.
688	Multiply tensor of vectors by matrices.
689	Tabulate log probabilities from a batch of distributions.
690	Compute marginal pdf for each individual observable using a forward pass through log-probabilities.
691	Compute marginal posterior distribution for each state.
692	Computes the most likely sequence of hidden states given a sequence of observations using the Viterbi algorithm.
693	Choose a random direction in the event space.
694	Applies a single iteration of slice sampling update. Chooses a uniform random direction on the unit sphere in the event space and applies the one-dimensional slice sampling update along that direction.
695	Computes `fn_result` if needed and ensures it is a `Tensor` with `float` `dtype`.
696	Pads the shape of x to the right to be of rank final_rank. Expands the dims of x to the right such that its rank is equal to final_rank. For example, if x is of shape [1, 5, 7, 2] and final_rank is 7, we return padded_x, which is of shape [1, 5, 7, 2, 1, 1, 1].
697	Runs one iteration of Slice Sampler.
698	Builds a transformed-normal variational distribution over a parameter's support.
699	Build a loss function for variational inference in STS models using the Kullback-Liebler divergence.
700	Run an optimizer within the graph to minimize a loss function.
701	Compute mean and variance of a time series while accounting for a mask.
702	```markdown
Get the first unmasked entry of each time series in the batch.
```
703	Retrieve the broadcast batch shape from distributions, statically if possible.
704	Combines multiple MultivariateNormal distributions into a single factored joint distribution by concatenating their independent samples, resulting in a new MultivariateNormal distribution with a mean vector and block-diagonal covariance matrix that incorporates the individual distributions.
705	Sum the means and covariance of a list of MultivariateNormalDiag distributions.
706	Compute statistics of a provided time series, including empirical mean, standard deviation, and centered initial value, for heuristic initialization.
707	Ensures that `observed_time_series_tensor` has a trailing dimension of size 1, for compatibility with TensorFlow distributions.
708	Extracts a Tensor with canonical shape and optional mask.
709	Construct a predictive normal distribution that mixes over posterior draws.
710	`high - low`.
711	Create a factory function for generating summary statistics, such as mean, mode, or standard deviation.
712	Creates a new function that calls `dist_fn` with all previous distributions in reverse order and checks if the input is callable.
713	Convert argument names to distribution names
714	Get the distribution's required args.
715	Calculate the KL divergence between two `JointDistributionSequential`s.
716	Creates `dist_fn`, `dist_fn_wrapped`, and `dist_fn_args`.
717	Creates a `tuple` of `tuple`s of dependencies.
718	Compute the Shannon entropy in nats for a set of distributions, ensuring all distributions are independent.
719	Decorator function for argument bounds checking
720	Visualizes sequences as TensorBoard summaries.
721	Visualizes the reconstruction of inputs in TensorBoard.
722	Visualizes a qualitative analysis of a given model, including reconstruction and generation of sequences.
723	Summarize the parameters of a distribution by creating histograms for its mean and standard deviation in TensorBoard.
724	Summarize the mean of a tensor in nats and bits per unit.
725	Runs the model to generate a multivariate normal distribution.
726	Returns an initial state for the LSTM cell.
727	Runs the model to generate a distribution for a single timestep using the output of the recurrent model to parameterize the distribution.
728	Runs the model to generate an intermediate representation of x_t.
729	Generate new sequences.
This method creates new sequences by sampling from the static and dynamic priors and then passing the samples through a decoder to generate the likelihood of the sequences.
730	Reconstruct the given input sequences by sampling from the latent distributions and applying the necessary transformations.
731	Sample the static latent prior for a given number of samples and batch size, with option to share the same sample across all sequences.
732	Sample the dynamic latent prior.
733	Return Static batch shape of models represented by this component.
734	Returns the runtime batch shape of models represented by this component as an `int` `Tensor`. This batch shape is the broadcast batch shape of all model parameters and should match the batch shape of derived state space models.
735	Instantiate this model as a Distribution over specified `num_timesteps`.
736	Sample from the joint prior over model parameters and trajectories.
737	Computes the min_event_ndims associated with a given list of bijectors.
738	Convert a vector size to a matrix size.
739	Sorts an array and returns the indices that would sort the array.
740	Numpy implementation of `tf.sort`. Sorts the values in ascending or descending order.
741	Return the accumulated density of a normal distribution up to `x`.
742	Implements the cumulative distribution function of the standard normal distribution, often referred to as the "ndtr" function.
743	The inverse of the CDF of the Normal distribution function. Returns x such that the area under the pdf from minus infinity to x is equal to p.
744	Logarithm of the Normal distribution function (CDF).
745	Calculate the asymptotic series used in log_ndtr.
746	Calculate the inverse error function value for a given input.
747	Compute the log of the cumulative distribution function (CDF) of the Laplace distribution for a given input `x`.
748	Joint log probability function for a model with two rates and a mixing parameter.
749	Runs HMC on the text-messages unnormalized posterior.
750	True if the given index_points would yield a univariate marginal.
751	Compute the marginal of this Gaussian process over function values at given index points.
752	Return `index_points` if not None, else `self._index_points`. Raises ValueError if both are None.
753	Creates an stacked IAF bijector.
754	Runs one iteration of NeuTra.
755	Performs a bootstrap sampling process, training a bijector using Adam optimization, and returning the results after a specified number of training steps.
756	Convenience function to calculate the squared difference between two tensors.
757	Enables uniform interface to value and batch jacobian calculation.
758	Decorator that prevents computation of the second derivatives for a tensor.
759	Performs distributional transform of the mixture samples.
760	Split a covariance matrix into block-diagonal marginals of given sizes.
761	Decompose a joint posterior into components.
762	Decompose an observed time series into contributions from each component using a structural time series model.
763	Decompose a forecast distribution into contributions from each component.
764	Converts dense `Tensor` to `SparseTensor`, dropping `ignore_value` cells.
765	Defers an operator overload to `attr`.
766	Returns a human-readable representation of a tensor's numpy value.
767	Get the shape of the random variable as a TensorShape.
768	Get the sample shape of the random variable as a 1-D `Tensor`.
769	Get tensor that the random variable corresponds to. If the value is not already set, sample it from the distribution's sample function. Raises NotImplementedError if the distribution does not implement the sample function.
770	Evaluates and returns the value of a random variable in a given session.
771	Convert the TensorFlow EagerTensor value to a NumPy array.
772	Computes the posterior distribution for the mean of a Normal distribution given a prior Normal distribution, known scale, sum of observations, and number of observations.
773	Build a scale-and-shift function using a multi-layer neural network.
774	Generate points uniformly distributed on a unit hypersphere.
775	Returns the unnormalized log density of an LKJ distribution.
776	Returns the log normalization of an LKJ distribution.
777	Return explict dtype from args_list if exists, else preferred_dtype.
778	Factory for implementing summary statistics, eg, mean, stddev, mode.
779	Helper to broadcast a tensor using a list of target tensors.
780	Pdf evaluated at the peak.
781	Estimate a lower bound on effective sample size for each independent chain.
782	Estimate the effective sample size for a single Tensor argument using autoregressive (AR) model.
783	Calculates the potential scale reduction for a single state tensor in a Markov Chain Monte Carlo (MCMC) context.
784	Get number of elements of `x` in `axis`, as type `x.dtype`.
785	Broadcast a listable secondary_arg to that of states.
786	Use Gauss-Hermite quadrature to form quadrature on positive-reals.
787	Use LogNormal quantiles to form quadrature on positive-reals.
788	Returns a new `_Mapping` instance with arguments merged with self. Handles merging of x, y, ildj, and kwargs, and raises an error if both individual arguments and a mapping are specified simultaneously.
789	Supports weak referencing by removing specified cache key from the cache value.
790	Helper to merge which handles merging one value.
791	Converts nested `tuple`, `list`, or `dict` to nested `tuple`.
792	Computes the doubling increments for the left end point.
793	Finds the index of the optimal set of bounds for each chain, which is the smallest set of bounds for which both edges lie outside the slice.
794	**Summary:**  
Returns the bounds of the slice at each stage of doubling procedure for a given `target_log_prob` and initial `x_initial` points.
795	Samples from the slice by applying shrinkage for rejected points.
796	Applies the one-dimensional slice sampling algorithm to generate the next state of a Markov chain.
797	Creates a value-setting interceptor for Edward2 random variable objects.
798	Create a function that takes an Edward probabilistic program and returns its log joint function.
799	Filters inputs to be compatible with function `f`'s signature.
800	Network block for VGG.
801	Builds a tree for the No-U-Turn Sampler (NUTS) algorithm at a given tree depth and state. The function takes various inputs including the current state, target log probability, gradients, momentum, direction, depth, step size, and more. It returns the states and their properties for the forward and reverse paths, as well as the number of states in the subtree. The function uses leapfrog integration and random decisions to propose new states and determine if the trajectory should continue.
802	Wraps value and gradients function to assist with None gradients.
803	Returns if two given states and momentum do not exhibit a U-turn pattern.
804	Runs one step of leapfrog integration.
805	Log-joint probability given a state's log-probability and momentum.
806	Returns samples from a Bernoulli distribution.
807	Creates closure which produces `loc`, `scale` params from `tf.get_variable`
808	Creates a function to build Normal distributions with trainable parameters.
809	Creates multivariate standard Normal distribution.
810	Deserializes the Keras-serialized function.
811	Serializes a Python function for Keras.
812	Broadcasts `from_structure` to `to_structure`. If `from_structure` is a singleton, it is tiled to match the structure of `to_structure`. Elements in `from_structure` are not copied if tiling occurs.
813	Eagerly converts a nested structure to a TensorFlow tensor, recursing into nested structures when necessary.
814	Converts `args` to `Tensor`s.
815	Calls `fn` with `args`, possibly expanding `args` based on its type.
816	Returns TensorFlow attributes related to shape and Python built-ins.
817	Creates a mixture of Gaussians prior distribution.
818	Helper utility to make a field of images.
819	Downloads a file.
820	Builds fake MNIST-style data for unit testing.
821	Helper to validate block sizes.
822	Verifies that elements in `flat_xs` do not broadcast by checking their shapes.
823	Constructs a trainable `tfd.MultivariateNormalTriL` distribution.
824	Constructs a trainable `tfd.Bernoulli` distribution parameterized by logits using a dense layer transformation.
825	Constructs a trainable `tfd.Normal` distribution using a linear transformation of the input tensor.
826	Constructs a trainable `tfd.Poisson` distribution parameterized by log rate.
827	Applies one step of Euler-Maruyama method.
828	Compute diffusion drift at the current location `current_state`.
829	Computes the log acceptance-correction for the Metropolis-Hastings kernel using normal proposal density.
830	Compute `volatility_fn` results and grads, if needed.
831	Helper to broadcast `volatility_parts` to the shape of `state_parts`.
832	Build transition matrix for an autoregressive StateSpaceModel.
833	Computes graph and static `sample_shape`.
834	Calls `fn`, appropriately reshaping its input `x` and output.
835	Calls `fn` and appropriately reshapes its output.
836	The binomial cumulative distribution function, where `k` is the number of successes, `n` is the number of trials, and `p` is the probability of success on an individual trial. Note that when `k=n`, the function returns 1 for safe derivatives.
837	Executes `model`, creating both samples and distributions.
838	Latent Dirichlet Allocation in terms of its generative process.
839	Creates the variational distribution for LDA using a neural network encoder.
840	Returns a summary of the learned topics based on their prior weights and the most relevant words.
841	Load the 20 newsgroups dataset and return it as a tf.data.Dataset.
842	Builds fake data for unit testing.
843	Builds iterators for train and evaluation data.
844	Minimize using Hessian-informed proximal gradient descent. This function solves the regularized minimization problem for a convex C^2 function, typically the negative log likelihood of a model.
845	Add control dependencies to the commitment loss to update the codebook.
846	Helper method to save a grid of images to a PNG file.
847	Save images visualizing model reconstructions.
848	Load a Bernoulli MNIST dataset from a directory and split name.
849	Returns a `np.dtype` based on the input `dtype`.
850	Returns a non-reference `dtype` based on this `dtype`.
851	Returns whether the given data type is boolean.
852	Returns whether this is a complex floating point type.
853	Returns the maximum representable value in a specified data type.
854	Return the string name for a `dtype`.
855	Returns the number of bytes to represent this `dtype`.
856	Asserts all items are of the same base type. Returns the validated type, or None if neither expected_type nor items provided. Raises a ValueError if any types do not match.
857	Validate and return float type based on tensors and dtype.
858	Minimizes an objective function using the Nelder Mead simplex algorithm.
859	Perform a single iteration of the Nelder Mead algorithm
860	Creates the condition function pair for a reflection to be accepted.
861	Creates the condition function pair for an expansion step.
862	Creates the condition function pair for an outside contraction.
863	Shrinks the simplex around the best vertex. Returns the shrunk simplex and the objective function value at the shrunk simplex.
864	Replaces an element at supplied index.
865	Returns True if the simplex has converged. The convergence is determined by whether the variation of the objective function value over the vertices of the simplex is smaller than the `func_tolerance` or if the simplex size is smaller than the `position_tolerance`.
866	Prepare the arguments for a simplex optimization problem, ensuring that the initial simplex and corresponding objective values are correctly computed and handled based on user input.
867	Evaluates the objective function at the specified initial simplex.
868	Constructs a standard axes-aligned simplex and evaluates the objective function at its vertices.
869	Evaluates the objective function on a batch of points.
870	Save a PNG plot with histograms of weight means and stddevs.
871	Save a PNG plot visualizing posterior uncertainty on heldout data.
872	Build fake MNIST-style data for unit testing
873	Returns initializer configuration as a JSON-serializable dict.
874	Instantiates an initializer from a configuration dictionary.
875	Numpy matmul wrapper.
876	Compute standard deviation, covariance, and variance using a helper function.
877	Computes the log of the exponentially weighted moving mean of the exp and updates a `tf.Variable` in a numerically stable and lock-free manner.
878	Ensures non-scalar input has at least one column.
879	Generates a `Tensor` consisting of `-1` or `+1`, chosen uniformly at random.
880	Generates `Tensor` of positive reals drawn from a Rayleigh distribution.
881	Convenience function which chooses the condition based on the predicate.
882	Finish computation of log_prob on one element of the inverse image.
883	Finish computation of prob on one element of the inverse image.
884	Helper which rotates dimensions of input tensor either left or right based on the value of needs_rotation_const.
885	The inverse operation of tf.nn.batch_normalization.
886	Check if a BatchNormalization layer is valid. Specifically, it verifies that the layer is an instance of `tf.keras.layers.BatchNormalization` or `tf.compat.v1.layers.BatchNormalization`, and that `renorm` and `virtual_batch_size` are both `False`. If any of these conditions are not met, a `ValueError` is raised.
887	Slices a single parameter of a distribution
888	Computes the override dictionary of sliced parameters.
889	Applies a single slicing step to dist, returning a new instance.
890	Applies a sequence of slice or copy-with-overrides operations to `dist`.
891	Slices `dist` along its batch dimensions. Helper for tfd.Distribution.
892	Runs multiple Fisher scoring steps.
893	Returns Python callable that indicates fitting procedure has converged based on small relative norm weights change.
894	Helper function to sanitize and prepare input arguments for the `fit` method, ensuring they are in the correct Tensor format and dtype.
895	Returns the number of columns in a given Tensor.
896	Wrap originalFn, preferring to call staticFn when inputs are static.
897	Wraps a function with the docstring of another function, ensuring the argument specifications match.
898	Helper function for statically evaluating predicates in cond.
899	Computes the rank of a tensor given its shape.
900	Like tf.case, except attempts to statically evaluate predicates.
901	Helper function to standardize op scope.
902	Computes the standard deviation of a mixture distribution given the mixture weights, component means, and component standard deviations.
903	Creates a LinearOperator representing a lower triangular matrix.
904	Creates a LinearOperator representing a diagonal matrix.
905	Infers distribution batch and event shapes from a location and scale.
906	Check if a `LinearOperator` is a known diagonal scale.
907	Checks validity of a scalar `distribution` init arg. valid here means:

  * `distribution` has scalar batch and event shapes.
  * `distribution` is `FULLY_REPARAMETERIZED`
  * `distribution` has expected dtype. Returns List of `tf.Assert` ops to run to enforce validity checks that could not be statically determined. Empty if `not validate_args`. Raises ValueError: If validate_args and distribution is not FULLY_REPARAMETERIZED ValueError: If distribution is statically determined to not have both scalar batch and scalar event shapes.
908	Pad dimensions of event tensors for mixture distributions to broadcast with categorical distribution.
909	Convenience function that chooses one of two values based on the predicate.
910	Move a single tensor dimension within its shape.
911	Ensures that the input tensor `x` is a non-negative tensor and optionally of integers. Asserts the non-negativity of `x` and raises an error if it contains fractional components. Returns the input tensor if all conditions are met.
912	Returns whether a and b have the same dynamic shape.
913	Helper which tries to return a static value.
914	Helper returning True if dtype is known to be unsigned.
915	Helper returning True if dtype is known to be signed.
916	Helper returning the largest integer exactly representable by dtype.
917	Return the smallest integer exactly representable by dtype.
918	Return True if the given dtype is an integer or boolean.
919	Embeds checks that categorical distributions don't have too many classes.
920	Compute the multinomial coefficient.
921	Circularly moves dims left or right.
922	Picks possibly different length row `Tensor`s based on condition.
923	Convenience function which statically broadcasts shape when possible.
924	Generate a new seed from the given seed and salt using MD5 hashing and masking.
925	Creates a matrix with values set above, below, and on the diagonal.
926	Returns the size of a specific dimension.
927	Validates quadrature grid, probs or computes them as necessary.
928	Returns parent frame arguments.

When called inside a function, returns a dictionary with the caller's function arguments. These are positional arguments and keyword arguments (kwargs), while variable arguments (*varargs) are excluded.

When called at global scope, this will return an empty dictionary, since there are no arguments.

WARNING: If caller function argument names are overloaded before invoking this method, then values will reflect the overloaded value. For this reason, we recommend calling `parent_frame_arguments` at the beginning of the function.
929	Transform a 0-D or 1-D Tensor to be 1-D.
930	Ensure `output_tensor` is evaluated only after all operations in `dependencies` have run.
931	Checks that `rightmost_transposed_ndims` is valid.
932	Checks that `perm` is a valid integer vector permutation.
933	Helper function to compute the event shape for forward and inverse operations, considering transpositions and permutations.
934	Returns the concatenation of the dimensions in `x` and `other`.
935	Returns a list of dimension sizes for a given object, or `None` if the rank is unknown.
936	Returns a shape combining the information in `x` and `other` using `tf.Dimension.merge_with()`. Raises a ValueError if `x` and `other` are not compatible.
937	Returns a shape based on `x` with at least the given `rank`.
938	Verify that source and target tensor shapes match, preferentially using static shapes where available.
939	Augment a sample shape to broadcast batch dimensions. Computes an augmented sample shape so that any batch dimensions not part of the distribution `partial_batch_dist` are treated as identical distributions.
940	Build a callable that performs one step for backward smoothing.
941	Backward update for a Kalman smoother.
942	Build a callable that performs one step of Kalman filtering.
943	Conjugate update for a linear Gaussian model.
944	Propagate a filtered distribution through a transition model.
945	Build a callable that performs one step of Kalman mean recursion.
946	Build a callable for one step of Kalman covariance recursion.
947	Build a callable for one step of Kalman sampling recursion.
948	Propagate a mean through linear Gaussian transformation.
949	Propagate covariance through linear Gaussian transformation.
950	Run the backward pass in Kalman smoother using Rauch, Tung and Striebel smoother as discussed in Kevin P. Murphy's book. The inputs are returned by the `forward_filter` function. Returns smoothed marginal distributions and their covariances.
951	Draw a joint sample from the prior over latents and observations.
952	Run a Kalman smoother to return posterior mean and cov.
953	```Calculate joint means for latent and observation variables via dynamic programming.```
954	Compute prior covariances for all variables via dynamic programming.
955	Push latent means and covariances forward through the observation model.
956	Computes the log-normalizer of the von Mises-Fisher (vMF) distribution.
957	The mode of the von Mises-Fisher distribution is the mean direction.
958	Applies a Householder rotation to `samples`.
959	Specialized inversion sampler for 3D.
960	Create a deep copy of a callable function.
961	Removes dictionary keys which have a specified value.
962	Recursively replace `dict`s with `_PrettyDict` for pretty printing.
963	Check args and return samples.
964	Returns `True` if input is `collections.namedtuple`-like
965	Helper to `choose` which expand_dims `is_accepted` and applies tf.where.
966	Helper function to apply `tf.where` based on `is_accepted` and handling namedtuples.
967	Elementwise addition of list members, replacing non-finite results with a specified alternative value.
968	Helper function to calculate the value and gradients of a given function.
969	Calls a function and computes the gradient of the result with respect to the arguments.
970	Constructs a for loop preferring a Python loop if `n` is statically known.
971	Repeatedly calls `loop_fn(state, elem)` and accumulates trace of results using `trace_fn`.
972	Wraps a setter to apply to the inner-most results in `kernel_results`.
973	Wraps a getter so it applies to the inner-most results in `kernel_results`.
974	Enables the `store_parameters_in_results` parameter in a chain of kernels, updating it to `True` recursively.
975	Replaces the rightmost dims in a `Tensor` representing a shape.
976	Replace the event shape dims of a `TensorShape`.
977	Checks that a shape Tensor is int-type and otherwise sane.
978	Condition to stop when any batch member converges, or all have failed.
979	Returns a dictionary to populate the initial state of the search procedure.
980	Performs the line search step of the BFGS search procedure using the Hager-Zhang line search method. Updates the state by computing a suitable step size and, if successful, adjusting the position and objective function values.
981	Restricts a function in n-dimensions to a given direction and computes the gradient of the restricted function along the restriction direction.
982	Updates the state by advancing its position based on given parameters and checks for convergence.
983	Check if the algorithm satisfies the convergence criteria.
984	Broadcast a value to match the batching dimensions of a target.
985	Compute the harmonic number from its analytic continuation.
986	Create a function to propose exchanges for replica exchange Monte Carlo.
987	Determine if a field name exists in `kernel_results` or `kernel_results.accepted_results` and return its value; raise an error if not found.
988	Get list of TensorArrays holding exchanged states, and zeros.
989	Helper to `_covariance` and `_variance` which computes a shared scale.
990	Makes a function which applies a list of Bijectors' `log_det_jacobian`s.
991	Creates a function that applies a list of Bijectors' `forward` methods to a list of transformed state parts.
992	Makes a function which applies a list of Bijectors' `inverse`s.
993	Runs one iteration of the Transformed Kernel.
994	Apply `tf.where` conditionally to elements of a namedtuple or tensor.
995	Performs the secant square procedure of Hager Zhang for bracketing a root using update points generated by secant interpolation.
996	Helper function for the secant method to find roots of a function iteratively by narrowing down a bracketing interval based on function values and their gradients.
997	Helper function for secant-square step.
998	Squeezes a bracketing interval containing the minimum by finding a smaller nested interval that also brackets the minimum. If the supplied point does not lie within the interval, the current interval is returned.
999	Bracket the minimum given an initial starting point. Uses the supplied initial step size 'c' and the right end point of the provided search interval to find an interval containing a region with points satisfying Wolfe conditions. Applies the Hager Zhang bracketing algorithm and returns an updated left and right end point of the interval.
1000	Bisects an interval and updates to satisfy opposite slope conditions.
1001	Refine a bracket by narrowing down until opposite slope conditions are met.
1002	Checks if the supplied values are finite.
1003	Checks whether the Wolfe or approximate Wolfe conditions are satisfied.
1004	Returns the secant interpolation for the minimum. The secant method is used to find the roots of nonlinear functions, particularly for finding the minimum by applying it to the derivative of the function. The method assumes opposite slopes at the endpoints of the interval, ensuring that the new point is always bracketed by the interval.
1005	Create a function implementing a step-size update policy.
1006	Applies `num_leapfrog_steps` of the leapfrog integrator for Hamiltonian Monte Carlo (HMC).
1007	Computes the log acceptance-correction for the Metropolis-Hastings algorithm in the context of HMC, adjusting for the momentum-based sampling.
1008	Runs one iteration of Hamiltonian Monte Carlo.
1009	Creates initial `previous_kernel_results` using a supplied `state`.
1010	Constructs a ResNet18 model with Bayesian layers.
1011	Network block for ResNet.
1012	Create the encoder function.
1013	Create a decoder function to map encodings to a distribution over words using a given number of topics and words.
1014	Create a function to generate a prior distribution for a Dirichlet distribution. The prior distribution is a Dirichlet distribution with parameters initialized to a softplus-inverse of the initial value. The function returns the prior distribution and a list of trainable parameters.
1015	Implement Markov chain Monte Carlo via repeated TransitionKernel steps. This function samples from an Markov chain at current_state and whose stationary distribution is governed by the supplied TransitionKernel instance (kernel).
1016	A multi-layered topic model over a documents-by-terms matrix.
1017	Learnable Deterministic distribution over positive reals.
1018	Learnable Gamma via concentration and scale parameterization.
1019	Loads NIPS 2011 conference papers and processes the data to subset to papers in 2011 and words appearing in at least two documents and having a total word count of at least 10.
1020	Shared initialization logic for amplitude and length_scale parameters.
1021	Get the KL function registered for classes a and b.
1022	Reads an image from a file path and returns an image tensor.
1023	Downloads the sprites data and returns the saved filepath.
1024	Create a character sprite from a set of attribute sprites.
1025	Create a sequence from a character sprite tensor based on action metadata, direction, and specified length.
1026	Creates a random sequence.
1027	Creates a tf.data pipeline for the sprites dataset.
1028	Checks that `distributions` satisfies all assumptions.
1029	Flatten a list of kernels which may contain _SumKernel instances.
1030	Flattens a list of kernels which may contain _ProductKernel instances.
1031	Build fake CIFAR10-style data for unit testing.
1032	Counts the number of occurrences of each value in an integer array `arr`.
1033	Bin values into discrete intervals based on given edges.
1034	Count how often `x` falls in intervals defined by `edges`.
1035	Compute quantiles of a tensor along a specified axis.
1036	Get static number of dimensions and assert that some expectations are met.
1037	Insert the dims in `axis` back as singletons after being removed.
1038	Convert possibly negatively indexed axis to a list of non-negative integers.
1039	Move dims corresponding to `axis` in `x` to the end, then flatten.
1040	Sort a TensorFlow tensor along its last dimension using `top_k`.
1041	Build an ordered list of Distribution instances for component models.
1042	The Amari-alpha Csiszar-function in log-space, which is a member of the set of convex functions \( F \), is defined differently based on the value of `alpha`. When `self_normalized` is `True`, the function ensures that the divergence remains non-negative even when `p` and `q` are unnormalized measures. The function may be numerically unstable for very large values of `|logu|` when `alpha != 0` and/or `self_normalized = True`. For more information, refer to the paper by A. Cichocki and S. Amari. The function takes `logu`, `alpha`, `self_normalized`, and `name` as input and returns the Csiszar-function evaluated at `u = exp(logu)`.
1043	Calculates the reverse Kullback-Leibler Csiszar-function in log-space.
1044	The Jensen-Shannon Csiszar-function in log-space, which measures the similarity between two probability distributions.
1045	The Pearson Csiszar-function evaluated in log-space.
1046	The Squared-Hellinger Csiszar-function in log-space.
1047	Calculate the Triangular Csiszar-function in log-space.
1048	The T-Power Csiszar-function in log-space. It calculates the Csiszar-function based on the values of `logu`, `t`, and whether it is self-normalized.
1049	Calculate the Log1p-Abs Csiszar-function in log-space.
1050	The Jeffreys Csiszar-function in log-space.
1051	The Modified-GAN Csiszar-function in log-space implements a convex function used in information theory, with an option to be self-normalized.
1052	Calculates the dual Csiszar-function in log-space for a given Csiszar-function.
1053	Symmetrizes a Csiszar-function in log-space using a given Csiszar-function.
1054	Monte-Carlo approximation of the Csiszar f-Divergence. A Csiszar-function is a member of { f:R_+ to R : f convex }. The Csiszar f-Divergence for Csiszar-function f is given by D_f[p(X), q(X)] := E_{q(X)}[ f( p(X) / q(X) ) ] ~= m**-1 sum_j^m f( p(x_j) / q(x_j) ), where x_j ~iid q(X). Tricks: Reparameterization and Score-Gradient: When q is "reparameterized", i.e., a diffeomorphic transformation of a parameterless distribution, we can swap gradient and expectation. However, if q is not reparameterized, TensorFlow's gradient will be incorrect. Example Application: The Csiszar f-Divergence is a useful framework for variational inference. Args: f: Python callable representing a Csiszar-function in log-space p_log_prob: Python callable taking a sample from q and returning the natural-log of the probability under distribution p. num_draws: Integer scalar number of draws used to approximate the f-Divergence expectation. use_reparametrization: Python bool. When None, automatically set to: q.reparameterization_type == tfd.FULLY_REPARAMETERIZED When True uses the standard Monte-Carlo average. When False uses the score-gradient trick. seed: Python int seed for q.sample name: Python str name prefixed to Ops created by this function Returns: monte_carlo_csiszar_f_divergence: float-like Tensor Monte Carlo approximation of the Csiszar f-Divergence Raises: ValueError: if q is not a reparameterized distribution and use_reparametrization = True. TypeError: if p_log_prob is not a Python callable.
1055	Helper to `csiszar_vimco`; computes `log_avg_u`, `log_sooavg_u`.
1056	Assert that Tensor x has expected number of dimensions.
1057	Like `tf.batch_gather`, but broadcasts to the left of axis.
1058	Broadcasts the event or distribution parameters.
1059	Importance sampling with a positive function, in log-space
1060	Broadcasts the event and samples.
1061	Apply BFGS scheme to minimize a differentiable function.
1062	Validates a provided inverse Hessian by checking its positive definiteness and symmetry.
1063	Update the BGFS state by computing the next inverse hessian estimate, provided the state has not already converged or failed.
1064	Applies the BFGS update to the inverse Hessian estimate.
1065	Computes the product of a matrix with a vector on the right. Supports dynamic shapes and batched computation.
1066	Computes the outer product of two possibly batched vectors.
1067	Transpose a possibly batched matrix.
1068	Maybe add `ndims` ones to `x.shape` on the right.
1069	Return `Tensor` with right-most `ndims` summed.
1070	Function to compute the square root of a tensor with a finite gradient at zero.
1071	Return common dtype of arg_list, or None.
1072	Applies the L-BFGS algorithm to minimize a differentiable function.
1073	Given a value and gradients function along with initial position, number of correction pairs, and tolerance, this function generates an initial state for L-BFGS optimization and returns an `LBfgsOptimizerResults` object.
1074	Computes the search direction to follow at the current state using the L-BFGS two-loop recursion algorithm.
1075	Creates a `tf.Tensor` suitable to hold `k` element-shaped tensors.
1076	Conditionally push new vectors into a batch of first-in-first-out queues.
1077	Computes whether each square matrix in the input is positive semi-definite.
1078	Returns whether the input matches the given determinant limit.
1079	Returns a uniformly random `Tensor` of "correlation-like" matrices.
1080	Returns rejection samples from trying to get good correlation matrices.
1081	Computes a confidence interval for the mean of a Bernoulli distribution using the Clopper-Pearson method. Raises ValueError if samples are not a 1-D array or if they contain values other than the distribution's supported values.
1082	Computes confidence intervals for the volumes of correlation matrices using the Clopper-Pearson method.
1083	Computes the von Mises CDF and its derivative via series expansion.
1084	Computes the von Mises CDF and its derivative via Normal approximation.
1085	Performs one step of the differential evolution algorithm.
1086	Applies the Differential evolution algorithm to minimize a function.
1087	Convert input parameters to tensors and ensure initial positions and populations are iterable.
1088	Find the population member with the lowest value.
1089	Checks whether the convergence criteria have been met.
1090	Constructs the initial population by either using the provided initial population or adding random normal noise to the initial position.
1091	Performs crossover for a population based on the given mutant population, crossover probability, and seed.
1092	Computes the mutated vectors for each population member.
1093	Generates an array of indices suitable for mutation operation in differential evolution.
1094	Converts the input arg to a list if it is not a list already. Returns a tuple of two elements. The first is a Python list of `Tensor`s containing the original arguments. The second is a boolean indicating whether the original argument was a list or tuple already.
1095	Returns a Tensor of the specified `dtype`, with a value of 0 if `tol` is None. Optionally validates that `tol` is non-negative.
1096	Apply the soft thresholding operator to a tensor.
1097	Clips values to a specified min and max while leaving gradient unaltered.
1098	Build an iterator over training batches.
1099	Save synthetic images as PNG files.
1100	Converts a sequence of productions into a string of terminal symbols.
1101	Runs the model forward to generate a sequence of productions.
1102	Runs the model forward to return a stochastic encoding.
1103	Integral of the `hat` function, used for sampling.
1104	Inverse function of `_hat_integral`.
1105	Compute the matrix rank; the number of non-zero SVD singular values.
1106	Compute the Moore-Penrose pseudo-inverse of a matrix.
1107	Solves systems of linear equations `A X = RHS` given LU factorizations.
1108	Computes a matrix inverse given the matrix's LU decomposition.
1109	Returns list of assertions related to `lu_reconstruct` assumptions.
1110	Returns list of assertions related to `lu_solve` assumptions.
1111	Construct a block diagonal rank 2 SparseTensor from a batch of SparseTensors.
1112	Checks that input is a `float` matrix.
1113	Computes the neg-log-likelihood gradient and Fisher information for a GLM.
1114	Fit a Generalized Linear Model (GLM) using coordinate-wise FIM-informed proximal gradient descent. This method employs both L1 and L2 regularization, utilizing the negative Fisher Information Matrix as an approximation for the Hessian in a second-order quasi-Newton method. suitable for large, sparse data sets.
1115	Generate the slices for building an autoregressive mask.
1116	Generate the mask for building an autoregressive dense layer.
1117	A autoregressively masked dense layer for neural network architectures.
1118	Returns a degree vectors for the input based on the specified input order
1119	Return a list of degree vectors, one for each input and hidden layer.
1120	Returns a list of binary mask matrices enforcing autoregressivity.
1121	Returns a masked version of the given initializer.
1122	Build the layer with the given input shape, handling the event shape and constructing the masks for autoregressive operations.
1123	Apply a transformation to the input tensor using a neural network and reshape the output accordingly.
1124	Sample a multinomial.
1125	Build a zero-dimensional MVNDiag object
1126	Build an observation_noise_fn that observes a Tensor timeseries.
1127	Build regression weights from model parameters.
1128	Computes the number of edges on the longest path from a node to the root.
1129	Create tuple of str tuple-str pairs representing resolved & sorted DAG.
1130	Creates lists of callables suitable for JDSeq using a probability chain rule approach.
1131	Builds distribution functions and their arguments from a model.
1132	Compute the negative variational lower bound for a Variational Gaussian Process (VGP) given observations and index points, with options to scale the KL divergence loss and control the TensorFlow name scope.
1133	Given the full training set (parameterized by `observations` and `observation_index_points`), compute the optimal variational location and scale for the VGP. This is based on the method suggested in [Titsias, 2009][1].
1134	Build utility method to compute whether the season is changing.
1135	Build change-of-basis matrices for constrained seasonal effects. 

This method builds the matrix that transforms seasonal effects into effect residuals (differences from the mean effect), and additionally projects these residuals onto the subspace where the mean effect is zero.
1136	Build a function computing transitions for a seasonal effect model.
1137	Generates a transition noise model for a SeasonalStateSpaceModel, adjusting variance based on whether the current season has ended.
1138	Build transition noise distribution for a ConstrainedSeasonalSSM.
1139	Returns `True` if given observation data is empty. Emptiness means either 1. Both `observation_index_points` and `observations` are `None`, or 2. The "number of observations" shape is 0.
1140	Ensure observation data and locations have consistent shapes.
1141	Adds a learning rate scheduler to the contained `schedules`
1142	Configure checkpoint settings.
1143	Configure constant clipping settings.
1144	Performs an optimization and returns the resulting model as a BigDL layer.
1145	Set train summary
1146	Set validation summary. A ValidationSummary object contains information necessary for the optimizer to know how often the logs are recorded, where to store the logs and how to retrieve them, etc. For details, refer to the docs of ValidationSummary.
1147	Create an optimizer based on the input type.
1148	Sets new training dataset for optimizer reuse
1149	Set the interval of recording for each indicator.
1150	Parses or downloads MNIST data if `train_dir` is empty.
1151	Parse or download news20 if source_dir is empty. Return a list of (tokens, label).
1152	Parse or download the pre-trained GloVe word2vec if source_dir is empty.
1153	Configures the learning process. Must be called before fit or evaluate.
1154	Trains a model for a fixed number of epochs on a dataset, supporting distributed and local training modes, with optional validation data.
1155	Evaluate a model on a given dataset in distributed mode.
1156	Use a model to do prediction. Depending on the distributed flag, the prediction is done in either distributed mode (RDD) or local mode (Numpy array).
1157	Get mnist dataset and parallelize into RDDs.
1158	Preprocess MNIST dataset by normalizing and transforming into Sample of RDDs.
1159	When to end the optimization based on input option.
1160	Set validation and checkpoint for distributed optimizer.
1161	Return the broadcasted value
1162	Call API in PythonBigDL
1163	Call a Java function with the provided arguments and return the result.
1164	Converts each Python object in the RDD to a Java object using Pyrolite and returns a JavaRDD of Objects.
1165	Convert Python object into Java
1166	Convert a bigdl activation layer given the name of the activation as a string.
1167	Convert a ndarray to a DenseTensor which would be used in Java side.
1168	get label as ndarray from ImageFeature
1169	Reads a parquet file as a DistributedImageFrame.
1170	write ImageFrame as parquet file
1171	get image from ImageFrame
1172	Get image list from ImageFrame
1173	Conversion of an ImageFrame to a label tensor RDD and conversion of each tensor to a NumPy array.
1174	Get prediction rdd from ImageFrame.
1175	Generates output predictions for the input samples, processing the samples in a batched way.
1176	Optimize the model by the given options
1177	Apply a transformer to images in "inputCol" and save the transformed results in "outputCols".
1178	Save a Keras model definition to JSON with given path.
1179	Define a convnet model in Keras 1.2.2
1180	Predict the class labels for data using a distributed model.
1181	Set weights for this layer.
1182	Get weights for this layer
1183	Save a model to protobuf files for TensorFlow inference. Placeholders are added as input nodes. Inputs include names and shapes.
1184	Set training mode of the layer
1185	Loads a pre-trained Torch model from the specified path.
1186	Load a pre-trained Keras model using a JSON path for the model definition and an HDF5 path for the weights.
1187	Create a python Criterion by a java criterion object
1188	Loads weights from a JSON configuration and an HDF5 file using the specified model.
1189	Load IMDB dataset Transform input data into an RDD of Sample
1190	Define a recurrent convolutional model in Keras 1.2.2
1191	Return a list of shape tuples if there are multiple inputs. Return one shape tuple otherwise.
1192	Return a list of shape tuples if there are multiple outputs. Return one shape tuple otherwise.
1193	Get mnist dataset with features and label as ndarray. Data would be downloaded automatically if it doesn't present at the specific location.
1194	Reads or downloads the MovieLens 1m data if the `data_dir` is empty and returns a 2D numpy array with user indices and item indices.
1195	Get and return the jar path for bigdl if exists.
1196	Check if spark version is below 2.2
1197	Exports variable tensors from a TensorFlow checkpoint file into a dictionary.
1198	Save a variable dictionary to a Java object file, so it can be read by BigDL
1199	Expand and tile tensor along given axis
1200	Collecting possible continuations of length <= n for every node
1201	Computes weighted sum of memory elements using simple attention mechanism.
1202	Computes weighted sum of inputs conditioned on state.
1203	Compute BLEU score of translated segments against one or more references.
1204	Returns an opened file object for writing dialog logs.
1205	Logs a single dialog utterance to the current dialog log file, handling different types of utterances and ensuring the log file does not exceed a specified size.
1206	Takes a dictionary of variable names and their corresponding gradient updates, along with an optimizer and learning rate, and returns summary operations for the magnitude of the gradient updates relative to the variables.
1207	Dump the trained weights from a model to a HDF5 file.
1208	Read data by dataset_reader from specified config.
1209	Make training and evaluation of the model described in the configuration file.
1210	Exchange messages between basic pipelines and the Yandex.Dialogs service. If the pipeline returns multiple values, only the first one is forwarded to Yandex.
1211	Converts labels to one-hot vectors for multi-class multi-label classification.
1212	Convert vectors of probabilities to one-hot representations using confident threshold.
1213	Configures a TensorFlow session for a particular device with GPU options to allow growth and set the visible device list to '0'. Returns the configured TensorFlow session.
1214	Checks existence of the model file, loads the model if the file exists
1215	Extract values of momentum variables from optimizer.
1216	Updates the graph variables for learning rate and momentum if provided.
1217	Calculates F1 macro measure.
1218	Converts word to a tuple of symbols, optionally converts it to lowercase and adds capitalization label.
1219	Number of convolutional layers stacked on top of each other
1220	Bi-directional recurrent neural network (RNN) using GRU or LSTM cells.
1221	Stacked recurrent neural networks GRU or LSTM
1222	Highway convolutional network with skip connection and gating mechanism.
1223	Token embedding layer. Create matrix of for token embeddings. Can be initialized with given matrix (for example pre-trained with word2ve algorithm
1224	Implementation of a fast CuDNN GRU (Gated Recurrent Unit) layer in TensorFlow, utilizing the cuDNN library for efficient GPU computations. The function allows for configurable parameters such as the number of hidden units, number of layers, and whether to use trainable initial states for the hidden layers. It returns all hidden states and the last hidden state along with an option to handle variable sequence lengths.
1225	Create a CuDNN compatible GRU model that can be used to run on CPU.
1226	Fast CuDNN LSTM implementation
1227	CuDNN Compatible LSTM implementation. It should be used to load models saved with CudnnLSTMCell to run on CPU.
1228	Fast CuDNN Bi-GRU implementation
1229	Create a function to compute the forward and backward hidden states of a bidirectional LSTM using the CuDNN implementation.
1230	Fast CuDNN Stacked Bi-GRU implementation
1231	Dropout with the same drop mask for all fixed_mask_dims.
1232	Builds the network using Keras.
1233	Builds word-level network with convolutional and highway layers.
1234	Creates the basic network architecture, transforming word embeddings to intermediate outputs
1235	Trains model on a single batch
1236	Makes predictions on a single batch of data and returns the predicted label sequences.
1237	Transforms a sentence to Numpy array, which will be the network input.
1238	Transforms a sentence of tags to a Numpy array, which will be the network target.
1239	Calculate BLEU score
1240	Verify signature certificate URL against Amazon Alexa requirements.
1241	Extracts pycrypto X509 objects from SSL certificates chain string.
1242	Verifies if Amazon and additional certificates creates chain of trust to a root CA.
1243	Verifies Alexa request signature.
1244	Conducts series of Alexa SSL certificate verifications against Amazon Alexa requirements. Returns Amazon certificate if verification was successful None if not.
1245	Returns the JSON-compatible states of the RichMessage instance's nested controls.
1246	Returns a list of MS Bot Framework compatible states for the nested controls of a RichMessage instance.
1247	Returns list of Telegram compatible states of the RichMessage instance nested controls.
1248	Returns the list of Amazon Alexa-compatible states of the RichMessage instance's nested controls.
1249	DeepPavlov console configuration utility
1250	Constructs function encapsulated in the graph.
1251	Constructs function encapsulated in the graph and the session.
1252	Calculates the accuracy in terms of absolute coincidence between true and predicted values.
1253	Rounds predictions and calculates accuracy in terms of absolute coincidence.
1254	Loads weights for a pretrained language model from a file and returns a callable initializer for TensorFlow variables.
1255	Reads a file from a specified path and returns data as a list of tuples containing inputs and correct outputs for each data type.
1256	Builds agent based on PatternMatchingSkill and HighestConfidenceSelector.
1257	Transforms an array of integers to an array of one-hot encoded vectors.
1258	Prettifies a list of metrics by rounding their values to a specified precision.
1259	Populate settings directory with default settings files; if `force` is `True`, replace existing settings files with default ones. Returns `True` if any files were copied, otherwise `False`.
1260	Load model parameters from the specified path, excluding optimizer variables.
1261	Saves model parameters to self.save_path.
1262	Get train operation for given loss.
1263	Finds all dictionary words in d-window from word
1264	Sets the default operation costs for replacements, insertions, deletions, and transpositions, with an option to allow spaces.
1265	Initiates self-destruct timer.
1266	Routes Alexa requests to appropriate handlers.
1267	Infers DeepPavlov agent with raw user input extracted from Alexa request.
1268	Populates generated response with additional data conforming Alexa response specification. response: Raw user input extracted from Alexa request. request: Alexa request Returns: Response conforming Alexa response specification.
1269	Handles IntentRequest Alexa request
1270	Handles LaunchRequest Alexa request. Returns the response part of the response dict conforming to the Alexa specification.
1271	Handles all unsupported types of Alexa requests. Returns standard message.
1272	Define the pretty printing rules for the `Struct` class in iPython.
1273	Calculate perplexity from a list of model losses.
1274	Build and return the model described in the corresponding configuration file.
1275	Start interaction with the model described in the corresponding configuration file.
1276	Make a prediction using a model described in a configuration file, processing input from a file or standard input.
1277	Reads input file in CONLL-U format.
1278	Import a function object from a given string.
1279	Decorator for metric registration.
1280	Returns a metric callable with a corresponding name. Raises `ConfigError` if the name is not registered.
1281	Converts a string label representing a decay type into a corresponding special index.
1282	Find the best value according to given losses
1283	Embed one text sample and return either a list of embedded tokens or the mean embedding of tokens per sample.
1284	Parses requirements from requirements.txt.
1285	Calculates log loss based on true and predicted values.
1286	Exports a TensorFlow Hub module from a weight file to a specified directory.
1287	Format catalog item output
1288	Make an agent
1289	Parse parameters and run ms bot framework
1290	Download a file from a URL to one or multiple destination paths, with an option to force download if the file already exists. If not forcing, it checks if the file exists before downloading. It also uses a cache directory if specified to reduce redundant downloads.
1291	Extract the contents of a tar archive to a specified directory.
1292	Download a .tar.gz or .gz file and extract it to specified locations. If extraction is successful, the archive is deleted.
1293	Updates dict recursively
1294	Given a file URL, returns a URL with an MD5 query parameter.
1295	Given a URL, sets or replaces a query parameter and returns the modified URL.
1296	Returns Amazon Alexa compatible state of the PlainText instance. Creating Amazon Alexa response blank with populated "outputSpeech" and "card sections.
1297	Returns the JSON-compatible state of the Button instance.
1298	Returns MS Bot Framework compatible state of the Button instance.
1299	Returns a JSON-compatible state of the ButtonsFrame instance, including all nested buttons.
1300	Returns MS Bot Framework compatible state of the ButtonsFrame instance.
1301	Calculates F-1 score between y_true and y_predicted using the best matching y_true answer.
1302	Calculates recall at k ranking metric.
1303	Check whether at least one GPU is available.
1304	Recursively apply config's variables values to its property
1305	Parse config's variables and apply their values to all its properties.
1306	Convert relative paths to absolute with resolving user directory.
1307	Builds and returns the Component from corresponding dictionary of parameters.
1308	Thread run method implementation.
1309	Deletes a Conversation instance given its key.
1310	Conducts cleanup of periodical certificates with expired validation.
1311	Conducts a series of Alexa request verifications against Amazon Alexa requirements.
1312	Processes Alexa requests and returns responses.
1313	Returns a class object with the specified name.
1314	Registers classes that can be initialized from a JSON configuration file. If no name is provided, the class name is converted to snake-case.
1315	Returns a registered class object with the name given in the string.
1316	Extracts the full regularization path explored during lambda search from a glm model.
1317	Creates a custom GLM model using the given coefficients.
1318	Create H2OCluster object from a list of key-value pairs.
1319	Shut down the H2O server
1320	Determine if the H2O cluster is running or not.
1321	Print current cluster status information. If `detailed` is `True`, also print detailed information about each node.
1322	List all jobs performed by the cluster.
1323	Return the list of all known timezones.
1324	Update information in this object from another H2OCluster instance.
1325	Returns the parameters for the metalearner algorithm as a dictionary. If the parameters are not provided, it returns None. If the parameters are provided as a list with a single value, it simplifies the dictionary to a single key-value pair.
1326	Repeatedly test a function waiting for it to return True.
1327	Return the summary for a single column for a single Frame in the h2o cluster.
1328	Delete a frame on the h2o cluster, given its key.
1329	Return a model builder or all of the model builders known to the h2o cluster.
1330	Check a dictionary of model builder parameters on the h2o cluster using the given algorithm and model parameters.
1331	Score a model on the h2o cluster on the given Frame and return only the model metrics.
1332	ModelMetrics list.
1333	Delete a model on the h2o cluster, given its key.
1334	Pretty tabulated string of all the cached data, and column names
1335	Creates a new reservation for the specified number of EC2 instances and waits for them to come up, setting up SSH and tagging if required.
1336	Terminate all instances given by their IDs in the specified region.
1337	Stop all the instances given by their IDs.
1338	Start all the instances given by their IDs.
1339	Reboot all the instances given by their IDs.
1340	Wait for ssh service to appear on given hosts
1341	Return fully qualified function name.
1342	Given a frame and a compiled function code, find the corresponding function object within the frame.
1343	Return function's declared arguments as a string.
1344	Return piece of text, wrapped around if needed.
1345	Wait until job's completion.
1346	Train the H2O model using specified parameters.
1347	Fits an H2O model within a scikit-learn pipeline or grid search framework.
1348	Obtain parameters for this estimator. Used primarily for sklearn Pipelines and sklearn grid search.
1349	Helper function to handle caught signals. Sets global flags, prints message, and terminates `g_runner`.
1350	Clear the output directory
1351	Remove sandbox directories if they exist under the parent_dir.
1352	Look at the stdout log and figure out which port the JVM chose. If successful, port number is stored in self.port; otherwise the program is terminated. This call is blocking, and will wait for up to 30s for the server to start up.
1353	Look at the stdout log and wait until the cluster of proper size is formed. This call is blocking. Exit if this fails.
1354	Normal node shutdown, ignoring failures for now.
1355	Normal cluster shutdown.
1356	Return an ip to use to talk to this cluster.
1357	Return a port to use to talk to this cluster.
1358	Return the coordinates of the ROC curve for a given set of data.
1359	Determines vec_size for a pre-trained model after basic model verification by checking if the first column is a string and if there is only one string column.
1360	Mean absolute error regression loss.
1361	Mean squared error regression loss.
1362	Median absolute error regression loss
1363	Explained variance regression score function.
1364	Check and assert that a variable has the specified type, otherwise raises an H2OTypeError if it does not match the expected type.
1365	Asserts that a string variable matches a provided regular expression. Raises an error if it does not match.
1366	Assert that variable satisfies the provided condition.
1367	Retrieve arguments for assertion methods.
1368	Check if the variable is of the specified type.
1369	Return the name of the provided type.
1370	Attempt to find the source code of the `lambda_fn` within the string `src`.
1371	Return True if the variable does not match any of the types and False otherwise.
1372	Check whether the provided value is a valid enum constant.
1373	Retrieve the config as a dictionary of key-value pairs.
1374	Find and parse config file, storing all variables in ``self._config``.
1375	Return possible locations for the .h2oconfig file, one at a time.
1376	Starts the progress bar and returns only when the progress reaches 100%. The `progress_fn` parameter is the executor function, which should either return a single progress level or a tuple of progress level and delay. The function handles exceptions such as `StopIteration` and `KeyboardInterrupt`, raising them to inform the upstream caller of any unexpected interruptions.
1377	Save the current model progress into ``self._progress_data`` and update ``self._next_poll_time`` based on the provided result and current timestamp.
1378	Computes t0, x0, v0, ve for model parameter recalculation.
1379	Estimate the moment when the underlying process is expected to reach completion.
1380	Determine when to query the progress status next. This function is used if the external progress function did not return a time interval for when it should be queried next.
1381	Calculate the modelled progress state for the given time moment. Returns the progress level and progress speed.
1382	Return the projected time when progress level `x_target` will be reached using the Newton method.
1383	Print the rendered string to the stdout, optionally adding a newline and ensuring correct cursor position handling.
1384	Compute widths of all widgets during initial rendering
1385	Find current STDOUT's width, in characters.
1386	Inform the widget about the encoding of the underlying character stream and set appropriate bar symbols based on the encoding.
1387	Returns encoding map as an object that maps 'column_name' -> 'frame_with_encoding_map_for_this_column_name'.
1388	Retrieve an existing H2OFrame from the H2O cluster using the frame's id.
1389	Reload frame information from the backend H2O server.
1390	The type for the given column.
1391	Extract columns of the specified type from the frame
1392	Display summary information about the frame. Summary includes min/mean/max/sigma and other rollup data.
1393	Generate an in-depth description of this H2OFrame. This will print to the console the dimensions of the frame, names/types/summary statistics for each column, and the first ten rows of the frame. Additionally, it can retrieve and display chunk and distribution summaries if requested.
1394	Return the first ``rows`` and ``cols`` of the frame as a new H2OFrame.
1395	Multiplies the current frame by another matrix, returning a new H2OFrame as the result. Raises an error if the matrices are not compatible for multiplication.
1396	Get the factor levels. Returns a list of lists, one list per column, of levels.
1397	This function returns the number of levels for each categorical column in a dataset.
1398	Set all column values to one of the levels.
1399	Replace the levels of a categorical column. New levels must be aligned with the old domain. This call has copy-on-write semantics.
1400	Change names of columns in the frame.
1401	Change names of all columns in the frame.
1402	Set a new name for a column.
1403	Test whether elements of an H2OFrame are contained in the `item`. Returns an H2OFrame of 0s and 1s indicating whether each element in the original H2OFrame is contained in `item`.
1404	Builds a fold assignments column for cross-validation based on row numbers modulo `n_folds`.
1405	Build a fold assignment column with the constraint that each fold has the same class distribution as the fold column.
1406	Compactly display the internal structure of an H2OFrame.
1407	Obtain the dataset as a python-local object, either as a pandas DataFrame or a nested list.
1408	Pop a column from the H2OFrame at index i.
1409	Compute quantiles for the data in the H2OFrame.
1410	Append multiple H2OFrames to this frame, column-wise or row-wise.
1411	Append data to this frame column-wise.
1412	Append data to this frame row-wise.
1413	Split a frame into distinct subsets of size determined by the given ratios.
1414	Return a new `GroupBy` object using this frame and the desired grouping columns.
1415	Return a new Frame that fills NA along a given axis and along a given direction with a maximum fill length.
1416	Imputes missing values into the frame, modifying it in-place.
1417	Merge two datasets based on common column names.
1418	Reorder levels of an H2O factor for one single column of a H2O frame. The levels of a factor are reordered such that the reference level is at level 0, and all remaining levels are moved down as needed.
1419	In-place insertion of missing values into the current dataset.
1420	Compute the variance-covariance matrix of one or two H2OFrames.
1421	Compute the correlation matrix of one or two H2OFrames.
1422	Compute a pairwise distance measure between all rows of two numeric H2OFrames.
1423	Convert columns in the current frame to categoricals.
1424	Split the strings in the target column on the given regular expression pattern.
1425	For each string in the frame, count the occurrences of the provided pattern. If countmatches is applied to a frame, all columns of the frame must be type string, otherwise, the returned frame will contain errors. The pattern here is a plain string, not a regular expression. We will search for the occurrences of the pattern as a substring in element of the frame. This function is applicable to frames containing only string or categorical columns.
1426	For each string, return a new string that is a substring of the original string. If end_index is not specified, the substring extends to the end of the original string. If start_index is longer than the length of the string, or is greater than or equal to the end_index, an empty string is returned. Negative start_index is coerced to 0.
1427	Return a copy of the column with leading characters removed.
1428	Computes the Shannon entropy for each string in the frame, returning an H2OFrame of entropies. If a string is empty, the entropy is 0.
1429	Counts the number of valid substrings with 2 characters or more for each string in a line-separated text file.
1430	Computes the counts of values appearing in a column or co-occurrence counts between two columns.
1431	Compute a histogram over a numeric column using various methods for bin selection, and optionally plot the histogram using matplotlib.
1432	Compute the iSAX index for a DataFrame, assuming the data consists of numeric time series. Generates an H2OFrame containing the time series name, iSAX word string representation, and binary representation.
1433	Substitutes the first occurrence of a pattern in a string with a replacement.
1434	Translate characters from lower to upper case for a particular column.
1435	Searches for matches to a specified pattern within elements of a string column in a H2OFrame. Returns matching positions or a logical vector based on the specified parameters.
1436	Remove rows with NAs from the H2OFrame.
1437	Conduct a diff - 1 transform on a numeric frame column.
1438	Checks each element in an H2OFrame to determine if it is NA (missing) and returns a new H2OFrame with 1s (indicating NA) and 0s (indicating non-NA) for each element.
1439	Extracts the "minute" part from a date column and returns it as a single-column H2OFrame.
1440	Generates a column of random numbers drawn from a uniform distribution [0,1) and having the same data layout as the source frame.
1441	Constructs a column for performing a random stratified split.
1442	Cuts a numeric vector into categorical "buckets".
1443	Get the index of the max value in a column or row.
1444	Apply a lambda expression to an H2OFrame.
1445	Parse code from a string of text.
1446	Parse the provided file, and return Code object.
1447	Move the token by `drow` rows and `dcol` columns.
1448	Convert the parsed representation back into the source code.
1449	Get the sizes of each cluster.
1450	Return the centers from the KMeans model's output.
1451	The standardized centers for the kmeans model.
1452	Connect to an existing H2O server, remote or local.
1453	Perform a REST API request to a previously connected server.
1454	Verify the compatibility between the h2o-python module and the H2O server by checking their versions. If there is a mismatch, raise an error with guidance on how to resolve it. Additionally, warn the user if the H2O cluster version is too old.
1455	Import a single file or collection of files.
1456	Upload a dataset from the provided local path to the H2O cluster.
1457	Import a dataset that is already on the cluster.
1458	Import Hive table to H2OFrame in memory.
1459	Import SQL table to H2OFrame in memory.
1460	Import the SQL table that is the result of the specified SQL query to H2OFrame in memory. Creates a temporary SQL table from the specified SQL query, runs multiple SELECT SQL queries on the temporary table concurrently for parallel ingestion, then drops the table. Ensure H2O.jar is started with the JDBC driver in the classpath.
1461	Parse dataset using the parse setup structure.
1462	Return a deep clone of the frame data.
1463	Load a model from the server.
1464	Return the specified grid.
1465	Obtain a handle to the frame in H2O with the frame_id key.
1466	Retrieve the POJO for a given model and optionally download the h2o-genmodel.jar.
1467	Download an H2O data set to a CSV file on the local disk.
1468	Download H2O log files to disk.
1469	Exports a given H2OFrame to a specified path on the local machine, with options to overwrite existing files and export to multiple parts for large datasets.
1470	Converts an H2O data object into a python-specific object, pulling all data locally. Uses Pandas for parsing if available, otherwise returns a list-of-lists with character data. Optionally returns column names as the first element.
1471	Built-in demo facility to run H2O Python functions.
1472	Imports a data file within the 'h2o_data' folder.
1473	Create Model Metrics from predicted and actual values in H2O
1474	Uploads a given file into DKV and saves it under a specified key as a raw object.
1475	Upload a custom metric function into the H2O cluster. The function can be provided as a class or a string representation of the class. The function will then be uploaded and accessible under the specified H2O key.
1476	Check that the provided frame id is valid in Rapids language.
1477	Convert given number of bytes into a human readable representation, i.e. add prefix such as kb, Mb, Gb, etc. The `size` argument must be a non-negative integer.
1478	Return a "canonical" version of slice s.
1479	Return True if slice `s` is in "normalized" form.
1480	Score a Pandas DataFrame using a MOJO model stored in a zip file.
1481	Summarizes a CSV file and uses a MOJO model to generate predictions.
1482	The decorator to mark deprecated functions.
1483	Wait until grid finishes computing
1484	Obtain a hidden layer's details on a dataset.
1485	Print a detailed summary of the explored models.
1486	Print models sorted by metric.
1487	Get the hyperparameters of a model explored by grid search.
1488	Return the model parameters used to train the particular grid search model.
1489	Retrieve an H2OGridSearch instance. Optionally specify a metric by which to sort models and a sort order.
1490	Get the F1 values for a set of thresholds for the models explored. If all options are False (default), return the training metric value. If multiple options are True, return a dictionary of metrics with keys "train", "valid", and "xval".
1491	Return the Importance of components associcated with a pca model.
1492	Convert archetypes of the model into original feature space.
1493	Produces a scree plot of the importedances from the self._model_json['output']['importance']. The plot can either be a bar plot or a line plot.
1494	Convert names with underscores into camelcase.
1495	Dedent text to a specific indentation level.
1496	extract feature report values
1497	Take user input, parse it, and call other functions to execute commands, extract run summary, and store run result in a JSON file.
1498	Close an existing connection; once closed it cannot be used again.
1499	Return the session id of the current connection.
1500	Start logging all API requests to a specified destination. If no destination is provided, a new temporary file will be created.
1501	Make a copy of the `data` object, preparing it to be sent to the server. The data will be sent via x-www-form-urlencoded or multipart/form-data mechanisms. Both of them work with plain lists of key/value pairs, so this method converts the data into such format.
1502	Prepare `filename` to be sent to the server. The "preparation" consists of creating a data structure suitable for passing to requests.request().
1503	Logs the beginning of an API request.
1504	Logs response from an API request.
1505	Log the message `msg` to the destination `self._logging_dest`. If this destination is a file name, append the message to the file and close it immediately. If the destination is an open file handle, write the message there and do not close it.
1506	Prepare the given response to be handed over to the external caller.
1507	Helper function to print connection status messages when in verbose mode.
1508	Retrieve information about an AutoML instance.
1509	Download the POJO for the leader model in AutoML to the specified directory. If path is an empty string, then dump the output to screen.
1510	Download the leader model in AutoML in MOJO format.
1511	In-place fitting by computing means and standard deviations for subsequent transformations
1512	Scale an H2OFrame with the fitted means and standard deviations.
1513	Undo the scale transformation.
1514	Remove extra characters before the actual string we are looking for in a line of Jenkins console output.
1515	Find the slave machine where a Jenkins job was executed on and save this info.
1516	Find the git hash and branch info that a Jenkins job was taken from. It will save this information in g_failed_test_info_dict. In addition, it will delete this particular function handle off the temp_func_list as we do not need to perform this action again.
1517	Find if a Jenkins job has taken too long to finish and was killed. It will save this information in g_failed_test_info_dict.
1518	Find if a Jenkins job has failed to build. It will save this information in g_failed_test_info_dict and delete the function handle from temp_func_list.
1519	Find the build id of a jenkins job. It will save this information in g_failed_test_info_dict. In addition, it will delete this particular function handle off the temp_func_list as we do not need to perform this action again.
1520	From user input, grab the Jenkins job name and save it in `g_failed_test_info_dict`. Also, grab the Jenkins URL and the view name into `g_jenkins_url` and `g_view_name`.
1521	Scans through the Java output text and extracts bad Java messages that may occur during unit tests, excluding messages stored in `g_ok_java_messages`.
1522	Saves the log scraping results into log files for failed and passed tests, appending the build ID to the filenames.
1523	Concatenate all log files into a summary text file to be sent to users at the end of a daily log scraping.
1524	Write one log file into the summary text file.
1525	Loop through all non-unit test associated java messages and write them into a log file.
1526	Load in pickle file that contains dict structure with bad java messages to ignore per unit test or for all cases. The ignored bad java info is stored in g_ok_java_messages dict.
1527	Converts an enum constant string to canonical snake-case.
1528	Find synonyms using a word2vec model.
1529	Wait until the job finishes. This method will continuously query the server about the status of the job, until the job reaches a completion. During this time we will display (in stdout) a progress bar with % completion status.
1530	Converts the munging operations performed on H2OFrame into a POJO and saves it to a specified path. If the path is not specified, it prints the POJO code.
1531	Performs munging operations on a specified frame using steps defined in the object.
1532	Find the percentile of a list of values.
1533	Return a dictionary of the default parameters of the model.
1534	Dictionary of actual parameters of the model.
1535	Return hidden layer details.
1536	Retrieve the model's scoring history as an H2OTwoDimTable or a Pandas DataFrame.
1537	Print details and metrics of a model.
1538	Prints or returns the variable importances of a model, either as a list or as a Pandas DataFrame. If `use_pandas` is True, the function will return a Pandas DataFrame otherwise it will return a list. The function will first check if the model has variable importances. If not, it will print a warning message.
1539	Retreive the residual degress of freedom if this model has the attribute, or None otherwise.
1540	Return the coefficients for the model, optionally standardizing the data first.
1541	Download the POJO for this model to the directory specified by path. If path is an empty string, then dump the output to screen.
1542	Download the model in MOJO format, with the option to also download the h2o-genmodel.jar file.
1543	Save Model Details of an H2O Model in JSON Format to disk.
1544	Check that y_actual and y_predicted have the same length.
1545	Obtain a list of cross-validation models.
1546	GBM model demo.
1547	Deep Learning model demo. The demo uploads a dataset to H2O, parses it, and shows a description. It then divides the dataset into training and test sets, builds a GLM from the training set, and makes predictions for the test set. Finally, it displays default performance metrics.
1548	GLM model demo.
1549	Wait for a key press on the console and return it.
1550	Convert to a python 'data frame'.'''
1551	Prints the contents of the table, with optional header and truncated view for large tables.
1552	Start new H2O server on the local machine.
1553	Return the location of an h2o.jar executable.
1554	Produce potential paths for an h2o.jar executable.
1555	Retrieve the Hit Ratios. If all are False (default), then return the training metric value. If more than one option is set to True, then return a dictionary of metrics where the keys are "train", "valid", and "xval".
1556	Equivalent of csv.DictWriter, but allows `delimiter` to be a unicode string on Py2.
1557	Convert uri to absolute filepath
1558	Convert directory path to uri
1559	Parses lines of text to extract function and class names, excluding private ones, and returns them sorted.
1560	Make autodoc documentation template string for a module
1561	Return module sequence discovered from `self.package_name`.
1562	Generate API reST files.
1563	Make a reST API index file from written files
1564	Convert this confusion matrix into a 2x2 plain list of values.
1565	Load java messages that can be ignored pickle file into a dict structure g_ok_java_messages.
1566	Add new java messages to ignore from user text file.
1567	Update the `g_ok_java_messages` dictionary by adding or removing Java ignored messages based on the provided `message_dict` and `action`.
1568	Read a text file containing ignored Java messages and generate a dictionary structure with test names as keys and lists of ignored Java messages as values.
1569	Save the ignored java message dict stored in g_ok_java_messages into a pickle file for future use.
1570	Write the java ignored messages in g_ok_java_messages into a text file for humans to read.
1571	Parse user inputs and set the corresponding global variables to perform the necessary tasks.
1572	Illustrate what the various input flags are and the options should be.
1573	Find all python files in the given directory and all subfolders
1574	Search the file for any magic incantations. Returns a tuple containing the spell and any extra words if found, or None otherwise.
1575	Executed when script is run as-is. Processes each file located in ROOT_DIR, tokenizes, normalizes, and verifies the tokens.
1576	Transforms an H2OFrame using a MOJO Pipeline.
1577	Looks at the local directory for files with a specific start name, reads their contents, and summarizes the results into a dictionary.
1578	Print out the intermittents onto the screen for casual viewing. Also, print out where the giant summary dictionary is going to be stored.
1579	Produce the desired metric plot, specifically an ROC curve for the given data.
1580	Get the confusion matrix for the specified metric.
1581	Returns True if a deep water model can be built, or False otherwise.
1582	Remove data from the summary text file and the dictionary file for tests that occurred before a specified number of months.
1583	Return endpoints, grouped by the class which handles them.
1584	Set site domain and name.
1585	Adds the default_data to data and dumps it to a json.
1586	Comments last user_id's medias
1587	Returns login and password stored in `secret.txt`, allowing user selection if needed.
1588	Likes the media of a specified user.
1589	Likes last medias from a specified hashtag.
1590	Filter bot from real users.
1591	Reads a list from a file, with each line representing a single item. Returns the list if the file contains items, otherwise returns an empty list.
1592	Add a specific enqueue time to the message.
1593	Defer the message. This message will remain in the queue but must be received specifically by its sequence number in order to be processed. Raises exceptions if the message has been settled, message lock has already expired, session lock has already expired, or message settle operation fails.
1594	Gives the SAS URL to download the configurations for VPN sites in a resource group.
1595	Guess Python Autorest options based on the spec path. Expected path: specification/compute/resource-manager/readme.md
1596	Updates a running PowerShell command with more data
1597	Deletes the managed application definition based on the provided ID.
1598	Creates a new managed application definition or updates an existing one.
1599	Return the target URI for the request.
1600	Create connection for the request.
1601	Sends a request to a cloud service server and returns the response.
1602	Executes script actions on the specified HDInsight cluster.
1603	Check the availability of a Front Door resource name.
1604	Permanently deletes the specified soft-deleted Azure key vault by providing the vault name and location. Optionally accepts custom headers, determines the return type, and specifies polling behavior. Returns an LROPoller object that can be used to track the long-running operation.
1605	Return the URI for the authorization server if present, otherwise empty string.
1606	Extracts the host authority from the given URI.
1607	Return a CLI profile class.
1608	Return Credentials and default SubscriptionID of current loaded profile of the CLI.
1609	Gets predictions for a given utterance, in the form of intents and entities.
1610	Checks the availability of a name for global uniqueness.
1611	Opens the request with the specified method and URL.
1612	Sets up the timeout for the request.
1613	Sets the request header.
1614	Return all response headers as a string.
1615	Sends the request body, either as an empty VT_EMPTY for GET/HEAD requests or as a SAFEArray containing the request body.
1616	Gets status of response.
1617	Returns the status text of a response.
1618	Gets response body as a SAFEARRAY and converts the SAFEARRAY to str.
1619	Sets client certificate for the request.
1620	Connects to host and sends the HTTP request.
1621	Sends the headers of request.
1622	Sends either the specified request body or an empty request body.
1623	Gets the response and generates the _Response object.
1624	Simplified an ID to be more friendly for people by removing the namespace and prefix.
1625	Converts a Python name into a serializable name by applying a series of transformations.
1626	Verify whether two faces belong to the same person. Compares a face ID with a person ID.
1627	Adds a job to the specified account.
1628	get properties from entry xml
1629	Descent through a hierarchy of nodes, returning the list of children at the inner-most level. Only includes children sharing a common parent, excludes cousins.
1630	Recursively searches from the parent to the child, gathering all the applicable namespaces along the way.
1631	Converts xml response to service bus namespace
1632	Converts xml response to service bus region
1633	Converts xml response to service bus namespace availability
1634	Converts xml response to service bus metrics objects.
1635	Replaces the runbook draft content.
1636	Get domain name recommendations based on keywords.
1637	Asynchronous operation to modify a knowledgebase.
1638	A method that retrieves a collection of group object IDs for which the user is a member.
1639	Builds a package from a GitHub Pull Request (PR) number.
1640	Import data into Redis cache.
1641	Publish runbook draft.
1642	Renews the message lock to ensure it is not returned to the queue to be reprocessed. Raises an error if the message is sessionful.
1643	Replace alterations data.
1644	Adds a new version of a secret value resource.
1645	Returns system properties for the specified storage account.
1646	Returns the primary and secondary access keys for the specified storage account.
1647	Regenerates the primary or secondary access key for the specified storage account.
1648	Creates a new storage account in Windows Azure.
1649	Update the properties of a storage account in Windows Azure, including its label, description, geo-replication status, and account type.
1650	Deletes a specified storage account from Windows Azure.
1651	Checks to see if the specified storage account name is available, or if it has already been taken.
1652	Retrieves system properties for the specified hosted service including the service name, service type, affinity group, and optionally deployment details.
1653	Creates a new hosted service in Windows Azure. The method requires the service name and label, and optionally the description, location, affinity group, and extended properties. The service name must be unique within Windows Azure and can be used to access the hosted service. The label has a maximum length of 100 characters, and the description has a maximum length of 1024 characters. The location and affinity group are mutually exclusive, and one must be specified. The extended properties are a dictionary containing name/value pairs with a maximum of 50 properties.
1654	Deletes the specified hosted service from Windows Azure.
1655	Uploads a new service package and creates a new deployment on staging or production. Parameters include the service name, deployment slot, name, package URL, label, configuration, and optional flags for starting the deployment immediately and treating warnings as errors. Extended properties can also be provided.
1656	Deletes the specified deployment.
1657	Swaps the virtual IP between the staging and production deployment environments for a service.
1658	Initiates a change to the deployment configuration.
1659	Initiates a change in deployment status.
1660	Initiates an upgrade for a deployment in a hosted service.
1661	Specifies the next upgrade domain to be walked during manual in-place upgrade or configuration change.
1662	Requests a reboot of a role instance that is running in a deployment.
1663	Reinstalls and reinitializes the operating system on specified role instances in a cloud service deployment.
1664	Checks to see if the specified hosted service name is available, or if it has already been taken.
1665	Lists all of the service certificates associated with the specified hosted service.
1666	Returns the public data for the specified X.509 certificate associated with a hosted service.
1667	Add a certificate to a hosted service.
1668	Delete a service certificate from the certificate store of a hosted service.
1669	Retrieves information about the management certificate with the specified thumbprint.
1670	Add a management certificate to the list of management certificates.
1671	Delete Management Certificate.
1672	Returns the system properties associated with the specified affinity group.
1673	### Python Code Summary

**Method:** `create_affinity_group`

**Summary:** Creates a new affinity group for a specified subscription using the provided details.

**Parameters:**
- `name` (str): A unique name for the affinity group.
- `label` (str): A descriptive label for the affinity group (up to 100 characters).
- `location` (str): The data center location where the affinity group will be created.
- `description` (str, optional): A description of the affinity group (up to 1024 characters).

**Returns:**
- None
1674	Deletes an affinity group in the specified subscription.
1675	Lists subscription operations with optional filters for start and end time, object ID, operation result, and continuation token.
1676	Reserves an IPv4 address for the specified subscription.
1677	Deletes a reserved IP address from a specified subscription.
1678	Associate an existing reserved IP to a deployment.
1679	Disassociate an existing reserved IP address from the given deployment.
1680	Retrieves information about the specified reserved IP address.
1681	Retrieves the specified virtual machine.
1682	Provisions a virtual machine based on the supplied configuration.
1683	Adds a virtual machine to an existing deployment with the specified parameters.
1684	Update the specified virtual machine.
1685	Deletes the specified virtual machine.
1686	The Capture Role operation captures a virtual machine image to your image gallery, allowing you to create additional customized virtual machines. It requires parameters such as the service name, deployment name, role name, post-capture action, target image name, and target image label.
1687	Starts the specified virtual machine.
1688	Starts the specified virtual machines.
1689	Restart the specified virtual machine.
1690	Shuts down the specified virtual machine with options to retain or release compute resources after shutdown.
1691	Shuts down the specified virtual machines.
1692	Adds a DNS server definition to an existing deployment.
1693	Updates the IP address of a DNS server.
1694	Delete a DNS server from a deployment.
1695	Lists the versions of a resource extension that are available to add to a Virtual Machine.
1696	Replicates a VM image to multiple target locations. This operation is only for publishers. You must be registered as an image publisher with Microsoft Azure to call this.
1697	Unreplicate a VM image from all regions. This operation is only for publishers. You have to be registered as image publisher with Microsoft Azure to be able to call this.
1698	Share an already replicated OS image with specified permission.
1699	Creates a VM Image in the image repository using a specified set of virtual hard disks.
1700	Deletes a specified VM Image from the image repository associated with the specified subscription, optionally deleting the underlying VHD blob in Azure storage.
1701	Retrieve a list of VM Images from the image repository based on specified criteria.
1702	Updates a VM Image in the image repository associated with the specified subscription.
1703	Adds an OS image to the image repository.
1704	Updates an OS image in your image repository.
1705	Updates metadata elements from a given OS image reference.
1706	Deletes the specified OS image from your image repository. Optionally deletes the underlying VHD blob in Azure storage.
1707	Retrieves the specified data disk from a virtual machine.
1708	Adds a data disk to a virtual machine.
1709	Updates the specified data disk attached to the specified virtual machine.
1710	Remove the specified data disk from a virtual machine, optionally deleting the underlying VHD blob in Azure storage.
1711	Adds a disk to the user image repository. The disk can be an OS disk or a data disk.
1712	Updates an existing disk in your image repository.
1713	Deletes the specified data or operating system disk from your image repository. Optionally deletes the underlying vhd blob in Azure storage.
1714	Summarizes policy states for the resources under the management group.
1715	This is a temporary patch for uAMQP, setting up a message handler with specific configurations.
1716	Receive a batch of messages at once.
1717	Renew the session lock to retain access and prevent the connection from closing. This can be done periodically or as a background task using `azure.servicebus.AutoLockRenew`.
1718	Create or update a VM scale set.
1719	Converts SinglePlacementGroup property to false for a existing virtual machine scale set.
1720	Detect profanity and match against custom and shared blacklists.
1721	Creates a new key in Azure Key Vault and returns key parameters and attributes.
1722	Imports an externally created key into Azure Key Vault.
1723	Update attributes of a stored key in Azure Key Vault.
1724	Sets a secret in a specified key vault.
1725	Sets the specified certificate issuer.
1726	Create a Service Bus client from a connection string.
1727	Get an async client for a subscription entity.
1728	Get an async client for all subscription entities in the topic.
1729	Send one or more messages to the current entity.
1730	Get a Sender for the Service Bus endpoint with optional message timeout and session parameters.
1731	Get a Receiver for the Service Bus endpoint.
1732	Get a Receiver for the deadletter endpoint of the entity.
1733	Extracts request id from response header.
1734	Performs a GET request and returns the response.
1735	Performs a PUT request and returns the response.
1736	Waits for an asynchronous operation to complete using get_operation_status in a loop until the expected status is reached. The result is returned, and an exception is raised on timeout or error status if callbacks are not provided.
1737	Returns the status of the specified operation.
1738	Add additional headers for management.
1739	Assumes called on Travis, to prepare a package to be deployed. This method prints on stdout for Travis. Return is obj to pass to sys.exit() directly.
1740	Method for listing certificates in a specified key vault.
1741	Get list of available service bus regions.
1742	Lists the service bus namespaces defined on the account.
1743	Get details about a specific namespace.
1744	Create a new service bus namespace.
1745	Delete a service bus namespace.
1746	Checks if the specified service bus namespace is available or already taken.
1747	Retrieves the topics in the service namespace.
1748	Retrieves the notification hubs in the service namespace.
1749	Retrieves the relays in the service namespace.
1750	This operation gets rollup data for Service Bus metrics queue. Rollup data includes the time granularity for the telemetry aggregation as well as the retention settings for each time granularity.
1751	This operation retrieves rollup data for Service Bus metrics topic, including time granularity and retention settings for each granularity. It accepts parameters for the service bus namespace, queue name, and metric name, and returns the data in a Feeds format using _MinidomXmlToObject.convert_response_to_feeds.
1752	This operation retrieves rollup data for a Service Bus metrics notification hub, including the time granularity for telemetry aggregation and retention settings for each granularity.
1753	This function retrieves rollup data for Service Bus metric relays. Rollup data includes time granularity for telemetry aggregation and retention settings for each time granularity. It takes the namespace name, relay name, and metric name as input.
1754	Create a virtual environment in a directory.
1755	Create a venv with these packages in a temp dir and yielf the env.
1756	Create a new Azure SQL Database server.
1757	Reset the administrator password for a server.
1758	Gets quotas for an Azure SQL Database Server.
1759	Gets the event logs for an Azure SQL Database Server.
1760	Creates an Azure SQL Database server firewall rule.
1761	Update a firewall rule for an Azure SQL Database server.
1762	Delete an Azure SQL Database Server Firewall Rule.
1763	Retrieves the set of firewall rules for an Azure SQL Database Server.
1764	Gets the service level objectives for an Azure SQL Database server.
1765	Creates a new Azure SQL Database.
1766	Updates existing database details.
1767	Deletes an Azure SQL Database.
1768	List the SQL databases defined on the specified server name.
1769	Gets all legal agreements that user needs to accept before purchasing a domain.
1770	Closes down the handler connection. If the handler has already closed, this operation will do nothing. An optional exception can be passed in to indicate that the handler was shutdown due to an error. It is recommended to open a handler within a context manager as opposed to calling the method directly. This operation is not thread-safe.
1771	Close down the receiver connection. If the receiver has already closed, this operation will do nothing. An optional exception can be passed in to indicate that the handler was shut down due to an error.
1772	Get the session state. Returns None if no state has been set.
1773	Set the session state.
1774	Receive messages that have previously been deferred.
1775	Merge two `Reservation`s.
1776	Verifies that the challenge is a Bearer challenge and returns the key=value pairs.
1777	Purges data in an Log Analytics workspace by a set of user-defined filters
1778	Handle connection and service errors. Returns the action to take according to error type.
1779	Creates a new queue with the specified name and queue object, and returns True if successful, False if it already exists and fail_on_exist is True.
1780	Deletes an existing queue. This operation will also remove all associated state including messages in the queue.
1781	Retrieves an existing queue.
1782	Creates a new topic. Once created, this topic resource manifest is immutable.
1783	Retrieves the description for the specified topic.
1784	Creates a new rule for a subscription.
1785	Retrieves the description for the specified rule.
1786	Retrieves the rules that exist under the specified subscription.
1787	Creates a new subscription.
1788	Gets an existing subscription.
1789	Retrieves the subscriptions in the specified topic.
1790	Enqueues a message into the specified topic.
1791	Unlocks a message for processing by other receivers on a given subscription by deleting the lock object.
1792	Sends a batch of messages into the specified queue.
1793	Unlocks a message for processing by other receivers on a given queue.
1794	Receive a message from a queue for processing.
1795	Receives a message from a subscription for processing.
1796	Creates a new Event Hub.
1797	Updates an Event Hub.
1798	Retrieves an existing event hub.
1799	Sends a new message event to an Event Hub.
1800	Add additional headers for Service Bus.
1801	Return the signed string with token using the authorization method.
1802	Check if token expires or not.
1803	Returns token for the request.
1804	Pulls the query string out of the URI and moves it into the query portion of the request object. If there are already query parameters on the request the parameters in the URI will appear after the existing parameters.
1805	Reset Service Principal Profile of a managed cluster. Updates the service principal profile for a managed cluster.
1806	Delete itself if find queue name or topic name and subscription name.
1807	If the queue name or topic name and subscription name are found, the method unlocks itself by using the provided sequence number and lock token. If neither the queue name nor the topic name and subscription name are found, an AzureServiceBusPeekLockError is raised.
1808	Renews the lock on itself if a queue name, topic name, and subscription name are found.
1809	add addtional headers to request for message request.
1810	return the current message as expected by batch body format
1811	Gets the health of a Service Fabric cluster.
1812	Gets the health of a Service Fabric cluster using the specified policy.
1813	Removes or unregisters a Service Fabric application type from the cluster.
1814	Gets a list of repair tasks matching the given filters. This API supports the Service Fabric platform; it is not meant to be used directly from your code.
1815	Submits a batch of property operations.
1816	Simple error handler for azure
1817	Start capturing network packets for the site.
1818	Get the difference in configuration settings between two web app slots.
1819	Swaps two deployment slots of an app.
1820	Execute OData query for events.
1821	Add a face to a large face list. The input face is specified as an image with a targetFace rectangle.
1822	Reset the `auth_attempted` flag to `False` on redirects.
1823	Creates Migration configuration and starts migration of entities from Standard to Premium namespace.
1824	Publishes a batch of events to an Azure Event Grid topic.
1825	Moves resources from one resource group to another resource group.
1826	Sets a new default profile.
1827	Queries policy tracked resources under the management group.
1828	Create a queue entity with various properties such as lock duration, max size, duplicate detection, and more.
1829	Delete a queue entity from the service bus. Raises an exception if the queue does not exist and `fail_not_exist` is set to True.
1830	Create a topic entity.

- `topic_name`: The name of the new topic.
- `max_size_in_megabytes`: Optional. The max size to allow the topic to grow to.
- `requires_duplicate_detection`: Optional. Whether the topic will require every message with a specified time frame to have a unique ID. Non-unique messages will be discarded. Default value is False.
- `default_message_time_to_live`: Optional. The length of time a message will remain in the topic before it is either discarded or moved to the dead letter queue.
- `duplicate_detection_history_time_window`: Optional. The period within which all incoming messages must have a unique message ID.
- `enable_batched_operations`: Optional. May be overridden when sending specific messages but controls the default for the topic.
- Raises: `ServiceBusConnectionError` if the namespace is not found. Raises `AzureConflictHttpError` if a topic of the same name already exists.
1831	Delete a topic entity. Raises ServiceBusConnectionError if the namespace is not found. Raises ServiceBusResourceNotFound if the topic is not found and `fail_not_exist` is set to True.
1832	Create a subscription entity in Azure Service Bus.
1833	Create a Client from a Service Bus connection string.
1834	Get the properties of the entity as a dictionary.
1835	Whether the receivers lock on a particular session has expired.
1836	Creates a session for a node.

    - **input parameters:**
        - `resource_group_name`: The resource group name uniquely identifies the resource group within the user subscriptionId.
        - `node_name`: The node name (256 characters maximum).
        - `session`: The sessionId from the user.
        - `user_name`: Encrypted User name to be used to connect to node.
        - `password`: Encrypted Password associated with user name.
        - `retention_period`: Session retention period. Possible values include: 'Session', 'Persistent'.
        - `credential_data_format`: Credential data format. Possible values include: 'RsaEncrypted'.
        - `encryption_certificate_thumbprint`: Encryption certificate thumbprint.
        - `custom_headers`: headers that will be added to the request
        - `raw`: The poller return type is ClientRawResponse, the direct response alongside the deserialized response
        - `polling`: True for ARMPolling, False for no polling, or a polling object for personal polling strategy
    - **return value:** An instance of LROPoller that returns SessionResource or ClientRawResponse<SessionResource> if raw is True
1837	Creates an Azure subscription with the specified parameters and returns a LROPoller instance.
1838	Export logs that show API requests made by this subscription within a specified time window to identify throttling activities. Parameters include API request details, location, custom headers, response format, and polling options. Returns a poller instance with the operation result or the raw response.
1839	Scan output for exceptions
1840	Adds a chunk of tasks to the job. Retries chunk if body exceeds the maximum request size and retry tasks if failed due to server errors.
1841	Main method for worker to run.
1842	Builds the actual config for Jinja2 based on SDK config
1843	Resets the user password on an environment, which can take a while to complete.
1844	Starts an environment by starting all resources inside the environment. This operation can take a while to complete.
1845	Create message from response.
1846	Converts an XML etree element representing a rule to a `Rule` object.
1847	Converts an XML etree element representing a queue description to a Queue object.
1848	Converts entry element to topic
1849	Converts an etree XML element into a subscription object.
1850	Creates a new certificate inside the specified Batch account.
1851	Delete the specified certificate.
1852	Returns a SDK client initialized with current CLI credentials, CLI default subscription, and CLI default cloud. Parameters provided in kwargs will override CLI parameters and be passed directly to the client.
1853	Return a SDK client initialized with a JSON auth dict.
1854	Return a SDK client initialized with auth file.
1855	```python
Parse XML response and construct an object of the specified type with the data.
```
1856	Extracts properties from an XML element tree.
1857	Deletes the specified certificate associated with the Provisioning Service.
1858	Get a client for a queue entity.
1859	Get clients for all queue entities in the namespace.
1860	Get a client for a topic entity.
1861	Get a client for all topic entities in the namespace.
1862	Receives messages by sequence number that have been previously deferred.
1863	Settle messages that have been previously deferred.
1864	List the web sites defined on a specified webspace and website.
1865	Create a website with specified parameters and options.
1866	Delete a website with optional parameters to delete the last server farm and its metrics if applicable.
1867	Update a web site.
1868	Restart a web site.
1869	Get historical usage metrics for a specified website and webspace, with optional parameters for metrics, time range, and time grain.
1870	Get metric definitions of metrics available for the specified website.
1871	Get a site's publish profile as a string.
1872	Get a site's publish profile as an object.
1873	Updates the policies for the specified container registry.
1874	Create a new cloud service with the given parameters.
1875	Checks if a new job collection with the given name may be created, or if it is unavailable. Returns a Boolean true or false.
1876	Get details of a job collection.
1877	Completes the restore operation on a managed database.
1878	Cancel one or more messages that have previously been scheduled and are still pending.
1879	Wait until all pending messages have been sent. Returns a list of send results for each message. Each result is a tuple with a boolean indicating success and an error if the message failed.
1880	Reconnect the handler. If the handler was disconnected from the service with a retryable error, attempt to reconnect. This method will be called automatically for most retryable errors. Also, attempts to re-queue any messages that were pending before the reconnect.
1881	Writes a certificate file to the specified location and returns the subscription ID.
1882	Load any stored cookies for the plugin that have not expired.
1883	Returns the width of the string it would be when displayed.
1884	Drops characters by Unicode not by bytes, ensuring a specified maximum length.
1885	Clears out the previous line and prints a new one.
1886	Formats the file size into a human readable format.
1887	Formats elapsed seconds into a human readable format.
1888	Creates a status line with appropriate size.
1889	Progress an iterator and updates a pretty status line to the terminal. The status line contains:
- Amount of data read from the iterator
- Time elapsed
- Average speed, based on the last few seconds.
1890	Generate segment numbers and their availability times based on the stream type (static or dynamic).
1891	Yields segments that are available on a timeline, depending on whether the content is dynamic or static.
1892	Pauses the thread for a specified time. Returns False if interrupted by another thread and True if the time runs out normally.
1893	Add segment to the download pool and write queue.
1894	Puts a value into a queue but aborts if this thread is closed.
1895	Returns any parameters needed for Akamai HD player verification.
1896	Extract the nonce from an HTTP response to use in "signing" URL requests.
1897	Retrieves the Video Packet ID from the HTML content of a given URL.
1898	Wrapper around json.loads. Wraps errors in custom exception with a snippet of the data in the message.
1899	Parse XML data with additional features such as handling incorrect encoding, stripping namespaces, and wrapping errors in a custom exception.
1900	Parse a query string into a dict.
1901	Search for a key in a nested dict or list of nested dicts and return the values.
1902	Spawn the process defined in `cmd` Convert `parameters` to options using the short and long option prefixes. If a list is given as the value, the parameter is repeated with each value. If `timeout` is set, the spawn will block until the process returns or the timeout expires. Return the spawned process.
1903	Brute force regex based HTML tag parser. Finds tags without considering standards compliance.
1904	Attempts to parse a DASH manifest file and return its streams
1905	Determines the Unicode encoding of a JSON text sample based on the pattern of NULL bytes in the first 4 octets
1906	Parses JSON from a response.
1907	Parses XML from a response.
1908	Parses a semi-colon delimited list of cookies.
1909	Parses a semi-colon delimited list of headers.
1910	Parses a semi-colon delimited list of query parameters.
1911	Return the message for this LogRecord, merging any user-supplied arguments with the message.
1912	A factory method to create specialized LogRecords, which can be overridden in subclasses.
1913	Attempts a login to LiveEdu.tv.
1914	Loads a plugin from the same directory as the calling plugin. The path used is extracted from the last call in module scope, so this must be called only from module level in the originating plugin or the correct plugin path will not be found.
1915	Update or remove keys from a query string in a URL
1916	Reads FLV tags from a file descriptor or buffer and returns them with adjusted timestamps.
1917	Find all the arguments required by name.
1918	Checks if a file already exists and prompts the user to overwrite it if it does. If the file exists and `force` is not set, the program will ask for confirmation. If the user does not want to overwrite, the program will exit. If the file does not exist or `force` is set, the program will continue.
1919	Decides where to write the stream. Depending on arguments it can be one of these:
- The stdout pipe
- A subprocess' stdin pipe
- A named pipe that the subprocess reads from
- A regular file
1920	Creates a HTTP server listening on a given host and port. If host is empty, listen on all available interfaces, and if port is 0, listen on a random high port.
1921	Repeatedly accept HTTP connections on a server. Forever if the serving externally, or while a player is running if it is not empty.
1922	Continuously output the stream over HTTP.
1923	Prepares a filename for a player using a given plugin and stream.
1924	Opens a stream, reads 8192 bytes, and checks for errors before proceeding.
1925	Open stream, create output and finally write the stream to output.
1926	Reads data from a stream and writes it to the specified output, with optional progress reporting based on the output type.
1927	A function that processes a selected stream by determining how to handle it based on provided arguments. It can output the stream as a command-line, JSON, URL, or directly to a selected output.
1928	Fetches streams using correct parameters.
1929	Attempts to fetch streams repeatedly until some are returned or limit is hit.
1930	Returns the real stream name of a synonym.
1931	Formats a dict of streams by filtering out synonyms and displaying them next to the stream they point to. Streams are sorted based on their quality.
1932	Handle URL resolution and stream fetching.
1933	Outputs a list of all plugins Streamlink has loaded.
1934	Opens a web browser to allow the user to grant Streamlink access to their Twitch account.
1935	Attempts to load plugins from a list of directories.
1936	Parses command-line arguments and loads them from configuration files. Arguments can be specified in multiple config files, and unknown arguments are handled based on the `ignore_unknown` flag. The function also processes stream arguments to be case-insensitive and sets `args.url` from `args.url_param` if `args.url` is not provided.
1937	Console setup.
1938	Sets the global HTTP settings, such as proxy, headers, and other related options.
1939	Loads any additional plugins, including those from a specified extra plugin directory.
1940	Sets Streamlink options based on command line arguments.
1941	Show current installed versions
1942	Try to find a stream_id
1943	Extracts an iframe URL from the given text and returns the corresponding stream using the session's streams method. Falls back if no stream_id is found.
1944	Sets general options used by plugins and streams originating from this session object.
1945	Returns current value of specified option.
1946	Sets a specific option for a plugin originating from this session object.
1947	Returns current value of plugin specific option.
1948	Attempts to find a plugin that can use this URL. The default protocol (http) will be prefixed to the URL if not specified.
1949	Attempt to load plugins from the specified path.
1950	Converts a timestamp to seconds with various formats including hh:mm:ss, 00h00m00s, and seconds.
1951	Return function that checks if the given value starts with the specified string.
1952	Checks if the string value ends with another string.
1953	Returns a function that checks if the input string contains a given substring.
1954	Get a named attribute from an object. When a default argument is given, it is returned when the attribute doesn't exist.
1955	Filters out unwanted items using the specified function. Supports both dicts and sequences, key/value pairs are expanded when applied to a dict.
1956	Applies a function to each value in a sequence or dictionary, expanding key-value pairs when a dictionary is provided.
1957	Decorator to validate URL attributes.
1958	Find a XML element via xpath.
1959	Find a list of XML elements via xpath.
1960	Extract and return embedded player URL from theHTTP response.
1961	Parse a M3U8 playlist from a string of data.
1962	Check if the current player supports adding a title. Returns the player's name if supported, otherwise returns None.
1963	Login to Steam
1964	Returns the stream_id contained in the HTML.
1965	Returns a nested list of different stream options. Each entry contains a stream_url and stream_quality_name for each stream occurrence found in the HTML.
1966	login and update cached cookies
1967	Creates a key-function mapping. The return value from the function should be either a tuple containing a name and stream or an iterator of tuples containing a name and stream. Any extra arguments will be passed to the function.
1968	Makes a call against the API.
1969	Starts a session against Crunchyroll's server and logs the session ID.
1970	Returns the data for a certain media item.
1971	Creates a new CrunchyrollAPI object, initiates its session, and tries to authenticate it either by using saved credentials or the user's username and password.
1972	Compress a byte string.
1973	Show character in readable format
1974	Show string or char.
1975	Reads n bytes from the stream on a byte boundary.
1976	Get the value used for processing, with optional extra bits
1977	Generate a long explanation of the value from the numeric value with optional extra bits, used by Layout.verboseRead when printing the value.
1978	Store decodeTable, and compute lengthTable, minLength, maxLength from encodings.
1979	Set the decode table and update the minimum and maximum lengths based on a given length table.
1980	Show all words of the code in a nice format.
1981	Read symbol from stream.Returns symbol, length.
1982	**Example 3:**

Input:
```python
def explanation(self, index, extra=None):
    """Expanded version of Code.explanation supporting extra bits.
    If you don't supply extra, it is not mentioned.
    """
    extraBits = 0 if extra is None else self.extraBits(index)
    if not hasattr(self, 'extraTable'):
        formatString = '{0}{3}'
        lo = hi = value = self.value(index, extra)
    elif extraBits==0:
        formatString = '{0}{2}: {3}'
        lo, hi = self.span(index)
        value = lo
    else:
        formatString = '{0}{1} {2}: {3}-{4}; {3}+{5}={6}'
        lo, hi = self.span(index)
        value = lo+extra
    return formatString.format(
        self.description and self.description+': ',
        'x'*extraBits,
        self.bitPattern(index),
        lo, hi,
        extra,
        value,
    )
```

Output:
Expanded version of Code.explanation supporting extra bits. If you don't supply extra, it is not mentioned.
1983	Override if you don't define value0 and extraTable
1984	Give the range of possible values in a tuple.
1985	Give count and value.
1986	Make a nice mnemonic based on the given index.
1987	Give mnemonic representation of meaning. verbose compresses strings of x's
1988	Build the action table from the text above
1989	Perform the proper action
1990	Generate a hex dump of data from a stream within a specified range.
1991	Process a brotli stream.
1992	Read MNIBBLES and meta block length; if empty block, skip block and return true.
1993	Handle uncompressed data.
1994	Reads block type switch descriptor for a given kind of blockType.
1995	In place inverse move to front transform.
1996	Read prefix code array
1997	Turns a intensity array to a monochrome 'image' by replacing each intensity by a scaled 'color'. Values in I between vmin and vmax get scaled between 0 and 1, and values outside this range are clipped to this.
1998	Similar to monochrome processing, but now handles multiple colors by combining intensity data with specified colors.
1999	Convert a vaex DataFrame to a pyarrow Table.
2000	Adds method f to the Dataset class
2001	Converts cartesian velocities into proper motions and radial velocities.
2002	Convert proper motion to perpendicular velocities.
2003	Return a graphviz.Digraph object with a graph of the expression.
2004	Computes counts of unique values and handles null and missing values based on the parameters provided.
2005	Map values of an expression or in-memory column according to an input dictionary or a custom callable function.
2006	Create a vaex app, the QApplication mainloop must be started.
2007	Open a list of filenames, and return a DataFrame with all DataFrames concatenated.
2008	Connect to a SAMP Hub, wait for a single table load event, disconnect, download the table, and return it as a DataFrame.
2009	Create a vaex DataFrame from an Astropy Table.
2010	Create an in memory DataFrame from numpy arrays.
2011	Similar to from_arrays, but convenient for a DataFrame of length 1.
2012	Create an in memory DataFrame from a pandas DataFrame.
2013	Read a CSV file using pandas and convert to a DataFrame directly.
2014	Connect to hostname supporting the vaex web api.
2015	Creates a Zeldovich DataFrame.
2016	Concatenate a list of DataFrames.
2017	Create a virtual column as a memory-efficient alternative to numpy.arange.
2018	ADD a dataset and add it to the UI
2019	Evaluate an expression on the server.
2020	Decorator to transparently accept delayed computation.
2021	Returns a set of columns that the current selection depends on within a DataFrame `ds`.
2022	Helper function for returning tasks results, result when immediate is True, otherwise the task itself, which is a promise
2023	Sort table by given column number.
2024	Read header data from Gadget data file 'filename' with Gadget file type 'gtype'. Returns offsets of positions and velocities and header information.
2025	Clear the cursor by hiding visible lines and the ellipse, and optionally saving the current background for blitting.
2026	Make sure all plots are done before continuing.
2027	Open document by the default handler of the OS.
2028	Flexible writing, where f can be a filename or f object. If filename, it will be closed after writing.
2029	Combines all masks from a list of arrays, and logically ors them into a single mask
2030	Evaluates expression, drops the result, useful for benchmarking since Vaex is usually lazy.
2031	Return the first element of a binned `expression`, where the values each bin are sorted by `order_expression`.
2032	Calculate the mean for an expression, possibly on a grid defined by binby.
2033	Calculate the sum for the given expression, possible on a grid defined by binby
2034	Calculate the standard deviation for the given expression, optional on a grid defined by binby
2035	Calculate the covariance matrix for x and y or more expressions, possibly on a grid defined by binby.
2036	Calculate the minimum and maximum for expressions, possibly on a grid defined by binby.
2037	Calculate the minimum for given expressions, possibly on a grid defined by binby.
2038	Calculate the median, possibly on a grid defined by binby. The value is approximated by calculating the cumulative distribution on a grid defined by percentile_shape and percentile_limits.
2039	Viz 1d, 2d or 3d in a Jupyter notebook
2040	Count non-missing values for an expression on an array representing Healpix data.
2041	Plots data using Healpix projection, allowing for various customizations such as colormap, smoothing, and interactive mode.
2042	Plot a 3D visualization using the given data and parameters.
2043	Return the numpy dtype for the given expression, if not a column, the first row will be evaluated to get the dtype.
2044	Returns the directory where private files for a DataFrame are stored. Optionally creates the directory if it does not exist.
2045	Return the internal state of the DataFrame in a dictionary.
2046	Sets the internal state of the df using a dictionary state.
2047	Removes the file with the virtual column etc, it does not change the current virtual columns etc.
2048	Writes virtual columns, variables and their ucd, description, and units to a YAML file. This method is called after virtual columns or variables are added and updates the information when opening a file. Note that reopening a DataFrame twice may result in file corruption.
2049	Writes all meta data, including UCDs, descriptions, and units
2050	Generate a Subspaces object, based on a custom list of expressions or all possible combinations based on dimension.
2051	Set the variable to an expression or value defined by `expression_or_value`.
2052	Evaluates the variable given by name.
2053	Returns the result of evaluating a selection mask for a block scope.
2054	Return a dict containing the ndarray corresponding to the evaluated data
2055	Return a copy of the DataFrame, if selection is None, it does not copy the data, it just has a reference
2056	Convert a vaex DataFrame to a pandas DataFrame.
2057	Returns an arrow Table object containing the arrays corresponding to the evaluated data.
2058	Converts the data to an Astropy table object.
2059	Add an in memory array as a column to the DataFrame
2060	Renames a column, updating in-memory name and other associated attributes
2061	Converts Cartesian coordinates to polar coordinates and adds the resulting radial distance and azimuth angle as virtual columns. Optionally propagates uncertainties and specifies whether the azimuth angle should be in radians or degrees.
2062	Convert velocities from a cartesian to a spherical coordinate system.
2063	Convert cartesian to polar velocities.
2064	Convert cylindrical polar velocities to Cartesian.
2065	Applies a 2D rotation transformation to the specified columns.
2066	Convert spherical coordinates to cartesian coordinates.
2067	Converts Cartesian coordinates to spherical coordinates.
2068	Add a virtual column to the DataFrame.
2069	Deletes a virtual column from a DataFrame.
2070	Add a variable to a DataFrame. A variable may refer to other variables and virtual columns, and expressions may refer to variables.
2071	Deletes a variable from a DataFrame.
2072	Return a shallow copy a DataFrame with the last n rows.
2073	Display the first and last n elements of a DataFrame.
2074	Give a description of the DataFrame.
2075	Display the DataFrame from row i1 till i2
2076	Set the current row, and emit the signal signal_pick.
2077	Return a list of column names based on the given filters
2078	Return a DataFrame, where all columns are 'trimmed' by the active range.
2079	Returns a DataFrame containing only rows indexed by indices.
2080	Return a DataFrame containing only the filtered rows.
2081	Return a DataFrame with a random set of rows.
2082	Returns a list containing random portions of the DataFrame.
2083	Returns a list containing ordered subsets of the DataFrame based on the specified fraction(s).
2084	Return a sorted DataFrame, sorted by the expression 'by'.
2085	Returns a new DataFrame where the virtual column is turned into an in memory numpy array.
2086	Undo selection for a given name, updating the selection history index and emitting a signal.
2087	Redo selection for the given name using the specified executor.
2088	Can selection name be redone?
2089	Perform a selection using a boolean expression, combining it with a previous selection using the specified mode. Records selections in a history tree, supporting undo/redo actions per name.
2090	Create a selection that selects rows having non-missing values for specified columns, using namesake method.
2091	### Example 4:
**Input:**
```python
def dropna(self, drop_nan=True, drop_masked=True, column_names=None):
    """Create a shallow copy of a DataFrame, with filtering set using select_non_missing.

    :param drop_nan: drop rows when there is a NaN in any of the columns (will only affect float values)
    :param drop_masked: drop rows when there is a masked value in any of the columns
    :param column_names: The columns to consider, default: all (real, non-virtual) columns
    :rtype: DataFrame
    """
    copy = self.copy()
    copy.select_non_missing(drop_nan=drop_nan, drop_masked=drop_masked, column_names=column_names,
                            name=FILTER_SELECTION_NAME, mode='and')
    return copy
```

**Output:**
Drop rows based on NaN or masked values in specified columns
2092	Select a 2D rectangular box in the space given by x and y, bounded by limits.
2093	Select a n-dimensional rectangular box bounded by limits.
2094	Select a circular region centered on xc, yc, with a radius of r, and apply a selection based on the specified mode and name.
2095	Select an elliptical region centered on xc, yc, with specified width, height, and angle.
2096	For performance reasons, a lasso selection is handled differently.
2097	Invert the selection, i.e. what is selected will not be, and vice versa.
2098	Sets the selection object
2099	Execute a selection based on the given name and executor.
2100	Finds a non-colliding name by optional postfixing.
2101	Returns a list of virtual columns that are not used in any other virtual column.
2102	Return a graphviz.Digraph object with a graph of all virtual columns.
2103	Mark a column as categorical with given labels, assuming zero-based indexing.
2104	Encode column as ordinal values and mark it as categorical.
2105	Provides direct access to the data as numpy arrays, making it convenient for IPython with small DataFrames and enabling tab-completion. Only real columns can be accessed, and virtual columns should use DataFrame.evaluate(...).
2106	Gets the length of the DataFrames. If selection is False, it returns len(df).
2107	Join the columns of the other DataFrame to this one, assuming the ordering is the same
2108	Concatenates two DataFrames, adding the rows of one the other DataFrame to the current, returned in a new DataFrame.
2109	Exports the DataFrame to a vaex hdf5 file
2110	Add a column to the DataFrame
2111	Adds method f to the DataFrame class.
2112	Decorate a function to register it with vaex, allowing it to be used as a method or property in vaex expressions.
2113	Replace missing values in an array with a specified value, considering different data types and optional filling masks.
2114	Obtain the day of the week with Monday=0 and Sunday=6
2115	Calculate the ordinal day of the year for each date in the input array.
2116	Check whether a year is a leap year.
2117	Extracts the year out of a datetime sample.
2118	Extracts the month out of a datetime sample.
2119	Returns the month names of a datetime sample in English.
2120	Extracts the day from a datetime sample.
2121	Returns the day names of a datetime sample in English.
2122	Returns the week ordinal of the year, extracted from a datetime column.
2123	Extracts the hour out of a datetime samples.
2124	Extracts the minute out of a datetime samples.
2125	Extracts the second out of a datetime samples. Returns an expression containing the second extracted from a datetime column.
2126	Capitalize the first letter of a string sample.
2127	Concatenate two string columns on a row-by-row basis.
2128	Check if a string pattern or regex is contained within a sample of a string column.
2129	Count the number of occurrences of a pattern in each sample of a string column.
2130	Returns the lowest indices in each string in a column, where the provided substring is fully contained. If the substring is not found, -1 is returned.
2131	Extract a character from each sample at the specified position from a string column. If the specified position is out of bound, returns ''.
2132	Returns the lowest indices in each string in a column where the provided substring is fully contained. If the substring is not found, -1 is returned. It is the same as `str.find`.
2133	Converts string samples to lower case.
2134	Remove leading characters from a string sample.
2135	Pad strings in a given column.
2136	Duplicate each string in a column.
2137	Returns the highest index in each string in a column where the provided substring is fully contained between within a sample. If the substring is not found, -1 is returned.
2138	Returns the highest indices in each string in a column, where the provided substring is fully contained between within a sample. If the substring is not found, -1 is returned. Same as `str.rfind`.
2139	Fills the left side of string samples with a specified character such that the strings are left-hand justified.
2140	Remove trailing characters from a string sample.
2141	Slice substrings from each string element in a column.
2142	Removes leading and trailing characters from each string sample in a column, both from the left and right sides.
2143	Converts all string samples to titlecase.
2144	Converts all strings in a column to uppercase.
2145	converts an array to the most sensible dtype ; Value errors are caught and simply return the original array ; Tries to make dtype int , then float , then no change
2146	Converts the object into a numpy recordarray.
2147	Writes properties to the file in Java properties format.
2148	Write a comment to the file in Java properties format. Newlines in the comment text are automatically turned into a continuation of the comment by adding a "#" to the beginning of each line.
2149	Write a single property to a file in Java properties format.
2150	Incrementally read properties from a Java .properties file and yield tuples of key/value pairs.
2151	Wrap a file to convert newlines regardless of whether the file was opened with the "universal newlines" option or not.
2152	Return the version information for all librosa dependencies.
2153	Handler for renamed arguments. Warns and returns the new value if the old value is of type `Deprecated`, otherwise returns the old value.
2154	Set the FFT library used by librosa.
2155	This function performs beat tracking on an audio file and saves the beat event timestamps as a CSV file.
2156	Adjust audio, estimate tuning, apply pitch correction, and save.
2157	Converts frame indices to audio sample indices.
2158	Converts sample indices into STFT frames.
2159	Converts time stamps into STFT frames.
2160	Convert one or more MIDI numbers to note strings.
2161	Converts frequencies in Hz to Mels, with an option to use the HTK formula instead of the Slaney formula.
2162	Convert mel bin numbers to frequencies
2163	Alternative implementation of `np.fft.fftfreq`
2164	Compute the center frequencies of Constant-Q bins.
2165	Compute an array of frequencies tuned to the mel scale, used in audio signal processing to represent audio pitches according to their perceived loudness.
2166	Compute the A-weighting of a set of frequencies.
2167	Return an array of time values to match the time axis from a feature matrix.
2168	Return an array of sample indices to match the time axis from a feature matrix.
2169	Compute the hybrid constant-Q transform of an audio signal using a combination of pseudo CQT and full CQT.
2170	Compute the pseudo constant-Q transform of an audio signal using a single FFT size that is the smallest power of 2 greater than or equal to the max of the longest CQT filter and 2x the hop length.
2171	Compute the audio time-series reconstructed from the constant-Q transform representation `C`.
2172	Generate the frequency domain constant-Q filter basis using FFT.
2173	Trim and stack a collection of CQT responses, cleaning up framing errors at the boundaries and clipping out lower frequencies.
2174	Compute the filter response with a target STFT hop.
2175	Compute the number of early downsampling operations
2176	Perform early downsampling on an audio signal, if it applies.
2177	Calculate the accumulated cost matrix D using dynamic programming, penalizing certain step sizes with additive and multiplicative weights.
2178	Backtracks the optimal warping path using saved step sizes from the cost accumulation step.
2179	Performs the Viterbi algorithm. 因为原始代码超长，这里只是为了展示怎么写代码摘要，所以没有加具体算法。
2180	Viterbi decoding from discriminative state predictions.
2181	Construct a uniform transition matrix over `n_states`.
2182	Construct a self-loop transition matrix over `n_states`.
2183	Construct a cyclic transition matrix over `n_states`.
2184	Construct a localized transition matrix where the maximum transition probability is along the diagonal and is influenced by a window function specifying the shape of the local transition probability distribution.
2185	Analyze and detect onset events in audio signals.
2186	Compute a spectral flux onset strength envelope.
2187	Backtrack detected onset events to the nearest preceding local minimum of an energy function.
2188	Compute a spectral flux onset strength envelope across multiple channels.
2189	Save time steps as in CSV format. This can be used to store the output of a beat-tracker or segmentation algorithm.
2190	Output a time series as a .wav file
2191	Get a default colormap from the given data
2192	Plot the amplitude envelope of a waveform.
2193	Set the current image in pyplot mode
2194	Compute axis coordinates
2195	Check if "axes" is an instance of an axis object. If not, use `gca`.
2196	Set the axis scaling based on the specified axis type and which axis to adjust
2197	Get the frequencies for FFT bins
2198	Get the frequencies for Mel bins
2199	Get CQT bin frequencies centered vertically.
2200	Get chroma bin numbers
2201	Get time coordinates from frames.
2202	Estimate the tuning of an audio time series or spectrogram input.
2203	Pitch tracking on thresholded parabolically-interpolated STFT.
2204	Decompose an audio time series into harmonic and percussive components. This function automates the STFT->HPSS->ISTFT pipeline, and ensures that the output waveforms have equal length to the input waveform `y`.
2205	Extract harmonic elements from an audio time-series.
2206	Extract percussive elements from an audio time-series.
2207	Time-stretch an audio series by a fixed rate
2208	Pitch-shift the waveform by `n_steps` half-steps.
2209	Remix an audio signal by re-ordering time intervals.
2210	Indicator of non-silent frames for audio input based on frame-wise mean squared error.
2211	Trim leading and trailing silence from an audio signal.
2212	Split an audio signal into non-silent intervals
2213	Speed up or slow down an STFT by a given rate.
2214	Convert an amplitude spectrogram to dB-scaled spectrogram.
2215	Helper function to retrieve a magnitude spectrogram. Used in feature extraction functions that can operate on audio time-series or spectrogram input.
2216	HPSS beat tracking from an audio file and saving the beat event timestamps as a CSV file.
2217	Decompose a feature matrix.
2218	Filtering by nearest-neighbors.
2219	Applies the nearest-neighbor filter to observation data S, using the non-zero elements from a recurrence matrix R. The filter aggregates the neighbors using the specified aggregation operator.
2220	Create a Filterbank matrix to combine FFT bins into Mel-frequency bins
2221	Create a Filterbank matrix to convert STFT to chroma
2222	Decorator function for windows with fractional input.
2223	Construct a constant-Q basis using the filter bank described by [1]_.
2224	Return the length of each filter in a constant-Q basis.
2225	Convert a Constant-Q basis to Chroma.
2226	Get the equivalent noise bandwidth of a window function.
2227	Compute a window function.
2228	Construct a multirate filterbank using IIR filters designed with `scipy.signal.iirdesign`.
2229	Generate center frequency and sample rate pairs for achieving similar pitch filterbank settings as described in [1]_, starting from `C0` instead of `A0`.
2230	Texture similarity feature extraction
2231	Compute the sum-square envelope of a window function at a given hop length.
2232	Build a two-dimensional diagonal filter for smoothing recurrence or self-similarity matrices.
2233	Compute the spectral centroid of a time series or a spectrogram. The spectral centroid is the weighted mean of the frequencies present in the signal, where the weights are the amplitudes of the frequencies.
2234	Compute roll-off frequency. The roll-off frequency is defined for each frame as the center frequency for a spectrogram bin such that at least roll_percent of the energy of the spectrum in this frame is contained in this bin and the bins below.
2235	Compute spectral flatness
2236	Extract coefficients of fitting an nth-order polynomial to the columns of a spectrogram.
2237	Compute the zero-crossing rate of an audio time series, which is the average fraction of zero crossings in each frame.
2238	Compute a chromagram from a waveform or power spectrogram
2239	Compute a constant-Q chromagram from an audio time series.
2240	Compute a mel-scaled spectrogram.
2241	Jaccard similarity between two intervals
2242	Find the best Jaccard match from query to candidates
2243	Sorts intervals by start and end, matches intervals from one set to another based on start and end positions, and returns the indices of matching intervals or the closest interval if no match is found in strict mode.
2244	Match one set of time intervals to another and return the corresponding interval mapping. The `match_intervals` function computes the Jaccard similarity between intervals and matches them accordingly. In `strict=True` mode, it throws an exception if there is no intersection. In `strict=False` mode, it finds the closest disjoint interval with a boundary closest to the input interval. Returns the interval mapping as a NumPy array.
2245	Match one set of events to another.
2246	Calculate the harmonic salience function.
2247	Compute the energy at harmonics of a time-frequency representation such as a spectrogram or tempogram.
2248	Populate a harmonic tensor from a time-frequency representation by interpolating the input energy for specified harmonics at given frequencies along a chosen axis.
2249	Populate a harmonic tensor from a time-frequency representation with time-varying frequencies.
2250	Loads an audio file as a floating point time series, resampling to a given rate if necessary.
2251	Load an audio buffer using audioread. This loads one block at a time, and then concatenates the results.
2252	Force an audio signal down to mono.
2253	Resample a time series from an original sampling rate to a target sampling rate.
2254	Compute the bounded auto-correlation of an array.
2255	Estimate coefficients of a linear filter on a time series using Burg's method.
2256	Returns a signal with the specified click placed at each specified time
2257	Returns a pure tone signal. The signal generated is a cosine wave.
2258	Returns a chirp signal that goes from frequency `fmin` to frequency `fmax`.
2259	Get files with specified extensions in a directory
2260	Time-stretch audio using phase-vocoder.
2261	Argparse function to get the program parameters
2262	Split a sound file into harmonic and percussive components.
2263	Track beats in an audio time series using dynamic programming.
2264	Tracks beats in an onset strength envelope based on tempo estimation and parameters.
2265	Construct the local score for an onset envelope and a given period using a convolution operation with a Gaussian window.
2266	### Core dynamic program for beat tracking
2267	Get the last beat from the cumulative score array
2268	Convert a recurrence matrix into a lag matrix. `lag[i, j] == rec[i+j, j]`
2269	Convert a lag matrix into a recurrence matrix.
2270	Filtering in the time-lag domain.
2271	Sub-divide a segmentation by feature clustering.
2272	Bottom-up temporal segmentation using agglomerative clustering to partition data into `k` contiguous segments.
2273	Multi-angle path enhancement for self- and cross-similarity matrices.
2274	This function performs onset detection on an audio file and saves the detected timestamps as a CSV file.
2275	Slice a time series into overlapping frames using low-level stride manipulation.
2276	Validate whether a variable contains valid, mono or stereo audio data.
2277	Ensure that an input value is integer-typed. This is primarily useful for ensuring integrable-valued array indices.
2278	Fix the length of an array `data` to exactly `size`.
2279	Sorts an array along its rows or columns based on the maximum value in each row or column. Returns the sorted array and optionally the sorting index.
2280	Normalize an array along a chosen axis.
2281	Find local maxima in an array x. An element x[i] is considered a local maximum if the following conditions are met: x[i] > x[i-1] and x[i] >= x[i+1].
2282	Uses a flexible heuristic to pick peaks in a signal based on certain conditions, including being the maximum value within a specified window and exceeding a threshold above the mean.
2283	Return a row-sparse matrix approximating the input `x`.
2284	Sparse matrix roll This operation is equivalent to numpy.roll , but operates on sparse matrices. Parameters ---------- x : scipy.sparse.spmatrix or np.ndarray sparse matrix input shift : int The number of positions to roll the specified axis axis : (0, 1, -1) The axis along which to roll. Returns ------- x_rolled : same type as `x` The rolled matrix, with the same format as `x` See Also -------- numpy.roll Examples -------- >>> # Generate a random sparse binary matrix X = scipy.sparse.lil_matrix(np.random.randint(0, 2, size=(5,5))) X_roll = roll_sparse(X, 2, axis=0) # Roll by 2 on the first axis X_dense_r = roll_sparse(X.toarray(), 2, axis=0) # Equivalent dense roll np.allclose(X_roll, X_dense_r.toarray()) True
2285	Convert an integer buffer to floating point values. This is primarily useful when loading integer-valued wav data into numpy arrays.
2286	Generate a slice array from an index array.
2287	Synchronous aggregation of a multi-dimensional array between boundaries.
2288	Robustly compute a softmask operation.
2289	Compute the tiny-value corresponding to an input's data type. This is the smallest "usable" number representable in `x`'s data type, primarily useful for determining a threshold for numerical underflow in division or multiplication operations.
2290	Reads frame images from a directory and joins them as a video.
2291	Read the next frame and cache it if it hasn't been decoded before.
2292	Get frame by index.
2293	Convert a video to frame images by reading frames from the video and saving them as image files in a specified directory.
2294	Track the progress of tasks execution with a progress bar.
2295	Tracks the progress of parallel task execution with a progress bar.
2296	Flip an image horizontally or vertically.
2297	Rotate an image by a given angle with options for center, scaling, and border handling.
2298	Clip bounding boxes to fit the image shape.
2299	Scale bounding boxes based on their center points, optionally clip them within a specified shape.
2300	Crops image patches by scaling bounding boxes, clipping them, and then cropping and padding the resulting regions.
2301	Pad an image to a certain shape.
2302	Pad an image to ensure each edge to be multiple to some number.
2303	Rescale a size by a ratio.
2304	Resize image to a given size.
2305	Resize image to the same size of a given image.
2306	Resize image while keeping the aspect ratio.
2307	Register a handler for some file extensions.
2308	Get priority value.
2309	Dequantize an array.
2310	Show an image.
2311	Draws bounding boxes on an image.
2312	Read an optical flow map.
2313	Writes optical flow to file. If not quantized, saves as a .flo file; if quantized, saves as a jpeg image with concatenated dx and dy.
2314	Recover from quantized flow.
2315	Loads state_dict to a module and handles key mismatches.
2316	Loads checkpoint from a file or URI.
2317	Copy a model state_dict to CPU.
2318	Save checkpoint to file with model state dict, optimizer state dict, and metadata.
2319	Init the optimizer.
2320	Init the logger.
2321	Get current learning rates.
2322	Registers a hook into the hook list with a specified priority.
2323	Run a workflow with specified data loaders and epochs.
2324	Register default hooks for training including LrUpdaterHook, OptimizerStepperHook, CheckpointSaverHook, IterTimerHook, and LoggerHook(s).
2325	Convert a video with ffmpeg.
2326	Resize a video.
2327	Cut a clip from a video.
2328	Concatenate multiple videos into a single one.
2329	Load a text file and parse the content as a list of strings.
2330	Load a text file and parse the content as a dict.
2331	Create a 3x3 convolutional layer with optional dilation.
2332	Initialize an object from dict.
2333	Read an image.
2334	Read an image from bytes.
2335	Write image to file.
2336	Convert a BGR image to grayscale image.
2337	Convert a grayscale image to BGR image.
2338	Casts elements of an iterable object into a specified type. Returns an iterator by default or the specified type if provided.
2339	Indicate whether seq is a sequence of some type.
2340	Slice a list into several sub lists by a list of given length.
2341	Check if prerequisites are satisfied.
2342	Average latest n values or all values.
2343	Scatters tensor across multiple GPUs.
2344	Convert various input to color tuples
2345	Adds check points in a single line.Suitable for running a task on a list of items.
2346	Start the timer.
2347	Total time since the timer is started. Returns time in seconds.
2348	Time since the last checking.
2349	Show optical flow
2350	r Converts flow map to RGB image.
2351	Builds a color wheel with specified bins for each color range. Default bins are used if none are provided. Returns a color wheel array of shape (total_bins, 3).
2352	Computes the precision@k for the specified values of k
2353	Scatter inputs to target GPUs, supporting :type:`~mmcv.parallel.DataContainer`.
2354	Scatters inputs and kwargs to target GPUs with support for dictionaries.
2355	Fetches all the information using aiohttp, handling timeouts, decoding errors, and retries on failure.
2356	Read and decodes JSON response.
2357	Read response payload and decode.
2358	Process coroutine callback function
2359	For crawling multiple URLs.
2360	Init a Request class for crawling html.
2361	Start crawling by submitting requests for initial URLs and initializing worker tasks. Wait for all requests to complete before stopping the crawling process.
2362	Ensures tasks have an action key and converts strings to Python objects.
2363	Parses yaml as ansible.utils.parse_yaml but with linenumbers.
2364	Method returns distribution full name with '-' replaced with '_'.
2365	Return archive name without extension
2366	Add additional requirements from setup.cfg to file metadata_path
2367	Convert an .egg-info directory into a .dist-info directory
2368	### Example 4:
Input:
def text(text: str, speak: str = None, input_hint: Union[InputHints, str] = InputHints.accepting_input) -> Activity:
    """Returns a simple text message."""

    message = Activity(type=ActivityTypes.message, text=text, input_hint=input_hint)
    if speak:
        message.speak = speak

    return message
Output:
Returns a simple text message.
2369	Create a message with suggested actions and optional text.
2370	Returns a single message activity containing an attachment. Example usage provided.
2371	Return a message that will display a set of attachments in list form.
2372	Returns a message that will display a single image or video to a user.
2373	This interface is used to create a trace activity based on an existing activity, allowing for customization of various properties.
2374	Sets the telemetry client for logging events.
2375	Read storeitems from storage.
2376	Save storeitems to storage.
2377	Remove storeitems from storage.
2378	Create a StoreItem from a result out of CosmosDB.
2379	Return the dict of a StoreItem, eliminating non-magic attributes and the e_tag.
2380	Return the sanitized key. Replace characters that are not allowed in keys in Cosmos.
2381	Call the get or create methods to initialize the database and container.
2382	Return the database link.
Check if the database exists or create the db.
2383	This method checks if a container exists in a CosmosDB database, and creates it if it does not exist. It returns the container link.
2384	Fills the event properties and metrics for the QnaMessage event for telemetry. Returns a tuple of event data properties and metrics for the QnAMessage event.
2385	Returns the conversation reference for an activity. This can be saved as a plain old JSON object and then later used to message the user proactively.
2386	Generate a unique name for a waterfall step
2387	Determine if a number of Suggested Actions are supported by a Channel.
2388	Determine if a number of Card Actions are supported by a Channel.
2389	Get the Channel Id from the current Activity on the Turn Context.
2390	Determines if a given Auth header is from the Bot Framework Emulator
2391	Returns an attachment for a hero card. Will raise a TypeError if 'card' argument is not a HeroCard.
2392	Return the instruction parameters. If the parameters are already defined, do not attempt to get them from the definition. Instead, return the existing parameters.
2393	Reverse the order of sub-gates in a composite instruction.
2394	```plaintext
Invert this instruction.
```
2395	Add classical control on register classical and value val
2396	Creates a shallow copy of the instruction with an optional new name
2397	Print an if statement if needed.
2398	Return a default OpenQASM string for the instruction.
2399	Run all the passes on a QuantumCircuit.
2400	Do a pass and its "requires".
2401	Returns a list structure of the appended passes and its options.
2402	Fetches the passes added to this flow controller. Returns a dict containing options, a list of passes, and the type of the current object.
2403	Constructs a flow controller based on the partially evaluated controller arguments.
2404	Applies U gate to qubit q with parameters theta, phi, and lam.
2405	Apply a single qubit gate to the qubit, returning the U gate parameters (theta, phi, lam).
2406	Get the matrix for a single qubit gate.
2407	Returns the index string for Numpy.einsum matrix-matrix multiplication.
2408	Return the index string for Numpy.einsum matrix-vector multiplication.
2409	Returns the index string for Numpy.einsum matrix multiplication.
2410	Build a ``DAGCircuit`` object from a ``QuantumCircuit``.
2411	Function used to fit the exponential decay.
2412	Fit the decay cosine curve.
2413	Plots coherence data with error bars and a fitted curve.
2414	Takes raw rb data and converts it into averages and std dev. Args: raw_rb (numpy.array): m x n x l list where m is the number of seeds, n is the number of Clifford sequences and l is the number of qubits Return: numpy_array: 2 x n x l list where index 0 is the mean over seeds, 1 is the std dev overseeds
2415	Plot randomized benchmarking data.
2416	Finds runs containing parameterized gates and splits them into sequential runs excluding the parameterized gates.
2417	Return a triple theta, phi, lambda for the product of two u3 gates.
2418	Express a Y.Z.Y single qubit gate as a Z.Y.Z gate. Solve the equation for theta, phi, and lambda.
2419	Validates the input to state visualization functions. Converts input to a 2D numpy array if it is 1D (assumes it's a state vector). Checks if the input is a square matrix and if it represents a valid quantum state (n-qubit state). Raises an error if the input is invalid.
2420	Trim a PIL image and remove white space.
2421	Get the list of qubits drawing this gate would cover
2422	Build an `Instruction` object from a `QuantumCircuit`. The instruction is anonymous and can be inserted into another circuit. It will have the same string name as the circuit.
2423	Pick a convenient layout depending on the best matching qubit connectivity, and set the property `layout`. Raises an error if the dag's number of qubits is greater than the device's coupling map size.
2424	Computes the qubit mapping with the best connectivity.
2425	Apply barrier to circuit. If qargs is None, applies to all the qbits. Args is a list of QuantumRegister or single qubits. For QuantumRegister, applies barrier to all the qubits in that register.
2426	Compute the mean value of an diagonal observable.
2427	Return a list of tuples (Register,index) for processing an Id or IndexedId node as a bit or register type.
2428	Process a custom unitary node.
2429	Process a gate node. If opaque is True, process the node as an opaque gate node.
2430	Process a CNOT gate node.
2431	Process a measurement node and apply it to the corresponding bit IDs.
2432	Process an if node.
2433	Create a DAG node out of a parsed AST op node.
2434	Return duration of supplied channels.
2435	Return minimum start time for supplied channels.
2436	Return maximum start time for supplied channels.
2437	Iterable for flattening Schedule tree.
2438	Validates a value against the correct type of the field.
2439	Include unknown fields after dumping.
2440	Include unknown fields in validated data.
2441	Create a patched Schema for validating models.
2442	Validate the internal representation of the instance
2443	Add validation after instantiation.
2444	Serialize the model into a Python dict of simple types.
2445	Deserialize a dict of simple types into an instance of this class.
2446	Apply n-qubit Quantum Fourier Transform (QFT) to qubits in the circuit.
2447	Partial trace over subsystems of a multi-partite vector.
2448	Flatten an operator to a vector in a specified basis.
2449	Devectorize a vectorized square matrix.
2450	Converts a Choi-matrix to a Pauli-basis superoperator.
2451	Truncates small values of a complex array and sets them to zero.
2452	Construct the outer product of two vectors. The second vector argument is optional, if absent the projector of the first vector will be returned.
2453	Calculate the concurrence for a quantum state or density matrix. Raises an exception if the state is for more than two qubits.
2454	Compute the Shannon entropy of a probability vector.
2455	Compute the von-Neumann entropy of a quantum state
2456	Compute the mutual information of a bipartite state.
2457	Compute the entanglement of formation of a quantum state.
2458	Compute the Entanglement of Formation of a 2-qubit density matrix.
2459	Create a flattened schedule.
2460	Return schedule shifted by `time`.
2461	Return a new schedule with the `child` schedule inserted into the `parent` at `start_time`.
2462	Return a new schedule with by appending `child` to `parent` at the last time of the `parent` schedule's channels over the intersection of the parent and child schedule's channels.
2463	Apply u3 gate to qubit q.
2464	Return backend status.
2465	Start the progress bar.
2466	Estimate the remaining time left. Parameters: complete
2467	Disassemble a qobj and return the circuits, run_config, and user header.
2468	Calculate the Hamming distance between two bit strings.
2469	Return quaternion for rotation about given axis
2470	Generate a quaternion from a set of Euler angles.
2471	Normalizes a Quaternion to unit length so that it represents a valid rotation.
2472	Converts a unit-length quaternion to a rotation matrix.
2473	Converts a unit-length quaternion to a sequence of ZYZ Euler angles.
2474	Prepares received data for representation.
2475	Generate a histogram representation of the input data using a vertical bars style graph.
2476	Customize check_type for handling containers.
2477	Check that j is a valid index into self.
2478	Test if an array is a square matrix.
2479	Test if an array is a diagonal matrix
2480	Test if an array is a symmetric matrix
2481	Test if an array is a Hermitian matrix
2482	Test if a matrix is positive semidefinite
2483	Test if an array is an identity matrix.
2484	Test if an array is a unitary matrix.
2485	Transforms a QuantumChannel to the Choi representation.
2486	Transforms a QuantumChannel to the SuperOp representation based on the input representation.
2487	Transform a QuantumChannel to the Kraus representation.
2488	Transform a QuantumChannel to the Chi representation.
2489	Transform a QuantumChannel to the PTM representation.
2490	Transform a QuantumChannel to the Stinespring representation.
2491	Transform a QuantumChannel to the Operator representation.
2492	Transform Operator representation to other representation.
2493	Transform Stinespring representation to Operator representation.
2494	Transform SuperOp representation to Choi representation.
2495	Transform the Choi matrix to its corresponding SuperOperator representation.
2496	Transform Kraus representation to Choi representation.
2497	Transform Choi representation to Kraus representation
2498	Transform Stinespring representation to Kraus representation.
2499	Transforms a Stinespring representation to a Choi representation.
2500	Transform Kraus representation to Stinespring representation.
2501	Transform Kraus representation to SuperOp representation.
2502	Transform Chi representation to a Choi representation.
2503	Transforms Choi representation to the Chi representation.
2504	Reravel two bipartite matrices.
2505	Change of basis of bipartite matrix representation
2506	Return true if dims correspond to an n-qubit channel.
2507	Hides the tick lines and labels of an axis
2508	Sets x, y, and z labels based on a specified convention.
2509	Resets Bloch sphere data sets to empty.
2510	Add a list of vectors to the Bloch sphere.
2511	Add a text or LaTeX annotation to a Bloch sphere, parametrized by a qubit state or a vector.
2512	Render the Bloch sphere and its data sets on a given figure and axes.
2513	Plot the front half of a sphere.
2514	Display Bloch sphere and corresponding data sets.
2515	Deprecated function to perform a two-qubit KAK decomposition. Returns the KAK decomposition of the given unitary matrix.
2516	Constructs the top line of the element.
2517	Constructs the middle line of the element
2518	Constructs the bottom line of the element
2519	Returns the length of the element, including the box around.
2520	Get the parameters of an instruction, format them, and return them for adding to a label. Return `None` if there are no parameters or if all parameters are numpy.ndarrays.
2521	Creates the label for a box.
2522	Return the correspond math mode latex string.
2523	Compile a list of circuits into a qobj.
2524	Apply filters to deprecation warnings. Force the `DeprecationWarning` warnings to be displayed for the qiskit module, overriding the system configuration as they are ignored by default for end-users. Additionally, silence the `ChangedInMarshmallow3Warning` messages.
2525	Basic hardware information about the local machine. Gives actual number of CPU's in the machine, even when hyperthreading is turned on. CPU count defaults to 1 when true count can't be determined.
2526	Checks if internet connection exists to host via specified port.
2527	Internal function to update HTML job monitor status
2528	Generate a continuous constant pulse for the given times with the specified amplitude.
2529	Continuous square wave.
2530	Generate a continuous triangle wave based on the given times, amplitude, period, and phase.
2531	Continuous cosine wave.
2532	Enforce that the supplied Gaussian pulse is zeroed at a specific width by subtracting the baseline from all samples. Optionally rescale the amplitude and return the scale factor if needed.
2533	Generate a continuous unnormalized Gaussian pulse
2534	Generate a continuous unnormalized Gaussian derivative pulse.
2535	Continuous gaussian square pulse.
2536	Create a default pass manager for mapping to a coupling map.
2537	Create a default pass manager for quantum circuits without considering coupling and optimize until a fixed depth is reached.
2538	Test if this circuit has the register r.
2539	Mirror the circuit by reversing the instructions. This is done by recursively mirroring all instructions. It does not invert any gate.
2540	Invert this quantum circuit by recursively inverting all gates.
2541	Append an instruction to the end of the circuit, modifying the circuit in place.
2542	DEPRECATED after 0.8
2543	Add registers.
2544	Raise exception if list of qubits contains duplicates.
2545	Checks the validity of qubit arguments for a circuit, ensuring they are in the correct format and that the specified qubits exist within the circuit.
2546	Check classical arguments for validity
2547	Raise exception if the circuits are defined on incompatible registers
2548	Generate an OpenQASM string from a circuit.
2549	Draw the quantum circuit.
2550	Returns total number of gate operations in circuit.
2551	Return the number of qubits plus clbits in circuit.
2552	Count each operation kind in the circuit and return a breakdown of the counts.
2553	Returns the number of non-entangled subcircuits the circuit can be factored to.
2554	Assign parameters to values yielding a new circuit. Raises QiskitError if value_dict contains parameters not present in the circuit. Returns a copy of the circuit with the substitutions applied.
2555	Assigns a parameter value to matching instructions in-place.
2556	Plot the interpolated envelope of a pulse using specified parameters and methods.
2557	Search for SWAPs which allow for application of largest number of gates.
2558	Maps all gates that can be executed with the current layout.
2559	Return the sum of the distances of two-qubit pairs in each CNOT in gates according to the layout and the coupling.
2560	Count the mapped two-qubit gates, less the number of added SWAPs.
2561	Return a copy of source_dag with metadata but empty\. Generate only a single qreg in the output DAG, matching the size of the coupling_map\.
2562	Return op implementing a virtual gate on given layout.
2563	Generate list of ops to implement a SWAP gate along a coupling edge.
2564	Run one pass of the lookahead mapper on the provided DAG.
2565	Add a physical qubit to the coupling graph as a node. Raises an error if the qubit already exists.
2566	Add directed edge to coupling graph.
2567	Returns a CouplingMap object for a subgraph of self.
2568	Returns a sorted list of physical_qubits
2569	Test if the graph is connected. Return True if connected, False otherwise.
2570	Compute the full distance matrix on pairs of nodes. The distance map self._dist_matrix is computed from the graph using all_pairs_shortest_path_length.
2571	Get the undirected distance between two physical qubits in a coupling map.
2572	Given a list or single QuantumCircuit, transpile it using a specified backend and other parameters返回
2573	Apply cu1 gate from control qubit to target qubit with angle theta.
2574	In - place inversion of all instructions.
2575	Add controls to all instructions.
2576	Add classical control register to all instructions.
2577	Subscribes to an event, so when it's emitted, all the callbacks subscribed will be executed. We are not allowing double registration.
2578	Emits an event if there are any subscribers.
2579	Unsubscribes the specific callback from an event.
2580	Triggers an event, and associates some data to it, so if there are any subscribers, their callback will be called synchronously.
2581	Apply initialize gate to quantum circuit.
2582	Calculate a subcircuit that initializes a quantum state to a desired vector using a recursive algorithm with optimizations.
2583	Design a quantum circuit to transform the input parameters into a state with all qubits in the |0> state.
2584	Calculates theBloch angles for a pair of complex numbers, which represent the rotation needed to create a qubit from the zero vector.
2585	Return a recursive implementation of a multiplexor circuit, where each instruction itself has a decomposition based on smaller multiplexors.
2586	Checks if value has the format of a virtual qubit
2587	Returns a copy of a Layout instance.
2588	Combines two layouts into an "edge map" to compose dags.
2589	Apply Toffoli gate to control qubits `ctl1` and `ctl2` on target qubit `tgt`.
2590	Return a new schedule with schedule inserted within self at start_time.
2591	Checks if the attribute name is in the list of attributes to protect. If so, raises TranspilerAccessError.
2592	Converts gate tuples into a nested list of integers.
2593	Run the StochasticSwap pass on `dag`.
2594	Provide a DAGCircuit for a new mapped layer.
2595	Return the Pauli group with 4^n elements. The phases have been removed. The group is ordered by Pauli weights or tensor product counting lowest qubit fastest.
2596	Take pauli string to construct pauli.
2597	```markdown
Construct Pauli from boolean arrays.
```
2598	Multiply two Paulis and track the phase.
2599	Convert to Operator object.
2600	Convert to Pauli circuit instruction.
2601	Update partial or entire z.
2602	Update partial or entire x.
2603	Insert or append Pauli to the targeted indices
2604	Append pauli at the end.
2605	Delete qubits at the specified indices.
2606	Generate a random Pauli operator for a given number of qubits.
2607	Generate single qubit Pauli at index with given Pauli label for a Pauli sequence of length num_qubits.
2608	Simulate the outcome of measurement of a qubit.
2609	Generate memory samples from current statevector.
2610	Apply a measure instruction to a qubit.
2611	Apply a reset instruction to a qubit.
2612	Validate an initial statevector
2613	Initialize the statevector for simulation, setting it to the default state of all qubits in \( |0\rangle \) if no initial statevector is provided, or copying the provided initial statevector. Then, reshape it to a rank-N tensor.
2614	Return the current statevector in JSON Result spec format
2615	Check if measure sampling is allowed for an experiment based on specific criteria.
2616	Run qobj asynchronously.
2617	Run experiments in qobj
2618	Performs semantic validations on a quantum job object (qobj) to ensure it adheres to the constraints and requirements of the backend.
2619	Validate an initial unitary matrix
2620	Set the initial unitary for simulation
2621	Return the current unitary in JSON Result spec format.
2622	Run experiments in qobj and return the results.
2623	Semantic validations of the qobj.
2624	Determine if obj is a bit
2625	Pick a layout by assigning n circuit qubits to device qubits 0, .., n-1. Raises TranspilerError if dag wider than self.coupling_map.
2626	Check if the current interval has overlap with the given interval.
2627	Return a new interval shifted by `time` from self
2628	Return a new Timeslot shifted by `time`.
2629	Return the earliest start time in the given collection of channels.
2630	Return the maximum time of timeslots over all channels.
2631	Return if the current timeslots can be merged with another TimeslotCollection.
2632	Return a new TimeslotCollection merged with a specified `timeslots`
2633	Return a new TimeslotCollection shifted by `time`.
2634	Reports on GitHub that the specified branch is failing to build at the specified commit. The method will open an issue indicating that the branch is failing. If there is an issue already open, it will add a comment avoiding to report twice about the same failure.
2635	Sorts rho data
2636	Create a paulivec representation of the input array. Graphical representation of the input state vector or density matrix.
2637	Apply RZZ gate to the circuit with specified theta and qubits.
2638	Apply Fredkin gate to the circuit.
2639	Extract readout and CNOT errors and compute swap costs.
2640	Create a program graph where virtual qubits are nodes and edges represent 2-qubit gates with weights indicating the number of CNOTs between pairs.
2641	Returns the first edge with at least one endpoint mapped, or the first edge if no endpoints are mapped.
2642	Selects best remaining CNOT in the hardware for the next program edge.
2643	Select the best remaining hardware qubit for the next program qubit.
2644	Main run method for the noise adaptive layout.
2645	Return a list of instructions for this CompositeGate. If the CompositeGate itself contains composites, call this method recursively.
2646	In-place inversion of a gate.
2647	Add controls to this gate.
2648	Add classical control register.
2649	Return True if operator is a unitary matrix.
2650	Return the conjugate of the operator.
2651	Return the transpose of the operator.
2652	Return the matrix power of the operator.
2653	Return the tensor shape of the matrix operator
2654	Convert a QuantumCircuit or Instruction to an Operator.
2655	Updates the QASM string for an iteration of swap_mapper.
2656	Separate a bitstring according to the registers defined in the result header.
2657	Format an experiment result memory object for measurement level 0.
2658	Format an experiment result memory object for measurement level 1.
2659	Format an experiment result memory object for measurement level 2.
2660	Return a formatted counts dictionary for Qiskit user counts_dict a counts histogram of multiple shots header experiment header dictionary containing useful information for postprocessing
2661	Convert a list of [re, im] complex numbers into a list of Python complex numbers, optionally rounding to a specified number of decimal places.
2662	Formats a unitary matrix for presentation to the Qiskit user, optionally rounding to a specified number of decimal places.
2663	Ensure that a submit has been performed before calling the method.
2664	Submit the job to the backend for execution. Raises an error if the job has already been submitted or if the Qobj is not valid.
2665	Gets the status of the job by querying the Python's future.
2666	Whether `lo_freq` is within the `LoRange`.
2667	Create a bloch sphere representation for a quantum state.
2668	Return a list of qubit LOs, formatted from default backend values and optionally updated by user configurations. Returns `None` if user configuration matches default values.
2669	Return a list of measurement LO frequencies, formatted from the default and user-configured values. If no changes were made, return `None`.
2670	Expand all op nodes to the given basis.
2671	Create a Q sphere representation of the input state vector or density matrix, using a Q sphere for each eigenvalue.
2672	Return the number of combinations for n choose k.
2673	Return the lex index of a combination.
2674	Plot the Pauli vector representation of a quantum state.
2675	Return the unique hardware backends that are available.
2676	Returns the Instruction object corresponding to the op for the node else None
2677	Generate a constant-sampled `SamplePulse`.
2678	Generates zero-sampled SamplePulse.
2679	Generate a square wave `SamplePulse`. Applies `left` sampling strategy to create a discrete pulse from a continuous function.
2680	Generates a sawtooth wave `SamplePulse`.
2681	Generate a triangle wave SamplePulse with specified duration, amplitude, period, phase, and optional name. Uses left sampling strategy for discrete pulse generation. Default period is single cycle if not provided.
2682	Generates cosine wave `SamplePulse`.
2683	Generates sine wave `SamplePulse`.
2684	Generate unnormalized Gaussian `SamplePulse`
2685	Generates an unnormalized Gaussian derivative `SamplePulse`.
2686	Generates a Gaussian square `SamplePulse` centered at `duration/2`, with specified amplitude, sigma, and rise/fall width. The pulse is zeroed at `t=-1` and `t=duration+1` to prevent initial/final discontinuities and uses a left sampling strategy.
2687	Compute distance between two points on a graph axes.
2688	Print the node data, with indent.
2689	Return an instance of a backend from its class.
2690	Rename a classical or quantum register throughout the circuit.
2691	Remove all operation nodes with the given name.
2692	Add all wires in a quantum register.
2693	Add all wires in a classical register to the circuit.
2694	Add a qubit or bit to the circuit. Raises an error if the wire is already present.
2695	Verify that the condition is valid.
2696	Return a list of bits in the given condition.
2697	Add a new operation node to the graph and assign properties.
2698	Applies an operation to the output of the circuit.
2699	Check that wiremap neither fragments nor leaves duplicate registers.
2700	Check that the wiremap is consistent. Ensure that the wiremap refers to valid wires and that those wires have consistent types.
2701	Use the wire_map dict to change the condition tuple's creg name.
2702	Adds a directed acyclic graph (`dag`) at the end of the current instance (`self`), using an optional `edge_map` to map qubits and classical bits.
2703	Apply the input circuit to the output of this circuit
2704	Check that a list of wires is compatible with a node to be replaced.
2705	Return predecessor and successor dictionaries for a given node in a graph.
2706	Maps all wires of the input circuit to predecessor and successor nodes in the current circuit, keyed on wires in the current circuit.
2707	Yield nodes in topological order.
2708	Yield node values for the given nodes.
2709	Get the list of "op" nodes in the dag.
2710	Returns the list of gate nodes in the dag.
2711	Get the set of "op" nodes with the given name.
2712	Return list of 2-qubit gates.
2713	Returns list of the predecessors of a node as DAGNodes.
2714	Return a list of the predecessors of a node that are connected by a quantum edge as DAGNodes.
2715	Get set of the ancestors of a node in a directed acyclic graph (DAG).
2716	Returns a list of the successors of a node that are connected by a quantum edge as DAGNodes.
2717	Remove an operation node and connect its predecessors to successors.
2718	Remove all ancestor operation nodes of a given node in the DAG.
2719	Remove all of the descendant operation nodes of a given node.
2720	Removes all non-ancestors operation nodes of a given node.
2721	Remove all of the non-descendants operation nodes of node.
2722	Yield a shallow view on a layer of this DAGCircuit for all d layers of this circuit.
2723	Yield a serial layer for all gates of this circuit. Each layer contains a single gate and has the same structure as in layers().
2724	Yield layers of the multigraph.
2725	Collects non-conditional runs of "op" nodes with the given names.
2726	Iterator for nodes that affect a given wire. Returns ops nodes if only_ops is True, otherwise all nodes. Raises an exception if the given wire is not present in the circuit.
2727	Count the occurrences of operation names.
2728	Return a dictionary of circuit properties.
2729	Generate a TomographyBasis object with optional preparation and measurement functions.
2730	Add state measurement gates to a circuit.
2731	Generates a dictionary of tomography experiment configurations for state and process tomography, including the qubits being measured and prepared, the measurement and preparation bases, and the corresponding circuits and labels.
2732	Generate a dictionary of process tomography experiment configurations for quantum tomography experiments.
2733	Add tomography measurement circuits to a QuantumProgram.
2734	Returns a results dict for a state or process tomography experiment.
2735	Compute the marginal counts for a subset of measured qubits.
2736	Reconstruct a density matrix or process-matrix from tomography data using specified methods and options.
2737	Reconstruct a state from unconstrained least-squares fitting.
2738	The `__projector` function constructs a projector from a list of operations and a basis dictionary. It iterates through the list of operations, taking each operator's label and eigenstate, and kronecker products it with the corresponding basis vector. The final result is a multi-qubit projector.
2739	Reconstruct a matrix through linear inversion
2740	Returns the nearest positive semidefinite operator to an operator.
2741	Calculate the value of the Wigner function from measurement results.
2742	Add measurement gates to a circuit.
2743	A text-based job status checker.
2744	Monitor the status of an IBMQJob instance with options to set the interval, monitor asynchronously, and specify the output.
2745	Compute Euler angles for a single-qubit gate. Find angles (theta, phi, lambda) such that unitary_matrix = phase * Rz(phi) * Ry(theta) * Rz(lambda)
2746	Return the gate u1, u2, or u3 implementing U with the fewest pulses.
2747	Extends dag with virtual qubits that are in layout but not in the circuit yet.
2748	The qubits properties widget Displays a widget with the properties of the qubits.
2749	Widget for displaying job history using tabs for different time intervals (Year, Month, Week).
2750	Plots the job history of the user from a list of IBMQJob instances, categorized by a specified interval such as 'year', 'month', or 'week'.
2751	Plot the interpolated envelope of pulse.
2752	Apply cu3 gate from control qubit to target qubit with angles theta, phi, and lambda.
2753	Returns a circuit putting 2 qubits in the Bell state.
2754	Transpile one or more circuits according to desired transpilation targets. Transpilation is done in parallel using multiprocessing.
2755	Select a PassManager and run a single circuit through it.
2756	Execute a list of quantum circuits or pulse schedules on a backend. The execution is asynchronous, and a handle to a job instance is returned.
2757	Return the primary drive channel of this qubit.
2758	Return the primary control channel of this qubit.
2759	Returns the primary measure channel of this qubit. Raises a PulseError if no measurement channels are present.
2760	Return the primary acquire channel of this qubit.
2761	n-qubit input state for QFT that produces output 1.
2762	Assemble a list of circuits or pulse schedules into a Qobj.
2763	Remove the handlers for the 'qiskit' logger.
2764	创建一个二进制城市的图形表示法（Hinton图），用于显示输入数组。
2765	Calculate the process fidelity between two quantum channels using their SuperOp matrices.
2766	Set the input text data.
2767	Pop a PLY lexer off the stack.
2768	Push a PLY lexer on the stack to parse filename.
2769	Iterate over each block in a DAG and replace it with an equivalent Unitary on the same wires.
2770	Get the conversion method for the given instruction. Raises PulseError if the method is not found.
2771	Convert `AcquireInstruction` to dictionary of required parameters with considerations based on `meas_level`.
2772	Return converted `FrameChangeInstruction`.
2773	Return converted `PersistentValueInstruction`.
- **Parameters**:
  - `shift`: Offset time.
  - `instruction`: Persistent value instruction.
- **Returns**:
  - Dictionary of required parameters.
2774	Return converted `PulseInstruction`.Args:shift(int): Offset time.instruction (PulseInstruction): drive instruction.Returns:dict: Dictionary of required parameters.
2775	Return converted `Snapshot`.
2776	Update annotations of discretized continuous pulse function with duration.
2777	Decorator for converting a continuous function to a discretized pulse using a specified sampling method.
2778	Returns a list of backend instances matching the specified conditions.
2779	Resolve backend name from a deprecated name or an alias.
2780	Build a ``QuantumCircuit`` object from a ``DAGCircuit``.
2781	Converts an observable in matrix form to dictionary form. Takes a diagonal observable as a matrix and converts it to dictionary form, handling both matrix and ordered list inputs. Returns a dictionary with observable states as keys and corresponding values as observed values.
2782	Updates a node in the symbol table. Raises an error if a duplicate declaration is found.
2783	Verifies a qubit id against the gate prototype.
2784	Verifies each expression in a list, ensuring that any Id elements resolve to the current stack.
2785	Verify a user-defined gate call.
2786	Verify a register by checking if its type matches the expected type and if its index is within the valid range. If the register is not found or its type is incorrect, raise a QasmError.
2787	Verify a list of registers.
2788	Compute the column index in the input text string based on the given token.
2789	Set the parse_deb field based on the input value.
2790	Parse some data.
2791	Parser runner
2792	Parse the data from a file and a QASM parser.
2793	Apply crz gate from control qubit ctl to target qubit tgt with angle theta.
2794	Returns a basis state ndarray.
2795	Maps a pure state to a state matrix. If flatten is true, stacks the columns of the state matrix.
2796	Calculate the purity of a quantum state.
2797	Run the pass on the DAG, and write the discovered commutation relations into the property_set.
2798	Creates a backend widget.
2799	Updates the monitor info called from another thread
2800	Generate a jobs_pending progress bar widget.
2801	Run one pass of cx cancellation on the circuit.
2802	Get a single backend matching the specified filtering.
2803	Return the shape for bipartite matrix
2804	Get the number and size of unique registers from bit_labels list.
2805	Truncate long floats
2806	Return LaTeX string representation of circuit. This method uses the LaTeX Qconfig package to create a graphical representation of the circuit.
2807	Get depth information for the circuit.

Returns:
    int: number of columns in the circuit
    int: total size of columns in the circuit
2808	Get height, width, & scale attributes for the beamer page.
2809	Loads the QObj schema for use in future validations. Caches schema in _SCHEMAS module attribute. Returns the loaded schema.
2810	Generate validator for JSON schema.
2811	Load all default schemas into `_SCHEMAS`.
2812	Validates JSON dict against a schema.
2813	Return a cascading explanation of the validation error.
2814	A majority gate implementation using quantum gates.
2815	Unmajority gate.
2816	Convert QuantumCircuit to LaTeX string.
2817	Draw a quantum circuit based on matplotlib. If `%matplotlib inline` is invoked in a Jupyter notebook, it visualizes a circuit inline. We recommend `%config InlineBackend.figure_format = 'svg'` for the inline visualization.

Args: circuit (QuantumCircuit): a quantum circuit scale (float): scaling factor filename (str): file path to save image to style (dict or str): dictionary of style or file name of style file reverse_bits (bool): When set to True reverse the bit order inside registers for the output visualization. plot_barriers (bool): Enable/disable drawing barriers in the output circuit. Defaults to True. justify (str): `left`, `right` or `none`. Defaults to `left`. Says how the circuit should be justified.

Returns: matplotlib.figure: a matplotlib figure object for the circuit diagram
2818	Return a random dim x dim unitary Operator from the Haar measure.
2819	Generate a random density matrix rho.
2820	Return a normally distributed complex random matrix.
2821	Generate a random density matrix from the Hilbert-Schmidt metric.
2822	Generate a random density matrix from the Bures metric.
2823	Return a list of custom gate names in this gate body.
2824	Return the compose of a QuantumChannel with itself n times.
2825	Return the composition channel.
2826	Converts a QuantumCircuit or Instruction to a SuperOp.
2827	Return a circuit with a barrier before last measurements.
2828	Convert a list of circuits into a qobj.
2829	Expand 3+ qubit gates using their decomposition rules.
2830	Expand a given gate into its decomposition.
2831	Calculate a subcircuit that implements this unitary.
2832	Validate if the value is of the type of the schema's model.
2833	Validate if a list is a valid item-field values.
2834	Set the absolute tolerance parameter for float comparisons.
2835	Set the relative tolerance parameter for float comparisons.
2836	Reshaping input and output dimensions of operator
2837	Return tuple of input dimension for specified subsystems.
2838	Return tuple of output dimensions for specified subsystems.
2839	Make a copy of the current operator.
2840	Return the compose of a operator with itself n times.
2841	Check if input dimension corresponds to qubit subsystems.
2842	Perform a contraction using Numpy.einsum.
2843	Override `_deserialize` for customizing the exception raised.
2844	Override ``_serialize`` for customizing the exception raised.
2845	Check if at least one of the possible choices validates the value.Possible choices are assumed to be ModelTypeValidator fields.
2846	Return the state fidelity between two quantum states.
2847	Apply real scalar function to singular values of a matrix.
2848	Returns self
2849	Set snapshot label to name
2850	Return True if QuantumChannel is a unitary channel.
2851	Try to convert channel to a unitary representation Operator.
2852	Convert to a Kraus or UnitaryGate circuit instruction.
2853	Converts input into a QuantumChannel subclass object or Operator object. Handles common conversion for all QuantumChannel subclasses, preferring 'to_quantumchannel' if available, and falls back to converting a regular matrix Operator into a QuantumChannel.
2854	Create Graphene Enum for sorting a SQLAlchemy class query.
2855	Monkey patching _strptime to avoid problems related with non-english locale changes on the system.
2856	Get an ordered mapping with locale codes as keys and corresponding locale instances as values.
2857	Yield locale instances based on given languages, locales, and region.
2858	Check if tokens are valid tokens for the locale.
2859	Split the date string using translations in locale info
2860	This function `parse` is used to parse date and time from a given date string using various formats, languages, locales, and settings. It returns a `datetime` object representing the parsed date or `None` if unable to parse. The function constructor creates a new `DateDataParser` object with the specified options if necessary.
2861	Attempts to parse the time part of date strings like '1 day ago, 2 PM'.
2862	Check if the locale is applicable to translate a given date string.
2863	Translates the date string to its English equivalent with options to keep formatting and using specific settings.
2864	Parses a date string with the given formats and returns a dictionary with the parsed date and the period.
2865	A method to generate ammo using different reader types based on the specified configuration. It supports various types of readers such as 'phantom', 'slowlog', 'line', 'uri', 'uripost', 'access', and 'caseline'. The method checks the specified ammo source (uris or file) and determines the appropriate reader type to generate ammo. If both uris and file are specified or neither is specified, it raises a configuration error. It also handles cases where the first line of the ammo file does not start with a digit, which would otherwise default to 'uri' type.
2866	translate http code to net code. if accertion failed, set net code to 314
2867	translate exception str to http code
2868	Read and process configuration settings for the phantom tool, setting up thread count, module paths, additional libraries, logging levels, timeouts, and stream configurations.
2869	Generate phantom tool run config.
2870	get merged info about phantom conf
2871	Compose benchmark block
2872	Polls stdout and stderr streams and writes their contents to log.
2873	Converts a string representing time in human-readable format to an integer representing the time in seconds, with optional default unit and multiplier.
2874	Configuring StepperWrapper by reading options and setting various attributes such as ammo file, loop limit, and URIs.
2875	Generate test data if necessary
2876	Choose the name for stepped data file
2877	Read stepper info from json
2878	Write stepper info to json.
2879	stpd generation using Stepper class
2880	Create a Load Plan as defined in schedule and publish its duration and steps.
2881	Return the RPM (Revolutions Per Second) for a given time `t`.
2882	Execute and check exit code
2883	The reason why we have two separate methods for monitoring and aggregates is a strong difference in incoming data.
2884	Create a set of points for `this` label
2885	Publish value to status
2886	Count the total number of codes that match a given regular expression.
2887	Say the workers to finish their jobs and quit.
2888	A feeder that runs in a distinct thread in the main process to feed tasks to a queue. It handles retries if the queue is full and waits for all workers to finish before exiting.
2889	Sets up logging with a file handler and two console handlers with different formatting and logging levels.
2890	override config options with user specified options
2891	Make preparations before running Tank
2892	Call shutdown routines.
2893	Collect data, cache it, and send to listeners.
2894	Notify all listeners about aggregate data and stats.
2895	Returns a marker function of the requested marker_type
2896	Parse duration string, such as '3h2m3s' into milliseconds
2897	Starts a local agent and records its process in a session.
2898	Start remote agent.
2899	Searching for line in jmeter.log such as Waiting for possible shutdown message on port 4445
2900	Modify JMX file by adding variables and adjusting settings based on JMeter version and external log options
2901	Gracefully terminates a running process by attempting to terminate it first and then killing it if it doesn't terminate within a specified timeout.
2902	Parse lines and return stats
2903	instantiate criterion from autostop config string
2904	Prepare config data.
2905	Startup and shutdown commands config used by agent.py on the target.
2906	Raise exception on disk space exceeded
2907	raise exception on RAM exceeded
2908	Gets width and height of terminal viewport
2909	Get next line for right panel
2910	Cut tuple of line chunks according to its visible length
2911	Render the left panel and generate lines with appropriate spacing and formatting.
2912	Main method to render screen view
2913	Add widget string to right panel of the screen.
2914	Right-pad lines of block to equal width
2915	Calculate the visible length of a string or a list of strings after cleaning markup.
2916	Creates load plan timestamps generator
2917	format level str
2918	Add a widget to the right panel of the screen.
2919	Send request to writer service.
2920	Tells core to take plugin options and instantiate plugin classes
2921	Retrieve a plugin of desired class, KeyError raised otherwise
2922	Retrieves a list of plugins of a specified class, raising KeyError if no matching plugins are found.
2923	Move or copy a single file to the artifacts directory. If the file already exists, log a warning and return. If keep_original is True, copy the file; otherwise, move the file. Set the file permissions to 0o644.
2924	Add file to be stored as result artifact on post-process phase.
2925	Generate a temporary file name in the artifacts base directory, close the temporary file handle, and set the file permissions to 0o644.
2926	Read configs set into storage.
2927	Flush current stat to file
2928	Get options list with requested prefix
2929	return sections with specified prefix
2930	Return all items found in this chunk based on date and benchmark information.
2931	Returns info object
2932	Prepare for monitoring - install agents etc
2933	Poll agents for data
2934	Send pending data set to listeners.
2935	Determines which plugin's configuration to use for the metrics collector. If both `telegraf` and `monitoring` configurations are specified, raises a ValueError. If only `telegraf` is specified, returns 'telegraf'. If only `monitoring` is specified, returns 'monitoring'. If neither is specified, sets a default configuration if available and returns it.
2936	store metric in data tree and calc offset signs
2937	decode agents jsons, count diffs
2938	Starts subscribing to channels. If the necessary connection isn't open yet, it opens now.
2939	Run forever and block until an exception is raised. Starts with the specified initial channels.
2940	Close any of open connections
2941	Perform one request, possibly raising RetryException in the case the response is 429. Otherwise, if error text contains "code" string, then it decodes to json object and returns APIError. Returns the body json in the 200 status.
2942	Request a new order with parameters such as symbol, quantity, side, type, and time in force. Optional parameters include limit price, stop price, and client order ID. Returns an Order object.
2943	Returns an order based on the given order ID.
2944	Get an open position.
2945	Get a list of assets
2946	Get an asset by its symbol.
2947	This function creates a subplan for joining multiple parallel steps into a single step. It ensures that each parallel step provides an output named `parallel_step_output`. The function then creates a join step using the `create_join_step` function and returns an `ExecutionValueSubplan` object containing the parallel steps and the join step.
2948	Ensures argument obj is a native Python dictionary, raises an exception if not, and otherwise returns obj.
2949	Ensures argument obj is either a dictionary or None; if the latter, instantiates an empty dictionary.
2950	Callback receives a stream of event_records.
2951	```json
"Record a stream of event records to json"
```
2952	Read a config file and instantiate the RCParser. Create a new ConfigParser for the given path and instantiate the RCParser with the ConfigParser as the config attribute. If the path doesn't exist, raise a ConfigFileError. Otherwise, return a new RCParser instance.
2953	Retrieve the configuration dictionary for a given repository from the ``.pypirc`` file, handling cases where the repository is not found or the file is invalid.
2954	This function recursively formats a configuration dictionary for GraphQL, converting it into a properly indented and structured string.
2955	Get a pipeline by name. Only constructs that pipeline and caches it.
2956	Returns all pipelines as a list.
2957	Poll the process until it returns a valid item or returns PROCESS_DEAD_AND_QUEUE_EMPTY if it is in a state where the process has terminated and the queue is empty.
2958	Execute pipeline using message queue as a transport
2959	Waits until all processes are enqueued.
2960	The `Field` function is used to define a configuration field with a specified type, default value, optionality, and description. It raises an error if the provided `dagster_type` is not a valid config type. The function returns an instance of `FieldImpl` with the provided configuration details.
2961	Builds the execution plan.
2962	Creates a new ExecutionPlan from a pipeline definition and the environment config.
2963	Build a pipeline which is a subset of another pipeline. Only includes the solids which are in solid_names.
2964	Returns the solid named "name" from the pipeline. Throws an error if the solid does not exist.
2965	Get the shell commands we'll use to actually build and publish a package to PyPI.
2966	Tags all submodules for a new release.Ensures that git tags, as well as the version.py files in each submodule, agree and that the new version is strictly greater than the current version. Will fail if the new version is not an increment (following PEP 440). Creates a new git tag and commit.
2967	Create a context definition from a pre-existing context. This can be useful in testing contexts where you may want to create a context manually and then pass it into a one-off PipelineDefinition.
2968	Annotate a function that can take the selected properties from a config_value into an instance of a custom type.
2969	Annotates a function to take selected properties of a `config_value` and an instance of a custom type, and materialize them.
2970	Automatically wraps a block of text with a specified prefix.
2971	Download an object from S3.
2972	Upload a file to S3.
2973	Wraps the execution of user-space code in an error boundary, ensuring that all user errors are wrapped in the `DagsterUserCodeExecutionError` and preserving the original stack trace of the user error.
2974	Create directory recursively with given mode. Reraise error if directory already exists.
2975	Wraps a user-provided function that may yield or return a value, returning a generator that asserts it only yields a single value.
2976	To create a context-free log instance for logging pipeline initialization failures without relying on the ExecutionContext to initialize DagsterLog.
2977	Whether a step in the solid execution was successful.
2978	Whether the solid execution was skipped
2979	Return dictionary of transformed results, with keys being output names. Returns None if execution result isn't a success.
2980	Returns transformed value either for DEFAULT_OUTPUT or for the output given as output_name. Returns None if execution result isn't a success. Reconstructs the pipeline context to materialize value.
2981	Returns the failing step's data that happened during the solid's execution, if any.
2982	Return a permissive dict that will permit the user to partially specify the permitted fields. Any fields that are specified and passed in will be type checked. Other fields will be allowed, but will be ignored by the type checker.
2983	Check if the dataset value is in the correct format (e.g., "project.dataset" or "dataset").
2984	Check if the given config_value is a valid table name according to the specified format.
2985	Execute the user-specified transform for the solid, logging and tracking relevant metrics.
2986	Takes a python cls and creates a type for it in the Dagster domain.
2987	A decorator for creating a resource. The decorated function will be used as the resource_fn in a ResourceDefinition.
2988	HTTP POST operation to create events in the Events API v2.
2989	Groups execution steps by solid, in topological order of the solids.
2990	Default method to acquire database connection parameters, setting defaults and updating based on settings.py.
2991	Get a new database connection based on provided parameters.
2992	Returns an active connection cursor to the database.
2993	Closes the client connection to the database.
2994	Builds an instance of model from the model_dict
2995	Return a list of models by translating a Mongo array to a python list.
2996	Returns the formfield for the array.
2997	Convert a dictionary to a model instance.
2998	Filter the queryset for the instance this manager is bound to.
2999	Computes the matrix of expected false positives for all possible sub-intervals of the complete domain of set sizes, assuming uniform distribution of set_sizes within each sub-interval.
3000	Computes the matrix of expected false positives for all possible sub-intervals of the complete domain of set sizes.
3001	Computes the optimal partitions given the size distributions and computed number of expected false positives for all sub-intervals.
3002	Compute the optimal partitions given a distribution of set sizes.
3003	Computes the functions C1 and C2 based on the input parameters a1, a2, r1, and r2. If r1 and r2 are both zero, it returns the average of a1 and a2. Otherwise, it calculates the values of C1 and C2 using the given formula.
3004	Initialize the slots of the LeanMinHash.
3005	Compute the byte size after serialization.
3006	Serialize this lean MinHash and store the result in an allocated buffer.
3007	Deserialize a lean MinHash from a buffer
3008	Update this MinHash with a new value using a specified hash function, and keep the minimum hash value of the two.
3009	Merges the other MinHash with this one, making this one the union of both. Raises a ValueError if the MinHash objects have different seeds or numbers of permutation functions.
3010	Create a MinHash which is the union of the MinHash objects passed as arguments.
3011	Index all sets given their keys, MinHashes, and sizes.
3012	Retrieves keys that reference sets with containment greater than the threshold with respect to the given MinHash and query size.
3013	Creates a new weighted MinHash given a weighted Jaccard vector.
3014	Remove the key from the index.
3015	Update the HyperLogLog with a new data value in bytes.
3016	Estimate the cardinality of the data values seen so far. Returns the estimated cardinality as an integer.
3017	Merge the other HyperLogLog with this one, making this the union of the two.
3018	Reset the current HyperLogLog to empty.
3019	Computes the average precision at k between two lists of items. Returns the average precision at k over the input lists.
3020	Computes the mean average precision at k between two lists of lists of items.
3021	Index all the keys added so far and make them searchable.
3022	Return the approximate top-k keys that have the highest Jaccard similarities to the query set.
3023	Cleanup client resources and disconnect from AsyncMinHashLSH storage.
3024	Return ordered storage system based on the specified config. The return value of this method contains keys and values. The values are ordered lists with the last added item at the end.
3025	Return an unordered storage system based on the specified config.
3026	Required to allow using custom USER_DETAILS_SERIALIZER in JWTSerializer. Defining it here to avoid circular imports
3027	Set the social login process state to connect rather than login.
3028	Select the correct text from the Japanese number, reading and alternatives.
3029	Parse scoped selector into scope and selector.
3030	Parses a single statement and returns a `BindingStatement`, `ImportStatement`, `IncludeStatement`, or `None` if EOF is reached.
3031	Parse a single literal value
3032	Advances to the next line.
3033	Try to parse a configurable reference (@[scope/name/]fn_name[()]).
3034	Reraises the given exception, appending the specified message to its string representation.
3035	Convert an operative config string to markdown format.
3036	Writes out Gin's operative config, and maybe adds a summary of it.
3037	Ensure `fn` can be wrapped cleanly by functools.wraps.
3038	Decorate a function or class with the given decorator. When `fn_or_cls` is a function, applies `decorator` to the function and returns the (decorated) result. When `fn_or_cls` is a class and the `subclass` parameter is `False`, this will replace `fn_or_cls.__init__` with the result of applying `decorator` to it. When `fn_or_cls` is a class and `subclass` is `True`, this will subclass the class, but with `__init__` defined to be the result of applying `decorator` to `fn_or_cls.__init__`. The decorated class has metadata (docstring, name, and module information) copied over from `fn_or_cls`. The goal is to provide a decorated class that behaves as much as possible like the original as possible, without modifying it (for example, inspection operations using `isinstance` or `issubclass` should behave the same way as on the original class).
3039	Returns `value` in a format parseable by `parse_value`, or `None`.
3040	Clears the global configuration, removing any parameter values set by `bind_parameter` or `parse_config`, as well as the set of dynamically imported modules. Optionally, it can also clear constants created by `constant`.
3041	Binds a parameter value to a specified binding key, updating the configuration for subsequent calls to configurable functions within the specified scope.
3042	Returns the currently bound value to the specified `binding_key`. The `binding_key` argument should look like 'maybe/some/scope/maybe.moduels.configurable_name.parameter_name'. Checks if the configurable and parameter are in the _CONFIG dictionary and returns the bound value. Raises ValueError if not found.
3043	Returns True if `arg_name` might be a valid parameter for `fn_or_cls`. Specifically, this means that `fn_or_cls` either has a parameter named `arg_name`, or has a `**kwargs` parameter.
3044	Get cached argspec for a given function.
3045	Returns the names of the supplied arguments to the given function.
3046	Returns the names of all positional arguments to the given function.
3047	Retrieve all default values for configurable parameters of a function.
3048	```python
Opens a new configuration scope. Provides a context manager for managing parameter bindings in a scoped manner.
```
3049	Decorator to make a function or class configurable.
3050	Retrieve the "operative" configuration as a config string, capturing relevant configurable parameters used by the current program. Filters out parameters not called during execution, formats values literally, and sorts the output lexicographically.
3051	Parse a file, string, or list of strings containing parameter bindings.
3052	Register a file reader for use in parse_config_file.
3053	Parse a Gin config file.
3054	Parse a list of config files followed by extra Gin bindings.
3055	Parse and return a single Gin value.
3056	A function that should be called after parsing all Gin config files.Calling this function allows registered "finalize hooks" to inspect (and potentially modify) the Gin config, to provide additional functionality.
3057	Provides an iterator over all values in a nested structure.
3058	Generator that provides an iterator over references in the given config.
3059	Creates a constant that can be referenced from Gin config files.
3060	Decorator for an enum class that generates Gin constants from values. Generated constants have format `module.ClassName.ENUM_VALUE`. The module name is optional when using the constant.
3061	Retrieves all selectors matching `partial_selector`.
3062	Returns all values matching `partial_selector` as a list.
3063	Returns the minimal selector that uniquely matches `complete_selector`.
3064	Translate a Mopidy search query to a Spotify search query
3065	Parse Retry-After header from response if it is set.
3066	Validate the new property value before setting it, raising PropertyError if the property is read-only or the value is invalid.
3067	Returns a dictionary describing the property
3068	Set the current value of the property.
3069	Get the thing at the given index.
3070	Initialize the handler with a list of Things and allowed hostnames.
3071	Set the default headers for all requests.
3072	Validate Host header. Ensure the host is in the allowed list. Raise a 403 error if not.
3073	Handle a GET request, including websocket requests.
3074	Handle an incoming message.
3075	Handle a POST request to perform actions on a thing.
3076	Handle a DELETE request.
3077	Start listening for incoming connections.
3078	Retrieve the action description as a dictionary.
3079	Start performing the action.
3080	Finish performing the action.
3081	Get the event description as a dictionary.
3082	Get the default local IP address.
3083	Get all IP addresses.
3084	Set a new value for this thing.
3085	Notify observers of a new value.
3086	Return the thing state as a Thing Description. Returns the state as a dictionary.
3087	Set the prefix for hrefs associated with this thing and its properties and actions.
3088	Get the thing's properties as a dictionary. Returns the properties as a dictionary, i.e. name -> description.
3089	Get the thing's actions as an array. Optionally filter by action name.
3090	Get the event descriptions for a given event name or all events if no event name is specified.
3091	Add a property to this thing.
3092	Remove a property from this thing.
3093	Get a property's value. Returns the property's value if found, else None.
3094	Returns a dictionary of property_name -> value.
3095	Set a property value.
3096	Get an action by name and ID. Returns the requested action if found, else None.
3097	Add a new event and notify subscribers.
3098	Add an available event.
3099	Perform an action on the thing.
3100	Remove an existing action. Returns a boolean indicating the presence of the action.
3101	Add an available action.
3102	Removes a websocket subscriber from the instance's list of subscribers and removes the subscriber from any event subscribers associated with the instance.
3103	Add a new websocket subscriber to an event.
3104	Remove a websocket subscriber from an event.
3105	Notify all subscribers of a property change.
3106	Notifies all subscribers of an action status change.
3107	Notify all subscribers of an event.
3108	Custom version of the standard annotate function that allows using field names as annotated fields.
3109	Updates all rows that match the filter.
3110	Creates multiple new records in the database. This allows specifying custom conflict behavior using .on_conflict(). If no special behavior was specified, this uses the normal Django create(..) Returns a list of either the dicts of the rows inserted, including the pk or the models of the rows inserted with defaults for any fields not specified
3111	Creates a new record in the database. Allows specifying custom conflict behavior using .on_conflict(). If no special behavior is specified, uses the normal Django create(..). Returns the primary key of the record that was created.
3112	Creates a new record in the database and then gets the entire row, allowing custom conflict behavior with .on_conflict(). If no special behavior is specified, uses the standard Django create().
3113	Builds the SQL compiler for an insert query.
3114	Verifies whether the given field will modify its value during the pre_save process.
3115	Gets the fields to use in an upsert.
3116	Signal handler for model save operations.
3117	When a model gets deleted.
3118	Selects whichever field is not None, in the specified order. It returns the value of the first field that is not None. If all fields are None, it returns the specified default value.
3119	Resolves expressions inside the dictionary.
3120	Compiles the HStore value into SQL.
3121	Gets a re-labeled clone of this expression.
3122	Adds an extra condition to an existing JOIN. This allows you to add extra conditions to an existing JOIN.
3123	Gets whether the field with the specified name is a HStoreField. Returns a tuple of a boolean indicating whether the field with the specified name is a HStoreField, and the field instance.
3124	Sets the values to be used in this query. Insert fields are fields that are definitely going to be inserted, and if an existing row is found, are going to be overwritten with the specified value. Update fields are fields that should be overwritten in case an update takes place rather than an insert. If we're dealing with a INSERT, these will not be used.
3125	Creates a REQUIRED CONSTRAINT for the specified hstore key.
3126	Rename an existing REQUIRED CONSTRAINT for the specified hstore key.
3127	Drops a REQUIRED CONSTRAINT for the specified hstore key.
3128	Gets the name for a CONSTRAINT that applies to a single hstore key.
3129	Creates the actual SQL used when applying the migration.
3130	Creates a custom setup.py command.
3131	Get the base class for the custom database back-end.
3132	Prepare the configured database by enabling the `hstore` extension if it's not already enabled.
3133	Overrides the base class to prevent casting all values to strings, supporting expressions in hstore fields.
3134	Builds the RETURNING part of the query.
3135	Builds the SQL INSERT statement.
3136	Rewrite a formed SQL INSERT query to include the ON CONFLICT clause.
3137	Rewrites a formed SQL INSERT query to include the ON CONFLICT DO UPDATE clause.
3138	Rewrite an SQL INSERT query to include the ON CONFLICT DO NOTHING clause.
3139	Builds the `conflict_target` for the ON CONFLICT clause.
3140	Gets the field on a model with the specified name. Returns the field with the specified name or None if no such field exists.
3141	Formats a field's name for usage in SQL.
3142	Format a field's value for usage in SQL.
3143	Creates a UNIQUE constraint for the specified hstore keys.
3144	Renames an existing UNIQUE constraint for the specified hstore keys.
3145	Drops a UNIQUE constraint for the specified hstore keys.
3146	Gets the name for a UNIQUE INDEX that applies to one or more keys in a hstore field. Arguments: table - The name of the table the field is a part of. field - The hstore field to create a UNIQUE INDEX for. key - The name of the hstore key to create the name for. This can also be a tuple of multiple names. Returns: The name for the UNIQUE index.
3147	Iterates over the keys marked as "unique" in the specified field.
3148	Adds an extra condition to this join.
3149	Compiles this JOIN into a SQL string by adding extra conditions.
3150	Approximate the 95% confidence interval for Student's T distribution. Given the degrees of freedom, returns an approximation to the 95% confidence interval for the Student's T distribution.
3151	Calculate the pooled sample variance for two samples.
3152	Calculate a t-test score for the difference between two samples.
3153	Determine whether two samples differ significantly using a Student's two-sample, two-tailed t-test with alpha=0.95.
3154	Return a topological sorting of nodes in a graph.
3155	Generates all possible solutions for the N-Queens problem, yielding tuples representing the column positions of queens on an N x N board.
3156	uct tree search
3157	Selects the next move based on the unexplored children or the best child.
3158	Randomly plays moves until both players pass.
3159	Filters out benchmarks not supported by both Pythons.
3160	Recursively expands benchmark names by resolving group names.
3161	Generates the list of strings that will be used in the benchmarks
3162	Initialize the strings for benchmarking regexes by prefixing and suffixing them with repeated characters, using values of n from a given list or the default values. Returns a list of tuples containing the regex and corresponding string for each combination.
3163	Returns the domain of the B-Spline.
3164	Fetch the messages from a specified category based on the given date and yield them, updating with user data.
3165	Parse posts and return them in order.
3166	Fetch user data.
3167	A method that fetches entries from a RSS url and returns a generator of items.
3168	Fetches the entries for a given category from an RSS feed.
3169	Returns the RSS argument parser.
3170	Fetch the bugs from the repository. Retrieves bugs updated since the given date.
3171	Get the information of a list of bugs.
3172	Get the comments of the given bugs.
3173	Get the history of the given bugs.
3174	Get the attachments of the given bugs.
3175	Get issue notes
3176	Fetches and processes merge requests from a GitLab API, handling blacklisting and inflating each merge request with additional details.
3177	Get merge notes
3178	Get merge versions
3179	Get the merge requests from pagination.
3180	Method to retrieve the full data of a merge request in GitLab.
3181	Get the merge versions from pagination
3182	Method to retrieve merge version details.
3183	Get the notes from pagination.
3184	Get emojis from pagination
3185	Get emojis of a note.
3186	Calculate the seconds to reset the token requests by obtaining the difference between the current date and the next date when the token is fully regenerated.
3187	Fetch items from GitLab API using links pagination.
3188	Initialize rate limit information
3189	Returns the GitLab argument parser.
3190	Method to fetch messages from a channel.
3191	Extracts the identifier from a Slack item by combining 'ts', 'user', or 'bot_id' fields.
3192	Fetch the number of members in a conversation, which is a supertype for public and private ones, DM and group DM.
3193	Fetch information about a channel.
3194	Fetch user info.
3195	Returns the Slack argument parser.
3196	Extracts and converts the update time from a Bugzilla item. The timestamp is extracted from the 'delta_ts' field and converted to UNIX timestamp format. Accounts forBugzilla servers ignoring timezone onHTTP requests.
3197	Parse a Bugzilla CSV bug list. The method parses the CSV file and returns an iterator of dictionaries. Each one of these contains the summary of a bug.
3198	Parse Bugzilla bugs details XML stream.
3199	Parse a Bugzilla bug activity HTML stream and extract information about activity events into a dictionary.
3200	Logout from the server.
3201	Get metadata information in XML format.
3202	Get a summary of bugs in CSV format.
3203	Get the information of a list of bugs in XML format.
3204	Get the activity of a bug in HTML format.
3205	Fetch events from the server based on category and date range.
3206	Fetch events from a specified category within a given date range.
3207	Fetches the events pages of a given group.
3208	Fetch the comments of a given event.
3209	Fetch the rsvps of a given event.
3210	Fetch an Askbot HTML question body. The method fetchs the HTML question retrieving the question body of the item question received.
3211	Returns a list of comments with the ids as hashes
3212	Build an Askbot HTML response by parsing question and answer information.
3213	Retrieve a question page using the API
3214	Retrieve a raw HTML question and all its information.
3215	Retrieve a list of comments by a given id.
3216	Parse the question info container of a given HTML question.
3217	Parse the answers of a given HTML question.
3218	Parse number of answer pages to paginate over them.
3219	Parse the user information of a given HTML container.
3220	Fetch reviews for a specific category based on the provided date and backend arguments.
3221	Parses a Gerrit reviews list.
3222	### Example 4:
Input:
def _fetch_gerrit28(self, from_date=DEFAULT_DATETIME):
    """ Specific fetch for gerrit 2.8 version.

    Get open and closed reviews in different queries.
    Take the newer review from both lists and iterate.
    """
    # Convert date to Unix time
    from_ut = datetime_to_utc(from_date)
    from_ut = from_ut.timestamp()

    filter_open = "status:open"
    filter_closed = "status:closed"

    last_item_open = self.client.next_retrieve_group_item()
    last_item_closed = self.client.next_retrieve_group_item()
    reviews_open = self._get_reviews(last_item_open, filter_open)
    reviews_closed = self._get_reviews(last_item_closed, filter_closed)
    last_nreviews_open = len(reviews_open)
    last_nreviews_closed = len(reviews_closed)

    while reviews_open or reviews_closed:
        if reviews_open and reviews_closed:
            if reviews_open[0]['lastUpdated'] >= reviews_closed[0]['lastUpdated']:
                review_open = reviews_open.pop(0)
                review = review_open
            else:
                review_closed = reviews_closed.pop(0)
                review = review_closed
        elif reviews_closed:
            review_closed = reviews_closed.pop(0)
            review = review_closed
        else:
            review_open = reviews_open.pop(0)
            review = review_open

        updated = review['lastUpdated']
        if updated <= from_ut:
            logger.debug("No more updates for %s" % (self.hostname))
            break
        else:
            yield review

        if not reviews_open and last_nreviews_open >= self.max_reviews:
            last_item_open = self.client.next_retrieve_group_item(last_item_open, review_open)
            reviews_open = self._get_reviews(last_item_open, filter_open)
            last_nreviews_open = len(reviews_open)
        if not reviews_closed and last_nreviews_closed >= self.max_reviews:
            last_item_closed = self.client.next_retrieve_group_item(last_item_closed, review_closed)
            reviews_closed = self._get_reviews(last_item_closed, filter_closed)
            last_nreviews_closed = len(reviews_closed)

Output:
Specific fetch for gerrit 2.8 version. Get open and closed reviews in different queries. Take the newer review from both lists and iterate.
3223	Return the Gerrit server version.
3224	Get the reviews starting from last_item.
3225	Return the item to start from in the next reviews group.
3226	Execute gerrit command
3227	Execute gerrit command against the archive
3228	Execute gerrit command with retry if it fails
3229	Returns the Gerrit argument parser.
3230	Get data associated to an issue
3231	Get attachments of an issue.
3232	Get messages of an issue.
3233	Get activities on an issue
3234	Get data associated to an user.
3235	Get the user data by URL. If the user data is not available, return '{}'.
3236	Get the issue data by its ID.
3237	Get a collection list of a given issue.
3238	Build URL project
3239	Return the items from Launchpad API using pagination.
3240	Fetch the groupsio paginated subscriptions for a given token
3241	Find the id of a group given its name by iterating on the list of subscriptions
3242	Fetch requests from groupsio API
3243	Returns the Groupsio argument parser.
3244	Generate a UUID based on the given parameters. The UUID will be the SHA1 of the concatenation of the values from the list. Each value must be a non-empty string; otherwise, the function will raise an exception.
3245	Fetches items using the given backend.
3246	Fetch items from an archive manager. Generator to get the items of a category from an archive manager. Only those items archived after the given date will be returned.
3247	Find available backends under the specified top package and its sub-packages. Returns a tuple containing two dictionaries: one with `Backend` classes and one with `BackendCommand` classes.
3248	Fetch items from the repository. The method retrieves items from a repository and provides an option to remove classified fields from the resulting items. This parameter is incompatible with archiving items. If the 'filter_classified' and 'archive' parameters are active at the same time, it raises a BackendError. The method also accepts additional parameters specific for each backend.
3249	Fetch the questions from an archive.

It returns the items stored within an archive. If this method is called but no archive was provided, the method will raise an `ArchiveError` exception.

:returns: a generator of items

:raises ArchiveError: raised when an error occurs accessing an archive
3250	Remove classified or confidential data from an item.
3251	Parse a list of arguments and return a `argparse.Namespace` object populated with validated values.
3252	Activate authentication arguments parsing
3253	Add arguments for parsing archive data
3254	Activate parsing of output arguments.
3255	Fetch and write items using the backend. If `fetch-archive` is specified, retrieve items from the archive manager; otherwise, fetch them directly. Convert items to JSON and write to the output file, handling potential I/O errors.
3256	Initializes the archive based on the parsed parameters.
3257	Extracts the update time from a MBox item using the 'Date' field and converts it to a UNIX timestamp.
3258	Parse a mbox file and return an iterator of dictionaries. Each dictionary contains an email message.
3259	Fetches and parses messages from a mailing list, filtering by date and validating each message.
3260	Copy the contents of a mbox to a temporary file.
3261	Check if the given message has the mandatory fields.
3262	Convert a message in CaseInsensitiveDict to a dict. This method also converts well-known problematic headers, such as Message-ID and Date, to a common name.
3263	Given a key, return a Message representation or raise a KeyError.
3264	A method that retrieves commits from a Git repository or a log file, returning them in the order they were obtained. It supports filtering commits by date range, specific branches, and whether to return only the latest commits since the last fetch. It can also disable repository updates before fetching commits.
3265	Fetches the commits for a given category and backend arguments. Returns a generator of items.
3266	Parse a Git log file and return an iterator of dictionaries containing commits.
3267	Initializes the repositories directory path.
3268	Returns the Git argument parser.
3269	Parse the Git log stream.
3270	Clone a Git repository.
3271	Count the objects (packed and unpacked) available in a repository. Raises an error if there is an issue counting the objects.
3272	Checks if the git repo is in a detached state. The repository is in a detached state when HEAD is not a symbolic reference.
3273	Update repository from its remote using 'fetch' command and synchronize it with the remote repository. Any local commits will be removed, and refs will be overwritten.
3274	Keep the repository in sync. This method will synchronize the repository with its 'origin', fetching newest objects and updating references. It uses low level commands which allow to keep track of which things have changed in the repository. The method also returns a list of hashes related to the new commits fetched during the process.
3275	Read the list of commits from the repository. The list of branches is a list of strings, with the names of the branches to fetch. If the list of branches is empty, no commit is fetched. If the list of branches is None, all commits for all branches will be fetched. The method returns the Git rev-list of the repository using the following options: git rev-list --topo-order.
3276	Read the commit log from the repository using specified options such as date range and branches.
3277	Show the data of a set of commits using the Git show command. Returns the output as a generator.
3278	Fetch changes and store them in a pack.
3279	Read the commits of a pack.
3280	Update references, remove old ones, and add new ones.
3281	Get the current list of local or remote refs.
3282	Update a reference in a Git repository.
3283	Run a command with a non-blocking call. Execute the `cmd` command in the directory specified by `cwd` and using the environment variables provided in the `env` dictionary. The output is returned as an iterator of lines, each encoded as bytes. Raises `RepositoryError` if an error occurs during the command execution.
3284	Reads the stderr of a subprocess and logs each line, updating a failed message if the subprocess returns an error code.
3285	Run a command and return the output as encoded bytes.
3286	A method to fetch tweets from the TwitterSearch API, looping through the results.
3287	Fetches tweets from a specified category based on the given parameters and returns them as a generator.
3288	This interface is used to fetch tweets that match a given query. It allows filtering results by a minimum tweet ID (`since_id`), a maximum tweet ID (`max_id`), geographic location (`geocode`), language (`lang`), and tweet type (`result_type`). The function returns a generator yielding batches of tweets.
3289	Returns the Twitter argument parser.
3290	A method that fetches data from the Google API.
3291	Fetch Google hit items for a given category and return as a generator.
3292	Parse the hits returned by the Google Search API.
3293	Fetch information about a list of keywords.
3294	Extracts the update time from a GitHub item. The timestamp used is extracted from 'updated_at' field. This date is converted to UNIX timestamp format. As GitHub dates are in UTC the conversion is straightforward.
3295	Extracts the category from a GitHub item.
3296	Fetches pull requests and processes them based on specified fields.
3297	Get repo info about stars, watchers and forks
3298	Get issue reactions
3299	Get reactions on issue comments
3300	Get the issue assignees
3301	Get pull request requested reviewers
3302	Get pull request commit hashes
3303	Get pull review comment reactions
3304	Get user and org data for the login.
3305	Get reactions of an issue.
3306	Fetch the issues from the repository. The method retrieves issues updated since a given date.
3307	Fetches pull requests from a GitHub repository based on a given date.
3308	Get repository data
3309	Get pull requested reviewers
3310	Get pull request commits.
3311	Get reactions of a review comment
3312	Get the user information and update the user cache
3313	Get the user public organizations
3314	```python
Return token's remaining API points
```
3315	Return array of all tokens remaining API points
3316	Check all API tokens defined and choose one with most remaining API points
3317	Check if we need to switch GitHub API tokens based on the current rate limit and the number of tokens used.
3318	Update rate limits data for the current token.
3319	Init metadata information.Metatada is composed by basic information needed to identify where archived data came from and how it can be retrieved and built into Perceval items.
3320	Stores a raw item in this archive and commits it to a database.
3321	Retrieve a raw item from the archive.
3322	Create a brand new archive.
3323	Generate a SHA1 hash code based on the given URI, payload, and headers.
3324	Checks whether the archive is valid by verifying the number of rows in the ARCHIVE_TABLE and METADATA_TABLE. Raises an ArchiveError if the metadata contains multiple entries or if there are entries without metadata. Logs the integrity status of the archive.
3325	Load metadata from the archive file
3326	Count the number of rows in a table.
3327	Creates a new archive in the filesystem with a random SHA1 name, organizes it into a subdirectory, and returns an `Archive` object. Raises an error if creation fails.
3328	Remove an archive from the filesystem
3329	Search archives based on origin, backend name, category, and archived date. Returns a list of archive names sorted by creation date.
3330	Search archives using filters.
3331	Retrieve the file paths stored under the base path.
3332	Check if the file is compressed and return the type if supported.
3333	Generate a months range.  
Generator of months starting on `from_date` until `to_date`. Each returned item is a tuple of two datetime objects like in (month, month+1).
3334	Convert an email message into a dictionary.
3335	Remove control and invalid characters from an xml stream.
3336	Convert a XML stream into a dictionary. The attributes are stored as single elements while child nodes are stored into lists. The text node is stored using the special key '__text__'.
3337	Parse a Redmine issues JSON stream. Returns a generator of parsed issues.
3338	Get the information of a list of issues.
3339	Get the information of a specific issue.
3340	Get the information of a given user.
3341	Call to get a resource.
3342	Fetches data from a Docker Hub repository. Retrieves various data points such as number of pulls, stars, and description, from a specified Docker Hub repository. Returns a generator of the fetched data.
3343	Fetch the Dockher Hub items by category and return a generator of items.
3344	Fetch information about a repository.
3345	Add extra information for custom fields Map custom fields to issue fields and return a set of items with the extra information mapped
3346	Filter custom fields from a given set of fields
3347	Parse a JIRA API raw response. The method parses the API response retrieving the issues from the received items
3348	Retrieve all the items from a given date.
3349	Retrieve all the issues from a given date.
3350	Retrieve all the comments of a given issue.
3351	Retrieve all the fields available.
3352	A source that fetches and parses one or more feeds to return the entries.Loopable.
3353	Retrieve all jobs
3354	Retrieve all builds from a job.
3355	Parse a StackExchange API raw response. The method parses the API response retrieving the questions from the received items. :param items: items from where to parse the questions :returns: a generator of questions
3356	Retrieves all the questions from a given date and yields them page by page.
3357	Returns the StackExchange argument parser.
3358	Fetch the pages based on the category and backend arguments.
3359	Get the maximum date in Unix time format from a list of reviews.
3360	Fetches wiki pages from a MediaWiki backend URL for versions >=1.27. Yields pages after retrieving revisions and filtering those with reviews. Handles pagination and skips duplicates or pages without reviews.
3361	Retrieve all pages from a namespace starting from apcontinue.
3362	Retrieve recent pages from all namespaces starting from rccontinue.
3363	A method that fetches messages from the Telegram server based on a given offset and chat list.
3364	Parse a Telegram JSON messages list. The method parses the JSON stream and returns an iterator of dictionaries. Each one of these contains a Telegram message.
3365	Check if a message can be filtered based on a list of chats. This method returns `True` when the message was sent to a chat of the given list or when chats is `None`.
3366	Fetch the messages that a bot can read.
3367	Generator which fetches articles from a specified category with pagination handled by `offset` parameter, logs the process, and yields parsed articles while skipping any that cannot be parsed or fetched.
3368	Adds extra information related to NNTP to an item fetched by a backend, including the offset.
3369	Parse a NNTP article into a dictionary.
3370	Fetch NNTP data from the server or from the archive.
3371	Fetch article data
3372	Fetch data from NNTP
3373	Fetch data from the archive
3374	Create a HTTP session and initialize the retry object for handling requests.
3375	Setup the rate limit handler with options to control rate limiting and sleep behavior.
3376	Sleep until the rate limit is restored or raises a RateLimitError exception if the sleep_for_rate flag is disabled.
3377	Update the rate limit and the time to reset from the response headers.
3378	Parse a Supybot IRC log file and returns an iterator of dictionaries, each containing a message from the file.
3379	Retrieve the Supybot archives after the given date.
3380	List the filepath of archives stored in dirpath.
3381	Parse a Supybot IRC stream and returns an iterator of dicts containing information about the date, type, nick, and body of each log entry.
3382	Parse timestamp section
3383	Parse the SupyBot message and extract relevant information based on predefined regular expressions.
3384	Fetches topics from a specified category, updated from a given date, and returns a generator of items.
3385	Parses a topics page stream and yields tuples containing the topic identifier, last update date, and whether it is pinned.
3386	Retrieve the topic with `topic_id` identifier.
3387	Retrieve the post with the specified `post_id` identifier.
3388	Fetches tasks of a specific category from a backend.
3389	Parse a Phabricator tasks JSON stream. The method parses a JSON stream and returns a list iterator. Each item is a dictionary that contains the task parsed data.
3390	Parse a Phabricator users JSON stream. The method parses a JSON stream and returns a list iterator. Each item is a dictionary that contains the user parsed data.
3391	Retrieve tasks updated since a specified date.
3392	Retrieve tasks transactions.
3393	Retrieve users.
3394	Retrieve data about PHIDs.
3395	Call a method. Raises ConduitError when an error is returned by the server.
3396	Extract the identifier from a Confluence item by combining the 'id' and 'version' fields, formatted as '<content>#v<version>'.
3397	Parse a Confluence summary JSON list. The method parses a JSON stream and returns an iterator of dictionaries. Each dictionary is a content summary. raw_json JSON string to parse returns a generator of parsed content summaries.
3398	Get the contents of a repository. Returns an iterator for pagination.
3399	Get the snapshot of a content for the given version.
3400	Parses the result property to extract the value and unit of measure, storing them in a Measurement object. Raises a ValueError if the value cannot be parsed as a float.
3401	Return a capabilities url
3402	Get and parse a WFS capabilities document, returning an instance of WFSCapabilitiesInfoset.
3403	Parse a WFS capabilities document, returning an instance of WFSCapabilitiesInfoset.
3404	Parsing the result element of the observation type to initialize a MeasurementTimeseries object.
3405	helper function to build a WFS 3.0 URL
3406	Get attribute elements
3407	Consruct fiona schema based on given elements.
3408	Get url for describefeaturetype request
3409	use ComplexDataInput with a reference to a document
3410	Get the list of Movie genres.
3411	Get the list of TV genres.
3412	Get the list of movies for a particular genre by id
3413	Get the basic movie information for a specific movie id.
3414	Get the alternative titles for a specific movie id.
3415	Get the cast and crew information for a specific movie id.
3416	Get the external ids for a specific movie id.
3417	Get the plot keywords for a specific movie id.
3418	Get a list of recommended movies for a movie.
3419	Get the release dates and certification for a specific movie id.
3420	Retrieve release date and certification information by country for a specific movie ID.
3421	Get the translations for a specific movie id.
3422	Get the similar movies for a specific movie id.
3423	Get the reviews for a particular movie id.
3424	Get the changes for a specific movie id. Changes are grouped by key and ordered by date in descending order.
3425	Get the list of upcoming movies
3426	Get the list of movies playing in theatres. This list refreshes every day. The maximum number of items this list will include is 100.
3427	Get the list of popular movies on The Movie Database. This list refreshes every day.
3428	Get the list of top rated movies.
3429	Get the status of movie ratings and lists.
3430	Rate a movie using the provided session or guest session ID.
3431	Get the movie credits for a specific person id.
3432	### Get the TV credits for a specific person id.
3433	Retrieve detailed information about a particular credit record.
3434	Discover TV shows by different types of data like average rating, number of votes, genres, the network they aired on and air dates.
3435	Get the system wide configuration info.
3436	Get the list of supported certifications for movies.
3437	Get the basic information for an account.
3438	Get the list of movies on an account watchlist.
3439	Generate a valid request token for user-based authentication.
3440	Authenticate a user with a TMDb username and password. Returns a dict representation of the JSON returned from the API.
3441	Generate a session id for user based authentication.
3442	Generate a guest session id.
3443	Get a list of rated movies for a specific guest session ID.
3444	Check to see if a movie id is already added to a list.
3445	Create a new list.
3446	Delete movies from a list that the user created.
3447	Clears all items within a list. This is an irreversible action and should be treated with caution. A valid session ID is required.
3448	Get the content ratings for a TV Series.
3449	Get the similar TV series for a specific TV series id.
3450	Get the list of TV shows that are currently on the air. This query looks for any TV show that has an episode with an air date in the next 7 days.
3451	Get the primary information about a TV season by its season number.
3452	Get the cast & crew credits for a TV season by season number.
3453	Get the external ids for a TV season by season number.
3454	Get the primary information about a TV episode by combination of a season and episode number.
3455	Get the TV episode credits by combination of season and episode number. Returns a dict representation of the JSON returned from the API.
3456	Get the external ids for a TV episode by combination of a season and episode number.
3457	Set attributes to dictionary values.
3458	Search for movies by title.
3459	Search for collections by name.
3460	Search for TV shows by title.
3461	Search for people by name.
3462	Search for companies by name.
3463	Search for keywords by name.
3464	Search the movie, tv show and person collections with a single query.
3465	Normalize and tokenize text, handling language-independent and language-dependent parts.
3466	Takes a list of reference sentences for a single segment and returns an object encapsulating information needed for BLEU calculation.
3467	Takes a reference sentence for a single segment and returns an object that encapsulates everything BLEU needs to know about it, including the length of the reference and a set of n-gram counts.
3468	Complementary error function.
3469	Creates the sentence alignment of two texts.
3470	Retrieve descriptors from a module and its submodules.
3471	Register Descriptors from json descriptor objects.
3472	Register descriptors.Descriptor-like: Descriptor instance Descriptor class module Iterable use Descriptor-likes in module use Descriptor-likes in Iterable Parameters desc Descriptor-like descriptors to register version str version ignore_3D bool ignore 3D descriptors.
3473	Output message.
3474	Check if the given class is a descriptor class, optionally including abstract classes.
3475	Converts the object to a JSON-serializable dictionary. If there are no parameters (`ps`), it returns a dictionary with the name of the descriptor. Otherwise, it returns a dictionary with the name and parameters.
3476	Get 3D coordinate.
3477	Calculate atomic surface area considering neighboring atoms.
3478	Calculate all atomic surface areas.
3479	Construct SurfaceArea from rdkit Mol type.
3480	Create Descriptor instance from json dict.
3481	Replace missing values with a specified value.
3482	Delete missing value.
3483	Get items. Returns an iterable of (Descriptor, value) pairs.
3484	Convert Result to dict.

- **Parameters:**
  - `rawkey(bool)`: A boolean value that determines the type of dictionary key returned.
    - `True`: Uses the Descriptor instance as the key.
    - `False`: Converts the key to a string.

- **Returns:**
  - `dict`: A dictionary representation of the Result object. If `rawkey` is `True`, the dictionary uses Descriptor instances as keys. If `False`, the dictionary uses string representations of the keys.
3485	Access descriptor value by descriptor name or instance.
3486	Decorator to log function calls.
3487	Decorator to synchronize function.
3488	Shows current progress message to stderr. Clears previous message before showing next one.
3489	Program message output.
3490	Utility function to handle runtime failures gracefully. Show concise information if possible, then terminate program.
3491	Get a temp filename for atomic download.
3492	Atomically rename and clean tempfile
3493	Clean up temp files
3494	Get the fixed part of the path without any wildcards.
3495	Given a API name, list all legal parameters using boto3 service model.
3496	Combine existing parameters with extra options supplied carelessly merge special type parameter if needed.
3497	Adds the whole list of API parameters into optparse.
3498	Terminates all threads by deleting the queue and forcing the child threads to quit.
3499	Add a single task into task queue
3500	Utility function to wait for all tasks to complete.
3501	Increase the processed task counter and display progress message.
3502	Retrieve S3 access keys from the environment, or None if not present.
3503	Retrieve S3 access keys from the command line, or None if not present.
3504	Retrieve S3 access key settings from s3cmd's config file, if present; otherwise return None.
3505	Initialize s3 access keys from environment variable or s3cfg config file.
3506	Connects to S3 storage.
3507	List all buckets
3508	Walk through a S3 directory and list the files and directories. This function supports multiple wildcards and can automatically detect directories.
3509	Walk through local directories from root basedir
3510	Expand the wildcards for an S3 path and return a list of filenames.
3511	Upload a single file or a directory by adding a task into queue.
3512	Uploads files to S3, handling multiple files and recursive mode.
3513	Creates a new bucket using the create_bucket API.
3514	Update privilege using metadata from S3 object.
3515	Print out a series of files from an S3 bucket using the provided source.
3516	Download a single file or a directory by adding a task into queue.
3517	Download files. This function can handle multiple files if source S3 URL has wildcard characters. It also handles recursive mode by downloading all files and keeping the directory structure.
3518	Copy a single file or a directory by adding a task into queue
3519	Copy files to target directory. Handles multiple files with wildcard characters and recursive mode. Creates directory structure if target is a directory.
3520	Delete files on S3
3521	Generic version of directory walk. Return file list without base path for comparison.
3522	Synchronizes directories by copying files between them or removing files from the target directory that are no longer present in the source directory if the --delete-removed option is specified.
3523	Calculate MD5 hash code for a local file.
3524	Get or calculate MD5 value of the local file.
3525	Ensure all directories are created for a given target file.
3526	Check MD5 for a local file and a remote file. Return True if they have the same MD5 hash, otherwise False.
3527	Partially match a path and a filter_path with wildcards. This function will return True if this path partially matches a filter path, which is used for walking through directories with multiple levels of wildcards.
3528	Recursively walks through S3 directories, filtering and processing items based on a given path and optionally handling recursion.
3529	Check all file items with given conditions.
3530	Get privileges of a local file.
3531	Get the s3 object with the S3 URL. Return None if not exist.
3532	Reads a chunk of data from a local file and returns it as a StringIO object.
3533	Uploads a file to S3 using either a singlepart or multipart upload method, depending on file size and configuration settings.
3534	Verifies the file size of the downloaded file.
3535	Write a local file chunk.
3536	Copy a single file from source to target using boto S3 library.
3537	Handle commands and dispatch to individual command handlers.
3538	Validate input parameters with given format, checking for wildcards in recursive mode.
3539	```text
Pretty print the result of s3walk by calculating the maximum width of each column and aligning them.
```
3540	Handle the `ls` command by listing buckets or walking through S3 with specific arguments.
3541	Handle the 'mb' command to create an S3 bucket. Validates the command arguments and creates a bucket with the provided name.
3542	Handler for put command
3543	Handles the 'get' command to retrieve files from a specified source to a target directory.
3544	Handle the 'cat' command by validating the input arguments and printing files from the specified source using the S3 handler.
3545	Processes the arguments for the dsync command.
3546	Handler for cp command
3547	Move files from source to target and delete source files.
3548	Deletes files from a specified source.
3549	Handles the size command by displaying the size and source.
3550	Calculates the total size of files and writes the result.
3551	Search for date information in the string.
3552	Search for time information in the string
3553	Search for timedelta information in the string
3554	Take json as dictionary parameter
3555	Discover gateways using multicast.
3556	Start listening by creating a multicast socket and running a thread to listen to messages.
3557	Get data from gateway
3558	Push data broadcasted from gateway to device
3559	Get key using token from gateway
3560	Called by RQ when there is a failure in a worker. Report data about the job with the exception.
3561	Initialize Rollbar integration for a Pyramid application.
3562	If there's no log configuration, set up a default handler.
3563	Get the current request object.implementation varies on library support. Modified below when we know which framework is being used.
3564	Saves configuration variables in this module's SETTINGS.
3565	Decorator for making error handling on AWS Lambda easier
3566	Reports an arbitrary string message to Rollbar.
3567	Searches a project for items that match the input criteria.
3568	Creates a `.rollbar` log file for use with the rollbar-agent.
3569	Returns a dictionary describing the logged-in user using data from `request`.
3570	Attempts to add information from the lambda context if it exists
3571	Attempts to build request data; if successful, sets the 'request' key on `data`.
3572	Returns True if we should record local variables for the given frame.
3573	Returns a dictionary containing data from the request. Can handle webob, django, djangorestframework, werkzeug, tornado, bottle, sanic, falcon, and plain wsgi request objects.
3574	Builds a dictionary containing information about the server environment.
3575	Returns the full payload as a string.
3576	Runs the protocol on port 8000.
3577	Compose a Hangul letter by combining chosung, joongsung, and jongsung.
3578	Decompose a Hangul letter into its constituent CHOSUNG, JOONGSUNG, and JONGSUNG components.
3579	Returns true if the passed string is a valid Hangul letter that contains a Jongsung character.
3580	Adds a grammatical postposition (josa) to the end of a Korean word based on its ending consonant. If the word ends with a specific exception, it appends a different postposition; otherwise, it appends a standard one.
3581	Returns true if node is inside the name of an except handler.
3582	Return true if given node is inside lambda
3583	Recursively returns all atoms in nested lists and tuples
3584	Checks if an assignment node in an except handler clobbers an existing variable. Returns (True, args for W0623) if assignment clobbers an existing variable, (False, None) otherwise.
3585	Returns True if the node is referencing the "super" builtin function
3586	Returns true if the function does nothing but raising an exception
3587	```plaintext
Return True if the given Name node is used in a function or lambda default argument's value.
```
3588	return true if the name is used in function decorator
3589	Return True if `frame` is an astroid.Class node with `node` in the subtree of its bases attribute
3590	return the higher parent which is not an AssignName, Tuple or List node
3591	Decorator to store messages that are handled by a checker method.
3592	Given a format string, return an iterator of all the valid format fields. It handles nested fields as well.
3593	Returns the specified argument from a function call.
3594	Return true if the given class node is subclass of exceptions.Exception.
3595	Check if the given exception handler catches the given error_type.
3596	Detect if the given function node is decorated with a property.
3597	Determine if the `func` node has a decorator with the qualified name `qname`.
3598	Navigate through the given astroid node's parent chain until an astroid.ExceptHandler or astroid.TryExcept node is found, returning that node if present, otherwise returning None.
3599	Checks if the given node is from a fallback import block.
3600	Return the collections of handlers handling the exception in arguments.
3601	Check if the node is in a TryExcept which handles the given exception.
3602	Returns `True` if the given class node should be considered as an abstract class.
3603	Return the inferred value for the given node, or None if inference fails or there is ambiguity.
3604	Return the inferred type for `node`. If there is more than one possible type, or if the inferred type is Uninferable or None, return None.
3605	Check if the given function node is a singledispatch function.
3606	Check if the postponed evaluation of annotations is enabled
3607	Split the names of the given module into subparts.
3608	Get a prepared module name from the given import node.
3609	Return a string which represents imports as a tree.
3610	Generates a dependencies graph and adds information about it to the report's section.
3611	triggered when an import statement is seen.
3612	triggered when a from statement is seen.
3613	Checks if the import statement is in the correct position among other instructions.
3614	Record the package being imported by a given node.
3615	Checks imports of a module `node` and groups them by category, ensuring they follow the order: standard, third party, and local.
3616	check relative import node is either an Import or From node, modname the imported module name.
3617	Notify an imported module, used to analyze dependencies.
3618	Check if the module is deprecated.
3619	Check if the module has a preferred replacement.
3620	Return a verbatim layout for displaying external dependencies.
3621	build the internal or the external depedency graph
3622	Read config file and return list of options
3623	Insert default options to sys.argv
3624	return true if the node should be treated
3625	get callbacks from handler for the visited node
3626	Launch the visit starting from the given node.
3627	Check the consistency of message ids by ensuring the checker part is the same for all messages.
3628	Visit a Call node.
3629	Check that a datetime was inferred. If so, emit a boolean-datetime warning.
3630	Check that the mode argument of an open or file call is valid.
3631	Manage message of different type and in the context of path.
3632	Launch layouts display
3633	get title for objects
3634	set different default options with _default dictionary
3635	true if builtins and not show_builtins
3636	visit one class and add it to diagram
3637	Return ancestor nodes of a class node.
3638	return associated nodes of a class node
3639	Recursively extract classes related to the given klass_node, considering ancestors and associated nodes up to the specified levels.
3640	Leave the pyreverse.utils.Project node. Return the generated diagram definition.
3641	Visits an `astroid.ImportFrom` node and catches modules for a package diagram if `pkgdiagram` is enabled.
3642	Return a class diagram definition for the given class and its related classes.
3643	Get the diagrams configuration data
3644	Check if the given owner should be ignored based on the specified conditions.
3645	Given an owner and a name, try to find similar names using a distance metric and return a limited number of choices.
3646	Indicate whether no-member should be emitted for the given owner.
3647	Checks if the given node has a parent of the given type.
3648	Check if the given name is used as a variadic argument.
3649	Verify if the given call node has variadic nodes without context
3650	Checks if the accessed attribute exists in the inferred nodes, ignoring certain patterns and types, and raises a message if the attribute is not found.
3651	Check if assigning to a function call, the function is possibly returning something valuable.
3652	Check that the given uninferable Call node does not call an actual function.
3653	Detect TypeErrors for unary operands.
3654	Return an iterator on interfaces implemented by the given class node.
3655	return a Project from a list of files or modules
3656	Visit an AST (Abstract Syntax Tree) package node and optionally tag it with a unique ID.
3657	Set the locals_type mapping for an ASTroid Function node and optionally tag the node with a unique id.
3658	Visit an astroid.AssignName node and handle locals_type.
3659	Handles an astroid.assignattr node by updating the instance_attrs_type for the given attribute name.
3660	Resolves module dependencies for an ASTroid import node.
3661	Resolves module dependencies for an `astroid.ImportFrom` node.
3662	return true if the module should be added to dependencies
3663	Notify an imported module, used to analyze dependencies
3664	return ansi escape code corresponding to color and style
3665	Colorize message by wrapping it with ANSI escape codes
3666	Register the reporter classes with the linter.
3667	Manage message of different type and in the context of path.
3668	launch layouts display
3669	manage message of different types, and colorize output using ansi escape codes
3670	Opens a vcg graph
3671	Draw a node with a title and custom attributes.
3672	draw an edge from a node to another.
3673	Check the new string formatting and verify the positions and names of the placeholders against the actual arguments provided.
3674	Check for bad escapes in a non-raw string.
3675	display a section as text
3676	Display an evaluation section as a text.
3677	display a table as text
3678	Format a table with given layout, content, and column widths
3679	Register the old ID and symbol for a warning that was renamed.
3680	Registers all messages from a checker.
3681	Register a MessageDefinition with consistency in mind.
3682	Check that a symbol is not already used.
3683	Raise an error when a symbol is duplicated.
3684	Raises an error when a message ID is duplicated for a given symbol.
3685	Get message definitions for the given message id or symbol.
3686	Generates a user-consumable representation of a message. Can be just the message ID or the ID and the symbol.
3687	Display help messages for the given message identifiers.
3688	Output full messages list documentation in ReST format
3689	Output full documentation in ReST format for all extension modules
3690	Returns the number of available CPU cores. Uses sched_getaffinity if available for virtualized or containerized environments. If not available, falls back to multiprocessing.cpu_count(). If neither is available, returns 1.
3691	Generate a report of message statistics, excluding informational messages, and format it as a table.
3692	Prepare sys.path for running the linter checks. Within this context, each of the given arguments is importable. Paths are added to sys.path in corresponding order to the arguments. We avoid adding duplicate directories to sys.path.`sys.path` is reset to its original value upon exiting this context.
3693	take a list of module names which are pylint plugins and load and register them
3694	Call the configuration hook for plugins. This walks through the list of plugins, grabs the "load_configuration" hook, if exposed, and calls it to allow plugins to configure specific settings.
3695	Override the set_option method to handle special options, update options methods, and set reporter names.
3696	Registers a new checker and initializes its reports and options.
3697	Disable all reporters
3698	Disable all other checkers and enable Python 3 warnings. If the error mode is activated, only enable error messages from the Python 3 porting checker. Additionally, apply the disable option from the configuration file if specified. Set the `_python3_porting_mode` flag to True.
3699	Return all available checkers as a list.
3700	Get all the checker names that this linter is aware of.
3701	Return checkers needed for activated messages and reports.
3702	Gets modules and errors from a list of modules and handles errors.
3703	Set the name of the currently analyzed module and initialize statistics for it.
3704	Check a module from its astroid representation.
3705	Make the global evaluation report
3706	Print help message about a particular message.
3707	Prints full documentation and exits the program.
3708	```Patched to show all argparse commands as being documented```
3709	List all the check groups that pylint knows about. These should be useful to know what check groups someone can disable or enable.
3710	Wrap the text on the given line length.
3711	Return the module name and the frame id in the module
3712	Ensure line is decoded from specified encoding, or use default encoding if encoding is invalid.
3713	Determines if the basename is matched in a regex blacklist.
3714	load all module and package in the given directory, looking for a 'register' function in each one, used to register pylint checkers
3715	Returns a string with each line prefixed by a hash symbol (#) and with the linesep inserted between each line.
3716	Return the user input's value from a 'compiled' value
3717	Format an options section using the INI format.
3718	Format options using the INI format.
3719	Insert a child node at the specified index.
3720	Appends a child to the current node and asserts it is not already a parent.
3721	Return the ancestor nodes
3722	format and write the given layout into the stream object
3723	trick to get table content without actually writing it  
return an aligned list of lists containing table cells values as string
3724	trick to compute the formatting of children layout before actually writing it return an iterator on strings (one for each child element)
3725	Walk the AST to collect block level options line numbers.
3726	Report an ignored message.
3727	Registers a report with a unique identifier, title, callback method, and checker.
3728	render registered reports
3729	add some stats entries to the statistic dictionary and raise an AssertionError if there is a key conflict
3730	Get the name of the property that the given node is a setter for.
3731	Get the property node for the given setter node.
3732	Check if a return node returns a value other than None.
3733	Get all possible raised exception types for the given raise node, excluding caught and uninferable exceptions.
3734	Inspect the source file to find messages activated or deactivated by id.
3735	Inspect the source file to find encoding problems. Sets encoding to "ascii" if not specified and checks each line for encoding errors.
3736	Inspect source code for fixme problems by checking comments and handling pylint disable clauses.
3737	Check if the name is a future import from another module.
3738	Returns True if stmt is inside the else branch for a parent For stmt.
3739	get overridden method if any
3740	Get extra information to add to the message for unpacking errors
3741	Detect that the given frames share a global scope.
3742	Checks if name_node has corresponding assign statement in same scope.
3743	Mark the name as consumed and delete it from the to_consume dictionary.
3744	Check names imported exists in the global scope.
3745	Return True if the node is in a local class scope, as an assignment.
3746	Return True if there is a node with the same name in the to_consume dict of an upper scope and if that scope is a function
3747	Check for unbalanced tuple unpacking and unpacking non-sequences.
3748	```python
Update consumption analysis for metaclasses.
```
3749	Returns a list of subpackages for the given directory.
3750	setup entry point
3751	Override the `run` method from the `install_lib` class to manually install included directories if any, while ignoring certain patterns in the files.
3752	Make a layout with similarities stats.
3753	standalone command line access point for a similarity checker.
3754	Append a file to search for similarities.
3755	Compute similarities in appended files.
3756	Display computed similarities on stdout
3757	find similarities in the two given linesets
3758	Iterate on similarities among all files by making a cartesian product.
3759	Returns an iterator over stripped lines of a text, starting from a specified index (default is 0).
3760	create the index for this set
3761	Check if a definition signature is equivalent to a call.
3762	Check equality of nodes based on the comparison of their attributes named attr_name.
3763	Check if original and overridden methods arguments have different default values. Return True if one of the overridden arguments has a default value different from the default value of the original argument. If one of the method doesn't have argument (.args is None) return False.
3764	Determine if the two methods have different parameters. They are considered to have different parameters if: * they have different positional parameters, including different names * one of the methods is having variadics, while the other is not * they have different keyword only parameters.
3765	Infers the return value of a function, returning `None` if inference fails or if there's ambiguity.
3766	Set the given node as accessed.
3767	Visit the class definition node and check various aspects such as the presence of an `__init__` method, slots, proper bases, and consistent MRO.
3768	Check if a class has a consistent method resolution order (MRO) or duplicate bases.
3769	Detect that a class inherits something which is not a class or a type.
3770	check method arguments, overriding
3771	Check if the given function node is an useless method override.
3772	Check if a method at a node could be a function, ignoring class, static, and abstract methods, initializers, and methods overridden from a parent class.
3773	Check that the given AssignAttr node is defined in the class slots.
3774	Check if the name handles access to a class member. If so, register it.
3775	Check that accessed members are defined.
3776	check that the given class node implements abstract methods from base classes
3777	Check that the signature of the two given methods match.
3778	Check if astroid.Name corresponds to first attribute variable name

Name is `self` for method, `cls` for classmethod and `mcs` for metaclass.
3779	Returns true if the given statement node raises an exception
3780	Verify that the exception context is properly set. An exception context can be only `None` or an exception.
3781	Check use of super in function definitions.
3782	Display results encapsulated in the layout tree
3783	Checks if a class node is a typing.NamedTuple class
3784	Check if a class definition defines an Enum class.
3785	Check if a class definition defines a Python 3.7+ dataclass.
3786	Initializes visit variables.
3787	check size of inheritance hierarchy and number of instance attributes
3788	Check the number of public methods in a class and warn if the count exceeds or falls below specified limits.
3789	increments the branches counter and checks boolean expressions
3790	Go through an "if" node and count its boolean expressions. Raises a message if the number of boolean expressions exceeds a configuration limit.
3791	Check the node for spelling errors in its docstring.
3792	Formats the message according to the given template.
3793	Check if the given token is a trailing comma.
3794	Check if the given node is an actual elif
3795	Check if a given if node can be simplified to a boolean expression.
3796	Check if an exception of type StopIteration is raised inside a generator.
3797	Return True if the exception node in the argument inherits from StopIteration.
3798	Check if a StopIteration exception is raised by the call to next function.
3799	Update and check the number of nested blocks within functions or methods.
3800	Get the duplicated types from the underlying isinstance calls.
3801	Check isinstance calls that can be merged together.
3802	Checks if there is any chained comparison in the expression. Adds a refactoring message if a boolOp contains comparison like a < b and b < c, which can be chained as a < b < c. Care is taken to avoid simplifying a < b < c and b < d.
3803	Returns true if node is 'condition and true\_value or false\_value' form. All of: condition, true\_value and false\_value should not be a complex boolean expression
3804	Check that all return statements inside a function are consistent.
3805	Check if the given node ends with an explicit return statement.
3806	```python
Analyzes an AST node to emit a convention message when a for loop uses range and len for indexing, and suggests using enumerate instead.
```
3807	Checks if Graphviz is available for a specified output format.
3808	Checking arguments and run project
3809	Write a package diagram
3810	Generate a class diagram with nodes and edges.
3811	initialize DotWriter and add options for layout.
3812	Initialize VCGWriter for a UML graph
3813	return True if message may be emitted using the current interpreter
3814	Returns a formatted help string for the given message id, including additional information if the checker reference is specified.
3815	Extracts the environment PYTHONPATH and appends the current sys.path to those.
3816	Pylint the given file. Traverse downwards until we are out of a python package. Start pylint and correct the filenames in the output.
3817	Run pylint from python
3818	recursive function doing the real work for get_cycles
3819	Returns the source code stored in `self._source`, ensuring it is initialized if necessary.
3820	Generates a graph file.
3821	Format an options section using ReST formatted output.
3822	If the msgid is a numeric one, then register it to inform the user it could furnish instead a symbolic msgid.
3823	Disable message output with the given ID
3824	Reenables a message with the given ID.
3825	Get the message symbol of the given message id Return the original message id if the message does not exist.
3826	return true if the message associated to the given message id is enabled
3827	Adds a message given by ID or name. If provided, the message string is expanded using args. AST checkers must provide the node argument (but may optionally provide line if the line number is different), raw and token checkers must provide the line argument.
3828	output a full documentation in ReST format
3829	Print detailed documentation for a specific checker, including its title, module, options, messages, and reports.
3830	Return the length of the indentation on the given token's line.
3831	Return a line with |s for each of the positions in the given lists.
3832	Get an indentation string for hanging indentation, consisting of the line-indent plus a number of spaces to fill up to the column of this token.
3833	Handle the start of a line by recording the first non-junk token. Adjust for async tokens and check for block openers.
3834	Returns the valid offsets for the token at the given position.
3835	Extracts indentation information for a hanging indent after a bracket.
3836	Extracts indentation information for a continued indent.
3837	Pushes a new token to the stack to manage continued indentation. Tokens that modify indentation offsets are added based on the given conditions.
3838	a new line has been encountered, process it if necessary
3839	Check that there are not unnecessary parentheses after a keyword.
3840	Extended check of PEP-484 type hint presence
3841	Check the spacing of a single equals sign
3842	Check that a binary operator is surrounded by exactly one space.
3843	Check the node line number and check it if not yet done
3844	Check for lines containing multiple statements.
3845	check lines have less than a maximum number of characters
3846	return the indent level of the string
3847	Check if the node is being used as an iterator
3848	Checks if an import node is in the context of a conditional
3849	Detect when a "bad" built-in is referenced.
3850	Check for indexing exceptions by inferring the value of a subscript node.
3851	Look for removed attributes
3852	Visit an except handler block and check for exception unpacking and leaking.
3853	Visit a raise statement and check for raising strings or old-raise-syntax.
3854	search the pylint rc file and return its path if it find it, else None
3855	Validate the value of an option based on its type.
3856	Patches OptionParser.expand_default to handle defaults without overriding values in the configuration file.
3857	Disables abbreviations for the given option.
3858	Register an options provider with a specific priority and add it to the list of options providers. If the provider has non-grouped options and owns its group, add an option group to the provider. Otherwise, add individual optik options for the provider. For each group specified by the provider, add an option group with the specified options and documentation.
3859	optik callback for option setting
3860	Set option on the correct option provider
3861	Write a configuration file according to the current configuration into the given stream or stdout.
3862	Dispatch values previously read from a configuration file to each options provider.
3863	Override configuration according to command line parameters.
3864	add a dummy option section for help purpose
3865	return the usage string for available options
3866	Initialize the provider using default values.
3867	get the config attribute corresponding to opt
3868	Return the dictionary defining an option given its name
3869	return an iterator on options grouped by section
3870	Determines if a BoundMethod node represents a method call.
3871	Checks if node represents a string with complex formatting specs.
3872	Clears any state left in this checker from last module checked.
3873	Checks to see if a module uses a non-Python logging module.
3874	Checks to see if the module uses Python's built-in logging and adds the logging names to a set.
3875	Checks calls to logging methods.
3876	Checks that format string tokens match the supplied arguments.
3877	Return True if the node is inside a kind of for loop
3878	Returns the loop node that holds the break node in arguments.
3879	Returns true if the loop may end up in a break statement.
3880	Returns a tuple of property classes and names. Property classes are fully qualified, and property names are the actual names.
3881	Determines the name type of a function based on its decorators and whether it is a method or attribute.
3882	Make a report of percentage of different types documented and percentage of different types with a bad name
3883	return True if the object is a method redefined via decorator.
3884	Is this a call with exactly 1 argument, where that argument is positional?
3885	Check that a Starred expression is used in an assignment target, except in function calls or PEP 448 unpacking contexts.
3886	Check that a name is both nonlocal and global.
3887	Checks if the abstract class is instantiated with abc.ABCMeta as metaclass.
3888	Check that any loop with an else clause has a break statement.
3889	Check that a node is inside a for or while loop
3890	initialize visit variables and statistics
3891	Check for various kinds of statements without effect.
3892	check whether or not the lambda is suspicious
3893	check the use of an assert statement on a tuple.
3894	Check duplicate key in dictionary
3895	Check if a node has unreachable code.
3896	check that a node is not inside a finally clause of a try...finally statement. If a parent type is in breaker_classes, skip the check.
3897	Check that the argument to `reversed` is a sequence
3898	Check module level assigned names and apply naming conventions.
3899	check for a name using the type's regexp.
3900	Check if a node has a non-empty docstring.
3901	Check if we compare to a literal, which is usually what we do not want to do.
3902	Create the subgraphs representing any `if` and `for` statements.
3903	Parse the body and any `else` block of `if` and `for` statements, connecting loose ends to a bottom node in a graph.
3904	Check if an ASTroid module's complexity exceeds the configured maximum. If it does, add a message indicating the module's name and complexity.
3905	Adds a checker to collect visit and leave methods.
3906	Call visit events of astroid checkers for the given node, recurse on its children, then leave events.
3907	Adds a relationship between two objects.
3908	Returns a relationship or None for the given object and relation type.
3909	Retrieve visible attributes, possibly with class name
3910	return visible methods
3911	Creates a new diagram object with the given title and node. Adds the object to the diagram and updates the internal state.
3912	return class names if needed in diagram
3913	Return all class nodes in the diagram
3914	Return a class by its name, raise KeyError if not found.
3915	Return all module nodes in the diagram
3916	Return a module by its name, raise KeyError if not found.
3917	Return a module by its name, looking also for relative imports; raise KeyError if not found.
3918	Add dependencies created by from-imports
3919	Removes itself from the cache. This is required by the oauthlib.
3920	Determines which method of getting the query object for use
3921	Returns the User object if the username and password match; otherwise returns None.
3922	returns a Token object with the given access token or refresh token
3923	Creates a Token object and removes all expired tokens that belong to the user.
3924	Creates Grant object with the given params
3925	Get the Grant object with the given client ID and code.
3926	Given a uri, headers, data, and method, prepares the request parameters by setting default headers and method if not provided, adding data to the URI for GET requests, and ensuring data is None for POST requests.
3927	Initialize an app with a Flask instance. You can also pass the Flask instance later.
3928	Registers a new remote application.
3929	Sends a request to the remote server with OAuth tokens attached.
3930	Returns a redirect response to the remote authorization URL with the signed callback given.
3931	Handles an oauth1 authorization response.
3932	Handles an oauth2 authorization response.
3933	Handles authorization response smartly.
3934	Handles an OAuth callback.
3935	Creates a hashable object for the given token, suitable for use as a dictionary key.
3936	Uses cached client or create new one with specific token.
3937	Creates a client with specific access token pair.
3938	Creates a context to enable the oauthlib environment variable for debugging with insecure transport. If the app is not running in debug or testing mode, it will issue a warning.
3939	When a consumer confirms an authorization request, this method extracts necessary parameters, retrieves realms and credentials, creates an authorization response, and logs the success. It handles OAuth1 and InvalidClient errors by redirecting to an error URI.
3940	Request token handler decorator.
3941	Get client secret. The client object must have a `client_secret` attribute.
3942	Get request token secret.
3943	Get access token secret.
3944	Default realms of the client.
3945	Get realms for the provided request token.
3946	Get redirect URI for the given request token.
3947	Retrieves a previously stored client provided RSA key.
3948	Validate that supplied client key.
3949	Validates request token is available for client.
3950	Validates if the access token is available for the given client.
3951	Validate the timestamp and nonce is used or not.
3952	Validate if the redirect_uri is allowed by the client.
3953	Check if the token has permission on those realms.
3954	Validate verifier exists.
3955	Verifies if the request token exists.
3956	Verify if the realms match the requested realms.
3957	Save access token to database.
3958	Save request token to database.
3959	Save verifier to database.
3960	The error page URI.
3961	Handles the authorization request when the consumer confirms it. Extracts parameters, processes the authorization response, and handles exceptions such as client errors, OAuth2 errors, and other generic exceptions.
3962	Verify current request, get the oauth data.
3963	Return client credentials based on the current request.
3964	Determines if client authentication is required for the current request based on rfc6749 guidelines for specific grant types and client confidentiality.
3965	Authenticates itself in other means as described in RFC 6749 section 3.2.1.
3966	Authenticate a non-confidential client.
3967	Get the list of scopes associated with the refresh token.
3968	Ensures the requested scope matches the scope originally granted by the resource owner. If the scope is omitted, it is treated as equal to the scope originally granted.
3969	Default redirect_uri for the given client.
3970	```
Default scopes for the given client.
```
3971	Invalidate an authorization code after use.
3972	Persist the authorization code.
3973	Persist the Bearer token and return the default redirect URI.
3974	Validate access token. Checks if the token is available, has expired, and has the correct scopes.
3975	Ensure client_id belong to a valid and active client.
3976	Ensure the grant code is valid.
3977	Ensures the client is authorized to use the grant type requested by checking if it is part of the client's `allowed_grant_types` or the default grant types.
3978	Ensure the token is valid and belongs to the client.
3979	Ensure client is authorized to use the response type requested.
3980	Ensure the client is authorized access to requested scopes.
3981	Ensure the username and password is valid. Attach user object on request for later using.
3982	Revoke an access or refresh token.
3983	Update some required parameters for OAuth2.0 API calls.
3984	Recursively converts dictionary keys to strings.
3985	Change the authorization header from Bearer to OAuth2 for Weibo's non-standard server.
3986	Creates a remote app and registers it.
3987	Creates a remote app only.
3988	Extract request params.
3989	Ensure text is bytes type.
3990	Decode base64 string.
3991	Create a response class for Flask with specified headers, body, and status code.
3992	Gets the cached clients dictionary in the current context.
3993	Adds remote application and applies custom attributes on it.
3994	Creates and adds a new remote application based on the provided name and version (defaulting to OAuth2 if not specified).
3995	Call the method repeatedly such that it will raise an exception.
3996	Call the method repeatedly such that it will return a PKey object.
3997	Call the function with an encrypted PEM and a passphrase callback.
3998	Checks the function with an encrypted PEM and a passphrase callback which returns the wrong passphrase.
3999	Checks the function with an encrypted PEM and a passphrase callback that returns a non-string, catching any ValueError exceptions.
4000	Create a CRL object, add 100 Revoked objects, and call get_revoked method repeatedly.
4001	Copies an empty Revoked object repeatedly and frees the copies manually.
4002	Create a certificate request. The request is signed with the provided key using the specified digest method. The subject of the request is defined by keyword arguments such as country, state, locality, organization, and common name. The function returns the certificate request in an X509Req object.
4003	Generate a certificate given a certificate request.
4004	Builds a decorator to ensure that functions relying on OpenSSL functions not present in the build raise NotImplementedError, rather than AttributeError from cryptography.
4005	Let SSL know where we can find trusted certificates for the certificate chain.
4006	Set the passphrase callback for handling passphrases when loading encrypted private keys.
4007	Load a certificate chain from a file.
4008	Load a certificate from a file.
4009	Load a certificate from a X509 object.
4010	Add certificate to chain
4011	Load a private key from a file
4012	Load a private key from a PKey object.
4013	Load the trusted certificates that will be sent to the client.
4014	Sets the maximum depth for the certificate chain verification that shall be allowed for this Context object.
4015	Load parameters for Ephemeral Diffie-Hellman from a file
4016	Set the list of ciphers to be used in this context.
4017	Sets the list of preferred client certificate signers for this server context. This list of certificate authorities will be sent to the client when the server requests a client certificate.
4018	Add the CA certificate to the list of preferred signers for this context.
4019	Specify a callback function to be called when clients specify a server name.
4020	Enable support for negotiating SRTP keying material.
4021	Specify a callback function for Next Protocol Negotiation.
4022	Specify the protocols that the client is prepared to speak after the TLS connection has been negotiated using Application Layer Protocol Negotiation.
4023	Specify a callback function that will be called on the server when a client offers protocols using ALPN.
4024	Sets the OCSP server/client callback for the SSL context.
4025	Set a callback to provide OCSP data for TLS handshake stapling on the server side.
4026	Set a callback to validate OCSP data stapled to the TLS handshake on the client side.
4027	Switch this connection to a new session context.
4028	Retrieve the servername extension value if provided in the client hello message, or None if there wasn't one.
4029	Set the value of the servername extension to send in the client hello.
4030	Receive data on the connection.
4031	Receive data on the connection and copy it directly into the provided buffer.
4032	Read bytes from the write end of a memory BIO associated with a Connection. The method ensures that bytes are read to prevent the buffer from filling up and the Connection from being unable to perform further actions. It checks if the Connection was created with a memory BIO and if the `bufsiz` parameter is an integer before proceeding with the read operation. If the read result is less than or equal to zero, it handles any BIO errors. Otherwise, it returns the read bytes.
4033	Renegotiate the session. Returns True if the renegotiation can be started, False otherwise.
4034	Send the shutdown message to the Connection. Return True if the shutdown completed successfully, False otherwise.
4035	Retrieve the list of ciphers used by the Connection object.
4036	Returns the list of certificate authorities that are suggested for client authentication.
4037	Sets the shutdown state of the Connection.
4038	Retrieve the random value used with the server hello message.
4039	Retrieve the random value used with the client hello message.
4040	Retrieve the value of the master key for this session.
4041	Obtain keying material for application use.
4042	Returns the Session currently used.
4043	Obtain the name of the currently used cipher.
4044	Obtain the number of secret bits of the currently used cipher.
4045	Obtains the protocol version of the currently used cipher. Returns the protocol name of the currently used cipher or :obj:`None` if no connection has been established.
4046	Retrieves the protocol version of the current connection.
4047	Get the protocol that was negotiated by NPN. Returns a bytestring of the protocol name. If no protocol has been negotiated yet, returns an empty string.
4048	Set the client's ALPN protocol list for protocol negotiation.
4049	Get the protocol that was negotiated by ALPN. Returns a bytestring of the protocol name. If no protocol has been negotiated yet, returns an empty string.
4050	Allocate a new OpenSSL memory BIO and arrange for automatic cleanup using the garbage collector.
4051	Copy the contents of an OpenSSL BIO object into a Python byte string.
4052	Set the time value of an ASN1 time object using a string representation.
4053	Retrieve the time value of an ASN1 time object.
4054	Return a single curve object selected by name. See get_elliptic_curves for information about curve objects. :param name: The OpenSSL short name identifying the curve object to retrieve. :type name: unicode If the named curve is not supported then ValueError is raised.
4055	Dumps a public key to a buffer.
4056	Load a public key from a buffer.
4057	Sign a data string using the given key and message digest.
4058	Verify the signature for a data string.
4059	Dumps a certificate revocation list to a buffer based on the specified file type.
4060	Export as a "cryptography" key.
4061	Generate a key pair of the given type, with the given number of bits. This generates a key "into" the this object.
4062	Check the consistency of an RSA private key.
4063	Get the curves supported by OpenSSL.
4064	Get, cache, and return the curves supported by OpenSSL.
4065	Create a new OpenSSL EC_KEY structure initialized to use this curve. The structure is automatically garbage collected when the Python object is garbage collected.
4066	Return the DER encoding of this name.
4067	List of components of this name, as a sequence of 2-tuples.
4068	Returns the short type name of this X.509 extension.
4069	Returns the data of the X509 extension, encoded as ASN.1.
4070	Export as a `cryptography` certificate signing request.
4071	Set the public key of the certificate signing request.
4072	Get the public key of the certificate signing request.
4073	Return the subject of this certificate signing request.
4074	Adds X.509 extensions to the certificate signing request.
4075	Returns the X.509 extensions in the certificate signing request.
4076	Verifies the signature on this certificate signing request using the provided public key. Returns True if the signature is correct, raises an error if the signature is invalid or there is a problem verifying it.
4077	Export as a ``cryptography`` certificate.
4078	Sets the version number of the certificate. Note that the version value is zero-based, e.g., a value of 0 is V1.
4079	Get the public key of the certificate.
4080	Set the public key of the certificate.
4081	Sign the certificate with this key and digest type.
4082	Return the signature algorithm used in the certificate. Raises ValueError if the signature algorithm is undefined.
4083	Return the digest of the X509 object.
4084	Set the serial number of the certificate.

:param serial: The new serial number.
:type serial: :py:class:`int`

:return: :py:data:`None`
4085	Return the serial number of this certificate as an integer value.
4086	Adjusts the timestamp on which the certificate stops being valid by a specified number of seconds.
4087	Adjusts the start validity timestamp of a certificate by a specified number of seconds.
4088	Check whether the certificate has expired.
4089	Return the issuer of this certificate.
4090	Set the issuer of this certificate.
4091	Return the subject of this certificate.
4092	Set the subject of this certificate.
4093	Adds extensions to the certificate.
4094	Get a specific extension of the certificate by index.
4095	Adds a trusted certificate to the certificate store. Raises TypeError if the certificate is not an X509 object. Raises OpenSSL.crypto.Error if OpenSSL encounters issues with the certificate. Returns None if the certificate is added successfully.
4096	Adds a certificate revocation list to this store.
4097	Sets the verification time for certificates in a store.
4098	Set up the store context for a subsequent verification operation. Calling this method more than once without first calling :meth:`_cleanup` will leak memory.
4099	Convert an OpenSSL native context error failure into a Python exception.
4100	Verify a certificate in a context. Raises X509StoreContextError if an error occurred when validating a certificate in the context.
4101	Sets the serial number.
4102	Get the serial number formatted as a hexadecimal number encoded in ASCII.
4103	Sets the reason for a revocation, either deleting the reason if None is provided or updating it with a valid byte string.
4104	Gets the reason for a certificate revocation.
4105	Set the revocation timestamp. :param bytes when: The timestamp of the revocation, as ASN.1 TIME. :return: ``None``
4106	Export as a `cryptography` CRL.
4107	Return the revocations in this certificate revocation list. These revocations will be provided by value, not by reference. That means it's okay to mutate them: it won't affect this CRL.
4108	Get the CRL's issuer.
4109	Signs the CRL using the provided issuer's certificate, private key, and digest method.
4110	Exports a Certificate Revocation List (CRL) as a string.
4111	Return the type name of the PKCS7 structure.
4112	Replace or set the CA certificates within the PKCS12 object.
4113	Dumps a PKCS12 object as a string.
4114	Sign the certificate request with a private key and a specified digest type.
4115	Verifies a signature on a certificate request.
4116	Generate a base64 encoded representation of this SPKI object.
4117	Get the public key of this certificate.
4118	Set the public key of the certificate.
4119	Converts an OpenSSL library failure into a Python exception by retrieving error codes and messages from the error queue.
4120	If `obj` is text, emit a warning that it should be bytes instead and try to convert it to bytes automatically.
4121	Internal helper to provide a colored message, depending on whether the output is to a terminal
4122	Return extra config options to be passed to the TrelloIssue class
4123	Returns a list of dicts representing issues from a remote service.
4124	A wrapper around get_comments that builds the taskwarrior annotations.
4125	Get the list of boards to pull cards from. If the user gave a value to trello.include_boards use that, otherwise ask the Trello API for the user's boards.
4126	Returns a list of filtered Trello lists for the given board based on the configuration values of trello.include_lists and trello.exclude_lists.
4127	Returns an iterator for the cards in a given list, filtered according to configuration values of trello.only_if_assigned and trello.also_unassigned.
4128	Returns an iterator for the comments on a certain card.
4129	Build the full URL to the API endpoint
4130	Pagination utility that retrieves data from a given URL and handles pagination through the 'next' link field in the response headers.
4131	Utility for ripping apart github's Link header field.
4132	Get all issues matching a github query
4133	Return a list of pull requests for a given tag.
4134	Aggregate issues from multiple targets using multiprocessing.
4135	Return a main config value, or default if it does not exist.
4136	Get defined templates for configuration values.
4137	Validate generic options for a particular target
4138	Return true if the issue in question should be included
4139	Make a RST-compatible table
4140	Retrieve password from the given command
4141	Accepts both integers and empty values.
4142	Pull down tasks from forges and add them to your taskwarrior tasks.
4143	Perform a request to the fully qualified URL and return the response as JSON.
4144	Pages through an object collection from the bitbucket API and returns an iterator that lazily goes through all the 'values' of all the pages in the collection.
4145	Find the local UUID for a given issue by matching it with stored issue keys or the task's description.
4146	Merge array `field` from `remote_issue` into `local_task`. Preserves local entries without modification and appends remote entries if not present in local. If `hamming` is `True`, compares entries by truncating to maximum length and comparing Hamming distances.
4147	Returns a list of UDAs defined by given targets.
4148	Parse the big ugly sprint string stored by JIRA. extracts the id, rapid ViewId, state, name, startDate, endDate, completeDate, and sequence.
4149	Gets valid user credentials from storage. If nothing has been stored or if the stored credentials are invalid, the OAuth2 flow is completed to obtain new credentials. Returns the obtained credentials.
4150	Compute ROUGE-n scores efficiently for sequences that are involved in multiple scoring comparisons.
4151	Calculate p-values for gene ontology (GO) enrichment.
4152	Apply Benjamini-Hochberg FDR correction to p-values.
4153	Standardize the mean and variance of the data across a specified axis.
4154	Visualize the dataframe using a heatmap.
4155	Adjusts spines and ticks on a plot axis based on a list of spines to keep.
4156	Prepare argparser object with subcommands for Gene Set Enrichment Analysis in Python.
4157	Add function 'prerank' argument parsers.
4158	Add function 'plot' argument parsers.
4159	Add function 'enrichr' argument parsers.
4160	This function calculates the enrichment score for a given gene list and gene set using the GSEA method, based on correlations between genes and a set of gene sets. It computes the enrichment score, null distribution, indices of enriched genes, and running enrichment scores.
4161	Build shuffled ranking matrix when permutation_type eq to phenotype.
4162	Rank a gene expression table based on different statistical methods and return a Series of rankings.
4163	Compute nominal p-value for S from esnull by using the positive or negative portion of the distribution corresponding to the sign of the observed ES(S).
4164	Compute nominal pvals, normalized ES, and FDR q value.
4165	Get available marts and their names.
4166	Returns available datasets from the selected mart
4167	Get available attributes from the selected dataset
4168	Get available filters from dataset you've selected
4169	Query data using BioMart and return a DataFrame.
4170	Run Gene Set Enrichment Analysis.
4171	Run Gene Set Enrichment Analysis with single sample GSEA tool
4172	Run Gene Set Enrichment Analysis with pre-ranked correlation defined by user
4173	Generate new figures with selected figure format by reproducing GSEA desktop outputs.
4174	Set cpu numbers to be used based on the number of processes.
4175	Load gene set dict.
4176	Return active enrichr library name. Official API
4177	download enrichr libraries.
4178	Only use for GSEA heatmap.
4179	Reformat GSEA results and save to CSV or TXT.
4180	Pre-process the input data by reading it into a Pandas DataFrame, handling duplicated gene names, filling NA values, setting gene names as the index, selecting numeric columns, dropping genes with a standard deviation of 0, and adding a small constant to avoid zeros.
4181	GSEA main procedure
4182	GSEA prerank workflow, parsing rankings, setting CPU numbers, filtering gene sets, computing ES, NES, pval, FDR, RES, generating reports, and plotting results.
4183	Single Sample GSEA workflow with permutation procedure
4184	Single Sample GSEA workflow using multiprocessing.
4185	Save es and stats.
4186	Replot and generate plots based on GSEA results.
4187	Run ENRICHR API.
4188	Parse gene_sets input file type.
4189	Parse gene list based on input type and return a list of genes.
4190	Send gene list to enrichr server
4191	Compare the genes sent and received to get successfully recognized genes.
4192	Retrieve background genes based on file input or Biomart database.
4193	Run enrichr for one sample gene list but multi-libraries
4194	Create a cube primitive with specifying size, center, and color.
4195	create an icosphere mesh
4196	Create a torus mesh
4197	Creates a plane with specified number of vertices along its edges but no interior vertices. Used primarily for creating a simpler bottom for cube_hires.
4198	Creates a high-resolution box with customizable segments in each direction, offering the option to adjust its complexity and appearance through various parameters and transformations.
4199	Reads a color name from a file and returns the corresponding red, green, and blue values. If the color name is not found, returns the default white color (255, 255, 255).
4200	Check if a variable is a list and is the correct length.
If variable is not a list it will make it a list of the correct length with
all terms identical.
4201	Make a variable a list if it is not already. If variable is not a list it will make it a list of the correct length with all terms identical.
4202	Writes a filter to a FilterScript object or a filename.
4203	Apply LS3 Subdivision Surface algorithm using Loop's weights.
4204	Merge together all the vertices that are nearer than the specified threshold.
4205	Closes holes smaller than a given threshold
4206	Splits non-manifold vertices until it becomes two-manifold.
4207	Try to snap together adjacent borders that are slightly mismatched.
4208	An alternative translate implementation that uses a geometric function. This is more accurate than the built-in version.
4209	An alternative rotate implementation that uses a geometric function. This is more accurate than the built-in version.
4210	An alternative scale implementation that uses a geometric function. This is more accurate than the built-in version.
4211	Geometric function using cylindrical coordinates to define new coordinates for radius, angle, and height.
4212	Deform mesh around cylinder of radius and axis z
4213	Bends mesh around cylinder of radius radius and axis z to a certain angle. Adjusts the mesh according to parameters such as pitch, taper, and angle.
4214	Deforms a mesh along a parametric curve function
4215	Transfer vertex colors to texture colors
4216	Transfer mesh colors to face colors
4217	Create a new mesh that is a resampled version of the current one.
4218	creates watertight surfaces from oriented point sets
4219	Turn a model into a surface with Voronoi style holes in it
4220	Selects all the faces and vertices of the current mesh.
4221	Selects all the faces and vertexes within the specified vertex quality range.
4222	Performs face selection over current mesh using a boolean function defined in MuParser.
4223	usage
4224	Selects all vertices within a cylindrical radius based on the given radius and center point.
4225	Select all vertices within a spherical radius
4226	Flattens all or only the visible layers into a single new mesh. Transformations are preserved, and existing layers can be optionally deleted.
4227	renames a layer
4228	Change the current layer by specifying the new layer number.
4229	Duplicate a layer. New layer label is '*_copy'.
4230	Deletes all layers below the specified one.
4231	Subprocess program error handling.
4232	Create new mlx script and write opening tags. Perform special processing on stl files.
4233	Adds a new mesh layer to the end of the stack and optionally changes to the newly created layer.
4234	Deletes a mesh layer at the specified layer_num and adjusts the current layer if needed.
4235	Save filter script to an mlx file
4236	Run the script with the option to provide or create a temporary input file, script file, and log files. The script can parse the geometry, topology, and Hausdorff distance from the output log file. If the input files are not provided, a dummy file with a single vertex will be created. If no script file is provided, a temporary script file will be created and the script will be saved to it. If no log file is provided and the script output the meshlabserver output, a temporary log file will be created. After running the script, the temporary files will be deleted.
4237	Generates a shield-shaped 3D model using MeshLabScript.
4238	Compute the Hausdorff Distance between two meshes, sampling one of the two and finding for each sample the closest point over the other mesh.
4239	Create a new layer populated with a point sampling of the current mesh using Poisson-disk distribution.
4240	Create a new layer populated with a point sampling of the current mesh, at most one sample for each element of the mesh is created.
4241	Create a new layer populated with a subsampling of the vertexes of the current mesh using a clustering grid strategy.
4242	Flat plane parameterization
4243	Writes a per-triangle parameterization filter XML to the specified script file.
4244	Voronoi Atlas parameterization
4245	Computes a set of topological measures over a mesh and optionally writes the filter to a script.
4246	Parse the ml_log file generated by the measure_topology function.
4247	Parse the ml_log file generated by the hausdorff_distance function and return a dictionary with the calculated distances and number of points. Optionally log the output to a file or print it.
4248	Generates a new RGBA color for each vertex using the muparser library based on specified red, green, blue, and alpha functions or a predefined color name.
4249	Given a Mesh 'M' and a Pointset 'P', the filter projects each vertex of P over M and color M according to the geodesic distance from these projected points. Projection and coloring are done on a per vertex basis.
4250	Color mesh vertices in a repeating sinusoidal rainbow pattern.
4251	Implement an atan2(y,x) function for older muparser versions (<2.1.0); atan2 was added as a built-in function in muparser 2.1.0
4252	Compute the cross product of two 3x1 vectors
4253	Multiplies a vector by a scalar.
4254	Add a new Per-Vertex scalar attribute to current mesh and fill it with the defined function. The specified name can be used in other filter functions.
4255	Invert faces orientation, flipping the normals of the mesh. If requested, it tries to guess the right orientation.
4256	Compute the normals of the vertices of a mesh without exploiting the triangle connectivity, useful for dataset with no faces.
4257	Taubin smoothing filter with two steps of smoothing for each iteration.
4258	Apply depth smoothing to a mesh constrained by a view direction.
4259	Sort separate line segments in obj format into a continuous polyline or polylines. Also measures the length of each polyline. Returns polyline and polylineMeta (lengths).
4260	Measures mesh topology.
4261	Measure mesh geometry, aabb, and topology.
4262	Measure a dimension of a mesh along specified axes.
4263	Ensure the file extension is in lowercase if it exists.
4264	Patches the app's request class to reject uploads larger than a specified size, defaulting to 64 MiB. If size is None, uses the app's `MAX_CONTENT_LENGTH` configuration setting.
4265	Extracts and configures upload settings for a given set using specified application and optional default values.
4266	Configure the upload sets for the Flask application.
4267	This gets the current configuration. By default, it looks up the current application and gets the configuration from there. If {_config} attribute is already set, it returns the value of {_config}. If not, it raises an error.
4268	Returns the URL that a file uploaded to this set would be accessed at.
4269	Return the absolute path of a file uploaded to this set. It doesn't actually check whether said file exists.
4270	This determines whether a specific extension is allowed. It is called by `file_allowed`, so if you override that but still want to check extensions, call back into this.
4271	Resolves a file name conflict by adding a suffix to the original base name until a unique name is found.
4272	Returns the actual version specified in the given filename.
4273	Removes duplicate objects.
4274	Returns count difference in two collections of Python objects.
4275	Formats the count of objects, sorting by the count in descending order.
4276	Checks memory usage when 'line' event occurs.
4277	Returns processed memory usage.
4278	Returns all objects that are considered a profiler overhead.
4279	**Summary:**  
Returns the memory overhead by calculating the difference between the current RSS memory usage and an initial RSS size.
4280	Returns memory stats for a package.
4281	Returns memory stats for a module.
4282	Returns memory stats for a function.
4283	Collects memory stats for specified Python program.
4284	Get module filenames from a Python package
4285	Runs function in separate process. This function is used instead of a decorator, since Python multiprocessing module can't serialize decorated function on all platforms.
4286	Determines the type of a run object.
4287	Initializes profiler with a module.
4288	Initializes profiler with a package.
4289	Initializes profiler with a function.
4290	Replaces sys.argv with proper args to pass to script.
4291	Samples current stack and adds result in self._stats.
4292	Inserts stack into the call tree.
4293	Counts and fills sample counts inside call tree.
4294	Reformats call tree for the UI.
4295	Returns call tree.
4296	Runs statistical profiler on a package.
4297	Runs statistical profiler on a module.
4298	Runs statistical profiler on a function and returns profiling results.
4299	Transforms collected stats for UI.
4300	Runs cProfile on a package.
4301	Runs `cProfile` on a module.
4302	Runs cProfile on a function.
4303	Initializes DB.
4304	Returns all existing guestbook records.
4305	Adds single guestbook record
4306	Profiler handler for routing HTTP methods to specific functions.
4307	Starts HTTP server with specified parameters.
4308	Handles index.html requests.
4309	Handle static files requests. Join the file path, read the content, and determine the content type based on the file extension.
4310	Handle HTTP GET requests by retrieving the content, compressing it using gzip, and sending the compressed response with appropriate headers.
4311	Handles HTTP POST requests.
4312	Sends HTTP response code, message, and headers.
4313	Checks whether path belongs to standard library or installed modules.
4314	Records line execution time.
4315	Filters code from standard library from self.lines.
4316	Fills code heatmap and execution count dictionaries.
4317	Skips lines in src_code specified by skip map.
4318	Calculates and formats a heatmap for a package by running a script and analyzing the execution time and frequency of code execution.
4319	Formats heatmap for UI.
4320	Calculates heatmap for module.
4321	Calculates heatmap for a function.
4322	Runs profilers on a given object based on a configuration and returns the collected statistics.
4323	Runs profilers on a function.
4324	Returns probability estimates for the RDD containing test vector X.
4325	Return log-probability estimates for the RDD containing the test vector X.
4326	Fit Gaussian Naive Bayes according to X, y
4327	Create sparse feature matrix and vocabulary where fixed_vocab=False
4328	Sort features by name and modify the vocabulary in place.
4329	Remove too rare or too common features. Prune features that are non zero in more samples than high or less documents than low, modifying the vocabulary, and restricting it to at most the limit most frequent. This does not prune samples with zero features.
4330	Learn the vocabulary dictionary and return term-document matrix. This is equivalent to fit followed by transform, but more efficiently implemented.
4331	Transform documents to document-term matrix using the vocabulary fitted during the fit process or provided in the constructor.
4332	Convert to equivalent StandardScaler
4333	Wraps a Scikit-learn Linear model's fit method to use with RDD input.
4334	Wrap a Scikit-learn Linear model's predict method to use with RDD input.
4335	Fit linear model.
4336	Fit all the transforms and then fit the transformed data using the final estimator
4337	Fit and transform the data sequentially, applying each step's transformation and then final fitting/transforming using the last estimator.
4338	Applies transforms to the data, and the score method of the final estimator. Valid only if the final estimator implements score.
4339	Actual fitting, performing the search over parameters.
4340	Compute the score of an estimator on a given test set.
4341	Compute k-means clustering.
4342	Predict the closest cluster each sample in X belongs to.
4343	Distributed method to predict class labels for samples in X.
4344	Checks if the blocks in the RDD match the expected types.
4345	Learn a list of feature name -> indices mappings.
4346	Learn empirical variances from X.
4347	Fit LSI model to X and perform dimensionality reduction on X.
4348	Perform dimensionality reduction on input data.
4349	Pack rdd with a specific collection constructor
4350	Packs an RDD of tuples as tuples of arrays or scipy.sparse matrices.
4351	Block an RDD
4352	Transform the data using a function and return a new RDD of the specified type.
4353	Returns the shape of the data.
4354	Returns the data as numpy.array from each partition by concatenating the arrays.
4355	Execute a transformation on a column or columns. Returns the modified DictRDD.
4356	Returns a mask value indicating permissions for a bit of the perm of a file based on the given os.stat_result object and permission and position codes.
4357	Check if a file can only be written by the root user.
4358	Checks the validity of a configuration file and prints a success message using the provided print function.
4359	Parse and validate the config file. The read data is accessible as a dictionary in this instance.
4360	Get the arguments to execute a command as a user
4361	Execeute command on thread
4362	Executes a command on a remote machine using SSH.
4363	Check and validate the configuration data, ensuring that the `content-type` and `body` are used correctly with the specified methods, and handle JSON parsing errors if applicable.
4364	Get HTTP Headers to send by default from `default_headers` and update with any additional headers from `self.data`. Return the combined headers as a dictionary.
4365	Returns the "data" value from `self.data`, using `self.default_body` if available, and converting the data to JSON if it's a dictionary.
4366	Home assistant url
4367	Returns the IFTTT Webhook url.
4368	Return source mac address for this Scapy Packet
4369	Identify src MAC and register it to avoid repetition; print device on screen with color-coded output based on text content.
4370	Print help and scan devices on screen.
4371	Execute this device
4372	Send success or error message to configured confirmation.
4373	Press button. Check DEFAULT_DELAY.
4374	Execute a device if the time between executions is greater than DEFAULT_DELAY.
4375	Start daemon mode.
4376	Convert an OFX Transaction to a posting
4377	Returns main ledger file path or raise exception if it cannot be found.
4378	Run the unit test suite with each support library and Python version.
4379	Transform README.md into a usable long description by replacing relative references to SVG images with absolute HTTPS references.
4380	Return a PrecalculatedTextMeasurer given a JSON stream.
4381	Returns a reasonable default PrecalculatedTextMeasurer.
4382	Creates a github-style badge as an SVG image.
4383	Generate the characters supported by the font at the given path.
4384	Generates the subset of characters that can be encoded by the provided encodings.
4385	Return a mapping between each given character and its length in pixels.
4386	Write the data required by PrecalculatedTextMeasurer to a stream.
4387	Convolve 2D image with 1D Gaussian kernel.
4388	Generate a Gaussian kernel.
4389	Converts a PIL image to a grayscale NumPy array and an alpha NumPy array (if present).
4390	Compares an image with a list of images using the SSIM metric.
4391	Compute the SSIM value from the reference image to the target image.
4392	Computes the Structural Similarity Index (SSIM) between two images using a Gaussian kernel for smoothing.
4393	Stop autoTickThread, close connections, etc.
4394	Switches to a new code version on all cluster nodes and validates the requested version against the current and enabled versions.
4395	Dumps different debug info about the cluster to a dictionary and returns it.
4396	Dumps different debug info about cluster to default logger
4397	Find the node to which a connection belongs.
4398	Attempts to bind the server if it's not already bound and meets certain conditions, otherwise raises a `TransportNotReadyError` if the maximum number of retries is exceeded.
4399	Handles new incoming connections by adding them to a set, setting up encryption if available, and registering callback functions for incoming messages and disconnections.
4400	Callback for handling incoming messages on connections. Encrypts messages, processes utility messages, and associates connections with Nodes. Once initial setup is complete, defers subsequent messages to onMessageReceived.
4401	Callback for the utility messages
4402	Check whether this node should initiate a connection to another node.
4403	Connect to a node if necessary.
4404	Handles establishing a new outgoing connection, encrypts the connection if enabled, and informs the other node of this node's address. If encryption is disabled, the onNodeConnected callback is triggered instead.
4405	Handle the reception of a message on a new outgoing connection, specifically for key exchange purposes if encryption is enabled. Once keys are exchanged, manage further messages using the `onMessageReceived` callback.
4406	Callback for when a connection is terminated or considered dead. Initiates a reconnect if necessary.
4407	Add a node to the network
4408	Drop a node from the network, disconnecting it if connected, and removing it from relevant data structures.
4409	Sends a message to a node. Returns False if the connection appears to be dead either before or after actually trying to send the message.
4410	Destroy this transport.
4411	Put an item into the queue. True - if item placed in queue. False - if queue is full and item can not be placed.
4412	Put an item into the queue. Returns True if the item was placed in the queue, otherwise False if the queue is full.
4413	Extracts the smallest item from a queue, returning a default value if the queue is empty.
4414	Attempt to acquire lock.
4415	Check if lock is acquired by ourselves.
4416	Release previously-acquired lock
4417	Decorator which wraps checks and returns an error response on failure.
4418	Decorator which ensures that one of the WATCHMAN_TOKENS is provided if set.
4419	Sets the Elasticsearch hosts to use, optionally with SSL and a certificate chain.
4420	Create Elasticsearch indexes for given names with optional settings.
4421	Updates index mappings
4422	Duplicates org_name, org_email and report_id into JSON root and removes report_metadata key to bring it more inline with Elastic output.
4423	Saves aggregate DMARC reports to Kafka.
4424	Extracts XML from a zip, gzip, or xml file.
4425	Parses a file at the given path, a file-like object, or bytes as a
aggregate DMARC report
4426	Converts parsed forensic reports to flat CSV format including headers.
4427	Parses a DMARC aggregate or forensic file at the given path, a file-like object, or bytes
4428	Returns a list of an IMAP server's capabilities.
4429	Save report data in the given directory
4430	Creates a zip file of parsed report output.
4431	Emails parsing results as a zip file
4432	Saves aggregate DMARC reports to Splunk.
4433	Saves forensic DMARC reports to Splunk
4434	Decodes a base64 string, with padding being optional
4435	Gets the base domain name for the given domain
4436	Resolves an IP address to a hostname using a reverse DNS query
4437	Converts a human-readable timestamp into a Python `DateTime` object.
4438	Retrieve the ISO country code for a given IPv4 or IPv6 address using the MaxMind Geolite2 Country database.
4439	Retrieves reverse DNS and country information for a given IP address.
4440	Convert an Outlook MS file to standard RFC 822 format using the `msgconvert` Perl utility.
4441	Converts a comma separated string to a list
4442	Parse a report file and handle parsing errors with multiprocessing support.
4443	Drain a connection by putting it into a drain state, where subscriptions and publishers are handled according to the method's parameters and options.
4444	Send a PUB command to the server on the specified subject.
4445	Publishes a message with a reply subscription, tagging it for potential responses.
4446	Sends PUB command to the NATS server.
4447	Sets the subscription to use a task per message to be processed.
4448	Removes the subscription for ssid, optionally after receiving more than max_msgs.
4449	Sends a ping to the server expecting a pong back to ensure that written data has reached the server and to measure roundtrip time. Raises an error if no pong is received within the specified timeout.
4450	Looks up in the server pool for an available server and attempts to connect.
4451	Processes the raw error message sent by the server and closes the connection with the current server.
4452	Process errors which occured while reading or parsing
4453	This method generates a JSON string with connection parameters to be used when sending a CONNECT request to a server. It includes options such as verbose mode, pedantic mode, language, version, protocol, authentication details, and user options like name and echo behavior. It then formats these options into a JSON string and prepends it with the CONNECT operation code and necessary delimiters.
4454	Process PONG sent by server.
4455	Process MSG sent by server.
4456	Process INFO lines sent by the server to update client with latest server information for discovery.
4457	Process INFO received from the server and CONNECT to the server with authentication, handling SSL/TLS connections, and initializing reading and ping interval tasks.
4458	Coroutine which continuously tries to consume pending commands and then flushes them to the socket.
4459	Coroutine which gathers bytes sent by the server and feeds them to the protocol parser. In case of error while reading, it will stop running and its task has to be rescheduled.
4460	Compute and save coactivation map given input image as seed.
4461	Decodes a set of images using a specified method and returns the decoded values as a Pandas DataFrame. Options include saving the results to a file and rounding the decoded values.
4462	Load feature data from a 2D ndarray on disk.
4463	Loading feature image data from image files.
4464	Decode images using Pearson's r.
Computes the correlation between each input image and each feature image across voxels.
Returns a 2D array with Pearson correlation values between feature images and input images across all voxels.
4465	Decoding using the dot product.
4466	Implements various kinds of feature selection.
4467	Retrieve feature data for regions in a dataset based on masks and classify them.
4468	Returns a list with the order that features requested appear in dataset
4469	Perform classification on specified regions using various methods and parameters.
4470	Wrapper for scikit-learn classification functions that implements various types of classification and cross validation.
4471	Fits X to outcomes y, using clf
4472	Sets the class_weight of the classifier to match y
4473	Fit X to outcomes y, using clf and cv_method
4474	Given a dataset, fits either features or voxels to y
4475	Aggregate values within each region in a dataset.
4476	Returns mappable data for a random subset of voxels.
4477	Return top forty words from each topic in trained topic model.
4478	Correlates row vector x with each row vector in 2D array y.
4479	Determines FDR threshold given a p value array and desired false discovery rate q.
4480	Load activation data from a text file.
4481	Create and store a new ImageTable instance based on the current Dataset.
4482	Get IDs or data for studies that meet specific criteria.
4483	Adds features to the feature table, allowing for appending or replacing existing features and specifying merge and duplicate handling strategies.
4484	Returns names of features. If features is None, returns all features. Otherwise assumes the user is trying to find the order of the features.
4485	Returns a dictionary, where the keys are the feature names and the values are the number of studies tagged with the feature.
4486	Load a pickled Dataset instance from file.
4487	Pickles the Dataset instance to the provided file, converting feature tables as necessary.
4488	Slices and returns a subset of image data based on specified study ids and voxel indices.
4489	Slices and returns a subset of feature data.
4490	Given a list of features, returns features in order that they appear in the database.
4491	Returns a list of all studies in the table that meet the desired feature-based criteria.
4492	Returns all features that match any of the elements in the input list.
4493	Use a PEG to parse expression and return study IDs.
4494	Converts FeatureTable to SciPy CSR matrix.
4495	Decorator used to mark functions as deprecated. It will result in a warning being emitted when the function is called.
4496	Convert coordinates from one space to another using provided transformation matrix.
4497	Convert an N x 3 array of XYZ coordinates to matrix indices.
4498	Applies a named transformation to a set of foci.
4499	Vectorize an image and mask out all invalid voxels.
4500	Set the current mask by taking the conjunction of all specified layers.
4501	Load multiple images from file into an ndarray.
4502	Save a vectorized image to file.
4503	Set neurosynth's logging level based on the provided or environment-specified level.
4504	Expand the given address into one or more normalized strings.
4505	Normalizes a string, tokenizes, and normalizes each token with string and token-level options.
4506	Parse address into components.
4507	Hash the given address into normalized strings that can be used to group similar addresses together for more detailed pairwise comparison. This can be thought of as the blocking function in record linkage or locally-sensitive hashing in the document near-duplicate detection.
4508	Converts a python dictionary to a namedtuple to save memory.
4509	Retrieve the price of a stock ticker from Tiingo API.
4510	Return a pandas.DataFrame of historical prices for one or more ticker symbols.
4511	Retrieve bulk news data from the Tiingo API. If a file ID is provided, return the URL to download the file and its metadata in either JSON or object format. If no file ID is provided, return an array of available file IDs.
4512	Make HTTP request and return response object
4513	Get the application bearer token from client_id and client_secret.
4514	Make a request to the Spotify API with current bearer credentials.
4515	Get an albums tracks by an ID.
4516	Get a spotify artist by their ID.
4517	Get an artists tracks by their ID.
4518	Get an artists top tracks per country with their ID
4519	Get related artists for an artist by their ID.
4520	Get a list of spotify artists by their IDs.
4521	Get a single category used to tag items in Spotify.
4522	Get a list of Spotify playlists tagged with a particular category.
4523	Get a list of categories used to tag items in Spotify.
4524	Get a list of Spotify featured playlists.
4525	Get a list of new album releases featured in Spotify.
4526	Get Recommendations Based on Seeds.
4527	Check to see if the current user is following one or more artists or other Spotify users.
4528	Get the albums of a Spotify artist.
4529	Loads all of the artist's albums, depending on how many the artist has, this may be a long operation.
4530	This interface is used to get the total amount of albums.
4531	Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community’s listening history.
4532	Get the users currently playing track.
4533	Get information about the user's current playback.
4534	Get information about the available devices for the user.
4535	Get tracks from the current user's recently played tracks.
4536	Replace all the tracks in a playlist, overwriting its existing tracks.
4537	Reorders a track or a group of tracks in a playlist.
4538	Create a playlist for a Spotify user. Parameters include the name, public/private status, collaborative status, and optional description. Returns the created playlist.
4539	Get the user's playlists from Spotify.
4540	Get the album's tracks from Spotify with optional parameters for limit and offset.
4541	Returns a list of all tracks for an album, potentially loading them in batches if the album contains many tracks. Optionally accepts a market parameter for Track Relinking.
4542	Generate an OAuth2 URL for user authentication.
4543	Retrive an album with a spotify ID.
4544	Retrive an artist with a spotify ID.
4545	Retrieve a track with a Spotify ID.
4546	Retrive an user with a spotify ID.
4547	Retrieve multiple albums using a list of Spotify IDs with an optional market parameter.
4548	Retrive multiple artists with a list of spotify IDs.
4549	Access the Spotify search functionality.
4550	Get a Spotify ID from a URI or open.spotify URL.
4551	Decorator to assert an object has an attribute when run.
4552	Construct a OAuth2 object from a `spotify.Client`.
4553	Construct an OAuth2 URL instead of an OAuth2 object.
4554	Attributes used when constructing URL parameters.
4555	URL parameters used.
4556	Get the track object for each link in the partial tracks data. Returns a list of tracks.
4557	Get all playlist tracks from the playlist.
4558	Resume playback on the user's account.
4559	Transfer playback to a new device and determine if it should start playing.
4560	Get the full object from Spotify with a `href` attribute.
4561	Execute the logic behind the meaning of ExpirationDate + return the matched status.
4562	Convert a given month into our unified format.
4563	Read the code in the `PyFunceble` and `tests` directories and update all links.
4564	Check if the current version is greater than the older one.
4565	Check if the current branch is `dev`.
4566	Check if we have to put the previous version into the deprecated list.
4567	Backup the current execution state.
4568	Restore data from the given path.
4569	Check if the given line has to be ignored based on a list of regex patterns.
4570	Handle the data from the options.
4571	Extracts the base of the given element.
4572	Formats the extracted adblock line before passing it to the system.
4573	Get the HTTP code status.
4574	Return the HTTP code status.
4575	Check the syntax of the given domain.
4576	Check if the given domain is a subdomain.
4577	Check the syntax of the given IPv4. Return the syntax validity, or None if the input is empty or not a string.
4578	Check if the given IP is an IP range.
4579	Check the syntax of the given URL.
4580	Load the configuration.
4581	Print a friendly message.
4582	Check if the given information is a URL. If it is, it downloads and updates the location of the file to test. Returns the state of the check.
4583	Manage the loading of the url system.
4584	Decide if we print or not the header.
4585	Manages the database, autosave, and autocontinue systems when reading a file. Handles status updates, database operations, and logging.
4586	Manage the case that we want to test only a domain.
4587	Manage the case that we want to test only a given url.
4588	Print the colored logo based on global results
4589	Formats the extracted domain before passing it to the system. Removes noise and extracts the domain or IP to test. Filters out commented lines.
4590	Extracts all non-commented lines from a file for testing.
4591	Manage the case that need to test each domain of a given file path.
4592	Manage the case that we have to test a file. It filters the list of URLs to test, removes URLs already in the database, and optionally sorts them hierarchically before testing each URL.
4593	Switch PyFunceble.CONFIGURATION variables to their opposite.
4594	Get the status while testing for an IP or domain.
4595	Handle the backend of the given status.
4596	Get the structure we are going to work with.
4597	Creates the given directory if it does not exist.
4598	Deletes directories not registered in the structure.
4599	Set the paths to the configuration files.
4600	Loads and updates the configuration file for PyFunceble.
4601	Download the production configuration and install it in the current directory.
4602	Download `iana-domains-db.json` if not present.
4603	Download `public-suffix.json` if not present.
4604	Download the latest version of `dir_structure_production.json`.
4605	Merge the older configuration into the new one.
4606	Execute the logic behind the merging.
4607	Convert the versions to a shorter one.
4608	Compare the given versions. Returns True if local < upstream, None if local == upstream, and False if local > upstream.
4609	Check if the current version of PyFunceble is a cloned version, indicating development mode.
4610	Handles and checks that a configuration index exists, initializing it if not found.
4611	Return the analytic directory to write depending of the matched status.
4612	Generate unified file based on testing results and configuration settings.
4613	Generate a file according to the domain status.
4614	Check if we are allowed to produce a file based from the given information.
4615	Extracts the extension from a given line from the official public suffix repository.
4616	Load the public suffix database into the system.
4617	Implement the standard and alphabetical sorting.
4618	Sorts a domain hierarchically
4619	Initiate the IANA database if it is not already loaded.
4620	Returns the whois server to use for the given domain extension.
4621	Extracts extensions and their referers from a block of text.
4622	Update the content of the `iana-domains-db` file.
4623	Search for domain or URL related to the original URL or domain.
4624	Retrieves the mining information. If mining is activated and the backup file exists, it reads and cleans the data from the file; otherwise, it returns an empty dictionary.
4625	Backup the mined informations.
4626	Add the currently mined information to the mined "database".
4627	Remove the currently tested element from the mining data.
4628	Provides the list of mined domains or URLs to be added to the list queue.
4629	Process the logic and structuration of the mining database.
4630	Get and return the content of the given log file.
4631	Write the content into the given file.
4632	Logs the WHOIS record if needed.
4633	Logs the extracted expiration date.
4634	Logs the case that the referer was not found.
4635	Write informations about PyFunceble and the date of generation of a file into a given path if doesn't exist.
4636	Construct header of the table according to template.
4637	Management and creation of templates of header.
4638	Constructs the table of data according to given size.
4639	Get the size of each column from the header.
4640	Retuns colored string based on data and template.
4641	Manage the JSON template for output.
4642	Manages and inputs data to a table, handling different formats and output options.
4643	Save the current time to the file, updating the execution time or starting a new one based on the action.
4644	Calculate the difference between starting and ending time.
4645	Format the calculated time into a human readable format.
4646	Returns the list of files to delete.
4647	Returns a list of databases files to be deleted.
4648	Delete almost all discovered files.
4649	Get the hash of the given file using the specified algorithm.
4650	Get hash of the given data using the specified algorithm.
4651	Return the hash of the given file.
4652	Executes the given command and returns its output.
4653	Remove a given key from a given dictionary. Returns the dict without the given key(s).
4654	Rename the given keys from the given dictionary. The key(s) to rename should be in the format of :code:`{old:new}`. If strict is set to True, only the exact matching keys will be renamed. If strict is False, keys in the dictionary index that match the old key pattern will be renamed. Returns the updated dictionary or None if the input is not a dictionary.
4655	Merge the content of `to_merge` into the given main dictionary.
4656	Write a dictionary into a JSON file.
4657	Convert a dictionary to a YAML file.
4658	Fixes the path of the given path
4659	Write or append data into the given file path.
4660	Read a given file path and return its content.
4661	Returns a well-formatted list by sorting a list and removing duplicates.
4662	Merge to_merge into the given main list.
4663	Return a list of strings that do not match the given regex.
4664	Used to get exploitable result of re.search Returns The data of the match status.
4665	Used to replace a matched string with another. Returns the data after replacement.
4666	Count the number of domains for each status.
4667	Calculate the percentage of each status.
4668	Print on screen and on file the percentages for each status.
4669	Check if the given URL is valid
4670	Checks whether the given domain is valid, optionally performing subdomain validation.
4671	Check if the given subdomain is a subdomain.
4672	Execute the logic behind the Syntax handling.
4673	Migrate data from an old format to a new format by updating or merging the old data into the PyFunceble database.
4674	Retrieves content from the inactive-db.json file and merges it.
4675	Save the current database into the inactive-db.json file.
4676	Get the timestamp where we are going to save our current list.
4677	Get the content of the database.
4678	Check if the currently tested element is into the database.
4679	Retrieve the data from the database.
4680	Backups the database into its file.
4681	Check if the element is in the database.
4682	Check if the current time is older than the one in the database.
4683	Get the expiration date from the database.
4684	Add the currently tested element into the database.
4685	Sets permissions for Travis CI build directory to avoid issues before committing.
4686	Logic behind autosave under Travis CI.
4687	Implementation of UNIX nslookup.
4688	Implement an implementation of the UNIX whois command, which fetches and returns the WHOIS record for a given domain using a specified WHOIS server. The method also handles connection timeouts and decodes the response from the server, handling any potential UnicodeDecodeErrors.
4689	Execute the logic behind the URL handling.
4690	Return the referer aka the WHOIS server of the current domain extension.
4691	Get current object. This is useful if you want the real object behind the proxy at a time for performance reasons or because you want to pass the object into a different context.
4692	Yield paths to standard modules.
4693	Yield standard module names.
4694	Yield line numbers of unused imports.
4695	Yield line number and module name of unused imports.
4696	Yield line number of star import usage.
4697	Yield line number, undefined name, and its possible origin module.
4698	Yield line numbers of unused variables.
4699	Yield line numbers of duplicate keys.
4700	Return dict mapping the key to list of messages.
4701	Return messages from pyflakes.
4702	Extract package name from import statement.
4703	Check if import statement spans multiple lines.
4704	Return True if this is part of a multiline statement.
4705	Parse and filter `from something import a, b, c`, return line without unused import modules, or `pass` if all of the module in import is unused.
4706	Return line with imports on separate lines.
4707	Yield code with unused imports, variables, keys, and duplicate keys removed.
4708	Return dictionary that maps line number to message.
4709	Expand star import in a line of code using a list of undefined names.
4710	Return '' if first occurrence of the key otherwise return line
4711	Return True if `line` is a dict entry that uses `key`. Return False for multiline cases where the line should not be removed by itself.
4712	Returns True if the value is a literal or a name.
4713	Yield line numbers of unneeded "pass" statements.
4714	Yield code with useless "pass" lines removed.
4715	Return leading whitespace.
4716	Return line ending.
4717	Return code with all filtering run on it.
4718	Return a set of strings extracted from a comma-separated string.
4719	Indicate whether the given filename is a Python file.
4720	Determines if a file should be excluded based on a list of patterns.
4721	Yield filenames, optionally recursively and with exclusion criteria.
4722	Parse command-line arguments for the autoflake tool and process the specified files based on the given options.
4723	Reads the data encoding the ObtainLease response payload and decodes it into its constituent parts.
4724	Write the data encoding the ObtainLease response payload to a stream.
4725	Write the data encoding the Cancel request payload to a stream.
4726	Read the data encoding the Cancel response payload and decode it into its constituent parts.
4727	Returns a Name object, populated with the given value and type
4728	Read the data encoding the Digest object and decode it into its constituent parts.
4729	Write the data encoding the Digest object to a stream.
4730	Construct a Digest object from provided digest values.
4731	Read the data encoding the ApplicationSpecificInformation object and decode it into its constituent parts.
4732	Write the data encoding the ApplicationSpecificInformation object to a stream.
4733	Construct an ApplicationSpecificInformation object from provided data and namespace values
4734	Reads the data encoding the DerivationParameters struct and decodes it into its constituent parts.
4735	Writes the data encoding the DerivationParameters struct to a stream.
4736	Read the data encoding the Get request payload and decode it into its constituent parts.
4737	Write the data encoding the Get request payload to a stream.
4738	Reads the data encoding the Get response payload and decodes it into its constituent parts.
4739	Writes the data encoding the Get response payload to a stream.
4740	Reads encoded data from a stream to decode a SignatureVerify request payload into its constituent parts.
4741	Write the data encoding the SignatureVerify request payload to a stream.
4742	Reads the data encodingthe SignatureVerify response payload and decodes it into its constituent parts.
4743	Process a KMIP request message, breaking apart the request header, handling errors, and processing request batch items. This method is thread-safe and supports various KMIP request components.
4744	Build a simple ResponseMessage with a single error result.
4745	Given a kmip.core TemplateAttribute object, extracts the attribute value data into a usable dictionary format.
4746	Given a KMIP object and a list of attribute names, this function attempts to retrieve all existing attribute values from the object while applying attribute policies and handling multivalued attributes.
4747	Get the attribute value from the kmip.pie managed object.
4748	Sets attributes on a managed object if they are applicable.
4749	Set the attribute value on the kmip.pie managed object.
4750	Determine if object access is allowed for the provided policy and session settings.
4751	Write the data encoding the Decrypt request payload to a stream.
4752	Create a secret object of a specified type with optional value.
4753	Set a specific setting value. This will overwrite the current setting value for the specified setting. Raises ConfigurationError if the setting is not supported or if the setting value is invalid.
4754	Load configuration settings from the file pointed to by path.
4755	Returns the integer value of the usage mask bitmask. This value is stored in the database.
4756	Returns a new list of enums.CryptographicUsageMask Enums. This converts the integer value into the list of enums.
4757	Read the encoding of the LongInteger from the input stream.
4758	Write the encoding of the LongInteger to the output stream.
4759	Verify that the value of the LongInteger is valid.
4760	Read the encoding of the BigInteger from the input stream.
4761	Write the encoding of the BigInteger to the output stream.
4762	Verify that the value of the BigInteger is valid.
4763	Verify that the value of the Enumeration is valid.
4764	Read the value of the Boolean object from the input stream.
4765	Writes the value of a Boolean object to an output stream.
4766	Write the encoding of the Boolean object to the output stream.
4767	Verify that the value of the Boolean object is valid.Raises a TypeError if the value is not of type bool.
4768	Read the encoding of the Interval from the input stream.
4769	Verify that the value of the Interval is valid. Raises: TypeError: if the value is not of type int or long ValueError: if the value cannot be represented by an unsigned 32-bit integer
4770	Retrieve all of the relevant key wrapping data fields and return them as a dictionary.
4771	Set the key wrapping data attributes using a dictionary.
4772	Verifies that the contents of the PublicKey object are valid. Raises:
TypeError: if the types of any PublicKey attributes are invalid.
Checks:
- key value must be bytes
- key algorithm must be a CryptographicAlgorithm enumeration
- key length must be an integer
- key format type must be a KeyFormatType enumeration and one of the valid formats
4773	Verify that the contents of the SecretData object are valid. Raises a TypeError if any SecretData attributes have invalid types.
4774	Verify that the contents of the OpaqueObject are valid.
4775	Converts an attribute name string into the corresponding attribute tag.
4776	Converts an attribute tag into the corresponding attribute name string. Raises an error if the attribute tag is not recognized or is not a Tags enumeration value.
4777	A utility function that computes a bit mask from a collection of enumeration values. It takes a list of enumeration values as input and returns a composite bit mask.
4778	Create a list of enumeration values from a bit mask.
4779	Indicates whether potential_mask is a valid bit mask of the specified enumeration class.
4780	Read the data encoding the CreateKeyPair request payload and decode it into its constituent parts.
4781	Write the data encoding the CreateKeyPair request payload to a buffer.
4782	Reads and decodes the CreateKeyPair response payload data, checking for the presence of required unique identifiers and handling specific KMIP versions.
4783	Write data encoding the CreateKeyPair response payload to a buffer.
4784	Read the data encoding the GetAttributeList request payload and decode it into its constituent parts.
4785	Write the data encoding the GetAttributeList request payload to a stream.
4786	Read the data encoding the GetAttributeList response payload and decode it into its constituent parts.
4787	Writes the data encoding the GetAttributeList response payload to a stream.
4788	Scan the provided policy directory for all JSON policy files.
4789	Scan the policy directory for policy data, update the file timestamps, and reload policies as needed.
4790	Start monitoring operation policy files.
4791	Extract an X.509 certificate from a socket connection.
4792	Extracts and returns the extendedKeyUsage extension from an X.509 certificate. Returns None if the extension is not found.
4793	Given an X.509 certificate, extract and return all common names.
4794	Extract and return the client identity from an X.509 certificate.
4795	Read data encoding the Create request payload and decode it into its constituent parts.
4796	Write the data encoding the Create request payload to a buffer.
4797	Reads the data encoding the Create response payload and decodes it into its constituent parts.
4798	Write the data encoding the Create response payload to a buffer.
4799	Convert a Pie object into a core secret object and vice - versa.
4800	Reads and decodes the data encoding the Encrypt response payload into its constituent parts.
4801	Read and decode the DeriveKey request payload.
4802	Write the data encoding the DeriveKey request payload to a stream.
4803	Check if the attribute is supported by the current KMIP version.
4804	Check if the attribute is deprecated by the current KMIP version.
4805	Check if an attribute is supported by a given object type.
4806	Check if the attribute is allowed to have multiple instances.
4807	Returns a value for use as a parameter in a client or server, prioritizing a direct value over a configuration file value, and using a default if neither is available.
4808	Reads the data encoding the Check response payload and decodes it into its constituent parts.
4809	Write the data encoding the Check response payload to a stream.
4810	Read the data stream and decode the AttributeReference structure into its parts.
4811	Write the AttributeReference structure encoding to the data stream.
4812	Read the data stream and decode the Attributes structure into its parts.
4813	Encode the Attributes structure to the data stream.
4814	Read the data encoding the Nonce struct and decode it into its constituent parts.
4815	Write the data encoding the Nonce struct to a stream
4816	Reads the data encoding the UsernamePasswordCredential struct and decodes it into its constituent parts.
4817	Write the data encoding the UsernamePasswordCredential struct to a stream.
4818	Read the data encoding the DeviceCredential struct and decode it into its constituent parts.
4819	Writes the data encoding the DeviceCredential struct to a stream.
4820	Read data encoding the Credential struct and decode it into its constituent parts.
4821	Writing the data encoding the Credential struct to a stream.
4822	Reads the data encoding the MACSignatureKeyInformation struct and decodes it into its constituent parts.
4823	Write the data encoding the MACSignatureKeyInformation struct to a stream.
4824	Read data encoding the KeyWrappingData struct and decode it into its constituent parts.
4825	Encode and write the data of the KeyWrappingData struct to a stream, considering various attributes like wrapping method, encryption key information, MAC signature key information, MAC signature, IV counter nonce, and encoding option.
4826	Read data encoding the KeyWrappingSpecification struct and decode it into its constituent parts.
4827	Writes the data encoding the KeyWrappingSpecification struct to a stream.
4828	Read the data encoding the ExtensionInformation object and decode it into its constituent parts.
4829	Write the data encoding the ExtensionInformation object to a stream.
4830	Construct an ExtensionInformation object from provided extension values.
4831	Read the data encoding the RevocationReason object and decode it into its constituent parts.
4832	Write the data encoding the RevocationReason object to a stream.
4833	Validate the RevocationReason object to ensure that the revocation_code is of type RevocationReasonCode and the revocation_message is of type TextString if it is not None.
4834	Read the data encoding the ObjectDefaults structure and decode it into its constituent parts.
4835	Encode the ObjectDefaults structure into the provided data stream using the specified KMIP version.
4836	Read and decode data encoding the DefaultsInformation structure.
4837	Write the DefaultsInformation structure encoding to the data stream.
4838	Reads the data encoding the RNGParameters structure and decodes it into its constituent parts.
4839	Encode the RNGParameters structure to a data stream, supporting the KMIP version specified.
4840	Reads encoded data from an input buffer and decodes it into a ProfileInformation structure.
4841	Write the ProfileInformation structure encoding to the data stream.
4842	Write the ValidationInformation structure encoding to the data stream.
4843	Read the data encoding the CapabilityInformation structure and decode it into its constituent parts.
4844	Write the CapabilityInformation structure encoding to the data stream.
4845	Stop the server. Halt server client connections and clean up any existing connection threads. Raises: NetworkingError: Raised if a failure occurs while shutting down or closing the TLS server socket.
4846	Accept client connections and handle them using KmipSessions. Set up signal handling to gracefully shut down the service.
4847	Read and decode the Locate request payload from the given input buffer according to the specified KMIP version.
4848	Write the data encoding the Locate request payload to a buffer.
4849	Reads and decodes the data encoding the Locate response payload into its constituent parts.
4850	Write the data encoding the Locate response payload to a buffer.
4851	Creates a symmetric key with the specified algorithm and length. Raises exceptions for unsupported algorithms or incompatible lengths.
4852	Create an asymmetric key pair using the specified algorithm and key length. Returns a dictionary containing the public and private key data. Raises InvalidField if the algorithm is unsupported or the length is incompatible with the algorithm. Raises CryptographicFailure if the key generation process fails.
4853	Generate message authentication code using specified algorithm, key, and data.
4854	Encrypts data using symmetric or asymmetric encryption. The function supports various encryption algorithms, block cipher modes, padding methods, and hashing algorithms. It returns a dictionary containing the encrypted data and any auto-generated IV/nonce. Raises InvalidField and CryptographicFailure exceptions for unsupported algorithms or key generation failures. Example usage provided for AES encryption using CBC mode and ANSI_X923 padding.
4855	Encrypt data using symmetric encryption.
4856	Encrypt data using asymmetric encryption.
4857	Encrypt data using asymmetric decryption.
4858	Creates an RSA key pair with specified length and public exponent. Returns both public and private key data. Raises CryptographicFailure if key generation fails.
4859	Derive key data using a variety of key derivation functions.
4860	Instantiates an RSA key from bytes.
4861	Verify a message signature using the provided signing key, message, and signature.
4862	Read the data encoding the Sign response payload and decode it.
4863	Write the data encoding the Sign response to a stream.
4864	Read the data encoding the GetUsageAllocation request payload and decode it into its constituent parts.
4865	Convert a ProtocolVersion struct to its KMIPVersion enumeration equivalent.
4866	Read the data encoding the ProtocolVersion struct and decode it into its constituent parts.
4867	Write the data encoding the ProtocolVersion struct to a stream.
4868	Read and decode Authentication struct from data stream.
4869	Write the data encoding the Authentication struct to a stream.
4870	Read the data encoding the Poll request payload and decode it into its constituent parts.
4871	Reads the data encoding a Certificate object and decodes it into its constituent parts.
4872	Write the data encoding the Certificate object to a stream.
4873	Authenticate a user using the provided credentials.
4874	Read the data encoding the Archive response payload and decode it into its constituent parts.
4875	Write the data encoding the Archive response payload to a stream.
4876	Manages a new client connection, running a message handling loop until the connection is closed.
4877	Reads encoded Rekey response payload data, decodes it, and populates object attributes based on the data.
4878	Check if a profile is supported by the client.
4879	Derive a new key or secret data from an existing managed object
4880	Send a GetAttributes request to the server to retrieve attributes of a managed object.
4881	Send a GetAttributeList request to the server.
4882	Send a Query request to the server.
4883	Sign specified data using a specified signing key.

Args:
data (bytes): Data to be signed. Required.
unique_identifier (string): The unique ID of the signing
 key to be used. Optional, defaults to None.
cryptographic_parameters (CryptographicParameters): A structure
 containing various cryptographic settings to be used for
 creating the signature. Optional, defaults to None.
credential (Credential): A credential object containing a set of
 authorization parameters for the operation. Optional, defaults
 to None.

Returns:
dict: The results of the sign operation, containing the
 following key/value pairs:

 Key                       | Value
 -------------------------|-----------------------------------------
 'unique_identifier'       | (string) The unique ID of the signing
 key used to create the signature
 'signature'               | (bytes) The bytes of the signature
 'result_status'           | (ResultStatus) An enumeration indicating
 the status of the operation result
 'result_reason'           | (ResultReason) An enumeration providing
 context for the result status.
 'result_message'          | (string) A message providing additional
 context for the operation result.
4884	Opens the client connection. Raises an error if the connection is already open or if an error occurs during the connection attempt.
4885	Closes the client connection.
4886	Create a symmetric key on a KMIP appliance.
4887	Create an asymmetric key pair on a KMIP appliance.
4888	Register a managed object with a KMIP appliance. Returns the uid of the newly registered managed object. May raise ClientConnectionNotOpen, KmipOperationFailure, or TypeError.
4889	Rekey an existing key.
4890	Derive a new key or secret data from existing managed objects.
4891	Search for managed objects based on specified attributes, including maximum number of items, storage status mask, object group member type, and attributes to match. Returns the unique identifiers of located objects. Raises exceptions for invalid inputs, client connection issues, or operation failures.
4892	Checks the constraints for a managed object.
4893	Get a managed object from a KMIP appliance.
4894	Get the attributes associated with a managed object. If the uid is not specified, the appliance will use the ID placeholder by default. If the attribute_names list is not specified, the appliance will return all viable attributes for the managed object. It validates the input types of uid and attribute_names and raises a TypeError if they are not as required. It retrieves the list of attributes for a managed object using a proxy and returns the uuid and attributes if the operation is successful. If the operation fails, it raises a KmipOperationFailure with the result status, reason, and message.
4895	Activate a managed object stored by a KMIP appliance.
4896	Revoke a managed object stored by a KMIP appliance. This method checks the input arguments and raises a TypeError if any of them are invalid. It then calls the `revoke` method of the `proxy` object with the given arguments and handles the results. If the result status is not SUCCESS, it raises a KmipOperationFailure with the corresponding status, reason, and message.
4897	Get the message authentication code (MAC) for the provided data using the specified UID and algorithm. Raises exceptions if the client connection is not open, the operation fails, or the input arguments are invalid.
4898	Build a CryptographicParameters struct from a dictionary.
4899	Build an EncryptionKeyInformation struct from a dictionary.
4900	Build a MACSignatureKeyInformation struct from a dictionary.
4901	Build a KeyWrappingSpecification struct from a dictionary.
4902	Build a list of common attributes shared across symmetric and asymmetric objects.
4903	Build a name attribute, returned in a list for ease of use in the caller.
4904	Read data encoding the QueryRequestPayload object and decode it into its constituent parts.
4905	Write the data encoding the QueryRequestPayload object to a stream.
4906	Write the data encoding the QueryResponsePayload object to a stream.
4907	Reads the data encoding the GetAttributes response payload and decodes it into its constituent parts.
4908	Writes the GetAttributes response payload to a stream.
4909	Find a single entry point. Returns an `EntryPoint` object, or raises `NoSuchEntryPoint` if no match is found.
4910	Find a group of entry points with unique names. Returns a dictionary of names to :class:`EntryPoint` objects.
4911	Returns a list of EntryPoint objects based on the group and path specified.
4912	Load the object to which this entry point refers.
4913	Parse an entry point from the syntax in entry_points.txt.
4914	Run livereload server
4915	Generate a new project based on a template.
4916	Generate a controller by creating a Python file, a test file, and an assets directory with form file.
4917	Generate an action by appending source code to a controller file and optionally creating asset files such as HTML, JS, and LESS.
4918	Generate form.
4919	Generate a new model file based on a template, replacing placeholders with the provided model name, and update the models package initialization file.
4920	Generate a macro by creating directories and files for HTML, CSS, and JavaScript based on the provided arguments.
4921	mkdir -p path
4922	Replace vars and copy.
4923	Return friendly time difference since the provided datetime value.
4924	Check url schema.
4925	Encode something using a secret key.
4926	Decode something with SECRET_KEY.
4927	Apply a JSON decorator to a function, converting its return value into a JSON response.
4928	Returns the absolute URL for a given endpoint by combining the site domain with the relative URL generated from the endpoint and provided values.
4929	Load config based on the current mode.
4930	Sign in user with the option to set the session as permanent.
4931	Get current user
4932	Create a Flask app with various configurations and middleware components based on the environment.
4933	Register Jinja filters, vars, and functions based on application environment and update globals.
4934	Register routes for the given Flask application.
4935	Registers HTTP error pages for a Flask application.
4936	Register hooks for before and after request in a Flask app.
4937	Serialize the dataframe with different delimiters.
4938	Returns csv data as a pandas Dataframe object.
4939	Serialize a dataframe to a file using a specified format.
4940	Deserializes a dataframe from a file-like object using a specified serialization format.
4941	Serialize the specified DataFrame and replace the existing dataset.
4942	Upload already serialized raw data and replace the existing dataset.
4943	Get the full URL to the dataset contents.
4944	Serialize the specified DataFrame and upload it as a new dataset.
4945	Upload already serialized raw data as a new dataset.
4946	Open and return a stream for the dataset contents.
4947	Read and return the dataset contents as binary.
4948	Read and return the dataset contents as text.
4949	Reads and returns the dataset contents as a pandas DataFrame.
4950	Get an intermediate dataset from the experiment graph based on the node ID, port name, and data type ID. Returns an IntermediateDataset object that can be used to access its contents as a stream, bytes, str, or pandas DataFrame.
4951	Runs HTTP GET request to retrieve the list of experiments.
4952	Runs HTTP GET request to retrieve the list of datasets.
4953	Runs HTTP GET request to retrieve a single dataset.
4954	Publishes a callable function or decorates a function to be published. Returns a callable object that can be invoked to call the published service or iterate over to get API URL, API key, and API help URL.
4955	Marks a function as having been published and causes all invocations to go to the remote operationalized service.
4956	Specifies the types used for the arguments of a published service.
4957	Decorator that specifies the return type for a published service.
4958	Attach a file to the payload to be uploaded. If `contents` is omitted, the file is read from disk. If `name` is a tuple, it specifies the on-disk filename and the destination filename.
4959	Walks the byte code to find the variables which are actually globals
4960	Creates a copy of this pen.
4961	Return RGBA values of color c.
4962	Draw this shape with the given cairo context
4963	Find extremas of a function of real domain defined by evaluating a cubic bernstein polynomial of given bernstein coefficients.
4964	Evaluate polynomial of given bernstein coefficients using de Casteljau's algorithm.
4965	Build choices list runtime using 'sitetree_tree' tag
4966	Compatibility function to get rid of optparse in management commands after Django 1.10.
4967	Registers a hook callable to process tree items right before they are passed to templates. Callable should handle `tree_items` and `tree_sender` key parameters and return a list of extended TreeItems objects to pass to templates.
4968	Returns a structure describing a dynamic sitetree.utils The structure can be built from various sources.
4969	Initializes local cache from Django cache.
4970	Empties cached sitetree data.
4971	Returns cache entry parameter value by its name.
4972	Updates cache entry parameter with new data.
4973	Replaces entire cache entry parameter data by its name with new data.
4974	Initializes sitetree to handle a new request.
4975	Resolves internationalized tree alias. Verifies whether a separate sitetree is available for the current language. If so, returns the i18n alias; otherwise, returns the initial alias.
4976	Returns boolean whether current application is Admin contrib.
4977	Calculates the depth of the item in the tree.
4978	Resolves the current tree item for a given tree alias by comparing the current request path with the URLs of tree items.
4979	Resolves item's URL.
4980	Initialize sitetree in memory. Returns tuple with resolved tree alias and items on success. On fail returns (None, None).
4981	Get an arbitrary attribute of the current site tree item.
4982	Returns ancestor of level `deep` recursively
4983	Builds and returns menu structure for 'sitetree_menu' tag.
4984	Checks whether a current user has an access to a certain item.
4985	Builds and returns breadcrumb trail structure for 'sitetree_breadcrumbs' tag.
4986	Builds and returns tree structure for 'sitetree_tree' tag.
4987	Builds and returns site tree item children structure for 'sitetree_children' tag.
4988	Returns item's children.
4989	Updates 'has_children' attribute for tree items based on their children, navigation type, and hooks.
4990	Filters sitetree item's children based on visibility and navigation type.
4991	Climbs up the site tree to resolve root item for chosen one.
4992	Climbs up the site tree to mark items of the current branch.
4993	Resolves name as a variable in a given context. If no context specified, the page context is considered as context.
4994	Parses sitetree tag parameters.
4995	Parses sitetree_children tag parameters and validates their correctness.
4996	Parses sitetree_breadcrumbs tag parameters.
4997	Parses sitetree_menu tag parameters.
4998	The render helper is used by template node functions to render a given template with specified tree items in the context.
4999	Node constructor to be used in tags.
5000	Generate a URL for a given Tree admin page type.
5001	Forces unregistration of tree admin class with the following re-registration.
5002	Fixes Admin contrib redirects compatibility problems introduced in Django 1.4 by url handling changes.
5003	Handle redirect based on request parameters
5004	Redirects to the appropriate items' 'continue' page on item add.
5005	Redirects to the appropriate items' 'add' page on item change. As we administer tree items within tree itself, we should make some changes to redirection process.
5006	Returns modified form for TreeItem model. 'Parent' field choices are built by sitetree itself.
5007	Fetches Tree for current or given TreeItem.
5008	Moves item up or down by swapping 'sort_order' field values of neighboring items.
5009	Save TreeItem model under certain Tree.Handles item's parent assignment exception.
5010	Manages not only TreeAdmin URLs but also TreeItemAdmin URLs.
5011	Dumps sitetrees with items using django-smuggler.
5012	Dynamically creates and returns a sitetree.
5013	Return a dynamically created sitetree item object with specified parameters.
5014	Imports sitetree module from a given app.
5015	Returns a certain sitetree model as defined in the project settings.
5016	Create a configuration from a mapping. This allows either a mapping to be directly passed or as keyword arguments.
5017	Create a configuration by loading settings from a Python file, executing it, and converting the loaded module into a configuration object.
5018	Load the configuration values from a TOML formatted file.
5019	Create a configuration from a Python object.
5020	Creates a set of zipkin attributes for a span by generating or using trace_id and span_id, and determining if the trace is sampled based on the given sample rate.
5021	Generate the headers for a new zipkin span.
5022	Return the current ZipkinAttrs and generate new ones if needed.
5023	Enter the new span context. All annotations logged inside this context will be attributed to this span. All new spans generated inside this context will have this span as their parent.
5024	Exit the span context. Zipkin attrs are pushed onto the threadlocal stack regardless of sampling, so they always need to be popped off. The actual logging of spans depends on sampling and that the logging was correctly set up.
5025	Updates the binary annotations for the current span.
5026	Add a 'sa' binary annotation to the current span.
5027	Overrides the current span name and updates it in the logging context if available.
5028	Creates a new Endpoint object with optional parameters for port, service_name, and host. If use_defaults is True, it uses default values for any unset parameters. It checks if the host is an IPv4 or IPv6 address and sets the corresponding attribute. Returns the zipkin Endpoint object.
5029	Creates a copy of a given endpoint with a new service name.
5030	Builds and returns a V1 Span
5031	Encode list of protobuf Spans to binary.
5032	Converts a py_zipkin Span into a protobuf Span.
5033	Encodes hexadecimal IDs to big-endian binary. Handles IDs both 16 and more than 16 characters long.
5034	Converts py_zipkin's Kind to Protobuf's Kind.
5035	Converts py_zipkin's Endpoint to Protobuf's Endpoint.
5036	Converts py_zipkin's annotations dict to protobuf.
5037	Create a zipkin annotation object.
5038	Create a zipkin binary annotation object
5039	Create a zipkin Endpoint object. An Endpoint object holds information about the network context of a span. The function accepts parameters for port, service name, IPv4, and IPv6 addresses, converts them to network byte order, and returns a thrift Endpoint object.
5040	Copy a copy of a given endpoint with a new service name. This should be very fast, on the order of several microseconds.
5041	Reformat annotations dict to return list of corresponding zipkin_core objects.
5042	Reformat binary annotations dict to return list of zipkin_core objects. The value of the binary annotations MUST be in string format.
5043	Takes a bunch of span attributes and returns a thriftpy2 representation of the span. Converts timestamps from seconds to microseconds before encoding.
5044	Returns a TBinaryProtocol encoded Thrift span.
5045	Returns a TBinaryProtocol encoded list of Thrift objects.
5046	Return the span type and encoding for the message provided.
5047	Converts encoded spans to a different encoding.
5048	Stores the zipkin attributes to thread local.***Deprecated***: Use the Tracer interface which offers better multi-threading support. `push_zipkin_attrs` will be removed in version 1.0.
5049	Encodes a v2 span to Thrift format.
5050	Converts an Endpoint to a JSON endpoint dict.
5051	Encode a single span to protobuf.
5052	Decode an encoded list of spans.
5053	Accepts a thrift decoded endpoint and converts it to an Endpoint.
5054	Converts a list of Thrift annotations to a v1 annotation.
5055	Converts a Thrift decoded binary annotation to a v1 binary annotation.
5056	Decode a thrift span and return a Span builder representing the span.
5057	Converts the provided traceId hex value with optional high bits to a string.
5058	Converts the provided unsigned long value to a hex string.
5059	Writes an unsigned long value across a byte array starting at a specified position.
5060	Replace illegal February 29, 30 dates with the last day of February.
5061	Set transaction code for mass payment transactions in tag dictionary.
5062	Add an IPH ID from a tag's dictionary.
5063	Set unique transaction identifier (TNR) in transaction details using information from tag dictionary.
5064	Parses MT940 data expects a string with data Returns :py:class :list of :py:class :Transaction
5065	Parse mt940 data and returns transactions object
5066	Join strings together and strip whitespace in between if needed
5067	Turns response into a properly formatted json or text object
5068	Handles the message shown when we are ratelimited.
5069	Handles API requests with rate limiting, authorization, and retry logic.
5070	Gets the information of the given Bot ID
5071	Gets bots from the database with a limit and offset, with a maximum limit of 50.
5072	Read incoming message.
5073	Write outgoing message.
5074	Close port.
5075	Decode Erlang external term.
5076	Encode Erlang external term with optional compression.
5077	None means 'system default'.
5078	Method sleeps if nothing to do, processes and reschedules messages otherwise.
5079	Set a callback for handling messages when services appear online and send a Hi message, with optional filters for message types and scopes.
5080	Cleans up and stops the discovery server.
5081	send Bye messages for the services and remove them
5082	Search for services given the TYPES and SCOPES in a given TIMEOUT
5083	Construct a raw SOAP XML string based on the action in a prepared SoapEnvelope object.
5084	Discover systems using WS-Discovery
5085	Return the manager that handles the relation from this instance to the tagged_item class.
5086	Return a list of RelatedObject records for child relations of the given model, including ones attached to ancestors of the model.
5087	Return a list of ParentalManyToManyFields on the given model, including ones attached to ancestors of the model.
5088	Saves the model and commits all child relations.
5089	Build an instance of this model from the JSON-like structure passed in, recursing into related objects as required. If check_fks is true, it will check whether referenced foreign keys still exist in the database. Depending on the 'on_delete' setting, it will either nullify the key or drop the related object.
5090	This method will check for unique_together condition and raise a ValidationError if there are any uniqueness failures.
5091	Return True if data differs from initial.
5092	Returns the address with a valid checksum attached.
5093	Generates the correct checksum for this address.
5094	Parse arguments for the command.
5095	Return the argument parser that will be used to interpret arguments and options from argv.
5096	Prompts the user to enter their seed via stdin. If no seed is specified, a random one will be used instead.
5097	Validates whether a sequence of signature fragments is valid by comparing them with a hash and a public key using a cryptographic sponge.
5098	Generates a single key based on the provided index and number of iterations, which represents the security level. Increasing the number of iterations makes the key generation slower but more resistant to brute-forcing.
5099	Generates the key associated with the specified address. Note that this method will generate the wrong key if the input address was generated from a different key!
5100	Creates a generator for progressively generating new keys.
5101	Prepares the hash sponge for the generator.
5102	Absorb trits into the sponge, copying them into internal state and transforming the state after each hash.
5103	Squeeze trits from the sponge.
5104	Transforms internal state by applying a series of rounds using a truth table.
5105	Generate key digests from the seed.
5106	Generates one or more private keys from the seed.
5107	Prepare a bundle that authorizes the spending of IOTAs from a multisig address.
5108	Adds two sequences of trits together.
5109	Convert an integer to its trit (balanced ternary) representation. Optionally pad the result to a specified length.
5110	Adds two individual trits together. The result is always a single trit.
5111	Adds two trits together, with support for a carry trit.
5112	Outputs the user's seed to stdout, along with warnings about security to prevent unauthorized use. The seed is displayed after clearing the screen, and the user must press return to continue.
5113	Find transactions that match the specified input and return. All input values are lists, for which a list of return values (transaction hashes), in the same order, is returned for all individual elements. Using multiple of these input fields returns the intersection of the values.
5114	Gets all possible inputs of a seed and returns them, along with the total balance. This is done either deterministically by generating all addresses until an empty result is returned, or by providing a key range to search. The function allows specifying a starting key index, a stopping index, a minimum threshold for a successful result, and a security level for generating new addresses. The function returns a dictionary containing a list of addresses with nonzero balances and the aggregate balance from all matching addresses.
5115	Generate one or more new addresses from the seed.
5116	Get transfers associated with the seed.
5117	Promotes a transaction by adding spam on top of it.
5118	Replay a bundle associated with the given tail transaction hash by attaching it to the Tangle.
5119	Prepares a set of transfers and creates the bundle, then attaches the bundle to the Tangle, and broadcasts and stores the transactions.
5120	Attach transaction trytes to the Tangle, then broadcast and store them.
5121	Given a URI, returns a properly-configured adapter instance.
5122	### send_request(self, payload, **kwargs)  
Sends an API request to the node. Parameters include payload (JSON) and additional keyword arguments for the adapter. Returns the decoded response from the node. Raises `BadApiResponse` if a non-success response is received.
5123	Sends a message to the instance's logger, if configured.
5124	Sends the actual HTTP request.
5125	Interpret the HTTP response from the node.
5126	Sets the response that the adapter will return for the specified command.
5127	Absorbs a digest into the sponge and appends it to the list of digests. Raises a ValueError if an address has already been extracted.
5128	Returns the new multisig address. Note that you can continue to add digests after extracting an address; the next address will use all of the digests that have been added so far.
5129	Creates an iterator for generating new addresses progressively.
5130	Generates an address from a private key digest.
5131	Generates a new address based on a key iterator. Used in the event of a cache miss.
5132	Finds transactions matching the specified criteria, fetches the corresponding trytes, and converts them into Transaction objects.
5133	Scans the Tangle for used addresses.
5134	Given a set of transaction hashes, returns the corresponding bundles, sorted by tail transaction timestamp.
5135	Determines which codec to use for the specified encoding.
5136	Returns information used by the codecs library to configure the codec for use.
5137	Encodes a byte string into trytes.
5138	Decodes a tryte string into bytes.
5139	Find addresses matching the command parameters.
5140	Adds a route to the wrapper.
5141	Create a Transaction object from a sequence of trytes.
5142	Returns a JSON-compatible representation of the object.
5143	Returns the values needed to validate the transaction's signature_message_fragment value.
5144	Sets the `is_confirmed` status for the bundle and updates it for all transactions within the bundle.
5145	Attempts to decipher encoded messages from the transactions in the bundle.
5146	Get TryteString representations of the transactions in this bundle.
5147	Groups transactions in the bundle by address.
5148	Automatically discover commands in the specified package.
5149	Sends the request object to the adapter and returns the response, automatically injecting the command name into the request.
5150	Apply a filter to a value. If the value does not pass the filter, raise an exception with contextual information.
5151	Returns the URL to check job status.
5152	Returns all errors found with the bundle.
5153	Returns whether the bundle is valid.
5154	Creates a generator that validates transactions in a bundle.
5155	Validates the signature fragments in the bundle using supported and legacy algorithms. Returns a list of error messages if validation fails.
5156	Validates the signature fragments for a group of transactions using the specified sponge type. Returns ``None`` if the fragments are valid, or an error message if they are invalid.
5157	Recursively traverse the Tangle, collecting transactions until we hit a new bundle. This method is faster than `findTransactions` and ensures we don't collect transactions from replayed bundles.
5158	Starts the REPL.
5159	Generates a random seed using a CSPRNG.
5160	Generates the digest used to do the actual signing.Signing keys can have variable length and tend to be quite long, which makes them not-well-suited for use in crypto algorithms.The digest is essentially the result of running the signing key through a PBKDF, yielding a constant-length hash that can be used for crypto.
5161	Sign the inputs starting at the specified index.
5162	Makes JSON-serializable objects play nice with IPython's default pretty-printer.
5163	Absorb trits into the sponge from a buffer.
5164	Squeeze trits from the sponge into a buffer.
5165	Attaches a context value to an Exception
5166	Generates a filter chain for validating a security level.
5167	Increments the transaction's legacy tag, used to fix insecure bundle hashes when finalizing a bundle.
5168	Determines the most relevant tag for the bundle.
5169	Adds a transaction to the bundle. If the transaction message is too long, it will be split automatically into multiple transactions.
5170	Finalizes the bundle, preparing it to be attached to the Tangle. Ensures the bundle is balanced and generates a secure hash for the bundle.
5171	Signs inputs in a finalized bundle. Checks if transactions have negative values and signs them using the appropriate private key from the key generator, skipping transactions based on their security level. If a transaction has a non-negative value, it is skipped without signing. Raises a RuntimeError if the bundle is not finalized before signing.
5172	Signs the input at the specified index using the provided private key.
5173	Creates transactions for the specified input address, including a spend transaction and additional meta transactions for signatures, if necessary.
5174	Converts between any two standard units of iota.
5175	Recover x and y coordinates from a compressed point on G1 curve.
5176	Return the modular inverse of `a` modulo `n` using the extended Euclidean algorithm.
5177	Load a lexicon from a JSON file.
5178	Combines words into groups based on their proximity
5179	Given a string and a dict of synonyms, returns the 'preferred' word. Case insensitive. If the word is not found, returns the input word.
5180	Replaces any abbreviations in the given text with their full word equivalents using the abbreviations dictionary from the lexicon.
5181	Split a description into parts, each of which can be turned into a single component.
5182	Lists the categories in the lexicon, except the optional categories.
5183	Returns minimal Decor with random colour.
5184	Make a simple plot of the Decor.
5185	Generate a default legend based on the given name.
5186	Generate a default timescale legend. No arguments. Returns a Legend object.
5187	Generate a random legend for a given list of components.
5188	A slightly easier way to make legends from images.
5189	Read CSV text and generate a Legend.
5190	Renders a legend as a CSV string.
5191	The maximum width of all the Decors in the Legend. This is needed to scale a Legend or Striplog when plotting with widths turned on.
5192	Get the decor for a component.
5193	Get the attribute of a component.
5194	Get the component corresponding to a display colour. This is for generating a Striplog object from a colour image of a striplog.

Args:
   colour (str): The hex colour string to look up.
   tolerance (float): The colourspace distance within which to match.
   default (component or None): The component to return in the event of no match.

Returns:
   component. The component best matching the provided colour.
5195	Make a simple plot of the legend. Calls Decor.plot() on all of its members.
5196	Returns a Component from a text string using a Lexicon. None if there is a required attribute missing.
5197	Given a format string, return a summary description of a component.
5198	Gracefully deprecates the use of the 'Rock' class name, directing users to use 'Component' instead.
5199	Processes a single row from the file and constructs a dictionary with field values.
5200	Read all the rows and return a dict of the results.
5201	Check if striplog is monotonically increasing in depth.
5202	Summarize a Striplog with some statistics. Returns a list of (Component, total thickness) tuples sorted by thickness in descending order.
5203	Take a sequence of tops in an arbitrary dimension, and provide a list of intervals from which a striplog can be made.
5204	Clean longitudinal data for creating a striplog.
5205	Makes a striplog from a Petrel text file.
5206	Reconstructs a list of Intervals from a data dictionary based on various criteria and filters.
5207	Load data from a CSV file or text.
5208	Read an image and generate Striplog.
5209	Turn a 1D array into a striplog, given a cutoff.
5210	Turn LAS3 'lithology' section into a Striplog.
5211	Eats a Canstrat DAT file and converts it into a striplog.
5212	Returns a shallow copy.
5213	Converts the summaries of Intervals to a CSV string or writes them to a file, optionally using descriptions instead of summaries.
5214	Returns an LAS 3.0 section string.
5215	Plot a matplotlib axis object with the Rectangles.
5216	Retrieves data from the striplog for a specified field, applying a function to each value and handling default values.
5217	Extracts a log into the components of a striplog.
5218	Search for a regex expression in the descriptions or summaries of the striplog, and optionally return the index instead of the interval.
5219	Find overlaps in a striplog.
5220	Finds gaps in a striplog.
5221	Remove intervals below a certain limit thickness. In place.
5222	Fill in empty intervals by growing from top and base.
5223	Fill gaps with the component provided.
5224	Makes a striplog of all unions.
5225	Makes a striplog of all intersections. Returns the result of the intersection.
5226	Merges overlaps by merging overlapping Intervals. The function takes no arguments and returns ``None``. It operates on the striplog 'in place'.
5227	Plots a histogram and returns the data for it.
5228	Inverts the striplog, changing its order and the order of its contents. Operates in place by default.
5229	Crop to a new depth range. Adjust start and stop depths within existing striplog and return a new Striplog or update in place based on the copy parameter.
5230	Run a series of tests and return the corresponding results.
5231	Convert hex to a color name, using matplotlib's colour names.
5232	Get a log-like stream of RGB values from an image.
5233	Return an underscore if the attribute is absent.
5234	Lists all the jobs registered with Nomad.
5235	Parse a HCL Job file and return a dict with the JSON formatted job. This API endpoint is supported from Nomad version 0.8.3. It raises `BaseNomadException` and `URLNotFoundNomadException`.
5236	Updates the token for a given accessor ID.
5237	Lists all the allocations with an optional prefix for filtering. Returns a list of allocations and raises exceptions on errors.
5238	Mark a deployment as failed to force scheduler action or rollback.
5239	Pause or resume a deployment in Nomad.
5240	Mark the health of allocations manually for a deployment in Nomad, allowing for control over rolling upgrades.
5241	Toggle the drain mode of a Nomad node, enabling or disabling further allocations and migrating existing ones.
5242	Toggle the drain mode of a node based on the provided drain specification and eligibility status.
5243	Toggle the eligibility of a node by marking it as either available or unavailable and validate the parameters to ensure that exactly one of `eligible` or `ineligible` is provided.
5244	List files in an allocation directory.
5245	This endpoint streams the contents of a file in an allocation directory.
5246	Stat a file in an allocation directory.
5247	Initiate a join between the agent and target peers.
5248	Updates the list of known servers to the provided list and returns a 200 status code.
5249	Force a failed gossip member into the left state. Returns a 200 status code. Raises exceptions if the request fails.
5250	Lists all the client nodes registered with Nomad.
5251	Lists all the evaluations. Returns a list of evaluations filtered by an optional prefix. Raises exceptions if the request fails.
5252	Lists all the namespaces registered with Nomad.
5253	Registers a new job or updates an existing job.
5254	Invoke a plan job using the Nomad API for a given job dictionary with options for dry-run and policy overrides, and return the JSON response.
5255	Dispatches a new instance of a parameterized job.
5256	Revert a job to an older version using the Nomad API.
5257	Sets the stability of a job in Nomad.
5258	Deregisters a job, and stops all allocations part of it. Optionally specifies whether the job should be stopped and purged immediately or deferred to the Nomad garbage collector.
5259	Get the configuration of a Nomad client node, optionally querying with stale data. Raises exceptions if the cluster does not have an active leader or if the URL is not found.
5260	Remove the Nomad server with given address from the Raft configuration.
5261	Lists all deployments with an optional prefix filter.
5262	Get a random mutator from a list of mutators.
5263	Returns a random mutator for the given type
5264	Return a polyglot attack containing the original object
5265	Performs fuzzing on the given object by randomly performing actions and converting the result to a safe Unicode string.
5266	Safely return an unicode encoded string
5267	Starts the servers.
5268	Kills the servers and logs the completion.
5269	Serve custom HTML page
5270	Serves a fuzzed JSON object and handles potential exceptions.
5271	Generic fuzz mutator, use a decorator for the given type.
5272	Spawn a new process using subprocess.
5273	Try to get output in a separate thread.
5274	Wait until we got output or until timeout is over.
5275	Terminate the newly created process.
5276	Parse the command line and start PyJFuzz based on the provided options.
5277	Performs the actual external fuzzing, allowing for customization of performance.
5278	Decorator used to change the return value from PJFFactory.fuzzed, it makes the structure printable
5279	Builds the String instance
5280	Builds the `And` instance with an optional prerequisites list and a flag to generate the shortest reference-chain version of the field.
5281	Build the ``Quote`` instance
5282	Builds an "Or" instance with a random value from either the shortest reference chain or a list of values.
5283	Builds the current ``Opt`` instance with optional prerequisites and shortest reference-chain generation.
5284	Build the ``Ref`` instance by fetching the rule from the GramFuzzer instance and building it. Handles prerequisites and the shortest reference-chain option. Adjusts REF_LEVEL accordingly.
5285	Build the STAR field.
5286	Shutdown the running process and the monitor
5287	Run command once and check exit code
5288	Run command in a loop and check exit status plus restart process when needed.
5289	Generate a random float within a specified range. If only one parameter is provided, it serves as the maximum value with a default minimum of 0.0.
5290	Add a new rule definition named ``def_name`` having value ``def_value`` to the category ``cat``.
5291	Associate the provided rule definition name `def_name` with the category group `cat_group` in the category `cat`.
5292	Generate ``num`` rules from category ``cat`` with optional preference for category groups ``preferred``.
5293	Fuzz all elements inside the object.
5294	Get a printable fuzzed object
5295	Return the fuzzed object
5296	Mutate a generic object based on type
5297	When we receive a termination signal, if the process is in the 'WAITING' state, it will exit. If the process is in the 'RUNNING' state, it will send the signal to the child process and then exit.
5298	Kills the child process and exits if it is running; otherwise, exits the system.
5299	Pauses the actor by killing the running child process and setting the state to PAUSED.
5300	sets state to waiting - so we resume spawning children
5301	Stops the running child process, pauses it, and sets an exit callback if it is running. Returns 'killed' if successful, otherwise an empty string.
5302	restart the subprocess
5303	Retrieve a list of events since the last poll, with potential blocking if no events occur.
5304	Update the activity message for the current user.
5305	Updates the profile picture for the current user.
5306	Retrieve various metadata associated with a URL, as seen by Skype.
5307	Retrieves all details for a specific contact, including fields such as birthday and mood.
5308	Retrieve public information about a user.
5309	Retrieve a list of all known bots.
5310	Retrieves a single bot by its UUID or username.
5311	Search the Skype Directory for a user.
5312	Retrieve any pending contact requests.
5313	Create a new instance of SkypeObj based on the raw properties of an API response. This method can be overridden to automatically create subclass instances based on the raw content.
5314	Copy properties from another object into the current object, skipping ``None`` values, and merge the raw data.
5315	Add a given object to the cache, or update an existing entry to include more fields.
5316	Follow and track sync state URLs provided by an API endpoint, in order to implicitly handle pagination.
5317	Attempt to re-establish a connection using previously acquired tokens. If the Skype token is valid but the registration token is invalid, a new endpoint will be registered.
5318	Store details of the current connection in the named file. This can be used by `readToken` to re-authenticate at a later time.
5319	Ensure the authentication token for the given auth method is still valid.
5320	Refresh the Skype token to extend its expiry time without needing other credentials. Raises exceptions if the login request is rejected or if the login form can't be processed.
5321	Ask Skype for the authenticated user's identifier, and store it on the connection object.
5322	Acquire a new registration token and write to the token file if specified.
5323	Retrieve all current endpoints for the connected user.
5324	Query a username or email address to see if a corresponding Microsoft account exists.
5325	This function uses an existing Skype token to refresh it and extend its expiry time. It raises exceptions if the login request is rejected or if the login form can't be processed.
5326	Request a new registration token using a current Skype token.
5327	Configures the endpoint to allow setting presence with an optional display name.
5328	Sends a keep-alive request for the endpoint.
5329	Retrieve a selection of conversations with the most recent activity, and store them in the cache.
5330	Gets a single conversation by identifier.
5331	Creates a new group chat with the given users, with the current user automatically added as an admin and any other admin identifiers also present in the member list.
5332	Extracts the username from a Skype API URL by matching patterns like "users/<user>" or "users/ME/contacts/<user>". Returns the matched identifier if found, otherwise returns None.
5333	Extracts the conversation ID from a Skype API URL.
5334	Repeatedly call a function until false-y, yielding each item in turn. The `transform` parameter can be used to map a collection to another format. Use with state-synced functions to retrieve all results.
5335	Convert text to Unicode, handling different encodings and normalizing line breaks.
5336	Figure out which handler to use, based on metadata. Returns a handler instance or None.
5337	Parse text with frontmatter, return metadata and content. Pass in optional metadata defaults as keyword args. If frontmatter is not found, returns an empty metadata dictionary (or defaults) and original text content.
5338	Return the post as a dictionary for serialization
5339	Parse YAML front matter using yaml.SafeLoader.
5340	Export metadata as YAML. Uses `yaml.SafeDumper` by default.
5341	Turn metadata into JSON.
5342	Return the match object for the current list.
5343	Returns items as a list of strings. Does not include sub-items and the start pattern.
5344	Return the Lists inside the item with the given index.
5345	Converts the pattern to a new starting pattern by replacing the existing pattern.
5346	Parse template content. Create self.name and self.arguments.
5347	Return the lists in all arguments.
5348	Create a Trie out of a list of words and return an atomic regex pattern.
5349	Converts a trie to a regex pattern.
5350	Return adjusted start and stop index as tuple. Used in __setitem__ and __delitem__.
5351	Insert a string before the specified index in a span.
5352	Partition self.string where `char`'s not in atomic sub-spans.
5353	Return all the sub-span including self._span.
5354	Update `self._type_to_spans` according to the removed span.
5355	Update self._type_to_spans according to the added length
5356	Return the nesting level of self.
5357	Return a copy of self.string with specific sub-spans replaced. Comments blocks are replaced by spaces. Other sub-spans are replaced by underscores.
5358	Replaces the invalid characters of SPAN_PARSER_TYPES with b'_'.

For comments, all characters are replaced, but for ('Template', 'ParserFunction', 'Parameter') only invalid characters are replaced.
5359	Create the arguments for the parse function used in pformat method.

Only return sub-spans and change them to fit the new scope, i.e
self.string.
5360	Deprecated, use self.pformat instead.
5361	Return a list of parameter objects.
5362	Return a list of parser function objects.
5363	Return a list of templates as template objects.
5364	Return a list of wikilink objects.
5365	Return a list of comment objects.
5366	Return a list of found external link objects.
5367	Return a list of section in current wikitext. The first section will always be the lead section, even if it is an empty string.
5368	Return a list of found table objects.
5369	Return a list of WikiList objects.
5370	Return all tags with the given name.
5371	Yield all the sub-span indices excluding self._span.
5372	Return the ancestors of the current node.
5373	Return the parent node of the current object.
5374	Find the most common item in a list. Return the first one if there are multiple.
5375	Return the first argument in the args that has the given name. Return None if no such argument is found.
5376	Return the normal form of an object's name by removing comments, language codes, specified namespaces, underscores, consecutive spaces, and handling capitalization and anchor removal.
5377	Eliminate duplicate arguments by removing the first occurrences.
5378	Remove duplicate arguments in a safe manner. Only removes duplicates if they have the same name and value (one of them is safe to remove), or if one is empty (removes the empty one). If `tag` is defined, appends it to the value of the remaining duplicate arguments.
5379	Set the value for an argument or add a new one with given parameters. Handles updating existing arguments, adding new ones in specified positions, and formatting with optional spacing.
5380	Return the last argument with the given name. Return None if no argument with that name is found.
5381	Return true if there is an arg named `name`. Also check equality of values if `value` is provided.
5382	Delete all arguments with the given name.
5383	Lookup crscode on spatialreference.org and return in specified format.
5384	Search for an ellipsoid name located in this module.
5385	Returns the CRS object from a string interpreted as a specified format, located at a given URL site.
5386	Returns the crs object from a file, with the format determined from the filename extension.
5387	Load crs object from epsg code, via spatialreference.org. Parses based on the proj4 representation.
5388	Load crs object from esri code, via spatialreference.org. Parses based on the proj4 representation.
5389	Load crs object from sr-org code, via spatialreference.org. Parses based on the proj4 representation.
5390	Detect crs string format and parse into crs object with appropriate function.
5391	Write the raw header content to the out stream.
5392	### Example 4:
Output:
Institute a RawVLR by reading the content from the data stream.
5393	Retrieves and parses GeoTiff keys from the VLRs in a LAS file.
5394	Parses the GeoTiff VLRs information into nicer structs
5395	Returns the signedness for the given type index
5396	Returns the index of the type as defined in the LAS Specification.
5397	Return a new PackedPointRecord from an existing one with the ability to change to point format while doing so.
5398	Copy the values of the current dimensions from other_record.
5399	Appends zeros to the array if the value to be fit has a larger length.
5400	Returns all the dimensions names, including the names of sub_fields and their corresponding packed fields.
5401	Creates a new point record with all dimensions initialized to zero
5402	Construct the point record by reading the points from the stream
5403	Construct the point record by reading and decompressing the points data from the input buffer.
5404	Returns the scaled x positions of the points as doubles.
5405	Returns the scaled y positions of the points as doubles.
5406	Returns the scaled z positions of the points as doubles.
5407	Adds a new extra dimension to the point record.
5408	Writes the data to a stream, optionally compressing it if specified.
5409	Writes the LAS data into a file, optionally compressing it based on the file extension or provided flag.
5410	Writes to a stream or file
5411	Builds a dictionary mapping point format IDs to numpy dtypes, unpacking bit fields when accessing them.
5412	Builds the dict mapping point format id to numpy dtype.
5413	Converts a numpy dtype to a matching point format id. Raises an error if no compatible format is found.
5414	Returns the minimum file version that supports the given point_format_id
5415	Returns true if the file version support the point_format_id
5416	Returns the list of vlrs of the requested type. Always returns a list even if there is only one VLR of type vlr_type.
5417	Returns the list of vlrs of the requested type. The difference with get is that the returned vlrs will be removed from the list.
5418	Reads VLRs and parses them if possible from the stream.
5419	Returns true if all the files have the same points format id.
5420	Returns true if all the files have the same numpy datatype
5421	Reads the 4 first bytes of the stream to check that is LASF
5422	Reads the head of the las file and returns it.
5423	Reads and returns the Variable Length Records (VLRs) of the file.
5424	Reads the points record parts of the LAS file. Uses the header and VLRs (Variable Length Records) to handle point format and potentially compressed data.
5425	Read the compressed point record
5426	Reads and returns the waveform VLR header and waveform record.
5427	Reads the EVLRs of the file, will fail if the file version does not support evlrs.
5428	Warn about unknown bytes found in the file if they are not at the expected position.
5429	Opens and reads the header of the las content in the source.
5430	Read LAS data from a source using pylas library and returns a LasBase object.
5431	Creates a File from an existing header, allocating the array of points according to the provided header. The input header is copied.
5432	Create a new empty LAS data object with the given point format ID and file version.
5433	Converts a Las from one point format to another, automatically upgrading the file version if source file version is not compatible with the new point_format_id.
5434	Merge multiple las files into one
5435	Writes the given las into memory using BytesIO and reads it again, returning the newly read file. Used for testing purposes without writing to disk.
5436	Returns the creation date stored in the las file.
5437	Set the file creation date and day of year.
5438	Returns the minimum values of x, y, z as a NumPy array.
5439	Sets the minimum values of x, y, z as a numpy array.
5440	Returns de maximum values of x, y, z as a numpy array
5441	Sets the maximum values of x, y, z as a numpy array.
5442	Returns the scaling values of x, y, z as a numpy array.
5443	Returns the offsets values of x, y, z as a numpy array.
5444	Seeks to the position of the last version header fields in the stream and returns it as a string.
5445	Converts a header to another version.
5446	Unpack sub field using its mask
5447	Packs a sub field's array into another array using a mask.
5448	Returns a list of the names of the dimensions that will be lost when converting from point_fmt_in to point_fmt_out
5449	Returns a dict of sub fields for this point format.
5450	Returns the number of extra bytes.
5451	Returns True if the point format has waveform packet dimensions
5452	Run satel_integra console script with specified port, IP, command, and log level. Starts demo if command is "demo".
5453	Calculate checksum as per Satel manual.
5454	Debugging method to print out frames in hex.
5455	Verify checksum and strip header and footer of received frame.
5456	Return list of positions of bits set to one in given data.
5457	Adds header, checksum, and footer to command data.
5458	Runs a basic demo of the monitoring capabilities using AsyncSatel.
5459	Make a TCP connection to the alarm system.
5460	Start monitoring for interesting events.
5461	Sends a command to disarm the system using a given code and partition list.
5462	Sends a command to clear the alarm using the provided code and partition list.
5463	Sets the output state for an alarm system.
5464	Keep the connection alive by sending random queries to the device.
5465	Start monitoring of the alarm status. Send command to satel integra to start sending updates. Read in a loop and call respective callbacks when received messages.
5466	Stop monitoring and close connection.
5467	Clears all matching our user_id.
5468	Guess the type of a file. If allow_directory is False, don't consider the possibility that the file is a directory.
5469	Get the id of a file in the database.
5470	Get a notebook from the database.
5471	Build a notebook model from database record.
5472	Get a directory from the database.
5473	Apply _notebook_model_from_db or _file_model_from_db to each entry in file_records, depending on the result of guess_type.
5474	Build a directory model from database directory record.
5475	Build a file model from database record.
5476	Save a notebook. Returns a validation message.
5477	Save a non - notebook file.
5478	Rename object from old_path to path. This method covers both files and directories, and handles exceptions related to file existence, directory existence, and moving the root entity.
5479	Delete object corresponding to path.
5480	Add a new user if they don't already exist.
5481	Delete a user and all of their resources.
5482	Create a directory with the given name, user ID, and API path. If the name is the root directory, set the parent name and user ID to null. Otherwise, set the parent name to the directory name up to the last slash and the parent user ID to the current user ID.
5483	Return a WHERE clause that matches entries in a directory. Parameterized on table because this clause is re-used between files and directories.
5484	```The function `delete_directory` deletes a directory specified by `api_path` for a given `user_id` in a database. It first converts the API directory name to a database directory name using `from_api_dirname`. It then attempts to execute a delete operation on the `directories` table where the `user_id` and `name` match. If there is an `IntegrityError` due to a foreign key violation, it raises a `DirectoryNotEmpty` exception. If no row is affected, it raises a `NoSuchDirectory` exception. Otherwise, it returns the number of rows affected.```
5485	Returns whether a directory exists with the given user ID and directory name in the database.
5486	Return files in a directory.
5487	Return subdirectories of a directory.
5488	Return a WHERE clause matching the given API path and user_id.
5489	Return a SELECT statement that returns the latest N versions of a file.
5490	Get a list of default fields returned by a file query.
5491	Get file data for the given user_id, path, and query_fields. The query_fields parameter specifies which database fields should be included in the returned file data.
5492	Get file data for the given user_id and path. Include content only if include_content=True.
5493	This function retrieves the value in the 'id' column for a file identified by the provided user ID and API path.
5494	Check if a file exists.
5495	Rename a directory.
5496	Save a file.
5497	Create a generator of decrypted files.
5498	Delete all database records for the given user_id.
5499	Create a generator of decrypted remote checkpoints. Checkpoints are yielded in ascending order of their timestamp.
5500	Fetch and decrypt notebooks from a database table within a specified datetime range and yield their contents.
5501	Re-encrypt a row from the specified table with the given ID using the provided decryption and encryption functions.
5502	Re-encrypt all of the files and checkpoints for a single user.
5503	Convert a secret key and a user ID into an encryption key to use with a ``cryptography.fernet.Fernet``.
5504	Derive a list of per-user Fernet keys from a list of master keys and a username.
5505	Create and return a function suitable for passing as a crypto_factory to ``pgcontents.utils.sync.reencrypt_all_users``
5506	Decorator memoizing a single-argument function
5507	Get the name from a column-like SQLAlchemy expression. Works for Columns and Cast expressions.
5508	Convert a SQLAlchemy row to a dict without the 'content' field, raises AssertionError if 'content' field is present.
5509	Convert a SQLAlchemy row that contains a 'content' field to a dict. Apply a decryption function to the 'content' field. Handle None input gracefully. Raises an assertion error if the 'content' field is missing.
5510	Create a checkpoint of the current state of a notebook. Returns a checkpoint_id for the new checkpoint.
5511	Create a checkpoint of the current state of a file. Returns a checkpoint_id for the new checkpoint.
5512	Delete a checkpoint for a file
5513	This interface is used to retrieve the content of a checkpoint by providing the checkpoint ID and path.
5514	Return a list of checkpoints for a given file.
5515	Rename all checkpoints for old_path to new_path.
5516	Delete all checkpoints for the given path.
5517	Purge all database records for the current user.
5518	Resolve a path based on a dictionary of manager prefixes. Returns a triple of (prefix, manager, manager_relative_path).
5519	Prefix all path entries in model with the given prefix.
5520	Decorator for methods that accept path as a first argument.
5521	Parameterized decorator for methods that accept path as a second argument.
5522	Decorator for methods accepting old_path and new_path, ensuring they belong to the same manager and handling result prefixing based on returns_model.
5523	Strips slashes from directories before updating.
5524	Special case handling for listing root dir.
5525	Resolve paths with '..' to normalized paths, raising an error if the final result is outside root.
5526	Split an API file path into directory and name.
5527	Write a notebook as base64.
5528	Read a notebook from base64.
5529	Decode base64 data of unknown format. Attempts to interpret data as utf-8, falling back to ascii on failure.
5530	Decode base64 content for a file.
5531	Return an iterable of all prefix directories of path, descending from root.
5532	Decorator for converting PathOutsideRoot errors to 404s.
5533	Create a user.
5534	Split an iterable of models into a list of file paths and a list of directory paths.
5535	Recursive helper for `walk`.
5536	Iterate over all files visible to `mgr`.
5537	Iterates over the contents of all files visible to `mgr`.
5538	Re-encrypt data for all users using specified cryptographic factories.
5539	Re-encrypt all files and checkpoints for a single user using the provided old and new cryptographic methods.
5540	Unencrypt data for all users in the database by iterating through each user ID and calling the `unencrypt_single_user` function with the appropriate parameters.
5541	Unencrypt all files and checkpoints for a single user.
5542	Temporarily write an alembic.ini file for use with alembic migration scripts.
5543	Upgrade the given database to the specified revision using Alembic.
5544	Santizes the data for the given block. If block has a matching embed serializer, use the `to_internal_value` method.
5545	Queue an instance to be fetched from the database.
5546	Fetch all queued instances of type `embed_type`, save results to `self.instances`.
5547	Insert a fetched instance into embed block.
5548	Load data in bulk for each embed block.
5549	Validation function for widget data
5550	Render HTML entry point for manager app.
5551	Return JSON representation for this template
5552	Hides authenticated fields if request context is missing or user is not authenticated
5553	Excludes fields that are included in the queryparameters
5554	Get the latest article with the given primary key. If the URL requested includes the querystring parameters 'version' and 'preview_id', get the article with the specified version and preview_id. Otherwise, get the published version of the article.
5555	Returns a filtered queryset of articles based on query parameters such as topic, section, tags, and author.
5556	Filter queryset based on whether content is unpublished and optionally by a query parameter.
5557	Overrides the default get_attribute method to convert None values to False.
5558	Check that the given widget contains the required fields.
5559	Checks that the given zone contains the required fields
5560	Indicate whether id is a valid UUID.
5561	Returns the user's permissions
5562	Modify the user's permissions based on the specified value. If the permissions are 'admin', the user is added to the 'Admin' group; otherwise, the user is removed from the group.
5563	Raise a ValidationError if data does not match the author format.
5564	Save widget data for this zone by setting the widget_id and data attributes, calling the before-save hook on nested widgets, and then calling the before-save hook on the main widget.
5565	Returns data from each field.
5566	Prepare widget data for template.
5567	Renders the widget as HTML.
5568	Retrieves the settings for this integration as a dictionary. Removes all hidden fields if show_hidden=False
5569	Receive an OAuth callback request from Facebook, authenticate with Facebook using the provided payload, fetch pages belonging to the authenticated user, and return the list of pages.
5570	Return settings for the given integration as a dictionary.
5571	Updates settings for a given integration.
5572	Handles user signup requests with form validation and invite logic.
5573	Returns the HTML produced from enclosing each item in `contents` in a tag of type `tagname`
5574	Renders the contents of the zone with given zone_id.
5575	Handles saving the featured image. If `data` is `None`, the featured image will be removed. `data` should be a dictionary with keys for `image_id`, `caption`, and `credit`.
5576	Save the subsection to the parent article
5577	Returns the file extension.
5578	Returns the medium size image URL.
5579	Custom save method to process thumbnails and save image dimensions.
5580	Processes and saves a resized thumbnail version of the image.
5581	Attempts to connect to the MySQL server.
5582	Wraps a fileobj in a bandwidth limited stream wrapper.
5583	Reads a specified amount of data. Reads may be throttled if bandwidth limiting is enabled.
5584	Consumes a requested amount of resources, ensuring it does not exceed the maximum allocated bandwidth. If the request would exceed the limit, it raises a `RequestExceededException`.
5585	Schedules a wait time for an amount to be consumed and returns the time to wait
5586	Processes a scheduled consumption request that has completed. Decrement the total wait time based on the time-to-consume value associated with the request token.
5587	Get the projected rate using a provided amount and time.
5588	Record the consumption rate based off amount and time point.
5589	Downloads the object's contents to a file.
5590	Poll for the result of a transfer
5591	Retrieves callbacks from a subscriber based on the specified callback type. Returns a list of callbacks preinjected with the transfer future.
5592	gets a dictionary filtered by whitelisted keys
5593	Decrement the count by one
5594	Finalize the counter Once finalized, the counter never be incremented and the callback can be invoked once the count reaches zero
5595	Checks if the given file is a special UNIX file. It checks if the file is a character special device, block special device, FIFO, or socket.
5596	Acquire the semaphore. If cannot be acquired, raise an exception.
5597	Release the semaphore.
5598	Get a chunksize close to current that fits within all S3 limits.
5599	Queue IO write for submission to the IO executor.
5600	Get an IO write task for the requested set of data. This task can be ran immediately or be submitted to the IO executor for it to run.
5601	Retrieves a class for managing output for a download.
5602	Downloads an object and places content into io queue
5603	Pulls off an io queue to write contents to a file.
5604	Request any available writes given new incoming data. According to the incoming data offset, if there are consecutive writes can now be submitted, this method will return all applicable writes. This is done with one method call, avoiding the need to make two separate method calls (put(), get()), which acquire a lock each time.
5605	Backwards compat function to determine if a fileobj is seekable
5606	Uploads a file to S3.
5607	Downloads a file from S3
5608	Copy a file in S3
5609	Delete an S3 object.
5610	Shutdown the TransferManager. It will wait till all transfers complete before it completely shuts down.
5611	Cancel all in-progress transfers.
5612	Wait until there are no more inprogress transfers. This will not stop when failures are encountered and not propagate any of these errors from failed transfers, but it can be interrupted with a KeyboardInterrupt.
5613	Reads a specific amount of data from a stream and returns it. If there is any data in initial_data, that will be popped out first.
5614	Wraps data with the interrupt reader and the file chunk reader.
5615	Retrieves a class for managing input for an upload based on file type.
5616	Sets the exception on the future.
5617	Set a result for the TransferFuture, implying that the TransferFuture succeeded. The method ensures that the transfer process is marked as successful even if it was canceled on a final task prior to setting the result.
5618	Set an exception for the TransferFuture.
5619	Waits until the TransferFuture is done and returns the result. If the TransferFuture succeeded, it returns the result. If the TransferFuture failed, it raises the exception associated with the failure.
5620	Cancel the TransferFuture
5621	Submit a task to a provided executor.
5622	Add a done callback to be invoked when transfer is complete.
5623	Add a callback function to be called upon failure.
5624	Announce that future is done running and run associated callbacks
5625	Submit a task to complete
5626	Adds a callback to be executed once the future is completed.
5627	Uploads a file to an S3 bucket.
5628	Download an S3 object to a file. This method issues a ``head_object`` request to determine the size of the S3 object, which is used to determine if the object is downloaded in parallel. If an exception occurs during the download, the method removes the partial file and re-raises the exception.
5629	Function to find functions with step decorator in parsed file.
5630	Get the arguments passed to step decorators, converted to Python objects.
5631	Find the step with old_text and change it to new_text, updating the step function parameters based on move_param_from_idx.
5632	Find functions with step decorator in parsed file.
5633	Get arguments passed to step decorators converted to python objects.
5634	Find the step with old_text and change it to new_text. The step function parameters are also changed according to move_param_from_idx.
5635	Selects the default parser for loading and refactoring steps. Uses 'redbaron' to select the old parsing engine from v0.3.3. The redbaron parser supports Python 3 syntax but may have regressions. To revert to the old parser, set `GETGAUGE_USE_0_3_3_PARSER=true` in `python.properties`. This will be removed in future releases.
5636	List team memberships for a team, by ID. This method supports Webex Teams's implementation of RFC5988 Web Linking to provide pagination support. It returns a generator container that incrementally yields all team memberships returned by the query. The generator will automatically request additional 'pages' of responses from Webex as needed until all responses have been returned. The container makes the generator safe for reuse. A new API call will be made, using the same parameters that were specified when the generator was created, every time a new iterator is requested from the container.
5637	Add someone to a team by Person ID or email address; optionally making them a moderator.
5638	Update a team membership, by ID.
5639	Deletes a team membership by ID.
5640	This function retrieves a cat fact from the catfact.ninja API and returns it as a string.
5641	Handle inbound webhook JSON HTTP POSTs from Webex Teams, parse the message, and respond with a cat fact if the message contains "/CAT".
5642	Lists room memberships with optional filtering by room ID, person ID, or person email, and supports pagination through a generator container.
5643	Deletes a membership by ID
5644	Verifies that the base_url specifies a protocol and network location. Raises a ValueError if the URL is invalid.
5645	Check if given string is a validly-formatted web URL.
5646	Open the file and return an EncodableFile tuple.
5647	Object is an instance of one of the acceptable types or None.
5648	Creates a dictionary from inputted items while pruning any with a `None` value.
5649	Check response code against the expected code; raise ApiError. Raises an ApiError if the response code does not match the expected response code (erc) or a RateLimitError if the response code is a rate limit response code.
5650	Given a dictionary or JSON string; return a dictionary.
5651	Converts a string representing a date and time in the Webex Teams DateTime format into a datetime object with a timezone of UTC.
5652	List rooms by teamId and type. Optionally sort by room ID, last activity, or created. Limit the maximum number of items returned per request. Returns a generator container that incrementally yields all rooms returned by the query.
5653	### Example 4:
Input:
```python
def create(self, title, teamId=None, **request_parameters):
    """Create a room.

    The authenticated user is automatically added as a member of the room.

    Args:
        title(basestring): A user-friendly name for the room.
        teamId(basestring): The team ID with which this room is
            associated.
        **request_parameters: Additional request parameters (provides
            support for parameters that may be added in the future).

    Returns:
        Room: A Room with the details of the created room.

    Raises:
        TypeError: If the parameter types are incorrect.
        ApiError: If the Webex Teams cloud returns an error.

    """
    check_type(title, basestring)
    check_type(teamId, basestring)

    post_data = dict_from_items_with_values(
        request_parameters,
        title=title,
        teamId=teamId,
    )

    # API request
    json_data = self._session.post(API_ENDPOINT, json=post_data)

    # Return a room object created from the response JSON data
    return self._object_factory(OBJECT_TYPE, json_data)
```
Output:
Create a room. The authenticated user is automatically added as a member of the room.
5654	Update details for a room by ID.
5655	Deletes a room by its ID.
5656	List all licenses for a given organization. If no orgId is specified, the default is the organization of the authenticated user. Args: orgId(basestring): Specify the organization, by ID. **request_parameters: Additional request parameters (provides support for parameters that may be added in the future). Returns: GeneratorContainer: A GeneratorContainer which, when iterated, yields the licenses returned by the Webex Teams query. Raises: TypeError: If the parameter types are incorrect. ApiError: If the Webex Teams cloud returns an error.
5657	Get creation date and time in ISO8601 format.
5658	Attempt to get the access token from the environment. Try using the current and legacy environment variables. If the access token is found in a legacy environment variable, raise a deprecation warning. Returns: The access token found in the environment (str), or None.
5659	Create a webhook.
5660	Update a webhook by ID.
5661	Deletes a webhook by ID.
5662	Remove 'max=null' parameter from URL
5663	Enable or disable automatic rate-limit handling.
5664	Update the HTTP headers used for requests in this session.
5665	Given a relative or absolute URL; return an absolute URL.
5666	HTTP operation with rate-limiting and error handling.
5667	Send HTTP GET request to specified API endpoint
5668	Return a generator that GETs and yields pages of data.Provides native support for RFC5988 Web Linking.
5669	Return a generator that GETs and yields individual JSON `items`.
5670	Sends a PUT request to the specified URL.
5671	Sends a DELETE request to the specified URL.
5672	This interface is used to create a new guest issuer with an API access token using the provided issuer token.
5673	Lists messages in a room sorted in descending order by creation date. Supports pagination using RFC5988 Web Linking. Returns a generator container that yields all messages, automatically requesting additional pages as needed.
5674	Post a message, and optionally a attachment, to a room.
5675	Delete a message.
5676	Create a new user account for a given organization. Only an admin can create a new user account.
5677	Get a person's details, by ID.
5678	Update details for a person, by ID. Only an admin can update a person's details.
5679	Remove a person from the system.
5680	Get the details of the person accessing the API.Raises: ApiError: If the Webex Teams cloud returns an error.
5681	Lists all roles using the provided request parameters. Yields role objects created from the returned JSON objects.
5682	Returns a generator container that incrementally yields all teams returned by the query. The generator will automatically request additional 'pages' of responses from Webex as needed until all responses have been returned.
5683	Create a team. The authenticated user is automatically added as a member of the team.
5684	Update details for a team, by ID.
5685	Delete a team.
5686	List events in your organization by specifying various query parameters such as resource type, event type, actor ID, date range, and maximum number of items. Returns a generator that yields all events returned by the query, handling pagination automatically.
5687	Serialize data to an frozen tuple.
5688	Exchange an Authorization Code for an Access Token.
5689	The date and time of the person's last activity.
5690	Responds to inbound webhook JSON HTTP POST from Webex Teams. Processes the message and posts a cat fact if the message contains '/CAT'.
5691	Get the ngrok public HTTP URL from the local client API.
5692	Deletes a webhook by name.
5693	Create a Webex Teams webhook pointing to the public ngrok URL.
5694	Delete previous webhooks. If local ngrok tunnel, create a webhook.
5695	Output: Outputs DSMR data to console.
5696	Read complete DSMR telegram's from the serial interface and parse it into CosemObject's and MbusObject's.
5697	Read complete DSMR telegram's from the serial interface and parse it into CosemObject's and MbusObject's. Values are pushed to provided queue for asynchronous processing.
5698	Create a DSMR asyncio protocol for a given version.
5699	Output:
Create a DSMR asyncio protocol coroutine using a serial port.
5700	Creates a DSMR asyncio protocol coroutine using TCP connection.
5701	Add incoming data to buffer and process telegrams.
5702	Stop when connection is lost.
5703	Send off parsed telegram to handling callback.
5704	Parse telegram from string to dict.
5705	Get the version of the package from the given file.
5706	Ensure compatibility of Python versions specified in a list of range specifiers.
5707	Find all of the packages in the given directory.
5708	Create a command class with optional prerelease command and file handling.specs are used after build command runs.package data glob patterns are relative to package folder with __init__.py.data files need separate paths for nested folders in data_files.
5709	Return a command that calls the given function.
5710	Echoes a command before running it. Defaults to repo as cwd
5711	Return a Command that checks that certain files exist. Raises a ValueError if any of the files are missing.
5712	Wrap a setup command.
5713	Get a package_data and data_files handler command.
5714	Expand data file specs into valid data files metadata.
5715	Expand file patterns to a list of `package_data` paths.
5716	Compiles a glob pattern to a regular expression matcher with optional case-insensitive flag.
5717	Iterate over all the parts of a path.
Splits path recursively with os.path.split().
5718	Translate a glob PATTERN to a regular expression.
5719	Join translated glob pattern parts with special handling for '**' to match zero or more directories.
5720	Translate a glob pattern part to a regular expression.
5721	Sends DDL to truncate the specified `table` and executes the generated SQL statements.
5722	Send DDL to create the specified `table`
5723	Sends DDL to create the specified `table` indexes.
5724	Send DDL to create the specified `table` triggers
5725	Send DDL to create the specified `table` constraints
5726	Writes the contents of `table` from a `mysql2pgsql.lib.mysql_reader.MysqlReader` object to a file using the `FileObjFaker` class.
5727	Examines row data from MySQL and alters the values when necessary to be compatible with sending to PostgreSQL via the copy command.
5728	Write DDL of table indexes to the output file.
5729	Write DDL of table constraints to the output file.
5730	Write TRIGGERs existing on table to the output file.
5731	Return an approximate number of queued tasks in the queue.
5732	Enqueue task with specified data.
5733	Retrieves a task handler from the queue. If blocking is enabled, it waits until a task is available or times out.
5734	Extend this method to create a queue always applying an extra predicate.
5735	Serializes dates and datetimes to ISO strings.
5736	Closes the existing database connection and re-opens it.
5737	Execute a query and return the first row.
5738	Returns a new connection to the database.
5739	Run a set of InsertWorkers and record their performance.
5740	Returns an aggregator connection.
5741	Lookup the name associated with a given error number for development purposes.
5742	Returns the number of connections cached by the pool.
5743	OperationalError's are emitted by the _mysql library for almost every error code emitted by MySQL. We verify that the error is actually a connection error before terminating the connection and firing off a PoolConnectionException.
5744	Build a simple expression ready to be added onto another query.
5745	Build a SQL update query for a given table with specified fields and values.
5746	Connect to the database specified
5747	Initialize the required tables in the database
5748	Destroy the SQLStepQueue tables in the database
5749	Start a step.
5750	Stop a step by marking it as finished and calculating the duration.
5751	Convert start and stop times in raw steps from ISO formats to datetime objects.
5752	Disconnects from the websocket connection and joins the Thread.
5753	Reissues a reconnection by setting the reconnect_required event and clearing the connected event. Additionally, it closes the socket if it exists.
5754	Creates a websocket connection.
5755	Handles and passes received data to the appropriate handlers.
5756	Stops ping, pong, and connection timers.
5757	Sends a ping message to the API and starts pong timers.
5758	Checks if a Pong message was received. If not received in time, it issues a reconnect.
5759	Sends the given payload to the API via the websocket connection.
5760	Unpauses the connection and sends a message to the client to re-subscribe to all channels.
5761	Distributes system messages to the appropriate handler. System messages include everything that arrives as a dict, or a list containing a heartbeat.
5762	Handles INFO messages from the API, logs relevant information, and issues actions based on the message code.
5763	Handle Error messages and log them accordingly.
5764	Handles data messages by passing them up to the client.
5765	Resubscribes to all channels found in self.channel_configs, with an option to unsubscribe first.
5766	Handles authentication responses.
5767	Handles configuration messages.
5768	Updates the timestamp for the given channel id. Logs a warning if the channel is not present anymore.
5769	Reset the client by reconnecting and waiting for the connection to be established. Then, send configuration data to each channel.
5770	Return a queue containing all received candles data.
5771	Sends configuration to websocket server
5772	Subscribe to the passed pair's ticker channel.
5773	Unsubscribe to the passed pair's ticker channel.
5774	Subscribe to the passed pair's order book channel.
5775	Unsubscribe to the passed pair's order book channel.
5776	Subscribe to the passed pair's raw order book channel.
5777	Unsubscribe to the raw order book channel for a specified symbol pair.
5778	Subscribe to the passed pair's trades channel.
5779	Unsubscribe to the passed pair's trades channel.
5780	Subscribe to the passed pair's OHLC data channel.
5781	Unsubscribes from the passed pair's OHLC data channel.
5782	Authenticate with the Bitfinex API.
5783	Cancels one or multiple orders via Websocket.
5784	Internal callback for device command messages, parses source device from topic string and passes the information on to the registered device command callback
5785	Called when raw data is received.
5786	Parses source device from topic string and passes the information on to the registered device command callback
5787	Registers one or more new device types, each request can contain a maximum of 512KB.
5788	Publish an event to Watson IoT Platform.
5789	Update an existing device by providing the deviceUid, optional metadata, deviceInfo, and status. The method constructs a PUT request to the device's URL and returns a Device object if the request is successful. If the request fails, it raises an ApiException.
5790	Iterate through all Connectors with optional filters for status and connection time.
5791	List all device management extension packages
5792	Create a new device management extension package. In case of failure, it throws an APIException.
5793	Update a schema; throws APIException on failure.
5794	Disconnect the client from IBM Watson IoT Platform.
5795	Handle the response from the MQTT broker when the client connects.
5796	Subscribe to device event messages.
5797	Subscribe to device status messages.
5798	Subscribe to device command messages.
5799	Publish a command to a device.
5800	received unsupported message
5801	This internal callback processes device event messages, extracts event details from the topic, and invokes the registered device event callback if available. It logs debug information about the received event and handles exceptions by logging critical errors.
5802	Internal callback for device status messages, parses source device from topic string and passes the information on to the registered device status callback.
5803	Handles application command messages, parses the source application from the topic string, and passes the information on to the registered application status callback. Logs the received action and clientId, and handles exceptions by logging critical errors.
5804	Retrieves the last cached message for specified event from a specific device.
5805	Retrieves a list of the last cached message for all events from a specific device.
5806	Retrieve bulk devices. Accepts a list of parameters and throws an exception in case of failure.
5807	Initiates a device management request, such as reboot. In case of failure it throws APIException
5808	Get a device management request device status by requestId. If typeId and deviceId are provided, get the status for a specific device in that request.
5809	Force a flush of the index to storage.
5810	Return number of objects that intersect the given coordinates.
5811	Returns the k-nearest objects to the given coordinates.
5812	Returns the bounds of the index.
5813	Deletes items from the index with the given 'id' within the specified coordinates.
5814	Creates an index from a stream of data.
5815	Must be overridden. Must return a string with the loaded data
5816	Deletes the item from the container within the specified coordinates.
5817	Performs error checking for error calls
5818	Attempt an import of the specified application
5819	Initializes the Flask application with Common. Configures WhiteNoise for serving static files and sets up caching with a specified cache type. Adds before and after request callbacks to track processing time and add X-Powered-By header.
5820	Boots the Flask application using Flask's development server if debug is enabled, or Gunicorn with Meinheld worker class if not.
5821	For djangorestframework <=2.3.14.
5822	Crops an image from the centerpoint, adjusting the aspect ratio to match the specified width and height. The crop is centered on a user-defined pixel point (ppoi) within the original image.
5823	Crops an image to a specified width and height by first reducing its longest side and then centering on the Primary Point of Interest (PPOI). Returns a BytesIO instance of the cropped image.
5824	Return a BytesIO instance of image that fits in a bounding box.Bounding box dimensions are widthxheight.
5825	Return a BytesIO instance of `image` with inverted colors.
5826	Ensure data is prepped properly before handing off to ImageField.
5827	Process the field's placeholder image to ensure it is saved to the correct storage class and top-level folder specified by settings.
5828	Return field's value just before saving, updating the ppoi field.
5829	Updates the field's ppoi field, if defined, by retrieving the ppoi from the associated model instance's file attribute and setting it to the ppoi_field. If force=True, this method can be called to update the ppoi immediately before the model instance is saved.
5830	Handle data sent from MultiValueField forms that set ppoi values.
5831	Return a formfield with default settings and allow overrides.
5832	Prepare field for serialization.
5833	Discover versatileimagefield.py modules. Iterate over django.apps.get_app_configs() and discover versatileimagefield.py modules.
5834	Unregister the SizedImage subclass currently assigned to `attr_name`.
5835	Unregister a FilteredImage subclass currently assigned to attr_name. If not already registered, raises NotRegistered.
5836	Return the appropriate URL.

- If `self.name` is empty and a placeholder image name is defined, return the URL to the placeholder image.
- Otherwise, use the default behavior of the `ImageFieldFile` class.
5837	Build the filters and sizers for a field.
5838	Return the location where filtered images are stored.
5839	Return the location where sized images are stored.
5840	Return the location where filtered + sized images are stored.
5841	Deletes files in `root_folder` which match `regex` before file ext.
5842	Preprocess an image.API hook for image pre-processing.Calls any image format specific pre-processors (if defined).I.E. If image_format is 'JPEG', this method will look for a method named preprocess_JPEG, if found image will be passed to it.Subclasses should return a 2-tuple:[0]: A PIL Image instance.[1]: A dictionary of additional keyword arguments to be used when the instance is saved. If no additional keyword arguments, return an empty dict ({}).
5843	Receive a PIL Image instance of a GIF and return 2-tuple. One element is the original image and the other is a dictionary containing the transparency key if specified.
5844	Convert image to RGB and set save quality.
5845	Return a PIL Image instance stored at `path_to_image`.
5846	Save an image to self.storage at `save_path`.
5847	Return PPOI value as a string.
5848	Create a resized image.
5849	Render the widget as an HTML string. Overridden here to support Django < 1.11.
5850	Get the context to render this widget with.
5851	Build an attribute dictionary.
5852	Returns a modified path for the resized image based on the given width, height, and filename key.
5853	Return the 'filtered path'
5854	Validate a list of size keys.
5855	Build a URL from `image_key`.
5856	Retrieve a validated and prepped Rendition Key Set from settings.
5857	Takes a raw `Instruction` and translates it into a human-readable text representation. As of writing, the text representation for WASM is not yet standardized, so it emits a generic format.
5858	Function which takes a `FunctionBody` and optionally a `FunctionType`, yielding the string representation of the function line by line. The function type is required for formatting function parameter and return value information. If `format_locals` is True and `func_body.locals` exists, it yields the locals information. The `format_instruction` function is used to format each instruction.
5859	Decode raw bytecode, yielding `Instruction`s.
5860	Decodes raw WASM modules, yielding `ModuleFragment`s.
5861	Deprecates a function, printing a warning on the first usage.
5862	Connect to the server.
5863	Close the connection
5864	Parse a response from the AGI and parse it.
5865	Handle an incoming FastAGI request asynchronously.
5866	Parse AGI results using Regular expression.
5867	Check the AGI code and return a dict to help on error handling.
5868	Reset all counters and optionally set a specific uid for unit testing.
5869	Mostly used for debugging
5870	Returns data from a package directory.
5871	```python
Get primary key properties for a SQLAlchemy model.
```
5872	Deserialize a serialized value to a model instance. If the parent schema is transient, create a new (transient) instance. Otherwise, attempt to find an existing instance in the database.
5873	Retrieve the related object from an existing instance in the DB.
5874	Updates declared fields with fields converted from the SQLAlchemy model passed as the `model` class Meta option.
5875	Deserialize data to internal representation.
5876	Split serialized attrs to ensure association proxies are passed separately. This is necessary for Python < 3.6.0.
5877	Deletes old stellar tables that are not used anymore and logs the deletion.
5878	Takes a snapshot of the database
5879	Returns a list of snapshots.
5880	Restores the database from a snapshot.
5881	Removes a snapshot
5882	Renames a snapshot.
5883	Replace a snapshot by removing the existing one and creating a new one with the same name.
5884	Updates indexes after each epoch for shuffling
5885	Defines the default function for cleaning text.
5886	Apply function to list of elements.
5887	Generate a function that will clean and tokenize text, optionally appending start and end indicators.
5888	Combines the cleaner and tokenizer to process the input text.
5889	Apply cleaner -> tokenizer to a list of texts in parallel.
5890	Analyze document length statistics for padding strategy
5891	Return a pandas DataFrame with token counts sorted in descending order.
5892	Map the parameter type to the corresponding data type, handling special cases for 'list' and 'array' types. If a type doesn't map, assume 'str'.
5893	Parse the conduit.query json dict response and return a dict Resource can understand.
5894	The inverse of this bidict (See also :attr:`inv`)
5895	Update items, rolling back on failure.
5896	A shallow copy.
5897	A shallow copy of this ordered bidict.
5898	Return True if this bidict is order-sensitive equal to the other.
5899	Yield the inverse items of the provided object. If the object has a `__inverted__` attribute, return the result of calling it. Otherwise, return an iterator over the items in `arg`, inverting each item on the fly.
5900	Remove all items.
5901	Move an existing key to the beginning or end of this ordered bidict. The item is moved to the end if *last* is True, else to the beginning.
5902	Create a new temporary file and write some initial text to it.
5903	Get a list of contacts from one or more address books.
5904	Merge the parsed arguments from argparse into the config object.
5905	Loads all address books with the given names from the config.
5906	Prepare the search query string from the given command line args.
5907	Create a new contact.
5908	Prints a sorted list of birthday contacts, either in a human-readable or machine-readable format.
5909	Print a phone application friendly contact table.
5910	Print a user friendly contacts table if the vcard_list is not empty. If parsable is True, the output will be in a machine readable format. If parsable is False, the output will be in a user friendly format.
5911	Modify a contact in an external editor.
5912	Remove a contact from the addressbook.
5913	Open the vcard file for a contact in an external editor.
5914	Merge two contacts into one.
5915	Copy or move a contact to a different address book. Depending on the action, it either copies or moves a contact from one address book to another. If the target address book already contains the contact, it provides options to overwrite, merge, or cancel the operation.
5916	Find the name of the action for the supplied alias. If no action is associated with the given alias, None is returned.
5917	Helper function to convert values stored as strings "yes" or "no" to boolean values, setting default for absent keys.
5918	Use this to create a new and empty contact.
5919	Creates a new contact from an existing .vcf file.
5920	Use this if you want to create a new contact from user input.
5921	Clone an existing contact and replace its data with new user input in one step.
5922	Get some part of the "N" entry in the vCard as a list.
5923	Add categories to the vcard
5924	Parse type value of phone numbers, email and post addresses.
5925	Converts a list of strings and nested lists into a single string, recursively joining items with a specified delimiter.
5926	Converts a string to a date object.
5927	Calculate the minimum length of initial substrings of `uid1` and `uid2` for them to be different.
5928	Search in all fields for contacts matching query
5929	Search for contacts matching a query in the name field.
5930	Search for contacts with a matching uid.
5931	Search this address book for contacts matching the query. The method can be one of "all", "name", and "uid".
5932	Create a dictionary of shortend UIDs for all contacts.
5933	Get the shortend UID for the given UID.
5934	Find all vcard files inside this address book. If a search string is given, only files whose contents match that string will be returned.
5935	Load all vcard files in this address book from disk, filtering by a regular expression if provided.
5936	Method for retrieving a specific address book by its name.
5937	Initialize the dictionary of architectures for assembling via keystone
5938	Initialize the dictionary of architectures for disassembling via capstone
5939	An `inspect.getargspec` with a relaxed sanity check to support Cython.
5940	Parse given list of arguments using given parser, calls the relevant function and prints the result.
5941	Prompts user for input and correctly handles prompt message encoding.
5942	Encodes given value so it can be written to given file object. Value may be Unicode, binary string or any other data type. The exact behavior depends on the Python version.
5943	Adds types, actions, etc. to given argument specification. For example, ``default=3`` implies ``type=int``.
5944	Adds given functions as commands to given parser.
5945	Sets a given string as the command name instead of the function name. The string is used verbatim without further processing. The resulting command will be available only as the specified name. To add aliases without renaming the command, use :func:`aliases`.
5946	Declares an argument for a given function. Does not register the function or modify it in any way. Matches the signature of :meth:`argparse.ArgumentParser.add_argument`. Used in combination with :func:`expects_obj` or ordinary function signatures to add details that cannot be expressed otherwise.
5947	A shortcut for typical confirmation prompt.
5948	Copy the Query object, optionally replacing the filters, order_by, or limit information on the copy. This is mostly an internal detail that you can ignore.
5949	limits the entities returned to those that include the provided pattern.Prefix matching must be enabled column definition.Wildcard characters: *, *, *,  match 0 or 1 of any character, match 0 or more of any character, match 1 or more of any character, match exactly 1 of any character.Patterns that don't start at the beginning of a string should be prefixed with wildcard characters.
5950	This method executes a query and returns a key where the ZSET of results will be stored for pagination and further operations. It sets an expiration time for the key based on the provided timeout. The method checks for the presence of filter or order criteria and raises a QueryError if not provided. If the timeout is less than 1, it raises a QueryError.
5951	Returns only the first result from the query, if any.
5952	Will delete the entities that match the query.
5953	This function handles on_delete semantics for OneToMany columns, addressing the complexities of using 'cascade'. It manages deletion and setting default values based on defined actions in MODELS_REFERENCED.
5954	Performs the actual prefix, suffix, and pattern match operations.
5955	Estimates the total work necessary to calculate the prefix match over the given index with the provided prefix.
5956	Search for model ids that match the provided filters.
5957	Returns the count of items that match the provided filters.
5958	Tries to get the _conn attribute from a model, or the global default connection using other methods.
5959	This function generates a full-text index key for a given input value. It first ensures the value is a string, then splits it into words, strips punctuation, and creates a sorted list of unique words. For non-unicode strings on Python 2, it encodes the words in UTF-8 before returning.
5960	Refresh indices of all entities in a provided model. This utility function is useful for reindexing after adding a new index on a column. It iterates over entities in blocks, commits the updated indices, and yields the reindexing progress.
5961	Clean out old index data that was accidentally left during item deletion in rom versions <= 0.27.0. You should run this after you have upgraded all of your clients to version 0.28.0 or later.
5962	Adds an entity to the session.
5963	Fetches an entity from the session based on primary key.
5964	Write data to Redis in Lua script format. This is an internal detail, and should not be called directly.
5965	Saves the current entity to Redis. Will only save changed data by default, but you can force a full save by passing ``full=True``. If the underlying entity was deleted and you want to re-save the entity, you can pass ``force=True`` to force a full re-save of the entity.
5966	Deletes the entity immediately and handles associated operations like on-delete hooks and foreign key references.
5967	Fetch one or more entities of this type from the session or Redis.
5968	Attach a reducer function to a given type in the dispatch table.
5969	Construct or retrieve a semaphore with the given name. If value is None, try to retrieve an existing named semaphore. Else create a new semaphore with the given value.
5970	Return the number of CPUs the current process can use. It accounts for the number of CPUs in the system, CPU affinity settings, CFS scheduler CPU bandwidth limit, and the value of the LOKY_MAX_CPU_COUNT environment variable. The returned number is the minimum of these constraints and is always larger or equal to 1.
5971	Safely send back the given result or exception.
5972	Evaluates calls from call_queue and places the results in result_queue. This worker is run in a separate process.
5973	Fills `call_queue` with `_CallItems` from `pending_work_items` based on `work_ids`.
5974	Ensures all workers and management thread are running.
5975	Wrap non-picklable object to use cloudpickle to serialize them.
5976	Spawn a server process for this manager object
5977	Return a wrapper for an fd.
5978	Return the current ReusableExecutor instance. Start a new instance if it has not been started already or if the previous instance was left in a broken state. If the previous instance does not have the requested number of workers, the executor is dynamically resized to adjust the number of workers prior to returning. Reusing a singleton instance spares the overhead of starting new worker processes and importing common Python packages each time.
5979	Wait for the cache to be empty before resizing the pool.
5980	Return info about parent needed by child to unpickle process object
5981	Try to get current process ready to unpickle process object
5982	Closes all the file descriptors except those in keep_fds.
5983	Terminate a process and its descendants.
5984	Recursively kill the descendants of a process before killing it.
5985	Returns a formatted string with the exitcodes of terminated workers. Waits up to 0.25 seconds if necessary for the system to correctly set the exitcode of a terminated worker.
5986	Format a list of exit codes with their corresponding signal names if available.
5987	Run semaphore tracker.
5988	Make sure that semaphore tracker process is running. This can be run from any process.
5989	A simple event processor that prints out events.
5990	Program counter.
5991	Emulates the interactive Python interpreter and provides a backward-compatible interface to the InteractiveConsole class.
5992	Split a command line's arguments in a shell-like manner and return a list of lists. Use ';;' with white space to indicate separate commands.
5993	Return a stack of frames which the debugger will use for in showing backtraces and in frame switching.
5994	Run each function in `hooks' with args.
5995	Remove memory of state variables set in the command processor
5996	Check if the argument can be evaluated as an integer and return the value if possible, otherwise return None.
5997	Process the input argument to ensure it is a valid integer within a specified range, using default value if necessary.
5998	Handle debugger commands.
5999	Arrange for a debugger command file to be read in the process-command loop.
6000	Find the next token in str string from start_pos, we return the token and the next blank position after the token or str.size if this is the last token. Tokens are delimited by white space.
6001	Common routine for reporting debugger error messages.
6002	Read a command from the input stream and handle verbosity.
6003	Closes both input and output.
6004	Disassemble a code object.
6005	Disassemble byte string of code. If end_line is negative, it counts the number of statement linestarts to use.
6006	Return a count of the number of frames
6007	Check if the frame's previous frame is looking at a call function and return its name if so, otherwise return None.
6008	Print count entries of the stack trace
6009	Find subcmd in self.subcmds
6010	Show short help for a subcommand.
6011	Add a subcommand to the available subcommands for this object and associate it with a callback.
6012	Run subcmd_name with args using obj for the environent
6013	Enter the debugger.
6014	Show short help for all commands in a specified category.
6015	Run the code and print the current line number in the source file
6016	Find the first frame that is a debugged frame.
6017	Maps thread names to their corresponding thread IDs.
6018	Return arg if is int otherwise use default.
6019	Return True if arg is 'on' or 1, and False if arg is 'off' or 0. Any other value raises ValueError.
6020	Set a Boolean-valued debugger setting.
6021	Set an integer-valued debugger setting for a given object with optional value range validation.
6022	Show a boolean-valued debugger setting.
6023	Generic subcommand integer value display
6024	Generic subcommand value display
6025	Returns True if the given line is a def statement.
6026	Check if the current line is a class definition statement.
6027	quit command when several threads are involved
6028	Check if the current terminal environment variable is one of the specified values that should not have a default background.
6029	Given R G B values in hex, determines if the color is dark
6030	Return a tuple containing the name, filename, and first line number of the given frame's code.
6031	Lists all display items; returns 0 if none.
6032	Displays active items for a given frame
6033	Format display item
6034	Read one message unit. It's possible however that more than one message will be set in a receive, so we will have to buffer that for the next read. EOFError will be raised on EOF.
6035	Set breakpoint at current location, or a specified frame.
6036	Error message when subcommand asked for but doesn't exist.
6037	Run a frame command This routine is a little complex because we allow a number parameter variations.
6038	Try to pretty print a simple case where a list is not nested.Return True if we can do it and False if not.
6039	Find the corresponding signal name for `num`. Return `None` if `num` is invalid.
6040	Find the corresponding signal number for 'name'. Return None if 'name' is invalid.
6041	Return a canonical signal name for a given signal name or signal number. If name_num is an invalid signal number or not a number, return None. If it is a valid signal name or number, return the canonical representation of the signal name.
6042	A replacement for signal.signal which chains the signal behind the debugger's handler
6043	Check to see if any of the signal handlers we are interested in have changed or if they are not initially set. If they are not correct, adjust them.
6044	Print information about a signal.
6045	Delegate the actions specified in 'arg' to another method.
6046	Set whether to print or not when this signal is caught.
6047	This method is called when a signal is received. It handles the signal based on the specified options such as printing the method, printing the stack, stopping the program, and passing the signal to the program.
6048	Given a file name, extract the most likely module name.
6049	Return a full pathname for filename if we can find one. path is a list of directories to prepend to filename. If no file is found we'll return None
6050	Do a shell-like path lookup for py_script and return the results. If we can't find anything return py_script
6051	Get a list of Python file names in the directory of the caller's script without the path and trailing ".py"
6052	used to write to a debugger that is connected to this server; `str' written will have a newline added to it
6053	Execution status of the program. Check if the program is running and provide details about the execution status.
6054	List commands arranged in an aligned columns
6055	Enter debugger read loop after your program has crashed.
6056	Closes both socket and server connection.
6057	Writes a message to the debugger without adding a newline and handles large buffers by splitting them into chunks.
6058	Complete an arbitrary expression.
6059	Invoke a debugger command from inside a python shell called inside the debugger.
6060	Add `frame_or_fn` to the list of functions that are not to be debugged
6061	Converts a filename to its canonical representation, ensuring it is fully resolved and handles special cases where filenames are enclosed in angle brackets.
6062	Return filename or the basename of that depending on the basename setting.
6063	Return True if debugging is in progress.
6064	Does the magic to determine if we stop here and run a command processor or not. If so, return True and set self.stop_reason; if not, return False.
6065	Sets to stop on the next event that happens in frame 'frame'.
6066	A mini stack trace routine for threads.
6067	Get file information
6068	Check whether to break execution based on function name.
6069	remove breakpoint `bp`
6070	Remove a breakpoint given its breakpoint number.
6071	Enable or disable all breakpoints.
6072	Enables or disables a breakpoint given its breakpoint number.
6073	Removes all breakpoints at a given filename and line number. Returns a list of breakpoint numbers deleted.
6074	Use this to set what file to read from.
6075	Read a line of input and return it, stripping the newline character at the end. Raises EOFError if no input is available.
6076	Confirm a dangerous action and wait for user confirmation.
6077	Remove whitespace from input string and add token.
6078	Tokenize the input string as a number
6079	Wrap a `sqlalchemy.orm.query.Query` object into a `concurrent.futures.Future` so that it can be yielded.
6080	Restore an original login session, checking the signed session.
6081	Load and return the function specified by `path` after ensuring it is a valid module and attribute.
6082	Iterate over documents in a Luminoso project, optionally including additional fields and showing a progress bar.
6083	Handle arguments for the 'lumi-download' command.
6084	Read a JSON or CSV file and convert it into a JSON stream, which will be saved in an anonymous temp file.
6085	Deduce the format of a file (JSON or CSV) and handle accordingly
6086	Normalizes data for upload to the Luminoso Analytics system. Current implementation only normalizes dates. If date_format is not specified, or if there's no date in a particular doc, the doc is yielded unchanged.
6087	Convert a date in a given format to epoch time.
6088	Detect the encoding of a file using ftfy's encoding detector based on a sample of its first megabyte.
6089	Load a JSON stream and return a generator, yielding one object at a time.
6090	Convert a file in some other encoding into a temporary file that's in UTF-8.
6091	Open a CSV file using Python 2's CSV module, handling UTF-16 encoding by transcoding it to UTF-8 if necessary.
6092	Given a constructed CSV reader object, a header row, and an encoding function, yield rows as dictionaries with specified processing for text, title, date, and subsets.
6093	Convert a file to a JSON stream as a script.
6094	Returns an object that makes requests to the API, authenticated with a saved or specified long-lived token, at URLs beginning with `url`.
6095	Stores a long-lived API token to a local file, using an optional domain and token file.
6096	Make a request via the `requests` module. If the result has an HTTP error status, convert that to a Python exception.
6097	Make a DELETE request to the given path and return the JSON-decoded result.
6098	A convenience method designed to inform you when a project build has completed. It polls the API every `interval` seconds until there is no build running and returns the "last_build_info" field of the project record if the build succeeded. If the build fails, it raises a LuminosoError with the field as its message. If no `path` is specified, it uses the project's URL; otherwise, it uses the specified path.
6099	Returns the root URL for a given URL, ensuring it starts with a full path.
6100	Obtain the user's long-lived API token and save it in a local file. If the user has no long-lived API token, one will be created. Returns the token that was saved.
6101	This interface is used to make a request of the specified type and expect a JSON object in response, handling errors and returning the result.
6102	Make a POST request to the given path, with `data` in its body. Return the JSON-decoded result.
6103	Return a new LuminosoClient for a subpath of this one.
6104	Get the ID of the default account for accessing projects.
6105	Get the documentation that the server sends for the API.
6106	Wait for an asynchronous task to finish.
6107	Get the raw text of a response. This is only generally useful for specific URLs, such as documentation.
6108	Print a JSON list of JSON objects in CSV format.
6109	Read parameters from input file, -j, and -p arguments, in that order.
6110	Limit a document to just the three fields we should upload.
6111	Given an iterator of documents, upload them as a Luminoso project.
6112	Given a LuminosoClient pointing to the root of the API and a filename to read JSON lines from, create a project from the documents in that file.
6113	Handle arguments for the 'lumi-upload' command.
6114	Upload a JSON stream to a Luminoso project.
6115	Upload a file to Luminoso with the given account and project name. Given a file containing JSON, JSON stream, or CSV data, this verifies that we can successfully convert it to a JSON stream, then uploads that JSON stream.
6116	Handle command line arguments, to upload a file to a Luminoso project as a script.
6117	Obtain a short-lived token using a username and password, and use that token to create an auth object.
6118	Set http session.
6119	Login to enedis.
6120	Get data for a specified resource ID and date range.
6121	Get the latest data from Enedis.
6122	Ensure the view is loaded and initialized on first access.
6123	Initialize the view upon first load, which can also be determined by session, group, etc. Set the view properties such as company, request, and handler.
6124	Render the view for a GET request, with caching for websockets.
6125	When enaml.js sends a message, this method decodes the message, retrieves the owner ID, and gets the server-side representation of the node. It then handles the event or update accordingly.
6126	Updates the menus when pages change by organizing links into the appropriate menu categories.
6127	Generate the handlers for this site
6128	Handle an event from JavaScript, lookup the corresponding Enaml node, and trigger an action based on the event type.
6129	When an event from enaml occurs, send the updated value via websocket to the client's browser for UI synchronization.
6130	Create the toolkit widget for the proxy object.
6131	Initialize the state of the toolkit widget, setting various attributes and options based on the provided declaration.
6132	A reimplemented destructor. This destructor will clear the reference to the toolkit widget and set its parent to None.
6133	Handles the child added event from the declaration. Inserts the child toolkit widget in the correct position. Subclasses can reimplement this method for more control.
6134	Handle the child removed event from the declaration. This handler will unparent the child toolkit widget. Subclasses which need more control should reimplement this method.
6135	Get the child toolkit widgets for this object.
6136	Set attribute for a widget based on the given value. If the value is True, the attribute is set to the attribute name itself. If the value is False, the attribute is deleted. Otherwise, the attribute is set to the string representation of the value.
6137	Update the proxy widget when the Widget data changes.
6138	If a change occurs when we have a websocket connection active, notify the websocket client of the change.
6139	Find nodes matching the given xpath query.
6140	Prepare for rendering
6141	Initialize the widget with the source if available, otherwise call the superclass method.
6142	Sets the source by parsing the HTML and inserting it into the component.
6143	If the mode changes, refresh the items.
6144	Handles updates to the 'objects' list of the Include, unparenting removed objects and reparenting added objects, and destroys old objects if necessary.
6145	When the children of a block change, update the referenced block accordingly.
6146	Read the contents of a file located relative to setup.py.
6147	Print an error message to stderr and exit with the given status code.
6148	Print any parsing error and exit with status -1
6149	Gets a product from the Menu by name, ignoring case sensitivity, and returns the matching item object or raises a StopIteration exception if no match is found.
6150	Clear out the current session on the remote and setup a new one.
6151	Clears out the current store and gets a cookie. Sets the cross-site request forgery token for each subsequent request. Returns a response with the cleared store.
6152	Search for Dominos pizza stores using a search term.
6153	Set the delivery system for a store with a given postcode and fulfilment method.
6154	Retrieve the menu from the selected store.
6155	Add an item to the current basket.
6156	Add a pizza to the current basket.
6157	Add a side to the current basket with a specified quantity.
6158	Remove an item from the current basket.
6159	Method to select and set the payment method for a purchase.
6160	Proceed with payment using the payment method selected earlier.
6161	HTTP GET request to the Dominos UK API with the given parameters for the current session.
6162	HTTP POST request to the Dominos UK API with the given parameters for the current session.
6163	Make a HTTP request to the Dominos UK API with the given parameters for the current session.
6164	Adds an item to the menu before the exit item. Adjusts screen size and redraws if necessary.
6165	Add the exit item if necessary. Used to make sure there aren't multiple exit items Returns True if item needed to be added, False otherwise
6166	Redraws the menu and refreshes the screen. Should be called whenever something changes that needs to be redrawn.
6167	Gets the next single character and decides what to do with it
6168	Selects the current item, runs it, and handles cleanup and return value.
6169	Take an old-style menuData dictionary and return a CursesMenu.
6170	Get the top or flop N results based on a column value for each specified group columns
6171	Get the top or flop N results based on a function and a column value that aggregates the input. The result is composed by all the original lines including only lines corresponding to the top groups.
6172	Convert string column into datetime column
6173	Convert datetime column into string column
6174	Convert the format of a datecolumn in a dataframe.
6175	Convert column's type into specified type.
6176	Create rank columns based on numeric values to be ranked.
6177	Create a waterfall chart by computing variations and variation rates for each line, handling optional grouping and filtering.
6178	Basic mathematical operation to apply operator on `column_1` and `column_2`.
6179	Round each value of a column
6180	Get the absolute numeric value of each element of a column
6181	### Output:
Pivot the data. Reverse operation of melting.
6182	Pivot a dataframe by grouping variables.
6183	Aggregate values by groups based on specified columns and aggregation functions.
6184	DEPRECATED - please use `compute_cumsum` instead
6185	Add missing row to a DataFrame based on a reference column
6186	Decorator to catch an exception and don't raise it. Logs information if a decorator failed.
6187	Decorate a function to log a message before its execution.
6188	Decorator to log the execution time of a function
6189	Decorator to log the shapes of input and output dataframes.
6190	Replace data values and column names according to the locale
6191	Compute cumulative sum for specified columns in a DataFrame, grouped by specified ID and reference columns. Optionally, specify columns to keep in the output.
6192	Combine columns for aggregation to reproduce "All" category
6193	Get the value of a function's parameter based on its signature and the call's args and kwargs.
6194	Remove old entries from the cache
6195	Creates aggregates following a given hierarchy.
6196	Keep the row of the data corresponding to the maximal value in a column, optionally grouped by one or more columns.
6197	Keep the row of the data corresponding to the minimal value in a column, optionally grouped by one or more columns.
6198	Fill NaN values in a column with a given value or from another column
6199	Add a human-readable offset to `dateobj` and return the corresponding date. Supports "w", "week", "weeks", "m", "month", "months", "y", "year", and "years" shortcuts.
6200	add `nb_months` to `datetime.date`对象，在月份不存在时返回该月的最后一天。
6201	Add a specified number of years to a given date. If the resulting date doesn't exist (e.g., February 29 on a non-leap year), return the last day of the landing month.
6202	Parses a date string and returns the corresponding date object. Supports offset notation and symbolic names like `TODAY`, `YESTERDAY`, and `TOMORROW`.
6203	Filter a DataFrame by a date column, specifying either a range (`start` to `stop`) or an exact date (`atdate`). Date ranges are inclusive of the start and exclusive of the stop. Supports various date formats and symbolic values like 'TODAY', 'YESTERDAY', and 'TOMORROW'. Additionally, offset syntax is supported.
6204	Add a column to the dataframe according to the groupby logic on group_cols
6205	Optimize by SGD, AdaGrad, or AdaDelta.
6206	Return updates in the training.
6207	Return a list of parameters to be optimized, excluding any that are fixed.
6208	Return updates from optimization.
6209	Compute first glimpse position using down-sampled image.
6210	Prepare neural network parameters and architecture.
6211	Builds the computation graph by processing the input through an encoder, decoder, and classifier, computing various costs, and returning the final cost.
6212	Processes all data in the training, validation, and test sets with the given function.
6213	Makes targets one-hot vectors.
6214	Print dataset statistics.
6215	Train over mini-batches and evaluate periodically.
6216	Sample outputs from a language model.
6217	Compute the alignment weights based on the previous state.
6218	Compute the context vector with soft attention.
6219	Concatenates multiple variables along a specified axis
6220	Pads sequences in the train, valid, and test sets to the given length on the specified side.
6221	RMSPROP optimization core.
6222	Report elapsed time in minutes.
6223	Run the model with validation data and return costs.
6224	This function will be called after each iteration, incrementing a counter and performing calculations based on the data split provided. It aggregates values from a trainer object, compares them, reports the results, and saves a checkpoint if the new results are better.
6225	Create inner loop variables.
6226	Run an internal scan step with dummy input variables and return the outputs.
6227	Given a list of parameters and their corresponding gradients, the momentum_core function performs an update using the momentum stochastic gradient descent (SGD) algorithm. It stores the updates and free parameters in lists and returns them.
6228	Execute `then_branch` when training.
6229	Skip N batches in the training.
6230	Load parameters for the training. This method can load free parameters and resume the training progress.
6231	Train the model by running training, validation, and testing epochs.
6232	Run one training iteration.
6233	Run one valid iteration and return true if to continue training.
6234	Report the scores and record them in the log.
6235	Get specified split of data.
6236	Apply a function to tensors.
6237	Report usage of training parameters.
6238	Compute the variance of a tensor along a specified dimension.
6239	Create vars from data for a given dataset and split.
6240	Returns a shared theano scalar value based on the provided type and value.
6241	Stacks encoding layers and extends the encoding layers list.
6242	Stack decoding layers.
6243	Encode given input using a neural network if it hasn't been initialized yet.
6244	Decode given representation. If `rep_dim` is not set, raise an exception. If `decoding_network` is not initialized, create and configure it with the given layers. Finally, compute and return the decoded output using the decoding network.
6245	Create a normalized 2D Gaussian kernel with a given dimension and standard deviation.
6246	Registers the given layer for training while not stacking its output.
6247	Monitoring the outputs of each layer to troubleshoot convergence problems.
6248	Return all parameters.
6249	Sets up variables. If an input tensor is provided, it converts it to a variable; otherwise, it creates a matrix variable.
6250	Return network output
6251	Save parameters to file.
6252	Load parameters from file, supporting different formats like `.gz`, `.npz`, and uncompressed `.gz`.
6253	Print network statistics.
6254	Register parameters.
6255	Register updates that will be executed in each iteration.
6256	Register updates that will only be executed in training phase.
6257	Registers monitors, which should be a tuple of name and Theano variable.
6258	Calculate the L2 norm of multiple tensors.
6259	dumps one element to file_obj, a file opened in write mode.
6260	load contents from file_obj, returning a generator that yields one element at a time
6261	Load parameters to the block.
6262	Create |oauth2| request elements based on the specified request type and credentials.
6263	Decode state and return param
6264	Override this method to fix Facebook's naming deviation. Converts "expires" to "expires_in" and handles token type conversion.
6265	Removes client_id and client_secret from request parameters if the request type is an access token request.
6266	Login handler that manages both GET and POST requests to handle OpenID login, leveraging the WerkzeugAdapter and Authomatic library, and renders a template or returns a response based on the login result.
6267	Replaces all values that are single-item iterables with the value of its index 0.
6268	Converts list of tuples to dictionary with duplicate keys converted to lists
6269	Parses response body from JSON, XML or query string.
6270	Returns a provider class based on the given class name or subclass of :class:`authomatic.providers.BaseProvider`.
6271	Creates the value for ``Set-Cookie`` HTTP header.
6272	Adds the session cookie to headers and validates its length.
6273	Extracts the session data from cookie.
6274	Gets session data lazily.
6275	Creates signature for the session.
6276	Converts the value to a signed string with timestamp
6277	Check if credentials are valid, considering the expiration time.
6278	Returns ``True`` if credentials expire sooner than specified.
6279	Converts the credentials to a percent encoded string to be stored for later use.
6280	Return true if string is binary data.
6281	Return the whole response content.
6282	Create OAuth1 request elements.
6283	Update user information with email if available.
6284	Decorator for Flask view functions.
6285	Launches the OpenID authentication procedure.
6286	Generate session key string using settings prefix, name, and provided key.
6287	Saves a value to session.
6288	Generates CSRF token.
6289	Logs a message with a pre-formatted prefix.
6290	Checks whether an HTTP status code falls within a specified category.
6291	Splits given url to url base and params converted to list of tuples.
6292	This function is the decorator which is used to wrap a Sanic route with. It allows specifying various cors options to control which origins are allowed, methods, headers, and credentials.
6293	Evaluates CORS options and modifies the response object.
6294	Returns the dictionary of CORS specific app configurations.
6295	A more flexible str function which intelligently handles stringifying strings, lists and other iterables. The results are lexographically sorted to ensure generated responses are consistent when iterables such as Set are used.
6296	Wraps scalars or string types as a list, or returns the iterable instance.
6297	Comparison of two floating-point numbers for approximate equality, with options to specify relative and absolute tolerances.
6298	Decorator to mark a function as deprecated and issue a warning when called.
6299	Deserialize a bytestring into an audio segment.
6300	Returns an AudioSegment object from the given file based on its file extension. If the extension is wrong, this will throw some sort of error.
6301	Convert a numpy array into an AudioSegment.
6302	Executes a Sox command in a platform-independent manner. `cmd` must be a format string that includes {inputfile} and {outputfile}.
6303	Returns a copy of this AudioSegment, but whose silence has been removed. This method requires the program 'sox' to be installed and may add up for large numbers of AudioSegment objects due to IO operations.
6304	Transforms the indicated slice of the AudioSegment into the frequency domain and returns the bins and the values.
6305	Yields self's data in chunks of frame_duration_ms.
6306	Normalize the values in the AudioSegment so that its `spl` property gives `db`.
6307	Concatenate other AudioSegment objects onto this one and return the result as a new AudioSegment object.
6308	Resample the audio data and return a new AudioSegment with the specified characteristics.
6309	Serializes the object's state into a bytestring usingpickle, handling nested serialization for the 'seg' attribute.
6310	Does a series of FFTs from `start_s` or `start_sample` for `duration_s` or `num_samples`. Effectively, transforms a slice of the AudioSegment into the frequency domain across different time bins.
6311	Returns a front ID which is the id of the offset front that contains the most overlap with offsets that correspond to the given onset front ID.
6312	Returns the offset_front_id which corresponds to the offset front which occurs first entirely after the given onset sample_idx.
6313	Get the ID corresponding to the offset which occurs first after the given onset_front_id. By `first` I mean the front which contains the offset which is closest to the latest point in the onset front.
6314	Find the offset front ID with the most matching offsets from a given onset front ID.
6315	Gets an onset_front and an offset_front such that they both occupy at least some of the same frequency channels, then returns the portion of each that overlaps with the other.
6316	Updates an segmentation mask such that the input is updated by segmenting between onset_front_id and offset_front_id. Returns the updated mask, onset_fronts, offset_fronts, and whether the onset channel went to completion.
6317	Returns the front ID found in `front` at the given `index`. If the id is 0, returns -1.
6318	Yields one onset front ID at a time until they are gone. All the onset fronts from a frequency channel are yielded, then all of the next channel's, etc., though one at a time.
6319	Gets the offsets that occur as close as possible to the onsets in the given onset-front.
6320	Removes all points in the fronts that overlap with the segmentation mask.
6321	Removes all fronts from `fronts` which are strictly smaller than `size` consecutive frequencies in length.
6322	Breaks up onset fronts in a signal if the signals between consecutive frequency channels are not similar enough according to a DSP correlation algorithm. Removes onset fronts that are less than 3 channels wide.
6323	Merge all adjacent segments in a mask.
6324	Returns a list of segmentation masks each of the same dimension as the input one, but where they each have exactly one segment in them and all other samples in them are zeroed. Only bothers to return segments that are larger in total area than `threshold * mask.size`.
6325	Takes the given `mask` and `stft`, which must be matrices of shape `frequencies, times` and downsamples one of them into the other one's times, so that the time dimensions are equal. Leaves the frequency dimension untouched.
6326	Worker for the ASA algorithm's multiprocessing step. Converts masks to binary, multiplies them with STFTs, and puts the results in a queue.
6327	Does a bandpass filter over the given data using a Butterworth filter.
6328	Does a lowpass filter over the given data.
6329	Separates the outcome feature from the data and creates the one-hot vector for each row.
6330	Update data set by standardizing continuous features and expanding categorical features.
6331	Used to check whether the two edge lists have the same edges when elements are neither hashable nor sortable.
6332	Given a list of audit files, rank them using the `measurer` and return the features that never deviate more than `similarity_bound` across repairs.
6333	Loads a confusion matrix in a two-level dictionary format.
6334	Separates the outcome feature from the data.
6335	Checks for alternative index-url in pip.conf and updates the API URL accordingly.
6336	Attempt to detect requirements files in the current working directory
6337	Resolve all streams on the network.
6338	Resolve all streams with a specific value for a given property.
6339	Resolve all streams that match a given predicate. Advanced query that allows to impose more conditions on the retrieved streams; the given string is an XPath 1.0 predicate for the <description> node (omitting the surrounding []'s).
6340	Error handler function. Translates an error code into an exception.
6341	Pushes a sample into the outlet, ensuring the data length matches the channel count and handling different data formats.
6342	Push a list of samples into the outlet, handling different data formats and updating the state accordingly.
6343	Retrieve the complete information of a given stream, including its extended description. This can be called at any point in the stream's lifecycle and may raise a TimeoutError or LostError if the operation times out or the stream source is lost.
6344	Subscribe to the data stream.
6345	Retrieve an estimated time correction offset for the given stream.
6346	Gets a child XML element with the specified name.
6347	Get the next sibling in the children list of the parent node. If a name is provided, the next sibling with the given name is returned.
6348	Returns the previous sibling XMLElement in the parent node's children list. If a name is provided, returns the previous sibling with the given name.
6349	Set the element's name. Returns False if the node is empty.
6350	Set the element s value. Returns False if the node is empty.
6351	Appends a child element with the specified name.
6352	Prepends a child element with the specified name.
6353	Append a copy of the specified element as a child.
6354	Prepend a copy of the specified element as a child.
6355	Removes a given child element from the current element, specified either by an XMLElement object or by name.
6356	Obtain the set of currently present streams on the network. Returns a list of matching StreamInfo objects (with empty desc field), any of which can subsequently be used to open an inlet.
6357	Pair a word with its associated tokens and display the results.
6358	Shows autocomplete results for a given token
6359	Compute edge ngrams of a token from a minimum length, excluding the token itself.
6360	A function that allows iterators to return either an item or an iterator of items.
6361	Customized version of imap_unordered with direct sending of chunks to func.
6362	Generate fuzzy neighbors for a given word by inverting, substituting, inserting, and optionally removing characters.
6363	Compute fuzzy extensions of word.
6364	Compute fuzzy extensions of word that exist in index.
6365	Try to extract the bigger group of interlinked tokens. Should generally be used at last in the collectors chain.
6366	Display this help message if a command is provided, otherwise list available commands and their brief descriptions.
6367	Print useful information from Redis DB.
6368	Prints raw content of a DB key.
6369	Compute a geohash from latitude and longitude.
6370	Retrieves and prints a document from an index based on its ID, excluding the 'house numbers' field and formatting the output.
6371	Get index details for a document by its id.
6372	Return document linked to word with higher score.
6373	Print the similarity score between two strings.
6374	Send the request using its send method and return its response.
6375	Concurrently converts a list of Requests to Responses.
6376	Gets value of bits between selected range from memory.
6377	Casts HArray signal or value to signal or value of type Bits.
6378	convert python slice to value of SLICE hdl type
6379	Find files by pattern in directory
6380	Check if any item in the iterable equals the given item or value.
6381	Generate for loop for static items
6382	Logical shift left
6383	Returns the number of bits required to store x-1.
6384	Check if a number is a power of two.
6385	c - like case of switch statement
6386	c-like default of switch statement
6387	Register signals from interfaces for Interface or Unit instances
6388	This method is called before the first step of a simulation. It sets the date and timescale for the VCD writer, registers interfaces and remaining signals for the synthesised unit, and ends the definitions section of the VCD file.
6389	This method logs the change of a signal in the VCD writer.
6390	Serialize HWProcess instance
6391	Walks all interfaces on a unit and instantiates an agent for each interface. Returns a list of monitor/driver functions that should be added to the simulation as processes.
6392	If interface has associated clk return it otherwise try to find clk on parent recursively
6393	Yields distinct items from iterable based on a key selected by the `fn` function in the order that they appear.
6394	same like itertools.groupby

:note: This function does not need initial sorting like itertools.groupby

:attention: Order of pairs is not deterministic.
6395	Flatten nested lists, tuples, generators, and maps up to a specified maximum depth.
6396	Merge nested IfContainer form else branch to this IfContainer as elif and else branches
6397	Removes all unconnected signals from a netlist
6398	Returns True if the process consists of only one unconditional assignment and merging them would not contribute to the code's utility.
6399	Try to merge procB into procA
6400	Try to merge processes as much as possible based on their structure and order.
6401	Record write request in monitor mode
6402	Convert unit to RTL using specified serializer.
6403	Resolve name for process and mark outputs of statements as not hidden.
6404	Cut off drivers from statements
6405	Create new signal in this context
6406	Builds an Entity and Architecture instance from a netlist representation, including generics, ports, and subUnits.
6407	Get maximum _instId from all assignments in statement
6408	Retrieve the maximum statement ID from a given process.
6409	Write data to interface
6410	Direction change for interface
6411	Load declaratoins from `_declr` method. This function is called first for parent and then for children.
6412	generate _sig for each interface which has no subinterface if already has _sig return it instead
6413	Get the name in HDL format
6414	Sum of all width of interfaces in this interface.
6415	Get sensitivity type for operator
6416	evaluates an operator by loading its operands and processing them using a specified evaluation function, potentially including the current simulator time or data type for certain operations.
6417	Converts a value to a specified type, handling signed-unsigned conversions, boolean, bit, and integer types.
6418	Reinterpret signal of type Bits to signal of type HStruct.
6419	Count of complete words between two addresses
6420	Groups transaction parts split on words into words. Returns generator of tuples (wordIndex, list of transaction parts in this word)
6421	Pretty print interface
6422	Convert transaction template into FrameTmpls
6423	Walk enumerated words in this frame
6424	Packs data into a list of BitsVal with a specified dataWidth
6425	Clean information about enclosure for outputs and sensitivity of this statement.
6426	Discover enclosure for a set of statements based on their outputs.
6427	Discover sensitivity for a list of signals. If event-dependent sensitivity is found, no other sensitivity is added.
6428	get RtlNetlist context from signals
6429	Update signal IO after reduce attempt
6430	After merging statements, update IO, sensitivity, and context.
6431	Walk statements and compare if they can be merged into one statement list
6432	Merge statements in list to remove duplicated if-then-else trees.
6433	Merge two lists of statements into one.
6434	Simplify statements in the list.
6435	After parent statement becomes event dependent, propagate event dependency flag to child statements.
6436	Assign parent statement and propagate dependency flags if necessary
6437	Append statements to this container under conditions specified by condSet
6438	Disconnects this statement from signals and deletes it from RtlNetlist context.
6439	Create register in this unit
6440	Create signal in this unit.
6441	Disconnect internal signals to reuse by parent unit
6442	Walk all simple values in HStruct or HArray.
6443	Opposite of packAxiSFrame
6444	Converts the signum of a value without using bit manipulation.
6445	Register sensitivity for a process.
6446	Evaluate list of values as condition
6447	Connects ports of simulation models by name.
6448	Create value updater for simulation
6449	Create value updater for simulation of array type values. The updater function updates the value at a specified index and returns a flag indicating whether the update has changed the value.
6450	create hdl vector value
6451	Guesses resource usage by HWProcess
6452	Get value of parameter
6453	Set the value of this parameter after validating that it is not read-only and not replaced with a new one.
6454	Generate flattened register map for HStruct
6455	Resolve ports of discovered memories
6456	Find out if this signal is something indexed.
6457	Construct value of this type. Delegated on value class for this type.
6458	Cast a value or signal of one type to another compatible type.
6459	Cast value or signal of this type to another type of same size.
6460	walk parameter instances on this interface
6461	Connects a 1D vector signal to a structured interface, excluding specific sub-interfaces if specified.
6462	Concatenate all signals to one big signal, recursively.
6463	Hardcode ROM content into hardware processes due to Verilog restrictions.
6464	Synthesize all subunits, make connections between them, build entity and component for this unit.
6465	Register interface in implementation phase.
6466	Return sig and val reduced by & operator or None
6467	Return sig and val reduced by ^ operator or None if it is not possible to statically reduce expression
6468	Get root of name space.
6469	Decide if the unit should be serialized or if its name should be adjusted to match an already serialized unit.
6470	Serialize HdlType instance
6471	Serialize IfContainer instance
6472	Return the original condition and a negated flag if the condition is negated.
6473	Constructs a SimBitsT object with caching
6474	Get constant name for value. name of constant is reused if same value was used before
6475	Cut off statements which are drivers of the specified signal
6476	Parse HArray type to this transaction template instance
6477	Parse HStruct type to this transaction template instance
6478	Parse any HDL type to this transaction template instance
6479	Get the width of an item in the original array.
6480	Walk fields in instance of TransTmpl
6481	Convert negative int to positive int which has same bits set
6482	Merge another `IfContainer`'s statements into this statement.
6483	Returns cached indent string for a given number of spaces.
6484	Check if not redefining property on obj
6485	Register Param object on interface level object
6486	Update all parameters which are defined on self from otherObj.
6487	Register unit object on interface level object
6488	Register interface object on interface level object
6489	Registers an array of items on the interface level object, setting their parent and name, and then assigns each item to an attribute with a formatted name.
6490	Selects the first driver if the signal has exactly one driver. Raises exceptions if there are zero or multiple drivers.
6491	Recursively statistically evaluate result of this operator.
6492	Create operator with result signal
6493	Create a copy of this context with increased indent.
6494	Try connect src to interface of specified name on unit. Ignore if interface is not present or if it already has driver.
6495	Propagate "clk" clock signal to all subcomponents
6496	Propagate "clk" clock and negative reset "rst_n" signal to all subcomponents.
6497	Propagate "clk" clock and reset "rst" signal to all subcomponents
6498	Propagate negative reset "rst_n" signal to all subcomponents
6499	Propagate reset "rst" signal to all subcomponents
6500	Iterate over bits in a vector.
6501	Always decide not to serialize obj
6502	Decides to serialize only the first object of its class.
6503	Decide to serialize only objs with uniq parameters and class
6504	get all name hierarchy separated by '.'
6505	Delegate `_make_association` on items.
6506	Create simulation model and connect it with interfaces of original unit and decorate it with agents. This function handles the creation of a simulation model based on the provided unit, connects it with the unit's interfaces, and optionally runs agents on it. It also allows for customization of the simulation model class and target platform.
6507	Create a simulation model for unit.
6508	Reconnect model signals to unit to run simulation with simulation model but use original unit interfaces for communication
6509	Convert simulation model to Verilog CDFG (software circuit description format).
6510	Injects this callback loop into simulator
6511	Connect to port item on subunit
6512	Connect internal signal to port item, this connection is used by simulator and only output port items will be connected.
6513	Connect signal from internal side of this component to this port
6514	Return signal inside unit which has this port
6515	Check if hdl process has event dependency on signal
6516	Schedule a process on the actual time with a specified priority.
6517	Add an HDL process to the execution queue based on the trigger signal.
6518	Schedule combUpdateDoneEv event to notify agents that the current delta step is ending and values from combinational logic are stable.
6519	Apply stashed values to signals. If runSeqProcesses is already scheduled, return. Otherwise, schedule runSeqProcesses and set runSeqProcessesPlaned to True.
6520	Resolve write conflicts for signal
6521	```plaintext
Delta step for combinational processes
```
6522	Delta step for event dependent processes
6523	Perform delta step by writing stacked values to signals
6524	Read value from signal or interface
6525	Write a value to a signal or interface.
6526	Add a process to events with default priority at the current time
6527	Runs a simulation for a Unit instance, applying pre-simulation hooks, adding extra processes, initializing unit signals, and running the simulation until a specified time.
6528	Function to create variadic operator function
6529	Converts all ternary operators to IfContainers
6530	Serialize HWProcess objects as VHDL
6531	Compute the Hamming distance between two hashes.
6532	Compute the average hash of the given image.
6533	Compute the hamming distance between two images.
6534	Set up the Vizio media player platform.
6535	Retrieve latest state of the device.
6536	Mute or unmute the device volume.
6537	Increasing volume of the device.
6538	Decreasing volume of the device.
6539	Sets the volume level, increasing or decreasing based on the current volume level.
6540	Restores the starting position by setting up the chessboard, piece positions, and other attributes to their initial values.
6541	Gets the piece at the given square
6542	Remove a piece from the given square if present.
6543	Sets a piece at the given square. An existing piece is replaced.
6544	Checks if the given move would move the king into check or put it into check due to dropping a pawn.
6545	Checks if the king of the other side is attacked. Such a position is not valid and could only be reached by an illegal move.
6546	Checks if the game is over due to checkmate, stalemate or fourfold repetition.
6547	Checks if the current position is a checkmate.
6548	Checks if a position in a game has occurred four times on consecutive alternating moves.
6549	Restore the previous position and returns the last move from the stack.
6550	Gets an SFEN representation of the current position.
6551	Parses a move in standard coordinate notation, makes the move and puts it on the move stack.Raises `ValueError` if neither legal nor a null move.Returns the move.
6552	Rem
6553	Gets the symbol `p`, `l`, `n`, etc.
6554	Creates a piece instance from a piece symbol. Raises `ValueError` if the symbol is invalid.
6555	Get an USI (Universal Shogi Input) string for a move, specifying the source and destination squares, and whether it is a promotion.
6556	Parses an USI string and raises `ValueError` if the USI string is invalid.
6557	Accept a string and parse it into many commits. Parse and yield each commit-dictionary. This function is a generator.
6558	Parse a parsed single Git commit and return a dictionary representing the completely parsed commit.
6559	Loads Config, Checking CLI Arguments For A Config File
6560	Load's config then runs Django's execute_from_command_line
6561	Add argument for config to existing argparser
6562	Find config file and set values
6563	Dumps initial config in YAML.
6564	Documents values in markdown
6565	Converts string to type requested by `cast_as`
6566	Returns all dates from first to last included.
6567	Fast %Y-%m-%d parsing.
6568	Load data from a file or URL. If the file is a zip, load data from the zip file. Otherwise, load data from the file.
6569	Fill missing rates of a currency with the closest available ones.
6570	Fill missing rates of a currency using linear interpolation of the two closest available rates.
6571	Get a rate for a given currency and date.
6572	Convert an amount from one currency to another.
6573	Groups iterable by n elements.
6574	Animate given frames for a set number of iterations.
6575	Return record `n` as 1,024 bytes; records are indexed from 1.
6576	Write `data` to file record `n`; records are indexed from 1.
6577	Return a memory-map of the elements `start` through `end`.
6578	Return the text inside the comment area of the file.
6579	Add a new array to the DAF file with start and end word fields set.
6580	Close this SPK file.
6581	Compute the component values for the time `tdb` plus `tdb2`.
6582	Close the file and release any associated resources.
6583	Map the coefficients into memory using a NumPy array.
6584	Generate angles and derivatives for time `tdb` plus `tdb2`.
If `derivative` is true, return a tuple containing both the angle and its derivative; otherwise simply return the angles.
6585	Visit a function call and detect logging level and violations.
6586	Process binary operations while processing the first logging argument.
6587	Process dict arguments and check for whitelist and exception conditions.
6588	Process f-string arguments.
6589	Process keyword arguments.
6590	Process except blocks and log their names.
6591	Heuristic to decide whether an AST Call is a logging call.
6592	Return the exception name from an ExceptHandler node in both py2 and py3.
6593	Check if value has id attribute and return it.
6594	Return whether the given node is a bare exception name in an except block.
6595	Reports a violation if exc_info keyword is used with logging.error or logging.exception.
6596	Deletes file from database only if needed. When editing and the filefield is a new file, deletes the previous file (if any) from the database. Call this function immediately BEFORE saving the instance.
6597	Edit the download-link inner text.
6598	Returns the freshly rendered content for the template and context described by the PDFResponse. This method does not set the final content of the response. To set the response content, you must either call render() or set the content explicitly using the value of this property.
6599	Returns a PDF response with a template rendered with the given context.
6600	Given a unicode string, this function will convert it to a valid ASCII string using the 'unidecode' library if imported. Then, it will replace backslash and double-quote characters with their escaped versions and wrap the resulting string in double-quotes.
6601	Sets defaults for ``class Meta`` declarations. Arguments can either be extracted from a `module` (in that case all attributes starting from `prefix` are used) or passed explicitly as keyword arguments.
6602	Converts a given string from CamelCase to under_score.
6603	Builds all indices listed in the model's Meta class.
6604	Load and parse a .csv file
6605	Load the content of the text file.
6606	Parses a CSV line into a price element.
6607	translate the incoming symbol into locally-used
6608	Loads all symbol maps from the database and stores them in a dictionary.
6609	Reuses the same db session
6610	Add individual price
6611	Import prices from CSV file.
6612	Displays the latest price for a symbol if provided, otherwise displays the latest prices for all securities.
6613	Display all prices
6614	Download the latest prices for specified securities or currencies.
6615	Delete old prices, leaving just the last.
6616	Return the default session. The path is read from the default config.
6617	Creates a symbol mapping
6618	Displays all symbol maps
6619	Finds the map by in-symbol
6620	Read text lines from a file
6621	Maps the price entity
6622	maps a PriceModel object into a Price entity
6623	Read the config file
6624	gets the default config path from resources
6625	Copy the config template into user's directory
6626	Returns the path where the active config file is expected. This is the user's profile folder.
6627	Reads the contents of the config file.
6628	Sets a value in config
6629	Retrieves a config value
6630	Save the config file
6631	Splits the symbol into namespace and mnemonic tuple.
6632	Creates a new price record by mapping a `PriceModel` to an entity and adding it to the repository.
6633	Adds the price entity to the database, updating it if it already exists.
6634	Download and save price online
6635	Returns the current db session
6636	Returns a list of `PriceModel` objects based on the given date and currency filters.
6637	Fetches the latest price for a symbol on a specific date within a given namespace.
6638	Prune historical prices for all symbols, leaving only the latest. Returns the number of items removed.
6639	Delete all but the latest available price for the given symbol. Returns the number of items removed.
6640	Downloads and parses the price
6641	Fetches the securities that match the given filters.
6642	Return partial of original function call
6643	Replace child nodes on the original function call with their partials.
6644	Descend depth first into all child nodes.
6645	Remove nodes for original test functions from root node
6646	Verify that a part that is zoomed in on has equal length.
6647	Test whether abstract syntax trees match between the student and solution code.
6648	Test if the student typed a (pattern of) text.
6649	Checks whether student imported a package or function correctly.
6650	Search student output for a pattern.
6651	Check if the right printouts happened.
6652	Check whether the submission did not generate a runtime error.
6653	Test multiple choice exercise by checking if the selected option matches the correct answer and provide appropriate feedback.
6654	Check whether a particular function is called.
6655	Get a value from process, return tuple of value, res if successful.
6656	Override the solution code with something arbitrary.
6657	Check whether an object is an instance of a certain class.
6658	Return a copy of the instance, omitting entries that are EMPTY
6659	Dive into nested tree.
6660	Getter for Parser outputs
6661	Return True if local.mtime == remote.mtime.
6662	Loops through each context manager in the state's solution_parts["context"] and dispatches has_context for each.
6663	Check if a given part exists in the state and return the corresponding child state. If the part is missing, log an error message. If the part exists, check if its AST matches the solution's AST and return the part as a child state.
6664	Return child state with indexed name part as its ast tree.
``index`` can be:
- an integer, in which case the student/solution_parts are indexed by position.
- a string, in which case the student/solution_parts are expected to be a dictionary.
- a list of indices (which can be integer or string), in which case the student parts are indexed step by step.
6665	Check whether a function argument is specified.
6666	When checking a function definition of lambda function, prepare `has_equal_x` for checking the call of a user-defined function.
6667	Return the true anomaly at each time.
6668	Configures this extension with the given app. This registers an `teardown_appcontext` call, and attaches this `LDAP3LoginManager` to it as `app.ldap3_login_manager`.
6669	Configures this extension with a given configuration dictionary. This allows use of this extension without a flask app. It sets default values for various LDAP configuration parameters if they are not already provided in the input dictionary.
6670	Add an additional server to the server pool and return the freshly created server.
6671	Remove a connection from the appcontext.
6672	Cleanup after a request. Close any open connections.
6673	An abstracted authentication method. Decides whether to perform a direct bind or a search bind based upon the login attribute configured in the config.
6674	Performs a direct bind to authenticate a user by constructing a DN and attempting to bind with the provided credentials.
6675	Performs a search bind to authenticate a user. This is required when the login attribute is not the same as the RDN, since we cannot string together their DN on the fly, instead we have to find it in the LDAP, then attempt to bind with their credentials.
6676	Gets a list of groups a user at dn is a member of.
6677	Gets info about a user specified at dn.
6678	Gets info about a user at a specified username by searching the Users DN.
6679	Gets an object at the specified dn and returns it.
6680	Provides a bound LDAP3 connection for server access within the Flask application context
6681	Make a connection to the LDAP Directory.
6682	Make a connection to an LDAP directory.
6683	Destroys a connection. Removes the connection from the appcontext, and unbinds it.
6684	query a s3 endpoint for an image based on a string
6685	search across labels
6686	Query a GitLab artifacts folder for a list of images or list all collections if no query is provided.
6687	Performs a "show all" search that doesn't require a query. Displays URLs to browse artifacts for successful jobs.
6688	a function for the client to announce him or herself, depending on the level specified. If you want your client to have additional announced things here, then implement the class `_speak` for your client.
6689	Announce the client if the command is not in the predefined list and the client is not in quiet mode.
6690	Checks if the required environment variables for the Google Drive client are set and sets default values if not found.
6691	Update headers with a token & other fields
6692	require secrets ensures that the client has the secrets file, and specifically has one or more parameters defined. If params is None, only a check is done for the file.
6693	Stream a file from a URL to a temporary file and rename it on successful completion.
6694	'''Stream a file from a URL and save it to a local file. If the request is denied due to authentication errors, the function will attempt to update the headers with a new token and retry the request. If the response is successful, the function will write the chunked content to a file and display a progress bar. If there is an error, the function will log an error message and exit the program. The function also handles SSL verification by disabling it if a flag is set. '''
6695	update_token uses HTTP basic authentication to attempt to authenticate given a 401 response. We take as input previous headers, and update them.
6696	Create or retrieve a Google Drive folder by name. If the folder already exists, it is returned; otherwise, it is created.
6697	Attempt to read the detail provided by the response and default to using the reason if none is available.
6698	Gets or creates a bucket given a bucket name and an initialized client
6699	Update client secrets from a credential file and set the API base.
6700	Initialize clients by obtaining transfer and access tokens, then creating a transfer client.
6701	Load the secrets credentials file with the Globus OAuthTokenResponse and update the settings.
6702	Return logs for a particular container or the most recent log if no name is provided. 匹配名称的策略包括存储路径和元数据中的匹配。
6703	Returns a list of logs from a bucket, filtering for files that end in `.log`. If no logs are found, logs a message indicating no containers were found based on the `.log` extension.
6704	Creates an endpoint folder, catching the error if it already exists.
6705	return a transfer client for the user
6706	A "list all" search that doesn't require a query, returning objects with custom properties value type set to container.
6707	Print the status for all or one of the backends.
6708	Adds a variable to the config with a specified backend, value, and optional force flag. If the variable already exists and force is False, it will error out.
6709	Remove a variable from the config, if found.
6710	```plaintext
Activate a backend by adding it to the .sregistry configuration file.
```
6711	Delete a backend and update the secrets file.
6712	Update a base based on an image name, detecting a particular registry and updating self.base if necessary.
6713	Generate a base64 encoded header for basic authentication by combining a username and password.
6714	Generate a signature for a request using a specific payload and client secret.
6715	Authorize a client based on encrypting the payload with the client secret, timestamp, and other metadata.
6716	Send a DELETE request to the specified URL.
6717	HTTP HEAD request, typically used for status code retrieval, etc.
6718	paginate_call is a wrapper for get to paginate results
6719	Verify SSL certificate based on configuration. Returns `True` if verification is enabled, `False` otherwise and logs a warning if verification is disabled.
6720	Deletes an image from the Singularity Registry.
6721	Returns a lookup dictionary with several global variables from `version.py` without importing singularity.
6722	Reads and processes requirements and versions from a lookup dictionary to generate a list of dependencies in the format required by Python's package manager.
6723	Determine the singularity version for a build, looking first at an environmental variable, then using the system version.
6724	Check if the specified software (defaulting to "singularity") is installed by running its version command and returning True if successful.
6725	get\_installdir returns the installation directory of the application
6726	Output the robot.png thumbnail from the database folder. If the user has exported a different image, use that instead.
6727	run_command uses subprocess to send a command to the terminal.
6728	This method retrieves metadata from a Dropbox file, parses it into a dictionary, and then passes it to the main `get_metadata` function.
6729	```plaintext
Retrieve a Dropbox token from the environment and create a client. If the token is not found or the account is invalid, an error message is returned and the client exits.
```
6730	Prints the output to the console and writes it to a file if specified.
6731	Bring down an instance
6732	Lists a specific log for a builder or the latest log if none provided.
6733	get a listing of collections that the user has access to.
6734	Update secrets to authenticate with either pre-authenticated token/url, keystone v3, keystone v2, or legacy authentication.
6735	Update the secrets for Google Application Credentials from the environment.
6736	Get the correct client based on the driver of interest.
6737	Give the user an ipython shell, optionally with an endpoint of choice.
6738	get_manifests calls get_manifest for each of the schema versions, including v1 and v2. Version 1 includes image layers and metadata, and version 2 must be parsed for a specific manifest, and the 2nd call includes the layers. If a digest is not provided latest is used. repo_name: reference to the <username>/<repository>:<tag> to obtain digest: a tag or shasum version
6739	Get image manifest for a specific repository and tag.
6740	Determine the user preference for atomic download of layers, prioritizing the Singularity cache directory or using a default.
6741	Extract the environment from the manifest, or return None. Used by functions env_extract_image, and env_extract_tar.
6742	Updates the base URL for GitLab, the API endpoint, and the artifacts folder.
6743	update secrets will update metadata needed for pull and search
6744	Return a dictionary containing metadata such as job ID and other parameters for the user.
6745	Get all settings for a particular client if a name is provided, or across clients.
6746	a wrapper to get_and_update, but if not successful, will print an error and exit.
6747	Just update a setting, doesn't need to be returned.
6748	Authorize a client by encrypting a payload with a client token, which needs to be validated on the receiving server.
6749	Lists builders or instances for a specified project and zone, starting with 'sregistry-builder'.
6750	Load a particular template based on a name.
6751	Get the IP address of an inserted instance. Will try three times with a delay to give the instance time to start up.
6752	run a build, meaning inserting an instance. Retry if there is failure
6753	Returns a list of containers based on the metadata field "type" with value "container." Alerts the user if no containers are found.
6754	A "list all" search that doesn't require a query. Returns all objects with custom metadata value of "container".
6755	Lists images for an external resource.
6756	Sharing an image means sending a remote share from an image you control to a contact, usually an email.
6757	Initializes the database with the specified or default path, sets up the database engine and session, and creates all defined models.
6758	get default build template.
6759	Search for images based on a query or endpoint.
6760	Lists all endpoints and provides a GUI table representation of the endpoints to the user.
6761	Lists files within a specified endpoint, optionally filtering by a query.
6762	Returns a shareable link for an image of choice.
6763	For private or protected registries, a client secrets file is required to be located at .sregistry. If no secrets are found, we use a default of Singularity Hub and return a dummy secrets.
6764	Get version 1 of the Google Compute and Storage service.
6765	delete object will delete a file from a bucket
6766	Delete an image from Google Storage.
6767	Destroy an instance, meaning shutting it down and stopping the build.
6768	get_subparser will get a dictionary of subparsers, to help with printing help
6769	Generate a robot name based on descriptors, nouns, and random numbers.
6770	get a temporary directory for an operation. If SREGISTRY_TMPDIR is set, return that. Otherwise, return the output of tempfile.mkdtemp
6771	Extract a tar archive to a specified output folder.
6772	Handle tar extraction with whiteout files using blob2oci script.
6773	find the SHA256 hash string of a file
6774	Open and read a file, returning its contents.
6775	Read in a JSON file and return the data structure as a dictionary.
6776	Cleans up a list of files by deleting them if they exist.
6777	Push an image to an S3 endpoint.
6778	get a collection if it exists. If it doesn't exist, create it first
6779	Get a collection by name, if it exists, otherwise return None.
6780	Get container by name, collection_id, tag, and version if provided. Otherwise return None.
6781	List local images in the database, optionally with a query.
6782	Inspect a local image in the database, which typically includes the basic fields in the model.
6783	Moves a container and renames it while maintaining the original directory structure in storage.
6784	Moves an image from its current location to a new path.
6785	Removes an image from the database and filesystem.
6786	Adds a new container to the registry or updates an existing one
6787	Push an image to the Singularity Registry.
6788	Parse a recipe header and return the header value or the complete header line, optionally removing the header.
6789	find_single_recipe will parse a single file, and if valid, return an updated manifest
6790	Builds a temporary package containing specified files, compresses it into a `.tar.gz`, renames it based on the file's hash, and returns the path to the renamed `.tar.gz` file.
6791	Run a build and handle retries if there is a failure. Update blob metadata and visibility if the build is successful.
6792	Update the blob metadata with the artifact file name, dependencies, and image hash based on the provided response and configuration.
6793	format_container_name will take a name supplied by the user, remove all special characters (except for those defined by "special-characters") and return the new container name.
6794	useColor will determine if color should be added to a print. Will check if being run in a terminal and if has support for ascii
6795	determine if a level should print to stderr, includes all levels but INFO and QUIET
6796	write will write a message to a stream, first checking the encoding
6797	Prints a table of entries. If the rows is a dictionary, the keys are interpreted as column names. If not, a numbered list is used.
6798	Push an image to a Globus endpoint. The endpoint and remote path are specified in the `name` parameter, and the `path` parameter specifies the local file path of the image. The method ensures that the source and destination endpoints are active and properly configured before initiating the transfer.
6799	Return a default template for some function in sregistry. If there is no template, None is returned.
6800	Return the image manifest via the aws client, saved in self.manifest.
6801	Get a particular build template based on the specified package manager. If no specific template name is provided, it defaults to a general template for the given package manager. The method checks if the template exists and returns its content if found, or logs a warning if not found.
6802	This method updates client secrets and associated API base using a credentials file located in `.sregistry` or an environment variable. It handles setting customization, reading client secrets, and managing credential caching.
6803	Generate a repr string for a class based on its attributes.
6804	Translate S3 errors to FSErrors.
6805	Create a S3File backed with a temporary file.
6806	Builds a gravatar url from an user or email
6807	Builds a URL to a gravatar from an email address.
6808	Returns True if the user has a gravatar, False if otherwise
6809	Builds a URL to a Gravatar profile from an email address.
6810	Generator for blocks for a chimera block quotient.
6811	Extract the blocks from a graph and returns a block-quotient graph based on the acceptability functions.
6812	Returns a set of resonance forms as SMILES strings, given a SMILES string.
6813	Enumerates all possible resonance forms of a molecule and returns them as a list.
6814	Apply a series of Normalization transforms to correct functional groups and recombine charges.
6815	Repeatedly apply normalization transform to molecule until no changes occur. If multiple unique products are produced, the first product (sorted alphabetically by SMILES) is chosen.
6816	Return a canonical tautomer by enumerating and scoring all possible tautomers
6817	Return log messages for a given SMILES string using the default validations.
6818	Break covalent bonds between metals and organic atoms under certain conditions.
6819	Return a standardized canonical SMILES string given a SMILES string.
6820	Returns a set of tautomers as SMILES strings, given a SMILES string.
6821	Return a standardized canonical tautomer SMILES string given a SMILES string.
6822	Return a standardized version the given molecule.Standardization process consists of the following stages: RDKit: py: func ~ rdkit.Chem.rdmolops.RemoveHs, RDKit: py: func ~ rdkit.Chem.rdmolops.SanitizeMol, : class ~ molvs.metal.MetalDisconnector, : class ~ molvs.normalize.Normalizer, : class ~ molvs.charge.Reionizer, RDKit: py: func ~ rdkit.Chem.rdmolops.AssignStereochemistry.
6823	Return the tautomer parent of a given molecule.
6824	Return the fragment parent of a given molecule. The fragment parent is the largest organic covalent unit in the molecule.
6825	Return the stereo parent of a given molecule. The stereo parent has all stereochemistry information removed from tetrahedral centers and double bonds.
6826	Return the isotope parent of a given molecule by replacing all atoms with the most abundant isotope for that element.
6827	Return the charge parent of a given molecule. The charge parent is the uncharged version of the fragment parent.
6828	Return the super parent of a given molecule. The super parent is fragment, charge, isotope, stereochemistry, and tautomer insensitive. From the input molecule, the largest fragment is taken. This is uncharged, and then isotope and stereochemistry information is discarded. Finally, the canonical tautomer is determined and returned.
6829	Given a SMILES string or a file containing SMILES strings, standardize or validate the molecule(s) and write the result(s) to a file or standard output.
6830	Remove specified fragments from the molecule.
6831	Return the largest covalent unit from a molecule. The largest fragment is determined by the number of atoms (including hydrogens), ties are broken by molecular weight, and alphabetically by SMILES if needed. The function also allows for a preference for organic fragments.
6832	Output:
Integrates an IVP problem using either predefined or adaptive methods. Optionally plots the results.
6833	Retrieves statistics from a GitHub organization using the provided credentials. It retrieves data such as members, teams, repositories, contributors, pull requests, issues, languages, and commits. The function checks if the data already exists and only retrieves it if necessary to save GitHub API requests.
6834	Retrieves the number of members of the organization.
6835	Retrieves the number of teams of the organization.
6836	Retrieves info about the repos of the current organization.
6837	Retrieves the number of contributors to a repo in the organization. Also adds to unique contributor list.
6838	Retrieves the number of pull requests on a repo in the organization.
6839	Retrieves the number of closed issues.
6840	Check to see if the given repo has a README file recognized by GitHub.
6841	Check if a repository has a top-level LICENSE file and return its path.
6842	Retrieves the number of commits to a repo in the organization. If it is the first time getting commits for a repo, it will get all commits and save them to JSON. If there are previous commits saved, it will only get commits that have not been saved to disk since the last date of commits.
6843	Writes stats from the organization to JSON.
6844	Updates the total.csv file with current data.
6845	Updates languages.csv file with current data.
6846	Checks if a directory exists and creates it if not.
6847	Removes all rows of the associated date from the given CSV file. Defaults to today.
6848	Return a list of the names of US Government GitHub organizations.
6849	Create a github3.py session for a GitHub Enterprise instance
6850	Simplified check for API limits. If necessary, spin in place waiting for API to reset before returning.
6851	Create a GitHub session for making requests
6852	Yields GitHub3.py repo objects for provided orgs and repo names. If orgs and repos are both empty, it retrieves all repositories from the GitHub server. If public_only is True, it returns only public repositories.
6853	Retrieves an organization via a given name, prompting the user if an empty string is provided.
6854	Writes stargazers data to file.
6855	Create CodeGovProject object from GitLab Repository.
6856	Create CodeGovProject object from DOE CODE record.
6857	Look up license object information using names from https://api.github.com/licenses.
6858	Retrieves the traffic for the repositories of the given organization.
6859	Retrieve the releases for the given repository in JSON format and store it in the instance variable.
6860	Retrieves the total referrers and unique referrers of all repos in json and then stores it in a dict.
6861	Retrieves data from JSON and stores it in the supplied dictionary. Accepts 'clones' or 'views' as type.
6862	Writes all traffic data to file in JSON form.
6863	Writes all traffic data to file.
6864	Checks the given CSV file against the JSON data scraped for the given dictionary. It removes all redundant data that has already been recorded and returns the count of rows from the file.
6865	Writes given dict to file.
6866	Writes the referrers data to file.
6867	Converts a DOE CODE .json file into DOE CODE projects. Yields DOE CODE records from a DOE CODE .json file.
6868	Yields DOE CODE records from a DOE CODE .json URL response Converts a DOE CODE API .json URL response into DOE CODE projects
6869	Yeilds DOE CODE records based on provided input sources
6870	Performs a login and sets the Github object via given credentials. If credentials are empty or incorrect, prompts the user for credentials. Stores the authentication token in a CREDENTIALS_FILE for future logins. Handles Two-Factor Authentication.
6871	Get the emails of organization members.
6872	Writes the user emails to file.
6873	Return a connected Bitbucket session
6874	Return a connected GitLab session
6875	Yields GitLab project objects for all projects in Bitbucket.
6876	Returns the number of lines of code (SLOC) for a given Git repository URL using the cloc tool.
6877	Compute the labor hours based on the given source lines of code (SLOC) using the COCOMO II model.
6878	Prune the "None" or empty string values from dictionary items.
6879	Reads a 'pretty' formatted GraphQL query file into a one-line string. Removes line breaks and comments. Condenses white space.
6880	Submit a GitHub GraphQL query from a file.
6881	Sends a curl request to GitHub.
6882	Wait until the given UTC timestamp, with optional verbose logging.
6883	Makes a pretty countdown.
6884	Load a JSON data file into the internal JSON data dictionary. Overwrite current internal data. If no file path is provided, use the stored data file path. Raises FileNotFoundError if data file does not exist.
6885	Write the internal JSON data dictionary to a JSON data file. If no file path is provided, the stored data file path will be used.
6886	Creates the TFS Connection Context
6887	Create a project\_analysis\_client.py client for a Team Foundation Server Enterprise connection instance. If token is not provided, will attempt to use the TFS\_API\_TOKEN environment variable if present.
6888	Create a core_client.py client for a Team Foundation Server Enterprise connection instance
6889	Creates a TFS Git Client to pull Git repo info
6890	Creates a TFS TFVC Client to pull TFVC repo info
6891	Returns a list of all git repos for the supplied project within the supplied collection.
6892	Retrieve a list of all TFVC branches for the specified project within the given collection.
6893	Does setup such as login, printing API info, and waiting for GitHub to build the commit statistics. Then gets the last year of commits and prints them to file.
6894	Calculate the total number of commits over the last year by subtracting weekly commits and storing them. Adjust for initial starting commits and sort weeks in ascending order.
6895	Writes the weeks with associated commits to file.
6896	Instantiates and configures backends based on a list of dictionaries specifying the backend class and its options. Raises exceptions or logs errors if the configuration过程中 if errors occur.
6897	Return MetricsInterface instance with specified name. The name is used as the prefix for all keys generated with this :py:class:`markus.main.MetricsInterface`.
6898	Record a timing value.
6899	Contextmanager for easily computing timings.
6900	Timer decorator for easily computing timings.
6901	Generate a tag for use with the tag backends.
6902	Report a timing.
6903	Report a histogram.
6904	Roll up stats and log them.
6905	This function returns an annotation value that can be used to sort by an enum field.
6906	Convert a string from the database into an Enum value
6907	Convert a string from a form into an Enum value.
6908	Convert an Enum value into a string for the database
6909	Resolve a path within an object structure, returning a set of elements.
6910	Project US-L pairs onto a dictionary of cells, mapping each cell term to a US-L list.
6911	Returns the mean value.
6912	Record an event with the meter. By default it will record one event.
6913	Returns the mean rate of the events since the start of the process.
6914	Record an event with the derive.
6915	Send metric and its snapshot.
6916	```plaintext
Serialize and send available measures of a metric.
```
6917	Compose a statsd compatible string for a metric's measurement.
6918	Add a metric to the buffer.
6919	Get method that raises MissingSetting if the value was unset.
6920	Ensure `data` is in a format that `json.loads` can process by converting it to a utf-8 encoded string if needed.
6921	Fetch values and set defaults if they don't exist.
6922	Convert set of human codes to a dict of code to exactonline guid mappings.
6923	Get the "current" division and return a dictionary of divisions so the user can select the right one.
6924	Map ExactOnline invoice numbers to foreign (YourRef) invoice numbers
6925	Solve a Sudoku grid inplace using SAT solving.
6926	Create Django class-based view from injector class.
6927	Create Django form processing class-based view from injector class.
6928	Create Flask method based dispatching view from injector class.
6929	Create DRF class-based API view from injector class.
6930	Create DRF generic class-based API view from injector class.
6931	Create DRF model view set from injector class.
6932	Receive a streamer for a given file descriptor.
6933	Read data from the file descriptor and pass it to the protocol. Handle end-of-file and fatal errors.
6934	Actual closing code, both from manual close and errors.
6935	Finalize closing by calling the protocol's connection_lost method and then closing the file descriptor.
6936	Add a new watching rule with an optional alias.
6937	Stop watching a given rule.
6938	Actual rule setup.
6939	Starts the watcher, registering new watches if any.
6940	Fetch an event. Swallows events for removed watches.
6941	Respond to ``nsqd`` that you need more time to process the message.
6942	Update timer for a successful call.
6943	Update the timer to reflect a failed call.
6944	Closes all connections stops all periodic callbacks
6945	Used to identify when buffered messages should be processed and responded to.
6946	Adds a connection to `nsqd` at the specified address.
6947	Triggers a query of the configured ``nsq_lookupd_http_addresses``
6948	Dynamically adjust the reader max_in_flight. Set to 0 to immediately disable a Reader
6949	Called when a message has been received where `msg.attempts > max_tries`. This method can be subclassed and overridden to perform a task such as writing to disk.
6950	Listen for the named event with the specified callback.
6951	Stop listening for the named event via the specified callback.
6952	Executes the callbacks for the listeners on the specified event with the supplied arguments.
6953	Publish a message to NSQ.
6954	Transforms data features to a higher level
6955	Make prediction by processing test data and returning the result.
6956	Return the value of the theta sigmoid function for a given input 's'.
6957	Read and parse Trimmomatic log file to extract trimming statistics.
6958	Removes unpaired FASTQ files and, if specified, temporary input fastq files from the working directory.
6959	Merges the default adapters file in the trimmomatic adapters directory
6960	Runs trimmomatic with specified options on paired FastQ files and logs the process.
6961	Parse samtools depth file and create a dictionary with coverage per position for each plasmid.
6962	Generates a JSON file for pATLAS based on depth file and plasmid length dictionary.
6963	Sets the path to the appropriate jinja template file
6964	Sets the main channel names based on the provided input and output channel suffixes. This is performed when connecting processes. Parameters ---------- input_suffix : str Suffix added to the input channel. Should be based on the lane and an arbitrary unique id output_suffix : str Suffix added to the output channel. Should be based on the lane and an arbitrary unique id lane : int Sets the lane of the process.
6965	Returns the main raw channel for the process
6966	Wrapper to the jinja2 render method from a template file.
6967	Class property that returns a populated template string
6968	Sets the main channels for the process. Takes variable keyword arguments to update the Process._context attribute with information on the main channels. Channels are prefixed with the process ID, and the output channel ID is incremented by 1. Additional information can be provided via kwargs without changing the method.
6969	Updates the forks attribute with the sink channel destination.
6970	General purpose method for setting a secondary channel. This method allows a given source channel to be forked into one or more channels and sets those forks in the `Process.forks` attribute. Both the source and the channels in the `channel_list` argument must be the final channel strings.
6971	Update the directives attribute from a dictionary object. This updates the process attributes and/or directives for processes defined in the subclass.
6972	Sets the input channels for the status process using the provided list of channels and operator.
6973	Sets the main input channels of the pipeline and their forks.
6974	Adds secondary inputs to the start of the pipeline. These channels are inserted into the pipeline file as they are provided in the values of the argument.
6975	Sets the initial definition of the extra input channels based on the provided `channel_dict`. The dictionary should map each parameter to its input type and destination channels, and the function updates the process parameters accordingly.
6976	Attempts to retrieve the coverage value from the header string by splitting it by "_" and searching backwards for the first float value. Returns None if no float value is found.
6977	Parse an assembly fasta file. This is a Fasta parsing method that populates the.Assembly.contigs attribute with data for each contig in the assembly. The insertion of data on the self.contigs is done by the.Assembly._populate_contigs method, which also calculates GC content and proportions.
6978	Get GC content and proportions
6979	Filters the contigs of the assembly according to user provided comparisons.
6980	Return the total length of the assembly without the filtered contigs
6981	Writes the assembly to a new file, optionally filtering out certain IDs.
6982	Writes a report with the test results for the current assembly
6983	Recursively removes nested brackets
6984	Perform sanity checks in the pipeline string, ensuring each fork contains a lane token '&' and no duplicated processes within the same fork.
6985	Performs sanity checks on a pipeline string by removing spaces, and then executing a series of check functions.
6986	Parse a pipeline string into a list of dictionaries with the connections between processes.
6987	Returns the lane of the last process that matches fork_process
6988	From a raw pipeline string, get a list of lanes from the start of the current fork.
6989	connects a linear list of processes into a list of dictionaries
6990	Makes the connection between a process and the first processes in the lanes to which it forks. The lane counter will increase for each subsequent lane.
6991	Returns the pipeline string with unique identifiers and a dictionary with references between the unique keys and the original values
6992	Removes unique identifiers and add the original process names to the already parsed pipelines
6993	Checks whether the trace and log files are available.
6994	Parses the trace file header and retrieves the positions of each column key.
6995	Converts a hms string into seconds.
6996	Converts size string into megabytes
6997	Parses the .nextflow.log file and retrieves the complete list of processes. This method searches for specific signatures at the beginning of the .nextflow.log file and populates the :attr:`processes` attribute with the process names.
6998	Clears inspect attributes when re-executing a pipeline
6999	Checks whether the channels to each process have been closed.
7000	Read the contents of a log file into a list, with each line as a separate entry. Return `None` if the file does not exist.
7001	Assess whether the cpu load or memory usage is above the allocation.
7002	Updates the process stats based on information from the processes.
7003	Parses the nextflow log file data and updates number of submissions per process.
7004	Wrapper method for updating inspection attributes from trace and log files, handling retries on errors.
7005	Display the default pipeline inspection overview.
7006	Curses scroll functionality that adjusts the top_line based on the given direction.
7007	Curses horizontal padding adjustment based on direction, ensuring padding does not exceed maximum width.
7008	Returns a list with the last ``n`` lines of the nextflow log file
7009	Prepares the first batch of information, containing static information such as the pipeline file, and configuration files.
7010	Open the dotfile named .treeDag.json in the current working directory and return the dag object as a dictionary.
7011	Gets the hash of the nextflow file by generating a hash from the entire pipeline file and the current working directory and hostname.
7012	Gets the nextflow file path from the nextflow log file. It searches for the nextflow run command throughout the file.
7013	Split FASTA file into smaller sequences based on sample ID and minimum size.
7014	Parses a nextflow trace file, searches for processes with a specific tag and sends a JSON report with the relevant information
7015	Brews a given list of processes according to the recipe.
7016	Returns a pipeline string from a recipe name.
7017	Iterate over all available recipes and print their information to the standard output. If full is true, it will provide the pipeline string along with the recipe name.
7018	Validate the pipeline string by searching for forbidden characters.
7019	Builds the upstream pipeline of the current process
7020	Builds the downstream pipeline of the current process
7021	Builds the possible forks and connections between the provided processes.
7022	Main method to run the automatic pipeline creation This method aggregates the functions required to build the pipeline string that can be used as input for the workflow generator. Parameters ---------- tasks : str A string with the space separated tasks to be included in the pipeline Returns ------- str : String with the pipeline definition used as input for parse_pipeline
7023	Generates a component string based on the provided parameters and directives
7024	Writes a report from multiple samples.
7025	Trimmomatic log files and summary information.
7026	Removes whitespace from the assembly contig names
7027	Cleans the temporary fastq files and removes their link source if they are symlinks
7028	Public method for parsing abricate output files.
7029	Parser for a single abricate output file. This parser will scan a single Abricate output file and populate the :py:attr:`Abricate.storage` attribute. It skips header and comment lines, and populates the attribute with compliant lines from the abricate output file, using an arbitrary key set by the :py:attr:`Abricate._key` attribute.
7030	Generates an iterator to filter entries based on one or more custom filters. Filters must contain an entry of the `storage` attribute, a comparison operator, and the test value. Entries are yielded passed the filters.
7031	Tries to retrieve contig id. Returns the original string if it is unable to retrieve the id.
7032	Generates the JSON report to plot the gene boxes.
7033	Writes the JSON report to a json file
7034	Executes the assembly_report template for a given sample and assembly file, retrieves summary statistics, generates a JSON report with contig information and optional coverage data.
7035	Parse an assembly file in fasta format. This method populates the `Assembly.contigs` attribute with data for each contig in the assembly. It reads the file line by line, skipping empty lines, and stores the sequence strings for each contig. Finally, it converts the list of sequences into a single string for each contig.
7036	Generates a CSV report with summary statistics about the assembly.
7037	Return the mapping between sliding window points and their contigs, and the x-axis position of contig
7038	Get proportion of GC from a string.
7039	Calculates a sliding window of the GC content for the assembly
7040	Main executor of the skesa template.
7041	Writes a JSON report with the specified data.
7042	Returns the trim index from a `bool` list.
7043	Assess the optimal trim range for a given FastQC data file by identifying biased nucleotide positions and calculating the corresponding 5' and 3' trimming indices.
7044	Retrieves the optimal read trim range from data files of paired FastQ reads.
7045	Parses a FastQC summary report file and returns it as an ordered dictionary.
7046	Checks the health of a sample from the FastQC summary file.
7047	Parse a bowtie log file and populate self.n_reads, self.align_0x, self.align_1x, self.align_mt1x, and self.overall_rate
7048	Parse the process string to extract the process name and its directives.
7049	Automatically adds a dependency to a process by inserting it before the current process in the pipeline and adapting the input and output lanes.
7050	Searches the process tree backwards in search of a provided process Considering the provided parent lanes and searches only those Returns True when the template is found. Otherwise returns False
7051	Adds the header template to the master template string
7052	Adds the footer template to the master template string.
7053	Sets the main channels for the pipeline by parsing the `processes` attribute and performing tasks such as setting input/output channels, updating main input channels, and checking for secondary channels.
7054	Sets the main raw inputs and secondary inputs on the init process
7055	Set the secondary channels for the pipeline. This will iterate over the `NextflowGenerator.secondary_channels` dictionary that is populated when executing the `_update_secondary_channels` method.
7056	Compiles all status channels for the status compiler process.
7057	Returns the nextflow resources string from a dictionary object
7058	Returns the nextflow containers string from a dictionary object
7059	Returns the nextflow params string from a dictionary object.
7060	Returns the merged nextflow params string from a dictionary object.
7061	Returns the nextflow manifest config string to include in the config file from the information on the pipeline
7062	Set configurations iterates over processes in the pipeline, populates Nextflow configuration files with directives, and renders resources, containers, parameters, manifest, help, and user configuration strings.
7063	Writes dag to output file
7064	Write pipeline attributes to JSON for DAG visualization.
7065	Write all configuration files to the pipeline directory
7066	Export pipeline params as a JSON to stdout
7067	Export pipeline directives as a JSON to stdout.
7068	Fetches all DockerHub tags associated with each component and prints them with headers.
7069	Build the Nextflow pipeline.
7070	Set a k-mer list based on the provided k-mer option and max read length.
7071	Main executor of the spades template.
7072	Generates a unique identifier by combining a hash of the Nextflow pipeline file and the current working directory and hostname if watching is enabled, or extracts a report ID from the JSON file if not.
7073	Updates the trace watch by parsing the nextflow trace file and retrieving the path of report JSON files that have not been sent to the service yet.
7074	Update the run status based on the nextflow log file.
7075	Sends a PUT request with the report JSON files currently in the report_queue.
7076	Sends a POST request to initialize the live reports
7077	Sends a delete request for the report JSON hash.
7078	Converts a FASTA file containing adapter sequences into a format suitable for FastQC adapter files.
7079	Main executor of the FastQC template.
7080	Send dictionary to output json file
7081	Dump a mash dist txt file to a json file.
7082	Writes versions JSON for a template file
7083	Converts top results from mash screen txt output to json format.
7084	Adds color to the print message
7085	Sums up the attributes of each Process class to print lists of components based on user-specified flags.
7086	Collects all processes available and stores a dictionary of the required arguments of each process class to be passed to procs_dict_parser.
7087	Guesses the compression of an input file by checking for a binary signature at the beginning of the file.returns the compression format or None.
7088	Computes the Unicode encode range for a given string of characters.
7089	Returns the valid encodings for a given encoding range. The encoding ranges are stored in the :py:data:`RANGES` dictionary, with the encoding name as a string and a list as a value containing the phred score and a tuple with the encoding range. For a given encoding range provided via the two first arguments, this function will return all possible encodings and phred scores.
7090	Parses a file with coverage information into objects.
7091	Generates a filtered assembly file based on an original assembly and a minimum coverage threshold.
7092	Uses Samtools to filter a BAM file according to minimum coverage
7093	Evaluates the minimum coverage threshold from the value provided in the coverage_opt.
7094	Returns the number of nucleotides and the size per contig for the provided assembly file path
7095	Statues a filtered assembly if the minimum coverage is met, or copies the original assembly and BAM file if the minimum coverage is not met.
7096	Convert a CamelCase string into a snake_case one
7097	Collects Process classes and return dict mapping templates to classes
7098	Processes a Newick file, reroots the tree at the midpoint, and writes the processed tree data along with a status to JSON and text files, respectively.
7099	Find data points on the convex hull of a supplied data set.
7100	Map data points to the most similar basis vectors W.
7101	Median filter along the first axis of the feature matrix X.
7102	Generate a Gaussian kernel following Foote's method.
7103	Computes the self-similarity matrix of X.
7104	Computes the novelty curve from the self-similarity matrix X and the gaussian kernel G.
7105	Gaussian filter along the specified axis of the input feature matrix X.
7106	Computes the novelty curve from the structural features
7107	Shifts circularly a square matrix `X` to create a time-lag matrix.
7108	Time-delay embedding for a given dataset with specified dimensions and delay.
7109	Formats the plot with the correct axis labels, title, ticks, and so on.
7110	Plots all the boundaries. Parameters:
- `all_boundaries`: list
  A list of np.arrays containing the times of the boundaries, one array for each algorithm.
- `est_file`: str
  Path to the estimated file (JSON file).
- `algo_ids`: list
  List of algorithm ids to read boundaries from. If None, all algorithm ids are read.
- `title`: str
  Title of the plot. If None, the name of the file is printed instead.
7111	Plots all the labels for different algorithms and their ground truth boundaries.
7112	Plots the results of one track, with ground truth if it exists.
7113	Plots a given tree, containing hierarchical segmentation.
7114	Returns a set of segments defined by the bound_idxs.
7115	From a list of feature segments, return a list of 2D-Fourier Magnitude Coefs using the maximum segment size as main size and zero pad the rest.
7116	Computes the segment similarity of a file using various techniques, including kmeans, Dirichlet estimator, and XMeans estimator.
7117	Runs the training loop for the OLDA model
7118	Partial-fit the OLDA model
7119	Reads the boundary times and the labels from the audio file's references.
7120	Find the correct estimation from all the estimations contained in a JAMS file given the specified arguments.
7121	Saves the segment estimations in a JAMS file
7122	List of all the IDs of boundary algorithms in MSAF.
7123	Get the configuration dictionary from the current parameters of the algorithms to be evaluated.
7124	Get the files of the given dataset and return file structs sorted by audio file name.
7125	Reads hierarchical references from a jams file.
7126	Reads the duration of a given features file.
7127	Writes results to file using the standard MIREX format.
7128	Gets the desired dataset file.
7129	Load a ground-truth segmentation, and align times to the nearest detected beats.
7130	Estimates the beats using librosa.
7131	Reads the annotated beats if available. Returns the times of annotated beats in seconds and the frame indices of annotated beats.
7132	Make the features beat-synchronous.
7133	Reads the features from a file and stores them in the current object, checking for duration, global parameters, specific features parameters, and annotated beats if available.
7134	Saves features to file.
7135	Returns the parameter names for the instance, avoiding the global parameters.
7136	Computes the framesync times based on the framesync features.
7137	Return the frame times based on the type of features.
7138	Compute and return the features based on specified types and handle exceptions if the features cannot be computed.
7139	Selects the features from the given parameters.
7140	Obtain the actual features specified by the algorithm.
7141	Post processes the estimations from the algorithm, removing empty segments and ensuring the lengths of the boundaries and labels match.
7142	Runs the specified algorithm(s) on the MSAF formatted dataset using command-line arguments for various parameters like features, beats, frame-synchronous processing, and more.
7143	Prints the mean of the results in a DataFrame, logging a warning if no results are present.
7144	Computes the results by using the ground truth dataset identified by the annotator parameter.
7145	Computes the information gain of the est_file from the annotated intervals and the estimated intervals.
7146	Processes a single track.
7147	Based on the provided configuration and dataset, get the file name to store the results.
7148	Main process to evaluate algorithms' results.
7149	Add a new variable to msaf.config
7150	Computes all features for the given file.
7151	Computes the features for a selected dataset or file in parallel if n_jobs is greater than 1.
7152	Return the average log-likelihood of data under a standard normal distribution.
7153	Log-normalizes features such that each vector is between min_db to 0.
7154	Normalize features such that each vector is between floor to 1.
7155	Normalize the given matrix of features.
7156	Method to generate time frames based on duration and analysis parameters.
7157	Removes empty segments if needed.
7158	Sonifies the estimated click times into an output audio file.
7159	Synchronizes the labels from the old_bound_idxs to the new_bound_idxs.
7160	Processes a level of segmentation, and converts it into times.
7161	Align the end of the hierarchies such that they end at the same exact second as long as they have the same duration within a certain threshold.
7162	Calculate the distances of a specific data point to all other samples by slicing the data into smaller chunks for efficient computation.
7163	Estimates the K using K-means and BIC, by sweeping various K and choosing the optimal BIC.
7164	Returns the data with a specific label_index, using the previously learned labels.
7165	Runs k-means and returns the labels assigned to the data.
7166	Computes the Bayesian Information Criterion (BIC) for a given dataset, means, labels, number of clusters (K), and number of dimensions (R).
7167	Computes the magnitude of a complex matrix.
7168	Extracts the start boundaries from a JSON file representing segments and computes the end boundary by adding the duration of the last segment to the last start boundary, returning an array of boundaries.
7169	Extracts the boundaries from a bounds json file and puts them into an np array.
7170	Method to extract labels from a JSON file and convert them into a numpy array.
7171	Extracts the beats from the beats_json_file and puts them into an np array.
7172	Computes the 2D-FourierMagnitude Coefficients.
7173	Computes the labels using the bounds.
7174	Filter the activation matrix G and return a flattened copy.
7175	Obtains the boundaries module given a boundary algorithm identificator. Handles exceptions for non-existent algorithms and checks if the module can identify boundaries. Returns None for "ground truth".
7176	Obtains the label module given a label algorithm identificator.
7177	Run hierarchical algorithms with the specified identifiers on the audio_file.
7178	Runs the flat algorithms with the specified identifiers on the audio_file.
7179	Runs the algorithms with the specified identifiers on the audio_file.
7180	Prepares the parameters, runs the algorithms, and saves results.
7181	Main process to segment a file or a collection of files.
7182	Alternating least squares step to update W under the convexity constraint
7183	Main entry point for translator and argument parser
7184	Initializes a coroutine by priming it to the yield statement. Used as a decorator for functions that generate coroutines.
7185	Generic accumulator function which combines initial and update based on their types.
7186	Set task for translation.
7187	Consumes text streams and spools them together for more IO efficient processes.
7188	Coroutine starting point. Produces text stream and forwards to consumers
7189	Decorates a function returning the URL of a translation API. Creates and maintains HTTP connection state, returns a dict response object from the server containing the translated text and metadata of the request body.
7190	Returns a dictionary representing the request interface for translating a phrase from a source language to a target language, along with necessary headers and parameters.
7191	Opens up a file located under the etc directory containing language codes and returns them as a dictionary.
7192	Generates a formatted table of language codes
7193	Remove specified nodes and their connected edges from a network.
7194	Save a Network's data to a Pandas HDFStore.
7195	Build a Network from data in a Pandas HDFStore.
7196	Sets a variable related to nodes in a network and characterizes urban space.
7197	Aggregate information for every source node in the network based on the specified distance, type of aggregation, decay, impedance name, and variable name, and return a Pandas Series with the aggregated values for each source node.
7198	Assign node_ids to data specified by x_col and y_col
7199	Plot an array of data on a map using matplotlib and Basemap, automatically matching the data to the Pandana network node positions.
7200	Sets the location of all the POIs of a specified category. The POIs are connected to the closest node in the Pandana network, assuming no impedance between the variable's location and the closest network node.
7201	Find the distance to the nearest points of interest (POIs) from each source node, optionally including POI IDs.
7202	Identify nodes with fewer than a specified number of connections within a given distance.
7203	Process a node element entry into a dict suitable for going into a Pandas DataFrame.
7204	Make a request to OSM and return the parsed JSON.
7205	Build the string for a node-based OSM query.
7206	Search for OSM nodes within a bounding box that match given tags.
7207	Returns ``True`` if the input argument object is a native
regular expression object, otherwise ``False``.
7208	Compares two values with regular expression matching support, optionally using regex for string comparison.
7209	Simple function decorator allowing easy method chaining.
7210	Compare an string or regular expression against a given value.
7211	Triggers specific class methods using a simple reflection mechanism based on the given input dictionary params.
7212	Match the given HTTP request instance against the registered matcher functions in the current engine.
7213	Returns a matcher instance by class or alias name.
7214	Initializes a matcher instance passing variadic arguments to its constructor. Acts as a delegator proxy.
7215	Defines response body data.
7216	Defines the mock response JSON body.
7217	Sets a header field with the given value, removing previous values.
7218	Helper function to append functions and methods into a given list.
7219	Triggers request mock definition methods dynamically based on input keyword arguments passed to `pook.Mock` constructor. Registers request matchers.
7220	Define the mock URL to match, optionally including the protocol schema and path with query params. Returns the current Mock instance.
7221	Defines a dictionary of arguments with case-insensitive header keys and updates the Mock instance's request headers.
7222	Defines a new header matcher expectation that must be present in the outgoing request in order to be satisfied, no matter what value it hosts. Header keys are case insensitive.
7223	Defines a list of headers that must be present in the outgoing request in order to satisfy the matcher, no matter what value the headers hosts. Header keys are case insensitive. Argument: headers (list|tuple): header keys to match. Returns: self: current Mock instance.
7224	Defines the `Content-Type` outgoing header value to match.
7225	Defines a set of URL query params to match.
7226	Defines the body data to match.
7227	Define the JSON body to match.
7228	Defines a XML body value to match.
7229	Reads the body to match from a disk file.
7230	Enables persistent mode for the current mock. Returns the current Mock instance.
7231	Defines a simulated exception error that will be raised. Raises a RuntimeError if the input is a string. Returns the current Mock instance.
7232	Defines the mock response for a request.
7233	Matches an outgoing HTTP request against the current mock matchers. Returns a tuple indicating whether the mock matches the request and a list of error exceptions if applicable.
7234	Async version of activate decorator
7235	Set a custom mock engine, replacing the built-in one.
7236	Enables real networking mode, optionally passing one or multiple hostnames that would be used as filters. If at least one hostname matches with the outgoing traffic, the request will be executed via the real network.
7237	Creates and registers a new HTTP mock in the current engine.
7238	Remove a specific mock instance by object reference.
7239	Activates the registered interceptors in the mocking engine.Any HTTP traffic captured by those interceptors will trigger the HTTP mock matching engine to determine if a given HTTP transaction should be mocked out or not.
7240	Disables interceptors and stops intercepting any outgoing HTTP traffic.
7241	Verifies if real networking mode should be used for the given request, passing it to the registered network filters.
7242	Matches a given Request instance contract against the registered mocks. If a mock passes all the matchers, its response will be returned.
7243	Copies the current Request object instance for side-effects purposes.
7244	Enables the HTTP traffic interceptors. This function can be used as a decorator.
7245	Creates a new isolated mock engine to be used via context manager.
7246	Adds one or multiple HTTP traffic interceptors to the current mocking engine.
7247	Removes a specific interceptor by name. Returns True if the interceptor was disabled, otherwise False.
7248	Get key from connection or default to settings.
7249	Build SQL with decryption and casting.
7250	Save the original value.
7251	Tell postgres to encrypt this field with a hashing function. The `value` string is checked to determine if we need to hash or keep the current value. `compiler` and `connection` is ignored here as we don't need custom operators.
7252	### Example 4:
Input:
def get_col(self, alias, output_field=None):
    """Get the decryption for col."""
    if output_field is None:
        output_field = self
    if alias != self.model._meta.db_table or output_field != self:
        return DecryptedCol(
            alias,
            self,
            output_field
        )
    else:
        return self.cached_col
Output:
Get the decryption for col.
7253	Tell postgres to encrypt this field using PGP.
7254	Parses yaml and returns a list of repeated variables and the line on which they occur.
7255	Calculates the regression coefficients for a given vector containing the averages of tip and branch quantities.
7256	Return the inverse of the covariance matrix.
7257	Calculates the inverse covariance matrix using recursion
7258	Calculate the weighted sums of the tip and branch values and their second moments.
7259	Propagates averages, variance, and covariances along a branch
7260	Calculate standard explained variance
7261	Regress tip values against branch values
7262	Determine the position on the tree that minimizes the bilinear product of the inverse covariance and the data vectors.
7263	Initialize the merger model with a coalescent time.
7264	Calculates an interpolation object that maps time to the number of concurrent branches in the tree. The result is stored in self.nbranches.
7265	returns the cost associated with a branch starting at t_node
7266	Attaches the merger cost to each branch length interpolator in the tree.
7267	Determines the coalescent time scale that optimizes the coalescent likelihood of the tree.
7268	Convert profile to sequence and normalize profile across sites.
7269	Normalize a profile matrix to sum to one across each row. Optionally return the log of the scale factor for each row.
7270	Set a new GTR object with type checking.
7271	Create new GTR model if needed, and set the model as an attribute of the TreeAnc class
7272	Set the length of the uncompressed sequence, which is used as a general length scale and can't be changed once it is set.
7273	Attach sequences to nodes in a tree, handling partial and full alignments.
7274	Set link to parent and calculate distance to root for all tree nodes. Should be run once the tree is read and after every rerooting, topology change or branch length optimizations.
7275	Sets auxiliary parameters to every node of the tree.
7276	For each node in the tree, set its root-to-node distance as dist2root attribute
7277	Reconstruct ancestral sequences using specified method and options.
7278	Retrieves the mutation matrix for a specified branch in a phylogenetic tree, optionally expanding it to the full sequence. The matrix represents the joint distribution of sequence states at both ends of the branch, normalized.
7279	Expand a node's compressed sequence into the real sequence.
7280	Reconstruct ancestral states using Fitch's algorithm. The method requires sequences to be assigned to leaves. It implements the iteration from leaves to the root constructing the Fitch profiles for each character of the sequence, and then by propagating from the root to the leaves, reconstructs the sequences of the internal nodes.
7281	Determine the Fitch profile for a single character of the node's sequence. The profile is the intersection of the children's profiles or, if the latter is empty, the union of the profiles.
7282	Find the intersection of any number of 1D arrays. Return the sorted, unique values that are in all of the input arrays.
7283	Return the likelihood of the observed sequences given the tree.
7284	Calculate the likelihood of the given realization of the sequences in the tree
7285	Set branch lengths to either mutation lengths of given branch lengths. The assigned values are to be used in the following ML analysis.
7286	Optimize the branch lengths of the entire tree, assuming either the joint maximum likelihood sequence assignment or marginal sequence assignments. May need to be iterated.
7287	Optimizes global branch length using a minimization technique.
7288	Calculate the optimal branch length given the sequences of a node and its parent.
7289	Optimizes branch lengths and reconstructs ancestral sequences iteratively until convergence using the maximum-likelihood method.
7290	Get the multiple sequence alignment, including reconstructed sequences for the internal nodes.
7291	```function that returns the product of the transition matrix and the equilibrium frequencies to obtain the rate matrix of the GTR model```
7292	Create a GTR model by specifying the matrix explicitly
7293	Create standard model of molecular evolution.

Selects a specific model based on the input and passes keyword arguments to the model constructor. Available models include JC69, K80, F81, HKY85, T92, and TN93. Each model has specific parameters such as substitution rates and frequency concentrations. raising KeyError if the provided model is not available.
7294	Adjust the main diagonal of Q and fix it in case it does not correspond to the definition of the rate matrix. This should be run every time a custom GTR model is created.
7295	Calculate the probability of observing a sequence pair at a distance t, for compressed sequences
7296	Find the optimal distance between the two sequences considering pattern multiplicities and gap handling options.
7297	Find the optimal distance between the two sequences, for compressed sequences.
7298	Calculate the probability of observing a node pair at a distance t.
7299	Compute the probability of the sequence state of the child at time t later, given the parent profile.
7300	Calculate the log-likelihood of sampling a sequence from equilibrium frequency. Uses a numpy array for the sequence and an optional pattern multiplicity array.
7301	Set the branch length mode for a tree based on the input or empirical distribution. If `branch_length_mode` is not explicitly set, it defaults to 'input' if the maximum branch length is greater than 0.1, otherwise it defaults to 'joint'. If `self.aln` is not available, it defaults to 'input'.
7302	Labels outlier branches that don't seem to follow a molecular clock and excludes them from subsequent molecular clock estimation and the timetree propagation.
7303	Plot root-to-tip regression
7304	Resolve the polytomies on the tree. The function scans the tree, resolves polytomies if present, and re-optimizes the tree with new topology. Note that polytomies are only resolved if that would result in higher likelihood. Sometimes, stretching two or more branches that carry several mutations is less costly than an additional branch with zero mutations (long branches are not stiff, short branches are).
7305	Print the total likelihood of the tree given the constrained leaves.
7306	Add a coalescent model to the tree and optionally optimize
7307	Determine the node that, when the tree is rooted on this node, results in the best regression of temporal constraints and root to tip distances.
7308	Function to load or build a tree from an alignment if none is provided.
7309	Parses arguments referring to the GTR model and returns a GTR structure.
7310	Checks if input is VCF and reads in appropriately if it is
7311	Implementing treetime ancestral reconstruction
7312	Assess the width of the probability distribution. This returns the full-width-half-max
7313	Return a delta function distribution with the specified weight and minimum width.
7314	Multiplies a list of Distribution objects
7315	assign dates to nodes
7316	Instantiates a TreeRegression object and sets its tip_value and branch_value functions to defaults suitable for treetime instances. Accounts for phylogenetic covariation if specified.
7317	Calculate the most likely positions of unconstrained nodes using date constraints.
7318	Return the likelihood of the data given the current branch length in the tree.
7319	This function converts the estimated "time_before_present" properties of all nodes in the current tree to numerical dates stored in the "numdate" attribute. It further converts these numerical dates into a human-readable date string in the format %Y-%m-%d, assuming the usual calendar.
7320	Estimate the uncertainty in a particular numdate due to rate variation using previously calculated variations of the rate.
7321	If temporal reconstruction was done using the marginal ML mode, the entire distribution of times is available. This function determines the interval around the highest posterior probability region that contains the specified fraction of the probability mass. In absence of marginal reconstruction, it will return uncertainty based on rate variation. If both are present, the wider interval will be returned.
7322	Find the global minimum of a function represented as an interpolation object.
7323	Find the median of the function represented as an interpolation object.
7324	Convert datetime object to the numeric date format. The numeric date format is YYYY.F, where F is the fraction of the year passed.
7325	Create the conversion object automatically from the tree
7326	Socket connection.
7327	Terminate connection with Guacamole guacd server.
7328	Receive instructions from Guacamole guacd server.
7329	Send encoded instructions to Guacamole guacd server.
7330	Send encoded instruction.
7331	Establish connection with Guacamole guacd server via handshake.
7332	Convert a valid unicode string to a utf-8 encoded string.
7333	Loads a new GuacamoleInstruction from encoded instruction string.
7334	Encode argument to be sent in a valid GuacamoleInstruction.
7335	Prepare the instruction to be sent over the wire.
7336	Returns a versioned URI string for this class
7337	Returns the URL for the instance based on its ID. If the ID is invalid, raises an exception.
7338	Return a versioned URI string for the given class without pluralizing the class name.
7339	Download the file to the specified directory or file path. If no path is specified, downloads to a temporary directory. Returns the absolute path to the file.
7340	Get the commit objects parent Import or Migration
7341	Asks the user for their SolveBio credentials.
7342	Force an interactive login via the command line. Sets the global API key and updates the client auth.
7343	Prints information about the current user. Assumes the user is already logged-in.
7344	Prints information about the current user.
7345	Return this Query instance with the query args combined with existing set with AND. kwargs are simply passed to a new Filter object and combined to any other filters with AND. By default, everything is combined using AND. If you provide multiple filters in a single filter call, those are ANDed together. If you provide multiple filters in multiple filter calls, those are ANDed together. If you want something different, use the F class which supports & (and), | (or) and ~ (not) operators. Then call filter once with the resulting Filter instance.
7346	Shortcut to do range filters on genomic datasets.
7347	Shortcut to do a single position filter on genomic datasets.
7348	Returns a dictionary with the requested facets.
7349	Takes a list of filters and returns a JSON API filters
7350	Allows the Query object to be an iterable. This method will iterate through a cached result set and fetch successive pages as required. A StopIteration exception will be raised when there aren't any more results available or when the requested result slice range or limit has been fetched. Returns: The next result.
7351	Executes a query with additional parameters and returns the request and response.
7352	Migrate data from the Query to a target dataset.
7353	Main entry point for SolveBio CLI
7354	Recursively download a folder from a vault to a local directory. Only downloads files, not datasets.
7355	Ingest a dictionary of values to create and initialize a new object.
7356	Revoke the token and remove the cookie.
7357	Issues an HTTP Request across the wire via the Python requests library.
7358	Get Task child object class.
7359	Cancellation of a task with status update and exception handling.
7360	Parse Specialized INFO field data for SnpEff ANN fields.
7361	Converts a row into a parsed dictionary for JSON, generating a SolveBio variant ID (SBID) in the process.
7362	Returns the user's stored API key if a valid credentials file is found. Raises CredentialsError if no valid credentials file is found.
7363	Saves the class data in the format of a .netrc file.
7364	Format a value according to its type, supporting Unicode.
7365	Transform a supported data type to a list of lists, and a list of headers.
7366	Build a string representing a row of data cells with padding and truncation if necessary.
7367	Returns a string which represents a horizontal line.
7368	Prefix every cell in a row with an HTML alignment attribute.
7369	Produce a plain-text representation of the table using the provided format, headers, rows, column widths, and alignment settings.
7370	Migrate the data from this dataset to a target dataset.
7371	Parse a full or partial path and return a full path as well as a dict containing path parts.
7372	Given a folder or file, upload all the folders and files contained within it, skipping ones that already exist on the remote.
7373	Validate a full path from a full or partial path, handling special cases for the personal vault and filling in default values if necessary.
7374	Validate SolveBio API host url. Valid urls must not be empty and must contain either HTTP or HTTPS scheme.
7375	Add one or more files or URLs to the manifest. If files contain a glob, it is expanded. All files are uploaded to SolveBio. The Upload object is used to fill the manifest.
7376	Annotate a set of records with stored fields.
7377	This interface is used to evaluate the expression with the provided context and format.
7378	Set the default format name.
7379	Register a new output formatter.
7380	Format the headers and data using a specific formatter.
7381	Return an iterator to formatted tabular data.
7382	Return the config folder for an application, considering operating system and user preferences.
7383	Returns a list of system-wide config folders for the application.
7384	Read the default config file. Raises an error if validation fails.
7385	Read the default, additional, system, and user config files.
7386	Return the absolute path to the user config file.
7387	Get a list of absolute paths to the system config files.
7388	Get a list of absolute paths to the additional config files.
7389	Write the default config to the user's config file.
7390	Reads a list of config files and updates the configuration. Returns a dictionary of errors if any, or True otherwise.
7391	Truncate string values if it exceeds the specified maximum width.
7392	Replaces multiple substrings in a string using a list of tuples, where each tuple contains the substring to be replaced and its replacement.
7393	Run multiple commands in a row, exiting if one fails.
7394	Apply command-line options.
7395	Apply a command-line option.
7396	Set the default options.
7397	Run the linter.
7398	Generate and view the documentation.
7399	Truncate very long strings in data and headers for tabular representation.
7400	Format numbers according to a format specification. This uses Python's format specification to format numbers of the following types: :class:`int`, :class:`py2:long` (Python 2), :class:`float`, and :class:`~decimal.Decimal`.
7401	Format a row using the provided headers.
7402	Wrap vertical table in a function for TabularOutputFormatter.
7403	Wrap terminaltables inside a function for TabularOutputFormatter.
7404	Copy template and substitute template strings
7405	is the type a numerical value?
7406	Checks if the given PKCS#11 type is a boolean value.
7407	Is the type a byte array value?
7408	generate a secret key
7409	Generates a key pair using the specified templates and mechanism, returning the handles for the public and private keys.
7410	Find the objects matching the template pattern.
7411	Inserts a small icon to QR Code image
7412	Export gene panels to .bed like format Specify any number of panels on the command line
7413	Given a weekday and a date, will increment the date until it's weekday matches that of the given weekday, then that date is returned.
7414	Add 'num' to the day and count that day until we reach end_repeat, or until we're outside of the current month, counting the days as we go along.
7415	Starts from 'start' day and counts backwards until 'end' day. 'start' should be >= 'end'. If it's equal to, does nothing. If a day falls outside of end_repeat, it won't be counted.
7416	Created to take some of the load off of _handle_weekly_repeat_out
7417	Handle either a non-repeating event chunk, or the first month of a repeating event chunk.
7418	export causative variants for a collaborator
7419	Creates the lines for an excel file with verified variants for an institute
7420	Export mitochondrial variants for a case to create an MT excel report.
7421	Update a user's role and institute access in the database.
7422	Display a list of STR variants.
7423	Display a specific structural variant.
7424	Display a specific STR variant.
7425	Start procedure to validate variant using other techniques.
7426	Build a clinVar submission form for a variant.
7427	Show cancer variants overview.
7428	ACMG classification form.
7429	Show or delete an ACMG evaluation.
7430	Calculate an ACMG classification from submitted criteria.
7431	Parse gene panel file and fill in HGNC symbols for filter
7432	Download all verified variants for user's cases
7433	Return a dictionary with hgnc symbols as keys
7434	Add information of incomplete penetrance for genes based on HPO lines and alias genes.
7435	Gather information from different sources and return a gene dict
7436	Sends a request to MatchMaker and returns its response.
7437	Return the available MatchMaker nodes
7438	Get the cytoband coordinate for a position
7439	Get the subcategory for a VCF variant.
7440	Return the length of a variant.
7441	Return the end coordinate for a variant.
7442	Extract coordinates information from a variant.
7443	Process the input file, parse the cytoband data, and print specific coordinate intervals.
7444	Show all panels for a case. Handle panel creation and modification via POST request.
7445	Update panel to a new version.
7446	Export a panel to a PDF file.
7447	Edit additional information about a panel gene.
7448	Add delivery report to an existing case.
7449	Retrieves a list of HPO terms from scout database. store an adapter to the scout database query the term to search in the database limit the number of desired results returns hpo_phenotypes the complete list of HPO objects stored in scout
7450	Show all objects in the whitelist collection
7451	Build a small phenotype object with phenotype_id and description using the scout.adapter.MongoAdapter.
7452	Outputs a dictionary containing information about a gene from a given HGNC ID, including build-specific details, aliases, symbol, description, and other relevant data.
7453	Fetch matching genes and convert to JSON.
7454	Display the Scout dashboard.
7455	Show all transcripts in the database
7456	Returns the events that occur on the given day.
7457	Pre-process list of SV variants.
7458	Pre-process list of STR variants.
7459	Pre-process an STR variant entry for detail page Adds information to display variant
7460	Pre-process an SV variant entry for detail page. Adds information to display variant.
7461	Parse information about variants - Adds information about compounds - Updates the information about compounds if necessary
7462	Returns a header for the CSV file with variants to be exported, including specified fields for each sample in the case.
7463	Get variant information
7464	Get sift predictions from genes.
7465	Pre-process case for the variant view. Adds information about files from case obj to variant.
7466	Find out BAI file by extension given the BAM file.
7467	Retrieves observations for a specific variant, including total case count and details of other related cases within the same institute.
7468	Parse variant genes and select refseq transcripts as "primary".
7469	Generate amino acid change as a string
7470	Calculate the end position for a variant based on its reference and alternative bases.
7471	Return a judgement on the overall frequency of the variant by combining multiple metrics into a single call.
7472	Converts CLINSIG evaluations in a variant object to human-readable format and adds links to the ClinVar website.
7473	Compose link to 1000G page for detailed information.
7474	Compose link to COSMIC Database.
7475	Compose link to Beacon Network.
7476	Compose link to UCSC.
7477	Translate SPIDEX annotation to human readable string.
7478	Returns a list of manual inheritance models for the given variant.
7479	Return info about callers.
7480	Fetch data related to cancer variants for a case.
7481	Gather the required data for creating the clinvar submission form.
7482	Collects all variants from the clinvar submission collection with a specific submission_id and returns the data to display the clinvar_update.html template page.
7483	Collect data relevant for rendering ACMG classification form.
7484	Calculate an ACMG classification based on a list of criteria.
7485	Fetch and fill-in evaluation object.
7486	Upload a panel and extract HGNC symbols from a stream, filtering out non-existing symbols.
7487	Collects all verified variants from multiple institutes, exports them, and saves them to Excel files in a specified directory.
7488	Export all genes from the database
7489	Get the clnsig information
7490	Converts a string of compound information into a list of compounds.
7491	Export all genes from a build
7492	Build an Individual object from a dictionary containing individual information.
7493	Upload variants to a case. The `variants` method is used to upload different types of variants (cancer, somatic variant, single nucleotide variant, short tandem repeat) to a given case in a database. The inputs include the context, case ID, institute, force flag, cancer research data, somatic variant research data, single nucleotide variant clinical data, single nucleotide variant research data, STR clinical data, chromosome, start position, end position, HGNC ID, HGNC symbol, and rank threshold. The method first checks if the case is found in the database, then deletes existing variants of the same type for the case, and finally loads the new variants. If no files are specified to upload, it logs an informative message.
7494	Return a variant based on the given institute and case IDs.
7495	Show all collections in the database.
7496	Creates a new institute and adds it to the database
7497	Update an institute with provided parameters using the specified context.
7498	Return a opened file
7499	Returns the net value of 'next' minus 'prev' querystrings from a request.
7500	Returns the next and previous querystrings based on the input integer.
7501	Checks that the year is within 50 years from now.
7502	Make sure any event day we send back for weekday repeating events is not a weekend. Adjusts the date to the nearest weekday by adding or subtracting days as specified.
7503	Parse all necessary data for loading a case into Scout.
7504	Parse peddy outfiles to add information to individuals, including ancestry and sex checks, and update parent confirmation status.
7505	Parse individual information from a sample dictionary.
7506	Parse the individual information and reformat sample information to proper individuals.
7507	Parse case information from config or PED files.
7508	Parse out minimal family information from a PED file.
7509	Build a evaluation object ready to be inserted to database
7510	Exports all mitochondrial variants for each sample of a case and writes them to an Excel file.
7511	Checks if the criteria for Pathogenic classification as per ACMG paper are fulfilled.
7512	Check if the criteria for Likely Pathogenic is fulfilled based on ACMG classification.
7513	Check if criteria for Likely Benign are fulfilled
7514	Use the algorithm described in ACMG paper to get a ACMG classification
7515	Add extra information about genes from gene panels to a variant object.
7516	Returns variants specified in question for a specific case. If skip not equal to 0 skip the first n variants.
7517	Return all variants with sanger information.
7518	Returns the specified variant based on the provided document_id and optional case_id. If a case_id is provided, it searches for the variant within that case. If the variant is found, it populates gene information and checks if the chromosome is a sex chromosome.
7519	Return all variants seen in a given gene. If skip not equal to 0, skip the first n variants.
7520	Return all verified variants for a given institute
7521	Return all causative variants for an institute
7522	Check if there are any variants that are previously marked causative within an institute and filter them based on a given case.
7523	Find the same variant in other cases marked causative.
7524	Delete variants of one type for a case. This is used when a case is reanalyzed.
7525	Return overlapping variants.
7526	Returns variants that have been evaluated for a given case_id, including those with 'acmg_classification', 'manual_rank', 'dismiss_variant', or comments.
7527	Produce a reduced vcf with variants from the specified coordinates. This is used for the alignment viewer.
7528	Given a list of variant ids, retrieves variant objects found in a specific patient based on the category and genotype call.
7529	Connects to a MongoDB database and returns a client
7530	Extracts objects to be saved in the clinvar database collection based on variant IDs, form fields, and object type.
7531	Determines which fields to include in a CSV header based on a list of submission objects.
7532	Create the lines to include in a Clinvar submission csv file from a list of submission objects and a custom document header
7533	Load all the transcripts from Ensembl, map them to Ensembl genes, and build transcript objects with the correct refseq identifiers.
7534	Add a gene panel to the database.
7535	Builds an Exon object from a dictionary containing exon information.
7536	Delete a version of a gene panel or all versions of a gene panel
7537	Delete all indexes in the database.
7538	Delete a user from the database
7539	Delete all genes in the database.
7540	Delete all exons in the database
7541	Deletes a case and its variants from the database.
7542	Show all individuals from all cases in the database.
7543	Parses a list of matchmaker matches objects and returns a readable list of matches for display in matchmaker matches view.

Input:
max_objs (list): list of match objs returned by MME server for the patient

Output:
parsed_matches (list): a list of parsed match objects
7544	Display cases from the database.
7545	Returns the currently active user as an object.
7546	Login a user if they have access.
7547	Builds an institute object with the given parameters and removes any None values.
7548	Delete an event from the database.
7549	Create a new event with the given parameters and save it to the database.
7550	Fetch events from the database.
7551	Fetch all events by a specific user.
7552	Add a new phenotype term to a case by creating a phenotype term and event with the given information.
7553	Remove an existing phenotype from a case.
7554	Add a comment to a variant or a case.
7555	Parses the genotype calls for a variant
7556	Check if the variant is in the interval given by the coordinates.
7557	Render search box and view for HPO phenotype terms.
7558	Export all transcripts to .bed like format.
7559	Load exons into the scout database.
7560	Load all variants in a region to an existing case.
7561	Returns all events that have an occurrence within the given month & year.
7562	Returns a queryset of events that will occur again after 'now'. Used to help generate a list of upcoming events.
7563	Recursively parse requirements from nested pip files.
7564	Check if gene is already added to a panel.
7565	Update an existing gene panel with genes.
7566	Create a new gene panel.
7567	Preprocess a panel of genes()
7568	Get information about a case from archive.
7569	Migrate case information from archive, including updating collaborators, assignees, suspected/causative variants, synopsis, and phenotype groups/terms.
7570	Update all information that was manually annotated from an old instance.
7571	Upload research variants to cases.
7572	Loads genes into the database by fetching and linking information from various sources.
7573	Show all hpo terms in the database
7574	Flask app factory function.
7575	Configure Flask extensions.
7576	Registers Flask blueprints.
7577	Setup coverage related extensions and configure language settings
7578	Show all alias symbols and how they map to ids
7579	Builds a gene_panel object using panel information and an adapter.
7580	Exports variants which have been verified for an institute and writes them to an Excel file.
7581	Export causatives for a collaborator in .vcf format
7582	Returns string representing variant in vcf format
7583	Start the web server using the provided context, configuration, host, port, debug mode, and livereload setting.
7584	Generate an md5-key from a list of arguments.
7585	Setup Flask application for connecting to MongoDB.
7586	Setup connection to the database and initialize collections for various data models.
7587	Create indexes for the database.
7588	Setup a scout database.
7589	Setup a scout demo instance with a case, gene panel, and variants.
7590	Setup scout instances and establish a connection to a MongoDB database.
7591	Retrieve institutes from the database and display them in a tabular format.
7592	Parse the genetic models entry of a vcf.
7593	Show all gene panels in the database.
7594	Method to add a institute to the database.
7595	Update the information for an institute.
7596	Featch a single institute from the backend
7597	Checks if a given string is a valid date according to the pattern "YYYY-MM-DD".
7598	Returns a datetime object if there is a valid date. Raises an exception if the date is not valid. Returns today's date if no date is provided.
7599	Export a list of genes based on HPO terms.
7600	Parse the rank score entry for a given case ID.
7601	Add a user to the database.
7602	Check if a connection could be made to the mongo process specified
7603	This callback can be used to initialize an application for the use with a MongoDB setup. It ensures that a database session is opened using configurations provided in the Flask application's config. If the connection fails, the application will abort with an error message.
7604	Load a delivery report into a case in the database. If the report already exists and 'update' is False, raise an IntegrityError.
7605	Add a user object to the database.

Args:
    user_obj(scout.models.User): A dictionary with user information
    
Returns:
    user_info(dict): a copy of what was inserted
7606	Visualize BAM alignments.
7607	Load all the exons from ensembl and check that the transcript that the exon belongs to exists in the database.
7608	Update all compounds for a case
7609	Update a gene object with links based on various identifiers such as hgnc_id, ensembl_id, entrez_id, etc.
7610	Query the hgnc aliases
7611	Parse an HGNC-formatted line.
7612	Parse lines with hgnc formated genes.
7613	Retrieve or create an open ClinVar submission for a user and institute.
7614	Saves an official ClinVar submission ID in a ClinVar submission object
7615	Retrieve the official Clinvar submission ID for a submission object using its submission ID.
7616	Adds submission_objects to clinvar collection and update the corresponding submission object with their ids
7617	Sets the status of a clinvar submission to 'closed' and updates other submissions for the same user accordingly.
7618	Collects all open and closed ClinVar submissions created by a user for an institute.
7619	Remove a variant object from clinvar database and update the relative submission object
7620	Get all variants included in clinvar submissions for a case
7621	Parses a .obo formatted HPO (Human Phenotype Ontology) line
7622	Render a search box for genes. If the query contains an HGNC ID, redirect to the associated gene page. Otherwise, return a list of up to 20 genes.
7623	Render information about a gene.
7624	Return JSON data about genes.
7625	Make sure that the gene panels exist in the database Also check if the default panels are defined in gene panels
7626	Load all variants in a region defined by a HGNC id
7627	Load a new case from a Scout config.
7628	Template decorator.
7629	Fetch institute and case objects and validate user access.
7630	Return list of institutes based on user's role.
7631	Retrieves the HGNC ID for a gene based on priority: 1) if provided, 2) if the symbol matches a proper HGNC symbol, or 3) one of several aliases at random.
7632	Update a panel in the database. Check if the panel exists, validate the update date if provided, and then call `update_panel` to update the panel with the new version and date.
7633	Updates disease terms in a mongo database using omim information.
7634	Load the omim phenotypes into the database and find the associated hpo terms.
7635	Parses frequencies from a variant's info fields or transcripts and returns a dictionary of relevant frequencies.
7636	Parse any frequency from the info dict
7637	Read and parse specific frequency information from a variant, converting values to appropriate data types (either integer or float) and filtering out zero values.
7638	Show all users in the database
7639	Builds a hgnc_gene object from gene information.
7640	Loads a gene panel based on the parsed information, builds the panel object, performs integrity checks, and loads it into the database.
7641	Loads the OMIM-AUTO panel from the db and adds it with updates if file has changed.
7642	Check if the latest version of OMIM differs from the most recent in database Return all genes that were not in the previous version.
7643	Set the correct version for each gene. Loop over the genes in the new panel.
7644	Add a gene panel to the database.
7645	Fetch a gene panel by '\_id'.
7646	Delete a panel by '_id'.
7647	Fetch a gene panel based on the panel_id and version. If version is None, return the latest version of the panel. If no panel is found, return None.
7648	Return all gene panels. If a panel_id is provided, return all versions of panels by that panel name.
7649	Fetch all gene panels and group them by gene
7650	Replace a existing gene panel with a new one. Keeps the object id.
7651	Adds a pending action to a gene panel. Stores the pending actions in panel.pending.
7652	Apply the pending changes to an existing gene panel or create a new version of the same panel.
7653	Return all the clinical gene symbols for a case.
7654	Interact with cases existing in the database.
7655	Emit a record. Format the record and send it to the specified addressees.
7656	Add the proper indexes to the scout instance.
7657	Update the indexes

If there are any indexes that are not added to the database, add those.
7658	Delete all indexes for the database.
7659	Build a MongoDB query to filter variants based on input criteria.
7660	Build a mongo query based on provided criteria.
7661	Add clinsig filter values to the mongo query object.
7662	Adds genomic coordinates-related filters to the query object.
7663	Adds gene-related filters to the query object.
7664	Drop the mongo database given.
7665	Parses user submitted CSV stream into a list of genes with associated transcripts and models.
7666	Build a clinical signature object from the given information.
7667	Load a bulk of hgnc gene objects and handle any write concerns.
7668	Load a bulk of transcript objects to the database.
7669	Load a bulk of exon objects to the database
7670	Fetch a HGNC gene by identifier and build number
7671	Query the genes with a hgnc symbol and return the hgnc id
7672	Fetch all hgnc genes that match a hgnc symbol. Check both hgnc_symbol and aliases.
7673	Fetch all hgnc genes
7674	Return the number of hgnc genes in collection. If build is used, return the number of genes of a certain build
7675	Delete the genes collection
7676	Deletes the transcripts collection. If a build is specified, it deletes the collection for that specific build; otherwise, it deletes the entire transcripts collection.
7677	Delete the exons collection.
7678	Return a dictionary with ensembl ids as keys and transcripts as value. Args: build(str) Returns: ensembl_transcripts(dict): {<enst_id>: transcripts_obj, ...}
7679	Return a dictionary with hgnc_symbol as key and gene_obj as value
7680	Return a iterable with hgnc_genes. If the gene symbol is listed as primary the iterable will only have one result. If not the iterable will include all hgnc genes that have the symbol as an alias.
7681	Return a dictionary with hgnc symbols as keys and a list of hgnc ids as values.
7682	Return a dictionary with ensembl ids as keys and gene objects as value. Args: build(str) Returns: genes(dict): {<ensg_id>: gene_obj, ...}
7683	Check if a hgnc symbol is an alias and return the correct hgnc symbol, if not existing return None.
7684	Add the correct hgnc id to a set of genes with hgnc symbols
7685	Return a dictionary with chromosomes as keys and overlapping genomic intervals as values, representing coding regions of overlapping genes.
7686	Update the automate generated OMIM gene panel in the database.
7687	Display a list of cases for an institute.
7688	Display one case.
7689	Display all MatchMaker matches for a given case if authorized.
7690	Starts an internal match or a match against one or all MME external nodes
7691	Remove a case from MatchMaker
7692	Visualize case report
7693	Download a PDF report for a case, including coverage report and handling case pedigree visualization.
7694	Add or remove a diagnosis for a case.
7695	Handles adding or removing phenotypes from a case.
7696	Performs actions on multiple phenotypes based on the specified action type.
7697	Handle events.
7698	Update status of a specific case.
7699	Assign and unassign a user from a case.
7700	Search for HPO terms.
7701	Mark a variant as sanger validated.
7702	Mark a variant as confirmed causative.
7703	Displays a delivery report for a given institute and case, optionally filtering by a specific date.
7704	Share a case with a different institute.
7705	Request a case to be rerun.
7706	Open the research list for a case.
7707	Download vcf2cytosure file for individual.
7708	Load multiqc report for the case.
7709	Preprocess case objects.
7710	Gather contents to be visualized in a case report
7711	Posts a request to chanjo-report and captures the body of the returned response to include it in a case report.
7712	Get all Clinvar submissions for a user and an institute
7713	Collects MT variants and formats them for export in Excel.
7714	```Update the synopsis if it has changed and create an event linking to the case.```
7715	Return the list of HGNC symbols that match annotated HPO terms.
7716	Converts a VCF file to a Cytosure file for an individual.
7717	Find MultiQC report for the case.
7718	Gets all variants for an institute having Sanger validations ordered but still not evaluated
7719	Adds a patient to MatchMaker server.
7720	Deletes all affected samples for a case from MatchMaker
7721	Show Matchmaker submission data for a sample and eventual matches.
7722	Initiates a MatchMaker match against either other Scout patients or external nodes.
7723	Load the hgnc aliases to the mongo database.
7724	Parse how the different variant callers have performed
7725	Build a hgnc\_transcript object from transcript information.
7726	Load a institute into the database
7727	Check if the cadd phred score is annotated
7728	Load a case into the database.
7729	this method is used to update a variant document in the database and return the updated variant.
7730	Updates the manual rank for all variants in a case. Variant rank is based on the rank score. The rank is updated whenever variants are added or removed from a case.
7731	Update compounds for a variant. Add all the necessary information of a variant on a compound object. Returns a list of updated compound objects.
7732	Update the compounds for a set of variants.
7733	Update the compound information for a bulk of variants in the database.
7734	Updating the compounds for a case by looping over all coding intervals and variant types, and performing bulk operations for updating variants within a gene.
7735	Load a variant object into the database.
7736	Load a variant object, if the object already exists update compounds.
7737	Load a bulk of variants
7738	Assign a user to a case.
This function will create an Event to log that a person has been assigned to a case. It will also add the user to the case "assignees" and return the updated case.
7739	Share a case with a new institute.
7740	Diagnose a case using OMIM ids
7741	Mark a case as checked from an analysis point of view.
7742	Create events for variant and case verification.
7743	Get all variants with validations ever ordered.
7744	Mark validation status for a variant.
7745	Create an event for marking a variant causative.
7746	Create an event for updating the manual dismiss variant entry
7747	Create an event for updating the ACMG classification of a variant and update the variant's ACMG classification in the database.
7748	Generate the necessary ids for a variant, including simple_id, variant_id, display_name, and document_id.
7749	Parse the simple id for a variant
7750	Parse the unique document id for a variant by combining the provided arguments and generating an md5 hash.
7751	Convert a gene panel with hgnc symbols to a new one with hgnc ids.
7752	Create a new variant id based on the given variant object and family ID.
7753	Return the number of cases based on the given institute_id.
7754	Update the dynamic gene list for a case. Adds a list of dictionaries to case['dynamic_gene_list'] that looks like {hgnc_symbol: str, hgnc_id: int, description: str}.
7755	Fetches a single case from the database using either the _id or a combination of institute_id and display_name.
7756	Delete a single case from the database based on the provided case_id, institute_id, or display_name.
7757	Adds a case to the database and raises an exception if the case already exists.
7758	Replaces an existing case with a new one, keeping the object ID. Updates the `updated_at` field to the current datetime. Returns the updated case.
7759	Update case id for a case across the database.
7760	Submit an evaluation to the database, including retrieving relevant information, building an evaluation object, loading it, and updating the ACMG classification.
7761	Return all evaluations for a certain variant.
7762	Parse and massage the transcript information
7763	Parse a dataframe containing ensembl gene information and yield dictionaries with gene details.
7764	Parse a dataframe with ensembl transcript information.
7765	Parse an ensembl formatted line and extract relevant information into a dictionary.
7766	Parse lines with ensembl formated genes.
7767	Parse lines with ensembl formatted exons. Yield a dictionary with relevant information for each exon.
7768	Parse a dataframe with Ensembl exon information and yield gene information.
7769	Initializes the log file in the proper format. Configures both console and file handlers for logging, with options to disable logging or set log levels.
7770	Parse a line of OMIM data into a dictionary using the provided header.
7771	Parse OMIM morbid lines.
7772	Get a dictionary with phenotypes
7773	This method is used to parse OMIM files and extract information related to genes and phenotypes. It handles input files such as morbid, genemap, mim2gene, and mim_titles. The method checks for the presence of input files and processes them to extract gene information. Additionally, it aborts the context if certain conditions are not met.
7774	Convert a string to number. If int convert to int otherwise float. If not possible return None.
7775	Return a formatted month as a table.
7776	Format day for calendar and set URL.
7777	Change colspan to "5", add "today" button, and return a month name as a table row.
7778	Populate variables used to build popovers. Sets the display month, when, where, description, and title2 based on the event's attributes.
7779	Parse metadata for a gene panel from the header of a panel file.
7780	Parse a gene line with information from a panel file
7781	Parse a file with genes and return the hgnc ids.
7782	Parse the gene panel information from a file and return a gene panel dictionary.
7783	Show all diseases in the database.
7784	Update the hpo terms in the database. Fetch the latest release and update terms.
7785	Display a list of all users and which institutes they belong to.
7786	Parses conservation predictors from a variant dictionary.
7787	Get the conservation prediction for a given variant and info key.
7788	Return general information about cases.
7789	Return the information about case groups
7790	Returns a JSON response, transforming 'context' to make the payload.
7791	Get the year and month from query strings or set to the current year and month.
7792	Check if any events are cancelled on the given date 'd'.
7793	Fetch a hpo term.
7794	Return all HPO terms. If a query is sent hpo_terms will try to match with regex on term or description.
7795	Return a disease term

Checks if the identifier is a disease number or a id
7796	Return all disease terms that overlap a gene. If no gene, return all disease terms.
7797	Load a disease term into the database.
7798	Generate a sorted list with namedtuples of hpogenes
7799	Populate Filterbank instance with data from HDF5 file. Not recommended for future use, please use Waterfall to open HDF5 files.
7800	Setup frequency axis based on start and stop frequencies. Calculates the channel indices and creates a frequency array.
7801	Setup time axis.
7802	Populate Filterbank instance with data from Filterbank file
7803	Computes Local Sidereal Time (LST) for an observation based on the telescope ID and a coordinate system.
7804	Replace the median of a range of samples with DC value in coarse channels.
7805	Print header information
7806	Setup ploting edges.
7807	Visualize waterfall plot of data.
7808	Plot the time series with optional frequency range, logging, orientation, and MJD_time.
7809	Writes data to a blimpy file in filterbank (.fil) format.
7810	Divide the data by the median value for every frequency fine channel.
7811	Converts a data array with length n_chans to an array of length n_coarse_chans by averaging over the coarse channels.
7812	Applies a Mueller matrix for calibration given differential gains and phase differences for observation data, considering the specified feed type and channel configuration.
7813	Write Stokes-calibrated filterbank file for a given observation with a calibrator noise diode measurement on the source.
7814	Calculates fractional linear and circular polarizations from a rawspec cross polarization .fil file.
7815	Writes two new filterbank files containing fractional linear and circular polarization data
7816	Returns the index of the closest value in xarr to the given value val.
7817	Rebin data by averaging bins together.
7818	upgrade data from nbits to 8bits
7819	Returns ON-OFF for all Stokes parameters given a cross_pols noise diode measurement
7820	Plots the uncalibrated full Stokes spectrum of a noise diode. If `diff=True`, it plots the ON-OFF difference spectrum; otherwise, it plots both the ON and OFF spectra separately.
7821	Plots the corrected noise diode spectrum for a given noise diode measurement after application of the inverse Mueller matrix for the electronics chain.
7822	Plot the calculated gain offsets of each coarse channel along with the time averaged power spectra of the X and Y feeds.
7823	Open a HDF5 or filterbank file and return an instance of a Reader to read data from the file.
7824	Making sure the selection if time and frequency are within the file limits. Adjusts the selection range based on input parameters and file boundaries, ensuring valid time and frequency values.
7825	Calculate the size of data of interest based on the number of integrations, frequency channels, and bytes per channel.
7826	Calculate the shape of the data of interest based on the time and frequency ranges requested.
7827	Setup channel borders
7828	Updating frequency borders from channel values
7829	Populate time axis based on the number of integrations requested and update the header if needed.
7830	Populate frequency axis
7831	Calculates the number of coarse channels in a given file. This is based on the number of channels and the channel bandwidth. For non-Breakthrough Listen data, it may not work due to the lack of a-priori knowledge of the digitizer system.
7832	Given the blob dimensions, calculate how many fit in the data selection.
7833	Check if the current selection is too large.
7834	Read and load data from a file within a specified range.
7835	read all the data. If reverse=True the x axis is flipped.
7836	Read a block of data from a file. The number of samples per row is set in self.channels. If reverse=True, the x axis is flipped.
7837	Read data selection if small enough.
7838	Updates the header information from the original file to the selection.
7839	Print header information and other derived information.
7840	Write data to .fil file and decide write method based on file size.
7841	Write data to HDF5 file. Check file size then decide how to write the file.
7842	Write data to HDF5 file in one go.
7843	Sets the blob dimensions, trying to read around 1024 MiB at a time. This is assuming a chunk is about 1 MiB.
7844	Sets the chunking dimensions depending on the file type.
7845	Extracts a portion of data by frequency range.
7846	Command line tool for plotting and viewing info on guppi raw files.
7847	Read first header in file.
7848	Count the number of data blocks in a file by reading headers and checking for the end of file.
7849	Compute some basic stats on the next block of data.
7850	Plots a histogram of data values.
7851	Generate a blimpy header dictionary based on the first header read from a file.
7852	Script to find the header size of a filterbank file
7853	Compares two .fil files using md5sum by stripping their headers.
7854	Command line tool for converting guppi raw into HDF5 versions of guppi raw
7855	Returns time-averaged spectra of the ON and OFF measurements in a calibrator measurement with flickering noise diode.
7856	Folds Stokes I noise diode data and integrates along coarse channels.
7857	Calculate the fluxes of a calibrator source in a particular frequency range based on given properties and spectral index.
7858	Returns central frequency of each coarse channel
7859	Calculate f_ON, and f_OFF as defined in van Straten et al. 2012 equations 2 and 3.
7860	Calculate the coarse channel spectrum and system temperature of the noise diode in Jy given two noise diode measurements ON and OFF the calibrator source with the same frequency and time resolution.
7861	Return frequency dependent system temperature given observations on and off a calibrator source.
7862	Calibrates Stokes I for an observation using a noise diode measurement and a diode spectrum with the same number of coarse channels.
7863	Return the length of the blimpy header, in bytes
7864	Return True if the given filename is a filterbank file.
7865	Apply a quick patch-up to a Filterbank header by overwriting a header value.
7866	Generate a serialized sigproc header which can be written to disk.
7867	Convert an astropy.Angle to the ridiculous sigproc angle format string.
7868	Calculate the number of integrations in a given file.
7869	Convert a Traceback into a dictionary representation
7870	Make a subparser for a given type of DNS record
7871	Make an ArgumentParser that accepts DNS RRs
7872	Remove comments from a zonefile.
7873	Ensures that each line of input text has a name defined, using '@' if no name is present.
7874	Parses a line of text into a dictionary based on a parser and updates the set of parsed records.
7875	Parse a zonefile into a dict.
7876	Parse a zonefile into a dict
7877	Quote a field in a list of DNS records. Return the new data records.
7878	Parse and return a PySchema class from an avsc string.
7879	This function builds a Python package from a collection of classes, organizing them into modules based on namespace hierarchy. It uses `PackageBuilder` to generate the package structure, handling imports and indentation levels as specified.
7880	Generate Python source code for one specific class.
7881	Temporarily disable automatic registration of records in the auto_store
7882	Dump record in json-encodable object format
7883	Create a Record instance from a json-compatible dictionary
7884	Create a Record instance from a json serialized dictionary
7885	Add record class to record store for retrieval at record load time.
7886	Find a record by name. If the name has a namespace, try the full name first before stripping it and trying the last part.
7887	Return a dictionary the field definition Should contain all fields that are required for the definition of this field in a pyschema class
7888	Decorator for mixing in additional functionality into field type.
7889	Create proper PySchema class from cls. Transfer any methods and attributes to the new object.
7890	Return a python dict representing the jsonschema of a record
7891	Return a root jsonschema for a given record A root schema includes the $schema attribute and all sub-record schemas and definitions.
7892	Converts a file object with JSON serialized pyschema records to a stream of pyschema objects.
7893	Writes a stream of JSON-serialized PySchema Records to a file object. Can be used as job.writer in luigi.hadoop.JobTask.
7894	Set a value at the front of an OrderedDict by creating a copy and modifying it.
7895	Specify a query string to use with the collection and return a SearchResult.
7896	Sends all filters to the API.
7897	_returns all entities present in the collection with `attributes` included._
7898	Returns the entity in the correct collection. If the "href" value in the result does not match the current collection, it attempts to find the collection that the "href" refers to.
7899	Returns another quote character if possible, otherwise raises a ValueError.
7900	Escape values passed to filter correctly.
7901	Constructs an elementary rotation matrix for a rotation around the x, y, or z-axis.
7902	Construct a covariance matrix using astrometric parameter standard uncertainties and their correlations from the Gaia catalogue, considering parallax, radial velocity, and their uncertainties.
7903	Calculate radial velocity error from V-band magnitude and spectral type, averaged over the sky. The error is derived using a calibration floor and coefficients based on the spectral type.
7904	Calculate the parallax error for the given input source magnitude and colour
7905	Calculate the single-field-of-view-transit photometric standard error in the G band as a function of G. A 20% margin is included.
7906	Return the photometric standard error in the G band as a function of G-band magnitude with a 20% margin.
7907	Makes a plot of photometry performance predictions based on given arguments.
7908	Returns the average number of transits across the Gaia focal plane for given ecliptic latitude values, averaged over ecliptic longitude.
7909	Calculate the angular distance between pairs of sky coordinates.
7910	Rotates Cartesian coordinates from one reference system to another using the rotation matrix with which the class was initialized. The inputs can be scalars or 1-dimensional numpy arrays.
7911	Converts sky coordinates from one reference system to another, making use of the rotation matrix with which the class was initialized. Inputs can be scalars or 1-dimensional numpy arrays.
7912	Transform the astrometric covariance matrix to its representation in the new coordinate system.
7913	Look up numerical factors to apply to the sky-averaged parallax error for a given astrometric parameter, considering Ecliptic latitude and the number of transits.
7914	Plot relative parallax errors as a function of distance for stars of a given spectral type.
7915	Generates a plot showing the radial velocity errors for different star types based on given parameters.
7916	Utility function for selecting the first non-null query.
7917	Decorator for eval_ that prints a helpful error message if an exception is generated in a Q expression
7918	Convert to unicode, and add quotes if initially a string
7919	Call `func` on each element in the collection. If multiple functions are provided, each item in the output will be a tuple of `func(item)` for each `func` in `self`. Returns a new `Collection`.
7920	Return a new Collection excluding some items
7921	Return a new Collection with some items removed.
7922	Return a new Collection with the last few items removed.
7923	Return a new Collection with the first few items removed based on the given function.
7924	Zips the items of this collection with one or more other sequences, and wraps the result. All sequences must be the same length. Returns a new collection.
7925	Find a single Node among this Node's descendants. Returns :class:`NullNode` if nothing matches.
7926	Return potential locations of IACA installation.
7927	Iterate over groups of simple regex-like expressions. Yield characters or ranges.
7928	Register options for describing groups of registers using regular expressions.
7929	Return a LIKWID event string from an event tuple or keyword arguments.
7930	Compile list of minimal runs for given events.
7931	Report analysis outcome in human readable form.
7932	Print a human-readable report of the model's performance, including details about CPU and memory bottlenecks, IACA analysis, and overall performance summary.
7933	Report the generated model in human-readable form.
7934	Naive comment and macro striping from source code
7935	Round float to next multiple of base.
7936	Return a list of block indices for a given list of integers, splitting the integers into blocks of a specified size and starting the first block at an optional initial boundary.
7937	Dispatches to cache predictor to get cache stats.
7938	Calculate performance model cycles from cache stats. calculate_cache_access() needs to have been execute before.
7939	Run complete analysis and return results.
7940	```
Run complete analysis and return results.
```
7941	Strip whitespaces and comments from assembly lines.
7942	Returns a new list of assembly lines with all unreferenced labels removed.
7943	Return the best block selected based on a simple heuristic.
7944	Let user interactively select byte increment.
7945	Let user interactively select block.
7946	Inserts IACA marker into list of ASM instructions at given indices.
7947	Add IACA markers to an assembly file.
7948	Execute command line interface.
7949	Set up and execute model with given blocking length
7950	Return list of evenly spaced integers over an interval. Numbers can either be evenly distributed in a linear space (if log is False) or in a log space (if log is True).
7951	Return datetime object of latest change in kerncraft module directory.
7952	Check arguments passed by user that are not checked by argparse itself.
7953	Initialize and run command line interface.
7954	Handle command line arguments for merging multiple pickle files into one.
7955	Create a sympy.Symbol with positive and integer assumptions.
7956	Transforms an AST of a multidimensional declaration into a single dimension declaration. Performs an in-place operation and returns the name and dimensions of the array.
7957	Transform ast of multidimensional reference to a single dimension reference. In-place operation!
7958	Return list of nodes of a specific type in AST.
7959	Will make any functions return an iterable objects by wrapping its result in a list.
7960	Check that information about kernel makes sense and is valid.
7961	Set constant of name to value.
7962	Substitute constants in expression unless it is already a number.
7963	Return a dictionary with all array sizes.
7964	Return the offset from the iteration center in number of elements. The order of indices used in access is preserved.
7965	Removes duplicate source and destination accesses.
7966	Return the number of global loop iterations that are performed. If dimension is not None, it is the loop dimension that is returned (-1 is the inner most loop and 0 the outermost).
7967	Yield loop stack dictionaries in order from outer to inner. If subs_consts is True, substitute constants in the start, stop, and increment values.
7968	Return the order of indices as they appear in array references. Use *source* and *destination* to filter output.
7969	Return a dictionary of lists of sympy accesses, for each variable.
7970	Return load and store distances between accesses.
7971	Return sympy expressions translating global_iterator to loop indices
7972	Returns global iterator sympy expression
7973	Transform a dictionary of indices to a global iterator integer.
7974	Return global iterator with last iteration number
7975	Print kernel information in human readable format.
7976	Print variables information in human-readable format.
7977	Prints constants information in human-readable format to the specified output file.
7978	Print source code of kernel to specified output.
7979	Convert mathematical expressions to a sympy representation. Handles IDs, constants, and binary operations like multiplication, addition, and subtraction.
7980	Return a tuple of offsets of an ArrayRef object in all dimensions. The index order is right to left (c-code order). If aref is actually a c_ast.ID, None will be returned.
7981	Return base name of ArrayRef object.
7982	Return index type used in loop nest. If index type between loops differ, an exception is raised.
7983	Generate constants declarations
7984	Return array declarations.
7985	Return kernel loop nest including any preceding pragmas and following swaps.
7986	Generate declaration statements for arrays, transform multi-dimensional arrays to one-dimensional arrays, and initialize with malloc. Return the list of declarations nodes and a dictionary of array names and original dimensions.
7987	Returns the innermost for loop in the loop nest.
7988	Generate initialization statements for arrays.
7989	Generates a false if branch with dummy calls
7990	Build and return a kernel function declaration.
7991	Build and return scalar variable declarations with optional initialization
7992	Generate and return compilable source code with kernel function from AST. Optionally, generate OpenMP code and save to file.
7993	Generate and return kernel call ast.
7994	Generate and return compilable source code from AST.
7995	Run an IACA analysis and return its outcome. *asm_block* controls how the to-be-marked block is chosen. *pointer_increment* is the number of bytes the pointer is incremented after the loop.
7996	Compiles source to executable with likwid capabilities and returns the executable name.
7997	Convert any string to a sympy object or None.
7998	Return identifier which is either the machine file name or sha256 checksum of data.
7999	Return datetime object of modified time of machine file. Return now if not a file.
8000	Return a cachesim.CacheSimulator object based on the machine description.
8001	Return best fitting bandwidth based on cache level, number of read and write streams, and threads per core.
8002	Return tuple of compiler and compiler flags. Selects compiler and flags from machine description file, commandline arguments or call arguments.
8003	Parse events in machine description to tuple representation used in Benchmark module.
8004	Enforce that no ranges overlap in internal storage.
8005	Return local folder path of header files.
8006	Align iteration with cacheline boundary.
8007	Return a list with the number of loaded cache lines per memory hierarchy level.
8008	Return a list with the number of hit cache lines per memory hierarchy level.
8009	Return a list with the number of missed cache lines per memory hierarchy level.
8010	Return a list with the number of stored cache lines per memory hierarchy level.
8011	Return a list with the number of evicted cache lines per memory hierarchy level.
8012	Return verbose information about the predictor.
8013	Fix environment variable to a value within context. Unset if value is None.
8014	Configure argument parser.
8015	Report gathered analysis data in human-readable form.
8016	Parse the description from the README file
8017	Schedule a retry
8018	Build and return a Sailthru purchase item object using the provided course and purchase details.
8019	Record a purchase in Sailthru
8020	Get course information using the Sailthru content API or from cache.
8021	Get course information using the Ecommerce course api. In case of error returns empty response. Arguments: course_id (str): course key of the course site_code (str): site code Returns: course information from Ecommerce
8022	Maintain a list of courses the user has unenrolled from in the Sailthru user record
8023	Sends the course refund email using the provided details.
8024	Sends a notification email to a user when an offer assignment occurs, and retries the email if it fails.
8025	Generate a dictionary containing logging configuration based on the specified parameters.
8026	Retry with exponential backoff until fulfillment succeeds or the retry limit is reached. If the retry limit is exceeded, the exception is re-raised.
8027	Fulfills an order by making a request to the ecommerce API and handling potential errors such as HTTP client and server errors or timeouts. If the order is already fulfilled or a temporary error occurs, it retries the fulfillment request.
8028	Returns a Sailthru client for the specified site.
8029	Get an object from the cache by key. Returns the cached object if it exists and is not expired, otherwise returns `None`. Expired keys are removed from the cache.
8030	Save an object in the cache.
8031	Get a value from configuration. Retrieves the value corresponding to the given variable from the configuration module currently in use by the app. Optionally specifies a site_code to check for a site-specific override. Raises an error if the variable is not found.
8032	Get the name of the file containing configuration overrides from the provided environment variable.
8033	Finds the value depending on the current EnergyPlus version.
8034	Return the most recent Energy Plus version if `_eplus_version` is not defined.
8035	Generate a dictionary mapping file references to their respective file information.
8036	Populates records from JSON data and activates hooks, links, and external files.
8037	An external file manages file paths.
8038	All fields of Epm with a default value and that are null will be set to their default value.
8039	This function finalizes initialization, ensuring all field descriptors and tags are filled before proceeding. It identifies the cycle length and start, prepares patterns for the cycle, detaches unnecessary field descriptors, and stores cycle information. It also updates field descriptor cycle start indices for error messages during serialization.
8040	manages extensible names
8041	Calculate short references on the fly to avoid managing registrations and un-registrations.
8042	Get the value of a specified column from the first row that matches a given filter criterion.
8043	update value in a data structure, considering various types of values and their potential side effects.
8044	Updates simultaneously all given fields.
8045	Deprecated. Default values should be documented in fields
8046	This method allows adding values to extensible fields without specifying field names or indexes. It prepares update data and updates the record accordingly.
8047	Remove a value at a specified index from the field, shift other values to fill the gap, and return the serialized value of the removed field.
8048	Insert a value at the specified index and shift all other following values.
8049	Deletes a record from the database and unregisters it from links, hooks, and external files.
8050	Register a record hook with a target record and validate if the key already exists.
8051	Registers a link with its source and target records, setting the appropriate field descriptors and storing the link by both source and target.
8052	Create regex and return. If error occurs returns None.
8053	Returns the remaining duration for a recording.
8054	### Output:
Converts this object to a dictionary for serialization to JSON.
8055	Make an HTTP request to a given URL with optional parameters.
8056	Get available service endpoints for a given service type from the Opencast ServiceRegistry.
8057	Try to create a directory. Pass without error if it already exists.
8058	Get the location of a given service from Opencast and add it to the current configuration.
8059	Register this capture agent at the Matterhorn admin server so that it shows up in the admin interface.
8060	Send the state of the current recording to the Matterhorn core.
8061	Update the status of a particular event in the database.
8062	Update the current agent state in opencast. Determines reported agent state with priority list and registers it.
8063	Find the best match for the configuration file.
8064	Update configuration from file.
8065	Check configuration for sanity.
8066	Initialize logger based on configuration
8067	Serve the status page of the capture agent.
8068	Serve the preview image with the given id.
8069	Start all services.
8070	Parse Opencast schedule iCalendar file and return events as dict
8071	Fetch and parse a calendar schedule from the Matterhorn core, and update the database with upcoming events.
8072	Main loop, retrieving the schedule.
8073	Main loop to update capture agent state.
8074	Return a response with a jsonapi error object
8075	Return a response with a list of jsonapi data objects
8076	Serve a JSON representation of internal agent state as metadata
8077	Serve a JSON representation of events
8078	Return a specific events JSON
8079	Deletes a specific event identified by its UID. Optionally deletes recorded files on disk. Returns 204 if successful, 404 if event does not exist.
8080	Modify an event specified by its uid. The modifications for the event are expected as JSON with the content type correctly set in the request. The method checks the validity of the data, updates the event if it exists, and returns the updated event details.
8081	Extracts the set of configuration parameters from the properties attached to the schedule.
8082	Ingest a finished recording to the Opencast server.
8083	Start the capture process, creating all necessary files and directories, and ingesting the captured files if no backup mode is configured.
8084	Returns a simple fragment with HTML, JavaScript, and CSS.
8085	Returns list of unique `FragmentResource`s by order of first appearance.
8086	Returns the fragment in a dictionary representation.
8087	Returns a new Fragment from a dictionary representation.
8088	Adds content to this fragment. The content parameter is a Unicode string that represents HTML to be appended to the body of the fragment. It is crucial that the content parameter does not contain a `<body>` tag, nor does it assume that it is the sole content on the page.
8089	Add a resource needed by this Fragment.
8090	Add a resource by URL needed by this Fragment.
8091	Registers a Javascript function to initialize the Javascript resources.
8092	Get some resource HTML for this Fragment. `placement` is "head" or "foot". Returns a unicode string, the HTML for the head or foot of the page.
8093	Return HTML representation of a resource based on its mimetype and kind.
8094	Render a fragment to HTML or return JSON describing it, based on the request.
8095	Renders a standalone page as a response for the specified fragment.
8096	Render the specified fragment to HTML for a standalone page.
8097	Calculate pFDR, q-values, and other statistics from sorted p-values and a lambda threshold.
8098	Converts list or flattens n-dim array to 1-dim array if possible.
8099	Find matching q-value for each score in 'scores'
8100	Compute posterior probabilities for each chromatogram
8101	Create artificial cutoff sample points from given range of cutoff values in df, number of sample points is 'num_cut_offs'
8102	Constructs a summarized error table for specified q-values, extracting the best matching rows from the input DataFrame.
8103	Computes error statistics for target values using a set of decoy scores, including p-values, q-values, and other metrics, with options for parametric and non-parametric methods.
8104	Finds cut off target score for specified false discovery rate fdr
8105	Conduct semi-supervised learning and error-rate estimation for MS1, MS2, and transition-level data.
8106	Infer peptidoforms after scoring of MS1, MS2 and transition-level data.
8107	Infer peptides and conduct error-rate estimation in different contexts.
8108	Infer proteins and conduct error-rate estimation in different contexts.
8109	Subsample an OpenSWATH file to a minimum for integrated scoring
8110	Reduce scored PyProphet file to minimum for global scoring
8111	Backpropagate multi-run peptide and protein scores to single files
8112	Filter sqMass files.
8113	Returns a restclients.Group object for the group identified by the passed group ID.
8114	Creates a group from the passed restclients.Group object.
8115	Deletes the group identified by the passed group ID.
8116	Returns a list of restclients.GroupMember objects for the group identified by the passed group ID.
8117	Updates the membership of the group represented by the passed group id. Returns a list of members not found.
8118	Returns a count of effective members for the group identified by the passed group ID.
8119	Checks if a netid is a member of a group.
8120	Modify the Sphinx documentation configuration by adding custom extensions and setting the theme to "sphinx_rtd_theme".
8121	Create 3 datasets in a group to represent the sparse array.
8122	Decrypts context.io_manager's stdin and sends that to context.io_manager's stdout.
8123	Returns a stdin-suitable file-like object based on the optional os_path and optionally skipping any configured sub-command.
8124	Returns a stdout-suitable file-like object based on the optional os_path and optionally skipping any configured sub-command.
8125	Returns a stderr-suitable file-like object based on the optional os_path and optionally skipping any configured sub-command.
8126	Returns a debug-output-suitable file-like object based on the optional os_path and optionally skipping any configured sub-command.
8127	Yields a stdin-suitable file-like object based on optional parameters and handles cleanup.
8128	Returns a context manager that yields a file-like object for stdout, potentially skipping a sub-command and handling file closure.
8129	A context manager yielding a stderr-suitable file-like object, optionally skipping a sub-command and handling disk closure.
8130	A context manager yielding a debug-output-suitable file-like object based on the optional os_path and optionally skipping any configured sub-command.
8131	Deletes all objects and containers in the account. You must set `yes_empty_account` to True to verify you really want to do this. By default, this will perform one pass at deleting all objects and containers; so if objects revert to previous versions or if new objects or containers otherwise arise during the process, the account may not be empty once done. Set `until_empty` to True if you want multiple passes to keep trying to fully empty and delete the containers. Note that `until_empty=True` could run forever if something else is making new items faster than they're being deleted.
8132	Deletes all objects in a container. Optionally performs multiple passes until container is fully empty. Handles exceptions and updates concurrency.
8133	Convert an optional file keyword argument into an actual value, whether it be a passed value, a value obtained from an io_manager, or sys.stdout.
8134	Convert an optional file keyword argument into an actual value, whether it be a passed value, a value obtained from an io_manager, or sys.stderr.
8135	Outputs the error msg to the file if specified, or to the io_manager's stderr if available, or to sys.stderr.
8136	Outputs help information to the file if specified, or to the io_manager's stdout if available, or to sys.stdout.
8137	Outputs usage information to the file if specified, or to the io_manager's stdout if available, or to sys.stdout.
8138	Outputs version information to the specified file or io_manager's stdout if available, or to sys.stdout.
8139	Performs a direct HTTP request to the Swift service.
8140	POSTs the account and returns the results. Uses the CDN management interface if specified.
8141	Sends a DELETE request to the account and returns the results. Requires verification to ensure the intent is to delete the entire account unless a bulk delete is specified.
8142	HTTP PUT operation to create or update a container, optionally with additional headers and query parameters.
8143	HTTP HEAD operation for an object.
8144	GETs the object and returns the results.
8145	PUTs the object and returns the results. This is used to create or overwrite objects.
8146	POSTs the object and returns the results. This is used to update the object's header values.
8147	Resolve an option value into options by setting options.<option_name> to a resolved value with a priority order of options, os.environ, and self.context.conf.
8148	Returns a new CLIContext instance that is a shallow copy of the original, much like dict's copy method.
8149	Outputs headers in a formatted manner to a file-like object, optionally filtering out headers in a mute list.
8150	Authenticates and then outputs the resulting information.
8151	Generate a temporary URL that is valid for a specified number of seconds, using the given method, URL, and key to sign the request.
8152	Return a URL encoded string for the given value, protecting the safe characters, and ensure the value is UTF-8 encoded.
8153	Issues commands for each item in an account or container listing.
8154	Obtains a client for use, whether an existing unused client or a brand new one if none are available.
8155	Encrypt a content stream using AES 256 in CBC mode.
8156	Decrypts a content stream using AES 256 in CBC mode.
8157	Performs PUTs rooted at the path using a directory structure pointed to by context.input_.
8158	Performs a PUT on the account.
8159	Performs a PUT operation on the specified container path using the provided context and handles the response accordingly.
8160	Returns body for manifest file and modifies put_headers.
8161	Create container for segments of file with `path`
8162	Generates a TempURL and sends that to the context.io_manager's stdout.
8163	Translates any information that can be determined from the x_trans_id and sends that to the context.io_manager's stdout.
8164	Outputs help information.
8165	Check whether the "file" is empty by reading a single byte.
8166	Encrypts context.io_manager's stdin and sends that to context.io_manager's stdout using the provided key.
8167	Get the status of a commit.
8168	Retrieve data for a specific pull request from a GitHub repository using the provided configuration and pull request number.
8169	Get the last 30 pull requests from a repository.
8170	Mark all `SliderItemTitle` objects as published.
8171	Returns the published slider items.
8172	Renders the hero slider.
8173	Acquire the lock to read.
8174	Release the lock after reading.
8175	Acquire the lock to write
8176	Add a task to the registry using a unique task_id.
8177	Remove a task from the registry based on the provided task identifier. If the task is not found, a `NotFoundError` is raised.
8178	Retrieve a task from the registry using its task identifier. When the task does not exist, a `NotFoundError` exception will be raised.
8179	Returns the list of tasks sorted by task_id.
8180	Returns a dict with the representation of this task configuration object.
8181	Create an configuration object from a dictionary.
8182	Execute a Perceval job on RQ.
8183	Initializes the archive manager with a given path, raising an error if the path is empty.
8184	Run the backend with the given parameters. The method will run the backend assigned to this job, storing the fetched items in a Redis queue. The ongoing status of the job can be accessed through the property `result`. When `resume` is set, the job will start from the last execution, overwriting 'from_date' and 'offset' parameters, if needed. Setting to `True` the parameter `fetch_from_archive`, items can be fetched from the archive assigned to this job. Any exception during the execution of the process will be raised.
8185	Executes a backend of Perceval using the given arguments. Raises an AttributeError if any required parameters are not found. Returns an iterator of items fetched by the backend, including metadata related to the job. Optionally retrieves items from an archive if parameter `fetch_from_archive` is set to True.
8186	Configure the index to work with
8187	Creates a mapping in an Elasticsearch index.
8188	Custom JSON encoder handler
8189	Write items to the queue.
8190	Add and schedule a task.
8191	Remove and cancel a task.
8192	Get the items fetched by the jobs.
8193	Check that the task arguments received are valid. Ensure that `task_id`, `backend`, and `category` are not empty, and that `backend_args` is a dictionary if provided.
8194	Parse the archive arguments of a task.
8195	Custom method to execute a job and notify of its result.
8196	Schedule a job in the given queue.
8197	Cancel the job related to the given task.
8198	Run thread to listen for jobs and reschedule successful ones.
8199	Listen for completed jobs and reschedule successful ones.
8200	Start scheduling jobs.
8201	Schedule a task.
8202	Cancel 'un-schedule' a task based on its identifier.
8203	Handles successful jobs by rescheduling them based on task configuration and job results.
8204	Handle failed jobs
8205	Build the set of arguments required for running a job.
8206	Gets contents of secret file
8207	Register the API view class in the bananas router.
8208	Register a generic class based view wrapped with ModelAdmin and fake model.
8209	Extended DRF with fallback to requested namespace if request.version is missing
8210	Get or generate human readable view name.
8211	Derives a PEP386-compliant version number from VERSION
8212	Get engine or raise exception, resolves Alias-instances to a sibling target.
8213	Perform a lookup in _ENGINE_MAPPING using engine_string.
8214	Get database name and database schema from path.
8215	Return a Django-style database configuration based on the given URL. Parses the URL and extracts the necessary components to construct a dictionary with keys in uppercase, suitable for Django's database settings.
8216	Parse a database URL and return a DatabaseInfo named tuple.
8217	Log in Django staff user
8218	Retrieve logged in user info
8219	Change password for logged in django staff user
8220	This method is used to build a URL field for a serializer in Django REST Framework (DRF). It takes in a field name and a model class as parameters. The method calls the superclass's `build_url_field` method, and then sets the `view_name` parameter in the keyword arguments to the URL name of the detail view for the specified model class. The method returns the field and updated keyword arguments.
8221	Parse string to bool, returning True if the string is "True", "Yes", "On", or "1", False if "False", "No", "Off", or "0", and raising a ValueError for other values.
8222	Parse numeric string to int. Supports oct formatted string.
8223	Return appropriate parser for given type.
8224	Get and parse prefixed Django settings from environment.
8225	Work-in-progress constructor, consuming fields and values from django model instance.
8226	Implementation of Y64 non-standard URL-safe base64 variant. converts base64-encoded result with substituted ``{"+", "/", "="} => {".", "_", "-"}``.
8227	Create a field by field info dict.
8228	Creates a Validator instance from a data structure dictionary
8229	Generate a Cartesian product of the input parameter dictionary
8230	Takes a list of explored parameters and finds unique parameter combinations. If parameter ranges are hashable operates in O(N), otherwise O(N**2).
8231	Helper function to turn simple logging kwargs into a `log_config` dictionary.
8232	Decorator to allow a simple logging configuration.
8233	Tries to make directories for a given `filename`. Ignores any error but notifies via stderr.
8234	Returns all valid python strings inside a given argument string.
8235	Renames a given `filename` with valid wildcard placements.
8236	Adds a logger with a given name. If no name is given, it constructs the name as `type(self).__name__`.
8237	Extracts wildcards and file replacements from the `trajectory`
8238	Displays a progressbar
8239	Check and replace parser arguments for filenames, create directories if specified
8240	Turns a ConfigParser into a StringIO stream.
8241	Searches for multiprocessing options within a ConfigParser. If such options are found, they are copied (without the `'multiproc_'` prefix) into a new parser.
8242	Searches for multiprocessing options in a given dictionary. If found, they are copied into a new dictionary without the 'multiproc_' prefix.
8243	Checks and converts all logging-related settings passed to the Manager, handling multiprocessing options as well.
8244	Checks for filenames within a config file and translates them, creating necessary directories for the files.
8245	Recursively walks and copies the log_config dict, searches for filenames, translates filenames, and creates directories if necessary.
8246	Creates logging handlers and redirects stdout.
8247	Finalizes the manager, closes and removes all handlers if desired.
8248	starts redirection of `stdout`
8249	Writes data from buffer to logger.
8250	Compare two result instances, ignoring the comment.
8251	Compares two parameter instances. Checks full name, data, and ranges. Does not consider the comment. Returns True or False. Raises ValueError if both inputs are no parameter instances.
8252	Can be used to decorate a function as a manual run function. This can be helpful if you want the run functionality without using an environment.
8253	This is a decorator which can be used to mark functions as deprecated. It will result in a warning being emitted when the function is used. Additional message can be added to the warning.
8254	If there exist mutually exclusive parameters, checks for them and maps param2 to 1.
8255	Handle the change in name of a keyword argument over different versions by providing support for both the old and new names. Issues a warning when the old argument is used and converts the call to the new API.
8256	Decorator for retrying a function 'n' times.
8257	Decorator to add the prefix naming scheme
8258	Adds all necessary parameters to `traj`.
8259	Creates and runs a BRIAN network based on parameters from the `traj` object, including neuron groups, spike monitors, and state monitors for membrane voltage, and then records and reports results.
8260	Simulates the solution of a differential equation using Euler's method.
8261	Adds all necessary parameters to the `traj` container for simulating a 3-D differential equation, the Lorenz attractor.
8262	### Lorenz attractor differential equation
Calculates the derivatives of the x, y, and z components of the Lorenz system based on the given parameters sigma, beta, and rho.
8263	Create a storage service instance from a constructor, filter out unused keyword arguments.
8264	Creates a storage service, to be extended if new storage services are added.
8265	Adds all necessary parameters to the `traj` container based on the differential equation type specified.
8266	A differential equation that defines the Roessler attractor system. It calculates the changes in the x, y, and z components of the system based on the current values and constant parameters.
8267	Compress an HDF5 file to reduce its size by using the compression properties from a given trajectory in the file. The function calls the `ptrepack` command from the command line and handles the backup of the original file if required.
8268	Checks if any of the parameters in `group_node` is explored.
8269	Computes model equations for the excitatory and inhibitory population.
8270	Pre-builds the neuron groups if none of the relevant parameters are explored.
8271	Builds the neuron groups.
8272	Builds neuron groups from `traj`, adds them to `brian_list` and `network_dict`.
8273	Pre-builds the connections for the network if all relevant parameters and neuron groups exist.
8274	Builds the connections if they have not been pre-built.
8275	Adds all necessary parameters to `traj` container.
8276	Computes the Fano Factor for one neuron over a specified time window, considering spike events within a given range.
8277	Computes average Fano Factor over many neurons.
8278	Calculates average Fano Factor of a network.
8279	Adds monitors to the network based on the current subrun ordering
8280	Adds monitors to the network.
8281	Makes a subfolder for plots.
8282	Plot a state variable graph for several neurons into one figure.
8283	Makes some plots and stores them into subfolders for a given trajectory.
8284	Extracts monitor data and plots. Data extraction is done if all subruns have been completed, i.e. `len(subrun_list)==0`. First, extracts results from the monitors and stores them into `traj`. Next, uses the extracted data for plots.
8285	Function that parses the batch id from the command line arguments
8286	Chooses exploration according to `batch`
8287	Return a variable node associated with the current node, creating it if necessary.
8288	Alternative naming, you can use `node.func.name` instead of `node.f_func`
8289	Renames the tree node.
8290	Sets some details for internal handling.
8291	Maps a given node and a store_load constant to the message that is understood by the storage service.
8292	Removes a subtree from the trajectory tree. Does not delete stuff from disk only from RAM.
8293	Deletes a single node from the tree.
8294	Removes a single node from the tree. Only from RAM not from hdf5 file!
8295	Removes a given node from the tree. Starts from a given node and walks recursively down the tree to the location of the node we want to remove. We need to walk from a start node in case we want to check on the way back whether we got empty group nodes due to deletion.
8296	Maps a given shortcut to corresponding name
8297	Adds the correct sub branch prefix to a given name.
8298	Determines types for generic additions based on the start node and flags for adding a leaf or link.
8299	Adds a given item to the tree irrespective of the subtree. Infers the subtree from the arguments.
8300	Adds a new item to the tree. The item can be an already given instance or it is created new.
8301	Creates a link and checks if names are appropriate
8302	Checks if a list contains strings with invalid names. Returns a description of the name violations. If names are correct the empty string is returned.
8303	Generically creates a new group inferring from the `type_name`.
8304	Generically creates a novel parameter or result instance inferring from the `type_name`. If the instance is already supplied it is NOT constructed new.
8305	Renames a given `instance` based on `parent_node` and `name`. Adds meta information like depth as well.
8306	Returns an iterator over nodes hanging below a given start node.
8307	Returns an iterator over a node's children. In case of using a trajectory as a run, some sub branches that do not belong to the run are blinded out.
8308	Iterator function traversing the tree below `node` in breadth-first search manner.
This function yields nodes based on the given conditions and predicates.
The traversal is limited by the `max_depth` parameter and only sub-branches of the run specified by `run_name` are considered if provided.
8309	Fast search for a node in the tree using reference dictionaries.
8310	Searches for an item in the tree below `node`.
8311	Performs a backwards search from the terminal node back to the start node
8312	Return an alternative naming for node.kids.name.
8313	Can be called from storage service to create a new group to bypass name checking
8314	Can be called from storage service to create a new leaf to bypass name checking
8315	Returns a list of all children names. If self.v_root.v_auto_load is True and an interface is available, attempts to load the children with skeleton data.
8316	Creates a dummy object containing the whole tree to make unfolding easier. Useful for debugging purposes.
8317	Returns the parent of the node. Raises a TypeError if the current node is the root.
8318	Adds an empty generic group under the current node.
8319	Adds a link to an existing node. Can be called as ``node.f_add_link(other_node)`` to add a link with the link name as the name of the node, or as ``node.f_add_link(name, other_node)`` to add a link with a given name. Colon separated names are not allowed.
8320	Removes a link from the current group node with a given name.
8321	Adds an empty generic leaf under the current node.
8322	Recursively removes the group and all its children.
8323	Removes a child of the group
8324	Checks whether the node contains a specific parameter or result.
8325	Similar to `f_get`, but returns the default value if `name` is not found in the
trajectory.
This function uses the `f_get` method and will return the default value
in case `f_get` raises an AttributeError or a DataNotInStorageError.
Other errors are not handled.
In contrast to `f_get`, fast access is True by default.
8326	Returns a dictionary of children nodes. If `copy` is `True`, it returns a shallow copy of the group's original dictionary; otherwise, it returns the original dictionary.
8327	Returns a dictionary of groups hanging immediately below this group.
8328	Returns a dictionary of all leaves hanging immediately below this group.
8329	Returns a link dictionary.
8330	Stores a child or recursively a subtree to disk.
8331	Stores a group node to disk
8332	Loads a child or recursively a subtree from disk.
8333	Loads a group from disk.
8334	Adds an empty parameter group under the current node.
8335	Adds a parameter under the current node.
8336	Adds an empty result group under the current node. The group name is prefixed with the current node's full name, and subgroups can be specified using colons.
8337	Adds a result under the current node. Allows adding a result instance, passing values directly, or using a specific result constructor. Automatically prefixes the result name with the current node's path.
8338	Adds an empty derived parameter group under the current node. Automatically creates parent groups if needed based on the provided name. The name can include subgroups separated by colons.
8339	Adds a derived parameter under the current group. Similar to :func:`~pypet.naturalnaming.ParameterGroup.f_add_parameter`. Naming prefixes are added as in :func:`~pypet.naturalnaming.DerivedParameterGroup.f_add_derived_parameter_group`.
8340	Adds an empty config group under the current node.
8341	Adds a config parameter under the current group.
If current group is the trajectory the prefix `'config'` is added to the name.
8342	Fitness function that calculates the sum of an individual and stores the result.
8343	Adds commit information to the trajectory.
8344	Makes a commit and returns if a new commit was triggered and the SHA-1 code of the commit. If `git_fail` is `True`, the program fails instead of triggering a new commit given uncommitted changes, and a `GitDiffError` is raised.
8345	Flatten a nested dictionary by concatenating keys with a specified separator.
8346	Nests a given flat dictionary.
8347	Plots a progress bar to the given logger for large for loops.
8348	Helper function to support both Python versions. Return the arguments and whether the function uses `**kwargs`.
8349	Takes a function and keyword arguments and returns the ones that can be passed.
8350	Converts a timestamp to a human-readable format.
8351	Returns local TCP address for a given port, automatically assigning a port if none is specified.
8352	Like os.makedirs but takes care of race conditions
8353	Reset the progressbar to start a new one
8354	Calculates remaining time as a string
8355	Returns annotations as dictionary.
8356	Removes `key` from annotations
8357	Returns all annotations lexicographically sorted as a concatenated string.
8358	Turns a given shared data item into a regular one.
8359	Turns an ordinary data item into a shared one. Removes the old result from the trajectory and replaces it. Empties the given result.
8360	Creates shared data on disk using a StorageService. Requires certain keyword arguments depending on the data type (e.g., 'obj' for numpy arrays or 'description' for PyTables tables).
8361	Interface with the underlying storage. Passes request to the StorageService that performs the appropriate action.
8362	Returns the actual node of the underlying data. In case one uses HDF5, this will be the HDF5 leaf node.
8363	Checks if outer data structure is supported.
8364	Calls the corresponding function of the shared data item
8365	Target function that manipulates the trajectory. Stores the current name of the process into the trajectory and overwrites previous settings.
8366	Handles locking of locks. If a lock is already locked, sends a WAIT command; else locks it and sends GO. Complains if a given client re-locks a lock without releasing it before.
8367	Notifies the server to shutdown
8368	Closes socket and terminates context. NO-OP if already closed.
8369	Starts connection to server if not existent. No-op if connection is already established. Makes ping-pong test as well if desired.
8370	Send request and receive response with retries.
8371	Acquires lock and returns `True`. Blocks until lock is available.
8372	Handles listening requests from the client. It manages four types of requests: checking space in the queue, testing the socket, sending data if space is available, and storing data after it is sent.
8373	Sends data to server if there is space in the queue, otherwise waits for 10 milliseconds until space becomes available.
8374	Detects if lock client was forked by comparing the PID of the current process with the stored PID. If a fork is detected, restarts the connection.
8375	Handles data and returns `True` or `False` if everything is done.
8376	Starts listening to the queue.
8377	Gets data from queue.
8378	Gets data from pipe.
8379	Acquire a lock before storage and release it afterwards.
8380	Simply keeps a reference to the stored data
8381	Stores references to disk and may collect garbage.
8382	Decorator wrapping the environment to use a config file
8383	Collects all settings within a section.
8384	Collects all info from three sections.
8385	Copies parsed arguments into the kwargs passed to the environment.
8386	Adds parameters and config from the `.ini` file to the trajectory.
8387	Converts a rule given as an integer into a binary list representation.
8388	Creates an initial state for the automaton.
8389	Plots an automaton `pattern` and stores the image under a given `filename`.
8390	Simulates a 1-dimensional cellular automaton.
8391	Main simulation function.Creates a folder for the plots and the data.Computes all patterns.Plots all patterns.
8392	Signals the process timer. If more time than the display time has passed, a message is emitted.
8393	Get overview group.
8394	Loads a particular item from disk. Understands different messages like 'TRAJECTORY', 'LEAF', 'GROUP', 'TREE', and 'LIST'. Each message supports various parameters for customizing the loading process.
8395	Handles different messages to store various items to disk, including trajectories, parameters, results, and more, with options like merging, backing up, and deleting.
8396	Load several items from an iterable.
8397	Reads out the properties for storing new data into the hdf5file
8398	Stores several items from an iterable
8399	Routine to close an hdf5 file The file is closed only when `closing=True`. `closing=True` means that the file was opened in the current highest recursion level. This prevents re-opening and closing of the file if `store` or `load` are called recursively.
8400	Extracts file information from kwargs and pops the elements
8401	Backs up a trajectory to an HDF5 file with a specified or default filename.
8402	Reads a row from a pytables table and returns a dictionary with column names as keys and row content as values.
8403	Prepares a trajectory for merging by updating meta information, storing extended parameters, and adjusting the run table and explored parameter tables.
8404	Loads meta information about the trajectory. Checks if the version number does not differ from the current pypet version. Loads comment, timestamp, name, and version from disk if the trajectory is not loaded as new. Updates the run information as well.
8405	Loads data starting from a node along a branch and starts recursively loading all data at the end of the branch.
8406	Checks for version mismatch. Raises a VersionMismatchError if version of loaded trajectory and current pypet version do not match. In case of `force=True` error is not raised only a warning is emitted.
8407	Fills the `run` overview table with information, updating new information.
8408	Recalls names of all explored parameters
8409	Adds explored parameter names of a trajectory object to an internal HDF5 table.
8410	Creates overview tables for different sections such as configuration, parameters, explored parameters, and results in the overview group. Each table is dynamically configured based on the specified table name and optional trajectory data.
8411	Stores a trajectory to an hdf5 file. Stores all groups, parameters, and results.
8412	Recursively stores data from a trajectory node along a specified branch, optionally following links and storing the entire subtree.
8413	Creates a new pypet leaf instance. Returns the leaf and if it is an explored parameter the length of the range.
8414	Loads a node from an HDF5 file and recusively loads everything below it if desired.
8415	Stores a node to hdf5 and if desired stores recursively everything below it.
8416	Stores a single row into an overview table based on given instance, flags, and additional info.
8417	Creates a new table, or if the table already exists, returns it.
8418	Returns an HDF5 node by the path specified in `name`.
8419	Stores original data type to hdf5 node attributes for preserving the data type.
8420	Checks if loaded data has the type it was stored in. If not converts it.
8421	Adds or changes a row in a pytable.
8422	Copies data from `insert_dict` into a pytables `row`.
8423	Extract information from a given item to be stored into a pytable row.
8424	Cuts string data to the maximum length allowed in a pytables column if string is too long.
8425	Creates or returns a group
8426	Creates new or follows existing group nodes along a given colon separated `key`.
8427	Stores annotations into an HDF5 file. If overwrite is True or 'v_annotations', it deletes all existing annotations first. Then, if the item has annotations, it stores the new annotations in the HDF5 file, only storing new annotations that don't already exist.
8428	Loads annotations from disk into the given item_with_annotations object.
8429	Stores a group node. For group nodes only annotations and comments need to be stored.
8430	Load a group node and potentially everything recursively below.
8431	Reloads skeleton data of a tree node, updating annotations and comment if empty or None.
8432	Extracts storage flags for data in `data_dict` if they were not specified in `flags_dict`.
8433	Adds data to the summary tables and returns if the instance's comment has to be stored. Also moves comments upwards in the hierarchy if purge_duplicate_comments is true and a lower index run has completed. Only necessary for *multiprocessing*.
8434	Adds information to overview tables and meta information to the `instance`'s HDF5 `group`.
8435	Stores data from a dictionary into an HDF5 group based on given store flags.
8436	Stores a parameter or result to hdf5.
8437	Creates and array that can be used with an HDF5 array object
8438	```python
Creates a new empty table in an HDF5 file and populates it with initial data if provided.
```
8439	Stores a python dictionary as a PyTable in an HDF5 file.
8440	Stores a pandas DataFrame into hdf5.
8441	Stores data as carray, earray or vlarray depending on `flag`.
8442	Stores data as array and handles data type conversions if necessary.
8443	Removes a link from disk
8444	Removes a parameter or result or group from the hdf5 file.
8445	Stores data as pytable.
8446	Returns a description dictionary for pytables table creation
8447	Creates a pytables column instance. The type of column depends on the type of `column[0]`. Notes that data in `column` must be homogeneous!
8448	Returns the longest string size for a string entry across data.
8449	Loads data from an HDF5 group into a dictionary.
8450	Load data that was originally a dictionary when stored
8451	Reads shared data and constructs the appropriate class.
8452	Reads a non-nested PyTables table column by column and creates a new ObjectTable for the loaded data.
8453	Reads data from an array or carray.
8454	Helper function that creates a novel trajectory and loads it from disk.
8455	Creates a run set name based on `idx`.
8456	Sets properties with names starting with 'v_'. Raises an AttributeError if the property does not exist.
8457	Adds classes or paths to classes to the trajectory to create custom parameters.
8458	Making the trajectory behave as during a particular single run.
8459	Make the trajectory iterate over all runs.
8460	Shrinks the trajectory, removes exploration ranges, and handles exceptions if stored on disk.
8461	Generic preset function, marks a parameter or config for presetting.
8462	Presets parameter value before a parameter is added and can be called before parameters are added to the Trajectory in order to change the values that are stored into the parameter on creation.
8463	Prepare the experiment by checking preset parameters, locking them, and removing potential results from previous runs.
8464	Searches for all occurrences of `name` in each run.
8465	Checks whether a run has completed based on a given name or ID. Returns `True` if the run has completed, otherwise `False`. If no name or ID is provided, it checks the completion status of all runs.
8466	Deletes all explored parameters from disk if the trajectory is expanded.
8467	Copy a `node` to the trajectory, considering all links and ignored nodes already found in the current trajectory.
8468	Prepares the trajectory to explore the parameter space by providing a dictionary with parameter names and exploration ranges. Ensures all iterables have the same length and that names map to parameters, raising exceptions if not met. Adds new explored parameters if the trajectory is already explored but not stored, and raises errors if the trajectory has been stored or if parameter types are incompatible with exploration iterables.
8469	Overwrites the run information of a particular run
8470	Adds a new run to the `_run_information` dict. If an index already exists, it deletes old entries. It updates the `_single_run_ids` dictionary with the new run's information and stores it in `_run_information`.
8471	Locks all non-empty parameters
8472	Locks all non-empty derived parameters.
8473	Final rollback initiated by the environment. Restores the trajectory as root of the tree and stores meta data to disk. Updates trajectory's information about single runs.
8474	Loads the full skeleton from the storage service. This includes updating the trajectory tree with results and derived parameters from individual single runs, adding empty results and derived parameters, and loading annotations.
8475	Loads a trajectory via the storage service.
8476	Backs up the trajectory with the given storage service.
8477	Creates a full mapping from all wildcard translations to the corresponding wildcards
8478	Merges several `other_trajectories` into your current one.
8479	Updates the `run_information` of the current trajectory by merging with another trajectory's run data based on used run indices.
8480	Renames a full name based on the wildcards and a particular run
8481	Merge derived parameters that have the `run_ALL` in a name
8482	Merges all links between trajectories while handling various conditions and exceptions.
8483	Merges metadata about previous merges, git commits, and environment settings from another trajectory into the current one.
8484	Merges trajectories by loading iteratively items of the other trajectory and store it into the current trajectory, applying a rename dictionary for key mapping.
8485	Merges results from another trajectory using a rename dictionary, ignoring certain data and handling allowed translations.
8486	Rename and relocate the trajectory.
8487	Stores the trajectory to disk and recursively all data in the tree.
8488	Restores the default value in all explored parameters and sets the v_idx property back to -1 and v_crun to None.
8489	Notifies the explored parameters what current point in the parameter space they should represent.
8490	In-place modification of the trajectory for single runs executed by the environment
8491	Returns a list of run names. Using bucket sort if `sort` is True.
8492	Returns information about a single run as a dictionary.
8493	Find a single run index given a particular condition on parameters.
8494	Manually allow running of an experiment without using an environment.
8495	Stop and finalize a manually started run.
8496	Set the start timestamp and formatted time to the current time.
8497	Sets the finish time and computes the runtime in human readable format
8498	Creates a new node and checks if it needs to know the trajectory.
8499	Return a dictionary containing different types of parameters based on the provided options.
8500	Perform rollback operations to remove results and derived parameters created in the current run.
8501	Returns a dictionary containing the full config names as keys and the config parameters or the config parameter data items as values.

:param fast_access: Determines whether the parameter objects or their values are returned in the dictionary.
:param copy: Whether the original dictionary or a shallow copy is returned.
:raises: ValueError if fast access is true and copy is false.
:return: Dictionary containing the config data.
8502	Returns a dictionary containing the full result names as keys and the corresponding result objects or result data items as values.
8503	Stores individual items to disk.
8504	Loads parameters and results specified in `iterator`.
8505	Removes parameters, results, or groups from the trajectory.
8506	Deletes several links from the hard disk. Links can be passed as a string or as a tuple containing the node and the link name. If `remove_from_trajectory` is True, the links are also removed from the trajectory.
8507	Recursively removes all children of the trajectory.
8508	Deletes items from storage on disk. Per default the item is NOT removed from the trajectory. Links are NOT deleted on the hard disk, please delete links manually before deleting data!
8509	Starts a pool single run and passes the storage service
8510	Single run wrapper for the frozen pool, makes a single run and passes kwargs.
8511	Configures the pool and keeps the storage service
8512	Configures the frozen pool and keeps all kwargs.
8513	Wrap a function that first configures logging and starts a single run afterwards.
8514	Wrapper function that configures a frozen SCOOP setup by deleting old SCOOP data if necessary.
8515	Wrapper function for scoop, that does not configure logging.
8516	Requests the logging manager to configure logging.
8517	Set the niceness of a process
8518	Wrapper that allows graceful exits of single runs.
8519	Performs a single run of the experiment.
8520	Starts running a queue handler and creates a log file for the queue.
8521	Loads a class from a string naming the module and class name.
8522	Dynamically creates a class by trying already given imports and then dynamically loaded classes if not successful.
8523	Returns the length of the parameter range. Raises TypeError if the parameter has no range. Does not need to be implemented if the parameter supports `__len__` appropriately.
8524	Get the string representation of the value handled by the parameter by calling its `__repr__` method.
8525	Checks if the parameter considers two values as equal.
8526	Returns a python iterable containing the exploration range.
8527	Searches for valid range to explore according to the iterable. Raises exceptions if parameter is locked, unsupported data types, or already explored. Stores the valid data values in a tuple for future reference.
8528	Explorers the parameter according to the iterable and appends to the exploration range. Raises ParameterLockedException if the parameter is locked. Raises TypeError if the parameter does not support the data, types of the data in the iterable are not the same as the type of the default value, or the parameter did not have an array before.
8529	Checks if data values are valid.
8530	Return a dictionary of formatted data for storage service
8531	Loads the data and exploration range from the `load_dict`. The `load_dict` needs to be in the same format as the result of the :func:`~pypet.parameter.Parameter._store` method.
8532	Reconstructs the data and exploration array. Checks if it can find the array identifier in the `load_dict`, i.e. '__rr__'. If not calls :class:`~pypet.parameter.Parameter._load` of the parent class. If the parameter is explored, the exploration range of arrays is reconstructed as it was stored in :func:`~pypet.parameter.ArrayParameter._store`.
8533	Compares two matrices for equality by hashing their serialized representations.
8534	Return True if data is a csr, csc, bsr, or dia Scipy sparse matrix.
8535	Extracts data from a sparse matrix to make it serializable in a human readable format.
8536	Formats a name for storage in a specific format, using a name list and an index. The format includes an identifier, property, and sparse matrix index.
8537	Reconstructs a matrix from a list containing sparse matrix extracted properties
8538	Reconstructs the data and exploration array by checking for the array identifier in the `load_dict`. If not found, it calls the parent class's `_load`. If the parameter is explored, it reconstructs the exploration range using the stored data.
8539	Returns a dictionary for storage. Every element in the dictionary except for 'explored_data' is a pickle dump. Reusage of objects is identified over the object id. 'explored_data' contains references to the objects to recall the order of objects later on.
8540	Reconstructs objects from the pickle dumps in `load_dict`. Sets the `v_protocol` property to the protocol used to store 'data'.
8541	Translates integer indices into the appropriate names
8542	Summarizes data handled by the result as a string. Calls `__repr__` on all handled data. Data is NOT ordered. Truncates the string if it is longer than :const:`pypetconstants.HDF5_STRCOL_MAX_VALUE_LENGTH`. Returns the summarized string.
8543	Return all handled data as a dictionary
8544	Method to put data into the result.
8545	Get items handled by the result.
8546	Sets a single data item of the result. Raises TypeError if the type of the outer data structure is not understood.
8547	Supports everything of parent class and csr, csc, bsr, and dia sparse matrices.
8548	Return a storage dictionary understood by the storage service. Sparse matrices are extracted and marked with the identifier `__spsp__`.
8549	Loads data from `load_dict` for sparse matrices.
8550	Adds a single data item to the pickle result.
8551	Returns a dictionary containing pickle dumps
8552	Reconstructs all items from the pickle dumps in `load_dict`. Sets the `v_protocol` property to the protocol of the first reconstructed item.
8553	Merge all trajectories in the working directory
8554	Uploads a file to a specified SFTP destination.
8555	Downloads a file from an SFTP server and saves it locally.
8556	Creates and returns a new SAGA session
8557	Merges all trajectories found in the working directory using a saga job.
8558	Starts all jobs and runs `the_task.py` in batches.
8559	Simulates the multiplication of two values in a trajectory object.
8560	Runs a simulation of a model neuron and returns an estimate of the firing rate.
8561	Postprocessescomputedfiringratesintothetable.
8562	Adds all parameters to `traj`.
8563	Explores different values of `I` and `tau_ref` by iterating through a Cartesian product of predefined ranges and values, and then applies the exploration to a given trajectory.
8564	Runs a network before the actual experiment.
8565	Execute a network run using a trajectory, network, and various components and analyzers.
8566	Extracts subruns from the trajectory based on unique orders.
8567	Generic `execute_network_run` function, handles experimental runs as well as pre-runs.
8568	Adds parameters for a network simulation. Calls `add_parameters` for all components, analysers, and the network runner in this order.
8569	Starts a network run before the individual run, useful for initial runs shared by multiple experimental runs during parameter exploration. Automatically calls :func:`~pypet.brian2.network.NetworkManager.pre_build` if started by the user.
8570	Top-level simulation function, pass this to the environment.
8571	Starts a single simulation run using a NetworkRunner.
8572	Creates a generic filename based on explored parameters in a trajectory.
8573	Returns next element from chain.
8574	Merge all files in a given folder.

IMPORTANT: Does not check if there are more than 1 trajectory in a file. Always uses the last trajectory in file and ignores the other ones.

Trajectories are merged according to the alphabetical order of the files, i.e. the resulting merged trajectory is found in the first file (according to lexicographic ordering).
8575	Handler of SIGINT

Does nothing if SIGINT is encountered once but raises a KeyboardInterrupt in case it is encountered twice immediately.
8576	Returns a dictionary containing the configuration from the specified file, or an empty dictionary if the file does not exist. If a configuration dictionary is provided, it writes the dictionary to the specified file and returns True if successful, otherwise returns False.
8577	Method to request a PIN from ecobee for authorization
8578	Method to request API tokens from ecobee.
8579	Method to refresh API tokens from ecobee
8580	Set self.thermostats to a json list of thermostats from ecobee
8581	Write api tokens to a file
8582	Set HVAC mode for a specified thermostat.
8583	Set the minimum time in minutes for the fan to be on each hour for a specified thermostat.
8584	Set a hold temperature.
8585	Set a climate hold - ie away, home, sleep.
8586	Delete a vacation from a thermostat.
8587	Resume a scheduled program on a thermostat by index.
8588	Send a message to the thermostat.
8589	Set humidity level
8590	Generate the delay in seconds in which the DISCOVER will be sent.
8591	Generate the time in seconds in which DHCPDISCOVER will be retransmitted, with randomized delays and exponential backoff up to a maximum of 64 seconds.
8592	Generate time in seconds to retransmit DHCPREQUEST
8593	Generate RENEWING time by calculating a percentage of the lease time with optional elapsed time and adding a random fuzz for synchronization.
8594	Return the self object attributes not inherited as dict.
8595	Reset object attributes when state is INIT.
8596	Workaround to get timeout in the ATMT.timeout class method.
8597	Change timeout values in the ATMT.timeout class method.
8598	Send discover.
8599	Select an offer from the offers received. The current implementation selects the first offer, and a TODO comment suggests checking other implementations' algorithms for selecting offers.
8600	Send a DHCPREQUEST message to the server, retransmitting up to a maximum of four times with increasing delays.
8601	Set renewal and rebinding times for the current state.
8602	Process a received ACK packet.
8603	Process a received NAK packet and log it.
8604	Initialize the INIT state with a random delay and set relevant timeouts.
8605	BOUND state.
8606	Handle the RENEWING state by initializing and executing a script if available, or setting the network lease if not.
8607	No rebinding needed
8608	END state.
8609	Handle the ERROR state, update the current state, initialize and run the script, set network, and raise INIT.
8610	Timeout of selecting on SELECTING state.
8611	Handle timeout in REQUESTING state.
8612	Timeout of renewing on RENEWING state.
8613	Handle timeout for request rebinding in REBINDING state.
8614	Receive offer on SELECTING state.
8615	Receive ACK in REQUESTING state.
8616	Receive NAK in REQUESTING state.
8617	Receive ACK in RENEWING state.
8618	Receive NAK in RENEWING state.
8619	Receive ACK in REBINDING state.
8620	Receive a NAK during the REBINDING state and raise an INIT exception if processed.
8621	Action on renewing on RENEWING state. Not recording lease, but restarting timers.
8622	Assign a value, remove if it's None
8623	Append a value to multiple value parameter.
8624	Remove a value from multiple value parameter.
8625	Get programs statuses using either a Unix socket or HTTP based on the options provided. Returns supervisord XML-RPC call result or raises an exception if there is a communication problem.
8626	Create Nagios and human readable supervisord statuses.
8627	Program main.
8628	Validate a decoded SNS message by checking the signing certificate URL, verifying the message age, and validating the cryptographic signature.
8629	Reads tdms file and returns channel names and data.
8630	From circularity, computes the deformation
8631	Converts a TDMS file to an FCS file by processing the data including channel names and adding deformation.
8632	Returns True if left and right are equal
8633	Add a new patch with the specified name to the queue and make it the topmost applied patch.
8634	Delete next unapplied patch
8635	Deletes specified patch from the series. If remove is True, the patch file will also be removed. If remove and backup are True, a copy of the deleted patch file will be made.
8636	Checks if a backup file of the given filename in the current patch exists. Raises an error if the file exists and ignore is False.
8637	Create a backup of a file
8638	Adds file to the patch with the specified patch name. If patch_name is None or empty, the topmost patch will be used. Adding an already added patch will raise a QuiltError if ignore is False.
8639	Run command as a subprocess and wait until it is finished.
8640	Creates the directory and all its parent directories if it does not exist yet.
8641	Copy to destination directory recursively. If symlinks is true, symbolic links in the source tree are represented as symbolic links in the new tree, but the metadata of the original links is NOT copied; if false or omitted, the contents and metadata of the linked files are copied to the new tree.
8642	Create hard link as link to this file
8643	Copy file to destination.
8644	Returns the directory where the file is placed in or None if the path to the file doesn't contain a directory.
8645	Backup file in dest_dir Directory.

The return value is a File object pointing to the copied file in the destination directory or None if no file is copied.

If file exists and it is not empty it is copied to dest_dir.
If file exists and it is empty the file is copied only if copy_empty is True.
If file does not exist and copy_empty is True a new file in dest_dir will be created.
In all other cases no file will be copied and None is returned.
8646	Refresh a patch with a specified patch name or the top patch if no name is provided. If `edit` is to be done, discard the existing patch and replace it with the new one, but generate a temporary patch first. If no changes exist, raise an error.
8647	Unapply patches up to patch_name. patch_name will end up as top patch.
8648	Unapply the top patch.
8649	Unapply all patches
8650	Apply all patches up to patch_name
8651	Apply the next patch in the series file. It checks for the top patch, gets the next patch, and applies it if available. If all patches are applied, it raises an exception.
8652	Apply all patches in series file
8653	Reads all patches from the series file
8654	Saves current patches list in the series file.
8655	Add a patch to the patches list
8656	Insert list of patches at the front of the current patches list.
8657	Adds a list of patches to the patches list, optionally inserting them after a specific existing patch.
8658	Remove a patch from the patches list
8659	Return a list of patches after the given patch from the patches list.
8660	Returns a list of patches before a given patch from the patches list.
8661	Return a list of patches before the provided patch, including the patch itself.
8662	Replaces old_patch with new_patch without altering any comments.
8663	Creates the directory and inserts a .version file
8664	Checks if the .version file in dirname has the correct supported version number.
8665	Adds the group and its arguments to a argparse.ArgumentParser instance.
8666	Adds the argument to an argparse.ArgumentParser instance
8667	Adds this SubParser to the subparsers created by argparse.ArgumentParser.add_subparsers method.
8668	Sets args and kwargs for subparsers in argparse.ArgumentParser.
8669	Adds the subparsers to an argparse.ArgumentParser.
8670	Checks if a backup file of the filename in the current patch exists and raises a QuiltError if not.
8671	Check if a backup file of the filename in the applied patches after a specific patch exists.
8672	Reverts not added changes of a specified file using a patch. If no patch name is provided, the topmost patch is used. It handles the deletion of new and empty files, applies the current patch in a temporary directory, and reverts non-committed changes.
8673	Import patch into the patch queue. The patch is inserted as the next unapplied patch.
8674	Imports several patches into the patch queue.
8675	Process each way.
8676	Get a list of nodes not found in OSM data.
8677	Process each node and store it in the nodes dictionary if it has a valid location.
8678	Extracts information for a route from a relation object.
8679	Create a meaningful route name based on relation tags and optional short name.
8680	Construct an id for agency using its tags.
8681	Process the files and collect necessary data. Extract relations, collect IDs of interest, extract nodes, and extract ways.
8682	Process each relation and filter based on certain conditions.
8683	Create `calendar`, `stop_times`, `trips` and `shapes` for dummy data.
8684	Fill the fields that are necessary for passing transitfeed checks.
8685	Create station stop times for each trip.
8686	Write the GTFS feed to a zipped file.
8687	Write GTFS text files to the given path.
8688	Extract agency information from a relation and nodes.
8689	Extract stops from a relation.
8690	Extract shape of one route.
8691	Gets a list of supported U2F versions from the device.
8692	Sends an APDU to the device and waits for a response.
8693	Interactively authenticates a `AuthenticateRequest` using an attached U2F device.
8694	Register a U2F device with the given data and facet.
8695	Signs an authentication challenge using the specified device and data.
8696	Register a single U2F device interactively.
8697	Recursively converts unicode objects to UTF-8 encoded byte strings.
8698	Wraps a function with reporting to an errors backend, allowing for optional error thresholds, exception re-raising, and stack trace saving.
8699	Wraps a class with reporting to an errors backend by decorating each function of the class. Decorators are injected under the classmethod decorator if they exist.
8700	Given a filepath and a list of regex patterns, this function returns true if the filepath matches any of those patterns.
8701	Given an email address, check the email_remapping table to see if the email should be sent to a different address. This function also handles overriding the email domain if ignore_vcs_email_domain is set or the domain was missing.
8702	Helper function for retrieving a particular entry from the prefix trees.
8703	Convert text from markdown to reST format, specifically for this readme.
8704	This method starts the server. There are two processes, one is an HTTP server that shows an admin interface, and the second is a Thrift server that the client code calls.
8705	Record an error to the flawless backend.
8706	Fetch an image from a URL and convert it into a Pillow Image object.
8707	Convert string data into a Pillow Image object.
8708	Return a decorator that validates arguments with provided `validator` function.
8709	Check that the image's size is superior to `size`
8710	Check that the image width is superior to `width`
8711	Checks that the image height is superior to `height`. Raises `ImageSizeError` if the image height is not big enough.
8712	Converts the text category to a tasks.Category instance.
8713	Parse numeric fields.
8714	Returns an iterator for the list of items in the XML source, using `iterparse` for efficiency, especially with large files. Each item is yielded and its memory is then released.
8715	Saves an error in the error list.
8716	Parses all data from the source, saving model instances.
8717	Parse an item and return a dictionary of field values.
8718	Get an item from the database or create a new one if not found.
8719	Saves a model instance to the database.
8720	Downloads a HTTP resource from `url` and saves it to `dest`. Capable of handling Gzip compressed content.
8721	Opens the source file.
8722	Returns an iterator to read the rows of the CSV file, mapping the column headers to the row values.
8723	Raise a ValueError if the sandbox instance is currently running, then set the allow_network_access attribute.
8724	Runs a command inside the sandbox and returns the results.
8725	Copies the specified files into the working directory of this sandbox. The filenames specified can be absolute paths or relative paths to the current working directory. The function also allows specifying the owner of the new files and whether they should have read-only permissions.
8726	Copies the specified file into the working directory of this sandbox and renames it to new_filename.
8727	Return a list of all enrollments for the passed course_id.
8728	Return a list of all enrollments for the passed course sis id.
8729	Return a list of all enrollments for the passed section_id.
8730	Return a list of all enrollments for the passed section sis id.
8731	Return a list of enrollments for the passed user regid.
8732	Enroll a user into a course.
8733	List the roles for an account using the provided Canvas account ID.
8734	List the roles for an account, for the passed account SIS ID.
8735	Lists all course roles available to an account, including those inherited from parent accounts.
8736	Gets information about a single role for the passed Canvas account ID.
8737	Get information about a single role, for the passed account SIS ID.
8738	Return course resource for given canvas course id.
8739	Return course resource for given sis id.
8740	Returns a list of courses for the passed account ID.
8741	Returns a list of courses for the passed account SIS ID.
8742	Return a list of published courses for the passed account ID.
8743	Return a list of published courses for the passed account SIS ID.
8744	Return a list of courses for the passed regid.
8745	Create a Canvas course with the given subaccount ID and course name.
8746	Updates the SIS ID for the course identified by the passed course ID.
8747	Returns participation data for the given account_id and term_id.
8748	Returns grade data for the given account_id and term_id.
8749	Returns statistics for the given account_id and term_id.
8750	Returns participation data for the given sis_course_id.
8751	Returns assignment data for the given course ID.
8752	Retrieves per-student data for the specified course using its SIS ID.
8753	Returns student activity data for the given user_id and course_id.
8754	Returns student messaging data for the given user_id and course_id.
8755	Return external tools for the passed canvas account id.
8756	Return external tools for the passed canvas course id.
8757	Create an external tool using the provided JSON data.
8758	Update the external tool identified by external\_tool\_id with the passed json data.
8759	Delete the external tool identified by external_tool_id.
8760	Check if required parameters are available on an object.
8761	Returns user profile data.
8762	Returns a list of users for the given course id.
8763	Returns a list of users for the given sis course id.
8764	Create and return a new user and pseudonym for an account.
8765	Return a user's logins for the given user_id.
8766	Update an existing login for a user in the given account. This requires specifying either the account ID or using the canvas default account ID.
8767	Returns the URL path to the next page of paginated data.
8768	Get representation of the requested resource via Canvas's GET method, optionally chaining pagination links to coalesce resources.
8769	Canvas GET method. Return representation of the requested paged resource, either the requested page, or chase pagination links to coalesce resources.
8770	Canvas GET method. Return representation of the requested resource.
8771	Canvas PUT method.
8772	Canvas POST method.
8773	Canvas DELETE method.
8774	Return a list of the admins in the account.
8775	Flag an existing user as an admin within the account.
8776	Flag an existing user as an admin within the account sis id.
8777	Remove an account admin role from a user.
8778	Remove an account admin role from a user for the account sis id.
8779	Creates a new grading standard for the given course.
8780	Returns the section resource for a given canvas section ID.
8781	Return section resource for given sis id.
8782	Return list of sections for the passed course ID.
8783	Return list of sections for the passed course SIS ID.
8784	Return list of sections including students for the passed course ID.
8785	Return list of sections including students for the passed sis ID.
8786	Creates a canvas section in the given course id.
8787	Update a canvas section with the given section id. The method constructs a URL and a body with the provided parameters, then makes a PUT request to update the section using the Canvas API.
8788	List quizzes for a given course.
8789	Return account resource for given canvas account id.
8790	Return list of subaccounts within the account with the passed canvas id.
8791	Update the passed account. Returns the updated account.
8792	Updates the SIS ID for the account identified by the passed account ID. Raises an exception if trying to update the SIS ID for the root account. URL endpoint and request body are constructed, and the CanvasAccount is returned with updated data.
8793	Return the authentication settings for the passed account_id.
8794	Update the authentication settings for the passed account_id.
8795	Return a term resource for the passed SIS ID.
8796	Imports a CSV string.
8797	Imports a directory of CSV files.
8798	Get the status of an already created SIS import.
8799	Creates a zip archive from files in a specified directory.
8800	List assignments for a given course
8801	Modify an existing assignment.
8802	Method for retrieving the list of reports available for a specific canvas account ID.
8803	Shows all reports of the passed report_type that have been run for the canvas account id.
8804	Generates a report instance for the canvas account id based on the specified report type and optional term id, with additional parameters provided.
8805	Convenience method for creating a course provisioning report.
8806	Convenience method for create_report, for creating a course sis export report.
8807	Creates an unused courses report for a given account and term.
8808	Returns a completed report as a list of csv strings.
8809	Returns the status of a report.
8810	Deletes a generated report instance.
8811	Move detections in direction dx, dy.
8812	Horizontally flip detections according to an image flip.
8813	Edit to get the dict even when the object is a GenericRelatedObjectManager. Added the try except.
8814	Get the arguments given to the template tag element and complete these with the ones from the settings.py if necessary.
8815	Get the text to display when the field is empty.
8816	Parse uniformly args and kwargs from a templatetag.
8817	Create and register metrics from a list of MetricConfigs.
8818	Setup logging for the application and aiohttp.
8819	Configure the MetricRegistry with process statistics if specified.
8820	Create Prometheus metrics from a list of MetricConfigs.
8821	Return a metric, optionally configured with labels.
8822	Home page request handler.
8823	Handler for metrics.
8824	A free-text query resolver by Wolfram|Alpha. Returns the first result, if available.
8825	Fix HTTPMessage method signature for backward compatibility in Python 2.
8826	Query Wolfram|Alpha using the v2.0 API with optional parameters for assumptions and other query options. Returns a Result object containing the response.
8827	The pods, assumptions, and warnings of this result.
8828	The pods that hold the response to a simple, discrete query.
8829	Add request content data to request body, set Content-type header.
8830	Call API and return object containing data with error details if applicable.
8831	Call the API with a GET request.
8832	Call the API with a DELETE request.
8833	Make a PUT request to the resource.
8834	Call the API with a POST request.
8835	Process query recursively, if the text is too long, it is split and processed bit by bit.
8836	Split sentences in groups based on a specified group length.
8837	Call the disambiguation service in order to process a pdf file.
8838	Call the disambiguation service to disambiguate a search query.
8839	Call the segmenter to split text into sentences.
8840	Recognise the language of the text in input.
8841	Fetch the concept from the Knowledge base.
8842	Constructs the MDR ensemble from the provided training data
8843	Estimates the accuracy of the predictions from the MDR ensemble using the provided features and true classes. Optionally uses a custom scoring function.
8844	Constructs the MDR feature map from the provided training data
8845	Convenience function that fits the provided data then constructs predictions from the provided features.
8846	Estimates the accuracy of the predictions from the constructed feature
8847	Constructs the Continuous MDR feature map from the provided training data.
8848	Transforms the input features using the Continuous MDR feature map to construct a new binary feature taking values 0 and 1.
8849	Return the t-statistic as a measure of the quality of the Continuous MDR model.
8850	fit an MDR model to variables X and Y with the given labels, and return the results
8851	Fits a MDR model to all n-way combinations of the features in X.
8852	Visualizes the MDR grid of a given fitted MDR instance. Only works for 2-way MDR models.
8853	Get the security configuration for the specified application without the prefix.
8854	Get a Flask-Security configuration value.
8855	Creates a new vector.
8856	Creates a new vector from members.
8857	Evaluates a file with the given name into a Python module AST node.
8858	Evaluate the forms in stdin into a Python module AST node.
8859	Evaluate the forms in a string into a Python module AST node.
8860	Bootstrap the REPL with a few useful vars and return the bootstrapped module so it's functions can be used by the REPL command.
8861	Run a Basilisp script or a line of code, if it is provided.
8862	Create a decorator function to make Python multi-functions.
8863	Swap the methods atom to include method with key.
8864	Add a new method to this function which will respond for key returned from the dispatch function.
8865	Return the method which would handle this dispatch key or None if no method defined for this key and no default.
8866	Swap the methods atom to remove method with key.
8867	Remove the method defined for this key and return it.
8868	Return True if the Var holds a macro function.
8869	Fetches the location of the form in the original filename from the input form if it has metadata.
8870	Wrapper to attach location information from the input form to the node environment returned from the parsing function.
8871	Assert that `recur` forms do not appear in any position of this or child AST nodes.
8872	Assert that recur forms only appear in the tail position of the current or child AST nodes.
8873	Resolve a non-namespaced symbol into a Python name or a local Basilisp Var.
8874	Resolve a Basilisp symbol as a Var or Python name.
8875	Parse a Lisp form and produce a Basilisp syntax tree.
8876	Check if a defined variable name is shadowed in an inner scope and warn accordingly.
8877	Add a new symbol to the symbol table.
This function allows individual warnings to be disabled for one run by supplying keyword arguments temporarily disabling those warnings. In certain cases, we do not want to issue warnings again for a previously checked case, so this is a simple way of disabling these warnings for those cases.
8878	Produce a Lisp representation of an associative collection, bookended with the start and end string supplied. The entries argument must be a callable which will produce tuples of key-value pairs.
8879	Produce a Lisp representation of a sequential collection, bookended with the start and end string supplied. The keyword arguments will be passed along to lrepr for the sequence elements.
8880	Return a string representation of a Lisp object.
8881	Fallback function for lrepr for subclasses of standard types.
8882	Return a transformed copy of this node with location in this node's environment updated to match the `start_loc` if given, or using its existing location otherwise. All child nodes will be recursively transformed and replaced. Child nodes will use their parent node location if they do not have one.
8883	Compile and execute the given form. This function will be most useful for the REPL and testing purposes. Returns the result of the executed expression.
8884	Incrementally compile a stream of AST nodes in a module.
8885	Compiles an entire Basilisp module into Python bytecode that can be executed as a Python module.
8886	Compile cached bytecode into the given module.
8887	Create a Sequence from Iterable s.
8888	Replace characters which are not valid in Python symbols with valid replacement strings.
8889	Replace munged string components with their original representation.
8890	Create a Fraction from a numerator and denominator.
8891	Get the default logging handler for Basilisp.
8892	Creates a new map.
8893	Partition coll into groups of size n
8894	Wrap a reader function in a decorator to supply line and column information along with relevant forms.
8895	Reads a namespaced token from the input stream.
8896	Read a collection from the input stream and create the collection using f.
8897	Reads a list element from the input stream.
8898	Read a vector element from the input stream
8899	Return a set from the input stream with unique values.
8900	Read a map from the input stream.
8901	Return a string from the input stream.
8902	Read and return a symbol from the input stream. If the symbol appears in a syntax quoted form, the reader will attempt to resolve the symbol using the resolver in the ReaderContext ctx. The resolver will look into the current namespace for an alias or namespace matching the symbol's namespace.
8903	Return a keyword from the input stream.
8904	Read metadata and apply that to the next object in the input stream.
8905	Read a function reader macro from the input stream.
8906	Read a quoted form from the input stream
8907	Expands syntax quoted forms to handle unquoting and unquote-splicing. The unquoted form becomes `(list x)`, the unquote-spliced form becomes `x`, and other forms are recursively processed and returned as `(list form)`.
8908	Process syntax quoted forms to generate forms that can be assembled into the correct types at runtime.
8909	Read a syntax-quote and set the syntax-quoting state in the reader.
8910	Read an unquoted form and handle special logic of unquoting.
8911	Read a derefed form from the input stream.
8912	Read a character literal from the input stream. Character literals may appear as: - \\\\[a-z\] yield 'a', 'b', and 'c' respectively - \\\\[newline | space | tab | formfeed | backspace | return\\] yield the named characters - \\\\[uXXXX\\] yield the unicode digit corresponding to the code point named by the hex digits XXXX
8913	Read a regex reader macro from the input stream.
8914	Return a data structure evaluated as a reader macro from the input stream.
8915	Read the next full form from the input stream, consuming any reader comments completely.
8916	Read the next full form from the input stream.
8917	Read the contents of a stream as a Lisp expression. Calls Optional namespace resolver and data readers. Handles EOF and reader macros. Yields expressions excluding comments. Caller must close stream.
8918	Read the contents of a string as a Lisp expression. Keyword arguments have the same meanings as those of basilisp.lang.reader.read.
8919	Read the contents of a file as a Lisp expression.
8920	Update the internal line and column buffers after a new character is added. The column number is set to 0 for the first character on the next line.
8921	Push one character back onto the stream, allowing it to be read again.
8922	Advance the stream forward by one character and return the next token in the stream.
8923	Responsible for generating the bytes for a Basilisp bytecode cache file based on the modification time, source size, and code objects.
8924	Unmarshal the bytes from a Basilisp bytecode cache file, validating the file header and raising exceptions if the file header does not match or if the file contents do not match the expected values.
8925	Returns the path to the cached file for the given path. The original path does not have to exist.
8926	Hook into Python's import machinery with a custom Basilisp code importer.
8927	```
Finds the ModuleSpec for the specified Basilisp module. Returns None if the module is not a Basilisp module to allow import processing to continue.
```
8928	Load and execute a cached Basilisp module.
8929	Load and execute a non-cached Basilisp module.
8930	Compile the Basilisp module into Python code.
8931	Create a new symbol.
8932	Return an iterable of possible completions for the given text.
8933	Private swap function used to either get the interned keyword instance from the input string.
8934	Create a new keyword.
8935	A function that chains a sequence of generated Python ASTs into a tuple of dependency nodes.
8936	Generate recursive Python Attribute AST nodes for resolving nested names.
8937	Wrap simpler AST generators to return a GeneratedPyAST.
8938	Turn a collection of Lisp forms into Python AST nodes.
8939	Hydrate Generated Python AST nodes with line numbers and column offsets if they exist in the node environment.
8940	Wrap a generator function in a decorator to supply line and column information to the returned Python AST node.
8941	Wrap a generator function in a decorator to supply line and column information to the returned Python AST node and dependency nodes.
8942	Return True if the Var holds a value which should be compiled to a dynamic Var access.
8943	Check if the Var can be redefined.
8944	Transform non-statements into ast.Expr nodes so they can stand alone as statements.
8945	Given a series of expression AST nodes, create a function AST node with the given name that can be called and will return the result of the final expression in the input body nodes. This helps to fix the impedance mismatch of Python, which includes statements and expressions, and Lisps, which have only expressions.
8946	Return True if the compiler should emit a warning about this name being redefined.
8947	Return a Python AST Node for a `do` expression.
8948	Returns a safely generated Python function name from a function name symbol, with a default prefix if none is provided.
8949	Generate a list of Python AST nodes from function method parameters.
8950	Return a Python AST node for a function with a single arity.
8951	Return a Python AST node for a function with multiple arities.
8952	Return a Python AST Node for a `fn` expression. If the `fn` has only one method, use `__single_arity_fn_to_py_ast` to convert it to a Python AST Node. Otherwise, use `__multi_arity_fn_to_py_ast`.
8953	Generate custom `if` nodes to handle `recur` bodies. Recur nodes can appear in the then and else expressions of `if` forms. Recur nodes generate Python `continue` statements, which we would otherwise attempt to insert directly into an expression. Python will complain if it finds a statement in an expression AST slot, so we special case the recur handling here.
8954	Generate an intermediate if statement which assigns to a temporary variable, which is returned as the expression value at the end of evaluation.Every expression in Basilisp is true if it is not the literal values nil or false. This function compiles direct checks for the test value against the Python values None and False to accommodate this behavior. Note that the if and else bodies are switched in compilation so that we can perform a short-circuit or comparison, rather than exhaustively checking for both false and nil each time.
8955	Return a Python AST Node for a Basilisp function invocation.
8956	Return a Python AST Node for a `quote` expression.
8957	Return a Python AST node for `recur` occurring inside a `loop`.
8958	Return a Python AST Node for a recur expression
8959	Get a Python AST Node for a `set!` expression.
8960	Generate a Python AST for a `throw` expression
8961	Return a Python AST Node for a `try` expression.
8962	Generate a Python AST node for accessing a locally defined Python variable
8963	Generate Var.find calls for the named symbol.
8964	Generate a Python AST node for accessing a Var, considering dynamic, redef, and indirection cases.
8965	```json
{
  "summary": "Generate a Python AST node for Python interop property access."
}
```
8966	Generate a Python AST node for accessing a potential Python module variable name.
8967	Generate a Python AST node for accessing a potential Python module variable name with a namespace.
8968	Generate Python AST nodes for constant Lisp forms.
8969	Turn a quoted collection literal of Lisp forms into Python AST nodes. This function can only handle constant values.
8970	Take a Lisp AST node as an argument and produce zero or more Python AST nodes.
8971	Generate the Python Import AST node for importing all required language support modules.
8972	Generate the Python From ... Import AST node for importing language support modules.
8973	Assign a Python variable named `ns_var` to the value of the current namespace.
8974	Creates a new set.
8975	Creates a new set from members.
8976	Eliminate dead code from except handler bodies.
8977	Eliminates no-op constant expressions which are in the tree as standalone statements.
8978	Eliminate dead code from function bodies
8979	Eliminate dead code from while bodies.
8980	Eliminate dead code from except try bodies.
8981	Create a new empty Basilisp Python module.
8982	Return the first element from a sequence, or None if the input is None or cannot be converted to a sequence.
8983	If `o` is an `ISeq`, return the elements after the first in `o`. If `o` is `None`, returns an empty seq. Otherwise, coerces `o` to a seq and returns the rest.
8984	Returns the nth rest sequence of coll, or coll if i is 0.
8985	Returns the nth next sequence of coll.
8986	Creates a new sequence with o as the first element and seq as the rest. If seq is None, returns a list with o. If seq is not a ISeq, attempts to convert it to a ISeq and then cons o onto the resulting sequence.
8987	Coerce the argument o to a ISeq. If o is None, return None.
8988	Concatenate the sequences given by seqs into a single ISeq.
8989	Return a new Map with key-values kvs if m is None. If m is an instance of IAssociative, associate keys to values in m. Raise TypeError if m does not implement Associative interface.
8990	Conjoins xs to collection. New elements may be added in different positions depending on the type of coll. conj returns the same type as coll. If coll is None, return a list with xs conjoined.
8991	Return a function which is the partial application of f with args.
8992	Dereference a Deref object and return its contents. If the object implements IBlockingDeref, it will wait for a specified timeout before returning a default value.
8993	Compare two objects by value. Unlike the standard Python equality operator, this function does not consider 1 == True or 0 == False. All other equality operations are the same and performed using Python's equality operator.
8994	Division reducer. If both arguments are integers, return a Fraction. Otherwise, return the true division of x and y.
8995	Return a sorted sequence of the elements in coll. If a comparator function f is provided, compare elements in coll using f.
8996	Return true if collection contains the key.
8997	Return the value of k in m. Return default if k not found in m.
8998	Recursively convert Python collections into Lisp collections.
8999	Recursively converts Lisp collections into Python collections.
9000	Produce a string representation of an object. If human_readable is False, the string representation of Lisp objects is something that can be read back in by the reader as the same object.
9001	Collect Python starred arguments into a Basilisp list.
9002	Trampoline a function repeatedly until it is finished recurring to help avoid stack growth.
9003	Decorator to set attributes on a function. Returns the original function after setting the attributes named by the keyword arguments.
9004	Return a new function decorated with the provided metadata, or merge metadata if the function already has metadata.
9005	Create a Basilisp function, setting meta and supplying a with_meta method implementation.
9006	Resolve the aliased symbol in the current namespace.
9007	Resolve the aliased symbol to a Var from the specified namespace, or the current namespace if none is specified.
9008	Add generated Python code to a dynamic variable in which_ns.
9009	Bootstrap the environment with functions that are difficult to express with the very minimal lisp environment.
9010	Interns the value bound to the symbol `name` in namespace `ns`.
9011	Create a new unbound Var instance to the symbol `name` in namespace `ns`.
9012	Return the value currently bound to the name `name_sym` in the namespace specified by `ns_sym`.
9013	Return the value currently bound to the name in the namespace specified by `ns_qualified_sym`.
9014	Return the Var currently bound to the name in the namespace specified by `ns_qualified_sym`. If no Var is bound to that name, raise an exception.
9015	Add a gated default import to the default imports.
9016	Add a Symbol alias for a given Namespace.
9017	Intern the Var given in this namespace mapped by the given Symbol. If the Symbol already maps to a Var, this method will not overwrite the existing Var mapping unless the force keyword argument is given and is True.
9018	Swap function used by intern to atomically intern a new variable in the symbol mapping for this Namespace.
9019	Find Vars mapped by the given Symbol input or None if no Vars are mapped by that Symbol.
9020	Add a symbol as an imported symbol in this namespace. If aliases are given, apply them to the symbol.
9021	Return the module if a moduled named by sym has been imported into this Namespace, None otherwise. First try to resolve a module directly with the given name. If no module can be resolved, attempt to resolve the module using import aliases.
9022	Refer var in this namespace under the name sym.
9023	Get the Var referred by Symbol or None if it does not exist.
9024	Refer all _public_ interns from another namespace.
9025	Refer all the Vars in the other namespace.
9026	Private swap function used by `get_or_create` to atomically swap the new namespace map into the global cache.
9027	Get the namespace bound to the symbol `name` in the global namespace cache, creating it if it does not exist. Return the namespace.
9028	Get the namespace bound to the symbol `name` in the global namespace cache. Return the namespace if it exists or None otherwise.
9029	Remove the namespace bound to the symbol name in the global namespace cache and return that namespace. Return None if the namespace did not exist in the cache.
9030	Return a function which matches any symbol keys from map entries against the given text.
9031	Return an iterable of possible completions matching the given prefix from the list of aliased namespaces. If name_in_ns is given, further attempt to refine the list to matching names in that namespace.
9032	Return an iterable of possible completions matching the given prefix from the list of imports and aliased imports. If `name_in_module` is given, further attempt to refine the list to matching names in that namespace.
9033	Return an iterable of possible completions matching the given prefix from the list of interned Vars.
9034	Return an iterable of possible completions matching the given prefix from the list of referred Vars.
9035	A method that returns an iterable of possible completions for a given text in a namespace, considering different prefixes and suffixes.
9036	Get the arguments for a trampolined function. If the function has varargs, unroll the final argument if it is a sequence.
9037	Creates a new list.
9038	Creates a new list from members.
9039	Create a new representer to format key-value pairs as multi-line strings with specified styles.
9040	This function decrypts a JWE token, decodes the resulting JWT token, and returns the payload.
9041	Encrypts the supplied JSON and returns a JWE token.
9042	Remove the key from the request cache and from memcache.
9043	Deconstruct the `Constraint` instance to a tuple.
9044	Close stream.
9045	Parse a FIQL formatted string into an ``Expression``.
9046	Dump the ndb_model to a file using a custom JSON encoder.
9047	Handles decoding of nested date strings.
9048	Tries to decode strings that look like dates into datetime objects.
9049	Override of the default decode method that also uses decode_date.
9050	Overriding the default JSONEncoder.default for NDB support.
9051	Validate version before release.
9052	Generate changelog for a given version.
9053	Find the strongly connected components in a graph using Tarjan's algorithm.
9054	Identify strongly connected components then perform a topological sort of those components.
9055	Sets the parent for this object and validates that it is of type `Expression`.
9056	Get the parent ``Expression`` for this object. Returns the ``Expression`` which contains this object, or raises ``FiqlObjectException`` if the parent is ``None``.
9057	Add an ``Operator`` to the ``Expression``.
9058	Add an element of type `Operator`, `Constraint`, or `Expression` to the `Expression`.
9059	Update the ``Expression`` by joining the specified additional
``elements`` using an "AND" ``Operator``
9060	Update the ``Expression`` by joining the specified additional ``elements`` using an "OR" ``Operator``.
9061	Decorate passed in function and log message to module logger.
9062	Parse received response.
9063	Translate a list of tuples to OrderedDict with key and val as strings.
9064	Check if specific message is present.
9065	Prepare message to be sent.
9066	Flush incomming socket messages.
9067	Enable a given scan field.
9068	Save scanning template to specified filename.
9069	Load scanning template from filename. Template needs to exist in database, otherwise it will not load.
9070	Get information about a given keyword, defaulting to 'stage'.
9071	Include a Python source file in a docstring formatted in reStructuredText.
9072	Find and return the location of package.json.
9073	Extract the JSPM configuration from package.json.
9074	Handle YOURLS API errors by parsing the JSON response and raising appropriate exceptions based on the error codes.
9075	Validate response from YOURLS server.
9076	Generate combined independent variable vector from two waveforms and their dependent variable vectors.
9077	Create new dependent variable vector by interpolating using different methods based on the interpolation type and scale.
9078	Create new independent variable vector by finding the overlap of two given vectors.
9079	Verify that two waveforms can be combined with various mathematical functions.
9080	Load the existing systemjs manifest and remove any entries that no longer exist on the storage.
9081	Define trace parameters for a given model name.
9082	Run module tracing.
9083	shorten a URL with optional keyword and title
9084	This interface is used to expand a short URL or keyword to its corresponding long URL.
9085	Get stats for short URL or keyword.
9086	Get stats about links based on the specified filter and limit.
9087	Get database statistics.
9088	Print STDOUT resulting from a given Bash shell command (relative to the package `pypkg` directory) formatted in reStructuredText.
9089	Prints the STDOUT resulting from a Bash shell command formatted in reStructuredText.
9090	Small log helper
9091	alternative to reify and property decorators. caches the value when it's generated. It caches it as instance._name_of_the_property.
9092	Break an iterable into chunks and yield those chunks as lists until there's nothing left to yield.
9093	take a function that taks an iterable as the first argument. return a wrapper that will break an iterable into chunks using chunkiter and run each chunk in function, yielding the value of each function call as an iterator.
9094	Recursively flatten nested objects
9095	add a handler for SIGINT that optionally prints a given message. For stopping scripts without having to see the stacktrace.
9096	Print a table in TSV (tab-separated values) format
9097	Create a placeholder object with a custom representation using its own name.
9098	Attempts to parse a size in bytes from a human-readable string.
9099	Command line interface for YOURLS. Accepts configuration parameters via switches or configuration file. Requires either `apiurl` and `signature`, or `apiurl`, `username`, and `password` for authentication.
9100	Trace eng wave module exceptions.
9101	Define Sphinx requirements links from a JSON file.
9102	Generate Python interpreter version entries for 2.x or 3.x series.
9103	Generate Python interpreter version entries.
9104	**Input:**  
```python
def ops_to_words(item):
    """Translate requirement specification to words."""
    unsupp_ops = ["~=", "==="]
    # Ordered for  "pleasant" word specification
    supp_ops = [">=", ">", "==", "<=", "<", "!="]
    tokens = sorted(item.split(","), reverse=True)
    actual_tokens = []
    for req in tokens:
        for op in unsupp_ops:
            if req.startswith(op):
                raise RuntimeError("Unsupported version specification: {0}".format(op))
        for op in supp_ops:
            if req.startswith(op):
                actual_tokens.append(op)
                break
        else:
            raise RuntimeError("Illegal comparison operator: {0}".format(op))
    if len(list(set(actual_tokens))) != len(actual_tokens):
        raise RuntimeError("Multiple comparison operators of the same type")
    if "!=" in actual_tokens:
        return (
            " and ".join([op_to_words(token) for token in tokens[:-1]])
            + " "
            + op_to_words(tokens[-1])
        )
    return " and ".join([op_to_words(token) for token in tokens])
```

**Output:**  
```  
Translate requirement specification to words.
```
9105	Chunk input noise data into valid Touchstone file rows.
9106	Chunk input data into valid Touchstone file rows.
9107	Write a `Touchstone` file with given parameters and data.
9108	Add independent variable vector bounds if they are not in vector.
9109	Build unit math operations based on independent and dependent units and a given operator.
9110	Return a modified copy of the waveform object based on the specified operation.
9111	Calculate running area under curve.
9112	Validates min and max bounds are within waveform's independent variable vector.
9113	Return the arc cosine of a waveform's dependent variable vector.
9114	Return the hyperbolic arc cosine of a waveform's dependent variable vector.
9115	Return the arc sine of a waveform's dependent variable vector.
9116	Return the hyperbolic arc tangent of a waveform's dependent variable vector.
9117	Return the running average of a waveform's dependent variable vector.
9118	Convert a waveform's dependent variable vector to decibels.
9119	Return the numerical derivative of a waveform's dependent variable vector using the backwards differences method.
9120	Return the imaginary part of the Fast Fourier Transform of a waveform.
9121	Return the magnitude of the Fast Fourier Transform of a waveform.
9122	Return the phase of the Fast Fourier Transform of a waveform.
9123	Returns the real part of the Fast Fourier Transform of a waveform.
9124	Return the inverse Fast Fourier Transform of a waveform, with the dependent variable vector expressed in decibels.
9125	Returns the imaginary part of the inverse Fast Fourier Transform of a waveform.
9126	Return the magnitude of the inverse Fast Fourier Transform of a waveform.
9127	Return the phase of the inverse Fast Fourier Transform of a waveform.
9128	Return the real part of the inverse Fast Fourier Transform of a waveform.
9129	Return the running integral of a waveform's dependent variable vector using the trapezoidal method.
9130	Return the group delay of a waveform.
9131	Return the natural logarithm of a waveform's dependent variable vector.
9132	Return the numerical average of a waveform's dependent variable vector.
9133	Return the numerical integral of a waveform's dependent variable vector using the trapezoidal method.
9134	Return the maximum value of a waveform's dependent variable vector within specified independent range.
9135	Return the minimum of a waveform's dependent variable vector.
9136	Return the phase of a waveform's dependent variable vector.
9137	Return a copy of the waveform with its dependent variable vector rounded to a given number of decimal places.
9138	Return the square root of a waveform's dependent variable vector.
9139	Return a waveform that is a sub-set of a waveform, potentially re-sampled.
9140	Convert a waveform s dependent variable vector to complex.
9141	Converts a waveform's dependent variable vector to float.
9142	Converts a waveform's dependent variable vector to integer and returns a new waveform with the updated vector.
9143	Return the dependent variable value at a given independent variable point. If the independent variable point is not in the independent variable vector, the dependent variable value is obtained by linear interpolation. Raises ValueError if the independent variable is not in the independent variable vector range.
9144	Only allow lookups for jspm_packages.
9145	Get first sentence of first paragraph of long description.
9146	Builds a mathematical expression from a hierarchical list.
9147	Return position of next matching closing delimiter.
9148	Parse function calls.
9149	Pair delimiters.
9150	Parse a mathematical expression using PyParsing.
9151	Remove consecutive delimiters.
9152	Split a string into a list of words using a specified separator and number of occurrences as delimiter.
9153	Return tuple with mantissa and exponent of number formatted in engineering notation.
9154	Convert number to string ensuring it's not in scientific notation
9155	Converts a number to engineering notation with a specified fractional length and option to right-justify the output.
9156	Convert the given number represented in engineering notation to its floating-point equivalent.
9157	Get the fractional part of a number represented in engineering notation.
9158	Extract the mantissa of a number represented in engineering notation.
9159	Return engineering suffix and its floating point equivalent of a number.
9160	Return engineering suffix from a starting suffix and an number of suffixes offset.
9161	Remove unnecessary delimiters in mathematical expressions, ensuring proper syntax and function naming rules are followed.
9162	Convert number or number string to a number string in scientific notation. Full precision is maintained if the number is represented as a string.
9163	Converts a number to its scientific notation components.
9164	Seeks and removes the sourcemap comment from a file, returning the comment if found.
9165	Check whether `self.app` is missing the '.js' extension and if it needs it.
9166	Bundles the app, running a subprocess with specified options, and returns the relative path to the bundle.
9167	Trace the dependencies for an application. Cache the results on the tracer instance to avoid expensive re-tracing.
9168	Compares the app deptree file hashes with the hashes stored in the cache.
9169	Converts the bytes object to a hexdump
9170	Parse a docstring into ParameterInfo and ReturnInfo objects.
9171	Get a list of all valid identifiers for the current context. Returns a list of all valid identifiers for this context.
9172	Lazily load a callable. Perform a lazy import of a context so that we don't have a huge initial startup time loading all of the modules that someone might want even though they probably only will use a few of them.
9173	Split a line into arguments using shlex and a dequoting routine.
9174	Check if our context matches initialization commands and run them if necessary to initialize the context.
9175	Returns help information for a context or function.
9176	Find a function in the given context by name.
9177	Returns a listing of all functions in the given context, including builtins.
9178	Check if an argument is a flag.
9179	Process arguments from the command line into positional and keyword arguments.
9180	Try to find the value for a keyword argument.
9181	Invokes a function given a list of arguments with the function listed first. The function is searched for using the current context on the context stack and its annotated type information is used to convert all of the string parameters passed in line to appropriate python types.
9182	Invoke a single function with a list of arguments. Search for the function using the current context and convert string parameters to appropriate types based on annotated type information. Returns a boolean indicating if a new context was created and a list with the remaining command line arguments.
9183	Parse and invoke a string line.
9184	Parse a single typed parameter statement, optionally including a description.
9185	Parse a single return statement declaration.
9186	Attempt to find the canonical name of a section.
9187	Classifies a line into a type of object based on its content.
9188	Joins adjacent lines together into paragraphs using either a blank line or indent as separator.
9189	Wrap, format, and print this docstring for a specific width.
9190	Convert value to type 'typename'
9191	Convert binary data to type 'type'.
9192	Get the size of the specified type for converting a hex string to the type, return 0 if unknown.
9193	Convert value to type and format it as a string
9194	Validates that all required type methods are implemented, raising an ArgumentError if the type is not valid.
9195	Check if type is known to the type system.
9196	Given a potentially complex type, split it into its base type and specializers
9197	Instantiate a complex type.
9198	Return the type object corresponding to a type name. If type_name is not found, this triggers the loading of external types until a matching type is found or until there are no more external type sources.
9199	Checks if a given format is known and valid for a specified type.
9200	Add a type to our type system.
9201	Given a module containing a list of some types, this function finds all symbols in the module that do not start with an underscore and attempts to import them as types.
9202	Check if we have enough arguments to call this function.
9203	Adds type information for a parameter by name.
9204	Add type information to the return value of this function.
9205	Use a custom function to print the return value.
9206	Try to convert a prefix into a parameter name, ensuring there's a unique match.
9207	Get the parameter type information by name.
9208	Return our function signature as a string. By default this function uses the annotated name of the function however if you need to override that with a custom name you can pass name=<custom name>
9209	Format the return value of this function as a string.
9210	Convert and validate a positional argument.
9211	Check if there are any missing or duplicate arguments. Returns a dictionary of argument name to argument value, pulled from either the value passed or the default value if no argument is passed. Raises an ArgumentError if a positional or keyword argument does not fit in the spec, or if an argument is passed twice.
9212	Given a parameter with type information, convert and validate it.
9213	Returns a multiline string with the message, class name, and key-value parameters passed to create the exception. If `exclude_class` is `True`, the exception class name is excluded.
9214	Convert this exception to a dictionary. Returns a dictionary containing the exception's reason, type, and parameters.
9215	Check the type of all parameters with type information, converting as appropriate and then execute the function.
9216	Parse a list of validator names or n-tuples, checking for errors. Return a list of validator function names and their arguments.
9217	Find all annotated functions inside of a container. Annotated functions are identified as those that do not start with a _ character and are either annotated with metadata or strings that point to lazily loaded modules. Returns a dict with all of the found functions in it.
9218	Given a module, create a context from all of the top level annotated symbols in that module.
9219	Returns usage information about a context or function
9220	Decorate a function to give type information about its parameters.
9221	Specify how the return value of this function should be handled.
9222	Specify that this function returns a typed value.
9223	Declare that a class defines a context
9224	Annotate a function using information from its docstring. The annotation happens at function first call to improve startup time.
9225	Mark a function as callable from the command line. This function is meant to be called as decorator. This function also initializes metadata about the function's arguments that is built up by the param decorator.
9226	Given an object with a docstring, returns the first line of the docstring.
9227	Load ``cron`` modules for applications listed in ``INSTALLED_APPS``.
9228	Register tasks with cron.
9229	Prints the tasks that would be installed in the crontab for debugging purposes.
9230	Uninstall tasks from cron.
9231	Create a project handler for the given uri and local path.
9232	Load the projects config data from local path
9233	Save the projects configs to local path
9234	Creates a property with the given name, but the cls will be created only with the first call.
9235	Get the dependencies of the Project
9236	Calls the project handler's same-named function and passes the command result to it.
9237	Initialize a project with a given path and handle failed initialization statuses.
9238	Takes an object, a key, and a value, and produces a new object with the given value set for the specified key, while preserving the original object's integrity.
9239	Takes an object, a string, and a value and produces a new object that is a copy of the original but with the attribute called ``name`` set to ``value``. The function is used by many lenses to set attributes on states even when those states do not ordinarily support ``setattr``. The function is designed to have a similar signature as python's built-in ``setattr`` except that it returns a new object that has the attribute set rather than mutating the object in place. It's what enables the ``lens.some_attribute`` functionality.
9240	Given an object and an iterable, produce a new object that is a copy of the original with data from the iterable reincorporated, with state in `self` that is not modeled by the iterable unchanged. This function is used by EachLens to synthesise states from iterables. The function is implemented as `def from_iter(self, iterable)`.
9241	Sets the focus to `newvalue`.
9242	Set many foci to values taken by iterating over `new_values`.
9243	Decorator to apply a function to the focus.
9244	Returns a function that can be called `n` times with a single argument before returning all the args that have been passed to it in a tuple.
9245	Intended to be overridden by subclasses. Raises NotImplementedError.
9246	Runs the lens over the `state` applying `f` to all the foci collecting the results together using the applicative functor functions defined in `lenses.typeclass`.
9247	Returns the focus within a given state. If multiple items are focused, it attempts to join them as a monoid. Raises TypeError if not an instance of Fold or ValueError if no focus is present.
9248	Converts the given state into a list of all foci, requiring the optic to be an instance of Fold. If the optic cannot get any foci, a TypeError is raised.
9249	Applies a function `fn` to all the foci within `state`. Requires kind Setter.
9250	Sets all the foci within `state` to `value`. Requires kind Setter. This method will raise TypeError when the optic has no way to set foci.
9251	Sets all the foci within `state` to values taken from `iterable`. Requires kind Setter. This method will raise TypeError when the optic has no way to set foci.
9252	Returns a class representing the 'kind' of optic.
9253	Instantiates a GameState object and enters a REPL-like loop, handling user input, updating the game state, and outputting the new state.
9254	returns the vector moved one step in the direction of the other, potentially diagonally.
9255	Takes a single character string as input and alters the game state according to that input. Mostly, this means moving the player around. Returns a new game state and boolean indicating whether the input had an effect on the state.
9256	Produces a new game state in which the robots have advanced towards the player by one step. Handles the robots crashing into one another too.
9257	Returns a completed game state object setting an optional message to display after the game is over.
9258	Shows the board to the player on the console and asks them to make a move.
9259	Play a game of naughts and crosses against the computer.
9260	Return a board with a cell filled in by the current player. If the cell is already occupied then return the board unchanged.
9261	Determine the winner of the board if one exists.
9262	Generates all the combinations of board positions that need to be checked for a win.
9263	Process a single item by adding it to a list. Upload the list to S3 if the list size reaches the maximum chunk size.
9264	Handle spider open event by storing a timestamp for URL formatting.
9265	Do upload items to S3.
9266	Build file object from items using gzip if specified.
9267	Returns the account state information associated with a specific address.
9268	Returns the asset information associated with a specific asset ID.
9269	Returns the block information associated with a specific hash value or block index.
9270	Returns the hash value associated with a specific block index.
9271	Returns the system fees associated with a specific block index.
9272	Returns the contract information associated with a specific script hash.
9273	Returns detailed information associated with a specific transaction hash.
9274	Returns the value stored in the storage of a contract script hash for a given key.
9275	Returns the transaction output information corresponding to a hash and index.
9276	Invoke a contract with given parameters and return the result.
9277	Invoke a contract's function with given parameters and returns the result.
9278	Invoke a script on the VM and return the result.
9279	Broadcasts a transaction over the NEO network and returns the result.
9280	Validate if the considered string is a valid NEO address.
9281	This interface is used to call the JSON-RPC endpoint and handle the response.
9282	Check if the input string is a valid SHA256 hash.
9283	Returns True if the string is a valid RIPEMD160 hash
9284	Returns a list of parameters meant to be passed to JSON-RPC endpoints.
9285	Decode values embedded in an invocation result dictionary.
9286	Emulates keyword-only arguments under Python 2. Works with both Python 2 and Python 3. Converts all or some of the default arguments of a function into keyword-only arguments.
9287	Handle timezone aware datetime transformations.
9288	We ensure that after truncating, we use the correct timezone, even if we 'jump' over a daylight saving time switch.
9289	Renders the barcode and saves it in `filename`.
9290	Renders the barcode using `self.writer`.
9291	Calculate the checksum for EAN13-Code
9292	Renders the barcode to whatever the inheriting writer provides, using the registered callbacks.
9293	Call that method in the pyramid configuration phase.
9294	Manage environment variables and handle file operations in a S3-like system.
9295	Download a file or folder from the S3-like service.
9296	Upload a file or folder to the S3-like service.
9297	Create a folder inside the local config folder named after the section and download the environment file defined by the S3CONF variable for this section to this folder.
9298	For each section defined in the local config file, uploads the environment file from the local config folder to the remote S3CONF path.
9299	Split a env var text like `ENV_VAR_NAME=env_var_value` into a tuple (`'ENV_VAR_NAME'`, `'env_var_value'`)
9300	Add basic authentication to the requests of the clients.
9301	Authenticate via an api key.
9302	Yields objects from JSON files in the specified folder and its subfolders.
9303	Returns a dictionary of schema names mapping to Schema objects.
9304	Return the schema.
9305	Return a jsonschema.RefResolver for the schemas.
9306	Validate an object against the schema. Raise a ValidationException if the object does not match the schema.
9307	Return a list of valid examples for the given schema.
9308	Return a list of examples which violate the schema.
9309	'Build authorization URL for User Agent.'
9310	Process tokens and errors from redirect_uri.
9311	Refresh or acquire access_token.
9312	Returns "id" of a OneDrive user.
9313	Get OneDrive object representing list of objects in a folder.
9314	Create a folder with a specified "name" attribute.
9315	Add comment message to a specified object.
9316	Convert or dump object to unicode.
9317	Recursively create and set the drop target for obj and its children.
9318	Event handler for drag&drop functionality
9319	track default top level window for toolbox menu default action
9320	Open the inspector windows for a given object
9321	Open a shell
9322	Convert PythonCard font description to gui2py style.
9323	Loads HTML page from location and then displays it
9324	Convenience function for accessing tag parameters
9325	Process an outgoing communication
9326	Show a tip message with various tips for using the gui2py designer, including how to close the main window, drag and drop/draw controls, select controls, edit properties, and access the context menu. The tip window is displayed automatically after a delay and automatically destroyed after a longer delay.
9327	Handle mouse down event to select objects and store start position for multi-selection or rubberband effect.
9328	Move the selected object
9329	Resize or move an object based on mouse events and handle adjustments for grid snapping.
9330	support cursor keys to move components one pixel at a time
9331	Deletes all selected objects.
9332	"Duplicate each selected object."
9333	Capture and refresh the control image after an update
9334	Calculate best position for Top-Level window. Position is set to absolute lower-right of the screen.
9335	Returns the pyth item data associated with the item
9336	Set the python item data associated with the wx item
9337	Do a reverse lookup for an item containing the requested data.
9338	Remove the item from the list and unset the related data
9339	Remove all items from the list and unset related data
9340	"Remove all items and column headings"
9341	Sets the item at index 'n' to be the selected item.
9342	Returns the label of the selected item or an empty string if none.
9343	Associates the given client data with the item at position n, and establishes a reverse association for easy retrieval.
9344	Adds the item to the control, associating the given data if not None
9345	Construct a string representing the object, considering various attributes and their values, and formatting them according to the specified indentation and column width.
9346	Find an object already created
9347	Create a new object exactly similar to self
9348	Called when adding a control to the window
9349	Re-parents a child control with the new wx_obj parent.
9350	make several copies of the background bitmap
9351	Draw the image as background
9352	Custom draws the label when transparent background is needed
9353	Look for every file in the directory tree and return a dict
9354	Return a list of children sub-components that are column headings
9355	Update the grid if rows and columns have been added or deleted.
9356	Sends an event to the grid table to update all of the values.
9357	Updates the column attributes in a grid to add the appropriate renderer based on the column's properties.
9358	Sorts the data based on the column indexed by col.
9359	Remove all rows and reset internal structures.
9360	Called to create the control, which must derive from wxControl
9361	Fetch the value from the table and prepare the edit control
9362	Complete the editing of the current cell. Returns True if changed
9363	Check if the given key should start editing
9364	Handle the first key press in the editor, convert it to a character, and set it in the text control or skip the event.
9365	A metaclass generator that registers a class as the handler for a specific input type.
9366	Enables or disables all menu items.
9367	check if all menu items are enabled
9368	Enable or disable all top menus
9369	check if all top menus are enabled
9370	Remove a menu from the list of menus without using its position.
9371	Process form submission.
9372	Add a tag attribute to the wx window
9373	Make the first column of the table non-breaking.
9374	Get an autodoc.Documenter class suitable for documenting the given object.
9375	Reformat a function signature to a more compact form
9376	Import a Python object given its full name.
9377	Smart linking role. Expands to ':obj:`text`' if `text` is an object that can be imported; otherwise expands to '*text*'.
9378	Show a simple pop-up modal dialog
9379	Modal dialog asking for an input, returns string or None if cancelled
9380	Show a dialog to select a font.
9381	Show a dialog to pick a color
9382	Show a dialog to choose a directory and return the selected path.
9383	Shows a find text dialog returns a dictionary containing the search text, whole words only flag, and case sensitive flag.
9384	Force appearance of the button next to the item
9385	Set icon based on resource values
9386	Display or hide the window, optionally disabling all other windows
9387	Open, read, and evaluate the resource from the source file.
9388	Save the resource to the source file
9389	Create a gui2py window based on the python resource.
9390	Create a gui2py control based on the python resource
9391	Associate event handlers with components.
9392	translate gui2py attribute name from pythoncard legacy code
9393	Write content to the clipboard, data can be either a string or a bitmap
9394	Find out what items are documented in the given object's docstring.
9395	Add the object and all their childs
9396	Select the object and show its properties
9397	Load the selected item in the property editor.
9398	Update tree item when object name changes.
9399	Open a popup menu with options for the selected object, including delete, duplicate, bring to front, send to back, and add child.
9400	Perform the actual serialization of an image to a URL pointing at a scaled and cached image.
9401	Returns a decorator function for adding an expression filter.
9402	Returns a decorator function for adding a node filter.
9403	Asserts that the page has the given path. By default this will compare against the path+query portion of the full URL.
9404	Asserts that the page doesn't have the given path.
9405	Checks if the page has the given path.
9406	Checks if the page doesn't have the given path.
9407	Select the option if it is inside a select tag and is not disabled. Log a warning if the option is disabled.
9408	Applies a filter to the given expression based on the provided value.
9409	Returns an instance of the given browser with the given capabilities.
9410	Returns the XPath query for this selector.
9411	Returns whether the given node matches all filters.
9412	Switch to the given frame.
9413	Executes the wrapped code and accepts an alert, optionally waiting for the modal to appear. Raises an error if the modal is not found.
9414	Execute the wrapped code, accepting a confirm.
9415	Executes the wrapped code, dismissing a confirmation modal. Optionally waits for the modal to appear after executing the code.
9416	Executes the wrapped code, accepting a prompt and optionally responding to it. Raises an exception if a modal dialog is not found.
9417	Execute the wrapped code, dismissing a prompt.
9418	Save a snapshot of the page. If invoked without arguments, it will save a file to capybara.save_path and the file will be given a randomly generated filename. If invoked with a relative path, the path will be relative to capybara.save_path.
9419	Save a screenshot of the page to a specified path. If no path is provided, it will save to the default save path with a randomly generated filename.
9420	Raise errors encountered by the server.
9421	Returns whether the given node matches the filter rule with the given value.
9422	Checks if the page or current node has a radio button or checkbox with the given label, value, or id, that is currently checked.
9423	Checks if the page or current node has no radio button or checkbox with the given label, value, or id that is currently checked.
9424	Checks if the page or current node has a radio button or checkbox with the given label, value, or id, that is currently unchecked.
9425	Checks if the page or current node has no radio button or checkbox with the given label, value, or id, that is currently unchecked.
9426	Asserts that the page or current node has the given text content, ignoring any HTML tags.
9427	Asserts that the page or current node doesn't have the given text content, ignoring any HTML tags.
9428	Asserts that the page has the given title.
9429	Asserts that the page doesn't have the given title.
9430	Checks if the page has the given title.
9431	Checks if the page doesn't have the given title.
9432	Find all elements on the page matching the given selector and options.
9433	Find the first element on the page matching the given selector and options, or None if no element matches.
9434	Return the inner content of a given XML node, including tags.
9435	Returns the inner text of a given XML node, excluding tags.
9436	Normalize URL by properly escaping all query keys.
9437	Define a write-only property with the given setter function and a setter decorator defined as the property's getter function, allowing multiple ways to set the property.
9438	Method for synchronizing function execution with optional custom behavior based on exceptions and wait times.
9439	Returns whether to catch the given error.
9440	Returns how the result count compares to the query options.
9441	Attempts to fill the result cache with at least the given number of results. Returns True if the cache contains at least the given size.
9442	Returns whether the given query options expect a possible count of zero.
9443	Returns a expectation failure message for the given query description.
9444	Returns whether the given count matches the given query options.
9445	Normalizes the given value to a string of text with extra whitespace removed. Handles byte sequences, ``None`` values, and casts other types to strings. Returns the normalized text.
9446	Strip outer whitespace and collapse inner whitespace in a given text.
9447	Returns a compiled regular expression for the given text.
9448	Determines if the query resolves for the given session based on the actual path and expected path.
9449	Resizes the window to the given dimensions.
9450	Boots a server for the app if it isn't already booted.
9451	Descriptor to change the class-wide getter on a property.
9452	Change the instance method.
9453	Change class method
9454	Returns outer traceback text for logging.
9455	Return object representation block.
9456	Returns a logger for the given instance, first checking the class instance, then the instance's attributes `logger` and `log`, and finally returning the global `_LOGGER`.
9457	Sets the logger instance to use as an override. If `logger` is `None` or an instance of `logging.Logger`, it assigns `logger` to `self.__logger`. Otherwise, it retrieves a logger instance using `logging.getLogger(logger)` and assigns it to `self.__logger`.
9458	Low-level method to call the Slack API.
9459	List of channels of this slack team
9460	List of users of this slack team
9461	High-level function for creating messages. Return packed bytes.
9462	Translate machine identifiers into human-readable
9463	Send message to Slack.
9464	Get available messages from the channel layer and send them through to the protocol, then recursively call itself with a delay.
9465	Main interface. Instantiate the SlackAPI, connect to RTM and start the client.
9466	Pass in raw arguments, instantiate Slack API and begin client.
9467	Return a dict of keys that differ with another config object.
9468	Given a string add necessary codes to format the string.
9469	Run when a task starts. Record the task name and reset the printed flag.
9470	Run when a task finishes correctly.
9471	Display info about playbook statistics.
9472	Run when a task is skipped.
9473	Converts a CIDR formatted prefix into an address netmask representation.
9474	Decorator that checks if a value passed to a Jinja filter evaluates to false and returns an empty string. Otherwise calls the original Jinja filter.
9475	### Output:
Add a model. The model will be assigned to a class attribute with the YANG name of the model. If not set, verify the model is in SUPPORTED_MODELS.
9476	Returns a dictionary with the values of the model, optionally filtering by set values.
9477	Load a dictionary into the model.
9478	Returns a dictionary with the values of the model. Note that the values of the leafs are evaluated to python types.
9479	Parses native configuration and loads it into the corresponding models. Only models that have been added to the root object will be parsed. If ``native`` is passed to the method that's what we will parse, otherwise, we will use the  ``device`` to retrieve it.
9480	Parses native state and loads it into corresponding models.
9481	Translates the object to native configuration based on merge and replace strategies.
9482	Loads and returns all filters.
9483	Find the necessary file for the given test case.
9484	Given a model, return a representation of the model in a dict. This is mostly useful to have a quick visual representation of the model.
9485	Given two models, return the difference between them.
9486	POST to URL and get result as a response object.
9487	Construct a full URL for obtaining an authorization code from the provider's authorization URI. Use this URI in a client frame to request an authorization code.
9488	Get an access token from the provider token URI.
9489	Return query parameters as a dictionary from the specified URL.
9490	Return a URL with the query component removed.
9491	Construct a URL based off of base containing all parameters in the query portion of base plus any additional parameters.
9492	Handle an internal exception that was caught and suppressed.
9493	Return a response object from the given parameters.
9494	Return a HTTP 302 redirect response object containing the error.
9495	Return a response object from the given JSON data.
9496	Generate HTTP response with authorization code.
9497	Generate access token HTTP response from a refresh token.
9498	Generate access token HTTP response.
9499	Get authorization code response from a URI. This method will ignore the domain and path of the request, instead automatically parsing the query string parameters.
9500	Get a token response from POST data
9501	Get authorization object representing status of authentication.
9502	Open the smbus interface on the specified bus.
9503	Read a single byte from the specified device.
9504	Read many bytes from the specified device.
9505	Read a single byte from the specified cmd register of the device
9506	Write many bytes to the specified device. buf is a bytearray
9507	Write a byte of data to the specified cmd register of the device.
9508	Write a buffer of data to the specified cmd register of the device.
9509	Returns the CDN URL of a file, with an option to include default effects.
9510	Create a copy of the file on Uploadcare or Custom Storage. The `File.copy` method is deprecated and will be removed in version 4.0.0. Use `create_local_copy` and `create_remote_copy` instead.
9511	Create a local file copy on Uploadcare Storage with optional effects and storage settings.
9512	Create a file copy in remote storage.
9513	Constructs ``File`` instance from file information.
9514	Uploads a file and returns a ``File`` instance.
9515	Uploads a file from a given URL and returns a ``FileFromUrl`` instance.
9516	Uploads file from given URL and returns File instance.
9517	Returns CDN urls of all files from group without API requesting.
9518	Constructs a ``FileGroup`` instance from group information.
9519	Creates file group and returns `FileGroup` instance.
9520	Base method for storage operations.
9521	Extract uuid from each item of specified seq.
9522	A common function for building methods of the "list showing".
9523	Iterates over "iter_content" and draws a progress bar to stdout.
9524	Makes Uploading API request and returns response as ``dict``. It takes settings from ``conf`` module. The method constructs a URL based on the given ``path`` and makes a request using the provided HTTP verb, data, and files. If the response status code is 204, it returns an empty dictionary. If the response status code is between 200 and 300 and the content type is JSON, it parses and returns the JSON response. If the response status code is 400 or 404, it raises an ``InvalidRequestError``. For any other status code or JSON parsing errors, it raises an ``APIError``.
9525	Returns the status of Home Mode
9526	Return a list of cameras.
9527	Return a list of cameras matching the given camera IDs.
9528	Return bytes of camera image.
9529	This interface is used to disable a camera by specifying its ID.
9530	Return motion settings matching camera_id.
9531	This interface is used to update motion settings for a specific camera using keyword arguments.
9532	Update cameras and motion settings with latest from API.
9533	Determines if the given list item is the last item in its list based on metadata and current item ID.
9534	Finds consecutive li tags with content that have the same list id.
9535	The level of indentation for an li tag based on the w:ilvl value.
9536	Return the vMerge node for cell, if it exists
9537	Get the grid span value of a table cell in a DOCX document.
9538	When calculating the rowspan for a given cell it is required to find all table cells 'below' the initial cell with a v_merge. This function will return the td element at the passed in index, taking into account colspans.
9539	Check to see if the various tags are present and set to False for italic, bold and underline. If the tag is present and set to False, then the style should not be present.
9540	Check if the r tag passed in is considered bold
9541	Check if the r tag passed in is considered italicized.
9542	Check if the 'r' tag passed in is considered underlined.
9543	Check if a p tag is considered a title
9544	Return elements from an r tag that are t tags, drawing tags, pict tags, or br tags in that order.
9545	Return a dictionary based on the relationship id and the target.
9546	Extract out the document data, numbering data, and the relationship data from a ZipFile.
9547	Retrieve the list type from metadata based on numId and ilvl.
9548	Build the list structure and return the root list
9549	Construct a table row (`tr`) element with all nested table cells (`td`) populated.
9550	This function builds a table object with all rows and cells correctly populated. It creates a blank table element, retrieves rowspan values for cells with a rowspan, and iterates through the table to build and append tr elements to the table element. It returns the populated table element and a list of visited nodes.
9551	Generate the string data for a t tag, escaping and modifying the text based on the parent element and metadata.
9552	Remove all tags that have the tag name `tag`
9553	Find the location of a dataset on disk, downloading if needed.
9554	Load the MNIST digits dataset.
9555	Load the CIFAR10 image dataset and split it into training, validation, and test sets.
9556	Plot an array of images in a grid.
9557	Create a plot of weights, visualized as "bottom-level" pixel arrays.
9558	Create a plot of convolutional filters, visualized as pixel arrays.
9559	Create a callable that generates samples from a dataset.
9560	Encode a text string by replacing characters with alphabet index.
9561	Create a callable that returns batches of training data for classifier training.
9562	Draws a sequential sample of class labels from this network.
9563	Add a convolutional weight array to this layer's parameters.
9564	Encode a dataset using the hidden layer activations of our network.
9565	Decode an encoded dataset by computing the output layer activation.
9566	Find a layer output name for the given layer specifier.
9567	Compute R^2 coefficient of determination for a given input.
9568	Compute a greedy classification for the given set of data.
9569	Compute class posterior probabilities for the given set of data.
9570	Compute the logit values that underlie the softmax output.
9571	Compute the mean accuracy on a set of labeled data.
9572	Extracts a single batch of data for training a model, including features, labels, and a mask indicating valid data.
9573	A callable that chooses sequences from netcdf data.
9574	Load a saved network from a pickle file on disk.
9575	Create a matrix of randomly-initialized weights with specified parameters.
9576	Create a vector of randomly-initialized values.
9577	Get the outputs from a network that match a pattern.
9578	Get the parameters from a network that match a pattern.
9579	Construct common regularizers from a set of keyword arguments.
9580	A list of Theano variables used in this loss.
9581	Build a Theano expression for computing the accuracy of graph output.
9582	Helper method for defining a basic loop in theano.
9583	Construct an activation function by name.
9584	Select a random sample of n items from xs.
9585	Clear the current loss functions from the network and add a new one.
9586	Train our network, one batch at a time
9587	Train the network until the trainer converges. Returns training and validation results.
9588	Construct a unique string key representing a computation graph based on its network topology, losses, and regularizers.
9589	Connect the layers in this network to form a computation graph.
9590	A list of Theano variables for feedforward computations.
9591	Functionality:
Retrieves a list of Theano variables involved in loss computations, ensuring each variable is included only once even if referenced in multiple losses.
9592	Get a parameter from a layer in the network.
9593	Compute a forward pass through the network's layers using the provided input `x`. The function handles regularization and compilation of the forward pass graph if it hasn't been done before, and returns the activation values of each layer.
9594	Compute a forward pass of the inputs, returning the network output.
9595	Compute R^2 coefficient of determination for a given labeled input.
9596	Save the state of the network to a pickle file on disk. If the `filename_or_handle` is a string, it names the file; if it is a file-like object, this object will be used for writing. The output will be automatically gzipped if the filename ends in ".gz".
9597	Load a saved network from disk.
9598	Return a variable representing the regularized loss for a neural network, including the loss computation and any regularizers.
9599	Return expressions to run as updates during network training.
9600	Return the number of "neurons" in this layer's default output.
9601	Create Theano variables representing the outputs of this layer.
9602	Bind this layer into a computation graph. This method initializes the layer by resolving inputs, outputs, setting up activations, and optionally resetting and initializing parameters.
9603	Resolves the names of inputs for this layer into shape tuples.
9604	Resolve the names of outputs for this layer into shape tuples.
9605	Log some information about this layer.
9606	Log information about this layer's parameters. Calculate the total number of elements across all parameters.
9607	Format a string by appending a dot and the instance's name if it does not already contain a placeholder.
9608	Given a list of layers, find the layer output with the given name. Raises `util.ConfigurationError` if there is no such layer or if there are multiple matches. Returns the fully-scoped name and shape of the named output.
9609	Get a shared variable for a parameter by name.
9610	Create a new bias vector with the specified parameters.
9611	Create a specification dictionary for this layer.
9612	Returns the envelope of a LogGabor
9613	Returns the image of a LogGabor.
9614	Add an IntervalTier or a TextTier on the specified location.

:param str name: Name of the tier, duplicate names are allowed.
:param str tier_type: Type of the tier.
:param int number: Place to insert the tier, when ``None`` the number
    is generated and the tier will be placed on the bottom.
:returns: The created tier.
:raises ValueError: If the number is out of bounds.
9615	Remove a tier by name or number, removing only the first matching tier when multiple exist. Raises an IndexError if no matching tier is found.
9616	Get a tier by its name or number. Returns the first tier if multiple exist with the same name. Raises an IndexError if the tier doesn't exist.
9617	Converts the object to an pympi.Elan.Eaf object.
9618	Add a point to the TextTier with time, text, and overlap check.
9619	Add an interval to the IntervalTier with bounds checking.
9620	Remove an interval if it exists, does nothing otherwise. Raises an exception if the tier is not an IntervalTier.
9621	Remove a point at a given time. If no point is found or if the tier is not a TextTier, nothing happens.
9622	Provide all the intervals or points, sorted if specified.
9623	Returns the true list of intervals including the empty intervals.
9624	Function to pretty print the XML, meaning adding tabs and newlines.
9625	Add an annotation to a tier with start and end times, and optional value and SVG reference. Raises ValueError if the tier already contains reference annotations, if the start and end times are invalid, or if the annotation ID is already in use.
9626	Add an entry to a controlled vocabulary.
9627	Add a description to a controlled vocabulary.
9628	Add an external reference.
9629	Add a language with the given ID, definition, and label.
9630	Add lexicon reference.
9631	Helper function to add a linguistic type with various constraints and parameters.
9632	Add a linked file with specified parameters and handles MIME type guessing.
9633	Add a locale with the specified language code, country code, and variant.
9634	Add a secondary linked file.
9635	Add a tier with various attributes, including tier_id, linguistic type, parent, locale, part, ann, language, and tier_dict. If the tier_id is empty or the linguistic type is unavailable, the method will raise a ValueError. If the locale or language is not present in the respective lists, the method will ignore those options. The method will store the tier information in a dictionary.
9636	Clean up all unused timeslots. This can and will take time for larger tiers. When you want to do a lot of operations on a lot of tiers, please unset the flags for cleaning in the functions so that the cleaning is only performed afterwards.
9637	Extracts the selected time frame as a new object.
9638	Generate the next annotation id, this function is mainly used internally.
9639	Generate the next timeslot id internally, optionally using an initial time. Raises ValueError if the time is negative.
9640	Give all child tiers for a tier.
9641	Give the full time interval of the file. Note that the real interval can be longer because the sound file attached can be longer. Returns a tuple of the form: `(min_time, max_time)`.
9642	Returns the reference annotation data after a given time, including overlapping annotations.
9643	Get the reference annotation data before a specified time. If an annotation overlaps with the specified time, that annotation is returned.
9644	Return a list of all tiers matching a linguistic type.
9645	Merges tiers into a new tier, gluing annotations together if the gap is lower than the threshold.
9646	Remove all annotations from a tier
9647	Remove a controlled vocabulary description. If the language reference is found within the controlled vocabulary, it will be deleted.
9648	Remove all licenses matching both key and value.
9649	Remove all linked files that match all the criteria, criterias that are ``None`` are ignored.
9650	Remove all properties matching both key and value.
9651	Remove a reference annotation.
9652	Remove all secondary linked files that match all the criteria, considering only the non-None criteria in the filter.
9653	Remove a tier and optionally clean the timeslots.
9654	Remove multiple tiers efficiently by delaying the cleaning of timeslots.
9655	Rename a tier, including its child tiers with the tier as a parent.
9656	Shifts all annotations in time. Squashes or discards annotations that are in the beginning and a left shift is applied.
9657	Will be used to create the console script
9658	Display debug information for the storage, including base level, base directory, runs, and character information with resolutions and types.
9659	Get the paragraph base embedding level. Returns 0 for LTR, 1 for RTL.
9660	Get the paragraph base embedding level and direction, set the storage to the array of chars
9661	Applies X1 to X9 rules of the unicode algorithm.
9662	Split the storage to run of char types at the same level. Applies X10.
9663	Resolves weak type rules W1 - W7 as defined in Unicode bidi algorithm.
9664	Resolving neutral types according to Unicode bidi rules N1 and N2
9665	Reverse any contiguous sequence of characters that are at a specific level or higher, from the highest level to the lowest odd level on each line.
9666	Reorders resolved levels in storage based on L1 and L2 rules, applying paragraph and sequence levels, and handling line breaks for debugging if required.
9667	Injects the current working file into the context.
9668	Convert compiled .ui file from PySide2 to Qt.py
9669	Append to self, accessible via Qt.QtCompat
9670	Qt.py command-line interface.
9671	Add members found in prior versions up to the next major release. These members are deprecated and will be removed in the next major release.
9672	Try showing the most desirable GUI
9673	Return the most desirable of the currently registered GUIs.
9674	Deregisters supported hosts.
9675	Add Pyblish to file-menu
9676	Maintain selection during context.
9677	Maintain current time during context.
9678	Shows a warning message box informing the user about to register a new GUI in case no GUI is registered or available.
9679	Replace any Types referenced by name in the Message object with the real class.
9680	Get the data as it will be charted. The first set will be the actual first data set. The second will be the sum of the first and the second, etc.
9681	Return all the values for a single axis of the data.
9682	Draw a constant line on the y-axis with the label
9683	Cache the parameters necessary to transform x & y coordinates
9684	"""
Swaps keys for values in a dictionary mapping
"""
9685	Much like the built-in function range, but accepts floats.
9686	Adds a data set to the graph, summing elements if the data is added multiple times or if the lengths of the data sets differ, assuming missing values are zero.
9687	Add SVG definitions
9688	Adds data to the graph object. May be called several times to add additional data sets.
9689	Process the template with the data and config which has been set and return the resulting SVG. Raises ValueError when no data set has been added to the graph object.
9690	Calculates the margin to the left of the plot area, setting border_left.
9691	Calculate the margin in pixels to the right of the plot area, setting border_right.
9692	Calculate the margin in pixels above the plot area, setting border_top.
9693	Add pop-up information to a point on the graph.
9694	Calculate the margin in pixels below the plot area, setting border_bottom.
9695	Draws a graph and sets up the SVG elements for the axes and background.
9696	Adds text for a datapoint
9697	Draw the X axis labels
9698	Draw the Y axis labels
9699	Draws X-axis guidelines in a graphical representation, skipping the first one.
9700	Draw the Y-axis guidelines
9701	Draws the graph title and subtitle
9702	Hard-code the styles into the SVG XML if style sheets are not used.
9703	Create a base SVG document with root attributes, processing instructions, comments, and elements like defs and rect as specified.
9704	Get the stylesheets for this instance.
9705	Start a bot on the given network, optionally joining some channels
9706	Send raw data over the wire if connection is registered. Otherwise, save the data to an output buffer for transmission later on. If the force flag is true, always send data, regardless of registration status.
9707	Connects to the IRC server using the nickname
9708	Send a message to a channel or a single user based on the provided arguments.
9709	Low-level dispatching of socket data based on regex matching, handles nickname changes, PING messages, user events, channel and private messages.
9710	Generates a new nickname based on the original nickname followed by a random number.
9711	Respond to periodic PING messages from server
9712	Send all pending data when the connection to the server is registered.
9713	Main loop of the IRCConnection - reads from the socket and dispatches based on regex matching
9714	Register the worker with the boss
9715	Run tasks in a greenlet, pulling from the workers' task queue and reporting results to the command channel.
9716	Decorator to ensure that commands only can come from the boss.
9717	Return the command patterns and their corresponding handler methods that the worker bot listens for.
9718	Received registration acknowledgement and join the command channel, indicating that registration succeeded.
9719	Work on a task from the BotnetBot.
9720	Indicate that the worker with the given nick is performing this task.
9721	Send a validation email to the user's email address.
9722	Send a password reset to the user's email address.
9723	Ensures passwords contain mixed case letters, numbers, and optionally ASCII symbols and spaces. Excludes non-ASCII characters for simplicity and security. Future enhancements may include blacklisting common passwords and limiting repeated characters. Does not enforce password length.
9724	Use `token` to allow one-time access to a view. Set the user as a class attribute or raise an `InvalidExpiredToken`.
9725	HTTP DELETE operation to delete a user's avatar by setting it to None and saving the user object, with a response status of 204 No Content.
9726	Throttle POST requests only.
9727	Returns a single global executor with the specified maximum number of worker threads.
9728	Provides a single global client instance for interacting with Docker, optionally using TLS configuration and environment variables.
9729	A tuple consisting of the TLS client certificate and key if they have been provided, otherwise None.
9730	Service name inside the Docker Swarm
9731	wrapper for calling docker methods to be passed to ThreadPoolExecutor
9732	Call a docker method in a background thread and return a Future
9733	Check for a task state like `docker service ps id`.
9734	Stop and remove the Docker service, logging the process.
9735	Check lowercased email is unique.
9736	Check the old password is valid and set the new password.
9737	Set the new password for the user.
9738	### Example 4:
Output:
Validate if email exists and requires a verification. Set the `user` attribute on the instance for sending an email confirmation.
9739	Create auth token. Differs from DRF that it always creates new token but not re-using them.
9740	Delete auth token when a `delete` request is issued.
9741	Disallow users other than the user whose email is being reset.
9742	Validate `email` and send a request to confirm it.
9743	Update token's expiration datetime on every auth action.
9744	Email context to reset a user password.
9745	Send a notification by email.
9746	Password reset email handler.
9747	Validation email handler.
9748	Authenticate a user using a token from the request data. Returns the user and token on successful authentication, or None if the authentication fails.
9749	Custom authentication to check if auth token has expired and update its expiration date if not.
9750	Displays bokeh output inside a notebook.
9751	Fix HoloViews plot communications.
9752	Returns a CustomJS callback for sending widget state across notebook comms.
9753	Get widget for param_name
9754	The default Renderer function which handles HoloViews objects.
9755	Forces a parameter value to be text
9756	Given a list of objects, returns a dictionary mapping from string name for the object to the object itself.
9757	Returns the instance owning the supplied instancemethod or the class owning the supplied classmethod.
9758	Take the http_auth value and split it into the attributes that carry the http auth username and password.
9759	Returns True if the cluster is up, False otherwise.
9760	Get the basic info from the current cluster.
9761	Coroutine to query cluster Health API, returns status and response data as a dictionary.
9762	Converts bytes to a human readable format
9763	Calculate the total CPU load for Synology DSM by summing the system, user, and other load values.
9764	Returns the total memory size of Synology DSM in bytes, optionally formatted as a human-readable string.
9765	Returns the total upload speed being used
9766	Returns all available volumes
9767	Return a specific volume
9768	Returns the total size of a volume, optionally in a human-readable format.
9769	Calculates the percentage of used space on a volume. If the total or used space is None or zero, returns 0. Otherwise, returns the percentage of used space rounded to one decimal place.
9770	Returns the average temperature of all disks that make up a given volume.
9771	Maximum temperature of all disks making up the volume
9772	Returns a specific disk based on the given disk ID.
9773	Build and execute login request
9774	Handle sessions for a GET request
9775	Function to execute and handle a GET request
9776	Partial implementation of an API client that updates utilisation and storage information
9777	Getter for various Utilisation variables.
9778	Provides a getter for various Storage variables. Initializes the storage if it is not already initialized.
9779	Creates the context for a specific request.
9780	Return the cached token of the current tenant.
9781	Build an attribute dictionary.
9782	Class decorator that ensures the passed apps are included in INSTALLED_APPS.
9783	Modify the `INSTALLED_APPS` setting to exclude the specified apps.
9784	Return a dictionary of all global_settings values.
9785	Handle the retrieval of the code.
9786	Get a value from the config and apply optional transformations like splitting or casting to boolean, with an option to provide a default value if the key is not found.
9787	Change the value of a specific key in a configuration file.
9788	Migrates the old config file format to the new one.
9789	Start the webserver that will receive the code.
9790	Wait until the user accepted or rejected the request
9791	Requests new access information from Reddit using the built-in webserver
9792	Check whether the tokens are set and request new ones if not.
9793	Set the token on the Reddit Object again.
9794	Checks if the token is still valid and requests a new one if it is not.
9795	Create a DynamoDB table for run manifests using the provided AWS DynamoDB client.
9796	Split the full S3 path into bucket name and path, removing the protocol prefix.
9797	Check if a given S3 prefix is archived in Glacier by examining the storage class of the first object within that prefix.
9798	Extracts the date part from a run id and returns the full key if valid, otherwise returns None.
9799	Remove all keys with Nones as values
9800	Add run_id into DynamoDB manifest table.
9801	Returns True if run_id is stored in the DynamoDB table, or False otherwise.
9802	Extracts Schema information from Iglu URI
9803	Create an Elasticsearch field name from a schema string
9804	Converts a contexts JSON to an Elasticsearch-compatible list of key-value pairs
9805	Convert an unstructured event JSON to a list containing one Elasticsearch-compatible key-value pair.
9806	Convert a Snowplow enriched event TSV into a JSON.
9807	Converts a Snowplow enriched event into a JSON object
9808	Retrieve the used template and its choices from a TemplateResponse.
9809	Print the entire template context
9810	Returns a formatted string of variables and their values.
9811	Highlight common SQL words in a string.
9812	Dump a variable to a HTML string with sensible output for template context fields. It filters out all fields which are not usable in a template context.
9813	Briefly print the dictionary keys in HTML format.
9814	Apply some HTML highlighting to the contents.
9815	Format an item in the result. Could be a dictionary key, value, etc..
9816	Recursive part of the formatting that handles exceptions by writing formatted exception information to the stream.
9817	Parse the next token in the stream.
9818	Parses LaTeX content `s` and returns a tuple `(nodelist, pos, len)` where `nodelist` is a list of `LatexNode` objects.
9819	Extracts text from `content` meant for database indexing. `content` is some LaTeX code.
9820	Set where to look for input files when encountering ``\\input`` or ``\\include`` macro.
9821	Reads an input file, handling various extensions and ensuring it resides within a specified directory in strict mode.
9822	Parses the given `latex` code and returns its textual representation.
9823	Encode a UTF-8 string to a LaTeX snippet.
9824	Unpack `\\uNNNN` escapes in 's' and encode the result as UTF-8
9825	Get information for this organisation. Returns a dictionary of values.
9826	Returns a list of Board objects for the specified organization.
9827	Get all members attached to this organization. Returns a list of Member objects.
9828	Update this organisation's information. Returns a new organisation object.
9829	Remove a member from the organisation. Returns JSON of all members if successful or raises an Unauthorised exception if not.
9830	Add a member to the board using their ID. Membership type can be 'normal' or 'admin'. Returns JSON of all members if successful or raises an Unauthorized exception if not.
9831	Add a member to the board. Membership type can be normal or admin. Returns JSON of all members if successful or raises an Unauthorised exception if not.
9832	Get information for this list. Returns a dictionary of values.
9833	Create a card for this list. Returns a Card object.
9834	Get all information for this Label. Returns a dictionary of values.
9835	Get all items for this label. Returns a list of dictionaries.
9836	Update the current label's name. Returns a new Label object.
9837	Update the current label. Returns a new Label object.
9838	Returns a URL that needs to be opened in a browser to retrieve an access token.
9839	Get information for this card. Returns a dictionary of values.
9840	Returns a board information for this card. Returns a Board object.
9841	Get list information for this card. Returns a List object.
9842	Returns the checklists for this card. Returns a list of Checklist objects.
9843	Adds a comment to this card by the current user.
9844	Adds an attachment to this card.
9845	Add a checklist to a card. Returns a Checklist object.
9846	Add a label to this card, from a dictionary.
9847	Add an existing label to this card.
9848	Add a member to this card. Returns a list of Member objects.
9849	Get Information for a member. Returns a dictionary of values.
9850	Returns a list of Card objects representing all cards this member is attached to.
9851	Resolves the URI to get the data. Then it returns a list of organisations that relate with the data.
9852	Create a new board. Returns a Board object.
9853	Enable singledispatch for class methods.
9854	Get all information for this board. Returns a dictionary of values.
9855	Returns a list of List objects attached to this board.
9856	Returns the labels attached to this board.
9857	Retrieve a single card for a given card id. Returns a Card object.
9858	Returns the checklists for this board as a list of Checklist objects.
9859	Retrieve the organisation for this board. Returns the organisation object.
9860	### Output:
Update this board's information.Returns a new board.
9861	Create a list for a board. Returns a new List object.
9862	Create a label for a board. Returns a new Label object.
9863	Get all information for this Checklist. Returns a dictionary of values.
9864	Get card this checklist is on.
9865	Returns a list of ChecklistItem objects based on the given query parameters.
9866	Update the current checklist. Returns a new Checklist object.
9867	Add an item to the checklist and return the dictionary of the new item's values.
9868	Delete item from checklist.
9869	Rename the current checklist item. Returns a new ChecklistItem object.
9870	Set the state of the current checklist item as either complete or incomplete, returning a new ChecklistItem object.
9871	Adds the API key and user auth token to the query parameters.
9872	Check HTTP response for known errors. Raises exceptions for 401 Unauthorized and non-200 status codes.
9873	Build the URI for the API call.
9874	Make a call to Trello API and capture JSON response Raises an error when it fails.Returns: dict Dictionary with the JSON data
9875	Create an Organisation object from a JSON object
9876	Create Board object from a JSON object
9877	Create Label object from JSON object
9878	Create List object from JSON object
9879	Create a Card object from JSON object
9880	Create a Checklist object from JSON object
9881	Create a Member object from JSON object
9882	Get an organisation. Returns: The organisation with the given `id`
9883	Get a board by its `id` and optionally `name`. Return the board object.
9884	Get a list with the given `id`.
9885	Get a card. Returns the card with the given `id`.
9886	Get a checklist using an id and optionally a name. Returns the created checklist.
9887	Get a member or the current member if `id` was not provided. Returns the member with the given `id`, defaults to the logged-in member.
9888	Get root domain from url.
9889	A generator to convert raw text segments without XML to a list of words without any markup. Additionally, dates are replaced by `7777` for normalization. The output retains whitespace if specified.
9890	A generator to convert raw text segments, with xml, and other non-textual content to a list of words without any markup. Additionally dates are replaced by `7777` for normalization.
9891	Convert raw text segments, with xml, and other non-textual content to a list of words without any markup. Dates are replaced by `7777` for normalization, along with wikipedia anchors kept.
9892	Write the password in the file.
9893	Split a string into substrings based on a list of locations indicating where to split.
9894	Mark the end location of each matching group of the given regex with a 'SHOULD_SPLIT' marker in the split_locations list.
9895	Adds markers to split locations based on regex matches.
9896	Main command line interface.
9897	Create the cipher object to encrypt or decrypt a payload.
9898	Return the AES mode, or a list of valid AES modes
9899	Applicable for all platforms, where the schemes, that are integrated with your environment, does not fit.
9900	Check for a valid encryption scheme in the configuration. Raises an AttributeError if the scheme is missing and a ValueError if the scheme is invalid or mismatched.
9901	Receiving messages from publisher
9902	Generate unique IDs for Protocol packets, ensuring they outlive their sessions and avoid ID 0.
9903	Send a CONNECT control packet
9904	Handles CONNACK packet from the server
9905	Encode an UTF-8 string into MQTT format and return a bytearray.
9906	Decodes an UTF-8 string from an encoded MQTT bytearray. Returns the decoded string and remaining bytearray to be parsed
9907	Encodes a 16-bit unsigned integer into MQTT format and returns a bytearray.
9908	Encodes value into a multibyte sequence defined by MQTT protocol. Used to encode packet length fields.
9909	Decodes a variable length value defined in the MQTT protocol. This value typically represents remaining field lengths.
9910	Encode and store a DISCONNECT control packet.
9911	Encode and store a CONNECT control packet, handling various flags and strings while validating their sizes.
9912	Decode a CONNECT control packet.
9913	Encode and store a CONNACK control packet.
9914	Decode a CONNACK control packet.
9915	Decode a SUBSCRIBE control packet.
9916	Encodes and stores a SUBACK control packet.
9917	Encode and store an UNSUBCRIBE control packet. Raises a C{ValueError} if any encoded topic string exceeds 65535 bytes.
9918	Decode a UNSUBACK control packet.
Parse the packet to extract message ID and topics.
9919	Encode and store an UNSUBACK control packet
9920	Encodes and stores a PUBLISH control packet, raising errors for invalid topic string length, packet size, and payload type.
9921	Decode a PUBLISH control packet.
9922	Decode a PUBREL control packet.
9923	Return URL for calling a method.
9924	Send a request to an API and return the response as a dictionary.
9925	Collectively refresh the list of blocks to the disk.
9926	Convert a dict of data to an array suitable for sklearn.
9927	Function to format data for cluster fitting.
9928	Fit KMeans clustering algorithm to data.
9929	Fit MeanShift clustering algorithm to data.
9930	Fit classifiers from large dataset.
9931	Label new data with cluster identities.
9932	Translate cluster identity back to original data size.
9933	Sort clusters by the concentration of a particular analyte.
9934	Returns a datetime object from a string with an optional time format.
9935	Returns the total number of data points in values of dict.
9936	Returns the total length of analysis.
9937	Determines the most appropriate plotting unit for data based on the given number or array and focus stage.
9938	Returns formatted element name.
9939	Converts analytes in format '27Al' to 'Al27'.
9940	Converts analytes in format 'Al27' to '27Al'.
9941	Copy all csvs in nested directories to a single directory.
9942	Consecutively numbers contiguous booleans in array.
9943	Generate boolean array from list of limit tuples.
9944	Returns rolling-window smooth of a. Function to efficiently calculate the rolling mean of a numpy array using 'stride_tricks' to split up a 1D array into an ndarray of sub-sections of the original array, of dimensions [len(a) - win, win].
9945	Returns rolling-window gradient of an array using 'stride_tricks'.
9946	Find local minima in the given arrays x and y.
9947	Identify clusters using Meanshift algorithm.
9948	Identify clusters using K-Means algorithm. Returns boolean array for each identified cluster.
9949	Identify clusters using DBSCAN algorithm.
9950	Returns a list of SRMs (Standard Reference Materials) defined in the SRM database.
9951	Read LAtools configuration file, and return parameters as dict.
9952	Reads configuration and returns a ConfigParser object.
9953	Prints all currently defined configurations.
9954	Creates a copy of the default SRM table at the specified location.
9955	Adds a new configuration to latools.cfg, copying parameters from an existing config if necessary.
9956	Change the default configuration.
9957	Exclude all data after the first excluded portion.
9958	Remove consecutive fragments from a filter based on a threshold.
9959	Applies expdecay_despiker and noise_despiker to data.
9960	Plot a detailed autorange report for this sample.
9961	Transform boolean arrays into list of limit pairs.
9962	Divide all analytes by a specified internal_standard analyte.
9963	Apply calibration to data using a calibration dictionary.
9964	Calculate sample statistics and return samples, analytes, and arrays of statistics of shape (samples, analytes). Statistics are calculated from the 'focus' data variable, so output depends on how the data have been processed.
9965	Calculates the ablation time for each ablation.
9966	Apply threshold filter for the given analytes above and below the specified threshold.
9967	Apply gradient threshold filter. Generates threshold filters for the given analytes above and below the specified threshold. Two filters are created with prefixes '_above' and '_below'. '_above' keeps all the data above the threshold. '_below' keeps all the data below the threshold.
9968	Calculate local correlation between two analytes.
9969	Calculate correlation filter.
9970	Make new filter from combination of other filters.
9971	Returns the parameters used to process data.
9972	Plot histograms of all items in dat.
9973	Compute summary statistics for paired x, y data, including residuals, regression, and non-paired tests.
9974	Fetch LAtools reference data from online repository.
9975	Find an instance of the type class `TC` for type `G` by iterating through `G`'s parent classes and checking whether the instance is a subclass of `TC`.
9976	Loads a DataFrame of all elements and isotopes. Filters to include only isotopes if specified.
9977	Returns molecular weight of molecule given in standard chemical notation.
9978	Generate single escape sequence mapping.
9979	Squash and reduce the input stack by removing elements that match the predicate and keeping only the last match at the end.
9980	Remove duplicates from the stack in first-seen order.
9981	Calculate gaussian weigted moving mean, SD and SE.
9982	Gaussian function.
9983	Calculate the standard error of a.
9984	Get sample names from a specified subset or all samples if no subset is provided.
9985	Despikes data using exponential decay and noise filters, updating progress using a progress bar.
9986	Calculates the background using a Gaussian-weighted mean.
9987	Calculate background using 1D interpolation for specified analytes.
9988	Subtract calculated background from data using specified analytes, error type, and focus stage. Applies corrections and updates progress.
9989	Calculate the ratio of all analytes to a single analyte.
9990	Create a subset of samples and treat them independently.
9991	Calculate a gradient threshold filter to the data. Generates two filters above and below the threshold value for a given analyte.
9992	Create a clustering classifier based on all samples, or a subset.
9993	Apply a clustering classifier based on all samples, or a subset
9994	Applies a correlation filter to the data.
9995	Turns data filters on for particular analytes and samples.
9996	Turns data filters off for particular analytes and samples.
9997	Prints the current status of filters for specified samples
9998	Remove 'fragments' from the calculated filter based on the specified threshold, mode, and filter application parameters.
9999	Report how many data are removed by the active filters.
10000	Plot a histogram of the gradients in all samples.
10001	Plot analyte gradients against each other.
10002	Plot histograms of analytes.
10003	Plot analytes as a function of time.
10004	Plot analyte gradients as a function of time.
10005	Plot filter reports for all filters that contain ``filt_str`` in the name.
10006	Calculates sample statistics for given analytes and returns the results.
10007	Return pandas dataframe of all sample statistics.
10008	Export minimal dataset.
10009	Export raw data from the analysis.
10010	Save analysis.lalog in specified location.
10011	Exports a minimal dataset for another user, including analysis parameters, standard info, and optionally filtered data based on specified analytes. The dataset can be exported as a zip file or a directory.
10012	Splits one long analysis file into multiple smaller ones based on a regular expression pattern.
10013	maps a function over a traversable and then folds the result using an initial element and an operation, defaulting to addition
10014	Plot a fitted PCA, and all components.
10015	Remove mean and divide by standard deviation, using bayes_kvm statistics.
10016	Remove median, divide by IQR.
10017	Apply standard deviation filter to remove anomalous values.
10018	Apply exponential decay filter to remove physically impossible data based on instrumental washout.
10019	Add filter to a collection.
10020	Remove filter by name or set number. If `setn` is `True`, remove all filters in the set that the specified name belongs to.
10021	Clear all filters.
10022	Remove unused filters.
10023	Identify a filter by fuzzy string matching.
10024	Make filter from logical expression. Takes a logical expression as an input, and returns a filter. Used for advanced filtering, where combinations of nested and/or filters are desired. Filter names must exactly match the names listed by print(filt). Statements in parentheses are evaluated first.
10025	Flexible access to specific filter using any key format.
10026	Returns information for all filters.
10027	Function for logging method calls and parameters
10028	Write and analysis log to a file.
10029	Reads an latools analysis.log file, and returns dicts of arguments.
10030	Decorator that will try to login and redo an action before failing.
10031	Print out SMS information from a modem connectivity device.
10032	Example of sending a message.
10033	Parse a file-like object or string.
10034	Return the link to the Jupyter nbviewer for the given notebook URL
10035	Returns the string for creating the thumbnail of this example.
10036	Returns the string for creating a code example for the gallery. If no code example is provided, returns None.
10037	The code example out of the notebook metadata
10038	Retrieve the URL for the Jupyter notebook if available, otherwise use the URL from the notebook metadata. If the URL is not available, return `None`.
10039	get the output file with the specified `ending`
10040	Process the notebook and create all the pictures and files
10041	Create the python script from the notebook node
10042	Create the rst string to download supplementary data
10043	Create the thumbnail for HTML output. If the thumbnail figure is a string, use it directly; otherwise, find the last PNG picture and use it as the thumbnail.
10044	Get summary and description of this notebook.
10045	Scale an image maintaining its aspect ratio and center it within a specified maximum width and height. If the input and output filenames are the same, the image is scaled down if necessary.
10046	Save the thumbnail image
10047	Returns the integer of the thumbnail figure
10048	Returns the URL corresponding to the given notebook file.
10049	Get only DB changes fields.
10050	When accessing the name of the field itself, the function returns the value in the current language if set, otherwise, it returns the value in the default language. If neither is set, it falls back to the language code specified in settings.
10051	Post processors are functions that receive a file object, perform necessary operations, and return the results as file objects.
10052	Process the source image through the defined processors.
10053	Populate self._thumbnails with Thumbnail objects and their sizes from the metadata backend using the source image name.
10054	Return all thumbnails in a dict format.
10055	Creates and returns a thumbnail of a given size.
10056	Deletes a thumbnail of a given size
10057	Creates a thumbnail file and its relevant metadata. Returns a Thumbnail instance.
10058	Returns a Thumbnail instance, or None if thumbnail does not yet exist.
10059	Deletes a thumbnail file and its relevant metadata.
10060	Simulate an incoming message
10061	Register a virtual subscriber which receives messages to the matching number.
10062	Return the set of states.
10063	Register a provider on the gateway
10064	Send a message object and handle provider routing and authentication.
10065	Get a Flask blueprint for the named provider that handles incoming messages & status reports.
10066	Get Flask blueprints for every provider that supports it.
10067	Handle incoming message by calling the Gateway's onReceive event hook and populating necessary fields.
10068	Process an incoming status message and call the Gateway's onStatus event hook.
10069	View wrapper for JsonEx responses. Catches exceptions as well.
10070	Forward an object to clients.
10071	Signs a web3 transaction that is compatible with `w3.eth.sendRawTransaction`. Not used due to the robustness of `pyEthereum`'s Transaction implementation regarding invalid signatures.
10072	Estimate tx gas using web3
10073	Estimate tx gas. Use the max of calculation using safe method and web3 if operation == CALL or use just the safe calculation otherwise.
10074	Appends towrite to the write queue
10075	Reads one line. Keeps waiting for a linefeed in case there is none in the buffer.
10076	Verifies and sends a message, handling various checks and configurations.
10077	Creates an email as a string.
10078	Checks for bad headers i.e. newlines in subject, sender or recipients.
10079	Adds an attachment to the message.
10080	Register Services that can be accessed by this DAL. Upon registration, the service is set up.
10081	Load a configuration module and return a Config object.
10082	Register resources with the ResourceManager.
10083	Raises an exception if value for `key` is empty.
10084	Teardown a Resource or Middleware.
10085	Set up this service with a specific DataManager. Will recursively set up sub-services.
10086	The group index with respect to wavelength.
10087	Evaluate a Cauchy equation to determine the refractive index at one or multiple wavelengths.
10088	Login on backend with username and password
10089	Log into the backend and get the token. Returns True if authentication is successful, otherwise False.
10090	Retrieve all available child endpoints of root from alignak backend. Returns a list of resources with title and endpoint relative to backend root. Raises BackendException on error.
10091	Get all items in the specified endpoint of the Alignak backend. If an error occurs, a BackendException is raised. The method handles pagination and supports multiprocessing for large datasets. It returns a dictionary containing the items and a status.
10092	Method to update an item. The headers must include an If-Match containing the object _etag. If the patching fails because the _etag object does not match with the provided one, a BackendException is raised with code = 412. If inception is True, this method makes a new get request on the endpoint to refresh the _etag and then a new patch is called. If an HTTP 412 error occurs, a BackendException is raised. All other HTTP errors raise a BackendException. If some _issues are provided by the backend, this exception is raised with the respective details. If no _issues are provided and an _error is signaled by the backend, this exception is raised with the respective details.
10093	Method to delete an item or all items
10094	Returns True if path1 and path2 refer to the same file.
10095	Create a junction at link_name pointing to source.
10096	Sets command name and formatting for subsequent calls to logger.
10097	Suppress default exit behavior
10098	Recognizes and claims MuTect VCFs from the set of all input VCFs. Each defined caller has a chance to evaluate and claim all the incoming files as something that it can process. Returns a tuple of unclaimed readers and MuTectVcfReaders.
10099	Returns a standardized column header by replacing sample names in the MuTect metaheader with "NORMAL" and "TUMOR".
10100	Recognizes and claims VarScan VCFs from the set of all input VCFs.
10101	Derive mean and stdev from VCF records.
10102	Allows each caller to claim incoming files as they are recognized. Returns a tuple of unclaimed file readers and claimed VcfReaders. The presence of any unclaimed file readers could indicate stray files in the input dir.
10103	Split data into lines where lines are separated by LINE_TERMINATORS.
10104	Return line terminator that data begins with or None.
10105	Return line terminator data ends with or None.
10106	Seek next line relative to the current file position.
10107	Seek previous line relative to the current file position return Position of the line or -1 if previous line was not found
10108	Return the last lines of the file.
10109	Return the top lines of the file.
10110	Returns an iterator that yields lines as data is added to a file. Yields `None` if no new line is available. Caller can either wait and re-try or end iteration.
10111	Recognizes and claims Strelka VCFs from the set of all input VCFs.
10112	Parse a VCF string into a VcfRecord object.
10113	Reads sample tag-values from a variant record and formats them as a dictionary.
10114	Returns set of format tags.
10115	Updates info attribute from info dict.
10116	Returns string representation of format field.
10117	Returns string representation of sample-format values.
10118	Returns a tab-delimited, newline terminated string of VcfRecord.
10119	Appends a new format tag-value for all samples. Raises KeyError if the tag_name already exists or if the sample name values do not match existing sample names.
10120	Replaces null or blank filter or adds filter to existing list.
10121	Returns the categories available to the user. Specify `products` if you want to restrict to just the categories that hold the specified products, otherwise it'll do all.
10122	Generate an appropriate _ProductsForm subclass for the given category and products.
10123	Creates a form for staff to add items to a user's cart, restricting the selectable products to those available to the user.
10124	Adds an error to the given product's field.
10125	Decorator that stores the result of a stored function in the user's results cache until the batch completes.
10126	Creates a form for specifying fields from a model to display.
10127	Returns the items that this user has purchased or has pending.
10128	Sends an e-mail to the given address.
10129	Start processing an OSM diff stream and yield one changeset at a time to the caller.
10130	Parse a file-like containing OSM XML into memory and return an object with the nodes, ways, and relations it contains.
10131	Parse the global OSM Notes feed and yield_note information.
10132	Returns true if the condition passes the filter
10133	Returns True if this flag condition is met, otherwise returns False. It determines if the condition is met by calling pre_filter with a queryset containing only self.condition.
10134	This interface is used to get the remaining quantity for a user under a stock limit, with an option to filter the results based on a condition object that must have a 'remainder' attribute.
10135	Return all of the items from queryset where the user has a product from a category invoking that item's condition in one of their carts, excluding items in released carts.
10136	Return all items from the queryset where the user has a product invoking that item's condition in one of their carts, filtering out items in released carts unless they are in paid or active carts.
10137	Returns all of the items from queryset where the date falls into any specified range but not yet where the stock limit is not yet reached.
10138	Filter all items from a queryset based on user's presenter or copresenter status in non-cancelled proposals.
10139	Returns all items from conditions that are enabled by a user being a member of a Django Auth Group.
10140	Decorator that makes the wrapped function raise ValidationError if we're doing something that could modify the cart. It also wraps the execution of this function in a database transaction, and marks the boundaries of a cart operations batch.
10141	Returns the user's current cart, or creates a new cart if there isn't one ready yet.
10142	Updates the cart's time last updated value, which is used to determine whether the cart has reserved the items and discounts it holds. Calculate the residual of the _old_ reservation duration if it's greater than what's in the cart now, keep it. If we have vouchers, we're entitled to an hour at minimum. Else, it's the maximum of the included products.
10143	Applies the voucher with the given code to this cart.
10144	Determines whether the status of the current cart is valid, including testing vouchers, limits, required categories, and available discounts. Raises a ValidationError if any issues are found.
10145	Attempts to fix simple errors from ValidationError, including removing unavailable items from the cart, recalculating discounts, and removing invalid voucher codes.
10146	Calculates all of the discounts available for a cart, considering the product prices and applying the highest-value discounts to the highest-value products first.
10147	Applies the best discounts on the given product, from the given discounts.
10148	Converts a report view function into something that displays a Report.
10149	Returns the data rows for the table.
10150	Creates an instance of self.form_type using request.GET
10151	Renders the reports based on data.content_type's value.
10152	Lists all of the reports currently available.
10153	Summarises the items sold and discounts granted for a given set of products, or products from categories.
10154	Summarises paid items and payments, including sales, payments, credit notes, and their statuses.
10155	Shows the history of payments into the system.
10156	Shows all of the credit notes that have been generated.
10157	Summarises the inventory status of the given items, grouping by invoice status.
10158	Summarises the usage of a given discount.
10159	Shows each product line item from invoices, including their date and purchasing customer.
10160	Shows the number of paid invoices containing given products or categories per day.
10161	Shows all of the credit notes in the system.
10162	Shows all of the invoices in the system.
10163	Returns a list of all attendees, including their user ID, name, email, and registration status.
10164	Shows registration status for speakers with a given proposal kind, ordering by the number of paid carts.
10165	Produces the registration manifest for people with the given product type.
10166	Adds the categories that the user does not currently have.
10167	Calculates the sum of unclaimed credit from this user's credit notes.
10168	If the current user is unregistered, returns True if there are no products in the TICKET_PRODUCT_CATEGORY that are available to that user. If there are products available, returns False. If the current user is registered, returns None.
10169	Guides the user through the registration process based on their completion status and available products.
10170	View for editing an attendee's profile. The user must be logged in to edit their profile. In the case of a `POST` request, it redirects to `dashboard`, otherwise, it renders `registrasion/profile_form.html` with the form data.
10171	Returns a profile form instance, and a boolean which is true if the form was handled.
10172	Form for selecting products from an individual product category. Arguments: category_id (castable to int): The id of the category to display. Returns: redirect or render: If the form has been successfully submitted, redirect to ``dashboard``. Otherwise, render ``registrasion/product_category.html`` with data:: ```json { "category": category, "discounts": discounts, "form": products_form, "voucher_form": voucher_form, } ```
10173	Handles a products list form in the given request Returns the form instance, the discounts applicable to this form, and whether the contents were handled.
10174	Handles a voucher form in the given request. Returns the voucher form instance and whether the voucher code was handled.
10175	Runs the checkout process for the current cart. If the query string contains ``fix_errors=true``, Registrasion will attempt to fix errors preventing the system from checking out. If the invoice is generated successfully, or there's already a valid invoice for the current cart, redirect to ``invoice``. If there are errors when generating the invoice, render ``registrasion/checkout_errors.html`` with the following data::
10176	Redirects to an invoice for the attendee that matches the given access code, selecting the unpaid, most recent paid, or most recent invoice if none are unpaid or paid. Raises Http404 if no invoices are found.
10177	Displays an invoice. This view is not authenticated, but it will only allow access to either: the user the invoice belongs to; staff; or a request made with the correct access code. Arguments: invoice_id (castable to int): The invoice_id for the invoice you want to view. access_code (Optional[str]): The access code for the user who owns this invoice. Returns: render: Renders registrasion/invoice.html, with the following data:: { "invoice": models.commerce.Invoice(), } Raises: Http404: if the current user cannot view this invoice and the correct access_code is not provided.
10178	Allows staff to make manual payments or refunds on an invoice. This form requires a login, and the logged in user needs to be staff.
10179	Mark an invoice as refunded and request a credit note for the full amount paid against the invoice. This view requires a login and the logged in user must be staff. Arguments include invoice_id (castable to int). Returns a redirect to "invoice".
10180	Displays a credit note. If `request` is a `POST` request, forms for applying or refunding a credit note will be processed. This view requires a login, and the logged in user must be staff.
10181	Allows staff to amend a user's current registration cart, including updating product quantities and applying vouchers. Handles form validation and updates the cart accordingly.
10182	Allows staff to extend the reservation on a given user's cart.
10183	Allow staff to send emails to users based on their invoice status.
10184	Either displays a form containing a list of users with badges to render, or returns a .zip file containing their badges.
10185	Renders a single user's badge using a template.
10186	Returns a list of discounts available to the user for the given categories and products, including the available quantity.
10187	Annotates the queryset with a usage count for a discount clause by the given user.
10188	Return a list of products that are available based on user flags and category/product limits.
10189	Applies the total value of this credit note to the specified invoice, creating a new credit note if necessary, and updates the invoice status. Raises ValidationError if the invoice cannot be paid.
10190	Generates an invoice with a cancellation fee and applies credit to the invoice.
10191	Generates a random access code with the specified length and allowed characters for payments and check-in fulfilment.
10192	Turn function calls into lazy objects to be evaluated at a later time
10193	Returns the named object from a string path.
10194	Returns an invoice object for a given cart at its current revision. If such an invoice does not exist, the cart is validated, and if valid, an invoice is generated.
10195	Generates an invoice for arbitrary items not held in a user's cart.
10196	Generates an invoice for the given cart.
10197	Apply the user's credit notes to the given invoice on creation, but only if this is the user's only unpaid invoice.
10198	Returns true if the accessing user is allowed to view this invoice, or if the given access code matches this invoice's user's access code.
10199	Refreshes the underlying invoice and cart objects.
10200	Checks if an invoice can be paid and validates the cart. Raises a ValidationError if the invoice is already paid, the cart has been amended, or the cart is invalid.
10201	Update the status of this invoice based on the total payments.
10202	Marks the invoice as paid, and updates the attached cart if necessary.
10203	Returns true if there is no cart, or if the revision of this invoice matches the current revision of the cart.
10204	Voids this invoice if the attached cart is no longer valid because the cart revision has changed, or the reservations have expired.
10205	Rejects the invoice if it is valid to do so.
10206	Refunds the invoice by generating a CreditNote for the value of all payments against the cart. The invoice is marked as refunded, and the underlying cart is marked as released.
10207	Sends out an e-mail notifying the user about something to do with that invoice.
10208	Update the object with new data by setting various attributes and flattening specific fields.
10209	Reduce dicts of dicts to dot separated keys.
10210	Print file fields to standard output.
10211	Download a file.
10212	Retrieve a list of Data objects for a given project.
10213	This method returns a list of Processor objects based on the specified processor name. If no processor name is provided, it returns a list of all Processor objects.
10214	Prints the input fields and their types for a given processor.
10215	POST JSON data object to server
10216	Upload files and data objects for a specific processor in a project.
10217	Upload a single file on the platform. File is uploaded in chunks of 1,024 bytes.
10218	Download files of data objects.
10219	Gets the subclasses of a class, including all their subclasses recursively.
10220	Returns repository and project.
10221	Yields evidence and associated phenotypes, both current and suggested, for each variant.
10222	for each variant, yields evidence and merged phenotype from applying suggested changes to current
10223	Search the cache for variants matching provided coordinates using the corresponding search mode.
10224	Bulk searches for variants matching a set of sorted coordinates and yields matches based on the search mode.
10225	Updates record and returns True if record is complete after update, else False.
10226	Returns a unique list of seq
10227	Connects to Github and Asana and authenticates via OAuth.
10228	Given a list of values and names, accepts the index value or name.
10229	Get issue data from local data.
10230	Moves an issue_data from one namespace to another.
10231	Returns task data from local data.
10232	Retrieves a task from asana.
10233	```python
"""Save data to a file."""
```
10234	Applies a setting value to a key, if the value is not `None`. Returns without prompting if either of the following: * `value` is not `None` * already present in the dictionary
10235	Incorporate interruption handling, such as logging detailed warnings and exceptions, when calling the function and provide a maximum of 3 retry attempts before raising an exception.
10236	Waits until the queue is empty.
10237	Creates a task
10238	Returns formatting for the tasks section of asana using links if a project ID is provided.
10239	Create a task in Asana based on a Git issue.
10240	Return a list of unique data types.
10241	Send string to module level log.
10242	Required initialization call, wraps pyserial constructor.
10243	Optional polling loop control.
10244	Combine field lists from V3 and V4 block definitions, filtering out reserved and CRC fields.
10245	Simple since Time_Stamp query returned as JSON records.
10246	Set context string for serial command. Private setter.

Args:
    context_str (str): Command specific string.
10247	Simple wrap to calculate legacy PF value Requires meter power factor reading Returns legacy push PF
10248	Set the maximum demand period with an optional password.
10249	Setting a meter password with caution.
10250	Parse data using struct.unpack with definitions from SerialBlock buffer.
10251	Move data from raw tuple into scaled and converted values.
10252	Converts the passed serial block into a JSON string representation of the meter record, excluding reserved and CRC fields.
10253	Internal read CRC wrapper.
10254	Break out a date from Omnimeter read.
10255	Get the months tariff SerialBlock for meter.
10256	Set CT ratio for attached inductive pickup using serial communication.
10257	Assign one schedule tariff period to meter bufffer.
10258	Define a single season and assign a schedule
10259	Setting season schedules via serial command.
10260	Set a single holiday day and month in the object buffer. Returns True on completion.
10261	Serial call to read schedule tariffs buffer
10262	Read a specific schedule tariff from a meter object buffer.
10263	Serial call to read month tariffs block into meter object buffer.
10264	Extracts the tariff for a single month from the meter object buffer.
10265	Serial call to read holiday dates into meter object buffer. Returns: bool
10266	Reads a single holiday date from the meter buffer and returns it as a tuple of strings.
10267	Recommended call to read all meter settings at once. Returns: bool: True if all subsequent serial calls completed with ACK.
10268	Internal method to set the command result string.
10269	Password step of set commands.
10270	Fire update method in all attached observers in order of attachment.
10271	Initialize a lookup table for string inputs of LCD fields.
10272	Combined A and B read for V4 meter.Send termination string at end of read Returns True on completion
10273	Issue an A read on a V4 meter and return True if the CRC matches at the end of the call.
10274	Issue a B read on V4 meter. Returns: bool: True if CRC match at end of call.
10275	Merge fields from two blocks into a single request block, excluding reserved and CRC fields.
10276	Write calculated fields for read buffer.
10277	Single call wrapper for LCD set.
10278	Serial call to set relay.
10279	Sends a termination string to the implicit current meter.
10280	Serial call to set pulse input ratio on a line.
10281	Serial call to zero resettable kWh registers.
10282	Send a serial command to an LCD using a meter object buffer.
10283	Recursively iterate over all DictField sub-fields.
10284	Recursively iterate over all schema sub-fields.
10285	Generate a string of random paragraphs.
10286	Generate a random text string with a specified length, character sets, and constraints.
10287	Return output for the combined time and result summary statistics.
10288	Color some text in the given ANSI color.
10289	Write the text to the stream and flush immediately.
10290	Return a summary of the results.
10291	Parse some arguments using the parser.
10292	Sets up the environment for an example run.
10293	Run tests using the provided configuration.
10294	Run in transform mode.
10295	Transforms a describe node into a TestCase.
10296	Transform the body of an `ExampleGroup`. Each node in the body is processed to yield a transformed example, considering the name, context variable, and group variable.
10297	Transform an example node into a test method. Returns the unchanged node if it wasn't an ``Example``.
10298	Transform the body of an `Example` into the body of a method by replacing instances of `context_variable` with `self`.
10299	Return an argument list node that takes only ``self``.
10300	Register the path hook.
10301	Transform the source code, then return the code object.
10302	Apply the argument parser.
10303	Load a spec from either a file path or a fully qualified name.
10304	Load a spec from a given path, discovering specs if a directory is provided.
10305	Recursively yields the (full) relative paths to each spec inside path.
10306	Construct a function that monitors a directory for changes in JSON process configuration files and calls the appropriate receiver methods for additions, removals, or updates.
10307	Construct a function that checks a directory for messages. The function checks for new messages and calls the appropriate method on the receiver. Sent messages are deleted.
10308	Add a process with the given arguments and configurations.
10309	Remove a process by deleting a file associated with it.
10310	Restart a process
10311	Call the function stored in results.func with the attributes of results as arguments.
10312	Constructs and returns a service that monitors processes based on directory contents, restarting them if file contents change and stopping them if the file is removed. It also listens for restart and restart-all messages on the 'messages' directory.
10313	Return a service based on parsed command-line options.
10314	Refreshes a particular node in the nodelist, attributing the current time with the node_id.
10315	Removes all expired nodes from the nodelist. If a set of node_ids is passed in, those ids are checked to ensure they haven't been refreshed prior to a lock being acquired.
10316	Removes a particular node from the nodelist. If no node_id is provided, the process id of the current node is used.
10317	Returns the time a particular node has been last refreshed.
10318	Returns all nodes in the hash with their last refreshed timestamps as a dictionary.
10319	Update the session for this node. Specifically; lock on the reflist, then update the time this node acquired the reference. This method should only be called while the reference is locked.
10320	Increments the number of times this resource has been modified by all processes.
10321	Dereferencing decreases the reference count for a resource. If this is the last reference, it executes a callback and deletes related keys. Returns True if it was the last reference, False otherwise.
10322	Returns a list of tokens interleaved with the delimiter.
10323	Check which processes need to be restarted
10324	Merge the failure message from another status into this one. Whichever status represents parsing that has gone the farthest is retained. If both statuses have gone the same distance, then the expected values from both are retained.
10325	Query to test if a value exists.
10326	Queries to get the value. Raises TypeError if value is not a token or does not support an identifier. If no identifier is present, a new value with a default identifier 'v' is created. Returns a Query object with Match and Return operations for the value.
10327	Produce a function that always returns a supplied value.
10328	Convert a function taking multiple arguments into a function taking a single iterable argument.
10329	Convert a function taking a single iterable argument into a function taking multiple arguments.
10330	Runs a process and returns a deferred that fires when it is done.
10331	Creates a scheduler service with the provided options.
10332	Consume reader and return Success only on complete consumption.
10333	Match a literal sequence.
10334	Optionally match a parser.
10335	Match a parser one or more times repeatedly.
10336	Match a parser zero or more times repeatedly.
10337	Match a parser one or more times separated by another parser.
10338	Match a parser zero or more times separated by another parser
10339	Check all processes
10340	Discard data and cancel all calls.Instance cannot be reused after closing.
10341	Check the state of HTTP.
10342	Add a heart to a service collection.
10343	Wrap a service in a MultiService with a heart
10344	Freeze and shrink the graph based on a checkpoint and the output node names.
10345	Freeze and shrink the graph based on a session and the output node names.
10346	Save a small version of the graph based on a session and the output node names.
10347	Save a smaller version of the graph based on a checkpoint and the output node names.
10348	Saves the weights of trainable variables from a given checkpoint into separate files in the specified output path.
10349	Return a TensorFlow saver from a checkpoint containing the metagraph.
10350	Parse the tag and instantiate the class.
10351	Raises a `NotImplementedError` indicating that the `render_tag` method is not implemented for the class.
10352	Validate the syntax of the template tag.
10353	Return the context data for the included template.
10354	Parse the "as var" syntax.
10355	Return the context data for the inclusion tag.
10356	Converts a Caffe model to a TensorFlow session.
10357	Freeze and shrink the graph based on a Caffe model, the input tensors, and the output node names.
10358	Save a small version of the graph based on a Caffe model, the input tensors, and the output node names.
10359	Make a sequence into rows of num_columns columns.
10360	A function that chunks a sequence or string into specified size chunks. The last chunk may vary in size.
10361	Yield every other item from the iterable.
10362	Given an iterable with potentially sequential duplicates, remove those duplicates and return the unique items. Unlike `unique_justseen`, this function does not remove triplicates.
10363	Get the next value from an iterable, but also return an iterable that will subsequently return that value and the rest of the original iterable.
10364	Like takewhile, but takes a peekable iterable and doesn't consume the non-matching item.
10365	Determines the number of items that can be added to each bin based on the total number of items and the bin size
10366	Return an iterable from the given item. If the item is not already iterable, return a tuple containing only the item. If item is None, an empty iterable is returned.
10367	Calls each callable in callables, suppressing any exceptions specified. If no exceptions are specified, all Exceptions are suppressed.
10368	Yield duplicate items from any number of sorted iterables of items.
10369	Assert that for all items in the iterable, they're in order based on comp
10370	Swap the before and after elements in the partition result if the item is missing.
10371	Return OrderedDict of items before, the keyed item, and OrderedDict of items after.
10372	Run through the sequence until n queues are created and return them. If fewer are created, return those plus empty iterables to compensate.
10373	Resets the iterator to the start.Any remaining values in the current iteration are discarded.
10374	Parse the remainder of the token to find a "as varname" statement.
10375	Decorator to register class tags
10376	A descendant is a child many steps down.
10377	Get sqlite_master table information as a list of dictionaries.
10378	Yields each node of object graph in postorder.
10379	Apply selector to obj and return matching nodes.
10380	Parse a list of tokens and return matched nodes of self.obj.
10381	Select elements based on a combination of criteria and operators.
10382	Find nodes in rhs which have parents in lhs.
10383	Return nodes from rhs which have ancestors in lhs.
10384	Find nodes in rhs that have common parents with nodes in lhs.
10385	This method `nth_child_production` is used to parse and validate an nth-child selector in CSS-like syntax. This validator function is then used to determine if a given node satisfies the nth-child condition.
10386	Apply each validator in validators to each node in obj. Return each node in obj which matches all validators.
10387	Send ICMP echo requests to destination `dst` `count` times and return a deferred which fires when responses are finished.
10388	Make an HTTP request and return the body.
10389	Remove any items from the cache that are older than the specified age
10390	Set a key `k` to value `v`
10391	Returns key contents, and modify time
10392	Return True if key `k` exists
10393	Given a record timestamp, verify the chain integrity by checking the record's validity and relationships with its previous and next records.
10394	Convert a string of JSON which represents a NIST randomness beacon value into a 'NistBeaconValue' object.
10395	Create a new 'NistBeaconValue' object from a string of XML representing a NIST Randomness Beacon value.
10396	Returns a 'minified' version of the javascript content
10397	Reads log file line by line and applies a function to each line, handling file rollovers and rotations.
10398	Returns a big list of all log lines since the last run
10399	Validate secret link token.
10400	Returns cryptographic engine
10401	Validate token using supported digest algorithms.
10402	Create the secret link token.
10403	Return the result of a 32-bit counter aggregation with wrapping.
10404	Return a 64-bit counter aggregator with wrapping.
10405	Calculate and format an average duration safely
10406	Setup output processors
10407	Sets up source objects from the given config.
10408	Callback for handling events from an event source
10409	Watchdog timer function. Recreates sources which have not generated events in 10*interval if they have watchdog set to true in their configuration
10410	Converts the input format to a regular expression, as well as extracting fields. Raises an exception if it couldn't compile the generated regex.
10411	Parses a single line from the log file and returns a dictionary of its contents. Raises an exception if it couldn't parse the line.
10412	Validate that date is in the future and not more than 1 year into the future.
10413	Message validation. Raises error if form is rejected and no message is provided.
10414	Verifies a token and saves it in the session if it is valid.
10415	Return a basic meaningful name based on device type.
10416	Do not warn on external images.
10417	Connect receivers to signals.
10418	Create a secret link for a given request.
10419	Send email notification when an access request is accepted.
10420	Send email notifications for a confirmed access request.
10421	Send email validation notification for a request.
10422	Sends an email notification when an access request is rejected.
10423	Render a template and send as email.
10424	Create a new secret link.
10425	Validate a secret link token. Only queries the database if token is valid to determine that the token has not been revoked.
10426	Revoke a secret link.
10427	Create a new access request.
10428	Get access request for a specific receiver.
10429	Confirm that senders email is valid.
10430	Accept request.
10431	Reject request.
10432	Create a secret link from request.
10433	Given required properties from a NistBeaconValue, compute the SHA512Hash object.
10434	Verify a given NIST message hash and signature for a beacon value.
10435	Returns True if a record is embargoed based on the 'access_right', 'embargo_date', and the current date.
10436	Create an access request.
10437	Confirm email address.
10438	Creates a generic endpoint connection that doesn't finish.
10439	Get reverse direction of ordering.
10440	Gets the selected column, with a "-" prefix if descending.
10441	Get query with correct ordering.
10442	Open the file referenced in this object, and scrape the version.
10443	Set the version for a file by modifying a specific line that contains a magic string.
10444	Configures SSH client options and initializes the SSH client.
10445	Starts the timer for this source
10446	```plaintext
Called for every timer tick. Calls self.get which can be a deferred and passes that result back to the queueBack method. Returns a deferred.
```
10447	List pending access requests and shared links.
10448	Creates a TCP connection to Riemann with automatic reconnection.
10449	Stops the client by stopping the transport, disconnecting the factory, and disconnecting the connector.
10450	Remove all or self.queueDepth events from the queue
10451	Receives a list of events and adds them to the events queue, ensuring the queue size does not exceed the maximum specified.
10452	Create a UDP connection to Riemann
10453	Sets up HTTP connector and starts queue timer.
10454	Adapts an Event object to a Riemann protobuf event Event
10455	Encode a list of Tensor events with protobuf.
10456	Decode a protobuf message into a list of Tensor events.
10457	Send a list of TensorEvents to a stream of events.
10458	Generate preview for URL.
10459	Retreive preview results for ID.
10460	Send message dicts through r_q, and handle explicit errors for pickle problems.
10461	Loop through messages and execute tasks.
10462	Return True if it's time to log
10463	Send a response to the previously received challenge, with the given payload. The payload is encoded using base64 and transmitted to the server. Return the next state of the state machine as a tuple.
10464	Abort an initiated SASL authentication process. The expected result state is ``failure``.
10465	Performs the stringprep mapping step of SASLprep. Operates in-place on a list of unicode characters provided in `chars`.
10466	Template tag that renders the footer information based on the authenticated user's permissions.
10467	Builds the parameters needed to present the user with a datatrans payment form.
10468	Builds the parameters needed to present the user with a datatrans form to register a credit card.
10469	Charges money using datatrans, given a previously registered credit card alias.
10470	Return full version nr, inc. rc, beta etc tags.
For example: `2.0.0a1`
:rtype: str
10471	Constructs the widget's layout and components.
10472	Perform post-construction operations and set up various widgets and connections.
10473	Add keyboard shortcuts to navigate the filesystem.
10474	Handle activation of item in listing.
10475	Handle selection of item in listing.
10476	Handle selection of path segment.
10477	Finalize options to be used.
10478	Run build using pyside-rcc command.
10479	Run clean operation to remove specified resource paths.
10480	Fetch and return new children. Will only fetch children whilst canFetchMore is True.
10481	Reset children. Enable children fetching.
10482	Return icon for index.
10483	Run an external command in a separate process and detach it from the current process. Excepting `stdout`, `stderr`, and `stdin` all file descriptors are closed after forking. If `daemonize` is True then the parent process exits. All stdio is redirected to `os.devnull` unless specified. The `preexec_fn`, `shell`, `cwd`, and `env` parameters are the same as their `Popen` counterparts. Return the PID of the child process if not daemonized.
10484	Return the maximum file descriptor value.
10485	Close a file descriptor if it is open.
10486	Close open file descriptors.
10487	Redirect a system stream to the provided target.
10488	Applies a given HTML attributes to each field widget of a given form.
10489	Returns a module from a given app by its name.
10490	Imports modules from registered apps using given module name and returns them as a list.
10491	Similar to built-in `include` template tag, but allowing template variables to be used in template name and a fallback template, thus making the tag more dynamic.
10492	Returns Gravatar image URL for a given string or UserModel.
10493	Returns Gravatar image HTML tag for a given string or UserModel.
10494	Checks if the path is correct and exists, must be abs -> a dir -> and not a file.
10495	Checks if the URL contains 's3'. Not an accurate validation of the URL.
10496	Return a valid absolute path. filename can be relative or absolute.
10497	List the keys for a given S3 folder.
10498	Build a workflow definition from the cloud_harness task.
10499	Execute the cloud_harness task.
10500	Move an active project to the archive.
10501	Creates a directory and its parent directories if they do not exist.
10502	List the contents of the archive directory.
10503	Restore a project from the archive.
10504	Create new storage service client.
10505	List the entities found directly under the given path.
10506	Download a file from storage service to local disk.
10507	Check if a certain path exists in the storage service.
10508	Get the parent entity of the entity pointed by the given path.
10509	Creates a folder in the storage service at the specified path. Raises exceptions for various error codes.
10510	Uploads local file content to a storage service destination folder and returns the UUID of the created file entity.
10511	Deletes an entity from the storage service using its path, handling folder and file types and raising exceptions for various error conditions.
10512	Validate a string as a valid storage path.
10513	Creates a new cross-service client.
10514	Create a new storage service REST client.
10515	Get generic entity by UUID. Returns a dictionary describing the entity if found, otherwise raises an exception indicating the error.
10516	Sets metadata for an entity of a specified type and ID, replacing any existing metadata. Raises exceptions for invalid arguments, forbidden access, not found, or other server errors.
10517	Get metadata of an entity.
10518	Update the metadata of an entity. Existing non-modified metadata will not be affected.
10519	Delete the selected metadata entries of an entity. Only deletes selected metadata keys, for a complete wipe, use set_metadata.
10520	List all the projects the user has access to. This function does not retrieve all results, pages have to be manually retrieved by the caller.
10521	Get information on a given project by project ID.
10522	Create a new project.
10523	Delete a project and recursively delete all its content. Raises exceptions for invalid arguments, forbidden access, not found, or other non-20x errors.
10524	Create a new folder with the specified name and parent UUID. Returns details of the created folder. Raises exceptions for invalid arguments, server response codes, or other errors.
10525	Get information on a given folder using its UUID. This method raises exceptions for invalid arguments, server response codes 403 and 404, and other 400-600 error codes.
10526	Delete a folder and its content recursively. Raises exceptions for invalid arguments, forbidden access, not found, or other HTTP errors.
10527	This interface is used to upload the content of a file. It requires the file's UUID and can accept either a local file path or a content string to upload. The ETag can be provided to ensure that the file being uploaded matches the server's version, using optimistic concurrency control. The method returns the ETag of the uploaded file and can raise exceptions for various error cases such as invalid arguments, forbidden access, or file not found.
10528	Copy file content from source file to target file.
10529	Download file content by file_id, optionally providing an ETag for conditional download.
10530	This interface is used to obtain a signed URL for downloading file content without a token. The URL expires after 5 seconds. It raises exceptions for invalid arguments, server response codes 403 and 404, and other 400-600 error codes.
10531	Format log record as a dictionary and insert into the database collection.
10532	Sets the service name and version the request should target
10533	Adds headers to the request
10534	Adds parameters to the request params. Returns the request builder instance in order to chain calls.
10535	Defines if an exception should be thrown based on the response after the request is sent.
10536	Return a sequence containing the fields to be displayed on the changelist.
10537	Spawns a tree of jobs to avoid overloading the number of jobs spawned by a single parent. This function is appropriate to use when batching samples greater than 1,000.
10538	Runs GenotypeGVCFs on one or more gVCFs generated by HaplotypeCaller and returns the VCF FileStoreID.
10539	Uses Oncotator to add cancer relevant variant annotations to a VCF file.
10540	Sorting the list by a given function, defaulting to sorting by the "t" key in each dictionary.
10541	Returns just the timestamp portion of the datapoints as a list. The timestamps are in python datetime's date format.
10542	Adds the data from a ConnectorDB export. If it is a stream export, then the folder is the location of the export. If it is a device export, then the folder is the export folder with the stream name as a subdirectory.
10543	Shifts all timestamps in the datapoint array by the given number of seconds.
10544	Gets the sum of the data portions of all datapoints within
10545	Start the event loop to collect data from the serial device. If the device isn't passed in, look for it in the config. If the device is still none, error.
10546	Create a new user and store it in the database after prompting for the password.
10547	Parse Visual Novel search pages.
10548	Parses Releases search pages using BeautifulSoup and returns a list of dictionaries containing release details.
10549	Parse a page of producer or staff results
10550	Parse a page of character results.
10551	Parse a page of tag or trait results and return a list of tags
10552	Parse a page of user results
10553	Creates a tarball from a group of files
10554	Applies a function to a set of files and an output directory.
10555	Job version of move_files for one file
10556	Construct a Spark Submit job submission line based on provided parameters, including master IP, custom configurations, memory settings, and additional tool-specific arguments.
10557	Augments a list of "docker run" arguments with those needed to map the notional Spark master address to the real one if they are different.
10558	Refreshes data from the server by reading the object's metadata. Raises an error if the metadata retrieval fails.
10559	Calls MuTect to perform variant analysis with the given input files and parameters, and returns the output as a tarball.
10560	Creates a device with optional public flag and additional keyword arguments.
10561	Returns the list of streams that belong to the device.
10562	Exports the device to the given directory, creating necessary files and subdirectories.
10563	Search vndb.org for a term and return matching results from type.
10564	Dispatches parsing based on the search type category provided.
10565	Adds a stream to the query construction, allowing for interpolation and customization of the output column name. Supports merge queries.
10566	Invalidates the device's current API key and generates a new one, resetting the current authentication to use the new API key.
10567	Returns the list of users in the database.
10568	Use BWA to create reference index files.
10569	Returns the ConnectorDB object that the logger uses. Raises an error if Logger isn't able to connect
10570	Adds the given stream to the logger. Requires an active connection to the ConnectorDB database. If a schema is not specified, loads the stream from the database. If a schema is specified, and the stream does not exist, creates the stream. You can also add stream properties such as description or nickname to be added during creation.
10571	Add the given stream to the logger without checking with a ConnectorDB database to verify its existence. Use at your own risk.
10572	Insert the datapoint into the logger for the given stream name. The logger caches the datapoint and eventually synchronizes it with ConnectorDB.
10573	Tries to sync with the ConnectorDB server by getting the `connectordb` object, pinging the database, and then synchronizing data streams from the cache to the server. Handles exceptions and provides a callback for sync failures.
10574	Start the logger background synchronization service. This allows you to not need to worry about syncing with ConnectorDB - you just insert into the Logger, and the Logger will by synced every syncperiod.
10575	Stops the background synchronization thread
10576	Job version of `download_url`
10577	Job version of s3am_upload
10578	Output the names to the given file
10579	Output the parent-child relations to the given file
10580	Computes the mean insert size from a BAM file using a Docker container to run Samtools.
10581	Returns a string that represents the container ID of the current Docker container. If this function is invoked outside of a container, a NotInsideContainerError is raised.
10582	Aligns fastqs to bam via STAR with options for sorting and wiggle output.
10583	Creates a stream given an optional JSON schema encoded as a python dict. You can also add other properties of the stream, such as the icon, datatype or description. Create accepts both a string schema and a dict-encoded schema.
10584	Exports the stream to the given directory. The directory must not exist. Afterwards, the stream's information and data can be imported using import_stream.
10585	Returns the device which owns the given stream
10586	Iterates over the labels of terms in the ontology
10587	Iterates over the parent-child relationships in an ontology.
10588	Prepares and runs the pipeline within a Docker container.
10589	Populates an ArgumentParser object with arguments from a given configuration dictionary. Handles nested dictionaries and prepends keys with an optional prefix.
10590	Returns the config file contents as a string. The config file is generated and then deleted.
10591	Returns the path of the mount point of the current container. Raises exceptions if invoked outside a Docker container or if the Docker daemon is unreachable. This method is idempotent.
10592	Add an argument to the given arg_parser with the given name.
10593	Creates and returns an ArgumentParser object prepopulated with 'no clean', 'cores' and 'restart' arguments.
10594	Creates and returns a list that represents a command for running the pipeline.
10595	Sets the authentication header for use in the session.
10596	Handles HTTP error codes for the given request. Raises AuthenticationError or ServerError based on the response status code.
10597	Attempts to ping the server using current credentials, and responds with the path of the currently authenticated device.
10598	Send a POST CRUD API request to the given path using the given data which will be converted to json.
10599	Send an update request to the given path of the CRUD API, with the given data dict, which will be converted into json.
10600	Sends a delete request to the given path of the CRUD API to delete an object.
10601	Subscribe to the given stream with the callback
10602	Creates the given user - using the passed in email and password. You can also set other default properties by passing in the relevant information. ConnectorDB permits immediate initialization of an entire user tree, so that you can create all relevant devices and streams in one go.
10603	Returns the list of devices that belong to the user.
10604	Adapter trimming for RNA-seq data
10605	Use SAMtools to create reference index file
10606	Runs SAMtools index to create a BAM index file
10607	Returns a FileStoreID for a BAM file after marking reads as PCR duplicates using Sambamba.
10608	Run SAMBLASTER to mark reads as PCR duplicates and return the deduped SAM file.
10609	Runs Picard MarkDuplicates on a BAM file. Requires that the BAM file be coordinate sorted.
10610	Sorts BAM file using Picard SortSam.
10611	Creates recalibration table for Base Quality Score Recalibration
10612	RNA quantification via Kallisto
10613	RNA quantification with RSEM
10614	Prepare test set for C++ SAR prediction code. Find all items the test users have seen in the past.
10615	Send the given command thru the websocket
10616	Given a stream, a callback, and an optional transform, sets up the subscription.
10617	Attempt to connect to the websocket - and returns either True or False depending on if the connection was successful or not
10618	This method handles reconnection attempts after a connection is lost. It includes logic to adjust the reconnect time based on the duration of the disconnection, applies randomness to the reconnect time, and starts a new timer for the next reconnection attempt.
10619	Send subscribe command for all existing subscriptions to resume a connection.
10620	Called when the websocket is opened
10621	called when the websocket is closed
10622	Handle websocket error and update connection status.
10623	Handle incoming messages from the server, process them, and handle acknowledgments as necessary.
10624	Ensure that the WebSocket connection remains active by checking for ping messages. If a ping is not received within the specified interval, the connection is closed and an attempt to reconnect is made.
10625	Isolates a particular variant type from a VCF file using GATK SelectVariants
10626	Filters VCF file using GATK VariantFiltration and fixes extra pair of quotation marks in VCF header.
10627	Runs either SNP or INDEL variant quality score recalibration using GATK VariantRecalibrator. Because the VQSR method models SNPs and INDELs differently, VQSR must be run separately for these variant types.
10628	Applies variant quality score recalibration to VCF file using GATK ApplyRecalibration.
10629	Merges VCF files using GATK CombineVariants.
10630	Perform a quick check on a BAM file using `samtools quickcheck` within a Docker container to detect obvious errors such as truncation.
10631	Load packet type and handler pairs from a dictionary mapping.
10632	Write the JSON configuration to a file.
10633	Gets the configuration for this project from a default JSON file, or writes one if it doesn't exist.
10634	Retrieve data for a given term from an ontology using its IRI.
10635	Searches the OLS with the given term
10636	Suggest terms from an optional list of ontologies.
10637	Iterates over the descendants of a given term
10638	Iterates over the labels for the descendants of a given term
10639	This function iterates over the labels of terms in the ontology, automatically wrapping the pager returned by the OLS.
10640	Iterates over parent-child relations
10641	Run FastQC on input reads and return the FileStoreID of the FastQC output tarball.
10642	Adds the given stream to the query construction. The function supports both stream names and Stream objects.
10643	Create and configure a Flask application.
10644	Starts Spark and HDFS master containers
10645	Starts Spark and HDFS worker containers and waits for HDFS to be up.
10646	Launches the Hadoop datanode.
10647	Stop spark and hdfs worker containers
10648	Checks to see if Spark worker and HDFS datanode are still running.
10649	Tokenizer. Generates tokens stream from text
10650	Look up a zone ID for a given zone string.
10651	Fetch all pieces of a Route 53 config from Amazon by sending multiple GET requests until all data is retrieved.
10652	Merge a set of fetched Route 53 config Etrees into a canonical form.
10653	Validate a changeset's compatibility with Amazon's API spec.
10654	Orders population members from lowest fitness to highest fitness
10655	Population fitness == average member fitness score
10656	Returns average cost function return value for all members.
10657	Returns median cost function return value for all members
10658	Returns average member parameter values of a population.
10659	### Output:
Returns Member objects of population.
10660	Adds a parameter to the Population
10661	Generates the next population from a previously evaluated generation using a genetic algorithm approach.
10662	Return a config dictionary with normalized keys.
10663	Return a generator with all environmental variables that have the prefix "PIP_".
10664	Return True if the callable throws the specified exception
10665	Transforms a list of package versions from PyPI into a list of packages with their versions sorted by score.
10666	Convert the result back into the input type.
10667	Convert all tags in an HTML tree to XHTML by moving them to the XHTML namespace.
10668	Convert all tags in an XHTML tree to HTML by removing their XHTML namespace.
10669	Return an HTML string representation of the document.
10670	Opens the HTML document in a web browser by saving it to a temporary file and then opening the file with the default web browser.
10671	Removes this element from the tree, including its children and text. The tail text is joined to the previous element or parent.
10672	Remove the tag, but not its children or text. The children and text are merged into the parent.
10673	Get the first element in a document with the given id. If none is found, return the default argument if provided or raise KeyError otherwise. Note that there can be more than one element with the same id, and this isn't uncommon in HTML documents found in the wild. Browsers return only the first match, and this function does the same.
10674	Run the CSS expression on this element and its children, returning a list of the results.
10675	Iterate through the attributes of every logger's handler to switch out stderr and stdout in tests when buffer is True
10676	return test counts that are set via pyt environment variables when pyt runs the test
10677	Returns True if only a single class is being run or some tests within a single class
10678	Returns True if only a module is being run
10679	Validate request params.
10680	Validates the `id` in the request.
10681	Ensure that the given path is decoded, returning NONE when no expected encoding works.
10682	Helper for various string-wrapped functions.
10683	Return the python codec name corresponding to an encoding or None if the string doesn't correspond to a valid encoding.
10684	Attempts to detect a Byte Order Mark (BOM) at the start of the stream and returns the name of the detected encoding if successful; otherwise, returns None.
10685	Selects the new remote addr from the given list of ips in X-Forwarded-For. By default it picks the one that the `num_proxies` proxy server provides. Before 0.9 it would always pick the first.
10686	Converts amount value from several types into Decimal.
10687	Parse a string of HTML data into an Element tree using the BeautifulSoup parser. Return the root <html> Element of the tree.
10688	Parse a file into an ElemenTree using the BeautifulSoup parser.
10689	Converts a BeautifulSoup tree to a list of Element trees. Returns a list instead of a single root Element to support HTML-like soup with more than one root element. You can pass a different Element factory through the `makeelement` keyword.
10690	Get the current exception info as `Traceback` object.
10691	String representation of the exception.
10692	Render the traceback for the interactive console.
10693	Like the plaintext attribute but returns a generator.
10694	Helper function that returns lines with extra information.
10695	Render the source code.
10696	Pull the version part out of a string.
10697	Returns the locations found via self.index_urls by checking the url_name on the main index and using it to produce all locations.
10698	Find all available versions for a given project name by checking various sources such as index URLs, find links, and dependency links. Returns a list of available versions.
10699	Tries to find an InstallationCandidate for a given requirement, filtering versions based on the specifier and accommodating upgrades or existing installations.
10700	Sort links in order, non-egg links first, egg links second, while eliminating duplicates
10701	Returns the Content-Type of the given URL using a HEAD request.
10702	Yields all links in the page
10703	Returns True if the link can be verified after download, False if it cannot, and None if verification cannot be determined.
10704	Return filenames for package's data files in 'src_dir'.
10705	Filter filenames for package's data files in 'src_dir'
10706	Parse a requirements file and yield InstallRequirement instances.
10707	Joins a line ending in '\' with the previous line.
10708	Strips and filters empty or commented lines.
10709	Compile a marker into a function that evaluates the marker in a given environment.
10710	Ensure statement only contains allowed nodes.
10711	Flatten one level of attribute access.
10712	Coerce a value to a float or int if possible.
10713	A helper function that decorates a function to retain the current request context. This is useful when working with greenlets.
10714	Binds the app context to the current context.
10715	Pops the app context.
10716	Creates a copy of this request context with the same request object. This can be used to move a request context to a different greenlet. Because the actual request object is the same this cannot be used to move a request context to a different thread unless access to the request object is locked.
10717	Can be overridden by a subclass to hook into the matching of the request.
10718	Binds the request context to the current context.
10719	Convert an absolute file path to a relative path based on a given base path.
10720	Is distribution an editable install?
10721	Registers a function as a URL value preprocessor for this blueprint. It's called before the view functions are called and can modify the URL values provided.
10722	Callback function for URL defaults for this blueprint. It's called with the endpoint and values and should update the values passed in place.
10723	Registers an error handler for the blueprint.
10724	A function that allows a generator to keep access to the request context throughout its execution.
10725	Creates a response object from the given value and allows adding headers to it.
10726	Generate a URL to the given endpoint with the method provided.
10727	Safely join `directory` and `filename`. Raises :class:`~werkzeug.exceptions.NotFound` if the resulting path would fall out of `directory`.
10728	Returns the path to a package or cwd if that cannot be found. This returns the path of a package or the folder that contains a module.
10729	The Jinja loader for this package bound object.
10730	Prints the completion code of the given shell.
10731	Return the cookie domain that should be used for the session cookie if session cookies are used.
10732	Return a directory to store cached wheels in for a given link. Generates a unique key based on the link's URL and hash, encodes it with SHA-224, and organizes the cache directories to prevent running out of subdirectories.
10733	Return True if the extracted wheel in wheeldir should go into purelib.
10734	Yield all the uninstallation paths for dist based on RECORD-without-.pyc
10735	Raises errors or warns if called with an incompatible Wheel-Version.
10736	Builds one wheel and returns the filename of the built wheel, or None if the build failed.
10737	Yield names and strings used by `code` and its nested code objects
10738	Decorator for Backend that ensures rates are fresh within last 5 mins
10739	Add paths for egg-info files for an external egg-base. If the egg-base is outside the current working directory, this method searches the egg-base directory for files to include in the manifest and uses distutils.filelist.findall to perform the search. It then prefixes the returned paths with cmd.egg_base so that the include_pattern call in add_default's will match them.
10740	Write the pip delete marker file into this directory.
10741	Return True if we're running inside a virtualenv, False otherwise.
10742	Returns the effective username of the current process.
10743	Return a distutils install scheme
10744	Parse the cache control headers returning a dictionary with values for the different directives.
10745	Return a cached response if it exists in the cache, otherwise return False.
10746	Algorithm for caching requests. This assumes a requests Response object. It handles caching based on status Codes and cache control headers.
10747	Update zipimporter cache data for a given normalized path, processing sub-path entries as well as embedded zip archives. Use an updater callable to update cache entries or remove them if no updater is provided.
10748	There are a couple of template scripts in the package. This function loads one of them and prepares it for use.
10749	Make sure there's a site.py in the target dir, if needed. Check if the existing site.py is a setuptools-generated one and replace it if necessary.
10750	Write changed . pth file back to disk
10751	Converts values to an appropriate type by replacing dicts, lists, and tuples with their converting alternatives. Additionally, checks strings and converts them if they match a conversion format.
10752	Add filters to a filterer from a list of names.
10753	Configure a handler from a dictionary.
10754	Add handlers to a logger from a list of names.
10755	Perform common configuration for root and non-root loggers, including setting the level and handling/handling filters.
10756	Python 3 implementation of execfile.
10757	Monkey-patch tempfile.tempdir with replacement, ensuring it exists
10758	Prefixes stub URLs like 'user@hostname:user/repo.git' with 'ssh://'.
10759	Get an item or attribute of an object but prefer the item
10760	Internal hook that can be overridden to hook a different generate method in.
10761	Compiles Jinja2 templates and stores them in either a directory or a zipfile. Allows specifying template extensions, a filter function, and options for byte-compilation and error handling.
10762	Determine the default cache location
10763	Find eggs in zip files; possibly multiple nested eggs.
10764	Yield distributions accessible on a sys.path directory
10765	Declare that a given package name is a namespace package and ensure its path is correctly managed.
10766	Get the method resolution order (MRO) for a class or a type.
10767	Return an adapter factory for `ob` from `registry`.
10768	Ensure that the parent directory of path exists.
10769	Yield entry point objects from `group` matching `name`. If `name` is None, yields all entry points in `group` from all distributions in the working set, otherwise only ones matching both `group` and `name` are yielded (in distribution order).
10770	Is distribution `dist` acceptable for this environment?
10771	Find distribution best matching `req` and usable on `working_set`.
10772	Evaluate a PEP 426 environment marker on CPython 2.4+ and return a boolean indicating the marker result in this environment. Raise SyntaxError if the marker is invalid.
10773	Evaluate a PEP 426 environment marker using markerlib. Return a boolean indicating the marker result in this environment. Raise SyntaxError if marker is invalid.
10774	Calls the standard formatter, but will indent all of the log messages by our current indentation level.
10775	Format a number into a currency string based on the provided locale and format specifications.
10776	Parse number format patterns.
10777	Return the minimal quantum of a number based on the given precision.
10778	Return maximum precision of a decimal instance's fractional part. Precision is extracted from the fractional part only.
10779	Returns normalized scientific notation components of a value.
10780	Convert a timedelta to seconds with compatibility for Python 2.6
10781	Yield Requirement objects for each specification in strs
10782	Protect against re-patching the distutils if reloaded. Also ensures that no other distutils extension monkeypatched the distutils first.
10783	Verify that install_requires is a valid requirements list
10784	Fetch an egg needed for building
10785	Roll n-sided dice and return each result and the total.
10786	Converts string prices into Price objects.
10787	Price field for attrs.
10788	Validate JSON-RPC request.
10789	Get request method for service application.
10790	Apply application method.
10791	Return the name of the current module if the request was dispatched to an actual module. This is deprecated functionality, use blueprints instead.
10792	Return the name of the current blueprint by extracting the substring before the last dot in the endpoint of the URL rule.
10793	Monkeypatches the files object in Flask to raise a specific error if a request does not use multipart form data but the files object is accessed.
10794	Factory to create an abstract dist object based on the given requirements.
10795	Adds a new requirement to be installed, handling cases where the requirement is already present or has mismatched markers.
10796	Call handler for all pending reqs.
10797	Check if req_to_install should be skipped.Takes into account whether the req is installed, whether an upgrade or reinstall is needed, and user options.After calling this, req_to_install will only have satisfied_by set to None if it is to be upgraded/reinstalled etc. Any other value will be a dist recording the current thing installed that satisfies the requirement. Returns a text reason for why it was skipped, or None.
10798	Create the installation order based on topological sorting, ensuring that dependencies are installed before the requiring packages. The order is not guaranteed to break cycles at an arbitrary point.
10799	Return sorted list of all package namespaces.
10800	Convert QuerySet objects to their list counter-parts
10801	Tokenize a document and add an annotation attribute to each token
10802	Merges annotations from tokens_old into tokens_new when tokens in new document already existed in old document.
10803	Copy annotations from the tokens listed in src to the tokens in dest.
10804	Combines adjacent tokens when there is no HTML between them and they share an annotation.
10805	Serialize the list of tokens into a list of text chunks, calling markup_func around text to add annotations.
10806	Given a list of tokens return a generator of the chunks of text for the data in the tokens.
10807	locate_unbalanced_end handles locating unbalanced end tags and possibly moving the point earlier in the document.
10808	Transforms a list of chunks into a list of tokens, handling different types of chunks like images, hyperlinks, words, and tags.
10809	Flatten an `lxml` element's text chunks.
10810	Splits some text into words, includes trailing whitespace on each word when appropriate.
10811	Return the text representation of the start tag for a tag including attributes.
10812	The text representation of an end tag for a tag, including trailing whitespace when appropriate.
10813	Serializes a single lxml element as HTML, including the element's tail, and optionally skips the outermost tag.
10814	Fixes insertion and deletion tags in an lxml document by moving them inside block-level tags and removing the tags themselves.
10815	Extract the constant value of 'symbol' from 'code'. If the name 'symbol' is bound to a constant value by the Python code object 'code', return that value. If 'symbol' is bound to an expression, return 'default'. Otherwise, return 'None'. Return value is based on the first assignment to 'symbol'. 'symbol' must be a global, or at least a non-"fast" local in the code block. That is, only 'STORE_NAME' and 'STORE_GLOBAL' opcodes are checked, and 'symbol' must be present in 'code.co_names'.
10816	Returns a simplified URL for caching the given query.
10817	Turn any URLs into links by searching for links identified by the given regular expressions and replacing them with anchor tags. It avoids linking text in certain elements or classes, and excludes links with specified hosts.
10818	Removes IE conditional comments from an HTML document.
10819	Parse a whole document into a string.
10820	Define the return schema of an API.
10821	Get a TreeWalker class for various types of tree with built-in support
10822	Export the svn repository at the url to the destination location
10823	Return the maximum revision for all files under a given location
10824	Ensures a method performs a check in debug mode if the first request was already handled. Raises an AssertionError if a setup function is called after the first request. Helps prevent bugs related to delayed module imports.
10825	The name of the application, typically determined from the import name or guessed from the run file if the import name is `__main__`. This name is used as a display name by Flask and can be set or overridden.
10826	Return the value of the `PROPAGATE_EXCEPTIONS` configuration value if set, otherwise return a sensible default.
10827	Tries to locate the instance path if it was not provided to the constructor of the application class. It will basically calculate the path to a folder named ``instance`` next to your main file or the package.
10828	Update the template context with commonly used variables, including request, session, config, and g, as well as values from template context processors.
10829	Handles an HTTP exception.
10830	Checks if an HTTP exception should be trapped or not. By default, this will return `False` for all exceptions except for a bad request key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to `True`. It also returns `True` if ``TRAP_HTTP_EXCEPTIONS`` is set to `True`. This is called for all HTTP exceptions raised by a view function. If it returns `True` for any exception, the error handler for this exception is not called, and it shows up as a regular exception in the traceback. This is helpful for debugging implicitly raised HTTP exceptions.
10831	Default exception handling that kicks in when an exception occurs that is not caught. In debug mode, the exception will be re-raised immediately; otherwise, it is logged, and the handler for a 500 internal server error is used. If no such handler exists, a default 500 internal server error message is displayed.
10832	Handle routing exceptions by re-raising them with additional debug information under specific conditions.
10833	Dispatches the request and performs request preprocessing, HTTP exception catching, and error handling.
10834	Create a default `OPTIONS` response with allowed methods.
10835	Creates a URL adapter for the given request. The URL adapter is created at a point where the request context is not yet set up, so the request is passed explicitly.
10836	Injects default values for a URL endpoint into a values dictionary.
10837	Yield unique values in iterable, preserving order.
10838	Place the runtime requirements from pkg_info into metadata.
10839	Compose the version predicates for requirement in PEP 345 fashion.
10840	Convert `.egg-info` directory with `PKG-INFO` to the Metadata 1.3 aka old-draft Metadata 2.0 format.
10841	Return modules that match module_name by dynamically importing them from specified paths, ensuring minimal namespace collisions and handling exceptions during the import process.
10842	Iterates through modules, filters classes based on a partial class name, and yields TestCase classes that match the filter.
10843	Return the actual test methods that matched self.method_name
10844	Checks if a name combined with test prefixes or postfixes is found anywhere in the list of basenames. Returns the basename if it is found.
10845	Returns true if the passed in path is a test module path.
10846	Walk all the directories of basedir except hidden directories
10847	Given a base directory, yield all test module paths recursively found within it that are test modules.
10848	Inject default arguments for dump functions based on the current app's configuration if available. Otherwise, set default values for `sort_keys` and `cls`.
10849	Inject default arguments for load functions.
10850	Sets multiple keys and values from a mapping.
10851	Increments the value of a key by delta. Initializes key with delta if it does not exist. Returns the new value or None for backend errors.
10852	Dumps an object into a string for redis, serializing integers as regular strings and pickling other values.
10853	Generates a dictionary of query string parameters from a given editable URL.
10854	Ensure that if a link can be found for this, that it is found. Note that self.link may still be None - if Upgrade is False and the requirement is already installed.
10855	Ensure that a source_dir is set. This will create a temporary build dir if the name of the requirement isn't known yet.
10856	Remove the source files from this requirement, if they are marked for deletion
10857	Return a pkg_resources.Distribution built from self.egg_info_path
10858	Read buffered incoming data from the client into a bytestring and cache it by default, but this behavior can be changed by setting `cache` to `False`. If `parse_form_data` is set to `True`, the form data will be parsed implicitly. If `as_text` is set to `True`, the return value will be a decoded unicode string.
10859	This method modifies the headers of a response based on the given WSGI environment. It ensures that the location and content-location headers are absolute URLs, sets the content-length to zero for certain status codes, and attempts to automatically set the content-length if possible.
10860	Converts any unicode based IRI to an acceptable ASCII URI.
10861	Return full path to the user-specific cache dir for this application.
10862	Return full path to the user-specific data dir for this application.
10863	Return full path to the user-specific log dir for this application.
10864	Return full path to the user-specific config dir for this application.
10865	Return a list of potential user-shared config dirs for this application.
10866	This iterates over all relevant Python files, including files from loaded modules, folders of those modules, and files reachable through a package.
10867	Spawn a new Python interpreter to run the reloader thread.
10868	Convert None to empty string, otherwise return original string.
10869	Return an existing CA bundle path, or None
10870	Parse a string or file-like object into a tree.
10871	Parse a HTML document into a well-formed tree
10872	Parse a HTML fragment into a well-formed tree fragment.
10873	Pass in a word string that you would like to see probable matches for. Return a sorted list of all non-zero translations.
10874	Converts the read-in lines from sys to a usable format, returning a list of tokens and a dictionary of tokens.
10875	Checks if port is already in use.
10876	Report startup info to stdout.
10877	Loads bytecode from a file or file-like object.
10878	Return a copy of paramsDict, updated with kwargsDict entries, wrapped as stylesheet arguments.
10879	Run a VCS subcommand
10880	Return implementation version.
10881	Yield egg or source distribution objects based on basename
10882	Find rel="homepage" and rel="download" links in `page`, yielding URLs
10883	Read a local path, with special support for directories.
10884	Evaluate a URL as a possible download, optionally retrieve it, and process any linked URLs.
10885	Remove duplicate entries from sys.path along with making them absolute
10886	Return a set containing all existing directory entries from sys.path
10887	Adds a new path to known_paths by combining sitedir and 'name' or executes sitedir if it starts with 'import'.
10888	Add 'sitedir' argument to sys.path if missing and handle .pth files in 'sitedir'
10889	Check if user site directory is safe for inclusion
10890	Add a per user site-package to sys.path
10891	Define new built-ins 'quit' and 'exit' that display a hint on how to exit based on the operating system.
10892	Make default encodings on Windows usable by aliasing to "mbcs".
10893	Set the string encoding used by the Unicode implementation. Default is 'ascii', but can be changed.
10894	Force easy_installed eggs in the global environment to get placed in sys.path after all packages inside the virtualenv. This maintains the "least surprise" result that packages in the virtualenv always mask global packages, never the other way around.
10895	Adjust the special classpath sys.path entries for Jython, ensuring they follow the base virtualenv lib directories.
10896	Open a subprocess without blocking. Return a process handle with output streams replaced by queues of lines.
10897	Return True if Cython or Pyrex can be imported.
10898	Replace sources with .pyx extensions to sources with the target language extension. This mechanism allows language authors to supply pre-converted sources but to prefer the .pyx sources.
10899	Run the application and conserve the traceback frames.
10900	Return a static resource from the shared folder.
10901	Return a string representing the user agent.
10902	Returns true if the name looks like a URL
10903	Extract and unpack a file from a URL to a specified location. If a download directory is provided, copy the file into that directory.
10904	Download link url into temp_dir using provided session.
10905	Check download\_dir for previously downloaded file with correct hash. If a correct file is found return its path else None.
10906	Handle currencyFormat subdirectives.
10907	Handle exchange subdirectives.
10908	Decode the data passed in and potentially flush the decoder.
10909	Default template context processor. Injects `request`, `session` and `g`.
10910	Renders the template and fires the signal
10911	Renders a template from the template folder with the given context.
10912	Renders a template from the given template source string with the given context.
10913	Parse a version string using pkg_resources or distutils.
10914	Check if a name is declared in the current scope or any outer scope.
10915	All assignments to names go through this function.
10916	Handles includes and manages template rendering with optional context and error handling.
10917	Visit named imports.
10918	Create a whl file from all the files under 'base_dir'. Places .dist-info at the end of the archive.
10919	Decorate a function with a reentrant lock to prevent multiple threads from calling said thread simultaneously.
10920	Create service, start server.
10921	URL escapes a string with the given charset and converts non-strings to unicode first.
10922	List of wheels matching a requirement.
10923	Marshal command-line arguments into a requirement set.
10924	Exports the Bazaar repository at the specified location
10925	Lookup an Amazon Product and return an instance of :class:`~.AmazonProduct` if one item was returned, or a list of :class:`~.AmazonProduct` instances if multiple items were returned.
10926	Iterate over all pages using a generator, yielding lxml root elements. If there are no more pages, stop iterating.
10927	This interface retrieves the immediate ancestor of a browse node in a tree structure.
10928	This method retrieves the children of a browse node in a browse node tree.
10929	Get a child element of root (multiple levels deep) failing silently if any descendant does not exist.
10930	Get element as string or None, based on the given path and root element.
10931	Get element as datetime.date or None.
10932	Get Offer Price and Currency.
10933	Return a tuple containing the float representation of the price and the ISO currency code.
10934	Send a request, check if it exists in the cache, and cache the response if necessary.
10935	Build a response by making a request or using the cache. This will end up calling send and returning a potentially cached response.
10936	Return a callable that looks up the given attribute from a passed object with the rules of the environment.
10937	Convert the input string to a titlecased version where each word starts with an uppercase letter and the rest are in lowercase.
10938	Sorts an iterable. ascending or descending, case sensitive or insensitive, by value or attribute
10939	Group a sequence of objects by a common attribute.
10940	Applies a filter on a sequence of objects or looks up an attribute.
10941	Creates a logger for the given application with a dynamic logging level based on the application's debug flag.
10942	Returns True if the two strings are equal, False otherwise. The comparison is constant time.
10943	Verifies the given signature matches the expected signature.
10944	Derive the key using different methods such as 'concat', 'django-concat', 'hmac', or 'none'.
10945	Returns the signature for the given value
10946	Signs the given string by appending a separator and its corresponding signature.
10947	Verifies the signature for the given value.
10948	Unsigns the given string.
10949	Signs the given string and attaches a time information.
10950	Validate the given signed value. Return `True` if the signature exists and is valid, otherwise return `False`.
10951	Returns a signed string serialized with the internal serializer. The return value can be either a byte or unicode string depending on the format of the internal serializer.
10952	JSON-RPC server error response with a specified request ID, server error message, and error data, then raises a ServiceException with a 500 status code.
10953	Return a list of all Python packages found within a specified directory, with optional inclusion and exclusion filters.
10954	Exclude any apparent package that apparently doesn't include its parent.
10955	Return all directories in base_path, relative to base_path
10956	Verify that the Vary headers for the cached response match the request headers and construct a real urllib3 HTTPResponse object.
10957	Remove RECORD.jws from a wheel by truncating the zip file.
10958	Unpack a wheel file to a specified destination directory.
10959	Regenerate the entry_points console_scripts for the named distribution.
10960	Parse the xdot format of the graph to set the _draw_ and _ldraw_ attributes for each of the graph sub-elements.
10961	Parses the Xdot attributes of all graph components and adds the components to a new canvas.
10962	Returns a node given an ID or None if no such node exists.
10963	Sets the connection string for all edges
10964	Handles the list of edges for any graph changing.
10965	Handles the component being changed by updating the canvas.
10966	Handles double-click event for the left mouse button when the tool is in the 'normal' state. Opens a Traits UI view on the object referenced by the 'element' trait of the component that was double-clicked, setting the tool as the active tool for the duration of the view.
10967	Handle the diagram canvas being set
10968	Clears all components from the canvas by creating a new canvas and assigning it to `diagram_canvas`, then updating `viewport` to reflect the changes.
10969	Handles the domain model changing
10970	Maps a domain model to the diagram.
10971	Removes listeners from a domain model
10972	Handles mapping elements to diagram components
10973	Styles a node
10974	Parses xdot data and returns the associated components
10975	Sets the font.
10976	Process the components of an ellipse.
10977	Returns the components of a polygon.
10978	Returns the components of a polyline.
10979	Returns text components.
10980	Returns the components of an image.
10981	Allow direct use of GridOut GridFS file wrappers as endpoint responses.
10982	Save to file.
10983	Load the file.
10984	Test if the point is within this ellipse.
10985	Draws the component bounds for testing purposes.
10986	Perform the action. Open the wizard. Set wizard finished to True.
10987	Constructs the SQLAlchemy engine and session factory, tests the connection, and assigns the engine to the context.
10988	Parses the dot_code string and replaces the existing model.
10989	Handles the creation of a new graph, prompting to replace an existing one if initialized.
10990	Handles the open action and parses a Graphviz file.
10991	Handles saving the current model to the last file.
10992	Handles saving the current model to file.
10993	Handles display of the graph dot traits.
10994	Handles display of the nodes editor
10995	Handles the display of the edges editor.
10996	Handles displaying a view about Godot.
10997	Handles adding a Node to the graph if initialized and graph is not None
10998	Handles adding an Edge to the graph.
10999	Handles adding a Subgraph to the main graph.
11000	Handles adding a Cluster to the main graph.
11001	Displays a dialog for graph selection if more than one exists. Returns None if the dialog is canceled.
11002	Handles display of the options menu.
11003	Handles display of the dot code in a text editor
11004	Handles the user attempting to exit Godot
11005	Move the bottom-left corner of the components at the origin by adjusting their coordinates.
11006	Save the object to a given file-like object in the specified format.
11007	Load the object to a given file-like object with the given protocol.
11008	Save the object to file given by filename.
11009	Load an instance of the class from a file with the specified format. If the format is not provided, it is derived from the file extension.
11010	Create a Pair of Lambda Functions for every Alias You Declare.
11011	Simple file parsing generator
11012	Cached list of keys that can be used to generate sentences.
11013	Add chain to current shelve file
11014	Remove chain from current shelve file
11015	Build markov chain from source on top of existing chain
11016	Generate a simple sentence starting with an uppercase letter using a MarkovChain, without any length limit.
11017	Creates a graph representation using the Graphviz layout program and returns it as a string.
11018	Adds a node to the graph.
11019	Removes a node from the graph.
11020	Returns the node with the given ID or None.
11021	Removes an edge from the graph. Returns the deleted edge or None.
11022	Adds an edge to the graph.
11023	Adds a subgraph to the graph.
11024	Handles the Graphviz layout program selection changing.
11025	Maintains each edge's list of available nodes.
11026	Parses a DOT file and returns a Godot graph.
11027	Parse a DOT file and return a graph. Handles both file objects and filenames.
11028	Build a Godot graph instance from parsed data.
11029	Builds a Godot graph using tokens.
11030	Given a duration in seconds, determines the best units and multiplier to use to display the time. Return value is a 2-tuple of units and multiplier.
11031	Formats a number of seconds using the best units.
11032	Handle the file path changing.
11033	Creates the toolkit-specific control that represents the editor. 'parent' is the toolkit-specific control that is the editor's parent.
11034	Split a sequence into pieces of length `n`. If the length of the sequence isn't a multiple of `n`, the rest is discarded. Note that `nsplit` will split strings into individual characters.
11035	Takes an iterable and creates an iterable of sublists, each of the specified length, with optional overlapping and padding.
11036	Runs Godot.
11037	Gets the object's children by extending the children list with subgraphs, clusters, nodes, and edges.
11038	Appends a child to the object's children based on its type.
11039	Inserts a child into the object's children based on the type of the child.
11040	Deletes a child at a specified index from the object's children.
11041	Sets up or removes a listener for changes in subgraphs, clusters, nodes, or edges on a specified object.
11042	Sets up or removes a listener for children being changed on a specified object.
11043	Gets the label to display for a specified object.
11044	Sets the label for a specified object.
11045	Sets up or removes a listener for the label being changed on a specified object.
11046	Finish initializing the editor by creating the underlying toolkit widget.
11047	Updates the editor when the object trait changes externally to the editor.
11048	Adds the event listeners for a specified object.
11049	Handles a list of nodes being set.
11050	Handles addition and removal of nodes.
11051	Adds a node to the graph for each item in 'features' using the GraphNodes from the editor factory.
11052	Handles a list of edges being set.
11053	Handles addition and removal of edges.
11054	Adds an edge to the graph for each item in 'features' using the GraphEdges from the editor factory.
11055	Handles parsing Xdot drawing directives.
11056	Handles the containers of drawing components being set.
11057	Give new nodes a unique ID.
11058	Zoning in on graph objects, this function crafts new edges with unique IDs by identifying node types, assigning every node a unique identifier, and ensuring the creation of a link between nodes to form the edge.
11059	Attach this connection's default database to the context using our alias.
11060	Parses the drawing directive, updating the node components.
11061	Parses the label drawing directive, updating the label components.
11062	Handles the container of drawing components changing.
11063	Handles the position of the component changing.
11064	Handles the Graphviz position attribute changing. Adjusts the component's position to center around the new coordinates and requests a redraw.
11065	Handles the right mouse button being clicked when the tool is in the 'normal' state. If the event occurred on this tool's component or any contained component of that component, the method opens a context menu with menu items from any tool of the parent component that implements the MenuItemTool interface i.e. has a get_item() method.
11066	Outputs the CSS for a selected Pygments style.
11067	Draws a closed polygon.
11068	Test if a point is within this polygonal region.
11069	Draws the Bezier component
11070	Broadcast an event to the database connections registered.
11071	Method that gets run when the Worker thread is started. When there's an item in in_queue, it takes it out, passes it to func as an argument, and puts the result in out_queue.
11072	Get the full, external URL for this page, optionally with the passed in URL scheme
11073	Renders the rel=prev and rel=next links to a Markup object for injection into a template
11074	Renders the rel=canonical, rel=prev, and rel=next links to a Markup object for injection into a template.
11075	Is ``candidate`` an exact match or sub-type of ``pattern``?
11076	Selects the best content type based on the requested and available content types, following the Proactive Content Negotiation algorithm as described in RFC 7231.
11077	Create a new URL from `input_url` with modifications applied. Supports altering the scheme, host, path, query, fragment, and other URL components while handling various edge cases and encoding requirements.
11078	Removes the user & password from a URL and returns them along with the sanitized URL in a named tuple.
11079	Generate the user+password portion of a URL.
11080	Normalize a host for a URL.
11081	Attempts to list all of the modules and submodules found within a given directory tree. This function searches the top-level of the directory tree for potential python modules and returns a list of candidate names.
11082	Attempts to list all of the modules and submodules found within a given directory tree. This function recursively searches the directory tree for potential python modules and returns a list of candidate names.
11083	Attempts to find the submodules under a module recursively. This function works for modules located in the default path as well as extended paths via the sys.meta_path hooks. It assumes the hidden module variable '__path__' has been set correctly.
11084	Attempts to list all of the classes within a specified module.
11085	Attempts to recursively list all of the classes within a given module namespace, including those in submodules. Filters the classes based on a provided function, which returns a boolean value indicating whether each class should be included in the list of returned classes.
11086	Ensure that a needed directory exists, creating it if it doesn't.
11087	Store the given text contents so that they are later retrievable by the given key.
11088	checks to make sure that the card passes a luhn mod-10 checksum
11089	Return the git hash as a string.
11090	Loads a module's code and sets the module's expected hidden variables.
11091	Add a path to search through when attempting to look up a module.
11092	Searches the paths for the required module.
11093	Split a line into multiple lines based on specified minimum and maximum line lengths, ensuring the split occurs at a space character and accounting for indentation.
11094	Call this on an lxml.etree document to remove all namespaces
11095	Checks that the versions are consistent.
11096	Creates a new instance of a rule in relation to the config file. This updates the dictionary of the class with the added details, allowing for flexibility in the configuration file. Only called when parsing the default configuration file.
11097	Merges a dictionary into the Rule object.
11098	Iterates over the actions and executes them in order.
11099	Creates a new instance of a rule by merging two dictionaries.
11100	Add extra details to the message Separate so that it can be overridden
11101	Emits a log record by formatting it and sending it to specified addresses, respecting a rate limit to prevent excessive emails within a minute.
11102	Ensure `image_rendition` is added to the global context.
11103	Log an attempt against a key, incrementing the number of attempts and potentially adding a lock to the lock table.
11104	Adds an URL to the download queue.
11105	Creates and starts the workers, as well as attaching a handler to terminate them gracefully when a SIGINT signal is received.
11106	This interface is used to add or update a key, value pair to the database.
11107	Get the value of a given key with optional waiting and timeout. Raises errors for non-existent keys or HTTP errors. Decodes base64 encoded values.
11108	Recursively get the tree below the given key.
11109	Get the current index of the key or the subtree.
11110	Deletes a given key or recursively deletes the tree below it
11111	Plot a heatmap that visualizes important features and their relationships with classes using a specified clustering method.
11112	Adds a number of months to a given timestamp, adjusting for month and year rollovers and handling cases where the resulting day is invalid.
11113	Adds a specified number of months to a given date, handling cases where the resulting day exceeds the last day of the month.
11114	Check if it is the Christmas period
11115	Sets the current music service to service_name.
11116	Sets the current storage service to service_name and runs the connect method on the service.
11117	Reads dataset from a CSV file.
11118	Reads dataset from json.
11119	Reads dataset to csv.
11120	Select items with label from dataset.
11121	Return a dictionary with the average values of a given label from a list of dictionaries based on a reference label.
11122	Generate a report of feature significance in a dataset using ANOVA with multiple hypothesis testing correction.
11123	Updates the flask session and this object with the provided data dictionary.
11124	Recusively merge the 2 dicts.Destructive on argument 'a'.
11125	A decorator for a function to dispatch on.
11126	A decorator for a function implementing dispatch_fn for dispatch_key. If no dispatch_key is specified, the function is used as the default dispatch function.
11127	Auto-discover INSTALLED_APPS registered_blocks.py modules and fail silently when not present. This forces an import on them thereby registering their blocks. This is a near 1-to-1 copy of how django's admin application registers models.
11128	Verifies a block prior to registration.
11129	Register a block to the registry
11130	Unregisters the block associated with `block_type` from the registry. If no block is registered to `block_type`, NotRegistered will raise.
11131	Converts the file associated with the file_name passed into a MP3 file
11132	Determine whether the desired version is a reasonable next version.
11133	Checks if a route needs SSL and redirects accordingly, handling static routes and SSL configuration.
11134	Initializes Celery and sets up logging
11135	Add a mail to the queue to be sent.
11136	Parse an HTTP accept-like header.
11137	Parse a `Cache-Control` header into a dictionary of key-value pairs.
11138	Parse a content type like header.
11139	Parses an RFC7239 Forwarded header into a list of dictionaries with parameter values.
11140	Parse a comma-separated list header.
11141	Parse a named parameter list in the "common" format.
11142	Resize and image to fit the passed in width, keeping the aspect ratio the same.
11143	Add a new value to the list. If strict mode is enabled and a validation error is detected, raises MalformedLinkValue.
11144	Downloads a MP4 or WebM file that is associated with the video at the URL passed.
11145	Creates connection to the Google Drive API, sets the connection attribute to make requests, and creates the Music folder if it doesn't exist.
11146	Uploads the file associated with the file_name passed to Google Drive in the Music folder.
11147	Initializes the connection attribute with the path to the user home folder's Music folder, and creates it if it doesn't exist.
11148	Writes the params to file that skytool_Free needs to generate the sky radiance distribution.
11149	Does nothing currently. May not need this method.
11150	Read the phytoplankton absorption file from a csv formatted file.
11151	Scale the spectra by multiplying by a linear scaling factor.
11152	Read the pure water absorption data from a CSV formatted file.
11153	Read the pure water scattering from a CSV formatted file
11154	Reads an IOP file, interpolates the IOP to the common wavelengths defined in the constructor, and returns the interpolated IOP or -1 if an error occurs.
11155	Write numpy array iop to file with name file_name
11156	Calculates the total scattering from back-scattering.
11157	Calculates the total absorption from water, phytoplankton, and CDOM.
11158	Calculates the total attenuation from the total absorption and total scattering.
11159	Calls all of the build methods in the correct order for meta method `build_all_iop`.
11160	Takes lists for parameters and saves them as class properties
11161	Load a text file to a Python dictionary using '=' as the delimiter.
11162	Pull comma-separated string values from a text and convert them to a list of floats.
11163	Reads in a PlanarRad generated report and saves the reported parameters as a python dictionary.
11164	Sets a handler for a list of signals.
11165	Received a signal but the system is already busy processing a previous signal, logs the warning with the signal number and current frame.
11166	Default handler for signal processing, restarts, cleans up, pauses, resumes, prints status, aborts, or logs error based on the signal received.
11167	Pauses execution, resuming after X seconds or on specific signals.
11168	Run all abort tasks, then all exit tasks, and exit with error return status.
11169	Run all status tasks, then run all tasks in the resume queue
11170	Try to remove a registered event without triggering it.
11171	Fetch time series data from OpenTSDB
11172	Fetch and sort time series data from OpenTSDB. Takes the same parameters as `fetch_metric` but returns a list of (timestamp, value) tuples sorted by timestamp.
11173	Collects and returns a list of values from the given iterable. If the n parameter is not specified, collects all values from the iterable.
11174	Prints an item with optional end string and file output.
11175	Prints each item from an iterable.
11176	Extracts function signature, default arguments, keyword-only arguments, and whether or not variable positional or keyword arguments are allowed. Also supports calling unbound instance methods by passing an object instance as the first argument.
11177	Extracts function signature from an existing partial instance.
11178	Calculate new argv and extra_argv values resulting from adding specified positional and keyword arguments.
11179	We do not support multiple signatures in XPI signing because the client side code makes some pretty reasonable assumptions about a single signature on any given JAR. This function returns True if the file name given is one that we dispose of to prevent multiple signatures.
11180	Sort keys for xpi files.
11181	This method reads and decodes a variable-length quantity (VLQ) encoded integer from the input data stream.
11182	Read a table structure with prefixed values and variable-length quantities.
11183	Read and parse the user data header of a StarCraft II replay file.
11184	Transform duration into a human-readable form.
11185	Prints a summary of the game details, including the map, duration, version, and detailed information about each player.
11186	Get user input data from GUI components.
11187	Display data's file and the graphic associated when the file is found.
11188	Write batch file with input values.
11189	Process file data to extract and separate information and wavelength values
11190	Attribute the "display_the_graphic" function to the slider by connecting it with parameters.
11191	This function displays information about curves. It iterates through label and data information, setting text on UI labels for specific curve indices.
11192	Display an error message when a wrong value is typed.
11193	Hide the error message when all values are correct.
11194	Executing planarRad using the batch file
11195	Cancels PlanarRad if it is running in Normal Mode.
11196	Quit PlanarRad, checking if it is running before. If running, show a warning message. If not, ask for confirmation before quitting.
11197	Saves the current figure displayed in a PNG file in the "Artists_saved" directory.
11198	Open the log file of PlanarRad and display its contents in a log window.
11199	Opens the documentation file in a window.
11200	Set up initial configurations and values for the GUI at startup.
11201	Intercepts mouse's right click and its position.
11202	Gets back coordinates of the mouse on the canvas.
11203	Update labels about mouse coordinates.
11204	Generate a lockset for the genesis block with a single vote.
11205	Sign this with a private key
11206	Compute the hash of a message, excluding certain fields and using a specific serialization method.
11207	"Checks whether the object is valid or has a quorum, noquorum, or quorum possible state. Returns True if valid or one of the states is true, otherwise returns False."
11208	Issue funds to the sender's account and update the issued amounts, storing the RTGS hash.
11209	Returns the highest lock based on the highest round.
11210	Find the last block proposal node voted on by checking the proposal and lock in each round.
11211	highest valid lockset on height
11212	Set up a timeout for waiting for a proposal.
11213	Informs about synced peers and updates the last active protocol if the proposal's height is greater than or equal to the current consensus manager's height and the proposal's lockset is valid.
11214	Makes private keys that support coloring using the sha3 hashing function and checks if the address index divided by the number of colors is equal to the current index.
11215	Calculate the delay for a packet transfer between a sender and receiver, considering their bandwidths and latency.
11216	Deliver a packet with an additional delay on the slow transport.
11217	Create an object that acts as a proxy for a contract on the chain.
11218	Returns the native contract class associated with a given address
11219	registers NativeContract classes
11220	returns True if unknown
11221	Receives and handles a list of transactions received from a protocol.
11222	Decondition an image from the VGG16 model.
11223	Condition an image for use with the VGG16 model.
11224	Create a function for the response of a layer.
11225	Get symbolic output of a layer.
11226	Evaluate layer outputs for `x`.
11227	Output: Creates a new encryption key at the specified path and sets the file permissions. The file permissions feature does not work on Windows platforms.
11228	Finishes the load job. Called automatically when the connection closes. Raises an error if the job finished with a non-zero exit code.
11229	Load from a file into the target table, handling each step of the load process. Can load from text files and properly formatted giraffez archive files, decompressing if needed. Encoding is determined automatically. Handles headers, delimiters, and null values. Optional date parsing and error handling.
11230	Load a single row into the target table.
11231	Attempt release of target mload table.
11232	Return the names of the work tables used for loading. The list contains the target table with suffixes "_wt", "_log", "_e1", and "_e2". Raises a GiraffeError if the target table has not been set.
11233	Monkey-patch compiler to allow for removal of default compiler flags.
11234	Attempts to find the Teradata install directory with the defaults for a given platform. Should always return `None` when the defaults are not present and the TERADATA_HOME environment variable wasn't explicitly set to the correct install location.
11235	Retrieve the decrypted value of a key in a giraffez configuration file.
11236	Set a decrypted value by key in a giraffez configuration file.
11237	Display results in table format
11238	Execute commands using CLIv2.
11239	Retrieve a value from the configuration based on its key. The key may be nested.
11240	Writes a default configuration file structure to a file. Defaults to ~/.girafferc if no file is specified. Returns the content written to the file.
11241	Set the names of columns to be used when iterating through the list, retrieving names, etc.
11242	Writes export archive files in the Giraffez archive format. This takes a `giraffez.io.Writer` and writes archive chunks to file until all rows for a given statement have been exhausted.
11243	Sets the current encoder output to Python `str` and returns a row iterator.
11244	Convert string with optional multiplier (k, M, G, T) to float
11245	Convert string with gains of individual amplification elements to dict
11246	Convert a string with SoapySDR device settings to a dictionary.
11247	Wrap text to terminal width with default indentation
11248	Return detected SoapySDR devices
11249	Set center frequency and clear averaged PSD data
11250	Return freqs and averaged PSD for given center frequency
11251	Wait for all PSD threads to finish and return result
11252	Compute PSD from samples and update average for given center frequency
11253	Read data from file-like object.
11254	Write data to file-like object.
11255	Submits a callable to be executed with the given arguments.Count maximum reached work queue size in ThreadPoolExecutor.max_queue_size_reached.
11256	Converts integration time to number of repeats.
11257	Generate list of frequencies for frequency hopping
11258	Creates a buffer for reading samples with specified parameters and ensures the buffer size does not exceed the maximum allowed size. Adjusts the number of repeats and buffer size accordingly if necessary.
11259	Prepare samples buffer and start streaming samples from device
11260	Stop streaming samples from device and delete samples buffer
11261	Tune to a specified center frequency and compute the Power Spectral Density.
11262	Sweep spectrum using frequency hopping
11263	Update the device address and perform an I2C_SLAVE ioctl operation if the address has changed.
11264	Forcing to run cmake for building zql. Checks if cmake is installed, configures the build directory, runs cmake and make commands, and handles errors during the process.
11265	Return a set of datetimes after filtering.
11266	Return a datetime with the same value as `dt`, to a resolution of days.
11267	Return a datetime with the same value as `dt` to a resolution of weeks. The `firstweekday` parameter determines when the week starts and defaults to Saturday.
11268	Return a set of datetimes that should be kept, out of `datetimes`.
11269	u Return a set of datetimes that should be deleted, out of the given `datetimes`.
11270	Return a set of dates to keep, out of the given dates.
11271	Return a set of dates that should be deleted from the provided set of dates.
11272	Returns an SPI control byte.
11273	Reads the bit value from a specified address.
11274	Writes the value given to the bit in the address specified.
11275	Return the index of the lowest bit that is set to 1 in the given bit pattern. Return None if no bits are set.
11276	Waits for port events on a given port and chip, placing the events onto the specified event queue.
11277	Waits for events on the event queue and calls the registered functions.
11278	Bring the interrupt pin on the GPIO into Linux userspace.
11279	Set the interrupt edge on the userspace GPIO pin.
11280	Wait until a file exists.
11281	Registers a pin number and direction to a callback function.
11282	De-registers callback functions based on pin number and event direction. If no parameters are provided, all functions are de-registered.
11283	Enables GPIO interrupts.
11284	Sends bytes via the SPI bus.
11285	Re-implement almost the same code from crispy-forms but passing the `form` instance to the item `render_link` method.
11286	Find tab fields listed as invalid.
11287	Render the link for the tab-pane. It must be called after render so ``css_class`` is updated with ``active`` class name if needed.
11288	Get package version from installed distribution or configuration file if not installed
11289	Pass template pack argument
11290	Method to check the status of the incoming response, raises an exception if the status is not 200.
11291	Used by every other method, it makes a GET request with the given params.
11292	Requests direct download link for requested file.
11293	Makes a request to prepare for file upload. If folder_id is not provided, it will make and upload link to the ``Home`` folder. Returns a dictionary containing upload URL and valid_until timestamp.
11294	This interface is used to upload a file to a specified folder, with options for folder ID, SHA1 hash, and HTTP-only upload.
11295	Used to make a remote file upload to openload.co. If folder_id is not provided, the file will be uploaded to the "Home" folder.
11296	Checks the status of remote file uploads.
11297	Request a list of files and folders in a specified folder. If `folder_id` is not provided, the "Home" folder will be listed. Returns a dictionary containing lists of folders and files.
11298	Shows running file conversions by folder. If folder_id is not provided, the "Home" folder will be used. Returns a list of dictionaries, each representing a file conversion info.
11299	Calculate the relative humidity given the temperature and dewpoint in Fahrenheit.
11300	Calculates the dewpoint in degrees F using the formula from weatherwise.org.
11301	Perform HTTP session to transmit defined weather values.
11302	Return the CRC calculation value from raw serial data.
11303	Perform a CRC check on raw serial data and return True if valid (CRC == 0).
11304	Given a packed storm date field, unpack and return it as a 'YYYY-MM-DD' string.
11305	Return `True` if the weather station returns Rev.B archives, based on the `RecType` field in the archive records.
11306	Vertices operate on faces
11307	Writes a single command with variable arguments and waits for an ACK or OK response from the device.
11308	issue a command to read the archive records after a known time stamp
11309	Get fields from the newest archive record in the device. Return None when no records are new.
11310	Read and parse data from the console; parsed data stored in the fields variable
11311	Query weather data, perform sanity checks, compute gust data, and post data to online services in a specified order, handling exceptions for each publisher.
11312	setup system logging to desired verbosity
11313	Returns a list of publication service instances based on the provided options.
11314	Return gust data if it exceeds the threshold value and the current time is within the reporting window period.
11315	Set weather data parameters to be published to the server, with unspecified parameters defaulting to 'NA'.
11316	Stores keyword arguments to be written to an output file.
11317	Write output file.
11318	Decorator for marking requirements as user-only while passing the current request context internally.
11319	Initializes the Flask-Allows object against the provided application and adds request and response hooks to manage overrides and additional data.
11320	Checks if the provided or current identity satisfies the given requirements, considering both additional and overridden requirements with overridden requirements taking precedence.
11321	Binds an override to the current context, optionally using the current overrides in conjunction with this override. If `use_parent` is true, a new override is created from the parent and child overrides rather than manipulating either directly.
11322	Pops the latest override context. If the override context was pushed by a different override manager, a ``RuntimeError`` is raised.
11323	Allows temporarily pushing an override context, yields the new context into the following block.
11324	Binds an additional to the current context, optionally using the current additionals in conjunction with this additional. If ``use_parent`` is true, a new additional is created from the parent and child additionals rather than manipulating either directly.
11325	Pops the latest additional context if it was pushed by the same additional manager. Raises a RuntimeError if the popped context was pushed by a different additional manager.
11326	Allows temporarily pushing an additional context, yields the new context into the following block.
11327	Append a number to duplicate field names to make them unique.
11328	Return the string to be shown as updates after the execution of a Cypher query
11329	Given a Cypher query to execute and a dictionary with the IPython user space, generates a dictionary with safe keys and values to pass onto Neo4j.
11330	Executes a query using the provided parameters and configuration, and returns formatted results based on the specified options.
11331	Returns a Pandas DataFrame instance built from the result set.
11332	Returns a NetworkX multi-graph instance built from the result set.
11333	### Summary:
Generates a matplotlib pie chart from the result set using the values in the rightmost column as slice sizes and other columns for labels.
11334	Generates a matplotlib plot from the result set.
11335	Generate a barcode plot from the result set.
11336	Generates results in comma-separated form and writes to a file if specified.
11337	Re-implementation of the permission_required decorator, honors settings.
11338	Adds ``is_rendered`` to the context and the widget's context data.
11339	Returns the widgets sorted by position.
11340	Returns all widgets that need an update.
11341	Register the given widget that inherits ``DashboardWidgetBase`` and ensures it is not registered twice, raising exceptions if conditions are not met.
11342	Unregisters the given widget.
11343	Gets or creates the last update object for this widget.
11344	Returns the setting for this widget from the database.
11345	Saves the setting value into the database.
11346	Checks if an update is needed. Checks against ``self.update_interval`` and this widgets ``DashboardWidgetLastUpdate`` instance if an update is overdue. This should be called by ``DashboardWidgetPool.get_widgets_that_need_update()``, which in turn should be called by an admin command which should be scheduled every minute via crontab.
11347	Create a spark bolt array from a local array.
11348	Create a spark bolt array of ones.
11349	Join two bolt arrays together, at least one of which is in spark.
11350	Check that arguments are consistent with spark array construction.
11351	Format target axes given an array shape
11352	Wraps an existing numpy constructor in a parallelized construction.
11353	Align local bolt array so that axes for iteration are in the keys. This operation is applied before most functional operators. It ensures that the specified axes are valid and might transpose/reshape the underlying array so that the functional operators can be applied over the correct records.
11354	Converts a BoltArrayLocal into a BoltArraySpark.
11355	Converts a BoltArrayLocal into an RDD
11356	Combine records into a list of keys and a larger ndarray along a new 0th dimension in an intermediate RDD.
11357	Apply a function to each subarray of the intermediate RDD.
11358	### Split values of distributed array into chunks.
11359	Apply a function to each subarray of a chunked array, ensuring that the function does not drop dimensions and does not change the shape of chunked dimensions.
11360	Apply a generic array -> object transformation to each subarray, resulting in a BoltArraySpark object with the blocked dimensions replaced by indices indicating block ID.
11361	Identify a plan for chunking values along each dimension.
11362	Remove the padding from chunks.

Given a chunk and its corresponding index, use the plan and padding to remove any padding from the chunk along with specified axes.
11363	Obtain number of chunks for the given dimensions and chunk sizes. Calculate the number of chunks based on the plan and shape of the array.
11364	Obtain slices for the given dimensions, padding, and chunks.
11365	Obtain a binary mask by setting a subset of entries to true.
11366	Repartitions the underlying RDD to the specified number of partitions.
11367	Aggregates records of a distributed array. Stacking should improve the performance of vectorized operations, but the resulting StackedArray object only exposes a restricted set of operations (e.g. map, reduce). The unstack method can be used to restore the full bolt array.
11368	Align spark bolt array so that axes for iteration are in the keys
11369	Return the first element of an array.
11370	Compute a statistic over an axis. Can provide either a function (for use in a reduce) or a name (for use by a stat counter).
11371	Return the mean of the array over the given axis.
11372	Return the variance of the array over the given axis.
11373	Return the standard deviation of the array over the given axis.
11374	Return the sum of the array over the given axis.
11375	Return the maximum of the array over the given axis.
11376	Compute the minimum value over the given axis.
11377	Breaks arrays into subarrays using a specified size of chunks along each value dimension, with the option to specify an average chunk byte size and calculate chunk sizes automtically.
11378	Swap axes from keys to values. This is the core operation underlying shape manipulation on the Spark bolt array. It exchanges an arbitrary set of axes between the keys and the values. If either is None, will only move axes in one direction (from keys to values, or values to keys). Keys moved to values will be placed immediately after the split; values moved to keys will be placed immediately before the split.
11379	Return an array with the axes transposed. This operation will incur a swap unless the desired permutation can be obtained only by transposing the keys or the values.
11380	Interchange two specified axes of an array.
11381	Return an array with the same data but a new shape.
11382	Check if the requested reshape can be broken into independent reshapes on the keys and values. If it can, returns the index in the new shape separating keys from values, otherwise returns -1.
11383	Remove one or more single-dimensional axes from the array.
11384	Cast the array to a specified type.
11385	Clip values above and below the specified minimum and maximum values, applying broadcasting if necessary.
11386	Return the contents as a local array.
11387	Coerce singletons and lists and ndarrays to tuples.
11388	Convert a list of arguments to a tuple.
11389	Checks to see if a list of axes are contained within an array shape.
11390	Test that a and b are close and match in shape.
11391	Flatten lists of indices and ensure bounded by a known dim.
11392	Converts a slice to have defined start, stop, and step values, ensuring it is within a known dimension. Handles negative indices and adjusts the slice bounds accordingly.
11393	Check to see if a proposed tuple of axes is a valid permutation of an old set of axes.
11394	Check to see if a proposed tuple of axes is a valid reshaping of the old axes by ensuring that they can be factored.
11395	Rebuilds the original array from chunks that have been split into multiple parts along each axis.
11396	Expand dimensions by iteratively appending empty axes.
11397	Eagerly return count and index for each element in RDD.
11398	Decorator to append routed docstrings
11399	Use arguments to route constructor.
11400	Reshape just the keys of a BoltArraySpark, returning a new BoltArraySpark.
11401	Transpose just the keys of a BoltArraySpark, returning a new BoltArraySpark.
11402	Reshape just the values of a BoltArraySpark, returning a new BoltArraySpark.
11403	Transpose just the values of a BoltArraySpark, returning a new BoltArraySpark.
11404	Create a local Bolt array filled with ones.
11405	Create a local bolt array of zeros.
11406	Join a sequence of arrays together. The arrays are joined along a specified axis. Returns a new array containing the concatenated arrays.
11407	Given a data set, an xmin value, and an alpha "scaling parameter", computes the log-likelihood (the value to be maximized)
11408	Return the most likely alpha for the data given an xmin
11409	Calculate the Maximum Likelihood Estimator (MLE) of the "scaling parameter" alpha for discrete data based on Clauset et al (2009).
11410	Find the most likely value of alpha using the maximum L and the discrete best alpha method.
11411	Use the maximum likelihood to determine the most likely value of alpha
11412	Plots the power-law-predicted value on the Y-axis against the real values along the X-axis. Can be used as a diagnostic of the fit quality.
11413	Estimate lognormal distribution parameters and calculate likelihood ratios.
11414	Sanitizes HTML, removing disallowed tags and attributes.
11415	Configure Yandex Metrika analytics counter.
11416	Generates a list of tags identifying those previously selected. Returns a list of tuples of the form (<tag name>, <CSS class name>). Uses the string names rather than the tags themselves in order to work with tag lists built from forms not fully submitted.
11417	Calculate MD5 fingerprint.
11418	Calculate sha256 fingerprint.
11419	Calculates sha512 fingerprint.
11420	Calculate two's complement.
11421	Decode base64 coded part of the key.
11422	Parses an ssh options string.
11423	Parses ssh-rsa public keys.
11424	Parses ssh-dsa public keys.
11425	Parses ecdsa-sha public keys.
11426	Parses ed25516 keys.
11427	Validates SSH public key. Throws exception for invalid keys. Otherwise returns None. Populates key_type, bits, and bits fields. For rsa keys, see field "rsa" for raw public key data. For dsa keys, see field "dsa". For ecdsa keys, see field "ecdsa".
11428	Performs a step to establish the context as an initiator. This method should be called in a loop and fed input tokens from the acceptor, and its output tokens should be sent to the acceptor, until this context's :attr:`established` attribute is True.
11429	Performs a step to establish the context as an acceptor.
11430	Return the set of mechanisms supported by the credential.
11431	Stores this credential into a 'credential store'.
11432	Import and run setup function with given properties.
11433	Imports and returns a setup function. Supports optional features like handling Markdown READMEs, building Debian packages using stdeb, and using distribute_setup.py.
11434	Return a file handle to record audio
11435	Returns HTML5 Boilerplate CSS file.
11436	Returns Normalize CSS file. Included in HTML5 Boilerplate.
11437	Returns the Font Awesome CSS file. If `TEMPLATE_DEBUG` is `True`, it returns the full file; otherwise, it returns the minified file. The version can be specified; if not, it defaults to a setting or a default value.
11438	Returns Modernizr JavaScript file according to version number.
11439	Returns jQuery JavaScript file according to version number.
11440	Returns the jQuery UI plugin file according to version number.
11441	Returns the jQuery DataTables plugin file according to version number. If `TEMPLATE_DEBUG` is `True`, returns the full file; otherwise, returns the minified file.
11442	Returns the jQuery DataTables CSS file according to the specified version number.
11443	Returns the jQuery DataTables ThemeRoller CSS file according to version number.
11444	Returns the jQuery Dynamic Formset plugin file according to version number.
11445	Returns the jQuery ScrollTo plugin file according to version number.
11446	Returns the jQuery Smooth Scroll plugin file according to version and debug settings.
11447	Returns Twitter Bootstrap CSS file.
11448	Returns Google Analytics asynchronous snippet. Uses DJFRONTEND_GA_SETDOMAINNAME for cross-domain tracking. Incorporates ALLOWLINKER for enhanced tracking.
11449	Render CodeMirrorTextarea with optional JavaScript formatting.
11450	Generate auth tokens tied to user and specified purpose.The hash expires at midnight on the minute of now + minutes_valid.
11451	Get the expiry time by adding minutes to the current time and then rounding down to the nearest second and microsecond.
11452	Return login token info for given user.
11453	Serialize user as per Meteor accounts serialization.
11454	De-serialize user profile fields into concrete model fields.
11455	Update user data.
11456	Consistent fail so we don't provide attackers with valuable info.
11457	Resolve and validate an authentication token, returning the user object if valid.
11458	Check if the request is secure or from a local connection.
11459	Retrieve username from user selector.
11460	Register a new user account.
11461	Login a user.
11462	Logs out a user.
11463	Login either with resume token or password.
11464	Authenticate using credentials supplied in params.
11465	Login with existing resume token.
11466	Changes the user's password. Authenticates the user with the old password and updates the password if authentication succeeds. Sends a signal when the password is changed successfully.
11467	Requests a password reset email for the given user.
11468	Resets a user's password using a token from an email and logs the user in. Returns the user ID.
11469	Recursive dict merge.
11470	Read encoded contents from specified path or return default.
11471	Get an Alea ID for the given object.
11472	Returns Alea ID mapping for all given ids of specified model.
11473	Return an object ID for the given meteor_id using the specified model.
11474	Return all object IDs for the given meteor_ids.
11475	Return an object for the given meteor_id. It checks if the primary key is an AleaIdField and retrieves the object accordingly. If not, it checks for unique AleaIdField and retrieves the object based on that. If multiple unique AleaIdFields are found, it retrieves the object using get_object_id function.
11476	Set default value for AleaIdField.
11477	Unset default value for AleaIdField
11478	Truncate tables.
11479	Apply any forward changes using schema_editor.
11480	Use schema_editor to apply any reverse changes.
11481	Set command option defaults.
11482	Updates command options.
11483	Performs a build process for a Meteor application by constructing the necessary directory structure, setting up the command line for building, executing the build, and pruning unnecessary npm caches if specified.
11484	Convert a UNIX-style path into platform specific directory spec.
11485	Seed internal state from supplied values
11486	Returns internal state, useful for testing.
11487	Return string of length elements chosen from alphabet.
11488	Decorator to mark a method as an API endpoint for later registration.
11489	Iterator over all API endpoint names and callbacks.
11490	Clears the cache for `api_path_map` and calls the same method on all providers.
11491	Debug print name and val.
11492	Validate arguments to be supplied to a given function.
11493	Handles new websocket connection and initializes necessary attributes.
11494	Handle closing of websocket connection.
11495	Process a message received from remote.
11496	Extract DDP messages from a raw WebSocket message.
11497	Process a single DDP message.
11498	Dispatches a message to the appropriate handler based on the message type.
11499	DDP connection handler.
11500	Handle DDP ping request and reply with 'pong'. If an 'id_' is provided, reply with 'pong' and include the provided 'id_'.
11501	Handling DDP subscription message.
11502	DDP unsub handler.
11503	Handle a DDP method by processing parameters and updating the API accordingly.
11504	Inform client that WebSocket service is available.
11505	Spawn greenlets for handling websockets and PostgreSQL calls.
11506	Main entry point for `dddp` command.
11507	Print formatted msg if verbosity set at 1 or above.
11508	Stop all green threads.
11509	Run DDP greenlets.
11510	Spawn sub tasks, wait for stop signal.
11511	Poll DB socket and process async tasks.
11512	Patch threading and psycopg2 modules for green threads.
11513	Generates a new ID, optionally using a namespace of the given `name`.
11514	Import all `ddp` submodules from `settings.INSTALLED_APPS`.
11515	Return an error dict for self.args and kwargs.
11516	Get attribute, creating if required using specified factory.
11517	Emit a formatted log record via DDP.
11518	Middleware which selects a renderer for a given request then renders a handler's data to a `aiohttp.web.Response`.
11519	Context manager which yields a function for adding multiple routes from a given module.
11520	Registers routes for a resource instance's methods.
11521	Runs an `aiohttp.web.Application` using gunicorn.
11522	Sends a push notification to this device via GCM.
11523	Send an APNS notification to one or more registration_ids.
11524	Queries the APNS server for id's that are no longer active since the last fetch
11525	Send a single gcm notification.
11526	Send bulk GCM notifications to specified registration IDs with the provided data and encoding.
11527	Send a json GCM message
11528	Sends a GCM message with the given content type
11529	Returns the instance of the given module location.
11530	Fast forward selection algorithm that reduces the number of scenarios based on a probabilistic approach. It iteratively selects the scenario with the minimum influence and merges it with the set of reduced scenarios until the desired number of scenarios is reached.
11531	Searches for a term or phrase on Giphy and returns a generator object.
11532	Calls the translate method of a Giphy API wrapper with the given parameters.
11533	Returns a generator for trending GIFs using a specified limit and rating.
11534	A shorthand function to fetch a GIF using its ID and an optional API key.
11535	Returns a Giphy API wrapper that creates a screensaver with the given tag and API key.
11536	Shorthand for creating a Giphy api wrapper with the given api key and then calling the upload method.
11537	Converts string values to integers for specific keys in image type data, ignoring conversion errors.
11538	Wrapper for making an api request from giphy
11539	Retrieve a single image that represents a translation of a term or phrase into an animated gif. Punctuation is ignored. By default, this will perform a `term` translation. If you want to translate by phrase, use the `phrase` keyword argument.
11540	Retrieve GIFs currently trending online. The data returned mirrors that used to create The Hot 100 list of GIFs on Giphy.
11541	Retrieves a specific gif from Giphy based on a unique ID, raising an exception if not found and strict mode is enabled.
11542	Uploads a gif from the filesystem to Giphy.
11543	Prepares the extension element for access control.
11544	Authenticates the user and sets the GData Auth token.
Raises an exception if the credentials are incorrect.
11545	Browser based upload Creates the video entry and meta data to initiate a browser upload Authentication is needed Params: title: string description: string keywords: comma seperated string developer_tags: tuple Return: dict contains post_url and youtube_token. i.e { 'post_url': post_url, 'youtube_token': youtube_token }
11546	Checks the video upload status
11547	Update the video entry with new details.
11548	Deletes a video from YouTube using the provided video ID. Authentication is required. Raises an error if deletion is unsuccessful.
11549	Check the availability of a video, returning a JSON response indicating whether the video is available (True) or not (False).
11550	Displays a video in an embed player. If the video is not available, it checks the upload status and renders the appropriate template based on the state. If the video is available, it renders the video template.
11551	List of videos of a user. If username is not set, shows the currently logged in user.
11552	Direct upload method. Starts with uploading video to server, then sends to YouTube. If `only_data` set, returns JSON object. Otherwise, redirects to video display page.
11553	Displays an upload form. Creates upload URL and token from YouTube API and uses them on the form.
11554	The upload result page. Saves the video data and redirects to the next page.
11555	Removes the video from YouTube and from the database. Requires a POST request.
11556	Connects to Youtube Api and retrieves the video entry object
11557	Syncronize the video information on db with the video on Youtube
11558	Deletes the video from YouTube
11559	Update a resource's metadata.
11560	Update a metadata field for a resource.
11561	Update a resource's details via the M2X API.
11562	Load a list of trees from a Newick formatted string.
11563	Serialize a list of trees in Newick format.
11564	Load a list of trees from an open Newick formatted file.
11565	Load a list of trees from a Newick formatted file.
11566	Parse a Newick formatted string into a `Node` object.
11567	Create a new `Node` object with optional parameters for name, length, and descendants.
11568	The representation of the Node in Newick format.
11569	Return a unicode string representing a tree in ASCII art fashion.
11570	Gets the specified node by name.
11571	Remove all specified nodes or all nodes not in the specified list if inverse is True. The specified nodes must be leaves and distinct from the root node.
11572	Resolve polytomies by inserting additional nodes with length=0 into the subtree, ensuring all non-leaf nodes have only 2 descendants and making the tree a fully resolved binary tree.
11573	Set the name of all non-leaf nodes in the subtree to None.
11574	Set the name of all leaf nodes in the subtree to None.
11575	Decorator that protects methods with HTTP authentication.
11576	Clear all comments in a JSON string, specifically JS-style comments like `//` and `/**/`, while preserving other characters and formatting.
11577	Raises an exception if the given app setting is not defined.
11578	Get the value of an argument by name.
11579	Returns a list of the arguments with the given name. If the argument is not present, returns an empty list. The returned values are always unicode.
11580	Catches exceptions from the wrapped function. Obsolete since Tornado 1.1.
11581	Gets the value of the cookie with the given name, else default.
11582	Deletes the cookie with the given name.
11583	Generates and redirects to the authentication URL for the service, requesting specified attributes such as name, email, language, and username. After authentication, the service will redirect back to the specified callback URI.
11584	Gets the OAuth authorized user and access token on callback. Calls the provided callback with the authenticated user after completing the OAuth registration process.
11585	```Returns the OAuth parameters as a dict for the given request.
11586	Authenticates and authorizes for the given Google resource.
11587	Makes a Facebook API REST request with automatic inclusion of the Facebook API key and signature.
11588	Handles the login for the Facebook user, returning a user object.
11589	Concatenates a URL with a dictionary of arguments, ensuring query parameters are properly handled.
11590	Parse a Content-type like header. Return the main content-type and a dictionary of options.
11591	Adds a new value for the given key.
11592	Returns all values for the given header as a list.
11593	Updates the dictionary with a single header line.
11594	Convert HTTP header text into a dictionary.
11595	Converts a name to Http-Header-Case.
11596	Converts a string argument to a byte string. If the argument is already a byte string or None, it is returned unchanged. Otherwise it must be a unicode string and is encoded as utf8.
11597	Converts a string argument to a unicode string. If the argument is already a unicode string or None, it is returned unchanged. Otherwise it must be a byte string and is decoded as utf8.
11598	Converts a string argument to a subclass of basestring.
11599	Walks a simple data structure, converting byte strings to unicode. Supports lists, tuples, and dictionaries.
11600	Ensure no conflicting auth plugins and check for available metadata.
11601	Generates a list of all subclasses of a given class in depth-first order.
11602	Based on the matching strategy and the origin and optionally the requested method, return a tuple of policyname and origin.
11603	Return a vector with the occupancy of each grid point for given array of points
11604	Write a GRO (Gromacs) file with the given title, atoms, and periodic box.
11605	Writes a PDB file with the given title, atoms, and periodic box.
11606	Determine molecule numbers for given total, absolute and relative numbers
11607	Adapt the size of the box to accommodate the lipids. The PBC is changed in place.
11608	Write a basic TOP file.
11609	Returns a stream for a given resource file in the module.
11610	Send a message to a particular user.
11611	Send a message to a group of users.
11612	Fetch messages for given user. Returns None if no such message exists.
11613	Check for messages for this user and, if it exists, call the messages API with it.
11614	Checks the config.json file for default settings and auth values.
11615	Verifies the profile name exists in the config.json file. Args: :msg: (Message class) an instance of a message class. :cfg: (jsonconfig.Config) config instance.
11616	Update msg attrs with values from the profile configuration if the msg.attr=None, else leave it alone.
11617	Retrieve auth from profile configuration and set in msg.auth attr.
11618	Updates the profile's config entry with values set in each attr by the user. This will overwrite existing values.
11619	Updates the profile's auth entry with values set by the user. This will overwrite existing values.
11620	Create a profile for the given message type. Raises an error if the message type is not supported. Prompts the user for a profile name and required data, then configures the profile with authentication details.
11621	Display the required items needed to configure a profile for a given message type.
11622	Get the required 'settings' from the user and return as a dict.
11623	Get the required 'auth' from the user and return as a dict.
11624	Create the profile entry and store the configuration in a file.
11625	Write the settings into the data portion of the cfg.
11626	Return the auth parameters into the cfg.
11627	Add attachments to the message with optional parameters.
11628	Send the message via HTTP POST, default is json-encoded.
11629	Constructs a message class and sends the message. Defaults to sending synchronously; set send_async=True to send asynchronously.
11630	Factory function to return the specified message instance
11631	A credential property factory for each message class that sets private attributes and returns obfuscated credentials when requested.
11632	Validate user input for a property to ensure critical parameters are of a specific type.
11633	Base function to validate input, dispatched via message type.
11634	Twilio input validator function.
11635	Validate input for a SlackPost message.
11636	Validate WhatsApp input values.
11637	Creates a running coroutine to receive message instances and send them in a futures executor.
11638	Add a message to the futures executor
11639	Reads message body if specified via filepath.
11640	Removes arguments with a value of None from keyword arguments and removes specific keys.
11641	Do some final preprocessing and send the message.
11642	Lookup chat_id of username if chat_id is unknown via API call.
11643	Send content via HTTP Post.
11644	Start sending the message and attachments.
11645	Return an SMTP server name guess from an outgoing email address.
11646	Assemble the parts of the email.
11647	Adds email header information such as "From", "Subject", "To", "Cc", and "Bcc" to the email message.
11648	Add body content of email.
11649	Add required attachments.
11650	Start session with email server.
11651	Get an SMTP session with SSL.
11652	Get an SMTP session with TLS.
11653	Send the message.
11654	Save metadata tags.
11655	Releases renderer resources associated with this image.
11656	Get a sub-image from the current image based on the specified rectangular region.
11657	Validate keys and values
11658	Clear all keys from the comment.
11659	Return a string representation of the data.
11660	Read the chunks data
11661	Removes the chunk from the file
11662	Update the size of the chunk.
11663	Insert a new chunk at the end of the IFF file.
11664	Saves ID3v2 data to the AIFF file.
11665	Completely removes the ID3 chunk from the AIFF file
11666	Parse a C source file and add its blocks to the processor's list.
11667	process a normal line and check whether it is the start of a new block
11668	Adds the current accumulated lines and creates a new block.
11669	Render a string with the given font. Text alignment and word-wrapping are not yet implemented. The text is rendered with the left edge and baseline at `(x, y)`.
11670	Parse a standard ISO 8601 time string. The Route53 API uses these here and there. Returns a timezone aware (UTC) datetime.datetime instance.
11671	convert a series of simple words into some HTML text
11672	analyze a simple word to detect cross-references and styling
11673	convert words of a paragraph into tagged HTML text, handle xrefs
11674	convert a code sequence to HTML
11675	convert a field's content into some valid HTML
11676	Saves the metadata to the given filename.
11677	Update all parent atoms with the new size.
11678	Start running the game.  The window is created and shown at this point, and then the main event loop is entered.  'game.on_tick' and other event handlers are called repeatedly until the game exits.
11679	Registers a mapping for controllers with the given vendor and product IDs. The mapping will replace any existing mapping for these IDs for controllers not yet connected.
11680	Find a mapping that can apply to the given controller. Returns None if unsuccessful.
11681	Register a text key with getters, setters, and deleters.
11682	This method is used to sign a string with the user's secret access key using the HMAC-SHA256 algorithm. The signed string is then Base64-encoded and returned. This is typically used in AWS services for authentication and authorization.
11683	Determine the headers to send along with the request for Route53.
11684	All outbound requests go through this method. It defers to the transport's various HTTP method-specific methods.
11685	Sends the GET request to the Route53 endpoint.
11686	Sends the POST request to the Route53 endpoint.
11687	Sends the DELETE request to the Route53 endpoint.
11688	Return a new APE tag value.
11689	Use the HTTP transport to query the Route53 API and parse the response using lxml's parser.
11690	Given an API method, this function loops through the record sets in the API call until all records have been yielded.
11691	List all hosted zones associated with the current connection's account. Returns a generator to retrieve hosted zones, allowing partial fetching without downloading all entries at once. The method supports pagination through the `page_chunks` keyword argument.
11692	Creates and returns a new hosted zone. Once a hosted zone is created, its details can't be changed.
11693	Lists a hosted zone's resource record sets by Zone ID, if you already know it. For most cases, it's recommended to use the `HostedZone.record_sets` property instead of this method. This saves an HTTP request if you already know the zone's ID.
11694	Given a ChangeSet, POST it to the Route53 API. This method is not intended for direct use and should preferably be called through convenience methods on the ResourceRecordSet sub-classes. It constructs an XML document from the ChangeSet and sends a POST request to the Route53 API. If the request is successful, it parses and returns the change info; otherwise, it raises an error with the error message provided by the API.
11695	Draws an image at a specified top-left corner with an optional bottom-right corner. If bottom-right corner is not provided, image is rendered at its native resolution. Images can be flipped and scaled by adjusting the bottom-right corner.
11696	Draw a rectangular region of an image.
11697	Calculate the total frame size based on the header and packet lengths.
11698	Replace old_pages with new_pages within fileobj.
11699	Returns the last page of the stream 'serial' using a fast approach for non-muxed streams and a slow approach for muxed streams.
11700	Set current section during parsing.
11701	add a new markup section
11702	Process a block of content and return a list of DocMarkup objects corresponding to it.
11703	Returns the DocMarkup corresponding to a given tag in a block
11704	Forms an XML string used to create a new hosted zone in Route53.
11705	Locks a file object safely, handling the case where the platform doesn't support fcntl or filesystem locks. Returns whether the lock was successful or raises an exception in certain cases.
11706	Insert size bytes of empty space starting at offset.
11707	Deletes size bytes of empty space starting at offset in the file object fobj using mmap if available, otherwise falls back to a slower method.
11708	Convert a basestring to a valid UTF-8 str.
11709	Adds a change to this change set.
11710	Parses a ChangeInfo tag and extracts relevant information.
11711	Calculates the width of the given string in this font.
11712	Determines whether this record set has been modified since the last retrieval or save.
11713	Deletes this record set.
11714	Saves any changes to this record set by deleting the existing one and creating a new one within a single change set.
11715	Parse ID3v1 tag and return a list of ID3v2.4 frames.
11716	Convert a ID3v2.4 tag dictionary into ID3v1.1 tag string.
11717	Read a certain number of bytes from the source file.
11718	Delete all tags of a given kind; see getall. If the key is not found, delete all tags that start with the given key followed by a colon.
11719	Deprecated; use the add method.
11720	Perform updates common to both v23 and v24 versions. Remove "(xx)Foobr" format from TCON genre. Convert ID3v2.2 PIC frames to a consistent format. Remove ID3v2.2 LNK frames during upgrade.
11721	Converts older tags into an ID3v2.4 tag. Updates old ID3v2 frames to ID3v2.4 ones (e.g. TYER to TDRC). Ensures that the tag is saved in the latest version by default when loading.
11722	Release all resources associated with the sound
11723	Play the sound as a `one-shot`. The sound will be played to completion.
11724	Sets the loop points within the sound. The sound must have been created with ``loop=True``.  The default parameters cause the loop points to be set to the entire sound duration.
11725	Return the list of glyph names and their unicode values
11726	Takes a list and a filter, returning all elements not present in the filter.
11727	Dump a given encoding by writing it to a file.
11728	Dumps a given encoding into a C-style array representation.
11729	Generates a PostScript file containing Adobe Glyph List (AGL) information.
11730	Checks if a given file exists.
11731	builds a list of input files from command-line arguments
11732	Converts a parsed HostedZone XML element into a HostedZone object.
11733	Parses a DelegationSet tag, extracting name servers and populating them into an existing HostedZone instance.
11734	Render metadata block as a byte string.
11735	Consolidate FLAC padding metadata blocks.
11736	Remove Vorbis comments from a file. If no filename is given, the one most recently loaded is used.
11737	Saves metadata blocks to a file, optionally deleting ID3 tags and adjusting padding.
11738	Parses an Alias tag beneath a ResourceRecordSet, spitting out the two values found within. This is specific to A records that are set to Alias.
11739	Used to parse the various Values from the ResourceRecords tags on most rrset types.
11740	Parse and instantiate a ResourceRecordSet object from XML data.
11741	Delete the hosted zone and optionally nuke all associated record sets.
11742	Convenience method for creating ResourceRecordSets. Most of the calls are basically the same, this saves on repetition.
11743	Creates and returns an A record attached to this hosted zone.
11744	Creates an AAAA record attached to this hosted zone.
11745	Creates a CNAME record attached to this hosted zone.
11746	Creates a MX record attached to this hosted zone.
11747	Creates a NS record attached to this hosted zone.
11748	Creates a PTR record attached to this hosted zone.
11749	Creates a SPF record attached to this hosted zone.
11750	Creates a SRV record attached to this hosted zone.
11751	Creates a TXT record attached to this hosted zone.
11752	Register a user-defined text frame key.
11753	Get the change values for the XML request based on the action (CREATE or DELETE) and the ResourceRecordSet. For creations, use the current values from the ResourceRecordSet attributes, and for deletions, use the initial values from the ResourceRecordSet. Returns a dictionary of change data.
11754	Creates an XML element for a change.
11755	Forms an XML string to change resource record sets using Route53's API.
11756	Initialize log file with the current timestamp and log details about the start of NanoGUI and the Python version.
11757	Gets an item by its alias.
11758	Convert dictionary into sorted and hashable tuple.
11759	joins the map structure into HTML attributes.
11760	Initializes an app to work with this extension.

The app-context signals will be subscribed and the template context will be initialized.
11761	Calls the initializers of all bound navigation bars.
11762	Binds a navigation bar into this extension instance.
11763	Return the arguments which will be passed to ``url_for``. If ``_args`` is callable, it returns the result of calling ``_args()``. Otherwise, it returns ``_args`` as a dictionary.
11764	Get the final URL of the current navigation item.
11765	Return True if current request has the same endpoint and arguments as the item. Raises :class:`RuntimeError` if used in an external request context.
11766	Does basic Metric option validation.
11767	Fetches a statistic based on the given class name. Does a look-up in the gadgets' registered statistics to find the specified one.
11768	Calculates all of the metrics associated with the registered gadgets.
11769	Auto-discover INSTALLED_APPS gadgets.py modules and fail silently when not present. This forces an import on them to register any gadgets they may want.
11770	Return a CSV dump of all of the specified metric's counts and cumulative counts.
11771	Command handler for the "metrics" command.
11772	Returns the GET array's contents for the specified variable, handling the case where the variable is not present either by returning an empty list or raising an exception based on the `fail_silently` parameter.
11773	Tries to extract a boolean variable from the specified request.
11774	Gets the next colour in the Geckoboard colour list.
11775	Get default GET parameters for a particular Geckoboard view request
11776	Returns a number widget for the specified metric's cumulative total.
11777	Searches the GET variables for metric UIDs, and displays them in a RAG widget.
11778	Returns the data for a line chart for the specified metric.
11779	Returns a Geck-o-Meter control for the specified metric, including the latest count, minimum value, and maximum value.
11780	Returns a funnel chart for the metrics specified in the GET variables.
11781	Returns all of the active statistics for the gadgets currently registered.
11782	Registers a gadget object. If a gadget is already registered, this will raise AlreadyRegistered.
11783	Get the context for this view.
11784	Prints an error message and stops the command with a given status code.
11785	Validation data by specific validictory configuration
11786	Get a multi-line string as input
11787	Get a list of strings as input
11788	Gets an output file name as input, ensuring it has the correct extension and that the user choice is to overwrite or create it if it already exists.
11789	Gets schedule information for a team-season.
11790	Returns the team ID of the winning team. Returns NaN if a tie.
11791	Returns the year ID of the season in which this game took place. Adjusts the year if the month is January, February, or March.
11792	Returns a DataFrame where each row is an entry in the starters table from PFR.
11793	The playing surface on which the game was played
11794	Gets information relating to the opening coin toss. Dictionary of coin toss-related info.
11795	Returns a dictionary of weather-related information, including temperature, wind chill, relative humidity, and wind speed in miles per hour.
11796	Gets a dictionary of ref positions and the ref IDs of the refs for that game.
11797	Returns a list of BoxScore IDs for every game in the season, filtered by the specified kind ('R' for regular season, 'P' for playoffs).
11798	Returns a DataFrame containing standings information.
11799	Helper function for stats tables on season pages. Returns a DataFrame.
11800	Returns a DataFrame containing information about ROY voting.
11801	Returns the linescore for the game as a DataFrame.
11802	Returns the year ID of the season in which this game took place.
11803	Returns a DataFrame of player stats from the game.
11804	Decorator that switches to given directory before executing function, and then returning to orignal directory.
11805	Caches the HTML returned by the specified function `func`. Caches it in the user cache determined by the appdirs package.
11806	Generate a unique identifier for a class instantiation based on the class and its arguments.
11807	A decorator for memoizing functions. Only works on functions that take simple arguments - arguments that take list-like or dict-like arguments will not be memoized, and this function will raise a TypeError.
11808	Returns the age of the player on a given date.
11809	Gets a stats table from the player page. Helper function that does the work for per-game, per-100-poss, etc. stats.
11810	Returns a DataFrame of per-game box score stats.
11811	Returns a DataFrame of total box score statistics by season.
11812	Returns a DataFrame of per-36-minutes stats.
11813	Returns a DataFrame of per-100-possession stats.
11814	Returns a DataFrame of advanced stats.
11815	Returns a DataFrame of shooting stats.
11816	Returns a DataFrame of play-by-play stats.
11817	Return a table of a player's basic game-by-game stats for a season.
11818	Demonstrates how to access and manipulate session data in a web application.
11819	Expand the details column of the given dataframe by parsing play details and return the resulting DataFrame with new columns and cleaned features.
11820	Adds 'team' and 'opp' columns to the features by iterating through the rows in order.
11821	Adds extra convenience features based on teams with and without possession.
11822	Calculate the initial win probability of a game given its Vegas line.
11823	Gets yearly passing stats for the player.
11824	Retrieves the years for a specific award based on its div ID.
11825	Returns the full name of the team given its team ID by parsing the document.
11826	Gets list of BoxScore objects corresponding to the box scores from a given year.
11827	Returns a PyQuery object containing the info from the meta div at the top of the team year page with the given keyword.
11828	Returns head coach data by game for a given year.
11829	Returns a DataFrame with schedule information for the given year.
11830	Returns the coach ID for the team's OC in a given year.
11831	Returns the coach ID for the team's DC in a given year.
11832	Returns the ID for the stadium in which the team played in a given year.
11833	Returns the name of the offensive scheme the team ran in the given year.
11834	Returns the name of the defensive alignment the team ran in the given year.
11835	Returns a DataFrame of offensive team splits for a season.
11836	Gets the HTML for the given URL using a GET request, throttles the requests, and handles 4xx status codes.
11837	Flattens relative URLs within text of a table cell to IDs and returns the result.
11838	Converts a relative URL to a unique ID based on supported types.
11839	Converts keyword arguments given to a PSF query string.
11840	Main function for the processes that read from the HDF5 file.
11841	Allows direct access to the buffer element. Blocks until there is room to write into the buffer. Returns a guard object that returns the buffer element once released.
11842	Allows direct access to the buffer element. Blocks until there is data that can be read. Returns a guard object that returns the buffer element when released.
11843	Close the queue, signalling that no more data can be put into the queue.
11844	Read a block of data from the node at path.
11845	Get the remainder elements. These elements will not be read in the direct queue access cyclic=False mode.
11846	Get a queue that allows direct access to the internal buffer.
11847	Get a generator that allows convenient access to the streamed data, iterating over rows in the dataset and handling the remainder elements.
11848	Parse a stream.
11849	Write a list of protobuf message objects to a stream.
11850	Read a varint from file, parse it, and return the decoded integer.
11851	A generator yielding all protobuf object data in the file. It is the main parser of the stream encoding.
11852	Close the stream.
11853	Writes a group of one or more protobuf objects to the file. Multiple object groups can be written by calling this method several times before closing the stream or exiting the runtime context. The input protobuf objects get buffered and will be written down when the number of buffered objects exceeds the `self._buffer_size`.
11854	Write down buffer to the file.
11855	Returns joined game directory path relative to Steamapps
11856	Emulate user interactions with text inputs by key-down action on the first char. Then release the key after sending the rest of the text.
11857	Generate 2D fake fluorescence movie.
11858	Evaluate traits and return a list containing the description of traits which are not true. If LAZY_EVALUATION is set to False, all traits are evaluated before returning. Use this option only for debugging purposes.
11859	Waits until a condition is True or returns a non-None value. Raises a TimeoutException if the condition is not met within the specified timeout.
11860	Waits until all traits are present, raises a TimeoutException if any traits are still not present after the specified timeout.
11861	Set a list of exceptions that should be ignored inside the wait loop.
11862	Executes the 'Main.Volume' command and returns the result as an integer. Returns `None` if the command execution fails or if the result cannot be converted to an integer.
11863	Executes the Main.Source command and returns the integer result or None if an error occurs.
11864	Send a command string to the amplifier.
11865	Returns the status of the device.
11866	Power the device off.
11867	Power the device on.
11868	Sets the volume level of the device using an integer value between 0 and 200.
11869	Selects a source from the list of sources, ensuring power is on and the source is not already selected to avoid hanging the device.
11870	Deobfuscates the URL and returns HttpResponse from the source view.
11871	Generate a CRC32 checksum for the given plaintext and ensure the result is within the integer range.
11872	Obfuscate a given value, encrypting it with a secret key and optionally adding SEO-friendly text.
11873	It will print the list of songs that can be downloaded.
11874	It will return all hyper links found in the html page for download.
11875	Check if song name is present; return True if user entered artist or movie name, False and download link otherwise.
11876	It parses a resource URL to either find the download link for a specific song based on the given flag or return a list of available download links if no specific song is found.
11877	Generate the Google search URL for the given song name and website.
11878	Parse Google HTML response and return the first URL.
11879	Retrieve the URL for downloading a music file given a song name and website.
11880	Download the HTML page specified by the URL and return the HTML response. Handling SSL errors and other request exceptions.
11881	It will download a file specified by the URL using the requests module. If the file already exists, it will print a message and return. Otherwise, it will download the file in chunks and update the progress using tqdm. If there is an SSL error, it will attempt to download the file without verifying the certificate. If there is a request exception, it will print an error message and exit.
11882	It will download file specified by url using wget utility of linux
11883	Lookup AQI database for station codes in a given city.
11884	Lookup observations by geo coordinates.
11885	Decode AQICN observation response JSON into python object.
11886	Request station data for a specific station identified by code.
11887	The list of logical paths which are used to search for an asset. This property makes sense only if the attributes were created with a logical path. It is assumed that the logical path can be a directory containing a file named `index` with the same suffix.
11888	Return a list of compilers used to build assets.
11889	MIME type of the asset.
11890	Determines the implicit MIME type of the asset based on its compilers, returning the first valid MIME type found or None if none exist.
11891	Selects the appropriate file extension for an asset based on its compiler mimetype.
11892	Register a `processor` for a specified `mimetype`.
11893	Remove passed `processor` for passed `mimetype` from the registry. If processor for this MIME type does not found, nothing happens.
11894	The list of search paths. It is built from registered finders, which have a `paths` property. Can be useful for compilers to resolve internal dependencies.
11895	Register default compilers, preprocessors and MIME types.
11896	This function `import_qtcore()` attempts to load the appropriate version of Qt bindings (either PyQt5 or PySide) based on whether the script is run within the IDA Pro environment. If running within IDA, it ensures that the IDA-specific Qt bindings are loaded first to avoid conflicts with system-wide PyQt5 or PySide installations. If not running within IDA, it falls back to loading PyQt5 or PySide from the system-wide Python environment. If neither can be found, it raises an ImportError.
11897	Get the netnode used to store settings metadata in the current IDB. This function implicitly uses the open IDB via the idc interface.
11898	Add the given plugin name to the list of plugin names registered in the current IDB.
11899	Remove a given plugin name from the list of registered plugins in the current IDB.
11900	Import settings from the given file system path to given settings instance.
11901	### Example 4:
Output:
Export the given settings instance to the given file system path.
11902	Fetches the IDASettings instance for the current plugin with directory scope.
11903	Enumerate the keys found at any scope for the current plugin. rtype: Generator[str]
11904	Returns the response that should be used for any given exception.
11905	Returns a given table for the given user.
11906	Return a list of tables for the given user.
11907	Fetch packages and summary from Crates.io.
11908	Extracts the identifier from an item depending on its type.
11909	Extracts the update time from an item. Depending on the item, the timestamp is extracted from the 'updated_at' or 'fetched_on' fields. This date is converted to UNIX timestamp format.
11910	Get crate team owner
11911	Get crate user owners
11912	Get crate versions data
11913	Get crate version downloads
11914	This method is used to retrieve and parse crate data based on the specified crate ID.
11915	Get Crates.io summary
11916	Get crates in alphabetical order.
11917	Get a crate by its ID
11918	Get crate attribute
11919	Return the items from Crates.io API using pagination
11920	Fetch questions from the Kitsune url.
11921	Fetch questions from the Kitsune URL using the provided category and backend arguments.
11922	Retrieve questions from older to newer updated starting offset
11923	A method that fetches items from the ReMo URL based on the specified category and offset. Returns a generator of items.
11924	Extracts the update time from a ReMo item. The timestamp is extracted from the 'end', 'date_joined_program', or 'report_date' field based on availability, and then converted to a UNIX timestamp using a float value.
11925	Extracts the category from a ReMo item based on unique fields.
11926	Retrieve all items for a specified category using pagination.
11927	Get buffer list this instance operates on. Only available in mode != AIOBLOCK_MODE_POLL. Changes on a submitted transfer are not fully applied until its next submission: kernel will still be using original buffer list.
11928	IO priority for this instance.
11929	Cancels all pending IO blocks, waits until all non-cancellable IO blocks finish, and de-initialises AIO context.
11930	Submits transfers.
11931	Cancel an IO block and return the cancelled block's event data or None if the kernel returned EINPROGRESS.
11932	Cancels all submitted IO blocks and returns the list of values returned by individual cancellations.
11933	Returns a list of 3-tuples containing completed AIOBlock instance, res, and res2 values from submitted IO blocks.
11934	A method that fetches events from a MozillaClub URL using the feed API REST. Returns a generator of events.
11935	Retrieve all cells from the spreadsheet.
11936	Parses the MozillaClub spreadsheet feed cells json and yields each valid event.
11937	List of export formats.
11938	Load default permission factory.
11939	Create Invenio-Records-UI blueprint. The factory installs one URL route per endpoint defined, and adds an error handler for rendering tombstones.
11940	Create a Werkzeug URL rule for a specific endpoint, handling persistent identifier types and rendering templates.
11941	Display a record view after resolving the PID and checking permissions.
11942	Display default view. Sends record_viewed signal and renders template.
11943	Serialize record with given format and render record export template.
11944	Send a Timer metric calculating duration of execution of the provided callable.
11945	Close the socket to free system resources. After the socket is closed, further operations with socket will fail. Multiple calls to close will have no effect.
11946	Remove the client from the users of the socket. If there are no more clients for the socket, it will close automatically.
11947	Increment a Counter metric.
11948	Send a Timer metric with the specified duration in milliseconds.
11949	Send a Timer metric calculating the duration from the start time.
11950	Send a Gauge metric with the specified value.
11951	Send a GaugeDelta metric to change a Gauge by the specified value.
11952	Send a Set metric with the specified unique value.
11953	Override parent by buffering the metric instead of sending now.
11954	Return a batch client with same settings of the client.
11955	Return a client with same settings of the batch client
11956	Send buffered metrics in batch requests
11957	Create a permission checker object for a given record.
11958	Return a TCP batch client with same settings of the TCP client
11959	Send buffered metrics in batch requests over TCP
11960	Return a TCPClient with the same settings as the batch TCP client.
11961	Shortcut for creating `Users`. Permissions could be a list of permission names. If not specified creates active, non superuser and non staff user.
11962	tries to convert a Python object into an OpenMath object
11963	Converts a term into OpenMath, using either a converter or the interpretAsOpenMath method
11964	Convert OpenMath object to Python
11965	Convert Python object to OpenMath.
11966	Register a conversion from Python to OpenMath
11967	Register a conversion from OpenMath to Python
11968	Used to initialize redis with app object
11969	Return list of choices's keys
11970	Splits keyword arguments into model fields and subfields.
11971	Register form field data function. Could be used as decorator
11972	Returns a value using a function from a registry based on the provided arguments. Raises a TypeError if no matching function is found or if no instance is provided.
11973	Returns tuple with form data and files
11974	Sometimes return None if field is not required
11975	Selects a random choice from the choices attribute of a field.
11976	Return random value for DecimalField
11977	Return random value for EmailField with specified minimum and maximum lengths
11978	Return random value for DateField
11979	Return random value for DateTimeField
11980	Return random value for FloatField
11981	Return random value for IntegerField.
11982	Generates a random time value in the format specified by the field's input formats.
11983	Return random value for ChoiceField
11984	Return a random value for a MultipleChoiceField.
11985	Return one of the first ten items from the specified field's queryset.
11986	Encodes an OpenMath element into a string.
11987	Deploy the app to PYPI.
11988	Deploys a version tag to the Git repository.
11989	Sometimes return None if field could be blank.
11990	Evaluate an OpenMath symbol describing a global Python object
11991	Apply the setstate protocol to initialize `inst` from `state`.
11992	Convert a list of OM objects into an OM object
11993	Convert a tuple of OM objects into an OM object.
11994	Decodes a PackBit encoded data.
11995	Encodes data using PackBits encoding.
11996	Convert a float value to a fixed number of decimal places with accurate rounding.
11997	Format a given number with comma-separated thousands and custom precision/decimal places. Localise by overriding precision and thousand/decimal separators.
11998	Format a number into currency. Usage: accounting.formatMoney(number, symbol, precision, thousandsSep, decimalSep, format) defaults: (0, "$", 2, ",", ".", "%s%v")
11999	Import a blosc array into a numpy array.
12000	Export a numpy array to a blosc array.
12001	Add a workspace entry in user config file
12002	Remove workspace from config file.
12003	List all available workspaces.
12004	Get workspace infos from name.
Return None if workspace doesn't exists.
12005	Return True if workspace contains repository name.
12006	Synchronise workspace's repositories.
12007	Clone a repository using the specified URL and path.
12008	Check if the installed version of ndio is outdated and inform the user if an update is available.
12009	Converts an array to its voxel list.
12010	Converts a voxel list to an ndarray.
12011	Execute update subcommand based on provided arguments.
12012	Print repository update.
12013	Set Console handler.
12014	Execute command with os.popen and return output.
12015	Imports a PNG file into a numpy array.
12016	Export a numpy array to a png file.
12017	Exports a numpy array to a set of png files, with each Z-index 2D array as its own 2D file.
12018	Print workspace status.
12019	Print repository status.
12020	Gets the block-size for a given token at a given resolution. If no resolution is specified, returns the block-size at the minimum available resolution.
12021	Uploads data to a remote server using BLOSC compression.
12022	Import a TIFF file into a numpy array.
12023	Export a numpy array to a TIFF file.
12024	Load a multi-page TIFF file into a single variable in x,y,z format.
12025	Write config in configuration file. Data must be a dict.
12026	Clone repository from url.
12027	Get version from package resources.
12028	Mixing and matching positional args and keyword options.
12029	Outputs a personalized greeting message with an option to make it loud.
12030	Requests a list of next-available-IDs from the server.
12031	Merge a list of RAMON object IDs and optionally delete one of them
12032	Kick off the propagate function on the remote server.
12033	Lists a set of projects related to a dataset.
12034	Returns info regarding a particular dataset.
12035	Lists datasets in resources. Setting 'get_global_public' to 'True' will retrieve all public datasets in cloud. 'False' will get user's public datasets. Returns datasets in JSON format.
12036	Parse show subcommand.
12037	Execute show subcommand.
12038	Show specific workspace details including its path, number of repositories, and a list of repositories with their paths and SCM types.
12039	Displays details for all workspaces
12040	Get the base URL of the Remote.
12041	Guess the appropriate data type from file extension.
12042	Reads a file from disk and returns a numpy.ndarray based on the file format. If the format is not supported, it raises a NotImplementedError.
12043	Converts in_file to out_file, guessing datatype in the absence of in_fmt and out_fmt.
12044	Builds a graph using the graph-services endpoint.
12045	Compute invariants from an existing GraphML file using the remote grute graph services.
12046	Convert a graph from one GraphFormat to another.
12047	Converts a list of RAMON objects to a dictionary indexed by ID.
12048	Takes str or int, returns corresponding class type
12049	Deletes a channel given its name, project name, and dataset name. Returns `True` if channel deleted, `False` if not.
12050	Add a new dataset to the ingest with various parameters such as name, image size, voxel resolution, offset, time range, scaling levels, and scaling method.
12051	Generate ND JSON object from dataset, project, channel list, and metadata.
12052	Generate the dataset dictionary.
12053	Generate the project dictionary.
12054	Generate the project dictionary.
12055	Identify the image size using the data location and other parameters
12056	Try to post data to the server.
12057	Find path for given workspace and/or repository.
12058	Get a list of public tokens available on this server.
12059	Return the project info for a given token.
12060	Insert new metadata into the OCP metadata database.
12061	Get a response object for a given url.
12062	Returns a post request object taking in a url, token, and optional json or data.
12063	HTTP DELETE request object taking in a URL and user token.
12064	Import a HDF5 file into a numpy array.
12065	Export a numpy array to a HDF5 file.
12066	Adds a character matrix to DendroPy tree and infers gaps using Fitch's algorithm.
12067	Calls `map` to shift the recover execution to flat_map_nvim_io.
12068	Install our gettext and ngettext functions into Jinja2's environment.
12069	Updates the state in a thread-safe manner using a lock and handles exceptions.
12070	Calculate a percentage.
12071	Get stats info.
12072	Get slabs info.
12073	Add admin global context for compatibility with Django 1.7.
12074	Return the status of all servers, including cache statistics and whether slab information can be retrieved.
12075	Show the dashboard and display cache statistics if a memcache server is connected.
12076	Show server statistics.
12077	Show server slabs.
12078	Converts a byte value into a human-readable format.
12079	Find a config in our children to fill in variables in other children with its data.
12080	Add objects to the environment.
12081	Replace any config tokens in the file's path with values from the config.
12082	Get the path to the file relative to its parent.
12083	Read and return the contents of the file.
12084	Writes data to the file.
12085	Configure the Python logging module for the current file.
12086	Create the file. Raises an exception if the file already exists.
12087	Replace any config tokens with values from the config.
12088	Return the path to this directory.
12089	Remove the directory.
12090	Prepare the directory for use in an environment. Create the directory if the create flag is set. Recursively prepare child directories.
12091	Cleans up children and removes the directory if the cleanup flag is set.
12092	Find the path to something inside this directory.
12093	List the contents of the directory.
12094	Write to a file in the directory.
12095	Read a file from the directory.
12096	Add objects to the directory.
12097	Save the state to a file.
12098	Load a saved state file.
12099	Clean up the saved state.
12100	Loads plugins from the specified directory.
12101	Recursively merge values from a nested dictionary into another nested dictionary.
12102	Return a ConfigNode object representing a child node with the specified relative path.
12103	Returns a tuple of a reference to the last container in the path, and the last component in the key path.
12104	Get the value represented by this node.
12105	Update the configuration with new data. This can be passed either or both `data` and `options`.
12106	Load the config and defaults from files.
12107	Apply the config to a string.
12108	Build Twilio callback url for confirming message delivery status.
12109	Handle input from a socket, process it, and manage connections.
12110	Send output when the socket is write-ready.
12111	Send a message containing the RPC method call
12112	Reads from a network layer and processes all data read, supporting both blocking and non-blocking sockets. Returns the number of input bytes processed or EOS if input processing is done. Raises exceptions from the socket.
12113	Write data to the network layer. Can support both blocking and non-blocking sockets. Returns the number of output bytes sent, or EOS if output processing is done. Any exceptions raised by the socket are re-raised.
12114	Decorator that prevents callbacks from calling into link methods that are not reentrant.
12115	Return a map containing the settle modes as provided by the remote, skipping any default value.
12116	**Summary:**
Assign addresses, properties, and distribution modes for a link.
12117	Return the authorative source of the link.
12118	Return the authorative target of the link.
12119	Remote has closed the session used by this link.
12120	Create a new sender link.
12121	Create a link from a request for a sender.
12122	Create a new receiver link.
12123	Create a receiver link from a request.
12124	Remove link from set. Close session and free resources if no more links
12125	Peer has closed its end of the session.
12126	Handle an endpoint state change event.
12127	Modifies inline patterns.
12128	Peer has closed its end of the link.
12129	Protocol error occurred.
12130	Parse the hostname and port out of the server_address.
12131	Create a TCP connection to the server
12132	Create a TCP listening socket for a server.
12133	Determine which connections need processing, returning triples of lists for reading, writing, and waiting on timers.
12134	Decorator that prevents callbacks from calling into methods that are not reentrant
12135	Process connection state and handle events.
12136	Get a buffer of data that needs to be written to the network.
12137	Create a sender link with the specified source and target addresses.
12138	Rejects the SenderLink and destroys the handle.
12139	Create a new receiver link.
12140	Cleans up after connection failure detected.
12141	Logs a message indicating that the connection is up and then calls the `connection_active` method on the handler if it is not `None`, while holding a lock on the callback lock.
12142	The remote has closed its end of the endpoint.
12143	Endpoint state machine failed due to protocol error.
12144	Decorator for handling Twilio requests. It ensures the request is from Twilio, exempt from CSRF, and allows returning TwiML or `twilio.Verb` objects.
12145	Constructs a string for defining colors in Adobe format based on the color type and name.
12146	Find font files with a `.ttf` extension in a specified search path and store their paths and names in a dictionary.
12147	May be used to compress PDF files. Code is more readable for testing and inspection if not compressed. Requires a boolean.
12148	Adds an object to the PDF document with an optional flag for overwriting existing objects.
12149	Stores the pdf code in a buffer. If it is page related, provide the page object.
12150	Creates a PDF text stream sandwich.
12151	Add a page to the document and retry adding a large block of text.
12152	Sets the color scheme for drawing, filling, and text in a PDF.
12153	Internal method to set the initial default font. Change the font using set_font method.
12154	Add a PDF page. Generate and add a default page if no page is provided.
12155	Convenience method for changing the font size if it's different from the current size.
12156	Writes text within the defined page boundaries, maintaining order and handling newlines.
12157	Starts over at the new line. If a number is specified, it will leave that many new lines.
12158	Adds a pie chart to a PDF document.
12159	Called by the PDFLite object to prompt creating the page objects.
12160	Returns a list of page indices that have orientation changes.
12161	Called by the PDFLite object to prompt the creation of font objects.
12162	Creates reference images that can be drawn throughout the document.
12163	Functions prompts the creation of image objects and outputs the necessary PDF commands for image definition.
12164	Adjust the current transformation state of the current graphics state matrix. Not recommended for the faint of heart.
12165	For a pair of coordinates (x, y) in user space, return their absolute position in the default user space.
12166	Style should be a string containing the letters 'B' for bold, 'U' for underline, or 'I' for italic, or should be '', for no style. If the family is 'symbol' or 'zapfdingbats', no styling will be applied.
12167	Rotates a point relative to the mesh origin by the angle specified in the angle property. Uses the angle formed between the segment linking the point of interest to the origin and the parallel intersecting the origin.
12168	Sets or updates the properties of the object using the provided values, without overwriting existing values for unprovided attributes.
12169	```python
"""
Sets the default viewing options for the display mode, including zoom and layout.
"""
```
12170	Prompt the objects to output PDF code and save to file.
12171	Write the standard first line in a PDF.
12172	Generates the "Pages" object for a PDF document, which includes references to individual page objects and sets the default page size.
12173	Creates PDF reference to resource objects.
12174	Create a PDF Information object and add it to the document session.
12175	Add catalog object with specified properties.
12176	Final Trailer calculations, and end-of-file reference.
12177	Floyd's Cycle Detector.
12178	Cycle detection using a naive approach.
12179	Gosper's cycle detector.
12180	Brent's Cycle Detector. Identifies cycles in sequences or finite state machines, yielding values until a cycle is detected or an exception occurs.
12181	Tests whether the line can accommodate the given length provided at position x.
12182	Test to see if the page has enough space for the given text height.
12183	Comparison for x coordinate
12184	Comparison for y coordinate
12185	Create a copy, and return it.
12186	Mutable x addition. Defaults to set delta value.
12187	Mutable y addition.
12188	Draws and compiles a table.
12189	Creates a new label and returns the response.
12190	Get all current labels.
12191	Get labels by name and return a list of matching labels. An empty list is returned if no matches are found.
12192	Update a Label
12193	Delete the specified label.
12194	Create a new tag
12195	Get all current tags. Returns a list of dict. Raises ServerException if there is an error from Logentries.
12196	Get tags by a label's `sn` key. Return a list of matching tags, or an empty list if no matches are found. Raises `ServerException` on error.
12197	Create a hook
12198	Get all current hooks.
12199	Update a hook with specified details.
12200	Create a new alert.
12201	Get alerts that match the alert type and args.
12202	Update an alert
12203	Initialize this Sphinx extension.
12204	Retrieve the location of the themes directory from the location of this package
12205	A wrapper for posting data to a Logentries API endpoint. It constructs a request payload with necessary parameters, sends a POST request, and returns the response in JSON format. If the request is not successful, it raises a ServerException with the error details.
12206	Get all log sets
12207	Get a specific log or log set
12208	Find a slider attacker
12209	The approximate transit duration for the general case of an eccentric orbit.
12210	Update the transit keyword arguments with validation and model updates.
12211	Computes the light curve model
12212	Bins the light curve model to the provided time array
12213	Frees the memory used by all of the dynamically allocated C arrays.
12214	Reads data from the socket and writes it to a buffer, raising an error if the connection times out or the read fails.
12215	Generator that reads a line of data from the server. It first attempts to read from the internal buffer. If there is not enough data to read a line it then requests more data from the server and adds it to the buffer. This process repeats until a line of data can be read from the internal buffer. Yields: A line of data when it becomes available.
12216	Generator that reads a block of data from the server. It first attempts to read from the internal buffer. If there is not enough data in the internal buffer it then requests more data from the server and adds it to the buffer.
12217	Reads a command response status and returns the status code and message. Raises errors for protocol violations and specific status code ranges.
12218	Dispatcher for the info generators. Determines which \_\_info\_\*_gen() should be used based on the supplied parameters.
12219	Returns the complete content of an info response.
12220	Calls a command on the server, handles authentication if necessary, and returns the status code and message.
12221	Determines the capabilities of the server.Returns a list of capabilities supported by the server. The VERSION capability is the first capability in the list.
12222	Instructs a mode-switching server to switch modes. Returns a Boolean value indicating whether posting is allowed or not.
12223	Tells the server to close the connection. After the server acknowledges the request to quit the connection is closed both at the server and client. Only useful for graceful shutdown. If you are in a generator use close() instead. Once this method has been called, no other methods of the NNTPClient object should be called.
12224	Returns the UTC time according to the server as a datetime object. Raises an exception if the timestamp can't be parsed.
12225	Provides a short summary of commands understood by the usenet server.
12226	Generator for the NEWGROUPS command. Generates a list of newsgroups created on the server since the specified timestamp.
12227	Generator for the NEWNEWS command.
12228	Retrieves a list of message-ids for articles created since the specified timestamp for newsgroups with names that match the given pattern.
12229	Generates a list of active newsgroups that match the specified pattern. If no pattern is specified then all active groups are generated.
12230	Generator for the LIST ACTIVE.TIMES command.
12231	Generator for the LIST NEWSGROUPS command. Generates a list of newsgroups including the name and a short description.
12232	Generate a generator for the LIST OVERVIEW.FMT command.
12233	Output a generator for the LIST EXTENSIONS command.
12234	Generate an element in the list returned by the LIST command.
12235	LIST command. A wrapper for all of the other list commands. The output depends on the keyword specified. Raises NotImplementedError for unsupported keywords.
12236	Handle the GROUP command and parse the response to extract the total number of articles, first article number, last article number, and the current group.
12237	NEXT command.
12238	Fetch and parse an article from an NNTP server.
12239	Handle the HEAD command and return the parsed headers.
12240	BODY command. Fetches the body of a message.
12241	Perform an XGTITLE command.
12242	XHDR command.
12243	Perform an XZHDR command.
12244	Generate a list of fields as given by the overview database for each available article in the specified range.
12245	Generator for the XPAT command.
12246	Returns a list of items generated by the XPAT command.
12247	XFEATURE COMPRESS GZIP command.
12248	POST command.

Sends a POST request with headers and body to the server. If the server replies with the correct code, the function sends the headers and body, handling any illegal characters that may be present. If no illegal characters are detected, it checks the server's status code. If the status code is the correct one, the function returns the message-id if it's present, or True otherwise. If the server does not reply with the correct code or if illegal characters are detected, the function raises an appropriate error.
12249	Parse timezone to offset in seconds.
12250	Parse a datetime string to a Unix timestamp using fast custom parsing for common formats or the slow dateutil parser for others.
12251	Parse a datetime to a datetime object. Uses fast custom parsing for common datetime formats or the slow dateutil parser for other formats. This is a trade-off between ease of use and speed, and is useful for fast parsing of timestamp strings whose format may vary or be unknown prior to parsing.
12252	Send a POST request to the specified URL with the provided headers and keyword arguments. Raise a `ServerException` if the response status is not OK. Return the response in JSON format.
12253	Send a DELETE request and raise an exception if the response is not OK.
12254	Convenience method for sending a GET request.
12255	List all scheduled queries.
12256	List all tags for the account.
12257	Get alert by name or id.
12258	Create an inactivity alert.
12259	Delete the specified InactivityAlert.
12260	Create the scheduled query.
12261	Create an anomaly alert. This call makes 2 requests, one to create a "scheduled_query", and another to create the alert.
12262	Delete a specified anomaly alert tag and its scheduled query by making three API requests: getting the associated scheduled query ID, deleting the alert, and deleting the scheduled query. Raises a ServerException if there's an error from Logentries.
12263	Unparse a range argument to be used by an NNTP command.
12264	Parse a newsgroup info line to python types.
12265	Parse a header line.
12266	Parse a dictionary of headers to a string that can be used in an NNTP POST.
12267	Handles the POST request sent by Boundary Url Action.
12268	Run the tests that are loaded by each of the strings provided.
12269	Returns a docstring from a list of defaults.
12270	Decorator to append default kwargs to a function.
12271	**Summary**:
Add the default values to the class docstring
12272	Set the value and invoke hooks for type-checking and bounds-checking.
12273	Checks if the `value` matches the expected data type (`dtype`). If they don't match and neither is `None`, a `TypeError` is raised. If `dtype` is `None`, the method returns without doing anything.
12274	Return the current value. If the value is not cached, then it invokes the `loader` function to compute the value and caches the computed value.
12275	Hook for type-checking during assignment, allowing numpy arrays and lists of size 1, and raising TypeError if the value cannot be cast to a scalar.
12276	Return the symmetric error
12277	Set parameter error estimate
12278	Set the value, bounds, free, and errors based on the corresponding kwargs. Invokes hooks for type-checking and bounds-checking.
12279	Imports metrics and updates them using API calls
12280	Extract required fields from an array
12281	Apply the criteria to filter out metrics based on a given expression.
12282	Make a call to the meter via JSON RPC
12283	Parse an expression terminal from the given text using alternation.
12284	Parse and return a token representing an operator from the given text.
12285	Performs addition operation on the input text and returns the result with the token type set to `op_add`.
12286	Initialize properties by iterating through a list, extracting required and derived properties, and setting up book-keeping and default loaders.
12287	Return a list of Parameter objects. If `pnames` is provided, return the Parameter objects with those names. If `pnames` is None, return all the Parameter objects.
12288	Return an array with the parameter values.
12289	Return an array with the parameter errors
12290	Reset the value of all Derived properties to None. This is called by setp (and by extension __setattr__).
12291	Validates that the given value is an HTTP method implemented by the instance before assigning it.
12292	Gets the configuration stored in environment variables.
12293	Encodes URL parameters.
12294	HTTP Get Request
12295	HTTP Delete Request
12296	HTTP Post Request
12297	HTTP Put Request
12298	Make an API call to get the metric definition.
12299	Check scene name and whether remote file exists. Raises WrongSceneNameError if the scene name is wrong.
12300	Returns the ID and list of stations for a given satellite type.
12301	Gets the filesize of a remote file
12302	Download remote .tar.bz file.
12303	Validate the "bands" parameter to ensure it is a list containing valid band values.
12304	Establish a connection to the Earth Exploration System (EES) without using a proxy and handle authentication.
12305	Create a callable to check if names start with a specified prefix.
12306	Return a datetime.tzinfo implementation for the given timezone.
12307	Correct the timezone information on the given datetime.
12308	Join an iterable by a delimiter, replacing instances of delimiter in items with escape + delimiter.
12309	Returns a list of the positions in the text where all new lines occur.
12310	Point to a position in source code and format it.
12311	Send output in textual format
12312	Filter out metrics, control, and plugins based on the criteria
12313	Initialize based on a list of fortune files
12314	Initialize based on a list of fortune files with set chances.
12315	Virtue discovers and runs tests found in the given objects, updating the context based on the test results.
12316	Parse a rule in a grammar, consisting of an identifier, an equals sign, an expression, and a semicolon.
12317	special_handling = "?" , identifier , "?" ;
12318	The parse tree generated by the source.
12319	The AST rules.
12320	The AST comments.
12321	The directives parsed from the comments.
12322	The Python source code of the parser generated from the input source.
12323	Returns the python source code for the generated parser.
12324	Reads the directives and generates source code for custom imports.
12325	Builds the python source code for the Parser TokenType enum.
12326	Builds the class definition of the parser.
12327	Gets the entry_point value for the parser.
12328	Generates the source code for a rule.
12329	Gets the variable part of the source code for a rule.
12330	Determines the transformation to be applied to a rule and returns the corresponding source code text.
12331	Converts an expression to an Abstract Syntax Tree Node.
12332	Converts a parse tree node into an abstract syntax tree node.
12333	Flattens a list of optree operands based on a predicate. This is used to convert nested structures like concatenation([x, concatenation[y, ...]]) (or alternation) into a flat list concatenation([x, y, ...]).
12334	Grouping groups are implied by optrees, this function hoists grouping group expressions up to their parent node.
12335	Converts an abstract syntax tree to python source code.
12336	Convert an abstract syntax operator tree to python source code.
12337	Converts an AST terminal to Python source code.
12338	Converts an AST option group to python source code.
12339	Converts an AST repetition group to Python source code.
12340	Convert an AST special handling to python source code.
12341	Convert an AST alternate op to python source code.
12342	Convert an AST concatenate op to python source code.
12343	Convert an AST exclude op to python source code.
12344	Converts an AST multiply op to python source code
12345	Converts an AST repeat operation to Python source code.
12346	Finds all directives with a certain name, or that passes a predicate.
12347	Return whether a child node should be flattened into a parent node based on their types.
12348	```plaintext
Parses directives from a comment, yielding directive definitions after stripping the leading '!' character.
```
12349	Handle the results of the API call.
12350	Get a new id if the provided one is None.
12351	Remove a global hotkey from the given control for the specified key.
12352	Configure handling of command line arguments.
12353	Configure logging based on command line options.
12354	Validates command line arguments passed to the CLI. Sets error messages and returns False if either the email or API token is not provided.
12355	Convert a list of nodes in infix order to a list of nodes in postfix order.
12356	Convert a list of nodes in postfix order to an Optree.
12357	Converts the first operator and its operands into an `OptreeNode` and returns a new list with the operator and operands replaced by the `OptreeNode`.
12358	Method to add specific arguments for a CLI command.
12359	Read the file and parse JSON into dictionary
12360	Lookup the metric definition from the definitions from the API call
12361	Get the maximum length of each column in the field table.
12362	Get the maximum length of each column in the metrics.
12363	Escape underscores in the metrics names to ensure correct markdown formatting.
12364	Sends the field definitions to standard out.
12365	Sends the markdown of the metric definitions to standard out
12366	Look up each of the metrics and then output in Markdown
12367	Attempt to parse source code.
12368	Keeps track of the furthest point in the source code the parser has reached to this point.
12369	Add specific command line arguments for this command
12370	Attempt to parse the passed in string into a valid datetime. If we get a parse error then assume the string is an epoch time and convert to a datetime.
12371	Output results in CSV format
12372	Output results in structured JSON format.
12373	Output raw JSON format
12374	Output results in JSON format
12375	The default predicate used in Node.trimmed.
12376	Pretting print a parse tree.
12377	Returns a partial of `_get_repetition` that accepts only a text argument.
12378	Checks the beginning of ``text`` for a ``value``. If found, returns a ``ParseNode`` for the terminal. Raises ``DeadEnd`` if not found.
12379	Tries to pull text with extractor repeatedly, based on specified bounds and ignore_whitespace. Returns a ParseNode with type repetition if the number of children extracted is >= lbound, otherwise raises DeadEnd.
12380	Returns extractor's result if exclusion does not match. If exclusion raises DeadEnd, then the result of extractor(text) is returned. Otherwise, if exclusion does not raise DeadEnd it means it did match, and we then raise DeadEnd.
12381	Returns the number of characters at the beginning of text that are whitespace.
12382	Call an extractor on some text. Treats a string extractor as a shorthand for `_get_terminal`.
12383	Gets the position of the text the ParseNode processed. If the ParseNode does not have its own position, it looks to its first child for its position. Value Nodes must have their own position.
12384	Returns True if this node has no children, or if all of its children are ParseNode instances and are empty.
12385	Add ignored text to the node. This will add the length of the ignored text to the node's consumed property.
12386	Returns True if node_type is equal to value. If value is a tuple, it checks if node_type matches any member of the tuple and returns True if a match is found.
12387	Flattens nodes by hoisting children up to ancestor nodes. A node is hoisted if pred(node) returns True.
12388	Trims a ParseTree based on a predicate function.
12389	Returns a new ParseNode whose type is this node's type, and whose children are all the children from this node and the other node, excluding any children with a length of 0.
12390	Returns a new node with the same contents as self, but with a new node_type.
12391	Converts the node into a value node with concatenated string children, optionally including ignored values.
12392	Return the current position of the cursor.
12393	Returns the deepest character readed's position.
12394	Moves the cursor to the next character and updates the maximum position if necessary.
12395	Sets cursor as beginning of next line.
12396	Sets cursor as end of previous line
12397	Usefull string to compute error message.
12398	Increment the cursor to the next character.
12399	Save current position.
12400	Restore context by rolling back to the previous saved position.
12401	Return a Fmt representation of Translator for pretty-printing
12402	Set the name of an object and update internal names accordingly.
12403	Count the number of variables defined in this scope.
12404	Count the number of functions defined within this scope.
12405	Update internal counters.
12406	Update the Set with values of another Set
12407	Try to create a new set that is the union of two sets.
12408	In-place set update with common values of another set
12409	Create a new Set produce by the intersection of 2 Set
12410	Remove values common with another Set
12411	Create a new Set by subtracting another Set
12412	Remove common values and update specific values from another Set
12413	Create a new Scope with values present in only one Set
12414	Add it to the Set
12415	Remove item from set but raise KeyError if not found.
12416	Remove it only if present
12417	Retrieve all values
12418	Retrieve the first Signature ordered by mangling descendant
12419	Retrieve the last Signature ordered by mangling descendant
12420	Gets a signature instance by its internal_name. Returns default if key not found.
12421	Retrieve a Set of all signature by symbol name.
12422	Retrieve the unique Signature of a symbol. Fail if the Signature is not unique.
12423	```markdown
For now, polymorphic return type are handle by symbol artefact. Possible multi-polymorphic but with different constraint attached!
```
12424	Call injector if available, otherwise forward to parent scope or raise an error if no translator injector is defined.
12425	Normalize an AST nodes. all builtins containers are replace by referencable subclasses
12426	Allow to completely mutate the node into any subclasses of Node
12427	Output:
Yield the data in reverse order.
12428	Checks if the given hit's charge is within the specified limits.
12429	Compute a signature using resolution, replacing components with resolved names if possible.
12430	Process the signature and find definition for type
12431	Use `self.resolution` to substitute `type_name`, allowing instantiation of polymorphic types like `?1`, `?toto`.
12432	Updates the resolution dictionary with the reference value when no resolution exists for the given type name.
12433	Deletes the specified file from the local filesystem.
12434	Deletes the specified file from the given S3 bucket.
12435	Deletes the specified file, either locally or from S3, depending on the file's storage type.
12436	```plaintext
Saves the specified file to the local file system.
```
12437	Saves the specified file to the configured S3 bucket.
12438	Saves the specified file to either S3 or the local filesystem, depending on the currently enabled storage type.
12439	Finds files by listing S3 bucket's contents by prefix.
12440	Build an enum statement.
12441	Decorator to verify arguments and return types.
12442	Add a mapping with key thing_name for callobject in chainmap with namespace handling.
12443	Attach a method to a class.
12444	Attach a method to a parsing class and register it as a parser hook. The method is registered with its name unless hookname is provided.
12445	Attach a method to a parsing class and register it as a parser rule. The method is registered with its name unless rulename is provided.
12446	Attach a class to a parsing class and register it as a parser directive. The class is registered with its name unless directname is provided.
12447	Attach a class to a parsing decorator and register it to the global decorator list. The class is registered with its name unless directname is provided.
12448	Allow to alias a node to another name. Useful to bind a node to _ as return of Rule. It's also the default behaviour of ':>'
12449	Return True if the parser can consume an EOL byte sequence.
12450	Push context variable to store rule nodes.
12451	Pop context variable that store rule nodes
12452	Return the text value of the node.
12453	Push a new Stream into the parser. All subsequent called functions will parse this new stream, until the 'popStream' function is called.
12454	Save the current index under the given name.
12455	Extract the string between saved and current index.
12456	Merge internal rules set with the given rules
12457	Merge internal hooks set with the given hooks
12458	Merge internal directives set with the given directives. For working directives, attach it only in the dsl.Parser class.
12459	Evaluate a rule by name.
12460	Evaluate the hook by its name.
12461	Same as readText but doesn't consume the stream.
12462	Read one byte in stream.
12463	Consume the head byte `c` from the stream, increment the current index, and return True if they match; otherwise, return False and restore the context.
12464	Consume all the stream. Same as EOF in BNF.
12465	Consume whitespace characters.
12466	Set the data type of the hits.
12467	Set the data type of the cluster.
12468	Checks if the important data fields in the hit array have the same data type as the hit clustered array and that the field names are correct.
12469	Creates a tree.Rule Name
12470	Attaches a parser tree to the dict of rules.
12471	Assigns the rule name and parser tree, then returns True
12472	Create a tree.Seq by appending a new sequence to the existing one
12473	Create a tree. Alt
12474	Add a read_range primitive
12475	Add a repeater to the previous sequence
12476	Create a tree.Capture
12477	Create a tree.Bind
12478	Create a tree.Hook
12479	Parse a int in parameter list.
12480	Parse a str in parameter list
12481	Parse a char in parameter list
12482	Parse a node name in parameter list
12483	Parse a hook name
12484	Parse a hook parameter
12485	Parse the DSL and provide a dictionaries of all resulting rules. Call by the MetaGrammar class.
12486	Consume comments and whitespace characters.
12487	Adds a state to the register with a unique identifier (uid).
12488	Provide a '.dot' representation of all State in the register.
12489	Write a '.dot' file.
12490	Write a '.png' file.
12491	Provides a useful representation of the register
12492	Manage the transition of the state based on the new state provided.
12493	Reset the living state by deleting instances where necessary and initializing all.
12494	Infer type on block by type-checking each sub-element.
12495	Infer type on the subexpr
12496	Infer type from an ID! Check if the ID is declared in the scope and update the type if found, otherwise notify an error.
12497	Infer type from an LITERAL! Type of literal depends on the language. Adopt a basic convention and add EvalCtx from the literal and its type to the scope_node.
12498	Dumps tag, rule, id, and value cache for debugging.
12499	Generates code for a rule.
12500	Create the appropriate scope exiting statement. Handles different cases such as being inside an optional block, a try block, or a loop, and returns the corresponding AST statement (Pass, Raise, Break, or Return).
12501	Normalize a test expression into a statements list. Statements list are returned as-is. Expression is packaged as: if not expr: return False
12502	Generates python code calling the function.
12503	Generates python code calling the function and returning True
12504	Generate Python code calling a hook using `self.evalHook('hookname', self.ruleNodes[-1])`.
12505	Generates Python code calling a rule.
12506	Generates python code to capture text consumed by a clause.
12507	Generates Python code for a scope.
12508	Generates python code for alternatives.
12509	Generates python code for clauses. Continuous clauses which can be inlined are combined with and clause and clause.
12510	Generates python code for an optional clause
12511	Generates python code for a clause repeated 0 or more times.
12512	Generates python code for a clause repeated 1 or more times.
12513	cat two strings but handle \n for tabulation
12514	Recursively set indentation for items in a list.
12515	Recursively converts a list to a string, applying indentation and handling different content types.
12516	Print nodes.
12517	Function that connects a sequence of MatchExpr, handling alternatives recursively and updating state transitions accordingly.
12518	Create a state for all instances of MatchExpr in the given list and connect each others.
12519	Build a bottom-up tree automata for a block of matching statements.
12520	Test if a node set with setint or setstr equals a certain value.
12521	Create a Grammar instance from a string.
12522	Create a Grammar from a file
12523	Parse source using the grammar.
12524	Parse a file using the grammar.
12525	Basically copy one node to another. usefull to transmit a node from a terminal rule as result of the current rule.
12526	Set a node to a value captured from another node
12527	Assigns the value of the subnode to the destination variable
12528	Default serializer for json.
12529	Retrieve a generator of deposits and the total count of deposits.
12530	Dump deposition object as dictionary.
12531	Retrieve bibliographic document IDs (bibrecids) for Invenio 1 records modified on or after a specified date.
12532	Get BibDocs for Invenio 2.
12533	Import BibDocFile.
12534	Dumps all BibDoc metadata.
12535	Get the number of documents and their IDs for checking.
12536	Checks if a BibDoc with the given ID exists and lists its files. If the check fails, it outputs an error message in red.
12537	Dump the oauth2server tokens.
12538	Get UserEXT objects and their count
12539	Dump the UserEXt objects as a list of dictionaries.
12540	Get communities.
12541	Fetch record IDs from Invenio 1 that have been modified since a specified date.
12542	Get record ids for Invenio 2.
12543	Retrieves and returns all restrictions for a given collection, including the related fire roles and users.
12544	Get record revisions from the database based on a record ID and a date. The function fetches revisions of a record, ordered by the date they were made, starting from the specified date. It uses SQL to query the `hstRECORD` table.
12545	Get all collections the record belong to.
12546	Dump JSON of record.
12547	Get recids matching query and with changes.
12548	Dump MARCXML and JSON representation of a record
12549	Dump the remote accounts as a list of dictionaries.
12550	Inserts the JSON data into the model and saves it to the database.
12551	Collect entry points.
12552	Initialize app context for Invenio 2.x.
12553	Cache for heavy function calls.
12554	Import `run_sql` from `invenio.dbquery` or `invenio.legacy.dbquery` as available.
12555	Get roles connected to an action.
12556	Get action definitions to dump.
12557	Dump the remote tokens as a list of dictionaries.
12558	Load the oauth2server token from data dump.
12559	Migrate a record from a migration dump.
12560	Import config var import path or use default value.
12561	Dump the oauth2server Client.
12562	Get user accounts Invenio 1.
12563	Get user accounts from Invenio 2.
12564	Serialize a user object to a dictionary.
12565	Load the raw JSON dump of the Deposition. Uses Record API in order to bypass all Deposit-specific initialization, which are to be done after the final stage of deposit migration.
12566	Create the deposit record metadata and persistent identifier.
12567	Load a single record into the database.
12568	Load records migration dump.
12569	Inspect records in a migration dump.
12570	Load simple objects from JSON source files using a shared task.
12571	Load communities.
12572	Load users.
12573	Load deposit from the specified source files. If a deposit ID is provided, only load the deposit with that ID.
12574	Return profiler statistics.
12575	Run as sample test server.
12576	Dump current profiler statistics into a file.
12577	Clear profiler statistics.
12578	Stop the profiler.
12579	Check if the profiler is running.
12580	Disable timestamp update per method.
12581	Load user from data dump.
12582	Calculate image translations in parallel.
12583	Stitch regular spaced images and return the stitched image and registered offset (y, x).
12584	Adds a dimension with ones to array
12585	Create a record based on the provided dump.
12586	Create a new record from dump and update record revisions.
12587	Update an existing record.
12588	Creates persistent identifiers.
12589	Deletes a record and its persistent identifiers.
12590	This method creates files for a record, using a default bucket if none exists, and appends file metadata to the record. It also records the bucket and file relationship in the database.
12591	Create a single file with all versions.
12592	Delete the buckets associated with the files in the given record. Iterate through the files, collect the unique bucket IDs, and mark the corresponding bucket objects as deleted.
12593	Removes persistent identifiers that do not exist from the list.
12594	Prepare data by preparing revisions from the data. If latest_only is true, only the first record is considered. Otherwise, all records are considered.
12595	Get files from data dump.
12596	Prepare persistent identifiers.
12597	Check if record is deleted.
12598	Load community from data dump.
12599	Load community featuring from data dump.
12600	Dump data from Invenio legacy.
12601	Query and check data in Invenio legacy.
12602	Deletes resources of this widget that require manual cleanup. Currently removes all actions, event handlers, and the background. Note that this method is currently experimental, as it seems to have a memory leak.
12603	Simple vector helper function returning the length of a vector.
12604	Normalize the given vector.
12605	Transforms the given texture coordinates using the internal texture coordinates.
12606	Helper method ensuring per-entity bone data has been properly initialized. Should be called at the start of every method accessing per-entity data.
12607	Sets the length of a bone on a given entity.
12608	Sets the parent of this bone for all entities. Registers this bone as a child of its parent.
12609	Returns the point this bone pivots around on the given entity. This method works recursively by calling its parent and then adding its own offset. The resulting coordinate is relative to the entity, not the world.
12610	Initializes animation state in a dictionary, setting keyframe, last_tick, jumptype, and phase.
12611	Sets the state required for this actor. Translates the matrix to the position of the actor.
12612	Resets the state required for this actor to the default state. Currently resets the matrix to its previous translation.
12613	Binds and enables the texture of the material of the region.
12614	Resets the state required for this actor to the default state. Specifically, it disables the target of the texture of the material, even though the material may still be bound.
12615	Ensures that the given ``obj`` has been initialized to be used with this model. If the object is found to not be initialized, it will be initialized.
12616	Redraws the model of the given object. Note that currently this method probably won't change any data since all movement and animation is done through pyglet groups.
12617	Actually draws the model of the given object to the render target.
12618	Sets the model this actor should use when drawing This method also automatically initializes the new model and removes the old, if any
12619	Write the collection of reports to the given path.
12620	Converts test reports into an XML file with the specified details.
12621	Adds a menu to the list of menus. If there is no menu selected currently, this menu will automatically be made active.
12622	Re-draws the text by calculating its position.
12623	Re-draws the label by calculating its position, ensuring it is centered.
12624	Draws the submenu and its background, leaving OpenGL state set to 2D drawing.
12625	Deletes a widget by name, handling memory leaks.
12626	Re-calculates the position of the Label.
12627	Registers the motion and drag handlers.
12628	Registers up and down handlers and schedules a function to redraw the window at 60 FPS.
12629	Adds the main label of the dialog.
12630	Adds an OK button to allow the user to exit the dialog.
12631	Helper method that exits the dialog. This method will cause the previously active submenu to activate.
12632	This method adds a confirm button to the user interface for confirming an action. The button is labeled with the provided `label_confirm` string and is positioned slightly below the main label and to the left of the cancel button. Clicking the button triggers the "confirm" action and exits the dialog.
12633	Adds a cancel button to let the user cancel an action, positioned below the main label and to the right of the confirm button. The button's label can be customized.
12634	Updates the progressbar by re-calculating the label. It is not required to manually call this method since setting any of the properties of this class will automatically trigger a re-calculation.
12635	Renders the world in 3d-mode. If you want to render custom terrain, you may override this method, but be sure to call the original method to ensure actors are rendered correctly.
12636	Renders the world.
12637	Start a new step and return a context manager which allows you to report an error.
12638	Returns whether or not the resource with the given name and extension exists.
12639	Adds a new texture category with the given name. If the category already exists, it will be overridden.
12640	Returns a texture to be used as a placeholder for missing textures. If the texture cannot be found, it creates a simple in-memory pattern.
12641	Gets the model object by the given name. If it was loaded previously, a cached version will be returned. If it was not loaded, it will be loaded and inserted into the cache.
12642	Loads the model of the given name and inserts it into the cache.
12643	Get the model data associated with the given name. If it was loaded, a cached copy will be returned. If it was not loaded, it will be loaded and cached.
12644	Loads the model data of the given name. The model file must always be a .json file.
12645	Adds a widget to this container. Prevents adding the container to itself.
12646	Draws the submenu and its background.
12647	Redraws the background and any child widgets.
12648	Redraws the background and contents, including scrollbar. Adjusts scrollbar position and size based on movement and content height. Automatically called on movement of the slider.
12649	Checks if the mouse position is within the bounds of a widget based on its position and size.
12650	Return the percentage that a slider is "filled" based on its current value compared to its minimum and maximum values. This property is read-only.
12651	Adds a new layer to the stack, optionally at the specified z-value.
12652	Map a buffer region using this attribute as an accessor. Return a contiguous array of component data elements based on the specified start and count parameters, handling both interleaved and non-interleaved data.
12653	Draw vertices in the domain.

If `vertex_list` is not specified, all vertices in the domain are drawn.

If `vertex_list` specifies a `VertexList`, only primitives in that list will be drawn.
12654	Adds a callback to the specified action.
12655	Calls all callbacks registered for a given action.
12656	Registers a name to the registry with an optional force ID.
12657	Adds the given layer at the given Z Index. If `z_index` is not given, the Z Index specified by the layer will be used.
12658	Draws all layers of a LayeredWidget.
12659	Deletes all layers within this LayeredWidget before deleting itself. Recommended to call if you are removing the widget, but not yet exiting the interpreter.
12660	Property to be used for setting and getting the border of the layer. Setting this property causes an immediate redraw.
12661	Property to be used for setting and getting the offset of the layer. Returns a WatchingList that triggers a redraw when the offset changes.
12662	Returns the size of the layer, with the border size already subtracted.
12663	Reads a mesh saved in the HDF5 format.
12664	Connectivity builder using Numba for speed boost.
12665	Sets the fields.
12666	Add the fields into the list of fields.
12667	Checks element definitions.
12668	Returns the dimension of the embedded space of each element.
12669	Returns a dataframe containing volume and centroids of all the elements.
12670	Returns the internal angles of all elements and the associated statistics
12671	Compute the aspect ratio of all elements in a dataset by calculating the lengths of their edges and then determining the maximum and minimum lengths.
12672	Returns mesh quality and geometric stats.
12673	Makes a node set from an element set.
12674	Converts a node set to surface by creating a dummy node, calculating element surfaces, and updating the elements with the calculated surfaces.
12675	Creates elements sets corresponding to a surface.
12676	Returns fields metadata as a dataframe.
12677	Returns metadata as a dataframe.
12678	Checks if the required directories exist and creates them if needed.
12679	Runs the post-proc script.
12680	Makes the mesh using gmsh.
12681	Reads an history output report.
12682	Reads a field output report and extracts metadata and data, then creates an instance of a field class.
12683	Converts a list-like to string with given line width.
12684	Returns an Abaqus INP formatted string for a given linear equation.
12685	Auto-generated summary based on the provided code:

Returns a set as a string with unsorted option.
12686	Parse the API response and raise appropriate errors if raise\_errors was set to True.
12687	Builds the URL for the specified method and arguments and returns the response as a dictionary.
12688	Writes a xy_report based on xy data.
12689	Writes a field report and rewrites it in a cleaner format.
12690	List components that are available on your machine
12691	Return an error message for use in exceptions thrown by subclasses.
12692	Return True if the last exception was thrown by a Descriptor instance
12693	This method is designed to set Series data by checking if the 'data' attribute is present and whether the '_x' and '_y' attributes are not missing or do not have points. If these conditions are met, it creates 'X' and 'Y' variables, contributes them to the class, and sets the 'data' attribute to a zip of their points. If any of these conditions are not met, it raises exceptions indicating a missing axis or data.
12694	Returns the axis mode for the current series if all elements in the series have time variable, None otherwise.
12695	Sets the graph plotting options, updating the axis modes if they exist.
12696	Turn a function list element into a class object.
12697	Cycles through notifications with latest results from data feeds.
12698	Convert value to a numeric value or raise a ValueError if that isn't possible.
12699	Convert str\_value to an int or a float, depending on the numeric value represented by str\_value.
12700	Renders a graph using specified options into the template.
12701	Try really really hard to get a Unicode copy of a string.
12702	Get a clean text representation of presumed HTML by converting all HTML-escaped characters to their unicode, stripping unwanted attributes, removing script tags, and cleaning up the HTML structure.
12703	Check if the given MIME type matches the ones specified in the `include_mime_types` list
12704	extract a lower - case no - slashes domain name from a raw string that might be a URL
12705	Return a list of strings by splitting the domain on '.' and successively cutting off the left-most portion
12706	Get a Murmur hash and a normalized token.
12707	Collects all of the words to be indexed from a stream item. It scans `si` for all of the configured tagger IDs and collects all of the token values, returning a `Counter` of them.
12708	```python
Records index records for a single document based on the parameters provided in the constructor. This function processes the clean_visible body of the stream item, counts tokens, and writes the indexed data to various tables depending on the specified options.
```
12709	Get strings that correspond to some hash. No string will correspond to :data:`DOCUMENT_HASH_KEY`; use :data:`DOCUMENT_HASH_KEY_REPLACEMENT` instead.
12710	Get document frequencies for a list of hashes.
12711	Get stream IDs for a single hash. This yields strings that can be retrieved using :func:`streamcorpus_pipeline._kvlayer.get_kvlayer_stream_item`, or fed back into :mod:`coordinate` or other job queue systems.
12712	Get stream IDs and term frequencies for a single hash.
12713	Given a spinn3r feed, produce a sequence of valid StreamItems.
12714	Given a single spinn3r feed entry, produce a single StreamItem. Returns 'None' if a complete item can't be constructed.
12715	Create a ContentItem from a node in the spinn3r data tree.
12716	Reads exactly a varint out of the underlying file.
12717	Read some protobuf-encoded object stored in a single block out of the file.
12718	Return packed bytes representation of StreamItem kvlayer key. The result is 20 bytes, 16 of md5 hash, 4 of int timestamp.
12719	Extracts the parts of a StreamItem that go into a kvlayer key, converts the StreamItem to a blob for storage, and returns the kvlayer key tuple and the data blob.
12720	Change working directory and restore the previous on exit
12721	Removes the prefix if it's there, otherwise returns the input string unchanged. If strict is True, also ensures the prefix was present.
12722	Removes the suffix if it's present, otherwise returns the input string unchanged. If strict is True, raises an error if the suffix is not present.
12723	Checks if all elements of `needle` are contained in `haystack` in the same order, with other elements possibly interspersed.
12724	Create a WSGI application with a default home page and error handling.
12725	Run the application using a simple WSGI server.
12726	Stop the simple WSGI server running the application.
12727	Decorator to add route for a request with any HTTP method.
12728	Define a decorator to add a callback for generating error pages.
12729	Send content of a static file as response.
12730	Return an error page for the current response status.
12731	Add a route
12732	Resolve a request to a route handler.
12733	Resolves a request to a wildcard or regex route handler.
12734	Return a normalized form of the pattern. Normalize the pattern by removing pattern type prefix if it exists in the pattern. Then return the pattern type and the pattern as a tuple of two strings.
12735	Returns the HTTP response body as a sequence of bytes.
12736	Add an HTTP header to response object.
12737	Add a Set-Cookie header to response object.
12738	Return the HTTP response status line.
12739	Return the value of Content-Type header field.
12740	Return the list of all values for the specified key. If the key does not exist, return the default value.
12741	remove all files and directories below path, including path itself; works even when shutil.rmtree fails because of read-only files in NFS and Windows. Follows symlinks
12742	Return a list of open files for the current process.
12743	Generate file type stats from the stream items by analyzing the first five non-whitespace characters.
12744	Fetches a `rejester.WorkUnit` with a KBA S3 path, attempts to retrieve it, and saves some counts about it.
12745	Attempt to fetch and iterate over a work_unit.key path in S3.
12746	Return a list of non-empty lines from a specified file.
12747	Return an ordered 2-tuple containing a species and a describer.
12748	Return an ordered 2-tuple containing a species and a describer. The letter-count of the pair is guaranteed to not exceed `maxlen` if it is given. If `prevent_stutter` is True, the last letter of the first item of the pair will be different from the first letter of the second item.
12749	Morphological analysis for Japanese.
12750	Scoring the similarity of two words.
12751	Convert the Japanese text to Hiragana or Katakana using the Goolabs API.
12752	Extract unique representation from sentence.
12753	Summarize reviews into a short summary using the GoolabsAPI.
12754	Extract "keywords" from an input document.
12755	Extract expression expressing date and time and normalize its value
12756	Creates a pipeline stage by instantiating `stage` with `config`. Injects `tmp_dir_path` and `third_dir_path` from   `scp_config`. Handles both callable stage objects and their names. Extracts stage configuration from `scp_config` if `config` is None. Returns an instance of `stage_obj` configured with the provided settings.
12757	Create a list of indirect stages based on the provided configuration.
12758	Create stages that are used for the pipeline.
12759	Run the pipeline. This runs all of the steps described in the pipeline constructor, reading from some input and writing to some output.
12760	Run all of the writers over some intermediate chunk.
12761	Run transforms on a stream item. Discards items if a transform returns None. Writes successful items to `self.t_chunk`. Returns the transformed item or None.
12762	Replaces the top-level pipeline configurable object based on the provided configuration and external stages.
12763	Make a WSGI app that has all the HTTPie pieces baked in.
12764	Assemble in-doc coref chains by mapping equiv_id to tokens and their cleansed name strings
12765	For each name string in the target_mentions list searches through all chain_mentions looking for any cleansed Token.token that contains the name. Returns True only if all of the target_mention strings appeared as substrings of at least one cleansed Token.token. Otherwise, returns False.
12766	Function to check if any name in target_mentions is a substring of any chain_mention.
12767	```markdown
Iterate through tokens looking for matches of cleansed tokens or token regexes, skipping empty tokens and handling multi-space strings. Yields matching tokens.
```
12768	Iterate through tokens looking for near-exact matches to strings in `si.ratings.mentions`.
12769	run tagger a child process to get XML output
12770	Iterate through an NER XML file to fuse it with an input chunk and save the result to an output chunk.
12771	Send SIGTERM to the tagger child process.
12772	Returns a Pattern that matches exactly n repetitions of Pattern p.
12773	Replace all angle bracket emails with a unique key.
12774	Generate strings identified as sentences. Clean visible text is decoded as UTF-8. Iterate through sentence tokens, adjusting start and end positions to avoid overlapping or splitting labels. Yield sentence start, end, and string.
12775	make a sortedcollection on body.labels
12776	Assemble Sentence and Token objects from a stream item.
12777	Converts any HTML, XML, or numeric entities in the text to their corresponding Unicode characters.
12778	Create a temporary file containing cleansed text, writing each document's ID and cleansed content within `<FILENAME>` tags.
12779	Run child process to get OWPL output
12780	Convert a string of text into a lowercase string with no punctuation and only spaces for whitespace.
12781	Iterates through `i_chunk` and `tmp_ner_path` to generate a new `Chunk` with `body.ner`.
12782	Convert relative paths under "streamcorpus_pipeline" to absolute paths using "root_path".
12783	Sets up the configuration, replaces paths with absolute values, and loads external modules as specified in the config.
12784	Generate StreamItem instances from a specific path, assuming a fixed creation time for all documents.
12785	Takes an HTML-like binary string as input and returns a binary string of the same length with all tags replaced by whitespace. This also detects script and style tags, and replaces the text between them with whitespace. Pre-existing whitespace of any kind (newlines, tabs) is converted to single spaces ' ', which has the same byte length (and character length).
12786	Takes an HTML-like Unicode string as input and returns a UTF-8 encoded string with all tags replaced by whitespace. In particular, all Unicode characters inside HTML are replaced with a single whitespace character. Pre-existing whitespace of any kind (newlines, tabs) is converted to single spaces ' ', which has the same byte length (and character length). This is a simple state machine iterator without regexes.
12787	Make a temporary file of clean_visible text.
12788	Convert a unicode string into a lowercase string with no punctuation and only spaces for whitespace. Replace PennTreebank escaped brackets with ' ' and remove any leading or trailing whitespace.
12789	manual test loop for make_clean_visible_from_raw
12790	Try to load a stage into `self`, ignoring errors.

If loading a module fails due to a subordinate load failure, just give a warning and move on. On success, the stage is added to the stage dictionary.

:param str moduleName: name of the Python module
:param str functionName: name of the stage constructor
:param str name: name of the stage, defaults to `functionName`
12791	Add external stages from the Python module in `path`.
12792	Add external stages from the Python module mod. If mod is a string, then it will be interpreted as the name of a module; otherwise, it is an actual module object. The module should exist somewhere in sys.path. The module must contain a Stages dictionary, which is a map from stage name to callable.
12793	Constructs and configures a stage from known stages. Returns a callable stage. Raises KeyError if `name` is not a known stage.
12794	Iterates through `idx_bytes` until a byte in `stop_bytes` or a byte not in `run_bytes`. Returns the index of the last byte and all bytes including the terminal byte from `stop_bytes` or not in `run_bytes`.
12795	Test whether an href string meets criteria specified by configuration parameters 'require_abs_url' and 'domain_substrings'
12796	Make a list of Labels for 'author' and the filtered hrefs & anchors
12797	`yield all file paths under input_dir`
12798	Generate the data objects for every task based on the provided key prefix.
12799	Retrieve a random key from the first max_iter rows.
12800	Tokenize all the words and preserve NER labels from ENAMEX tags
12801	Parses sentences and tokens from an XML.
12802	Decorator for methods that need many retries due to intermittent failures.
12803	Verifies the MD5 hash of the data and raises an exception if it does not match the expected hash.
12804	Function to manage configuration for AWS credentials and return a boto.Bucket object.
12805	Given the raw data from s3, return a generator for the items contained in that data.
12806	Downloads a key from an S3 bucket, decrypts and decompresses if necessary, and returns a Chunk object containing the records.
12807	Convert a text stream ID to a kvlayer key.
12808	Converts a kvlayer key to a text stream ID.
12809	Get a kvlayer key from a stream item.
12810	Serve up some ponies.
12811	Build the parser that will have all available commands and options.
12812	```plaintext
Mutably tag tokens with xpath offsets.
Given a stream item, this function will tag all tokens from document taggings with character offsets, using the ``char_offsets_to_xpaths`` function. If a token can have its xpath offset computed, it is added to its set of offsets with a ``OffsetType.XPATH_CHARS`` key.
```
12813	Convert stream item sentences to character ``Offset``s.
12814	Convert character ``Offset``s to character ranges.
12815	Converts HTML and a sequence of char offsets to xpath offsets. Returns a generator of `XpathRange` objects.
12816	Records that `tag` has been seen at the current depth; collapses adjacent text nodes if `tag` is :class:`TextElement`.
12817	Method returns an XPath fragment for this location. It is of the form `tag[n]` where `tag` is the most recent element added and `n` is its position.
12818	Return the one-based index of the current text node.
12819	Yields all the elements descendant of elem in document order
12820	Yields all the elements from the source. If the source is an element, yields all child elements in order. If the source is any other iterator, yields the elements from that iterator. Filters out non-element items.
12821	Yields all elements with the given name from the source.
12822	Yields elements from the source whose name matches the given regular expression pattern
12823	Yields elements from the source having the given attribute, optionally with the given attribute value.
12824	Yields elements and text nodes that have the same parent as elem, but come afterward in document order.
12825	Add text nodes as possible to all descendants of an element for spacing & indentation to make the MicroXML as printed easier for people to read.
12826	Call inkscape CLI with arguments and returns its return value.
12827	Call Inkscape to export the input file to output file using the specific export argument flag for the output file type.
12828	Transform SVG file to PDF file
12829	Transform SVG file to PNG file
12830	Return a Jinja2 environment for the directory of a given file path.
12831	Setup self.template using the provided template file path.
12832	Fill the content of the document with the information in doc_contents.
12833	Saves the content of a template to a text file.
12834	Create a specific document of the class given by the `command` or the extension of `template_file_path`.
12835	Fill the content of the document with the information in doc_contents, replacing symbols with good XML codes before filling the template.
12836	Save the content of the .svg file in the chosen rendered format.
12837	Save the content of the .text file in the PDF.
12838	Convert XML 1.0 to MicroXML.
12839	Parse an input source with HTML text into an Amara 3 tree
12840	Parse a fragment of markup in HTML mode and return a bindery node.
12841	Insert data as text in the current node, positioned before
the start of node insertBefore or to the end of the node's text.
12842	Insert node as a child of the current node, before refNode in the list of child nodes. Raises ValueError if refNode is not a child of the current node
12843	Return a shallow copy of the current node i.e. a node with the same name and attributes but with no parent or child nodes.
12844	Run a series of steps to execute a script with specified options, compile a codebase, and extract the total time from the output.
12845	XPath-like string value of node
12846	Append a node as the last child. If a string, convert to a text node.
12847	Get settings from config file. Check if mandatory options are supplied and return config data.
12848	Get google API credentials for user.
12849	Create event start and end datetimes.
12850	Given options, config, and credentials, create an event in the specified calendar with an SMS reminder based on the configuration.
12851	Process notification call main function.
12852	Return the extension of fpath.
12853	Add the extension ext to fpath if it doesn't have it.
12854	Return the path to a newly created temporary file with the given suffix within dirpath. If dirpath is None, will look for a temporary folder in your system.
12855	Remove files with a specific extension from a directory.
12856	Convert a CSV file into a JSON file.
12857	Replace occurrences of `old` with `new` in the content of `filepath`, overwriting the file.
12858	Run all parsing functions.
12859	Combines two anchor tags if they have the same href attribute.
12860	Make `em` tag if `font-style:italic` is present in `span` tag.
12861	Wrap span tag with strong tag if it has bold style.
12862	Check if the span tag has an underline style and wrap it with a 'u' tag.
12863	Reject attributes not defined in ATTR_WHITELIST for the given tag.
12864	get unicode string without any other content transformation and clean extra spaces
12865	Extract "real" URL from Google redirected URL by getting `q` querystring parameter.
12866	Parse attribute. Delegate to href parser for hrefs, otherwise return value.
12867	Modify the keys in adict to the ones in translations. Be careful, this will modify your input dictionary. The keys not present in translations will be left intact.
12868	Convert data to json string representation.
12869	Returns absolute paths of files that match the regex within folder_path and all its children folders.
12870	Concatenates the given strings into a single string.
12871	Yields a boolean indicating whether the `full` string starts with the `part` string
12872	An iterator that checks if the second string is a substring of the first string and yields the result as a boolean.
12873	Yields the length of a string
12874	Check if the given argument sequence is empty or not. If not, it checks the type and value of the first item in the sequence and returns `false` or `true` accordingly. If the `obj` has a `compute` method, it will yield the result of `seq.compute(ctx)`. If not, it will yield the result of `seq`. Then, it will yield the result of `to_boolean(obj)`.
12875	Yields the result of applying an expression to each item in the input sequence.
12876	Yields a value from the tables provided in the context based on the given key, or an empty sequence if the lookup is unsuccessful.
12877	Replace known special characters to SVG code.
12878	Try to read a SVG file if `svg_file` is a string. If `svg_file` is a svgutils svg object, will just return it.
12879	Merge `svg_file2` in `svg_file1` in the given positions `x_coord`, `y_coord` and `scale`.
12880	Merge all the PDF files in `pdf_filepaths` in a new PDF file `out_filepath`.
12881	Embed the font content to SVG.
12882	Write ttf and otf font content from `font_files` in the svg file in `filepath` and write the result in `outfile`.
12883	Make sure the inputs are iterable and each item is an instance of the Input class.
12884	Checks that the provided function is callable and has exactly one argument.
12885	Generates all input combinations for the given inputs by recursively iterating through each input's options and appending them to the output list.
12886	create an input file using jinja2 by filling a template with the values from the option variable passed in.
12887	Recursively generates all combinations of the input list up to a specified depth.
12888	Cast an arbitrary object or sequence to a string type
12889	Convert an arbitrary object or sequence to a number type
12890	Cast an arbitrary sequence to a boolean type
12891	Generate token strings which, when joined together, form a valid XPath serialization of the AST.
12892	Modify the encoding entry in the XML file
12893	Save `text` in a qrcode svg image file.
12894	Set the gromacs input data using the supplied input options, run gromacs, and extract the required outputs.
12895	Call CLI command with arguments and returns its return value.
12896	Converts TeX file to PDF using PDFLatex.
12897	Returns all potential loop fusion options for the psy object provided.
12898	Returns a transformed Geometry.
12899	Returns an ogr.Geometry instance optionally created from a geojson str or dict. The spatial reference may also be provided.
12900	Expands this envelope by the given Envelope or tuple.
12901	Returns the intersection of this and another Envelope.
12902	Returns true if this envelope intersects another.
12903	Returns an OGR Geometry for this envelope.
12904	Creates a table from arrays Z, N and M
12905	Export the contents to a file as comma separated values.
12906	Selects nuclei according to a condition on Z,N or M
12907	Return a selection of the Table at positions given by `nuclei`.
12908	Select nuclei intersecting with another table's nuclei.
12909	Select nuclei not in table
12910	Selects odd-even nuclei from the table
12911	Selects even-odd nuclei from the table
12912	Selects even-even nuclei from the table
12913	Calculate error difference
12914	Calculate the root mean squared error
12915	Return binding energies instead of mass excesses.
12916	Return 2 neutron separation energy
12917	Return 1 neutron separation energy
12918	Return 2 proton separation energy
12919	Return 1 proton separation energy.
12920	Helper function for derived quantities.
12921	Ensures database connection setup and teardown for operations on a method.
12922	Computes the key from the salt and the master password.
12923	Initialize a database.
12924	Search the database for the given query. Will find partial matches.
12925	Modify an existing domain.
12926	Creates a new domain entry in the database.
12927	Extract messages from Handlebars templates. It returns an iterator yielding tuples in the following form `(lineno, funcname, message, comments)`.
12928	Returns a GDAL virtual filesystem prefixed path.
12929	Returns the EPSG ID as int if it exists.
12930	Main entry point for the CLI.
12931	Initialize loggers with optional verbose mode.
12932	Update the content of a single file.
12933	Returns a dictionary of enabled GDAL Driver metadata keyed by the 'ShortName' attribute.
12934	Returns the gdal.Driver for a given path based on its file extension.
12935	Converts an OGR polygon to a 2D NumPy array.
12936	Returns a Raster from layer features.
12937	Returns a Raster instance from the provided path with optional access mode.
12938	Returns an in-memory raster initialized from a pixel buffer
12939	Returns a copied Raster instance. Accepts a source Raster instance or filepath, and a destination filepath. Raises an IOError if the driver does not support raster copying. If the source and destination are the same, it raises a ValueError. Settings are converted to a list using `driverdict_tolist`, and then the `CreateCopy` method is used to create the copy. The source Raster is closed if it was opened within this function. The function returns the copied Raster instance.
12940	Returns a dict of driver specific raster creation options.
12941	Returns a new Raster instance by creating a new dataset using gdal.Driver.Create(). It handles both single-band and multi-band rasters, validates the size, checks if the file already exists, and raises appropriate exceptions if any errors occur during the process.
12942	Sets the affine transformation.
12943	Return an NDArray, optionally subset by spatial envelope.
12944	Returns the minimum bounding rectangle as a tuple of min X, min Y, max X, max Y.
12945	Returns the underlying ImageDriver instance.
12946	Derive new Raster instances based on the current object, allowing for specified size and geotransformation.
12947	Returns a MaskedArray using nodata values, optionally applying a geometry mask.
12948	Return a read-only property for the band's nodata value, assuming single-band rasters for now.
12949	Returns raster data bytes for partial or full extent. Overrides gdal.Dataset.ReadRaster() with the full raster size by default.
12950	Returns a new instance of the image that has been resampled to the provided dimensions using the specified interpolation method.
12951	Save this instance to the path and format provided.
12952	Sets the spatial reference.Intercepts the gdal.Dataset call to ensure use as a property setter.
12953	Returns a new reprojected instance.
12954	Computes the ideal conversion ratio for a given alphabet.
12955	retrieves a named charset or treats the input as a custom alphabet and use that
12956	gets a chunk from the input data, converts it to a number, and encodes that number
12957	Parses a chunk of bytes to integer using big-endian representation.
12958	partition the data into chunks and retrieve the chunk at the given index
12959	Cache result of function call.
12960	Get a list of patterns from a file and make a regular expression.
12961	Convert dates to aware UTC datetime objects.
12962	Get timezone as set by the system
12963	Returns the model properties as a dict
12964	Catch exceptions with a prompt for post-mortem analysis
12965	Clearer data printing
12966	Accepts a job handler and host/port details, establishes a connection, and continuously receives calls to execute, returning responses until interrupted.
12967	Starts an asyncio event loop to connect to the master and run jobs.
12968	Runs a pool of workers which connect to a remote HighFive master and begin executing calls.
12969	Sets the classification of this CompanyDetailCompany and validates the input.
12970	Add message to queue and start processing the queue.
12971	Create the message to turn light on.
12972	Creates a message to turn a switch on.
12973	Turns on a device with a specified brightness value.
12974	Create the message to turn light or switch off.
12975	If the queue is not empty, process the queue.
12976	Send msg to LightwaveRF hub with retries.
12977	Generates a wrapped adapter for the given object
12978	Sets the nature of this YearlyFinancials. Nature of the balancesheet.
12979	Update values of configuration section with dict. Undefined options are discarded. If conf_arg is True, only options that can be set in a config file are updated.
12980	Restore default values of options in this section.
12981	Set the list of config files, given in the order of reading.
12982	Iterator over sections, option names, and option values.
12983	Iterator over sections, option names, and option metadata.
12984	Create config file英寸
12985	Update values of configuration options with a dictionary.
12986	Read a config file and set config values accordingly.
12987	Read config files and set config values accordingly.
12988	List of cli strings for a given option
12989	List of config sections used by a command.
12990	Scan options related to one command and enrich `_opt_cmds`.
12991	Add options to a parser.
12992	Build command line argument parser.
12993	Parse arguments and update options accordingly.
12994	Write zsh _arguments compdef for a given command.
12995	Write zsh compdef script.
12996	Builds a list of all options for a given command.
12997	Write bash complete script
12998	Starts a new HighFive master at the given host and port, and returns it.
12999	Called when a remote worker connection has been found. Finishes setting up the protocol object.
13000	Decode a response object from the line and pass it to the worker object.
13001	Called when the connection to the remote worker is broken. Closes the worker.
13002	Called when a job has been found for the worker to run. Sends the job's RPC to the remote worker.
13003	Called when a response to a job RPC has been received. Decodes the response and finalizes the result, then reports the result to the job manager.
13004	Closes the worker. No more jobs will be handled by the worker, and any running job is immediately returned to the job manager.
13005	Runs a job set which consists of the jobs in an iterable job list.
13006	Starts closing the HighFive master. The server will be closed and all queued job sets will be cancelled.
13007	Called when a state change has occurred. Waiters are notified that a change has occurred.
13008	Adds a new result.
13009	Wait for the result set to change by being added or becoming complete. If the result set is already complete, the method returns immediately.
13010	If there is still a job in the job iterator, loads it and increments the active job count.
13011	Marks the job as completed and notifies all waiting tasks.
13012	Adds the result of a completed job to the result list, then decrements the active job count. If the job set is already complete, the result is simply discarded instead.
13013	Cancels the job set. The job set is immediately finished, and all queued jobs are discarded.
13014	Wait until the job set is finished. Returns immediately if the job set is already finished.
13015	Distributes jobs from the active job set to any waiting get_job callbacks.
13016	Adds a job set to the manager's queue. If there is no job set running, it is activated immediately. A new job set handle is returned.
13017	Calls the given callback function when a job becomes available.
13018	Returns a job to its source job set to be run again later.
13019	Adds the result of a job to the results list of the job's source job set.
13020	Called when a job set has been completed or cancelled. If the job set was active, the next incomplete job set is loaded from the job set queue and is activated.
13021	Closes the job manager. No more jobs will be assigned, no more job sets will be added, and any queued or active job sets will be cancelled.
13022	```python
Remove duplicates in a list.
```
13023	Returns true if the regex matches the object, or a string in the object if it is some sort of container.
13024	Lists all available instances.
13025	Use the environment to get the current region
13026	Filters a list of host entries according to the given filters.
13027	Prints the public DNS name of an EC2 instance if it exists.
13028	Deserialize a HostEntry from a dictionary.
13029	Retrieve and return a specified attribute from an object, optionally converting the result to a string.
13030	Sorts a list of entries by the given attribute.
13031	Returns a representation of the host as a single line, with columns joined by the specified separator. Optionally filters columns to show based on provided parameters.
13032	LOADS A ``HostEntry`` FROM A BOTO INSTANCE
13033	Returns whether the instance matches the given filter text.
13034	Returns the best name to display for this host. Uses the instance name if available; else just the public IP.
13035	Pretty-prints a list of entries as a table or line-by-line representation based on the available terminal width.
13036	Attach the event time, as unix epoch
13037	Setup Hivy formated logger with specified level and output option. Returns configured logbook.NestedSetup instance with appropriate handlers based on output type (stdout or file) and Sentry DNS configuration if available.
13038	Configure and return a new logger for hivy modules
13039	Implement celery workers using json and redis.
13040	Return status report for a specific worker or all workers.
13041	Stop and remove a worker
13042	Define a switchable ConfOpt. This creates a boolean option. If you use it in your CLI, it can be switched on and off by prepending + or - to its name: +opt / -opt.
13043	Define a configuration section handling config file.
13044	Set options from a list of section.option=value string.
13045	This function handles the configuration command implementation by creating, updating, or editing a configuration section based on the provided configuration object. It uses the `subprocess` module to call an editor for editing the configuration file if the `edit` flag is set.
13046	Create completion files for bash and zsh.
13047	Renders a list of columns.
13048	Render the `num`th row of each column in `columns`.
13049	Render a table as a string.
13050	Prepare the rows so they're all strings, and all the same length.
13051	Returns a function that colors a string with a number from 0 to 255.
13052	Hashes a string and returns a number between `min` and `max`.
13053	Returns a random color between min and max.
13054	Reads stdin, exits with a message if interrupted, EOF, or a quit message. Converts to an integer if possible.
13055	Verifies basic HTTP authentication by checking if the provided username and password match an existing user in the database. Returns the user object if authentication is successful, otherwise returns None.
13056	Verifies HTTP header token authentication and returns the corresponding user or `None` if authentication fails.
13057	Flask decorator protecting ressources using token scheme
13058	Check if a process is running using `pgrep`.
13059	Import a Python module dynamically by its path and optionally an object name from the module.
13060	Utility for retrieving the IP address, either public or private.
13061	Makes the HTTP request using RESTClient.
13062	Builds form parameters with support for both regular form data and file uploads.
13063	Configure from cli and run the server
13064	Render a hidden input to store the serialized upload value.
13065	Starts a subprocess to run a bash command, printing and optionally formatting each line of output.
13066	Run a list of streaming commands concurrently or sequentially.
13067	Run multiple commands, optionally in parallel. Each command should be a dictionary with a 'command' key and optionally 'description' and 'write_stdin' keys.
13068	Return the number of workdays between the given start and end dates, excluding holidays based on the specified locale.
13069	Queries bash to find the path to a command on the system.
13070	Constructs an SSH command using the provided hostname, username, identity file, and optional tunneling.
13071	Constructs an SCP command using provided parameters for hostname, username, identity file, and file paths.
13072	Performs SCP command to copy local_path to remote_path
13073	Copy files from remote hosts to local paths based on entries and a format string
13074	Runs the given command over SSH in parallel on all hosts in `entries`.
13075	SSH into a host using the provided entry details, username, identity file, and tunnel if necessary.
13076	Load the user's LSI profile, or provide a default.
13077	Takes arguments parsed from argparse and returns a profile.
13078	Relate this package component to the supplied part.
13079	Return a list of parts related to this one via reltype.
13080	Load relationships from source XML.
13081	Add a part to the package. It will also add a content-type - by default an override. If override is False then it will add a content-type for the extension if one isn't already present.
13082	Load a part into this package based on its relationship type.
13083	Get the correct content type for a given name, with a fallback to the content type derived from the file extension.
13084	Given an element, parse out the proper ContentType.
13085	Parses the given DSL string and returns parsed results.
13086	Builds a final copy of the token using the given secret key.
13087	Assigns force field parameters to Atoms in the AMPAL object.
13088	Finds the maximum radius and npnp in the force field.
13089	Converts force field parameters to a dictionary of PyAtomData structs.
13090	Return a zipped package as a readable stream.
13091	Return a generator yielding each of the segments whose names match name.
13092	Copies objects from one directory in a bucket to another directory in the same bucket. Object metadata is preserved while copying.
13093	Opens an S3 Bucket resource.
13094	Upload a directory of files to S3.
13095	Upload a file to the S3 bucket.
13096	Uploads an arbitrary object to an S3 bucket.
13097	List all file-type object names that exist at the root of this bucket directory.
13098	List all names of directories that exist at the root of this bucket directory.
13099	Make an absolute directory path in the bucket for a directory name assumed to be relative to the `self._bucket_root` prefix directory.
13100	Deletes a file from the bucket.
13101	Ensures a token is in the Click context object or authenticates and obtains the token from LTD Keeper.
13102	Speak loudly! FIVE! Use upper case!
13103	Deletes all objects in the specified S3 bucket that are located in the given root directory.
13104	Get project's home URL based on settings.PROJECT_HOME_NAMESPACE. Returns None if PROJECT_HOME_NAMESPACE is not defined in settings.
13105	Decorator to silence template tags if 'PROJECT_HOME_NAMESPACE' is not defined in settings.
13106	Generates a Bootstrap 3 breadcrumb for the project's home URL, allowing for custom labels and overriding default settings.
13107	A template tag to return the project's home URL and label formatted as a Bootstrap 4 breadcrumb.
13108	Calculates the interaction energy between AMPAL objects.
13109	Calculates the internal energy of the AMPAL object using the specified force field and assigns force field if required.
13110	Get lines sampled across all threads, ordered from most to least sampled.
13111	Get a temporary authentication token from LTD Keeper using provided hostname, username, and password.
13112	Upload a new site build to LSST the Docs.
13113	Detect if the upload should be skipped based on the `TRAVIS_EVENT_TYPE` environment variable.
13114	Instant purge URLs with a given surrogate key from the Fastly caches.
13115	Register a new build for a product on LSST the Docs.
13116	Confirm a build upload is completeWraps PATCH /builds{build}Parametersbuild_url : str URL of the build resourcekeeper_token : str Auth token Raisesltdconveyor.keeper.KeeperError Raised if there is an error communicating with the LTD Keeper API.
13117	Deeply updates a dictionary. List values are concatenated.
13118	Initialize and configure logging for the `ltdconveyor` module.
13119	Edit a part from an OOXML Package without unzipping it
13120	List the contents of a subdirectory of a zipfile
13121	recursively call os.path.split until we have all of the components of a pathname suitable for passing back to os.path.join.
13122	Given a path to a part in a zip file, return a path to the file and the path to the part.
13123	Give preference to an XML_EDITOR or EDITOR defined in the environment. Otherwise use notepad on Windows and edit on other platforms.
13124	Given a node, check if it contains a valid file header.
13125	Generating an HTML chart from a data object and optionally writing it to a file
13126	Generate html from an Altair chart object and optionally write it to a file
13127	Serialize to an Altair chart object from various data sources.
13128	Patches an Altair-generated JSON to conform to the newest Vega Lite specification by adding a schema and setting top-level width and height.
13129	Generating HTML from Vega lite data
13130	Converts a dictionary to a pandas dataframe.
13131	Writes a chart's HTML to a file.
13132	Gets the right chart class for a given chart type with specified dataframe and keyword arguments.
13133	Encodes the fields in Altair format
13134	Link to a GitHub user.
13135	Returns the tarball URL inferred from an app.json, if present.
13136	Brings up a Heroku app by creating and building it from a tarball URL.
13137	Brings down a Heroku app.
13138	Decorator implementing Iterator interface with nicer manner.
13139	Returns a random binary string of a specified length.
13140	returns a string representing a random ip address, optionally ignoring valid class A networks
13141	Return a random date between two dates
13142	Returns a prepared ``Session`` instance with appropriate headers and authentication.
13143	Sends an API request to Heroku and returns a JSON response.
13144	Creates an app-setups build. Returns response data as a dict.
13145	Checks the status of an app-setups build. Returns `True` if succeeded, `False` if pending.
13146	Returns a generator that returns a unique string with the given prefix. Each subsequent call returns the next unique string in the sequence.
13147	Decorator that stores function results in a dictionary to be used on the next time that the same arguments were informed.
13148	Wrap the function to ensure it produces unique results by caching outputs and retrying on duplicates.
13149	Add any sub commands to the argument parser.
13150	Get the root argument parser object.
13151	Gets the description of the command. If its not supplied the first sentence of the doc string is used.
13152	If `help` text is supplied return it otherwise use the stripped doc string or return an empty string.
13153	Runs the command passing in the parsed arguments. If `None`, the arguments are gathered from the argument parser. Returns the status code of the action (0 on success).
13154	Encode wrapper for a dataset with maximum value.

Datasets can be one or two dimensional. Strings are ignored as ordinal encoding.
13155	Get all available athletes. This method is cached to prevent unnecessary calls to GC.
13156	Get all activity data for the last 'n' activities.
13157	Query an athlete's activity list from an endpoint, parse the CSV response, and rename columns for better readability and data processing.
13158	This method makes a request to retrieve athlete activity data from an endpoint, caches the response for future use, processes the JSON response to convert it into a pandas DataFrame, renames the columns for clarity, sets the index using the 'time' column, and returns a filtered DataFrame based on a specified order of columns.
13159	Constructs an athlete endpoint from the host and athlete name, with the athlete name URL-encoded.
13160	Construct activity endpoint from host, athlete name and filename
13161	Do actual GET request to GC REST API. Also validates responses.
13162	Creates a Heroku app-setup build using a tarball URL and optional environment variables. Returns a tuple with the build ID and app name.
13163	wrapper to add authentication to DRF \`as_view\` method (for both string and function-based views)
13164	Returns a random title based on the specified languages and genders.
13165	Returns a random tuple representing person information.
13166	Return a random last name based on a list of languages. If no languages are provided, defaults to 'en'.
13167	Render the axes data into the dict data
13168	Update the chart's dataset, can be two-dimensional or contain string data
13169	Renders the chart context and axes into the dict data.
13170	Check to see if the type is either in TYPES or fits type name. Returns proper type.
13171	Returns the rendered URL of the chart.
13172	Opens a web browser and navigates to the URL of the chart.
13173	Download the chart from the URL into a filename as a PNG.
13174	Grabs readable PNG file pointer
13175	Returns a PngImageFile instance of the chart.You must have PIL installed for this to work
13176	Writes out PNG image data in chunks to a file pointer.
13177	Returns the unique SHA1 hexdigest of the chart URL param parts.
13178	Return a random floating number within the specified range with a given number of decimal places.
13179	Assigns an entity name based on the class immediately inheriting from Base. This ensures that entity names come from the correct classes within the module, preventing names from being assigned to classes that inherit from the base class outside of the module.
13180	This method returns verified and self-asserted claims. If a claim has both verified and self-asserted values, only the verified value is returned. If `self.sup` is `None`, it returns the local evidence (`self.le`).
13181	Builds a JWKS from the signing keys belonging to the self signer Returns a dictionary containing the keys
13182	Unpacks and verifies metadata statements from a signed JWT or JSON document.
13183	Creates a signed JWT from a given MetadataStatement instance.
13184	Computes the resulting metadata statement from a compounded metadata statement. Raises an exception if something goes wrong during evaluation.
13185	Remove MS paths that are marked to be used for another usage
13186	Add signed metadata statements to a request.
13187	Parses command line args using argparse library
13188	Add logging options to an ArgumentParser.
13189	Applies logging options produced by LogLevelAction and LogFileAction.
13190	Log msg at 'verbose' level, debug < verbose < info
13191	Creates a map of letter usage in a word.
13192	Find anagrams in a given word based on specified starting and ending characters, and optionally using TWL or SOWPODS word list.
13193	Returns the exception's name in an AMP Command friendly format.

For example, given a class named ``ExampleExceptionClass``, returns
``"EXAMPLE_EXCEPTION_CLASS"``.
13194	Transforms a Go Metrics API metric result into a list of values for a given window period.
13195	Gets the most recent non-zero value for a .last metric or zero for empty data.
13196	Validate the given 1-based page number.
13197	Returns a page from an iterator handling invalid input from the page number by defaulting to the first page.
13198	Apply the specified permissions to a file or directory recursively.
13199	Given configuration initiate an InternalSigningService instance.
13200	Given configuration initiate a SigningService instance
13201	Creates a signed JWT
13202	Uses POST to send a metadata statement signing request to a signing service.
13203	Update an earlier accepted and signed metadata statement using a PUT request.
13204	Uses GET to fetch a newly signed metadata statement.
13205	Yield bundle contents from the given dict. Each item yielded will be either a string representing a file path or a bundle.
13206	Return a bundle initialised by the given dict.
13207	Returns URLs needed to include all assets of asset_type by combining URLs from dependencies and the asset itself.
13208	Returns HTML tags for URLs of a given asset type.
13209	Return all HTML tags for all asset types.
13210	Given a URL, check to see if there is an associated protocol. If not, set the protocol to HTTP and return the protocolised URL.
13211	Finds the href destinations of all links at a given URL.
13212	Connected to AMP server, start listening locally, and give the AMP client a reference to the local listening factory.
13213	Get modules by project_abspath and packages_scan. Traverse all files under folder packages_scan which set by customer. And get all modules name.
13214	Summary:

Imports customer's service modules. Logs the modules being imported. Attempts to import each module specified in `self.get_modules()`. If an `ImportError` occurs, raises an `ImportModulesError` with the error message.
13215	Converts a date string in various formats to a normalized and validated date range.
13216	Take a document and create a new document using only the keys listed in `field_list`. Supports referencing nested fields using dotted notation "a.b.c".
13217	For all the datetime fields in "datemap" find that key in doc and map the datetime object to a strftime string. This pprint and others will print out readable datetimes.
13218	Output a cursor to a filename or stdout if filename is "-".取决于self._format的值，输出CSV或JSON格式。
13219	Outputs all fields using the `fieldNames` list, with date fields indicated by the `datemap`.
13220	Given a list of tasks and a dependency graph, return the tasks that must be performed in the correct order.
13221	Adds default departments to a project.
13222	Add default assettypes to a project.
13223	Method to add or create default sequences for a given project.
13224	Add a rnd shot for every user in the project
13225	Create a rnd shot for every user When created does 1. create all default departments 2. create all default assettypes 3. create all default sequences
13226	Create a global shot for a saved sequence.
13227	Creates all tasks for a given element (shot or asset), filtering by department flags and saving each task.
13228	Ensures that we have an open connection to the given peer. Returns the peer id. This should be equal to the given one, but it might not if the given peer was, say, the IP and the peer actually identifies itself with a host name. The returned peer is the real one that should be used. This can be handy if we aren't 100% sure of the peer's identity.
13229	Sends a packet to a peer.
13230	Reads a configuration value by section and key and returns it with the specified type.
13231	Nova annotation for adding function to process nova notification.
13232	Register the decorated function to process Cinder notifications based on the event type.
13233	Neutron annotation for adding function to process neutron notification. If event_type includes a wildcard, the function will be added to the `process_wildcard` dictionary; otherwise, it will be added to the `process` dictionary.
13234	Add a function to process Glance notifications based on the event type.
13235	Annotate a function to process Swift notifications based on event type, categorizing them into wildcard or specific event types.
13236	Register the decorated function as a handler for keystone notifications.
13237	Sketch the heat annotation for adding function to process heat notification. If event_type includes a wildcard, it will store the {pattern: function} in the process_wildcard dictionary; otherwise, it will store the {event_type: function} in the process dictionary.
13238	Add a factory, making it accessible to remote clients and calling its `doStart` method.
13239	Removes a factory. After calling this method, remote clients will no longer be able to connect to it. This will call the factory's ``doStop`` method.
13240	Attempts to connect using a given factory.
This will find the requested factory and use it to build a protocol as if the AMP protocol's peer was making the connection. It will create a transport for the protocol and connect it immediately. It will then store the protocol under a unique identifier, and return that identifier.
13241	Receives some data for the given protocol.
13242	Disconnects the given protocol and sets its transport to None.
13243	Shorthand for `callRemote`. This uses the factory's connection to the AMP peer.
13244	Logs a message indicating that a multiplexed AMP connection is being created. Connects to the AMP server's multiplexed factory using the identifier defined by the class' factory. When the connection is established, stores the connection reference and sends buffered data.
13245	Stores a reference to the connection, registers this protocol on the factory as one related to a multiplexed AMP connection, and sends currently buffered data. Removes the buffer afterwards.
13246	Received some data from the local side. If the multiplexed connection is set up, sends the data over the connection; otherwise, buffers the data.
13247	Actually sends data over the wire.
13248	If there is an AMP connection registered on the factory, it is disconnected and removed from the factory's protocols list.
13249	Attempts to get a local protocol by connection identifier.
13250	Replay the received data to the local protocol.
13251	The other side has requested a disconnection, so the current protocol associated with the given connection is obtained, and its transport is instructed to close the connection. Finally, an empty dictionary is returned.
13252	Centres a string and pads it on both sides
13253	Print a string with the current time right-aligned.
13254	Converts semantic version number parts into a formatted version string
13255	Identify the unit framework (astropy.units, pint, or quantities) for a given unit object.
13256	Check that a value has physical type consistent with user-specified units
13257	Applies standard padding to the data to make its length a multiple of the specified block size. Supports PKCS7, ISO7816, and X923 padding styles.
13258	Remove standard padding.
13259	Sign the extended request.
13260	Gathers metadata statements and returns them.
13261	Prints anagrams and their scores or lengths.
13262	Parse command line arguments for an anagram search tool.
13263	```python
Main command line entry point that parses arguments, processes a wordlist, and pretty prints the results.
```
13264	enqueue incoming data and process complete packets based on their headers, calling the appropriate `on_...` method for registered packet types.
13265	Invoked if a packet with an unregistered type was received. Default behaviour is to log and close the connection.
13266	Create a callable stub for invoking a remote function using the given URL. The stub ensures that the RPC system is opened and correctly parses the URL to extract essential components such as the scheme, path, and function ID. It raises errors if the URL is invalid or if the scheme is not "anycall." Otherwise, it returns an _RPCFunctionStub object that represents the remote function.
13267	Handle a ping request to check if a remote call is still in progress.
13268	Get command regex string and completer dict.
13269	Delegates to `amp.AmpList`, then retrieves the element from the list.
13270	Wraps the object in a list, and then defers to ``amp.AmpList``.
13271	Verifies that an instance of this class adheres to the given restrictions.
13272	Parse simple JWKS or signed JWKS from the HTTP response.
13273	Performs a pg_dump backup of a database and returns the status code and shell output.
13274	Returns a list of all databases on this server
13275	Returns a dictionary of all the files under a path.
13276	Syncs a local directory with an S3 bucket. Currently does not delete files from S3 that are not in the local directory.
13277	Ensure the user has the necessary tokens for the specified services.
13278	Display the login form and handle the login action.
13279	Build CLI dynamically based on the package structure.
13280	Return an already closed read-only instance of Fridge.
13281	Force reloading the data from the file, discarding all in-memory data and updating with the new data from the file. This method is automatically called by the constructor.
13282	Create a signed JWT containing a JWKS. The JWT is signed by one of the keys in the JWKS.
13283	A metadata statement signing request with 'signing_keys' signed by one of the keys in 'signing_keys'.
13284	A decorator for providing a unittest with a library and have it called only once.
13285	Descover and load greencard tests.
13286	Command line entry point for a test runner that executes tests on cards in a librarian library.
13287	Returns the Scrabble score of a letter. Raises TypeError if a non-Scrabble character is supplied.
13288	Checks the Scrabble score of a single word.
13289	```python
def word_list(sowpods=False, start="", end=""):
    """Opens the word list file and yields words based on the specified criteria.

    Args:
        sowpods: A boolean indicating whether to use the SOWPods (True) or TWL (False) word list.
        start: A string representing the starting characters of the word.
        end: A string representing the ending characters of the word.

    Yields:
        Words that match the given criteria (start, end, sowpods) from the word list.
    """
```
13290	Check if the input word could be played with a full bag of tiles.
13291	Performs a search using the provided query and tags. If a result is found, it prints the best answer's code. If no result is found, it prints a message suggesting the addition of tags.
13292	Run command-line interface (CLI) with query and optional tags.
13293	Handle a JSON AMP dialect request.
13294	Gets the command class and matching responder function for the given command name.
13295	Parses all the values in the request that are in a form specific to the JSON AMP dialect.
13296	Runs the responser function. If it succeeds, adds the answer key. If it fails with a known error, serializes the error.
13297	Serializes the response to JSON, and writes it to the transport.
13298	Tells the box receiver to stop receiving boxes.
13299	Builds a bridge and associates it with an AMP protocol instance.
13300	Convert a JWKS to a KeyJar instance.
13301	Upload a bundle from an unsigned JSON document.
13302	This function handles the nova notification by first looking for a process in the `nova_customer_process` dictionary that matches the event type without using wildcards. If no exact match is found, it then checks `nova_customer_process_wildcard` for any patterns that match the event type. If a matching pattern is found, it executes the corresponding process. If neither a direct match nor a pattern match is found, it uses a default process. After processing, it acknowledges the message.
13303	This function processes a Cinder notification by first attempting to find a specific process based on the event type from `cinder_customer_process`. If not found, it searches `cinder_customer_process_wildcard` using regex patterns. If no match is found, it uses a default process. After executing the appropriate process, it acknowledges the message.
13304	Handles a neutron notification by identifying and executing the appropriate process based on the event type. If an exact match is found in `neutron_customer_process`, it is executed. If not, it searches for a wildcard match in `neutron_customer_process_wildcard`. If no match is found, it uses a default process. After execution, it acknowledges the message.
13305	Handles the glance notification by processing it based on the event type. It first tries to match the event type with a specific process, then with a wildcard process, and if neither matches, it uses a default process.
13306	Handles the processing of Swift notifications by first trying to find a specific process in `swift_customer_process`. If not found, it searches through `swift_customer_process_wildcard` using regular expressions. If no match is found, it falls back to a default process.
13307	Deals with a keystone notification by finding and executing the appropriate process based on the event type. If no specific process is found, it checks for a wildcard match and executes the corresponding process. If no match is found, it uses the default process.
13308	This function handles heat notifications. It first tries to find a process from `heat_customer_process` that matches the event type. If not found, it searches `heat_customer_process_wildcard` using regex patterns. If no match is found, it uses a default process. The function then acknowledges the message.
13309	Serve app using wsgiref or provided server.
13310	Print 'msg' to stdout, and optionally log at info level.
13311	Prints 'msg' to stderr and logs it at the info level using the provided logger.
13312	A class decorator for Command classes to register in the default set.
13313	A class decorator for Command classes to register.
13314	Checks if constraints are satisfied and then converts the value using the baseArgument's toString method.
13315	Converts the string to a value using the composed AMP argument, then checks all the constraints against that value.
13316	Merge ``cdict`` into ``completers``. Raise ValueError if a key already exists and ``regex`` is false'y. Update key with a unique regex if provided, and return the updated regex.
13317	Initialize Ternya work by importing customer's service modules, setting up OpenStack MQ, and establishing a connection that auto-reconnects.
13318	Init connection and consumer with openstack mq
13319	Import customer's service modules.
13320	Init openstack nova mq
13321	Initialize OpenStack Cinder message queue consumer.
13322	Init openstack neutron mq
13323	Initializes the Glance consumer for OpenStack notifications.
13324	Init openstack heat mq

1. Check if enable listening heat notification
2. Create consumer
13325	Check if customer enable openstack component notification.
13326	Get music info from baidu music api
13327	Process for downloading music with multiple threads.
13328	Executes a code object with optional globals and locals dictionaries.
13329	Implementation of the LOAD_NAME operation, retrieves a name from global scope or built-in scope.
13330	Implements the CALL_FUNCTION operation by retrieving the callable from the stack, collecting its arguments, and executing it. Handles different callable types including functions, class building, and globals retrieval, then pushes the return value back onto the stack.
13331	Performs a mysqldump backup. Create a database dump for the given database. Returns status code and shell output.
13332	Render ditaa code into a PNG output file.
13333	Invoked in the 'finally' block of Application.run.
13334	Run Application.main and exits with the return value.
13335	Changes to directory `path` and return to CWD when exited.
13336	Recursively copies a directory and its contents to a new location, merging files rather than requiring the destination directory to not exist. Handles symlinks and updates file metadata.
13337	Calls post_mortem if an exception is in context; otherwise, set_trace. Uses ipdb over pdb if installed.
13338	Find the time this file was last modified.
13339	Find out if this item has been modified since last
13340	Builds a local cache based on the content of the directory.
13341	Completely resets the database, erasing all information in the local cache and on disk.
13342	Rip the events from a given RSS feed, normalize the data, and store.
13343	Download the image and return the local path to the image file.
13344	Checks if an image has changed since it was last downloaded by making a head request.
13345	Returns a template.Node subclass based on the provided parameters and token.
13346	Find the stack frame of the caller to note the source file name, line number, and function name.
13347	get the C_C in which pe_pe is defined
13348	Parse command line options and launch the prebuilder.
13349	Find a symbol in the symbol table by name, kind, or both.
13350	Determines if a PE_PE is contained within a EP_PKG or a C_C.
13351	Check if a PE_PE is globally defined, i.e. not inside a C_C
13352	Convert a BridgePoint data type to a pyxtuml meta model type.
13353	Retrieves two lists of attributes associated with two classes in an association using their OIR_ID.
13354	Create a named tuple from a BridgePoint enumeration.
13355	Create a Python function from a BridgePoint bridge.
13356	Create a Python object from a BridgePoint external entity with bridges realized as Python member functions
13357	Create a Python function from a BridgePoint function.
13358	Create a Python value from a BridgePoint constant.
13359	Output:
Create a Python function that interprets the action of a BridgePoint class operation.
13360	Create a Python property that interprets the action of a BridgePoint derived attribute.
13361	Creates a pyxtuml class from a BridgePoint class.
13362	Create a pyxtuml association from a simple association in BridgePoint.
13363	Create pyxtuml associations from a linked association in BridgePoint.
13364	Create a pyxtuml association from a R_REL in ooaofooa.
13365	Create a pyxtuml meta model from a BridgePoint model. Optionally, restrict to classes and associations contained in the component c_c.
13366	Calls a function and send results to the collector, supporting function actions that could return, yield, or raise packable objects.
13367	Sends ACCEPT reply.
13368	Sends REJECT reply.
13369	Sends RAISE reply.
13370	Allocates a call id and emits.
13371	Waits for the call to be accepted by workers and starts collecting the results.
13372	Dispatches the reply to the proper queue.
13373	Guess the type name of a serialized value.
13374	Deserializes a value of a given type.
13375	Handles the token for an opening parenthesis.
13376	Handle the right parenthesis token.
13377	Retrieve a feature collection by content ID. Returns ``None`` if the collection does not exist. Optionally, specify feature names to retrieve or use wildcards.
13378	Retrieves multiple feature collections corresponding to the list of feature IDs provided.
13379	Adds feature collections to the store. This efficiently adds multiple FCs to the store. The iterable of ``items`` given should yield tuples of ``(content_id, FC)``.
13380	Deletes the corresponding feature collection. If the FC does not exist, then this is a no-op.
13381	Deletes all feature collections.
13382	Deletes the underlying ES index if it exists. Use with caution as this operation is destructive and may affect multiple ElasticStore instances.
13383	Scan for FCs in the given ID ranges.
13384	Scan for ids only in the given id ranges.
13385	Scan for FCs with a given prefix.
13386	Scans for ids with a given prefix.
13387	Perform a fulltext search and yield the results as triples (score, identifier, FC).
13388	Fulltext search for identifiers. Yields an iterable of triples (score, identifier) corresponding to the search results of the fulltext search.
13389	Keyword scan for feature collections. It searches for FCs with terms in each of the query's indexed fields. At least one of query_id or query_fc must be provided.
13390	Performs a keyword scan for IDs using the provided query, searching for FCs with terms in each of the query's indexed fields. At least one of `query_id` or `query_fc` must be provided. If `query_fc` is `None`, it is retrieved automatically corresponding to `query_id`. Yields `content_id` for each hit.
13391	Retrieves identifiers of FCs that have a feature value ``val`` in the feature named ``fname``. Note that ``fname`` must be indexed.
13392	Maps feature names to ES's "_source" field.
13393	Creates Elasticsearch filters for key ranges used in scanning.
13394	Create the index with specified settings and handle potential errors.
13395	Create the field type mapping for an Elasticsearch index.
13396	Retrieve the field mappings. Useful for debugging.
13397	This function retrieves the field types of the specified index and document type, which is useful for debugging purposes.
13398	Creates a disjunction for keyword scan queries.
13399	Returns the total size of a feature collection in bytes.
13400	Count bytes of all feature collections whose key satisfies one of the predicates in `filter_preds`. The byte counts are binned by filter predicate.
13401	Constructs a nicely formatted string representation of a feature counter dictionary.
13402	Takes care of command line options and processes them accordingly, either by running the default go function or initializing a Searcher with specified files and source.
13403	Escape the error, and wrap it in a span with class ``error-message``
13404	Create a human-readable representation of a link on the 'TO'-side
13405	Create a human-readable representation of a unique identifier.
13406	Check the model for uniqueness constraint violations.
13407	Check the model for integrity violations on an association in a particular direction.
13408	Check the model for integrity violations across a subtype association.
13409	Returns a index creation function for the feature names given. This can be used with the `Store.define_index` method to create indexes on any combination of features in a feature collection.
13410	Transforms integers to their big-endian binary representation and converts strings to lowercase UTF-8.
13411	Add feature collections to the store. Given an iterable of tuples of the form `(content_id, feature collection)`, add each to the store and overwrite any that already exist. This method optionally accepts a keyword argument `indexes`, which by default is set to `True`. When it is `True`, it will *create* new indexes for each content object for all indexes defined on this store. Note that this will not update existing indexes.
13412	Deletes all storage. This includes every content object and all index data.
13413	Retrieve feature collections in a range of ids. Returns a generator of content objects corresponding to the content identifier ranges given.
13414	Retrieve content ids in a range of ids. Returns a generator of `content_id` corresponding to the content identifier ranges given. `key_ranges` can be a possibly empty list of 2-tuples, where the first element of the tuple is the beginning of a range and the second element is the end of a range. To specify the beginning or end of the table, use an empty tuple `()`. If the list is empty, then this yields all content ids in the storage.
13415	Returns a generator of content identifiers that match an indexed value. If the index is not registered, it raises a KeyError.
13416	Returns a generator of content identifiers that match a prefix of an indexed value.
13417	Returns ids that match a prefix of an indexed value, and the specific key that matched the search prefix.
13418	Implementation for index\_scan\_prefix and index\_scan\_prefix\_and\_return\_key, parameterized on return value function. The function retrieves keys from an index that start with a given prefix and applies a transformation function to each key.
13419	Adds an index to a store instance. Defines how to create and transform the index values, and specifies that the index will be automatically updated on calls to :meth:`~dossier.fc.store.Store.put`.
13420	Adds new index values for the given pairs of content identifiers and feature collections.
13421	Add new raw index values. Adds a new index key corresponding to `(idx_name, transform(val), content_id)`. This method bypasses the *creation* of indexes from content objects, but values are still transformed.
13422	Returns a generator of index triples for the given ids and fcs.
13423	Returns index transforms for `name`.
13424	Check if a package name exists on PyPI
13425	Adds direction to the element based on the specified argument.
13426	get the xsd name of a S_DT
13427	Get the referred attribute.
13428	Build an xsd simpleType out of a S_CDT.
13429	Build an xsd simpleType out of a S_EDT.
13430	Builds an xsd complexType out of a S_SDT
13431	Build an xsd simpleType out of a S_UDT
13432	Build a partial xsd tree out of a S_DT and its sub types S_CDT, S_EDT, S_SDT, and S_UDT.
13433	Build an xsd complex element out of a O_OBJ, including its O_ATTR.
13434	Build an xsd complex element out of a C_C, including its packaged S_DT and O_OBJ.
13435	Build an XSD schema from a Bridgepoint component.
13436	Indents an XML string with four spaces and adds an additional line break after each node.
13437	Gets the full list of bikes from the bikeregister site.
13438	Set positional information on a node using lexer data and span information.
13439	Decorator for adding positional information to returning nodes.
13440	Sets the end position of the token and returns the token.
13441	Handles the token for the "!=" operator
13442	Updates the end position of the lex token when an arrow token is encountered.
13443	Handles the "<=" token.
13444	Sets the endlexpos to the current lexpos plus the length of the token value and returns the token.
13445	Identifies and processes an equal sign token.
13446	Updates the lexpos to the end of the current token and returns the token.
13447	Updates the end position of the token and returns it.
13448	Updates the end position of the lex token for a right square bracket.
13449	Handles the lexical analysis for the "?" token. Updates the token's end position based on its length.
13450	Decrement the token position
13451	Sets the end lex position of a token.
13452	Updates the lexpos of the token `t` to account for the length of the token's value and returns the token.
13453	Create message content and properties to create queue with QMFv2
13454	Create message content and properties to delete queue with QMFv2
13455	Create message content and properties to list all queues with QMFv2
13456	Create message content and properties to list all exchanges with QMFv2
13457	Create message content and properties to purge queue with QMFv2.
13458	'''
Creates an email message with optional attachments.
:param to: The recipient of the email.
:param subject: The subject of the email.
:param msgHtml: The HTML content of the email.
:param msgPlain: The plain text content of the email.
:param attachments: A list of file paths to attach to the email.
:return: A dictionary containing the raw encoded email.
'''
13459	Returns the text from an image at a given url.
13460	Returns true or false based on if the OCR process has read actual words.
13461	Parse command line options and launch the interpreter.
13462	Serialize a value from an xtuml metamodel instance.
13463	Serialize an xtuml metamodel association.
13464	Serialize an xtUML metamodel class.
13465	Command line execution for searching files using n-grams.
13466	Searches files satisfying a query by decomposing the query into ngrams, scoring documents containing these ngrams, and returning the top ten documents with the highest scores.
13467	Partitions a list into two based on a condition.
13468	Run the program. Takes a list of postcodes or coordinates and returns various information about them. If using the cli, make sure to update the bikes database with the -u command.
13469	Adds to the context BiDi related variables
13470	Find links that correspond to the given arguments.
13471	Internal method to formalize association and expose referential attributes on instances.
13472	Compute the lookup key for an instance i.e a foreign key that can be used to identify an instance at the end of the link
13473	Compute the index key that can be used to identify an instance on the link.
13474	Obtain the attribute type by its name.
13475	Create and return a new instance. Set attributes with initial default values, positional arguments, and named arguments. Batch relate referential attributes if necessary.
13476	Obtain a sequence of all instances in the metamodel.
13477	Define a new class in the metamodel, and return its metaclass.
13478	Sends header, payload, and topics through a ZeroMQ socket.
13479	Receive header, payload, and topics through a ZeroMQ socket.
13480	This function identifies and outputs lines of unused code in the project, and exits if the number of identified lines exceeds a specified cutoff.
13481	Take a string or list of strings and try to extract all the emails
13482	Marks a method as RPC.
13483	Collects methods which are speced as RPC.
13484	If there is a postcode in the URL, it validates and normalizes it.
13485	Progress to the next identifier and return the current one.
13486	A System Model contains top-level packages and processes each child recursively.
13487	A Component contains packageable elements.
13488	A Package contains packageable elements.
13489	Return the average brightness of the image.
13490	Indicate whether or not to enter a case suite.
13491	Given a valid position in the text document, try to find the position of the matching bracket. Returns -1 if unsuccessful.
13492	Convenience method for selecting a character.
13493	Updates the document formatting based on the new cursor position.
13494	Bottleneck to fix up IronPython string exceptions
13495	Create an input hook for running the Qt4 application event loop.
13496	Get a Mapper instance with the given name, creating a new one if it doesn't already exist. Raises TypeError if invalid name is provided.
13497	Register a path pattern for a web handler.
13498	Register a simple path for a method with optional type casting.
13499	Registers a path pattern and associates it with a function.
13500	Function for registering a simple path.
13501	Calls the first function matching the urls pattern and method.
13502	Reimplemented to the store history.
13503	Called when the up key is pressed. Returns whether to continue processing the event.
13504	Called when the down key is pressed. Returns whether to continue processing the event.
13505	If possible, set the input buffer to a previous history item.
13506	If possible, set the input buffer to a subsequent history item. Returns True if the input buffer was changed.
13507	Handles replies for code execution to update session history length
13508	Check if history movement is locked
13509	Retrieves a history item, possibly with temporary edits.
13510	Replace the current history with a sequence of history items.
13511	If there are edits to the current input buffer store them.
13512	Event handler for button click. Handles closing the application and performing cleanup.
13513	Generates a list of Record objects given a DataFrame. Each Record instance has a series attribute which is a pandas.Series of the same attributes in the DataFrame. Optional data can be passed in through kwargs which will be included by the name of each object.
13514	Converts a collection of Record objects into a pandas DataFrame.
13515	Run the full turntable process on a pandas DataFrame using a given method to process each row. Returns the DataFrame processed by the method.
13516	Initializes the given argument structure as properties of the class to be used by name in specific method execution.
13517	Updates the subscriptions of a SUB socket based on the current topics.
13518	receive and parse a message, then log it.
13519	Performs an N-way merge operation on sorted lists. Yields tuples of the form (item, iterator). Complexity O(N lg N).
13520	Return an iterator on an object living on a remote engine.
13521	Convert a notebook to the v2 format.
13522	Return this platform's maximum compatible version.
13523	Retrieve a PEP 302 "importer" for the given path item. If no importer exists, use the built-in import machinery. Cache the importer if it was created by a path hook.
13524	Load the real StringIO on demand
13525	Convert a version string to a chronologically-sortable key
13526	Return True when distribute wants to override a setuptools dependency. We want to override when the requirement is setuptools and the version is a variant of 0.6.
13527	Add a package distribution to the working set, with optional parameters for insertion order and replacement.
13528	Find all activatable distributions in `plugin_env`.
13529	Return absolute location in cache for `archive_name` and `names`.
13530	Parse a single entry point from string `src`
13531	Parse and cache metadata
13532	Recompute this distribution's dependencies.
13533	Parse a notebook filename and return the notebook format (json/py) and the notebook name.
13534	Remove leading whitespace from each line of `txt` if `header` is 'Description', otherwise join the lines with a single space.
13535	Reimplemented to disconnect signal handlers and event filter.
13536	Reimplemented to handle signal connections and event filtering when the widget is shown.
13537	Returns a cursor with text between the start position and the current position selected
13538	Updates the current item based on the current text.
13539	Registers the models of the app with the given "appName" for the admin site.
13540	Return disk partitions.
13541	Returns system CPU times as a named tuple.
13542	Returns system per-CPU times as a list of named tuples.
13543	Use the raw Win32 handle of sys.stdin to do non-blocking reads
13544	Use a blocking stdin read
13545	update visibility of the tabBar depending of the number of tab
13546	Creates a new frontend attached to the same kernel as the current tab.
13547	Insert a tab with a given frontend in the tab bar and give it a name.
13548	Adds action to menu and `self`, and sets the shortcut context to widget-only if `defer_shortcut` is True
13549	Return a function `fun` that will execute `magic` on the active frontend.
13550	Clean "All Magics..." menu and repopulate it with `listofmagic`
13551	Forward the close event to every tab contained by the window. If there are multiple tabs, prompts the user to confirm closing all tabs and stopping all kernels. If only one tab is present, prompts the user to confirm closing the console and stopping the kernel. If the user cancels the confirmation, the event is ignored. If the user confirms, all tabs are closed, and the event is accepted.
13552	Generate hashed password and salt for use in notebook configuration.
13553	Verify that a given passphrase matches its hashed version.
13554	Generates a HTML snippet for displaying a boolean value on the admin page as a checkbox input that can be toggled via AJAX. Optionally, can display a static image based on an override value with no user interaction.
13555	Generate a short title for an object, indent it depending on the object's depth in the hierarchy.
13556	Utility method to find the overridden getter function for a given property or generate a new one
13557	Handle an AJAX toggle_boolean request
13558	Implement a lookup for object level permissions.
13559	Implement a lookup for object level permissions. Basic functionality similar to ModelAdmin.has_delete_permission but includes the obj parameter.
13560	Add children recursively to a binary tree.
13561	Make a symmetrical binary tree with a given number of levels.
13562	Submit jobs via client where G describes the time dependencies.
13563	Make sure that jobs started after their dependencies have completed.
13564	Build a set of color attributes in a class.
13565	Returns a full copy of the object, optionally renaming it.
13566	Add a new color scheme to the table.
13567	Set the currently active color scheme. Names are compared in a case-insensitive way by default, but this can be changed by setting the parameter case_sensitive to true.
13568	Return the lib dir under the 'home' installation scheme
13569	Method to process messages from the subscribe channel's messages.
13570	Method to capture raw_input
13571	Method to wait for a kernel to be ready.
13572	Sets the style to the specified Pygments style.
13573	Returns a QTextCharFormat for token or None.
13574	Returns a QTextCharFormat for token by formatting lines and setting HTML content.
13575	Returns a QTextCharFormat for token by reading a Pygments style.
13576	Searches the PATH for the given command and returns its path
13577	Convert a path to its canonical, case-normalized, absolute version.
13578	Verify that namespace packages are valid.
13579	Verifies that the entry_points map is parseable.
13580	Determine if the input source ends in a blank, either a newline or a line consisting of whitespace.
13581	Determine if the input source ends in two blanks. A blank is either a newline or a line consisting of whitespace.
13582	Handle the `files = !ls` syntax.
13583	Handle the `a = %who` syntax.
13584	Handle inputs that start with '>>> ' syntax.
13585	Handle inputs that start classic IPython prompt syntax.
13586	Push one or more lines of input. This stores the given lines and returns a status code indicating whether the code forms a complete Python block or not.
13587	Check whether a block of interactive input can accept more input.
13588	Compute the new indentation level for a single line.
13589	Store one or more lines of input. If input lines are not newline-terminated, a newline is automatically appended.
13590	Return input and raw source and perform a full reset
13591	Process lines that start with %%, which marks cell magics.
13592	Append new content for a cell magic in line mode.
13593	Process and translate a cell of input.
13594	Push one or more lines of IPython input.
13595	Initialize observer storage
13596	Post notification to all registered observers.
13597	Find all registered observers that should recieve notification
13598	Adds an observer callback to the notification center. The callback will be invoked upon posting notifications matching the specified type and sender.
13599	Add a new background job and start it in a separate thread.
13600	Update the status of the job lists. This method moves finished jobs to one of two lists: - self.completed: jobs which completed successfully - self.dead: jobs which finished but died. It also copies those jobs to corresponding _report lists. These lists are used to report jobs completed/dead since the last update, and are then cleared by the reporting function after each call.
13601	Report summary for a given job group.
13602	Flush a given job group and return True if the group had any elements.
13603	Prints the status of newly finished jobs. Returns True if any new jobs are reported. This call resets its own state every time, so it only reports jobs which have finished since the last time it was called.
13604	Print a status of all jobs currently being managed.
13605	Common initialization for all BackgroundJob objects
13606	Inserts a value into the ListVariable at the specified index.
13607	Retrieve a copy of the Environment. Note that this is a shallow copy.
13608	Declare an environment variable as a special variable. This can be used even if the environment variable is not present.
13609	Declare an environment variable as a list-like special variable.
13610	Declare an environment variable as a set-like special variable.
13611	Change the working directory that processes should be executed in.
13612	Swaps two cities in the route.
13613	Calculates the length of the route.
13614	create an empty record
13615	Ensure that an incorrect table doesn't exist.
13616	Convert a list to a dictionary using specified keys.
13617	Turns a mongodb-style search dict into an SQL query.
13618	Standard warning printer. Gives formatting consistency. Output is sent to io.stderr (sys.stderr by default). Options: - level(2): allows finer control: 0 -> Do nothing, dummy function. 1 -> Print message. 2 -> Print 'WARNING:' + message. (Default level). 3 -> Print 'ERROR:' + message. 4 -> Print 'FATAL ERROR:' + message and trigger a sys.exit(exit_val). - exit_val (1): exit value returned by sys.exit() for a level 4 warning. Ignored for all other levels.
13619	Read a config file, validate it using a JSON schema, and merge with default values if specified.
13620	Output:
Output a simple table with several columns.
13621	Output:
Generate an HTML link tag with the specified URL, text, classes, and target.
13622	Output a script tag to a JS file.
13623	Output a link tag to a CSS stylesheet.
13624	Generate an HTML image tag with the given URL, alt text, classes, and style.
13625	Subtract the arg from the value
13626	Multiply the arg with the value
13627	Divide the arg by the value.
13628	Return the modulo value.
13629	Return the verbose name of a model.
13630	Split user input into initial whitespace, escape character, function part and the rest.
13631	Register command-line options for processing.
13632	Add a builtin and save the original.
13633	Remove an added builtin and re-set the original.
13634	Remove any builtins that might have been added by `add_builtins`, or restore overwritten ones to their previous values.
13635	Finds the true URL name of a package, implementing case-insensitivity.
13636	Yields all links with the given relations
13637	Turn a command-line argument into a list.
13638	Main entry point for Coverage tool.
13639	Add a specialized option that is the action to execute.
13640	Callback for an option that adds to the `actions` list.
13641	Process command line interface for Coverage.
13642	Display an error message, or the named topic.
13643	Deal with help requests. Return True if it handled the request, False if not.
13644	Check for conflicts and problems in the options. Returns True if everything is ok, or False if not.
13645	Implementation of 'coverage run'.
13646	Run the command 'coverage debug' to display the status of sys and data.
13647	Reconstruct an object serialized by serialize_object from data buffers.
13648	Sets the hook in the `sys` module if it is not already set to the current hook.
13649	Decorator to log unhandled exceptions raised in a method.
13650	boolean check for whether a string is a zmq url
13651	validate a url for zeromq
13652	Validate a potentially nested collection of URLs.
13653	Retrieve values from the global namespace using keys.
13654	Selects and returns `n` random ports that are available.
13655	Turn a function into a remote function.
13656	Turn a function into a parallel remote function
13657	call a function on each element of a sequence remotely. This should behave very much like the builtin map, but return an AsyncMapResult if self.block is False.
13658	Get the last n items in readline history.
13659	Set the autoindent flag, checking for readline support. If called with no arguments, it acts as a toggle.
13660	Initialize logging based on command-line options.
13661	Save the state of hooks in the sys module. This method should be called after `self.user_module` is created.
13662	Restore the state of the sys module.
13663	Registers a function for calling after code execution.
13664	Return a new 'main' module object for user code execution.
13665	Cache a main module's namespace. Keeps a reference to the namespace of the __main__ module around to prevent memory leaks while allowing objects from the last execution to be accessible.
13666	Initialize all user-visible namespaces to their minimum defaults. Certain history lists are also initialized here, as they effectively act as user namespaces.
13667	Get a list of references to all the namespace dictionaries in which IPython might store a user-created object.
13668	Clear all internal namespaces and release references to user objects. If new_session is True, a new history session will be opened.
13669	Delete a variable from the various namespaces, ensuring no hidden references remain.
13670	Clear selective variables from internal namespaces based on a specified regular expression.
13671	Inject a group of variables into the IPython user namespace.
13672	Find an object in the available namespaces.
13673	Second part of object finding, to look for property details.
13674	Find an object and return a struct with info about it.
13675	Inspect and execute a method on an object using the inspector system.
13676	Sets up the command history, and starts regular autosaves.
13677	Catch GUI exceptions to prevent them from being caught by IPython's CrashHandler. Instead, use this excepthook to print a regular traceback using InteractiveTB. This is helpful for debugging and does not interfere with IPython's own exception handling.
13678	Displays the exception that just occurred. If nothing is known about the exception, this method should be used for presenting user tracebacks.
13679	Actually show a traceback. Subclasses may override this method to put the traceback on a different place, like a side channel.
13680	Display the syntax error that just occurred without a stack trace. If a filename is provided, it updates the exception's filename.
13681	handle auto-indent
13682	Return the completed text and a list of completions.
13683	Adds a new custom completer function at a specified position in the completers list.
13684	Set the frame of the completer.
13685	Executes the given line magic.
13686	Find and return a magic of the given type by name. Returns None if the magic isn't found.
13687	Define a new macro
13688	Call the given cmd in a subprocess using os.system
13689	Shows visual feedback by rewriting input lines that cause automatic calling to kick in.
13690	Get a list of variable names from the user's namespace.
13691	Evaluate a dict of expressions in the user's namespace.
13692	Evaluate a Python expression in the user namespace. Returns the result of the evaluation.
13693	Like safe_execfile, but for .ipy files with IPython syntax.
13694	Special method to call a cell magic with the data stored in self.
13695	Run a complete IPython cell with options to store history and avoid side effects.Handles cell magics, prefiltering, and execution with error handling and post-execution functions.
13696	Run a sequence of AST nodes. The execution mode depends on the interactivity parameter. Parameters ---------- nodelist : list A sequence of AST nodes to run. cell_name : str Will be passed to the compiler as the filename of the cell. interactivity : str 'all', 'last', 'last_expr' or 'none', specifying which nodes should be run interactively (displaying output from expressions). 'last_expr' will run the last node interactively only if it is an expression (i.e. expressions in loops or other blocks are not displayed. Other values for this parameter will raise a ValueError.
13697	Activate pylab support at runtime This turns on support for matplotlib preloads into the interactive namespace all of numpy and pylab and configures IPython to correctly interact with the GUI event loop The GUI backend to be used can be optionally selected with the optional gui argument
13698	Expand python variables in a string. The depth argument indicates how many frames above the caller should be walked to look for the local namespace where to expand variables. The global namespace for expansion is always the user's interactive namespace.
13699	Make a new tempfile and return its filename.
13700	Return a string containing a set of input history slices specified by a range string.
13701	Get a code string from history, file, url, or a string or macro. This is mainly used by magic functions.
13702	This method is responsible for performing cleanup operations and saving persistent data at the time of exit. It includes closing the history session, removing temporary files, resetting user namespaces, and running user hooks.
13703	Broadcast a message from one engine to all others.
13704	send a message from one to one-or-more engines.
13705	Decorator to skip tests based on a condition, raising SkipTest if true.
13706	Make function raise KnownFailureTest exception if given condition is true.
13707	Filter deprecation warnings while running the test suite.
13708	list profiles in a given root directory
13709	List profiles that are bundled with IPython.
13710	Find a distribution matching requirement req. If there is an active distribution for the requested project that meets the version requirement, return it. If the active distribution does not meet the requirement, raise VersionConflict. If there is no active distribution for the project, return None.
13711	Run the given command; waits for it to finish; then returns all output as a string. STDERR is included in output. If the full path to the command is not given then the path is searched.
13712	Get command absolute path.
13713	Support iterators over a file-like object.
13714	Sends a string to the child process and returns the number of bytes written. If a log file is set, it also writes the data to the log file.
13715	Sends a SIGINT to the child. It does not require the SIGINT to be the first character on a line.
13716	Recompile unicode regexes as bytes regexes. Overridden in subclass.
13717	Seeks through the stream until a pattern is matched. The pattern can be a StringType, EOF, a compiled re, or a list of any of those types. Returns the index into the pattern list on a successful match. This may raise exceptions for EOF or TIMEOUT. If the pattern was a list, the first match in the stream is chosen, and if more than one pattern matches at that point, the leftmost in the pattern list is chosen. If the timeout is -1, it defaults to the self.timeout value. A list entry may be EOF or TIMEOUT instead of a string. This will catch these exceptions and return the index of the list entry instead of raising the exception.
13718	This function, `expect_loop`, is a common loop used within an `expect` function in a library like `pexpect` or `paramiko`. It searches for a specific pattern (`searcher`) in the buffer of incoming data. If the pattern is found, it updates the buffer and returns the match. If the timeout is exceeded, it raises a `TIMEOUT` exception. If the end of the file (EOF) is reached, it raises an `EOF` exception. The function handles these exceptions and updates the buffer and match variables accordingly.
13719	Recompile bytes regexes as unicode regexes.
13720	Search 'buffer' for the first occurrence of one of the search strings.
13721	Searches the buffer for the first occurrence of any of the stored regular expressions, updating the start, match, and end attributes based on the found index.
13722	Progress Monitor listener that logs all updates to the given logger
13723	Unpacks a directory using the same interface as for archives. Raises `UnrecognizedFormat` if `filename` is not a directory.
13724	Emit a message to the user with optional debugging and verbosity controls.
13725	Get the output of the last command executed. If there are no errors, return a message indicating that there is no last error. If there are errors, return the last error message.
13726	Wrapper for subprocess.check_output.
13727	Find the source for `filename`. Returns two values: the actual filename, and the source. The source returned depends on the file type and location.
13728	Returns a sorted list of the arcs actually executed in the code.
13729	Return a sorted list of arcs that were not executed.
13730	Return a sorted list of executed arcs missing from the code.
13731	Returns a list of line numbers that have more than one exit.
13732	How many total branches are there?
13733	Return arcs that weren't executed from branch lines.
13734	Get stats about branches. Returns a dict mapping line numbers to a tuple: (total_exits, taken_exits).
13735	Set the number of decimal places used to report percentages.
13736	Returns a single percentage value for coverage.
13737	Returns the percent covered, as a string, without a percent sign.
13738	Applies cls_name to all needles found in haystack.
13739	Returns the given string with the text that matches any of the keywords highlighted.
13740	Highlights the matched words in the given string based on a list of keywords.
13741	Run 'func' under os sandboxing
13742	Remove a single pair of quotes from the endpoints of a string.
13743	Indent a string a given number of spaces or tabstops.
13744	Return the input string centered in a 'marquee'.
13745	Remove some latex-type format codes.
13746	Equivalent of textwrap.dedent that ignores unindented first line
13747	Wraps multiple paragraphs in the text to fit a specified width.
13748	Calculate optimal information to columnize a list of strings
13749	Return list item by index or default if index is out of bounds.
13750	Return a nested list and info to columnize items
13751	Collects whitespace-separated fields from a list of strings. Allows quick awk-like usage.
13752	Build argv to be passed to kernel subprocess
13753	set up ssh tunnels if needed
13754	Pretty print the object's representation.
13755	Like `pretty` but print to stdout.
13756	Get a reasonable method resolution order of a class and its superclasses for both old-style and new-style classes.
13757	The default print function used for objects that do not provide one and are not builtin objects. It checks for user-defined `__repr__` methods and prints the object's attributes if `verbose` mode is enabled.
13758	Factory that returns a pprint function useful for sequences.
13759	Factory that returns a pprint function used by the default pprint of dicts and dict proxies.
13760	ppt
13761	The pprint function for regular expression patterns.
13762	The pprint for classes and types.
13763	Base pprint for all functions and builtin functions.
13764	Base pprint for all exceptions.
13765	Add a pretty printer for a given type.
13766	Add a pretty printer for a type specified by the module and name of a type rather than the type object itself.
13767	Add literal text to the output.
13768	Add a breakable separator to the output. This does not mean that it will automatically break here. If no breaking on this position takes place, the `sep` is inserted, which defaults to one space.
13769	End a group. Adjusts indentation, pops the most recent group from the stack, and if the group does not contain breakables, removes it from the queue. If `close` is provided, it appends the provided string to the text.
13770	Flush data that is left in the buffer.
13771	Pretty print the given object.
13772	Return a color table with fields for exception reporting.
13773	Write row with translations to ods file into specified sheet and row_no
13774	Get the current clipboard's text on Windows. Requires Mark Hammond's pywin32 extensions.
13775	Get the clipboard's text on OS X.
13776	Get the clipboard's text using Tkinter.
13777	Returns a safe build_prefix
13778	Rekey a dict that has been forced to use str keys where there should be ints by json.
13779	Extract ISO8601 dates from unpacked JSON
13780	squash datetime objects into ISO8601 strings
13781	Packs datetime objects into JSON format using ISO8601 standard.
13782	Clean an object to ensure it's safe to encode in JSON. Atomic, immutable objects are returned unmodified. Sets and tuples are converted to lists, lists are copied, and dicts are also copied. Note: dicts with keys that could cause collisions upon encoding will raise a ValueError.
13783	Verifies that the installation directory is a suitable `.pth`-capable directory and handles related configurations and checks.
13784	Write an executable file to the scripts directory
13785	simple function that takes args prints a short message sleeps for a time and returns the same args
13786	Create and return the `ArgumentParser` which will be used to parse the arguments to this command.
13787	convert .pyx extensions to .c
13788	Watch iopub channel and print messages
13789	Create a package finder appropriate to this install command. This method is meant to be overridden by subclasses, not called directly.
13790	Adjust the log level when log_level is set.
13791	Start logging for this application. The default is to log to stdout using a StreamHandler. The log level starts at logging.WARN, but this can be adjusted by setting the ``log_level`` attribute.
13792	ensures the flags dictionary is valid
13793	Prints the alias part of the help.
13794	Prints the flag part of the help.
13795	Prints the subcommand part of the help.
13796	Prints help for each Configurable class in self.classes. If classes=False (default), only flags and aliases are printed.
13797	Prints usage and examples at the end of the command line help string.
13798	Fire the traits events when the configuration is updated.
13799	Initializes a subcommand with provided arguments.
13800	Flatten flags and aliases so cl - args override as expected
13801	Parse the command line arguments and handle different cases such as help, subcommands, version, and configuration loading.
13802	Load a .py based config file by filename and path.
13803	Generates a default configuration file from Configurables.
13804	Choose k random elements of array.
13805	Produce a sequence of formatted lines from a sequence of pairs (label, data), with nicely formatted output ready to print.
13806	Write a line of debug output. If the 'pid' option is enabled, prepend the process ID to the message.
13807	Update all the class traits having "config=True" as metadata.
13808	Generates a ReST-formatted help string for the given class, using the provided instance's trait values if specified.
13809	Retrieves the help string for a single trait, optionally using the current trait values from an instance.
13810	Get the configuration section for a class, including a description, parent classes, and trait help text.
13811	Unset _instance for this class and singleton parents.
13812	Returns a global instance of this class, creating a new instance if none have been created, and returning a previously created instance if one already exists. Arguments and keyword arguments passed to this method are passed to the class's `__init__` method during instantiation. The example demonstrates using the `instance` method to ensure a singleton pattern for a class and its subclasses.
13813	Add detail from traceback inspection to error message of a failure.
13814	A light exception handler that prints a small message with a traceback and configuration details, depending on whether the code is running in an interactive shell or not.
13815	Reimplemented to ensure that signals are dispatched immediately
13816	Reimplemented to emit signal.
13817	Read a notebook from a file like object.
13818	Read from a pipe ignoring EINTR errors. This is necessary because when reading from pipes with GUI event loops running in the background, often interrupts are raised that stop the command from completing.
13819	Open a command in a shell subprocess and execute a callback.
13820	Split a command line s arguments in a shell-like manner. This function is a modified version of the standard library s shlex.split() function, but with a default of posix=False for splitting, so that quotes in inputs are respected. If strict=False, then any errors shlex.split would raise will result in the unparsed remainder being the last element of the list, rather than raising.
13821	Compress a directory history into a new one with at most 20 entries.
13822	Class decorator for subclasses of the main Magics class. Ensures methods decorated as line/cell magics are registered in the class instance.
13823	Utility function to store a function as a magic of a specific kind.
13824	Decorator factory for methods in Magics subclasses.
13825	Decorator factory for standalone functions that registers magic functions with IPython in a given magic kind context.
13826	Return dict of documentation of magic functions. The return dict has the keys 'line' and 'cell', corresponding to the two types of magics we support. Each value is a dict keyed by magic name whose value is the function docstring. If a docstring is unavailable, the value of `missing` is used instead. If brief is True, only the first line of each docstring will be returned.
13827	Registers one or more instances of Magics subclass with IPython to use their magic functions.
13828	Exposes a standalone function as a magic function for IPython. This will create an IPython magic (line, cell or both) from a standalone function.
13829	Formats a string for LaTeX inclusion by escaping characters and replacing certain patterns with LaTeX commands.
13830	Parse options passed to an argument string.
13831	Make an entry in the options_table for fn, with value optstr
13832	Show a basic reference about the GUI Console.
13833	Factory function to create a properly initialized task.
13834	Return task info dictionary from task label. Internal function, primarily used in migrations since the model methods aren't available.
13835	Find and return a callable object from a task info dictionary.
13836	Calculate the next run time of this task based on the last run time and schedule.
13837	Internal instance method to submit this task for running immediately. Does not handle any iteration, end-date, etc., processing.
13838	Internal method executed by a worker process to run a task, handling task completion and iteration logic.
13839	Instance method to run this task immediately.
13840	Run a callable with a specified number of iterations.
13841	Class method to run a one-shot task, immediately.
13842	Set the url file.

Here we don't try to actually see if it exists for is valid as that
is hadled by the connection logic.
13843	Promote engine to listening kernel, accessible to frontends.
13844	Execute a test described by a YAML file.
13845	Create an interrupt event handle.

The parent process should use this static method for creating the interrupt event that is passed to the child process. It should store this handle and use it with ``send_interrupt`` to interrupt the child process.
13846	Run the poll loop. This method never returns.
13847	Filter a namespace dictionary by name pattern and item type.
13848	Returns a dictionary of all objects in a namespace dictionary that match type_pattern and filter.
13849	Check for presence of mutually exclusive keys in a dictionary.
13850	Draw a figure if the backend is interactive. Queue up the figure for display if it has been modified. If matplotlib was manually set to non-interactive mode, this function should be a no-op.
13851	Send all figures that changed. This is meant to be called automatically and will call show() if, during prior code execution, there had been any calls to draw_if_interactive. This function is meant to be used as a post_execute callback in IPython, so user-caused errors are handled with showtraceback() instead of being allowed to raise. If this function is not called from within IPython, then these exceptions will raise.
13852	Send the given figure as a PNG payload using the IPython inline backend.
13853	Load an IPython extension by its module name.
13854	Unload an IPython extension by its module name.
13855	Generate a list of n random ports near the given port.
13856	Initialize a Tornado web app and HTTP server, handle SSL options, and bind to a random available port.
13857	Spawn a confirmation dialog when receiving SIGINT, and handle ^C^C with a more forceful signal handler.
13858	confirm shutdown on ^C
13859	Shutdown all kernels
13860	Price European and Asian options using a Monte Carlo method.
13861	Replace in `text` all occurrences of any key in the given dictionary by its corresponding value. Returns the new string.
13862	Render the string without justifying or updating the width or txtwidth attributes.
13863	Launches a localhost kernel, binding to the specified ports.
13864	Create a zipfile, update its name with the current version, and copy it to the working directory.
13865	Fix the version in metadata.txt.
13866	Return whether an object is mappable or not.
13867	Returns the pth partition of q partitions of seq.
13868	Monkeypatch pexpect to prevent unhandled exceptions at VM teardown.
13869	Run the given file interactively.
13870	Run the given source code interactively. Inputs: - source: a string of code to be executed, or an open file object we can iterate over. Optional inputs: - interact (False): if true, start to interact with the running program at the end of the script. Otherwise, just exit. - get_output (False): if true, capture the output of the child process (filtering the input commands out) and return it as a string. Returns: A string containing the process output, but only if requested.
13871	Generate a Cobertura-compatible XML report for `morfs`. `morfs` is a list of modules or filenames. `outfile` is a file object to write the XML to.
13872	Add to the XML report for a single file.
13873	Download a segment of pi from super-computing.org if the file is not already present.
13874	Add up a list of frequency counts to get the total counts.
13875	Read digits of pi from a file and compute the n digit frequencies.
13876	Read digits from a .txt file
13877	Consumes digits of pi and computes the frequency counts of each digit, with an option to normalize the counts.
13878	Consume digits of pi and compute 2 digits freq. counts.
13879	Consume digits of pi and compute n digits frequency counts. This function is intended for n in the range of 1 to 6.
13880	Plot two digits frequency counts using matplotlib.
13881	Plot one digit frequency counts using matplotlib.
13882	Print the value of an expression in the caller's frame. Takes an expression, evaluates it in the caller's frame, and prints both the given expression and the resulting value (along with a debug mark indicating the name of the calling function). The input must be of a form suitable for eval().
13883	Reverses a URL using Django's `reverse` function, with optional query parameters.
13884	Check if the base string begins with an underscore but not with two underscores.
13885	A unittest suite for one or more doctest files.
13886	Debug a single doctest docstring
13887	Debug a test script. `src` is the script, as a string.
13888	Debug a single doctest docstring.
13889	Get all data contained in hashed category 'hashroot' as dict
13890	Compresses category 'hashroot' for faster hset operations. hget will fail if fast_only is True for compressed items.
13891	All keys in the database, or all keys that match a given glob pattern.
13892	returns whether this record should be printed
13893	return the bool of whether `record` starts with any item in `matchers`
13894	Add captured log messages to error output.
13895	Embed IPython at the current point in your program.
13896	Embeds IPython into a running python program.
13897	Prepare new csv writers, write title rows and return them.
13898	Prepare locale dirs for writing po files. Create new directories if they doesn't exist.
13899	Write msgstr for every language with all needed metadata and comment.
13900	Write header into po file for specific lang.Metadata are read from settings file.
13901	Subscribe a user to a service.
13902	Create an option parser with various options for Notifo notification settings.
13903	Run a python module, as though with ``python -m name args...``.
13904	Run a python file as if it were the main program on the command line. `filename` is the path to the file to execute, it need not be a .py file. `args` is the argument array to present as sys.argv, including the first element naming the file being executed. `package` is the name of the enclosing package, if any.
13905	Get source from `filename` and make a code object of it.
13906	Get a code object from a .pyc file.
13907	Return an HTML table from a matrix of items. Optionally include a selected item, header, and footer.
13908	Set the current cursor position and adjust the start and stop positions accordingly.
13909	Cancel the completion when the completer needs to be dismissed. This resets internal variables and clears the temporary buffer of the console where the completion is shown.
13910	Change the selection index, and make sure it stays in the right range
13911	Move cursor up
13912	Move cursor down.
13913	move cursor left
13914	move cursor right
13915	Update the list of completions and highlight the currently selected completion.
13916	Return a dictionary of words and word counts in a string.
13917	Print the n most common words and their counts from the freqs dictionary.
13918	Return the string representation of the job description XML.
13919	Write the XML job description to a file.
13920	Validate the given pin against the schema.Raises DocumentError if the pin is not valid.
13921	Send a shared pin for the given topics.
13922	Delete a shared pin.
13923	Sends a user pin with optional validation.
13924	Deletes a user pin using the provided user token and pin ID.
13925	Subscribes a user to the specified topic. Raises an HTTPError if an HTTP error occurs.
13926	Get the list of topics a user is subscribed to based on the specified user token.
13927	Decorate a function to automatically begin and end a task on the progressmonitor. The function must have a parameter called 'monitor'.
13928	Call before starting work on a monitor, specifying name and amount of work.
13929	Wrap code into a begin and end call on this monitor.
13930	Create a submonitor with the given units
13931	Increment the monitor with N units worked and an optional message
13932	Creates a sub monitor that stands for N units of work in this monitor. The sub task should call .begin (or use @monitored / with .task) before calling updates.
13933	Signal that this task is done. This is completely optional and will just call .update with the remaining work.
13934	Print a string, piping through a pager, using IPython's payload system.
13935	If the build location was a temporary directory, this will move it to a new more permanent location.
13936	Load multiple Python config files and merge them into a single configuration.
13937	Load the config from a file and return it as a Struct.
13938	Load the config file into self.config, with recursive loading.
13939	Update self.config from a flag which can be a dict or Config
13940	Given a list of arguments, decode each argument if it is bytes using the specified encoding, falling back to a default encoding if none is provided.
13941	Parse the configuration and generate a Config object.
13942	Parse command line arguments and return as a Config object.
13943	Decode command-line arguments and parse them using a parser.
13944	self.parsed_data->self.config, parse unrecognized extra args via KVLoader.
13945	Finds and returns the full path of a module, ignoring bytecode files.
13946	Registers a callback to be called with this Launcher's stop_data when the process actually finishes.
13947	Call this to trigger startup actions.
13948	Call this to trigger process stop actions. This logs the process stopping and sets the state to 'after'. Call this to trigger callbacks registered via :meth:`on_stop`.
13949	Send INT, wait a delay, and then send KILL.
13950	Builds `self.args` using all the fields.
13951	Start n instances of the program using mpiexec.
13952	Send a single file from the local machine to a remote machine, retrying if the local file does not exist.
13953	Fetch a single file from a remote location to a local path, retrying up to 10 times if the remote file does not exist.
13954	Returns the total count of engines from the `engines` dictionary.
13955	Start engines by profile or profile_dir. n is ignored, and the `engines` config property is used instead.
13956	Start n copies of the process using the Win HPC job scheduler.
13957	Return the default context with the default values for the basic keys. Because the _trait_changed methods only load the context if they are set to something other than the default value.
13958	Take the output of the submit command and return the job id.
13959	Writes a batch script to the work_dir based on user-specified or default templates, adding job array or queue settings if not already present.
13960	Start n copies of the process using a batch system.
13961	Reimplemented to return a custom context menu for images.
13962	Append raw JPG data to the widget.
13963	Append raw PNG data to the widget.
13964	Append raw SVG data to the widget if the before_prompt is False.
13965	Adds the specified QImage to the document and returns a QTextImageFormat that references it.
13966	Copy the ImageResource with the specified name to the clipboard.
13967	Returns the QImage stored as the ImageResource with 'name'.
13968	insert a raw image, jpg or png
13969	Insert raw SVG data into the widget.
13970	Shows a save dialog for the ImageResource with 'name'.
13971	Called when the `exit_now` attribute changes. If `exit_now` is set to `True`, it stops the event loop after a short delay.
13972	Configure the user's environment by setting various shell and Git environment variables to enhance functionality,特别是 for color output and to disable paging in subprocesses.
13973	Called to show the auto-rewritten input for autocall and friends. The current implementation has a FIXME regarding the payload not being correctly processed by the frontend.
13974	Engage the exit actions.
13975	Send specified text to frontend for next input cell.
13976	Read a filename as UTF-8 configuration data.
13977	Read a list of strings from a configuration section and option, where the values are treated as a comma- and newline-separated list, stripped of whitespace, and return the list of strings.
13978	Read a list of full-line strings. Returns the list of strings.
13979	Read configuration from the `env_var` environment variable.
13980	Read config values from `kwargs` and set them as attributes. If a value is a string and its corresponding key requires it to be a list, convert it to a list.
13981	Read configuration from a .rc file.
13982	Set an attribute on self if it exists in the ConfigParser.
13983	Expand '~'-style usernames in strings.Similar to os.path.expanduser, but computes and returns extra information useful for completions.
13984	Set the delimiters for line splitting.
13985	Split a line of text with a cursor at the given position.
13986	Return a list of all keywords, built-in functions, and names currently defined in self.namespace or self.global_namespace that match the given text.
13987	Computes matches when text contains a dot, using attributes of evaluatable text in the specified namespace.
13988	update the splitter and readline delims when greedy is changed
13989	Returns a list of filenames that match the given text, expanding ~USER type strings and handling filenames with spaces.
13990	Match internal system aliases
13991	Match attributes or global python names
13992	Return the list of default arguments of obj if it is callable, or empty list otherwise.
13993	Find completions for the given text and line context.
13994	Return the state-th possible completion for 'text'. This is called successively with state == 0, 1, 2, ... until it returns None. The completion should begin with 'text'.
13995	Check if a specific record matches the given tests.
13996	Find all the matches for a check dictionary
13997	extract subdict of keys
13998	Should we silence the display hook because of ';'?
13999	Write the output prompt. The default implementation simply writes the prompt to `io.stdout`.
14000	Writes the format data dict to the frontend. Subclasses should override this method to send the entire `format_dict` to the frontends.
14001	This interface is used to log the output based on the specified format dictionary.
14002	Raises an exception if the object is frozen.
14003	Convert a MySQL TIMESTAMP to a Timestamp object.
14004	Schedule call to eventloop from IOLoop.
14005	Dispatch control requests and handle them accordingly.
14006	dispatch shell requests
14007	Register dispatchers for streams.
14008	step eventloop just once
14009	Publish the code request on the pyin stream.
14010	Aborts a specific message by ID.
14011	Clear our namespace.
14012	Returns a prefixed topic for IOPub messages based on the integer ID or identifier of the kernel/engine.
14013	Actions taken at shutdown by the kernel, called by Python's atexit.
14014	Copy sys.modules onto my mod stack
14015	Pop my mod stack and restore sys.modules
14016	Return absolute, normalized path to directory, if it exists; None otherwise.
14017	A name is file-like if it is a path that exists, or it has a directory part, or it ends in .py, or it isn't a legal Python identifier.
14018	Checks if the given object is a class, with additional checks to ensure it can be subclassed.
14019	Is this path a package directory?
14020	Find the full dotted package name for a given python source file name. Returns None if the file is not a python source file.
14021	Draws a 70-char-wide divider with the given label in the middle
14022	Sort key function factory that puts items that match a regular expression last.
14023	Make a function imported from module A appear as if it is located in module B.
14024	Make a class appear to reside in a specified module rather than its actual module.
14025	Return system CPU times as a namedtuple.
14026	Return the process command line as a list of arguments.
14027	Return files opened by process.
14028	Return network connections opened by a process as a list of namedtuples.
14029	Check if a user is in a certain group. The check is skipped for superusers by default.
14030	Load a class by a fully qualified class_path.
14031	Calculate percentage usage of 'used' against 'total'.
14032	simple memoize decorator for functions
14033	Decorator to mark functions as deprecated with an optional replacement function.
14034	Login into Google Docs with user authentication info.
14035	Parse GDocs key from Spreadsheet url.
14036	Make sure temp directory exists and create one if it does not.
14037	Clear temp directory from created csv and ods files during communicator operations.
14038	Uploads file to GDocs spreadsheet. Content type can be provided as argument, default is ods.
14039	Synchronizes local po files with translations on GDocs Spreadsheet, downloads CSV files, merges them, and converts to po files structure. If new msgids appear, creates a new ods, appends content, and uploads it to GDocs.
14040	Download csv files from GDocs and convert them into po files structure.
14041	Upload all po files to GDocs ignoring conflicts. This method looks for all msgids in po_files and sends them as ods to GDocs Spreadsheet.
14042	Clear GDoc Spreadsheet by sending empty csv file.
14043	start a new qtconsole connected to our kernel
14044	Check whether the URL is accessible and returns HTTP 200 OK or raises a ValidationError if not.
14045	Check whether the HTML page contains the content or not and return boolean
14046	Visit the URL and return the HTTP response code.
14047	Helper function that compares the content type header of a given URL with the specified content type and returns a boolean result.
14048	Compares the response code of a given URL with a specified code and returns a boolean value.
14049	Validate the display data by checking if the source is a string, data is a dictionary, and metadata, if provided, is also a dictionary.
14050	Clear the output of the cell receiving output.
14051	Find absolute path to executable cmd in a cross platform manner. This function tries to determine the full path to a command line program using `which` on Unix/Linux/OS X and `win32api` on Windows. Most of the time it will use the version that is first on the users `PATH`. If cmd is `python` return `sys.executable`.
14052	Construct a list of CodeUnits from polymorphic inputs.
14053	A base for a flat filename to correspond to this code unit. Useful for writing files about the code where you want all the files in the same directory but need to differentiate same-named files from different directories.
14054	Return an open file for reading the source of the code unit. If the source is not found in a regular text file, it will check if it is in a zip file. If the source is not found in either, it will raise a CoverageException.
14055	Does it seem like this file should contain Python? This is used to decide if a file reported as part of the execution of a program was really likely to have contained Python in the first place.
14056	Calculate the total seconds in a timedelta object for compatibility between Python 2.6 and 2.7.
14057	Return the result when it arrives. Raises `TimeoutError` if the result does not arrive within the specified timeout. Raises `RemoteError` if the remote call raised an exception.
14058	Wait until the result is available or until `timeout` seconds pass. This method always returns None.
14059	Get the results as a dict, keyed by engine_id.
14060	Abort tasks.
14061	elapsed time since initial submission
14062	interactive wait, printing progress at regular intervals
14063	Republish individual displaypub content dicts.
14064	Wait for the 'status=idle' message that indicates all outputs are ready.
14065	wait for result to complete.
14066	Return the absolute normalized form of `filename`.
14067	Prepare the file patterns for use in a `FnmatchMatcher`. If a pattern starts with a wildcard, it is used as a pattern as-is.  If it does not start with a wildcard, then it is made absolute with the current directory. If `patterns` is None, an empty list is returned.
14068	Find the path separator used in this string, or os.sep if none.
14069	Yield all of the importable Python files in `dirname`, recursively.
14070	Return the relative form of `filename`. The filename will be relative to the current directory when the `FileLocator` was constructed.
14071	Convert a filename to an absolute path with no redundant components and normalized case.
14072	Get data from filename if it is a zip file path. Returns the string data read from the zip file, or None if no zip file could be found or filename isn't in it. The data returned will be an empty string if the file is empty.
14073	Does `fpath` indicate a file in one of our trees?
14074	Does `fpath` match one of our filename patterns?
14075	Map `path` through the aliases. Replace the root of the path with the result root based on the first matching pattern. Adjust the separator style to match the result pattern. If no patterns match, return the original `path`.
14076	Start a kernel with PyQt4 event loop integration.
14077	Start a kernel with wx event loop support.
14078	Start a kernel with the Tk event loop.
14079	Start the kernel, coordinating with the GTK event loop.
14080	Start the kernel, coordinating with the Cocoa CFRunLoop event loop via the matplotlib MacOSX backend.
14081	Enable integration with a given GUI.
14082	Creates an NxN element of the Gaussian Orthogonal Ensemble
14083	Compute the eigvals of mat and then find the center eigval difference.
14084	Return num eigenvalue diffs for the NxN GOE ensemble.
14085	Initialize the item. This calls the class constructor with the appropriate arguments and returns the initialized object.
14086	Parse a YAML file containing test steps.
14087	Takes a step dictionary and parses it into a list of steps.
14088	Create a crash handler and register it to handle exceptions, ensuring it's unset on exit.
14089	Load the config file from specified paths, with error handling options.
14090	Initializes the profile directory based on specified or default location, handling cases where the directory may not exist and potentially creating it.
14091	Auto generates a default config file and stages it into the profile. If the file already exists and overwrite is not enabled, it will not overwrite the existing file.
14092	Write the collected coverage data to a file. Append a suffix to the base file name if provided.
14093	Erase the data, both in this object, and from its file storage.
14094	Return the map from filenames to lists of line numbers executed.
14095	Return the map from filenames to lists of line number pairs.
14096	Write the coverage data to filename.
14097	Read the coverage data from a specified file.
14098	Return the raw pickled data from `filename`.
14099	Return the stored coverage data from the given file.
14100	Combine a number of data files together using a file prefix and re-map paths if provided.
14101	Add executed line data to the instance.
14102	Add measured arc data.
14103	Contribute filename's data to the Md5Hash hasher.
14104	Return a dict summarizing the coverage data. Keys are based on the filenames, and values are the number of executed lines. If `fullpath` is true, then the keys are the full pathnames of the files, otherwise they are the basenames of the files.
14105	Yield pasted lines until the user enters the given sentinel value.
14106	Start the mainloop with an optional banner argument to override the internally created default banner.
14107	Store multiple lines as a single entry in history
14108	Write a prompt and read a line.
14109	Handling syntax errors in the main loop. Loop until syntax error is fixed or user cancels.
14110	Checks if the given event should trigger a syntax recompilation.
14111	Handle interactive exit. Calls ask_exit callback unless confirm_exit is False.
14112	Returns the correct repository URL and revision by parsing the given repository URL
14113	Create and return new frontend attached to new kernel, launched on localhost.
14114	Configure the coloring of the widget
14115	Return the connection info for this object's sockets.
14116	Convert an R object to a numpy array for use in ipython's namespace. If the object is a data.frame, it attempts to return a structured array with names from either colnames or names, or as a simple numpy array if no names are found.
14117	```"
Return the entire source file and starting line number for an object. The object can be a module, class, method, function, traceback, frame, or code object. The source code is returned as a list of all the lines in the file, and the line number indexes a line in that list. An IOError is raised if the source code cannot be retrieved.
"``
14118	Set the color scheme for the editor and update the active colors. If a debugger is present, update its colors as well.
14119	Toggle between the currently active color scheme and NoColor.
14120	Return formatted traceback.
14121	Return a color formatted string with the traceback info.
14122	Format a list of traceback entry tuples for printing Given a list of tuples as returned by extract_tb() or extract_stack(), return a list of strings ready for printing. Each string in the resulting list corresponds to the item with the same index in the argument list. Each string ends in a newline. The function emphasizes the last entry
14123	Formats the exception part of a traceback.
14124	Only print the exception type and message, without a traceback.
14125	Call up the pdb debugger if desired, always clean up the tb reference.
14126	Switch to the desired mode. If mode is not specified, cycles through the available modes.
14127	Decorator for views that checks whether a user belongs to a particular group, redirecting to the log-in page if necessary.
14128	Handle 'from module import a, b, c' imports.
14129	Add a line of source code with proper indentation and newline.
14130	Adds a section, a sub-CodeBuilder.
14131	Compile the code and return the function `fn_name`.
14132	Generate a Python expression for `expr`
14133	Render this template by applying it to `context`.
14134	Evaluate dotted expressions at runtime.
14135	A shortcut function to render a partial template with context and return the output.
14136	Activates the default formatters and returns them as a dictionary.
14137	Add a format function for a given type.
14138	Adds a format function for a type specified by the full dotted module and name of the type.
14139	Adjusts the float format based on the input precision and sets numpy print precision accordingly if numpy is imported.
14140	Return path to any existing user config files
14141	Configure the nose running environment, execute before collecting tests, enable output capture, and other features.
14142	Configure logging for nose, or optionally other packages.
14143	Configure the working directory or directories for the test run.
14144	Very dumb 'pager' in Python, for when nothing else works.
14145	Print a string, piping through a pager after a certain length.
14146	Page a file, using an optional pager command and starting line.
14147	Return a pager command. Makes some attempts at finding an OS-correct one.
14148	Return string for paging files with an offset. This is the '+N' argument which less and more (under Unix) accept.
14149	Print a string snipping the midsection to fit in width.
14150	A function to pretty print sympy Basic objects.
14151	Generate PNG image from sympy expression.
14152	Convert a sympy expression to a display style LaTeX PNG image.
14153	Return True if type o can be printed with LaTeX. If o is a container type, this is True if and only if every element of o can be printed with LaTeX.
14154	Returns the LaTeX representation of a sympy expression, replacing dagger symbols and stripping dollars.
14155	Non-camel-case version of func name for backwards compatibility. Deprecated: Do not use this method, use :meth:`options <nose.plugins.base.IPluginInterface.options>` instead.
14156	Validate that the input is a list of strings. Raises ValueError if not.
14157	Validate that the input is a dictionary with string keys and values. Raises ValueError if not.
14158	Run my loop, ignoring EINTR events in the poller
14159	Handle incoming message, unpack it, and call handlers with the unpacked data.
14160	This interface is used to execute Python code in the kernel.
14161	This interface is used to complete text in the kernel's namespace with the given text, line, cursor position, and optionally the full block of code. It returns the message ID of the sent message.
14162	This interface is used to retrieve metadata information about an object, allowing for varying levels of detail in the response.
14163	This interface is used to send a history request with the specified parameters and return the msg_id of the message sent.
14164	This function sends a shutdown request to the kernel. Once the kernel has been shut down and confirmed via a reply, the calling client can safely terminate it if still running. The kernel sends a reply via Python's atexit module to ensure complete shutdown.
14165	Immediately processes all pending messages on the SUB channel.
14166	Send a string of raw input to the kernel.
14167	Starts the channels for this kernel. This will create the channels if they do not exist and then start them. If port numbers of 0 are being used (random ports) then you must first call :method:`start_kernel`. If the channels have been stopped and you call this, :class:`RuntimeError` will be raised.
14168	Stops all the running channels for this kernel.
14169	Are any of the channels created and running?
14170	This function loads connection information from a JSON file specified by `self.connection_file` and sets the corresponding attributes of the object.
14171	Write connection info to JSON dict in self.connection_file.
14172	Starts a kernel process and configures the manager to use it. If random ports (port=0) are being used, this method must be called before the channels are created. Raises an error if the IP is not local. Otherwise, it writes a connection file and launches the kernel.
14173	Attempts to stop the kernel process cleanly. If the kernel cannot be stopped, it is killed, if possible.
14174	Restart a kernel with the arguments that were used to launch it. If the old kernel was launched with random ports, the same ports will be used for the new kernel. If `now` is `True`, the kernel is forcefully restarted immediately; otherwise, it is given 1 second to clean up before a forceful restart is issued. Any options specified in `**kw` will replace those used to launch the kernel.
14175	Kills the running kernel.
14176	Interrupts the kernel using a platform-specific method.
14177	Sends a signal to the kernel. Note that since only SIGTERM is supported on Windows, this function is only useful on Unix systems.
14178	Is the kernel process still running?
14179	Get the REQ socket channel object to make requests of the kernel.
14180	Get the SUB socket channel object.
14181	Get the heartbeat socket channel object to check that the kernel is alive.
14182	Bind an Engine's Kernel to be used as a full IPython kernel. This allows a running Engine to be used simultaneously as a full IPython kernel with the QtConsole or other frontends.
14183	Emit a debugging message depending on the debugging level.
14184	Retrieve the extension classes in priority order. Returns a list of extension classes, in proper priority order.
14185	Called prior to executing a step. Returns True if the step is to be skipped, False otherwise.
14186	Called after executing a step.
14187	Called at the end of processing to emit additional data, alter the return value, or handle exceptions.
14188	Walks an unpacked egg's contents, skipping the metadata directory.
14189	Check whether module possibly uses unsafe-for-zipfile stuff
14190	Create and run the IPython controller. If running on Windows and not the main process, return to avoid infinite controller creation.
14191	Saves a connection dictionary to a JSON file, handling URL parsing and local IP address determination if the location is not provided.
14192	load config from existing json connector files
14193	Load secondary config, loading from JSON and setting defaults
14194	```plaintext
Execute a cell in parallel or asynchronously, with optional blocking and result saving.
```
14195	Enable %autopx mode by saving the original run_cell and installing pxrun_cell.
14196	Disables `%autopx` by restoring the original `InteractiveShell.run_cell`.
14197	Drop-in replacement for InteractiveShell.run_cell. Executes code remotely, instead of in the local namespace. Returns None if there is an error.
14198	Internal `CLOCK_CHANNEL` consumer to process task runs
14199	Run a task's callable.
14200	Remove a retired task from the database
14201	Patch the protocol's makeConnection and connectionLost methods to make the protocol and its transport behave more like what Agent expects.
14202	Patch a method onto an object if it isn't already there.
14203	Accept a pending connection.
14204	Rejects a pending connection with an optional reason. If no reason is provided, it defaults to a ConnectionRefusedError.
14205	Returns an IAgent that makes requests to this fake server.
14206	Calls pre and post save hooks, handles form validation and redirection.
14207	Calls pre and post delete hooks for DelteViews.
14208	Use SaveHookMixin pre_save to set the user if authenticated.
14209	Writes a report summarizing coverage statistics per module.
14210	Check whether some modules need to be reloaded.
14211	Open the default editor at the given filename and linenumber. This is IPython's default editor hook, you can use it as an example to write your own modified one. To set your own editor function as the new editor hook, call `ip.set_hook('editor',yourfunc)`.
14212	Open the editor at the given filename, linenumber, column and show an error message. This is used for correcting syntax errors. The current implementation only has special support for the VIM editor, and falls back on the 'editor' hook if VIM is not used.
14213	Get text from the clipboard.
14214	Add a function to the command chain with a given priority.
14215	Try to create a Distribution 'path_or_module'.
14216	Configure which kinds of exceptions trigger the plugin.
14217	Import and return an object given its full name as a string (e.g., "foo.bar").
14218	Attempt to make an ssh connection without a password. If paramiko is None, the default for the platform is chosen.
14219	Try passwordless login with shell ssh command.
14220	Try passwordless login with paramiko.
14221	Connect a socket to an address via an ssh tunnel.
14222	Open a tunneled connection from a 0MQ url.
14223	Stop scheduling tasks because an engine has been unregistered from a pure ZMQ scheduler.
14224	unwrap exception, and remap engine_id to int.
14225	Register a new engine, and update our connection info.
14226	Unregister an engine that has died.
14227	Saves the reply to an execute_request into our results.
14228	Flush notifications of engine registrations waiting in ZMQ queue.
14229	Flush task or queue results waiting in ZMQ queue.
14230	Flush replies from the control channel waiting in the ZMQ queue, currently ignoring them.
14231	flush ignored control replies
14232	Flush replies from the iopub channel waiting in the ZMQ queue.
14233	target func for use in spin_thread
14234	stop background spin_thread, if any
14235	Flush any registration notifications and execution results waiting in the ZMQ queue.
14236	Waits on one or more jobs for up to a specified timeout.
14237	Construct and send an apply message via a socket. This is the principal method with which all engine execution is performed by views.
14238	Construct and send an execute request via a socket.
14239	Retrieve a result by msg_id or history index, wrapped in an AsyncResult object.
14240	Fetch the status of engine queues.
14241	Tell the Hub to forget results.
14242	This interface is used to get the Hub's history, which is a list of msg_ids ordered by task submission time.
14243	Query the Hub's TaskRecord database
14244	Return a set of opcodes by the names in names.
14245	Create a ByteParser on demand.
14246	Return a set of line numbers that match any of a list of regular expressions.
14247	Parse the source to find the interesting facts about its lines.
14248	Return the first line number of the statement including `line`
14249	Map the line numbers in `lines` to the correct first line of the statement. Skip any line mentioned in any of the sequences in `ignores`. Returns a set of the first lines.
14250	Return a set of executable line numbers and a set of excluded line numbers from the source text.
14251	Get information about the arcs available in the code. Returns a sorted list of line number pairs. Line numbers have been normalized to the first line of multiline statements.
14252	Get a mapping from line numbers to count of exits from that line, excluding specified lines and class definitions.
14253	Iterate over all the code objects nested within this one, including `self` as its first value.
14254	Return a generator mapping byte offsets to line numbers in `code`.
14255	Find the statements in `self.code`. Produce a sequence of line numbers that start statements. Recurses into all code objects reachable from `self.code`.
14256	Get a string version of `block_stack`, for debugging.
14257	Split the code object into a list of Chunk objects. Each chunk is only entered at its first instruction, though there can be many exits from a chunk. Returns a list of Chunk objects.
14258	Checks that each chunk has a single entrance.
14259	Find the executable arcs in the code. Yields pairs: (from, to). From and to are integer line numbers. If from is < 0, then the arc is an entrance into the code object. If to is < 0, the arc is an exit from the code object.
14260	Returns a list of `Chunk` objects for this code and its children.
14261	Get the set of all arcs in this code object and its children.
14262	Add options to command line for coverage report.
14263	Begin recording coverage information.
14264	Output:
Generates and reports code coverage, including HTML and XML reports, and checks if the coverage meets the minimum required percentage.
14265	If inclusive coverage enabled, return true for all source files in wanted packages.
14266	Generate alternative interpretations of a source distribution name, considering different possible splits and formats.
14267	Open a urllib2 request, handling HTTP authentication
14268	Obtain a distribution suitable for fulfilling a requirement.
14269	get parent from obj.
14270	Checks if the engine has an ID; if so, returns "engine.<ID>"; otherwise, returns "engine".
14271	renders context aware template
14272	Configure plugin. Plugin is enabled by default.
14273	Add captured output to error report.
14274	Turn a list to a list of lists
14275	Convert a notebook to the v3 format.
14276	Convert a hex color to rgb integer tuple.
14277	Return color keys for building the base stylesheet from a template.
14278	Return a font of the requested family, using fallback as alternative.
14279	Reimplements method to handle execute reply and support prompt requests.
14280	Implemented to handle history tail replies, which are only supported by the IPython kernel.
14281	Handle IPython-style "display hook" for message content.
14282	Handle the ``display_data`` message and display the received data.
14283	Reimplemented to make a history request and load %guiref.
14284	Reimplements a method to run a file using the 'run' magic command, handling platform-specific path formatting and quoting for filenames containing spaces or special characters.
14285	Reimplements error processing for version Control Systems (VCS) with IPython-style traceback formatting.
14286	Reimplemented to dispatch payloads to handler methods.
14287	Sets the widget style based on the specified color scheme
14288	Opens a Python script for editing.
14289	Given a prompt number, returns an HTML In prompt.
14290	Given a plain text version of an In prompt, returns an HTML continuation prompt.
14291	Set the style sheets of the underlying widgets.
14292	Sets the style for the syntax highlighter, using the syntax style if available, otherwise using the style sheet.
14293	Handles the response returned from the CloudStack API.
14294	Generate a signature for CloudStack API requests using the API secret and SHA-1 hashing.
14295	Method to simplify API response by removing the outer layer indicating the originating API.
14296	Returns system virtual memory information as a named tuple, including total, available, percentage used, and individual memory metrics.
14297	Return system per-CPU times as a named tuple.
14298	Return real, effective, and saved user ids.
14299	Return real, effective and saved group ids.
14300	Return the number of threads belonging to the process.
14301	Return files opened by process as a list of namedtuples.
14302	Get short form of commit hash given directory `pkg_path`.

We get the commit hash from (in order of preference): * IPython.utils._sysinfo.commit * git output, if we are in a git repository If these fail, we return a not-found placeholder tuple.
14303	Return dict describing the context of the package.
14304	Return useful information about IPython and the system as a string.
14305	Return the number of active CPUs on a Darwin system.
14306	Return the effective number of CPUs in the system as an integer.
14307	Advances to the next result set Returns None if there are no more result sets.
14308	Fetches a single row from the cursor.
14309	Fetch up to size rows from the cursor. Result set may be smaller than size. If size is not defined, cursor.arraysize is used.
14310	Fetchs all available rows from the cursor.
14311	Connect to the specified  peers, tree, pub_url, and root_id.
14312	Read a JSON notebook from a string and return the corresponding NotebookNode object.
14313	Read a .py notebook from a string and return the NotebookNode object.
14314	Read a notebook from a string and return the NotebookNode object. This function properly handles notebooks of any version.
14315	Write a notebook to a string in a given format in the current nbformat version. This function always writes the notebook in the current nbformat version.
14316	Given a notebook and a file-like object, write the notebook to the file in the specified format and return the notebook string.
14317	Convert to a notebook having notebook metadata
14318	Try to load a value from a dictionary using a given key. If the key does not exist, reset the state.
14319	Does the name match my requirements? To match, a name must match config.testMatch OR config.include and it must not match config.exclude.
14320	Is the class a wanted test class?
14321	Is the directory a wanted test directory?
All package directories match, so long as they do not match exclude. All other directories must match test requirements.
14322	Is the file a wanted test file? The file must be a python source file and match testMatch or include, and not match exclude. Files that match ignore are never wanted, regardless of plugin, testMatch, include or exclude settings.
14323	Is the function a test function?
14324	Is the method a test method?
14325	Is the module a test module?
14326	Returns the contents of a named file as a list of lines.
14327	List command to use if we have a newer pydb installed
14328	Prints lines from a file, formatting the current line differently if it is the current line of execution.
14329	The debugger interface to magic_pdef.
14330	Generates a multiplying factor used to convert two currencies
14331	Converts an amount of money from one currency to another on a specified date.
14332	Compute the return of the currency between two dates.
14333	Return the given stream's encoding or a default.
14334	Return IPython's guess for the default encoding for bytes as text.
14335	Write connection info to JSON file
14336	Starts the heartbeat mechanism.
14337	Display connection info, store ports.
14338	Create our session object.
14339	Redirect input streams and set a display hook.
14340	Create the Kernel object itself.
14341	construct connection function, which handles tunnels.
14342	Sends a registration request to the controller
14343	Converts html content to plain text
14344	Converts markdown content to text
14345	Returns a fully qualified app domain name.
14346	Define command line options for the plugin to exclude directories from test discovery.
14347	Configures the plugin based on command line options.
14348	Check if directory is eligible for test discovery
14349	```python
Return true if 'ext' links to a dynamic lib in the same package.
```
14350	Calls each function in the list and returns the result of the last function. Returns None if the list is empty.
14351	Calls each function in a list in reverse order and returns the value of the last function called. Returns None if the list is empty.
14352	append func with given arguments and keywords.
14353	Insert a function with given arguments and keyword arguments at a specified index
14354	Formats the usage message. Ensures there is only one newline between usage and the first heading if there is no description.
14355	Initialize the app by calling the parent class's initialize method, changing to the working directory, and reinitializing logging.
14356	Creates a .pid file in the pid_dir with the current process ID, ensuring it does not already exist unless overwrite is True. Raises PIDFileError if the file already exists.
14357	Remove the pid file.
14358	Get the pid from the pid file. If the pid file doesn't exist a PIDFileError is raised.
14359	Construct an argument parser using the function decorations.
14360	Find the real name of the magic function.
14361	Highlight a block of text selectively if highlighting is enabled.
14362	Reimplemented to temporarily enable highlighting if disabled.
14363	Reimplemented to highlight selectively.
14364	Copy the currently selected text to the clipboard, removing prompts.
14365	Execute 'source'. If 'hidden', do not show any output.
14366	Called immediately after a prompt is finished, i.e. when some input will be processed and a new prompt displayed..Flush all state from the input splitter so the next round of reading input starts with a clean buffer.If not reading, turn off highlighting.
14367	Called when the tab key is pressed. Returns whether to continue processing the event.
14368	Reimplemented to add an action for raw copy.
14369	Reimplemented method for filtering console keypress events to handle execution interruption, restart, and smart backspace functionality.
14370	Reimplemented for auto-indentation. Insert a continuation prompt with spaces based on the current indentation level.
14371	Handle replies for tab completion.
14372	Execute a string expression silently in the kernel and call a callback with the result.
14373	Execute `callback` corresponding to `msg` reply, after ``_silent_exec_callback``
14374	Handles replies for code execution.
14375	Handle requests for raw_input.
14376	Handle the kernel's death by asking if the user wants to restart.
14377	Handles replies for call tips.
14378	Handle display hook output.
14379	Handle stdout, stderr, and stdin.
14380	Handle shutdown signal, only if from other console.
14381	Attempts to execute file with a specified path; if 'hidden' is True, no output is shown.
14382	Attempts to interrupt the running kernel and unsets the _reading flag to avoid runtime errors if raw_input is called again.
14383	Resets the widget's state based on the `clear` parameter or `clear_on_kernel_restart` configuration setting. clears the widget and re-writes the banner if `clear=True`, otherwise, it prints a visual indication of the kernel restart.
14384	Attempts to restart the running kernel.
14385	Shows a call tip, if appropriate, at the current cursor location.
14386	```
Performs completion at the current cursor location by sending a request to the kernel.
```
14387	Process a reply for an execution request that resulted in an error. If a SystemExit is passed along, this means exit() was called - also all the ipython %exit magic syntax of '-k' to be used to keep the kernel running. If not, append the traceback.
14388	Process a reply for a successful execution request.
14389	Called whenever the document's content changes. Display a call tip if appropriate.
14390	Adds a plugin to a list of plugins if it has a specific attribute and optionally adjusts its method call.
14391	Execute a chain of plugins, where the output of one plugin is passed as input to the next. Returns the final result.
14392	Call all plugins, yielding each item in each non-None result.
14393	Call all plugins, returning the first non-None result.
14394	Configures the set of plugins with the given options and config instance, removing disabled plugins from the list after configuration.
14395	Load plugins by iterating the `nose.plugins` entry point.
14396	Load plugins in nose.plugins.builtin
14397	Render a LaTeX string to PNG.
14398	Render LaTeX to HTML with embedded PNG data using data URIs.
14399	Convert a math expression into an image.
14400	Check if a distribution satisfies or conflicts with a requirement.
14401	Return a generator yielding a Process class instance for all running processes on the local machine. Every new Process instance is only created once and then cached into an internal table which is updated every time this is used. The sorting order in which processes are yielded is based on their PIDs.
14402	Returns a float representing the current system-wide CPU utilization as a percentage. When interval is > 0.0, it compares CPU times elapsed before and after the interval (blocking). When interval is 0.0 or None, it compares CPU times elapsed since the last call or module import. When percpu is True, it returns a list of floats representing the utilization as a percentage for each CPU.
14403	Utility method returning process information as a hashable dictionary.
14404	The process name, potentially truncated and updated based on the command line.
14405	The process executable path. May also be an empty string.
14406	Returns a list of child process objects for the current process. If `recursive` is `True`, it returns all descendant processes as well.
14407	Returns a float representing the current process CPU utilization as a percentage. When interval is > 0.0 compares process times to system CPU times elapsed before and after the interval (blocking). When interval is 0.0 or None compares process times to system CPU times elapsed since last call, returning immediately.
14408	Calculate process memory utilization as a percentage.
14409	Return process's mapped memory regions as a list of namedtuples.
14410	Return whether this process is running.
14411	Suspend process execution.
14412	Resume process execution. Add safety measure in case the current process has been killed in meantime and the kernel reused its PID.
14413	Kill the current process.
14414	Wait for process to terminate and, if process is a children of the current one also return its exit code, else None.
14415	Initializes the kernel inside GTK.Mean to run only once at startup so it does its job and returns False to ensure it doesn't get run again by GTK.
14416	Hijack a few key functions in GTK for IPython integration. Modifies pyGTK's main and main_quit with a dummy so user code does not block IPython.
14417	Is the given identifier defined in one of the namespaces which shadow the alias and magic namespaces?
14418	Initialize default transformers.
14419	Registers a transformer instance.
14420	Unregister a transformer instance.
14421	Create the default checkers.
14422	Registers a checker instance.
14423	Unregister a checker instance.
14424	Create the default handlers.
14425	Register a handler instance by name with esc_strings.
14426	Unregister a handler instance by name with esc_strings.
14427	Prefilters a line that has been converted to a LineInfo object by finding and handling it with the appropriate handler.
14428	Find a handler for the line_info by trying checkers.
14429	Calls the enabled transformers in order of increasing priority.
14430	Prefilters a single input line as text by calling the transformers and then the checkers/handlers.
14431	Prefilter multiple input lines of text.
14432	Instances of IPyAutocall in user_ns get autocalled immediately
14433	Allow ! and !! in multi-line statements if multi_line_specials is on
14434	Check for escape character and return either a handler to handle it, or None if there is no escape char.
14435	Checks if the initial identifier on the line is an alias.
14436	Handles normal input lines. Uses as a template for handlers.
14437	Handle alias input lines. Expand aliases and transform the line to execute the command using IPython's system.
14438	Execute the line in a shell, empty return value
14439	Execute magic functions.
14440	Handle lines which can be auto-executed, quoting if requested.
14441	Handles help requests for objects, providing basic and detailed information based on the input format.
14442	Reimplemented to hide on certain key presses and on text edit focus changes.
14443	Reimplemented to cancel the hide timer.
14444	Reimplemented to paint the background panel.
14445	Attempts to display the specified call line and truncated docstring at the current cursor location.
14446	Attempts to show the specified tip at the current cursor location. relocate the widget to avoid going off screen.
14447	Update tip based on user cursor movement. Hide if cursor position is less than or equal to start position.
14448	Create a property that proxies an attribute through a local attribute.
14449	Canonicalizes a path relative to a given working directory. That is, the path, if not absolute, is interpreted relative to the working directory, then converted to absolute form.
14450	Schema validation helper. Performs JSONSchema validation. If a schema validation error is encountered, an exception of the designated class is raised with the validation error message appropriately simplified and passed as the sole positional argument.
14451	Retrieve a read - only subordinate mapping. All values are stringified, and sensitive values are masked. The subordinate mapping implements the context manager protocol for convenience.
14452	Return True if in a venv and no system site packages.
14453	Counts word frequencies in multiple files using parallel processing.
14454	Convert a function based decorator into a class based decorator usable on class based Views
14455	Return list of shell aliases to auto-define.
14456	Define an alias without raising an error if the alias is invalid.
14457	Define a new alias after validating it. This will raise an :exc:`AliasError` if there are validation problems.
14458	Returns the number of arguments for a given alias command and validates the alias.
14459	Call an alias given its name and the rest of the line.
14460	Transform alias to system command string. Handles argument-less and positional arguments aliases.
14461	Expand an alias in the command line
14462	Produce reStructuredText (rst) output from nose help.
14463	Resets graphics attributes to their default values.
14464	Yields substrings for which the same escape code applies.
14465	Returns a QColor for a given color code, or None if one cannot be constructed. Adjusts for intensity if possible.
14466	Returns a QTextCharFormat that encodes the current style attributes.
14467	Generate a one-time JWT with an age in seconds.
14468	use a thread lock on current method, if self.lock is defined
14469	Remove expired JWTs from the cache.
14470	has this jwt been used?
14471	is this token valid?
14472	Creates a semaphore to ensure thread-safe access based on the specified count and bounding.
14473	Get common prefix for completions Return the longest common prefix of a list of strings, but with special treatment of escape characters that might precede commands in IPython, such as %magic functions. Used in tab completion. For a more general function, see os.path.commonprefix
14474	Reimplemented to ensure a console-like behavior in the underlying text widgets.
14475	Reimplemented to suggest a size that is 80 characters wide and 25 lines high.
14476	Returns whether text can be cut to the clipboard.
14477	Returns whether text can be pasted from the clipboard.
14478	Clear the console.
14479	Copy the currently selected text to the clipboard and delete it if it's inside the input buffer.
14480	Executes source or the input buffer, possibly prompting for more input.
14481	```plaintext
This method retrieves the text entered by the user at the current prompt. If the console is currently executing, it returns the text that is executing. It handles cases where the input buffer may no longer exist due to a buffer size limitation.
```
14482	Sets the text in the input buffer. If the console is currently executing, the text is stored for later updates when execution is finished.
14483	Sets the base font for the ConsoleWidget to the specified QFont.
14484	Paste the contents of the clipboard into the input region.
14485	Print the contents of the ConsoleWidget to the specified QPrinter.
14486	Moves the prompt to the top of the viewport.
14487	Sets the font to the default fixed-width font for this platform.
14488	Append content to the end of the buffer, optionally inserting it before the current prompt.
14489	Appends HTML at the end of the console buffer.
14490	Appends HTML and returns the plain text version of it.
14491	Appends plain text, processing ANSI codes if enabled.
14492	Clears the "temporary text" buffer, i.e. all the text following the prompt region.
14493	Performs completion with 'items' at the specified cursor location.
14494	```text
fill the area below the active editing zone with text
```
14495	Given a KeyboardModifiers flags object, return whether the Control key is down, considering the Command key as a synonym on Mac OS when specified.
14496	Creates and connects the underlying text widget.
14497	Creates and connects the underlying paging widget
14498	Filter key events for the paging widget to create console-like interface.
14499	Given a QTextBlock, return its unformatted text.
14500	Return a cursor for the last character.
14501	Returns the column of the cursor in the input buffer, excluding the contribution by the prompt, or -1 if there is no such column.
14502	Returns the text of the line of the input buffer that contains the cursor, or None if there is no such line.
14503	Return a cursor for the prompt position.
14504	Return a cursor with text selected between the positions 'start' and 'end'.
14505	Inserts new continuation prompt using the specified cursor.
14506	Inserts HTML at the specified cursor position in such a way that future text additions are unaffected
14507	Inserts HTML using the specified cursor, then returns its plain text version.
14508	Inserts plain text using the specified cursor, processing ANSI codes if enabled.
14509	Ensures that the cursor is inside the editing region Returns whether the cursor was moved
14510	Cancels the current editing task ala Ctrl-G in Emacs.
14511	Displays text using the pager if it exceeds the height of the viewport.
14512	Called immediately after a new prompt is displayed.
14513	Reads one line of input from the user.
14514	Set the continuation prompt, either as plain text or formatted HTML
14515	Scrolls the viewport so that the specified cursor is at the top.
14516	Writes a new prompt at the end of the buffer.
14517	Expands the vertical scrollbar beyond the range set by Qt for either a QPlainTextEdit or QTextEdit.
14518	Entry point for pkginfo tool
14519	Copy a default config file into the active profile directory.
14520	Create a profile directory by profile name and path.
14521	Find an existing profile directory by name and return its ProfileDir. This searches through specified paths for a matching profile directory. If not found, raises a ProfileDirError.
14522	Convert a cmp= function into a key= function
14523	Read a file and close it.  Returns the file source.
14524	Take multiple lines of input.A list with each line of input as a separate element is returned when a termination string is entered.
14525	Create a temporary Python file, write source code to it, and return the filename and filehandle. It is the caller's responsibility to close the file and remove it.
14526	Close the file and restore the channel.
14527	Write data to both channels.
14528	add a new handler for new hearts
14529	Register a new handler for heart failure
14530	Handles a heartbeat message.
14531	Converts a list into a list of lists with equal batch_size.
14532	Takes a path filename string and returns the split between the path and the filename. If filename is not given, filename = ''. If path is not given, path = './'.
14533	Generator for walking a directory tree. Starts at specified root folder, returning files that match our pattern. Optionally will also recurse through sub-folders.
14534	Displays time if verbose is true and count is within the display amount.
14535	Calculates unit of time to display
14536	Extract configuration data from a bdist_wininst .exe
14537	Ensure that the importer caches do not have stale info for `path`.
14538	Quote a command line argument according to Windows parsing rules
14539	Verify that there are no conflicting "old-style" packages
14540	When `easy_install` is about to run `bdist_egg` on a source dist and the source dist has 'setup_requires' directives, ensuring the fetcher options given to `easy_install` are available to that command as well.
14541	Create directories under the user's home directory if they do not exist.
14542	Return True if `name` is considered as an archive file.
14543	return a mutable proxy for the `obj`.
14544	Creates a readonly proxy for the `obj`. All modify operations on the proxy will not affect the original object. If `error_on_set` is True, an AttributeError will be raised when attempting to set an attribute.
14545	Create a new section cell with a given integer level.
14546	Create a new metadata node.
14547	Create a new author object with optional name, email, affiliation, and URL.
14548	Check if the given path is a directory to which the user has write access.
14549	Remove leading and trailing quotes from filenames on Windows.
14550	Return a valid Python filename in the current directory. If the given name is not a file, it adds '.py' and searches again. Raises IOError with an informative message if the file isn't found. On Windows, apply Windows semantics to the filename.
14551	```plain
Find a file by looking through a sequence of paths. Returns the full, absolute path of the first occurrence of the file. Raises IOError if the file does not exist in any of the search paths.
```
14552	Return the 'home' directory, as a unicode string.
14553	Return the XDG_CONFIG_HOME, if it is defined and exists, else None.
14554	Get the IPython directory for the current platform and user, using a combination of environment variables, home directory, and XDG_CONFIG_HOME. If the IPYTHON_DIR environment variable is set, it will be used instead of IPYTHONDIR. If the IPYTHON_DIR is not set, the function will use XDG_CONFIG_HOME or HOME to determine the default IPython directory. If the IPYTHON_DIR points to a non-writable location, a temporary directory will be used instead. The resulting IPython directory path will be normalized and returned.
14555	Get the base directory where IPython itself is installed
14556	Find the path to an IPython module in this version of IPython. This will always find the version of the module that is in this importable IPython package. This will always return the path to the .py version of the module.
14557	Determine whether a target is out of date. If target doesn't exist or is older than any file listed in deps, return true, otherwise return false.
14558	```python
Make an MD5 hash of a file, ignoring any differences in line ending characters.
```
14559	Checks for old IPython configuration files and warns if they exist.
14560	Update the suggestions' dictionary for an object upon visiting its page.
14561	Returns a list of suggestions for an object with a specified size, ordered by the number of visits in descending order.
14562	Get a list of all suggestions for an object.
14563	Return the path relative to the current working directory.
14564	Return a list of path objects that match the pattern.
14565	Open a file, read all lines, return them in a list with options for encoding, error handling, and newline retention.
14566	Calculate the md5 hash for this file. This reads through the entire file.
14567	Create profile stats file and load profiler.
14568	Output:
Generate and output a profiler report.
14569	Clean up stats file, if configured to do so.
14570	Handle CLI command
14571	Enable event loop integration with wxPython.
14572	Disable event loop integration with wxPython.Set PyOS_InputHook to NULL.
14573	Disables event loop integration with PyQt4.
14574	Enable event loop integration with PyGTK.
14575	Enable event loop integration with Tk. If no app is provided, a new Tk instance will be created
14576	Enable event loop integration with pyglet.
14577	Save the wave log.
14578	Connect to the database and create tables if necessary.
14579	Prepares and runs an SQL query for the history database.
14580	Retrieve information about a session based on the session number.
14581	Get the last n lines from the history database.
14582	Get lines of history from a string of ranges, as used by magic commands %hist, %save, %macro, etc.
14583	Get default history file name based on the Shell's profile. The profile parameter is ignored, but must exist for compatibility with the parent class.
14584	Give the current session a name in the history database.
14585	Clear the session history, releasing all object references, and optionally open a new session.
14586	Get input and output history from the current session. Called by get_range, and takes similar parameters.
14587	Store outputs to the database if logging is enabled. Outputs from a specified line number are saved to a cache which, if full, triggers a save operation.
14588	Write any entries in the cache to the database.
14589	Gradually shutdown a thread safely. An external call of `end_session`.
14590	Return the number of CPUs on the system
14591	Return a list of namedtuple representing the CPU times for every CPU available on the system.
14592	Return mounted disk partitions as a list of nameduples
14593	Return a list of PIDs currently running on the system.
14594	Make a nice string representation of a pair of numbers. If the numbers are equal, just return the number, otherwise return the pair with a dash between them, indicating the range.
14595	Nicely format a list of line numbers By coalescing groups of lines as long as the lines represent consecutive statements
14596	Return a string summarizing the call stack.
14597	A decorator to cache the result of an expensive operation. Only applies to methods with no arguments.
14598	Combine a list of regexes into one that matches any of them.
14599	Remove a file, and don't get annoyed if it doesn't exist.
14600	Add `v` to the hash, recursively if needed.
14601	List all profiles in the ipython_dir and cwd.
14602	Start a cluster for a given profile.
14603	Stop a cluster for a given profile.
14604	Find the full path to a .bat or .exe using the win32api module.
14605	Callback for _system. It prints the output and error lines of a process to the standard output and error streams.
14606	Find the code units to report on from a list of modules or filenames, applying include and omit filters based on patterns.
14607	Run `report_fn` on a number of `morfs` after finding their corresponding `CodeUnit` and running analysis. Handles exceptions for missing source code and non-Python files based on configuration settings.
14608	Test must raise one of expected exceptions to pass.
14609	Call pdb. set_trace in the calling frame, first restoring sys. stdout to the real output stream.
14610	Decorator for testing functions to ensure they complete within a specified time limit. If the function execution time exceeds the limit, a `TimeExpired` exception is raised.
14611	Load all IPython extensions in IPythonApp.extensions.
14612	Run pre-flight code specified via exec_lines.
14613	Run lines of code in IPythonApp.exec_lines in the user's namespace.
14614	Run files from profile startup directory
14615	Run files from IPythonApp.exec_files
14616	Run code or file specified at the command-line.
14617	Run module specified at the command-line.Makes sure that the module gets a proper sys.argv as if it were run using `python -m`.
14618	Create a simple generic function
14619	Return the path to a data file of ours. The file is searched for on `STATIC_PATH`, and the first place it's found, is returned. Each directory in `STATIC_PATH` is searched as-is, and also, if `pkgdir` is provided, at that subdirectory.
14620	Return the contents of a data file of ours.
14621	HTML-escape the text in `t`. Convert HTML special characters into HTML entities and runs of spaces into `&nbsp;`.
14622	Generate an HTML report for a list of modules or filenames (morfs).
14623	Make local instances of static files for HTML report.
14624	Write `html` to `fname`, properly encoded.
14625	Compute a hash that changes if the file needs to be re-reported.
14626	Writes the index.html file for this report.
14627	Read the last status in the specified directory, deserializing it from a file and verifying its format and version. If valid, update the object's state with the files and settings from the status; otherwise, reset the object.
14628	Writes the current status to the specified directory in a pickled format.
14629	Sort and compare two lists. By default it does it in place, thus modifying the lists. Use inplace = 0 to avoid that (at the cost of temporary copy creation).
14630	Get a slice of a sequence with optional start, stop, and step parameters.
14631	Chop a sequence into chunks of the given size.
14632	Read configuration from setup.cfg.
14633	Read existing configuration from MANIFEST.in and use it to ignore files.
14634	Compile a glob pattern into a regexp. We need to do this because fnmatch allows * to match /, which we don't want.
14635	Does this filename match any of the patterns?
14636	List all files versioned by git in the current directory.
14637	Start a new kernel.
14638	Shutdown a kernel by its kernel uuid.
14639	Kill a kernel by its kernel uuid.
14640	Gets the single KernelManager object for a kernel by its uuid.
14641	Get a dictionary of ports for a kernel.
14642	Return the notebook_id for a kernel_id or None.
14643	Start a kernel for a notebook and return its kernel_id.
14644	Shutdown a kernel and remove its notebook association.
14645	Interrupt a kernel and log the interruption.
14646	Restart a kernel while keeping clients connected, or as a fallback, restart the kernel using a new one and update the association.
14647	Create a new iopub stream.
14648	Create a new shell stream.
14649	Create a new hb stream.
14650	Resets all OneTimeProperty attributes that may have fired already.
14651	Export the contents of the ConsoleWidget as HTML.
14652	Export the contents of a ConsoleWidget as XHTML with inline SVGs.
14653	Ensure image_tag returns utf8-encoded str on Python 2.
14654	Transforms a Qt-generated HTML string into a standards-compliant one by adding a UTF-8 declaration and replacing empty paragraph tags with line breaks.
14655	Displays a dialog for exporting HTML generated by Qt's rich text system.Returns the name of the file that was saved, or None if no file was saved.
14656	Returns a unique instance of `klass` or None
14657	Builds a query for included terms in a text search.
14658	Builds a query for both included & excluded terms in a text search.
14659	Query for if date is within number of "days" ago
14660	Get query for date field less than or equal to current date plus specified number of days
14661	Query for null or blank field. If the field is not provided, return the field as is. Otherwise, combine the null and blank queries using the bitwise or operator.
14662	Converts queries to case insensitive for special fields.
14663	Register command line options.
14664	Verify whether a method has the required attributes. The method is considered a match if it matches all attributes for any attribute group.
14665	Accept the method if its attributes match.
14666	Rotate the kill ring, then yank back the new top.
14667	backport a few patches from newer pyzmq
14668	Returns an XSD-schema-enabled lxml parser from a WSDL or XSD.
14669	Generate a websocket URL based on the current request protocol and host.
14670	Reserializes a reply message using JSON. Takes the msg list from the ZMQ socket, unserializes it using self.session, and then serializes the result using JSON. Used by self._on_zmq_reply to prepare messages for the browser.
14671	Inject the first message, which is the document cookie, for authentication.
14672	Start the heartbeating and call the callback if the kernel dies.
14673	Start the hb loop if we haven't been closed during the wait.
14674	Stop the heartbeating and cancel all related callbacks.
14675	Load file object.
14676	Get the current block index, validating and checking status. Returns None if the demo is finished
14677	Move the current seek pointer to the given block. You can use negative indices to seek from the end, with identical semantics to those of Python lists.
14678	Edit a block. If no number is given, use the last block executed. This edits the in-memory copy of the demo, it does NOT modify the original source file. If you want to do that, simply open the file in an editor and use reload() when you make changes to the file. This method is meant to let you change a block during a demonstration for explanatory purposes, without damaging your original script.
14679	Show a single block on screen
14680	Show entire demo on screen, block by block
14681	Processes a collection in series
14682	Processes a collection in parallel batches, each batch processes in series on a single process. Running batches in parallel can be more efficient than splitting a list across cores because of parallel processing's high IO requirements.
14683	sets up the threadpool with map for parallel processing
14684	Processes a collection in parallel using multiple processes.
14685	Wrap a function's execution within a context manager.
14686	Decorator to enter context one by one.
14687	Get source from a traceback object. Returns a list of lines of context from the source code, and the index of the current line within that list. The optional second argument specifies the number of lines of context to return, which are centered around the current line.
14688	Find lines around the given position that are inspectable, considering indentation and continuation.
14689	Create a countdown with various options such as name, date, description, id, granularity, start date, progressbar, progressbar_inversed, and showpct. The function returns an HTML div element containing the countdown information.
14690	Cleans up by stopping and shutting down subprocesses.
14691	A modifier hook function. This is called in priority order prior to invoking the Action for the step. This allows a modifier to alter the context, or to take over subsequent action invocation.
14692	Modifier hook function that inspects or alters the result of an action.
14693	Updates history and outstanding attributes after a method call.
14694	Sync relevant results from self.client to our results attribute.
14695	Call a method and then spin
14696	Get all messages that are currently ready.
14697	Gets a message if there is one that is ready.
14698	Decorates a function to create a property with optional getter, setter, and deleter methods, and additional type checking for the setter.
14699	`get_onlys` is a utility function that creates multiple `property` decorators dynamically based on the provided field names. Each property returns the value of the corresponding attribute.
14700	Parses a database URL.
14701	Return the list containing the names of the modules available in the given folder.
14702	Returns a list containing the names of all the modules available in the folders of the pythonpath.
14703	Easily create a trivial completer for a command. Takes either a list of completions or all completions in a string (that will be split on whitespace).
14704	Returns a list containing the completion possibilities for an import line.
14705	Complete files that end in .py or .ipy for the %run command.
14706	Completes the 'cd' command by suggesting directories.
14707	Escape an XML attribute. Value can be unicode.
14708	Configure the xunit plugin.
14709	Writes an Xunit-formatted XML file including a report of test errors and failures.
14710	Add error output to Xunit report.
14711	Add failure output to Xunit report.
14712	Add success output to Xunit report.
14713	Pick two items at random from the list and return the index of the least recently used (LRU) item.
14714	Pick two items at random using inverse load as their weight. Return the one with the lower load.
14715	Add a new engine to the list of targets.
14716	Unregister an unavailable engine and handle potential finished tasks.
14717	Deal with jobs resident in an engine that died.
14718	Dispatch job submission to appropriate handlers.
14719	Audits all waiting tasks for expired timeouts.
14720	a task has become unreachable, send a reply with an ImpossibleDependency error.
14721	Check location dependencies, and run if they are met.
14722	Save a message for later submission when its dependencies are met.
14723	Submit a task to any of a subset of our targets.
14724	Dispatches a result message and processes it accordingly.
14725	Handle a real task result, either success or failure
14726	Handle an unmet dependency by updating job status and resubmitting if necessary.
14727	Update the dependency graph and submit jobs that can now run after a dependency has finished.
14728	Generate a new log-file with a default header.Raises RuntimeError if the log has already been started
14729	Prints a status message about the logger, including its filename, mode, logging options, and state.
14730	Write the sources to a log.
14731	Write data to the log file if active
14732	Fully stop logging and close log file. In order to start logging again, a new logstart() call needs to be made, possibly (though not necessarily) with a new filename, mode and other options.
14733	Create a worksheet by name with a list of cells.
14734	Adds a target 'string' for dispatching
14735	Adds a target regexp for dispatching
14736	Get a seq of Commandchain objects that match key.
14737	Yield all 'value' targets, without priority
14738	do a bit of validation of the notebook dir
14739	List all notebooks in the notebook dir.
14740	Generate a new notebook_id for a name and store its mappings.
14741	Delete a notebook's id only. This doesn't delete the actual notebook.
14742	Does a notebook exist?
14743	Return a full path to a notebook given its notebook_id.
14744	Return a full path to a notebook given its name.
14745	Get the representation of a notebook in the specified format by notebook_id.
14746	Get the NotebookNode representation of a notebook by notebook_id\.
14747	Save a new notebook and return its notebook_id.
14748	Saves an existing notebook by notebook_id, validating the format and JSON data, and optionally updating the notebook's name.
14749	Save an existing notebook object by notebook_id and updates the file path and mapping.
14750	Delete notebook by notebook_id.
14751	Create a new notebook and return its notebook_id.
14752	Copy an existing notebook, update its name, generate a new ID, and save the copy.
14753	Return all physical tokens including line continuations.
14754	Generate a series of lines, one for each line in `source`. Each line is a list of token pairs, where each pair consists of a token class and the token text. Concatenating all token texts and joining them with newlines should recover the original `source` string, with trailing whitespace not preserved and a final line with no newline indistinguishable from a final line with a newline.
14755	Load the default config file from the specified ipython_dir.
14756	Returns the list of default classes for the IPython application.
14757	Override to allow old '-pylab' flag with deprecation warning
14758	Do actions after construct, but before starting the app.
14759	initialize the InteractiveShell instance
14760	optionally display the banner
14761	Return a string representation of a value and its type for readable error messages.
14762	Convert the name argument to a list of names.
14763	Set the default value on a per instance basis. This method is called by :meth:`instance_init` to create and validate the default value. The creation and validation of default values must be delayed until the parent :class:`HasTraits` class has been instantiated.
14764	Setup a handler to be called when a trait changes.
14765	Get a list of all the traits of this class that match the specified metadata criteria.
14766	Get metadata values for trait by key.
14767	Validates that the value is a valid object instance.
14768	Infer the default value for a HasTraits attribute and ensure it is unique for each HasTraits instance.
14769	Check whether the dependencies have been met.
14770	Return whether this dependency has become impossible.
14771	Represent this dependency as a dict. For json compatibility.
14772	Return the depth of an element in the tree.
14773	Print a binary tree
14774	Accepts either an IP address or DNS name and returns the IP address.
14775	Parallel reduce followed by broadcast of the result
14776	Converts any valid targets argument into a list of integer IDs
14777	Handles messages for ME, Task queue, and IOPub traffic, routing them to appropriate handlers based on the message topic.
14778	Route registration requests and queries from clients.
14779	Called when a new heart starts to beat. Triggers completion of registration.
14780	handler to attach to heartbeater. called when a previously registered heart fails to respond to beat request. triggers unregistration
14781	Save the submission of a task and handle any conflicts with existing records in the database.
14782	Save the result of a completed task, handling the serialization of the message and updating the task status in the database.
14783	Save an iopub message into the database.
14784	Reply with connection addresses for clients.
14785	Register a new engine and handle registration messages.
14786	Unregisters an engine that explicitly requested to leave. It processes the engine's ID from the provided message, logs the unregistration, and adds the engine's UUID to a set of dead engines. A delayed callback is set to handle any stranded messages after a specified timeout. If a notifier is available, it sends an unregistration notification with the engine's ID and UUID.
14787	Finish the engine registration process after the HeartMonitor receives a beat from the Engine's Heart.
14788	Handle a shutdown request by sending a reply to the client and notifying other clients. Schedule the actual shutdown after a one-second delay.
14789	Purge results from memory. This method is more valuable before we move to a DB-based message storage mechanism.
14790	decompose a TaskRecord dict into subsection of reply for get_result
14791	Get the result of 1 or more messages.
14792	Get a list of all msg_ids in our DB records
14793	Perform a raw query on the task record database.
14794	go to the path
14795	return a standard message
14796	Run Shell command
14797	Execute R script
14798	Dispatches the message to the appropriate frontend handler based on the message type.
14799	Returns whether a reply from the kernel originated from a request from this frontend.
14800	Run the report.
14801	Annotate a single file
14802	Get installed package version
14803	Coerce unicode back to bytestrings.
14804	Given a message or header, return the header.
14805	check packers for binary data and datetime support
14806	Return the nested message dict.
14807	Sign a message with HMAC digest. If no authentication, return b''.
14808	Serialize the message components to bytes. This method converts a message dictionary into a list of bytes, suitable for transmission, by packing individual components and appending an identifier, delimiter, and signature.
14809	Build and send a message via stream or socket. The function constructs a message based on the provided parameters, serializes it, and sends it over a network stream. It supports optional tracking and handling of buffers, making it versatile for various messaging scenarios.
14810	Sends a raw message via ident path.
14811	Receive and unpack a message.
14812	Splits the identities from the rest of the message.Feed until DELIM is reached, then return the prefix as idents and remainder as msg_list. This is easily broken by setting an IDENT to DELIM, but that would be silly.
14813	Unserialize a msg_list to a nested message dict.
14814	Prompts the user to save an SVG document to disk.
14815	Copy a SVG document to the clipboard.
14816	Convert a SVG document to a QImage.
14817	Make an object info dict with all fields present.
14818	Wrapper around inspect.getdoc that can't crash. Attempts to call getdoc() method on given object if available.
14819	Wrapper around inspect.getsource. This can be modified by other projects to provide customized source extraction.
14820	Returns the names and default values of a function's arguments.
14821	Extract call tip data from an oinfo dict. Returns call information, optional formatted as string, and the most relevant docstring for calling purposes.
14822	Find the absolute path to the file where an object was defined.
14823	Find the line number in a file where an object was defined.
14824	Return the definition header for any callable object. If any exception is generated, None is returned instead and the exception is suppressed.
14825	Return a header string with proper colors.
14826	Generic message when no information is found.
14827	Print the definition header for any callable object.
14828	Print the docstring for any object. Optionally, a function can be provided to format the docstring. If the object does not have a docstring, a message indicating its absence will be displayed.
14829	Print the source code for an object.
14830	Show the whole file where an object was defined.
14831	Formats a list of fields for display.
14832	Show detailed information about an object. Optional arguments include the object's name, a special formatter for docstrings, precomputed information, and a detail level for additional information. The method appends various fields to a list of display fields based on the object's type and attributes, and then formats and displays these fields using a printer/pager.
14833	Search namespaces with wildcards for objects.
- **pattern**: String with shell-like wildcards and optional type specification.
- **ns_table**: Dictionary of name->namespaces for search.
- **ns_search**: List of namespace names to include. Optional.
- **ignore_case**: Boolean to make search case-insensitive, default False.
- **show_all**: Boolean to show all names, including those starting with underscores, default False.
14834	Start the Twisted reactor in a separate thread, if not already done. Returns the reactor.
14835	Wraps a test function to return a Twisted Deferred, with an optional timeout parameter. The test will wait for the deferred to be triggered, and the Twisted event loop will run inside the test function. If the callback is triggered, the test passes; if the errback is triggered or the timeout expires, the test fails. The decorator must be called first if combined with other decorators, like "raises".
14836	Return best matching substring of corpus.
14837	Encodes the stored `data` to XML and returns a string. Setting `indent` to `False` foregoes pretty-printing, and setting `declaration` to `False` skips the XML declaration.
14838	Encodes the stored `data` to XML and returns an `lxml.etree` value.
14839	Recursively loads all modules from a package object or set of package objects and returns a list of all unique modules discovered by the function.
14840	Converts a dictionary with list values to a dictionary with list elements as keys.
14841	Merge two Structs with customizable conflict resolution
14842	convert object to primitive type so we can serialize it to data format like python.
14843	Parse and send the colored source. If out and scheme are not specified, the defaults (given to constructor) are used. out should be a file-type object or the string 'str' for automatic string return.
14844	Get a list of matplotlib figures by figure numbers.
14845	Convert a figure to svg or png for inline display.
14846	Factory to return a matplotlib-enabled runner for %run.
14847	Sets the figure format for the inline backend to either 'png' or 'svg'. Using this method ensures that only one figure format is active at a time.
14848	Given a gui string return the gui and mpl backend.
14849	Activates the specified Matplotlib backend, sets interactive mode to True, and wraps the `show` method to detect if it is called by the user.
14850	Configure an IPython shell object for matplotlib use.
14851	Activate pylab mode in the user's namespace. Loads and initializes numpy, matplotlib and friends for interactive use.
14852	The `_trace` function is the trace function passed to `sys.settrace`. It records line execution and function calls in a trace object. The function handles different events such as `call`, `line`, `return`, and `exception`. It updates the trace data accordingly and ensures that the data is stored in a structured format.
14853	Starts this Tracer and returns a Python function suitable for use with sys.settrace().
14854	Stop this Tracer.
14855	Start a new Tracer object and store it in self.tracers.
14856	Installs the real tracer on new threads.
14857	Start collecting trace information.
14858	Stop collecting trace information.
14859	Pause tracing, but be prepared to resume.
14860	Resume tracing after a `pause`.
14861	Return the line data collected.
14862	Checks a result dictionary or list for errors and raises a CompositeError if any exist; otherwise, passes through the result.
14863	Render one or all of my tracebacks to a list of lines
14864	Call this at Python startup to perhaps measure coverage. If the environment variable COVERAGE_PROCESS_START is defined, coverage measurement is started. The value of the variable is the config file to use. There are two ways to configure your Python installation to invoke this function when Python starts: 1. Create or append to sitecustomize.py to add these lines: import coverage coverage.process_startup() 2. Create a .pth file in your Python installation containing: import coverage; coverage.process_startup()
14865	Return the canonical directory of the module or file `morf`.
14866	Return the source file for `filename`.
14867	Decide whether to trace execution in `filename`, with a reason. This function determines whether a file should be traced or not, based on the filename and the current frame. Returns a pair of values: the first indicates whether the file should be traced (canonicalized filename or None), and the second value is a string with the reason for the decision.
14868	Decide whether to trace execution in `filename`.
14869	Use msg as a warning by appending it to self._warnings and writing it to sys.stderr.
14870	Updates the source_match matcher with the latest imported packages by iterating through a list of package names, checking if they have been imported, and adding their files to the matcher if they have.
14871	Start measuring code coverage. Coverage measurement occurs in functions called after `start` is invoked. Statements in the same scope as `start` won't be measured. Once `start` is invoked, you must call `stop` eventually to ensure clean shutdown.
14872	Clean up on process shutdown.
14873	Exclude source lines from execution consideration based on a regular expression.
14874	Return a compiled regex for the given exclusion list.
14875	Save the collected coverage data to the data file.
14876	Combine together a number of similarly-named coverage data files.
14877	Get the collected data and reset the collector. Warn about various problems collecting data.
14878	Like `analysis2` but doesn't return excluded line numbers.
14879	Analyze a module to determine its coverage statistics.Return a tuple containing the filename, executable lines, excluded lines, missing lines, and a formatted string of missing lines.
14880	Analyze a single morf or code unit. Returns an `Analysis` object.
14881	```markdown
Write a summary report to `file`. Each module in `morfs` is listed with counts of statements, executed statements, missing statements, and a list of lines missed. `include` is a list of filename patterns. Modules whose filenames match those patterns will be included in the report. Modules matching `omit` will not be included in the report. Returns a float, the total percentage covered.
```
14882	Annotate a list of modules. Each module in `morfs` is annotated. The source is written to a new file, named with a ",cover" suffix, with each line prefixed with a marker to indicate the coverage of the line.  Covered lines have ">", excluded lines have "-", and missing lines have "!".
14883	Generate an HTML report.
14884	Generate an XML report of coverage results compatible with Cobertura reports.
14885	Display a Python object in all frontends using specified include and exclude format types.
14886	Display the HTML representation of an object.
14887	Display the SVG representation of an object.
14888	Display the PNG representation of an object.
14889	Display the JPEG representation of an object. If the raw parameter is True, it will display raw JPEG data; otherwise, it will display the JPEG representation of Python objects.
14890	Display the LaTeX representation of an object.
14891	Display the JSON representation of an object. Note that not many frontends support displaying JSON.
14892	Displays the JavaScript representation of objects. If `raw=True`, it directly publishes raw JavaScript data; otherwise, it converts and displays Python objects as JavaScript.
14893	Reloads the raw data from either a file or a URL, handling both cases and optionally decoding the data based on the specified encoding.
14894	Find the full path to a command using which.
14895	Execute a command in a subshell and return the child's exit status.
14896	Forward read events from an FD over a socket.
14897	Loop through lines in self.fd, and send them over self.sock.
14898	Return a launcher class for a given class name and kind.
14899	Start the app for the stop subcommand.
14900	import and instantiate a Launcher based on importstring
14901	Starts the app for the engines subcommand. Checks if the cluster is already running, logs and daemonizes, and starts engines with a delayed callback. Handles exceptions such as KeyboardInterrupt and zmq.ZMQError.
14902	Start the app for the start subcommand. Check if the cluster is already running, log and daemonize, start the controller and engines, and write the new pid file.
14903	Create a new wx app or return an exiting one.
14904	Check if the wx event loop is running.
14905	### Example 4:
Start the wx event loop in a consistent manner. If no app is provided, get the default app using get_app_wx(). If the event loop is not already running, start it and set the _in_event_loop flag to True. If the event loop is already running, set the _in_event_loop flag to True without starting the loop again.
14906	Create a new qt4 app or return an existing one.
14907	Is the qt4 event loop running.
14908	Start the qt4 event loop in a consistent manner.
14909	Return a blank canvas to annotate.
14910	Draw a cross on a canvas at a specified position and color.
14911	Draws a line between pos1 and pos2 on the canvas.
14912	Write text at specified position with optional color, size, antialiasing, and centering.
14913	Return a canvas from a grayscale image, populating specified channels with the input image.
14914	Returns a unique ID of a given length. User `version=2` for cross-systems uniqueness.
14915	Build a unique key from GET data using the current site's domain and an encoded URL.
14916	Returns domain name portion of a URL
14917	Returns a dictionary from a URL parameters.
