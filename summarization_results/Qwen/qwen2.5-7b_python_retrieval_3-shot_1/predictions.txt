0	Convert XML to URL List.
1	Downloads Dailymotion videos by URL.
2	Downloads Sina videos by URL.
3	Formats text with color or other effects into ANSI escaped string
4	Print a log message to standard error.
5	Print an error log message.
6	Exit the program with an error message and optional exit code.
7	Detect operating system.
8	Download videos from a Vimeo channel by URL.
9	Parse CKPlayer API content XML to extract video information such as title, size, and links.
10	Splice URLs using a video ID to generate video details with randomization to avoid caching issues.
11	Gather real URLs from the given URL.
12	Converts a string to a valid filename by replacing invalid characters and truncating to a maximum length.
13	Downloads CBS videos by URL.
14	Override the original one, handle JSON output and stream download, support downloading streams with or without captions.
15	Download Acfun video by vid. Calls Acfun API, decides which site to use, and passes the job to its extractor.
16	Scans through a string for substrings matched by a list of regex patterns. Returns a list of matches, empty if no matches found.
17	Parses the query string of a URL and returns the value of a parameter.
18	Send a HTTP GET request to the specified URL and return the content as a string, optionally decoding it using UTF-8 or the specified charset.
19	Send a HTTP POST request to a URL and return the content as a string, handling gzip and deflate compression and decoding the response body if specified.
20	Parses host name and port number from a string.
21	Retrieve room ID from room URL key
22	Get a proper title with courseid+topicID+partID
23	Download a WHOLE course by repeatedly calling wanmen_download_by_course_topic_part for each topic and part.
24	Download ONE PART of the course.
25	Checks if a task is either queued or running in this executor.
26	Get and flush event buffer, optionally for specific DAG IDs.
27	Retrieves and returns a snowflake connection object
28	Extracts AWS credentials from a Snowflake connection.
29	Fetches a field from extras, and returns it.
30	Executes SQL using psycopg2 copy_expert method.
31	Dumps a database table into a tab-delimited file
32	Uploads the file to Google cloud storage
33	Gets the max partition for a table.
34	Returns a mysql connection object with specified configurations.
35	Returns the state of a TaskInstance at the command line.
36	Monitors the child processes of a gunicorn master process and restarts workers occasionally.
37	Retrieves connection to Cloud Translate
38	Translate a string or list of strings from source language to target language using a specified model and format.
39	Retrieves information about a Cloud SQL instance.
40	Creates a new Cloud SQL instance.
41	Updates settings of a Cloud SQL instance.
42	Deletes a Cloud SQL instance.
43	Retrieves a database resource from a Cloud SQL instance.
44	Creates a new database inside a Cloud SQL instance.
45	Updates a database resource inside a Cloud SQL instance using patch semantics.
46	Deletes a database from a Cloud SQL instance.
47	Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL dump or CSV file.
48	Starts Cloud SQL Proxy. Raises an exception if the proxy is already running. Logs errors and stops the proxy if an error occurs. Waits for the proxy to be ready before returning.
49	Stops running proxy and cleans up associated files and directories.
50	Returns the version of the Cloud SQL Proxy.
51	Creates a connection in the Connection table based on proxy, TCP, UNIX sockets, or SSL. Connection ID is randomly generated.
52	Retrieves the dynamically created connection from the Connection table.
53	Deletes the dynamically created connection from the Connection table.
54	Retrieve Cloud SQL Proxy runner to manage proxy lifecycle per task. Raises AirflowException if not using proxy.
55	Retrieve database hook. Determines whether to use Postgres or MySQL hook based on database_type.
56	Clean up database hook after it was used.
57	Reserve free TCP port for Cloud SQL Proxy
58	Replace invalid MLEngine job_id characters with '_'. Add a leading 'z' if job_id starts with an invalid character.
59	Extract error code from ftp exception
60	Remove any existing DAG runs for the perf test DAGs.
61	Remove any existing task instances for the perf test DAGs.
62	Toggle the pause state of the DAGs in the test.
63	Prints operational metrics for the scheduler test, including performance data for successful task instances and a warning for any unfinished tasks.
64	Override the scheduler heartbeat to determine when the test is complete.
65	Invoke a Lambda function with the given payload.
66	Creates Operators needed for model evaluation and returns. It gets prediction over inputs via Cloud ML Engine BatchPrediction API by calling MLEngineBatchPredictionOperator, then summarizes and validates the result via Cloud Dataflow using DataFlowPythonOperator. Returns three chained operators for prediction, summary, and validation.
67	Creates the directory specified by path, creating intermediate directories as necessary. If directory already exists, this is a no-op.
68	Converts string to float if possible
69	Make a naive datetime aware in a given time zone.
70	Make an aware datetime naive in a given time zone.
71	Wrapper around datetime.datetime that adds settings.TIMEZONE if tzinfo not specified
72	Establishes a connection to druid broker
73	Returns http session for use with requests and allows additional headers to be passed
74	Make an HTTP request using the specified endpoint, data, headers, and extra options.
75	Checks the status code and raises an AirflowException exception on non-2XX or 3XX status codes.
76	Runs the prepared request with the given session, checks the response, and handles connection errors.
77	Contextmanager that will create and teardown a session.
78	Provide a session if it isn't provided. If not, this wrapper will create one and close it for you.
79	Clear out the database.
80	Parses some DatabaseError to provide a better error message
81	Get a set of records from Presto
82	Get a pandas dataframe from a SQL query.
83	Execute the statement against Presto.
84	Insert a set of tuples into a table.
85	Return a cosmos db client
86	Checks if a collection exists in CosmosDB.
87	Create a new collection in the CosmosDB database.
88	Checks if a database exists in CosmosDB.
89	Creates a new database in CosmosDB if it does not already exist
90	Delete an existing database in CosmosDB.
91	Delete an existing collection in the CosmosDB database.
92	Insert a list of new documents into an existing collection in the CosmosDB database.
93	Delete an existing document out of a collection in the CosmosDB database.
94	Retrieves a document from a CosmosDB database.
95	Get a list of documents from an existing collection in the CosmosDB database via SQL query.
96	Returns the Cloud Function with the given name.
97	Creates a new function in Cloud Functions in the specified location.
98	Updates a Cloud Function and waits for the operation to complete.
99	Uploads a zip file with sources to a specified location and returns the upload URL.
100	Deletes the specified Cloud Function.
101	Wrapper around `_get_dep_statuses` with global checks for dependency evaluation.
102	Check if a dependency is met for a given task instance.
103	Returns reason(s) for why a task dependency was not met.
104	Parses a config file for s3 credentials
105	Retrieve credentials for a given region
106	Returns verticaql connection object
107	Ensure all logging output has been flushed.
108	If the path contains a folder with a .zip suffix, then the folder is treated as a zip archive and path to zip is returned.
109	Traverse a directory and look for Python files.
110	Construct a TaskInstance from the database based on the primary key.Locks the TaskInstance until the session is committed if lock_for_update is True.
111	Launch DagFileProcessorManager processor and start DAG parsing loop in manager.
112	Sends termination signal to DAG parsing processor manager and expects it to terminate all DAG file processors.
113	Exit gracefully upon receiving signal.
114	Start multiple processes to parse and generate tasks for DAGs in parallel.
115	Parse DAG files repeatedly in a standalone loop.
116	Parse DAG files in a loop controlled by DagParsingSignal. Loop runs once upon receiving an agent heartbeat message and reports done when finished.
117	Refresh file paths from dag dir if it's been too long since last refresh.
118	Prints processing stats at intervals.
119	Clears import errors for files that no longer exist.
120	Prints stats about file processing in Airflow DAGs
121	Replace the current list of file paths with a new list and stop processors for deleted files
122	Wait for all processors to finish before continuing.
123	Kicks off new processes to process DAG definition files and read the results from the finished processors. Returns a list of SimpleDags produced by processors that have finished since the last call.
124	Kills all child processes on exit. First attempts SIGTERM, then SIGKILL if necessary.
125	Opens a ssh connection to the remote host.
126	Creates a transfer job that runs periodically.
127	Gets the latest state of a long-running operation in Google Storage Transfer Service.
128	Lists long-running operations in Google Storage Transfer Service that match the specified filter.
129	Updates a transfer job that runs periodically.
130	Delete a transfer job. This is a soft delete. After a transfer job is deleted, the job and all the transfer executions are subject to garbage collection. Transfer jobs become eligible for garbage collection 30 days after soft delete.
131	Cancel a transfer operation in Google Storage Transfer Service.
132	Pauses a transfer operation in Google Storage Transfer Service.
133	Resumes a transfer operation in Google Storage Transfer Service.
134	Wait for a Google Cloud Storage Transfer job to reach expected statuses within a specified timeout.
135	Return all task reschedules for the given task instance and try number, in ascending order.
136	Returns the number of slots open at the moment
137	Run command and return stdout
138	Removes an option specified by section and option, from a config file, or the default config, unless remove_default is False.
139	Return the section as a dictionary with values converted to int, float, or bool as required.
140	This interface is used to allocate IDs for incomplete keys.
141	Begins a new transaction and returns a transaction handle.
142	Commit a transaction to a Google Cloud Datastore project.
143	Lookup some entities by key.
144	Roll back a transaction.
145	This interface is used to run a query for entities and returns the batch of query results.
146	Gets the latest state of a long-running operation.
147	Delete the long-running operation.
148	Poll backup operation state until it's completed.
149	Export entities from Cloud Datastore to Cloud Storage for backup.
150	Import a backup from Cloud Storage to Cloud Datastore.
151	Publish a message to a topic or an endpoint.
152	Fetch the hostname using a callable from the config or use `socket.getfqdn` as a fallback.
153	Retrieves connection to Cloud Natural Language service
154	Find and analyze named entities in a document.
155	A convenience method for performing text analysis using multiple features provided by the language API in a single call.
156	Classifies a document into categories.
157	Returns a list of template fields for a specific operator class.
158	Defining a role to include a list of template fields in text, especially useful for describing operator usage. Returns a list of fields formatted in a literal block.
159	Properly close pooled database connections
160	Adds specific subfolders to sys.path if they do not already exist.
161	Checks if a Celery task has completed execution based on its ID provided in the Airflow context.
162	Return true if the ticket cache contains "conf" information as is found in ticket caches of Kerberos 1.8.1 or later.
163	Transform a SQLAlchemy model instance into a dictionary.
164	Yield successive chunks of a given size from a list of items.
165	Reduce the given list of items by splitting it into chunks of the given size and passing each chunk through the reducer.
166	Builds a dependency chain from a given number of tasks.
167	Returns a pretty ascii table from tuples If namedtuple are used, the table will have headers
168	Generate rendered log filename based on task instance, try number, and filename template.
169	Returns a Google Cloud Dataproc service object.
170	Waits for Google Cloud Dataproc Operation to complete.
171	Coerces content or all values of content if it is a dict to a string, throwing if content contains non-string or non-numeric types.
172	Handles the Airflow + Databricks lifecycle logic for a Databricks operator, including submitting the run, getting the run page URL, and polling the run state until it is terminal.
173	Run Pig script using CLI
174	Fetch and return the state of the given Celery task. The scope of this function is global so that it can be called by subprocesses in the pool.
175	How many Celery tasks should each worker process send.
176	How many Celery tasks should be sent to each worker process.
177	Like a Python builtin dict object, setdefault returns the current value for a key, and if it isn't there, stores the default value and returns it.
178	Returns a Google MLEngine service object.
179	Launches a MLEngine job and wait for it to reach a terminal state.
180	Retrieves a MLEngine job based on the provided project and job IDs. Handles quota failures by retrying after a 30-second delay.
181	Waits for a job to reach a terminal state by periodically checking its state until it does. Raises an exception if a HTTP error occurs.
182	Create version on Google Cloud ML Engine
183	Sets a version to be the default.
184	Lists all available versions of a model. Blocks until finished.
185	Deletes a specified version of a model, blocking until completion.
186	Creates a model in the specified project, blocking until completion. Requires a non-empty model name.
187	Gets a Model by project ID and model name. Blocks until finished. Handles 404 errors by logging and returning None.
188	Write batch items to dynamodb table with provisioned throughout capacity.
189	Integrate plugins to the context.
190	Creates a new instance of the configured executor if none exists and returns it.
191	Creates a new instance of the named executor, or loads it from plugins if it's not built-in.
192	Handles error callbacks when using Segment with segment_debug_mode set to True.
193	Returns a mssql connection object
194	Triggers a new DAG run for a specified DAG, using data from a JSON request.
195	Delete all DB records related to the specified Dag.
196	Returns a JSON with a task's public instance variables.
197	Get all pools, returning them as JSON. Handles exceptions by logging errors and returning appropriate JSON responses.
198	Create a pool. Handle exceptions by logging and returning an error response.
199	Delete pool.
200	Create or update a container group.
201	Get the state and exitcode of a container group.
202	Get the messages of a container group
203	Get the tail from logs of a container group.
204	Delete a container group
205	Test if a container group exists
206	Function decorator that looks for an argument named "default_args" and fills unspecified arguments from it. Raises an exception with specific information about missing arguments.
207	Builds an ingest query for an HDFS TSV load.
208	Check for message on subscribed channels and write to xcom the message with key ``message`` Returns True if message (with type 'message') is available or False if not
209	Returns a set of dag runs for the given search criteria.
210	Return the task instances for this dag run based on state and session.
211	Returns the task instance specified by task_id for this dag run
212	Returns the previous DagRun for a given dag_id and execution_date
213	Get previous scheduled DagRun if it exists.
214	Determines overall state of the DagRun based on TaskInstances' states.
215	Verifies the DagRun by checking for removed tasks or tasks not in the database yet, and updates their state accordingly.
216	Send a request to a Jenkins server and return the response body and headers. Handle HTTP errors, authentication issues, and timeouts.
217	Given a context, returns a dictionary of values for use in reconstructing relations between DAGs, DAG runs, tasks, and task instances. Can be in default or environment variable format.
218	Decides whether to trigger a remote DAG based on a condition parameter.
219	Sends a single datapoint metric to DataDog.
220	Queries datadog for a specific metric, returns results.
221	Retrieve a DAG and refresh it if expired
222	Fail given zombie tasks in the current DagBag.
223	Adds the DAG into the bag, recurses into sub dags. Throws AirflowDagCycleException if a cycle is detected.
224	Collects DAGs from a folder or file, processes them, and adds them to a dagbag collection.
225	Prints a report around DagBag loading stats.
226	Add or subtract days from a YYYY-MM-DD.
227	Converts date string from input format to output format
228	Poke matching files in a directory with a regex pattern and return True if any match.
229	Check if a non-empty directory exists based on specified filters like file extensions and size.
230	Clears a set of task instances, ensuring running ones are killed and updating their states accordingly.
231	Generic syntax error routine
232	Generates the shell command required to execute this task instance.
233	Get the latest state from the database.
234	Forces the task instance's state to FAILED in the database.
235	Refreshes the task instance from the database based on the primary key.
236	Clears all XCom data from the database for the task instance
237	Returns a tuple uniquely identifying the task instance.
238	Checks whether the dependents of this task instance have all succeeded.
239	Get datetime of the next retry if the task instance fails. Uses exponential backoff for delay calculation.
240	Checks if the task instance is in the right state and timeframe to be retried.
241	Returns a boolean as to whether the slot pool has room for this task to run.
242	Returns the DagRun for this TaskInstance
243	Makes an XCom available for tasks to pull.
244	Pull XComs that optionally meet certain criteria.
245	Sets the log context.
246	Close and upload local log file to remote storage Wasb. Prevents multiple uploads on multiple close calls.
247	Retrieves connection to Google Compute Engine and returns it
248	Starts an existing Compute Engine instance using the provided zone, resource ID, and optional project ID. Waits for the instance to reach the 'RUNNING' state before returning.
249	Sets the machine type of a Compute Engine instance using specified project, zone, and resource ID, handling the operation response and waiting for completion.
250	Retrieve instance template by project_id and resource_id.
251	Inserts an instance template using the provided body and optional parameters.
252	Retrieve Instance Group Manager by zone, resource_id, and project_id.
253	Patches Instance Group Manager with the specified body.
254	Waits for a named operation to complete by checking its status.
255	Check if a bucket exists by name.
256	Create an Amazon S3 bucket with optional region specification.
257	Checks that a prefix exists in a bucket
258	Lists prefixes in a bucket under prefix
259	Lists keys in a bucket under prefix and not containing delimiter
260	Check if a key exists in an S3 bucket.
261	Get S3 object by key and bucket name
262	Reads a key from S3.
263	Reads a key with S3 Select using a specified expression and returns the retrieved subset of original data.
264	Checks that a key matching a wildcard expression exists in a bucket.
265	Find a boto3.s3.Object object matching a wildcard expression
266	Loads a local file to S3
267	Uploads a string to S3
268	Upload bytes data to S3.
269	Loads a file object to S3.
270	Creates a copy of an object stored in S3.
271	Queries cassandra and returns a cursor to the results.
272	Convert a user type to a BQ RECORD.
273	Sends an email with HTML content using Sendgrid. Handles attachments, CC, BCC, and custom arguments.
274	Retrieves connection to Cloud Speech.
275	Recognizes audio input using the provided configuration and audio data.
276	Call the SparkSqlHook to run the provided sql query.
277	Load AirflowPlugin subclasses from entrypoints and ensure no duplicates are loaded.
278	Check whether a potential object is a subclass of the AirflowPlugin class.
279	Sets tasks instances to skipped from the same dag run.
280	Retrieves and connects to an Azure Data Lake filesystem
281	Check if a file exists on Azure Data Lake.
282	Upload a file to Azure Data Lake.
283	List files in Azure Data Lake Storage.
284	Run Presto Query on Athena
285	Uncompress gz and bz2 files
286	Queries MSSQL and returns a cursor of results.
287	Decorator to log actions executed by CLI function.
288	Builds metrics dict from function args it assumes that function arguments is from airflow.bin.cli module's function and has Namespace instance where it optionally contains dag_id task_id and execution_date.
289	Create the specified cgroup, add it to the tree, and return the associated node.
290	Deletes the specified cgroup.
291	Remove protocol from host field if present
292	Utility function to perform an API call with retries.
293	Logs into Salesforce if not already signed in
294	Make a query to Salesforce
295	Get the description of an object from Salesforce. This description is the object's schema and some extra metadata that Salesforce stores for each object.
296	Get a list of all available fields for an object.
297	Get all instances of a Salesforce object with specified fields.
298	Convert a dataframe column to UNIX timestamps
299	Write query results to file in CSV, JSON, or NDJSON format. Convert datetime fields to Unix timestamps if desired.
300	Fetches PyMongo Client
301	Fetches a mongo collection object for querying. Uses connection schema as DB unless specified.
302	Replaces many documents in a MongoDB collection using bulk_write with multiple ReplaceOne operations.
303	Checks the mail folder for mails containing attachments with the given name.
304	Retrieves mail attachments by name from a specified mail folder.
305	Downloads mail's attachments in the mail folder by name to local directory
306	Gets all attachments by name for the mail.
307	Gets the file including name and payload.
308	Write batch records to Kinesis Firehose
309	Determines whether a task is ready to be rescheduled.
310	Sends an email using a backend specified in EMAIL_BACKEND.
311	Send an email with HTML content
312	Converts a DateTime value to UTC, ensuring consistency across different configurations.
313	Check if a blob exists on Azure Blob Storage.
314	Checks if a prefix exists for blobs in an Azure Blob storage container.
315	Upload a string to Azure Blob Storage.
316	Read a file from Azure Blob Storage and return as a string.
317	Deletes a file from Azure Blob Storage, either by blob name or prefix, with options to ignore missing blobs and include snapshots.
318	List a directory's contents in a standardized format using the MLSD command, optionally filtering by specific facts.
319	Returns an FTP connection object
320	Return a list of files on the remote system.
321	Transfers the remote file to a local location. If local_full_path_or_buffer is a string path, the file will be put at that location; if it is a file-like buffer, the file will be written to the buffer but not closed.
322	Transfers a local file to the remote location.
323	Returns a datetime object representing the last time the file was modified
324	Call DiscordWebhookHook to post message
325	Return the FileService object.
326	Check if a directory exists on Azure File Share.
327	Check if a file exists on Azure File Share.
328	Return the list of directories and files stored on a Azure File Share.
329	Create a new directory on a Azure File Share.
330	Upload a file to Azure File Share.
331	Upload a string to Azure File Share.
332	Uploads a stream to Azure File Share.
333	Provides initialization and access to Google Cloud Storage service object
334	Copies an object from a bucket to another, with renaming if requested.
335	Get a file from Google Cloud Storage.
336	Uploads a local file to Google Cloud Storage.
337	Check if a file exists in Google Cloud Storage.
338	Checks if an object is updated in Google Cloud Storage after a given timestamp.
339	Deletes an object from an S3 bucket.
340	Lists all objects from a bucket with a given string prefix in name.
341	Returns the size of a file in Google Cloud Storage.
342	Gets the CRC32c checksum of an object in Google Cloud Storage.
343	This interface is used to retrieve the MD5 hash of an object in Google Cloud Storage.
344	Creates a new Google Cloud Storage bucket with specified parameters.
345	Compose a list of existing objects into a new object in the same storage bucket.
346	Returns true if training job's secondary status message has changed.
347	Returns a string containing the start time and secondary training job status message.
348	Tar local file or directory and upload to s3
349	Extract the S3 operations from the configuration and execute them.
350	Check if an S3 URL exists
351	Establish an AWS connection for retrieving logs during training.
352	Create a training job using a given configuration and optionally wait for completion or print logs.
353	Create a tuning job.
354	Create a transform job
355	Create an endpoint
356	Return training job info and print CloudWatch logs
357	Check status of a SageMaker job
358	Display the logs for a given training job, optionally tailing them until the job is complete.
359	Execute a python dataflow job using Google Cloud Storage as input and hook to start dataflow job.
360	Run migrations in 'offline' mode by configuring the context with a URL and running migrations without an Engine.
361	Runs migrations in online mode by creating an engine and associating a connection with the context.
362	Deletes the specified Cloud Bigtable instance. Raises `google.api_core.exceptions.NotFound` if the instance does not exist.
363	Creates a new BigTable instance
364	Creates a specified Cloud Bigtable table with optional initial split keys and column families. Raises AlreadyExists if the table already exists.
365	Deletes a specified table in Cloud Bigtable.
366	Updates number of nodes in the specified Cloud Bigtable cluster.
367	Creates the command list for a Hive or Beeline client session based on available connection information and parameters.
368	Prepare a list of hiveconf params from a dictionary of key-value pairs.
369	Load a pandas DataFrame into Hive.
370	Loads a local file into Hive.
371	Returns a Hive thrift client.
372	Checks whether a partition with a given name exists
373	Check if a table exists in a database.
374	Returns a Hive connection object.
375	Get results of the provided hql in target schema.
376	Executes HQL, writes results to a CSV file with specified delimiter, lineterminator, and fetch size.
377	Get a set of records from a Hive query.
378	Get a pandas dataframe from a Hive query.
379	Retrieves connection to Cloud Vision.
380	Get Dingding endpoint for sending message. retrieves the token from connection and returns the endpoint URL with the token.
381	Sends a Dingding message based on the message type and logs the results.
382	Binds parameters to a SQL query.
383	Helper method that escapes parameters to a SQL query.
384	Casts a BigQuery row to the appropriate data types. Returns None for None values and converts strings to integers, floats, booleans, or leaves strings unchanged based on the bq_type parameter.
385	Function to check if a value has the expected type and raise a TypeError if it does not.
386	Returns a BigQuery PEP 249 connection object.
387	Returns a BigQuery service object.
388	Checks for the existence of a table in Google BigQuery.
389	Creates a new, empty table or view in a specified dataset with optional schema, time partitioning, clustering, labels, and view definition.
390	Update an existing BigQuery table with specified fields.
391	Cancel all started queries that have not yet completed.
392	Deletes an existing table from the dataset; if the table does not exist, return an error unless ignore_if_missing is set to True.
393	Creates a new, empty table in the dataset, or updates the existing table if it already exists.
394	Grant authorized view access of a dataset to a view table.
395	Method returns dataset_resource if dataset exists and raises 404 error if dataset does not exist.
396	Retrieve list of BigQuery datasets for a given project.
397	Insert data into BigQuery one record at a time without running a load job.
398	This interface executes a BigQuery query and returns the job ID.
399	Execute BigQuery query multiple times with different parameters.
400	Fetches the next row from a buffer, paginating if necessary.
401	Queries Postgres and returns a cursor to the results.
402	Create all the intermediate directories in a remote host
403	Create queue using connection object.
404	Send message to the queue.
405	Run the task command using `subprocess.Popen` and optionally run it with specific tokens and join arguments. Log the command execution and start a daemon thread to read subprocess logging output.
406	Remove the configuration file when done running.
407	Parse options and process commands
408	generate HTML header content
409	Generate HTML div with SVG and apply styles based on width and height.
410	generate javascript code for the chart. Add custom tooltip string in jschart. Include data.
411	Create X-axis with custom format, label, and date support.
412	Create Y-axis with optional label and format.
413	Returns a sqlite connection object
414	Decorator to log user actions
415	Make a view compressed if 'gzip' is in the accept encoding.
416	Returns the last DAG run for a given DAG ID, optionally excluding externally triggered runs.
417	Create a DAG run from this DAG, including its associated tasks. Returns the DAG run.
418	Publish the message to SQS queue.context the context objectreturn dict with information about the message sent
419	Returns a JSON response from a JSON-serializable Python object.
420	Open the given file or a file inside a zip archive, returning the appropriate file object.
421	Used by cache to get a unique key per URL
422	Returns Gcp Video Intelligence Service client
423	Performs video annotation with various parameters including input and output URIs, video features, context, location, retry, timeout, and metadata.
424	Get Opsgenie api_key for creating alert
425	Creates an HTTP session and updates headers if provided
426	Execute the Opsgenie Alert call
427	Construct the Opsgenie JSON payload. Combine relevant parameters into a valid payload dictionary.
428	Call the OpsgenieAlertHook to post a message.
429	Checks if AWS conn exists or creates one and returns it
430	Run Presto query on Athena with provided config and return submitted query_execution_id.
431	Fetch the status of submitted athena query. Returns None or one of valid query states.
432	Poll the status of submitted athena query until query state reaches final state. Returns one of the final states.
433	Returns an SFTP connection object
434	Handle rate limit exception by sleeping for specified time or 60 seconds.
435	Call Zendesk API and return results
436	Retrieve partition values for a table
437	This function retrieves the information of a table in an AWS Glue Catalog database using the specified database and table names, returning the table metadata as a dictionary.
438	This interface is used to get the physical location of a table in a Hive database by providing the database and table names.
439	Get the status of a cluster by its identifier.
440	Delete a cluster and optionally create a snapshot.
441	Gets a list of snapshots for a cluster
442	Restores a cluster from its snapshot.
443	Creates a snapshot of a cluster.
444	send slack API request, not failing on unsuccessful call
445	Create a job flow using the EMR connection and provided overrides.
446	Filters a list of file dictionaries by minimum file size.
447	Filters out files based on ignored extensions if instructed.
448	Executes a task by querying MongoDB, transforming the results, and loading them into S3
449	Get pool by a given name.
450	Create a pool with given parameters.
451	Delete pool by a given name.
452	Converts a python dictionary to the proto supplied.
453	Method for waiting for an operation to complete or fail, continuously checking its status.
454	Fetches the operation from Google Cloud.
455	Append labels to provided Cluster Protobuf
456	Creates a Google Compute Engine cluster with specified parameters.
457	Get details of a specified cluster.
458	Return a webhook endpoint for Discord given http_conn_id and manual override, validating the format.
459	Construct the Discord JSON payload with relevant parameters and return as a string.
460	Execute the Discord webhook call.
461	Encrypts a plaintext message using Google Cloud KMS.
462	Imports a table from a remote location to a target directory in HDFS with various options.
463	Exports a query from RDBMS to HDFS.
464	Exports Hive table to remote location.
465	Retrieves connection to Cloud Text to Speech.
466	Synthesizes text input and returns a speech response.
467	Close and upload local log file to remote storage S3. Prevent multiple uploads if close is called multiple times.
468	Define a git-sync init container for retrieving DAGs using Git.
469	Defines any necessary environment variables for the pod executor
470	Defines any necessary secrets for the pod executor
471	Defines the security context
472	Returns URL link to qubole command result page.
473	Job updates database with heartbeat timestamp and allows external job termination. Adjusts sleep duration based on heartbeat rate.
474	Launch a process to process the given file.
475	Launches a process to start processing a DAG.
476	Check if the launched process is done. Returns whether the process is finished running.
477	Helper method to clean up processor_agent gracefully on signal reception.
478	Record import errors for DAGs in DagBag and clear errors for files without issues.
479	Schedules tasks for a single DAG by examining active DAG runs and adding instances to the queue. Filters out runs with future execution dates or exceeding max_active_runs. Handles backfill runs and verifies integrity of each run. Queues tasks for execution based on dependency status.
480	Change state for task instances in a DAG bag based on their states and whether their associated DagRuns are running.
481	Get the concurrency maps for given states.
482	Changes the state of task instances in the list with one of the given states to QUEUED atomically, and returns the TIs changed in SimpleTaskInstance format.
483	Enqueue task instances with the executor
484	Attempts to execute TaskInstances that should be executed by the scheduler. It follows three steps: picks TIs by priority, changes their state atomically, and enqueues them in the executor.
485	Reset the state of queued tasks to SCHEDULED.
486	Respond to executor events and update task instance states.
487	Process a Python file containing Airflow DAGs. Execute the file, look for DAG objects, pickle and save DAGs, create task instances, record errors, and kill zombie task instances. Returns a list of SimpleDag objects representing the DAGs found in the file.
488	Updates counters per state of tasks, handles task states like success, failure, skipped, retry, reschedule, and special cases like external state changes.
489	Check if the executor agrees with the state of running task instances and handle mismatches.
490	Returns a dag run for the given run date, which will be matched to an existing dag run if available or create a new dag run otherwise. If the max_active_runs limit is reached, this function will return None.
491	Return a map of task instance key to task instance object for tasks to run in a given dag run.
492	Computes and executes DAG runs and task instances for the given run dates.
493	Updates the state of DAG runs to failed if not already finished.
494	Initialize components to run a dag for a specified date range and execute tasks atomically.
495	Restart the task runner if heartbeat_callback is called.
496	Provides a client for interacting with the Cloud Spanner API.
497	Get information about a particular Cloud Spanner instance.
498	invokes a method on a given instance by applying a specified Callable.
499	Creates a new Cloud Spanner instance.
500	Updates an existing Cloud Spanner instance.
501	Deletes an existing Cloud Spanner instance.
502	Retrieves a database in Cloud Spanner. If it does not exist, returns None.
503	Creates a new database in Cloud Spanner.
504	Updates DDL of a database in Cloud Spanner.
505	Drop a database in Cloud Spanner.
506	Pokes for a mail attachment on the mail server. Returns True if attachment with the given name is present, False otherwise.
507	Merges user-defined additional_properties with language_hints and web_detection_params.
508	Returns a cassandra Session object
509	Checks if a table exists in Cassandra
510	Check if a record exists in Cassandra.
511	Construct the command to poll the driver status.
512	submit a spark-submit job and track its driver status.
513	Processes log files to extract useful information and logs driver IDs for tracking.
514	Parses logs from a Spark driver status query process and extracts the driver status.
515	Determines and returns the appropriate task runner for a given job based on the configuration.
516	Defers to an AWS Batch waiter if available, otherwise implements an exponential backoff retry.
517	Queries mysql and returns a cursor to the results.
518	Configure a csv writer with the file_handle and write schema as headers for the new file
519	Writes BigQuery schema to a local file and returns file details.
520	Return a dict of column name and column type based on self.schema.
521	Maps MySQL field types to BigQuery field types.
522	Executes an sqoop job based on import or export command type.
523	Saves the lineage to XCom and If configured to do so sends it to the backend.
524	Returns the extra property by deserializing JSON.
525	Generate a list of dates based on a start date, end date, number of entries, and a delta.
526	Converts an array of time durations in seconds to the specified time unit
527	Returns a datetime object representing `n` days ago. By default the time is set to midnight.
528	Initializes the role with the specified permissions and related view-menus.
529	Delete the given Role.
530	Get all the roles associated with the user.
531	Returns a set of tuples with the perm name and view menu name
532	Check if the user has any of the specified role names.
533	Check if user has a specific permission.
534	Cleans up faulty permissions in the FAB system
535	Insert new permission and view-menu into the system if they don't already exist.
536	Ensure an admin has all permission views by adding missing ones to the table.
537	Set the access policy on the given DAG's ViewModel based on the provided access control dictionary.
538	Create perm-vm if not exist and insert into FAB security model for all-dags.
539	Deferred load of Fernet key.
540	Checks for existence of the partition in the AWS Glue Catalog table
541	Provides access to the AwsGlueCatalogHook instance
542	Check for message on subscribed queue and write to xcom the message with key ``messages``
543	Returns a snakebite HDFSClient object.
544	Establishes a connection depending on the security mode using hdfscli InsecureClient or KerberosClient. Returns the connected client or raises an exception if all connections fail.
545	Check if a path exists in HDFS.
546	Uploads a file to HDFS
547	Establishes a connection to Pinot broker through Pinot DBQPI
548	Get the connection URI for a Pinot broker.
549	Converts a native python ``datetime.date`` object to a format supported by the API.
550	Converts a native python datetime.time object to a dictionary format supported by the API.
551	Returns a Redis connection.
552	Execute SQL and return pandas DataFrame
553	Run SQL commands sequentially with optional autocommit and parameters.
554	Sets the autocommit flag on the connection
555	Insert a set of tuples into a table, creating a new transaction every commit_every rows.
556	Convert cell to SQL literal string.
557	Checks the health status of the Airflow instance, including metadata and scheduler.
558	Returns external URL for a given task and execution date.
559	Opens a connection to the cloudant service and closes it automatically if used as context manager.
560	Call the SlackWebhookHook to post the provided Slack message
561	Return the Credentials object for Google API
562	Returns an authorized HTTP object for Google cloud service hook connection
563	Catch HTTP Errors and raise AirflowException with more informative message.
564	For functions decorated with this method, it provides a fallback for Google Cloud Platform project id. If the project is None, it will be replaced with the project_id from the service account the Hook is authenticated with. Project id can be specified either via project_id kwarg or via first parameter in positional args, and raises an exception if neither is set.
565	Returns a list of states indicating that a task has not completed a run or has not even started.
566	Constructs the spark-sql command with various configuration options and appends additional command arguments.
567	Convert a ``PIL Image`` or ``numpy.ndarray`` to tensor.
568	Normalize a tensor image with mean and standard deviation.
569	Resize the input PIL Image to the given size.
570	Pad the given PIL Image on all sides with specified padding mode and fill value.
571	Crops a PIL Image at position (i,j) with given height and width
572	Crop the given PIL Image and resize it to desired size.
573	Horizontally flip the given PIL Image.
574	Perform perspective transform of the given PIL Image.
575	Vertically flip the given PIL Image.
576	Crop the given PIL Image into four corners and the central crop.
577	Adjust the brightness of a PIL Image by a specified factor.
578	Adjust contrast of an Image with a given contrast factor.
579	Adjust the color saturation of an image using a specified factor.
580	Adjust hue of an image by shifting the hue channel in HSV space.
581	Apply gamma correction to an image. Adjusts intensities in RGB mode using the formula \(I_{\text{out}} = 255 \times \text{gain} \times \left(\frac{I_{\text{in}}}{255}\right)^{\gamma}\).
582	Rotate the image by angle.
583	Apply affine transformation on the image keeping image center invariant.
584	Convert image to grayscale version of image.
585	Save a given Tensor into an image file.
586	Find the class folders in a dataset.
587	Return a Tensor containing the patches from image files.
588	Read the file and keep only the ID of the 3D point.
589	Return a Tensor containing the ground truth matches Read the file and keep only 3D point ID. Matches are represented with a 1, non matches with a 0.
590	Computes the accuracy over the k top predictions for the specified values of k.
591	Disables printing when not in master process
592	Download a file from a URL and place it in a specified root directory with an optional filename and MD5 checksum for verification.
593	Returns a list of directories at a given root, optionally prepending the path to each directory.
594	List all files ending with a suffix at a given root
595	Downloads a Google Drive file by ID and saves it to a specified directory, optionally verifying its integrity.
596	Get parameters for crop for a random crop.
597	Generate random parameters for a perspective transformation.
598	Gets parameters for ``crop`` for a random sized crop.
599	Get a randomized transform to be applied on image. Adjusts brightness, contrast, saturation, and hue randomly in a random order.
600	Get parameters for affine transformation
601	Download and extract a tarball, then download individual photos.
602	Download the MNIST data if it doesn't exist in the processed_folder already.
603	Download and process EMNIST data if not already present.
604	Return theme name. Checks in this order: 1. override 2. cookies 3. settings
605	Return autocompleter results
606	Render preferences page && save user preferences
607	Returns available themes list.
608	Returns autocompletion results for search queries starting with a specific character (! or ?). If the query starts with a category, engine, or shortcut, relevant results are generated. If the query starts with a colon, language, country, or region code, corresponding results are provided. Duplicates and existing query parts are removed before returning the list of results.
609	Remove first and last lines to get JSON, extract conversion rate, calculate converted amount, format answer with original and converted values, and return formatted answer with conversion URL.
610	Embeds a custom gradient into a Tensor.
611	Convenience function to efficiently construct a MultivariateNormalDiag.
612	Return the joint log-probability for the eight-schools problem using PyTorch distributions.
613	Runs Hamiltonian Monte Carlo (HMC) on the eight-schools unnormalized posterior.
614	Replace variables in docstring with specified values.
615	Infers and returns the original name passed into a distribution constructor.
616	RandomVariable constructor with a dummy name argument.
617	Wraps an existing distribution as a traceable random variable, enabling custom distributions in Edward models.
618	Factory function to create random variable given distribution class
619	Computes one-step-ahead predictive distributions for all timesteps using samples from the posterior over parameters.
620	Construct predictive distribution over future observations using posterior parameter samples.
621	Returns the maximum value of an array, or a specified mask, if the maximum is not finite.
622	Assert all elements of `x` are finite.
623	Assert `x` has rank equal to `rank` or smaller.
624	Computes the number of elements in a tensor with shape `event_shape`. If the shape is static, returns a numpy int; otherwise, returns a scalar tensor.
625	Compute probs, cdf, etc over the support of a OneHotCategorical distribution.
626	Return a convert-to-tensor func, given a name, config, callable, etc.
627	Number of parameters needed to create a MixtureSameFamily distribution.
628	Yields the top-most interceptor from the thread-local interceptor stack, enabling nested interception operations.
629	Decorator that wraps `func` for execution interception by the current thread's interceptor, calling `func` immediately if no interceptor is available.
630	Record operations within a context manager and yield them as an OrderedDict.
631	Generate synthetic binary classification data.
632	Visualize decision boundaries in a 2D space.
633	Builds a Dataset iterator for supervised classification using TensorFlow.
634	Validate `map_values` if `validate_args`==True. Checks rank and size, and whether elements are strictly increasing.
635	Repeats a transition function and traces its outputs.
636	Calls a transition operator with args, unpacking args if its a sequence.
637	Calls a function and returns its output, the second output of the function, and the gradients of the first output with respect to the inputs.
638	Tiled a singleton structure to match another structure if they do not match.
639	Transforms a log-prob function using a bijector.
640	Performs a single leapfrog step in a Hamiltonian Monte Carlo algorithm. Updates the state, momentum, and calculates the target log probability and kinetic energy.
641	Metropolis-Hastings step to probabilistically choose between current and proposed states based on energy change while preserving detailed balance.
642	Hamiltonian Monte Carlo transition operator.
643	Adjusts `control` based on the sign of the difference between `output` and `set_point`, using a fixed `adaptation_rate`.
644	Creates an instance of a layer from its configuration dictionary.
645	Convert to Tensor or leave as None.
646	Construct scale from various components.
647	Returns a callable that adds a random normal perturbation to the input state parts.
648	Generates a callable that adds a uniform perturbation to the input state.
649	Expands the rank of x up to event_shape times for broadcasting
650	Return a lower bound on the entropy of a mixture model.
651	Get a list of batchwise probabilities for each category using softmax or log-softmax.
652	Validate `outcomes`, `logits` and `probs`'s shapes.
653	Ensure TensorFlow is installed and has a sufficient version.
654	Bayesian logistic regression, which returns labels given features.
655	Builds and processes the Covertype data set for machine learning tasks.
656	Cholesky factor of the covariance matrix of vector-variate random samples.
657	Estimate standard deviation using samples. Given N samples of scalar valued random variable X, standard deviation may be estimated as the square root of the variance.
658	Estimate variance using samples.
659	Rectify possibly negatively axis. Prefer return Python list.
660	Return a version of squeeze that works with dynamic axis.
661	Standardize input `x` to a unit normal.
662	Reconstruct input `x` from its normalized version.
663	Build the transition matrix for a semi-local linear trend model.
664	Build the transition noise model for a semi-local linear trend model.
665	Generate samples from the Halton sequence in specified dimensions.
666	Uniform iid sample from permutation groups.
667	Generates starting points for the Halton sequence procedure
668	Computes the number of terms in the place value expansion for a given number in specified bases.
669	Returns sorted array of primes such that `2 <= prime < n`.
670	Return the machine epsilon for the given data type.
671	Performs an inexact line search based on the algorithm of Hager and Zhang (2006).
672	Shrinks the input step size until the value and gradient become finite.
673	Brackets the minimum and performs a line search.
674	Performs a line search after bracketing a minimum using a method that satisfies Wolfe or Approximate Wolfe conditions, with parameters for sufficient decrease, curvature, and shrinkage.
675	Performs bisection and updates the interval.
676	Prepare arguments for line search initialization.
677	Wrapper for tf.Print which supports lists and namedtuples for printing.
678	Use Gauss-Hermite quadrature to form quadrature on `K - 1` simplex.
679	Use SoftmaxNormal quantiles to form quadrature on `K - 1` simplex.
680	Check validity of `loc` and `scale` init args.
681	Helper to infer batch_shape and event_shape.
682	Helper which interpolates between two locs.
683	Interpolate between two scales using a linear operator.
684	Creates a weighted linear operator from an existing linear operator.
685	Concatenates input vectors, statically if possible.
686	Multiply tensor of vectors by matrices assuming values stored are logs.
687	Multiply tensor of matrices by vectors assuming values stored are logs.
688	Multiply tensor of vectors by matrices.
689	Tabulate log probabilities from a batch of distributions.
690	Compute marginal probability distribution for each observable using forward computation and transition probabilities.
691	Compute marginal posterior distribution for each state.
692	Computes the most likely sequence of hidden states using the Viterbi algorithm.
693	Choose a random direction in the event space by normalizing random components.
694	Applies a single iteration of slice sampling update. Uses hit and run style slice sampling to choose a uniform random direction and applies a one-dimensional slice sampling update along that direction. Returns the updated state, target log probability, bounds satisfied, direction, upper bounds, and lower bounds.
695	Helper which computes `fn_result` if needed.
696	Pads the shape of a tensor to the right to achieve a desired rank.
697	Runs one iteration of Slice Sampler. Takes the current state and previous kernel results as input, and returns the next state and kernel results after one step.
698	Builds a transformed-normal variational distribution over a parameter's support.
699	Construct loss function for variational inference in STS models using KL divergence.
700	Run an optimizer within the graph to minimize a loss function.
701	Compute mean and variance, accounting for a mask.
702	Get the first unmasked entry of each time series in the batch.
703	Get broadcast batch shape from distributions, statically if possible.
704	Combines multivariate normal distributions into a factored joint distribution by concatenating independent samples and forming a new distribution with a block-diagonal covariance matrix.
705	Attempt to sum MultivariateNormal distributions, combining means and covariances.
706	Compute statistics of a provided time series, as heuristic initialization.
707	Ensures `observed_time_series_tensor` has a trailing dimension of size 1.
708	Extracts a Tensor with canonical shape and optional mask from a given `Tensor`-like object or `MaskedTimeSeries`.
709	Construct a predictive normal distribution that mixes over posterior draws.
710	`high - low`
711	Create a factory for generating summary statistics like mean, mode, and stddev.
712	Creates a wrapped version of `dist_fn` that accepts all previous distributions and produces a new one, with arguments in non-reversed order.
713	Resolve distribution names based on argument names.
714	Returns the distribution's required args.
715	Calculates the KL divergence between two `JointDistributionSequential` objects. Raises errors if the joint distributions have a different number of elemental distributions or if any distribution has a dynamic dependency.
716	Creates `dist_fn`, `dist_fn_wrapped`, `dist_fn_args` from a model.
717	Create a tuple of tuples representing dependencies between distributions.
718	Returned Shannon entropy in nats.
719	Decorator to check if the first argument is within the distribution's support, asserting if `validate_args` is `True`.
720	Visualizes sequences as TensorBoard summaries.
721	Visualizes the reconstruction of inputs in TensorBoard.
722	Visualizes a qualitative analysis of a given model.
723	Summarize the parameters of a distribution.
724	Summarize the mean of a tensor in nats and bits per unit.
725	Runs the model to generate multivariate normal distribution.
726	Returns an initial state for the LSTM cell.
727	Runs a recurrent model to generate a batched MultivariateNormalDiag distribution, parameterized by the output at the current timestep, and returns the distribution and updated state.
728	Rearranges input image sequences and passes them through a series of convolutional layers to generate intermediate representations.
729	Generate new sequences by sampling from the static and dynamic prior distributions and decoding the likelihood.
730	Reconstruct image sequences using sampled or estimated latent variables with optional swapping and fixing.
731	Sample the static latent prior for a given number of samples and batch size, optionally sharing the same sample across all sequences. Returns a tuple of a sample tensor and the distribution from which it was sampled.
732	Sample the dynamic latent prior.
733	Return the static batch shape of models represented by this component
734	Compute the runtime batch shape of models represented by this component.
735	Instantiate this model as a Distribution over specified `num_timesteps`.
736	Sample from the joint prior over model parameters and trajectories.
737	Calculate the minimum number of dimensions required for events in a given list of bijectors.
738	Converts a vector size to a square matrix size, ensuring it is a triangular number.
739	Argsort a NumPy array, supporting ascending and descending order.
740	Sorts input values along a specified axis in either ascending or descending order.
741	Calculate the normal distribution function (NDTR) for a given tensor.
742	Calculate the cumulative distribution function for the standard normal distribution.
743	Compute the inverse of the CDF of the Normal distribution function.
744	Calculates the log of the cumulative distribution function of a normal distribution using asymptotic series or known techniques based on the input value's magnitude.
745	Calculates the asymptotic series for log_ndtr.
746	Compute the inverse of the error function.
747	Calculate the log cumulative distribution function of a Laplace distribution.
748	Compute the joint log probability for a model with two Poisson distributions and a uniform prior.
749	Runs HMC on the text-messages unnormalized posterior.
750	True if the given index_points would yield a univariate marginal.
751	Compute the marginal of this GP over function values at `index_points`. Depending on the number of index points, returns a `Normal` or `MultivariateNormalLinearOperator` distribution.
752	Return `index_points` if not None, else `self._index_points`. Raises ValueError if both are None.
753	Create an stacked IAF bijector with multiple layers and alternating swaps.
754	Runs one iteration of NeuTra.
755	Trains a bijector and creates initial kernel results using a bootstrap process.
756	Computes the outer squared difference between two tensors.
757	Enables uniform interface to value and batch jacobian calculation.
758	Disables computation of the second derivatives for a tensor. Returns a tensor with the same value and derivative as input, but raises LookupError on second derivative computation.
759	Performs distributional transform of mixture samples. Convert samples of a multivariate distribution to a sample of product of Uniform[0, 1] distributions using conditional CDFs and softmax.
760	Split a covariance matrix into block-diagonal marginals of given sizes.
761	Decompose a joint posterior into components for an STS model.
762	Decompose an observed time series into contributions from each component.
763	Decompose a forecast distribution into contributions from each component.
764	Converts dense `Tensor` to `SparseTensor`, dropping `ignore_value` cells.
765	Defers an operator overload to `attr`.
766	Converts a tensor's numpy value to a human-readable string
767	Get sample shape of random variable as a TensorShape.
768	Sample shape of random variable as a 1-D `Tensor`.
769	Get tensor that the random variable corresponds to.
770	In a session, computes and returns the value of this random variable.
771	Return value as a NumPy array, only available for TF Eager.
772	Computes the posterior Normal distribution with a conjugate prior on the mean, given known scale, sum of observations, and number of observations.
773	Build a scale-and-shift function using a multi-layer neural network.
774	Returns a batch of points chosen uniformly from the unit hypersphere.
775	Returns the unnormalized log density of an LKJ distribution.
776	Returns the log normalization of an LKJ distribution.
777	Return explicit dtype from args_list if exists, else preferred_dtype.
778	Factory for implementing summary statistics, eg, mean, stddev, mode.
779	Helper to broadcast a tensor using a list of target tensors.
780	Pdf evaluated at the peak
781	Estimate a lower bound on effective sample size for each independent chain.
782	Compute the effective sample size for a given state tensor.
783	Estimates the potential scale reduction (PSR) for a single state in a Markov chain.
784	Get number of elements of `x` in `axis`, as type `x.dtype`.
785	Broadcast a listable secondary_arg to that of states.
786	Use Gauss-Hermite quadrature to form quadrature on positive-reals for a LogNormal distribution.
787	Use LogNormal quantiles to form quadrature on positive-reals.
788	Returns a new `_Mapping` instance with inputs merged from itself and another `_Mapping` instance or individual arguments.
789	Removes cache key from cache value.
790	Helper to merge two values, handling cases where one or both are None.
791	Converts nested `tuple`, `list`, or `dict` to nested `tuple`.
792	Computes the doubling increments for the left end point.
793	Finds the index of the optimal set of bounds for each chain.
794	Get bounds of slice at each stage of doubling procedure
795	Samples from the slice by applying shrinkage for rejected points.
796	Apply one-dimensional slice sampling algorithm to evolve Markov chains.
797	Creates a value-setting interceptor for conditioning on observed data in Edward2 models.
798	Converts Edward probabilistic program into its log joint probability function
799	Filter inputs to be compatible with function f's signature.
800	Network block for VGG with two convolution layers, batch normalization, ReLU activation, and max pooling.
801	Builds and returns a tree of NUTS states at a given depth and state, handling leapfrog integrations and subtree building.
802	Wraps value and gradients function to check for None gradients
803	Returns true if two states and a momentum do not form a U-turn pattern.
804	Run one step of leapfrog integration.
805	Log-joint probability given a state's log-probability and momentum.
806	Returns samples from a Bernoulli distribution.
807	Create closure which creates `loc`, `scale` params from `tf.get_variable`
808	Creates function to build Normal distributions with trainable params.
809	Creates multivariate standard Normal distribution.
810	Deserialize Keras-serialized function using function type
811	Serialize function for Keras. Returns the function type as an anonymous function or named function in the Python environment.
812	Broadcasts a structure (sparsity pattern, etc.) to match the structure of another structure, tiling the singleton values if necessary.
813	Eagerly converts struct to Tensor, recursing upon failure.
814	Converts `args` to `Tensor`s with optional structural and numeric type constraints.
815	Calls `fn` with `args`, possibly expanding `args` based on its type.
816	Returns `Tensor` attributes related to shape and Python builtins.
817	Creates the mixture of Gaussians prior distribution.
818	Reshape images into a grid of specified rows and columns.
819	Downloads a file.
820	Builds fake MNIST-style data for unit testing.
821	Validates block sizes for bijectors.
822	Verifies that `parts` don't broadcast.
823	Constructs a trainable `tfd.MultivariateNormalTriL` distribution. By default, the MVN is parameterized via affine transformation of input tensor `x`.
824	Constructs a trainable `tfd.Bernoulli` distribution parameterized by logits.
825	Constructs a trainable `tfd.Normal` distribution.
826	Constructs a trainable Poisson distribution parameterized by log rate.
827	Applies one step of Euler-Maruyama method.
828	Compute diffusion drift at the current state.
829	Helper to `kernel` which computes the log acceptance-correction.
830	Compute volatility function results and gradients.
831	Broadcast `volatility_parts` to match the shape of `state_parts`.
832	Build transition matrix for an autoregressive StateSpaceModel.
833	Compute graph and static `sample_shape`.
834	Calls function `fn` after reshaping input `x` and adjusting its shape to match the distribution's batch and event shapes.
835	Calls `fn` and reshapes its output appropriately.
836	Computes the binomial cumulative distribution function using TensorFlow operations, handling edge cases to ensure safe backpropagation.
837	Executes `model`, creating both samples and distributions.
838	Latent Dirichlet Allocation model generating a sample bag of words from topic-word probabilities and a concentration parameter.
839	Creates the variational distribution for LDA.
840	Returns a summary of the learned topics based on topic-word matrix, alpha values, and vocabulary, highlighting the top topics and their most significant words.
841	Converts a 20 newsgroups dataset into a tf.data.Dataset of word ids.
842	Builds fake data for unit testing.
843	Builds iterators for train and evaluation data using bag-of-words vectors.
844	Minimize using Hessian-informed proximal gradient descent.
845	Add control dependencies to update the codebook based on exponential moving average.
846	Save a grid of images to a PNG file.
847	Save images visualizing model reconstructions.
848	Load Hugo Larochelle's binary static MNIST tf.data.Dataset
849	Converts a TensorFlow dtype to its corresponding NumPy dtype.
850	Returns the base dtype for a given dtype.
851	Returns whether this is a boolean data type.
852	Returns whether this is a complex floating point type.
853	Returns the maximum representable value in the given data type.
854	Returns the string name of the dtype.
855	Returns the number of bytes to represent a given data type.
856	Asserts all items are of the same base type. Returns validated type or None. Raises ValueError if types do not match.
857	Validate and return float type based on tensors and dtype.
858	Performs an unconstrained minimization of a function using the Nelder Mead simplex algorithm.
859	A single iteration of the Nelder Mead algorithm.
860	Creates a condition function pair for a reflection to be accepted.
861	Creates the condition function pair for an expansion.
862	Create the condition function pair for an outside contraction.
863	Shrinks the simplex around the best vertex.
864	Replaces an element at supplied index.
865	Check if a simplex in an optimization algorithm has converged based on function value variation and vertex position.
866	Computes the initial simplex and the objective values at the simplex.
867	Evaluates objective function at specified initial simplex.
868	Constructs a standard axes aligned simplex by evaluating the objective function at its vertices.
869	Evaluates a given objective function on a batch of points. Returns the objective values and the number of points evaluated. If `batch_evaluate_objective` is True, evaluates the objective function on the entire batch at once. Otherwise, evaluates the objective function on each point in the batch individually.
870	Generate a PNG plot with histograms of weight means and standard deviations.
871	Save a PNG plot visualizing posterior uncertainty on heldout data.
872	Build fake MNIST-style data for unit testing.
873	Returns initializer configuration as a JSON-serializable dict.
874	Instantiates an initializer from a configuration dictionary.
875	Wrapper for Numpy matmul with support for transpose and conjugate operations.
876	Compute standard deviation, covariance, and variance for a given statistic.
877	Compute the log of the exponentially weighted moving mean of the exp.
878	Ensures non-scalar input has at least one column
879	Generates a tensor of -1 or +1 values chosen uniformly at random.
880	Generates `Tensor` of positive reals drawn from Rayleigh distribution.
881	Convenience function which chooses the condition based on the predicate.
882	Finish computation of log_prob on one element of the inverse image.
883	Finish computation of prob on one element of the inverse image. Adjust for Jacobian and batch shape.
884	Helper to rotate dimensions of tensor
885	Inverse of batch normalization to de-normalize, de-scale, and de-offset the input tensor.
886	Check for valid BatchNormalization layer. Raises ValueError if invalid or unsupported properties.
887	Slice a single parameter of a distribution according to specified slices.
888	Computes the override dictionary of sliced parameters.
889	Applies a single slicing step to dist, returning a new instance.
890	Applies a sequence of slice or copy-with-overrides operations to `dist`.
891	Return a batch-sliced `tfd.Distribution` by slicing along its batch dimensions and applying parameter overrides.
892	Runs multiple Fisher scoring steps to fit a model.
893	Returns Python callable indicating fitting procedure has converged.
894	Sanitize and prepare input arguments for the `fit` function. Ensure tensors have the correct `dtype` and shape, and handle default values for optional arguments.
895	Returns number of cols in a given `Tensor`.
896	Wraps original_fn, preferring to call static_fn when inputs are static.
897	Wraps new_fn with the doc of original_fn.
898	Statically evaluate predicates in `cond`.
899	Computes rank of a tensor given its shape.
900	Like tf.case, but attempts to statically evaluate predicates. Returns tensors from the first pair whose predicate evaluates to True, or default tensors if none do.
901	Helper function to standardize operation scope.
902	Computes the standard deviation of a mixture distribution using weighted averages of component means and variances.
903	Create a LinearOperator representing a lower triangular matrix.
904	Creates a LinearOperator representing a diagonal matrix.
905	Infer distribution batch and event shapes from a location and scale.
906	Returns True if scale is a LinearOperator that is known to be diag.
907	Check validity of a scalar distribution's shape, reparameterization type, and dtype.
908	Pad dimensions of event tensors for mixture distributions.
909	Chooses one of two values based on the scalar predicate.
910	Move a tensor dimension within its shape
911	Asserts x is a non-negative tensor, optionally of integers.
912	Returns whether two tensors have the same dynamic shape.
913	Helper which tries to return a static value from a TensorFlow tensor, optionally casting to a specific dtype. Returns None if not possible.
914	Helper returning True if dtype is known to be unsigned.
915	Check if dtype is known to be signed.
916	Helper returning the largest integer exactly representable by dtype
917	Return the smallest integer exactly representable by dtype.
918	Return True if dtype.is_integer or is `bool`.
919	Checks and enforces the maximum allowed number of classes for categorical distributions based on the data type.
920	Compute the multinomial coefficient for given counts and total number of outcomes.
921	Circularly moves dimensions left or right for a tensor.
922	Picks a `Tensor` based on a condition.
923	Convenience function which statically broadcasts shape when possible.
924	Generate a new seed from the given seed and salt using MD5 hashing and bitwise operations.
925	Creates a tridiagonal matrix using specified values above, below, and on the diagonal.
926	Return the size of a specific dimension.
927	Validate quadrature grid, probs or computes them as necessary.
928	Returns parent frame arguments.
929	Transforms a 0-D or 1-D Tensor to be 1-D.
930	Delay tensor evaluation until dependencies have run.
931	Checks that `rightmost_transposed_ndims` is valid.
932	Checks that `perm` is a valid permutation vector.
933	Helper function for determining the event shape after applying a transformation, considering static and dynamic permutations.
934	Returns the concatenation of the dimensions in `x` and `other`.
935	Returns a list of dimension sizes, or `None` if rank is unknown.
936	Returns a shape combining the information in `x` and `other`.
937	Ensures a shape has at least the specified rank.
938	Check if source and target shapes match, with static comparison where possible, and fall back to dynamic comparison if needed.
939	Computes an augmented sample shape to broadcast batch dimensions. Adjusts sample shape so that any batch dimensions not part of the distribution `partial_batch_dist` are treated as identical distributions, and matches the combined sample and batch shape of `full_sample_and_batch_shape`.
940	Build a callable that performs one step for backward smoothing.
941	Backward update for a Kalman smoother.
942	Builds a callable for performing one step of Kalman filtering.
943	Conjugate update for a linear Gaussian model.
944	Propagate a filtered distribution through a transition model.
945	Build callable for Kalman mean recursion step
946	Build callable for one step of Kalman covariance recursion.
947	Build a callable for one step of Kalman sampling recursion.
948	Propagate a mean through linear Gaussian transformation.
949	Propagate covariance through linear Gaussian transformation.
950	Run the backward pass in Kalman smoother.
951	Draw a joint sample from the prior over latents and observations.
952	Run a Kalman smoother to return posterior mean and cov.
953	Compute prior means for all variables via dynamic programming.
954	Compute prior covariances for latent states and observations via dynamic programming.
955	Pushes latent means and covariances forward through an observation model to obtain observation means and covariances.
956	Computes the log-normalizer of the distribution.
957	Calculate the mode of the von Mises-Fisher distribution as the mean direction.
958	Applies a Householder rotation to `samples`.
959	Generate a 3D sample using the Von Mises-Fisher distribution.
960	Create a deep copy of a callable.
961	Removes dictionary keys which have the specified value.
962	Recursively replace dicts with `_PrettyDict`.
963	Check args and return samples.
964	Helper which returns `True` if input is `collections.namedtuple`-like.
965	Choose which expand_dims `is_accepted` and applies tf.where
966	Helper which Expand_dims Is_accepted Then Applies Tf.where
967	Elementwise adds list members, replacing non-finite results with alt_value.
968	Compute the value and gradients for a given function and its arguments.
969	Calls a function and computes its gradients with respect to the arguments.
970	Constructs a for loop using `tf.while_loop` if `loop_num_iter` is unknown, or a Python loop if it's statically known.
971	Calls `loop_fn` repeatedly, tracing its outputs using `trace_fn`, and returns both the final state and stacked traces.
972	Wrap a setter to apply to inner-most results in kernel_results
973	Wraps a getter to apply it to the inner-most results in kernel_results.
974	Recreate the kernel with `store_parameters_in_results` parameter set to `True` in its parameters and its inner kernels.
975	Replaces the rightmost dims in a Tensor representing a shape.
976	Replaces the event shape dims of a `TensorShape`.
977	Check that a shape Tensor is int-type and otherwise sane. Returns assertions for validation.
978	Stop if any batch member converges, or all have failed.
979	Returns a dictionary to populate the initial state of a search procedure, performing an initial convergence check and evaluating the objective function.
980	Performs the line search step of the BFGS search procedure. Uses hager_zhang line search procedure to compute a suitable step size and updates the current state if the line search is successful.
981	Restricts a multivariate function to a given direction and computes the restricted function value, gradient, and full gradient.
982	Updates the state by advancing its position and checking for convergence or failure conditions.
983	Check if the algorithm satisfies the convergence criteria.
984	Broadcast a value to match the batching dimensions of a target.
985	Compute the harmonic number using its analytic continuation.
986	Generate random exchange proposals for replica exchange MC based on a probability.
987	Retrieve a field from kernel_results or its accepted_results.
988	Get list of TensorArrays holding exchanged states, and zeros.
989	Computes a shared scale term for covariance and variance calculations, adjusting for concentration and count.
990	Function that applies log determinant Jacobian of a list of Bijectors
991	Make function that applies list of Bijectors' `forward`s.
992	Makes a function which applies a list of Bijectors' `inverse`s
993	Runs one iteration of the Transformed Kernel.
994	Like tf.where but works on namedtuples.
995	Performs the secant square procedure of Hager Zhang. Given an interval that brackets a root, this procedure performs an update of both end points using two intermediate points generated using the secant interpolation.
996	Helper function for secant square.
997	Helper function for secant-square step.
998	Squeezes a bracketing interval containing the minimum. Given an interval [a, b] which brackets a minimum and a point c within that interval, finds a smaller nested interval which also brackets the minimum. If the supplied point does not lie in the bracketing interval, the current interval is returned. The update procedure relies on the opposite slope conditions to ensure that there is at least one zero of the derivative in between a and b.
999	Applies Hager Zhang bracketing algorithm to find an interval containing a region satisfying Wolfe conditions.
1000	Bisects an interval and updates to satisfy opposite slope conditions.
1001	Bisecting search to find a root within bounds using function evaluations and gradient information.
1002	Check if the supplied values are finite.
1003	Check whether the Wolfe or approx Wolfe conditions are satisfied for inexact line search.
1004	Returns an approximation to the point at which the derivative of the function vanishes using the secant method.
1005	Create a function for step-size update policy based on accept ratio.
1006	Applies `num_leapfrog_steps` of the leapfrog integrator for Hamiltonian Monte Carlo, updating momentum and state based on gradient information.
1007	Computes the log acceptance-correction for the Metropolis-Hastings algorithm in the context of the UncalibratedHMC method.
1008	Run one iteration of Hamiltonian Monte Carlo.
1009	Create initial `previous_kernel_results` using a supplied `state`.
1010	Constructs a ResNet18 model with Bayesian layers.
1011	Builds a "residual block" for a neural network (specifically a ResNet).
1012	Creates an encoder function for mapping bag-of-words Tensors to a Dirichlet distribution over topics.
1013	Create a decoder function that maps encodings to a distribution over words.
1014	Create a prior distribution for Dirichlet distribution parameters.
1015	Implements Markov chain Monte Carlo via repeated `TransitionKernel` steps.
1016	A multi-layered topic model over a documents-by-terms matrix.
1017	Learnable Deterministic distribution over positive reals.
1018	Learnable Gamma via concentration and scale parameterization.
1019	Loads NIPS 2011 conference papers, subsets to 2011 papers and words appearing in at least two documents with a total word count of at least 10.
1020	Shared init logic for `amplitude` and `length_scale` params. Converts, validates, and stores them if not `None`. Returns the common `DType`.
1021	Get the KL function registered for classes a and b.
1022	Reads an image from a filepath and converts it to a float32 tensor.
1023	Downloads the sprites data and returns the saved filepath.
1024	Creates a character sprite by combining attribute sprites using alpha masks.
1025	Create a sequence by extracting patches from a character sprite tensor and rolling/tiling to achieve the desired length.
1026	Create a random sequence.
1027	Create a tf.data pipeline for the sprites dataset.
1028	Checks that `distributions` satisfies all assumptions.
1029	Flattens a list of kernels by replacing _SumKernel instances with their kernels property contents.
1030	Flattens a list of kernels, replacing any `_ProductKernel` instances with their `kernels` property contents.
1031	Build fake CIFAR10-style data for unit testing.
1032	Count the number of occurrences of each value in an integer array `arr`.
1033	Bin values into discrete intervals based on specified edges.
1034	Count how often `x` falls in intervals defined by `edges`.
1035	Compute quantiles of a tensor along a specified axis using interpolation.
1036	Return the number of dimensions of a tensor, asserting certain expectations if provided.
1037	Insert the dims in `axis` back as singletons after being removed.
1038	Convert negatively indexed axis to non-negative list of ints.
1039	Move dims corresponding to `axis` in `x` to the end, then flatten.
1040	Sort `Tensor` along the last dimension using `top_k`.
1041	Build an ordered list of Distribution instances for component models.
1042	The Amari-alpha Csiszar-function in log-space.
1043	Calculate the reverse KL-divergence in log-space.
1044	The Jensen-Shannon Csiszar-function in log-space.
1045	Calculate the Pearson Csiszar-function in log-space.
1046	Squared-Hellinger Csiszar-function in log-space.
1047	Evaluate the Triangular Csiszar-function in log-space.
1048	The T-Power Csiszar-function in log-space.
1049	Evaluate the Log1p-Abs Csiszar-function in log-space.
1050	Calculate the Jeffreys Csiszar-function in log-space.
1051	Modified-GAN Csiszar-function in log-space.
1052	Calculates the dual Csiszar-function in log-space
1053	Symmetrizes a Csiszar-function in log-space.
1054	Calculate Monte Carlo approximation of Csiszar f-Divergence using a specified function f, probability distribution p, and reference distribution q.
1055	Helper function for computing the CSISZAR_VIMCO statistic, which returns `log_avg_u` and `log_sooavg_u`.
1056	Check if a Tensor x has the expected number of dimensions.
1057	Broadcast indices to match params' shape and then use batch_gather.
1058	Broadcasts the event or distribution parameters.
1059	Perform importance sampling with a positive function, in log-space. Estimates the log of the expectation of a function under a given distribution using samples from another distribution.
1060	Broadcasts the event or samples
1061	Applies the BFGS algorithm to minimize a differentiable function.
1062	Validate a provided inverse Hessian to ensure it is positive definite and symmetric.
1063	Update the BGFS state by computing the next inverse hessian estimate. Only update if not already failed or converged. Correctly compute the normalization term (y^T . s) and do not update if singular.
1064	Applies the BFGS update to the inverse Hessian estimate.
1065	Computes the product of a matrix with a vector on the right. Supports dynamic shapes and batched computation.
1066	Computes the outer product of two possibly batched vectors.
1067	Transpose a possibly batched matrix.
1068	Maybe add `ndims` ones to `x.shape` on the right.
1069	Sum the right-most N dimensions of a tensor while preserving the shape of the remaining dimensions.
1070	Custom sqrt function with a finite gradient at zero.
1071	Return common dtype of arg_list, or None.
1072	Applies the L-BFGS algorithm to minimize a differentiable function.
1073	Create initial state for LBfgsOptimizerResults
1074	Computes the search direction for the L-BFGS algorithm.
1075	Creates a `tf.Tensor` suitable to hold `k` element-shaped tensors.
1076	Conditionally push new vectors into a batch of first-in-first-out queues.
1077	Computes whether each square matrix in the input is positive semi-definite. Returns a mask indicating which matrices are PSD. Uses eigenvalue decomposition to check if all eigenvalues are non-negative.
1078	Return a mask for input tensors where the determinant is above the given bounds.
1079	Returns a uniformly random "correlation-like" matrix.
1080	Return rejection samples from attempting to obtain good correlation matrices.
1081	Computes a confidence interval for the mean of a Bernoulli distribution using the Clopper-Pearson method.
1082	Computes confidence intervals for correlation matrix volumes using the Clopper-Pearson method.
1083	Computes the von Mises CDF and its derivative via series expansion.
1084	Computes the von Mises CDF and its derivative via Normal approximation.
1085	Performs one step of the differential evolution algorithm.
1086	Applies the Differential Evolution algorithm to minimize a function.
1087	Processes initial args for optimization.
1088	Finds the population member with the lowest value.
1089	Checks whether the convergence criteria have been met.
1090	Constructs an initial population by adding random normal noise to the initial position, or using a provided population if given.
1091	Performs recombination by binary crossover for the current population.
1092	Computes the mutated vectors for each population member based on mixing indices and differential weight.
1093	Generates an array of indices for mutation operation in differential evolution.
1094	Converts the input arg to a list if it is not a list already. Returns a tuple of two elements: a Python list of Tensors and a boolean indicating whether the original argument was a list or tuple already.
1095	Returns a Tensor of type `dtype`, 0 if `tol` is None, with optional validation.
1096	Apply soft thresholding to a tensor.
1097	Clips values to a specified min and max while leaving gradient unaltered.
1098	Build an iterator over training batches.
1099	Save synthetic images as PNG files.
1100	Converts a sequence of productions into a string of terminal symbols.
1101	Runs the model forward to generate a sequence of productions.
1102	Runs the model forward to return a stochastic encoding.
1103	Integral of a "hat" function for sampling purposes.
1104	Inverse function of _hat_integral.
1105	Compute the rank of a matrix using Singular Value Decomposition (SVD).
1106	Compute the Moore-Penrose pseudo-inverse of a matrix using its singular-value decomposition (SVD).
1107	Solves systems of linear equations `A * X = RHS` using LU factorizations.
1108	Computes a matrix inverse given the matrix's LU decomposition.
1109	Returns list of assertions related to `lu_reconstruct` assumptions.
1110	Returns list of assertions related to assumptions of `lu_solve`.
1111	Returns a block diagonal rank 2 SparseTensor from a batch of SparseTensors.
1112	Checks that input is a `float` matrix.
1113	Computes the neg-log-likelihood gradient and Fisher information for a GLM.
1114	Fit a GLM using coordinate-wise FIM-informed proximal gradient descent. Maximizes-likelihood parameters for given model and observed data using negative Fisher information approximations for Hessian.
1115	Generate slices for building an autoregressive mask.
1116	Generate the mask for building an autoregressive dense layer.
1117	Build a masked dense layer for autoregressive models, applying a mask to the weight matrix to ensure masked autoencoder functionality as described in Germain et al. (2015).
1118	Converts input order to a degree vector
1119	Returns a list of degree vectors for input and hidden layers in a neural network.
1120	Returns a list of binary mask matrices enforcing autoregressivity.
1121	Return a masked version of the given initializer.
1122	Builds a neural network for autoregressive modeling, ensuring input shape compatibility and constructing masks for layer connections.
1123	Reshape the output of a neural network to match the input shape with an additional parameter dimension.
1124	Sample a multinomial.
1125	Build a zero-dimensional MVNDiag object.
1126	Build an observation_noise_fn that observes a Tensor timeseries.
1127	Build regression weights from model parameters.
1128	Computes the number of edges on the longest path from a node to the root in a graph.
1129	create tuple of str tuple-str pairs representing resolved & sorted DAG.
1130	Creates lists of callables for JDSeq using probability chain rule.
1131	Creates `dist_fn`, `dist_fn_wrapped`, `dist_fn_args`, `dist_fn_name` from a model.
1132	Computes the negative variational lower bound for a Variational Gaussian Process (VGP), given observations and their index points, by combining likelihood, trace, and KL divergence terms.
1133	Computes the optimal variational location and scale for the VGPbased on the method suggested in [Titsias, 2009][1].
1134	Build utility method to compute whether the season is changing
1135	Build change-of-basis matrices for constrained seasonal effects.
1136	Builds a function computing transitions for a seasonal effect model.
1137	Builds the transition noise model for a SeasonalStateSpaceModel. Increases the variance of the effect following drift_scale if the current season has just ended.
1138	Build transition noise distribution for ConstrainedSeasonalSSM.
1139	Returns True if given observation data is empty. Emptiness means either both `observation_index_points` and `observations` are `None`, or the "number of observations" shape is 0.
1140	Ensure that observation data and locations have consistent shapes.
1141	Adds a learning rate scheduler to the contained schedules.
1142	Configure checkpoint settings.
1143	Configures constant clipping settings.
1144	Performs an optimization and returns the optimized model.
1145	Set train summary
1146	Set validation summary for the optimizer.
1147	Create an optimizer based on input type. Return a local or distributed optimizer.
1148	Sets new training dataset for optimizer reuse
1149	Sets the interval of recording for each indicator.
1150	Reads MNIST data from a directory, downloading if necessary. Returns features and labels as NumPy arrays.
1151	Parses or downloads news20 dataset if source_dir is empty, then returns a list of (tokens, label).
1152	Parse or download the pre-trained GloVe word2vec if source_dir is empty.
1153	Configures the learning process, setting optimizer, loss, and metrics. Must be called before fit or evaluate.
1154	Trains a model for a fixed number of epochs on a dataset, supporting distributed and local modes.
1155	Evaluate a model on a given dataset in distributed mode.
1156	Use a model to do prediction. Input data can be a Numpy array or RDD of Sample. Whether to do prediction in distributed mode or local mode is specified by the `distributed` parameter. Default is True. In local mode, x must be a Numpy array.
1157	Get mnist dataset and parallelize into RDDs.
1158	Preprocess MNIST dataset by normalizing and transforming into Sample of RDDs.
1159	Determines the end trigger for optimization based on the input option. Returns MaxEpoch or MaxIteration accordingly.
1160	Set validation and checkpoint for distributed optimizer.
1161	Return the broadcasted value.
1162	Calls an API in PythonBigDL.
1163	Call Java Function
1164	Converts an RDD of Python objects into an RDD of Java objects using Pyrolite serialization.
1165	Convert Python object into Java
1166	Convert to a bigdl activation layer given the name of the activation as a string.
1167	Convert a numpy ndarray to a DenseTensor for use in Java.
1168	get label as ndarray from ImageFeature
1169	Reads a parquet file as a DistributedImageFrame.
1170	write ImageFrame as parquet file
1171	get image from ImageFrame.
1172	Get image list from ImageFrame
1173	Converts ImageFrame data to a label tensor RDD.
1174	Return prediction RDD from ImageFrame.
1175	Generates output predictions for the input samples, processing in a batched way for distributed mode.
1176	Optimize the model by the given options
1177	Apply a transformer to images in "inputCol" and save the transformed result in "outputCols".
1178	Save a Keras model definition to JSON with given path.
1179	Define a convnet model in Keras 1.2.2
1180	Use a distributed method to predict class labels from RDD data.
1181	Sets weights for the layer, handling exceptions for incompatible layer types and weight dimensions.
1182	Get weights for this layer
1183	Save a model to protobuf files for TensorFlow inference, adding placeholders for input nodes.
1184	Set this layer in the training mode or prediction mode
1185	Loads a pre-trained Torch model.
1186	Load a pre-trained Keras model with optional JSON and HDF5 paths, handling multiple loading scenarios.
1187	Create a python Criterion by a java criterion object.
1188	Load weights from JSON and HDF5 files
1189	Load IMDB dataset Transform input data into an RDD of Sample
1190	Define a recurrent convolutional model in Keras 1.2.2
1191	Return a list of shape tuples if there are multiple inputs; return one shape tuple otherwise.
1192	Return a list of shape tuples if there are multiple outputs. Return one shape tuple otherwise.
1193	Get mnist dataset with features and label as ndarray. Data would be downloaded automatically if it doesn't present at the specific location.
1194	Reads Movielens 1m dataset from a directory and returns a 2D numpy array with user and item indices.
1195	Get and return the jar path for bigdl if exists. If not found, search for jar files in the specified directory.
1196	Check if spark version is below 2.2
1197	Exports variable tensors from a TensorFlow checkpoint file.
1198	Save a variable dictionary to a Java object file, so it can be read by BigDL
1199	Expand and tile tensor along given axis
1200	Collecting possible continuations of length <= n for every node
1201	Computes weighted sum of memory elements using attention mechanism.
1202	Computes weighted sum of inputs conditioned on state.
1203	Calculate the BLEU score for a translation given a reference corpus.
1204	Returns opened file object for writing dialog logs.
1205	Logs single dialog utterance to current dialog log file.
1206	Get summary ops for the magnitude of gradient updates.
1207	Dump the trained weights from a model to a HDF5 file.
1208	Read data using a specified dataset reader from a configuration.
1209	Train and evaluate a model based on a configuration, optionally recurse through sub-configurations.
1210	Exchange messages between basic pipelines and the Yandex.Dialogs service. If the pipeline returns multiple values, only the first one is forwarded to Yandex.
1211	Converts labels to one-hot vectors for multi-class multi-label classification
1212	Convert vectors of probabilities to one-hot representations using confident threshold.
1213	Configure session for particular device Returns: tensorflow.Session
1214	Checks existence of the model file, loads the model if the file exists
1215	Extract values of momentum variables from optimizer.
1216	Updates the graph variables for `learning_rate` and `momentum`.
1217	Calculate the F1 macro measure.
1218	Converts word to a tuple of symbols, optionally converts it to lowercase and adds capitalization label.
1219	Stacked CNN with multiple convolutional layers, batch normalization, and dilation.
1220	Implement a bi-directional recurrent neural network using LSTM or GRU cells.
1221	Stacks recurrent neural networks (GRU or LSTM), returning the output and last hidden states/cells.
1222	Highway convolutional network with skip connections and gating mechanism.
1223	Creates a token embedding layer, optionally initializing with a given matrix. Outputs embedded tokens based on input indices.
1224	Fast CuDNN GRU implementation
1225	Create a CuDNN compatible GRU implementation, suitable for running models saved on GPU on CPU.
1226	Fast CuDNN LSTM implementation
1227	CuDNN Compatible LSTM implementation. It should be used to load models saved with CudnnLSTMCell to run on CPU.
1228	Implements a fast Bi-GRU using CuDNN.
1229	Fast CuDNN Bi-LSTM implementation.
1230	Fast CuDNN Stacked Bi-GRU implementation.
1231	Dropout with the same drop mask for all fixed_mask_dims
1232	Builds the network using Keras.
1233	Builds a word-level convolutional network using one-hot encoding and convolution layers.
1234	Creates the basic network architecture by transforming word embeddings to intermediate outputs using LSTM layers and dropout.
1235	Trains model on a single batch
1236	Makes predictions on a batch of data and returns a batch of label sequences.
1237	Transforms a sentence to a 3D Numpy array with indices representing words and characters.
1238	Transforms a sentence of tags to a Numpy array for network target.
1239	Calculate BLEU score with optional brevity penalty
1240	Verify signature certificate URL against Amazon Alexa requirements.
1241	Extracts pycrypto X509 objects from SSL certificates chain string.
1242	Verify if Amazon and additional certificates create a chain of trust to a root CA.
1243	Verify Alexa request signature using Amazon certificate and signature from HTTP header. Returns True if verification successful, False otherwise.
1244	Conducts series of Alexa SSL certificate verifications against Amazon Alexa requirements. Returns the Amazon certificate if verification was successful, None if not.
1245	Returns a list of JSON-compatible states of the RichMessage instance, representing nested controls.
1246	Converts a list of controls into their MS Bot Framework representation.
1247	Returns list of Telegram compatible states of the RichMessage instance nested controls.
1248	Returns a list of Amazon Alexa compatible states for the RichMessage instance's nested controls.
1249	Configure DeepPavlov console settings
1250	Constructs function encapsulated in the graph
1251	Constructs function encapsulated in the graph and the session.
1252	Calculate accuracy in terms of absolute coincidence
1253	Rounds predictions and calculates accuracy in terms of absolute coincidence.
1254	Initializes variables with pretrained weights from files.
1255	Reads data from a file and returns it as a list of input-output tuples for training, validation, and testing.
1256	Builds agent for handling greetings using skills.
1257	Convert an array of integers to a one-hot encoded array.
1258	Prettifies a list of metrics by rounding the values to a specified precision.
1259	Populate settings directory with default settings files; replace existing files if force is True.
1260	Loads model parameters from self.load_path while excluding optimizer variables
1261	Save model parameters to self.save_path
1262	Get train operation for given loss.
1263	Finds all dictionary words in d-window from word
1264	Sets default operation costs for replacement, insertion, deletion, and transposition.
1265	Initiates self-destruct timer.
1266	Route Alexa requests to appropriate handlers.
1267	Infers DeepPavlov agent with raw user input from Alexa request.
1268	Populates generated response with additional data conforming Alexa response specification.
1269	Handles Alexa IntentRequest by validating intent name and slot, generates response, and returns it.
1270	Handles LaunchRequest Alexa request.
Returns response dict conforming Alexa specification.
1271	Handles all unsupported types of Alexa requests. Returns standard message.
1272	Defines pretty printing rules for iPython.
1273	Convert list of model losses to perplexity.
1274	Build and return the model described in the provided configuration.
1275	Start interaction with the model described in the configuration file.
1276	Reads data from a file or stdin, processes it in batches using a model, and prints predictions to stdout.
1277	Reads input file in CONLL-U format
1278	Returns a function object with the name given in string.
1279	Decorator for metric registration.
1280	Return a metric callable by name. Raise ConfigError if not registered.
1281	Convert string label of decay type to special index.
1282	Find the best value according to given losses
1283	Embed one text sample and return mean embedding of tokens per sample.
1284	Parses requirements from requirements.txt.
1285	Calculates log loss.
1286	Exports a TF-Hub module
1287	Formats catalog item output
1288	Make an agent.
1289	Parse parameters and run ms bot framework
1290	Download file from URL to one or several target locations.
1291	Extract contents of a tar file to a specified folder
1292	Download and extract .tar.gz, .gz, or .zip files to target locations. Optionally use a cache directory for previously downloaded files.
1293	Updates dictionary recursively
1294	Given a file URL, returns the URL of the md5 file
1295	Given a URL, sets or replaces a query parameter and returns the modified URL.
1296	Returns Amazon Alexa compatible state of the PlainText instance. Creating Amazon Alexa response with populated "outputSpeech" and "card" sections.
1297	Return json compatible state of the Button instance
1298	Returns MS Bot Framework compatible state of the Button instance.
1299	Returns json compatible state of the ButtonsFrame instance, including all nested buttons.
1300	Generate MS Bot Framework activity from ButtonsFrame.
1301	Calculates the F-1 score between the correct answers and predicted answers, using the best matching correct answer for each prediction.
1302	Calculates recall at k ranking metric
1303	Return True if at least one GPU is available.
1304	Recursively apply config's variables values to its property
1305	Read config variables and apply their values to all its properties.
1306	Convert relative paths to absolute with resolving user directory.
1307	Builds and returns a Component from a dictionary of parameters.
1308	Process incoming requests, handle them, and output responses.
1309	Deletes Conversation instance.
1310	Conducts cleanup of periodical certificates with expired validation.
1311	Verify Alexa request against Amazon Alexa requirements using signature chain URL and request body.
1312	Processes Alexa requests, verifies signature, checks timestamp, manages conversations, and returns responses.
1313	Returns a class object with the name given as a string.
1314	Register classes for JSON configuration with optional name conversion.
1315	Returns a registered class object with the name given in the string.
1316	Extracts full regularization path explored during lambda search from glm model.
1317	Creates a custom GLM model using the given coefficients.
1318	Create H2OCluster object from a list of key-value pairs.
1319	Shut down the server, prompting the user if requested.
1320	Determine if the H2O cluster is running or not.
1321	Print current cluster status information. If detailed, also print information about each node.
1322	List all jobs performed by the cluster.
1323	Returns the list of all known timezones.
1324	Update information in this object from another H2OCluster instance.
1325	Retrieve and process parameters for metalearner algorithm.
1326	Repeatedly test a function until it returns True, with an option to specify an error message function or string, and customizable timeout and retry delay.
1327	Return the summary for a single column for a single Frame in the h2o cluster.
1328	Delete a frame on the h2o cluster, given its key.
1329	Return a model builder or all known model builders in the H2O cluster.
1330	Remove training frame from parameters if it is not present
1331	Does not provide a concise summary
1332	Retrieve model metrics with optional timeout.
1333	Delete a model on the h2o cluster, given its key.
1334	Create a pretty-printed table of cached data and column names
1335	Creates a new reservation for a specified number of EC2 instances, waits for them to start, and optionally waits for SSH access.
1336	Terminate all instances given by their IDs.
1337	Stops all instances given by their IDs.
1338	Start all the instances given by their IDs.
1339	Reboot all instances given by their ids.
1340	Wait for SSH service to appear on given hosts.
1341	Return fully qualified function name.
1342	Given a frame and a compiled function code, find the corresponding function object within the frame.
1343	Return function's declared arguments as a string Highlights specified argument
1344	Returns a piece of text, word-wrapped at a specified length with an optional indent for subsequent lines.
1345	Waits until job's completion.
1346	Trains an H2O model.
1347	Fits an H2O model using scikit-learn interface, issues a warning if not used within sklearn framework
1348	Obtain parameters for this estimator. Used primarily for sklearn Pipelines and sklearn grid search.
1349	Handle caught signals. Terminate the runner.
1350	Clear the output directory.
1351	Removes sandbox directories if they exist under the parent directory.
1352	Look at the stdout log and figure out which port the JVM chose. If successful, port number is stored in self.port; otherwise the program is terminated. This call is blocking, and will wait for up to 30s for the server to start up.
1353	Look at the stdout log and wait until the cluster of proper size is formed.
1354	Normal node shutdown
1355	Normal cluster shutdown.
1356	Return an ip to use to talk to this cluster.
1357	Return a port to use to talk to this cluster.
1358	Return the coordinates of the ROC curve for a given set of data.
1359	Determines vec_size for a pre-trained model after basic model verification. Raises error if first column is not a string or if there are multiple string columns.
1360	Calculate mean absolute error between actual and predicted responses.
1361	Return the mean squared error regression loss given actual and predicted responses.
1362	Computes median absolute error regression loss between actual and predicted responses in H2OFrames.
1363	Explained variance regression score function.
1364	Assert that the argument has the specified type. Raises an H2OTypeError if the argument is not of the desired type.
1365	Asserts that a string variable matches the provided regular expression.
1366	Assert that variable satisfies the provided condition, raising an exception with a custom message if the condition is not met.
1367	Retrieve variable names for use in assert statements.
1368	Return True if the variable is of the specified type, and False otherwise.
1369	Return the name of the provided type.
1370	Attempt to find the source code of a lambda function within a string.
1371	Return True if the variable does not match any of the types
1372	Check whether the provided value is a valid enum constant.
1373	Retrieve the config as a dictionary of key-value pairs.
1374	Find and parse config file, storing all variables in self._config.
1375	Retrieve possible locations for the .h2oconfig file, one at a time.
1376	Starts a progress bar and waits until the progress reaches 100%. Executes a given function to determine progress, allowing for custom rendering and interruption handling.
1377	Save current model progress and update next poll time based on response and timestamp.
1378	Compute t0, x0, v0, ve.
1379	Estimate the moment when the underlying process is expected to reach completion based on recent progress data.
1380	Determine when to query the progress status next.
1381	Calculate the modelled progress state for a given time moment. Returns progress level and speed.
1382	Return the projected time when progress level `x_target` will be reached using the Newton method.
1383	Print the rendered string to the stdout.
1384	Compute widths of all widgets during initial rendering stage.
1385	Detects terminal width by trying `stty`, `ioctl`, and `COLUMNS` environment variable, defaulting to 80 if none.
1386	Informs the widget about the encoding of the underlying character stream.
1387	Returns encoding map as an object that maps 'column_name' -> 'frame_with_encoding_map_for_this_column_name'.
1388	Retrieve an existing H2OFrame from the H2O cluster using the frame's id.
1389	Reload frame information from the backend H2O server.
1390	Get type of column by name or index in a frame.
1391	Extracts columns of the specified type from the frame.
1392	Display summary information about the frame. Calculates min/mean/max/sigma and other rollup data. Returns a dictionary of the summary output if requested.
1393	Generate an in-depth description of this H2OFrame. This will print to the console the dimensions of the frame; names/types/summary statistics for each column; and finally first ten rows of the frame. Option to include chunk and distribution summaries.
1394	Return the first `rows` and `cols` of the frame as a new H2OFrame.
1395	Multiplies the current frame (viewed as a matrix) by another matrix. Returns a new H2OFrame with the multiplication result. Raises an error if the matrices are incompatible.
1396	Get the factor levels of a H2OFrame.
1397	Return the number of factor levels for each categorical column.
1398	Set all column values to one of the levels.
1399	Replace the levels of a categorical column. New levels must be aligned with the old domain. This call has copy-on-write semantics.
1400	Change names of columns in the frame.
1401	Change names of all columns in the frame.
1402	Set a new name for a column.
1403	Test whether elements of an H2OFrame are contained in the `item`. Returns an H2OFrame of 0s and 1s showing whether each element is contained in the `item`.
1404	Build a fold assignments column for cross-validation.
1405	Build a fold assignment column with the constraint that each fold has the same class distribution as the fold column.
1406	Compactly display the internal structure of an H2OFrame.
1407	Obtain the dataset as a Python-local object, either as a pandas DataFrame or a plain nested list.
1408	Pops a column from the H2OFrame at index i.
1409	Compute quantiles based on probabilities and optional weights.
1410	Append multiple H2OFrames to this frame, column-wise or row-wise
1411	Append data to current frame column-wise.
1412	Append data to this frame row-wise.
1413	Split a frame into distinct subsets of size determined by the given ratios.
1414	Return a new ``GroupBy`` object using this frame and the desired grouping columns.
1415	Fills NA values in a Frame along a specified axis and direction with a maximum fill length.
1416	Imputes missing values into the frame, modifying it in-place.
1417	Merge two datasets based on common column names.
1418	Reorder levels of an H2O factor for one single column of a H2O frame such that the reference level is at level 0.
1419	Inserting missing values into the current frame, modifying it in-place.
1420	Compute the variance-covariance matrix of one or two H2OFrames
1421	Compute the correlation matrix of one or two H2OFrames.
1422	Compute a pairwise distance measure between all rows of two numeric H2OFrames.
1423	Convert columns in the current frame to categoricals.
1424	Split the strings in the target column on the given regular expression pattern.
1425	Count the occurrences of a given pattern in each string element of a H2OFrame. The pattern can be a single string or a list of strings. Returns a numeric H2OFrame with the same shape as the original, containing counts of matches for each cell.
1426	Return a new string that is a substring of each string in the original H2OFrame, based on the specified start and end indices. If end_index is not provided, the substring extends to the end of the string. Negative start_index is coerced to 0. If start_index is out of bounds or greater than or equal to end_index, an empty string is returned.
1427	Remove leading characters (whitespace by default) from strings in a column.
1428	Computes the Shannon entropy for each string in the H2OFrame, returning an H2OFrame of entropies. Returns 0 for empty strings.
1429	Counts valid 2-character or longer substrings in strings from a file and returns the count in an H2OFrame.
1430	Computes counts of values appearing in a column, or co-occurrence counts between two columns.
1431	Compute a histogram over a numeric column
1432	Compute the iSAX index for DataFrame which is assumed to be numeric time series data.
1433	Substitutes the first occurrence of a pattern in a string with a replacement.
1434	Translate characters from lower to upper case for a particular column. Returns new H2OFrame with all strings converted to uppercase.
1435	Searches for matches to a pattern within elements of a string column and returns matching positions or a logical vector.
1436	Remove rows with NAs from the H2OFrame.
1437	Conduct a diff - 1 transform on a numeric frame column.
1438	For each element in an H2OFrame, determine if it is NA or not. Returns an H2OFrame of 1s and 0s, where 1s indicate the values were NAs.
1439	Extracts the "minute" part from a date column, returning a single-column H2OFrame.
1440	Generates a column of random numbers drawn from a uniform distribution [0,1) and having the same data layout as the source frame.
1441	Constructs a column for random stratified splitting.
1442	Cut a numeric vector into categorical "buckets".
1443	Get the index of the max value in a column or row.
1444	Apply a lambda expression to an H2OFrame. Returns a new H2OFrame with the results of applying the function to the current frame.
1445	Split a string into lines and tokenize the code.
1446	Parse the provided file, and return Code object.
1447	Move the token by `drow` rows and `dcol` columns.
1448	Convert the parsed representation back into the source code.
1449	Return the sizes of each cluster.
1450	Return the centers for the KMeans model.
1451	The standardized centers for the kmeans model.
1452	Connect to an existing H2O server, either local or remote, using various parameters.
1453	Perform a REST API request to a previously connected server.
1454	Verify compatibility between h2o-python module and H2O server versions.
1455	Import a single file or collection of files based on the provided path and optionally a regular expression pattern. Returns either a H2OFrame or a list of H2OFrames if importing multiple files.
1456	Upload a dataset from the provided local path to the H2O cluster.
1457	Import a dataset from a remote file path on the H2O cluster.
1458	Import Hive table to H2OFrame in memory. Uses hive-site.xml to connect to Hive.
1459	Import SQL table to H2OFrame in memory.
1460	Import an SQL table to H2OFrame using a specified SQL query.
1461	Parse dataset using the parse setup structure.
1462	Create a deep clone of the frame `data`.
1463	Load a model from the server.
1464	Return the specified grid.
1465	Obtain a handle to the frame in H2O with the given frame_id.
1466	Download the POJO for this model to the directory specified by path; if path is "", then dump to screen.
1467	Downloads an H2O data set to a CSV file on the local disk
1468	Downloads H2O log files to a specified directory.
1469	Exports a H2OFrame to a specified path on the connected machine, with options for overwriting and exporting in multiple parts.
1470	Convert an H2O data object into a python-specific object. If Pandas is available and use_pandas is True, then pandas will be used to parse the data frame. Otherwise, a list-of-lists populated by character data will be returned.
1471	Built-in demo facility for H2O Python functions
1472	Imports a data file within the 'h2o_data' folder. Tries three possible paths and raises an error if not found.
1473	Create Model Metrics from predicted and actual values in H2O.
1474	Uploads a file into DKV and saves it with a specified key as a raw object.
1475	Uploads a custom metric function or its string representation into an H2O cluster.
1476	Validate that the provided frame ID is valid in the Rapids language.
1477	Converts bytes to human-readable format with suffixes like kb, Mb, Gb.
1478	Normalize slice
Convert slice with negative indices and None to canonical form.
1479	Return True if slice ``s`` is in "normalized" form.
1480	Score a Pandas dataframe using a MOJO model from a zip file, returning predictions in a Pandas dataframe.
1481	Scores a CSV file using a MOJO model and outputs predictions.
1482	Mark a function as deprecated with a warning message.
1483	Wait until grid finishes computing
1484	Obtains details from a hidden layer of a dataset for each model.
1485	Print a detailed summary of the explored models.
1486	Print models sorted by metric.
1487	Get the hyperparameters of a model explored by grid search.
1488	Get the model parameters used for training a specific grid search model, optionally displaying the hyperparameter names.
1489	Retrieve an H2OGridSearch instance. Optionally specify a metric by which to sort models and a sort order.
1490	Gets F1 values for model thresholds. Returns train, valid, or xval F1 values as specified.
1491	Return the Importance of components associated with a pca model.
1492	Convert archetypes of the model into original feature space.
1493	Produce a scree plot showing variances for each component using either a bar plot or line plot.
1494	Convert names with underscores into camelcase
1495	Dedents text to the specified indentation level, adding common indentation removed and a new indentation level if specified.
1496	extract run times for GLRM model building iterations
1497	Take user input, parse it, and call functions to execute commands, then extract run summary and store in JSON file.
1498	Close an existing connection; once closed it cannot be used again.
1499	Return the session id of the current connection.
1500	Start logging all API requests to the provided destination, or to a new temporary file if none provided.
1501	Prepare a copy of the data object, converting it into a key/value pairs format for sending to the server. Handle lists and dictionaries with specific conditions.
1502	Prepare `filename` to be sent to the server. "Preparation" involves creating a data structure suitable for passing to requests.request().
1503	Logs the beginning of an API request.
1504	Logs details of an API response.
1505	Log the message `msg` to the destination `self._logging_dest`. If it's a file name, append and close it; if it's a file handle, write directly.
1506	Prepare response for external caller by checking status, handling errors, parsing content, and writing to file if specified.
1507	Helper function to print connection status messages when in verbose mode.
1508	Retrieve information about an AutoML instance.
1509	Download the POJO for the leader model in AutoML to the specified directory
1510	Download the leader model in AutoML in MOJO format.
1511	Fit this object by computing the means and standard deviations used by the transform method.
1512	Scale an H2OFrame with the fitted means and standard deviations.
1513	Undo the scale transformation
1514	Remove extra characters before the actual string we are looking for in Jenkins console output.
1515	Find the slave machine where a Jenkins job was executed on, save this information, and remove the relevant function handle from the list.
1516	Finds git hash and branch info in Jenkins job console, saves in g_failed_test_info_dict, removes function handle from temp_func_list.
1517	Check if Jenkins job has taken too long to finish and was killed. Save information in g_failed_test_info_dict.
1518	Checks if a Jenkins job has failed to build and updates global variables accordingly.
1519	Finds the build ID of a Jenkins job and saves it in a global dictionary. Removes itself from the function list upon finding the build ID and updates the Jenkins URL accordingly. Returns True to continue text mining.
1520	Extract jenkins job name, jenkins url, and view name from user input url.
1521	Scans through Java output text to extract bad Java messages not in ok_java_messages and associates them with unit tests.
1522	Saves log scraping results into specific log files based on build ID.
1523	Concatenate log files into a summary text file for users at the end of daily log scraping.
1524	Write content from one file to another, specifically log file content to a summary text file.
1525	Loop through all Java messages that are not associated with a unit test and write them into a log file.
1526	Load in pickle file containing dict structure with bad java messages to ignore per unit test or for all cases. Store ignored bad java info in g_ok_java_messages dict.
1527	Converts enum constant to canonical snake-case.
1528	Find synonyms using a word2vec model.
1529	Wait until the job finishes and continuously query the server about the status of the job, displaying a progress bar with % completion status.
1530	Converts H2OFrame munging operations into a POJO.
1531	To perform munging operations on a frame specified in steps.
1532	Find the percentile of a list of values.
1533	Return a dictionary containing the default parameters of the model.
1534	Dictionary of actual parameters of the model.
1535	Return hidden layer details based on test data and layer index or name.
1536	Retrieve Model Score History
1537	Print details of a model, including type, key, summary, metrics, and variable importances.
1538	Print or return variable importances as a list or Pandas DataFrame.
1539	Retreive the residual degrees of freedom if this model has the attribute, or None otherwise.
1540	Return the coefficients for non-standardized data.
1541	Download the POJO for this model to the directory specified by path. If path is an empty string, then dump the output to screen.
1542	Download the model in MOJO format.
1543	Save Model Details of an H2O Model in JSON Format to disk
1544	Checks that y_actual and y_predicted have the same length.
1545	Returns a list of H2OModel objects from the cross-validation models.
1546	GBM model demo上传数据集到h2o，解析并显示描述。然后将数据集分成训练集和测试集，构建GLM并进行预测。最后显示默认性能指标。
1547	Run a H2O Deep Learning model demo,upload dataset, parses it, shows description, divides dataset into training and test sets, builds GLM, makes predictions, and displays performance metrics.
1548	GLM model demo. This demo connects to H2O, uploads a dataset, parses it, divides the dataset into training and test sets, builds a GLM model, makes predictions, and displays performance metrics.
1549	Wait for a key press on the console and return it.
1550	Converts to a python 'data frame'
1551	Prints the contents of this table, possibly truncated.
1552	Start a new H2O server on the local machine.
1553	Return the location of an h2o.jar executable. If an explicit path is provided, check if the file exists there. Otherwise, search through multiple locations. Raise an error if h2o.jar is not found.
1554	Produce potential paths for an h2o.jar executable.
1555	Retrieve the Hit Ratios for training, validation, and cross-validation data based on provided parameters.
1556	Convert `DictWriter` delimiter to a string if it's a unicode object.
1557	Convert URI to absolute filepath
1558	Convert directory path to uri
1559	Parses lines of text to identify and return functions and classes, excluding private ones.
1560	Make autodoc documentation template string for a module
1561	Return module sequence discovered from self.package_name
1562	Generate API reST files in specified directory, sets list of written modules
1563	Make a reST API index file from written files
1564	Convert this confusion matrix into a 2x2 plain list of values.
1565	Load java messages that can be ignored pickle file into a dict structure.
1566	Add new java messages to ignore from user text file.
1567	Update the g_ok_java_messages dict by adding or removing java ignored messages based on the action.
1568	Reads a text file containing ignored Java messages and generates a dictionary with test names and corresponding Java message strings to be ignored.
1569	Saves the ignored Java message dictionary to a pickle file.
1570	Write java ignored messages from dictionary to text file.
1571	Parse user inputs and set the corresponding global variables to perform the necessary tasks.
1572	Print the usage menu for script options.
1573	Locate all python files recursively in given directory
1574	Searches the file for any magic incantations. Returns a tuple containing the spell and extra words (or None if no magic present).
1575	Process files in a directory, tokenize, normalize, and verify unchanged.
1576	Transforms an H2OFrame using a MOJO Pipeline.
1577	This function searches for files in a local directory with a specific start name, loads their contents, and summarizes the results into a single dictionary.
1578	Identify and save intermittent test failures with detailed information including test name, last failure time, failure count, and test category.
1579	Produces the desired metric plot, specifically an ROC curve.
1580	retrieves a confusion matrix for specified metrics and thresholds.
1581	Returns True if a deep water model can be built, or False otherwise.
1582	Removes data from files and dictionary for tests older than specified months.
1583	Return endpoints, grouped by the class which handles them.
1584	Set site domain and name.
1585	Adds default data to input data and dumps it as JSON
1586	Comments user's medias
1587	Returns login and password stored in `secret.txt`. Prompts user to select an account or add/delete accounts if the specified username is not found.
1588	Likes medias from the last user_id.
1589	Like media by hashtag.
1590	Filter bot from real users.
1591	Reads a list from a file, with one line containing one item. Returns the list if file items exist.
1592	Add a specific enqueue time to the message.
1593	Defer the message. The message will remain in the queue and must be received specifically by its sequence number in order to be processed. Raises exceptions if the message has been settled, lock has expired, or the settle operation fails.
1594	Provides the SAS URL to download configurations for VPN sites in a resource group.
1595	Guess Python Autorest options based on the spec path.
1596	Update a running PowerShell command with more data
1597	Deletes a managed application definition by its ID with optional custom headers, raw response, and polling option.
1598	Creates a new managed application definition or updates an existing one.
1599	Return the target URI for the request.
1600	Create connection for the request.
1601	Sends request to cloud service server and returns the response.
1602	Executes script actions on an HDInsight cluster and returns a poller for the operation.
1603	Check the availability of a resource name for Front Door.
1604	Permanently deletes the specified vault.
1605	Fetch the URI for the authorization server, default to empty string if not present.
1606	Extracts the host authority from the given URI.
1607	Return a CLI profile class.
1608	Return Credentials and default SubscriptionID of current loaded profile of the CLI.
1609	Gets predictions for a given utterance, in the form of intents and entities.
1610	Check Name Availability for global uniqueness
1611	Opens the request.
1612	Sets up the timeout for the request.
1613	Sets the request header.
1614	Gets back all response headers.
1615	Sends the request body.
1616	Gets status of response.
1617	Get status text of response.
1618	Gets response body as a SAFEARRAY and converts it to str.
1619	Sets client certificate for the request.
1620	Connects to host and sends the request.
1621	Sends the headers of request.
1622	Sends request body.
1623	Gets the response and generates the _Response object
1624	Extract readable part of an id by skipping prefix and namespace.
1625	Converts a Python name into a serializable name
1626	Verify whether two faces belong to the same person. Compares a face ID with a person ID.
1627	Adds a job to the specified account.
1628	get properties from entry xml
1629	descends through a hierarchy of nodes returning the list of children at the inner most level
1630	Recursively searches from the parent to the child gathering all the applicable namespaces along the way
1631	Converts xml response to service bus namespace
1632	Converts xml response to service bus region
1633	Converts xml response to service bus namespace availability.
1634	Converts xml response to service bus metrics objects
1635	Replaces the runbook draft content.
1636	Get domain name recommendations based on keywords.
1637	Asynchronously updates a knowledgebase.
1638	A method for retrieving a collection of group object IDs for which a user is a member.
1639	Builds a package from a given GitHub PR branch and saves it to the specified output folder.
1640	Import data into Redis cache.
1641	Publish runbook draft.
1642	Renew the message lock to maintain it. Raises errors if the message is sessionful or if the lock has already expired.
1643	Replace alterations data.
1644	Adds a new version of a secret resource value.
1645	Get system properties for a specified storage account.
1646	Get primary and secondary access keys for a storage account
1647	Regenerates the primary or secondary access key for a storage account.
1648	Create a new storage account in Windows Azure with specified parameters.
1649	Update information for a storage account in Azure.
1650	Deletes a storage account from Windows Azure.
1651	Checks to see if the specified storage account name is available or if it has already been taken.
1652	Retrieves system properties for the specified hosted service including the service name, type, and optionally deployment details.
1653	Creates a new hosted service in Windows Azure with the specified parameters.
1654	Delete specified hosted service from Windows Azure, optionally delete all disks and source blobs.
1655	Uploads a new service package and creates a new deployment on staging or production.
1656	Deletes the specified deployment.
1657	Initiates virtual IP swap between staging and production deployments for a service.
1658	Initiates a change to the deployment configuration.
1659	Initiates a change in deployment status.
1660	Initiates an upgrade.
1661	Specifies the next upgrade domain to be walked during manual in-place upgrade or configuration change.
1662	Reboot a role instance in a deployment.
1663	Reinstall web and worker role instances OS and initialize storage.
1664	Checks to see if the specified hosted service name is available, or if it has already been taken.
1665	Lists all of the service certificates associated with the specified hosted service.
1666	Returns the public data for the specified X.509 certificate associated with a hosted service.
1667	Add a certificate to a hosted service.
1668	Deletes a service certificate from a hosted service's certificate store.
1669	Retrieves information about a management certificate using its thumbprint.
1670	Add management certificate.
1671	Delete Management Certificate.
1672	Returns the system properties associated with the specified affinity group.
1673	Creates a new affinity group for the specified subscription.
1674	Deletes an affinity group.
1675	List subscription operations based on specified filters and parameters.
1676	Reserves an IPv4 address for a specified subscription with optional label and required location.
1677	Deletes a reserved IP address from the specified subscription.
1678	Associate an existing reserved IP to a deployment.
1679	Disassociate an existing reservedIP from the given deployment.
1680	Retrieve information about a specified reserved IP address.
1681	Retrieves the specified virtual machine.
1682	Provisions a virtual machine based on the supplied configuration.
1683	Adds a virtual machine to an existing deployment
1684	Update specified virtual machine's configuration.
1685	Deletes the specified role in a service deployment, optionally deleting associated OS/data disks and source blobs.
1686	Captures a virtual machine image for use in creating additional customized virtual machines.
1687	Starts the specified virtual machine.
1688	Start specified virtual machines.
1689	Restarts a virtual machine.
1690	Shuts down a specified role in a deployment, with an option to specify the post-shutdown action.
1691	Shuts down specified virtual machines and specifies post-shutdown action.
1692	Adds a DNS server definition to an existing deployment.
1693	Updates the IP address of a DNS server.
1694	Deletes a DNS server from a deployment.
1695	Lists the versions of a resource extension that are available to add to a Virtual Machine.
1696	Replicate a VM image to multiple target locations. This operation is only for publishers.
1697	Unreplicate a VM image from all regions.
1698	Share an existing VM image and set sharing permission.
1699	Creates a VM Image in the image repository using a specified set of virtual hard disks.
1700	Deletes the specified VM Image from the image repository. Optionally deletes the underlying vhd blob in Azure storage.
1701	Retrieve a list of VM images from a repository
1702	Updates a VM Image in the image repository.
1703	Adds an OS image from a storage account to the image repository.
1704	Update an OS image in the image repository.
1705	Updates metadata elements for an OS image using an image reference.
1706	Delete the specified OS image from your image repository, optionally deleting the underlying vhd blob in Azure storage.
1707	Retrieves the specified data disk from a virtual machine.
1708	Adds a data disk to a virtual machine
1709	Updates the specified data disk attached to the specified virtual machine, allowing modifications such as caching and size.
1710	Removes the specified data disk from a virtual machine.
1711	Adds a disk to the user image repository, specifying its type, location, and OS.
1712	Update an existing disk in your image repository.
1713	Delete specified disk from image repository.
1714	Summarizes policy states for the resources under a management group.
1715	Sets up a message receiver handler with specific configurations and potentially adjusts settlement mode based on the handler's mode.
1716	Receive a batch of messages at once.
1717	Renew the session lock to retain access for message processing. Perform periodically before lock expires, or as a background task.
1718	Create or update a VM scale set.
1719	Converts SinglePlacementGroup property to false for an existing virtual machine scale set.
1720	Detect profanity in text and match against blacklists.
1721	Create a new key in Azure Key Vault and return key parameters and attributes.
1722	Imports an externally created key into Azure Key Vault and returns key parameters and attributes.
1723	Update specified attributes of a stored key in Azure Key Vault.
1724	Set a secret in a specified Azure Key Vault.
1725	Sets specified certificate issuer.
1726	Create a Service Bus client from a connection string.
1727	Get an async client for a subscription entity.
1728	Get an async client for all subscription entities in the topic.
1729	Send one or more messages to the current entity.
1730	Gets a Sender for the Service Bus endpoint with optional message timeout and session parameters.
1731	Get a Receiver for the Service Bus endpoint with options for session, prefetch, mode, and idle timeout.
1732	Get a Receiver for the deadletter endpoint of the entity.
1733	Extracts request id from response header.
1734	Performs a GET request and returns the response.
1735	Performs a PUT request and returns the response.
1736	Waits for an asynchronous operation to complete. This calls get_operation_status in a loop and returns when the expected status is reached. The result of get_operation_status is returned. By default, an exception is raised on timeout or error status.
1737	Returns the status of the specified operation.
1738	Add additional headers for management.
1739	Prepare a package for deployment using Travis CI, validate the tag format, create the package, and push it to a PyPI server.
1740	Method for listing certificates in a specified key vault. Returns an iterator-like instance of CertificateItem.
1741	Get list of available service bus regions.
1742	List the service bus namespaces defined on the account.
1743	Get details about a specific service bus namespace.
1744	Create a new service bus namespace.
1745	Delete a service bus namespace.
1746	Check if a specified service bus namespace is available.
1747	Retrieves the topics in the service namespace.
1748	Retrieves the notification hubs in the service namespace.
1749	Retrieve relays in the service namespace.
1750	This operation gets rollup data for a Service Bus metrics queue, including time granularity and retention settings. It uses the provided name, queue name, and metric to fetch the desired data.
1751	Get rollup data for Service Bus metrics topic including time granularity and retention settings.
1752	Get rollup data for Service Bus metrics notification hub. Rollup data includes time granularity for telemetry aggregation and retention settings for each time granularity.
1753	Gets rollup data for Service Bus metrics relay, including time granularity and retention settings for each time granularity.
1754	Create a virtual environment in a directory.
1755	Creates a venv with specified packages in a temp dir and yields the env.
1756	Create a new Azure SQL Database server.
1757	Reset the administrator password for a server.
1758	Get quotas for an Azure SQL Database Server.
1759	Retrieve Azure SQL Server event logs based on server name, start date, interval, and event types
1760	Create an Azure SQL Database server firewall rule.
1761	Update a firewall rule for an Azure SQL Database server.
1762	Deletes an Azure SQL Database server firewall rule.
1763	Retrieves the set of firewall rules for an Azure SQL Database Server.
1764	Get the service level objectives for an Azure SQL Database server
1765	Creates a new Azure SQL Database.
1766	Updates existing database details.
1767	Delete an Azure SQL Database.
1768	List SQL databases on a specified server.
1769	Get all legal agreements for domain purchase.
1770	Closes the handler connection. If the handler has already closed, this operation will do nothing. An optional exception can be passed in to indicate that the handler was shutdown due to an error.
1771	Close down the receiver connection. If the receiver has already closed, this operation will do nothing. An optional exception can be passed to indicate that the handler was shutdown due to error.
1772	Get the session state. Returns None if no state has been set.
1773	Set the session state.
1774	Receive deferred messages.
1775	Merge two `Reservation`s into a new `Reservation`. The two `Reservation`s being merged must have the same properties.
1776	Verifies that the challenge is a Bearer challenge and returns the key=value pairs.
1777	Purges data from a Log Analytics workspace based on user-defined filters. Returns an LROPoller object for tracking the operation's progress.
1778	Handle connection and service errors and return the action to take according to the error type.
1779	Creates a new queue, handling existence based on fail_on_exist flag.
1780	Deletes an existing queue. This operation will also remove all associated state including messages in the queue.
1781	Retrieves an existing queue.
1782	Creates a new topic with the specified topic name and topic object.
1783	Retrieves the description for the specified topic.
1784	Creates a new rule for a subscription.
1785	Retrieves the description for a specified rule.
1786	Retrieves the rules that exist under the specified subscription.
1787	Creates a new subscription in Azure Service Bus.
1788	Gets an existing subscription.
1789	Retrieves the subscriptions in the specified topic.
1790	Enqueues a message into a specified topic, handling message size and quota limits.
1791	Unlocks a message for processing by other receivers on a given subscription, deleting the lock object to cause the message to be unlocked.
1792	Sends a batch of messages to a specified queue.
1793	Unlocks a message for processing by other receivers on a given queue by deleting the lock object.
1794	Receive a message from a queue for processing.
1795	Receives a message from a subscription for processing.
1796	Creates a new Event Hub.
1797	Update an Event Hub.
1798	Retrieves an existing event hub.
1799	Sends a new message event to an Event Hub.
1800	Add additional headers for Service Bus request.
1801	Return the signed string with token.
1802	Check if token expires within 30 seconds
1803	Retrieve token for the request.
1804	Pulls the query string out of the URI and moves it into the query portion of the request object. If there are already query parameters on the request, the parameters in the URI will appear after the existing parameters.
1805	Reset Service Principal Profile of a managed cluster.Update the service principal Profile for a managed cluster.
1806	Deletes itself if find queue name or topic name and subscription name.
1807	Unlocks itself if it finds the queue name or topic name and subscription name. Raises an AzureServiceBusPeekLockError if not peek-locked on unlock.
1808	Renews lock on itself if queue name or topic name and subscription name are found. Raises AzureServiceBusPeekLockError if not peek-locked.
1809	Adds additional headers to a request for a message, including custom properties, content-type, and broker properties.
1810	Returns the current message as expected by batch body format.
1811	Gets the health of a Service Fabric cluster, with options to filter nodes, applications, and events by health state, and to exclude or include health statistics.
1812	Get the health of a Service Fabric cluster using specified policies.
1813	Removes or unregisters a Service Fabric application type from the cluster.
1814	Gets a list of repair tasks matching the given filters.
1815	Submits a batch of property operations.
1816	Simple error handler for azure, raise AzureHttpError with message and status.
1817	Start capturing network packets for the site.
1818	A method to get the configuration settings difference between two web app slots.
1819	Swaps two deployment slots of an app.
1820	Executes an OData query for events.
1821	Add a face to a large face list from an image stream.
1822	Reset auth_attempted on redirects.
1823	Creates Migration configuration and starts migration of entities from Standard to Premium namespace
1824	Publishes a batch of events to an Azure Event Grid topic.
1825	Moves resources from one resource group to another resource group.
1826	Defines a new default profile.
1827	Queries policy tracked resources under a management group.
1828	Create a queue entity with specified properties.
1829	Delete a queue entity.
:param queue_name: The name of the queue to delete.
:param fail_not_exist: Whether to raise an exception if the named queue is not found. If set to True, a ServiceBusResourceNotFound will be raised.
:raises: ServiceBusConnectionError if the namespace is not found.
:raises: ServiceBusResourceNotFound if the queue is not found and fail_not_exist is set to True.
1830	Create a topic entity with various properties.
1831	Delete a topic entity. Raises exceptions if the namespace, topic not found, or fail_not_exist is True.
1832	Create a subscription entity with various properties and handle exceptions related to namespace and existing subscriptions.
1833	Create Client from Service Bus connection string
1834	Update and return the properties of the entity. Handle exceptions for resource not found, connection errors, and invalid credentials.
1835	Whether the receivers lock on a particular session has expired.
1836	Creates a session for a node.
1837	Creates an Azure subscription.
1838	Export logs that show API requests made by this subscription in the
given time window to show throttling activities.
1839	Scans output for exceptions and adds results to a list.
1840	Adds a chunk of tasks to the job. Retries chunk if body exceeds the maximum request size and retry tasks if failed due to server errors.
1841	Worker method to process and submit tasks, handling errors and queue synchronization.
1842	Builds the actual config for Jinja2 based on SDK config.
1843	Resets the user password on an environment. This operation can take a while to complete. Returns an instance of LROPoller.
1844	Starts an environment by starting all resources inside the environment. This operation can take a while to complete.
1845	Create message from response.
1846	Converts entry element to rule object.
1847	Converts XML element representing a queue to a Queue object.
1848	Converts an XML element to a Topic object.
1849	Converts entry element to subscription.
1850	Creates a new certificate inside the specified Batch account.
1851	Deletes the specified certificate.
1852	Returns a SDK client initialized with current CLI credentials, CLI default subscription and CLI default cloud. Parameters provided in kwargs will override CLI parameters and be passed directly to the client.
1853	Create a client instance from a JSON auth dict for the specified SDK client class.
1854	Return a SDK client initialized with auth file.
1855	Parse XML response and construct specified object.
1856	Retrieves properties from an XML element, including etag, updated time, author, and optionally ID, with options to use title as ID or skip specific ID prefixes.
1857	Deletes a Provisioning Service Certificate.
1858	Get a client for a queue entity.
1859	Get clients for all queue entities in the namespace.
1860	Get a client for a topic entity. Raises exceptions if namespace or topic is not found.
1861	Get a client for all topic entities in the namespace.
1862	Receives messages by sequence number that have been previously deferred.
1863	Settle previously deferred messages.
1864	List the web sites defined on a specific webspace.
1865	Create a website.
webspace_name:
The name of the webspace.
website_name:
The name of the website.
geo_region:
The geographical region of the webspace that will be created.
host_names:
An array of fully qualified domain names for website. Only one hostname can be specified in the azurewebsites.net domain.
The hostname should match the name of the website. Custom domains can only be specified for Shared or Standard websites.
plan:
This value must be 'VirtualDedicatedPlan'.
compute_mode:
This value should be 'Shared' for the Free or Paid Shared offerings, or 'Dedicated' for the Standard offering. The default value is 'Shared'. If you set it to 'Dedicated', you must specify a value for the server_farm parameter.
server_farm:
The name of the Server Farm associated with this website. This is a required value for Standard mode.
site_mode:
Can be None, 'Limited' or 'Basic'. This value is 'Limited' for the Free offering, and 'Basic' for the Paid Shared offering. Standard mode does not use the site_mode parameter; it uses the compute_mode parameter.
1866	Delete a website with optional options to delete the last server farm and metrics.
1867	Update a web site.
1868	Restart a web site.
1869	Get historical usage metrics for a given webspace and website with optional parameters for metrics, start time, end time, and time grain.
1870	Get metric definitions for the specified web site.
1871	Returns the publish profile XML for a given website as a string.
1872	Get a site's publish profile as an object.
1873	Update policies for the specified container registry
1874	Create a new cloud service with specified details.
1875	Checks if a new job collection with the given name may be created or is unavailable. Returns Boolean true or false.
1876	Retrieve details of a job collection using its cloud service ID and job collection ID.
1877	Completes the restore operation on a managed database.
1878	Cancel one or more scheduled messages by sequence number.
1879	Wait until all pending messages have been sent. Returns a list of send results. Each result is a tuple indicating success and any error.
1880	Reconnect the handler and attempt to re-queue any pending messages.
1881	Writes a certificate file to the specified location and returns the subscription ID.
1882	Loads and restores any stored cookies for the plugin that are not expired.
1883	Returns the width of the string it would be when displayed.
1884	Truncates value dropping last n characters until it fits max_len width, preserving encoding.
1885	Clears previous line and prints a new one in-place.
1886	Formats the file size into a human-readable format.
1887	Formats elapsed seconds into a human readable format
1888	Creates a status line with appropriate size.
1889	Progress an iterator and update a pretty status line to the terminal.
1890	Yield segment numbers and availability times for a playlist, handling both static and dynamic segment generation scenarios.
1891	Yield segments based on availability and content type.
1892	Pauses the thread for a specified time. Returns False if interrupted and True if the time runs out normally.
1893	Adds a segment to the download pool and write queue.
1894	Puts a value into a queue but aborts if this thread is closed.
1895	Returns any parameters needed for Akamai HD player verification.
1896	Handle extracting nonce from HTTP response
1897	Find the Video Packet ID in the HTML for the provided URL.
1898	Wrapper around json.loads. Wraps errors in custom exception with a snippet of the data in the message.
1899	Parse XML data with options to handle encoding, ignore namespaces, and validate against a schema.
1900	Parse a query string into a dict while preserving duplicate keys.
1901	Search for a key in a nested dict or list of nested dicts and return the values.
1902	Spawn the process defined in `cmd`. Convert `parameters` to options using specified prefixes. If `timeout` is set, wait for the process to complete or timeout. Return the spawned process.
1903	Yields HTML tags matching the specified tag name.
1904	Attempt to parse a DASH manifest file and return its streams
1905	Determines which Unicode encoding the JSON text sample is encoded with
1906	Parses JSON from a response.
1907	Parses XML from a response.
1908	Parse a semi-colon delimited list of cookies and set them.
1909	Parses a semi-colon delimited list of headers.
1910	Parses a semi-colon delimited list of query parameters and sets them in the params attribute.
1911	Return the message for this LogRecord after merging any user-supplied arguments.
1912	A factory method to create specialized LogRecords, overriding in subclasses.
1913	Attempts a login to LiveEdu.tv using provided email and password.
1914	Load a plugin from the same directory as the calling plugin. The path used is extracted from the last call in module scope.
1915	Update or remove keys from a query string in a URL
1916	Reads FLV tags from fd or buf, adjusts timestamps, and yields them.
1917	Find all the arguments required by name.
1918	Checks if file already exists and prompts user to overwrite if necessary.
1919	Decides where to write the stream.
1920	Create a HTTP server listening on a given host and port.
1921	Repeatedly accept HTTP connections on a server, forever if serving externally, or while a player is running if not empty.
1922	Continuously outputs a stream over HTTP.
1923	Prepare a filename for a media player, start it, and handle errors.
1924	Opens a stream and reads 8192 bytes from it to check if it has data before proceeding. If no data is returned or an error occurs, it raises a StreamError and closes the stream.
1925	Open stream, create output, and write stream to output.
1926	Reads data from stream and writes it to output.
1927	Decides what to do with the selected stream. Depending on arguments, outputs internal command-line, JSON representation, continues output over HTTP, or outputs to selected output.
1928	Fetches streams using correct parameters.
1929	Attempts to fetch streams repeatedly until some are returned or limit hit.
1930	Returns the real stream name of a synonym.
1931	Formats and returns a comma-separated list of streams, filtering out synonyms and displaying them next to the stream they point to. Streams are sorted based on their quality.
1932	Handle URL to resolve plugin and fetch available streams.
1933	Outputs a list of all plugins Streamlink has loaded.
1934	Opens a web browser to allow the user to authenticate Streamlink with their Twitch account.
1935	Attempts to load plugins from a list of directories.
1936	Parses command-line arguments from a list of config files. Handles unknown arguments and forces lowercase for case-insensitive lookup.
1937	Configure the console for output handling with streamlink and handle SIGTERM signals.
1938	Sets the global HTTP settings such as proxy and headers.
1939	Load any additional plugins from specified directories.
1940	Sets Streamlink options based on command-line arguments.
1941	Show current installed versions.
1942	Try to find a stream _id
1943	Returns the iframe URL from the given text if found using a regular expression.
1944	Sets general options for plugins and streams, updating proxy settings, cookies, headers, query parameters, and other HTTP-related options. Handles backwards compatibility for deprecated option keys.
1945	Return current value of specified option.
1946	Sets plugin specific options used by plugins originating from this session object.
1947	Returns current value of plugin specific option.
1948	Attempts to find a plugin that can use the specified URL. Prefixes the URL with http if not specified, sorts available plugins by priority, and handles redirects. Raises NoPluginError if no compatible plugin is found.
1949	Attempt to load plugins from a specified directory.
1950	Converts a string representing time in various formats to seconds
1951	Return function that checks if a given string starts with the specified string.
1952	Returns a function to check if a string value ends with another string.
1953	Returns a function that checks if the input string contains another string and raises a ValueError if it does not.
1954	Get a named attribute from an object, optionally returning a default value if the attribute does not exist.
1955	Filters out unwanted items using the specified function. Supports both dicts and sequences.
1956	Applies function to each value inside the sequence or dict, expanding key/value pairs in dicts.
1957	Return URL validation function with specified attributes.
1958	Find a XML element via xpath.
1959	Find a list of XML elements via xpath.
1960	Find embedded player URL in HTTP response.
1961	Parse a M3U8 playlist from a string of data.
1962	Check if the current player supports adding a title. Return the name of the player if supported, else None.
1963	Logs in to Steam using provided credentials, handling captcha and two-factor authentication as needed.
1964	Returns the stream_id contained in the HTML.
1965	Return a nested list of different stream options from HTML. Transform empty quality to "source".
1966	login and update cached cookies
1967	Creates a key-function mapping.
1968	Makes a call against the API.
1969	Starts a session against Crunchyroll's server and retrieves the session ID.
1970	Returns the data for a certain media item.
1971	Creates a new CrunchyrollAPI object, initiates its session, and tries to authenticate it using saved credentials or username/password.
1972	Compress a byte string.
1973	Show character in readable format
1974	Format string or char, truncate if too long
1975	Reads n bytes from the stream at a byte boundary.
1976	Retrieve the value used for processing, with optional extra bits fits in extraBits
1977	Long explanation of the value from the numeric value with optional extra bits
1978	Store decodeTable, compute lengthTable, minLength, maxLength from encodings.
1979	Given bit pattern lengths, set decodeTable, minLength, and maxLength.
1980	Show all words of the code in a nice format.
1981	Read symbol from stream. Return symbol and length.
1982	Expanded version of Code.explanation supporting extra bits. If extra is not supplied, it is not mentioned.
1983	Override if you don't define value0 and extraTable
1984	Computes the range of possible values for a given index.
1985	Return count and value based on index and extra.
1986	Generate a mnemonic or code snippet for a given index by manipulating the code and extra bits.
1987	Return mnemonic representation of meaning. Compresses strings of x's if verbose is True.
1988	Builds an action table from text, parsing columns, and processing actions with regex replacements
1989	Perform the proper action by evaluating a string in a local environment.
1990	Produce hex dump of all data from pos to current stream position.
1991	Process a brotli stream.
1992	Read MNIBBLES and meta block length; if empty block, skip block and return true.
1993	If true, handle uncompressed data
1994	Read block type switch descriptor for given kind of blockType.
1995	In-place inverse move to front transform.
1996	Read prefix code array for different types of alphabets.
1997	Turns an intensity array to a monochrome 'image' by replacing each intensity with a scaled 'color'.
1998	Similar to monochrome, but now do it for multiple colors
1999	Convert vaex dataframe to pyarrow table.
2000	Adds method f to the Dataset class
2001	Adds virtual columns for radial velocities and proper motions in a Cartesian coordinate system.
2002	Convert proper motion to perpendicular velocities
2003	Return a graphviz.Digraph object with a graph of the expression.
2004	Computes counts of unique values.
2005	Maps values of an expression according to a mapper dictionary or custom function, handling missing and null values.
2006	Create a vaex app with the QApplication main loop.
2007	Open a list of filenames, and return a DataFrame with all DataFrames concatenated.
2008	Connect to a SAMP Hub, wait for a table load event, download the table, and return it as a DataFrame.
2009	Create a vaex DataFrame from an Astropy Table.
2010	Create an in memory DataFrame from numpy arrays.
2011	Create a DataFrame from a dictionary of scalars.
2012	Create an in memory DataFrame from a pandas DataFrame.
2013	Read a CSV file using pandas and convert to a DataFrame directly.
2014	Connect to hostname supporting the vaex web api.
2015	Creates a zeldovich DataFrame.
2016	Concatenate a list of DataFrames
2017	Creates a virtual column equivalent to numpy.arange with 0 memory usage.
2018	Adds a dataset and adds it to the UI.
2019	Evaluate expression on server.
2020	Decorate a function to accept delayed computation.
2021	Returns a set of column names that the selection depends on
2022	Helper function for returning tasks results, immediately if progressbar is True, otherwise returning the task itself which is a promise
2023	Sort table by given column number.
2024	Read header data from Gadget data file and return offsets of positions and velocities.
2025	Clear the cursor on plot
2026	Wait for plots to finish using events and processing events.
2027	Open document with the OS's default handler.
2028	Flexible writing, where f can be a filename or f object. If filename, it will be closed after writing.
2029	Combines all masks from a list of arrays, and logically ors them into a single mask
2030	Evaluates expression and drop the result, useful for benchmarking since Vaex is usually lazy.
2031	Return the first element of a binned `expression`, where the values each bin are sorted by `order_expression`.
2032	Calculate the mean of an expression, optionally on a grid defined by `binby`.
2033	Calculate the sum for the given expression, possibly on a grid defined by binby.
2034	Calculate the standard deviation for a given expression, optionally on a grid defined by binby.
2035	Calculate the covariance matrix for x and y, optionally binned by expressions, with various parameters controlling the calculation process.
2036	Calculate minimum and maximum for expressions, possibly on a grid defined by binby.
2037	Calculate the minimum for given expressions, possibly on a grid defined by binby.
2038	Calculate the median value approximately, possibly on a grid defined by binby. Uses percentile approximation method.
2039	Viz 1d, 2d, or 3d in a Jupyter notebook using vaex libraries.
2040	Count non-missing values for an expression on an array representing Healpix data.
2041	Plots data in 2D using a HEALPix column.
2042	Create a 3D plot using given data and parameters.
2043	Return the numpy dtype for the given expression, evaluating the first row if not a column.
2044	Returns a directory path for storing files related to a DataFrame, optionally creating the directory if it doesn't exist.
2045	Return the internal state of the DataFrame in a dictionary
2046	Sets the internal state of the DataFrame using a dictionary, optionally applying an active range.
2047	Removes virtual metadata file and containing directory if empty
2048	Writes virtual columns, variables, their UCD, description, and units to a YAML file.
2049	Writes all meta data, ucd, description, and units
2050	Generate a Subspaces object based on a custom list of expressions or all possible combinations based on dimensions.
2051	Set the variable to an expression or value.
2052	Evaluate the variable by its name.
2053	Evaluate a slicing mask for a selection.
2054	Return a dict containing the ndarray corresponding to the evaluated data.
2055	Return a copy of the DataFrame, if selection is None, it does not copy the data, it just has a reference
2056	Convert a Vaex DataFrame to a pandas DataFrame.
2057	Returns an arrow Table object containing the arrays corresponding to the evaluated data.
2058	Returns an astropy table object containing the ndarrays corresponding to the evaluated data
2059	Add an in-memory array as a column to the DataFrame.
2060	Renames a column in memory, optionally storing the change in state
2061	Convert cartesian coordinates to polar coordinates and optionally propagate uncertainties.
2062	Convert velocities from a cartesian to a spherical coordinate system.
2063	Convert cartesian velocities to polar coordinates.
2064	Convert cylindrical polar velocities to Cartesian.
2065	Apply a 2D rotation transformation to specified columns and optionally propagate uncertainties.
2066	Convert spherical coordinates to cartesian coordinates.
2067	Convert cartesian coordinates to spherical coordinates
2068	Add a virtual column to the DataFrame.
2069	Deletes a virtual column from a DataFrame.
2070	Add a variable to a DataFrame and handle unique and overwrite conditions.
2071	Deletes a variable from a DataFrame.
2072	Return a shallow copy of a DataFrame with the last n rows.
2073	Display the first and last n elements of a DataFrame in HTML format.
2074	Generate a Pandas dataframe describing the DataFrame.
2075	Display the DataFrame from row i1 till i2
2076	Set the current row, and emit the signal signal_pick.
2077	Return a list of column names based on specified filters and conditions
2078	Trim the DataFrame to the active range.
2079	Returns a DataFrame containing only rows indexed by indices.
2080	Return a DataFrame containing only the filtered rows.
2081	Return a DataFrame with a random set of rows, providing either n or frac.
2082	Returns random portions of the DataFrame.
2083	Splits a DataFrame into ordered subsets based on a fraction or fractions.
2084	Sort a DataFrame, sorted by the expression 'by'.
2085	Converts a virtual column in a DataFrame to an in-memory numpy array.
2086	Undo selection for a given name.
2087	Redo the selection for the given name.
2088	Check if selection name can be redone
2089	Perform a selection based on a boolean expression, combining it with previous selections using a specified mode.
2090	Create a selection that filters rows with non-missing values in specified columns, using options to drop NaN and masked values, and supports boolean operations.
2091	Drop rows with NaN or masked values in specified columns
2092	Select a 2d rectangular box in the space defined by x and y, bounded by limits.
2093	Select an n-dimensional rectangular box bounded by limits
2094	Select a circular region centered at (xc, yc) with radius r.
2095	Select an elliptical region based on center coordinates and dimensions
2096	Handling lasso selection, supporting different modes and custom execution.
2097	Invert the selection
2098	Sets the selection object
2099	Select a new item and update selection history.
2100	Finds a non-colliding name by optional postfixing
2101	Returns a list of string which are the virtual columns that are not used in any other virtual column.
2102	Return a graphviz.Digraph object with a graph of all virtual columns.
2103	Mark column as categorical, with given labels, assuming zero indexing
2104	Encode column as ordinal values and mark it as categorical.
2105	Get direct access to DataFrame data as numpy arrays using attributes.
2106	Get the length of the DataFrames, for the selection of the whole DataFrame. If selection is False, it returns len(df). If selection is True, it returns the number of selected rows when self.mask is not None, otherwise, it returns 0.
2107	Join the columns of the other DataFrame to this one, assuming the ordering is the same.
2108	Concatenate two DataFrames, adding the rows of one to the other and returning a new DataFrame. No data copy is made.
2109	Exports the DataFrame to a vaex hdf5 file
2110	Add a column to the DataFrame
2111	Adds method f to the DataFrame class
2112	Register a new function with vaex and optionally as a property with a given scope.
2113	Returns an array where missing values are replaced by a specified value, handling both NaN values and masked entries.
2114	Obtain the day of the week with Monday=0 and Sunday=6
2115	The day of the year as an ordinal number.
2116	Check whether a year is a leap year.
2117	Extracts the year out of a datetime sample.
2118	Extracts the month from a datetime sample.
2119	Returns the month names of a datetime sample in English.
2120	Extracts the day from a datetime sample.
2121	Returns the day names of a datetime sample in English.
2122	Returns the week ordinal of the year, extracted from a datetime column.
2123	Extracts the hour out of a datetime samples.
2124	Extracts the minute out of a datetime samples. Returns an expression containing the minute extracted from a datetime column.
2125	Extracts the second from a datetime column.
2126	Capitalize the first letter of a string sample.
2127	Concatenate two string columns on a row-by-row basis.
2128	Check if a string pattern or regex is contained within a sample of a string column.
2129	Count the occurrences of a pattern in samples of a string column.
2130	Find the lowest indices where a substring is fully contained in strings within a sample, returning -1 if not found.
2131	Extract a character from each sample at the specified position from a string column.
2132	Returns the lowest indices in each string in a column, where the provided substring is fully contained within a sample. If the substring is not found, -1 is returned. It is the same as `str.find`.
2133	Converts string samples to lower case.
2134	Remove leading characters from a string sample.
2135	Pad strings in a given column.
2136	Duplicate each string in a column.
2137	Returns the highest indices in each string in a column, where the provided substring is fully contained between within a sample. If the substring is not found, -1 is returned.
2138	Returns the highest index in each string where the provided substring is fully contained, or -1 if not found. Similar to `str.rfind`.
2139	Fills the left side of string samples with a specified character such that the strings are left-hand justified.
2140	Remove trailing characters from a string sample.
2141	Slice substrings from each string element in a column.
2142	Removes leading and trailing characters from each string in a column, both from the left and right sides.
2143	Converts all string elements in an array to titlecase.
2144	Converts all strings in a column to uppercase.
2145	Attempts to return a numpy array converted to the most sensible dtype Value errors will be caught and simply return the original array Tries to make dtype int, then float, then no change.
2146	Converts dictionary into numpy recordarray
2147	Writes properties to the file in Java properties format
2148	Writes a comment to a file in Java properties format, handling newlines automatically.
2149	Write a property to a file in Java properties format.
2150	Incrementally read key/value pairs from a Java .properties file, optionally including comments.
2151	Wrap a file to convert newlines regardless of whether the file was opened with the "universal newlines" option or not.
2152	Return the version information for all librosa dependencies.
2153	Handles renamed arguments, returning `new_value` if `old_value` is of type `Deprecated`, otherwise returns `old_value` and emits a deprecation warning.
2154	Set the FFT library used by librosa.
2155	This function performs beat tracking on an audio file and saves the beat timestamps as a CSV file.
2156	Load audio, estimate tuning, apply pitch correction, and save.
2157	Converts frame indices to audio sample indices.
2158	Converts sample indices into STFT frames.
2159	Converts time stamps into Short-Time Fourier Transform (STFT) frames.
2160	Convert one or more MIDI numbers to note strings.
2161	Convert Hz to Mels.
2162	Convert mel bin numbers to frequencies.
2163	Generate frequency bins for an FFT given a sample rate and window size.
2164	Compute the center frequencies of Constant-Q bins.
2165	Compute an array of frequencies on the mel scale
2166	Compute the A-weighting of a set of frequencies.
2167	Return an array of time values to match the time axis from a feature matrix.
2168	Return an array of sample indices to match the time axis from a feature matrix.
2169	Compute the hybrid constant-Q transform of an audio signal using a combination of pseudo CQT and full CQT.
2170	Compute the pseudo constant-Q transform of an audio signal.
2171	Compute the inverse constant-Q transform to reconstruct an audio time-series from a constant-Q transform representation `C`.
2172	Generate the frequency domain constant-Q filter basis.
2173	Trim and stack a collection of CQT responses, cleaning up boundary errors and clipping bottom frequencies.
2174	Compute the filter response with a target STFT hop by computing the STFT matrix and filtering response energy.
2175	Compute the number of early downsampling operations
2176	Perform early downsampling on an audio signal, if it applies. Adjusts the sample rate, hop length, and may scale the signal based on the downsample factor.
2177	Calculate the accumulated cost matrix D using dynamic programming.
2178	Backtracks the optimal warping path using saved step sizes and indices from the cost accumulation step.
2179	Viterbi algorithm for sequence decoding.
2180	Viterbi decoding from discriminative state predictions. Uses the Viterbi algorithm to find the most likely sequence of states given a sequence of conditional state predictions and a transition matrix.
2181	Construct a uniform transition matrix over `n_states`.
2182	Construct a self-loop transition matrix over `n_states`. The transition matrix will have the following properties:].
2183	Constructs a cyclic transition matrix over `n_states` with given probabilities of self-transition and next-state transition.
2184	Construct a localized transition matrix with a triangular or specified window function, respecting state boundaries.
2185	Basic onset detector. Locate note onset events by picking peaks in an onset strength envelope.
2186	Compute spectral flux onset strength envelope by determining the mean flux at each time step.
2187	Backtrack detected onset events to the nearest preceding local minimum of an energy function.
2188	Compute a spectral flux onset strength envelope across multiple channels.
2189	Save time steps as CSV format. If annotations are provided, they will be saved with the corresponding time step.
2190	Output a time series as a .wav file.
2191	Get a default colormap from the given data.
2192	Plot the amplitude envelope of a waveform.
2193	Helper to set the current image in pyplot mode. If `ax` is `None`, set the pyplot current image.
2194	Compute axis coordinates for plotting.
2195	Check if "axes" is an instance of an axis object, and use gca if not.
2196	Set the axis scaling for given axis type and scaling criteria
2197	Get the frequencies for FFT bins.
2198	Compute frequency bins for Mel scale using a specified number of bins and frequency range.
2199	Get CQT bin frequencies
2200	Get chroma bin numbers
2201	Get time coordinates from frames
2202	Estimate the tuning of an audio time series or spectrogram input.
2203	Computes instantaneous frequencies and magnitudes of audio signals using parabolic interpolation on thresholded STFT.
2204	Decompose an audio time series into harmonic and percussive components. This function automates the STFT->HPSS->ISTFT pipeline, ensuring that the output waveforms have equal length to the input waveform `y`.
2205	Extract harmonic elements from an audio time-series.
2206	Extract percussive elements from an audio time-series.
2207	Time-stretch an audio series by a fixed rate
2208	Pitch-shift the waveform by `n_steps` half-steps
2209	Remix an audio signal by re-ordering time intervals.
2210	Frame-wise non-silent indicator for audio input.
2211	Trim leading and trailing silence from an audio signal.
2212	Split an audio signal into non-silent intervals.
2213	Phase vocoder. Given an STFT matrix D, speed up by a factor of `rate`, and return the time-stretched STFT.
2214	Convert an amplitude spectrogram to dB-scaled spectrogram.
2215	Helper function to retrieve a magnitude spectrogram.
2216	HPSS beat tracking

Load the input audio file, perform harmonic-percussive separation, track beats, convert beat frames to timestamps, and save the beat timestamps as a CSV file.
2217	Decompose a feature matrix. Given a spectrogram `S`, produce a decomposition into `components` and `activations` such that `S ~= components.dot(activations)`.
2218	Filtering by nearest-neighbors.
2219	Applies nearest-neighbor filter to S, assuming that the first index corresponds to observations. Uses aggregation operator to compute filtered data array.
2220	Create a matrix to transform FFT bins into Mel-frequency bins
2221	Create a Filterbank matrix to convert STFT to chroma
2222	Ensure fractions in window size result in correct window length and padding.
2223	Construct a constant-Q basis using a filter bank described by [1]_, with adjustable parameters such as sampling rate, frequency range, and windowing function.
2224	Return length of each filter in a constant-Q basis.
2225	Convert a Constant-Q basis to Chroma.
2226	Get the equivalent noise bandwidth of a window function.
2227	Computes a window function, supporting various types of window specifications including string names, parameter tuples, numeric parameters, callable functions, and pre-computed windows.
2228	Construct and return a multirate filterbank using scipy.signal.iirdesign.
2229	Generate center frequencies and sample rates for pitch filterbank similar to [1]
不安定
2230	Helper function for window sum-square calculation.
2231	Compute the sum-square envelope of a window function at a given hop length.
2232	Build a two-dimensional diagonal filter for smoothing matrices.
2233	Compute the spectral centroid of an audio time series or spectrogram. Each frame is treated as a frequency distribution, and the mean (centroid) is calculated per frame.
2234	Computes roll-off frequency for each frame based on the energy distribution in the spectrogram.
2235	Compute spectral flatness to quantify how much noise-like a sound is, as opposed to being tone-like.
2236	Fits an nth-order polynomial to the columns of a spectrogram.
2237	Compute the zero-crossing rate of an audio time series.
2238	Compute a chromagram from a waveform or power spectrogram using chroma filters.
2239	Compute a chromagram using the constant-Q transform.
2240	Compute a mel-scaled spectrogram from audio time-series or a given spectrogram.
2241	Jaccard similarity between two intervals
2242	Find the best Jaccard match from query to candidates
2243	Numba-accelerated interval matching algorithm. Sorts interval starts and ends, then finds overlapping intervals.
2244	Match one set of time intervals to another using Jaccard similarity or minimum distance if strict is False.
2245	Match one set of events to another based on alignment.
2246	Compute harmonic salience function for a given time frequency magnitude representation.
2247	Compute the energy at harmonics of a time-frequency representation.
Given an energy representation and frequency axis, this function calculates the energy at chosen harmonics, resulting in a harmonic array for salience computation.
2248	Compute the Fourier harmonics for a given frequency range
2249	Compute time-varying harmonics from a time-frequency representation.
2250	Read an audio file as a floating-point time series, optionally resampling and converting to mono.
2251	Load an audio buffer using audioread.
2252	Force an audio signal down to mono.
2253	Resample a time series from original sampling rate to target sampling rate.
2254	Compute the bounded auto-correlation of an array along a specified axis.
2255	Estimate coefficients of a linear filter on `y` using Burg's method.
2256	Generate a signal with a default or custom click placed at specified times or frame indices.
2257	Generate a pure tone signal as a cosine wave with specified frequency, sampling rate, and optionally duration or length.
2258	Returns a chirp signal that goes from frequency `fmin` to frequency `fmax`.
2259	Get files with specified extensions in a directory
2260	Phase-vocoder time stretch demo function.
2261	Parse command-line arguments for input file, output file, and optional speed.
2262	HPSS demo function.
2263	Estimate beats from audio using dynamic programming.
2264	Tracks beats in an onset strength envelope using dynamic programming and score thresholding.
2265	Construct the local score for an onset envelope and given period.
2266	Core dynamic program for beat tracking
2267	Get the last beat from the cumulative score array.
2268	Convert a recurrence matrix into a lag matrix.
2269	Convert a lag matrix into a recurrence matrix.
2270	Wrap a time-domain filter function to operate on recurrence matrices in the time-lag domain.
2271	Sub-divide a segmentation by feature clustering.
2272	Utility function for bottom-up temporal segmentation using agglomerative clustering.
2273	Apply diagonal smoothing filters to a similarity matrix and aggregate the results by element-wise maximum to enhance paths.
2274	This function detects onsets in an audio file and saves the timestamps of these onsets as a CSV file.
2275	Slice a time series into overlapping frames using low-level stride manipulation.
2276	Indicate whether input data contains valid, mono audio.
2277	Ensure that an input value is integer-typed. This is primarily useful for ensuring integrable-valued array indices.  
Parameters:  
- x: A scalar value to be cast to int  
- cast: A function to modify x before casting. Default: np.floor  
Returns: x_int: int (x_int = int(cast(x)))  
Raises: ParameterError if cast is provided and is not callable
2278	Ensure array has specified axis length by padding or trimming.
2279	Sort an array along its rows or columns based on a specified axis, using a custom sorting function. Returns the sorted array and optionally the sorting indices.
2280	Normalize an array along a chosen axis. Given a norm and axis, the input array is scaled so that norm along the axis equals 1. Optionally handles thresholding and filling of small-norm slices.
2281	Find local maxima in an array `x`
2282	Method to pick peaks in a signal using a flexible heuristic, checking three conditions for peak selection.
2283	Return a row-sparse matrix approximating the input `x`. Remove elements with magnitudes below the specified quantile in each row.
2284	Sparse matrix roll This operation is equivalent to numpy.roll but operates on sparse matrices. Parameters ---------- x : scipy.sparse.spmatrix or np.ndarray The sparse matrix input shift : int The number of positions to roll the specified axis axis : (0, 1, -1) The axis along which to roll Returns ------- x_rolled : same type as `x` The rolled matrix, with the same format as `x`
2285	Convert an integer buffer to floating point values.
2286	Generate a slice array from an index array.
2287	Synchronous aggregation of a multi-dimensional array between boundaries
2288	Compute robustly a softmask operation
2289	Compute the smallest representable positive number for a given array's data type.
2290	Reads frame images from a directory and joins them into a video.
2291	Read the next frame. If already in cache, return it. Otherwise, decode, cache, and return it.
2292	Get frame by index.
2293	Convert a video to frame images.
2294	Track the progress of tasks execution with a progress bar.
2295	Tracks the progress of parallel task execution with a progress bar.
2296	Flip an image horizontally or vertically.
2297	Rotate an image by a specified angle.
2298	Clip bboxes to fit the image shape.
2299	Scale bounding boxes based on their center point with an option to clip the results within a specified shape.
2300	Crop image patches by scaling, clipping, and cropping or padding.
2301	Pad an image to a certain shape by filling in padding areas with specified values.
2302	Pad an image to ensure each edge is a multiple of a specified number.
2303	Rescale a size by a ratio.
2304	Resize image to a given size.
2305	Resize image to the same size as a target image.
2306	Resize image while maintaining aspect ratio by scaling it up to a specified maximum size or scale factor, returning the rescaled image and optionally the scaling factor.
2307	Register a handler for some file extensions.
2308	Get priority value.
2309	Dequantize an array by converting quantized values back to the original range using specified minimum and maximum values and quantization levels.
2310	Show an image.
2311	Draw bboxes on an image.
2312	Read an optical flow map from a file or array, handling quantized formats if specified.
2313	Writes optical flow to file, quantized or not.
2314	Recover from quantized flow.
2315	Loads state_dict into a module, handling key mismatches and logging errors.
2316	Load checkpoint from a file or URI.
2317	Copy model weights from GPU to CPU.
2318	Save checkpoint to file with model, optimizer, and meta data.
2319	Initialize an optimizer from a configuration.
2320	Init the logger.
2321	Get the current learning rates.
2322	Registers a hook into the hook list with the specified priority.
2323	Run the training and validation workflows for a specified number of epochs.
2324	Registers default hooks for training. Default hooks include LrUpdaterHook, OptimizerStepperHook, CheckpointSaverHook, IterTimerHook, and LoggerHook(s).
2325	Convert video with ffmpeg using given options.
2326	Resizes a video according to specified size or ratio, maintaining aspect ratio if required.
2327	Cut a clip from a video. Adjusts start and end times, video and audio codecs, and logging level.
2328	Concatenate multiple videos into a single one.
2329	Load a text file and parse the content as a list of strings.
2330	Load a text file and parse the content as a dict. Each line of the text file is parsed into key-value pairs where the first column is the key and following columns are the values.
2331	3x3 convolution with padding
2332	Initialize an object from a dictionary
2333	Read an image.
2334	Read an image from bytes.
2335	Write image to file
2336	Convert a BGR image to grayscale image.
2337	Convert a grayscale image to BGR image.
2338	Convenience method for casting elements of an iterable object into a specified type, with an optional return type.
2339	Check whether it is a sequence of some type.
2340	Slices a list into several sub lists by a list of given length.
2341	Checks if prerequisites are satisfied and raises an error if not.
2342	Average latest n values or all values
2343	Scatters tensor across multiple GPUs.
2344	Convert various input to color tuples
2345	Tracks the time elapsed since the last check for a given task using a timer.
2346	Start the timer if it is not already running, and update the last recorded time.
2347	Total time elapsed since the timer was started.
2348	Calculate the time elapsed since the last check.
2349	Show optical flow
2350	Convert flow map to RGB image using color wheel and ignore unknown values.
2351	Builds a color wheel with specified bins for each color range. Default bins are [15, 6, 4, 11, 13, 6]. Returns a color wheel of shape (total_bins, 3).
2352	Computes the top-k accuracy for given output and target.
2353	Scatters inputs to target GPUs, supporting PyTorch Tensors and DataContainer objects.
2354	Scatters inputs and kwargs to target_gpus with support for dictionaries.
2355	Asynchronously fetch information using aiohttp, handling delays, timeouts, and retries.
2356	Read and decodes JSON response.
2357	Read response payload and decode.
2358	Process coroutine callback function
2359	A coroutine function for running multiple requests either concurrently using asyncio.gather or sequentially.
2360	Init a Request class for crawling html
2361	Starts the crawling process by processing initial URLs, launching worker tasks, and waiting for all requests to complete.
2362	Ensures tasks have an action key and strings are converted to python objects.
2363	Parses yaml as ansible.utils.parse_yaml but with linenumbers.
2364	Return distribution full name with - replaced with _
2365	Return archive name without extension
2366	Add additional requirements from setup.cfg to file metadata_path
2367	Convert an .egg-info directory into a .dist-info directory
2368	Return a text message with optional Speaking hint.
2369	Returns a message with suggested actions and optional text.
2370	Returns a single message activity containing an attachment.
2371	Returns a message that will display a set of attachments in list form.
2372	Returns a message to display a single image or video URL to a user.
2373	Creates a trace activity based on the input activity.
2374	Sets the telemetry client for logging events.
2375	Read storeitems from storage using the provided keys.
2376	Save storeitems to storage.
2377	Remove storeitems from storage.
2378	Create a StoreItem from a result out of CosmosDB
2379	Return a dictionary representation of a StoreItem, excluding non-magic attributes and the e_tag.
2380	Return the sanitized key. Replace characters that are not allowed in keys in Cosmos with '*' and the Unicode code point of the character.
2381	Calls get or create methods for database and container.
2382	Check if a database exists in CosmosDB, or create it if it doesn't. Return the database name.
2383	This function checks if a container exists in CosmosDB and returns its link. If the container does not exist, it creates one with the specified name and returns the new container's link.
2384	Fill the event properties and metrics for the QnaMessage event for telemetry.
2385	Returns the conversation reference for an activity.
2386	Give the waterfall step a unique name
2387	Determine if a Channel supports a specified number of Suggested Actions.
2388	Determine if a number of Card Actions are supported by a Channel.
2389	Retrieve Channel Id from Turn Context.
2390	Determines if a given Auth header is from the Bot Framework Emulator
2391	Return an attachment for a hero card If the 'card' argument is not a HeroCard, raise a TypeError
2392	Return instruction params.
2393	Reverse the order of sub-gates in a composite instruction recursively.
2394	Invert this instruction. If the instruction is composite, its definition is recursively inverted. Returns a fresh instruction for the inverse. Raises an error if the instruction is not composite and an inverse has not been implemented.
2395	Add classical control on register and value
2396	Creates a shallow copy of the instruction, optionally renaming it
2397	Print an if statement if needed
2398	Return a default OpenQASM string for the instruction.
2399	Run all the passes on a QuantumCircuit and return the transformed circuit.
2400	Runs a transpiler pass and its dependencies on a DAG circuit.
2401	Returns a list structure of the appended passes and its options.
2402	Fetches the passes added to this flow controller. Returns a dictionary containing options, a list of passes, and the type of the controller.
2403	Constructs a flow controller based on the partially evaluated controller arguments.
2404	Applies UBase gate to the qubit q with parameters theta, phi, and lam.
2405	Apply a single qubit gate and return U gate parameters
2406	Generate the matrix for a single qubit gate using given parameters.
2407	Returns the index string for Numpy.einsum matrix-matrix multiplication.
2408	Return the index string for Numpy.einsum matrix-vector multiplication.
2409	Return the index string for Numpy.eignsum matrix multiplication.
2410	Build a ``DAGCircuit`` object from a ``QuantumCircuit``.
2411	Function used to fit the exponential decay.
2412	Fit a decay cosine function
2413	Plots coherence data with error bars and a fit curve.
2414	Takes the raw rb data and converts it into averages and std dev. Returns a 2 x n x l list where index 0 is the mean over seeds, 1 is the std dev overseeds.
2415	Plot randomized benchmarking data.
2416	Finds runs containing parameterized gates and splits them into sequential runs excluding the parameterized gates.
2417	Compose a triple theta, phi, lambda for the product of two u3 gates.
2418	Express a Y.Z.Y single qubit gate as a Z.Y.Z gate
2419	Validates input to state visualization functions, ensuring it is a valid multi-qubit quantum state.
2420	Trim a PIL image and remove white space.
2421	Get the list of qubits covered by the gate.
2422	Convert a QuantumCircuit to an Instruction object.
2423	Pick a convenient layout depending on qubit connectivity and set the `layout` property.
2424	Computes the qubit mapping with the best connectivity for a given number of subset qubits.
2425	Apply barrier to circuit. If qargs is None, applies to all the qubits. Args is a list of QuantumRegister or single qubits. For QuantumRegister, applies barrier to all the qubits in that register.
2426	Compute the mean value of a diagonal observable from a set of experiment counts.
2427	Process an Id or IndexedId node as a bit or register type. Return a list of tuples (Register, index).
2428	Process a custom unitary node by handling its name, arguments, and bitlist, and then creating DAG operations if the gate is defined.
2429	Process a gate node and store relevant information. If the node is opaque, set the body to None.
2430	Process a CNOT gate node and apply the correct operation based on the input qubit IDs.
2431	Process a measurement node, apply operation back with indices and condition.
2432	Process an if node.
2433	Creates a DAG node from a parsed AST op node.
2434	Return the duration of supplied channels.
2435	Return minimum start time for supplied channels.
2436	Return maximum start time for supplied channels.
2437	Iterable for flattening Schedule tree.
2438	Validates a value against the correct type of the field.
2439	Include unknown fields after dumping.
2440	Include unknown fields after loading data.
2441	Create a patched Schema for validating models by overriding the _deserialize() call of its fields to call a custom defined method check_type provided by Qiskit.
2442	Validate the internal representation of the instance.
2443	Add validation after instantiation
2444	Serialize the model into a Python dict of simple types.
2445	Deserialize a dict of simple types into an instance of this class
2446	n-qubit QFT on q in circ.
2447	Partial trace over subsystems of multi-partite vector.
2448	Flatten an operator to a vector in a specified basis.
2449	Devectorize a vectorized square matrix.
2450	Converts a Choi-matrix to a Pauli-basis superoperator.
2451	Truncate small values of a complex array and set them to zero.
2452	Construct the outer product of two vectors, or the projector of a single vector if the second is absent
2453	Calculate the concurrence for a quantum state or density matrix. Raises an exception if not applicable to more than two qubits.
2454	Compute the Shannon entropy of a probability vector.
2455	Compute the von-Neumann entropy of a quantum state.
2456	Compute the mutual information of a bipartite state.
2457	Compute the entanglement of formation of a quantum state.
2458	Compute the Entanglement of Formation of a 2-qubit density matrix.
2459	Create a flattened schedule.
2460	Return schedule shifted by `time`.
2461	Return a new schedule with the `child` schedule inserted into the `parent` at `start_time`.
2462	Return a new schedule by appending child to parent at the last time of the parent schedule's channels over the intersection of the parent and child schedule's channels.
2463	Apply u3 gate to qubit q.
2464	Return backend status.
2465	Start the progress bar.
2466	Estimates the remaining time based on completed iterations.
2467	Dissasemble a qobj and return the circuits, run_config, and user header.
2468	Calculate the Hamming distance between two bit strings.
2469	Return quaternion for rotation about given axis.
2470	Generate a quaternion from a set of Euler angles.
2471	Normalizes a Quaternion to unit length so that it represents a valid rotation.
2472	Converts a unit-length quaternion to a rotation matrix
2473	Converts a unit-length quaternion to ZYZ Euler angles.
2474	Prepare received data for representation. data dict, number_to_keep int number of elements to show individually. Returns dict processed data to show.
2475	Create a histogram representation using a vertical bars style graph and display it.
2476	Ensure valid type for value and its items in containers.
2477	Raises an error if j is an invalid index for self.
2478	Test if an array is a square matrix.
2479	Test if an array is a diagonal matrix
2480	Test if an array is a symmetric matrix
2481	Test if an array is a Hermitian matrix
2482	Test if a matrix is positive semidefinite
2483	Test if an array is an identity matrix.
2484	Test if an array is a unitary matrix.
2485	Transform a QuantumChannel to the Choi representation
2486	Transforms a QuantumChannel to the SuperOp representation.
2487	Transform a QuantumChannel to the Kraus representation.
2488	Transform a QuantumChannel to the Chi representation.
2489	Transform a QuantumChannel to the PTM representation.
2490	Transform a QuantumChannel to the Stinespring representation.
2491	Transform a QuantumChannel to the Operator representation.
2492	Transform Operator representation to other representation.
2493	Transform Stinespring representation to Operator representation.
2494	Transform SuperOp representation to Choi representation.
2495	Transform Choi to SuperOp representation.
2496	Transform Kraus representation to Choi representation.
2497	Transform Choi representation to Kraus representation.
2498	Transform Stinespring representation to Kraus representation.
2499	Transform Stinespring representation to Choi representation
2500	Transform Kraus representation to Stinespring representation.
2501	Transform Kraus representation to SuperOp representation.
2502	Transform Chi representation to a Choi representation.
2503	Transform Choi representation to the Chi representation
2504	Reravel two bipartite matrices.
2505	Change of basis of bipartite matrix representation.
2506	Checks if input and output dimensions correspond to an n-qubit channel.
2507	Set ticklines and ticklabels of an axis to invisible
2508	Set x, y, and z labels according to a convention.
2509	Resets Bloch sphere data sets to empty.
2510	Adds a list of vectors to Bloch sphere.
2511	Add a text or LaTeX annotation to Bloch sphere, parameterized by a qubit state or a vector.
2512	Render the Bloch sphere and its data sets in an on given figure and axes.
2513	Plot the front half of a sphere with a surface and wireframe.
2514	Display Bloch sphere and corresponding data sets.
2515	Deprecated after 0.8. Returns the two-qubit KAK decomposition of a unitary matrix.
2516	Constructs the top line of the element
2517	Constructs the middle line of the element
2518	Constructs the bottom line of the element
2519	Returns the length of the element, including the box around.
2520	Format parameters of an instruction for a label. None if there are no params or if they are numpy.ndarrays.
2521	Creates the label for a box.
2522	Return the correspond math mode latex string.
2523	Compile a list of circuits into a qobj.
2524	Apply filters to deprecation warnings, specifically for `qiskit` and silencing `ChangedInMarshmallow3Warning`.
2525	Returns a dictionary with basic hardware information about the local machine, including the operating system, total memory, and number of physical CPUs.
2526	Checks if internet connection exists to host via specified port. Returns True if connection exists.
2527	Update the status of an HTML job monitor
2528	Creates a continuous constant pulse for given times with a specified amplitude.
2529	Continuous square wave as a function of time
2530	Generate a continuous triangle wave with specified amplitude, period, and phase.
2531	Generate a continuous cosine wave based on given times, amplitude, frequency, and phase.
2532	Enforce that the supplied Gaussian pulse is zeroed at a specific width by subtracting the Gaussian value at the center plus or minus half of the zeroed width from all samples. Optionally rescale the amplitude and return the scale factor if requested.
2533	Generate and adjust Gaussian pulse for given parameters
2534	Calculate the derivative of a Gaussian pulse and optionally return the original Gaussian.
2535	Continuous gaussian square pulse.
2536	Default pass manager that maps to the coupling map.
2537	Create a passmanager that unrolls gates and applies optimization until depth is fixed.
2538	Test if this circuit has the register r.
2539	Mirror the circuit by reversing the instructions. This is done by recursively mirroring all instructions. It does not invert any gate.
2540	Invert this circuit by recursively inverting all gates. Returns the inverted circuit. Raises QiskitError if inversion is not possible.
2541	Append an instruction to the end of the circuit, modifying the circuit in place.
2542	Deprecated method. Calls append instead.
2543	Add registers.
2544	Raise exception if list of qubits contains duplicates.
2545	Raise exception if a qarg is not in this circuit or bad format.
2546	Check clbit in this circuit or bad format
2547	Raise exception if the circuits are defined on incompatible registers.
2548	Return OpenQASM string.
2549	Draw the quantum circuit. Using the output parameter you can specify the format.
2550	Returns total number of gate operations in circuit.
2551	Return number of qubits plus clbits in circuit.
2552	Count each operation kind in the circuit.
2553	Return the number of non-entangled subcircuits in the circuit.
2554	Assign parameters to values in a quantum circuit, yielding a new circuit with the substitutions. Raises an error if the dictionary contains parameters not present in the circuit.
2555	Assigns a parameter value to matching instructions in-place.
2556	Plot the interpolated envelope of a pulse using complex data points.
2557	Search for SWAPs which allow for application of largest number of gates.
2558	Map all gates that can be executed with the current layout.
2559	Return the sum of the distances of two-qubit pairs in each CNOT in gates.
2560	Count the mapped two-qubit gates, less the number of added SWAPs.
2561	Return a copy of source_dag with metadata but empty. Generate only a single qreg in the output DAG, matching the size of the coupling_map.
2562	Return op implementing a virtual gate on given layout.
2563	Generate list of ops to implement a SWAP gate along a coupling edge.
2564	Run one pass of the lookahead mapper on the provided DAG.
2565	Add a physical qubit to the coupling graph as a node. Raises error if trying to add duplicate qubit.
2566	Add directed edge to coupling graph.
2567	Return a CouplingMap object for a subgraph of self.
2568	Returns a sorted list of physical qubits.
2569	Test if the graph is connected. Return True if connected, False otherwise.
2570	Computes the full distance matrix on pairs of nodes using all_pairs_shortest_path_length.
2571	Get the undirected distance between two physical qubits.
2572	Transpile one or more circuits for a target backend.
2573	Applies cu1 gate from ctl to tgt with angle theta.
2574	In - place inversion of instructions
2575	Add controls to all instructions.
2576	Add classical control register to all instructions.
2577	Subscribes to an event, so when it's emitted all the callbacks subscribed, will be executed. We are not allowing double registration.
2578	Emits an event if there are any subscribers.
2579	Unsubscribes a specific callback from an event.
2580	Triggers an event and associates data, notifying subscribers with a synchronous callback.
2581	Apply initialize to circuit.
2582	Calculate and return a quantum circuit definition for initializing a qubit register to a desired state.
2583	Create a circuit with gates to set a parameter vector to zero.
2584	Static internal method to compute the angles needed to rotate a qubit from the zero vector.
2585	Return a recursive implementation of a multiplexor circuit, where each instruction itself has a decomposition based on smaller multiplexors.
2586	Checks if value has the format of a virtual qubit
2587	Returns a copy of a Layout instance
2588	Combines two layouts into an "edge map" for composing dags.
2589	Apply Toffoli gate to ctl1, ctl2, and tgt
2590	Return a new schedule with schedule inserted within self at start_time.
2591	Checks if the attribute name is in the list of attributes to protect. If so, raises TranspilerAccessError.
2592	Converts gate tuples into a nested list of integers.
2593	Run the StochasticSwap pass on `dag` to map it according to the coupling map and layout.
2594	Output:
Provide a DAGCircuit for a new mapped layer. If this is the first layer with multi-qubit gates, output all layers up to this point and ignore any swap gates. Set the initial layout. Otherwise, output the current layer and the associated swap gates.
2595	Return the Pauli group with 4^n elements.
2596	Construct a Pauli from a string label.
2597	Constructing a Pauli from boolean arrays
2598	Multiply two Paulis and track the phase.
2599	Convert to Operator object.
2600	Convert to Pauli circuit instruction.
2601	In-place partial or entire z update
2602	Update partial or entire x
2603	Insert or append Pauli to targeted indices
2604	Append pauli at the end. Args: paulis (Pauli): the to-be-inserted or appended pauli pauli_labels (list[str]): the to-be-inserted or appended pauli label Returns: Pauli: self
2605	Deleting Pauli at specified indices
2606	Return a random Pauli on number of qubits.
2607	Generate single qubit Pauli at index with given label.
2608	Simulate the outcome of measuring a qubit.
2609	Generate memory samples from current statevector.
2610	Apply measure instruction to a qubit
2611	Applies a reset instruction to a qubit by simulating a measurement outcome and projecting onto the outcome state while renormalizing.
2612	Validate initial statevector. Ensure correct length based on number of qubits.
2613	Set the initial statevector for simulation.
2614	Return the current statevector in JSON Result spec format.
2615	Determine if measure sampling is allowed for an experiment, considering the number of shots and the experiment's configuration or circuit instructions.
2616	Run qobj asynchronously.
2617	Run experiments in a Qobj and return a Result object.
2618	Performs semantic validations of the qobj.
2619	Validate initial unitary matrix shape based on number of qubits.
2620	Set the initial unitary for simulation to either the identity matrix or a copy of the provided initial unitary, and reshape it to a rank-N tensor.
2621	Return the current unitary in JSON Result spec format.
2622	Run experiments described in a Qobj object and return a Result object containing the results.
2623	Checks for semantic errors in a quantum circuit qobj, ensuring it adheres to the provider's restrictions.
2624	Determines if obj is a bit
2625	Pick a layout by assigning circuit qubits to device qubits. Raises error if dag wider than device coupling map.
2626	Check if self has overlap with `interval`.
2627	Return a new interval shifted by `time` from self.
2628	Return a new Timeslot shifted by `time`.
2629	Return the earliest start time from a collection of channels.
2630	Return the maximum stop time of timeslots across multiple channels.
2631	Check if self is mergeable with timeslots.
2632	Return a new TimeslotCollection merged with a specified `timeslots`
2633	Return a new TimeslotCollection shifted by `time`.
2634	Report on GitHub that the specified branch is failing to build at the specified commit. The method will open an issue indicating that the branch is failing. If there is an issue already open, it will add a comment avoiding to report twice about the same failure.
2635	Sorts rho data
2636	Create a Paulivec representation of the input array as a graphical state vector or density matrix.
2637	Apply RZZ gate to quantum circuit.
2638	Apply Fredkin gate to circuit.
2639	Extract readout and CNOT errors and compute swap costs.
2640	Create a program graph with virtual qubits as nodes and edges between qubits that participate in 2-qubit gates, with weights based on the number of CNOTs.
2641	Select an edge with at least one endpoint mapped, or return the first edge if none are mapped.
2642	Select best remaining CNOT in the hardware for the next program edge.
2643	Select the best remaining hardware qubit for the next program qubit.
2644	Run the noise adaptive layout for a quantum circuit.
2645	Return a list of instructions for this CompositeGate. Recursively calls this method for composite instructions.
2646	Invert this gate.
2647	Add controls to this gate
2648	Add classical control register
2649	Return True if operator is a unitary matrix.
2650	Return the conjugate of the operator.
2651	Return the transpose of the operator.
2652	Returns n-times composed operator of matrix
2653	Return the tensor shape of the matrix operator
2654	Convert a QuantumCircuit or Instruction to an Operator.
2655	Update QASM string for swap_mapper iteration.
2656	Separate a bitstring into substrings based on register sizes
2657	Format an experiment result memory object for measurement level 0.
2658	Format an experiment result memory object for measurement level 1.
2659	Format an experiment result memory object for measurement level 2.
2660	Formats backend experiment result counts for Qiskit user
2661	Convert a list of [re, im] complex numbers to a list of complex numbers, optionally rounding to a specified number of decimal places.
2662	Formats unitary matrix elements for user presentation in Qiskit, rounding to specified decimal places if desired.
2663	Ensure a submit has been performed before calling the method.
2664	Submit the job to the backend for execution. Raises errors if the job is already submitted or if the Qobj is invalid.
2665	Gets the status of the job by querying the Python's future.
2666	Whether lo_freq is within the LoRange.
2667	Bloch sphere representation of a quantum state vector or density matrix.
2668	Embed default qubit LO frequencies from backend and format them to list object. If configured lo frequency is the same as default, this method returns `None`.
2669	Format LO frequencies from default and user configuration to a list, return `None` if no changes.
2670	Expand all op nodes to the given basis.
2671	Create a Q sphere representation from input state vector or density matrix. Graphical display using a Q sphere for each eigenvalue.
2672	Return the number of combinations for n choose k.
2673	Return the lex index of a combination given n, k, and a list. Raises an error if the list length is not equal to k.
2674	Plot the paulivec representation of a quantum state as a bargraph of the mixed state rho over the Pauli matrices.
2675	Get the unique backends that are available.
2676	Return the Instruction object if the node is an op node, else raise an error.
2677	Generates constant-sampled `SamplePulse`.
2678	Generates zero-sampled `SamplePulse`.
2679	Generate a square wave SamplePulse.
2680	Generate a sawtooth wave `SamplePulse`.
2681	Generates triangle wave SamplePulse.
2682	Generate a cosine wave `SamplePulse` with specified duration, amplitude, frequency, and phase. Apply left sampling strategy.
2683	Generates sine wave SamplePulse.
2684	Generates an unnormalized Gaussian `SamplePulse`.
2685	Generates unnormalized Gaussian derivative `SamplePulse` for given duration, amplitude, and sigma.
2686	Generates a Gaussian square `SamplePulse` centered at `duration/2` and zeroed with specified rise/fall duration.
2687	Compute distance.
2688	Print the node data with indentation, recursively calling for children.
2689	Return an instance of a backend from its class.
2690	Renames a classical or quantum register throughout the circuit.
2691	Removes all operation nodes with the given name.
2692	Add all wires in a quantum register to the DAGCircuit.
2693	Add all wires in a classical register.
2694	Add a qubit or bit to the circuit. Raises an error if trying to add a duplicate wire.
2695	Verify that the condition is valid. Raises an error if conditioning on an invalid register.
2696	Return a list of bits in the given condition.
2697	Add a new operation node to the graph and assign properties.
2698	Applies an operation to the circuit's output, updating qubits and cbits based on the operation and condition.
2699	Check that a wiremap neither fragments nor duplicates registers, and return the set of registers to add.
2700	Check the consistency of the wiremap. Ensure valid wires and consistent types.
2701	Rename register name in condition using wire_map.
2702	Add `dag` at the end of `self`, using `edge_map`.
2703	Apply the input circuit to the output of this circuit.
2704	Check that a list of wires is compatible with a node to be replaced.
2705	Return predecessor and successor dictionaries for a given node.
2706	Maps all wires of the input circuit to predecessor and successor nodes in the current circuit, using the provided maps and wire mapping.
2707	Yield nodes in topological order.
2708	Return iterator for node values.
2709	Get the list of "op" nodes in the dag, optionally filtered by a specific instruction subclass.
2710	Returns the list of gate nodes in the dag.
2711	Get the set of "op" nodes with the given name.
2712	Return list of 2-qubit gates.
2713	Returns list of the predecessors of a node as DAGNodes.
2714	Returns a list of predecessors of a node that are connected by a quantum edge.
2715	Returns a set of ancestors of a node in a Directed Acyclic Graph (DAG).
2716	Returns a list of the successors of a node that are connected by a quantum edge as DAGNodes.
2717	Remove an operation node and reconnect its predecessors to successors.
2718	Remove all ancestor operation nodes of a given node.
2719	Remove all descendant operation nodes of a given node.
2720	Remove all non-ancestors operation nodes of a given node.
2721	Remove all non-descendant operation nodes from the given node
2722	Yields a shallow view on a layer of a DAGCircuit, containing a circuit with disjoint qubits and a list of qubit lists.
2723	Serially yields layers of a circuit, where each layer contains a single gate.
2724	Yield layers of the multigraph.
2725	Collect non - conditional runs of "op" nodes with given names.
2726	Iterator for nodes that affect a given wire. Only operation nodes are returned by default.

Args:
    wire (tuple(Register, index)): the wire to be looked at.
    only_ops (bool): True if only the ops nodes are wanted, otherwise all nodes are returned.

Yields:
    DAGNode: the successive ops on the given wire

Raises:
    DAGCircuitError: if the given wire doesn't exist in the DAG
2727	Count the occurrences of operation names. Returns a dictionary of counts keyed on the operation name.
2728	Return a dictionary of circuit properties.
2729	Generate a TomographyBasis object with optional preparation and measurement functions.
2730	Add state measurement gates to a circuit.
2731	Generates a dictionary of tomography experiment configurations for quantum state and process tomography.
2732	Generate a dictionary of process tomography experiment configurations.
2733	Add tomography measurement circuits to a QuantumProgram.
2734	Return a results dict for a state or process tomography experiment.
2735	Compute marginal counts for a subset of measured qubits.
2736	Reconstruct a density matrix or process-matrix from tomography data.
2737	Reconstruct a state from unconstrained least-squares fitting using tomography data.
2738	Returns a projector for a list of operations and basis states.
2739	Reconstruct a matrix through linear inversion using a list of observed frequencies and projectors. Optionally uses weights for weighted fitting and can adjust the trace of the returned operator.
2740	Returns the nearest positive semidefinite operator to an operator.
2741	Get the value of the Wigner function from measurement results.
2742	Add measurement gates to a circuit.
2743	A text-based job status checker
2744	Monitor the status of a IBMQJob instance.
2745	Compute Euler angles for a single-qubit gate
2746	Return the gate u1, u2, or u3 implementing U with the fewest pulses.
2747	Extends dag with virtual qubits that are in layout but not in the circuit yet
2748	The qubits properties widget Displays qubit properties such as frequency, T1, T2, gate errors, and readout error in a table.
2749	Widget for displaying job history.
2750	Plots the job history of the user from the given list of jobs.
2751	Plot the interpolated envelope of pulse.
2752	Apply cu3 gate from ctl to tgt with angles theta, phi, lam.
2753	Returns a circuit putting 2 qubits in the Bell state.
2754	Transpile one or more circuits for desired transpilation targets.
2755	Selct a PassManager and run a single circuit through it.
2756	Execute a list of circuits or pulse schedules on a backend.
2757	Return the primary drive channel of this qubit.
2758	Return the primary control channel of this qubit.
2759	Returns the primary measurement channel of this qubit.
2760	Returns the primary acquire channel of this qubit. Raises PulseError if no acquire channels are available.
2761	n-qubit input state for QFT that produces output 1
2762	Assemble a list of circuits or pulse schedules into a Qobj.
2763	Remove the handlers for the 'qiskit' logger.
2764	Create a hinton representation of a density matrix using a 2D city style graph.
2765	Calculate the process fidelity between two quantum channels.
2766	Set the input text data.
2767	Pop a PLY lexer off the stack.
2768	Push a PLY lexer on the stack to parse filename.
2769	Iterate over each block and replace it with an equivalent Unitary on the same wires.
2770	Get conversion method for instruction.
2771	Return converted `AcquireInstruction`. Args: shift (int): Offset time. instruction (AcquireInstruction): acquire instruction. Returns: dict: Dictionary of required parameters.
2772	Return converted `FrameChangeInstruction`.
2773	Converts a persistent value instruction to a dictionary of required parameters.
2774	Return converted PulseInstruction
2775	Return converted Snapshot
2776	Update annotations of discretized continuous pulse function with duration.
2777	Converts a continuous function to a discretized pulse using a sampler.
2778	Return the backends matching the specified filtering.
2779	Resolves backend name from deprecated names or aliases.
2780	Build a ``QuantumCircuit`` object from a ``DAGCircuit``.
2781	Converts a diagonal observable in matrix form to a dictionary form. Handles both matrix and list input.
2782	Update a node in the symbol table. Check for duplicate declarations.
2783	Verify a qubit id against the gate prototype.
2784	Verifies each expression in a list, ensuring that any Id elements resolve to the current stack.
2785	Verify a user-defined gate call.
2786	Method to verify a register by checking if the type and index are correct.
2787	Verify a list of registers by ensuring everything in it is declared as a bit.
2788	Compute the column for a given token in the input text.
2789	Set the parse_deb field based on the input value.
2790	Parse some data and return the result or raise a QasmError.
2791	Parser runner
2792	Parse the data.
2793	Apply crz gate from ctl to tgt with angle theta.
2794	Return a basis state ndarray.
2795	Maps a pure state to a state matrix. If flatten is true, returns a flattened state matrix of column.
2796	Calculate the purity of a quantum state.
2797	Run the pass on the DAG, and write the discovered commutation relations into the property_set.
2798	Creates a backend widget displaying information about a quantum backend, including qubit count, gate map, and T1/T2 times.
2799	Update backend info at an interval, monitor operational status and pending jobs, update UI accordingly.
2800	Generate a jobs_pending progress bar widget.
2801	Run one pass of cx cancellation on the circuit.
2802	Get a backend by name and filters.
2803	Return the shape for bipartite matrix
2804	Get number and size of unique registers from bit_labels list.
2805	Truncate long floats
2806	Generate LaTeX string representation of circuit
2807	Get depth information for the circuit, including the number of columns and total size of columns.
2808	Get height, width, and scale attributes for the beamer page.
2809	Loads the QObj schema for use in future validations and caches it in the _SCHEMAS module attribute.
2810	Generate validator for JSON schema.
2811	Load all default schemas into `_SCHEMAS`.
2812	Validates JSON dict against a schema.
2813	Return a cascading explanation of the validation error.
2814	Majority gate.
2815	Unmajority gate using three qubits.
2816	Convert QuantumCircuit to LaTeX string.
2817	Draw a quantum circuit based on matplotlib. If `%matplotlib inline` is invoked in a Jupyter notebook, it visualizes a circuit inline. We recommend `%config InlineBackend.figure_format = 'svg'` for the inline visualization.
2818	Return a random dim x dim unitary Operator from the Haar measure.
2819	Generate a random density matrix rho using the specified method (Hilbert-Schmidt or Bures).
2820	Return a normally distributed complex random matrix.
2821	Generate a random density matrix from the Hilbert-Schmidt metric.
2822	Generate a random density matrix from the Bures metric.
2823	Return a list of custom gate names in this gate body.
2824	Return the compose of a QuantumChannel with itself n times for integer powers where input and output dimensions are equal.
2825	Return the composition channel of two subsystems.
2826	Converts a QuantumCircuit or Instruction to a SuperOp.
2827	Insert a barrier before the last measurements in a DAG circuit.
2828	Convert a list of circuits into a qobj.
2829	Expand 3+ qubit gates using their decomposition rules.
2830	Expand a given gate into its decomposition.
2831	Calculate a subcircuit that implements this unitary.
2832	Validate if the value is of the type of the schema's model.
2833	Validate if a list contains valid item-field values.
2834	Set the absolute tolerance parameter for float comparisons.
2835	Set the relative tolerance parameter for float comparisons. Raises errors if the value is negative or greater than the maximum allowed tolerance.
2836	Reshape input and output dimensions of operator
2837	Return tuple of input dimension for specified subsystems.
2838	Return tuple of output dimension for specified subsystems.
2839	Make a copy of current operator.
2840	Return the compose of a operator with itself n times.
2841	Check if input dimension corresponds to qubit subsystems
2842	Perform a contraction using Numpy.einsum
2843	Override ``_deserialize`` for customizing the exception raised.
2844	Override `_serialize` for customizing the exception raised.
2845	Check if at least one of the possible choices validates the value.Possible choices are assumed to be ModelTypeValidator fields.
2846	Return the state fidelity between two quantum states.
2847	Apply real scalar function to singular values of a matrix.
2848	Returns self.
2849	Set snapshot label to name
2850	Return True if QuantumChannel is a unitary channel.
2851	Convert channel to a unitary representation Operator.
2852	Convert a quantum channel to a Kraus or UnitaryGate circuit instruction.
2853	Convert input into a QuantumChannel subclass object or Operator object.
2854	Create Graphene Enum for sorting a SQLAlchemy class query.
2855	Monkey patching _strptime to avoid issues with non-english locale changes.
2856	Get an ordered mapping with locale codes as keys and corresponding locale instances as values.
2857	Generator that yields locale instances based on given languages, locales, and region codes.
2858	Check if tokens are valid for the locale
2859	Split the date string using translations in locale info
2860	Parse date and time from given date string using provided format or detect formats automatically based on languages/locales.
2861	Attempts to parse time part of date strings like '1 day ago, 2 PM'
2862	Check if the locale is applicable to translate date string.
2863	Translates the date string to its English equivalent while retaining formatting if specified.
2864	Parses a date string using multiple formats, returning a dictionary with 'period' and 'obj_date'. Adjusts date based on format and timezone settings.
2865	A generator for creating ammo based on specified URI or ammo file. Handles different types of ammo readers and raises errors if configuration is incorrect.
2866	translate http code to net code if assertion failed, set net code to 314
2867	Translates exception string to HTTP code.
2868	Read phantom tool specific options.
2869	Generate phantom tool run config.
2870	get merged info about phantom conf
2871	compose benchmark block
2872	Polls stdout and stderr streams and writes their contents to a log
2873	Converts a time string to seconds, supporting units like ms, s, m, h, d, and w, and multiplies the result by a given factor.
2874	Reads configuration options for StepperWrapper.
2875	Generate test data if necessary
2876	Chooses the name for a stepped data file
2877	Read stepper info from json
2878	Write stepper info to json
2879	Generate stpd-file using Stepper class
2880	Create a Load Plan based on the given schedule and publish its duration and steps.
2881	Return the revolutions per second (RPS) for a given time t.
2882	Execute and check exit code
2883	Decode and process monitoring data from a list of dictionaries.
2884	Make a set of points for a label based on various data types and conditions.
2885	Publish value to status
2886	Counts codes that match a given regex pattern from a dictionary of code counts.
2887	Say the workers to finish their jobs and quit.
2888	A feeder that runs in a distinct thread in the main process. It reads tasks from a file, puts them into a queue, and then sends "killer" tasks to stop workers.
2889	Set up logging with file and stream handlers, applying different formats and filters based on log level.
2890	override config options with user specified options
2891	Make preparations before running Tank
2892	Call shutdown routines
2893	Collect data, cache it, and send to listeners.
2894	Notify all listeners about aggregate data and stats.
2895	Returns a marker function of the requested marker_type.
2896	Parse duration string into milliseconds
2897	Start local agent
2898	Start a remote agent using SSH and log the command.
2899	Searching for line in jmeter.log indicating JMeter UDP port.
2900	Modify JMX file by removing WorkBench checkbox and adding variables.
2901	Gracefully terminate running process
2902	Parse lines and return stats
2903	### Example 4:
Input:
def __create_criterion(self, criterion_str):
        """ instantiate criterion from config string """
        parsed = criterion_str.split("(")
        type_str = parsed[0].strip().lower()
        parsed[1] = parsed[1].split(")")[0].strip()

        for criterion_class in self.custom_criterions:
            if criterion_class.get_type_string() == type_str:
                return criterion_class(self, parsed[1])
        raise ValueError(
            "Unsupported autostop criterion type: %s" % criterion_str)
Output:
 Instantiate criterion from config string.
2904	Prepare config data.
2905	Configures and writes startup and shutdown commands to a configuration file.
2906	Checks if disk space is exceeded and raises an exception if it is.
2907	Check if available memory is below the limit and raise an exception if so.
2908	Retrieves terminal window viewport size using various methods including ioctl, os.open, and environment variables.
2909	Gets next line for right panel
2910	Cut tuple of line chunks according to their visible length.
2911	Render left blocks
2912	Main method to render screen view Calculates panel widths, renders info widgets, and composes final screen output
2913	Add widget string to right panel of the screen
2914	Right-pad lines of block to equal width.
2915	Calculate the visible length of a string or list/tuple of strings, excluding any markup.
2916	Creates load plan timestamps generator.
2917	Format level string as percentage if relative, otherwise return as is.
2918	Add right panel widget
2919	Send request to writer service with retries for network and maintenance errors
2920	Loads plugin options and instantiates plugin classes
2921	Retrieve a plugin of desired class, KeyError raised otherwise.
2922	Retrieves a list of plugins of the desired class, raises KeyError if not found
2923	Moves or copies a single file to the artifacts directory. Checks if the file exists and ensures it's only moved if it doesn't already exist in the destination. Adjusts permissions of the copied or moved file.
2924	Add file to be stored as result artifact on post-process phase.
2925	Generate temp file name in artifacts base dir and close temp file handle
2926	Read configs set into storage.
2927	Flush current stat to file
2928	Returns a list of options with a given prefix from a configuration section.
2929	return sections with specified prefix
2930	Parse a chunk of data to extract statistics and return a generator with calculated items.
2931	Returns info object
2932	Prepare for monitoring - install agents etc
2933	Poll agents for data.
2934	Sends pending data set to listeners
2935	Determines the appropriate configuration for the metrics collector by checking specified options and handling potential conflicts.
2936	Store metric in data tree and calculate offset signs. Sign < 0 is CYAN, means metric value is lower than previous; sign > 1 is YELLOW, means metric value is higher than previous; sign == 0 is WHITE, means initial or equal metric value.
2937	decode agents jsons, count diffs
2938	Start subscribing channels. If necessary, open the connection.
2939	Run forever and block until exception is raised.
2940	Close any of open connections
2941	Perform one request, handling 429 errors and decoding error JSON.
2942	Submit a new order with specified parameters.
2943	Get an order
2944	Get an open position based on a symbol.
2945	Get a list of assets with optional status and asset_class filters.
2946	Get an asset using a symbol.
2947	Creates a subplan that joins the outputs of parallel steps into a single output using a join node. Each parallel step must provide an output with the specified name. The join step performs a passthrough and remains configurable for additional computation or verification in multi-process environments.
2948	Ensures argument obj is a native Python dictionary, raises an exception if not, and otherwise returns obj.
2949	Ensures argument obj is either a dictionary or None; if None, instantiates an empty dictionary.
2950	A function that constructs an event logger using a provided callback to receive a stream of event records. It validates the callback and uses a structured logger handler to process logger messages and invoke the callback with constructed event records.
2951	Construct a JSON event logger that records a stream of event records to a specified path.
2952	Read a config file and instantiate the RCParser.
2953	Get config dictionary for the given repository.
2954	Converts a configuration dictionary into a formatted string for use in GraphQL.
2955	Get a pipeline by name. Only constructs that pipeline and caches it.
2956	Returns all pipelines as a list
2957	Poll the process until it returns a valid item or(PROCESS_DEAD_AND_QUEUE_EMPTY) if it's terminated and queue is empty.
2958	Execute pipeline using message queue as a transport.
2959	Waits until all processes are enqueued.
2960	Creates a schema for configuration data describing the type, optionality, defaults, and description. Raises an error if the dagster_type is invalid. Returns a FieldImpl instance.
2961	Builds the execution plan.
2962	Build a new ExecutionPlan from a pipeline definition and the environment config.
2963	Build a pipeline which is a subset of another pipeline. Only includes the solids which are in solid_names.
2964	Return the solid named "name". Throws if it does not exist.
2965	Construct shell commands to build and publish a package to PyPI.
2966	Tags all submodules for a new release. ensures that git tags, as well as the version.py files in each submodule, agree and that the new version is strictly greater than the current version. Will fail if the new version is not an increment (following PEP 440). Creates a new git tag and commit.
2967	Creates a context definition from an existing context for testing purposes. Returns a PipelineContextDefinition.
2968	Annotate a function to take selected properties from a config value into a custom type instance.
2969	Annotating a function to process selected properties of a config value and a custom instance.
2970	Automagically wraps a block of text, applying specified prefix and indent.
2971	Download an object from S3 and return the path to the downloaded object.
2972	Upload a file to S3 using the provided S3 client from context. Return the bucket and key where the file was uploaded.
2973	Wraps execution of user-space code in an error boundary, ensuring user errors are wrapped in DagsterUserCodeExecutionError while preserving original stack trace.
2974	Create directory and subdirectories if they don't exist
2975	Wraps a user-provided function to ensure it yields a single value.
2976	In the event of pipeline initialization failure, returns a DagsterLog instance without a dependency on the ExecutionContext.
2977	Indicates whether any step in the solid execution was successful.
2978	Return True if all step events indicate that the solid execution was skipped.
2979	Return dictionary of transformed results, with keys being output names.
Returns None if execution result isn't a success.
2980	Returns transformed value either for DEFAULT_OUTPUT or for the output given as output_name. Returns None if execution result isn't a success.
2981	Returns the failing step's data for a solid if any step fails.
2982	Creating a permissive dictionary that allows partial specification of permitted fields with type checking.
2983	Check if the config value is a valid dataset name.
2984	Tables must be of form project.dataset.table or dataset.table
2985	Execute the user-specified transform for the solid, log and track metrics.
2986	Takes a Python class and creates a type for it in the Dagster domain.
2987	A decorator for creating a resource. The decorated function will be used as the resource_fn in a ResourceDefinition.
2988	Submits an event to PagerDuty's Events API v2. Accepts arguments such as summary, source, severity, and optional parameters like event_action, dedup_key, timestamp, component, group, event_class, and custom_details.
2989	Groups execution steps by solid, in topological order of the solids.
2990	Default method to acquire database connection parameters by setting parameters from settings.py and providing default values for blank fields.
2991	Establish a new database connection using provided parameters and manage the client connection lifecycle.
2992	Returns an active connection cursor to the database.
2993	Closes the client connection to the database.
2994	Builds an instance of model from the model_dict.
2995	Overrides standard to_python method to translate Mongo array to a python list.
2996	Returns the formfield for the array
2997	Convert a dictionary to an instance of `self.model_container`.
2998	Filter the queryset for the instance this manager is bound to.
2999	Computes the matrix of expected false positives for all possible sub-intervals of the complete domain of set sizes, assuming uniform distribution of set_sizes within each sub-interval
3000	Computes the matrix of expected false positives for all possible sub-intervals of the complete domain of set sizes.
3001	Computes the optimal partitions given the size distributions and computed number of expected false positives for all sub-intervals.
3002	Compute the optimal partitions given a distribution of set sizes.
3003	Computes the functions C1 and C2 based on the input values a1, a2, r1, and r2. If r1 and r2 are both 0, returns a1 and a2. Otherwise, calculates C1 and C2 using the formula and returns them.
3004	Initialize the slots of the LeanMinHash.
3005	Compute byte size after serialization.
3006	Serialize this lean MinHash and store the result in an allocated buffer.
3007	Deserialize a lean MinHash from a buffer.
3008	Update the MinHash object with a new value using a specified hash function. The new value is hashed, and the hash values are updated to keep the minimum hashes.
3009	Merges two MinHash objects, updating the current object to be the union of both, while checking for compatible seeds and number of permutation functions.
3010	Create a MinHash which is the union of the MinHash objects passed as arguments.
3011	Index all sets given their keys, MinHashes, and sizes. It can be called only once after the index is created.
3012	Retrieves keys for sets with containment greater than the threshold with respect to the query set.
3013	Create a new weighted MinHash from a weighted Jaccard vector.
3014	Remove the key from the index.
3015	Update the HyperLogLog with a new data value in bytes.
3016	Estimates the cardinality of data values seen so far using a HyperLogLog estimation function. Applies corrections for small, normal, and large ranges.
3017	Merge the other HyperLogLog with this one, making this the union of the two.
3018	Reset the current HyperLogLog to empty
3019	Computes the average precision at k between two lists of items.
3020	Computes the mean average precision at k between two lists of lists of items.
3021	Index all the keys added so far and make them searchable.
3022	Return the approximate top-k keys that have the highest Jaccard similarities to the query set.
3023	Cleanup client resources and disconnect from AsyncMinHashLSH storage.
3024	Return ordered storage system based on the specified config.
3025	Return an unordered storage system based on the specified config.
3026	Retrieve user data using a custom serializer.
3027	Set the social login process state to connect instead of login.
3028	Select the correct text from the Japanese number, reading, and alternatives.
3029	Parse scoped selector.
3030	Parse a single statement and return a `BindingStatement`, `ImportStatement`, `IncludeStatement`, or `None` if no more statements can be parsed (EOF reached).
3031	Parse a single literal value
3032	Advances to next line.
3033	Try to parse a configurable reference.
3034	Augments exception message and re-raises it.
3035	Convert an operative config string to markdown format.
3036	Writes out Gin's operative config as a file, and optionally adds a summary of it.
3037	Ensure function can be wrapped cleanly by functools.wraps
3038	Decorate a function or class with the given decorator.
3039	Returns `value` in a format parseable by `parse_value`, or `None`.
3040	Clears the global configuration, including parameter values, dynamically imported modules, and optionally constants.
3041	Binds a parameter value to a specified key, updating subsequent function calls within a given scope.
3042	Returns the currently bound value to a specified binding key.
3043	Check if a parameter might be valid for a function or class.
3044	Gets cached argspec for a function.
3045	Returns the names of the supplied arguments to the given function.
3046	Returns the names of all positional arguments to the given function.
3047	Retrieve all default values for configurable parameters of a function, excluding those in the blacklist and not in the whitelist.
3048	Provides a context manager to open a new configuration scope, restricting parameter bindings to sections of code within the scope. Allows for nested scopes, with parameters inherited by lower-level scopes. Clearing scopes is also supported by passing `None` or `''`. Yields the current list of active scopes.
3049	Decorator to make a function or class configurable. Registers the decorated function/class as configurable, allowing its parameters to be supplied from the global configuration.
3050	Generates a formatted config string of all parameter values used by configurable functions that are actually called during execution of the current program.
3051	Parse a file, string, or list of strings containing parameter bindings to set up global configuration.
3052	Register file reader for use in parse_config_file.
3053	Parse a Gin config file.
3054	Parse a list of config files followed by extra Gin bindings.
3055	Parse and return a single Gin value.
3056	A function that should be called after parsing all Gin config files.Calling this function allows registered "finalize hooks" to inspect (and potentially modify) the Gin config, to provide additional functionality.Hooks should not modify the configuration object they receive directly; instead, they should return a dictionary mapping Gin binding keys to (new or updated) values. This way, all hooks see the config as originally parsed.Raises RuntimeError: If the config is already locked.ValueError: If two or more hooks attempt to modify or introduce bindings for the same key.
3057	Provides an iterator over all values in a nested structure.
3058	Provides an iterator over references in the given config.
3059	Creates a constant that can be referenced from Gin config files.
3060	Decorator for an enum class that generates Gin constants from values.
3061	Retrieves all selectors matching a given partial selector.
3062	Returns all values matching `partial_selector` as a list.
3063	Checks if a complete selector is in a map, then returns the minimal selector that uniquely matches it.
3064	Translate a Mopidy search query to a Spotify search query
3065	Parses Retry-After header from response if it is set. If value is not set, returns 0. If value is a number, returns that number as seconds. If value is a date, calculates the number of seconds until that date.
3066	Validate new property value before setting it.
3067	Get the property description. Returns a dictionary describing the property.
3068	Set the current value of the property.
3069	Get the thing at the given index.
3070	Initialize the handler.
3071	Set the default headers for all requests.
3072	Validate Host header.
3073	Handle a GET request, including websocket requests.
3074	Handles an incoming message, parses it as JSON, and processes based on message type.
3075	Handle a POST request for a thing, performs specified actions, and returns a response.
3076	Handles a DELETE request.
3077	Start listening for incoming connections.
3078	Get the action description. Returns a dictionary describing the action.
3079	Start performing the action.
3080	Finish performing the action.
3081	Create a dictionary describing the event
3082	Retrieve the default local IP address.
3083	Get all IP addresses.
3084	Set a new value for this thing.
3085	Notify observers of a new value.
3086	Generate a Thing Description from the current state as a dictionary.
3087	Sets the prefix of any hrefs associated with this thing and updates it recursively in the properties and actions.
3088	Returns the thing's properties as a dictionary.
3089	Get the thing's actions as an array.
3090	Get the event descriptions for a given event name or all events.
3091	Add a property to this thing.
3092	Remove a property from this thing
3093	Get a property's value. Returns the properties value, if found, else None.
3094	Returns a dictionary of property_name -> value.
3095	Sets a property value.
3096	Get an action by name and ID. Returns the requested action if found, else None.
3097	Add a new event and notify subscribers.
3098	Add an available event.
3099	Perform an action on the thing. Return the created action if valid input is provided.
3100	Remove an existing action.Returns a boolean indicating the presence of the action.
3101	Add an available action with metadata and a class.
3102	Removes a websocket subscriber.
3103	Add a new websocket subscriber to an event.
3104	Remove a websocket subscriber from an event.
3105	Notify all subscribers of a property change.
3106	Notifies all subscribers of an action status change.
3107	Notify all subscribers of an event.
3108	Custom version of the standard annotate function that allows using field names as annotated fields.
3109	Updates all rows that match the filter.
3110	Creates multiple new records in the database. Allows custom conflict behavior. Returns either dicts or model instances.
3111	Creates a new record in the database. Returns the primary key of the created record.
3112	Creates a new record in the database and gets the entire row, using custom conflict behavior if specified.
3113	Builds the SQL compiler for an insert query using a list of dictionaries representing records to be inserted.
3114	Verifies whether the field modifies something on its own during pre_save. Returns True when the field modifies something.
3115	Gets fields for upsert operation. Splits into insert and update fields.
3116	Handles model creation and update signals, sending create or update signals accordingly.
3117	Send delete signal when a model is deleted.
3118	Selects whichever field is not None, returning the specified default value when all of them are None.
3119	Resolves expressions inside the dictionary.
3120	Compiles an HStore value into SQL, handling nested expressions.
3121	Gets a re-labeled clone of this expression.
3122	Adds an extra condition to an existing JOIN
3123	Gets whether the field with the specified name is a HStoreField. Returns a tuple containing a boolean and the field instance.
3124	Sets the values to be used in this query.
3125	Creates a REQUIRED CONSTRAINT for the specified hstore key.
3126	Renames an existing REQUIRED CONSTRAINT for the specified hstore key.
3127	Drops a REQUIRED CONSTRAINT for the specified hstore key.
3128	Gets the name for a UNIQUE index constraint on a single hstore key.
3129	Creates SQL for applying migration, uses super() for Django >= 2.0, otherwise constructs SQL string with parameters.
3130	Creates a custom setup.py command
3131	Get the base class for the custom database back-end.
3132	Prepare the configured database and enable the `hstore` extension if it isn't already enabled.
3133	Override base method to prevent string casting of all values, especially dictionaries and lists with expressions, in hstore fields.
3134	Builds the RETURNING part of the query
3135	Builds the SQL INSERT statement.
3136	Rewrites a formed SQL INSERT query to include the ON CONFLICT clause.
3137	Rewrites a formed SQL INSERT query to include the ON CONFLICT DO UPDATE clause.
3138	Rewrites an SQL INSERT query to include the ON CONFLICT DO NOTHING clause.
3139	Builds the `conflict_target` for the ON CONFLICT clause.
3140	Gets the field on a model with the specified name. Returns the field with the specified name or None if no such field exists.
3141	Formats a field's name for usage in SQL.
3142	Formats a field's value for usage in SQL.
3143	Creates a UNIQUE constraint for the specified hstore keys.
3144	Renames an existing UNIQUE constraint for the specified hstore keys
3145	Drops a UNIQUE constraint for the specified hstore keys
3146	Gets the name for a UNIQUE INDEX that applies to one or more keys in an hstore field. Returns the name for the UNIQUE index.
3147	Iterates over the keys marked as "unique" in the specified field.
3148	Adds an extra condition to this join
3149	Compiles this JOIN into a SQL string by adding extra conditions.
3150	Approximate the 95% confidence interval for Student's T distribution given the degrees of freedom.
3151	Find the pooled sample variance for two samples.
3152	Calculate a t-test score for the difference between two samples.
3153	Determine whether two samples differ significantly using Student's two-sample, two-tailed t-test.
3154	Returns a topological sorting of nodes in a graph.
3155	Yields solutions to the N-Queens problem. Each solution is a tuple representing the column positions of the queens on the board, where the tuple index indicates the row.
3156	uct tree search for board moves
3157	Select move; unexplored children first, then according to uct value.
3158	Randomly play until both players pass
3159	Filter out benchmarks not supported by both Pythons
3160	Recursively expands benchmark names, yielding actual benchmark names with fully expanded group names.
3161	Generates the list of strings with repeated prefixes and suffices
3162	Generate a list of regex and string pairs for benchmarking.
3163	Returns the domain of the B-Spline.
3164	Fetches messages from a specified category and channel after a given date, yielding each item and updating with user data.
3165	Parse posts and return in order.
3166	Fetch user data.
3167	Retrieves all entries from a RSS url and returns a generator of entries.
3168	Fetch the entries for a given category and return a generator of items.
3169	Returns the RSS argument parser.
3170	Fetch bugs from a Bugzilla repository updated since a given date. Loopable.
3171	Retrieve bugs updated from a specified date
3172	Retrieve bug comments by identifiers
3173	Get the history of the given bugs.
3174	Get the attachments of the given bugs.
3175	Get issue notes.
3176	Fetch merge requests from GitLab, apply filters, and expand with additional data.
3177	Retrieves merge notes from a GitLab client, processes them, and returns a list of notes with award emoji data.
3178	Get merge versions
3179	Get the merge requests from pagination with an optional start date.
3180	Method to retrieve merge full data.
3181	Get the merge versions from pagination
3182	Get merge version detail
3183	Get the notes from pagination.
3184	Get emojis from pagination
3185	Get emojis of a note.
3186	Calculate the seconds to reset the token requests by obtaining the difference between the current date and the next date when the token is fully regenerated.
3187	Return the items from GitLab API using links pagination
3188	Initialize rate limit information.
3189	Returns the GitLab argument parser.
3190	Fetch the messages from the channel that were sent since the given date. Returns a generator of messages.
3191	Extracts identifier from a Slack item.
3192	Fetches the number of members in a conversation.
3193	Fetch information about a channel.
3194	Fetch user info.
3195	Returns the Slack argument parser with required token and additional options.
3196	Extracts and converts the update time from a Bugzilla item, returning a UNIX timestamp.
3197	Parse a Bugzilla CSV bug list.
3198	Parse Bugzilla details from XML.
3199	Parse Bugzilla bug activity HTML stream.
3200	Logout from the server.
3201	Get metadata information in XML format.
3202	Get a summary of bugs in CSV format.
3203	Get the information of a list of bugs in XML format.
3204	Get the activity of a bug in HTML format.
3205	Method for fetching events from the server. Filters by category, date range, and whether to include classified data. Returns a generator of events.
3206	Fetch and parse events of a given category within a specified date range.
3207	Fetches the events pages of a given group.
3208	Fetch the comments of a given event.
3209	Fetch the rsvps of a given event.
3210	Fetch an Askbot HTML question body.
3211	Fetch all the comments of an Askbot question and answers. Returns a list of comments with the ids as hashes.
3212	Build an Askbot HTML response with question and answer details.
3213	Retrieve a question page using the API.
3214	Retrieve a raw HTML question and all its information.
3215	Retrieve a list of comments by a given post_id.
3216	Parse the question info container from an HTML question.
3217	Parse the answers of a given HTML question, including user information and comments.
3218	Parse number of answer pages to paginate over them.
3219	Parse HTML container for user information.
3220	Fetch the reviews for a given category and backend arguments.
3221	Parses a Gerrit reviews list.
3222	Specific fetch for gerrit 2.8 version.
Retrieves open and closed reviews, compares based on last updated, and yields the newer one. Handles pagination to avoid reaching the maximum number of reviews per request.
3223	Return the Gerrit server version.
3224	Get reviews starting from last_item.
3225	Return the item to start from in next reviews group based on Gerrit version and last item.
3226	### Execute gerrit command
3227	Execute gerrit command against the archive
3228	Execute gerrit command with retry if it fails.
3229	Returns the Gerrit argument parser with specific options and required arguments.
3230	Get data associated to an issue
3231	Get attachments of an issue.
3232	Get messages of an issue.
3233	Get activities on an issue
3234	Get data associated to an user.
3235	Get the user data by URL.
3236	Get issue data by ID.
3237	Get a collection list of a given issue
3238	Build URL project
3239	Generator yields data from Launchpad API using pagination until there are no more pages.
3240	Fetch paginated subscriptions from GroupsIO API
3241	Find the id of a group given its name by iterating on the list of subscriptions.
3242	Fetch requests from groupsio API
3243	Returns the Groupsio argument parser with required and optional arguments.
3244	Generate a UUID based on the SHA1 hash of the concatenated values from the list, separated by ':'. Each value must be a non-empty string; otherwise, raise a ValueError.
3245	Fetches items using a specified backend, optionally categorizing and filtering classified fields, and stores them in an archive if a manager is provided. Errors lead to archive removal.
3246	Fetch items from an archive manager. Only items archived after a given date are returned.
3247	Find available backends in a given package.
3248	Fetch items from the repository. The method retrieves items from a repository. To remove classified fields from the resulting items, set the parameter `filter_classified`. Take into account this parameter is incompatible with archiving items. Raw client data are archived before any other process. Therefore, classified data are stored within the archive. To prevent from possible data leaks or security issues when users do not need these fields, archiving and filtering are not compatible.
3249	Fetch the questions from an archive. If no archive was provided, raise an `ArchiveError` exception. Returns a generator of items.
3250	Remove classified or confidential data from an item.
3251	Parse a list of arguments and return an object with the parsed values.
3252	Activate authentication arguments parsing, allowing either basic auth or token auth, or both.
3253	Activate command-line arguments for archive options.
3254	Activate output arguments parsing.
3255	Fetch and write items using the backend. If `fetch-archive` parameter is given, use the archive manager to retrieve items. Convert items to JSON and write to the defined output. Handle I/O and other exceptions.
3256	Initializes archive based on parsed parameters.
3257	Extracts the update time from a MBox item. Converts 'Date' field to UNIX timestamp format.
3258	Parse a mbox file and returns an iterator of dictionaries. Each one contains an email message.
3259	Fetch and parse messages from a mailing list, filtering by date.
3260	Copy the contents of a mbox to a temporary file.
3261	Check if the given message has the mandatory fields.
3262	Convert a message in CaseInsensitiveDict to dict.
3263	Return a Message representation or raise a KeyError.
3264	A method that retrieves a list of commits from a Git repository or a log file, filtering by date, branches, and update options. Loopable.
3265	Fetch the commits for a given category and update them.
3266	Parse a Git log file and return an iterator of dictionaries containing commits.
3267	Determines and sets the repositories directory path based on various conditions.
3268	Returns the Git argument parser.
3269	Parses the Git log stream.
3270	Clone a Git repository into a specified directory.
3271	Counts the total number of objects (packed and unpacked) available on the repository.
3272	Checks if the git repository is in a detached state.
3273	Update repository from its remote using 'fetch' command for 'heads' refs, overwriting local refs and removing any commit stored in the local copy.
3274	Keep the repository in sync by fetching newest objects and updating references. Returns a list of hashes for new commits.
3275	Read the list of commits from the repository based on the specified branches. If branches are not specified or empty, it fetches commits from all branches/tags/remotes. Logs warnings and errors appropriately.
3276	Read the commit log from the repository with options for date range and branches.
3277	Show the data of a set of commits using the Git show command.
3278	Fetch changes and store them in a pack.
3279	Read the commits of a pack.
3280	Updating references removing old ones.
3281	Get the current list of local or remote refs.
3282	Update a reference (branch or tag) in a Git repository, either updating it to a new hash or deleting it.
3283	Run a command with a non-blocking call. The command is executed in the specified directory with the given environment variables and output is returned as an iterator of encoded bytes. Raises RepositoryError if an error occurs during execution.
3284	Reads and processes self.proc.stderr in a subprocess, updating self.failed_message with the last error line if the subprocess didn't finish successfully.
3285	Run a command and return the output as encoded bytes.
3286	Fetches tweets from the server using TwitterSearch API, filtering by category, since_id, max_id, geocode, lang, include_entities, and tweets_type. Returns a generator of tweets.
3287	Fetch tweets based on category and backend arguments, returning a generator of items.
3288	Fetch tweets for a given query between since_id and max_id. Returns a generator of tweets.
3289	Returns the Twitter argument parser with specific options and requirements.
3290	Retrieves data from Google API for given keywords. Returns a generator of items.
3291	Fetch Google hit items based on category and backend arguments.
3292	Parse hits from Google Search API response and extract statistics.
3293	Fetch information about a list of keywords.
3294	Extracts the update time from a GitHub item. Converts 'updated_at' field to UNIX timestamp format. Handles both forked and non-forked items accordingly.
3295	Extracts the category from a GitHub item.
3296	Fetches pull requests within a date range, initializes extra fields, and yields formatted pull requests.
3297	Get repo info about stars, watchers and forks.
3298	Get issue reactions.
3299	Get reactions on issue comments.
3300	Return the list of issue assignees after mapping usernames to user objects.
3301	Get pull request requested reviewers
3302	Get pull request commit hashes
3303	Get pull review comment reactions
3304	Get user and org data for the login.
3305	Get reactions of a specific issue.
3306	Fetch the issues from the repository.
3307	Fetching pull requests from repository since a given date.
3308	Get repository data.
3309	Get pull requested reviewers.
3310	Get pull request commits
3311	Get reactions of a review comment.
3312	Get the user information and update the user cache
3313	Get the user public organizations
3314	Return token's remaining API points
3315	Return array of all tokens remaining API points
3316	Check all API tokens and choose the one with the most remaining API points.
3317	Check if API tokens need to be switched based on rate limit.
3318	Update rate limits data for the current token.
3319	Initialize metadata information for a repository, including the origin, backend details, and creation timestamp.
3320	Stores a raw item in the archive using a unique identifier generated from uri, payload, and headers.
3321	Retrieves raw item from the archive using given URI, payload, and headers.
3322	Creates a new and empty archive at the specified path.
3323	Generate a SHA1 hash based on URI, payload, and headers.
3324	Verify the archive's validity by checking if tables are created and contain valid data. Raises an error if metadata is corrupted or entries exist without metadata.
3325	Load metadata from the archive file.
3326	Fetch the number of rows in a table.
3327	Creates a new archive with a random SHA1 name.
3328	Remove an archive from the filesystem
3329	Search archives based on origin, backend, category, and date. Returns a sorted list of matching archive paths.
3330	Search archives using filters.
3331	Retrieve the file paths stored under the base path.
3332	Check if filename is a compressed file supported by the tool. Uses magic numbers to determine file type. Supported types are 'gz' and 'bz2'. Returns 'gz' or 'bz2'; `None` if the type is not supported.
3333	Generate a months range from `from_date` to `to_date`, yielding tuples of successive months.
3334	Convert an email message into a dictionary.
3335	Remove control and invalid characters from an XML stream
3336	Convert a XML stream into a dictionary.
3337	Parse a Redmine issues JSON stream. Returns a list iterator of parsed issues.
3338	Get the information of a list of issues.
3339	Get the information of a given issue by ID.
3340	Get the information of the given user.
3341	Method to call a resource with given parameters and return the text response.
3342	A method that fetches data from a Docker Hub repository. The method retrieves data including number of pulls, stars, and description.

---
3343	Fetch the Dockher Hub items
3344	Fetch information about a repository.
3345	Maps custom field information to the provided fields.
3346	Filter custom fields from a given set of fields
3347	Parse a JIRA API raw response. Retrieves issues from the received items. Returns a generator of issues.
3348	Retrieves all items from a given date using pagination
3349	Retrieve all issues from a given date.
3350	Retrieve all the comments of a given issue.
3351	Retrieve all the fields available.
3352	Retrieves builds from a Jenkins URL.
3353	Retrieves all jobs from Jenkins API.
3354	Method to retrieve all builds from a job. Filters out blacklisted jobs. Adjusts payload based on detail depth.
3355	Parse a StackExchange API raw response and retrieve questions.
3356	Retrieve all the questions from a given date
3357	Returns the StackExchange argument parser.
3358	Fetch items from a category using the appropriate API based on MediaWiki version.
3359	Get the max date in unixtime format from reviews.
3360	Fetch pages from a MediaWiki API >=1.27. Retrieve wiki pages using the reviews API and yield them. Handle pagination and skip processed pages. Track total and skipped pages.
3361	Retrieve all pages from a namespace starting from apcontinue.
3362	Retrieve recent pages from all namespaces starting from rccontinue.
3363	A method that fetches messages from the Telegram server based on the given offset and chats. Returns a generator of messages.
3364	Parse a Telegram JSON messages list. JSON string to parse. Returns a generator of parsed messages
3365	Check if a message can be filtered based on a list of chats. Returns True if the chat_id is in the list or if the chats list is None.
3366	Fetch messages that the bot can read, optionally starting from a specified offset.
3367	Generator which fetches articles of a specific category and yields them
3368	Retrieve and return metadata for an item with additional information related to NNTP.
3369	Parse a NNTP article string and return a dictionary.
3370	Fetch NNTP data from the server or from the archive.
3371	Fetch article data
3372	Fetch data from NNTP.
3373	Fetch data from the archive
3374	Create a HTTP session and initialize the retry object.
3375	Setup the rate limit handler with options to sleep until reset and specify minimum and header values.
3376	Sleep until the rate limit is restored or raise a RateLimitError if sleep_for_rate flag is disabled.
3377	Update the rate limit and the time to reset from the response headers.
3378	Parse a Supybot IRC log file and returns an iterator of dictionaries. Each one of this, contains a message from the file. Raises ParseError and OSError when the format of the Supybot log file is invalid or an error occurs reading the given file.
3379	Retrieve and sort Supybot archives from a given date.
3380	List the filepath of archives stored in dirpath
3381	Parse a Supybot IRC stream. Return an iterator of dicts containing information about the date, type, nick, and body of a single log entry.
3382	Parse timestamp section and extract timestamp and message
3383	Parse a Supybot message and return its components.
3384	Fetches topics from a category, updated from a specified date, and returns a generator of items.
3385	Parse a topics page stream and return a generator of tuples containing topic identifiers, last update dates, and pin status.
3386	Retrieve the topic with a given identifier.
3387	Retrieve a post by its identifier.
3388	Fetches tasks of a given category and yields them.
3389	Parse a Phabricator tasks JSON stream. Returns a list iterator of parsed task data.
3390	Parse a JSON stream and return a list iterator of parsed user data.
3391	Retrieve tasks updated from a specified date
3392	Retrieve tasks transactions.
3393	Retrieve users by identifiers.
3394	Retrieve data about PHIDs.
3395	Call a method with specified parameters and handle server errors via Conduit API.
3396	Extracts and combines the 'id' and 'version' from a Confluence item to create a unique identifier.
3397	Parse a Confluence summary JSON list. Returns an iterator of dictionaries. Each dictionary is a content summary. Takes a JSON string to parse.
3398	Get the contents of a repository using pagination.
3399	Fetch a snapshot of content for a given version
3400	Parses the result property, extracting the value and unit of measure, and converts them into a Measurement object.
3401	Return a capabilities url
3402	Fetches a WFS capabilities document, parses it, and returns an instance of WFSCapabilitiesInfoset.
3403	Parse XML capabilities document and return instance of WFSCapabilitiesInfoset.
3404	Parses the result element of the observation type.
3405	Builds a fully constructed WFS 3.0 URL.
3406	Get attribute elements from XMLcomplexType
3407	Construct fiona schema based on given elements.
3408	Get url for describefeaturetype request
3409	Call web processing service to perform word count on a text document.
3410	Get the list of Movie genres.
3411	Get the list of TV genres.
3412	Get movie list by genre, filter by vote count, language, and content type.
3413	Get the basic movie information for a specific movie id.
3414	Get alternative titles for a specific movie id.
3415	Get the cast and crew information for a specific movie id
3416	Get the external ids for a specific movie id.
3417	Get study keywords for a specific study.
3418	Get a list of recommended movies for a movie.
3419	Get the release dates and certification for a specific movie id.
3420	Get release date and certification info by country for a specific movie id
3421	Get the translations for a specific movie id
3422	Output:
Get similar movies for a specific movie id.
3423	Get the reviews for a particular movie.
3424	Get changes for a specific movie id, grouped by key and ordered by date.
3425	Get the list of upcoming movies.
3426	Get list of movies playing in theatres
3427	Get list of popular movies on The Movie Database. This list refreshes every day.
3428	Get the list of top rated movies, filters by vote count, refreshes daily.
3429	Retrieve account states for movies.
3430	Let's users rate a movie using a valid session id or guest session id.
3431	Get movie credits for a specific person ID.
3432	Get the TV credits for a specific person id
3433	Get detailed information about a particular credit record.
3434	Discover TV shows by different data types like rating, votes, genres, network, and air dates
3435	Get the system wide configuration info
3436	Get the list of supported certifications for movies.
3437	Get the basic information for an account.
3438	Get the list of movies on an account watchlist.
3439	Generate a valid request token for user-based authentication. Return a dict representation of the JSON response from the API.
3440	Authenticate a user with a TMDb username and password.  The user must have a verified email address and be registered on TMDb.
3441	Generate a session id for user-based authentication.
3442	Generate a guest session id.
3443	Get a list of rated movies for a specific guest session id.
3444	Check if a movie ID is already added to a list.
3445	Create a new list with optional language.
3446	Delete movies from a list that the user created.
3447	Clear all items within a list. Irreversible action requiring a valid session ID.
3448	Get the content ratings for a TV Series.
3449	Get similar TV series for a specific TV series id
3450	Get list of TV shows currently on air based on upcoming episodes.
3451	Get the primary information about a TV season by its season number.
3452	Get TV season credits by season number
3453	Get external IDs for a TV season by season number.
3454	Get primary information about a TV episode by season and episode number.
3455	Get TV episode credits by season and episode number.
3456	Get the external ids for a TV episode by combination of a season and episode number.
3457	Set attributes to dictionary values.
3458	Search for movies by title.
3459	Search for collections by name.
3460	Search for TV shows by title.
3461	Search for people by name.
3462	Search for companies by name
3463	Search for keywords by name.
3464	Search the movie, tv show and person collections with a single query.
3465	Normalize and tokenize text
3466	Takes a list of reference sentences for a single segment and returns an object with reference lengths and the maximum count of n-grams.
3467	Takes a reference sentence for a single segment and returns an object containing the length, n-gram counts, and a frozenset of counts for BLEU calculation.
3468	Complementary error function.
3469	Creates the sentence alignment of two texts. Aligns sentences within blocks. Returns a list of alignment lists.
3470	Get descriptors in module.
3471	Register Descriptors from JSON descriptor objects.
3472	Register descriptors.Descriptor-like: Descriptor instance Descriptor class module Iterable Descriptor-likes in module Descriptor-likes in Iterable Parameters: desc Descriptor-like version str ignore_3D bool
3473	Output message.
3474	Check calculatable descriptor class or not.
3475	Converts to a JSON-serializable dictionary, optionally including arguments.
3476	Get 3D coordinate.
3477	Calculate atomic surface area considering neighboring atoms
3478	Calculate all atomic surface area.
3479	Construct SurfaceArea from rdkit Mol type.
3480	Create Descriptor instance from JSON dict.
3481	Replace missing values with specified value.
3482	Delete missing values from the dataset.
3483	Get items
3484	Convert Result to dict.
3485	Retrieve descriptor name-value pairs.
3486	Decorator to log function calls.
3487	Decorator to synchronize function.
3488	Shows current progress message to stderrClears previous message before showing next one
3489	Program message output.
3490	Utility function for handling runtime failures.
3491	Return a temporary filename for atomic download.
3492	Atomically rename and clean tempfile
3493	Clean up temp files
3494	Get the fixed part of the path without wildcard
3495	Given an API name, list all legal parameters using boto3 service model.
3496	Combine existing parameters with extra options supplied from command line options. Carefully merge special type of parameter if needed.
3497	Adds the whole list of API parameters into optparse.
3498	Terminates all threads by deleting the queue and forcing the child threads to quit.
3499	Add a single task into task queue
3500	Wait for all tasks to complete and terminate threads
3501	Increase task counter and show progress message.
3502	Retrieve S3 access keys from the environment, or None if not present.
3503	Retrieve S3 access keys from the command line, or None if not present.
3504	Retrieve S3 access key settings from s3cmd's config file, if present; otherwise return None.
3505	Initialize s3 access keys from environment variable or s3cfg config file.
3506	Connects to S3 storage and handles potential connection errors.
3507	List all buckets
3508	Walk through a S3 directory. This function initiate a walk with a basedir. It also supports multiple wildcards.
3509	Walk through local directories from root basedir
3510	Expand the wildcards for an S3 path. This emulates the shell expansion for wildcards if the input is a local path.
3511	Upload a single file or directory by adding tasks to a pool.
3512	Upload files to S3, handling multiple files and recursive mode.
3513	Creates a new S3 bucket.
3514	Update privileges on target file based on source metadata.
3515	Print out a series of files from S3
3516	Download a single file or a directory by adding a task into queue.
3517	Downloads files from S3, handling wildcards and recursive modes.
3518	Copy a single file or directory by adding a task into queue
3519	Copies files from a source to a target, supporting wildcards and recursive copying.
3520	Delete files on S3
3521	Generic version of directory walk. Return file list without base path for comparison.
3522	Sync directory to directory using S3 URLs or local paths.
3523	Calculate MD5 hash code for a local file
3524	Get or calculate MD5 value of the local file.
3525	Ensure all directories are created for a given target file.
3526	Check if local and remote files have the same MD5 hash.
3527	Partially match a path and a filter_path with wildcards.
3528	Recursively walks through S3 directories, filtering based on a partial path, and populates a result with objects and subdirectories.
3529	Check all file items with given conditions.
3530	Get privileges of a local file. Returns octal representation of file mode, or raises Failure if stat fails.
3531	Get the s3 object with the S3 URL. Return None if not exist.
3532	Read local file chunk
3533	Uploads a file to an S3 bucket using a multipart strategy if necessary.
3534	Verifies the file size of the downloaded file.
3535	Write a local file chunk.
3536	Copy a single file from source to target using boto S3 library.
3537	Handle commands and dispatch to individual handlers.
3538	Validate input parameters with given format. Check for wildcards for recursive mode.
3539	Pretty-print the result of s3walk by calculating the maximum width of each column and aligning them.
3540	Handler for ls command
3541	Handler for mb command
3542	Handles 'put' command by validating parameters and transferring files to S3.
3543	Handles the get command by validating the arguments and calling the appropriate method to retrieve files.
3544	Handler for cat command that takes source and prints files using S3 handler
3545	Handles the dsync command by setting options and syncing files.
3546	Handles copying files from source to target using s3handler.
3547	Move files securely using s3handler
3548	Deletes files based on a source argument
3549	Shows size for files in directory
3550	Handler to calculate and display total size.
3551	Search for date information in the string
3552	Search for time information in the string
3553	Search for timedelta information in the string
3554	Takes a JSON-like string and returns it as a dictionary, raises an error if invalid.
3555	Discover gateways using multicast.
3556	Start listening on a multicast socket.
3557	Send a read command to the gateway and return the response data.
3558	Pushes data broadcasted from gateway to device if valid.
3559	Encrypt token using AES with a specific IV and format the ciphertext as a hexadecimal string.
3560	Called by RQ when there is a failure in a worker. Reports data about the job and exception using rollbar.
3561	Configure Rollbar for Pyramid application.
3562	Check if log configuration exists; if not, set up a default handler.
3563	Get the current request object. Implementation varies on library support.
3564	Saves configuration variables in this module's SETTINGS.
3565	Decorator for making error handling on AWS Lambda easier
3566	Reports an arbitrary string message to Rollbar.
3567	Searches a project for items that match the input criteria.
3568	Creates a .rollbar log file for use with rollbar-agent.
3569	Returns a dictionary describing the logged-in user using data from request.
3570	Attempt to add information from the lambda context if it exists
3571	Attempts to build request data; if successful, sets the 'request' key on `data`.
3572	Check if we should record local variables for the given frame. Include the last frames locals and any frame locals from a file in the project's root.
3573	Returns a dictionary containing data from the request based on the request object type.
3574	Build a server data dictionary.
3575	Returns the full payload as a string.
3576	Runs an Echo protocol on port 8000 with Rollbar error logging.
3577	Composes a Hangul letter by specifying chosung, joongsung, and jongsung components.
3578	Decompose a Hangul letter into its constituent parts.
3579	Checks if a given Hangul letter contains Jongsung.
3580	Adds a josa at the end of the word based on the last letter's ending sound.
3581	Returns true if node is inside the name of an except handler.
3582	Returns true if given node is inside lambda
3583	Recursively returns all atoms in nested lists and tuples
3584	Checks if an assignment node in an except handler clobbers an existing variable.
3585	Returns True if the node is referencing the "super" builtin function
3586	Returns true if the function does nothing but raising an exception
3587	Return True if the given Name node is used in function or lambda default argument's value
3588	return true if the name is used in function decorator
3589	Return True if 'frame' is an astroid.Class node with 'node' in the subtree of its bases attribute
3590	Return the higher parent which is not an AssignName, Tuple, or List node.
3591	Decorator to store messages that are handled by a checker method
3592	Given a format string, return an iterator of all valid format fields, handling nested fields.
3593	Returns the specified argument from a function call.
3594	Return true if the given class node is subclass of exceptions.Exception.
3595	Check if the given exception handler catches the given error_type
3596	Detect if the given function node is decorated with a property.
3597	Determine if the `func` node has a decorator with the qualified name `qname`.
3598	Return the ExceptHandler or the TryExcept node in which the node is.
3599	Checks if the given node is from a fallback import block.
3600	Return the collections of handlers handling the exception in arguments.
3601	Check if the node is in a TryExcept which handles the given exception.
3602	Returns true if the given class node has an abstract method
3603	Get the inferred value of a node, return None if inference fails or if there is ambiguity.
3604	Returns the inferred type for `node`. If there is more than one possible type or the inferred type is Uninferable or None, return None.
3605	Check if the given function node is a singledispatch function.
3606	Check if the postponed evaluation of annotations is enabled
3607	Split module names into subparts.
3608	Get a prepared module name from the given import node, handling relative imports to return absolute qualified module names.
3609	Returns a string representing imports as a tree.
3610	Generate a dependencies graph and add information about it to the report's section.
3611	triggered when an import statement is seen
3612	Triggered when a from statement is seen, performing various checks and recording the import.
3613	Check if `node` import or importfrom position is correct
3614	Record the package `node` imports from.
3615	Checks imports of a module node to ensure they are grouped by category: standard, third party, and local.
3616	Check relative import. Node is either an Import or From node, modname the imported module name.
3617	Notify an imported module, used to analyze dependencies.
3618	Check if the module is deprecated.
3619	Check if a module has a preferred replacement.
3620	return verbatim layout for displaying dependencies
3621	build the internal or external dependency graph
3622	Read config file and return list of options
3623	Insert default options to sys.argv.
3624	Return true if the node should be treated based on its visibility.
3625	Retrieve and return callbacks from handler for visited node
3626	launch the visit starting from the given node
3627	Check the consistency of msgid.
3628	Visit a Call node and perform various checks based on the inferred type of the node's function.
3629	Check that a datetime was inferred. If so, emit a boolean-datetime warning.
3630	Check that the mode argument of an open or file call is valid.
3631	Manage message of different type and in the context of path.
3632	Launch layouts display
3633	Get title for objects.
3634	sets default options using _default dictionary
3635	Return true if builtins is shown or node is not builtins
3636	Adds a class to the diagram
3637	return ancestor nodes of a class node
3638	return associated nodes of a class node; handles instance and local attributes at given level
3639	Recursively extracts classes related to klass_node.
3640	Return the generated diagram definition.
3641	visits astroid.ImportFrom and adds import modules to package diagram if enabled
3642	Generate a class diagram for the given class and its related classes.
3643	Get the diagrams configuration data
3644	Check if the given owner should be ignored based on its module and name matching against ignored_modules and ignored_classes.
3645	Given an owner and a name, find similar names based on a distance metric, returning a limited number of choices.
3646	Try to see if no-member should be emitted for the given owner.
3647	Check if the given node has a parent of the given type.
3648	Check if the given name is used as a variadic argument.
3649	Verify if the given call node has variadic nodes without context
3650	Check if the accessed attribute exists in inferred nodes, avoiding false positives for functions, methods, super calls, and metaclasses.
3651	Check if assigning to a function call, ensuring the function returns a valuable value.
3652	Check that an uninferable Call node does not call a function, handling properties and irrelevant attributes.
3653	Detect TypeErrors for unary operands.
3654	Return an iterator on interfaces implemented by the given class node.
3655	Build a Project object from a list of files or modules.
3656	Visit an ASTroid package node and optionally tag it with a unique ID.
3657	Visit an ASTroid function node, set locals_type mapping, and optionally tag with a unique id.
3658	Handle the assignment of a variable name in the ASTroid abstract syntax tree.
3659	Handles an astroid.assignattr node by updating the instance_attrs_type with the assigned values.
3660	Resolves module dependencies for an ASTroid Import node.
3661	Visit an AST ImportFrom node to resolve module dependencies
3662	Check if the module should be added to dependencies
3663	Notify an imported module and handle dependencies
3664	Generates an ANSI escape code based on provided color and style.
3665	Colorize message by wrapping it with ANSI escape codes.
3666	Register the reporter classes with the linter.
3667	Manage message of different type and in the context of path
3668	launch layouts display
3669	Manage message of different types, and colorize output using ansi escape codes.
3670	Open a vcg graph
3671	Draw a node with a title and optional attributes.
3672	Draw an edge from a node to another.
3673	Check the new string formatting and validate arguments.
3674	Check for bad escapes in a non-raw string.
3675	Display a section as text
3676	Display an evaluation section as text.
3677	display a table as text
3678	Format a table with given layout, content, and column widths.
3679	Register old ID and symbol for renamed warning.
3680	Registers all messages from a checker.
3681	Register a MessageDefinition with consistency in mind.
3682	Check that a symbol is not already used.
3683	Raise an error when a symbol is duplicated.
3684	Raise an error when a msgid is duplicated among symbols.
3685	Get the Message object for this message
3686	Generates a user-consumable representation of a message. Returns the message ID or the ID and the symbol.
3687	Display help messages for the given message identifiers
3688	Output full messages list documentation in ReST format
3689	Generate ReST documentation for all extension modules in a Pylint package.
3690	Use sched_affinity if available for virtualized or containerized environments.
3691	Generate a message type report.
3692	Prepare sys.path for running the linter checks. Paths are added to sys.path in corresponding order to the arguments. We avoid adding duplicate directories to sys.path. `sys.path` is reset to its original value upon exiting this context.
3693	Loads and registers pylint plugins from a list of module names.
3694	Calls "load_configuration" hook for plugins to configure settings.
3695	Override set_option from config.OptionsProviderMixin to handle some special options.
3696	Registers a new checker and its reports, options, and messages.
Disables all messages of the checker if it is not enabled.
3697	Disable all reporters.
3698	Disables all other checkers and enables Python 3 warnings. Adjusts error messages based on error mode.
3699	Return all available checkers as a list
3700	Get all the checker names that this linter knows about, excluding "master".
3701	Return checkers needed for activated messages and reports.
3702	Expands modules from a list, handles errors, and sets messages accordingly.
3703	Set the name of the currently analyzed module and initialize statistics for it.
3704	Checks a module from its astroid representation.
3705	Create global evaluation report.
3706	Print help message and exit.
3707	Prints full documentation and exits.
3708	Print available messages
3709	List all the check groups that pylint knows about.
3710	Wrap the text on the given line length.
3711	Return module name and frame ID in the module.
3712	Decode the input line using the specified encoding or the default encoding if the specified one is not found.
3713	Determines if the basename is matched in a regex blacklist.
3714	load all module and package in the given directory, looking for a 'register' function in each one, used to register pylint checkers
3715	Converts a string into a multi-line comment.
3716	return the user input's value from a 'compiled' value
3717	Format an options section using the INI format.
3718	Format options using the INI format.
3719	Insert a child node at the specified index.
3720	Adds a child node while ensuring it does not already have a parent.
3721	Return the ancestor nodes
3722	Formats and writes the given layout into the stream object, handling unicode strings and encoding.
3723	Gets the content of a table without writing it, returning an aligned list of lists with cell values as strings.
3724	trick to compute the formatting of children layout before actually writing it return an iterator on strings (one for each child element)
3725	Collects block-level options line numbers from an AST.
3726	Report an ignored message based on state scope and line number.
3727	Registers a report with a unique identifier, title, callback method, and checker.
3728	Render registered reports
3729	Add some stats entries to the statistic dictionary. Raise an AssertionError if there is a key conflict.
3730	Get the name of the property that the given node is a setter for.
3731	Get the property node for a given setter node.
3732	Check if a return node returns a value other than None.
3733	Get all possible raised exception types for the given raise node.
3734	Inspect source file to find messages activated or deactivated by id.
3735	Inspect source file to find encoding problem.
3736	Inspect source for `FIXME` problems.
3737	Check if the name is a future import from another module.
3738	Returns True if stmt is inside the else branch for a parent For stmt.
3739	get overridden method if any
3740	Returns extra information for error messages related to unpacking non-sequence and unbalanced tuple unpacking.
3741	Detect whether two frames share the same global scope.
3742	Checks if name_node has corresponding assign statement in same scope
3743	Mark the name as consumed and delete it from the to_consume dictionary
3744	Check names imported in the global scope and report issues if they are not assigned, redefined as builtins, or undefined.
3745	Return True if the node is in a local class scope, as an assignment.
3746	Return True if there is a node with the same name in the to_consume dict of an upper scope and if that scope is a function.
3747	Check for unbalanced tuple unpacking and unpacking non-sequences.
3748	Update consumption analysis for metaclasses.
3749	Returns a list of subpackages for the given directory.
3750	setup entry point
3751	Overridden method from install_lib class to manually install included directories.
3752	make a layout with some stats about duplication
3753	facilitating command-line access to a standalone application that processes files to identify duplicate code snippets. It accepts various options for customizing the comparison, such as minimum line similarity and ignoring specific elements like comments, documentation, and imports.
3754	append a file to search for similarities
3755	Compute similarities in appended files.
3756	Display computed similarities on stdout
3757	find similarities in the two given linesets
3758	iterate on similarities among all files, by making a cartesian product
3759	return iterator on stripped lines, starting from a given index if specified, else 0
3760	create an index mapping lines to their line numbers
3761	Check if a definition signature is equivalent to a call.
3762	Check equality of nodes based on the comparison of their attributes named attr_name.
3763	Check if original and overridden methods arguments have different default valuesReturn True if one of the overridden arguments has a default value different from the default value of the original argumentIf one of the method doesn't have argument (.args is None) return False
3764	Determine if 2 methods have different parameters.
3765	Safely infer the return value of a function.
3766	Set the given node as accessed.
3767	Check if a class definition has an `__init__` method and perform various consistency checks.
3768	Detect that a class has a consistent mro or duplicate bases.
3769	Detect that a class inherits something which is not a class or a type.
3770	Checks method arguments and overrides in a function definition.
3771	Check if the given method override is useless, delegating to super() with the same parameters as the current method.
3772	On method node, check if this method couldn't be a function. Ignore class, static and abstract methods, initializers, and methods overridden from a parent class.
3773	Check that the given AssignAttr node is defined in the class slots.
3774	Check if the name accesses a class member and register it if so.
3775	Check that accessed members are defined.
3776	Check that the given class node implements abstract methods from base classes.
3777	Check that the signature of two given methods match.
3778	Checks if astroid.Name corresponds to first attribute variable name
3779	Return true if the given statement node raises an exception
3780	Verify that the exception context is properly set.
3781	Check use of super in method definitions. Ensure correct usage for new-style classes, avoid recursion, and validate arguments.
3782	Display results encapsulated in the layout tree
3783	Check if a class node is a typing.NamedTuple class
3784	Check if a class definition defines an Enum class.
3785	Checks if a class definition defines a Python 3.7+ dataclass
3786	init visit variables
3787	Check size of inheritance hierarchy and number of instance attributes.
3788	Check if a class has the correct number of public methods.
3789	Increments branches counter and checks boolean expressions
3790	Counts boolean expressions in an "if" node's test if it's a BoolOp node.
3791	check the node has any spelling errors
3792	Formats message according to given template using string formatting.
3793	Returns True if the given token is a trailing comma which trails an expression.
3794	Check if the given node is an actual elif
3795	Check if a given if node can be simplified.
3796	Check if an exception of type StopIteration is raised inside a generator.
3797	Return True if the exception node inherits from StopIteration.
3798	Check if a StopIteration exception is raised by the call to next function.
3799	Update and check the number of nested blocks
3800	Get the duplicated types from the underlying isinstance calls.
3801	Check isinstance calls that can be merged together.
3802	Checks for chained comparisons in expressions and refactors them if possible.
3803	Returns true if node is 'condition and true_value or false_value' form.
3804	Check that all return statements inside a function are consistent.
3805	Check if the node ends with an explicit return statement.
3806	Iterates over a sequence and suggests using enumerate for cleaner code.
3807	Check if Graphviz is required for specified output format.
3808	Checking arguments and run project
3809	Write a package diagram by iterating through modules, assigning unique IDs, and connecting dependencies.
3810	Write a class diagram by emitting nodes and edges based on the diagram objects, relationships, and their attributes.
3811	initialize DotWriter and add options for layout.
3812	Initialize VCGWriter for a UML graph.
3813	return True if message may be emitted using the current interpreter
3814	Generates a help string for a message with optional restrictions based on the checker and Python version.
3815	Extracts the environment PYTHONPATH and appends the current sys.path to those.
3816	Pylint the given file.Traverse downwards until we are out of a python package.Start pylint from this directory.
3817	Runs pylint from python, allowing custom command options and handling stdout and stderr.
3818	recursive function doing the real work for get_cycles.
3819	returns self._source
3820	Generates a graph file based on options.
3821	Format an options section using ReST formatted output.
3822	Register a numeric msgid to inform the user it could use a symbolic msgid.
3823	Disable message with the given id.
3824	Reenable message of the given id
3825	Retrieve the message symbol of the given message id, return the message id if it does not exist.
3826	Check if a message associated with a given message ID is enabled.
3827	Adds a message given by ID or name.
3828	Output full documentation in ReST format.
3829	Print full documentation for a checker, including title, module, verbatim name, docstring, options, messages, and reports.
3830	Return the length of the indentation on the given token's line.
3831	Return a line with |s for each position in the given lists, highlighting the bad position and providing a hint on how to fix the indentation.
3832	Get an indentation string for hanging indentation.
3833	Record the first non-junk token at the start of a line.
3834	Returns the valid offsets for the token at the given position.
3835	Extracts indentation information for a hanging indent after a bracket.
3836	Extracts indentation information for a continued indent.
3837	Push a new token for continued indentation on the stack.
3838	a new line has been encountered, process it if necessary
3839	Check that there are not unnecessary parentheses after a keyword.
3840	Extended check of PEP-484 type hint presence
3841	Checks the spacing of a single equals sign.
3842	Check that a binary operator is surrounded by exactly one space.
3843	Check and process node line numbers, ensuring they are not yet visited.
3844	Check for lines containing multiple statements.
3845	check lines have less than a maximum number of characters
3846	Returns the indent level of the string, checks for mixed indentation, and reports bad indentation if levels do not match expected.
3847	Check if a node is being used as an iterator
3848	Checks if an import node is in the context of a conditional.
3849	Detect when a "bad" built-in is referenced.
3850	Look for indexing exceptions.
3851	Looks for removed attributes or exceptions with # Exceptions with .message clearly defined are an exception
3852	Visit an except handler block and check for exception unpacking. Identify potential leaked names and flag exceptions that escape from the except block.
3853	Visit a raise statement and check for raising strings or old-raise-syntax.
3854	search the pylint rc file and return its path if it find it, else None
3855	Validate a given value according to the type specified in the option dictionary.
3856	Patches OptionParser.expand_default with custom behavior to handle defaults, avoiding overriding values from the configuration file.
3857	Disables abbreviations for long options.
3858	Register an options provider by inserting it in the correct position based on its priority and handling option groups and non-group options accordingly.
3859	optik callback for option setting
3860	Sets option on the correct option provider
3861	write a configuration file according to the current configuration into the given stream or stdout
3862	Dispatch values previously read from a configuration file to each options provider.
3863	Override configuration according to command line parameters.
3864	Add a dummy option section for help purpose
3865	Return the usage string for available options.
3866	Initialize the provider using default values.
3867	Get the config attribute corresponding to opt.
3868	Return the dictionary defining an option given its name
3869	Group options by section and return an iterator of (section, [list of (optname, optdict, optvalue)] )
3870	Determines if a BoundMethod node represents a method call with optional type and method name restrictions.
3871	Checks if node represents a string with complex formatting specs.  Returns True if inferred string uses complex formatting, False otherwise
3872	Clears state left in checker from last module checked. Processes imports to store the actual name of the logging module.
3873	Checks to see if a module uses a non-Python logging module.
3874	Checks if the module uses Python's built-in logging and adds the import name to a set.
3875	Checks calls to logging methods.
3876	Check format string tokens against supplied arguments
3877	return True if the node is inside a kind of for loop
3878	Returns the loop node that holds the break node in arguments.
3879	Returns true if a loop may end up in a break statement.
3880	Returns a tuple of property classes and names.
3881	Determines the type of function name regex match, given a function node and configuration.
3882	make a report of different types and their status and badname.
3883	Return True if the object is a method redefined via decorator.
3884	Is this a call with exactly 1 argument, where that argument is positional?
3885	Check if a Starred expression is used in an assignment target.
3886	Check that a name is both nonlocal and global.
3887	Check instantiating abstract class with abc.ABCMeta as metaclass.
3888	Check that any loop with an else clause has a break statement.
3889	Check that a node is inside a for or while loop.
3890	initialize visit variables and statistics
3891	Check for various kinds of statements without effect.
3892	Check whether or not the lambda is suspicious
3893	Checks if an assert statement uses a tuple with exactly two elements and adds a message if true.
3894	Check for duplicate keys in a dictionary.
3895	Check unreachable code in the node.
3896	Check that a node is not inside a finally clause of a try...finally statement and skip the check if a parent of a specific type is found.
3897	Check if argument to `reversed` is a proper sequence
3898	check module level assigned names
3899	Check for a name using the type's regexp. Handle exceptions and blacklist names.
3900	Check if node has a non-empty docstring.
3901	Check if we compare to a literal, which is usually what we do not want to do.
3902	create the subgraphs representing any `if` and `for` statements
3903	Parse the body and any `else` block of `if` and `for` statements.
3904	Visit an ASTroid module node to check for complexity and add a message if it exceeds a specified threshold.
3905	Collect visit and leave methods from the checker's directory and add them to the corresponding event lists.
3906	Call visit events of astroid checkers for the given node, recurse on its children, then leave events.
3907	Creates a relationship between two objects.
3908	Returns a relationship or None if not found.
3909	Return visible attributes, possibly with class name.
3910	return visible methods
3911	Creates a diagram object with the given title and node, ensuring the node isn't already a key in _nodes.
3912	return class names if needed in diagram
3913	Return all class nodes in the diagram
3914	Return a class by its name, raise KeyError if not found.
3915	Return all module nodes in the diagram
3916	Return a module by its name, raise KeyError if not found.
3917	Returns a module by its name, searching for both absolute and relative imports. Raises KeyError if not found.
3918	Add dependencies created by from-imports.
3919	Remove self from cache.
3920	Determines which method of getting the query object for use
3921	Returns the User object if the username and password match, None otherwise.
3922	Returns a Token object with the given access token or refresh token
3923	Creates a Token object and removes all expired tokens that belong to the user.
3924	Creates Grant object with the given params.
3925	Return Grant object with given client ID and code.
3926	Make request parameters right. Sets defaults for headers, method, and data. Adjusts URI and data for GET requests. Returns tuple with adjusted parameters.
3927	Initialize an app with a Flask instance.
3928	Registers a new remote application.
3929	Sends a request to the remote server with OAuth tokens attached.
3930	Returns a redirect response to the remote authorization URL with the signed callback given.
3931	Handles an oauth1 authorization response.
3932	Handles an oauth2 authorization response.
3933	Handles authorization response smartly.
3934	Handles an OAuth callback.
3935	Create a hashable object for given token as dictionary key.
3936	Uses cached client or creates new one with specific token.
3937	Creates a client with specific access token pair.
3938	Creates a context to enable the oauthlib environment variable for debugging with insecure transport.
3939	When consumer confirms authorization, checks realm and credentials, creates authorization response or redirects with error.
3940	Decorates a function to handle token requests, returning additional credentials as needed.
3941	Get client secret. The client object must have `client_secret` attribute.
3942	Get request token secret.
3943	Get access token secret
3944	Get realms for a client.
3945	Return realms for the given request token.
3946	This method returns the redirect URI for a given request token.
3947	Retrieves a previously stored client provided RSA key.
3948	Validate that supplied client key.
3949	Validates request token is available for client.
3950	Validates access token is available for client.
3951	Validate the timestamp and nonce is used or not.
3952	Validate if the redirect_uri is allowed by the client.
3953	Check if the token has permission on those realms.
3954	Validate verifier exists.
3955	Verifies if the request token exists.
3956	Verify if the realms match the requested realms.
3957	Save access token to database.
3958	Save request token to database.
3959	Save verifier to database.
3960	Return the error page URI or named endpoint URI.
3961	Handles an authorization request from a consumer, processes credentials, and returns a response based on the outcome.
3962	Verify current request, get the oauth data.
3963	Return client credentials based on the current request.
3964	Determines if client authentication is required for the current request based on RFC 6749.
3965	Authenticates itself using client credentials.
3966	Authenticate a non-confidential client.
3967	Get the list of scopes associated with the refresh token.
3968	Ensure requested scope matches original scope granted by resource owner. Scope is treated as equal if omitted.
3969	Default redirect_uri for the given client.
3970	Default scopes for the given client.
3971	Invalidate an authorization code after use.
3972	Persist the authorization code.
3973	Save the Bearer token.
3974	Validate access token.
3975	Ensures client_id belongs to a valid and active client.
3976	Ensure the grant code is valid.
3977	Ensure the client is authorized to use the grant type requested.
3978	Ensure the refresh token is valid and belongs to the client
3979	Ensure client is authorized to use the response type requested.
3980	Ensure the client is authorized access to requested scopes.
3981	Ensure the username and password is valid. Attach user object on request for later using.
3982	Revoke an access or refresh token.
3983	Update some required parameters for OAuth2.0 API calls
3984	Recursively converts dictionary keys to strings.
3985	Changes the authorization header for Weibo from Bearer to OAuth2
3986	Creates a remote app and registers it.
3987	Creates a remote app only.
3988	Extracts request parameters from a Django request object
3989	Ensure text is bytes type.
3990	Decode base64 string.
3991	Create response class for Flask with specified headers and body.
3992	Retrieve the cached clients dictionary from the current application context.
3993	Adds remote application and applies custom attributes on it.
3994	Creates and adds new remote application.
3995	Repeats calling a method to raise an exception.
3996	Call the method repeatedly to generate a PKey object.
3997	Call the function with an encrypted PEM and a passphrase callback.
3998	Calls the function with an encrypted PEM and a passphrase callback which returns the wrong passphrase.
3999	Call the function with an encrypted PEM and a passphrase callback which returns a non-string.
4000	Create CRL object with 100 revoked objects, then repeatedly call get_revoked method.
4001	Repeats copying an empty Revoked object and manually frees each copy.
4002	Creates and signs a certificate request with the given subject fields and public key.
4003	Generate a certificate given a certificate request.
4004	Decorator to raise NotImplementedError if a cryptography function dependency is missing.
4005	Let SSL know where to find trusted certificates for the certificate chain.
4006	Set the passphrase callback to be called when a private key with a passphrase is loaded.
4007	Load a certificate chain from a file.
4008	Load a certificate from a file.
4009	Load a certificate from an X509 object.
4010	Add certificate to chain.
4011	Load a private key from a file.
4012	Load a private key from a PKey object.
4013	Load trusted client certificates.
4014	Sets the maximum depth for the certificate chain verification.
4015	Load parameters for Ephemeral Diffie-Hellman
4016	Set the list of ciphers to be used in this context. Validate the cipher list and raise an error if it contains invalid TLS 1.3 specific ciphers.
4017	Sets the list of preferred client certificate signers for the server context. This list is sent to the client when the server requests a client certificate.
4018	Add the CA certificate to the list of preferred signers for this context.
4019	Specifies a callback function to be called when clients specify a server name.
4020	Enable support for negotiating SRTP keying material with a colon-delimited list of protection profile names.
4021	Specify a callback for Next Protocol Negotiation.
4022	Sets the protocols that the client is prepared to use after TLS negotiation using Application Layer Protocol Negotiation.
4023	Specify a callback function for ALPN protocol selection on the server.
4024	Sets the OCSP callback for the SSL context
4025	Set a callback for providing OCSP data for TLS handshake.
4026	Set a callback to validate OCSP data stapled to the TLS handshake on the client side.
4027	Switch this connection to a new session context.
4028	Retrieve the servername extension value from the client hello message, or None if not provided.
4029	Set the value of the servername extension to send in the client hello.
4030	Receive data on the connection. The maximum number of bytes to read is specified by `bufsiz`. The optional `flags` parameter can be used to control the behavior, with `MSG_PEEK` being the only supported flag. Returns the string read from the connection.
4031	Receive data on the connection and copy it directly into the provided buffer.
4032	Read bytes from a memory BIO if the Connection was created with one.
4033	Renegotiate the session.
Returns True if the renegotiation can be started, False otherwise
4034	Send the shutdown message to the Connection. Return True if the shutdown completed successfully, False otherwise.
4035	Retrieve the list of ciphers used by the Connection object.
4036	Get CAs whose certificates are suggested for client authentication.
4037	Sets the shutdown state of the Connection.
4038	Retrieve the random value used with the server hello message.
4039	Retrieve the random value used with the client hello message.
4040	Retrieve the value of the master key for this session.
4041	Obtain keying material for application use.
4042	Returns the Session currently used.
4043	Obtain the name of the currently used cipher.
4044	Obtain the number of secret bits of the currently used cipher.
4045	Obtain the protocol version of the currently used cipher. Returns the protocol name or None if no connection has been established.
4046	Retrieve the protocol version of the current connection.
4047	Get the protocol that was negotiated by NPN. Returns an empty string if no protocol has been negotiated yet.
4048	Sets the client's ALPN protocol list. Offers these protocols to the server during protocol negotiation.
4049	Get the protocol that was negotiated by ALPN. Returns a bytestring of the protocol name. If no protocol has been negotiated yet, returns an empty string.
4050	Allocate and manage an OpenSSL memory BIO.
4051	Copy the contents of an OpenSSL BIO object into a Python byte string.
4052	Set ASN1 time value from string representation.
4053	Retrieve the time value of an ASN1 time object.
4054	Return a single curve object selected by name. If the named curve is not supported then ValueError is raised.
4055	Dumps a public key to a buffer in specified format.
4056	Load a public key from a buffer.
4057	Sign a data string using the given key and message digest.
4058	Verify the signature for a data string.
4059	Dumps a certificate revocation list to a buffer based on the specified file type.
4060	Export as a `cryptography` key.
4061	Generate a key pair of the given type, with the given number of bits.
4062	Check the consistency of an RSA private key.
4063	Get the names of elliptic curves supported by OpenSSL.
4064	Get, cache, and return the curves supported by OpenSSL.
4065	Create a new OpenSSL EC_KEY structure initialized to use this curve. The structure is automatically garbage collected when the Python object is garbage collected.
4066	Return the DER encoding of this name.
4067	Returns the components of a name as a sequence of 2-tuples.
4068	Returns the short type name of an X.509 extension as a byte string.
4069	Returns the data of the X509 extension, encoded as ASN.1.
4070	Export as a ``cryptography`` certificate signing request.
4071	Set the public key of the certificate signing request.
4072	Get the public key of the certificate signing request.
4073	Return the subject of this certificate signing request.
4074	Adds extensions to the certificate signing request.
4075	Returns the X.509 extensions in the certificate signing request.
4076	Verifies the signature on this certificate signing request.
4077	Export as a "cryptography" certificate.
4078	Sets the version number of the certificate.
4079	Get the public key of the certificate.
4080	Sets the public key of the certificate.
4081	Signs a certificate using a private key and a specified digest type. Raises exceptions for invalid key types, uninitialized keys, or unsupported digest methods.
4082	Returns the signature algorithm used in the certificate.
4083	Return the digest of the X509 object.
4084	Set the serial number of a certificate.
4085	Return the serial number of this certificate.
4086	Adjusts the time stamp on which the certificate stops being valid by a specified number of seconds.
4087	Adjusts the timestamp on which the certificate starts being valid by a specified number of seconds.
4088	Check whether the certificate has expired
4089	Return the issuer of this certificate.
4090	Set the issuer of this certificate.
4091	Return the subject of this certificate
4092	Set the subject of this certificate.
4093	Adds extensions to the certificate.
4094	Get a specific extension of the certificate by index.
4095	Adds a trusted certificate to the store.
4096	Adds a certificate revocation list to the store.
4097	Sets the time used for verifying certificates.
4098	Set up the store context for a verification operation.
4099	Convert an OpenSSL native context error into a Python exception.
4100	Verify a certificate in a context and raise X509StoreContextError if validation fails.
4101	Sets the serial number. The serial number is formatted as a hexadecimal number encoded in ASCII.
4102	Get the serial number of the certificate as a hexadecimal number encoded in ASCII.
4103	Sets the reason for revocation, deleting it if None, and adds the reason to a certificate revocation list.
4104	Retrieves the reason for a revocation.
4105	Set the revocation timestamp.
4106	Export as a "cryptography" CRL.
4107	Return the revocations in this certificate revocation list. These revocations will be provided by value, not by reference.
4108	Get the CRL's issuer.
4109	Signs the CRL using the provided issuer certificate, private key, and digest method.
4110	Exports a CRL as a string in a specified format.
4111	Return the type name of the PKCS7 structure.
4112	Replaces or sets the CA certificates within the PKCS12 object.
4113	Dump a PKCS12 object as a string.
4114	Sign the certificate request with this key and digest type.
4115	Verifies a signature on a certificate request.
4116	Generate a base64 encoded representation of this SPKI object.
4117	Get the public key of this certificate.
4118	Sets the public key of the certificate.
4119	Converts an OpenSSL library failure into a Python exception by retrieving error codes and messages from the error queue and raising the specified exception type.
4120	Emit a warning for text input and convert to bytes.
4121	Provide color names based on input
4122	Return extra config options for TrelloIssue class
4123	Returns a list of dicts representing issues from a remote service.
4124	A wrapper around get_comments that builds taskwarrior annotations.
4125	Method to retrieve list of boards. Uses config if provided, otherwise fetches user's boards from Trello API.
4126	Returns a list of filtered Trello lists for a given board based on include/exclude configurations.
4127	Returns an iterator for the cards in a given list, filtered according to configuration values of trello.only_if_assigned and trello.also_unassigned.
4128	Returns an iterator for the comments on a certain card.
4129	Builds the full URL to the API endpoint.
4130	Pagination utility to retrieve multiple pages of data from a URL by following 'next' links.
4131	Utility for parsing the Link header field of a GitHub response.
4132	Grab all issues matching a github query
4133	Grab all the pull requests.
4134	Return all issues from every target using multiple processes for parallel execution.
4135	Return a main config value, or default if it does not exist
4136	Fetch predefined templates for customizing Taskwarrior config values.
4137	Validate generic options for a particular target
4138	Determines whether an issue should be included based on configuration settings for assigned or author.
4139	Make a RST-compatible table
4140	Retrieve password from the given command
4141	Handle both integer and empty values for a configuration option.
4142	Pull down tasks from forges and add them to your taskwarrior tasks. Relies on configuration in bugwarriorrc.
4143	Perform a request to a URL and return JSON response.
4144	Pages through an object collection from the bitbucket API. Returns an iterator for lazy processing of all 'values' across all pages.
4145	Search for and return the local UUID of a given issue using taskwarrior.
4146	Merges array field from remote_issue into local_task, preserving local entries and appending new remote entries if not present.
4147	Returns a list of UDAs defined by given targets. For each target, it builds a dictionary of configuration overrides representing the UDAs defined by the target service.
4148	Parses a JIRA sprint string and returns a dictionary. Format: "key=value,..." inside square brackets.
4149	Gets valid user credentials from storage. If nothing has been stored or the credentials are invalid, completes the OAuth2 flow to obtain new credentials.
4150	Compute ROUGE-N scores efficiently for multiple pairs of hypotheses and references.
4151	Calculate p-values for gene-set enrichment analysis.
4152	Apply Benjamini-Hochberg false discovery rate correction.
4153	Standardizes the mean and variance of the data across specified axis.
4154	Generate a heatmap visualization of a DataFrame.
4155	Remove unnecessary spines and ticks from a matplotlib axes object.
4156	Prepare argparser object with commands for GSEA, prerank, ssgsea, plot, enrichr, and biomart.
4157	Add function 'prerank' argument parsers.
4158	Adds argument parsers for the 'plot' function, specifically for the 'replot' subcommand.
4159	Add argument parsers for Enrichr API usage.
4160	Calculate enrichment score for gene sets based on gene list rankings and correlations.
4161	Build shuffled ranking matrix for gene expression data.
4162	Calculates and returns a ranking of gene expression based on specified methods and criteria.
4163	Compute nominal p-value for effect size from null distribution, using parallel computation.
4164	Compute nominal p-values, normalized enrichment scores, and FDR q-values.
4165	Get available marts and their names.
4166	Returns available datasets from the selected mart.
4167	Returns a DataFrame of available attributes and their descriptions from a selected dataset.
4168	Returns available filters from a dataset
4169	Maps IDs using BioMart and returns a DataFrame with selected attributes.
4170	Run Gene Set Enrichment Analysis.
4171	Run Gene Set Enrichment Analysis with a single sample GSEA tool.
4172	Run Gene Set Enrichment Analysis with pre-ranked correlation defined by user
4173	Reproduce GSEA desktop outputs by generating new figures with selected format.
4174	Set the number of CPU cores to be used, ensuring it's within the range of available processors and user-specified processes. If user-specified processes are greater than available processors, it sets it to the number of available processors minus one. If user-specified processes are less than one, it sets it to one. Converts the final number of processes to an integer.
4175	Filter and create gene set dictionary from GMT file.
4176	Fetch and return active Enrichr library names from the official API.
4177	Download enrichr libraries and save as GMT file.
4178	Generates a heatmap dataset for GSEA by selecting specific classes and concatenating them.
4179	Reformat GSEA results and save to TXT
4180	Pre-process a gene expression DataFrame by reading it, handling duplicated gene names, filling NA values, setting gene names as the index, selecting numeric columns, dropping genes with std == 0, and adding a small constant.
4181	Executes the main procedure for Gene Set Enrichment Analysis (GSEA).
4182	Run GSEA prerank workflow
4183	Single Sample GSEA workflow with permutation procedure
4184	Single Sample GSEA workflow using multiprocessing.
4185	Saves raw and normalized enrichment scores to CSV files in the specified output directory.
4186	Replot function for GSEA results, parsing input files, extracting gene sets, and plotting enrichment terms.
4187	Enrichr API for gene list analysis
4188	Parse gene sets input file type.
4189	Parse gene list based on input type and convert it into a list of genes.
4190	Send gene list to enrichr server and return job ID.
4191	Compare gene list to Enrichr to find recognized genes.
4192	Retrieve background genes from a file or a database.
4193	Run Enrichr for one sample gene list with multiple libraries. Set organism, parse gene lists and sets, connect to Enrichr server, perform analysis, and save results.
4194	Create a cube primitive with specified size, centering, and color.
4195	Creates an icosphere mesh and applies optional color
4196	Create a torus mesh with specified parameters.
4197	Creates a plane with a specified number of vertices on its sides, but no vertices on the interior.
4198	Create a box with user-defined number of segments in each direction.
4199	Reads color_names.txt and finds the red, green, and blue values for a named color. If the color name is not found, it uses white as the default color.
4200	Check if a variable is a list and is the correct length. If not, make it a list of the correct length with all terms identical. If the length is incorrect, print an error message and exit.
4201	Make a variable a list if it is not already. If variable is not a list it will make it a list of the correct length with all terms identical.
4202	Writes filter to FilterScript object or filename
4203	Apply LS3 Subdivision Surface algorithm using Loop's weights.
4204	Merge together all the vertices that are nearer than the specified threshold.
4205	close holes smaller than a given threshold
4206	Split non-manifold vertices until it becomes two-manifold.
4207	Try to snap together adjacent borders that are slightly mismatched
4208	Translates a script by a specified vector.
4209	Rotates a script around specified axis by given angle.
4210	Scale a script by applying a geometric function to the x, y, and z axes.
4211	Applies cylindrical coordinate functions to a script
4212	Deforms mesh around a cylinder with specified radius, pitch, and taper.
4213	Bends mesh around cylinder of radius radius and axis z to a certain angle.
4214	Deforms a mesh along a parametric curve function
4215	Transfer vertex colors to texture colors
4216	Transfer mesh colors to face colors
4217	Create a new mesh that is a resampled version of the current one. The resampling is done by building a uniform volumetric representation where each voxel contains the signed distance from the original surface. The resampled surface is reconstructed using the marching cube algorithm over this volume.
4218	Creates a screened Poisson surface reconstruction algorithm filter script from input parameters.
4219	Turns a model into a surface with Voronoi style holes in it using FilterScript object.
4220	Select all the faces of the current mesh
4221	Selects vertices within a specified quality range and writes a filter script.
4222	Writes a filter script for face selection based on a boolean function using MeshLab
4223	Creates a conditional vertex selection filter XML and writes it to the script
4224	Selects all vertices within a cylindrical radius
4225	Selects all vertices within a spherical radius
4226	Flatten and merge layers into a single new mesh, optionally preserving transformations and deleting layers.
4227	Renames a mesh layer in a script
4228	Change the current layer by specifying the new layer number
4229	Duplicate a layer.
4230	Deletes all layers below the specified one. If no layer is specified, deletes all layers below the current layer.
4231	Handle subprocess program error by prompting user to retry, continue, or exit. Returns True to break loop if user chooses 'c' or 'xd'.
4232	Create new mlx script and process STL files.
4233	Adds a new mesh layer to the end of the stack and optionally switches to it.
4234	Delete mesh layer and adjust current layer if needed.
4235	Save filter script to an mlx file
4236	Run the script with optional input and output parameters.
4237	Creates a 3D shield model with concentric rings and a star pattern, then deforms it into a spherical shape using MeshLabServer.
4238	Compute the Hausdorff Distance between two meshes by sampling one and finding the closest point over the other.
4239	Create a new layer populated with a point sampling of the current mesh using Poisson-disk distribution.
4240	Create a new layer populated with a point sampling of the current mesh, at most one sample for each element of the mesh is created.
4241	Create a new layer with subsampled vertexes based on a clustering grid.
4242	Flattens a 3D model into a 2D plane with optional aspect ratio preservation.
4243	Writes a filter XML for trivial per-triangle parameterization.
4244	Writes a Voronoi Atlas parameterization to a script file
4245	Computes a set of topological measures over a mesh.
4246	Parse the ml_log file generated by measure_topology function and extract mesh topology information.
4247	Parse the ml_log file generated by the hausdorff_distance function.
4248	generates new RGBA color for every vertex using specified functions or a color name
4249	projects each vertex of source_layer over target_layer and color target_layer according to the geodesic distance from these projected points
4250	Color mesh vertices in a repeating sinusoidal rainbow pattern.
4251	Implements atan2(y,x) function for older muparser versions without the built-in atan2 function.
4252	Compute the cross product of two 3x1 vectors.
4253	Multiplies vector by scalar
4254	Add a new Per-Vertex scalar attribute to the current mesh and fill it with the defined function.
4255	Invert faces orientation, flipping the normals of the mesh. If requested, it tries to guess the right orientation. Does not impact the layer stack. Compatible with MeshLab versions 2016.12 and 1.3.4BETA.
4256	Computes normals for point sets in a mesh, useful for datasets without faces.
4257	Writes Taubin smoothing filter XML to a file
4258	A laplacian smooth that is constrained to move vertices only along the view direction.
4259	Sorts separate line segments in obj format into continuous polylines and measures their lengths. not finished; do not use.
4260	Measure mesh topology.
4261	Measures mesh geometry, aabb, and topology.
4262	Measure a dimension of a mesh
4263	Ensure file extensions are in lowercase for consistent comparison.
4264	Patches a Flask app's request class to reject uploads larger than a given size,防止大文件导致磁盘空间耗尽。
4265	Helper function for extracting configuration for a single upload set from an app's settings. Combines custom settings with defaults if provided. Handles missing destination and URL by using fallbacks.
4266	Configure upload settings for an app. Registers uploads module if needed.
4267	Returns the current configuration, preferring an explicitly set `_config` attribute if available.
4268	Returns the URL for a file uploaded to a set, constructing the URL from the base URL or using a default if none is provided.
4269	Return the absolute path of a file uploaded to this set. It doesn't actually check whether said file exists.
4270	Check if a specific file extension is allowed based on the configuration settings.
4271	Resolves file name conflicts by appending a number to the basename until a unique name is found.
4272	Returns the actual version specified in the filename.
4273	Removes duplicate objects.
4274	Returns count difference in two collections of Python objects.
4275	Format object count based on their types and counts, ignoring zero counts.
4276	Checks memory usage when 'line' event occurs.
4277	Returns processed memory usage from events list.
4278	Returns all objects considered profiler overhead, counting their types.
4279	Computes the memory overhead by subtracting the initial RSS size from the current RSS size of the process.
4280	Returns memory stats for a package.
4281	Returns memory stats for a module.
4282	Returns memory stats for a function.
4283	Collects memory stats for specified Python program.
4284	Returns module filenames from package.
4285	Runs function in separate process.
4286	Determines the type of a run object.
4287	Initializes profiler with a module.
4288	Initializes profiler with a package.
4289	Initializes profiler with a function
4290	Replaces sys.argv with proper args to pass to script.
4291	Samples current stack and adds result in self._stats.
4292	Inserts stack into the call tree.
4293	Counts and fills sample counts inside call tree.
4294	Reformats call tree for the UI.
4295	Returns call tree.
4296	Runs statistical profiler on a package.
4297	Runs statistical profiler on a module.
4298	Runs statistical profiler on a function.
4299	Processes collected stats for UI, sorting by percentage.
4300	Runs cProfile on a package.
4301	Runs cProfile on a module.
4302	Runs cProfile on a function and returns profiling statistics.
4303	Initializes DB.
4304	Display all existing guestbook records.
4305	Adds single guestbook record.
4306	Handle profiling requests for 'main' and 'add' URIs.
4307	Starts HTTP server with specified parameters.
4308	Handles index.html requests.
4309	Handle static files requests by reading the file and returning its content and MIME type.
4310	Handles HTTP GET requests, compresses the response, and sends it to the client.
4311	Handles HTTP POST requests.
4312	Send HTTP response code, message and headers.
4313	Checks whether path belongs to standard library or installed modules.
4314	Records line execution time.
4315	Remove lines from the standard library from self.lines.
4316	Fills code heatmap and execution count dictionaries.
4317	Skips lines in src_code specified by skip map.
4318	Calculates and formats a heatmap for a package.
4319	Formats heatmap for UI
4320	Calculates the heatmap for a module by executing the code and generating heatmaps for each file.
4321	Calculates a heatmap for a function.
4322	Run profilers on a given object based on a configuration.
4323	Runs profilers on a function and sends collected data to a remote host.
4324	Return probability estimates for the RDD containing test vector X.
4325	Return log-probability estimates for the RDD containing the test vector X.
4326	Trains Gaussian Naive Bayes on input data and updates model parameters
4327	Create sparse feature matrix and vocabulary from analyzed documents.
4328	Sort features by name, returning a reordered matrix and modifying the vocabulary in place.
4329	Remove too rare or too common features.
4330	Learn the vocabulary dictionary and return term-document matrix.
4331	Transform documents to document-term matrix using the vocabulary.
4332	Convert to equivalent StandardScaler
4333	Wraps a Scikit - learn Linear model's fit method to use with RDD input.
4334	Wraps a Scikit-learn Linear model's predict method to use with RDD input.
4335	Fit linear model.
4336	Fit all the transforms and transform the data, then fit the transformed data using the final estimator.
4337	Fit all the transforms and then fit and transform the data using the final estimator.
4338	Applies transforms to the data, and the score method of the final estimator. Valid only if the final estimator implements score.
4339	Performs a grid search to find the best parameters for a given estimator and dataset.
4340	Compute the score of an estimator on a given test set.
4341	Compute k-means clustering.
4342	Predict the closest cluster each sample in X belongs to.
4343	Use distributed computing to predict class labels for samples in X.
4344	Checks if the blocks in the RDD matches the expected types.
4345	Learn a list of feature name -> indices mappings
4346	Learn empirical variances from X
4347	Fit LSI model to X and perform dimensionality reduction on X
4348	Perform dimensionality reduction on data.
4349	Packs elements from an iterator using a specific collection constructor.
4350	Takes an iterator of tuples and packs them into tuples of arrays or scipy.sparse matrices, optionally with a specified block size.
4351	Block an RDD into numpy arrays, scipy sparse matrices, or pandas data frames.
4352	Transform the data using a function and convert to a specific type if desired.
4353	Returns the shape of the data.
4354	Convert RDD to numpy array by concatenating arrays from each partition.
4355	Execute a transformation on a column or columns. Returns the modified DictRDD.
4356	Returns the mask value if the specified permission is granted for the given position in an os.stat_result object, otherwise returns zero.
4357	Check if a file is only writable by the root user
4358	Check configuration file and raise error if invalid.
4359	Parse and validate the config file. The read data is accessible as a dictionary in this instance
4360	Get the arguments to execute a command as a user
4361	Executes command on thread.
4362	Excecute command on remote machine using SSH
4363	Check self.data. Raise InvalidConfig on error
4364	Get HTTP Headers to send. By default default_headers
4365	Return the data value from self.data. If not present, return default_body. If data is a dictionary, convert it to JSON format.
4366	Append event to Home Assistant URL if available.
4367	Generate IFTTT Webhook URL.
4368	Return source MAC address for Scapy Packet. Include (Amazon Device) if necessary.
4369	Print device on screen if src MAC not repeated.
4370	Print help and scan devices on screen.
4371	Execute this device
4372	Send success or error message to configured confirmation.
4373	Press button. Check DEFAULT_DELAY.
4374	Execute a device as a new Thread.
4375	Start daemon mode and scan devices.
4376	Converts an OFX Transaction to a posting
4377	Returns main ledger file path or raise exception if it cannot be found.
4378	Run the unit test suite with each support library and Python version.
4379	Transform README.md into a usable long description by replacing relative references to svg images with absolute https references.
4380	Return a PrecalculatedTextMeasurer given a JSON stream.
4381	Returns a reasonable default PrecalculatedTextMeasurer.
4382	Creates a github-style badge as an SVG image.
4383	Generate characters supported by the font at the given path.
4384	Generates a subset of characters that can be encoded using specified encodings.
4385	Return a mapping between each given character and its length in pixels using the provided TextMeasurer.
4386	Write the data required by PrecalculatedTextMeasurer to a stream.
4387	Convolve 2D image with 1D Gaussian kernel.
4388	Generate a 1D Gaussian kernel.
4389	Convert PIL image to numpy grayscale array and numpy alpha array.
4390	Compares an image with a list of images using the SSIM metric.
4391	Compute SSIM value between reference and target image
4392	Computes SSIM for two PIL Image objects.
4393	Correctly destroy SyncObj. Stop autoTickThread, close connections, etc.
4394	Switches to a new code version on all cluster nodes after verifying the version.
4395	Dumps different debug info about cluster to dict and return it
4396	Dumps different debug info about cluster to default logger
4397	Finds the node to which a connection belongs.
4398	Bind server if not already bound, read-only node, or recent attempt failed.
4399	Handles new incoming connections, adding them to a set and setting up callbacks for messages and disconnections.
4400	Callback for handling incoming messages, processes encryption, utility messages, and manages connection states.
4401	Callback for the utility messages
4402	Check whether this node should initiate a connection to another node.
4403	Connect to a node if necessary.
4404	Handles encryption and informs the other node of this connection. If encryption is disabled, defers messages to onMessageReceived. If encryption is enabled, processes the sendRandKey message.
4405	Handle an outgoing message by exchanging random keys and triggering callbacks.
4406	Callback for when a connection is terminated or considered dead. Initiates a reconnect if necessary.
4407	Add a node to the network.
4408	Remove a node from the network and disconnect any associated connections
4409	Send a message to a node. Returns False if the connection appears to be dead either before or after actually trying to send the message.
4410	Destroy this transport
4411	Puts an item into the queue. Returns True if placed, False if queue is full.
4412	Put an item into the queue if it is not full.
4413	Extracts the smallest item from the queue. Returns default if the queue is empty.
4414	Attempt to acquire lock with various options.
4415	Check if lock is acquired by ourselves.
4416	Release previously-acquired lock
4417	Wraps checks and returns an error response on failure.
4418	Decorator which ensures that one of the WATCHMAN_TOKENS is provided if set.
4419	Sets the Elasticsearch hosts and connection parameters.
4420	Create Elasticsearch indexes
4421	Updates index mappings
4422	Duplicates org_name, org_email and report_id into JSON root and removes report_metadata key to bring it more inline with Elastic output.
4423	Saves aggregate DMARC reports to Kafka.
4424	Extracts XML from a zip or gzip file at the given path, file-like object, or bytes.
4425	Parses a file containing an aggregate DMARC report and returns the parsed data as an OrderedDict.
4426	Converts one or more parsed forensic reports to flat CSV format, including headers.
4427	Parses a DMARC aggregate or forensic file at the given path, a file-like object, or bytes
4428	Returns a list of an IMAP server's capabilities.
4429	Saves parsed report data as JSON and CSV files in a given directory, and stores samples as EML files.
4430	Creates a zip file of parsed report output.
4431	Emails parsing results as a zip file
4432	Saves aggregate DMARC reports to Splunk.
4433	Saves forensic DMARC reports to Splunk.
4434	Decodes a base64 string, with padding being optional.
4435	Gets the base domain name for the given domain
4436	Resolve an IP address to a hostname using a reverse DNS query
4437	Converts a human-readable timestamp into a Python DateTime object. If to_utc is True, the timestamp is converted to UTC.
4438	Retrieve the ISO code for the country associated with a given IPv4 or IPv6 address using the MaxMind Geolite2 Country database, optionally with parallel processing.
4439	Retrieve IP address information, including reverse DNS and country.
4440	Uses ``msgconvert`` Perl utility to convert Outlook MSG file to RFC 822 format.
4441	Converts a comma-separated string to a list.
4442	Parse a report file and return the results or an error.
4443	Puts a connection into a drain state and closes it after draining publishers.
4444	Publish a message on a specified subject.
4445	Publish a message with a reply subscription.
4446	Sends PUB command to the NATS server.
4447	Sets a subscription using a task per message.
4448	Remove a subscription from the client, optionally after receiving more than max_msgs.
4449	Sends a ping to the server expecting a pong back, ensuring data has reached the server and measuring roundtrip time. Raises ErrTimeout if no response within the allowed timeout.
4450	Looks up in the server pool for an available server and attempts to connect.
4451	Process raw error message and close connection with server.
4452	Process errors while reading or parsing protocol. If allow_reconnect is enabled, switch to a different server. Otherwise, disconnect.
4453	This method generates a JSON string with connection parameters to be sent to a server, including options for verbose mode, pedantic mode, language, version, protocol, authentication, user credentials, and other custom options.
4454	Process PONG sent by server.
4455	Process MSG sent by server.
4456	Process INFO lines to update client with server discovery information.
4457	Process INFO from the server, connect with authentication, set up reading and ping interval tasks.
4458	Coroutine which continuously tries to consume pending commands and then flushes them to the socket.
4459	Coroutine which gathers bytes sent by the server and feeds them to the protocol parser. In case of error while reading, it will stop running and its task has to be rescheduled.
4460	Compute and save coactivation map given input image as seed.
4461	Decodes a set of images and returns an n_features x n_files numpy array, where each feature is a row and each image is a column.
4462	Load feature data from a 2D ndarray on disk.
4463	Load feature image data from image files.
4464	Compute the Pearson correlation between input images and feature images across voxels.
4465	Decoding using the dot product.
4466	Implements various kinds of feature selection.
4467	Retrieve studies by regions from a Neurosynth dataset based on mask thresholds, remove overlap, and filter studies and features.
4468	Returns the order of requested features in the dataset.
4469	Classify regions in a dataset using specified masks and a classification method.
4470	Wrapper for scikit-learn classification functions
4471	Fits X to outcomes y, using clf
4472	Sets the class_weight of the classifier to match y
4473	Fits X to outcomes y using cross-validation and returns the mean cross-validated score.
4474	Given a dataset, fits either features or voxels to y
4475	Aggregate values within regions defined in a Nifti image.
4476	Returns mappable data for a random subset of voxels from a dataset.
4477	Returns top forty words from each topic in trained topic model.
4478	Correlates row vector x with each row vector in 2D array y using Pearson correlation.
4479	Determine FDR threshold given a p value array and desired false discovery rate q.
4480	Loads activation data from a text file, processes columns by converting to lowercase, checks for mandatory columns, transforms spaces if necessary, converts XYZ coordinates to IJK, and returns the processed DataFrame.
4481	Create and store a new ImageTable instance based on the current Dataset.
4482	Get IDs or data for studies that meet specific criteria. If multiple criteria are passed, the set intersection is returned.
4483	Adds features to the FeatureTable.
4484	Returns names of features. If None, returns all features. Otherwise, returns order of specified features.
4485	Returns a dictionary with feature names and counts of studies tagged with each feature above a specified threshold.
4486	Load a pickled Dataset instance from file.
4487	Pickles the Dataset instance to a file
4488	Slices and returns a subset of image data based on specified study ids and voxel indices, with option to return as dense or sparse array.
4489	Slice and return a subset of feature data
4490	Given a list of features, returns features in order that they appear in the database.
4491	Returns a list of studies meeting feature-based criteria.
4492	Returns all features that match any of the elements in the input list.
4493	Use a PEG to parse expression and return study IDs.
4494	Converts FeatureTable to a SciPy CSR matrix
4495	Deprecation warning decorator. Takes optional deprecation message, otherwise will use a generic warning.
4496	Convert coordinates from one space to another using provided transformation matrix.
4497	Convert an N x 3 array of XYZ coordinates to matrix indices.
4498	Applies a named transformation to a set of foci. Returns foci untransformed if the named transformation doesn't exist.
4499	Vectorize an image and mask out all invalid voxels.
4500	Set the current mask by taking the conjunction of all specified layers.
4501	Load multiple images from file into an ndarray.
4502	Save a vectorized image to file.
4503	Set neurosynth's logging level based on the provided argument or environment variable.
4504	Expands the given address into one or more normalized strings using various options for language, component expansions, and transliteration.
4505	Normalizes a string, tokenizes it, and normalizes each token with string and token-level options.
4506	Parse address into components.
4507	Hash the given address into normalized strings for grouping similar addresses, suitable for record linkage or document near-duplicate detection.
4508	Converts a Python dict to a namedtuple, saving memory.
4509	Fetches and returns stock ticker price data in specified format and frequency.
4510	Retrieve historical prices for one or more stock tickers and return them as a pandas DataFrame.
4511	Fetches available news files or downloads a specific news file and returns it in the requested format (JSON or object).
4512	Make HTTP request and return response object
4513	Get the application bearer token from client_id and client_secret.
4514	Make a request to the Spotify API with current bearer credentials.
4515	Get an album's tracks by ID.
4516	Get a Spotify artist by their ID.
4517	Get an artists tracks by their ID.
4518	Get an artists top tracks per country with their ID.
4519	Get related artists for an artist by their ID.
4520	Get a list of Spotify artists by their IDs.
4521	Get a single category used to tag items in Spotify.
4522	Get a list of Spotify playlists tagged with a particular category.
4523	Retrieves a list of categories used to tag items in Spotify, optional parameters include limit, offset, country, and locale.
4524	Get a list of Spotify featured playlists.
4525	Get a list of new album releases featured in Spotify.
4526	Get Recommendations Based on Seeds.
4527	Check if the current user is following specified artists or users.
4528	Get the albums of a Spotify artist.
4529	Load all of the artist's albums, handling pagination.
4530	This interface is used to get the total number of albums for an artist.
4531	Get Spotify catalog information about artists similar to a given artist.
4532	Get the user's currently playing track.
4533	Get information about the user's current playback.
4534	Get information about the user's available devices.
4535	Get tracks from the current user's recently played tracks.
4536	Replace all tracks in a playlist, overwriting its existing tracks.
4537	This function asynchronously reorders tracks within a playlist based on specified parameters and returns the updated snapshot ID.
4538	Create a playlist for a Spotify user. Parameters include name, public status, collaborative status, and description. Returns the created playlist.
4539	Get the user's playlists from Spotify.
4540	Get albums tracks from Spotify.
4541	Loads all tracks for an album.
4542	Generates an OAuth2 URL for user authentication.
4543	Retrive an album with a spotify ID.
4544	Retrieve an artist with a Spotify ID.
4545	Retrieve an track with a spotify ID. Returns the track from the ID.
4546	Retrive an user with a spotify ID. Returns the user from the ID.
4547	Retrieve multiple albums with a list of Spotify IDs.
4548	Retrieve multiple artists with a list of Spotify IDs.
4549	Access the Spotify search functionality with optional parameters for search types, limit, offset, and market. Returns a dictionary of search results for tracks, playlists, artists, and albums.
4550	Get a Spotify ID from a URI or open.spotify URL.
4551	Assert an object has an attribute when run.
4552	Construct a OAuth2 object from a `spotify.Client`.
4553	Construct a OAuth2 URL instead of an OAuth2 object.
4554	Return URL parameters based on the object's attributes
4555	URL parameters used.
4556	Get the track object for each link in the partial tracks data.
4557	Get all playlist tracks from the playlist.
4558	Resume playback on the user's account.
4559	Transfer playback to a new device and determine if it should start playing.
4560	Get the full object from spotify with a `href` attribute
4561	Execute the logic behind the meaning of ExpirationDate + return the matched status.
4562	Convert a given month into our unified format.
4563	Read the code and update all links.
4564	Check if the current version is greater than the older one.
4565	Check if the current branch is `dev`.
4566	Check if we have to put the previous version into the deprecated list.
4567	Backup the current execution state.
4568	Restore data from the given path.
4569	Check if a given line should be ignored based on a set of regex patterns.
4570	Handles the data from the options and returns the list of domains to return globally.
4571	Extract the base of a given element, handling lists and URLs.
4572	Recursively formats the extracted adblock line by splitting on delimiters (",", "^", "#", "!", "|") and extracts valid domains or IP addresses.
4573	Get the HTTP code status.
4574	Return the HTTP code status.
4575	Check the syntax of the given domain.
4576	Checks if the given domain is a subdomain. Returns the subdomain state as a boolean. Returns None if the domain is empty or not a string.
4577	Check the syntax of the given IPv4. Return the syntax validity as bool or None.
4578	Check if the given IP is an IP range.
4579	Check the syntax of the given URL.
4580	Load the configuration.
4581	Prints a friendly message with encouragement to share experience and provide feedback on PyFunceble.
4582	Check if the given information is a URL. If it is, download and update the file location to test. Returns the state of the check.
4583	Manage the loading of the url system.
4584	Decide if we print or not the header based on configuration settings. If conditions are met, print a header (either "Less" or "Generic") and update the configuration to indicate the header has been printed.
4585	Manages file reading, updates database, handles autocontinue and autosave, processes mining, generates files, and resets counters.
4586	Manage the case that we want to test only a domain.
4587	Manage the case that we want to test only a given url.
4588	Print the colored logo based on global results.
4589	Formats the extracted domain before passing it to the system. Removes noise and extracts the domain or IP.
4590	Extract all non-commented lines from the file being tested.
4591	Manage the case that need to test each domain of a given file path.
4592	Manage the case that we have to test a file. getFileUrl Loop through the file URLs to be tested. Apply filters and sorting options. Return the list of file URLs to be tested.
4593	Switch PyFunceble.CONFIGURATION variables to their opposite
4594	Get the status while testing for an IP or domain.
4595	Handle the backend of the given status by generating a status file based on whether the status is valid or invalid.
4596	Get the structure to work with by checking files and fetching from remote if necessary, then update with configuration.
4597	Creates the given directory if it does not exist, handling nested directories recursively.
4598	Deletes directories not registered in a structure.
4599	Set the paths to the configuration files.
4600	Loads the configuration file into the system, updates it with the latest iana, public suffix, and directory structure files. If not found, copies a default configuration file and loads it.
4601	Download and install the production configuration in the current directory.
4602	Check if `iana-domains-db.json` exists; if not, download it.
4603	Download public-suffix.json if not present.
4604	Download the latest version of `dir_structure_production.json`.
4605	Merge the older configuration into the new one and remove specified keys.
4606	Execute logic behind the merging, handling missing configuration keys interactively or automatically.
4607	Convert the versions to a shorter one, returning digits and/or non-digits parts.
4608	Compare the given versions. Returns True if local < upstream, None if local == upstream, and False if local > upstream.
4609	Check if the current version is a cloned version of PyFunceble.
4610	Handles and initializes missing configuration index values
4611	Return the analytic directory to write depending on the matched status.
4612	Generate unified file based on configuration and testing parameters.
4613	Generate a file according to the domain status.
4614	Check if we are allowed to produce a file based from the given information. Returns True if we do not produce file, False otherwise.
4615	Extracts the extension from a given line in the official public suffix repository and updates the database accordingly.
4616	Load the public suffix database into the system.
4617	Remove all special characters and return the formatted string.
4618	Sort a domain hierarchically
4619	Initiate the IANA database if it is not already set.
4620	Return the whois server for the given extension.
4621	Extracts extensions from a block, retrieves their referer, and yields them.
4622	Update the content of the `iana-domains-db` file.
4623	Searches for domain or URL related to the original URL or domain. Returns the mined domains or URL as a dictionary.
4624	Retrieve the mining informations.
4625	Backup the mined informations if mining is activated.
4626	Add the currently mined information to the mined "database".
4627	Remove the currently tested element from the mining data.
4628	Provide the list of mined domains or URLs for a specific file if mining is enabled.
4629	Process the logic and structuration of the mining database.
4630	Get and return the content of the given log file.
4631	Writes the content into the given file.
4632	Logs the WHOIS record if needed.
4633	Logs the extracted expiration date.
4634	Logs the case that the referer was not found.
4635	Print informations about PyFunceble and the date of generation of a file into a given path, if doesn't exist.
4636	Construct table header according to template Return list of header data
4637	Generate and print or write the header template based on the specified criteria.
4638	Construct the table of data according to given size.
4639	Extract the sizes of columns from a header dictionary and return them as a list.
4640	Returns a colored string based on the data and template specified.
4641	Manage the JSON template for output.
4642	Manage and input data to the table.
4643	Saves the current time to a file, appending to or updating data as needed based on the action ('start' or 'stop'). Calculates and prints the total execution time if at the end of the test.
4644	Calculate the difference between start and end time.
4645	Format the calculated time into a human readable format.
4646	Returns a list of files to delete.
4647	Set the paths of databases files to delete.
4648	Delete almost all discovered files.
4649	Generate the hash of a file using the specified algorithm and return the hexdigest.
4650	Get hash of the given data using the specified algorithm.
4651	Return the hash of the given file.
4652	Execute the given command and return the output.
4653	Remove a given key from a given dictionary. Return the dict without the given key(s).
4654	Rename keys in a dictionary, either strictly or by partial match.
4655	Merge the content of to_merge into the given main dictionary.
4656	Save a dictionary to a JSON file
4657	Save a dictionary into a YAML file.
4658	Fixes the path of the given path.
4659	Write or append data into the given file path.
4660	Read a given file path and return its content.
4661	Sorts a list and removes duplicates.
4662	Merge a list into the main list with or without strict index respect.
4663	Return a list of strings that don't match the given regex.
4664	Used to get exploitable result of re.search
4665	Replace a matched string with another using regex and return the modified data.
4666	Count the number of domains for each status.
4667	Calculate the percentage of each status.
4668	Prints the percentages for each status on screen and in a file if configured to do so.
4669	Check if the given URL is valid.
4670	Checks if the given domain is valid, considering optional subdomain validation.
4671	Check if the given domain is a subdomain
4672	Execute the logic behind the Syntax handling. Returns the syntax status.
4673	Rewrites the old database format to match the new format and merges it into the current database.
4674	Retrieves and merges the current content of the inactive-db.json file.
4675	Saves the current database state to the inactive-db.json file if the inactive_database configuration is enabled.
4676	Get the timestamp to append with the currently tested element.
4677	Get the content of the database.
4678	Check if the currently tested element is in the database.
4679	Retrieve the data from the database.
4680	Backup the database into its file.
4681	Check if the element is in the database. Returns True if it is, False otherwise.
4682	Check if the current time is older than the one in the database.
4683	Get the expiration date from the database.
4684	Add the currently tested element into the database.
4685	Sets permissions in Travis CI build directory before committing.
4686	Handles autosave under Travis CI logic.
4687	Retrieve and return the DNS lookup information for a given domain or IP.
4688	Implementation of UNIX whois.
4689	Execute the logic behind the URL handling.
4690	Return the referer aka the WHOIS server of the current domain extension.
4691	Returns the real object behind the proxy at a time for performance reasons or because you want to pass the object into a different context.
4692	Yields paths to standard modules.
4693	Yield standard module names.
4694	Yield line numbers of unused imports.
4695	Yield line number and module name of unused imports.
4696	Yield line number of star import usage.
4697	Yield line number, undefined name, and its possible origin module.
4698	Yield line numbers of unused variables.
4699	Yield line numbers of duplicate keys.
4700	Return dict mapping the key to list of messages.
4701	Return messages from pyflakes.
4702	Extract package name from import statement.
4703	Return True if import statement spans multiple lines.
4704	Return True if this is part of a multiline statement.
4705	Remove unused imports from `from something import a, b, c`.
4706	Return line with imports on separate lines.
4707	Filter code with unused imports removed and other optional filters
4708	Return dictionary that maps line number to message.
4709	Expand star import in line with undefined names.
4710	Return '' if first occurrence of the key otherwise return `line`
4711	Return True if line is a dict entry using specified key. Return False for multiline cases where line should not be removed.
4712	Return True if value is a literal or a name.
4713	Yield line numbers of unneeded "pass" statements.
4714	Removes useless "pass" lines from code
4715	Return leading whitespace.
4716	Get line ending based on non-whitespace characters.
4717	Return code with all filtering run on it.
4718	Return a set of strings split from a comma-separated string.
4719	Indicate whether file is a Python file.
4720	Return True if file matches exclude pattern.
4721	Yield filenames based on recursive search and exclude criteria.
4722	Parse command-line arguments for code formatting options; check for errors and apply those options to specified files.
4723	Reads and decodes data for an ObtainLease response payload.
4724	Write data encoding the ObtainLease response payload to a stream.
4725	Writes the Cancel request payload data to a stream.
4726	Read data encoding the Cancel response payload and decode it into its constituent parts.
4727	Create a Name object, populated with the given value and type.
4728	Read data encoding the Digest object and decode it into its constituent parts.
4729	Write the Digest object to a stream.
4730	Construct a Digest object from provided digest values.
4731	Read and decode data encoding the ApplicationSpecificInformation object.
4732	Writes the data encoding the ApplicationSpecificInformation object to a stream.
4733	Construct an ApplicationSpecificInformation object from provided data and namespace values.
4734	Reads and decodes the DerivationParameters struct from an input stream.
4735	Writes the data encoding the DerivationParameters struct to a stream.
4736	Reads data encoding the Get request payload and decodes it into its constituent parts.
4737	Write Get request payload data to a stream
4738	Reads the data encoding the Get response payload and decodes it into its constituent parts.
4739	Write the data encoding the Get response payload to a stream.
4740	Reads and decodes the data encoding the SignatureVerify request payload.
4741	Write the data encoding the SignatureVerify request payload to a stream.
4742	Reads and decodes a SignatureVerify response payload from an input stream, handling different fields and raising errors if required fields are missing.
4743	Process a KMIP request message, handling headers, errors, authentication, and batch items to generate a response.
4744	Build a simple ResponseMessage with a single error result.
4745	Extracts attribute value data from a kmip.core TemplateAttribute object into a usable dictionary format.
4746	Given a kmip.pie object and a list of attribute names, retrieves all existing attribute values from the object.
4747	Get the attribute value from the kmip.pie managed object.
4748	Given a kmip.pie object and a dictionary of attributes, attempts to set attribute values on the object.
4749	Set the attribute value on the kmip.pie managed object.
4750	Determine if object access is allowed for the provided policy and session settings.
4751	Writes the data encoding the Decrypt request payload to a stream.
4752	Create a secret object of the specified type with the given value.
4753	Set a specific setting value. This will overwrite the current setting value for the specified setting. Raises ConfigurationError if the setting is not supported or if the setting value is invalid.
4754	Load configuration settings from the file pointed to by path.
4755	Return the integer value of the usage mask bitmask.
4756	Converts an integer value into a list of CryptographicUsageMask enums based on bitmask.
4757	Read the encoding of the LongInteger from the input stream.
4758	Write the encoding of the LongInteger to the output stream.
4759	Verify that the value of the LongInteger is valid.
4760	Read the encoding of the BigInteger from the input stream.
4761	Write the encoding of the BigInteger to the output stream.
4762	Verify that the value of the BigInteger is valid. Raises TypeError if the value is not of type int or long.
4763	Verify that the value of the Enumeration is valid.
4764	Read the value of the Boolean object from the input stream.
4765	Writes a Boolean object's value to an output stream.
4766	Writes the Boolean object's encoding to the output stream.
4767	Verify that the value of the Boolean object is valid. Raises an exception if not a Boolean.
4768	Read the encoding of the Interval from the input stream.
4769	Verify that the value of the Interval is valid.
4770	Retrieve all relevant key wrapping data fields and return them as a dictionary.
4771	Set the key wrapping data attributes using a dictionary.
4772	Verifies the contents of the PublicKey object are valid and raises a TypeError if any PublicKey attribute types are invalid.
4773	Verify that the contents of the SecretData object are valid. Raises: TypeError: if the types of any SecretData attributes are invalid.
4774	Verify the types of attributes in the OpaqueObject.
4775	Converts an attribute name string into the corresponding attribute tag.
4776	Converts an attribute tag into the corresponding attribute name string. Raises an error if the attribute tag is not a Tags enumeration or if it is unrecognized.
4777	A utility function that computes a bit mask from a collection of enumeration values.
4778	Return list of enumeration values from a bit mask for a specific mask enumeration class.
4779	Check if potential mask is a valid bit mask of enumeration values.
4780	Read and decode CreateKeyPair request payload from input buffer based on KMIP version.
4781	Write the data encoding the CreateKeyPair request payload to a buffer.
4782	Reads and decodes a CreateKeyPair response payload, extracting private and public key unique identifiers and template attributes if applicable.
4783	Writes the CreateKeyPair response payload to a buffer.
4784	Reads and decodes a GetAttributeList request payload from an input buffer, handling optional KMIP version and unique identifier.
4785	Encode the GetAttributeList request payload to a stream.
4786	Read data encoding the GetAttributeList response payload and decode it into its constituent parts.
4787	Write the data encoding the GetAttributeList response payload to a stream.
4788	Scan the provided directory for all JSON policy files and return them sorted.
4789	Scan the policy directory for policy data and update the policy files accordingly.
4790	Start monitoring operation policy files.
4791	Extract an X.509 certificate from a socket connection.
4792	Extracts and returns the extendedKeyUsage extension from an X.509 certificate if available.
4793	Extract all common names from an X.509 certificate.
4794	Given an X.509 certificate, extract and return the client identity. If multiple client identities are found, raise a PermissionDenied exception. If no client identity is found, raise a PermissionDenied exception.
4795	Read the data encoding a Create request payload and decode it into its constituent parts.
4796	Encode the Create request payload and write it to a buffer.
4797	Reads and decodes KMIP Create response payload from an input buffer.
4798	Encode the Create response payload data to a buffer.
4799	Converts a Pie object into a core secret object and vice versa.
4800	Reads encoded data from an input stream and decodes it into its constituent parts for the Encrypt response payload, handling specific tags and raising errors if required attributes are missing.
4801	Read the data encoding the DeriveKey request payload and decode it into its constituent parts.
4802	Encode and write DeriveKey request payload data to a stream, validating various fields and handling_kmip_version.
4803	Check if an attribute is supported by the current KMIP version.
4804	Check if the attribute is deprecated by the current KMIP version
4805	Check if the attribute is supported by the given object type.
4806	Check if the attribute is allowed to have multiple instances.
4807	Returns a value for a parameter, using direct_value, config file, or default_value.
4808	Reads and decodes the Check response payload from an input stream.
4809	Write the data encoding the Check response payload to a stream.
4810	Read data stream and decode AttributeReference structure.
4811	Encode the AttributeReference structure to the data stream.
4812	Read data stream and decode Attributes structure into its parts.
4813	Write the Attributes structure encoding to the data stream.
4814	Read data encoding the Nonce struct and decode into its constituent parts.
4815	Encodes Nonce struct data to a stream.
4816	Reads the data encoding the UsernamePasswordCredential struct and decodes it into its constituent parts.
4817	Write the data encoding the UsernamePasswordCredential struct to a stream.
4818	Read data encoding the DeviceCredential struct and decode it into its constituent parts.
4819	Writes DeviceCredential data to a stream
4820	Read data encoding the Credential struct and decode it into its constituent parts.
4821	Write the data encoding the Credential struct to a stream.
4822	Reads and decodes data encoding the MACSignatureKeyInformation struct from an input stream using specified KMIP version.
4823	Write data encoding the MACSignatureKeyInformation struct to a stream.
4824	Reads encoded KeyWrappingData struct from input stream and decodes it into its constituents.
4825	Writes the data encoding the KeyWrappingData struct to a stream.
4826	Read and decode a KeyWrappingSpecification struct from an input stream.
4827	Write the data encoding the KeyWrappingSpecification struct to a stream.
4828	Read the data encoding the ExtensionInformation object and decode it into its constituent parts.
4829	Write the data encoding the ExtensionInformation object to a stream.
4830	Construct an ExtensionInformation object from provided extension values.
4831	Read the data encoding the RevocationReason object and decode it into its constituent parts.
4832	Write the data encoding the RevocationReason object to a stream.
4833	Validate the RevocationReason object by checking if the revocation_code is an instance of RevocationReasonCode and if the revocation_message is an instance of TextString.
4834	Read the data encoding the ObjectDefaults structure and decode it into its constituent parts.
4835	Write the ObjectDefaults structure encoding to the data stream.
4836	Read and decode the DefaultsInformation structure from an input buffer.
4837	Encode the DefaultsInformation structure to a data stream.
4838	Reads and decodes data encoding the RNGParameters structure from an input buffer.
4839	Encode the RNGParameters structure to a data stream.
4840	Reads encoded ProfileInformation structure data from input_buffer and decodes it into constituent parts. Raises exceptions for unsupported KMIP versions or missing profile names.
4841	Write the ProfileInformation structure encoding to the data stream
4842	Encode ValidationInformation structure to data stream, supporting KMIP version 1.3 or higher. Raises exceptions for missing fields or unsupported versions.
4843	Reads and decodes the CapabilityInformation structure from a data stream, handling different KMIP versions and capabilities.
4844	Encode the CapabilityInformation structure into the data stream for a given KMIP version.
4845	Stop the server,halt client connections and clean up connection threads.
4846	Listen for client connections, create new KmipSessions, handle signals to shutdown service.
4847	Read and decode the Locate request payload from a data buffer according to the specified KMIP version.
4848	Encode the Locate request payload to a buffer.
4849	Reads and decodes the Locate response payload data from an input buffer.
4850	Encodes and writes the data of a Locate response payload to a buffer.
4851	Create a symmetric key for a given algorithm and length, generating, validating, and returning key data. Raises exceptions for unsupported algorithms or invalid lengths.
4852	Create an asymmetric key pair using a specified algorithm and length, returning public and private key dictionaries. Raises exceptions for unsupported algorithms or incompatible lengths.
4853	Generate message authentication code using specified algorithm and key.
4854	Encrypts data using symmetric or asymmetric encryption based on the algorithm specified. Supports various encryption modes, padding, and hashing algorithms. Returns a dictionary with the encrypted data and the used IV/nonce if applicable. Raises errors for unsupported algorithms or invalid parameters.
4855	Encrypt data using symmetric encryption.
4856	Encrypt data using asymmetric encryption.
4857	Decrypt data using asymmetric decryption
4858	Creates an RSA key pair and returns the public and private key data as dictionaries.
4859	Derive key data using a variety of key derivation functions.
4860	Instantiates an RSA key from bytes.
4861	Verifies a message signature using specified algorithms and padding methods.
4862	Read the data encoding the Sign response payload and decode it.
4863	Write the data encoding the Sign response to a stream.
4864	Read encoded GetUsageAllocation request payload from data stream and decode into its parts.
4865	Convert a ProtocolVersion struct to its KMIPVersion enumeration equivalent.
4866	Read and decode the ProtocolVersion struct from an input stream.
4867	Write the data encoding the ProtocolVersion struct to a stream.
4868	Read and decode Authentication struct from input stream into constituent parts.
4869	Write the data encoding the Authentication struct to a stream.
4870	Read the data encoding the Poll request payload and decode it into its constituent parts.
4871	Reads encoded Certificate object data, decodes it, and processes it.
4872	Write the data encoding the Certificate object to a stream.
4873	Authenticate with SLUGS service using provided credentials.
4874	Read the data encoding the Archive response payload and decode it into its constituent parts.
4875	Write the data encoding the Archive response payload to a stream.
4876	Manage a client connection with a message handling loop.
4877	Reads a data stream containing encoded Rekey response payload and decodes it into constituent parts. Raises a ValueError if the unique identifier attribute is missing from the payload.
4878	Check if a profile is supported by the client.
4879	Derive a new key or secret data from an existing managed object.
4880	Send a GetAttributes request to the server.
4881	Send a GetAttributeList request to the server and return the results.
4882	Send a Query request to the server.
4883	Sign specified data using a specified signing key.
4884	Opens the client connection, raising an error if already open or if an exception occurs.
4885	Closes the client connection.
4886	Create a symmetric key on a KMIP appliance.
4887	Create an asymmetric key pair on a KMIP appliance.
4888	Register a managed object with a KMIP appliance
4889	Rekey an existing key with optional uid and offset, and set various attributes on the new key. Raises exceptions for invalid input or operation failure.
4890	Derive a new key or secret data from existing managed objects.
4891	Search for managed objects based on specified attributes, handling the results and raising exceptions on validation errors or operation failures.
4892	Check the constraints for a managed object and validate its parameters.
4893	Get a managed object from a KMIP appliance using its unique ID and optional key wrapping specification. Handle the operation result, raise exceptions for failure, and return the managed object on success.
4894	Get the attributes associated with a managed object.
4895	Activate a managed object stored by a KMIP appliance. Raises exceptions if the client connection is unusable, the operation result is a failure, or the input argument is invalid.
4896	Revoke a managed object stored by a KMIP appliance.
4897	Get the message authentication code for data.
4898	Create a CryptographicParameters object from a dictionary.
4899	Build an EncryptionKeyInformation struct from a dictionary.
4900	Build MACSignatureKeyInformation struct from a dictionary.
4901	Build a KeyWrappingSpecification struct from a dictionary.
4902	Build a list of common attributes shared across symmetric and asymmetric objects
4903	Build and return a list containing a name attribute.
4904	Read a data stream and decode it into a QueryRequestPayload object.
4905	Write data encoding the QueryRequestPayload object to a stream.
4906	Write data encoding the QueryResponsePayload object to a stream
4907	Reads GetAttributes response payload and decodes it into its constituents.
4908	Write data encoding the GetAttributes response payload to a stream.
4909	Find a single entry point. Returns an EntryPoint object, or raises NoSuchEntryPoint if no match is found.
4910	Find and return a dictionary of unique named entry points.
4911	Find all entry points in a group. Returns a list of EntryPoint objects.
4912	Load the object to which this entry point refers.
4913	Parse an entry point from the syntax in entry_points.txt.
4914	Run livereload server.
4915	Generate project files from template and rewrite as needed.
4916	Generate controller, including controller file, template, and css/js directories.
4917	Generate action based on controller and action name, optionally using a template.
4918	Generate form.
4919	Generate model by replacing template placeholders with provided model name and saving to file.
4920	Generate a macro with specified arguments and create HTML, CSS, and JS files for it.
4921	Create directory and handle existing directory gracefully.
4922	Replace vars in file and copy to new location.
4923	Format time difference between a given date and now.
4924	Check url schema and add http if missing.
4925	Encode something with SECRET_KEY.
4926	Decode something with SECRET_KEY
4927	JSONify the output of a function.
4928	Return absolute URL for given endpoint by combining site domain and relative URL generated from endpoint and values.
4929	Load config based on environment mode.
4930	Sign in user with optional permanent session.
4931	Get current user from session, query database, and return user or None
4932	Create a Flask app.
4933	Register jinja filters, variables, and functions for an app.
4934	Registers routes by importing controllers and registering blueprints.
4935	Registers HTTP error pages for 403, 404, and 500 status codes.
4936	Register hooks to add user information and render time to response.
4937	Serialize the dataframe with different delimiters.
4938	Returns csv data as a pandas Dataframe object
4939	Serialize a dataframe using a specified file-like object and data type ID.
4940	Deserialize a dataframe from a file-like object using a specified serialization format.
4941	Serialize the specified DataFrame and replace the existing dataset.
4942	Upload already serialized raw data and replace the existing dataset.
4943	Generate full URL to dataset contents.
4944	Serialize the specified DataFrame and upload it as a new dataset.
4945	Upload already serialized raw data as a new dataset.
4946	Open and return a stream for the dataset contents.
4947	Read and return the dataset contents as binary.
4948	Read and return the dataset contents as text.
4949	Read and return the dataset contents as a pandas DataFrame.
4950	### Example 4:
Get an intermediate dataset.
Return a Dataset object.
4951	Runs HTTP GET request to retrieve the list of experiments.
4952	Runs HTTP GET request to retrieve the list of datasets.
4953	Runs HTTP GET request to retrieve a single dataset.
4954	Publishes a callable function or decorates a function to be published. Returns a callable object that can be invoked to access the published service or iterate to get API details.
4955	Marks a function as having been published and causes all invocations to go to the remote operationalized service.
4956	Decorator to specify type annotations for function arguments.
4957	Function decorator to specify the return type for a published service.
4958	Attaches a file to the payload to be uploaded.
4959	Walks the byte code to find global variables
4960	Create a copy of this pen.
4961	Return RGBA values of color c, either an X11 color or a brewer color set and index.
4962	Draws the shape using the given cairo context, optionally highlighting and constraining to a bounding box.
4963	Find extremas of a function of real domain defined by evaluating a cubic bernstein polynomial of given bernstein coefficients.
4964	Evaluate polynomial of given bernstein coefficients using de Casteljau's algorithm.
4965	Build choices list runtime using 'sitetree_tree' tag
4966	Create a function to replace optparse with make_option in Django management commands.
4967	Register a hook callable to process tree items before passing to templates. Hook function should handle ``tree_items`` and ``tree_sender`` key params and return processed items list.
4968	Returns a structure describing a dynamic sitetree.utils
The structure can be built from various sources.
4969	Initializes local cache from Django cache.
Drops cache flag set by .reset() method and empties cache if flag is set.
4970	Empties cached sitetree data and optionally reinitializes.
4971	Returns cache entry parameter value by its name.
4972	Update cache entry parameter with new data.
4973	Replace entire cache entry parameter data by its name with new data.
4974	Initializes sitetree to handle new request
4975	Resolves internationalized tree alias. Verifies whether a separate sitetree is available for the current language and returns the appropriate alias.
4976	Return boolean whether current application is Admin contrib.
4977	Calculates the depth of an item in a tree.
4978	Resolve the current tree item of a given 'tree_alias' tree that matches the current request path against the URL of the tree item.
4979	Resolve item's URL.
4980	Initializes sitetree in memory. Returns tuple with resolved tree alias and items on success. On fail returns (None, None).
4981	Retrieve an attribute of the current sitetree item for the current page.
4982	Returns ancestor of level `depth` recursively
4983	Builds and returns menu structure for 'sitetree_menu' tag.
4984	Check whether a current user has an access to a certain item.
4985	Builds and returns breadcrumb trail structure for 'sitetree_breadcrumbs' tag.
4986	Builds and returns tree structure for 'sitetree_tree' tag.
4987	Builds and returns site tree item children structure for 'sitetree_children' tag.
4988	Returns item's children.
4989	Updates the 'has_children' attribute for tree items based on their children's existence, filtered by navigation type, and applies hooks.
4990	Filter sitetree item's children if hidden and by navigation type.
4991	Climbs up the site tree to resolve root item for chosen one.
4992	Climbs up the site tree to mark items of the current branch.
4993	Resolves variable in a given context.
4994	Parses sitetree tag parameters. Renders tree for a specified site tree using an optional template.
4995	Parse sitetree_children tag parameters for rendering child items of a specific site tree using a template for menu navigation.
4996	Parses sitetree_breadcrumbs tag parameters and renders breadcrumb path for a specified site tree.
4997	Parses sitetree_menu tag parameters. Used to render specific branches from a site tree as a menu, with optional inclusion of a custom template.
4998	Render helper for template nodes.
4999	Node constructor to be used in tags.
5000	Returns a URL for a given model info and page type, with an optional namespace prefix.
5001	Force re-registration of tree admin class by first unregistering it if already registered.
5002	Fixes Admin contrib redirects compatibility problems introduced in Django 1.4 by url handling changes.
5003	Perform generic redirect based on request data
5004	Redirects to the appropriate item's 'continue' page after item add. Adjusts redirection process for tree items.
5005	Redirects to the appropriate item's 'add' page on item change.
5006	Returns modified form for TreeItem model. 'Parent' field choices are built by sitetree itself.
5007	Fetches tree for current or given TreeItem.
5008	Moves item up or down by swapping 'sort_order' field values of neighboring items.
5009	Saves TreeItem model under certain Tree.Handles item's parent assignment exception
5010	Manages URLs for both TreeAdmin and TreeItemAdmin.
5011	Dumps sitetrees with items using django-smuggler.
5012	Dynamically creates and returns a sitetree.
5013	Dynamically creates and returns a sitetree item object.
5014	Imports sitetree module from a given app.
5015	Returns a certain sitetree model as defined in the project settings.
5016	Create a configuration object from a mapping or keyword arguments.
5017	Create a configuration from a Python file.
5018	Load the configuration values from a TOML formatted file.
5019	Create a configuration from a Python object.
5020	Creates a set of zipkin attributes for a span based on sample rate, trace id, span id, and 128-bit trace id option.
5021	Generate the headers for a new zipkin span
5022	Return the current ZipkinAttrs and generate new ones if needed.
5023	Enter the new span context. All annotations logged inside this context will be attributed to this span.
5024	Exit the span context and log the span.
5025	Updates the binary annotations for the current span.
5026	Adds a 'sa' binary annotation to the current span for logging the destination of a request when zipkin is not supported.
5027	Override the current span name.
5028	Creates a new Endpoint object with optional parameters for port, service_name, host, and use_defaults. Validates and sets default values if unspecified. Determines if the host is an IPv4 or IPv6 address and sets the appropriate attribute. Returns a zipkin Endpoint object.
5029	Creates a copy of a given endpoint with a new service name.
5030	Builds and returns a V1 Span with annotations based on kind and user-defined annotations.
5031	Encode list of protobuf Spans to binary.
5032	Converts a py_zipkin Span into a protobuf Span.
5033	Encodes hexadecimal ids to big-endian binary. Returns binary representation. Handles 16 and non-16 char hex ids.
5034	Converts py_zipkin's Kind to Protobuf's Kind.
5035	Converts py_zipkin's Endpoint to Protobuf's Endpoint.
5036	Converts py_zipkin's annotations dict to protobuf.
5037	Create a zipkin annotation object.
5038	Creates a zipkin binary annotation object.
5039	Creates a zipkin Endpoint object holding network context information such as port, service name, and IP addresses. Converts IP addresses to network byte order and handles port conversion to unsigned value.
5040	Copies a copy of a given endpoint with a new service name. This should be very fast, on the order of several microseconds.
5041	Reformat annotations dict to return list of corresponding zipkin_core objects.
5042	Reformat binary annotations dict to return list of zipkin_core objects.
5043	Converts span attributes to a Thrift representation, handling 128-bit trace IDs and converting timestamps to microseconds.
5044	Returns TBinaryProtocol encoded Thrift span.
5045	Returns a TBinaryProtocol encoded list of Thrift objects.
5046	Returns the span type and encoding for the message provided.
5047	Converts encoded spans to a different encoding.
5048	Stores the zipkin attributes to thread local. Depreciated.
5049	Encodes the current span to thrift.
5050	Converts an Endpoint object to a JSON endpoint dict.
5051	Encode a single span to protobuf.
5052	Decodes an encoded list of spans and returns a list of Span objects.
5053	Converts a thrift decoded endpoint to an Endpoint object
5054	Convert thrift annotations to v1 annotations
5055	Converts Thrift binary annotations to v1 binary annotations.
5056	Decode a Thrift span into a Span object.
5057	Converts the provided traceId hex value with optional high bits to a string.
5058	Converts the provided unsigned long value to a lowercase hex string.
5059	Writes an unsigned long value across a byte array at a specified position
5060	Replace illegal February 29, 30 with the last day of February for German banks.
5061	Sets transaction code in tag dictionary.
5062	Add IPH ID to tag dictionary if matches found in tag dictionary.
5063	Collect states TNR in transaction details as unique id
5064	Parses MT940 data, expects a string with data. Returns a list of Transaction objects.
5065	Parses mt940 data and returns transactions object.
5066	Join strings together and strip whitespace in between if needed
5067	Turns response into a properly formatted json or text object
5068	Handles the message shown when we are ratelimited.
5069	Handles requests to the API with rate limiting and exception handling for common errors.
5070	Gets the information of the given Bot ID
5071	Retrieve bots from the database with pagination
5072	Read incoming message.
5073	Write outgoing message.
5074	Close port.
5075	Decode Erlang external term.
5076	Encode Erlang external term.
5077	Joins multicast group at given address; creates output socket for it.
5078	Handles sending pending messages, pausing if queue is empty.
5079	Set callback for handling new online service greetings, with optional filters for types and scopes.
5080	Cleans up and stops the discovery server
5081	send Bye messages for the services and remove them
5082	Search for services given TYPES and SCOPES in a specified TIMEOUT.
5083	Construct a raw SOAP XML string based on a prepared SoapEnvelope object and its action.
5084	Discover systems using WS-Discovery
5085	Return the manager for handling the relation from the instance to the tagged_item class.
5086	Return a list of RelatedObject records for child relations of the given model, including ones attached to ancestors of the model
5087	Return a list of ParentalManyToManyFields on the given model, including ones attached to ancestors of the model.
5088	Save the model and commit all child relations.
5089	Build an instance of this model from the JSON-like structure passed in, recursing into related objects as required.
5090	Checks for unique_together condition among forms.
5091	Return True if data differs from initial.
5092	Returns the address with a valid checksum attached
5093	Generates the correct checksum for this address.
5094	Parse command line arguments and create API object.
5095	Returns the argument parser that will be used to interpret arguments and options from argv.
5096	Prompts user to enter seed via stdin and returns a Seed object.
5097	Returns whether a sequence of signature fragments is valid.
5098	Generates a single key using the provided index and iteration level.
5099	Generates the key associated with the specified address. Note: may generate incorrect key if address was generated from a different key!
5100	Creates a generator for progressively generating new keys.
5101	Prepares the hash sponge for the generator
5102	Absorb trits into the sponge, transforming the internal state after each hash.
5103	Squeezes trits from the sponge.
5104	Transforms internal state by operating on a copy of `self._state` and applying a truth table transformation in a nested loop structure.
5105	Generates and returns one or more key digests from a seed, safe for sharing and used to generate multisig addresses.
5106	Generates one or more private keys from the seed. Returns a dictionary containing the generated keys.
5107	Prepare a bundle that authorizes the spending of IOTAs from a multisig address.
5108	Adds two sequences of trits together. The result is a list of trits equal in length to the longer of the two sequences. Overflow is possible.
5109	Convert an integer to a trit (balanced ternary) representation with an optional padding.
5110	Adds two individual trits together. Returns a single trit.
5111	Adds two trits together, with support for a carry trit.
5112	Outputs the user's seed to stdout, along with warnings about security. Prompts the user to clear the screen and press return to continue.
5113	Find the transactions which match the specified input and return. All input values are lists, for which a list of return values (transaction hashes), in the same order, is returned for all individual elements. Using multiple of these input fields returns the intersection of the values.
5114	Get all possible inputs of a seed and return them along with the total balance.
5115	Generate new addresses from the seed.
5116	Returns all transfers associated with the seed.
5117	Promote a transaction by adding spam on top of it.
5118	Replay the bundle associated with a given tail transaction by attaching it to the Tangle.
5119	Send a set of transfers by creating a bundle, attaching it to the Tangle, and broadcasting and storing the transactions.
5120	Attach transaction trytes to the Tangle, broadcast and store them.
5121	Given a URI, returns a properly-configured adapter instance.
5122	Sends an API request to the node. Raises BadApiResponse if a non-success response was received.
5123	Sends a message to the instance's logger, if configured.
5124	Sends an HTTP request with optional authentication and logging.
5125	Interpret and validate HTTP response from a node.
5126	Sets the response that the adapter will return for the specified command.
5127	Absorbs a digest into the sponge, keeping track of the order.
5128	Returns the new multisig address.
5129	Creates an iterator for generating new addresses.
5130	Generates an address from a private key digest
5131	Generates a new address. Used in the event of a cache miss.
5132	Finds transactions matching criteria, fetches trytes, converts trytes to Transaction objects.
5133	Scans the Tangle for used addresses, opposite to getting new addresses with stop=None.
5134	Given a set of transaction hashes, returns corresponding bundles sorted by tail transaction timestamp.
5135	Determines which codec to use for the specified encoding.
5136	Returns information used by the codecs library to configure the codec for use.
5137	Encodes a byte string into trytes.
5138	Decode a tryte string into bytes.
5139	Find addresses matching the command parameters.
5140	Adds a route to the wrapper.
5141	Creates a Transaction object from a sequence of trytes.
5142	Returns a JSON-compatible representation of the object.
5143	Returns the values needed to validate the transaction's `signature_message_fragment` value.
5144	Sets the `is_confirmed` for the bundle and its transactions.
5145	Attempts to decipher encoded messages from the transactions in the bundle.
5146	Return TryteString representations of the transactions in this bundle.
5147	Groups transactions in the bundle by address.
5148	Automatically discover commands in the specified package.
5149	Sends the request object to the adapter and returns the response.
5150	Apply a filter to a value and raise an exception if it fails.
5151	Returns the URL to check job status.
5152	Return all errors found with the bundle.
5153	Returns whether the bundle is valid.
5154	Creates a generator to validate transactions in a bundle, checking for balance, correct indices, and valid signatures.
5155	Validates the signature fragments in the bundle and returns a list of error messages.
5156	Validates the signature fragments for a group of transactions using the specified sponge type. Returns ``None`` if valid, or an error message if invalid.
5157	Recursively traverse Tangle to collect transactions until hitting a new bundle.
5158	Starts the REPL with an IOTA API client.
5159	Generate a random seed using a CSPRNG.
5160	Generate the digest used for signing by breaking the signing key into fragments, creating hashes for each, and then combining them.
5161	Signs the inputs starting at the specified index and handles splitting across subsequent transactions if necessary.
5162	Enables JSON-serializable objects to work nicely with IPython's pretty-printer.
5163	Absorb trits into the sponge from a buffer.
5164	Squeeze trits from the sponge into a buffer, handling padding and updating the internal state.
5165	Attaches a context value to an Exception.
5166	Generates a filter chain for validating a security level.
5167	Increments the transaction's legacy tag to fix insecure bundle hashes when finalizing a bundle.
5168	Determine the most relevant tag for the bundle.
5169	Add a transaction to the bundle. If the message is too long, it will be split into multiple transactions.
5170	Finalizes the bundle, preparing it to be attached to the Tangle. Ensures the bundle is balanced and generates a secure bundle hash.
5171	Signs inputs in a finalized bundle. Raises error if bundle is not finalized. Uses counter to skip ahead as it goes. Checks txn value and address key_index/security_level before signing.
5172	Signs the input at the specified index using the given private key.
5173	Creates transactions for the specified input address, including a change transaction and zero-value meta transactions for signatures.
5174	Converts between any two standard units of iota.
5175	Recover x and y coordinates from a compressed G1 point.
5176	Extended euclidean algorithm to find modular inverses for integers
5177	Load a lexicon from a JSON file.
5178	Finds and combines words into groups based on their proximity in a given string and category.
5179	Given a string and a dict of synonyms, return the 'preferred' word, case-insensitive. If not found, return the input word.
5180	Replaces abbreviations in the given text with their full word equivalents using the lexicon.abbreviations dictionary.
5181	Split a description into parts, each of which can be turned into a single component.
5182	Lists the categories in the lexicon, except the optional categories.
5183	Returns minimal Decor with random colour.
5184	Make a simple plot of the Decor.
5185	Generate a default legend based on the provided name.
5186	Generate a default timescale legend. No arguments.
5187	Generate a random legend for a given list of components.
5188	Create a legend from image components.
5189	Read CSV text and generate a Legend.
5190	Renders a legend as a CSV string
5191	Return the maximum width of all the Decors in the Legend.
5192	Get the decor for a component based on matching attributes.
5193	Get the attribute of a component. Return default if no match.
5194	Get the component corresponding to a display colour. This is for generating a Striplog object from a colour image of a striplog. Returns the component best matching the provided colour.
5195	Calls Decor.plot() on all members of self.__list
5196	Returns a Component from a text string using a Lexicon, with optional requirements and first-only matching.
5197	Returns a summary description of a component based on a format string and component dictionary.
5198	Gracefully deprecates the 'Rock' class name and redirects to 'Component', emitting a deprecation warning.
5199	Process a single row from the file.
5200	Read all the rows and return a dict of the results.
5201	Checks if striplog is monotonically increasing in depth.
5202	Generate a list of unique primary components from a Striplog along with their total thickness.
5203	Take a sequence of tops and values, and provide a list of intervals for creating a striplog.
5204	Clean longitudinal data for striplog creation.
5205	Makes a striplog from a Petrel text file.
5206	Reconstructs a list of Intervals from a data dictionary based on specified criteria.
5207	Load from a CSV file or text.
5208	Read an image and generate Striplog.
5209	Turn a 1D array into a striplog, given a cutoff.
5210	Turn LAS3 'lithology' section into a Striplog.
5211	Eat a Canstrat DAT file and make a striplog; extract lithology information and create intervals.
5212	Returns a shallow copy.
5213	Returns a CSV string built from the summaries of the Intervals.
5214	Returns a string representing a LAS 3.0 section, using descriptions and a specified delimiter.
5215	Plot rectangles on a matplotlib axis based on data and options.
5216	Gets data from the striplog for a specified field, applying an optional function and handling missing values with a default.
5217	Extracts log data into components of a striplog. Works in place.
5218	Return intervals in the striplog that match the search term.
5219	Find overlapping intervals in a striplog.
5220	Finds gaps in a striplog.
5221	Remove intervals below a certain thickness. In place.
5222	Fill in empty intervals by growing from top and base.
5223	Fill gaps with the component provided.
5224	Union two striplogs, combining overlapping intervals.
5225	Makes a striplog of all intersections. Returns the result of the intersection.
5226	Merges overlapping intervals within the striplog 'in place'.
5227	Plots a histogram and returns the data for it.
5228	Invert the striplog, changing its order and the order of its contents. Operates in place by default.
5229	Crop to a new depth range. If copy is True, returns a new striplog.
5230	Runs a series of tests and returns the corresponding results.
5231	Convert hex to a color name using matplotlib's colour names.
5232	Extract a column of RGB values from an image at a specified offset.
5233	Handle missing attributes by returning underscores
5234	Lists all the jobs registered with Nomad.
5235	Parse a HCL Job file and return a dict with the JSON formatted job.
5236	Update a token with the provided ID and new token value.
5237	Lists all the allocations, optionally filtering by a prefix.
5238	Mark a deployment as failed, forcing the scheduler to stop or rollback
5239	Pause or resume a deployment using the Nomad API.
5240	Manually set the health of deployment allocations.
5241	Toggle the drain mode of a node. When enabled, no further allocations will be assigned and existing allocations will be migrated.
5242	Toggle the drain mode of a node in Nomad by specifying a drain specification and an option to mark the node as eligible for scheduling.
5243	Toggle the eligibility of a node based on ID and eligibility/ineligibility flags.
5244	List files in an allocation directory. If an id is provided, it uses the id; otherwise, it uses the default path. Returns a list and raises exceptions for base Nomad errors or URL not found.
5245	Method to stream the contents of a file in an allocation directory.
5246	Stat a file in an allocation directory.
5247	Initiate a join between the agent and target peers.
5248	Updates the list of known servers with the provided addresses and returns a 200 status code.
5249	Force a failed gossip member into the left state. Returns 200 status code.
5250	Lists all the client nodes registered with Nomad.
5251	Lists all evaluations, optionally filtering by prefix. Returns a list of evaluations. Raises BaseNomadException or URLNotFoundNomadException if something bad happens.
5252	Lists all the namespaces registered with Nomad.
5253	Register a new job or update an existing job.
5254	Invoke a dry-run of the scheduler for the job using the provided job details.
5255	Dispatch a new instance of a parameterized job and return a dictionary.
5256	Revert a job to an older version, optionally checking the current version beforehand.
5257	Set the stability of a job in Nomad.
5258	Deregisters a job, and stops all allocations part of it. Optionally purges the job immediately or defers to the Nomad garbage collector.
5259	Query the status of a Nomad client node and retrieve configuration with an option to allow stale responses. Raises exceptions on API errors.
5260	Remove the Nomad server with given address from the Raft configuration. Returns Boolean.
5261	Lists all deployments, optionally filtering by an index prefix. Returns a list of dictionaries.
5262	Get a random mutator from a list of mutators.
5263	Get a random mutator for a given type
5264	Return a polyglot attack containing the original object.
5265	Performs fuzzing on input object by modifying it randomly
5266	Safely return an unicode encoded string
5267	Starts the servers.
5268	Kills the servers and logs the completion.
5269	Serve custom HTML page
5270	Serves fuzzed JSON object with appropriate headers and optional notifications.
5271	Generic fuzz mutator, use decorator for the given type.
5272	Spawns a new process using subprocess
5273	Try to get output in a separate thread.
5274	Wait until output is received or timeout is reached.
5275	Terminate the newly created process
5276	Start PyJFuzz by parsing command line arguments and invoking appropriate worker method based on specified options.
5277	Performs actual external fuzzing on the given object, handling both stdin and non-stdin methods with error handling.
5278	Decorator to change the return value from PJFFactory.fuzzed, making the structure printable.
5279	Builds a String instance with optional prerequisites and minimal reference-chain generation.
5280	Builds an 'And' instance by appending values, handling prerequisites and exceptions.
5281	Build the Quote instance
5282	Build the "Or" instance
5283	Build the current ``Opt`` instance.
5284	Builds the `Ref` instance by fetching the rule from the `GramFuzzer` instance and building it, handling prerequisites and recursion depth.
5285	Build the STAR field.
5286	Shutdown the running process and the monitor
5287	Run command once and check exit code
5288	Run command in a loop and check exit status. Restart process when needed.
5289	Return a random float between two specified values. If only one value is provided, return a random float between 0.0 and that value.
5290	Add a new rule definition to the specified category.
5291	Associate the provided rule definition name with the category group in the category.
5292	Generate rules from category 'cat', with optional preferred groups' 'preferred' at probability 'preferred_ratio' over other randomly-chosen rule definitions.
5293	Fuzz all elements inside the object.
5294	Get a printable fuzzed object
5295	Return the fuzzed object
5296	Mutate a generic object based on type.
5297	Handle SIGTERM signal by stopping the IOLoop, sending the signal to a child process if running, and then stopping again.
5298	Emergency exit if child process is running, otherwise exit immediately
5299	Pauses the actor and kills a running child if present.
5300	Resets the state to waiting to resume child processes.
5301	Stops the running child process and restarts it if it's running.
5302	Restarts the subprocess.
5303	Retrieve a list of events since the last poll. Multiple calls may be needed to retrieve all events. Returns a list of :class:`.SkypeEvent`.
5304	Updates the user's mood message via the Skype API.
5305	Updates the profile picture for the current user.
5306	Retrieve various metadata associated with a URL, as seen by Skype.
5307	Retrieves all details for a specific contact using a given user identifier, handling exceptions for non-contacts and adding the contact's ID to a list.
5308	Retrieve public information about a user.
5309	Retrieve a list of all known bots.
5310	Retrieves a single bot based on UUID or username.
5311	Search the Skype Directory for a user.
5312	Retrieve any pending contact requests.
5313	Create a new instance based on raw properties of an API response, optionally overriding to automatically create subclass instances.
5314	Merge properties from other into self, skipping None values. Also merges the raw data.
5315	Add or update a cached object based on its ID.
5316	Follow and track sync state URLs provided by an API endpoint for handling pagination.
5317	Attempt to re-establish a connection using previously acquired tokens.
5318	Store details of the current connection in the named file.
5319	Ensure the authentication token for the given auth method is still valid.
5320	Refresh the Skype token to extend its expiry without additional credentials.
5321	Retrieving the authenticated user's identifier from Skype and storing it.
5322	Acquire a new registration token, update token and expiry information, configure and store endpoint details if specified.
5323	Retrieve all current endpoints for the connected user.
5324	Query a username or email address to see if a corresponding Microsoft account exists.
5325	Take an existing Skype token and refresh it to extend the expiry time without other credentials. Returns the updated Skype token and expiry if known, or raises an exception if the login request is rejected or the form can't be processed.
5326	Request a registration token using a Skype token.
5327	Configure this endpoint to allow setting presence.
5328	Send a keep-alive request for the endpoint.
5329	Retrieve recent conversations and store them in the cache.
5330	Retrieves a single conversation by identifier.
5331	Creates a new group chat with the given users, automatically adding the current user as an admin with any other admin identifiers also included in the member list.
5332	Extracts the username from a Skype API URL by matching addresses containing "users/<user>" or "users/ME/contacts/<user>". Returns the extracted identifier or None if no match is found.
5333	Extracts the conversation ID from a Skype API URL.
5334	Repeatedly call a function until false-y, yielding each item in turn. Use with state-synced functions to retrieve all results.
5335	Convert text to unicode format.
5336	Tries to match text with opening delimiters in handlers to determine which handler to use.
5337	Parse text with frontmatter, return metadata and content. Pass in optional metadata defaults as keyword args.
5338	Convert the object's metadata and content into a dictionary for serialization.
5339	Parse YAML front matter. Uses yaml.SafeLoader by default.
5340	Export metadata as YAML.
5341	Turn metadata into JSON using JSON.dumps() and return as a unicode string.
5342	Return the match object for the current list.
5343	Returns items as a list of strings, excluding sub-items and the start pattern.
5344	Return the lists inside the item with the given index.
5345	Replaces starting pattern in list with new pattern.
5346	Parse template content and create self.name and self.arguments.
5347	Return the lists in all arguments.
5348	Create a Trie from a list of words and return an atomic regex pattern.
5349	Converts a trie to a regex pattern.
5350	Check integer or slice index and convert to adjusted start and stop index
5351	Insert a string at a specified index.
5352	Partition string where character is not part of atomic sub-spans.
5353	Return all the sub-span including self._span.
5354	Update self._type_to_spans according to the removed span. Adjusts span positions and lengths based on removal range.
5355	Update self._type_to_spans according to the added length
5356	Return the nesting level of self.
5357	Return a copy of self.string with specific sub-spans replaced.Comments blocks are replaced by spaces. Other sub-spans are replaced by underscores. The replaced sub-spans are: 'Template', 'WikiLink', 'ParserFunction', 'ExtensionTag', 'Comment'.
5358	Replaces invalid characters in SPAN_PARSER_TYPES with b'_' For comments, all characters are replaced, but for ('Template', 'ParserFunction', 'Parameter') only invalid characters are replaced.
5359	Create arguments for parse function in pformat method, adjusting spans to fit new scope.
5360	Deprecated, use self.pformat instead.
5361	Return a list of parameter objects.
5362	Return a list of parser function objects.
5363	Return a list of templates as template objects.
5364	Return a list of wikilink objects.
5365	Returns a list of comment objects.
5366	Return a list of found external link objects.
5367	Return a list of sections in current wikitext. The first section will always be the lead section, even if it is an empty string.
5368	Return a list of found table objects.
5369	Returns a list of WikiList objects.
5370	Return all tags with the given name.
5371	Generate indices of sub-spans of a specific type, excluding the current span.
5372	Return the ancestors of the current node based on specified type
5373	Return the parent node of the current object.
5374	Return the most common item in the list
5375	Return the first argument in the args that has the given name. Return None if no such argument is found.
5376	Return the normal form of a template name by removing comments, language code, namespace, underscores, consecutive spaces, and anchor tags.
5377	Remove the first occurrences of duplicate arguments in the `arguments` list.
5378	Remove duplicate arguments in a safe manner based on name and value.
5379	Set the value for `name` argument. Add it if it doesn't exist. Handle positional and spacing based on keyword arguments.
5380	Return the last argument with the given name. Return None if no argument with that name is found.
5381	Returns true if an argument named `name` exists. Also checks equality of values if `value` is provided.
5382	Delete all arguments with the given name.
5383	Lookup crscode on spatialreference.org and return in specified format.
5384	Search for an ellipsoid name located in this module.
5385	Read CRS string from URL and return corresponding CRS object.
5386	Returns the crs object from a file, with the format determined from the filename extension.
5387	Load crs object from epsg code, via spatialreference.org. Parses based on the proj4 representation.
5388	Load crs object from esri code, via spatialreference.org. Parses based on the proj4 representation.
5389	Load crs object from sr-org code, via spatialreference.org. Parses based on the proj4 representation.
5390	Detect crs string format and parse into crs object with appropriate function.
5391	Write the raw header content to the out stream
5392	Read RawVLR from data stream.
5393	Parse 3 GeoTiffvlrs from vlr_list and parse them into a nicer structure
5394	Parse the GeoTIFF VLRs information into nicer structs
5395	Returns the signedness for the given type index
5396	Returns the index of the type as defined in the LAS Specification
5397	Create a new PackedPointRecord from an existing one with the ability to change to a new point format.
5398	Copy values from other_record to the current object.
5399	Append zeros to the array if the value's length is greater.
5400	Return all the dimensions names, including the names of sub_fields and their corresponding packed fields.
5401	Creates a new point record with all dimensions initialized to zero.
5402	Construct point record by reading points from stream.
5403	Construct the point record by decompressing the points data from the input buffer.
5404	Returns the scaled x positions of the points as doubles.
5405	Returns the scaled y positions of the points as doubles.
5406	Returns the scaled z positions of the points as doubles.
5407	Adds a new extra dimension to the point record.
5408	Writes data to a stream, optionally compressing it.
5409	Writes the las data into a file, handling compression based on the file extension or provided flag.
5410	Writes to a stream or file. Compresses if specified or guessed from file extension.
5411	Builds a dictionary mapping point format ID to numpy.dtype
5412	Builds dict mapping point format ID to NumPy dtype with bit fields unpacked.
5413	Tries to find a matching point format id for the input numpy dtype.
5414	Returns the minimum file version that supports the given point_format_id.
5415	Returns true if the file version supports the point_format_id.
5416	Returns list of VLRs of requested type, always as list.
5417	Returns the list of vlrs of the requested type, removing them from the original list.
5418	Reads vlrs and parse them if possible from the stream.
5419	Returns true if all the files have the same points format id.
5420	Returns true if all the files have the same numpy datatype
5421	Raises an error if the file signature is incorrect.
5422	Reads the head of the las file and returns it
5423	Reads and returns the vlrs of the file.
5424	Reads points record parts of the las file, handles compression, and returns points.
5425	Reads compressed point record from LAS file.
5426	reads and returns the waveform vlr header, waveform record
5427	Reads the EVLRs of the file, will fail if the file version does not support EVLRS.
5428	Warn about unknown bytes found in the file if they are not at the expected position.
5429	Opens and reads the header of the las content in the source.
5430	Read LAS data from a source and return a LasBase object.
5431	Create a File from an existing header, allocating the array of points according to the provided header.
5432	Create a new empty LAS data object with specified point format and file version
5433	Converts a Las file from one point format to another, upgrading the file version if necessary.
5434	Merge multiple las files into one.
5435	Writes the given las into memory using BytesIO and reads it again, returning the newly read file. Mostly used for testing purposes, without having to write to disk.
5436	Returns the creation date stored in the las file.
5437	Sets the creation date and day of year from a datetime object
5438	Returns de minimum values of x, y, z as a numpy array
5439	Sets the minimum values of x, y, z as a numpy array.
5440	Returns maximum values of x, y, z as a numpy array
5441	Sets the maximum values of x, y, z as a numpy array.
5442	Converts the scaling values of x, y, z into a NumPy array.
5443	Returns the offsets values of x, y, z as a numpy array.
5444	Return a file version string from a stream , positioned at the last version header fields.
5445	Convert a header to another version
5446	Unpack sub field using its mask from source array.
5447	Packs a sub field's array into another array using a mask.
5448	Returns a list of dimensions lost when converting from point format to another.
5449	Returns a dict of the sub fields for this point format
5450	Returns the number of extra bytes.
5451	Check if the point format has waveform packet dimensions
5452	Run satel_integra demo script with specified port, IP, and log level.
5453	Calculate checksum as per Satel manual.
5454	Print out data in hex format for debugging.
5455	Verify checksum and strip header and footer of received frame.
5456	Return list of positions of bits set to one in given data.
5457	Adds header, checksum, and footer to command data
5458	Basic demo of the monitoring capabilities using asyncio.
5459	make a tcp connection to the alarm system
5460	Start monitoring for interesting events.
5461	Sends a disarm command with a code and partition list.
5462	Sends a command to clear the alarm.
5463	Sends output turn on command to the alarm.
5464	A workaround for Satel Integra disconnecting after 25s. Every interval it sends some random question to the device, ignoring answer - just to keep connection alive.
5465	Start monitoring of the alarm status.
5466	Stop monitoring and close connection.
5467	Clears all matching user_id.
5468	Guess the type of a file.
5469	Retrieve file ID from the database using a given path.
5470	Get a notebook from the database.
5471	Build notebook model from database record.
5472	Get a directory from the database.
5473	Apply _notebook_model_from_db or _file_model_from_db to each entry in file_records, depending on the result of guess_type.
5474	Build directory model from database record.
5475	Build file model from database record.
5476	Save a notebook and return a validation message.
5477	Save a non-notebook file.
5478	Renames or moves a file or directory from old_path to path using the specified user_id. Handles exceptions for existing entities and root renaming errors.
5479	Delete object corresponding to path.
5480	Add a new user if they don't already exist.
5481	Deletes a user and all of their resources.
5482	Create a directory.
5483	Return a WHERE clause that matches entries in a directory. Parameterized on table because this clause is re-used between files and directories.
5484	Delete a directory.
5485	Returns whether a directory exists for a given user and name in the database.
5486	Return files in a directory.
5487	Return subdirectories of a directory
5488	Return a WHERE clause matching the given API path and user_id.
5489	Return a SELECT statement that returns the latest N versions of a file.
5490	Return default fields returned by a file query.
5491	Get file data for the given user_id, path, and query_fields. The query_fields parameter specifies which database fields should be included in the returned file data.
5492	Get file data for the given user_id and path. Include content only if include_content=True.
5493	This function retrieves the file ID from the database based on the provided user ID and API path.
5494	Check if a file exists.
5495	Rename a directory while handling constraints and updating descendant directories.
5496	Save a file, updating or inserting as necessary.
5497	Create a generator of decrypted files.
5498	Delete all database records for the given user_id.
5499	Generate a generator of decrypted remote checkpoints. Checkpoints are yielded in ascending order of their timestamp.
5500	Generate notebooks from a database table based on timestamp conditions and decrypt them.
5501	Re-encrypt a row from the specified table with the given row ID using the provided encryption and decryption functions.
5502	Re-encrypts all of the files and checkpoints for a single user.
5503	Convert a password and user ID into a key for ``cryptography.fernet.Fernet`` using PBKDF2HMAC.
5504	Derive a list of per-user Fernet keys from a list of master keys and a username.
5505	Create a function to generate a crypto_factory for reencryption.
5506	Decorator memoizing a single-argument function
5507	Get the name from a column-like SQLAlchemy expression.Works for Columns and Cast expressions.
5508	Convert a SQLAlchemy row without 'content' to a dict. Raises AssertionError if 'content' field exists in `fields`.
5509	Convert a SQLAlchemy row to a dict with decrypted content.
5510	Create a checkpoint of the current state of a notebook. Returns a checkpoint_id for the new checkpoint.
5511	Create a checkpoint of the current state of a file. Returns a checkpoint_id for the new checkpoint.
5512	Delete a checkpoint for a file.
5513	This interface is used to retrieve the content of a checkpoint based on the checkpoint ID and path.
5514	Return a list of checkpoints for a given file.
5515	Rename all checkpoints for old_path to new_path.
5516	Deletes all checkpoints for the given path.
5517	Purge all database records for the current user.
5518	Resolve a path based on a dictionary of manager prefixes
5519	Prefix all path entries in model with the given prefix.
5520	Decorator for methods that accept path as a first argument.
5521	Parameterized decorator for methods that accept path as a second argument.
5522	Decorator for methods accepting old_path and new_path.
5523	Removes slashes from directories before updating.
5524	Get directory model for a given path.
5525	Resolve paths with '..' to normalized paths, raising an error if the final result is outside root.
5526	Split an API file path into directory and name.
5527	Encode a notebook as base64.
5528	Read a notebook from base64, decode and raise exception if corrupted.
5529	Decode base64 data of unknown format. Attempts to interpret data as utf-8, falling back to ascii on failure.
5530	Decode base64 content for a file, handling 'text', 'base64', and default formats. Returns decoded content, actual format, and mimetype.
5531	Return an iterable of all prefix directories of path, descending from root.
5532	Convert PathOutsideRoot errors to 404s.
5533	Create a user.
5534	Split an iterable of models into a list of file paths and a list of directory paths.
5535	Recursive helper for walk.
5536	Iterate over all files visible to `mgr`.
5537	Iterate over the contents of all files visible to mgr.
5538	Re-encrypt data for all users.
5539	Re-encrypt all files and checkpoints for a single user using FallbackCrypto for re-entrancy.
5540	Unencrypt data for all users using a given engine, decryption factory, and logger.
5541	Unencrypt all files and checkpoints for a single user by replacing the decryption function with a no-op.
5542	Temporarily write an alembic.ini file for use with alembic migration scripts.
5543	Upgrade the given database to revision.
5544	Sanitizes block data using embed serializer if available.
5545	Queue an instance to be fetched from the database.
5546	Fetch all queued instances of type `embed_type`, save results to `self.instances`.
5547	Insert a fetched instance into embed block.
5548	Load data in bulk for each embed block.
5549	Perform validation of the widget data
5550	Render HTML entry point for manager app.
5551	Return JSON representation for this template.
5552	Hides authenticated fields if request context is missing or user is not authenticated
5553	Excludes fields that are included in the query parameters.
5554	Retrieves the latest or specified article based on query parameters.
5555	Optionally restricts the returned articles by filtering against a `topic` query parameter in the URL.
5556	Filter and sort queryset based on request parameters
5557	Overrides the default get_attribute method to convert None values to False.
5558	Checks that the given widget contains the required fields.
5559	Checks that the given zone contains the required fields
5560	Indicate whether value is a valid UUID.
5561	Returns the user's permissions.
5562	Modify the user's permissions.
5563	Raise a ValidationError if data does not match the author format.
5564	Save widget data for this zone.
5565	Returns data from each field.
5566	Prepare widget data for template.
5567	Renders the widget as HTML.
5568	Retrieves the settings for this integration as a dictionary. Removes all hidden fields if show_hidden=False.
5569	Receive OAuth callback request from Facebook. Authenticate with Facebook and fetch pages belonging to authenticated user.
5570	Return settings for given integration as a dictionary.
5571	Updates settings for given integration.
5572	Handle user signup requests, validate form, create user, assign permissions, and redirect.
5573	Returns the HTML produced from enclosing each item in `contents` in a tag of type `tagname`
5574	Renders the contents of the zone with given zone_id.
5575	Handles saving or removing a featured image based on provided data.
5576	Save the subsection to the parent article
5577	Returns the file extension by removing the period.
5578	Returns the medium size image URL.
5579	Custom save method to process thumbnails and save image dimensions.
5580	Processes and saves a resized thumbnail version of the image.
5581	Attempts to connect to the MySQL server
5582	Wraps a fileobj in a bandwidth limited stream wrapper
5583	Reads data from a file. Applies bandwidth limiting if enabled.
5584	Consumes a requested amount of bytes, either immediately or after a scheduled time, while ensuring it does not exceed the maximum allocated bandwidth.
5585	Schedules a wait time to be able to consume an amount
5586	Processes a scheduled consumption request that has completed
5587	Calculates the projected rate based on a provided amount and time.
5588	Record the consumption rate based on amount and time point.
5589	Downloads the object's contents to a file.
5590	Poll for the result of a transfer
5591	Retrieves callbacks from a subscriber based on the specified type. Returns a list of callbacks preinjected with the transfer future.
5592	Get a dictionary filtered by whitelisted keys.
5593	Decrement the count by one Raises error if count is already zero Calls callback if count reaches zero
5594	Finalize the counter. Once finalized, the counter never be incremented and the callback can be invoked once the count reaches zero.
5595	Checks if a file is a special UNIX file (character special device, block special device, FIFO, or socket).
5596	Acquire the semaphore with a tag and blocking option. Returns a token for releasing the semaphore.
5597	Release the semaphore.
5598	Get a chunksize close to current that fits within all S3 limits.
5599	Queue IO write task for submission to the IO executor.
5600	Get an IO write task for the requested set of data
5601	Retrieves a class for managing output for a download.
5602	Downloads an object from S3 and writes content to a file handle, handling retries and progress callbacks.
5603	Seek to offset and write data to file.
5604	Request any available writes given new incoming data. If that new data unlocks any contiguous writes that can now be submitted, this method will return all applicable writes. This is done with 1 method call so you don't have to make two method calls (put(), get()) which acquire a lock each method call.
5605	Determine if a fileobj is seekable
5606	Uploads a file to S3.
5607	Download a file from S3.
5608	Copy a file in S3.
5609	Delete an S3 object.
5610	Shutdown the TransferManager.
5611	Cancels all inprogress transfers by calling cancel() on all tracked transfer coordinators.
5612	Wait until there are no more inprogress transfers. Can be interrupted with KeyboardInterrupt.
5613	Reads a specific amount of data from a stream and returns it. If there is any data in initial_data, that will be popped out first.
5614	Wraps data with interrupt reader and file chunk reader.
5615	Retrieves a class for managing input for an upload based on file type.
5616	Sets the exception on the future.
5617	Set a result for the TransferFuture, indicating successful completion.
5618	Set an exception for a TransferFuture, marking it as failed.
5619	Waits until TransferFuture is done and returns the result. Raises an exception if present.
5620	Cancel the TransferFuture with an optional message and exception type.
5621	Submit a task to a provided executor.
5622	Add a done callback to be invoked when transfer is done.
5623	Add a callback to be called on failure.
5624	Announce that future is done running and run associated callbacks.
5625	Submit a task to complete.
5626	Adds a callback to be completed once future is done.
5627	Upload a file to an S3 object.
5628	Download an S3 object to a file. This method will issue a ``head_object`` request to determine the size of the S3 object. If the object is downloaded in parallel, it will handle exceptions and remove partial files.
5629	Find functions with step decorator in parsed file
5630	Get the arguments passed to step decorators converted to python objects.
5631	Replaces occurrences of old_text with new_text in a function step and adjusts parameter positions accordingly.
5632	Find functions with step decorator in parsed file.
5633	Get arguments passed to step decorators converted to python objects.
5634	Find the step with old_text and change it to new_text. The step function parameters are also changed according to move_param_from_idx.
5635	Selects default parser for loading and refactoring steps. Replaces the redbaron parser for Python 3 syntax support.
5636	List team memberships for a team, by ID.Supports pagination through Webex Teams's RFC5988 implementation.Returns a generator container that yields all team memberships.
5637	Add someone to a team by Person ID or email address. Optionally makes them a moderator. Returns a TeamMembership object with details of the created team membership. Raises exceptions for incorrect parameter types or API errors.
5638	Update a team membership by ID.
5639	Deletes a team membership by ID
5640	This function retrieves a cat fact from the catfact.ninja API and returns it as a string.
5641	Respond to inbound webhook JSON HTTP POSTs from Webex Teams, parse message content, and conditionally respond with a cat fact if the message contains "/CAT".
5642	Lists room memberships and returns a generator container that yields membership objects. Supports pagination and filtering by room ID, person ID, or person email.
5643	Deletes a membership by ID
5644	Verifies that base_url specifies a protocol and network location.
5645	Check if string is a validly-formatted web URL.
5646	Open the file and return an EncodableFile tuple.
5647	Checks if the object is an instance of one of the acceptable types or None. Raises a TypeError if the object does not meet the criteria.
5648	Create a dictionary from input items, pruning any with `None` values.
5649	Check response code against the expected code; raise ApiError.
5650	Convert JSON data to a Python dictionary
5651	strptime with the Webex Teams DateTime format as the default.
5652	Lists rooms. By default, lists rooms to which the authenticated user belongs. Uses Webex Teams's Web Linking for pagination. Returns a generator that yields all rooms returned by the query.
5653	Create a room. The authenticated user is automatically added as a member of the room.
5654	Update details for a room, by ID.
5655	Deletes a room by its ID.
5656	Lists all licenses for a given organization. If no orgId is specified, the default is the organization of the authenticated user. Returns a GeneratorContainer yielding the licenses returned by the Webex Teams query. Raises TypeError if parameter types are incorrect or ApiError if the Webex Teams cloud returns an error.
5657	Get creation date and time in ISO8601 format.
5658	Attempt to get the access token from the environment. Check both current and legacy variables, raise deprecation warning for legacy usage if token is found.
5659	Create a webhook.
5660	Update a webhook by ID.
5661	Deletes a webhook by ID.
5662	Remove max=null parameter from URL
5663	Enable or disable automatic rate-limit handling.
5664	Update the HTTP headers used for requests in this session.
5665	Given a relative or absolute URL; return an absolute URL.
5666	HTTP request to Webex Teams APIs with support for rate-limiting and expected response code.
5667	Send a GET request to a specified URL with optional parameters and handle the response.
5668	Return a generator that GETs and yields pages of data. Supports RFC5988 Web Linking.
5669	Return a generator that GETs and yields individual JSON `items`.
5670	Sends a PUT request to a specified URL.
5671	Sends a DELETE request.
5672	This interface is used to create a new guest issuer using the provided issuer token and return a guest issuer with a valid access token.
5673	Lists messages in a room. Sorts messages in descending order by creation date. Supports pagination using Webex Teams's implementation of RFC5988 Web Linking. Returns a generator container that incrementally yields all messages returned by the query.
5674	Post a message, and optionally a attachment, to a room.
5675	Delete a message.
5676	Create a new user account for a given organization. Only an admin can create a new user account.
5677	Retrieve a person's details by ID.
5678	Update details for a person, by ID. Only an admin can update a person's details. Include all details for the person in the request.
5679	Remove a person from the system.
5680	Get the details of the person accessing the API. Raises: ApiError if the Webex Teams cloud returns an error.
5681	Lists all roles using additional request parameters. Yields role objects created from returned JSON objects. Raises TypeError and ApiError for incorrect parameter types and cloud errors respectively.
5682	Returns teams to which the authenticated user belongs, supporting pagination via Webex Teams's RFC5988 Web Linking implementation. Returns a generator container that yields teams, automatically handling additional page requests as needed.
5683	Create a team. The authenticated user is automatically added as a member.
5684	Update details for a team, identified by team ID.
5685	Delete a team by ID. Raises exceptions for invalid types or API errors.
5686	List events from your organization by filtering with various query parameters. Supports pagination with Webex Teams's RFC5988 implementation, yielding all events as a generator.
5687	Serialize data to an frozen tuple
5688	Exchange an Authorization Code for an Access Token.
5689	Returns the date and time of the person's last activity.
5690	Responds to inbound webhook JSON HTTP POST from Webex Teams. Processes message and sends cat fact if message contains '/CAT'.
5691	Get the ngrok public HTTP URL from the local client API.
5692	Delete webhook by name
5693	Create a Webex Teams webhook pointing to the public ngrok URL.
5694	Delete previous webhooks. If local ngrok tunnel, create a webhook.
5695	Output DSMR data to console.
5696	Read complete DSMR telegrams from the serial interface and parse them into CosemObject's and MbusObject's.
5697	Read complete DSMR telegram's from the serial interface and parse them into CosemObject's and MbusObject's, pushing values to a provided queue for asynchronous processing.
5698	Creates a DSMR asyncio protocol based on the specified version.
5699	Create an asyncio protocol coroutine for DSMR using a serial port.
5700	Creates a DSMR asyncio protocol coroutine using TCP connection.
5701	Add incoming data to buffer and process telegrams.
5702	Stop when connection is lost. Log an exception if provided, otherwise log a disconnection. Set `_closed` to indicate the connection is stopped.
5703	Send off parsed telegram to handling callback.
5704	Parse telegram string to dictionary.
5705	Get the version of the package from the given file by executing it and extracting the given `name`.
5706	Ensure compatibility of Python version with given range specifiers.
5707	Find all packages in a directory.
5708	Create a command class with optional prerelease class and file handling
5709	Create a command that calls the given function.
5710	Echoes a command before running it. Defaults to repo as cwd
5711	Return a Command to check that certain files exist. Raises a ValueError if any are missing.
5712	Wrap a setup command
5713	Get a package_data and data_files handler command.
5714	Expand data file specs into valid data files metadata.
5715	Expand file patterns to a list of package_data paths.
5716	Translate and compile a glob pattern to a regular expression matcher.
5717	Iterate over all parts of a path by recursively splitting with os.path.split().
5718	Translate a glob PATTERN to a regular expression.
5719	Join translated glob pattern parts, handling special case of ** to match zero or more directories.
5720	Translate a glob pattern part to a regular expression.
5721	Truncate the specified table and optionally reset serial keys.
5722	Writes DDL to create the specified table
5723	Sends DDL to create the specified `table` indexes
5724	Send DDL to create specified table triggers
5725	Sends DDL to create constraints for the specified table
5726	Write the contents of `table`.
5727	Examines row data from MySQL and alters the values when necessary to be compatible with sending to PostgreSQL via the copy command
5728	Write DDL of `table` indexes to the output file.
5729	Write DDL of `table` constraints to the output file.
5730	Write TRIGGERs existing on the given table to the output file.
5731	Return approximate number of queued tasks in the queue.
5732	Enqueue task with specified data.
5733	Retrieve a task handler from the queue. If block is True, it will block until it is able to retrieve a task. If block is True and timeout is a number it will block for at most <timeout> seconds. retry_interval is the maximum time in seconds between successive retries. extra_predicate can be used to filter tasks.
5734	Return an SQL WHERE predicate.
5735	Serializes dates and datetimes to ISO strings.
5736	Closes the existing database connection and re-opens it
5737	Execute a query and return the first row. Raise an error if no rows or multiple rows are returned.
5738	Returns a new connection to the database.
5739	Runs a set of InsertWorkers to record their performance.
5740	Returns an aggregator connection.
5741	Look up a global variable name by its value
5742	Returns the number of connections cached by the pool.
5743	Verify if an operational error from MySQL is a connection issue; if so, handle it; otherwise, raise a database error.
5744	Build a simple expression ready to be added onto another query.
5745	Build an update query.
5746	Connect to the database specified
5747	Initialize the required tables in the database
5748	Destroy the SQLStepQueue tables in the database
5749	Start a step.
5750	Stops a step and calculates its duration.
5751	Convert ISO format timestamps to datetime objects
5752	Disconnects from the websocket connection and joins the Thread.
5753	Reconnect by setting the reconnect_required event.
5754	Creates a websocket connection and handles reconnections if required.
5755	Handles and passes received data to the appropriate handlers.
5756	Stops ping, pong, and connection timers.
5757	Sends a ping message to the API and starts pong timers.
5758	Checks if a Pong message was received. If received, resets the timer and logs the event. If not received, logs the event and initiates a reconnect.
5759	Send the given Payload to the API via the websocket connection.
5760	Unpauses the connection and re-subscribes to all channels.
5761	Distributes system messages to the appropriate handler.
5762	Handles INFO messages from the API, logs actions, and raises exceptions for invalid user IDs.
5763	Handle Error messages and log them accordingly.
5764	Handles data messages by passing them up to the client.
5765	Resubscribes to all channels found in self.channel_configs, with an option to unsubscribe first if soft is True.
5766	Handles authentication responses.
5767	Handles configuration messages.
5768	Update the timestamp for the given channel id.
5769	Reconnect the client, wait for the connection to be established, and send messages based on channel configurations.
5770	Return a queue containing all received candles data.
5771	Send configuration to websocket server
5772	Subscribe to the passed pair's ticker channel.
5773	Unsubscribes to a ticker channel for a specified symbol pair
5774	Subscribe to the passed pair's order book channel.
5775	Unsubscribes to the passed pair's order book channel.
5776	Subscribes to the passed pair's raw order book channel.
5777	Unsubscribe to the passed pair's raw order book channel.
5778	Subscribe to the passed pair's trades channel.
5779	Unsubscribes to the trades channel for a specified symbol pair.
5780	Subscribes to the passed pair's OHLC data channel.
5781	Unsubscribes from the OHLC data channel for the given pair and timeframe.
5782	Authenticate with the Bitfinex API.
5783	Cancel one or multiple orders via Websocket.
5784	Handling device command messages and passing information to a registered callback
5785	Handles gateway command messages, parses source device, and passes information to registered callback.
5786	Parses source device from topic string and passes the information on to the registered device command callback when notification message is received.
5787	Registers one or more new device types.
5788	Publish an event to Watson IoT Platform.
5789	Update an existing device with optional metadata and device information. Returns the updated device or raises an exception if the update fails.
5790	Iterate through all Connectors.
5791	List all device management extension packages
5792	Create a new device management extension package. In case of failure it throws APIException.
5793	Update a schema by sending a PUT request with the schemaId and schemaDefinition.
5794	Disconnect the client from IBM Watson IoT Platform.
5795	Handles the connection response from the MQTT broker and manages subscriptions.
5796	Subscribe to device event messages.
5797	Subscribes to device status messages. Returns the Message ID if successful, otherwise returns 0.
5798	Subscribes to device command messages.
5799	Publish a command to a device
5800	Handle messages that have not been handled by specific callbacks.
5801	This interface handles internal device event messages by parsing the event source from the topic string and forwarding the information to a registered device event callback.
5802	Internal callback for device status messages, parses source device from topic string and passes the information on to the registered device status callback.
5803	Application status callback internal handler.
5804	Retrieves the last cached message for specified event from a specific device.
5805	Retrieves a list of the last cached message for all events from a specific device.
5806	Retrieve bulk devices and returns JSON response; raises Exception on failure.
5807	Initiates a device management request, such as reboot. In case of failure it throws an ApiException.
5808	Get a list of device management request device statuses or an individual device mangaement request device status.
5809	Force a flush of the index to storage. Renders index inaccessible.
5810	Return number of objects that intersect the given coordinates.
5811	Returns the k-nearest objects to the given coordinates.
5812	Returns the bounds of the index based on the specified coordinate ordering.
5813	Deletes items from the index with the given 'id' within the specified coordinates.
5814	Creates an index from an iterable stream of data.
5815	Must be overridden. Must return a string with the loaded data.
5816	Deletes the item from the container within the specified coordinates.
5817	Checks return value and raises error if non-zero
5818	Attempt an import of the specified application
5819	Initializes the Flask application with Common.configures WhiteNoise if fileserver disabled.configures cache with settings sets before_request and after_request callbacks for request and response time. handles favicon route.
5820	Serves the Flask application.
5821	For djangorestframework <=2.3.14, constructs a URL set for a versatile image field using provided value and sizes.
5822	Crops an image to the specified width and height, centered on the given Primary Point of Interest (ppoi). Adjusts the crop based on the original image's aspect ratio.
5823	Return a BytesIO instance of `image` cropped to `width` and `height`.
5824	Return a BytesIO instance of `image` that fits in a bounding box. Bounding box dimensions are `width`x`height`.
5825	Return a BytesIO instance of `image` with inverted colors.
5826	Ensure data is prepped before handing off to ImageField.
5827	Process and save the field's placeholder image to the same storage class in a top level folder.
5828	Return field's value just before saving, update ppoi field.
5829	Updates the ppoi field of a model instance before it is saved. This method ensures that the ppoi is updated immediately before the instance is saved. If the instance's attribute does not have a ppoi, the method does nothing. If the instance's attribute is a VersatileImageField File object, the ppoi is obtained and set on the instance. If no file is present, the ppoi field remains unchanged.
5830	Handle data sent from MultiValueField forms that set ppoi values.
5831	Return a formfield with custom defaults, allowing overriding certain options.
5832	Prepare field for serialization.
5833	Iterate over django.apps.get_app_configs() and discover versatileimagefield.py modules.
5834	Unregister a SizedImage subclass
5835	Unregister the FilteredImage subclass currently assigned to attr_name.
5836	Return the appropriate URL based on conditions.
5837	Builds field filters and sizers based on the field's name and storage.
5838	Return the location where filtered images are stored.
5839	Return the location where sized images are stored.
5840	Return the location where filtered + sized images are stored.
5841	Delete files in `root_folder` that match `regex` before file extension.
5842	Preprocess an image. Calls any image format specific pre-processors (if defined). Rotates image based on EXIF orientation. Ensures ICC profile is preserved. Subclasses may return additional save keyword arguments.
5843	Receive a PIL Image instance of a GIF and return 2-tuple.
5844	Converts a PIL Image instance of a JPEG to RGB and returns a 2-tuple containing the converted image and save parameters.
5845	Return a PIL Image instance stored at `path_to_image`.
5846	Save an image to self.storage at save_path with specified file extension and MIME type.
5847	Return PPOI value as a string.
5848	Create a resized image with specified dimensions and save it to storage.
5849	Render the widget as an HTML string.
5850	Get the context to render this widget with.
5851	Build an attribute dictionary.
5852	Returns a resized image path based on given width, height, and filename key.
5853	Return the 'filtered path' by constructing it based on the input path and applying a filter key.
5854	Validate and normalize a list of size keys.
5855	Build a URL from `image_key`.
5856	Retrieve a validated and prepped Rendition Key Set from settings.VERSATILEIMAGEFIELD_RENDITION_KEY_SETS
5857	Format a WASM instruction into a human-readable text.
5858	Takes a `FunctionBody` and optionally a `FunctionType`, yielding string representation of the function line by line. The function type is required for formatting function parameter and return value information.
5859	Decodes raw bytecode, yielding `Instruction`s.
5860	Decodes raw WASM modules, yielding `ModuleFragment`s.
5861	Deprecates a function, printing a warning on the first usage.
5862	Connect to the server.
5863	Close the connection.
5864	Parse a response from the AGI and parse it into a dictionary.
5865	Handle an incoming FastAGI request and route it to the appropriate handler.
5866	Parse AGI results using Regular expression.
5867	Checks AGI code and returns dict for error handling
5868	Reset all instances for unit testing, optionally using a specific UID and reinitializing generators.
5869	Mostly used for debugging
5870	Returns metadata from a package directory.
5871	Get primary key properties for a SQLAlchemy model.
5872	Deserialize a serialized value to a model instance. If the parent schema is transient, create a new (transient) instance. Otherwise, attempt to find an existing instance in the database.
5873	Retrieve the related object from an existing instance in the DB.
5874	Updates declared fields with fields converted from the SQLAlchemy model
5875	Deserialize data to internal representation
5876	Split serialized attrs to ensure association proxies are passed separately.
5877	Deletes old stellar tables that are not used anymore.
5878	Takes a snapshot of the database
5879	Returns a list of snapshots
5880	Restores the database from a snapshot.
5881	Removes a snapshot.
5882	Renames a snapshot with a new name.
5883	Replaces a snapshot by removing the existing one and creating a new one.
5884	Updates indexes after each epoch for shuffling
5885	Clean text using textacy's default function
5886	Apply function to list of elements, automatically determining the chunk size.
5887	Generate a function that will clean and tokenize text.
5888	Combines the cleaner and tokenizer to process text.
5889	Apply cleaner -> tokenizer in parallel.
5890	Analyze document length statistics for padding strategy.
5891	Convert word counts to a sorted pandas DataFrame.
5892	Perform param type mapping with logic for non-standard types and default to str.
5893	Parses a JSON dict and returns a nested dict representation of the interfaces
5894	Return the inverse of this bidict.
5895	Update item, rolling back on failure.
5896	A shallow copy.
5897	A shallow copy of this ordered bidict.
5898	Return True if self and other are equal, order-sensitive.
5899	Yield the inverse items of the provided object.
5900	Remove all items.
5901	Move an existing key to the beginning or end of an ordered bidict.
5902	Create a new temporary file and write some initial text to it.
5903	Get a list of contacts from one or more address books
5904	Merge parsed command line arguments into a config object.
5905	Load all address books with the given names from the config.
5906	Prepare search query string from command line args for filtering vcards.
5907	Create a new contact.
5908	Prints a birthday contact table from a list of vCards, optionally in machine-readable format.
5909	Generate a phone application friendly contact table based on search terms and vcard list.
5910	Print a user friendly contacts table.
5911	Modifies a contact in an external editor.
5912	Remove a contact from the addressbook with optional force option to skip confirmation.
5913	Open the vcard file for a contact in an external editor.
5914	Merge two contacts into one.
5915	Copy or move a contact to a different address book.
5916	Find the name of the action for the supplied alias.
5917	Converts a configuration option to boolean. If the option is not present, sets it to the default value. If the value is "yes" or "no", converts it to True or False, respectively. Raises an error for invalid values.
5918	Create a new and empty contact.
5919	Creates a new contact from an existing .vcf file.
5920	Create a new contact from user input.
5921	Clone an existing contact and replace its data with new user input.
5922	Get some part of the "N" entry in the vCard as a list.
5923	Add categories to vcard
5924	Parse type value of phone numbers, email, and post addresses.
5925	Converts list to string recursively supporting nested lists.
5926	Converts string to datetime object by attempting multiple date formats.
5927	Calculate the minimum length of initial substrings of uid1 and uid2 for them to be different.
5928	Search in all fields for contacts matching query
5929	Search in the name field for contacts matching a query.
5930	Search for contacts with a matching uid.
5931	Search an address book for contacts matching a query using a specified method.
5932	Create a dictionary of shortend UIDs for all contacts.
5933	Get the shortened UID for the given UID.
5934	Finds all vcard files inside an address book, optionally filtering by a search string. Returns paths of the matching files as a generator.
5935	Load all vcard files in this address book from disk, applying a search query if provided. Returns the number of successfully loaded cards and errors.
5936	Method for searching a specific address book by its name.
5937	Initialize the dictionary of architectures for assembling via keystone
5938	Initialize the dictionary of architectures for disassembling via capstone
5939	Copies `inspect.getargspec` to support Cython functions lacking `isinstance(types.FunctionType)`. Adjusts for Cython's duck-typed nature.
5940	Parse arguments using given parser, call relevant function, and print result
5941	Prompts user for input and correctly handles prompt message encoding.
5942	Encodes given value so it can be written to given file object.
5943	Adds types, actions, etc. to given argument specification.
5944	Adds given functions as commands to given parser.
5945	Decorator to set custom command name for a function.
5946	Declares an argument for given function. Does not register the function anywhere, nor does it modify the function in any way.
5947	A shortcut for typical confirmation prompt. Returns `True` if user types "yes" or equivalent, `False` if "no" or equivalent, defaults to specified value if user presses Enter. Raises `None` on `KeyboardInterrupt`.
5948	Copy the Query object, optionally replacing the filters, order_by, or limit information on the copy.
5949	When provided with keyword arguments of the form "col=pattern", this function filters entities to return only those that match the given pattern. Patterns can use wildcard characters such as *?* for 0 or 1 character, *\** for 0 or more characters, *+* for 1 or more characters, *!* for exactly 1 character. It appends Pattern objects to the filters and returns a new instance with the updated filters.
5950	This method executes a query and returns a key where ZSET results are stored for pagination. It requires a positive integer timeout for key expiration.
5951	Returns only the first result from the query, if any.
5952	Deletes entities that match the query, with optional blocksize for bulk deletion.
5953	A function to handle on_delete semantics for OneToMany relationships, avoiding the complexity of 'cascade'.
5954	Performs prefix, suffix, and pattern match operations in Redis.
5955	Estimates the total work necessary to calculate the prefix match over the given index with the provided prefix.
5956	Search for model ids that match provided filters, with optional ordering, offset, and count.
5957	Returns the count of the items that match the provided filters.
5958	Tries to retrieve the _conn attribute from an object. If not found, uses other methods to get the global default connection.
5959	Generates an inverted index key for full-text searching by lowercasing, splitting by whitespace, and stripping punctuation.
5960	Refresh indices of entities in a model. Fetches entities in blocks and commits index updates.
5961	Clean out old index data from a model, specifically for item deletion in rom versions <= 0.27.0. Yields progress through re-checking data.
5962	Adds an entity to the session.
5963	Fetches an entity from the session based on primary key.
5964	Write data to Redis using Lua script.
5965	Save the current entity to Redis, optionally forcing a full save or re-saving after deletion.
5966	Deletes the entity immediately and handles on_delete operations. Performs pre and post-commit hooks if specified.
5967	Fetch one or more entities from the session or Redis.
5968	Attach a reducer function to a given type in the dispatch table.
5969	Construct or retrieve a semaphore with the given name. If value is None, try to retrieve an existing named semaphore. Else create a new semaphore with the given value.
5970	Returns the number of CPUs the current process can use.
5971	Safely send back a result or exception to a result queue.
5972	Evaluates calls from call_queue and places the results in result_queue. This worker runs in a separate process.
5973	Fills call_queue with _WorkItems from pending_work_items.
5974	ensures all workers and management thread are running
5975	Wrap non-picklable object for serialization using cloudpickle.
5976	Spawns a server process for this manager object.
5977	Return a wrapper for an fd.
5978	Return the current ReusableExecutor instance. Start a new instance if it has not been started already or if the previous instance was left in a broken state.
5979	Wait for the cache to be empty before resizing the pool.
5980	Return info about parent needed by child to unpickle process object
5981	Try to get current process ready to unpickle process object.
5982	Closes all the file descriptors except those in keep_fds.
5983	Terminate a process and its descendants.
5984	Recursively kills a process and its descendants
5985	Return a formatted string with the exitcodes of terminated workers. If necessary, wait up to .25s for the system to correctly set the exitcode of one terminated worker.
5986	Format a list of exit codes with associated signal names if available.
5987	Run semaphore tracker to register, unregister, and cleanup semaphores.
5988	Ensures that a semaphore tracker process is running by launching it if necessary.
5989	Simple event processor that prints out event information.
5990	Program counter.
5991	Almost a copy of code.interact. Closely emulate the interactive Python interpreter.
5992	Split a command line's arguments in a shell-like manner returned as a list of lists. Use ';;' with white space to indicate separate commands.
5993	Returns a stack of frames for debugging purposes, excluding certain frames based on settings and filtering. Also, adds traceback frames if they exist.
5994	Run each function in `hooks` with args and return True if any function returns True.
5995	Remove memory of state variables set in the command processor
5996	Tries to evaluate arg as an integer and returns it. Returns None if evaluation fails.
5997	Ensure argument is an integer within specified range.
5998	Handle debugger commands.
5999	Arrange for file of debugger commands to get read in the process-command loop.
6000	Finds the next token in a string from a given start position and returns the token and the position of the next blank character.
6001	Report debugger error messages with an optional prefix and location, and optionally raise an exception.
6002	Script interface to read a command. prompt is a parameter for compatibilty and is ignored.
6003	Closes both input and output
6004	Disassemble a code object.
6005	Disassemble byte string of code.
6006	Return a count of the number of frames
6007	Get the name of the function being called from a stack frame.
6008	Print count entries of the stack trace.
6009	Find subcmd in self.subcmds
6010	Show short help for a subcommand.
6011	Add subcommand to available subcommands for this object, using supplied docstring and callback.
6012	Run subcmd_name with args using obj for the environment.
6013	Enters the debugger with optional options and parameters to control the debug session. Can specify the stack frame level to go back, how many line events to ignore after the debug call, and whether to start the debugger in post-mortem mode.
6014	Show short help for all commands in `category`.
6015	Current line number in source file
6016	Returns the first frame that is a debugged frame by iterating from the given frame and moving up the traceback until a frame with f_trace set is found.
6017	Invert threading._active to map thread names to IDs.
6018	If arg is an int, use that otherwise take default.
6019	Return True if arg is 'on' or 1, False if arg is 'off' or 0, raises ValueError for other values.
6020	Set a Boolean-valued debugger setting.
6021	Set an Integer-valued debugger setting.
6022	Show boolean-valued debugger setting.
6023	Show integer value of an attribute
6024	Generic subcommand value display
6025	Return True if we are looking at a def statement.
6026	Check if given line is a class definition statement.
6027	quit command when several threads are involved.
6028	Check if the TERM environment variable indicates an unsupported terminal type
6029	Given RGB values in hex, determine if the color is considered dark based on a midpoint threshold.
6030	Return frame signature for display expressions.
6031	Lists all display items; returns 0 if none
6032	display any items that are active
6033	format display item
6034	Read one message unit, buffer if necessary. Raises EOFError on EOF.
6035	Set breakpoint at current location or specified frame.
6036	Error message for undefined subcommand.
6037	Run a frame command. Handle different parameter variations.
6038	Try to pretty print a simple case where a list is not nested. Return True if we can do it and False if not.
6039	Find the corresponding signal name for 'num'. Return None if 'num' is invalid.
6040	Find the corresponding signal number for 'name'. Return None if 'name' is invalid.
6041	Return a canonical signal name for a given signal name or number.
6042	A replacement for signal.signal which chains the signal behind the debugger's handler
6043	Check and adjust signal handlers if they have changed or are not initially set.
6044	Print information about a signal or show all signal handlers.
6045	Delegate actions specified in 'arg' to another method.
6046	Set whether to print or not when a signal is caught.
6047	Handles signal reception and may print method, stack trace, stop execution, or pass the signal along.
6048	Given a file name, extract the most likely module name.
6049	Search for and return a full pathname for filename in a list of directories. If no file is found, return None.
6050	Do a shell-like path lookup for py_script and return the results. If we can't find anything return py_script
6051	Get list of Python files in caller's directory without path and .py extension
6052	Write a newline-terminated message to an output object.
6053	Execution status of the program.
6054	List commands arranged in an aligned columns.
6055	Enter debugger read loop after your program has crashed.
6056	Closes both socket and server connection.
6057	Sends a message to the debugger without adding a newline, breaking the message into chunks if necessary.
6058	Complete an arbitrary expression.
6059	Invoke a debugger command from inside a python shell called inside the debugger.
6060	Add `frame_or_fn` to the list of functions that are not to be debugged.
6061	Convert a filename to its canonical representation, resolving relative paths and handling special cases like internal Python names.
6062	Return filename or the basename of that depending on the basename setting
6063	Return True if debugging is in progress.
6064	Does the magic to determine if we stop here and run a command processor or not. If so, return True and set the stop_reason.
6065	Sets to stop on the next event that happens in frame 'frame'.
6066	Mini stack trace routine for threads.
6067	Get file information.
6068	Check whether a breakpoint should be triggered based on function name.
6069	Removes a breakpoint. Returns True if the breakpoint was removed and False otherwise.
6070	Removes a breakpoint given its breakpoint number.
6071	Enable or disable all breakpoints.
6072	Enable or disable a breakpoint given its breakpoint number.
6073	Removes all breakpoints at a given filename and line number. Returns a list of breakpoint numbers deleted.
6074	Set input file for reading.
6075	Read a line of input, ignoring prompt and use_raw arguments; raise EOFError on EOF.
6076	Ensure yes or no response to a prompt. Return True for yes, False for no.
6077	Adds whitespace token to the input string and updates the position.
6078	Extract and add number token
6079	Wrap a `sqlalchemy.orm.query.Query` object into a `concurrent.futures.Future` so that it can be yielded.
6080	Restore an original login session, checking the signed session. If valid, re-authenticate the user.
6081	Load a function from a module given its path.
6082	Iterate over documents in a Luminoso project, optionally showing progress.
6083	Handle arguments for the 'lumi-download' command.
6084	Read a JSON or CSV file and convert it into a JSON stream, which will be saved in an anonymous temp file.
6085	Deduce the format of a file and return its contents in a usable format.
6086	Normalizes data for upload to Luminoso Analytics system.Currently it only normalizes dates.If date_format is not specified or no date in a particular doc, the doc is yielded unchanged.
6087	Convert a date in a given format to epoch time.
6088	Determine the encoding of a file using ftfy's encoding detector based on a sample of its first megabyte.
6089	Load a JSON stream and return a generator, yielding one object at a time.
6090	Convert a file in some other encoding into a temporary file that's in UTF-8.
6091	Open a CSV file using Python 2's CSV module, handling UTF-16 encoding and different delimiters.
6092	Yield rows from CSV reader as dictionaries.
6093	Convert a file to a JSON stream as a script.
6094	Returns an object that makes requests to the API, authenticated with a saved or specified long-lived token, at URLs beginning with `url`.
6095	Stores a long-lived API token to a local file.
6096	Make a request via the `requests` module and convert HTTP errors to Python exceptions.
6097	HTTP DELETE operation.
6098	Polls the API to wait for a project build to complete and returns the build info. Raises an error if the build fails.
6099	Get the "root URL" for a full URL.
6100	Obtain and save the user's long-lived API token in a local file. If no token exists, create one. Returns the saved token.
6101	This method makes a request of the specified type to the given URL, expects a JSON response, and returns the 'result' value. If there is an 'error' value in the response, it raises a LuminosoAPIError.
6102	Make a POST request to the given path with data in its body and return the JSON-decoded result.
6103	Return a new LuminosoClient for a subpath of this one.
6104	Get the default account ID for accessing projects.
6105	Get the server's API documentation.
6106	Waits for an asynchronous task to finish by polling an API endpoint until the job is done.
6107	Get the raw text of a response. This is only generally useful for specific URLs, such as documentation.
6108	Print a JSON list of JSON objects in CSV format.
6109	Read parameters from input file, -j, and -p arguments, in that order.
6110	Limit a document to just the three fields we should upload.
6111	Given an iterator of documents, upload them as a Luminoso project.
6112	Given a LuminosoClient and a filename with JSON lines, create a project from the documents.
6113	Handle arguments for the 'lumi-upload' command.
6114	Upload a JSON stream to Luminoso with the given account name and project name.
6115	Upload a file to Luminoso with the given account and project name.
6116	Handle command line arguments to upload a file to a Luminoso project as a script.
6117	Obtain a short-lived token using username and password, and use that token to create an auth object.
6118	Set http session.
6119	Login to enedis.
6120	Get data for a specific resource with optional date range.
6121	Get the latest data from Enedis.
6122	Load the view on first load.
6123	Load the view on first load or based on other factors.
6124	Execute the correct handler depending on the connection type for the GET request.
6125	Handles messages from enaml.js, decoding them and performing actions based on the type and name provided.
6126	When pages change, update the menus
6127	Generate the handlers for this site.
6128	When an event from JavaScript is received, this method looks up the corresponding Enaml node and invokes the appropriate action based on the event type and name.
6129	Send event data to client's browser via websocket.
6130	Create the toolkit widget for the proxy object.
6131	Initialize the state of the toolkit widget.
6132	Reimplemented destructor to clear toolkit widget reference and update cache.
6133	Handles child added event by inserting the child toolkit widget in the correct position. Subclasses may need to reimplement for more control.
6134	Handles the child removed event from the declaration by unparenting the child toolkit widget. Subclasses may reimplement this method for custom control.
6135	Iterate the child toolkit widgets for this object and yield non-None widgets.
6136	Set attribute on widget based on value
6137	Update the proxy widget when the Widget data changes
6138	Notify websocket client of change if a change occurs during active websocket connection.
6139	Find nodes matching the given xpath query
6140	Prepare for rendering
6141	Initialize the widget with the source. If no source, use super method.
6142	Sets the source by parsing HTML and inserting it into the component, then reinitializes the widget.
6143	If the mode changes, refresh the items.
6144	Handle change in 'objects' list of Include; update parentage and destroy old objects if necessary.
6145	Updates the block's children when they change.
6146	Read the contents of a file located relative to setup.py
6147	Exit with error message and status code, flushing stderr.
6148	Print any parsing error and exit with status -1
6149	Returns an item from the menu by name, case-insensitive, or raises StopIteration if not found.
6150	Clear out the current session on the remote and setup a new one.
6151	Resets the store by clearing it and acquiring a cookie, updating the CSRF token for subsequent requests, and returns the response.
6152	Search for dominos pizza stores using a search term.
6153	Set local cookies by initialising the delivery system on the remote.
6154	Retrieve the menu from the selected store.
6155	Add an item to the current basket
6156	Add a pizza to the current basket with specified variant and quantity.
6157	Add a side item to the basket with a specified quantity.
6158	Remove an item from the current basket.
6159	Select the payment method for a purchase.
6160	Process payment using the selected method.
6161	Make a HTTP GET request to the Dominos UK API with the given parameters for the current session.
6162	Make a HTTP POST request to the Dominos UK API with given parameters.
6163	Make a HTTP request to the Dominos UK API with the given parameters for the current session.
6164	Add an item to the end of the menu before the exit item.
6165	Add the exit item if necessary. Ensure no duplicate exit items. Returns True if item needed to be added, otherwise False.
6166	Redraws the menu and refreshes the screen. Adds title, subtitle, and items with appropriate styling.
6167	Process user input determining action based on character.
6168	Selects current item and runs it.
6169	Take an old-style menuData dictionary and return a CursesMenu.
6170	Get the top or flop N results based on a column value for each specified group columns.
6171	Get the top or flop N results based on a function and a column value that aggregates the input. The result is composed by all the original lines including only lines corresponding to the top groups
6172	Convert string column into datetime column
6173	Convert datetime column into string column
6174	Convert the format of a date column
6175	Convert column's type into specified type, optionally renaming the column.
6176	Create rank columns based on numeric values to be ranked.
6177	Generate a line for each bar of a waterfall chart, compute variation and variation rate for each line.
6178	Apply a mathematical operation to columns or numbers in a DataFrame and create a new column with the result.
6179	Round each column's values to specified decimals and create a new column if desired.
6180	Get absolute numeric value of each element of a column
6181	Pivot the data. Reverse operation of melting.
6182	Pivot a DataFrame by grouping variables and filling with specified values.
6183	Aggregate values by groups based on specified columns and aggregation functions.
6184	Calculate cumulative sum of a column in a dataframe by grouping on specified levels.
6185	Add missing row to a DataFrame based on a reference column
6186	Decorator to catch exceptions and log information without raising.
6187	Decorator to log a message before executing a function
6188	Decorator to log the execution time of a function.
6189	Decorator to log the shapes of input and output dataframes.
6190	Rename data values and column names according to the specified locale.
6191	Compute cumulative sum for specified columns in a DataFrame, grouping by given identifiers and ordering by references.
6192	Combines columns for aggregation to produce "All" category.
6193	Get the value of a function's parameter based on its signature and the call's args and kwargs.
6194	Remove old entries from the cache.
6195	Creates aggregates following a given hierarchy
6196	Keep the row(s) of the data corresponding to the maximal value in a column, optionally grouped by one or more columns.
6197	Keep the row of the data corresponding to the minimal value in a column.
6198	Fill NaN values in a column with a given value or a value from another column.
6199	Add a human-readable offset to a date object and return the new date. Support for additional shortcuts like "w", "week", "m", "month", "y", "year" for a 7-day week, fixed month, and fixed year increment.
6200	Return a new date that is `nb_months` months before or after the input date. If the landing date doesn't exist, return the last day of the landing month. The function handles leap years and date wrapping.
6201	Adds a specified number of years to a date, adjusting for leap years and non-existent dates.
6202	Parse a date string and return the corresponding date object. Supports offset and symbolic names like TODAY, YESTERDAY, TOMORROW.
6203	Filter dataframe's rows based on date range/criteria.
6204	Add percentage column to dataframe based on groupby logic.
6205	Optimize parameters using SGD, AdaGrad, or AdaDelta
6206	Return updates in the training.
6207	Get parameters to be optimized and freeze specified parameters.
6208	Return updates from optimization.
6209	Compute first glimpse position using down-sampled image.
6210	Initialize parameters for encoder, decoder, and classifier.
6211	Build the computation graph for a neural network model, including encoding, decoding, and classification, and calculate the combined cost.
6212	Applies a function to all dataset objects.
6213	Makes targets one-hot vectors.
6214	Print dataset statistics.
6215	Train over mini-batches and evaluate periodically.
6216	Sample outputs from LM
6217	Computes the alignment weights based on the previous state.
6218	Compute the context vector with soft attention.
6219	Concatenates multiple variables along a specified axis
6220	Pads sequences in the train, valid, and test sets to a given length on the specified side.
6221	Perform RMSPROP optimization by updating parameters and maintain running average of gradients' squares.
6222	Report elapsed time.
6223	Run the model with validation data and return costs.
6224	Called after each iteration, aggregates and reports data.
6225	Create inner loop variables for neural network computations
6226	Run an internal scan step with dummy input variables.
6227	Momentum SGD optimization core.
6228	Execute `then_branch` when training.
6229	Skip N batches in the training.
6230	Load parameters for the training. This method can load free parameters and resume the training progress.
6231	Train the model and return costs.
6232	Run one training iteration.
6233	Run one valid iteration, return true if to continue training.
6234	Report the scores and record them in the log.
6235	Get specified split of data.
6236	Apply a function to tensors.
6237	Report usage of training parameters.
6238	An alias of deepy.tensor.var.
6239	Create vars given a dataset and set test values for specified split.
6240	Creates a shared theano scalar value from the given input value.
6241	Stack encoding layers before stacking decoding layers
6242	Stack decoding layers.
6243	Encode given input.
6244	Decode given representation using a neural network
6245	Create a 2D Gaussian kernel given the dimension and standard deviation.
6246	Registers a layer for training while keeping its output unstacked.
6247	Monitors the outputs of each layer for troubleshooting convergence problems.
6248	Return all parameters.
6249	Sets up variables based on input tensor. If input_tensor is an int, converts it to a variable. Appends input tensor to input_variables, assigns to output, and sets test_output.
6250	Compute network output.
6251	Save parameters to file.
6252	Load parameters from file and apply them to the model.
6253	Print network statistics.
6254	Registers parameters and updates the parameter count.
6255	Register updates that will be executed in each iteration.
6256	Register updates for training phase.
6257	Registers monitors as a tuple of name and Theano variable.
6258	Calculate the L2 norm of multiple tensors.
6259	Dumps one element to file_obj, a file opened in write mode.
6260	load contents from file_obj returning a generator that yields one element at a time
6261	Load parameters to the block
6262	Create OAuth 2.0 request elements based on request type, credentials, and parameters.
6263	decode state and return param.
6264	Override this method to fix Facebook's naming deviation by handling "expires" and "token_type".
6265	Removes client_id and client_secret from request params if request_type is ACCESS_TOKEN_REQUEST_TYPE
6266	Login handler for OpenID, handling both GET and POST requests.
6267	Normalize values in a dictionary that are single-item iterables.
6268	Converts list of tuples to dictionary with duplicate keys converted to lists.
6269	Parses response body from JSON, XML, or query string and returns appropriate data structure.
6270	Returns a provider class.
6271	Creates value for `Set-Cookie` HTTP header.
6272	Adds the session cookie to headers if data is present
6273	Extracts the session data from cookie.
6274	Gets session data lazily.
6275	Creates signature for the session.
6276	Converts the value to a signed string with timestamp.
6277	Check if the credentials are valid or expired.
6278	Returns True if credentials expire sooner than specified.
6279	Converts the credentials to a percent encoded string for storage.
6280	Return true if string is binary data.
6281	Return the whole response content.
6282	Creates OAuth1 request elements based on the request type and credentials.
6283	Access user info and add email if available.
6284	Decorator for Flask view functions.
6285	Launches the OpenID authentication procedure.
6286	Generate a session key string using a prefix, name, and given key.
6287	Save a value to a session.
6288	Generate CSRF token.
6289	Logs a message with a pre-formatted prefix.
6290	Check if a HTTP status code is in a specific category.
6291	Splits given url to url base and params converted to list of tuples.
6292	Decorator to wrap Sanic routes with Cross-Origin Resource Sharing (CORS) configuration.
6293	Modifies the response object based on CORS options and modifies the response headers.
6294	Returns the dictionary of CORS specific app configurations.
6295	More flexible str function handling strings, lists, and iterables with lexicographical sorting.
6296	Wraps scalars or string types as a list.
6297	Compare two numbers for approximate equality
6298	Decorator used to mark functions as deprecated
6299	Deserialize a bytestring into an audio segment.
6300	Returns an AudioSegment object from the given file based on its file extension.
6301	Convert numpy array to AudioSegment.
6302	Execute a Sox command in a platform-independent manner, replacing {inputfile} and {outputfile} with temporary files, applying the command, and cleaning up.
6303	Returns a copy of the AudioSegment with silence removed.
6304	Transforms the indicated slice of the AudioSegment into the frequency domain and returns the bins and the values.
6305	Yields self's data in chunks of frame_duration_ms.
6306	Normalize the values in the AudioSegment so that its `spl` property gives `db`. Return a new AudioSegment object with normalized values.
6307	Concatenates multiple AudioSegment objects into a single result without modifying the original objects.
6308	Resample the audio data to specified characteristics.
6309	Serializes object into a bytestring using pickle.
6310	Calculate and return the frequency domain representation of a slice of an audio signal as a spectrogram.
6311	Returns the id of the offset front that has the most overlap with given onset front IDs.
6312	Returns the offset_front_id that corresponds to the first offset front entirely after the given onset_sample_idx.
6313	Get the ID of the offset front that occurs first after the given onset_front_id. The offset must be the closest to the latest onset and occur after it. If no appropriate offset front is found, returns -1.
6314	Find all offset fronts that contain offsets corresponding to onsets in a given onset front. Choose the offset front with the most matching offsets or return -1 if none exist.
6315	Get overlap between an onset and offset frequency front
6316	Updates a segmentation mask by segmenting between two fronts and returns whether the onset channel completed.
6317	Returns the front ID found in `front` at the given `index`. Returns -1 if not found and the item is not a 1.
6318	Yields one onset front ID at a time until they are gone, processing them one at a time from different frequency channels.
6319	Gets the offsets that occur as close as possible to the onsets in a given onset-front.
6320	Remove overlapping points between segmentation mask and fronts.
6321	Removes all fronts from `fronts` which are strictly smaller than `size` consecutive frequencies in length.
6322	Breaks poorly matched onset fronts in a signal by comparing signals between adjacent frequency channels and removing onset fronts less than 3 channels wide.
6323	Merge all touching segments in a mask.
6324	Returns a list of segmentation masks where each has exactly one segment and all other samples are zeroed. Only returns segments larger than a given threshold in total area. Uses parallel processing to separate masks.
6325	Downsamples one of the given matrices (`mask` or `stft`) into the other one's time dimension, so that the time dimensions are equal. Leaves the frequency dimension untouched.
6326	ASAP task worker
- Converts masks to binary (1 or 0)
- Multiplies masks with STFTs
- Computes iSTFT and puts results in queue
6327	Apply a bandpass filter to data using specified low and high cutoff frequencies and filter order.
6328	Applies a lowpass filter to the given data based on the specified cutoff frequency, sample rate, and filter order.
6329	Seperates the outcome feature from the data and creates the onehot vector for each row.
6330	Standardizes continuous features and expands categorical features.
6331	Check if two edge lists have the same edges regardless of order.
6332	Groups audit files by features that have similar scores across repairs using a given measurer and similarity bound.
6333	Loads a confusion matrix in a two-level dictionary format from a file, skipping the first line, and sorting the repair levels.
6334	Separates the outcome feature from the data.
6335	Checks for alternative index-url in pip.conf
6336	Attempt to detect requirements files in the current working directory.
6337	Resolve all streams on the network and return a list of StreamInfo objects.
6338	Resolve all streams with a specific value for a given property. Returns a list of matching StreamInfo objects.
6339	Resolve all streams that match a given predicate.
6340	Error handler function. Translates an error code into an exception.
6341	Push a sample into the outlet.
6342	Push a list of samples into the outlet.
6343	Retrieves the complete information of a stream, including its extended description, with an optional timeout. Throws exceptions on timeout or lost stream source.
6344	Subscribe to the data stream.
6345	Retrieve an estimated time correction offset for the given stream
6346	Retrieves a child XML element by name.
6347	Retrieves the next sibling element, optionally filtering by name.
6348	Returns the previous sibling in the children list of the parent node. If a name is provided, returns the previous sibling with the given name.
6349	Set the element's name. Returns False if the node is empty.
6350	Set the element's value. Returns False if the node is empty.
6351	Appends a child element with the specified name.
6352	Prepends a child element with the specified name.
6353	Appends a copy of the specified element as a child.
6354	Prepend a copy of the specified element as a child.
6355	Removes a given child element, specified by name or as an element.
6356	Obtain the set of currently present streams on the network. Returns a list of matching StreamInfo objects (with empty desc field), any of which can subsequently be used to open an inlet.
6357	See all token associated with a given token. PAIR
6358	Shows autocomplete results for a given token.
6359	Compute edge ngram of token from min, excluding the token itself.
6360	Yields items from a pipeline of functions.
6361	Customized version of imap_unordered that directly sends chunks to func, avoiding unnecessary data loading into RAM.
6362	Generate fuzzy word neighbors by inverting, substituting, inserting, and removing characters.
6363	Compute fuzzy extensions of word
6364	Compute fuzzy extensions of a word that exist in an index.
6365	Try to extract the bigger group of interlinked tokens. Should generally be used at last in the collectors chain.
6366	Display help message for a command or list all available commands.
6367	Print useful information from Redis DB.
6368	Prints raw content of a DB key.
6369	Compute a geohash from latitude and longitude.
6370	Get document from index with its id.
6371	Get index details for a document by its id.
6372	Return document linked to word with higher score.
6373	Print distance score between two strings using '|' as separator.
6374	Send the request and return the response.
6375	Concurrently converts a list of Requests to Responses.
6376	Gets value of bits between selected range from memory
6377	Convert HArray signal or value to Bits signal or value.
6378	Converts a Python slice to an SLICE HDL type value.
6379	Find files by pattern in directory
6380	Check if any item in "iterable" equals "sigOrVal"
6381	Generate a for loop for static items.
6382	Logical shift left
6383	Returns the number of bits required to store x-1 for example x=8 returns 3
6384	Check if given number is a power of two.
6385	C-like case of switch statement
6386	Default of switch statement
6387	Registers signals from interfaces for Interface or Unit instances.
6388	Puts new Simulation at the beginning.
6389	Logs a change in signal value to the VCD writer.
6390	Serialize HWProcess instance
6391	Walks all interfaces on a unit, instantiates agents for each interface, and returns the monitor/driver functions to be added to the simulation as processes.
6392	If interface has associated clk return it otherwise try to find clk on parent recursively
6393	distinct elements from iterable based on key selector function
6394	Group items in a collection by a key function without initial sorting. Order of groups is not guaranteed.
6395	Flatten nested lists, tuples, generators, and maps to a specified depth.
6396	Merge nested IfContainer from else branch to this IfContainer as elif and else branches
6397	Remove unconnected signals from the netlist by identifying and removing signals that do not have driving endpoints.
6398	Returns whether the process consists solely of unconditional assignments that are deemed unnecessary for merging.
6399	Try to merge two hardware processes and raise an error if it's not possible.
6400	Attempt to merge processes with nearly the same structure into one to minimize the number of processes.
6401	Handle write request in monitor mode
6402	Convert unit to RTL using specified serializer.
6403	Resolve name for process and mark outputs of statements as not hidden.
6404	Cut off drivers from statements
6405	Creates a new signal in this context
6406	Builds Entity and Architecture from netlist representation.
6407	Get maximum _instId from all assignments in statement.
6408	Retrieve and return the maximum statement ID from a given process.
6409	write data to interface
6410	Toggle the direction of the interface.
6411	load declaratoins from _declr method
6412	Generate _sig for each interface without subinterface, return existing _sig if available
6413	Return the name in HDL format, prioritizing the _boundedEntityPort attribute if available. Otherwise, use the _getFullName method and replace dots with a specified separator.
6414	Sum of all width of interfaces in this interface
6415	get sensitivity type for operator
6416	Load all operands and process them by self._evalFn.
6417	Converts between signed-unsigned values, int, and bool types, handling specific bit lengths and data types.
6418	Reinterpret signal of type Bits to signal of type HStruct
6419	Count the number of complete words between two addresses.
6420	Groups transaction parts split on words into words. Yields tuples of word index and list of transaction parts in that word.
6421	Pretty print interface
6422	Convert transaction template into FrameTmpls. Adjust frame length and padding based on parameters.
6423	Walk enumerated words in this frame Yield generator of tuples (wordIndex, list of TransParts in this word)
6424	Packs data into list of BitsVal of specified dataWidth
6425	Clean enclosures and sensitivity info for outputs and statements.
6426	Discover enclosure for list of statements
6427	Discover sensitivity for a list of signals and add it to the context if no event-dependent sensitivity is found.
6428	get RtlNetlist context from signals
6429	Update signal IO after reduction attempt.
6430	Update IO, sensitivity, and context after merging statements.
6431	Determine if two statement lists can be merged into one.
6432	Merge statements in list to remove duplicated if-then-else trees
6433	Merge two lists of statements into one
6434	Simplifies statements in the list
6435	Propagate event dependency flag to child statements after parent statement becomes event dependent
6436	Assign parent statement and propagate dependency flags if necessary
6437	Append statements to this container under certain conditions.
6438	Disconnects this statement from signals and deletes it from RtlNetlist context.
6439	Create a register in this unit.
6440	Create signal in this unit.
6441	Disconnect internal signals so unit can be reused by parent unit
6442	Recursively walk through a hierarchical structure and yield all simple values, optionally skipping padding fields.
6443	The method unpacks a structured data format using a provided data source and updates corresponding field values accordingly.
6444	Converts the sign of a numeric value or array from signed to unsigned or vice versa, or leaves it unchanged if the sign specification is none.
6445	Register sensitivity for a process.
6446	Evaluates list of values as condition
6447	Connect ports of simulation models by name
6448	Create value updater for simulation.
6449	Create a value updater for updating array elements. Returns a function that updates the specified index with the next value and returns whether the update has changed the value.
6450	Create an HDL vector value
6451	Guessed resource usage by HWProcess
6452	Get value of parameter
6453	Sets the value of this parameter after validating it is not read-only or replaced.
6454	Generate flattened register map for HStruct
6455	Resolve ports of discovered memories
6456	Find out if this signal is something indexed.
6457	Construct value of type.
6458	Cast value or signal of this type to another compatible type.
6459	Cast value or signal of this type to another type of same size.
6460	walk parameter instances on this interface
6461	Connect 1D vector signal to this structuralized interface
6462	Concatenate all signals to one big signal, recursively.
6463	Hardcode ROM content into a hardware process due to Verilog restrictions
6464	synthesize all subunits, make connections between them, build entity and component for this unit
6465	Register interface in implementation phase
6466	Return sig and val reduced by & operator or None if it is not possible to statically reduce expression.
6467	Return sig and val reduced by ^ operator or None if reduction is not possible.
6468	Get the root of the name scope.
6469	Decide if a unit should be serialized, considering current and previous serialization states.
6470	Serialize an HdlType instance
6471	Serialize IfContainer instance
6472	If negated return original cond and negated flag.
6473	Construct SimBitsT with cache
6474	Retrieves or generates a constant name for a given value, reusing names for values that have been seen before.
6475	Cut off statements which are drivers of specified signal
6476	Parse HArray type to this transaction template instance
6477	Parse HStruct type to transaction template instance.
6478	Parse any HDL type to this transaction template instance.
6479	Return width of item in original array.
6480	Walks fields in instance of TransTmpl and returns a generator of tuples with bit addresses and TransTmpl instances
6481	Convert negative int to positive int which has same bits set
6482	Merge cases and default of another IfContainer into this statement.
6483	Create and cache indents for efficient retrieval.
6484	Raises an exception if the property is already defined on the object.
6485	Register Param object on interface level object.
6486	Updates parameters on self from another object using an updater function, excluding specified parameters and adding a prefix to parameter names.
6487	Register unit object on interface level object.
6488	Register interface object on interface level object.
6489	Registers array of items on interface level object
6490	Return the first driver if it is the only driver present.
6491	Recursively statistically evaluate result of this operator.
6492	Create operator with result signal
6493	Create copy of this context with increased indent
6494	Try connecting source to interface on unit. Ignore if interface is absent or already has a driver.
6495	Propagate "clk" clock signal to all subcomponents
6496	Propagate "clk" and "rst_n" signals to all subcomponents.
6497	Propagate "clk" clock and reset "rst" signal to all subcomponents
6498	Propagates negative reset "rst_n" signal to all subcomponents
6499	Propagates reset "rst" signal to all subcomponents
6500	Iterate over bits in vector.
6501	Always decide not to serialize obj.
6502	Decide to serialize only first object of its class.
6503	Decide to serialize only objs with uniq parameters and class
6504	Get all name hierarchy separated by '.'
6505	Delegate _make_association on items
6506	Create simulation model and connect it with interfaces of original unit and decorate it with agents.
6507	Create a simulation model for unit
6508	Reconnect model signals to unit for simulation.
6509	Simulate unit VCD for simulation model with given stimulus functions and write output to specified file or standard output.
6510	Process for injecting a callback loop into simulator
6511	Connecting to port item on subunit
6512	Connect internal signal to port item, only for output ports.
6513	Connect signal from internal side of this component to this port
6514	Get signal inside unit based on port direction
6515	Check if process has event dependency on signal
6516	Schedule process on actual time with specified priority.
6517	Add hdl process to execution queue
6518	Schedule combUpdateDoneEv event to signal agents that the current delta step is ending and values from combinational logic are stable.
6519	Apply stashed values to signals. Plan and run processes accordingly.
6520	Resolve write conflicts for signal
6521	Delta step for combinational processes
6522	Delta step for event dependent processes.
6523	Applies stacked values to signals, resolving collisions and running processes.
6524	Read value from signal or interface
6525	Writes a value to a signal or interface, handles type casting and value updates, and schedules value application if necessary.
6526	Add process to events with default priority on current time
6527	Simulates a Unit instance until a specified time, with additional processes.
6528	Create function to create variadic operator function
6529	Converts all ternary operators to IfContainers
6530	Serialize HWProcess objects as VHDL
6531	Compute the hamming distance between two hashes.
6532	Compute the average hash of the given image.
6533	Compute the hamming distance between two images.
6534	Set up Vizio media player platform.
6535	Retrieve the latest state of the device
6536	Mute or unmute the volume based on the input parameter.
6537	Increasing volume of the device.
6538	Decrease volume of the device.
6539	Set the volume level. Adjusts the volume up or down based on the difference from the current volume level.
6540	Restores the starting position
6541	Gets the piece at the given square
6542	Remove a piece from the given square if present, optionally adding it to the hand.
6543	Sets a piece at the given square. An existing piece is replaced.
6544	Checks if the given move would move would leave the king in check or put it into check.
6545	Checks if the king of the other side is attacked.
6546	Checks if the game is over due to checkmate, stalemate or fourfold repetition
6547	Check if the current position is a checkmate.
6548	Check if a game is ended based on the repetition of positions.
6549	Restores the previous position and returns the last move from the stack.
6550	Gets an SFEN (Standardized Form of Encoding Notation) representation of the current chess position, including piece placement, side to move, pieces in hand, and move count.
6551	Parses a move in standard coordinate notation, makes the move and puts it on the move stack. Raises ValueError if neither legal nor a null move. Returns the move.
6552	Computes Zobrist hash for the current board position.
6553	Gets the symbol `p`, `l`, `n`, etc.
6554	Creates a piece instance from a piece symbol. Raises `ValueError` if the symbol is invalid.
6555	Generate an USI string for a chess move, considering promotion and drop pieces.
6556	Parses an USI string and raises ValueError if invalid.
6557	Accepts a string and parses it into many commits.Yields each commit-dictionary.
6558	Parse a single commit into a dictionary.
6559	Loads config, checking CLI arguments for a config file
6560	Load's config then runs Django's execute_from_command_line
6561	Adds argument for config to existing argparser
6562	Load config file and set values
6563	Convert initial config to YAML format with comments.
6564	Documents values in markdown.
6565	Try to convert string to type requested by `cast_as`
6566	Returns all dates from first to last included.
6567	Fast %Y-%m-%d parsing
6568	Load file content from a URL or local path, then process lines accordingly.
6569	Fill missing rates of a currency with the closest available ones.
6570	Compute missing exchange rates by linear interpolation using the two closest available rates.
6571	Gets a rate for a given currency and date, handling fallbacks and errors
6572	Converts an amount from one currency to another using specified conversion rates.
6573	Group iterable by n elements.
6574	Animates given frames for set number of iterations.
6575	Return record `n` as 1,024 bytes; records are indexed from 1.
6576	Write `data` to file record `n`; records are indexed from 1.
6577	Return a memory-map of elements from index `start` to `end`.
6578	Return the text inside the comment area of the file.
6579	Add a new array to the DAF file and update the summary record.
6580	Close this SPK file.
6581	Compute the component values for the time tdb plus tdb2.
6582	Close the file and clear data in segments.
6583	Map the coefficients into memory using a NumPy array.
6584	Generate angles and derivatives for time `tdb` plus `tdb2`.
6585	Visit a function call. Check for logging statements and string format violations.
6586	Process binary operations while processing the first logging argument.
6587	Process dict arguments.
6588	Process f-string arguments, check Python version, and handle logging violations.
6589	Process keyword arguments and check for whitelist violations or exception handling.
6590	Process except blocks and manage current_except_names.
6591	Heuristic to decide whether an AST Call is a logging call.
6592	Retrieves the exception name from an ExceptHandler node in both Python 2 and 3.
6593	Check if value has id attribute and return it.
6594	Checks if a node is a bare exception name from an except block.
6595	Reports a violation if exc_info keyword is used with logging.error or logging.exception.
6596	Deletes file from database only if needed. When editing and the filefield is a new file, deletes the previous file (if any) from the database. Call this function immediately BEFORE saving the instance.
6597	a class decorator to modify a file download widget. it changes the display text of the download link and updates the template substitution and context accordingly.
6598	Returns the freshly rendered content for the template and context described by the PDFResponse.
6599	Returns a PDF response with a template rendered with the given context.
6600	Given a unicode string, converts it to a valid ascii charset string for use in HTTP headers and similar contexts. Escapes certain characters and wraps in double-quotes.
6601	Sets defaults for class Meta declarations from a module or explicitly passed keyword arguments.
6602	Converts a given string from CamelCase to under_score.
6603	Builds all indices listed in model's Meta class at import time.
6604	Loads and parses a .csv file into a list of PriceModel objects.
6605	Loads the content of the text file.
6606	Parses a CSV line into a price element.
6607	Translates the incoming symbol into a locally-used form using a mapping from the database.
6608	Loads all symbol maps from db
6609	Reuses or initializes a module-level db session
6610	Add individual price
6611	Imports prices from a CSV file into a PriceDbApplication with the specified currency.
6612	Displays the last price for a given symbol or all symbols if no symbol is provided
6613	Display all prices
6614	Downloads the latest prices for specified currency, symbol, namespace, and agent.
6615	Delete old prices, leaving just the last.
6616	Return the default session. The path is read from the default config.
6617	Creates a symbol mapping.
6618	Displays all symbol maps
6619	Finds the map by in-symbol
6620	Read text lines from a file
6621	Maps the price entity
6622	Maps PriceModel to Price entity for saving
6623	Read the config file
6624	Gets the default config path from resources
6625	Copy the config template into user's directory
6626	Returns the path where the active config file is expected. This is the user's profile folder.
6627	Reads the contents of the config file
6628	Sets a value in config.
6629	Retrieves a config value using section and option name.
6630	Save the config file
6631	Splits the symbol into namespace, symbol tuple.
6632	Creates a new price record
6633	Add or update a price entity in the database.
6634	Downloads and saves price data.
6635	Returns the current db session
6636	Fetches all price objects based on the given date and currency.
6637	Returns the latest price on a given date.
6638	Prune historical prices for all symbols, leaving only the latest. Returns the number of items removed.
6639	Delete all but the latest available price for the given symbol
6640	Downloads and parses the price
6641	Fetches securities matching filters.
6642	Return partial of original function call
6643	Replace child nodes on original function call with their partials
6644	Descend depth first into all child nodes.
6645	Decorate multi to remove nodes for original test functions from root node
6646	Verify that a part of the code has equal length to the corresponding part in the solution, and report an error message if they do not match.
6647	Test whether abstract syntax trees match between the student and solution code.
6648	Tests if the student typed a (pattern of) text. It is advised to use ``has_equal_ast()`` instead of ``has_code()``, as it is more robust to small syntactical differences that don't change the code's behavior.
6649	Checks whether a package or function was imported correctly, considering different import methods and alias options.
6650	Search student output for a pattern.
6651	Check if the right printouts happened.
6652	Check whether the submission did not generate a runtime error.
6653	Test a multiple choice exercise by checking the student's chosen answer against the correct one and providing feedback.
6654	Check whether a particular function is called.
6655	Fetch value from process and return tuple of value or error message.
6656	Override the solution code with something arbitrary.
6657	Check whether an object is an instance of a certain class.
6658	Create a copy of an instance, excluding entries that are EMPTY
6659	Dive into nested tree.
6660	Getter for Parser outputs. Cache results for efficiency.
6661	When dispatched on loops, has_context checks if the target vars are the attribute _target_vars.
6662	Loops over each context manager in a with statement.
6663	Check if a named part exists in a state. If not, raise a missing message and optionally an expand message. Return the child state with the part as its AST tree.
6664	Check for the existence and correctness of a part index in a state object and return the corresponding AST tree.
6665	Check whether a function argument is specified.
6666	When checking a function definition of lambda function, prepare has_equal_x for checking the call of a user-defined function.
6667	Return the true anomaly at each time.
6668	Configures this extension with the given app. This registers an teardown_appcontext call, and attaches this LDAP3LoginManager to it as app.ldap3_login_manager.
6669	Configures this extension with a given configuration dictionary. update configuration with default values if not provided.
6670	Add an additional server to the server pool and return the freshly created server.
6671	Remove a connection from the appcontext.
6672	Cleanup after a request. Close any open connections.
6673	An abstracted authentication method. Decides whether to perform a direct bind or a search bind based upon the login attribute configured in the config. Returns an AuthenticationResponse.
6674	Performs a direct bind using username and password to authenticate a user.
6675	Performs a search bind to authenticate a user when the login attribute is not the same as the RDN. Attempts to find the user in the LDAP and bind with their credentials. Returns an AuthenticationResponse.
6676	Retrieves a list of groups a user is a member of based on the user's distinguished name.
6677	Gets info about a user specified at dn.
6678	Gets user info from LDAP based on username.
6679	Gets an object at the specified dn and returns its attributes from LDAP.
6680	Convenience property for externally accessing an authenticated connection to the server. This connection is automatically handled by the appcontext, so you do not have to perform an unbind.
6681	Make a connection to the LDAP Directory.
6682	Make a connection.
6683	Destroys a connection by removing it from the appcontext and unbinding it.
6684	Query a s3 endpoint for an image based on a string
6685	Search across labels with optional key and value
6686	QueryGitLabartifactsforlistofimages.
6687	Queries GitLab API for job artifacts and returns URLs
6688	Function for client to announce themselves, depending on the level specified.
6689	Announce the client if the command is not 'get' and quiet is False.
6690	Updates the secrets and base configuration for the Google Drive client. If the secrets variable is not found, the client exits with an error message and a link to documentation.
6691	Updates headers with a token and other fields
6692	This method checks if the client has the necessary secrets file and parameters.
6693	Download given url to target filepath fname.
6694	stream is a get method that streams data to a file using specified headers and verifies SSL certificates. It handles 401 and 403 errors by retrying with updated credentials.
6695	update_token uses HTTP basic authentication to update headers with an ECR token
6696	create a folder at the drive root, or return it if it already exists
6697	Attempt to read the detail provided by the response; default to using the reason if none.
6698	Gets or creates a bucket using a given name and client
6699	Updates client secrets and API base from a credential file or environment variable.
6700	Obtain transfer and access tokens to create a transfer client.
6701	Load secrets credentials from cache or update settings.
6702	Return logs for a particular container. The logs file is equivalent to the name, but with the .log extension. If no name is provided, the most recent log is returned.
6703	Return a list of log files from a bucket. Log files are identified by the .log extension.
6704	Creates an endpoint folder, catching the error if it already exists.
6705	Initiate a transfer client for the user
6706	Returns a list of containers with custom properties value type set to container
6707	print the status for all or one of the backends.
6708	Add the variable to the config with backend support and force option
6709	Remove a variable from the config, if found, with uppercase conversion and prefix handling
6710	Activate a backend by adding it to the .sregistry configuration file.
6711	Delete a backend and update the secrets file
6712	Update a base based on an image name, detecting a registry and updating the self.base accordingly.
6713	Generate a base64 encoded header for basic authentication.
6714	Generate a signature for a request using an endpoint-specific payload and client secret.
6715	Authorize a client based on encrypting the payload with the client secret, timestamp, and other metadata
6716	Send a DELETE request to the specified URL.
6717	HTTP HEAD request, typically used for status code retrieval.
6718	paginate_get is a wrapper for get to paginate results
6719	Determine whether to verify requests calls based on SSL check settings.
6720	Delete an image from the Singularity Registry. Prompt the user for confirmation unless the force option is used.
6721	Load version from version.py and return lookup dictionary
6722	Constructs a list of dependencies based on lookup data, handling different version constraints.
6723	Get the singularity version from environment variable or by running --version if not found.
6724	Check if a software is installed by running its version command.
6725	Returns the installation directory of the application.
6726	Returns the robot.png thumbnail from the database folder, or a user-exported alternative if available.
6727	run_command uses subprocess to send a command to the terminal. It handles sudo execution and decodes the output if necessary.
6728	Wraps the main client.get_metadata, parsing a Dropbox FileMetadata into a dictionary and passing it on to the primary get_metadata function.
6729	Update a Dropbox client by retrieving a token from the environment. If the token is not found, exit with an error message.
6730	Print the output to the console and optionally write it to a file.
6731	Terminate instances specified in command arguments.
6732	Lists a specific log for a builder or the latest log if none provided.
6733	get a listing of collections that the user has access to.
6734	Update secrets by retrieving user and token from environment and caching them, or exit with error if not found.
6735	Get and update the 'GOOGLE_APPLICATION_CREDENTIALS' environment variable. Exit if not found.
6736	Get the correct client depending on the driver of interest.
6737	Give the user an ipython shell, optionally with an endpoint of choice.
6738	get_manifests calls get_manifest for each schema version (v1, v2, config). Includes image layers and metadata for v1, specific manifest parsing for v2, and latest version if digest not provided.
6739	Fetches an image manifest for a given repository, digest, and version.
6740	Determine user preference for atomic download of layers, using Singularity Cache if set, otherwise using default.
6741	Extract the environment from the manifest, or return None.
6742	Updates the base settings, including GitLab URL, API endpoint, artifacts folder, and job configuration.
6743	update secrets will update metadata needed for pull and search
6744	Return a dictionary containing metadata relevant to the user including job ID and other parameters.
6745	Retrieve settings for a specific client or for all clients.
6746	Wrapper for get_and_update that exits if unsuccessful.
6747	Just update a setting, doesn't need to be returned
6748	Authorize client based on encrypted payload with client token for server verification
6749	Lists builders or instances for a project, filtering by name and zone, and displays the results in a table.
6750	Load a particular template based on a name.
6751	Get the IP address of an inserted instance. Tries three times with a delay between retries.
6752	run a build, meaning inserting an instance. Retry if there is failure.
6753	Return a list of containers based on the metadata field "type" with value "container."
6754	Returns all objects with custom metadata value of "container"
6755	List images for an external resource.
6756	Shares images with specified recipients.
6757	Initializes the database with a default or custom path, sets up the engine and session, and creates the database tables.
6758	Get default build template.
6759	Search for images based on query or endpoint
6760	Lists all endpoints and provides a table for user selection.
6761	List files within a specified endpoint, optionally filtering by a query.
6762	Get shareable link for an image using Dropbox.
6763	Load client secrets for private/protected registries.
6764	Get version 1 of the Google Compute and Storage service
6765	Delete object from bucket.
6766	Delete an image from Google Storage.
6767	Destroy an instance, updating the project and zone if necessary.
6768	get_subparser will get a dictionary of subparsers, to help with printing help
6769	Generate a robot name using descriptors, nouns, and numbers with a specified delimiter and character set.
6770	Get a temporary directory, prioritizing an environment variable or creating a new one with an optional prefix.
6771	Extract a tar archive to a specified output folder.
6772	Use blob2oci to handle whiteout files for extraction.
6773	Generate a SHA256 hash string of a file
6774	Open file and read content
6775	Read in a JSON file and return the data as a dictionary.
6776	Deletes a list of files if they exist.
6777	Upload an image to an S3 endpoint.
6778	get a collection if it exists
6779	Returns a collection if it exists, otherwise None.
6780	Gets a container by name, collection_id, and optionally tag and version, returns None if not found
6781	List local images in the database, optionally with a query.
6782	Inspect a local image in the database, which typically includes the basic fields in the model.
6783	Moves an image to a new location while maintaining the original path in storage and updating the URI if successful.
6784	Moves an image from its current location to a new path.
6785	Removes an image from the database and filesystem.
6786	Adds a new container to the registry or updates an existing one, handling file paths, URIs, and metadata.
6787	Upload an image to a Singularity Registry and handle related metadata and errors.
6788	Parse a recipe header, optionally removing the header key.
6789	Parse a single file for a recipe and update manifest if valid.
6790	Creates a temporary folder, copies a list of files into it, compresses into a .tar.gz, renames based on the file hash, and returns the full path to the .tar.gz
6791	Run a build, retry on failure, update blob metadata and visibility if successful.
6792	Updates blob metadata with artifact file name, dependencies, and image hash based on Google build response and config.
6793	Convert user-supplied name to container name by removing special characters (except those defined by "special_characters") and returning the new name in lowercase.
6794	Check if color should be added to a print. Will check if being run in a terminal and if has support for ascii.
6795	determine if a level should print to stderr, includes all levels but INFO and QUIET
6796	Write a message to a stream, first checking the encoding.
6797	Prints a table of entries with optional custom formatting
6798	Push an image to a Globus endpoint.
6799	Retrieve a default template by name, if it exists. Return the template if found, otherwise return None.
6800	Retrieves the image manifest via the AWS client and saves it in self.manifest
6801	Get a particular build template, defaulting to package manager-based templates.
6802	update secrets with file from .sregistry or environment variable; update client secrets and API base; handle missing required settings; read client secrets; handle credential cache
6803	Generate a repr string for a class instance, omitting default keyword arguments.
6804	Translate S3 errors to FSErrors.
6805	Create a S3File backed with a temporary file.
6806	Builds a gravatar url from an user or email
6807	Builds a URL to a Gravatar from an email address with customization options for size, default image, rating, and security.
6808	Check if a user has a gravatar based on their email address.
6809	Builds a URL to a Gravatar profile from an email address.
6810	Generator for blocks for a chimera block quotient.
6811	Extracts blocks from a graph and returns a block-quotient graph based on acceptability functions.
6812	Return a set of resonance forms as SMILES strings, given a SMILES string.
6813	Enumerates all possible resonance forms of a molecule and returns them as a list.
6814	Apply a series of Normalization transforms to correct functional groups and recombine charges.
6815	Repeatedly applies normalization transform to molecule until no changes occur or after 20 attempts. Chooses the first product (sorted alphabetically by SMILES) if multiple unique products are produced.
6816	Return a canonical tautomer by enumerating and scoring all possible tautomers.
6817	Return log messages for a given SMILES string using the default validations.
6818	Break covalent bonds between metals and organic atoms under certain conditions.
6819	Return a standardized canonical SMILES string from a SMILES input.
6820	Returns a set of tautomers as SMILES strings, given a SMILES string.
6821	Return a standardized canonical tautomer SMILES string given a SMILES string.
6822	Return a standardized version the given molecule.
6823	Return the tautomer parent of a given molecule
6824	Return the largest organic covalent unit (fragment parent) from a given molecule, optionally skipping standardization.
6825	Return the stereo parent of a given molecule with all stereochemistry information removed from tetrahedral centers and double bonds.
6826	Return the isotope parent of a given molecule with all atoms replaced by the most abundant isotope for that element.
6827	Return the charge parent of a given molecule. The charge parent is the uncharged version of the fragment parent.
6828	Return the super parent of a given molecule by finding the largest fragment and discarding charge, isotope, stereochemistry, and tautomer information.
6829	Main function for molvs command line interface.Sets up all.parsers.parses all arguments and executes the requested subprogram.
6830	Remove specified fragments from a molecule.
6831	Return the largest covalent unit. Determines the largest fragment by number of atoms (including Hydrogens), then by molecular weight, and alphabetically by SMILES if needed.
6832	Integrates an Initial Value Problem (IVP) using either adaptive or predefined methods for the van der Pol oscillator.
### Summary
Integrates an IVP using predefined or adaptive methods for a van der Pol oscillator.
6833	Retrieves the statistics from the given organization with the given credentials. Will not retrieve data if file exists and force hasn't been set to True. This is to save GH API requests.
6834	Retrieves the number of members of the organization.
6835	Retrieves the number of teams in the organization.
6836	Retrieve and process information about repositories of a specified organization.
6837	Retrieves the number of contributors to a repo in the organization. Also adds to unique contributor list.
6838	Retrieves the number of open and closed pull requests on a GitHub repository.
6839	Retrieves the number of closed issues from a GitHub repository
6840	Check for a README.md file in a GitHub repository. If not found, search for one and track search attempts.
6841	Checks if the given repo has a top-level LICENSE file.
6842	Retrieves the number of commits to a repo in an organization. If it's the first time, gets all commits and saves them to JSON. If there are saved commits, gets only new ones since the last save.
6843	Writes stats from the organization to JSON.
6844	Updates the total.csv file with current data.
6845	Updates languages.csv file with current data.
6846	Checks if a directory exists and creates it if not.
6847	Removes all rows of the associated date from the given csv file.
6848	Returns a list of the names US Government GitHub organizations.
6849	Creates a github3.py session for a GitHub Enterprise instance.
6850	Checks if API limits are exceeded and waits for reset if necessary.
6851	Creates a GitHub session for making requests
6852	Query GitHub3.py repo objects for provided orgs and repo names.
6853	Retrieves an organization by name, prompting for input if empty.
6854	Writes stargazers data to file.
6855	Create CodeGovProject object from GitLab Repository.
6856	Create CodeGovProject object from DOE CODE record
6857	Lookup license object information using names from GitHub API.
6858	Retrieves traffic for public repositories of the given organization using GitHub API endpoints.
6859	Fetch and store the releases for a given repository in JSON format.
6860	Retrieves total and unique referrers of all repos in JSON and stores it in a dict.
6861	Retrieves data from json and stores it in the supplied dict. Accepts 'clones' or 'views' as type.
6862	Writes all traffic data to file in JSON form.
6863	Writes all traffic data to file.
6864	Checks CSV file against JSON data, removes redundant entries, returns row count.
6865	Writes given dict to file with specified formatting
6866	Writes the referrers data to file, appending new data and sorting by lowercase referrer names.
6867	Converts a DOE CODE .json file into DOE CODE projects. Yields DOE CODE records from the file.
6868	Yields DOE CODE records from a DOE CODE .json URL response Converts a DOE CODE API .json URL response into DOE CODE projects
6869	Yeilds DOE CODE records based on provided input sources.
6870	Performs a login with given credentials or prompts for them, handles Two-Factor Authentication, and stores authentication token in a file for future use.
6871	Retrieves public emails of organization members.
6872	Writes the user emails to file sorted by login.
6873	Return a connected Bitbucket session
6874	Returns a connected GitLab session, authenticating with a provided or environment token.
6875	Yields Gitlab project objects for all projects in Bitbucket.
6876	Given a Git repository URL, returns the number of lines of code based on cloc.json output.
6877	Compute the labor hours based on a count of source lines of code using the COCOMO II model.
6878	Remove "None" or empty string values from dictionary items.
6879	Reads a 'pretty' formatted GraphQL query file into a one-line string, removing comments, line breaks, and extra whitespace, and caches the result if unchanged.
6880	Submit a GitHub GraphQL query from a file.
6881	Sends a curl request to GitHub, handling both GraphQL and REST APIs, and returns the response details.
6882	Wait until the given UTC timestamp
6883	Makes a pretty countdown with an optional message and verbose printing.
6884	Load a JSON data file into the internal JSON data dictionary. Overwrite current data. If filePath not provided, use stored path. Raises FileNotFoundError if file does not exist.
6885	Write the internal JSON data dictionary to a JSON data file. If no file path is provided, the stored data file path will be used. Updates the stored data file path if specified.
6886	Creates the TFS Connection Context using a token. If no token is provided, it uses an environment variable.
6887	Create TFS project_analysis_client.py client for Team Foundation Server Enterprise connection instance. If token is not provided, will attempt to use the TFS_API_TOKEN environment variable if present.
6888	Create a core Client for a Team Foundation Server Enterprise connection.
6889	Creates a TFS Git Client to pull Git repo info
6890	Creates a TFS TFVC Client to pull TFVC repo info
6891	Returns a list of all git repos for the supplied project within the supplied collection.
6892	Retrieve all TFVC branches for a given project within a collection.
6893	Performs setup including login, fetching organization repos, and waiting for commit statistics to build. Outputs commits from the last year to a CSV file.
6894	Calculate and adjust weekly commits over a year, updating starting commits for each week.
6895	Writes the weeks with associated commits to file.
6896	Instantiates and configures backends based on a list of configurations, optionally raising exceptions if errors occur during setup.
6897	Return MetricsInterface instance with specified name.
6898	Record a timing value.
6899	Contextmanager for easily computing timings.
6900	Decorator for easily computing timings.
6901	Generate a tag for use with the tag backends, sanitizing key and value according to specific rules and formatting.
6902	Report a timing.
6903	Report a histogram.
6904	Roll up stats and log them.
6905	This function creates a database annotation to sort records by the order of specified Enum members.
6906	Convert a string from the database into an Enum value
6907	Convert a string from a form into an Enum value.
6908	Converts an Enum value into a string for the database
6909	Resolve a path within an object, returning a set of elements based on the path's context and index.
6910	Map terms to USL lists based on dictionary terms.
6911	Returns the mean value.
6912	Record an event with the meter. By default it will record one event.
6913	Returns the mean rate of events since the start of the process.
6914	Record an event with a counter value, subtracting the last recorded value if it is less than or equal to the new value.
6915	Send metric and its snapshot.
6916	Serialize and send available measures of a metric.
6917	Compose a statsd compatible string for a metric's measurement
6918	Add a metric to a buffer, send if batch count reaches threshold
6919	Get method that raises MissingSetting if the value was unset.
6920	Ensure data is UTF8 encoded for json.loads compatibility.
6921	Fetch values and set defaults if they don't exist.
6922	Convert a set of human codes to a dict of code to ExactOnline GUID mappings. Raises an exception if any codes are not found.
6923	Get the "current" division and return a dictionary of divisions so the user can select the right one.
6924	Map ExactOnline invoice numbers to foreign (YourRef) invoice numbers. Handle batches for large lists and return the mapping.
6925	Solve a Sudoku grid inplace by converting it into a SAT problem and solving it using pycosat.
6926	Create Django class-based view from injector class.
6927	Create Django form processing class-based view from injector class.
6928	Create Flask method-based dispatching view from injector class.
6929	Create DRF class-based API view from injector class.
6930	Create DRF generic class-based API view from injector class.
6931	Create DRF model view set from injector class.
6932	Create a streamer for a given file descriptor.
6933	Handle file descriptor reading, call protocol callbacks accordingly.
6934	Close the connection and pause reading.
6935	Finalize closing.
6936	Add a new watching rule.
6937	Stops watching a given rule.
6938	Setup inotify watch for a path with specified flags.
6939	Starts the watcher, registering new watches if any.
6940	Fetch an event.
6941	Respond to ``nsqd`` that you need more time to process the message.
6942	Update timer to reflect successful call. Decrease intervals, ensure non-negative values, and update interval.
6943	Update the timer intervals on failure and ensure they do not exceed the maximum limits.
6944	Closes all connections stops all periodic callbacks
6945	Identifies when buffered messages should be processed and responded to. Checks if the number of in-flight messages is greater than or equal to 85% of the last ready count.
6946	Adds a connection to `nsqd` at the specified address.
6947	Triggers a query of the configured `nsq_lookupd_http_addresses`.
6948	Dynamically adjust the reader max_in_flight. Set to 0 to immediately disable a Reader.
6949	Logs a warning when a message exceeds the maximum number of attempts.
6950	Listen for the named event with the specified callback.
6951	Stop listening for the named event via the specified callback.
6952	Executes callbacks for listeners on a specified event with provided arguments.
6953	Publish a message to NSQ.
6954	Transforms data features to a higher level using polynomial transformation.
6955	Makes a prediction based on input data using a specified mode.
6956	Sigmoid function that returns a smooth curve.
6957	Parse Trimmomatic log file and extract trimming statistics.
6958	Cleans the working directory of unwanted temporary files.
6959	Merges the default adapters file in the trimmomatic adapters directory.
6960	Executes Trimmomatic with specified parameters and options for quality control and adapter trimming of FASTQ files.
6961	Parse samtools depth file and create dictionary with coverage per position for each plasmid.
6962	Handles inputs for parsing depth files from bowtie, generates JSON and report for pATLAS.
6963	Sets the path to the appropriate jinja template file.
6964	Sets the main channel names based on input and output suffixes and lane.
6965	Returns the main raw channel for the process based on the provided channel name and input type. If the specified input type exists in the `RAW_MAPPING` dictionary, the channel info dictionary will be retrieved along with the specified input channel. Otherwise, it will return None.
6966	Wrapper to the jinja2 render method from a template file
6967	returns a populated template string
6968	Sets the main channels for the process using variable keyword arguments.
6969	Updates the forks attribute with the sink channel destination.
6970	Sets a secondary channel for a given source channel, forking it into one or more channels and updating the Process.forks attribute accordingly.
6971	Update the directives attribute from a dictionary object, allowing updates only for defined processes and handling special cases for "params".
6972	Sets input channels for a status process using a specified operator.
6973	Sets the main input channels of the pipeline and their forks
6974	Adds secondary inputs to the start of the pipeline.
6975	Sets the initial definition of the extra input channels.
6976	Attempts to retrieve the coverage value from the header string by splitting it by "_" and searching backwards for the first float value
6977	Parse an assembly fasta file and extract contig information, including GC content and proportions.
6978	Get GC content and proportions
6979	Filters the contigs of the assembly according to user-provided comparisons.
6980	Returns the total length of the assembly, excluding filtered contigs.
6981	Writes the assembly to a new file, filtering ids if specified
6982	Write a report with the test results for the current assembly.
6983	Recursively removes nested brackets.
6984	Check for lane token '|' in each fork and duplicates within the same fork.
6985	Wrapper for performing sanity checks on a pipeline string
6986	Parses a pipeline string into a list of dictionaries with the connections between processes.
6987	Returns the lane of the last process that matches fork_process.
6988	From a raw pipeline string, get a list of lanes from the start of the current fork.
6989	Establishes a linear connection between a list of processes and returns a list of dictionaries representing the input and output processes.
6990	Makes the connection between a process and the first processes in the lanes to which it forks.
6991	Returns the pipeline string with unique identifiers and a dictionary with references between the unique keys and the original values
6992	Replaces unique identifiers with original process names in pipeline links
6993	Checks whether the trace and log files are available.
6994	Parses the trace file header and retrieves the positions of each column key.
6995	Converts a hms string into seconds.
6996	Converts size string into megabytes
6997	Parses the .nextflow.log file to retrieve the complete list of processes by searching for specific signatures and populating the processes attribute.
6998	Clears inspect attributes when re-executing a pipeline
6999	Checks whether the channels to each process have been closed
7000	Retrieve the contents of a log file into a list, each line as a list entry, or return None if the file does not exist.
7001	Assess whether the CPU load or memory usage is above the allocation and return the warnings for each process.
7002	Updates process stats with information from nextflow trace file.
7003	Parses the nextflow log file and updates the submitted number of samples for each process.
7004	Wrapper method for continuously updating class attributes from trace and log files.
7005	Display default pipeline inspection overview
7006	Curses scroll functionality for "up" and "down" directions. Adjusts `top_line` based on current scroll position and content length.
7007	Provides horizontal padding for curses window, adjusting from left or right based on direction and window width limitations.
7008	Return a list with the last `n` lines of the nextflow log file.
7009	Prepares first batch of static info (pipeline file, config files) and returns as dict
7010	Open the dotfile named .treeDag.json in the current working directory and return a dictionary with the dag object.
7011	Gets the hash of the nextflow file by combining the pipeline file's hash and the current working directory and hostname hashes.
7012	Gets the nextflow file path from the nextflow log file by searching for the nextflow run command throughout the file.
7013	Split FASTA file into requested contig size and output.
7014	Parse a nextflow trace file, search for processes with a specific tag, and generate a JSON report with relevant information.
7015	Brews a given list of processes according to the recipe. Returns the final pipeline string and list of process strings.
7016	Returns a pipeline string from a recipe name.
7017	Iterate over all available recipes and print their information to the standard output.
7018	Validate pipeline string by searching for forbidden characters.
7019	Builds the upstream pipeline of the current process.
7020	Builds the downstream pipeline of the current process
7021	Builds possible forks and connections between provided processes.
7022	Main method to run the automatic pipeline creation Aggregates the functions required to build the pipeline string
7023	Generate a component string based on provided parameters and directives, ready for flowcraft engine parsing.
7024	Writes a report from multiple samples, storing results in an output file and generating a JSON file for each sample
7025	Parse trimmomatic log files, store data, and generate a report.
7026	Removes whitespace from the assembly contig names
7027	Clean the temporary fastq files, remove symlinks if present
7028	Parse Abricate output files.
7029	Parser for a single abricate output file. Scans the file and populates the storage attribute with compliant lines. Uses arbitrary keys for entries.
7030	Iterates over entries, filtering based on custom criteria and yielding_matching entries.
7031	Try to retrieve contig id. Returns the original string if it is unable to retrieve the id.
7032	Generates the JSON report for plotting gene boxes.
7033	Writes the JSON report to a json file
7034	Generates and saves a JSON report for an assembly with summarized stats, coverage data (optional), and plots.
7035	Parse an assembly file in fasta format and populate the contigs attribute with data.
7036	Generates a CSV report with summary statistics about the assembly.
7037	Retrieve and map sliding window points to contigs and their x-axis positions.
7038	Return the proportion of GC content in a given string.
7039	Calculates a sliding window of the GC content for the assembly
7040	Main executor of the skesa template.
7041	Write a JSON report containing data from two sources with specified categories and statuses.
7042	Returns the trim index from a list of bool elements.
7043	Assess the optimal trim range for a given FastQC data file by parsing the 'Per base sequence content' category and identifying biased nucleotide positions for trimming.
7044	Gets the optimal read trim range from data files of paired FastQ reads based on 'Per sequence GC content'.
7045	Parse a FastQC summary report file and return it as a dictionary.
7046	Checks the health of a sample from the FastQC summary file by parsing the file and testing categories for pass or fail status.
7047	Parse a bowtie log file and populate attributes
7048	Parses process string to extract name and directives.
7049	Automatically add a dependency to a process by updating its input and output lanes, adjusting the process map, and inserting the dependency before the current process.
7050	Searches the process tree backwards for a provided process.
7051	Adds the header template to the master template string.
7052	Adds the footer template to the master template string
7053	Set main channels for each process in the pipeline.
7054	Sets the main raw inputs and secondary inputs on the init process.
7055	Sets the secondary channels for the pipeline by iterating over the secondary_channels dictionary and setting secondary links for each source and lane.
7056	Compiles status and report channels for the status compiler process.
7057	Returns the nextflow resources string from a dictionary object
7058	Returns the nextflow containers string from a dictionary object
7059	Returns the nextflow params string from a dictionary object.
7060	Returns a merged nextflow params string from a dictionary object.
7061	Returns the nextflow manifest config string to include in the config file from the information on the pipeline.
7062	Sets configurations for a pipeline by iterating over processes, generating directives, and populating Nextflow configuration files.
7063	Writes dag to output file
7064	Write pipeline attributes to json for graphical output.
7065	Write all configuration files to the pipeline directory
7066	Export pipeline params as JSON to stdout.
7067	Export pipeline directives as a JSON to stdout, skipping the first init process.
7068	Fetches and displays Dockerhub tags for components specified by the -t flag.
7069	Builds the main pipeline by generating the Nextflow code, setting channels, initializing processes, and writing the code to a Nextflow file.
7070	Returns a kmer list based on the provided kmer option and max read len.
7071	Main executor of the Spades template.
7072	Returns a hash of the reports JSON file based on the pipeline file or current working directory and hostname.
7073	Parses the nextflow trace file to retrieve paths of report JSON files that haven't been sent to the service yet.
7074	Parse nextflow log file and update run status.
7075	Sends a PUT request with a batch of JSON reports from the report_queue, limited by buffer_size. Handles connection errors and resets the report_queue after sending.
7076	Sends a POST request to initialize the live reports
7077	Sends a delete request for the report JSON hash Output:
7078	Converts a FASTA file of adapter sequences into a tab-delimited file suitable for FastQC.
7079	Execute FastQC on paired FastQ files with optional adapter file and specified CPU count. Monitoring output and logging results.
7080	Send dictionary to output json file
7081	Convert a mash dist txt file to a json file by filtering based on hash cutoff and sample ID.
7082	Creates a JSON file .versions based on metadata and functions that retrieve software versions.
7083	Converts top results from mash screen txt output to json format.
7084	enables users to add a color to the print and customize the end character
7085	Prints lists of all components based on a dictionary of processes.
7086	Collects process arguments based on user input and parses them.
7087	Guesses the compression of an input file by checking for a binary signature at the beginning of the file.
7088	Get range of the Unicode encode range for a given string of characters.
7089	Returns the valid encodings for a given encoding range. The function takes the minimum and maximum Unicode code points as input and checks the predefined RANGES dictionary to identify encodings that fall within the specified range. It returns a list of valid encodings and their corresponding phred scores.
7090	Parses a TSV file with coverage information and returns an OrderedDict of coverage and length for each contig, along with the total size and total coverage.
7091	Filter assembly file based on minimum coverage threshold
7092	Run Samtools to filter BAM file based on minimum coverage
7093	Evaluates the minimum coverage threshold from the value provided in coverage_opt. If set to "auto", determines the threshold as 1/3 of the assembly size, with a minimum value of 10. If set to an int or float, uses the specified value.
7094	Returns the number of nucleotides and the size per contig for the provided assembly file path.
7095	Processes assembly mapping by filtering based on coverage and genome size.
7096	Converts a CamelCase string into a snake_case one
7097	Collects Process classes and return dict mapping templates to classes
7098	Process Newick file, reroot at midpoint, convert to JSON report, and write status.
7099	Find data points on the convex hull of a supplied data set
7100	Map data points to basis vectors W based on similarity.
7101	Applies median filter to each feature in a matrix along the first axis.
7102	Creates a Gaussian kernel following Foote's paper.
7103	Computes the self-similarity matrix of X.
7104	Computes the novelty curve using the self-similarity matrix X and the Gaussian kernel G.
7105	Gaussian filter along the specified axis of the feature matrix X.
7106	Computes the novelty curve from the structural features.
7107	Shifts circularly a square matrix to create a time-lag matrix.
7108	Time-delay embedding with m dimensions and tau delays.
7109	Formats the plot with the correct axis labels, title, ticks, and so on.
7110	Plots all the boundaries from a list of np.arrays containing the times of the boundaries, one array for each algorithm. Incorporates the estimated file path, algorithm IDs, title of the plot, and output file path.
7111	Plots all the labels with ground truth boundaries using matplotlib.
7112	Plots the results of one track, with ground truth if it exists.
7113	Plots a given tree, containing hierarchical segmentation.
7114	Returns a set of segments defined by the bound_idxs.
7115	From a list of feature segments, return a list of 2D-Fourier Magnitude Coefs using the maximum segment size as main size and zero pad the rest.
7116	Compute the segment similarity of file file_struct using feature vectors and segment boundaries.
7117	Fits the OLDA model
7118	Partial - fit the OLDA model
7119	Reads the boundary times and the labels from an audio file.
7120	Find the correct estimation from a JAMS file based on specified algorithm identifiers and parameters.
7121	Saves the segment estimations in a JAMS file.
7122	Return the IDs of all boundary algorithms in MSAF.
7123	Build configuration dictionary from algorithm parameters.
7124	Get files of the given dataset, including audio files and ensuring necessary directories exist.
7125	Reads hierarchical references from a jams file and returns boundary times, labels, and levels.
7126	Reads the duration of a given features file.
7127	Writes results to file using the standard MIREX format.
7128	Return the path of the desired dataset file.
7129	Load a ground-truth segmentation, and align times to the nearest detected beats.
7130	Estimates the beats using librosa.
7131	Reads the annotated beats if available.
7132	Make the features beat-synchronous.
7133	Reads the features from a file and stores them in the current object with parameters such as tolerance level.
7134	Saves features to file.
7135	Returns the parameter names for these features, avoiding the global parameters.
7136	Computes the framesync times based on the framesync features.
7137	This getter returns the frame times corresponding to the current feature type.
7138	Compute the actual features if they haven't been computed yet. Choose features based on type.
7139	Selects features based on given parameters.
7140	Obtain the actual features based on the specified feature string and validate it against a list of valid features.
7141	Post processes the estimations from the algorithm, removing empty segments and ensuring the lengths of boundaries and labels match.
7142	Main function to parameter sweep of a specified algorithm on an MSAF formatted dataset.
7143	Print summary of results in a dataframe
7144	Computes the results by using the ground truth dataset identified by the annotator parameter.
7145	Computes the information gain of the est_file from the annotated intervals and the estimated intervals.
7146	Processes a single track, returning a dictionary of results.
7147	Based on the config and the dataset, get the file name to store the results.
7148	Evaluate algorithms' results on a dataset and return the evaluations in a pandas DataFrame.
7149	Add a new variable to msaf.config
7150	Computes all features for the given file.
7151	Computes the features for the selected dataset or file.
7152	Return the average log-likelihood of data under a standard normal distribution.
7153	Log-normalizes features such that each vector is between min_db to 0.
7154	Normalize features such that each vector is between floor and 1.
7155	Normalize a matrix of features according to the specified normalization type.
7156	Method to calculate and return time frames based on duration and analysis parameters.
7157	Removes empty segments based on time intervals
7158	Sonifies the estimated times into the output file.
7159	Synchronizes the labels from the old_bound_idxs to the new_bound_idxs. Constructs unfolded labels array and then computes new labels as medians of unfolded label ranges.
7160	Converts estimated frame indices to segmentation boundaries in time.
7161	Align the end of two hierarchival segment boundaries if their durations are within a specified threshold.
7162	Compute distances of a specific data point to all other samples.
7163	Estimates K using K-means and BIC, by sweeping various K and choosing the optimal BIC.
7164	Returns the data with a specific label_index, using the previously learned labels.
7165	Runs k-means clustering on input data X and returns the cluster centers (means) and the labels assigned to each data point.
7166	Computes the Bayesian Information Criterion.
7167	Computes the magnitude of a complex matrix.
7168	Extracts the boundaries from a JSON file and puts them into an np array.
7169	Extracts boundaries from a bounds JSON file and puts them into an np array.
7170	Method to extract labels from a JSON file and convert them into an np array.
7171	Extracts beats from a JSON file and stores them in a NumPy array.
7172	Computes the 2D-Fourier Magnitude Coefficients.
7173	Computes the labels using the bounds.
7174	Filter an activation matrix G based on maximum values and apply a median filter.
7175	Obtains the boundaries module given a boundary algorithm identifier. Returns the selected boundary module or None for "ground truth". Raises an error if the algorithm cannot be found or does not identify boundaries.
7176	Obtains the label module for a given label algorithm identifier.
7177	Runs hierarchical algorithms with specified identifiers on the audio file.
7178	Runs the flat algorithms with the specified identifiers on the audio_file. Segments using the specified boundaries and labels. Handles both the same and different boundary and label algorithms. Ensures the first and last boundaries are included.
7179	Runs the algorithms with specified identifiers on audio_file to estimate boundaries and labels.
7180	Prepares the parameters, runs the algorithms, and saves results.
7181	Main process to segment a file or collection of files using specified parameters and algorithms. Returns estimated boundary times and labels.
7182	Performs an alternating least squares step to update W under a convexity constraint
7183	Main function for running a translator and parsing command-line arguments.
7184	Initializes coroutine by priming it to the yield statement. Used as a decorator over functions that generate coroutines.
7185	Perform generic accumulation based on initial type.
7186	Set task coroutine. Delegates Text IO to the `write_stream` function.
7187	Consumes text streams and spools them together for more io efficient processes.
7188	Coroutine producing a text stream and forwarding it to consumers.
7189	Decorates a function returning the URL of a translation API, creating and maintaining an HTTP connection state. Returns a dictionary response object containing translated text and request metadata.
7190	Returns the url encoded string that will be pushed to the translation server for parsing
7191	opens up a file containing language codes and returns them as a dictionary
7192	Generates a formatted table of language codes
7193	Remove nodes from a network and return updated nodes and edges DataFrames.
7194	Save a pandana Network's data to a Pandas HDFStore.
7195	Build a Network from data in a Pandas HDFStore.
7196	Set characteristics of urban space using node IDs and an optional variable.
7197	Aggregate information for every source node in the network based on specified distance, type of aggregation, and decay.
7198	Assign node_ids to data specified by x_col and y_col
7199	Plot data on a map using Basemap with automatic node position matching.
7200	Sets location data for points of interest (POIs) in a specified category, connecting them to the closest nodes in a Pandana network.
7201	Find the distance to the nearest points of interest (POIs) from each source node. The bigger values mean less accessibility.
7202	Identify nodes with fewer connections than a specified threshold within a given distance.
7203	Convert a node element entry into a dict suitable for a Pandas DataFrame.
7204	Send a query to the Overpass API and return the parsed JSON response.
7205	Build the string for a node-based OSM query based on latitude and longitude bounds and optional node tags.
7206	Search for OSM nodes within a bounding box that match given tags.
7207	Returns True if the input argument object is a native regular expression object.
7208	Compares two values with optional regex matching.
7209	Simple function decorator allowing easy method chaining.
7210	Compare an expression against a given value using strict equality or regular expression matching.
7211	Triggers specific class methods using simple reflection based on input arguments.
7212	Match the given HTTP request instance against the registered matcher functions in the current engine. Returns ``True`` if all matcher tests pass, otherwise ``False``. Errors are collected and returned as a list.
7213	Return a matcher instance by class or alias name.
7214	Initializes a matcher instance and delegates to its constructor with variadic arguments, raising an error if the matcher is not found.
7215	Defines response body data.
7216	Defines and sets the mock response JSON body.
7217	Sets a header field with the given value, removing previous values.
7218	Helper function to append functions and methods into a given list.
7219	Triggers request mock definition methods dynamically based on input keyword arguments passed to `pook.Mock` constructor.
7220	Defines the mock URL to match. It can include a full URL with path and query params. Defaults to ``http://`` if the protocol schema is omitted.
7221	Defines a dictionary of headers for matching, with case-insensitive keys. Optionally accepts headers as keyword arguments. Returns the current Mock instance.
7222	Defines a new header matcher expectation that must be present in the outgoing request, no matter what value it hosts.
7223	Defines a list of headers that must be present in the outgoing request. Header keys are case insensitive.
7224	Set Content-Type header for outgoing requests.
7225	Define a set of URL query params to match.
7226	Defines the body data to match.
7227	Defines the JSON body to match. Handles JSON string, JSON-serializable Python structure, or regex to match the body. Returns the current Mock instance.
7228	Defines a XML body value to match.
7229	Reads the body from a disk file.
7230	Enables persistent mode for the current mock. Returns the current Mock instance.
7231	Defines a simulated exception error that will be raised.
7232	Define the mock response with optional status and keyword arguments.
7233	Matches an outgoing HTTP request against the current mock matchers.
7234	Makes fn an async version by activating an engine before and disabling it after execution.
7235	Set and validate a custom mock engine, replacing the built-in one.
7236	Enables real networking mode, optionally passing one or multiple hostnames as filters. If at least one hostname matches the outgoing traffic, the request will be executed via the real network.
7237	Creates and registers a new HTTP mock in the current engine.
7238	Remove a specific mock instance by object reference.
7239	Activate the registered interceptors in the mocking engine.Any HTTP traffic captured by those interceptors will trigger the HTTP mock matching engine to determine if a given HTTP transaction should be mocked out or not.
7240	Disable interceptors and stops intercepting any outgoing HTTP traffic.
7241	Verifies if real networking mode should be used for the given request, passing it to the registered network filters.
7242	Matches a given Request instance contract against the registered mocks. If a mock passes all the matchers, its response will be returned. Raises an exception if no mock matches with the given request contract when networking is disabled.
7243	Creates a copy of the current Request object instance for side-effects purposes.
7244	Enables the HTTP traffic interceptors. Can be used as a decorator.
7245	Creates a new isolated mock engine to be used via context manager.
7246	Adds one or multiple HTTP traffic interceptors to the current mocking engine.
7247	Removes a specific interceptor by name. Returns True if the interceptor was disabled, otherwise False.
7248	Get key from connection or default to settings.
7249	Build SQL with decryption and casting.
7250	Save the original_value.
7251	Return placeholder for PostgreSQL encryption. Check if value needs hashing or keep current. Compiler and connection ignored.
7252	Get the decryption for col.
7253	Method tells postgres to encrypt a field using PGP.
7254	Parses yaml and returns a list of repeated variables and the line on which they occur.
7255	Calculate regression coefficients for a given vector containing averages of tip and branch quantities.
7256	Compute and return the inverse of the covariance matrix.
7257	Calculate inverse covariance matrix
7258	Calculate the weighted sums of tip and branch values and their second moments.
7259	Propagates means, variance, and covariances along a branch
7260	Calculate standard explained variance.
7261	Regress tip values against branch values
7262	Determine the best split point on a tree to minimize a bilinear product of the inverse covariance and data vectors. Returns a dictionary with the best node, split fraction, and regression parameters.
7263	Initializes the merger model with a coalescent time.
7264	Calculates interpolation object mapping time to number of concurrent branches
7265	Calculates the cost of a branch in a tree, considering the merger rate and length.
7266	Attaches the merger cost to each branch length interpolator in the tree.
7267	Determine optimal coalescent time scale for maximizing likelihood.
7268	Convert profile to sequence and normalize profile across sites.
7269	Return a normalized version of a profile matrix. Normalize to one across each row. Option to treat input as log probabilities and return log of scale factor.
7270	Sets a new GTR object.
7271	Create new GTR model if needed, and set the model as an attribute of the TreeAnc class.
7272	Set the length of the uncompressed sequence, ensuring it can't be changed once set.
7273	Attach sequences to tree nodes
7274	Prepare link to parent and calculate distance to root for all tree nodes.
7275	Set auxiliary parameters to every node of the tree.
7276	For each node in the tree, set its root-to-node distance as dist2root attribute
7277	Reconstruct ancestral sequences using specified method and gibbs model.
7278	Uses results from marginal ancestral inference to return a joint distribution of sequence states at both ends of the branch
7279	Expand a nodes compressed sequence into the real sequence
7280	Reconstruct ancestral states using Fitch's algorithm. Constructs Fitch profiles for each character and propagates them to reconstruct sequences. Returns the number of characters that changed.
7281	Determine the Fitch profile for a single character of the node's sequence. The profile is essentially the intersection between the children's profiles or, if the former is empty, the union of the profiles.
7282	Find the intersection of any number of 1D arrays. Return the sorted, unique values that are in all of the input arrays.
7283	Return the likelihood of the observed sequences given the tree.
7284	Calculate the likelihood of the given realization of the sequences in the tree.
7285	Set branch lengths to either mutation lengths of given branch lengths. The assigned values are to be used in the following ML analysis.
7286	Optimize branch lengths of the entire tree.
7287	EXPERIMENTAL GLOBAL OPTIMIZATION: Minimizes branch lengths based on sequence marginal likelihoods.
7288	Calculate optimal branch length given the sequences of a node and its parent.
7289	Iteratively optimize branch lengths and reconstruct ancestral sequences until convergence.
7290	Get the multiple sequence alignment, including reconstructed sequences for the internal nodes.
7291	Compute the rate matrix of the GTR model by multiplying the transition matrix and equilibrium frequencies, then setting the diagonal values to the negative sum of the row values.
7292	Create a GTR model by specifying the matrix explicitly
7293	Create standard model of molecular evolution with specified parameters and models.
7294	Check the main diagonal of Q and fix it in case it does not correspond to the definition of the rate matrix.
7295	Calculate the probability of observing a sequence pair at a distance t, for compressed sequences
7296	Find the optimal distance between two sequences, considering factors like pattern multiplicity and gaps.
7297	Find the optimal distance between two sequences for compressed sequences.
7298	Calculate the probability of observing a node pair at a distance t.
7299	Compute the probability of the sequence state at time t later, given the parent profile.
7300	Calculate the log-likelihood of sampling a sequence from equilibrium frequency.
7301	Set branch length mode based on input or empirical distribution.
7302	Label outlier branches and exclude them from clock estimation and timetree propagation.
7303	Plot root-to-tip regression
7304	Resolve the polytomies on the tree. Re-optimizes the tree with new topology if that would result in higher likelihood.
7305	Print the total likelihood of the tree given the constrained leaves.
7306	Add a coalescent model to the tree and optionally optimize
7307	Determine the optimal node to root a tree, optimizing regression of temporal constraints and root-to-tip distances.
7308	Ensure a tree is loaded or built from an alignment if not provided.
7309	Parse the arguments referring to the GTR model and return a GTR structure
7310	Checks if input is VCF and reads in appropriately if it is.
7311	Implements ancestral reconstruction using phylogenetic tree and VCF data.
7312	Assess the width of the probability distribution. This returns full-width-half-max.
7313	Create delta function distribution with given x_pos weight and min_width.
7314	Multiplies a list of Distribution objects Handling delta functions and distributing.
7315	Assign dates to nodes in the tree. Returns success/error code.
7316	Instantiates a TreeRegression object with default tip and branch value functions tailored for treetime instances, optionally accounting for phylogenetic covariation.
7317	Calculate the most likely positions of unconstrained nodes using date constraints.
7318	Calculate the likelihood of the data given the current branch length in the tree.
7319	Convert estimated "time_before_present" properties of all nodes to numerical dates stored in the "numdate" attribute, further converting into human readable date strings.
7320	Estimate the uncertainty in a particular nnumdate due to rate variation using previously calculated variation of the rate.
7321	Determines the interval around the highest posterior probability region for a given node and fraction of probability mass
7322	Find the global minimum of a function represented as an interpolation object.
7323	Find the median of a function represented as an interpolation object.
7324	Convert datetime object to numeric date.
7325	Create the conversion object automatically from the tree
7326	Socket connection.
7327	Terminate connection with Guacamole guacd server.
7328	Receive instructions from Guacamole guacd server. Wait for instruction termination, process received instructions, and handle connection loss.
7329	Send encoded instructions to Guacamole guacd server.
7330	Send encoded instruction.
7331	Establish connection with Guacamole guacd server via handshake.
7332	Return a utf-8 encoded string from a valid unicode string.
7333	Load a new GuacamoleInstruction from encoded instruction string.
7334	Encode argument to be sent in a valid GuacamoleInstruction.
7335	Prepare the instruction to be sent over the wire.
7336	Returns a versioned URI string for the provided class.
7337	Returns the instance URL by ID.
7338	Returns a versioned URI string for the class without pluralizing the class name.
7339	Download file to specified directory or file path; uses temporary directory if not specified. Returns absolute path to file.
7340	Get the commit object's parent, which is either an Import or Migration.
7341	Asks the user for their SolveBio credentials including domain, email, and password.
7342	Force an interactive login via the command line. Sets the global API key and updates the client auth.
7343	Prints information about the current user
7344	Prints user information including email, domain, and role.
7345	Combine query args with existing ones using AND.
7346	Shortcut to do range filters on genomic datasets.
7347	Shortcut to apply a genomic position filter.
7348	Return a dictionary with requested facets based on string args and keyword args.
7349	Takes a list of filters and returns JSON
7350	Iterate through cached results, fetch pages as needed, raise StopIteration when done.
7351	Execute a query with additional parameters and return request parameters and raw response.
7352	Migrates data from a Query to a target dataset.
7353	Main entry point for SolveBio CLI. Parses command line arguments更新API主机和密钥通过环境变量或本地凭据。返回函数的结果。
7354	Recursively downloads a folder in a vault to a local directory. Only downloads files, not datasets.
7355	Create a new object from an HTTP response.
7356	Revoke the token and remove the cookie.
7357	Issues an HTTP request using the Python requests library. Handles authentication, headers, parameters, and file uploads. retries on 429 error.
7358	Get Task child object class
7359	Cancels a task and handles status update failure by resetting the status.
7360	Parse specialized INFO field for SnpEff ANN fields.
7361	Converts a row into a parsed dictionary for JSON.
7362	Returns the user's stored API key if a valid credentials file is found. Raises CredentialsError if no valid credentials file is found.
7363	Writes class data to a .netrc file format.
7364	Format a value according to its type
7365	Transform tabular data to a list of lists and headers.
7366	Return a string which represents a row of data cells
7367	Returns a string representing a horizontal line with specified column widths, padding, and fill characters.
7368	Prefix every cell in a row with an HTML alignment attribute.
7369	Produces a plain-text representation of a table.
7370	Migrate the data from this dataset to a target dataset.
7371	Validate full path and return components.
7372	Given a folder or file, uploads all contained items to a remote location, skipping existing ones.
7373	Validate and normalize a full path, handling different formats and providing default values.
7374	Validate SolveBio API host url
7375	Add one or more files or URLs to the manifest. Expand globs, upload to SolveBio, and use Upload object to fill the manifest.
7376	Annotate records with stored fields, yielding one at a time.
7377	Evaluates the expression with the provided data, data type, and list status.
7378	Set the default format name if it is recognized.
7379	Register a new output formatter.
7380	Format the headers and data using a specific formatter.
7381	Wraps tabulate inside a function for TabularOutputFormatter.
7382	Returns the config folder for an application based on operating system and user preferences.
7383	Get a list of system-wide config folders for the application.
7384	Read the default config file. Validate the config using a validator if validation is enabled, and update the settings with the default configuration.
7385	Read default, additional, system, and user config files.
7386	Get the absolute path to the user config file.
7387	Return a list of absolute paths to the system config files.
7388	Get a list of absolute paths to the additional config files.
7389	Write the default config to the user's config file, optionally overwriting an existing file.
7390	Reads multiple configuration files and updates the instance. Returns a dictionary of errors or True if no errors.
7391	Truncate string values if they exceed max_width.
7392	Replaces multiple values in a string.
7393	Runs multiple commands in a row, exiting if one fails.
7394	Apply command-line options.
7395	Apply a command-line option.
7396	Set default options for linting.
7397	Run the linter.
7398	Generate and view the documentation.
7399	Truncate very long strings in the data and headers for tabular representation.
7400	Format numbers according to a format specification.
7401	Formats a row by aligning it with the given headers.
7402	Wrap vertical table in a function for TabularOutputFormatter.
7403	Wrap terminaltables inside a function for TabularOutputFormatter.
7404	Copy template file and substitute template strings.
7405	is the type a numerical value?
7406	Checks if a given type is a boolean value based on predefined constants.
7407	Check if the type is a byte array value.
7408	Generate a secret key using a template and mechanism. Returns the handle of the generated key.
7409	Generates and returns a key pair using specified templates and mechanism.
7410	Find the objects matching the template pattern.
7411	Inserts a small icon to QR Code image
7412	Export gene panels to .bed like format Specify any number of panels on the command line
7413	Given a weekday and a date, returns the date of the first occurrence that matches the given weekday.
7414	Add 'num' to the day and count that day until the end_repeat or until outside the current month.
7415	Starts from 'start' day and counts backwards until 'end' day. If a day falls outside of end_repeat, it won't be counted.
7416	Helper function to process bi-weekly data and handle chunking if necessary.
7417	Handles non-repeating or first month of repeating event chunks, adding generated events to self.count.
7418	export causative variants for a collaborator
7419	Creates lines for an excel file with verified variants for an institute.
7420	Export mitochondrial variants for a case to create a MT excel report
7421	Update a user's roles and institutes in the database.
7422	Display a list of STR variants.
7423	Display a specific structural variant.
7424	Display a specific STR variant.
7425	Starts procedure to validate variant using other techniques.
7426	Builds a clinVar submission form for a variant, processes form data on POST, and redirects to the clinVar submissions handling page with the updated submission object.
7427	Show cancer variants overview.
7428	ACMG classification form. Handles GET and POST requests, processing variant data and returning classified results.
7429	Show or delete an ACMG evaluation.
7430	Calculate ACMG classification from submitted criteria.
7431	Parse gene panel file, fill in HGNC symbols for filter, and handle file upload.
7432	Download all verified variants for user's cases and serve as a zip file.
7433	Return a dictionary with hgnc symbols as keys, mapping to information about hgnc ids for each symbol.
7434	Add information of incomplete penetrance by iterating through genes and marking them as such if they match specific criteria.
7435	Gather information from different sources and return a gene dict
7436	Sends a request to MatchMaker and returns its response.
7437	Return the available MatchMaker nodes
7438	Retrieve cytoband coordinate for a position
7439	Get the subcategory for a VCF variant.
7440	Return the length of a variant.
7441	Return the end coordinate for a variant based on different categories and input values.
7442	Determine and return coordinates for a given variant based on reference, alternate, chromosomal information, and variant details.
7443	Read a file, parse cytoband data, and print specific intervals and coordinates.
7444	Show all panels for a case. Handle CSV file upload and update/metadata for existing/new panels.
7445	Update panel to a new version.
7446	Export panel to PDF file.
7447	Edit additional information about a panel gene.
7448	Add delivery report to an existing case.
7449	Retrieves a list of HPO terms from scout database store an adapter to the scout database query the term to search in the database limit the number of desired results hpo_phenotypes the complete list of HPO objects stored in scout
7450	Show all objects in the whitelist collection
7451	Build a small phenotype object with phenotype_id and description.
7452	Parses information about a gene from a store, populating a dictionary with gene details.
7453	Fetch matching genes and convert to JSON
7454	Display the Scout dashboard with case information filtered by institute and search query.
7455	Show all transcripts in the database.
7456	Returns the events that occur on the given day.
7457	Pre-process list of SV variants
7458	Pre-process list of STR variants.
7459	Pre-process an STR variant entry for detail page Adds information to display variant
7460	Pre-process an SV variant entry for detail page. Adds information to display variant.
7461	Parse information about variants Adds information about compounds Updates the information if necessary and 'update=True'
7462	Returns a header for a CSV file with fields for filtered variants, including AD reference, AD alternate, and GT quality for each sample analyzed in a case.
7463	Get variant information
7464	Get SIFT predictions from genes.
7465	Prepare case for variant view by adding information about files and selecting a VCF file based on genes.
7466	Look for the corresponding BAI file by extension given the BAM file.
7467	Query observations for a variant, including related cases and variant data.
7468	Parse variant genes and set primary refseq transcripts
7469	Generate amino acid change as a string
7470	Calculate end position for a variant.
7471	Returns a judgement on the overall frequency of a variant based on multiple metrics.
7472	Convert CLINSIG evaluation to human-readable format.
7473	Compose link to 1000G page for detailed information.
7474	Compose link to COSMIC Database based on cosmic id from variant object.
7475	Compose link to Beacon Network.
7476	Composes a link to UCSC genome browser URL based on variant object coordinates and genome build version
7477	Translate SPIDEX annotation to human readable string
7478	Return a list of manual inheritance models associated with variant genes.
7479	Return info about callers.
7480	Fetch cancer variants data for a case.
7481	Gather required data for creating the clinvar submission form
7482	Collects variants from a clinvar submission and prepares data for the clinvar_update.html template.
7483	Collect data for ACMG classification form.
7484	Calculate an ACMG classification based on a list of criteria.
7485	Fetch and fill-in evaluation object.
7486	Parse out HGNC symbols from a stream and check if they exist in the store.
7487	**Collects verified variants in a list for each institute and saves them to an Excel file.**
7488	Export all genes from the database
7489	Parse clnsig information from vcf and transcripts.
7490	Get a list with compounds objects for this variant.
7491	Export all genes from a build
7492	Build a Pedigree Individual object from a dictionary of information.
7493	Upload variants to a case, handling different categories and classifications.
7494	Return a JSON representation of the case object if it exists, otherwise return a 404 error.
7495	Show all collections in the database
7496	Create a new institute and add it to the database
7497	Update an institute with the given parameters and handle exceptions.
7498	Return a opened file handle based on file extension.
7499	Calculates the net value by subtracting 'cal_prev' from 'cal_next' query strings, defaulting to 0 if invalid.
7500	Return the next and previous querystrings based on the input net.
7501	Checks that the year is within 50 years from now.
7502	Ensure event days for weekday repeating events are not weekends by adjusting dates accordingly.
7503	Parse all necessary data for loading a case into Scout.
7504	Read peddy outfiles and add information to individuals. Parse files, update individual data with ancestry, sex, and parent confirmation.
7505	Parse individual information from a sample dictionary.
7506	Parses individual information and checks for valid relationships
7507	Parse case information from config or PED files.
7508	Parse out minimal family information from a PED file
7509	Build a evaluation object ready to be inserted to database
7510	Exports mitochondrial variants for each sample of a case and writes them to an Excel file.
7511	Determines if the criteria for Pathogenic classification from the ACMG paper are met
7512	Checks if the criteria for Likely Pathogenic classification from ACMG paper are fulfilled.
7513	Check if criterias for Likely Benign are fulfilled
7514	ACMG classification based on prediction terms
7515	Extract gene information from panels and add to variant object.
7516	Fetches variants for a specific case, applying filters, sorting, and pagination.
7517	Return all variants with Sanger information
7518	Retrieve variant by document ID or case ID, optionally adding gene information.
7519	Return all variants seen in a given gene.
7520	Return all verified variants for a given institute
7521	Returns all causative variants for an institute
7522	Check if there are any variants previously marked causative in an institute and compare them with a case. If a case is provided, exclude causative variants from it. Return the remaining causative variants.
7523	Find variants in other cases marked causative that match the current variant except for the case ID.
7524	Delete variants of one type for a case.
7525	Return overlapping variants based on the genes they overlap with. If the input variant is an SV, returns overlapping SNVs and vice versa. Filters by case ID, category, and HGNC IDs. Returns up to 30 most severe overlapping variants.
7526	Return variants that have been evaluated for a given case, including those with 'acmg_classification', 'manual_rank', 'dismiss_variant', or if they are commented. Collects and returns a list of variant objects.
7527	Produce a reduced vcf with variants from the specified coordinates for the alignment viewer.
7528	Given a list of variants, retrieve variant objects found in a specific patient.
7529	Connects to a MongoDB database using the provided parameters and returns a client object.
7530	Converts form data into submission objects for the Clinvar database.
7531	Determines CSV header fields based on submission objects
7532	Creates lines for a Clinvar submission CSV file from a list of submission objects and a custom header.
7533	Load all the transcripts from ensembl using the specified adapter, build, and ensembl genes.
7534	Add a gene panel to the database.
7535	Builds an Exon object from a dictionary containing exon information.
7536	Delete a version of a gene panel or all versions of a gene panel
7537	Delete all indexes in the database.
7538	Delete a user from the database
7539	Deletes all genes in the database.
7540	Delete all exons in the database
7541	Deletes a case and its variants from the database based on the provided case ID or display name.
7542	Show all individuals from all cases in the database.
7543	Parses a list of matchmaker matches objects and returns a readable list of matches to display in matchmaker matches view.
7544	Filter cases from the database based on parameters and display details.
7545	Returns the currently active user as an object.
7546	Login a user if they have access.
7547	Builds an institute object with specified parameters and removes any None values.
7548	Delete an event by its database key.
7549	Create an event with given parameters and save it to the database.
7550	Fetch events from the database based on specified criteria.
7551	Fetch all events by a specific user.
7552	Add a new phenotype term to a case.
7553	Remove an existing phenotype from a case.
7554	Adds a comment to a variant or case logging the event and returning the comment.
7555	Parses genotype calls for a variant.
7556	Checks if a variant is within a given genomic interval.
7557	Handle HTTP request for HPO phenotype terms.
7558	Export transcripts to .bed like format
7559	Load exons into the scout database.
7560	Load all variants in a region to an existing case.
7561	Return all events with occurrences within a given month and year, filtering by category, tag, location, and cancellations as specified.
7562	Returns a queryset of events that will occur again after 'now'.
7563	Recursively parse requirements from nested pip files.
7564	Check if gene is already added to a panel.
7565	Update an existing gene panel with genes from a CSV stream.
7566	Create a new gene panel by parsing CSV genes and saving to the database.
7567	Preprocess a panel of genes by adding institute information and creating a full name with version.
7568	Extract information about a case from an archive, including collaborators, synopsis, assignees, suspects, causatives, phenotype terms, and phenotype groups.
7569	Migrate case information from archive, updating collaborators, assignees, suspected/causative variants, synopsis, and phenotype groups/terms.
7570	Update all information from an old instance to a new instance.
7571	Upload research variants to cases.
7572	Loads genes into the database by fetching and linking information from various sources.
7573	Show all hpo terms in the database.
7574	Flask app factory function.
7575	Configure Flask extensions.
7576	Registers Flask blueprints.
7577	Setup coverage related extensions
7578	Show all alias symbols and how they map to ids
7579	Builds a gene_panel object from panel_info and adapter.
7580	Export variants for an institute, write to an excel file or simulate output based on test flag.
7581	Export causatives for a collaborator in .vcf format
7582	Formats a variant object into a VCF string
7583	Start the web server with specified configurations and options for debugging and live reloading.
7584	Generate an md5-key from a list of strings.
7585	Setup Flask app configuration for MongoDB connection.
7586	Setup connection to database and initialize collections.
7587	Create indexes for the database based on update flag.
7588	Setup a scout database.
7589	Setup scout demo instance with case, gene panel, and variants.
7590	Sets up a scout instance, initializes database connection, and configures adapter.
7591	Show all institutes in the database.
7592	Parse the genetic models entry of a vcf
7593	Show all gene panels in the database.
7594	Add a institute to the database
7595	Update information for an institute including sanger recipients, coverage cutoff, frequency cutoff, display name, phenotype groups, and group abbreviations.
7596	Fetch a single institute from the backend
7597	Checks if a string is a valid date
7598	Returns a datetime object if there is a valid date, raises an exception if date is not valid, and returns today's date if no date is added.
7599	Exports a list of genes based on HPO terms
7600	Parse the rank score from an entry based on a case ID.
7601	Add a user to the database.
7602	Check if a connection could be made to the mongo process specified
7603	Initializes a Flask app with a MongoDB connection.
7604	Load a delivery report into a case in the database.
7605	Add a user object to the database. If the user object does not have an '_id', it will be set to the user's email. If the user already exists in the database, an IntegrityError will be raised.
7606	Visualize BAM alignments.
7607	Load all the exons from ensembl and check if the transcript exists in the database.
7608	Update all compounds for a case.
7609	Updates a gene object with various links based on gene identifiers and optionally a build number
7610	Query the hgnc aliases
7611	Parse an hgnc formatted line and return a dictionary with relevant info, excluding genes with status withdrawn.
7612	Parse gene data from HGNC formatted lines.
7613	Retrieve or create an open ClinVar submission for a user and institute.
7614	Updates a clinvar submission object with a new clinvar ID and current timestamp
7615	Retrieve the official Clinvar submission ID for a given submission object.
7616	Adds submission_objects to clinvar collection and updates corresponding submission object
7617	Set a clinvar submission ID to a specified status and update the status of all other submissions for the same user.
7618	Retrieve all clinvar submissions for a user within an institute
7619	Delete variant or case data from ClinVar database and update submission
7620	Get all variants included in clinvar submissions for a case
7621	Parses a .obo file and yields terms with their details.
7622	Render search box for genes
7623	Render information about a gene.
7624	Return JSON data about genes.
7625	Make sure that the gene panels exist in the database and check if the default panels are defined in gene panels.
7626	Load variants in a specified region for a case.
7627	Load a new case from a Scout config.
7628	Template decorator.
7629	Fetch institute and case objects, validate access
7630	Preprocess institute objects based on the login user's privileges.
7631	Get the hgnc id for a gene based on priority and fallback options.
7632	Update a panel in the database.
7633	Update disease terms in mongo database. Fetch omim information using API key, drop existing disease terms, and load new terms.
7634	Load OMIM phenotypes into database, associate HPO terms, and load into adapter.
7635	Parse frequencies from variant info fields or transcripts.
7636	Parse a frequency from the info dictionary or return None if it does not exist.
7637	Parse frequencies from a variant's INFO field for specific keys.
7638	Show all users in the database.
7639	Builds a hgnc_gene object from gene information.
7640	Loads a gene panel from parsed information, builds a panel object, performs integrity checks, and adds it to the database.
7641	Creates and loads the OMIM-AUTO panel, updates if a new version is available
7642	Check if latest version of OMIM differs from the most recent in database, return all genes not in previous version.
7643	Set the correct version for each gene.
7644	Add a gene panel to the database.
7645	Fetches a gene panel by '_id'
7646	Delete a panel by '_id'.
7647	Fetch a gene panel based on panel_id and optional version. Return the requested panel or all panels if no panel_id is provided.
7648	Retrieve gene panels based on panel_id and institute_id.
7649	Gets all gene panels for a case and groups them by gene
7650	Replace a gene panel with a new one, updating version and date if provided.
7651	Adds a pending action to a gene panel and stores it in panel.pending
7652	Apply pending changes to a gene panel, updating existing one or creating a new version.
7653	Return all the clinical gene symbols for a case.
7654	Interact with cases existing in the database and optionally return results as JSON.
7655	Formats and sends a log message as an email.
7656	Add proper indexes to the scout instance. If new indexes are defined, they should be added.
7657	Update the indexes in the database by adding any missing indexes.
7658	Delete all indexes for the database
7659	Builds a mongo query from form data for variant search.
7660	Build a mongo query based on various criteria, including case_id, variant_ids, category, variant_type, and more.
7661	Adds clinsig filter values to the mongo query object.
7662	Adds genomic coordinates-related filters to the query object.
7663	Adds gene-related filters to the query object.
7664	Drop the mongo database given.
7665	Parses user submitted panel from CSV stream.
7666	Build a CLNSIG object.
7667	Load a bulk of hgnc gene objects and raise IntegrityError if there are write concerns.
7668	Load a bulk of transcript objects to the database.
7669	Load a bulk of exon objects to the database
7670	Fetch a HGNC gene using either a symbol or ID.
7671	Query the genes with a hgnc symbol and return the hgnc id.
7672	Fetch all hgnc genes that match a hgnc symbol. Check both hgnc_symbol and aliases.
7673	Fetch all hgnc genes
7674	Return the number of hgnc genes in collection. If build is used, return the number of genes of a certain build.
7675	Deletes the genes collection based on an optional build parameter.
7676	Deletes the transcripts collection.
7677	Delete the exons collection
7678	Return a dictionary with ensembl ids as keys and transcripts as values.
7679	Builds a dictionary mapping HGNC symbols to gene objects.
7680	Return a pymongo.Cursor(dict) of hgnc_genes matching the given symbol and build. If the symbol is listed as primary, only the one result is returned. If not, all genes with the symbol as an alias are included.
7681	Return a dictionary with hgnc symbols as keys and a list of hgnc ids as values.
7682	Return a dictionary with ensembl ids as keys and gene objects as value.
7683	Check if a hgnc symbol is an alias. Return the correct hgnc symbol, if not existing return None.
7684	Add the correct hgnc id to a set of genes with hgnc symbols.
7685	Return a dictionary with chromosomes as keys and interval trees as values, each representing a coding region of overlapping genes.
7686	Update the automate-generated OMIM gene panel in the database.
7687	Display a list of cases for an institute based on query parameters.
7688	Display one case.
7689	Show all MatchMaker matches for a given case.
7690	Starts an internal match or a match against one or all MME external nodes
7691	Remove a case from MatchMaker
7692	Visualize a case report.
7693	Download a PDF report for a case.
7694	Add or remove a diagnosis for a case
7695	Handle phenotypes - add or delete a phenotype item/group from a case
7696	Performs actions on multiple phenotypes based on user input.
7697	Handle events.
7698	Update status of a specific case.
7699	Assign and unassign a user from a case.
7700	Search for HPO terms.
7701	Marks a variant as sanger validated
7702	Mark a variant as confirmed causative.
7703	Displays a delivery report based on the provided institute ID and case name, optionally filtering by date.
7704	Share a case with a different institute.
7705	Request a case to be rerun.
7706	Open the research list for a case.
7707	Download vcf2cytosure file for individual
7708	Load and serve multiqc report for a case
7709	Preprocess case objects for display.
7710	Gather contents for a case report, including variant data, comments, and decorations.
7711	Posts a request to chanjo-report to capture the body content of a coverage report for a case, processes the response to remove links, and returns the rendered coverage data as a string.
7712	Get all Clinvar submissions for a user and an institute
7713	Collects MT variants and formats them into an Excel report for each sample.
7714	Update synopsis if changed
7715	Return the list of HGNC symbols that match annotated HPO terms.
7716	Converts VCF file for an individual to Cytosure format.
7717	Find MultiQC report for the case.
7718	Gets Sanger-ordered but unevaluated variants for a given institute, ordered by case.
7719	Adds a patient to MatchMaker server.
7720	Delete all affected samples for a case from MatchMaker
7721	Get MatchMaker submission data for a sample and eventual matches.
7722	Initiates a MatchMaker match against either other Scout patients or external nodes
7723	Load the hgnc aliases to the mongo database.
7724	Parse how different variant callers have performed
7725	Build a hgnc_transcript object using provided transcript information.
7726	Load an institute into the database with the given attributes and log the action.
7727	Check if the CADD PHRED score is annotated in a variant. If not, find the highest CADD score among provided transcripts.
7728	Load a case into the database.
7729	This method updates a variant document in the database, replacing the existing one with the provided variant_obj, and returns the updated variant.
7730	Updates the manual rank for all variants in a case.
7731	Updates compounds for a variant by adding necessary information and returning the updated compound objects.
7732	Update the compounds for a set of variants.
7733	Update the compound information for a bulk of variants in the database.
7734	Update the compounds for a case by processing coding intervals, fetching variants, and performing bulk updates.
7735	Load a variant object into the database.
7736	Load a variant object, if it already exists update compounds.
7737	Load a bulk of variants into the database.
7738	Create an event for assigning a user to a case and update the case's assignees.
7739	Share a case with a new institute.
7740	Diagnose a case using OMIM ids
7741	Update a case's checked status and create an event log.
7742	This method is used to create events for variant verification and update the variant's status in the database.
7743	Get all variants with validations ever ordered.
7744	Mark validation status for a variant.
7745	Create an event for marking a variant causative, update the case, and create events for the institute and variant.
7746	Update the dismiss variant field of a variant and create an event for the change.
7747	Create an event for updating the ACMG classification of a variant.
7748	Construct variant IDs based on chromosome, position, reference, alternative, case ID, and variant type.
7749	Parse the simple id for a variant using chromosome, position, reference, and alternate alleles.
7750	Parses a variant's unique document id using given parameters and returns it in an MD5 string.
7751	Convert a gene panel with hgnc symbols to a new one with hgnc ids.
7752	Create a new variant id using variant object and family id.
7753	Return the number of cases for a given institute ID.
7754	Updates the dynamic gene list for a case by adding a list of dictionaries with gene information.
7755	Fetches a single case from the database using either the _id or a combination of institute_id and display_name.
7756	Deletes a single case from the database based on case_id or institute_id and display_name.
7757	Add a case to the database. Raise an exception if the case already exists.
7758	Replaces an existing case with a new one, keeping the object id. Updates the 'updated_at' field to the current date and time. Returns the updated case.
7759	Update case id for a case across the database. This function is used when a case is a rerun or updated for another reason.
7760	Submit evaluation to database with variant, user, institute, case info and criteria
7761	Return all evaluations for a certain variant.
7762	Parse and merge information from multiple lines about the same transcript into a dictionary.
7763	Parse a dataframe with ensembl gene information.
7764	Parse a dataframe with ensembl transcript information.
7765	Parse an ensembl formatted line and extract relevant info.
7766	Parse lines with ensembl formatted genes
7767	Parse lines with Ensembl-formatted exons.
7768	Parse a dataframe with Ensembl exon information and yield gene_info.
7769	Initializes the log file in the proper format.
7770	Parse line from OMIM file into dictionary using header.
7771	Parse OMIM morbid lines
7772	Get a dictionary with phenotypes using mim numbers as keys and phenotype information as values.
7773	Parse the omim files and extract relevant information.
7774	Convert a string to number, if possible, returning int if it's an integer, otherwise float. Return None if conversion is not possible.
7775	Return a formatted month as a calendar table.
7776	Set some commonly used variables for a day.
7777	Change colspan to "5", add "today" button, and return a month name as a table row.
7778	Populate variables used to build popovers. Set display month and handle encoding. Construct 'when', 'where', and 'desc' with event details. Format 'title2' with event start time.
7779	Parse metadata for a gene panel from header lines and return as dictionary.
7780	Parse gene line from a panel file
7781	Parses a file with genes and returns the hgnc ids.
7782	Parse gene panel from file or input data.
7783	Show all diseases in the database.
7784	Update the hpo terms in the database. Fetch the latest release and update terms.
7785	Display a list of all users and which institutes they belong to. Counts events and ranks them.
7786	Parses conservation predictors from a variant dictionary and returns a dictionary with conservations.
7787	Get the conservation prediction for a variant based on a given info key.
7788	Returns general information about cases using the provided adapter, institute_id, and slice_query.
7789	Groups cases based on their status and returns information about the case groups.
7790	Return a JSON response, transforming 'context' to make the payload.
7791	Get year and month based on kwargs or querystrings, defaulting to current year and month if not provided.
7792	Check if any events are cancelled on the given date 'd'.
7793	Fetch a hpo term by its ID.
7794	Search for HPO terms based on query, hpo_term, or text, and return a result cursor.
7795	Return a disease term
7796	Return all disease terms that overlap a gene, or all disease terms if no gene is specified
7797	Load a disease term into the database.
7798	Generates a sorted list of HPO genes based on occurrence
7799	Populate Filterbank instance with data from HDF5 file and handle deprecation warning.
7800	Sets up frequency axis based on start and stop frequencies, or default values from header. Calculates true index values and creates frequency array. Adjusts indices if start is greater than stop.
7801	Setup time axis based on integration times or provided timestamps.
7802	Read filterbank data from file
7803	Compute LST (Local Sidereal Time) for an observation based on the telescope ID and header information.
7804	Blank DC bins in coarse channels by replacing their values with the median of nearby bins.
7805	Print header information
7806	Setup ploting edges.
7807	Generate a waterfall plot of data
7808	Plot and display a time series graph based on the input parameters and calculated data.
7809	Write data to blimpy file
7810	Calibrate the band pass by taking the median value for every frequency fine channel and dividing the data by it.
7811	Converts a data array with length n_chans to an array of length n_coarse_chans by averaging over the coarse channels
7812	Applies calibration to Stokes parameters using differential gains and phase differences.
7813	Calibrate filterbank files by applying Mueller matrix corrections from a noise diode measurement.
7814	Output fractional linear and circular polarizations for a rawspec cross polarization .fil file.
7815	Writes two new filterbank files containing fractional linear and circular polarization data
7816	Returns the index of the closest value in xarr to the given value val.
7817	Rebin data by averaging bins together
7818	Converts data from nbits to 8bits. Function may be broken.
7819	Returns ON-OFF subtraction for all Stokes parameters given a cross_pols noise diode measurement
7820	Plots the uncalibrated full stokes spectrum of a noise diode, with an option to plot either ON-OFF differences or separate ON and OFF spectra.
7821	Plots the corrected noise diode spectrum for a given noise diode measurement after application of the inverse Mueller matrix for the electronics chain.
7822	Plots gain offsets of each coarse channel and time-averaged power spectra of the X and Y feeds
7823	Open a HDF5 or filterbank file, returns instance of a Reader to read data from file
7824	Ensures selection ranges are within file limits and initializes or updates them accordingly.
7825	Calculate the size of data of interest based on the number of integrations, frequency channels, and bytes per point.
7826	Calculate shape of data of interest.
7827	Setup channel borders
7828	Updating frequency borders based on channel values.
7829	Populate time axis. If update_header then only return tstart
7830	Populate frequency axis
7831	Calculate the number of coarse channels in a given file.
7832	Calculates the number of blobs that fit in the data selection based on blob dimensions.
7833	Check if the current selection is too large.
7834	Read data from a file based on specified frequency and time ranges, handling selection size limits and loading binary data into a numpy array.
7835	Read all the data from a file, optionally flipping the X axis.
7836	Go to the start of the specified row and read a block of data into a 2-D numpy array. If reverse is True, flip the x-axis.
7837	Reads data selection if small enough.
7838	Updates the header information from the original file to the selection.
7839	Print header information and other derived information.
7840	Write data to .fil file, check file size, and decide write method.
7841	Write data to HDF5 file and check file size to decide write method.
7842	Write data to HDF5 file in one go.
7843	Sets the blob dimensions based on the chunk dimensions, trying to avoid having multiple blobs within a single time bin while staying close to 1024 MiB per blob.
7844	Sets the chunking dimensions depending on the file type.
7845	Extracts a portion of data by frequency range.
7846	Command line tool for plotting and viewing info on guppi raw files.
7847	Read first header in file.
7848	Seek through the file to find the number of data blocks
7849	Compute basic stats (mean, std, max, min) on the next data block and print them.
7850	Plots a histogram of data values.
7851	Generate a blimpy header dictionary.
7852	Find the header size of a filterbank file
7853	Compares two .fil files using md5sum after stripping headers. Outputs checksums and header information, indicating if checksums match or not.
7854	Convert guppi raw files into HDF5 versions
7855	Folds a time series by diode switch point and calculates time-averaged spectra of ON and OFF measurements.
7856	Folds Stokes I noise diode data and integrates along coarse channels.
7857	Calculate fluxes of the calibrator source in a particular frequency range.
7858	Returns central frequency of each coarse channel
7859	Calculate f_ON and f_OFF based on van Straten et al. 2012 equations using noise diode spectra from ON and OFF observations.
7860	Calculate the coarse channel spectrum and system temperature of the noise diode in Jy given two noise diode measurements ON and OFF the calibrator source
7861	Return frequency-dependent system temperature from calibrator observations.
7862	Calibrate Stokes I for an observation using a noise diode measurement and a diode spectrum.
7863	Return the length of the blimpy header, in bytes.
7864	Check if a file is a filterbank file by reading its header keyword.
7865	Fix a Filterbank header value by overwriting it with a new value.
7866	Generate a serialized sigproc header from a Filterbank object.
7867	Convert an astropy.Angle to the ridiculous sigproc angle format string
7868	Calculate the number of integrations in a given file.
7869	Converts a Traceback into a dictionary representation.
7870	Make a subparser for a given type of DNS record
7871	Make an ArgumentParser for DNS RRs
7872	Remove comments from a zonefile.
7873	Ensure names are defined for each line in text, using '@' as default.
7874	Parses a line using a parser and updates the set of parsed records. Returns the updated records or raises an exception on error.
7875	Parse a zonefile into a dict.
7876	Parse a zonefile into a dict
7877	Quote a field in a list of DNS records Replace colons with escaped colons.
7878	Parse an avsc string and return a PySchema class.
7879	This function builds a Python package representation from classes, organizing modules by namespace hierarchy and handling imports with an optional parent package prefix.
7880	Generate Python source code for one specific class, excluding dependencies between record types.
7881	Decorator factory to temporarily disable automatic registration of records in the auto_store.
7882	Convert a record object to a JSON-encodable dictionary
7883	Create a Record instance from a json-compatible dictionary.
7884	Create a Record instance from a json serialized dictionary
7885	Add record class to record store for retrieval at record load time.
7886	Return a matching record by name.
7887	Return a dictionary the field definition
7888	Decorator to mix in additional functionality into a field type
7889	Create proper PySchema class from cls Transfer any methods and attributes to the new object.
7890	Return a python dict representing the jsonschema of a record
7891	Return a root jsonschema for a given record.
7892	Converts a file object with JSON-serialized pyschema records to a stream of pyschema objects
7893	Writes a stream of json serialised pyschema Records to a file object
7894	Set a value at the front of an OrderedDict.
7895	Specifies the query string for use with the collection and returns a SearchResult.
7896	Sends all filters to the API. Returns a SearchResult.
7897	Returns all entities present in the collection with specified attributes included.
7898	Retrieves entity from correct collection based on href value. If href does not match current collection, attempts to find and use referenced collection instead.
7899	Returns another quote character if possible, else raises a value error.
7900	Escape values passed to filter as correctly as possible.
7901	Constructs an elementary rotation matrix for rotating around the x, y, or z-axis by a specified angle in radians.
7902	Construct the covariance matrix from astrometric parameter uncertainties and correlations, incorporating parallax, radial velocity, and their uncertainties.
7903	Calculate radial velocity error from V-band magnitude and spectral type.
7904	Calculate parallax error for given input source magnitude and colour
7905	Calculate the single-field-of-view-transit photometric standard error in the G band as a function of G.
7906	Calculate the end of mission photometric standard error in the G band as a function of G, including a 20% margin.
7907	Plots photometry performance predictions with specified arguments.
7908	Calculate average number of transits across the Gaia focal plane for given ecliptic latency values.
7909	Calculate the angular distance between pairs of sky coordinates in radians using the haversine formula.
7910	Rotates Cartesian coordinates from one reference system to another using the rotation matrix with which the class was initialized. The inputs can be scalars or 1-dimensional numpy arrays.
7911	Converts sky coordinates from one reference system to another using a rotation matrix initialized with the class. Handles scalar and 1D numpy array inputs. Returns the transformed azimuthal and elevation angles in radians.
7912	Transform the astrometric covariance matrix to its representation in the new coordinate system using a jacobian matrix.
7913	Evaluate scaling factors for astrometric errors based on observable and ecliptic latitude.
7914	Plots relative parallax errors as a function of distance for stars of a given spectral type.
7915	Generates a plot of radial velocity performance predictions for different spectral types.
7916	Utility function for selecting the first non-null query.
7917	Decorator for eval_ that prints a helpful error message if an exception is generated in a Q expression.
7918	Convert to unicode, and add quotes if initially a string
7919	Call a function on each element in the collection, returning a new Collection with the results.
7920	Return a new Collection excluding some items based on a function that returns a boolean-like value.
7921	Return a new Collection with some items removed.
7922	Return a new Collection with the last few items removed.
7923	Return a new Collection by dropping items before the first item where the function返回一个新集合，丢弃在第一个函数返回True之前的所有项。
7924	Zips items of this collection with one or more other sequences and wraps the result. All sequences must be the same length.
7925	Find a single Node among this Node's descendants.
7926	Return potential locations of IACA installation.
7927	Yield all groups of simple regex-like expression.
7928	Reduce regular expressions for describing register groups.
7929	Generate a LIKWID event string from an event tuple or keyword arguments.
7930	Compile list of minimal runs for given events.
7931	Report analysis outcome in human readable form.
7932	Prints a human-readable report of the model, including CPU and memory bottlenecks, and the IACA analysis.
7933	Generate a human-readable report of a model's results, printing layer conditions for each dimension and cache configuration. If verbose mode is enabled, also print the model's results in a pretty-printed format.
7934	Strips unnecessary comments, macros, and pragmas from source code, preserving line numbers and handling multiline comments and macros.
7935	Round float to next multiple of base
7936	Return a list of block indices for a list of integers split into blocks of a specified size, starting at an initial boundary.
7937	Dispatches cache predictor to get cache statistics and updates results with hits, misses, evicts, and verbose information.
7938	Calculates performance model cycles from cache stats. Required: calculate_cache_access() executed before.
7939	Run complete analysis and return results
7940	Run complete analysis and return results.
7941	Strips whitespaces and comments from asm lines.
7942	Strips all labels from assembly lines that are never referenced.
7943	Select the best block based on heuristic criteria.
7944	Let user interactively select byte increment
7945	Let user interactively select block from list of blocks.
7946	Inserts IACA marker into ASM instructions at given indices.
7947	Add IACA markers to an assembly file.
7948	Execute command line interface.
7949	Setup and execute model with given blocking length.
7950	Generator which yields evenly spaced integers over a linear or log space between start and stop
7951	Return the datetime object of the latest modification in the kerncraft module directory.
7952	Check user arguments for validity and set default unit based on performance model.
7953	Initialize and run command line interface.
7954	Recursively merge two or more pickle files.
7955	Create a sympy.Symbol with positive and integer assumptions
7956	Transforms an AST of a multidimensional declaration to a single dimension declaration. In-place operation. Returns the name and dimensions of the array.
7957	Transform multidimensional reference to a single dimension reference in-place.
7958	Return a list of nodes that match the given type in an AST.
7959	Make any function return an iterable object by wrapping its result in a list.
7960	Check that information about kernel makes sens and is valid.
7961	Set constant of name to value. Ensure name is str or sympy.Symbol, value is int. Convert name if sympy.Symbol.
7962	Substitute constants in expression unless it s already a number
7963	Return a dictionary with all arrays sizes. Adjusts the sizes based on bytes and symbolic constants.
7964	Calculate relative offset from iteration center.
7965	Removes duplicate source and destination accesses.
7966	Return the number of global loop iterations that are performed. If dimension is not None, it is the loop dimension that is returned (-1 is the inner most loop and 0 the outermost)
7967	Yield loop stack dictionaries in order from outer to inner.
7968	Return the order of indices as they appear in array references, optionally filtering by sources and destinations.
7969	Return a dictionary of lists of sympy accesses, for each variable, filtering by source and destination.
7970	Return load and store distances between accesses
7971	Return sympy expressions translating global_iterator to loop indices.
7972	Returns global iterator sympy expression
7973	Transform a dictionary of indices to a global iterator integer.Inverse of global_iterator_to_indices().
7974	Return global iterator with last iteration number
7975	Print kernel information in human-readable format.
7976	Print variables information in human-readable format.
7977	Print constants information in human-readable format.
7978	Print source code of kernel.
7979	Convert mathematical expressions to a sympy representation using AST. Handles ID, Constant, and BinaryOp nodes.
7980	Get offsets of an ArrayRef object in all dimensions.
7981	Return base name of ArrayRef object.
7982	Return index type used in loop nest. If index type between loops differ, an exception is raised.
7983	Generate constants declarations
7984	Return array declarations.
7985	Get kernel loop nest including any preceding pragmas and following swaps.
7986	Generate declaration statements for arrays, transform multi-dim to 1d and initialize with malloc.
7987	Returns the innermost for loop in the loop nest.
7988	Generates initialization statements for arrays.
7989	Generates a false if branch with dummy calls
7990	Build and return kernel function declaration.
7991	Build and return scalar variable declarations
7992	Generate and return compilable source code with kernel function from AST.
7993	Generate and return kernel call ast.
7994	Generate and return compilable source code from AST.
7995	Run an IACA analysis and return its outcome. Controls block selection and pointer increment settings.
7996	Compile source to executable with likwid capabilities and return the executable name.
7997	Convert any string to a sympy object or None
7998	Return identifier which is either the machine file name or sha256 checksum of data.
7999	Return datetime object of modified time of machine file. Return now if not a file.
8000	Returns a cachesim.CacheSimulator object based on the machine description.
8001	Calculate best fitting bandwidth based on read/write streams, thread/core count, and cache level.
8002	Returns tuple of compiler and compiler flags. Selects compiler and flags from machine description file, command-line arguments, or call arguments.
8003	Parse events in machine description to tuple representation used in Benchmark module.
8004	Enforce no ranges overlap in internal storage
8005	Return local folder path of header files.
8006	Align iteration with cacheline boundary.
8007	Return a list with the number of loaded cache lines per memory hierarchy level.
8008	Return a list with number of hit cache lines per memory hierarchy level.
8009	Return a list with the number of missed cache lines per memory hierarchy level.
8010	Return the number of stored cache lines per memory hierarchy level.
8011	Return a list with the number of evicted cache lines per memory hierarchy level.
8012	Return verbose information about the predictor.
8013	Fix environment variable to a value within context, unset if value is None.
8014	Configure argument parser with options to disable phenomenological ECM model building, specify number of outer-loop iterations, and ignore warnings about mismatched CPU model and frequency.
8015	Generate a human-readable report from gathered analysis data.
8016	Parse the description in the README file.
8017	Schedule a retry
8018	Build and return Sailthru purchase item object.
8019	Record a purchase in Sailthru
8020	Get course information using the Sailthru content API or from cache.
8021	Get course information using the Ecommerce course api. Returns empty response in case of error.
8022	Maintain a list of courses the user has unenrolled from in the Sailthru user record.
8023	Send a course refund email with details and handle errors.
8024	Handles sending offer assignment notification emails and retrying failed emails when appropriate.
8025	Generate a logging configuration dictionary based on input parameters.
8026	Retry with exponential backoff until fulfillment succeeds or the retry limit is reached. If the retry limit is exceeded, the exception is re-raised.
8027	Fulfills an order by making a request to an eCommerce API and handling potential errors and retries.
8028	Returns a Sailthru client for the specified site.
8029	Get an object from the cache.
8030	Save an object in the cache
8031	Retrieves the value of a specified variable from the current configuration module, with an option for site-specific overrides.
8032	Get the name of the file containing configuration overrides from the provided environment variable.
8033	Finds the value based on the current EnergyPlus version.
8034	Return the most recent Energy Plus version if not specified.
8035	Initialize and return file references dictionary.
8036	Populates records from JSON data, manages external files and activates hooks and links.
8037	Collect external file paths from tables and their records.
8038	Set default values for null fields in Epm tables.
8039	This function finishes initialization after all field descriptors and tags have been filled, setting up cycle-related information.
8040	manages extensible names
8041	Calculate short references for external files on the fly.
8042	Get value from column where filter column matches criterion.
8043	Update value at specified index in a data structure, handling link, record hook, and external file types, and broadcasting key updates.
8044	Simultaneously updates fields using dictionary or keyword arguments, deactivating links and external files after updating inert data.
8045	Set default values for empty fields in the instance.
8046	Add values to extensible fields without specifying field names or indexes.
8047	Remove a value from a field by index and shift remaining values.
8048	Insert a value into an extensible field list at a specified index, shifting subsequent values.
8049	Deletes record and removes it from the database.
8050	Register a record hook with a unique key.
8051	Map source record to target record and store link by source and target
8052	Create regex and return. If error occurs returns None.
8053	Returns the remaining duration for a recording.
8054	Serializes this object as a dictionary for JSON conversion
8055	Make HTTP request to a given URL with optional parameters.
8056	Get available service endpoints for a given service type from the Opencast ServiceRegistry.
8057	Tries to create a directory and passes silently if it already exists.
8058	Get the location of a given service from Opencast and add it to the current configuration.
8059	Register capture agent at Matterhorn admin server and update state.
8060	Send the state of the current recording to the Matterhorn core.
8061	Update the status of a particular event in the database.
8062	Update the current agent state in opencast. Determines reported agent state with priority list and registers the status.
8063	Return the best match for the configuration file. If none is specified, probe for the default locations.
8064	Update configuration from file.
8065	Check configuration for sanity.
8066	Initialize logger based on configuration.
8067	Serve the status page of the capture agent.
8068	Serve the preview image with the given id.
8069	Start all services.
8070	Parse Opencast schedule iCalendar file and extract events as dictionary
8071	Retrieve and process a calendar schedule from the Matterhorn core, storing valid events in the database.
8072	Main loop for retrieving and processing the schedule.
8073	Main loop for updating capture agent state, notifying, and terminating.
8074	Return a response with a JSONAPI error object
8075	Return a response with a list of JSONAPI data objects
8076	Serve a JSON representation of internal agent state as metadata.
8077	Serve a JSON representation of events
8078	Return a specific events JSON
8079	Deletes a specific recorded event by UID. Optionally deletes recorded files on disk. Returns 204 on success, 404 if event does not exist.
8080	Modify an event specified by its uid. The modifications for the event are expected as JSON with the content type correctly set in the request. Only recorded events can be modified.
8081	Extracts the set of configuration parameters from the properties attached to the schedule.
8082	Ingest a finished recording to the Opencast server.
8083	Start the capture process, create necessary files and directories, and handle file ingestion if no backup mode is configured.
8084	Returns a simple fragment
8085	Returns list of unique `FragmentResource`s by order of first appearance.
8086	Returns the fragment in a dictionary representation.
8087	Return a new Fragment from a dictionary representation.
8088	Add content to this fragment.
8089	Add a resource needed by this Fragment. Other helpers like add_css or add_javascript are more convenient for common types.
8090	Add a resource by URL needed by this Fragment.
8091	Registers a Javascript function to initialize the Javascript resources.
8092	Generate HTML for resources by placement.
8093	Returns `resource` wrapped in the appropriate html tag based on its mimetype and kind.
8094	Render a fragment to HTML or return JSON describing it, based on the request.
8095	Renders a standalone page as a response.
8096	Render the specified fragment to HTML for a standalone page.
8097	Calculate pFDR and q-value for given p-values and lambda.
8098	Converts list or flattens n-dim array to 1-dim array if possible.
8099	Find matching q-value for each score in 'scores'
8100	Compute posterior probabilities for each chromatogram
8101	Create artificial cutoff sample points from given range of cutoff values in df, number of sample points is 'num_cut_offs'
8102	Generate a summary error table for specific q-values.
8103	Generate error statistics for target values using given decoy scores, including p-values, q-values, and other metrics.
8104	Find cutoff target score for specified false discovery rate fdr
8105	Conduct semi-supervised learning and error-rate estimation for MS1, MS2 and transition-level data using PyProphet.
8106	Infer peptidoforms using various scoring parameters.
8107	Infer peptides and conduct error-rate estimation in different contexts.
8108	Infer proteins and conduct error-rate estimation in different contexts.
8109	Subsample OpenSWATH file to minimum for integrated scoring
8110	Reduce scored PyProphet file to minimum for global scoring
8111	Backpropagate multi-run peptide and protein scores to single files
8112	Filter sqMass files
8113	Retrieves a restclients.Group object for the group identified by the passed group ID.
8114	Creates a group from the passed restclients.Group object.
8115	Deletes a group by ID.
8116	Returns a list of restclients.GroupMember objects for the group identified by the passed group ID.
8117	Updates the membership of a group and returns a list of members not found.
8118	Returns a count of effective members for the group identified by the passed group ID.
8119	Checks if a netid is an effective member of a group by sending a GET request to the API and returning True if the netid is found, False if not found, and raising an exception for other errors.
8120	Modify Sphinx configuration to include custom extensions and set the theme to read-the-docs.
8121	Creates 3 datasets in a group to represent the sparse array.
8122	Decrypts context.io_manager's stdin and sends that to context.io_manager's stdout.
8123	Return a stdin-suitable file-like object based on optional os_path and optionally skipping any configured sub-command.
8124	Returns a stdout-suitable file-like object.
8125	Returns a stderr-suitable file-like object based on optional os_path and optionally skipping any configured sub-command.
8126	Returns a debug-output-suitable file-like object based on the optional os_path and optionally skipping any configured sub-command.
8127	Yielding a stdin-suitable file-like object, optionally skipping sub-command and handling path and closure.
8128	Yields a stdout-suitable file-like object, optionally skipping sub-command filtering and handling disk closure.
8129	A context manager yielding a stderr-suitable file-like object based on optional parameters for path, skipping sub-command, and handling disk closure.
8130	A context manager for debug output, optionally skipping sub-commands and handling file closures.
8131	Deletes all objects and containers in the account. Requires confirmation, and can perform multiple passes if requested.
8132	Deletes all objects in the container. Optionally runs multiple passes until the container is empty.
8133	Convert an optional file keyword argument into an actual value, whether it be a passed value, a value obtained from an io_manager, or sys.stdout.
8134	Convert an optional file keyword argument into an actual value, whether it be a passed value, a value obtained from an io_manager, or sys.stderr.
8135	Outputs the error msg to the file if specified, or to the io_manager's stderr if available, or to sys.stderr.
8136	Outputs help information to the specified file, io_manager's stdout, or sys.stdout.
8137	Outputs usage information to file, stdout if available, or sys.stdout
8138	Outputs version information to the specified file or to sys.stdout.
8139	Performs a direct HTTP request to the Swift service.
8140	POSTs the account and returns the results.
8141	Sends a DELETE request to the account and returns the results. Requires verification to delete the entire account.
8142	HTTP PUT operation for a container.
8143	HTTP HEAD operation to retrieve object information.
8144	GETs the object and returns the results.
8145	PUTs an object and returns the results.
8146	POST an object to a container and return results.
8147	Resolves an option value into options.
8148	Returns a new CLIContext instance that is a shallow copy of the original, much like dict's copy method.
8149	Output headers to a file-like object in a formatted manner, optionally muting specific headers.
8150	Authenticates and outputs information about the client context.
8151	Returns a TempURL good for the given request method, URL, and number of seconds from now, signed by the given key.
8152	Encode value in UTF-8 and return URL-encoded string, protecting safe characters.
8153	Issues commands for each item in an account or container listing.
8154	Obtains a client for use, whether an existing unused client or a brand new one if none are available.
8155	Encrypt a content stream using AES 256 in CBC mode.
8156	Decrypts a content stream using AES 256 in CBC mode.
8157	Performs PUTs rooted at the path using a directory structure pointed to by context.input_.
8158	Performs a PUT on the account.
8159	Performs a PUT on the container.
8160	Generates and returns body for manifest file and modifies put_headers
8161	Create container for segments of file with `path`
8162	Generates a TempURL and sends that to the context.io_manager's stdout.
8163	Translates x_trans_id information to context.io_manager's stdout
8164	Outputs help information
8165	Check whether the "file" is empty by reading the single byte.
8166	Encrypts input data from stdin and outputs encrypted data to stdout
8167	Retrieves the status of a commit using the provided repository configuration and SHA.
8168	Retrieve data for a specific pull request.
8169	Returns the last 30 pull requests from a repository.
8170	Publish all slider item titles in the hero slider app.
8171	Returns the published slider items.
8172	Renders the hero slider.
8173	Acquire lock for reading.
8174	Release the lock after reading
8175	Acquire the lock to write.
8176	Add a task to the registry.
8177	Remove a task from the registry by its identifier. Raises NotFoundError if task not found.
8178	Retrieve a task from the registry using its task identifier. When the task does not exist, a `NotFoundError` exception will be raised.
8179	Returns the list of tasks.
8180	Returns a dict with the representation of this task configuration object.
8181	Create a configuration object from a dictionary. Raise ValueError for invalid parameters.
8182	Execute a Perceval job on RQ.
8183	Initializes the archive manager with a given path. Raises an error if the path is empty.
8184	Run the backend with given parameters, store fetched items in Redis queue, and access job status through `result`. Resume from last execution if `resume` is `True`.
8185	Executes a backend of Perceval.Runs the backend of Perceval assigned to this job using the given arguments.It will raise an AttributeError when any of the required parameters to run the backend are not found.Parses parameters to enable fetching from the archive or not. Returns an iterator of items fetched by the backend.
8186	Configure the index to work with
8187	Creates a mapping in Elasticsearch.
8188	Custom JSON encoder handler
8189	Write items to the queue.
8190	Add and schedule a task.
8191	Removes and cancels a task.
8192	Get and remove queued items in an atomic transaction.
8193	Check that the task arguments received are valid. Validate the task_id, backend, category, and backend_args. If any argument is missing or invalid, raise a ValueError.
8194	Parse the archive arguments of a task.
8195	Custom method to execute a job, notify of its result, and return super result.
8196	Schedule a job in the given queue.
8197	Cancel the job related to the given task.
8198	Run thread to listen for jobs and reschedule successful ones.
8199	Listen for completed jobs and reschedule successful ones.
8200	Start scheduling jobs.
8201	Schedule a task.
8202	Cancel or 'un-schedule' a task.
8203	Reschedules a job if it was successful and updates its scheduling parameters.
8204	Handle failed jobs by logging an error message with the job ID and task ID.
8205	Build the set of arguments for running a job.
8206	Get contents of secret file. If not found, return default.
8207	Register the API view class in the bananas router
8208	Register a generic class based view wrapped with ModelAdmin and fake model.
8209	Extended DRF with fallback to requested namespace if request.version is missing
8210	Get or generate human readable view name.
8211	Derives a PEP386-compliant version number from VERSION
8212	Returns the object for the given key, resolving aliases to their targets. Raises KeyError if no match is found.
8213	Performs a lookup in _ENGINE_MAPPING using engine_string.
8214	Get database name and database schema from path.
8215	Return a django-style database configuration based on ``url``.
8216	Parse a database URL and return a DatabaseInfo named tuple.
8217	Log in a Django staff user
8218	Retrieve logged in user info
8219	Change password for logged in django staff user
8220	This method builds a url field for a serializer, setting the view name to "detail"
8221	Parse string to bool.
8222	Parse numeric string to int. Supports oct formatted string.
8223	Return appropriate parser for given type.
8224	Get and parse prefixed Django settings from env.
8225	Consume fields and values from a Django model instance.
8226	Implementation of Y64 non-standard URL-safe base64 variant, substituting `+`, `/`, `=` with `.`, `_`, `-`.
8227	Create a field by field info dict.
8228	Create a Validator instance from data_struct_dict
8229	Computes Cartesian product of input parameter dictionary, considering linked parameters in a specified order.
8230	Takes a list of explored parameters and finds unique parameter combinations. If parameter ranges are hashable operates in O(N), otherwise O(N**2). Returns a list of tuples, each containing the parameter values and the run positions of the unique combinations.
8231	Change the simple logging kwargs into a `log_config`
8232	Decorator to allow a simple logging configuration.
8233	Tries to make directories for a given filename, ignoring errors and notifying via stderr.
8234	Returns all valid python strings inside a given argument string.
8235	Renames a given `filename` by replacing wildcard placeholders with provided or inferred values.
8236	Adds a logger with a given name, or constructs one using the class name if no name is provided.
8237	Extracts wildcards and file replacements from a trajectory
8238	Displays a progressbar
8239	Searches for parser settings defining filenames, renames them, creates corresponding folders, and updates the parser.
8240	Turns a ConfigParser into a StringIO stream.
8241	Searches for multiprocessing options within a ConfigParser and copies them into a new parser, removing the 'multiproc_' prefix.
8242	Searches for multiprocessing options in a given dictionary. If found, copies them into a new dictionary without the 'multiproc_' prefix.
8243	Checks and converts log configuration settings for the Manager, including report progress and log file paths.
8244	Checks for filenames within a config file, translates them, and creates directories for the files.
8245	Recursively walks and copies log_config dict, translates filenames, creates directories
8246	Creates logging handlers and redirects stdout.
8247	Finalizes the manager, closes and removes all handlers if desired.
8248	Starts redirection of `stdout`
8249	Writes data from buffer to logger.
8250	Compare two result instances, considering full name and data, but not comment.
8251	Compare two parameter instances by full name, data, and ranges.
8252	Make a function a manual run function with optional features like specializing functionality, storing metadata, and cleaning up data.
8253	Decorator to mark functions as deprecated and emit a warning.
8254	Decorator to ensure that two parameters are not specified at the same time, and optionally maps one parameter to another.
8255	Decorator to handle keyword argument name changes, issuing warnings and updating arguments accordingly.
8256	Retry decorator that retries a function `n` times, catches specified errors, waits with `wait` secs, and optionally logs the error with `logger_name`.
8257	Decorator that adds the prefix naming scheme
8258	Adds all necessary parameters to `traj` for network simulation.
8259	Creates and runs a BRIAN network based on parameters in `traj`.
8260	Simulates integration using the Euler method.
8261	Adds parameters to the `traj` container for simulating a time series with initial conditions and functional parameters.
8262	Calculates the derivative of the Lorenz attractor differential equation for a given set of values and parameters.
8263	Creates a service from a constructor and checks which kwargs are not used
8264	Create a storage service based on input parameters, handling different types of storage services and filenames.
8265	Adds all necessary parameters to the `traj` container based on the differential equation specified in `traj.diff_name`.
8266	Roessler attractor differential equation. Calculates the derivative of x, y, and z components based on the given parameters a and c.
8267	Compress an HDF5 file by calling ``ptrepack`` command with compression properties from a given trajectory.
8268	Checks if one of the parameters in `group_node` is explored.
8269	Computes model equations for the excitatory and inhibitory population. Equations objects are created by fusing model.eqs and model.synaptic.eqs, replacing PRE by i (inhibitory) or e (excitatory). Returns a dictionary with 'i' equation object for inhibitory neurons and 'e' for excitatory.
8270	Pre-builds the neuron groups if none of the relevant parameters are explored.
8271	Builds the neuron groups if they haven't been pre-built before.
8272	Constructs the neuron groups from trajectories, adding them to Brian list and network dictionary.
8273	Pre-builds the connections if the relevant parameters are not explored and the relevant neuron groups exist.
8274	Builds connections if they haven't been pre-built.
8275	Adds necessary parameters to 'traj' container.
8276	Computes Fano Factor for a neuron's spike activity in specified time bins.
8277	Computes average Fano Factor over many neurons.
8278	Calculate average Fano Factor of network
8279	Adds monitors to the network if the measurement run is carried out.
8280	Adds monitors to the network
8281	Creates a subfolder for plots and returns the path.
8282	Plots state variable graphs for neurons in a trajectory.
8283	Makes plots of spiking data and stores them in a subfolder.
8284	Extracts monitor data and plots if all subruns are complete.
8285	Parses the batch id from the command line arguments.
8286	Chooses exploration according to `batch`
8287	Create a vars attribute if it doesn't exist and return it.
8288	Returns an instance of NNTreeNodeFunc
8289	Renames the tree node.
8290	Sets some details for internal handling.
8291	Maps a node and store_load constant to a message for the storage service.
8292	Removes a subtree from the trajectory tree from RAM only, optionally filtering nodes with a predicate.
8293	Deletes a single node from the tree. Removes all references to the node.
8294	Removes a single node from the tree. Only from RAM not from hdf5 file!
8295	Recursively deletes a given node from the tree, walking down from a start node and removing children if specified.
8296	Maps a given shortcut to corresponding name
8297	Adds the correct sub branch prefix to a given name.
8298	Determines types for generic additions based on start node and type mapping.
8299	Adds a given item to the tree irrespective of the subtree, inferring the subtree from the arguments, and handling creation of new instances or linking to existing ones.
8300	Adds a new item to the tree, creating new groups and applying additional configurations as needed.
8301	Creates a link and checks if names are appropriate
8302	Checks if a list contains strings with invalid names. Returns a description of the name violations. If names are correct the empty string is returned.
8303	Generically creates a new group inferring from the type_name.
8304	Generically creates a novel parameter or result instance inferring from the `type_name`. If the instance is already supplied it is NOT constructed new.
8305	Rename a given instance based on parent_node and name and add meta information like depth.
8306	Return an iterator over nodes hanging below a given start node.
8307	Returns an iterator over a node's children.
8308	A breadth-first search iterator function for traversing a tree structure.
8309	Fast search for a node in tree using reference dictionaries. Raises errors if search cannot be performed fast enough or if multiple nodes match key criterion.
8310	Searches for an item in the tree below node.
8311	Performs a backwards search from the terminal node back to the start node. Returns a list of found items.
8312	Alternative naming for node kids.
8313	Can be called from storage service to create a new group to bypass name checking
8314	Can be called from storage service to create a new leaf to bypass name checking
8315	Returns a list of all children names.
8316	Creates a dummy object containing the whole tree to make unfolding easier. Useful for debugging purposes.
8317	Returns the parent of the node. Raises a TypeError if current node is root.
8318	Adds an empty generic group under the current node.
8319	Adds a link to an existing node. Can be called with either a node or a name and a node. Colon-separated names are not allowed.
8320	Removes a link from the current group node with a given name.
8321	Adds an empty generic leaf under the current node.
8322	Recursively removes the group and all its children.
8323	Removes a child from the group, optionally recursively and based on a predicate.
8324	Checks if the node contains a specific parameter or result.
8325	Returns default value if name not found in trajectory.
8326	Returns a children dictionary.
8327	Returns a dictionary of groups hanging immediately below this group.
8328	Returns a dictionary of all leaves hanging immediately below this group. Whether the group's original dictionary or a shallow copy is returned.
8329	Returns a link dictionary, optionally as a copy.
8330	Stores a child or recursively a subtree to disk.
8331	Stores a group node to disk.
8332	Loads a child or recursively a subtree from disk.
8333	Load a group from disk.
8334	Adds an empty parameter group under the current node.
8335	Adds a parameter under the current node.
8336	Adds an empty result group under the current node.
8337	Adds a result under the current node, either by adding a result instance or by passing values directly to the function. If a custom result constructor is provided, it is used to create the result. The name of the result is automatically prefixed with the full name of the current node. If the current node is a single run (root), the prefix is replaced with the index of the current run.
8338	Adds an empty derived parameter group under the current node with optional name and subgroup creation.
8339	Adds a derived parameter under the current group.Similar to :func:`~pypet.naturalnaming.ParameterGroup.f_add_parameter` Naming prefixes are added as in :func:`~pypet.naturalnaming.DerivedParameterGroup.f_add_derived_parameter_group`
8340	Adds an empty config group under the current node, with the current node's full name as a prefix.
8341	Adds a config parameter under the current group. Similar to :func:`~pypet.naturalnaming.ParameterGroup.f_add_parameter`. If current group is the trajectory the prefix `'config'` is added to the name.
8342	Calculates fitness of an individual in a one-max problem and stores the result.
8343	Adds commit information to the trajectory
8344	Makes a commit in a Git repository, appending the trajectory name and comment. If there are uncommitted changes and `git_fail` is `True`, raises a `GitDiffError`. Returns whether a new commit was triggered and the SHA-1 code of the commit.
8345	Flatten a nested dictionary with keys concatenated using a separator.
8346	Nest a given flat dictionary by splitting keys around a specified separator.
8347	Plots a progress bar to the given `logger` for large for loops.
8348	Helper function to get arguments and check for **kwargs usage.
8349	Takes a function and keyword arguments and returns those that can be passed.
8350	Formats timestamp to human readable format
8351	Returns local tcp address for a given `port`, or a random port if `None`.
8352	Creates a directory, handling race conditions.
8353	Resets the progressbar for a new cycle, initializing various parameters such as start time, index, percentage step, and total.
8354	Calculates remaining time as a string
8355	Returns annotations as dictionary.
8356	Removes a key from annotations.
8357	Returns all annotations lexicographically sorted as a concatenated string.
8358	Turns a given shared data item into an ordinary one.
8359	Turns an ordinary data item into a shared one by removing the old result from the trajectory and replacing it, then empties the given result.
8360	Creates shared data on disk with a StorageService.
8361	Interface with the underlying storage.
8362	Returns the actual node of the underlying data.
8363	Checks if item is supported by outer data structure.
8364	Calls the corresponding function of the shared data item.
8365	Stores the current process name in the trajectory and updates the results.
8366	Handles locking of locks: if already locked, sends a WAIT command; else, LOCKs it and sends GO. Complains if a client re-locks a lock without releasing it first.
8367	Notifies the Server to shutdown
8368	Closes socket and terminates context. No-op if already closed.
8369	Starts connection to server if not existent. Makes ping-pong test as well if desired.
8370	Send request and handle retries.
8371	Acquire lock and returns True after blocking until lock is available.
8372	Handles listening requests from the client.
8373	Sends data to server if there is space in the queue, waits 10 milliseconds if no space available.
8374	Detects if the lock client was forked by comparing the PID of the current process with the stored PID. Restarts the connection if a fork is detected.
8375	Handles data and determines if further processing is needed.
8376	Starts listening to the queue.
8377	Gets data from queue
8378	Gets data from pipe.
8379	Acquire a lock before storage and release it afterwards.
8380	Simply keeps a reference to the stored data
8381	Stores references to disk and may collect garbage.
8382	Decorator wrapping the environment to use a config file
8383	Collects settings within a section.
8384	Collects all info from three sections.
8385	Copy parsed arguments into kwargs passed to the environment.
8386	Adds parameters and config from the `.ini` file to the trajectory.
8387	Converts an integer into an 8-bit binary list representation.
8388	Creates an initial state for the automaton based on the 'single' or 'random' option.
8389	Plots an automaton pattern and saves the image under a given filename.
8390	Simulates a 1-dimensional cellular automaton based on an initial state and update rule.
8391	Main simulation function.Runs cellular automaton simulations with different rules initialState and plots the results.
8392	Signals the process timer. If more time than the display time has passed, a message is emitted showing the number of nodes processed and the time taken.
8393	Get the overview group.
8394	Loads a particular item from disk
8395	Stores data to disk based on different messages. Handles merging, backup, trajectory storage, single run storage, parameter/result storage, deletion, group storage, tree storage, link deletion, list storage, data access, file opening/closing, and flushing.
8396	Loads several items from an iterable. Iterables are of a format like [(msg, item, args, kwarg),...].
8397	Reads out properties for storing new data into the hdf5file
8398	Stores several items from an iterable
8399	When `closing=True` and the file is not being kept open, it flushes and closes the HDF5 file and its store.
8400	Extracts file information from kwargs.
8401	Backs up a trajectory by copying it to a new file or the default backup location
8402	Convert table row to dictionary using column names.
8403	Prepares a trajectory for merging by updating meta information, storing extended parameters, and modifying run tables.
8404	Loads metadata about the trajectory, checking version and updating run information if not loaded as new.
8405	Loads data starting from a node along a branch and recursively loads all data at the end of the branch.
8406	Checks for version mismatch between loaded trajectory and current pypet version and raises VersionMismatchError or emits warning if mismatch is found, unless `force=True` is used.
8407	Fills `run` overview table with incomplete information from `traj`.
8408	Recalls names of all explored parameters from a trajectory.
8409	Stores all explored parameter names for internal recall.
8410	Creates overview tables in overview group based on table_name.
8411	Stores a trajectory to an hdf5 file. Stores all groups, parameters and results.
8412	Stores data starting from a node along a specified branch and recursively loads all data at the end of the branch.
8413	Create a new pypet leaf instance. Returns the leaf and its length if it's an explored parameter.
8414	Loads a node from an hdf5 file and if desired, recursively loads everything below it.
8415	Store a node to hdf5 and if desired stores recursively everything below it.
8416	Stores a single row into an overview table based on the instance's parameters, table, and flags.
8417	Creates a new table, or if the table already exists, returns it.
8418	Returns an HDF5 node by the path specified in `name`.
8419	Stores original data type to hdf5 node attributes for preserving the data type.
8420	Checks if loaded data has the type it was stored in. If not converts it.
8421	Adds or modifies a row in a pytable based on the given parameters.
8422	Copies data from `insert_dict` into a pytables `row`.
8423	Extracts information from a given item to be stored into a pytable row.
8424	Cuts string data to max allowed length in pytables column if too long. Logs truncation if necessary.
8425	Creates or returns a group
8426	Creates new or follows existing group nodes along a given colon separated key.
8427	Stores annotations into an hdf5 file, overwriting existing annotations if specified.
8428	Loads annotations from disk into non-empty annotations.
8429	Stores a group node, handling annotations, comments, and class names for specific node types.
8430	Load a group node and potentially everything recursively below.
8431	Reload skeleton data of a tree node.
8432	Extracts storage flags for data in `data_dict` if they were not specified in `flags_dict`.
8433	Adds data to summary tables and returns whether to store `instance`s comment. Moves comments upwards in hierarchy if necessary for multiprocessing.
8434	Adds metadata and information to an HDF5 group of an instance.
8435	Stores a dictionary in an HDF5 group based on the storage flags.
8436	Stores a parameter or result to hdf5.
8437	Creates and array for use with an HDF5 array object Flags determine type of array written
8438	Creates a new empty table in HDF5 with optional first row and description.
8439	Stores a Python dictionary as a pytable in an HDF5 file.
8440	Stores a pandas DataFrame into hdf5.
8441	Stores data as carray, earray or vlarray depending on `flag`.
8442	Stores data as array in HDF5 file.
8443	Removes a link from disk
8444	Removes a parameter, result, or group from the HDF5 file.
8445	Stores data as pytable.
8446	Returns a description dictionary for pytables table creation
8447	Creates a pytables column instance. The type of column depends on the type of column[0].
8448	Returns the longest string size for a string entry across data Adjusts the length for additional space
8449	Loads data from HDF5 group into a dictionary based on attributes and flags.
8450	Loads a dictionary from a PyTables table
8451	Reads shared data and constructs the appropriate class.
8452	Reads a non-nested PyTables table column by column and creates a new ObjectTable for the loaded data.
8453	Reads data from an array or carray.
8454	Helper function that creates a novel trajectory and loads it from disk.
8455	Creates a run set name based on the given index, grouping runs every 1000 indices.
8456	Sets properties with names prefixed by 'v_' and validates their existence.
8457	Add custom classes or paths to the trajectory for dynamic imports.
8458	Setting the trajectory to behave as during a particular single run
8459	Iterate over runs in a trajectory with optional start, stop, step, and yields options.
8460	Shrinks the trajectory and removes all exploration ranges from the parameters. Only possible if the trajectory has not been stored to disk before or was loaded as new. Raises TypeError if the trajectory was stored before.
8461	Add parameter or config for presetting. Raises error if parameter is already part of trajectory.
8462	Presets parameter value before addition to the Trajectory.
8463	Initial configurations before individual runs. Checks preset parameters. Locks parameters. Removes potential results from previous runs.
8464	Searches for all occurrences of `name` in each run. Generates an ordered dictionary with the run names or indices as keys and found items as values.
8465	Check if a run is completed by a given name or id. If no name or id is provided, check if all runs are completed.
8466	Deletes all explored parameters from disk if the trajectory is expanded.
8467	Pass a node to insert the full tree into the trajectory considering all links and ignoring already found nodes.
8468	Prepares the trajectory to explore the parameter space by providing a dictionary of parameters and their exploration ranges. Ensures all iterables have the same length and that the names map to parameters. Adds new explored parameters if the trajectory is already explored but not stored. Raises errors if the trajectory has been stored or if the names map to groups or results instead of parameters.
8469	Overwrites the run information of a particular run
8470	Adds a new run to the `_run_information` dict. Deletes old entries if the index already exists. Handles default name and updates bidirectional `_single_run_ids` dict.
8471	Locks all non-empty parameters
8472	Locks all non-empty derived parameters.
8473	Final rollback initiated by the environment. Restores trajectory, updates meta data, marks trajectory as not running, and sets current run to None.
8474	Loads the full skeleton from the storage service.
8475	Loads a trajectory via the storage service, allowing for various options to control data loading and handling.
8476	Backs up the trajectory with the given storage service.
8477	Creates a full mapping from all wildcard translations to the corresponding wildcards
8478	Merges several trajectories into the current trajectory.
8479	Updates the `run_information` of the current trajectory by merging details from another trajectory based on used run indices.
8480	Renames a full name based on wildcards and a particular run
8481	Merge derived parameters that have the `run_ALL` in a name
8482	Merges all links between two trajectories, handling wildcard functions, allowed translations, and ignoring specified data.
8483	Merges metadata from previous merges, git commits, and environment settings of another trajectory into the current one.
8484	Merge trajectories by iterating through items of another trajectory, applying a renaming dictionary, and updating the current trajectory accordingly.
8485	Merges results from another trajectory, applying name changes as specified in rename_dict, while ignoring specified data and handling allowed translations.
8486	Rename and relocate the trajectory.
8487	Stores the trajectory to disk and recursively all data in the tree.
8488	Restores default values for all explored parameters and resets index and current run properties.
8489	Notifies the explored parameters what current point in the parameter space they should represent.
8490	Forces is_run to False, clears new_nodes and new_links, then sets is_run to True
8491	Returns a list of run names. Only useful for a single run during multiprocessing if `v_full_copy` was set to `True`. Otherwise, only the current run is available. If `sort` is `True`, returns them sorted using bucket sort for O(N) complexity. Otherwise, returns the keys from `_run_information`.
8492	Get dictionary with information about a single run.
8493	Find a single run index based on a predicate condition.
8494	Can be used to manually allow running of an experiment without using an environment
8495	Manually finish a run, optionally storing metadata and cleaning up data.
8496	Sets the start timestamp and formatted time to the current time.
8497	Sets the finish time and computes the runtime in human readable format
8498	Creates a new node, checks if it needs to know the trajectory.
8499	Returns a dictionary with parameters, explored parameters, config, derived parameters, or results based on the input parameters.
8500	Remove processed results and derived parameters from the current run to prevent memory overflow in single-processing environments.
8501	Return a dictionary with config names as keys and config parameters or data items as values.
8502	Returns a dictionary containing the full result names as keys and the corresponding result objects or result data items as values.
8503	Stores individual items to disk immediately and frees memory.
8504	Loads parameters and results specified in `iterator`.
8505	Removes parameters, results, or groups from the trajectory.
8506	Deletes several links from the hard disk. Links can be passed as a string or tuple.
8507	Recursively removes all children of the trajectory.
8508	Deletes items from storage on disk, with options to remove from trajectory and handle partial or recursive deletion.
8509	Starts a pool single run and passes the storage service
8510	Single run wrapper for the frozen pool, makes a single run and passes kwargs.
8511	Configure the pool and keep the storage service
8512	Configures the frozen pool and keeps all kwargs
8513	Wrapper function that first configures logging and starts a single run afterwards.
8514	Wrapper function that configures a frozen SCOOP setup, deletes old data if necessary.
8515	Wrapper function for scoop, that does not configure logging
8516	Configure logging using the logging manager.
8517	Sets niceness of a process
8518	Handles graceful exits for single runs.
8519	Performs a single run of the experiment.
8520	Runs a queue handler and creates a log file for the queue.
8521	Loads a class from a string naming the module and class name.
8522	Dynamically creates a class.
8523	Returns the length of the parameter range. Raises TypeError if the parameter has no range or does not support __len__.
8524	Return a string summary of the value handled by the parameter using `__repr__`.
8525	Checks if two values are considered equal by the parameter, using the `nested_equal` function from the `comparisons` module. Returns `False` if the parameter does not support one or both input types.Also checks if the types are the same before returning the result of `nested_equal(val1, val2)`.
8526	Returns a python iterable containing the exploration range.
8527	Explores the parameter according to the iterable.Raises exceptions if the parameter is locked, does not support the data, or already has an exploration range.Stores the individual data values into a tuple.
8528	Explores the parameter according to the iterable and appends to the exploration range. Raises exceptions if the parameter is locked or does not support the data.
8529	Checks if data values are valid and of the same type as the default value.
8530	Return a dictionary of formatted data understood by the storage service.
8531	Loads data and exploration range from the load_dict. Checks for data and explored_data keys and updates the parameter accordingly. Raises an exception if the parameter is locked.
8532	Reconstructs the data and exploration array. Checks if '__rr__' is in `load_dict`. If not, calls parent class's _load. If explored, reconstructs the exploration range.
8533	Checks if two matrices are equal by comparing their hash values.
8534	Checks if a data is csr, csc, bsr, or dia Scipy sparse matrix
8535	Extract data from a sparse matrix to make it serializable in a human-readable format.
8536	Formats a name for storage
8537	Reconstructs a matrix from a list containing sparse matrix extracted properties
8538	Reconstructs the data and exploration array Checks if '__spsp__' is in `load_dict` If not, calls `_load` of parent class If parameter is explored, reconstructs exploration range of matrices
8539	Returns a dictionary for storage, with pickled data and explored object references.
8540	Reconstructs objects from pickle dumps in load_dict. Sets the v_protocol property to the protocol used to store 'data'. Handles exploration data if present.
8541	Translates integer indices into the appropriate names.
8542	Summarizes data handled by the result as a string. Calls `__repr__` on all handled data. Truncates the string if it is longer than `HDF5_STRCOL_MAX_VALUE_LENGTH`.
8543	Returns all handled data as a dictionary.
8544	Method to put data into the result.
8545	Returns items handled by the result.
8546	Sets a single data item of the result, raising a TypeError if the type is not supported.
8547	Supports everything of parent class and specific sparse matrices.
8548	Return a storage dictionary understood by the storage service.
8549	Loads data from `load_dict` to reconstruct sparse matrices.
8550	Adds a single data item to the pickle result without checking its picklability. Warns if changing an already stored result. Raises an error if naming the entry 'PROTOCOL'.
8551	Create a dictionary containing pickle dumps of data.
8552	Reconstructs all items from the pickle dumps in `load_dict`. Sets the `v_protocol` property to the protocol of the first reconstructed item.
8553	Merge all trajectories in the working directory.
8554	Uploads a file
8555	Downloads a file.
8556	Creates and returns a new SAGA session
8557	Submit a job to merge trajectories using Saga's job management system.
8558	Starts all jobs and runs `the_task.py` in batches.
8559	Simulate multiplication of x and y in traj object.
8560	Simulate a model neuron's firing rate using Euler integration.
8561	This function sorts computed firing rates into a pandas DataFrame based on parameters from a trajectory object and updates the trajectory with the sorted rates.
8562	Adds parameters to the trajectory object.
8563	Explores different values of `I` and `tau_ref` by creating a cartesian product and applying it to the trajectory.
8564	Runs a network before the actual experiment.
8565	Run a network in an experimental run using a trajectory, network, component list, and analyser list.
8566	Extracts subruns from the trajectory based on order.
8567	Generic `execute_network_run` function handles experimental runs as well as pre-runs
8568	Adds parameters for a network simulation by calling add_parameters for components, analysers, and runner in that order.
8569	Starts a network run before the individual run. Useful for an initial run shared by all individual experimental runs during parameter exploration.
8570	Top-level simulation function to perform an individual network run during parameter exploration. If passed to an Environment, it is automatically called for each experimental run. Creates a new BRIAN2 network if pre-built one was not used.
8571	Runs a single simulation using a NetworkRunner.
8572	Creates a generic filename based on explored parameters in a trajectory.
8573	Returns next element from chain.
8574	Merges all files in a given folder, using the last trajectory in each file and ignoring others. Trajectories are merged in alphabetical order, and the resulting merged trajectory is stored in the first file. Optionally deletes other files.
8575	Does nothing if SIGINT is encountered once but raises a KeyboardInterrupt in case it is encountered twice.
8576	Manage reading and writing configuration from a file.
8577	Requests a PIN from ecobee for authorization.
8578	Method to request API tokens from ecobee.
8579	Method to refresh API tokens from ecobee.
8580	Calls the Ecobee API to retrieve a JSON list of thermostats. Sets self.thermostats if successful. Handles exceptions and retries token refresh if necessary.
8581	Write api tokens to a file
8582	Set HVAC mode of a thermostat.
8583	Set minimum fan on time for a thermostat.
8584	Set a hold on a thermostat.
8585	Set a climate hold - away, home, sleep
8586	Delete the vacation with a given name.
8587	Resume currently scheduled program.
8588	Send a message to the thermostat
8589	Set humidity level.
8590	Generate the delay in seconds for DHCP discovery in the SELECTING state
8591	Generate the time in seconds for DHCPDISCOVER retransmission, randomized and doubled with subsequent attempts up to a maximum of 64 seconds.
8592	Generate time in seconds to retransmit DHCPREQUEST
8593	Generate RENEWING time with a fixed value and some random "fuzz" to avoid synchronization.
8594	Return the self object attributes not inherited as dict.
8595	Reset object attributes when state is INIT.
8596	Workaround to get timeout in ATMT.timeout class method
8597	Change timeout values in the ATMT.timeout class method for a specific state and function.
8598	Send discover packet and handle retries with timeout.
8599	Select an offer from the offers received. The current implementation selects the first offer.
Note that this method is subject to change as specified in the todo comment.
8600	Send a DHCPREQUEST packet and handle retries based on the current state.
8601	Set renewal and rebinding times.
8602	Process a received ACK packet.
8603	Processes a received NAK packet.
8604	Initialize the state and set random delay for DHCP initialization.
8605	Transition to BOUND state and process scripts or network settings.
8606	Handle the RENEWING state.
8607	Initialize and start script execution or set network lease
8608	END state handler.
8609	Sets the current state to ERROR, initializes and runs the script, updates network settings, and raises an INIT exception.
8610	Timeout of selecting on SELECTING state.
8611	Timeout requesting in REQUESTING state
8612	Renew timeout handling in RENEWING state.
8613	Handle request rebinding timeout in REBINDING state.
8614	Receive offer in SELECTING state.
- Add pkt to offers.
- If MAX_OFFERS_COLLECTED, raise REQUESTING.
- Else, raise SELECTING.
8615	Handle ACK in REQUESTING state.
8616	Receive NAK in REQUESTING state.
8617	Receive ACK in RENEWING state and raise BOUND if processed.
8618	Receive NAK in RENEWING state.
8619	Process ACK in REBINDING state; raise BOUND if received.
8620	Receive NAK in REBINDING state.
8621	Action on renewing in RENEWING state. Sanitizes lease net values, sets lease times, and restarts timers.
8622	Assign a value, remove if it's None
8623	Append a value to multiple value parameter.
8624	Remove a value from multiple value parameter.
8625	Get programs statuses by connecting to a supervisord server via either a Unix socket or HTTP/HTTPS, with optional authentication and error handling.
8626	Create Nagios and human readable supervisord statuses.
8627	Run the program with the given options and output the results.
8628	Validate a decoded SNS message by checking the signing certificate URL, message age, and cryptographic signature.
8629	Read tdms file and return channel names and data
8630	Adds deformation to data if not present.
8631	Creates an FCS file for a given TDMS file by reading data, adding deformation, and writing the FCS file.
8632	Runs a diff command to check if the left and right objects are equal. Returns True if they are equal, False otherwise.
8633	Add a new patch to the queue as the topmost applied patch.
8634	Delete next unapplied patch
8635	Delete specified patch from the series. If remove is True, the patch file will also be removed. If remove and backup are True, a copy of the deleted patch file will be made.
8636	Checks if a backup file of the filename in the current patch exists
8637	Creates a backup of a file.
8638	Adds file to the patch with patch_name. If patch_name is None or empty the topmost patch will be used. Adding an already added patch will raise a QuiltError if ignore is False.
8639	Run a command as a subprocess and wait for it to finish.
8640	Creates the directory and all its parent directories if it does not exist yet.
8641	Copies contents of source directory to destination directory recursively, with option to preserve symbolic links.
8642	Create hard link as link to this file
8643	Copy file to destination
8644	Returns the directory where the file is placed in or None if the path to the file doesn't contain a directory.
8645	Backup file in destination directory. The return value is a File object pointing to the copied file or None.
8646	Refresh a patch with patch_name or applied top patch if patch_name is None.
8647	Unapply patches up to patch_name. patch_name will end up as top patch.
8648	Unapply the top patch.
8649	Unapply all patches
8650	Apply all patches up to a specified patch name.
8651	Applies the next patch in a series file.
8652	Apply all patches in series file
8653	Reads all patches from the series file
8654	Saves current patches list in the series file.
8655	Add a patch to the patches list
8656	Insert list of patches at the front of the current patches list.
8657	Adds a list of patches to the patches list, optionally inserting them after a specific patch.
8658	Remove a patch from the patches list
8659	Return list of patches after a given patch from the patches list.
8660	Return a list of patches before a given patch from the patches list.
8661	Return a list of patches before a given patch, including the provided patch.
8662	Replace old_patch with new_patch in the patchlines list.
8663	Creates the dirname and inserts a .version file
8664	Checks if the .version file in dirname has the correct supported version number.
8665	Adds the group and its arguments to a argparse.ArgumentParser instance.
8666	Adds the argument to an argparse.ArgumentParser instance
8667	Adds this SubParser to the subparsers created by argparse.ArgumentParser.add_subparsers method
8668	Sets args and kwargs for subparsers group in argparse.ArgumentParser.
8669	Adds the subparsers to an argparse.ArgumentParser instance.
8670	Checks if a backup file of the filename in the current patch exists and raises a QuiltError if not.
8671	Checks if a backup file of the filename in the applied patches after patch exists.
8672	Reverts not added changes of a file using a patch, optionally specified by `patch_name`. If no patch is specified, the topmost patch is used. Changes are reverted in a temporary directory and then copied back to the original file if they are unchanged.
8673	Import patch into the patch queue. The patch is inserted as the next unapplied patch.
8674	Import several patches into the patch queue.
8675	Process each way and create a Way object if it has valid nodes.
8676	Get a list of nodes not found in OSM data.
8677	Process each node.
8678	Extracts information for a route relation
8679	Create a meaningful route name based on relation tags, with or without a short name prefix.
8680	Construct an id for agency using its tags.
8681	Contains implied imports, hence cannot be executed directly.
8682	Process each relation and store relevant data based on its type and attributes.
8683	Create `calendar`, `stop_times`, `trips` and `shapes`.
8684	Fills the fields that are necessary for passing transitfeed checks.
8685	Create station stop times for each trip.
8686	Write the GTFS feed in the given file.
8687	Writes GTFS text files in the given path.
8688	Extract agency information from a relation and nodes.
8689	Extract stops in a relation.
8690	Extract shape of one route.
8691	Gets a list of supported U2F versions from the device.
8692	Sends an APDU to the device and waits for a response.
8693	Interactively authenticate a AuthenticateRequest using an attached U2F device.
8694	Register a U2F device.
8695	Signs an authentication challenge using FIDO U2F.
8696	Interactively registers a single U2F device using the provided RegistrationRequest.
8697	Recursively converts unicode objects to UTF-8 encoded byte strings.
8698	Wraps a function with reporting to an errors backend, allowing dynamic configuration through keyword arguments or as a decorator.
8699	Wraps a class with reporting to an errors backend by decorating each function of the class. Decorators are injected under the classmethod decorator if they exist.
8700	Given a filepath and a list of regex patterns, this function returns true if the filepath matches any one of those patterns.
8701	Check email remapping or override domain
8702	Retrieves a particular entry from the prefix trees.
8703	Convert markdown-style readme to reST formatted text
8704	Starts the server with an HTTP server and a Thrift server. The HTTP server handles the admin interface, while the Thrift server is called by client code. Configures logging and storage factory.
8705	Record errors to the flawless backend.
8706	Fetch an image from a URL and convert it to a Pillow Image object.
8707	Convert string data into a Pillow Image object.
8708	Return a decorator that validates arguments with provided `validator` function.
8709	Check that the image's size is superior to the given size; raise an ImageSizeError if not.
8710	Checks if the image width is greater than the specified width. Raises an ImageSizeError if it is not.
8711	Checks if the image height is greater than the specified height. Raises an ImageSizeError if it is not.
8712	Converts the text category to a tasks.Category instance.
8713	Parse numeric fields from a given item and source name, returning the value as an integer or 0 if parsing fails.
8714	Iterator of the list of items in the XML source using `iterparse` for efficiency.
8715	Saves an error in the error list.
8716	Parses all data from the source, saving model instances.
8717	Parse an item and return a dictionary of field values.
8718	Get an item from the database or an empty one if not found.
8719	Saves a model instance to the database.
8720	Downloads a HTTP resource from url and saves to dest, handling Gzip compressed content
8721	Opens the source file.
8722	Return an iterator to read the rows of the CSV file.
8723	Set network access allowed or disallowed. Raises ValueError if sandbox is running.
8724	Runs a command inside the sandbox and returns the results.
8725	Copies specified files into a sandbox directory, handling ownership and read-only permissions.
8726	Copies and renames file in sandbox
8727	Return a list of all enrollments for the passed course_id.
8728	Return a list of all enrollments for the passed course sis id.
8729	Return a list of all enrollments for the passed section_id.
8730	Return a list of all enrollments for the passed section sis id.
8731	Return a list of enrollments for the passed user regid.
8732	Enroll a user into a course.
8733	List the roles for an account using the Canvas API.
8734	List the roles for an account, for the passed account SIS ID.
8735	List all course roles available to an account, including roles inherited from parent accounts.
8736	Gets information about a single role for the given Canvas account ID.
8737	Gets information about a single role, for the passed account SIS ID.
8738	Return course resource for given canvas course id. If "term" not in include, append "term" to include and return CanvasCourse object.
8739	Return course resource for given sis id.
8740	Returns a list of courses for the passed account ID.
8741	Return a list of courses for the passed account SIS ID.
8742	Returns a list of published courses for the passed account ID.
8743	Retrieves a list of published courses for a given account SIS ID.
8744	Return a list of courses for the passed regid.
8745	Creates a canvas course with the given subaccount id and course name.
8746	Updates the SIS ID for a course identified by the course ID.
8747	Returns participation data for the given account_id and term_id.
8748	Returns grade data for a specific account and term.
8749	Returns statistics for the given account_id and term_id.
8750	Returns participation data for the given sis_course_id.
8751	Returns assignment data for the given course_id by making a GET request to the Canvas API endpoint.
8752	Returns per-student data for the given course_id.
8753	Returns student activity data for the given user_id and course_id.
8754	Returns student messaging data for the given user_id and course_id.
8755	Get external tools for the passed canvas account id.
8756	Return external tools for the passed canvas course id.
8757	Create an external tool using passed json_data.
8758	Update details of an external tool in a given context.
8759	Delete external tool by ID.
8760	Check if a parameter is available on an object
8761	Returns user profile data using the Canvas API.
8762	Returns a list of users for a given course ID.
8763	Returns a list of users for the given sis course id.
8764	Create and return a new user and pseudonym for an account.
8765	Return a user's logins for the given user_id.
8766	Update an existing login for a user in the given account.
8767	Returns the URL path to the next page of paginated data
8768	Method to retrieve and coalesce resources from a Canvas API endpoint, handling pagination.
8769	Performs a paginated GET request on a given URL, handling parameter defaults and pagination.
8770	Canvas GET method. Return representation of the requested resource.
8771	Send a JSON PUT request to a Canvas resource.
8772	Canvas POST method.
8773	Canvas DELETE method.
8774	Return a list of admins in the account.
8775	Flag an existing user as an admin within the account.
8776	Flag an existing user as an admin within the account sis id.
8777	Remove an account admin role from a user.
8778	Remove an account admin role from a user for the account sis id.
8779	Create a new grading standard for a course.
8780	Return section resource for given canvas section id.
8781	Returns section resource for given sis id.
8782	Return list of sections for the passed course ID.
8783	Return list of sections for the passed course SIS ID.
8784	Returns list of sections including students for the passed course ID.
8785	Returns list of sections including students for the passed sis ID.
8786	Creates a canvas section in the given course id.
8787	Update a canvas section with the given section id.
8788	List quizzes for a given course.
8789	Return account resource for a given canvas account id.
8790	Return list of subaccounts within the account with the passed canvas id.
8791	Updates the passed account and returns the updated account.
8792	Updates the SIS ID for an account using its ID. Raises an exception if attempting to update the root account's SIS ID.
8793	Return the authentication settings for the passed account_id.
8794	Update the authentication settings for the passed account_id.
8795	Return a term resource for the passed SIS ID.
8796	Imports a CSV string.
8797	Imports a directory of CSV files.
8798	Get the status of an already created SIS import.
8799	Creates a zip archive from files in a given directory.
8800	List assignments for a given course.
8801	Modify an existing assignment.
8802	Returns the list of reports for the canvas account id.
8803	Shows all reports of the passed report_type that have been run for the canvas account id.
8804	Generates a report instance for the specified account ID.
8805	Convenience method for creating a course provisioning report.
8806	Convenience method for create_report, for creating a course sis export report.
8807	Convenience method for create_report, for creating an unused courses report.
8808	returns a completed report as a list of csv strings.
8809	Returns the status of a report. Raises ReportFailureException if report parameters are invalid.
8810	Deletes a generated report instance.
8811	Move detections in direction dx, dy.
8812	Horizontally flip detections according to an image flip.
8813	Return dictionary representation of an object, handling special cases for ForeignKeys and ManyToManyFields.
8814	Get the arguments given to the template tag element and complete these with the ones from the settings.py if necessary.
8815	Get the text to display when the field is empty.
8816	Parse uniformly args and kwargs from a templatetag.
8817	Create and register metrics from a list of MetricConfigs.
8818	Setup logging for the application and aiohttp.
8819	Configure the MetricRegistry by optionally registering a ProcessCollector.
8820	Create Prometheus metrics from a list of MetricConfigs.
8821	Return a metric, optionally configured with labels.
8822	Handle home page request and return response with title and metrics link.
8823	Handle metrics request and return response with metrics data.
8824	A free-text query resolver by Wolfram|Alpha. Returns the first result, if available.
8825	Add forward compatibility for HTTPMessage in Python 2.
8826	Query Wolfram|Alpha using the v2.0 API with arbitrary parameters.
8827	The pods, assumptions, and warnings of this result.
8828	Return the primary pods and those with the title 'Result'.
8829	Add request content data to request body, set Content-type header.
8830	Call API with specified method, URL, headers, params, data, files, and timeout. Returns response and status code.
8831	Call the API with a GET request.
8832	HTTP DELETE request to a resource.
8833	Call the API with a PUT request.
8834	Makes a POST request to the API and returns a ResultParser or ErrorParser instance.
8835	Process query recursively. Split text if too long and submit via POST request.
8836	Split sentences into groups based on a specified group length.
8837	Process a PDF file using the disambiguation service.
8838	Disambiguate a search query using a disambiguation service.
8839	Segment text into sentences using a segmenter. Returns sentence offsets and response code.
8840	Recognise the language of the text in input.
8841	Fetch concept from Knowledge base.
8842	Constructs the MDR ensemble from the provided training data
8843	Estimates the accuracy of predictions from an MDR ensemble using specified features and classes.
8844	Constructs the MDR feature map from the provided training data.
8845	Convenience function to fit data and then predict with the provided feature matrix.
8846	Estimates the accuracy of the predictions from the constructed feature
8847	Constructs the Continuous MDR feature map from the provided training data.
8848	Uses the Continuous MDR feature map to construct a new feature from the provided features. Constructs a binary variable, taking the values 0 and 1.
8849	Estimates the quality of the ContinuousMDR model using a t-statistic.
8850	Fits a MDR model to variables X and Y with the given labels, then returns the resulting predictions.
8851	Generate and fit MDR models for all n-way combinations of features in X.
8852	Visualize the MDR grid of a given fitted MDR instance.
8853	Get security configuration for an application, stripping a specified prefix.
8854	Retrieves a Flask-Security configuration value with the specified key and optional application context, using a default value if not set.
8855	Creates a new vector.
8856	Creates a new vector from members.
8857	Evaluates a file into a Python module AST node.
8858	Evaluate the forms in stdin into a Python module AST node.
8859	Evaluate the forms in a string into a Python module AST node.
8860	Bootstrap the REPL with useful vars and return the bootstrapped module.
8861	Run a Basilisp script or a line of code, if it is provided.
8862	Make a Python multi-function decorator from a dispatch function.
8863	Swap the methods atom to include method with key.
8864	Add a new method to this function based on a key.
8865	Return the method which would handle this dispatch key or None if no method defined for this key and no default.
8866	Swap the methods atom to remove method with key.
8867	Remove the method defined for this key and return it.
8868	Return True if the Var holds a macro function.
8869	Fetches the location (line, col) of the form in the original filename from the input form's metadata.
8870	Wrapper to attach location information from input form to parsing result
8871	Assert that `recur` forms do not appear in any position of this or child AST nodes.
8872	Ensure 'recur' nodes appear only in tail positions within AST.
8873	Resolve a non-namespaced symbol into a Python name or a local Basilisp Var.
8874	Resolve a Basilisp symbol as a Var or Python name.
8875	Parse a Lisp form into a Basilisp syntax tree.
8876	Return True if a Var name is shadowed in an inner scope.
8877	Add a new symbol to the symbol table.
8878	Produce a Lisp representation of an associative collection, bookended with start and end strings. The entries argument must be a callable producing key-value pairs.
8879	Produce a Lisp representation of a sequential collection, bookended with start and end strings, handling keyword arguments for elements.
8880	Return a string representation of a Lisp object. Permissible keyword arguments control formatting such as human readability, printing duplicates, and depth.
8881	Fallback function for lrepr for subclasses of standard types
8882	Return a transformed copy of this node with location in this node's environment updated to match the `start_loc` if given, or using its existing location otherwise. All child nodes will be recursively transformed and replaced.
8883	Compile and execute the given form. Returns the result of the executed expression.
8884	Incrementally compile a stream of AST nodes in module mod.
8885	Compile an entire Basilisp module into Python bytecode for execution as a Python module.
8886	Compile cached bytecode into the given module.
8887	Create a Sequence from an Iterable
8888	Replace characters in a string with valid Python symbol replacements．
8889	Replace munged string components with their original representation.
8890	Create a Fraction from a numerator and denominator.
8891	Get the default logging handler for Basilisp.
8892	Creates a new map.
8893	Partition coll into groups of size n.
8894	Wrap a reader function in a decorator to supply line and column information along with relevant forms.
8895	Reads a namespaced token from the input stream
8896	Read a collection from the input stream and create the collection using f.
8897	Reads a list element from the input stream
8898	Read a vector element from the input stream.
8899	Return a set from the input stream with unique values.
8900	Read a map from the input stream.
8901	Return a string from the input stream, handling escape sequences.
8902	Attempt to read a symbol from the input stream and resolve it using the resolver if in syntax quoted form. Handle namespace rules and Reserved words.
8903	Return a keyword from the input stream.
8904	Read metadata and apply it to the next object in the input stream.
8905	Reads a function reader macro from the input stream.
8906	Read a quoted form from the input stream.
8907	Expands syntax quoted forms to handle unquoting and unquote-splicing.
8908	Post-process syntax quoted forms to generate forms for runtime assembly.
8909	Read a syntax-quote and set the syntax-quoting state in the reader.
8910	Read an unquoted form and handle special logic of unquoting.
8911	Read a derefed form from the input stream.
8912	Read a character literal from the input stream.
8913	Read a regex reader macro from input stream.
8914	Return a data structure evaluated as a reader macro from the input stream.
8915	Read the next full form from the input stream, consuming any reader comments completely.
8916	Read the next full form from the input stream.
8917	Reads a stream as a Lisp expression, handling namespace resolvers, data readers, and EOF.
8918	Read the contents of a string as a Lisp expression.
8919	Read the contents of a file as a Lisp expression.
8920	Update the internal line and column buffers after adding a new character. Reset column to 0 for new lines, increment for other characters.
8921	Push one character back onto the stream, allowing it to be read again.
8922	Advance the stream forward by one character and return the next token.
8923	Converts a list of smb2createeabuffer structures and packs them as a bytes object.
8924	Unmarshal the bytes from a Basilisp bytecode cache file, validating the file header before returning. Throw exceptions if file header does not match expected values.
8925	Returns the path to the cached file for the given path.
8926	Hook into Python's import machinery with a custom Basilisp code importer.
8927	Finds the ModuleSpec for the specified Basilisp module. Returns None if the module is not a Basilisp module to allow import processing to continue.
8928	Load and execute a cached Basilisp module.
8929	Loads and executes a non-cached Basilisp module.
8930	Compile the Basilisp module into Python code by evaluating top-level forms incrementally and inserting their AST nodes into the Python module.
8931	Create a new Symbol.
8932	Return an iterable of possible completions for the given text.
8933	Get or create an interned keyword instance from the input string.
8934	Create a new keyword using a name and optional namespace, retrieving from a cache.
8935	Chains a sequence of generated Python ASTs into a tuple of dependency nodes.
8936	Generate recursive Python Attribute AST nodes for resolving nested names
8937	Wrap simpler AST generators to return a GeneratedPyAST.
8938	Turns a collection of Lisp forms into Python AST nodes.
8939	Hydrate Generated Python AST nodes with line numbers and column offsets from the node environment.
8940	Wrap a generator function in a decorator to supply line and column information to the returned Python AST node. Dependency nodes will not be hydrated.
8941	Wrap a generator function in a decorator to supply line and column information to the returned Python AST node and dependency nodes.
8942	Return True if the Var holds a value which should be compiled to a dynamic Var access.
8943	Return True if the Var can be redefined.
8944	Transform non-statements into ast.Expr nodes so they can stand alone as statements.
8945	Given a series of expression AST nodes, creates a function AST node with the given name that can be called and returns the result of the final expression in the input body nodes.
8946	Return True if the compiler should emit a warning about this name being redefined.
8947	Return a Python AST Node for a `do` expression.
8948	Generate a safe Python function name from a function name symbol, with a default prefix if no symbol is provided.
8949	Generates a list of Python AST nodes from function method parameters.
8950	Return a Python AST node for a function with a single arity. Convert Lisp function name to Python function name. Handle named anonymous functions to recursively call themselves. Convert function arguments to Python AST arguments. Add metadata dependencies and decorators. Create and return the final Python AST node.
8951	Return a Python AST node for a function with multiple arities.
8952	Return a Python AST Node for a `fn` expression.
8953	Generate custom `if` nodes to handle `recur` bodies. Recur nodes can appear in the then and else expressions of `if` forms. Recur nodes generate Python `continue` statements.
8954	Generate an intermediate if statement which assigns to a temporary variable and returns it as the expression value at the end of evaluation. Handles checks for nil and false values by switching if and else bodies for short-circuit evaluation.
8955	Return a Python AST Node for a Basilisp function invocation.
8956	Return a Python AST Node for a 'quote' expression.
8957	Convert a recur node to a Python AST node within a loop context.
8958	Return a Python AST Node for a recur expression. Handle the recur construct by setting a recur point and retrieving the corresponding handler.
8959	Return a Python AST Node for a `set!` expression.
8960	Generate a Python AST Node for a `throw` expression.
8961	Return a Python AST Node for a `try` expression.
8962	Generate a Python AST node for accessing a locally defined variable
8963	Generate Var.find calls for the named symbol
8964	Generate a Python AST node for accessing a Var, potentially using indirection if necessary.
8965	Generate a Python AST node for Python interop property access.
8966	Generate a Python AST node for accessing a potential Python module variable name.
8967	Generate a Python AST node for accessing a potential Python module variable name with a namespace.
8968	Generate Python AST nodes for constant Lisp forms.
8969	Turn a quoted collection literal of Lisp forms into Python AST nodes.
8970	Take a Lisp AST node as an argument and produce zero or more Python AST nodes. This is the primary entrypoint for generating AST nodes from Lisp syntax. It may be called recursively to compile child forms.
8971	Generate the Python Import AST node for importing all required language support modules.
8972	Generate the Python From ... Import AST node for importing language support modules.
8973	Assigns a Python variable to the value of the current namespace.
8974	Creates a new set from the given iterable of members.
8975	Create a new set from members.
8976	Eliminate dead code from except handler bodies.
8977	Eliminate no-op constant expressions which are in the tree as standalone statements.
8978	Eliminate dead code from function bodies by visiting the FunctionDef node, filtering out dead code from the body, and returning a new FunctionDef node with the updated body.
8979	Eliminate dead code from while bodies.
8980	Eliminate dead code from except try bodies.
8981	Create a new empty Basilisp Python module. Modules are created for each Namespace when it is created.
8982	Return the first element from a sequence or the first element after coercion, or None if input is None.
8983	If o is a ISeq, return the elements after the first in o. If o is None, returns an empty seq. Otherwise, coerces o to a seq and returns the rest.
8984	Returns the nth rest sequence of coll, or coll if i is 0.
8985	Returns the nth next sequence of coll.
8986	Creates a new sequence with o as the first element and seq as the rest. Handles None and non-ISeq inputs.
8987	Converts the argument o to a ISeq or returns None.
8988	Concatenate sequences into a single ISeq.
8989	Associate keys to values in associative data structure m. If m is None, returns a new Map with key-values kvs.
8990	Conjoins xs to collection. New elements may be added in different positions depending on the type of coll. conj returns the same type as coll. If coll is None, return a list with xs conjoined.
8991	Return a function with partial application of another function
8992	Dereference a Deref object and return its contents.
8993	Compare two objects by value. Unlike Python's equality operator, 1 == True and 0 == False are not considered.
8994	Division reducer. If both arguments are integers, return a Fraction. Otherwise, return the true division of x and y.
8995	Return a sorted sequence of the elements in coll. If a comparator function f is provided, compare elements in coll using f.
8996	Return true if coll contains the key k.
8997	Return the value of k in m. Return default if k not found in m.
8998	Recursively convert Python collections into Lisp collections.
8999	Recursively converts Lisp collections into Python collections.
9000	Returns a string representation of an object, with options for human-readable and other print settings.
9001	Collect Python starred arguments into a Basilisp list.
9002	Trampoline a function repeatedly until it is finished recurring to help avoid stack growth.
9003	Decorator to set attributes on a function. Returns the original function after setting the attributes.
9004	Return a new function with the given meta, merging with existing if present
9005	Create a Basilisp function, setting meta and supplying a with_meta method implementation.
9006	Resolve the aliased symbol in the current namespace.
9007	Resolve the aliased symbol to a Var from the specified namespace or the current namespace if none is specified.
9008	Add generated Python code to a dynamic variable in which_ns.
9009	Bootstrap the environment with functions for expressing complex concepts in a minimal Lisp environment.
9010	Interns the value bound to the symbol `name` in namespace `ns`.
9011	Creates a new unbound Var instance for the symbol name in the specified namespace.
9012	Return the value currently bound to the name name_sym in the namespace specified by ns_sym.
9013	Return the value currently bound to the name in the namespace specified by `ns_qualified_sym`.
9014	Return the Var currently bound to the name in the namespace specified by `ns_qualified_sym`. If no Var is bound to that name, raise an exception. This is a utility method for debugging.
9015	Add a gated default import to the default imports.
9016	Add a Symbol alias for a given Namespace.
9017	Intern the Var given in this namespace mapped by the given Symbol. If the Symbol already maps to a Var, this method _will not overwrite_ the existing Var mapping unless the force keyword argument is given and is True.
9018	Swaps function used by intern to atomically intern a new variable in the symbol mapping for this Namespace
9019	Find Vars mapped by the given Symbol input or None if no Vars are mapped by that Symbol.
9020	Add the Symbol as an imported Symbol in this Namespace, applying aliases if provided.
9021	Return the module if a module named by sym has been imported into this Namespace, None otherwise. First try to resolve a module directly with the given name. If no module can be resolved, attempt to resolve the module using import aliases.
9022	Refer var in this namespace under the name sym. If var is not private, swap and associate sym with var.
9023	Get the Var referred by Symbol or None if it does not exist.
9024	Refer all _public_ interns from another namespace.
9025	Refer all the Vars in the other namespace.
9026	Private swap function used by `get_or_create` to atomically swap the new namespace map into the global cache.
9027	Get or create a namespace by name.
9028	Returns the namespace bound to the symbol `name` in the global namespace cache. Returns the namespace if it exists or None otherwise.
9029	Remove the namespace bound to the symbol `name` in the global namespace cache and return that namespace. Return None if the namespace did not exist in the cache.
9030	Return a function which matches any symbol keys from map entries against the given text.
9031	Return an iterable of possible completions matching the given prefix from the list of aliased namespaces. If name_in_ns is given, further attempt to refine the list to matching names in that namespace.
9032	Returns an iterable of possible completions matching the given prefix from the list of imports and aliased imports. Refines the list further if name_in_module is given.
9033	Return an iterable of possible completions matching the given prefix from the list of interned Vars.
9034	Return an iterable of possible completions matching the given prefix from the list of referred Vars.
9035	Return an iterable of possible completions for a given text in a namespace.
9036	Return arguments for a trampolined function, unrolling final argument if a sequence.
9037	Creates a new list.
9038	Creates a new list from members.
9039	Change formatting of key-value as multi-line string with specified style.
9040	This function decrypts a JWE token, decodes the resulting JWT, and returns the payload.
9041	Encrypts the supplied JSON and returns a JWE token.
9042	Remove the key from the request cache and from memcache.
9043	Deconstruct a Constraint instance to a tuple.
9044	Close stream.
9045	Parse a FIQL formatted string into an `Expression`.
9046	Dump ndb_model using custom encoder into file-like object fp.
9047	Handles decoding of nested date strings.
9048	Tries to decode strings that look like dates into datetime objects.
9049	Override of the default decode method that also uses decode_date.
9050	Overriding the default JSONEncoder.default for NDB support.
9051	Validate version before release.
9052	Generate changelog for a specific version.
9053	Finds the strongly connected components in a graph using Tarjan's algorithm.
9054	Identify strongly connected components then perform a topological sort of those components.
9055	Sets the parent ``Expression`` for this object and checks if it is of the correct type.
9056	Get the parent Expression for this object. Raises an exception if the parent is None.
9057	Add an ``Operator`` to the ``Expression``
9058	Add an element of type ``Operator``, ``Constraint``, or ``Expression`` to the ``Expression``.
9059	Update the expression by joining additional elements using an "AND" operator.
9060	Update the ``Expression`` by joining the specified additional elements using an "OR" operator. Returns ``self`` or related ``Expression``.
9061	Decorate function to log message using module logger.
9062	Parse received response.
9063	Convert a list of tuples to an OrderedDict with keys and values as strings.
9064	Check if specific message is present.
9065	Prepare message to be sent.
9066	Flush incoming socket messages.
9067	Enable a given scan field.
9068	Save scanning template to filename
9069	Load scanning template from filename. Template needs to exist in database, otherwise it will not load.
9070	Get information about a given keyword, defaulting to 'stage'.
9071	Include a Python source file in a docstring formatted in reStructuredText.
9072	Find and return the location of package.json.
9073	Extract JSPM config from package.json.
9074	Handle YOURLS API errors.
9075	Validate response from YOURLS server.
9076	Generate combined independent variable vector from two waveforms and their dependent variable vectors (possibly interpolated).
9077	Create new dependent variable vector by interpolating.
9078	Create new independent variable vector by finding the overlapping range of two input vectors.
9079	Verify that two waveforms can be combined with various mathematical functions.
9080	Load the existing systemjs manifest and remove any entries that no longer exist on the storage.
9081	Define trace parameters.
9082	Run module tracing.
9083	Shorten URL with optional keyword and title.
9084	This interface is used to expand a short URL or keyword to its long URL.
9085	Get stats for short URL or keyword.
9086	Get stats about links.
9087	Get database statistics.
9088	Echo terminal output. Print STDOUT resulting from a given Bash shell command formatted in reStructuredText.
9089	Prints the output of a Bash shell command formatted in reStructuredText.
9090	Small log helper
9091	Decorator that caches the value of a method as an instance attribute.
9092	Break an iterable into chunks and yield those chunks as lists.
9093	Break an iterable into chunks and run each chunk in function, yielding the value of each function call as an iterator.
9094	Recursively flatten nested objects
9095	Add a handler for SIGINT that optionally prints a given message.
9096	stupidly print an iterable of iterables in TSV format
9097	Make a placeholder object with a custom repr.
9098	attempt to parse a size in bytes from a human-readable string.
9099	Create command line interface for YOURLS using apiurl, signature, and optional username/password. Raises error if apiurl is missing or authentication params are incorrect.
9100	Trace eng wave module exceptions.
9101	Define Sphinx requirements links.
9102	Generate Python interpreter version entries for 2.x or 3.x series.
9103	Generate Python interpreter version entries.
9104	Translate requirement specification to words.
9105	Chunk input noise data into valid Touchstone file rows.
9106	Chunks input data into valid Touchstone file rows.
9107	Write a `Touchstone`_ file with data in scientific notation.
9108	Add bounds to independent variable vector if not already present.
9109	Build unit math operations based on independent and dependent units and a specified operator.
9110	Perform a generic operation on a waveform object.
9111	Calculate running area under curve.
9112	Validates min and max bounds are within waveform's independent variable vector. Adjusts min and max if not provided otherwise checks and raises exceptions if incongruent.
9113	Return the arc cosine of a waveform's dependent variable vector.
9114	Return the hyperbolic arc cosine of a waveform's dependent variable vector.
9115	Calculate the arc sine of a waveform's dependent variable vector.
9116	Compute the hyperbolic arc tangent of a waveform's dependent variable vector.
9117	Return the running average of a waveform's dependent variable vector.
9118	Return a waveform's dependent variable vector expressed in decibels.
9119	Returns the numerical derivative of a waveform's dependent variable vector using backwards differences method.
9120	Return the imaginary part of the Fast Fourier Transform of a waveform.
9121	Return the magnitude of the Fast Fourier Transform of a waveform.
9122	Return the phase of the Fourier Transform of a waveform.
9123	Return the real part of the Fast Fourier Transform of a waveform.
9124	Return the inverse Fast Fourier Transform of a waveform, with decibel-scale dependent variable vector.
9125	Return the imaginary part of the inverse Fast Fourier Transform of a waveform.
9126	Return the magnitude of the inverse Fast Fourier Transform of a waveform.
9127	Return the phase of the inverse Fast Fourier Transform of a waveform.
9128	Return the real part of the inverse Fast Fourier Transform of a waveform.
9129	Return the running integral of a waveform's dependent variable vector using the trapezoidal method.
9130	Return the group delay of a waveform.
9131	Return the natural logarithm of a waveform's dependent variable vector. Raises RuntimeError if the waveform is not valid and ValueError if the math domain error occurs.
9132	Return the numerical average of a waveform's dependent variable vector.
9133	Return the numerical integral of a waveform's dependent variable vector using the trapezoidal method.
9134	Compute the maximum value of a waveform's dependent variable vector within specified bounds.
9135	Return the minimum of a waveform's dependent variable vector.
9136	Return the phase of a waveform's dependent variable vector, with options to unwrap and convert to degrees or radians.
9137	Round a waveform's dependent variable vector to a given number of decimal places.
9138	Calculate the square root of a waveform's dependent variable vector
9139	Return a sub-set of a waveform, potentially re-sampled based on independent variable parameters.
9140	Convert a waveform's dependent variable vector to complex.
9141	Converts a waveform's dependent variable vector to float.
9142	Converts a waveform's dependent variable vector to integer.
9143	Return the dependent variable value at a given independent variable point. Performs linear interpolation if the point is not in the vector.
9144	Only allow lookups for jspm_packages.
9145	Get first sentence of first paragraph of long description.
9146	Builds mathematical expression from hierarchical list.
9147	Return position of next matching closing delimiter
9148	Parse function calls in an expression.
9149	Pairs delimiters in an expression.
9150	Parse a mathematical expression using PyParsing.
9151	Remove consecutive delimiters.
9152	Split string into groups using count of separator and trim according to flags.
9153	Returns tuple with mantissa and exponent of number formatted in engineering notation.
9154	Convert number to string without scientific notation
9155	Converts a number to engineering notation with specified fractional length and justification.
9156	Convert number represented in engineering notation to floating point equivalent.
9157	Return the fractional part of a number represented in engineering notation.
9158	Return the mantissa of a number represented in engineering notation.
9159	Return engineering suffix and its floating point equivalent of a number.
9160	>Returns engineering suffix from a starting suffix and an number of suffixes offset. Raises exceptions if offset or suffix is invalid.
9161	Remove unnecessary delimiters in mathematical expressions by checking for consecutive delimiters, implied operator precedence, valid function names, and matching delimiters.
9162	Convert number or number string to a number string in scientific notation.
9163	Return mantissa and exponent of a number in scientific notation.
9164	Seek and remove the sourcemap comment from a file, returning it if found.
9165	Check whether `self.app` is missing the '.js' extension and if it needs it.
9166	Bundles the app and returns the static URL to the bundle.
9167	Trace the dependencies for an application. Cache the result to avoid expensive processing on subsequent calls.
9168	Compare app deptree file hashes with cached hashes.
9169	Converts bytes object to a hexdump
9170	Parse a docstring into ParameterInfo and ReturnInfo objects.
9171	Gets a list of all valid identifiers for the current context.
9172	Lazily load a callable.
Perform a lazy import of a context to reduce initial startup time.
Attempt to import an object from a module, or raise an error if it doesn't exist.
9173	Split a line into arguments using shlex and a dequoting routine.
9174	Check if context matches initialization commands and run them if so.
9175	Return help information for a context or function
9176	Find a function in the given context by name, searching first builtins then the context.
9177	Lists all functions in a given context, including built-ins. Returns a formatted string detailing the functions and their documentation.
9178	Check if an argument is a flag.
9179	Process arguments from the command line into positional and kw args.
9180	Try to find the value for a keyword argument.
9181	Invoke a function given a list of arguments with the function listed first. Search for the function using the current context and convert string parameters to appropriate python types. Returns the function's return value, a boolean indicating if a new context was created, and the remainder of the command line.
9182	Invoke a one or more functions given a list of arguments. The functions are searched for using the current context on the context stack, and its annotated type information is used to convert all of the string parameters passed in line to appropriate python types. Returns bool specifying if the last function created a new context and a list with the remainder of the command line.
9183	Parse and invoke a string line.
9184	Parse a single typed parameter statement, extracting the name, type, and optional description. Ensure the parameter string is correctly formatted with parentheses around the type.
9185	Parse a single return statement declaration
9186	Attempt to find the canonical name of a section.
9187	Classifies a line into a type of object: blank line, section header, continuation line, list item, or regular line.
9188	Join adjacent lines together into paragraphs using either a blank line or indent as separator.
9189	Wrap, format, and print a docstring with optional width, parameter, and return sections.
9190	Convert value to specified type 'typename' using appropriate conversion function, handling errors for invalid conversions.
9191	Convert binary data to specified type.
9192	Get the size of a type for converting a hex string to the type, return 0 if unknown.
9193	Convert value to type and format it as a string
9194	Validate that all required type methods are implemented. Raises an ArgumentError if the type is not valid.
9195	Check if type is known to the type system.
9196	Given a potentially complex type, split it into its base type and specializers
9197	Instantiate a complex type by ensuring all subtypes are valid and then building the type object.
9198	Return the type object corresponding to a type name. If type_name is not found, this triggers the loading of external types until a matching type is found or until there are no more external type sources.
9199	Checks if a format is known for a given type.
9200	Add a type to the type system for use with the iotile tool and annotated API functions.
9201	Find symbols in a module that don't start with _ and import them as types.
9202	Check if we have enough arguments to call this function.
9203	Adds type information for a parameter by name.
9204	Add type information to the return value of this function.
9205	Creates a custom return value using a provided printer function and optional description.
9206	Try to convert a prefix into a parameter name. Raise an error if ambiguous or no match found.
9207	Get the parameter type information by name.
9208	Return function signature as a string, with or without custom name
9209	Format the return value of this function as a string.
9210	Convert and validate a positional argument.
9211	Check if there are any missing or duplicate arguments, and return a dictionary of argument values. Raises exceptions if arguments are not in the spec or passed twice.
9212	Given a parameter with type information, convert and validate it.
9213	Returns a formatted string of the exception message, excluding the class name if specified.
9214	Convert this exception to a dictionary.
9215	Check the type of all parameters with type information, converting as appropriate and then execute the function.
9216	Parse a list of validator names or n-tuples, checking for errors. Returns a list of validator function names and their optional parameters.
9217	Find all annotated functions within a container.
9218	Create a context from all of the top level annotated symbols in that module.
9219	Returns usage information about a context or function
9220	Decorate a function to provide type information about its parameters, including type name, description, and validation functions.
9221	Specify how the return value of this function should be handled.
9222	Specify that this function returns a typed value.
9223	Declare that a class defines a context.Contexts are for use with HierarchicalShell for discovering and using functionality from the command line.
9224	Annotate a function using information from its docstring. The annotation occurs at the first call, improving startup time. Ensure the docstring is formatted correctly and use the typedargs pylint plugin for validation.
9225	Mark a function as callable from the command line. This function is meant to be called as decorator. This function also initializes metadata about the function's arguments that is built up by the param decorator.
9226	Given an object with a docstring return the first line of the docstring.
9227	Load ``cron`` modules for applications listed in ``INSTALLED_APPS``.
9228	Register tasks with cron.
9229	Prints tasks for debugging using cron syntax.
9230	Emulate uninstall.
9231	Create a project handler based on the URI schema and local path.
9232	Load the projects config data from local path.
9233	Save the projects configs to local path
9234	Creates a property with the given name, which uses a singleton instance of the provided class when accessed.
9235	Get the dependencies of the Project
9236	Calls the project handler same named function and passes the result and additional arguments.
9237	Initialize a project and return a list of failed initializations.
9238	Sets the value of a key in an object and returns a new object with the updated value.
9239	Takes an object, a string, and a value, and produces a new object with the specified attribute set to the given value. Returns a new object rather than mutating the original. Uses the default implementation if the object does not support the `_lens_setattr` method.
9240	Takes an object and an iterable, produces a new object with data from the iterable reincorporated, intended as the inverse of the to_iter function.
9241	Sets the focus to `newvalue` and returns a new lens that applies this change to a given state.
9242	Set many foci to values taken by iterating over `new_values`.
9243	Decorator to apply a function to a focus in a state.
9244	Returns a function that can be called `n` times with a single argument before returning all the args in a tuple
9245	Raises NotImplementedError when method is not implemented.
9246	Run lens over state, applying f to foci, collecting results using applicative functor functions.
9247	Returns the focus within `state`. If multiple items are focused, attempts to join them as a monoid. Raises TypeError if the optic is not an instance of Fold, and ValueError if there is no focus to view.
9248	Returns a list of all the foci within `state`. Requires kind Fold. This method will raise TypeError if the optic has no way to get any foci.
9249	Applies a function `fn` to all the foci within `state`
9250	Sets all the foci within `state` to `value`. Raises TypeError if not an instance of Setter.
9251	Sets all the foci within `state` to values taken from `iterable`
9252	Returns a class representing the 'kind' of optic.
9253	Main function: Instantiates a GameState object, enters a loop, updates state based on input, and outputs the new state.
9254	Returns vector moved one step in direction of other, potentially diagonally.
9255	Handling user input to alter the game state
9256	In-place robot advancement towards player, handling crashes
9257	Returns a completed game state object setting an optional message to display after the game is over.
9258	Shows the board to the player on the console and asks them to make a move.
9259	Play a game of naughts and crosses against the computer.
9260	Return a board with a cell filled in by the current player. If the cell is already occupied then return the board unchanged.
9261	Determine the winner of a tic-tac-toe board.
9262	Generates all the combinations of board positions for a win check.
9263	Process item by adding it to items list and uploading chunk to S3 if list size reaches max_chunk_size.
9264	Store timestamp to replace {time} in S3PIPELINE_URL
9265	Do upload items to S3.
9266	Build file object from items.
9267	Returns the account state information associated with a specific address.
9268	Returns the asset information associated with a specific asset ID.
9269	Returns the block information associated with a specific hash value or block index.
9270	This interface is used to get the hash value of a specific block by its index.
9271	Returns the system fees associated with a specific block index.
9272	Returns the contract information associated with a specific script hash.
9273	Returns detailed information associated with a specific transaction hash.
9274	Get the value stored in a contract's storage by key.
9275	Return the transaction output information corresponding to a given hash and index.
9276	Invoke a contract with given parameters and return the result.
9277	Invoke a contract's function with given parameters and returns the result.
9278	Invokes a script on the VM and returns the result.
9279	Broadcasts a transaction over the NEO network and returns the result.
9280	Validate if the considered string is a valid NEO address.
9281	This method is used to call a JSON-RPC endpoint, constructing the necessary payload and handling the response.
9282	Check if a string is a valid SHA256 hash.
9283	Returns True if the considered string is a valid RIPEMD160 hash
9284	Returns a list of parameters meant to be passed to JSON-RPC endpoints.
9285	Decodes the values in a dictionary embedded in a stack key.
9286	Decorator to emulate keyword-only arguments in Python 2, working with both Python 2 and Python 3. Converts specified default arguments into keyword-only arguments.
9287	Apply transformation(s) to a timezone-aware datetime object.
9288	Make sure the datetime has the correct timezone after applying a truncation, handling daylight saving time switches.
9289	Renders the barcode and saves it in `filename`.
9290	Renders the barcode using `self.writer`.
9291	Calculate the checksum for EAN13-Code
9292	Renders the barcode to whatever inheriting writer provides, using registered callbacks.
9293	Call method in pyramid config phase to establish connection.
9294	Manages environment variables stored in a S3-like system. Facilitates editing text files remotely, downloading, and uploading files.
9295	Download a file or folder from an S3-like service.
9296	Upload a file or folder to an S3-like service.
9297	For each section in the local config file, a folder is created. The environment file for the section is then downloaded to this folder.
9298	For each section defined in the local config file, look up for a folder named after the section, and uploads the environment file to the remote S3CONF path.
9299	Split an environment variable text like ENV_VAR_NAME=env_var_value into a tuple (ENV_VAR_NAME, env_var_value)
9300	Add basic authentication to the requests.
9301	Authenticate via an API key.
9302	Iterates through a folder and its subfolders, yields the JSON content from each JSON file found.
9303	Return a dict of schema names mapping to a Schema.
9304	Return the schema from a JSON file.
9305	Return a jsonschema.RefResolver for the schemas.
9306	Validate an object against the schema. If it doesn't match, raise a ValidationException for debugging.
9307	Return a list of valid examples for the given schema.
9308	Return a list of examples which violate the schema.
9309	Build authorization URL for User Agent. Raises AuthMissingError if client_id is not specified.
9310	Process tokens and errors from redirect_uri.
9311	Refresh or acquire access_token.
9312	Returns "id" of a OneDrive user.
9313	Get OneDrive object representing list of objects in a folder.
9314	Create a folder with a specified name and optional metadata.
9315	Add comment message to a specified object.
9316	Convert or dump object to unicode
9317	Recursively create and set the drop target for an object and its children
9318	Event handler for drag&drop functionality
9319	Sets the default top-level window for toolbox menu default action.
9320	Open the inspector window for a given object.
9321	Open a shell
9322	Convert PythonCard font description to gui2py style
9323	Load HTML page from location and then displays it
9324	Convenience function for accessing tag parameters Raises KeyError if not found and no default value provided
9325	Process an outgoing communication
9326	Show a tip message with details on using the gui2py designer. Create a SuperToolTip window and display it as a CustomToolTipWindow with specific styles and behavior.
9327	Handle mouse down event to select object and store start position.
9328	Move the selected object when the mouse is moved.
9329	Handle resizing or moving of an object in response to mouse events.
9330	Handle cursor keys for moving components one pixel at a time, with optional snapping to grid
9331	delete all of the selected objects
9332	Create a copy of each selected object.
9333	Capture the new control superficial image after an update
9334	Calculate best position for top-level window in absolute lower-right
9335	Returns the pyth item data associated with the item
9336	Set the python item data associated with the wx item
9337	Do a reverse lookup for an item containing the requested data.
9338	Remove item from list and unset related data
9339	Remove all items from list and unset related data
9340	Remove all items and column headings.
9341	Sets the item at index 'n' to be the selected item.
9342	Returns the label of the selected item or an empty string if none
9343	Associates client data with the item at position n and reversely associates it in a dictionary.
9344	Adds the item to the control, associating the given data if not None.
9345	Construct a string representing the object
9346	Find an object already created.
9347	Creates a new object exactly similar to self
9348	Adds a control to the window's sizer with specified properties like alignment, expansion, and position.
9349	Re-parents a child control with the new wx_obj parent
9350	make several copies of the background bitmap
9351	Draw the image as background
9352	Custom draws the label when transparent background is needed.
9353	Search for modules in directory tree and return a dict
9354	Return list of children sub-components that are column headings sorted by index
9355	Update the grid if rows and columns have been added or deleted.
9356	Update all displayed values by sending an event to the grid table to request and process the view values.
9357	updates the column attributes to add the appropriate renderer
9358	Sort the data based on the column indexed by col
9359	Remove all rows and reset internal structures.
9360	Create a wxComboBox control
9361	Fetch the value from the table and prepare the edit control
9362	Complete the editing of the current cell. Returns True if changed
9363	Return True to allow the given key to start editing
9364	Handle the first key press in an editor, converting numeric keypad keys to digits or printable characters, and updating the text control accordingly.
9365	Generate a metaclass to register input type handling classes.
9366	Enable or disable all menu items.
9367	Check if all menu items are enabled.
9368	Enable or disable all top menus
9369	check if all top menus are enabled
9370	Remove a menu from the list of menus without using its position.
9371	Process form submission
9372	Add a tag attribute to the wx window.
9373	Converts spaces in the first column of an HTML table to non-breaking spaces.
9374	Get an autodoc.Documenter class suitable for documenting the given object.
9375	Reformat a function signature to a more compact form by removing spaces, stripping strings, and condensing arguments and options.
9376	Import a Python object given its full name.
9377	Smart linking role. Expands to ':obj:`text`' if `text` is an object that can be imported; otherwise expands to '*text*'.
9378	Show a simple pop-up modal dialog
9379	Modal dialog asking for an input, returns string or None if cancelled
9380	Show a dialog to select a font.
9381	Show a dialog to pick a color
9382	Shows a dialog to choose a directory.
9383	Shows a find text dialog
9384	Force appearance of the button next to the item.
9385	Set icon based on resource values.
9386	Display or hide the window, optionally disabling all other windows
9387	Open, read, and evaluate the resource from a source file.
9388	Save the resource to the source file
9389	Create a GUI2PY window based on a Python resource.
9390	Create a GUI control based on a Python resource
9391	Associate event handlers with components.
9392	translate gui2py attribute name from pythoncard legacy code
9393	Write content to the clipboard, data can be either a string or a bitmap
9394	Find out what items are documented in the given object's docstring.
9395	Add the object and all their childs
9396	Select the object and show its properties
9397	Load the selected item in the property editor
9398	Update tree item when object name changes. Search for old name, scroll, set current item, select, and update new name.
9399	Open a popup menu with options regarding the selected object
9400	Transform an image to a scaled and cached image URL, handling cases where the image is not provided or an exception occurs.
9401	Returns a decorator function for adding an expression filter.
9402	Define a decorator function for adding a node filter with a given name and keyword arguments.
9403	Asserts that the current page has the given path.
9404	Asserts that the page doesn't have the given path.
9405	Checks if the page has the given path.
9406	Checks if the page doesn't have the given path.
9407	Select this node if it is an option element inside a select tag.
9408	Applies a filter to an expression based on a given value.
9409	Returns an instance of the given browser with the given capabilities.
9410	Returns the XPath query for this selector. Args: exact (bool, optional): Whether to exactly match text. Returns: The XPath query for this selector.
9411	Determines if a node matches all specified filters.
9412	Switch to the given frame.
9413	Executes wrapped code, accepting an alert with optional text matching and wait time. Raises ModalNotFound if modal not found.
9414	Execute the wrapped code, accepting a confirm.
9415	Dismiss a confirm dialog while executing wrapped code.
9416	Execute the wrapped code, accepting a prompt and optionally responding to it.
9417	Dismiss a prompt by executing the wrapped code.
9418	Save a snapshot of the page to the specified or generated path.
9419	Save a screenshot of the page to the specified path or a randomly generated file in the save path if no path is provided.
9420	Raise errors encountered by the server.
9421	Returns whether a given node matches the filter rule with the given value. Checks for skip conditions and invalid values, defaulting or skipping as necessary before applying the filter function.
9422	Checks if the page or current node has a checked radio button or checkbox with the given label, value, or id.
9423	Checks if a page lacks a radio button or checkbox with a specified label, value, or id that is currently checked.
9424	Checks if the page or current node has an unchecked radio button or checkbox with the given label, value, or id.
9425	Checks if a page or node has no radio button or checkbox with the given label, value, or id that is currently unchecked.
9426	Asserts page/node has given text content, ignoring HTML tags. Raises ExpectationNotMet if assertion fails.
9427	Asserts that the page or current node doesn't have the given text content, ignoring any HTML tags.
9428	Asserts page has given title.
9429	Asserts that a page doesn't have the specified title.
9430	Check if the page has the given title.
9431	Checks if the page doesn't have the given title.
9432	Find all elements on the page matching the given selector and options
9433	Find the first element on the page matching the given selector and options, or None if no element matches.
9434	Return the inner content of a given XML node, including tags.
9435	Returns the inner text of a given XML node, excluding tags.
9436	Normalize URL and escape all query keys.
9437	Define a write-only property with a setter decorator as the property's getter function.
9438	Decorator to synchronize function execution until it succeeds, handling specific exceptions and retries within a timeout.
9439	Returns whether to catch the given error.
9440	Returns how result count compares to query options. Returns -1, 0, or 1.
9441	Attempts to fill the result cache with at least the given number of results. Returns True if the cache contains at least the given size.
9442	Returns whether the given query options expect a possible count of zero.
9443	Returns a expectation failure message for the given query description.
9444	Determines if a given count matches specified query options such as exact count, maximum, minimum, and range.
9445	Normalizes the given value to a string of text with extra whitespace removed. Byte sequences are decoded. `None` is converted to an empty string. Everything else is simply cast to a string.
9446	Remove outer whitespace and collapse inner whitespace in the given text.
9447	Returns a compiled regular expression for the given text.
9448	Checks if the query resolves for the given session based on the expected and actual paths.
9449	Resizes the window to the given dimensions.
9450	Boots a server for the app, if it isn't already booted
9451	Descriptor to change the class-wide getter on a property
9452	Change instance method
9453	Descriptor to change class method.
9454	Returns outer traceback text for logging.
9455	Return object repr block.
9456	Get logger for log calls.
9457	Sets the logger instance to use for logging.
9458	Call the Slack API using the provided method and parameters.
9459	List of channels of this slack team
9460	List of users of this slack team
9461	Create packed bytes for a Slack message.
9462	Translate machine identifiers into human-readable format.
9463	Send message to Slack
9464	Get available messages and send through to the protocol
9465	Main interface to instantiate SlackAPI, connect to RTM, and start the client.
9466	Pass in raw arguments, instantiate Slack API and begin client.
9467	Return a dict of keys that differ between two dictionaries.
9468	Add color codes to a string based on the specified color.
9469	Run when a task starts.Save the task name and reset printed flag.
9470	Run when a task finishes correctly.
9471	Display info about playbook statistics.
9472	Run when a task is skipped.Print a message indicating the task was skipped on the current host.
9473	Convert a CIDR formatted prefix into an address netmask representation.
9474	Decorator to check if a value passed to a Jinja filter evaluates to false and returns an empty string.
9475	Add a model to the class with the YANG name. If not in SUPPORTED_MODELS, requires force=True.
9476	Return a dictionary with the values of the model, filtering based on whether values have been set.
9477	Load a dictionary into the model.
9478	Returns a dictionary with the values of the model, evaluating leaf values to Python types.
9479	Parses native configuration and loads it into corresponding models.
9480	Parses native state and loads it into corresponding models.
9481	Translates the object to native configuration based on the merge and replace options.
9482	Loads and returns all filters.
9483	Find the necessary file for the given test case.
9484	Given a model, return a representation of the model in a dict. This is mostly useful for quickly visualizing the model.
9485	Given two models, return the difference between them as a dictionary.
9486	HTTP POST operation to a URL and get response object.
9487	Construct a URL for obtaining an authorization code from the provider using the authorization_uri.
9488	Get an access token from the provider token URI.
9489	Return query parameters as a dict from the specified URL.
9490	Return a URL with the query component removed.
9491	Construct a URL based on the base URL and additional query parameters.
9492	Handle an internal exception that was caught and suppressed.
9493	Return a response object from the given parameters.
9494	Return a HTTP 302 redirect response object containing the error.
9495	Return a response object from the given JSON data.
9496	Generate authorization code HTTP response with validation checks.
9497	Generate access token HTTP response using refresh token.
9498	Generate access token HTTP response.
9499	Retrieve authorization code from URI, ignore domain and path, parse query string parameters, handle missing response_type, client_id, and redirect_uri, and catch exceptions for missing parameters and server errors.
9500	Get a token response from POST data. Handle different authentication methods (refresh token and authorization code). Raise exceptions for missing parameters and catch other errors.
9501	Get authorization object representing status of authentication.
9502	Open the smbus interface on the specified bus.
9503	Read a single byte from the specified device.
9504	Reads many bytes from the specified device.
9505	Read a single byte from the specified cmd register of the device.
9506	Write many bytes to the specified device. buf is a bytearray
9507	Write a byte of data to the specified cmd register of the device
9508	Write a buffer of data to the specified cmd register of the device.
9509	Returns file's CDN url with optional default effects.
9510	Creates a File Copy on Uploadcare or Custom Storage.
9511	Create a local file copy on Uploadcare storage.
9512	Creates a remote copy of a file in a custom storage.
9513	Constructs ``File`` instance from file information.
9514	Uploads a file and returns a ``File`` instance.
9515	Uploads file from given URL and returns `FileFromUrl` instance.
9516	Uploads file from given URL and returns `File` instance.
9517	Return the CDN URLs of all files from a group without making an API request.
9518	Constructs a FileGroup instance from group information.
9519	Creates a file group and returns a FileGroup instance.
9520	Base method for storage operations.
9521	Extract uuid from each item of specified seq.
9522	Build methods for displaying list items with sorting and pagination.
9523	Displays a progress bar while iterating over content.
9524	Makes Uploading API request and returns response as ``dict``.
9525	Returns the status of Home Mode
9526	Return a list of cameras.
9527	Return a list of cameras matching camera_ids.
9528	Return bytes of camera image.
9529	This interface is used to disable a camera by specifying its ID.
9530	Return motion settings matching camera_id.
9531	This interface is used to save motion settings for a specific camera using keyword arguments.
9532	Updates cameras and motion settings with the latest data from the API.
9533	Determines if a given list item ``li`` is the last item in a list based on comparison with subsequent items.
9534	Find consecutive li tags with the same list id
9535	The ilvl on an li tag indicates its indentation level for nesting purposes.
9536	Retrieve table cell's rowspan merge setting
9537	Get the colspan of a table cell in a Word document.
9538	Returns the td element at the given index, considering colspans when calculating the rowspan for a table cell.
9539	Check if style tags for bold, italics, and underline are not set to 'false'.
9540	Check if the 'r' tag is considered bold
9541	Check if r tag is considered italicized.
9542	Check if the r tag is considered underlined.
9543	Check if a paragraph tag is a title based on its style
9544	Yields elements from r tags that are either t, drawing, pict, or br tags.
9545	Constructs a dictionary of relationships based on XML tree and media information.
9546	Extract and parse data from a ZIP file containing document and related XML files.
9547	Return the list type based on numId and ilvl, defaulting to decimal if invalid.
9548	Build the list structure and return the root list
9549	Create a single tr element populated with tds.
9550	Create a blank table element and populate it with rows and cells using rowspan data.
9551	Generate the string data for a t tag, escape text, and apply bold/italic modifiers.
9552	Remove all tags that have the tag name 'tag'
9553	Find the location of a dataset on disk, downloading if needed.
9554	Load the MNIST digits dataset and preprocess it according to the specified parameters.
9555	Load the CIFAR10 image dataset, extracting data from tar.gz file and splitting into training, validation, and test sets.
9556	Plot an array of images in a grid.
9557	Visualize weights as "bottom-level" pixel arrays.
9558	Create a plot of convolutional filters as pixel arrays.
9559	Generate samples from a dataset.
9560	Encode a text string by replacing characters with alphabet index.
9561	An entity that facilitates creating batches of training data for classifier optimization.
9562	Draws a sequential sample of class labels from a network using provided labels and specified steps.
9563	Add a convolutional weight array to this layer's parameters.
9564	Encode a dataset using the hidden layer activations of a network
9565	Decode an encoded dataset by computing the output layer activation.
9566	Find a layer output name for the given layer specifier
9567	Compute R^2 coefficient of determination for a given input.
9568	Compute a greedy classification for the given set of data.
9569	Compute class posterior probabilities for the given set of data.
9570	Compute the logit values that underlie the softmax output.
9571	Compute the mean accuracy on a set of labeled data.
9572	Extract a single batch of data to pass to the model being trained.
9573	Returns a callable that chooses sequences from netcdf data.
9574	Load a saved network from a pickle file on disk.
9575	Create a matrix of randomly-initialized weights with options for mean, standard deviation, sparsity, spectral radius, and diagonal values.
9576	Create a vector of randomly-initialized values with specified mean and standard deviation.
9577	Get the outputs from a network that match a pattern.
9578	Get parameters from a network that match a pattern.
9579	Construct common regularizers from a set of keyword arguments.
9580	A list of Theano variables used in this loss.
9581	Builds a Theano expression for computing the accuracy of graph output.
9582	Helper method for defining a basic loop in theano.
9583	Construct an activation function by name.
9584	Select a random sample of n items from xs, optionally padding with distorted random duplicates.
9585	Clear the current loss functions from the network and add a new one.
9586	Train a network, yielding monitor pairs for both training and validation datasets.
9587	Train the network until convergence, returning monitor values for training and validation datasets.
9588	Construct a unique string key for representing a computation graph based on network topology, losses, and regularizers.
9589	Connect the layers in this network to form a computation graph. Returns outputs and updates for the graph.
9590	A list of Theano variables for feedforward computations.
9591	Combines input variables with variables from losses, ensuring no duplicates.
9592	Get a parameter from a layer in the network by index or name.
9593	Compute a forward pass of all layers from the given input.
9594	Compute a forward pass of the inputs, returning the network output.
9595	Compute R^2 coefficient of determination for a given labeled input.
9596	Serialize and save the network state to a pickle file, handling both file paths and file handles, and optionally compressing the file.
9597	Load a saved network from disk.
9598	Return a variable representing the regularized loss for a network, including both loss computation and regularizers.
9599	Return parameter update expressions for network training.
9600	Number of neurons in the layer's default output.
9601	Create Theano variables representing the outputs of this layer.
9602	Bind this layer into a computation graph.
9603	Resolves the names of inputs for this layer into shape tuples
9604	Resolve the names of outputs for this layer into shape tuples. raise error if incompatible input shapes. determine output shape based on size or shape kwargs.
9605	Log some information about this layer
9606	Logging information about the parameters and returning their total size.
9607	Format the name into a string.
9608	Find the output layer of the given name from the layers list and return its fully-scoped name and shape. Raises an error if the layer is not found or if there are multiple matching layers.
9609	Get a shared variable for a parameter by name.
9610	Create a new bias vector with specified parameters.
9611	Create a specification dictionary for the layer.
9612	Returns the envelope of a LogGabor
9613	Returns the image of a LogGabor by computing its Fourier transform, applying a phase shift, and then inverting the transform.
9614	Add an IntervalTier or a TextTier at a specified location.
9615	Remove a tier by name or number, only the first matching tier is removed.
9616	Get a tier by its name or number.
9617	Converts the object to an pympi.Elan.Eaf object.
9618	Add a point to the TextTier with time, text, and overlap check.
9619	Add an interval to the IntervalTier with start time, end time, and value. Optionally check for overlap and invalid time order.
9620	Remove an interval if no interval is found, nothing happens. Raises exception if the tier is not an IntervalTier.
9621	Removes a point at the specified time if the tier is a TextTier. Raises an exception if the tier is not a TextTier.
9622	Generator that yields all intervals or points, optionally sorted.
9623	Returns the true list of intervals including the empty intervals.
9624	pretty print the xml, meaning adding tabs and newlines.
9625	Add an annotation to a tier with validation on start and end times
9626	Add an entry to a controlled vocabulary.
9627	Add a description to a controlled vocabulary.
9628	Add an external reference with parameters eid, etype, and value. Raises KeyError if etype is not in the allowed types.
9629	Add a language with its ID, definition, and label.
9630	Add lexicon reference with given parameters.
9631	Add a linguistic type with optional constraints and attributes.
9632	Add a linked file with optional parameters for relative path, mimetype, time origin, and extracted from field.
9633	Add a locale with language_code, country_code, and variant.
9634	Add a secondary linked file.
9635	Add a tier with optional linguistic type, parent, locale, participant, annotator, language, and tier dictionary. Raises ValueError if tier_id is empty.
9636	Clean up all unused timeslots. This can take time for larger tiers.
9637	Extracts the selected time frame as a new object.
9638	Generate the next annotation id, primarily used internally
9639	Generate the next timeslot id.
9640	Give all child tiers for a tier.
9641	Give the full time interval of the file. Note that the real interval can be longer because the sound file attached can be longer. Returns a tuple of the form: `(min_time, max_time)`.
9642	Get the reference annotation data after a specified time from a given tier. If an annotation overlaps with the specified time, return that annotation.
9643	Give the ref annotation before a time. If an annotation overlaps with `time` that annotation will be returned.
9644	Return list of all tiers matching a linguistic type
9645	Merges tiers into a new tier, gluing annotations together if gaps are below a threshold.
9646	Remove all annotations from a specified tier
9647	Remove a controlled vocabulary description.
 Throws KeyError if cv_id does not exist.
9648	Remove all licenses matching both key and value.
9649	Remove all linked files that match given criteria, ignoring criteria that are None.
9650	Remove all properties matching both key and value.
9651	Remove a reference annotation from a tier based on time.
9652	Remove all secondary linked files that match all the criteria
9653	Remove a tier and optionally clean the timeslots if specified.
9654	Remove multiple tiers, merging the process for efficiency.
9655	Rename a tier, including its child tiers with the tier as a parent.
9656	Shift all annotations in time and handle cases where annotations are shifted out of bounds.
9657	Parse options, process input lines, and apply display algorithm.
9658	Display debug information for the storage, including base level, base directory, runs, and character details.
9659	Get the paragraph base embedding level. Returns 0 for LTR, 1 for RTL.
9660	Get the paragraph base embedding level and direction, set the storage to the array of chars
9661	Applies X1 to X9 rules of the unicode algorithm.
9662	Split the storage to runs of char types at the same level.
9663	Resolves weak type rules W1 - W7 for bidirectional text processing, following the Unicode Bidirectional Algorithm.
9664	Resolve neutral text types according to Unicode Bidi Algorithm rules N1 and N2
9665	Reverse contiguous sequence of characters at specified levels
9666	Reorders resolved levels in storage based on L1 and L2 rules.
9667	Injects the current working Maya file into the context with normalized paths.
9668	Convert compiled .ui file from PySide2 to Qt.py
9669	Append name and value to self, accessible via Qt.QtCompat
9670	Qt.py command-line interface. Handles conversion and compilation of UI files, with options for stdin, stdout, and backup creation.
9671	Adds compatibility members to binding up to next major release.
9672	Tries to display the most preferred GUI by cycling through any currently registered widgets in a Qt application, using a MayaWindow as the parent if available. Sets up a GUI if none is found.
9673	Return the most desirable of the currently registered GUIs.
9674	Deregisters supported hosts.
9675	Adds Pyblish to file-menu
9676	Maintain selection during context
9677	Maintain current time during context.
9678	-shows a warning message if no registered GUI is found and guides the user on how to register one.
9679	Replace Type references in Message object with real classes.
9680	Generate cumulative data for charting by summing up sets sequentially.
9681	Return all the values for a single axis of the data.
9682	Draw a constant line on the y-axis with the label.
9683	Cache transform parameters for x & y coordinates
9684	Reverse the mapping of a dictionary where keys become values and values become keys.
9685	A generator function to create a sequence of floating-point numbers between start and stop with a given step.
9686	Add a data set to the graph, summing elements from multiple calls
9687	Add SVG definitions
9688	Adds data to the graph object. Validates and processes the data before appending it.
9689	Process the template with the data and config, return the resulting SVG. Raises ValueError if no data is available.
9690	Calculate the margin to the left of the plot area, setting border_left.
9691	Calculate the margin in pixels to the right of the plot area, setting border_right.
9692	Calculate the margin in pixels above the plot area, setting border_top.
9693	Add pop-up information to a point on the graph.
9694	Calculate the margin in pixels below the plot area, setting border_bottom.
9695	The central logic for drawing the graph. Sets self.graph (the 'g' element in the SVG root).
9696	Add text for a datapoint
9697	Draw the X axis labels
9698	Draw Y axis labels with optional steps and guidelines
9699	Draws X-axis guidelines.
9700	Draw the Y-axis guidelines
9701	Draws graph title and subtitle
9702	Hard-code the styles into the SVG XML if style sheets are not used.
9703	Create a base SVG document with root attributes and namespaces, optional processing instruction for stylesheet, and a comment block. Add definitions, append comments, and optionally add a background rectangle.
9704	Get the stylesheets for this instance
9705	Start a bot on the given network, optionally joining some channels.
9706	Sends raw data over the wire if connection is registered, otherwise saves it to an output buffer for later transmission. Force flag can be used to always send data.
9707	Connect to the IRC server using the nickname.
9708	Send response to channel or user via message.
9709	Dispatch patterns for handling different socket events based on regex matching.
9710	Generates a new nickname based on the original nickname followed by a random number and handles nickname changes.
9711	Respond to periodic PING messages from server
9712	When the connection to the server is registered, send all pending data.
9713	Receives data from the IRC socket and dispatches based on regex matching
9714	Register the worker with the boss
9715	Runs tasks using greenlets, pulling from a queue and reporting results to a channel.
9716	Decorator to ensure commands only come from the boss
9717	Return a tuple of command patterns and corresponding handlers for the worker bot.
9718	Join the command channel and indicate registration success.
9719	Handle task execution in a worker for the BotnetBot.
9720	Indicate that the worker with a given nickname is performing a task.
9721	Send a validation email to the user's email address if the user's email is not already verified.
9722	Send a password reset notification/ email to the user.
9723	Checks if password contains uppercase, lowercase, numbers, and optionally symbols and spaces. Raises ValidationError if the password does not meet criteria.
9724	Verify one-time access to a view using a token. Set the user or raise exceptions for invalid or expired tokens.
9725	Delete the user's avatar. Sets `user.avatar = None` to avoid test errors with `django.inmemorystorage`.
9726	Throttle POST requests only.
9727	Provides a single global executor for tasks.
9728	Provides a single global client instance for Docker, configured with TLS if necessary and environment variables.
9729	Returns tuple of TLS client certificate and key if provided, otherwise None.
9730	Returns service name within Docker Swarm based on prefix, owner, and server name (or default 1 if not available)
9731	Wrapper for calling docker methods to be passed to ThreadPoolExecutor
9732	Call a docker method in a background thread. returns a Future
9733	check for a task state like `docker service ps id`
9734	Stop and remove the service.
9735	Check if lower-cased email is unique in the queryset.
9736	Check the old password is valid and set the new password.
9737	Set a new password for a user.
9738	Validate if email exists and requires verification. Set a `user` attribute on the instance if the email exists and is not verified.
9739	Create auth token and send response.
9740	Delete auth token when `delete` request was issued.
9741	Divide users based on email.
9742	Validate email and send confirmation request.
9743	Update token's expiration datetime on every auth action.
9744	Email context to reset a user password.
9745	Send a notification by email.
9746	Handle password reset email generation and notification.
9747	Set validation email subject and send notification
9748	Authenticate a user from a token form field. Return None if authentication fails.
9749	Custom authentication to check and update token expiration.
9750	Displays bokeh output inside a notebook.
9751	Patch HoloViews plot comms by updating callbacks and plot IDs.
9752	Return a CustomJS callback for sending widget state across notebook comms.
9753	Get widget for a parameter name.
9754	Handles HoloViews objects and returns a plot or the original object.
9755	Forces a parameter value to be text
9756	Given a list of objects, returns a dictionary mapping from string name for the object to the object itself.
9757	Returns the instance or class owning the supplied method
9758	Take the http auth value and split it into the attributes to carry the http auth username and password.
9759	Returns True if the cluster is up, False otherwise.
9760	Get the basic info from the current cluster.
9761	Coroutine queries cluster Health API, returns request status and response data in a dictionary.
9762	Converts bytes to a human readable format.
9763	Calculate total CPU load for Synology DSM
9764	Get the total Synology DSM memory size in bytes, optionally converting to a human-readable format.
9765	Total upload speed being used
9766	Returns all available volumes
9767	Returns a specific volume by volume ID.
9768	Calculate and return the total size of a volume, optionally converting to a human-readable format.
9769	Calculates the percentage of used space in a volume.
9770	Returns the average temperature of all disks in a given volume.
9771	Retrieves the maximum temperature of all disks in a given volume.
9772	Returns a specific disk based on its ID by iterating through a list of disks in the data.
9773	Build and execute login request
9774	Handle GET requests with session management and error handling.
9775	Function to execute and handle a GET request.
9776	Updates the various instanced modules
9777	Getter for various Utilisation variables
9778	Getter for various Storage variables
9779	Creates context for a request using tenant and sender data
9780	Returns the cached token of the current tenant.
9781	Build an attribute dictionary.
9782	Class decorator that ensures passed apps are present in INSTALLED_APPS.
9783	Decorate class to exclude passed apps from INSTALLED_APPS.
9784	Return a dictionary of all global_settings values.
9785	Handles the retrieval and processing of GET requests.
9786	Helper method to get a value from the config.
9787	Change value of a key in a given file to the specified value
9788	Migrates the old config file format to the new one.
9789	Start the webserver that will receive the code.
9790	Wait until the user accepted or rejected the request
9791	Request new access information from Reddit using the built-in web server
9792	Check whether the tokens are set and request new ones if not
9793	Refresh Reddit OAuth2 tokens.
9794	Checks and refreshes token validity, fetching a new one if necessary.
9795	Create DynamoDB table for run manifests.
9796	Returns bucket and path without protocol for S3 path.
9797	Check if prefix is archived in Glacier by examining the storage class of the first object within that prefix.
9798	Extracts the date part from a run ID.
9799	Removes all keys with Nones as values
9800	Add run_id into DynamoDB manifest table.
9801	Check if run_id is stored in DynamoDB table. Return True if run_id is stored or False otherwise.
9802	Extracts Schema information from Iglu URI
9803	Create an Elasticsearch field name from a schema string
9804	Convert a contexts JSON to an Elasticsearch-compatible list of key-value pairs
9805	Convert an unstructured event JSON to a list containing one Elasticsearch-compatible key-value pair.
9806	Convert a Snowplow enriched event TSV into a JSON.
9807	Converts a Snowplow enriched event into a JSON object, validating field counts and optionally adding geolocation data.
9808	Get the template used in a TemplateResponse. Returns a tuple of "active choice, all choices".
9809	Prints the entire template context
9810	Prints a set of variables with their values and types.
9811	Highlights common SQL words in a string by escaping it and replacing newline and SQL keywords with HTML tags.
9812	Converts a Django context object to a formatted HTML string, filtering out non-context fields and using specific handlers for different data types.
9813	Briefly print the dictionary keys.
9814	Apply HTML highlighting and escape text.
9815	Format an item in the result.
9816	Recursive part of the formatting handles exceptions by writing the formatted exception to the stream.
9817	Parse the next token in the stream. Returns a `LatexToken`.
9818	Parses LaTeX content `s` and returns a tuple `(nodelist, pos, len)` where `nodelist` is a list of `LatexNode` objects. Stops parsing upon specified conditions such as closing brace, end environment, or closing mathmode.
9819	Extracts text from LaTeX code for database indexing.
9820	Set directory for input files when processing LaTeX macros.
9821	Reads a file specified by a filename, handling relative paths and file extensions, and logs errors or warnings if the file cannot be accessed.
9822	Parses the given LaTeX code and returns its textual representation.
9823	Encode a UTF-8 string to a LaTeX snippet.
9824	Unpack \\uNNNN escapes in input string 's' and encode the result as UTF-8.
9825	Get information for this organisation. Returns a dictionary of values.
9826	Retrieves all boards for an organization, returning them as a list of Board objects.
9827	Returns a list of Member objects attached to this organisation.
9828	Update an organisation's information. Returns the updated organisation object.
9829	Remove a member from the organization.
9830	Add a member to the board using the id. Membership type can be normal or admin. Returns JSON of all members if successful or raises an Unauthorised exception if not.
9831	Add a member to the board with an optional membership type. Returns JSON of all members or raises an exception if unauthorized.
9832	Get information for the list. Returns a dictionary of values.
9833	Create a card for a list. Returns a Card object.
9834	Get all information for the Label. Returns a dictionary of values.
9835	Get all items for this label. Returns a list of dictionaries, each representing an item.
9836	Update the current label's name. Returns a new Label object.
9837	Update the current label. Returns a new Label object.
9838	Returns a URL for user authorization.
9839	Get information for this card. Returns a dictionary of values.
9840	Get board information for a card. Returns a Board object.
9841	Retrieve list information for this card. Returns a List object.
9842	Returns a list of Checklist objects attached to this card.
9843	Adds a comment to this card by the current user.
9844	Adds an attachment to this card.
9845	Add a checklist to the card. Returns a Checklist object.
9846	Add a label to this card, from a dictionary.
9847	Add an existing label to this card.
9848	Add a member to this card. Returns a list of Member objects.
9849	Get Information for a member. Returns a dictionary of values.
9850	Returns a list of Card objects attached to the member.
9851	Returns all organisations this member is attached to as a list of Organisation objects.
9852	Create a new board. Returns a Board object.
9853	Enable singledispatch for class methods.
9854	Get all information for a board. Returns a dictionary of values.
9855	Returns the lists attached to this board.
9856	Returns the labels attached to this board.
9857	Retrieve a card for a given card ID and return a Card object.
9858	Returns the checklists for the board.
9859	Retrieve an organisation for a given board. Returns an organisation object.
9860	Update this board's information. Returns a new board.
9861	Create a list for a board. Returns a new List object.
9862	Create a label for a board. Returns a new Label object.
9863	Get all information for this Checklist. Returns a dictionary of values.
9864	Get card this checklist is on.
9865	Returns the items for this checklist as a list of ChecklistItem objects.
9866	Update the current checklist and return a new Checklist object.
9867	Add an item to this checklist. Returns a dictionary of new item.
9868	Deletes an item from this checklist.
9869	Rename the current checklist item. Returns a new ChecklistItem object.
9870	Update the state of the current checklist item. Returns a new ChecklistItem object.
9871	Adds the API key and user auth token to the query parameters.
9872	Check HTTP response for known errors.
9873	Build the URI for the API call.
9874	Make a call to Trello API and capture JSON response. Raises an error when it fails. Returns a dictionary with the JSON data.
9875	Create an Organisation object from a JSON object
9876	Create Board object from a JSON object
9877	Create Label object from JSON object
9878	Create List object from JSON object
9879	Create a Card object from JSON object
9880	Create a Checklist object from JSON object
9881	Create a Member object from JSON object
9882	Get an organisation with the given `id`.
9883	Get a board with a given ID.
9884	Create a list with the given id and optional name. Return the created list.
9885	Get a card with given `id`.Returns the created card.
9886	Get a checklist
9887	Gets a member by ID or returns the current member if ID is not provided.
9888	Get root domain from URL. Prune query strings, paths, protocol, and subdomains. Raise exception on invalid URLs.
9889	A generator to convert raw text segments without xml to a list of words without any markup. Additionally, dates are replaced by `7777` for normalization.
9890	Converts raw text to a list of words, removing markup and non-textual content, and normalizing dates.
9891	Convert raw text segments to a list of words without any markup.
9892	Write the password in the file.
9893	Split string contained in text using integer list of locations indicating split, undecided, and do not split decisions. Returns generator of substrings corresponding to slices given in locations.
9894	Adds 'SHOULD_SPLIT' marker at the end location of each matching group from the given regex in the text.
9895	Add 'SHOULD_SPLIT' markers at the beginning and end of regex matches, and mark characters within matches as 'SHOULD_NOT_SPLIT'.
9896	Main command line interface.
9897	Create the cipher object to encrypt or decrypt a payload.
9898	Get the AES mode
9899	Check if required packages are installed and return a priority value.
9900	Check for a valid encryption scheme and raise appropriate errors if missing, invalid, or mismatched.
9901	Callback handling messages from publisher
9902	Increment and wrap ID for Protocol packets, ensuring it's not zero.
9903	Send a CONNECT control packet and return an error.
9904	Handles CONNACK packet from the server
9905	Encodes a UTF-8 string into MQTT format and returns a bytearray.
9906	Decodes an UTF-8 string from an encoded MQTT bytearray.
9907	Encodes a 16-bit unsigned integer into MQTT format. Returns a bytearray.
9908	Encodes value into a multibyte sequence defined by MQTT protocol for encoding packet length fields
9909	Decodes a variable length value defined in the MQTT protocol, typically representing remaining field lengths.
9910	Encode and store a DISCONNECT control packet.
9911	Encodes and stores a CONNECT control packet. Raises ValueError if encoded topic or username string exceeds 65535 bytes.
9912	Decode a CONNECT control packet.
9913	Encodes and stores a CONNACK control packet.
9914	Decode a CONNACK control packet.
9915	Decode a SUBSCRIBE control packet. Extract message ID and topics with their QoS levels.
9916	Encode and store a SUBACK control packet.
9917	Encode and store an UNSUBCRIBE control packet. Raises ValueError if any encoded topic string exceeds 65535 bytes.
9918	Decode a UNSUBACK control packet and extract message ID and topics.
9919	Encode and store an UNSUBACK control packet.
9920	Encodes and stores a PUBLISH control packet, validating topic and packet size, and handling different payload types.
9921	Decode a PUBLISH control packet.
9922	Decode a PUBREL control packet.
9923	Return url for call method.
9924	Send request to API.
9925	Collectively refresh the list of blocks to the disk.
9926	Convert a dict of data into an array for sklearn clustering, optionally scaling.
9927	Function to format data for cluster fitting.
9928	Fits the KMeans clustering algorithm to data.
9929	Fit MeanShift clustering algorithm to data
9930	Fit classifiers from a large dataset using specified clustering methods.
9931	Label new data with cluster identities.
9932	Translate cluster identity back to original data size.
9933	Sort clusters by the concentration of a particular analyte.
9934	Converts a string to a datetime object with an optional format.
9935	Returns the total number of data points in values of dict.
9936	Returns total length of analysis
9937	Determines the most appropriate plotting unit for data based on the given number or array-like input and focus stage. Adjusts the unit based on the specified minimum allowable value and returns the multiplier and corresponding unit string.
9938	Formats element name with superscript numbers for LaTeX.
9939	Converts analytes in format '27Al' to 'Al27'
9940	Converts analytes in format 'Al27' to '27Al'.
9941	Copy all csvs from a nested directory to a single directory.
9942	Consecutively numbers contiguous booleans in array.
9943	Generate boolean array from list of limit tuples.
9944	Smooth an array with a rolling window and handle array edges using mean values.
9945	Returns rolling-window gradient of a.
9946	Find local minima in an array of points
9947	Recognize clusters using Meanshift algorithm.
9948	Identify clusters using K-Means algorithm. Takes array of size [n_samples, n_features] and number of clusters, returns labels for identified clusters.
9949	DBSCAN clustering with optional parameter tuning to match a specified number of clusters.
9950	Returns list of SRMS defined in the SRM database.
9951	Read LAtools configuration file.
9952	Reads configuration, returns a ConfigParser object.
9953	Prints all currently defined configurations.
9954	Create a copy of the default SRM table at the specified location. If no location is specified, saves it in the current working directory.
9955	Adds a new configuration to latools.cfg.
9956	Change the default configuration.
9957	Exclude all data after the first excluded portion based on a threshold.
9958	Defragment a filter by removing consecutive values equal to or below a threshold, changing fragments to True or False based on the mode.
9959	Applies expdecay_despiker and noise_despiker to data.
9960	Plot a detailed autorange report for this sample.
9961	Transform boolean arrays into list of limit pairs.
9962	Divide all analytes by a specified internal_standard analyte.
9963	Apply calibration to data using calibration values from `calib_dict`.
9964	None
9965	Calculates the ablation time for each ablation.
9966	Apply threshold filter to generate 'above' and 'below' filters
9967	Apply gradient threshold filter. Generates threshold filters for the given analytes above and below the specified threshold.
9968	Calculate local correlation between two analytes.
9969	Calculate correlation filter based on given parameters and apply it to the data.
9970	Make new filter from combination of other filters.
9971	Returns parameters used to process data.
9972	Plot histograms of all items in dat.
9973	Computes summary statistics for paired x, y data, including residuals and regression analysis.
9974	Fetch LAtools reference data from online repository.
9975	Find an instance of the type class `TC` for type `G`. Iterates `G`'s parent classes, looking up instances for each, checking whether the instance is a subclass of the target type class `TC`.
9976	Generate DataFrame of elements with optional isotopes.
9977	Calculates the molecular weight of a molecule given its chemical formula.
9978	Generate single escape sequence mapping.
9979	Remove elements matching predicate, keep only the last match at the end of the stack.
9980	Remove duplicates from the stack in first-seen order.
9981	Calculate gaussian weigted moving mean, SD and SE.
9982	Fits a Gaussian function to a dataset with amplitude A, centre mu, and width sigma.
9983	Calculate the standard error of a.
9984	Return a list of sample names from a specified subset or all samples if none is specified.
9985	Applies exponential decay and noise filters to data, updates progress, and sets the focus stage to 'despiked'.
9986	Calculates the weighted mean of background data using Gaussian filtering.
9987	Calculate background using 1D interpolation for specified analytes.
9988	Subtract calculated background from data. Must run bkg_calc first!
9989	Calculates the ratio of all analytes to a single analyte using the specified internal standard.
9990	Create a subset of samples, which can be treated independently.
9991	Calculate a gradient threshold filter to the data. Generates two filters above and below the threshold value for a given analyte.
9992	Create a clustering classifier based on all samples, or a subset.
9993	Apply a clustering classifier to a subset of samples or all samples.
9994	Applies a correlation filter to the data.
9995	Turns data filters on for particular analytes and samples.
9996	Turns data filters off for particular analytes and samples.
9997	Prints the current status of filters for specified samples.
9998	Filter 'fragments' from the calculated filter based on threshold and mode.
9999	Report how many data are removed by the active filters.
10000	Plot a histogram of the gradients in all samples.
10001	Plots analyte gradients against each other.
10002	Plot histograms of analytes.
10003	Plot analytes as a function of time.
10004	Plot analyte gradients as a function of time.
10005	Generate and save filter reports for selected samples based on a given filter string.
10006	Calculates sample statistics and returns samples, analytes, and arrays of statistics.
10007	Return pandas dataframe of all sample statistics.
10008	Export minimal dataset for selected samples and analytes.
10009	Export raw data traces to a specified directory.
10010	Save analysis.lalog in specified location
10011	Exports a minimal dataset and analysis parameters, optionally compressing it into a zip file.
10012	Splits one long analysis file into multiple smaller files based on a regex pattern, with optional trimming and header rows.
10013	Applies a function `f` over a traversable object and then folds the results using an initial value `z` and an optional folding function `g`, defaulting to addition if not provided.
10014	Plots a fitted PCA, showing individual components and their relationships.
10015	Remove mean and divide by standard deviation, using bayes_kvm statistics.
10016	Remove median, divide by IQR.
10017	Apply standard deviation filter to remove anomalous values.
10018	Applies exponential decay filter to remove physically impossible data based on instrumental washout, iteratively until convergence or maxiter is reached.
10019	Add a filter with a name, filter array, informative description, and params. Manage filter sets and components.
10020	Remove filter.
10021	Clear all filters.
10022	Remove unused filters.
10023	Performs fuzzy string matching to identify the most closely matched filter key.
10024	Make filter from logical expression.
10025	Flexible access to specific filter using any key format.
10026	Returns a string containing info for all filters.
10027	Decorator that logs method calls and parameters.
10028	Write and analysis log to a file.
10029	Reads an latools analysis.log file, and returns dicts of arguments.
10030	Decorator that will try to login and redo an action before failing.
10031	Example of printing the modem information.
10032	Example of sending a message
10033	Parse a file-like object or string.
10034	Return the link to the Jupyter nbviewer for the given notebook url
10035	Returns a string for creating the thumbnail of this example.
10036	The string for creating a code example for the gallery.
10037	Return the code example from the notebook metadata if it exists.
10038	Return the URL on Jupyter nbviewer for this notebook or None if unknown.
10039	get the output file with the specified ending
10040	Create pics and HTML files from notebook
10041	Convert a Jupyter notebook to a Python script, handling version compatibility and removing IPython magics.
10042	Create the rst string to download supplementary data
10043	Create the thumbnail for html output
10044	Get summary and description of a notebook from its first markdown cell.
10045	Scales an image while maintaining aspect ratio within a specified dimensions, and saves the resized image to a new file.
10046	Save the thumbnail image
10047	Returns the integer of the thumbnail figure.
10048	Return the url corresponding to the given notebook file.
10049	Extract language codes for database field changes based on given field name and database table fields.
10050	Create a function that returns the default value of a field based on the current or default language.
10051	postprocessors receive a file object, perform operations, and return file objects as results
10052	Process the source image through the defined processors.
10053	Populate `self._thumbnails` with thumbnails from `metadata_backend` based on `source_image.name`.
10054	Return all thumbnails in a dict format.
10055	Creates and return a thumbnail of a given size.
10056	Deletes a thumbnail of a given size
10057	Creates a thumbnail file and its relevant metadata. Returns a Thumbnail instance.
10058	Returns a Thumbnail instance if thumbnail exists, otherwise None
10059	Deletes a thumbnail file and its relevant metadata
10060	Simulate an incoming message.
10061	Register a virtual subscriber which receives messages to the matching number.
10062	Return the set of states.
10063	Register a provider on the gateway.
10064	Send a message using a provider, handling routing and authentication.
10065	Get a Flask blueprint for the named provider that handles incoming messages & status reports.
10066	Get Flask blueprints for every provider that supports it.
10067	Casts phone numbers to digits-only, supports both ASCII and Unicode messages, populates message.msgid and message.meta fields, and fires the Gateway.onReceive event hook.
10068	Calls Gateway.onStatus event hook.
10069	View wrapper for JsonEx responses. Catches exceptions as well.
10070	Base method for forwarding objects to clients
10071	Signs a Web3 transaction that is compatible with `w3.eth.sendRawTransaction`. Returns the RLP-encoded transaction and its hash.
10072	Estimate tx gas using web3
10073	Estimate tx gas using safe method and web3 for CALL operation, otherwise use just the safe calculation.
10074	Appends towrite to the write queue. Optionally waits for the output buffer to be flushed.
10075	Reads one line asynchronously. Keeps waiting for a linefeed if none is available in the buffer.
10076	Verifies and sends a message.
10077	Converts email to string format, handling attachments, content types, and headers.
10078	Checks for bad headers i.e. newlines in subject, sender or recipients.
10079	Adds an attachment to the message.
10080	Register Services that can be accessed by this DAL
10081	Load a configuration module and return a Config.
10082	Register resources with the ResourceManager.
10083	Raises an exception if value for key is empty.
10084	Teardown a Resource or Middleware.
10085	Hook to setup this service with a specific DataManager.
10086	Calculate the group index with respect to wavelength.
10087	Evaluate Cauchy equations to calculate the refractive index at given wavelength(s).
10088	Login on backend with username and password
10089	Logs into the backend and retrieves the token. Returns True if authentication is successful, otherwise False. Raises BackendException on error.
10090	Retrieve all available child endpoints of the root from Alignak backend.
10091	Get all items in the specified endpoint of alignak backend. If an error occurs, a BackendException is raised. If the max_results parameter is not specified, it is set to BACKEND_PAGINATION_LIMIT to limit requests. This method returns a response containing _items and _status.
10092	Method to update an item by sending a PATCH request to the specified endpoint with the provided data and headers. Raises BackendException for HTTP errors 412 and other errors. If 412 is raised and inception is True, retries the patch with the refreshed _etag from a GET request.
10093	Delete an item or all items.
10094	Returns True if path1 and path2 refer to the same file.
10095	Create a junction at link_name pointing to source.
10096	Sets command name and formatting for subsequent calls to logger
10097	Suppress default exit behavior
10098	Recognizes and claims MuTect VCFs from the set of all input VCFs.
10099	Converts MuTect sample headers to standardized "NORMAL" and "TUMOR" using metadata.
10100	Recognizes and claims VarScan VCFs from the set of all input VCFs.
10101	Derive mean and stdev from VCF records, using Knuth's algorithm. Returns rounded results.
10102	Allows each caller to claim incoming files as they are recognized. Returns a tuple of unclaimed file readers and claimed VcfReaders.
10103	Split data into lines using LINE_TERMINATORS.
10104	Return line terminator data begins with or None.
10105	Return line terminator data ends with or None.
10106	Seek next line relative to the current file position. Returns position of the line or -1 if next line was not found.
10107	Seek previous line relative to the current file position. Return position of the line or -1 if previous line was not found.
10108	Return the last lines of the file.
10109	Return the top lines of the file.
10110	Iterator generator that returns lines as data is added to the file.None will be yielded if no new line is available.Caller may either wait and re-try or end iteration.
10111	Recognizes and claims Strelka VCFs from a collection of input VCFs.
10112	Parse VcfRecord from VCF string.
10113	Create a sample dictionary of tag-value pairs for variant records.
10114	Returns set of format tags.
10115	Updates info attribute from info dict.
10116	Returns string representation of format field.
10117	Return string representation of sample-format values. Raises KeyError if requested sample is not defined.
10118	Returns tab-delimited, newline terminated string of VcfRecord
10119	Append new format tag-value for all samples Raises KeyError if tag already exists
10120	Replace or add filter to list if it's not blank or null.
10121	Returns the categories available to the user. Specify `products` if you want to restrict to just the categories that hold the specified products, otherwise it'll do all.
10122	Produce an appropriate subclass of _ProductsForm based on the given category and products.
10123	Creates a form that restricts product options to those available to a staff user.
10124	Adds an error to the given product's field
10125	Memoise function to store results in user's results cache.
10126	Creates a form for specifying fields from a model to display.
10127	Returns items purchased or pending for the user.
10128	Sends an e-mail to the given address using a template.
10129	Process an OSM diff stream and yield one changeset at a time
10130	Parse a file-like containing OSM XML into memory and return objects with nodes, ways, and relations.
10131	Iterate through the OSM Notes feed, parse the notes, and yield new, updated, or closed notes.
10132	Check if condition passes the filter
10133	Returns True if this flag condition is met, otherwise returns False.
10134	Returns the quantity remaining under the stock limit for a given user, with an option to filter by a condition containing a "remainder" annotation. If the date range is violated, returns 0.
10135	Return the filtered queryset of items based on user's cart status and product category.
10136	Filter queryset to include only items where user has a product in their carts, excluding items in released carts unless paid or active
10137	Filter queryset based on date range and stock limit.
10138	Filter items from queryset based on user's presenter or copresenter status in non-cancelled proposals.
10139	Filter items based on user's group membership.
10140	Decorator that raises ValidationError if modifying the cart and wraps execution in a database transaction, marking cart operations batch boundaries.
10141	Return the user's current cart or create a new one if necessary.
10142	Updates the cart's time last updated value and discounts it holds based on reservation duration and vouchers.
10143	Applies the voucher with the given code to this cart.
10144	Determines the validity of the current cart by testing vouchers, product limits, required categories, and available discounts, raising a ValidationError if any issues are found.
10145	Attempting to fix easy errors from ValidationError by removing unavailable items, recalculating discounts, and removing invalid voucher codes.
10146	Calculates discounts for products in a cart, applying them based on product value.
10147	Applies the best discounts on the given product, from the given discounts.
10148	Converts a report view function into a function that displays a Report with the given title and form type.
10149	Returns the data rows for the table.
10150	Creates an instance of a form using request.GET
10151	Renders the reports based on data.content_type's value.
10152	List all available reports.
10153	Summarises items sold and discounts granted for products or categories.
10154	Summarises paid items and payments.
10155	Shows the history of payments into the system collects all payments from the system and returns a QuerysetReport object with the payments data and a link to the invoice view.
10156	Displays all credit notes that have been refunded.
10157	Summarises the inventory status of given items, grouping by invoice status.
10158	Summarises the usage of a given discount.
10159	Generates a report of paid product line items, including invoice details and purchasing customer information.
10160	Shows the number of paid invoices containing given products or categories per day.
10161	Shows all of the credit notes in the system.
10162	Shows all the invoices in the system using a queryset report with specified headings and a link view for each invoice.
10163	Returns a list of all attendees.
10164	Returns registration status for speakers based on proposal kind, sorted by payment status.
10165	Generate a registration manifest for users with specified products and categories, organizing items by user and cart status.
10166	Adds the categories that the user does not currently have.
10167	Calculates the sum of unclaimed credit from this user's credit notes
10168	If the current user is unregistered, returns True if there are no products available in the TICKET_PRODUCT_CATEGORY for that user. If there are products available, returns False. If the user is registered, returns None.
10169	Lay out the guided registration process for users, updating their profile, ticket selection, and additional items, until registration is complete.
10170	Edit an attendee's profile. Handle POST request and redirect to dashboard if form is valid. Render form otherwise.
10171	Returns a profile form instance and a boolean indicating if the form was handled.
10172	Display form for selecting products from an individual product category. Handle voucher form before listing products. Redirect to dashboard if form is successfully submitted, otherwise render product category template with data.
10173	Handles a products list form in the request, returns form instance, discounts, and whether contents were handled.
10174	Handle a voucher form in the given request. Returns the voucher form instance and whether the voucher code was handled.
10175	Runs the checkout process for the current cart.
10176	Redirects to an invoice for the attendee that matches the given access code, selecting the unpaid invoice if available, otherwise the most recent paid invoice, or the most recent invoice if none are unpaid or paid. Raises Http404 if no invoices are found.
10177	Displays an invoice. This view is not authenticated, but it will only allow access to either: the user the invoice belongs to; staff; or a request made with the correct access code.
10178	Allow staff to make manual payments or refunds on an invoice. Requires a login and staff privileges. Returns a rendered template with the invoice and payment form.
10179	Mark an invoice as refunded and request a credit note for the full amount paid against the invoice. This view requires a login, and the logged in user must be staff.
10180	Displays a credit note. Processes forms for applying or refunding a credit note. Requires login and staff status. Returns render or redirect based on form processing.
10181	Allows staff to amend a user's current registration cart, handling product quantities and voucher applications.
10182	Extend reservation on user's cart.
10183	Allows staff to send emails to users based on their invoice status.
10184	Display a form containing a list of users with badges to render, or returns a .zip file containing their badges.
10185	Renders a single user's badge.
10186	Returns all discounts available to a user for the specified categories and products, considering the user's past use count and evaluating discount conditions.
10187	Annotates a queryset with a usage count for a discount clause by a given user.
10188	Returns a list of products available to the given user based on category and product filters, taking into account flag conditions and user limitations.
10189	Applies the total value of a credit note to an invoice, creating a new credit note if necessary, and validates the invoice's payment status.
10190	Generates an invoice with a cancellation fee, applies credit to it
10191	Generates a random access code for users' payments and fulfilment code for check-in, 6 characters long.
10192	Produces a callable for lazy evaluation of functions in templates.
10193	Returns the named object from a string import path.
10194	Create an invoice for a given cart, generating one if it doesn't exist.
10195	Generates an invoice for arbitrary items not held in a user's cart.
10196	Generates an invoice for the given cart by processing product and discount items, formatting descriptions, and calculating line items.
10197	Applies user's credit notes to a given invoice on creation if it is the only unpaid invoice for the user.
10198	Returns true if the accessing user is allowed to view this invoice.
10199	Refreshes invoice and cart objects' data from the database.
10200	Checks if the invoice is unpaid and matches the cart before allowing payment. If not, raises a ValidationError.
10201	Update the status of an invoice based on total payments.
10202	Marks the invoice as paid and updates the attached cart if necessary.
10203	Returns true if there is no cart, or if the revision of this invoice matches the current revision of the cart.
10204	Updates invoice validity based on cart validation and handles refunds or voiding accordingly.
10205	Voids the invoice if it is valid to do so.
10206	Refunds the invoice by generating a CreditNote for the value of all payments against the cart, marks the invoice as refunded, and releases the underlying cart.
10207	Sends an e-mail notifying the user about something to do with that invoice.
10208	Update the object with new data.
10209	Reduce dicts of dicts to dot separated keys.
10210	Print file fields to standard output for files starting with 'output' and of type 'basic:file:'.
10211	Download a file.
10212	Retrieve Data objects for a given project.
10213	Return a list of Processor objects, optionally filtering by processor name.
10214	Print processor input fields and types.
10215	POST JSON data object to server.
10216	Upload files and data objects to a specified processor.
10217	Upload a single file on the platform in chunks of 1,024 bytes.
10218	Download files of data objects.
10219	Gets the subclasses of a class, including subclasses of subclasses.
10220	Returns repository and project.
10221	Retrieves variant phenotypes with suggested changes using civic API.
10222	Iterates through variant IDs, applies suggested changes to current phenotype, and yields evidence and merged phenotype.
10223	Search the cache for variants matching provided coordinates using the corresponding search mode.
10224	an interator to search the cache for variants matching the set of sorted coordinates and yield matches corresponding to the search mode.
10225	Updates record and returns True if record is complete after update, else False.
10226	Takes a list and returns a unique list of elements
10227	Connects to Github and Asana and authenticates via OAuth.
10228	Given a list and a prompt, accepts an index or name as input. If valid, return the corresponding list element; otherwise, return the input.
10229	Retrieve issue data from local storage.
10230	Move issue data from one namespace to another.
10231	Returns task data from local data.
10232	Retrieves a task from asana.
10233	Save data.
10234	Applies a setting value to a key, if the value is not `None`. Returns without prompting if either of the following: `value` is not `None` or already present in the dictionary.
10235	Retry tasks with special cases
10236	Waits until queue is empty.
10237	Creates a task
10238	Return formatting for the tasks section of asana with links.
10239	Creates a missing task in Asana and updates associated data.
10240	Return a list of data types.
10241	Send string to module level log with optional priority.
10242	Required initialization call, wraps pyserial constructor.
10243	Control the polling loop parameters.
10244	Combine serial block definitions from V3 and V4 to create a unified field list.
10245	Simple since Time_Stamp query returned as JSON records.
10246	Set context string for serial command. Private setter.
10247	### Summary:
Calculates the legacy push power factor value based on the first character of the input string and the subsequent characters. If the first character is "C" (Capacitive Lead), it returns 200 minus the integer value of the subsequent characters. If the first character is "I" (Inductive Lag), it returns the integer value of the subsequent characters.
10248	Serial call to set max demand period.
10249	Sets a meter password with a new and old password, returning True on successful completion with an ACK.
10250	Parse Struct using def_buf
10251	Move data from raw tuple into scaled and converted values.
10252	Converts serial block data into a JSON string while excluding reserved and CRC fields.
10253	Internal read CRC wrapper. Validate CRC against calculated value. Handle exceptions for invalid data.
10254	Break out a date from Omnimeter read.
10255	Get the months tariff SerialBlock for meter.
10256	Set CT ratio for attached inductive pickup.
10257	Assign one schedule tariff period to meter buffer.
10258	Define a single season and assign a schedule
10259	Set seasons table using serial command.
10260	Set a single holiday day and month in object buffer. Returns True on completion. Validates input ranges and updates holiday parameters.
10261	Serial call to read schedule tariffs buffer
10262	Read schedule tariff from meter object buffer.
10263	Read month tariffs block into meter object buffer
10264	Extracts tariff for a single month from the meter object buffer.
10265	Serial call to read holiday dates into meter object buffer. Returns: bool True on completion.
10266	Reads a single holiday date from meter buffer and returns it as a tuple of strings representing the holiday, day, and month.
10267	Recommended call to read all meter settings at once
10268	Internal method sets command result string.
10269	Password authentication for a serial command.
10270	Fire update method in all attached observers in order of attachment.
10271	Initialize lookup table for string input of LCD fields.
10272	Combined A and B read for V4 meter. Send termination string at end of read. Returns True on completion.
10273	Issue an A read on V4 meter
10274	Issue a B read on a V4 meter. Returns True if CRC matches at the end of the call.
10275	Munge A and B reads into single serial block with only unique fields.
10276	Calculate and update fields in read buffer based on direction and power factor.
10277	Set LCD with a list of items and optional password.
10278	Send a serial command to set a relay with specified parameters.
10279	Send termination string to implicit current meter.
10280	Set pulse input ratio on a line via serial call.
10281	Serial call to zero resettable kWh registers.
10282	Set LCD using meter object buffer with optional password.
10283	Recursively iterate over all DictField sub-fields.
10284	Recursively iterates over all schema sub-fields
10285	Generate a specified number of paragraphs with optional sentence and HTML formatting.
10286	Generate a random text string of a specified length or within a given range, with customizable options for including lowercase, uppercase, digits, spaces, and punctuation.
10287	Return output for the combined time and result summary statistics.
10288	Returns a string of text colored using the specified ANSI color.
10289	Output:
Write the text to the stream and flush immediately.
10290	Return a summary of the results.
10291	Parse some arguments using the parser.
10292	Sets up the environment for an example run.
10293	Run tests using the given configuration.
10294	Run in transform mode.
10295	Transforms a describe node into a TestCase
10296	Transform the body of an ExampleGroup.
10297	Transform an example node into a test method. Returns the unchanged node if it wasn't an ``Example``.
10298	Transform the body of an ``Example`` into the body of a method. Replace instances of ``context_variable`` with ``self``.
10299	Return an argument list node that takes only ``self``.
10300	Register the path hook.
10301	Transform the source code, then return the code object.
10302	Parse arguments based on provided options or default arguments.
10303	Load a spec from either a file path or a fully qualified name.
10304	Load a spec from a given path, discovering specs if a directory is provided.
10305	Recursively discovers all the specs inside path.
10306	Constructs a function that checks a directory for additions or removals of JSON process configuration files and calls the appropriate receiver methods.
10307	Constructs a function that checks a directory for messages and calls the appropriate method on the receiver. Sent messages are deleted.
10308	Add a process
10309	Remove process by logical name
10310	Restarts a process using a Places instance and a process name.
10311	Call results.func on the attributes of results.
10312	Constructs and returns a service that monitors processes based on directory contents, restarting them on file changes and stopping them on file removal. Listens for restart and restart-all messages.
10313	Return a service based on parsed command-line options
10314	Adds or refreshes a particular node in the nodelist, attributing the current time with the node_id
10315	Removes expired nodes from the nodelist. Verifies optional node_ids if provided.
10316	Removes a particular node from the nodelist.
10317	Returns the time a particular node has been last refreshed.
10318	Returns all nodes in the hash with the time they were last refreshed as a dictionary.
10319	Refreshes the session for the node, updating the time acquired and removing expired nodes.
10320	Increment the number of times this resource has been modified and set expiration.
10321	Decrements the reference count for the resource. If this process holds the only reference at the time we finish dereferencing it; True is returned. Operating on the resource after it has been dereferenced is undefined behavior.
10322	Returns a list of tokens interleaved with the delimiter.
10323	Returns list of process names that need to be restarted based on their configuration and time since start.
10324	Merging failure messages from another status into the current one
10325	Query to test if a value exists.
10326	Query to get the value and construct a query with a match and return statement.
10327	Produce a function that always returns a supplied value.
10328	Converts a function taking multiple arguments into a function accepting a single iterable argument.
10329	Converts a function taking a single iterable argument into a function taking multiple arguments.
10330	Run a process and return a deferred that fires when it is done.
10331	Make scheduler service with given options.
10332	Consume reader and return Success only on complete consumption.
10333	Match a literal sequence
10334	Optionally match a parser.
10335	Match a parser one or more times repeatedly.
10336	Match a parser zero or more times repeatedly.
10337	Match a parser one or more times separated by another parser.
10338	Match a parser zero or more times separated by another parser.
10339	Check all processes.
10340	Discard data and cancel all calls.Instance cannot be reused after closing.
10341	Check the state of HTTP
10342	Add a heart to a service collection if the heart is not None.
10343	Wrap a service in a MultiService with a heart
10344	Freeze and shrink the graph based on a checkpoint and the output node names.
10345	Freeze and shrink the graph based on a session and the output node names.
10346	Save a small version of the graph based on a session and output node names.
10347	Save a small version of the graph based on a checkpoint and output node names.
10348	Saves weights of trainable variables from a checkpoint into separate files in a specified output path.
10349	Return a TensorFlow saver from a checkpoint containing the metagraph.
10350	Parse the tag, instantiate the class.
10351	Render the tag with all arguments resolved to their actual values.
10352	Validate the syntax of the template tag based on the number of arguments and allowed keyword arguments.
10353	Raise NotImplementedError for the method.
10354	Parse the "as var" syntax.
10355	Return the context data for the inclusion tag.
10356	Creates a TensorFlow Session from a Caffe model
10357	Freeze and shrink the graph based on a Caffe model, the input tensors, and the output node names.
10358	Save a small version of the graph based on a Caffe model, the input tensors, and the output node names.
10359	Make a sequence into rows of num_columns columns.
10360	Breaks an iterable (string or not) into chunks of a specified size. Last chunk may be smaller.
10361	Yield every other item from the iterable.
10362	Remove duplicates from an iterable while preserving sequential uniqueness.
10363	Get the next value from an iterable, but also return an iterable that will subsequently return that value and the rest of the original iterable.
10364	Like takewhile, but takes a peekable iterable and doesn't consume the non-matching item.
10365	Given total number of items and bin size, determine number of items per bin with bin size limit.
10366	Ensure an item is always iterable. Converts non-iterables to tuples, excluding mappings.
10367	Calls each callable in callables, suppressing any exceptions supplied. If no exception classes are supplied, all Exceptions will be suppressed.
10368	Yield duplicate items from any number of sorted iterables of items
10369	Assert that all items in an iterable are in order based on a comparison function.
10370	Swap elements in partition_result if item is not present.
10371	Partition ordered dictionary into 3 parts before, keyed item, and after key.
10372	Run through the sequence until n queues are created and return them, compensating with empty iterables if fewer are created.
10373	Reset the iterator to the start and discard any remaining values in the current iteration.
10374	Parse the remainder of the token, to find a "as varname" statement.
10375	Decorator to register class tags.
10376	Generates a PublicKeychain by traversing steps defined in a chain path.
10377	Get sqlite_master table information as a list of dictionaries.
10378	Yields each node of object graph in postorder.
10379	Apply selector to obj and return matching nodes.
10380	Accepts a list of tokens and returns matched nodes of self.obj.
10381	Parse production rules for a selector and validate nodes based on token input.
10382	Find nodes in rhs which have parents in lhs.
10383	Return nodes from rhs which have ancestors in lhs.
10384	Return nodes in rhs having common parents in lhs.
10385	Function to parse args and validate nodes based on nth-child pattern.
10386	Apply each validator to each node in obj and return those that match all validators
10387	Sends ICMP echo requests to a destination and returns a deferred when responses are finished.
10388	Make an HTTP request and return the body
10389	Expires items in cache older than `age` seconds
10390	Set a key `k` to value `v`
10391	Retrieves key contents and modification time
10392	Return True if key `k` exists
10393	Given a UNIX timestamp, verify chain integrity by checking signatures and previous/next outputs.
10394	Convert string JSON to NistBeaconValue object.
10395	Convert XML string to NistBeaconValue object
10396	Returns a 'minified' version of the javascript content based on template name and Django version.
10397	Passes each parsed log line to `fn`
10398	Returns a big list of all log lines since the last run.
10399	Validate secret link token.
10400	Returns a cryptographic engine
10401	Multiple algorithm-compatible token validation.
10402	Create secret link token.
10403	Return the result of a 32-bit counter aggregation with wrapping.
10404	Return the difference between two values divided by a delta value, with wrapping if the second value is less than the first.
10405	Calculate and format an average duration safely
10406	Sets up output processors based on configuration and protocol (TCP/UDP).
10407	Sets up source objects from the given config.
10408	Callback for handling new events from event sources
10409	Watchdog timer function recurrently restarts sources with watchdog enabled if they have not generated events in the specified interval.
10410	Converts input format to regular expression and extracts fields
10411	Parses a single line from the log file and returns a dictionary of its contents. Raises an exception if it couldn't parse the line.
10412	Validate that date is in the future and no more than 1 year away.
10413	Validate message. If the form's reject field is checked and the message field is empty, raises a validation error.
10414	Verifies token from request args, validates it, and saves it in session if valid.
10415	Return a basic meaningful name based on device type
10416	Do not warn on external images.
10417	Connect receivers to signals.
10418	Create a secret link for a given request.
10419	Send an email notification when an access request is accepted.
10420	Send email notifications for confirmed access requests.
10421	Send email validation for a request.
10422	Sends email notification upon receiving a request-rejected signal.
10423	Render a template and send as email.
10424	Create a new secret link.
10425	Validate a secret link token. Only queries the database if token is valid to determine that the token has not been revoked.
10426	Revoke a secret link.
10427	Create a new access request.
10428	Return access request for a specific receiver.
10429	Confirm that senders email is valid.
10430	Accept request.
10431	Reject request and update status to rejected.
10432	Create a secret link from request.
10433	Given required properties from a NistBeaconValue, compute the SHA512Hash object.
10434	Verify a given NIST message hash and signature for a beacon value using a verifier based on the timestamp.
10435	Check if a record is embargoed
10436	Create an access request.
10437	Confirm email address.
10438	Creates a generic endpoint connection using SSHCommandClientEndpoint.
10439	Get reverse direction of ordering.
10440	Get column which is being ordered by.
10441	Get query with correct ordering.
10442	Open the file referenced in this object, and scrape the version return The version as a string an empty string if there is no match to the magic_line or any file exception messages encountered
10443	Set the version for a file by reading, modifying, and writing the lines.
10444	Configures SSH client options and initializes a client session
10445	Starts the timer for this source
10446	Called for every timer tick. Calls self.get which can be a deferred and passes that result back to the queueBack method Returns a deferred
10447	Implement list of pending access requests and shared links with filtering and sorting.
10448	Create a TCP connection to Riemann with automatic reconnection.
10449	Stops the client by stopping the thread, disconnecting the factory and the connector.
10450	Removes all or self.queueDepth events from the queue
10451	Receives a list of events and transmits them to Riemann.
10452	Create a UDP connection to Riemann using the server and port specified in the config.
10453	Sets up HTTP connector and starts queue timer.
10454	Adapts an Event object to a Riemann protobuf event Event
10455	Encode a list of Tensor events with protobuf
10456	Decode a protobuf message into a list of Tensor events.
10457	Send a Tensor Event to Riemann.
10458	Generate preview for URL.
10459	Retrieve preview results for ID.
10460	Send message dicts through r_q, handling pickle errors explicitly.
10461	Loop through messages and execute tasks.
10462	Return True if it's time to log
10463	Send a response to the previously received challenge and return the next state of the state machine.
10464	Abort an initiated SASL authentication process and set state to FAILURE.
10465	Performs the stringprep mapping step of SASLprep. Operates in-place on a list of unicode characters.
10466	Render admin footer info based on user permissions
10467	Builds payment parameters for a Datatrans form.
10468	Builds parameters for registering a credit card with Datatrans.
10469	Charges money using datatrans, given a previously registered credit card alias.
10470	Return full version number, including rc, beta, etc. tags.
10471	Constructs a widget with a layout containing header, content splitter with bookmarks and filesystem widgets, and footer buttons.
10472	Perform post-construction operations, setting up the filesystem browser and connecting signals to slots.
10473	Add keyboard shortcuts to navigate the filesystem.
10474	Handle activation of item in listing. Check if item is a File and enable/disable button accordingly. Update location if item is a File.
10475	Handles selection of item in listing
10476	Handle selection of path segment.
10477	Finalize options to be used.
10478	Compile resource.py using pyside-rcc.
10479	Remove specified resource files and compiled versions if they exist, otherwise issue a warning.
10480	Fetch and return new children.
10481	Reload children. Reset children. Enable children fetching.
10482	Return icon for index.
10483	Run an external command in a separate process and detach it from the current process. If `daemonize` is True then the parent process exits. All stdio is redirected to `os.devnull` unless specified. Return the PID of the child process if not daemonized.
10484	Return the maximum file descriptor value.
10485	Close a file descriptor if it is open.
10486	Close open file descriptors.
10487	Redirect a system stream to the provided target.
10488	Applies given HTML attributes to each field widget of a form.
10489	Returns a module from a given app by its name.
10490	Imports modules from registered apps using given module name and returns them as a list.
10491	Similar to built-in ``include`` template tag, but allowing template variables in template name and a fallback template.
10492	Returns Gravatar image URL for a given string or UserModel.
10493	Returns Gravatar image HTML tag for a given string or UserModel.
10494	Checks if the path is correct and exists, must be abs -> a dir -> and not a file.
10495	Checks if the URL contains S3, with basic validation of the URL scheme, netloc, and path.
10496	Return a valid absolute path for the given filename, which can be relative or absolute.
10497	Get a list of keys for the accounts.
10498	Build a workflow definition from the cloud_harness task.
10499	Execute the cloud_harness task.
10500	Move an active project to the archive.
10501	Creates directory recursively if it does not exist.
10502	Lists matching files in the archive directory based on provided patterns.
10503	Restores a project from an archive.
10504	Create new storage service client.
Arguments:
    environment(str): The service environment to be used for the client. 'prod' or 'dev'.
    access_token(str): The access token used to authenticate with the service.
Returns:
    A storage_service.Client instance
10505	List the entities found directly under a given path, retrieve file names, and handle different server response codes.
10506	Download a file from storage service to local disk. Overwrite existing files.
10507	Check if a certain path exists in the storage service.
10508	Get the parent entity of the entity pointed by the given path.
10509	Create a folder in the storage service pointed by the given path.
10510	Upload local file content to a storage service destination folder.
10511	Deletes an entity from the storage service using its path. Raises exceptions for invalid arguments, forbidden access, not found, and other error codes.
10512	Validate a string as a valid storage path
10513	Creates a new cross-service client.
10514	Create a new storage service REST client.
10515	Get generic entity by UUID.
10516	Set metadata for an entity. Replace existing metadata with the provided dictionary. Raises exceptions for invalid arguments, forbidden access, not found, and other server errors.
10517	Get metadata of an entity specified by entity_type and entity_id. Return A dictionary of the metadata. Raise exceptions for invalid arguments, server response codes 403 and 404, and other errors.
10518	Update the metadata of an entity. Existing non-modified metadata will not be affected.
10519	Delete selected metadata entries of an entity. Only deletes selected metadata keys, for a complete wipe, use set_metadata.
10520	List all the projects the user has access to. This function requires manual pagination.
10521	Get information on a given project by project_id. Returns a dictionary with project details. Raises exceptions for 403, 404, and other 400-600 error codes.
10522	Creates a new project in a specified collaboration. Returns a dictionary of the project details. Raises exceptions for server response codes 403, 404, and 400-600 errors.
10523	Delete a project and its content recursively.
10524	Creates a new folder with a specified name and parent entity. Returns details of the created folder or raises an exception if invalid arguments are provided or the server returns a 400-600 error code.
10525	Get information on a given folder using its UUID. Returns a dictionary of the folder details if found, or raises an exception if the folder is not found or access is forbidden.
10526	Delete a folder and its contents recursively.(handles exceptions for invalid arguments, forbidden access, and not found).
10527	Upload file content to a server. If an ETag is provided, verify against it before updating. Returns the ETag of the uploaded file. Raises exceptions for invalid arguments, missing content, and server errors.
10528	Copy file content from source file to target file.
10529	Download file content based on file ID and optionally ETag for conditional download. Returns tuple with new ETag and content or (None, None) if unchanged. Raises exceptions for invalid arguments or server errors.
10530	This function retrieves a signed URL for downloading a file using its UUID, expires after 5 seconds. It handles exceptions for invalid UUIDs and various server response errors.
10531	Format and insert log record into MongoDB collection
10532	Sets the service name and version the request should target.
10533	Adds headers to the request.
10534	Adds parameters to the request params. Returns the request builder instance for chaining.
10535	Defines if an exception should be thrown after a request is sent based on a predicate function.
10536	Return a sequence containing the fields to be displayed on the changelist.
10537	Spawns a tree of jobs to avoid overloading the number of jobs spawned by a single parent. Used for batching samples greater than 1,000.
10538	Runs GenotypeGVCFs on one or more gVCFs generated by HaplotypeCaller.
10539	Uses Oncotator to add cancer relevant variant annotations to a VCF file. Depends on hg19 genome build.
10540	Sorting items by a specified key function
10541	Returns the timestamp portion of the datapoints as a list in python datetime's date format.
10542	Adds the data from a ConnectorDB export.
10543	Shifts all timestamps in the datapoint array by the given number of seconds.
10544	Gets the sum of the data portions of all datapoints within
10545	Start the event loop to collect data from the serial device.
10546	Create a new user with provided username and password and add it to the database.
10547	Parse Visual Novel search pages, returning a list of dictionaries containing names and IDs.
10548	Parses Releases search pages to extract release information.
10549	Parse a page of producer or staff results
10550	Parses a page of character results and returns a list of dictionaries containing a name, gender, and list of dictionaries containing a game name/id pair for games they appeared in.
10551	Parse a page of tag or trait results and return a list of tags.
10552	Parse a page of user results
10553	Creates a tarball from a group of files.
10554	Applies a function to a set of files and an output directory.
10555	Copy a file to a specified output directory using a job-based approach.
10556	Build a Spark Submit job submission line with required parameters and tools-specific arguments.
10557	Augment a list of "docker run" arguments with those needed to map the notional Spark master address to the real one if they are different.
10558	Refreshes data from the server, raising an error if metadata retrieval fails.
10559	Calls MuTect to perform variant analysis
10560	Creates a device, either public or private, with optional custom properties and initial streams.
10561	Returns the list of streams that belong to the device.
10562	Export device data to a directory, raising an error if the directory already exists.
10563	Search vndb.org for a term and return matching results from type.
10564	Dispatches parsing based on search type category and HTML content.
10565	Adds a stream to the query construction, allowing for interpolation and specifying a column name for the returned dataset. Supports merge queries by inserting a merge stream instead of a dataset and requiring a column name.
10566	Invalidates the current API key, generates a new one, updates authentication, and returns the new key.
10567	Returns the list of users in the database.
10568	Use BWA to create reference index files and returns the FileStoreIDs for the BWA index files.
10569	Returns the ConnectorDB object that the logger uses. Raises an error if Logger isn't able to connect
10570	Adds the given stream to the logger. Requires an active connection to the ConnectorDB database. If a schema is not specified, loads the stream from the database. If a schema is specified, and the stream does not exist, creates the stream. You can also add stream properties such as description or nickname during creation.
10571	Add the given stream to the logger without checking with the ConnectorDB database.
10572	Insert the datapoint into the logger for the given stream name. The logger caches the datapoint and synchronizes it with ConnectorDB.
10573	Attempts to sync with the ConnectorDB server by pinging the database, retrieving cached data, and updating the database with new datapoints. Handles exceptions and calls appropriate callbacks on success or failure.
10574	Starts the logger background synchronization service. Syncs data automatically with ConnectorDB.
10575	Stop the background synchronization thread
10576	Job version of `download_url`
10577	Upload a file to S3 using a job.
10578	Output the names to the given file
10579	Output parent-child relations to file
10580	Calculates the mean insert size from a BAM file using samtools.
10581	Gets current Docker container ID, raises error if not inside a container
10582	Performs alignment of fastqs to bam via STAR
10583	Creates a stream with an optional JSON schema and other properties.
10584	Exports the stream to the given directory. The directory can't exist. You can later import this device by running import_stream on a device.
10585	Returns the device which owns the given stream
10586	Iterates over the labels of terms in the ontology
10587	Iterates over the parent-child relationships in an ontology
10588	Prepares and runs a workflow pipeline, handling command-line arguments, configuration, and directory management.
10589	Populates an ArgumentParser object with arguments from a given config_data dictionary. Recursively handles nested dictionaries and prefixes keys accordingly.
10590	Returns the config file contents as a string. The config file is generated and then deleted.
10591	Returns the path of the mount point of the current container, handling cases where the Docker daemon is unreachable or the mount point is incorrectly specified.
10592	Add an argument to the given arg_parser with the given name.
10593	Creates and returns an ArgumentParser object prepopulated with 'no clean', 'cores', and 'restart' arguments.
10594	Creates and returns a list representing a command for running the pipeline.
10595	Sets the authentication header for use in the session.
10596	Handles HTTP error codes for the given request.
10597	Attempts to ping the server using current credentials, and responds with the path of the currently authenticated device
10598	Send a POST CRUD API request using the given data, which will be converted to JSON.
10599	Send an update request to the given path with the provided data, converted to JSON.
10600	Send a delete request to a path in the CRUD API to delete an object.
10601	Subscribe to the given stream with the callback
10602	Creates a user with the specified email and password. Allows additional properties and device/stream initialization through keyword arguments.
10603	Returns the list of devices that belong to the user
10604	Adapter trimming for RNA-seq data
10605	Create a reference index file using SAMtools.
10606	Runs SAMtools index to create a BAM index file
10607	Marks reads as PCR duplicates using Sambamba.
10608	Marks reads as PCR duplicates using SAMBLASTER
10609	Runs Picard MarkDuplicates on a BAM file.
10610	Sorts BAM file using Picard SortSam and returns the sorted BAM file.
10611	Creates recalibration table for Base Quality Score Recalibration
10612	RNA quantification via Kallisto
10613	RNA quantification with RSEM
10614	Prepare test set for C++ SAR prediction code. Find all items the test users have seen in the past.
10615	Send the given command thru the websocket
10616	Given a stream, a callback, and an optional transform, sets up the subscription.
10617	Attempt to connect to the websocket - and returns either True or False depending on if the connection was successful or not
10618	Attempt to reconnect to the server after a connection is lost, with exponential backoff and randomness to avoid server overload.
10619	Send subscribe command for all existing subscriptions to resume a connection that was closed.
10620	Handle websocket open event, update connection status, manage reconnect time, ensure ping, and release connection lock.
10621	Called when the websocket is closed
10622	Handle error in WebSocket connection.
10623	Handle incoming messages from a server, process them, and handle subscriptions.
10624	Check for ping timeout and reconnect if necessary.
10625	Isolates a particular variant type from a VCF file using GATK SelectVariants
10626	Filters VCF file using GATK VariantFiltration, fixing extra pair of quotation marks in VCF header.
10627	Runs either SNP or INDEL variant quality score recalibration using GATK VariantRecalibrator. Depends on the mode, it uses different resource files.
10628	Applies variant quality score recalibration to VCF file using GATK ApplyRecalibration.
10629	Merges VCF files using GATK CombineVariants.
10630	Perform a quick check on a BAM file using samtools quickcheck.
10631	Load and import packet type-handler mappings.
10632	Write JSON configuration to a file.
10633	Get the configuration for this project from the default JSON file, or write one if it doesn't exist.
10634	Get data for a given ontology term by IRI
10635	Searches the OLS with the given term
10636	Suggest terms from an optional list of ontologies.
10637	Iterates over the descendants of a given term.
10638	Iterates over the labels for the descendants of a given term
10639	Iterates over the labels of terms in the ontology.
10640	Iterates over parent-child relations in an ontology.
10641	Run FastQC on input reads and return the FileStoreID of the fastQC output tarball.
10642	Adds the given stream to the query construction. The function supports both stream names and Stream objects.
10643	Create a Flask application with configuration, blueprints, authentication, and migrations.
10644	Starts Spark and HDFS master containers.
10645	Start spark and hdfs worker containers.
10646	Launches the Hadoop datanode.
10647	Stop spark and hdfs worker containers.
10648	Checks to see if Spark worker and HDFS datanode are still running.
10649	Tokenizer. Generates tokens stream from text
10650	Lookup zone ID for a zone string.
10651	Fetch all pieces of a Route 53 config from Amazon.
10652	Merges Route 53 config XML chunks into a single canonical XML tree.
10653	Validate a changeset is compatible with Amazon's API spec.
10654	Orders population members by fitness, highest to lowest
10655	Calculates the average fitness score of population members.
10656	Returns average cost function return value for all members.
10657	Returns median cost function return value for all members.
10658	computes average parameter values for members of a population.
10659	Returns Member objects of population
10660	Adds a parameter to the Population
10661	Generates the next population from a previously evaluated generation
10662	Return a config dictionary with normalized keys.
10663	Return a generator with all environmental vars with prefix.
10664	Checks whether a callable function throws any of the specified exceptions.
10665	Converts a list of PyPI hits into a list of packages with their versions and scores.
10666	Convert the result back into the input type.
10667	Convert all tags in an HTML tree to XHTML by moving them to the XHTML namespace.
10668	Convert all tags in an XHTML tree to HTML by removing their XHTML namespace.
10669	Return an HTML string representation of the document.
10670	Opens an HTML document in a web browser using a temporary file.
10671	Removes this element from the tree, including its children and text. Joins the tail text to the previous element or parent.
10672	Remove the tag but merge its children and text into the parent.
10673	Returns the first element in a document with the given id. If none is found, return the default argument if provided or raise KeyError otherwise.
10674	Run the CSS expression on this element and its children, returning a list of the results.
10675	Iterate through the attributes of every logger's handler
10676	return test counts from environment variables
10677	Returns True if only a single class is being run or some tests within a single class
10678	Return True if only a single module is being run.
10679	Validates request parameters.
10680	Validates the request id.
10681	Ensure that the given path is decoded using the filesystem encoding or utf-8, or return NONE if no encoding works.
10682	Error:服务业
10683	Return the python codec name corresponding to an encoding or None if the string doesn't correspond to a valid encoding.
10684	Attempts to detect a BOM at the start of the stream and returns the determined encoding or None.
10685	Selects the new remote addr from the given list of ips in X-Forwarded-For. By default it picks the one that the `num_proxies` proxy server provides. Before 0.9 it would always pick the first.
10686	Converts amount value from several types into Decimal.
10687	Parse a string of HTML data into an Element tree using BeautifulSoup.
10688	Parse a file into an ElemenTree using the BeautifulSoup parser.
10689	Converts a BeautifulSoup tree to a list of Element trees. Returns a list for HTML-like soup with more than one root element. Supports a custom Element factory.
10690	Get the current exception info as `Traceback` object.
10691	String representation of the exception.
10692	Render the traceback for the interactive console.
10693	Generates a plaintext traceback as a generator.
10694	Helper function that returns lines with extra information, marking function definition and current line.
10695	Render the sourcecode.
10696	Pulls the version part out of a string.
10697	Returns the locations found via self.index_urls, checking the url_name on the main index and using it to produce all locations.
10698	Find all available versions for a project name by checking index URLs, find links, and dependency links. Returns all versions found.
10699	Try to find an InstallationCandidate for a given requirement, considering installed versions and version constraints. Raises exceptions if no suitable version is found.
10700	Sort elements in links, prioritize non-egg links, eliminate duplicates.
10701	Returns the Content-Type of the given URL using a HEAD request.
10702	Yields all links in the page.
10703	Check if a link can be verified after download.
10704	Return filenames for package's data files in 'src_dir'
10705	Filter filenames for package's data files in 'src_dir'.
10706	Parse a requirements file and yield InstallRequirement instances.
10707	Joins lines ending in '\' with the previous line.
10708	Strips and filters empty or commented lines.
10709	Compile a marker into a function that evaluates it against an environment.
10710	Ensure statement only contains allowed nodes.
10711	Flatten one level of attribute access.
10712	Coerce value to float or int; return original if unsuccessful.
10713	Create a wrapper function to retain the current request context when working with greenlets.
10714	Binds the app context to the current context.
10715	Pops the app context.
10716	Creates a copy of this request context with the same request object. This can be used to move a request context to a different greenlet. Because the actual request object is the same this cannot be used to move a request context to a different thread unless access to the request object is locked.
10717	Can be overridden by a subclass to hook into the matching of the request.
10718	Pushes the request context to the stack and opens the session.
10719	Make a filename relative, where the filename path, and it is relative to rel_to
10720	Check if a distribution is an editable install.
10721	Register a function as a URL value preprocessor for the blueprint.
10722	Callback function for URL defaults for this blueprint. It's called with the endpoint and values and should update the values passed in place.
10723	Registers an error handler for the blueprint.
10724	A function to keep the request context active during a streamed response.
10725	Create response object with additional headers
10726	Generate a URL to the given endpoint with additional values as query arguments. Supports blueprints and external URL generation.
10727	Safely join `directory` and `filename`, raising `NotFound` if the resulting path falls outside `directory`.
10728	Returns the path to a package or cwd if that cannot be found.
10729	The Jinja loader for this package bound object. Returns a FileSystemLoader if the template folder is not None.
10730	Prints the completion code of the given shell.
10731	Return the cookie domain for the session cookie if session cookies are used.
10732	Return a directory to store cached wheels based on the link.

Generate a cache key from the link's URL and hash, encode it with SHA-224, and create a nested directory structure for caching.
10733	Return True if the extracted wheel in wheeldir should go into purelib.
10734	Yield all the uninstallation paths for dist based on RECORD-without-.pyc
10735	Checks compatibility between a package version and Pip's version, raising an error if the package version is a major series ahead and warning if it's only a minor version ahead.
10736	Builds one wheel and returns its filename, or None if the build failed.
10737	Yield names and strings used by code and its nested code objects
10738	Decorator for Backend that ensures rates are fresh within last 5 mins
10739	Add paths for egg-info files for an external egg-base. If egg-base is outside the current working directory, searchs the egg-base directory for files to include in the manifest.
10740	Write the pip delete marker file into this directory.
10741	Return True if we're running inside a virtualenv, False otherwise.
10742	Retrieve and return the effective username of the current process.
10743	Return a distutils install scheme.
10744	Parse cache control headers and return dictionary of directives.
10745	Return a cached response if it exists and is fresh, otherwise return False.
10746	### Summary:
Cache a response if it meets caching criteria.
10747	Update zipimporter cache data for a given normalized path. Process sub-path entries and allow custom updating through an optional callable.
10748	This function loads a template script from the package based on whether a development path is provided and prepares it as a UTF-8 string.
10749	Ensure a setuptools-generated site.py exists in the target directory. If not, create or update it.
10750	Write changed .pth file back to disk.
10751	Convert values to an appropriate type.
10752	Add filters to a filterer from a list of names.
10753	Configures a logging handler from a dictionary.
10754	Add handlers to a logger from a list of names
10755	Configure a logger with common settings such as level, handlers, and filters.
10756	Execute a file in the current Python environment.
10757	Monkey-patch tempfile.tempdir with replacement, ensuring it exists
10758	Prefixes stub URLs with 'ssh://' for parsing and removes it afterwards.
10759	Get an item or attribute of an object but prefer the item.
10760	Internal hook method for customizing the generate process.
10761	Compiles Jinja2 templates and stores them in a directory or zipfile.
10762	Determine the default cache location
10763	Find eggs in zip files; possibly multiple nested eggs.
10764	Yield distributions accessible on a sys.path directory.
10765	Declare that package 'packageName' is a namespace package.
10766	Get the method resolution order (MRO) for a type or classic class
10767	Return an adapter factory for an object from a registry.
10768	Ensure that the parent directory of path exists.
10769	Yield entry point objects from `group` matching `name`. If `name` is None, yields all entry points in `group` from all distributions in the working set. Otherwise, only ones matching both `group` and `name` are yielded.
10770	Check if distribution is acceptable for this environment.
10771	Find distribution best matching req and usable on working_set
10772	Evaluate a PEP 426 environment marker on CPython 2.4+. Return a boolean indicating the marker result in this environment. raise SyntaxError if marker is invalid.
10773	Evaluate a PEP 426 environment marker using markerlib. Return a boolean indicating the marker result in this environment. Raise SyntaxError if marker is invalid.
10774	Calls the standard formatter and indents all log messages by the current indentation level.
10775	Return formatted currency value.
10776	Parse number format patterns.
10777	Return the minimal quantum of a number, as defined by precision.
10778	Returns maximum precision of a decimal instance's fractional part.
10779	Returns normalized scientific notation components of a value.
10780	Convert a timedelta to total seconds with Python 2.6 compatibility.
10781	Yield Requirement objects for each specification in strs
10782	Protect against re-patching distutils if reloaded. Also ensures no other distutils extension monkeypatched distutils first.
10783	Verify that install_requires is a valid requirements list.
10784	Fetches an egg needed for building
10785	Roll n-sided dice and return each result and the total.
10786	Convert string prices into Price objects.
10787	Price field for attrs. Usage: Define a class with a price field using the `fields.price` method and specify default value and converter.
10788	Validate JSON-RPC request.
10789	Get request method for service application.
10790	Applies an application method with given parameters.
10791	Return the name of the current module if the request was dispatched to an actual module. This functionality is deprecated, use blueprints instead.
10792	Get the name of the current blueprint.
10793	Monkeypatches the files object in Flask requests to raise a custom error if the requested key is not in the files dictionary but is in the form data.
10794	Create an abstract dist object based on the installation requirements.
10795	Adds a requirement to the installation process, handling markers, duplicates, and dependencies.
10796	Call handler for all pending reqs.
10797	Check if req_to_install should be skipped. Returns a text reason for skipping or None.
10798	Create the installation order based on topological sorting, ensuring dependencies are installed before requiring items.
10799	Return sorted list of all package namespaces.
10800	Convert QuerySet objects to their list counter-parts
10801	Tokenize a document and add an annotation attribute to each token.
10802	Merge the annotations from tokens_old into tokens_new, when the tokens in the new document already existed in the old document.
10803	Copy annotations from src tokens to dest tokens.
10804	Combines adjacent tokens when no HTML separates them and they share an annotation.
10805	Serialize list of tokens into text chunks, adding annotations with markup_func.
10806	Given a list of tokens return a generator of the chunks of text for the data in the tokens.
10807	Locate unbalanced end tags, possibly moving point earlier in document.
10808	Converts a list of chunks into a list of tokens.
10809	Flatten an lxml element into text chunks, including tags and attributes.
10810	Splits some text into words with trailing whitespace when appropriate.
10811	Generate the text representation of the start tag for an XML/HTML element.
10812	Generates and formats the text representation of an end tag for an element, optionally including trailing whitespace if the element has a tail with leading whitespace.
10813	Serializes a single lxml element as HTML, including the element's tail. If skip_outer is true, removes the outermost tag during serialization.
10814	fixup_ins_del_tags that works on an lxml document in-place
10815	Extracts the constant value of a symbol from a code object, returning the value of the first assignment if it's a STORE_NAME or STORE_GLOBAL, otherwise returns the default value. If the symbol is not found, returns None.
10816	Constructs a simplified URL for caching a query by combining operation, service, version, and custom parameters.
10817	Turn any URLs into links. It will search for links identified by the given regular expressions (by default mailto and http(s) links). It won't link text in an element in avoid_elements, or an element with a class in avoid_classes. It won't link to anything with a host that matches one of the regular expressions in avoid_hosts (default localhost and 127.0.0.1).
10818	Kill any conditional comments in the HTML document.
10819	Parse a whole document into a string.
10820	Define the return schema of an API.

 Validate that the HTTP return code is accepted and that the response is JSON.
10821	Get a TreeWalker class for various types of tree with built-in support.
10822	Exports the SVN repository at the URL to the destination location.
10823	Return the maximum revision for all files under a given location.
10824	Wraps a method to check if called after the first request in debug mode, raising an error if so.
10825	Get application name, guessing from run file if import name is main.
10826	Retrieve and return the value of the `PROPAGATE_EXCEPTIONS` configuration, or a sensible default based on testing or debug mode.
10827	Tries to locate the instance path if it was not provided, calculating the path to an "instance" folder next to the main file or package.
10828	Update template context with commonly used variables.
10829	Handles an HTTP exception by invoking registered error handlers or returning the exception as a fallback response.
10830	Checks if an HTTP exception should be trapped or not based on configuration settings. By default, it returns `False` for all exceptions except for bad request key errors if ``TRAP_BAD_REQUEST_ERRORS`` is `True`, and `True` if ``TRAP_HTTP_EXCEPTIONS`` is `True`.
10831	Default exception handling that re-raises the exception in debug mode, logs the error, and uses a 500 internal server error handler if defined, otherwise displays a default message.
10832	Reraise exceptions recorded during routing, excluding redirect requests for non-GET, HEAD, or OPTIONS methods during debug.
10833	Dispatches the request and performs request preprocessing, exception catching, and error handling.
10834	Create the default OPTIONS response with allowed methods.
10835	Creates a URL adapter for the given request. The URL adapter is created at a point where the request context is not yet set up.
10836	Injects URL defaults for the given endpoint into the values dictionary.
10837	Yield unique values in iterable, preserving order.
10838	Place the runtime requirements from pkg_info into metadata.
10839	Compose the version predicates for requirement in PEP 345 fashion.
10840	Convert .egg-info directory with PKG-INFO to the Metadata 1.3 format.
10841	Import modules from specified paths while handling import errors.
10842	yield TestCase classes from modules based on a partial class name.
10843	Return actual test methods that matched self.method_name.
10844	Checks if a name with potential prefixes or suffixes is found in a list of basenames.
10845	Returns true if the passed in path is a test module path.
10846	Walk all the directories of basedir except hidden directories
10847	Generates paths to test modules recursively based on a base directory.
10848	Injects default arguments for dump functions based on the current app configuration.
10849	Inject default arguments for load functions.
10850	Sets multiple keys and values from a mapping.
10851	Increments the value of a key by delta, initializing with delta if key does not exist. Returns new value or None for backend errors.
10852	Dumps an object into a string for redis, serializing integers as ASCII and pickling other types.
10853	Generates a dictionary of query string parameters from an editable URL.
10854	Ensure that if a link can be found for this, that it is found.
10855	Ensure that a source_dir is set. Create a temporary build dir if the name of the requirement isn't known yet.
10856	Remove the source files from this requirement, if they are marked for deletion.
10857	Return a pkg\_resources.Distribution built from self.egg\_info\_path
10858	Read and return buffered incoming data from the client, caching it by default.
10859	Modify headers for given environment
10860	Converts any unicode-based IRI to an acceptable ASCII URI. Handles safe conversion and special protocols.
10861	Return full path to the user-specific cache dir for this application.
10862	Return full path to the user-specific data dir for this application.
10863	Return full path to the user-specific log dir for this application
10864	Return full path to the user-specific config dir for this application.
10865	Return a list of potential user-shared config dirs for a given application.
10866	Iterate over all relevant Python files, including module files, folder files, and files reachable through a package.
10867	Spawns a new Python interpreter with the same arguments as this one, but running the reloader thread.
10868	Convert None to empty string or original type.
10869	Return an existing CA bundle path or None.
10870	Parse a string or file-like object into a tree.
10871	Parse a HTML document into a well-formed tree
10872	Parse a HTML fragment into a well-formed tree fragment
10873	pass in a word string return probable matches for the word.
10874	Converts lines from sys input to a list of tokens and a dictionary of tokens
10875	Bind and activate HTTP server.
10876	Report startup info to stdout.
10877	Loads bytecode from a file or file-like object.
10878	Return a copy of paramsDict, updated with kwargsDict entries wrapped as stylesheet arguments. None values in kwargsDict are ignored.
10879	Run a VCS subcommand
10880	Returns implementation version.
10881	Yield egg or source distribution objects based on basename
10882	Find and yield URLs with rel="homepage" or rel="download" attributes from a given HTML page.
10883	Reads a local path with special support for directories, returns HTTP response accordingly.
10884	Evaluate a URL as a possible download, and maybe retrieve it
10885	Remove duplicate entries from sys.path and make them absolute
10886	Return a set containing all existing directory entries from sys.path
10887	Add a new path to known_paths by combining sitedir and 'name' or execute sitedir if it starts with 'import'
10888	Add 'sitedir' argument to sys.path if missing and handle .pth files in 'sitedir'
10889	Check if user site directory is safe for inclusion
10890	Add a per user site-package to sys.path
10891	Define new built-ins 'quit' and 'exit' that raise SystemExit.
10892	Make Windows default encodings usable by aliasing to "mbcs."
10893	Set the string encoding used by the Unicode implementation. Default is 'ascii', but can be changed to support locale-aware encodings or to disable string to Unicode coercion.
10894	Force easy-installed eggs in the global environment to get placed in sys.path after all packages inside the virtualenv.
10895	Adjust the special classpath sys.path entries for Jython. These entries should follow the base virtualenv lib directories.
10896	Open a subprocess without blocking using queues for output lines.
10897	Return True if Cython or Pyrex can be imported.
10898	Replace sources with .pyx extensions to sources with the target language extension.
10899	Run the application and conserve the traceback frames.
10900	Return a static resource from the shared folder.
10901	Return a string representing the user agent.
10902	Returns true if the name looks like a URL
10903	Unpack a file or directory from a URL to a specified location. If a download directory is provided, make a copy of the file inside it. Handle file hashing, unpack archives, and log information.
10904	Download link url into temp_dir using provided session.
10905	Check download_dir for previously downloaded file with correct hash If a correct file is found return its path else None
10906	Handle currencyFormat subdirectives.
10907	Handle exchange subdirectives.
10908	Decode the data passed in and potentially flush the decoder.
10909	Default template context processor injects 'request', 'session', and 'g'.
10910	Renders the template and fires the signal
10911	Render a template from the template folder with the given context.
10912	Renders a template from the given string source with the provided context.
10913	Parse a version using pkg_resources if available, or distutils if not.
10914	Checks if a name is declared in the current scope or any outer scope.
10915	Identify and categorize variable names based on their usage context (store, param, or load). Track declared locally, parameters, and undeclared variables.
10916	Handles includes by processing the template and surrounding context, managing exceptions for missing templates.
10917	Visit named imports and assign them to context vars.

Check for missing names and handle them by creating undefined variables.

If at top level, add assigned names to context vars and discard undefined ones.
10918	Create a whl file from all files under 'base_dir', placing .dist-info at the end of the archive.
10919	Decorate a function with a reentrant lock to prevent multiple threads from calling it simultaneously.
10920	Create service, start server.
10921	URL escapes a single bytestring or unicode string with a given charset under all supported Python versions.
10922	Searches for wheels that satisfy a given requirement.
10923	Marshal cmd line args into a requirement set.
10924	Exports a Bazaar repository to a specified destination location
10925	Lookup an Amazon Product.
10926	Iterate Pages.
10927	Gets the immediate ancestor of this browse node in the browse node tree.
10928	Method to retrieve this browse node's children in the browse node tree.
10929	Get a child element of root (multiple levels deep) failing silently if any descendant does not exist.
10930	Get element text as string or None.
10931	Get element as datetime.date or None
10932	Retrieve the offer price and currency based on a hierarchy of prices (sale, regular, lowest new), returning a float price and ISO currency code or None.
10933	Return a tuple containing the float representation of price and the ISO currency code.
10934	Send a request, cache the response if possible, and handle ETags.
10935	Build a response by making a request or using the cache. Apply expiration heuristics and cache 301 responses. Wrap response for caching on consume. Optionally invalidate cache based on method and status. Add from_cache attribute to response.
10936	Return a callable that looks up the given attribute from a passed object with the rules of the environment.
10937	Convert a string to titlecase, with words starting with uppercase letters.
10938	Sort an iterable, optionally in reverse and case-sensitively.
10939	Groups a sequence of objects by a common attribute.
10940	Applies a filter on a sequence of objects or looks up an attribute.
10941	Creates a logger for the given application with adjusted logging level based on the debug flag.
10942	Constant time comparison of two strings.
10943	Verifies the given signature matches the expected signature
10944	Derive key based on specified method.
10945	Returns the signature for the given value
10946	Signs the given string.
10947	Verifies the signature for the given value.
10948	Unsigns the given string.
10949	Signs the given string and attaches a time and signature.
10950	Validates the given signed value by checking the signature. Returns True if valid, False otherwise.
10951	Returns a signed string serialized with the internal serializer. The return value can be either a byte or unicode string depending on the format of the internal serializer.
10952	JSON-RPC server error response generation and exception raising.
10953	Return a list of Python packages found within a specified directory, with optional inclusion and exclusion filters.
10954	Exclude packages that don't include their parents.
10955	Recursively yields all directory paths relative to a given base_path
10956	Verify vary headers match and construct HTTPResponse object
10957	Removes RECORD.jws from a wheel by truncating the zip file.
10958	Unpack a wheel file to destination directory.
10959	Regenerate the entry_points console_scripts for the named distribution.
10960	Sets drawing attributes for graph sub-elements using xdot format.
10961	Generates a new canvas from Xdot attributes of graph components
10962	Returns a node given an ID or None if no such node exists.
10963	Sets the connection string for all edges.
10964	Handles the list of edges for any graph changing. Ensures edge nodes exist in the graph and initializes edge node lists.
10965	Handles the component being changed.
10966	Handles left mouse double-click on tool's component, opens Traits UI view on referenced object.
10967	Handle diagram canvas change by adding tools to the canvas.
10968	Clears all components from the canvas and creates a new one with the same traits.
10969	Handles the domain model changing by unmapping the old model and mapping the new model if they exist.
10970	Maps a domain model to the diagram
10971	Removes listeners from a domain model
10972	Handles mapping elements to diagram components
10973	Styles a node
10974	Parses xdot data and returns the associated components
10975	Sets the font.
10976	Generate an ellipse component from given tokens.
10977	Returns the components of a polygon.
10978	Returns the components of a polyline.
10979	Returns text components.
10980	Return the components of an image.
10981	Ensure the GridFS file is read from the beginning and configure the response headers accordingly.
10982	Save to file.
10983	Load the file.
10984	Test if the point is within this ellipse
10985	Draws the component bounds for testing purposes.
10986	Open wizard and perform action.
10987	Constructs the SQLAlchemy engine and session factory
10988	Parses the dot_code string and replaces the existing model.
10989	Handles creation of a new graph, prompting user to replace existing one if initialized.
10990	Handles file opening action.
10991	Handles saving the current model to the last file. If the file does not exist, calls save_as method. Otherwise, opens the file in binary write mode, converts the model to a string, and writes it to the file. Finally, closes the file.
10992	Handles saving the current model to file
10993	Handles display of the graph dot traits.
10994	Handles display of nodes editor.
10995	Handles display of the edges editor.
10996	Handles displaying a view about Godot.
10997	Adds a Node to the graph if it is initialized.
10998	Handles adding an Edge to the graph.
10999	Handles adding a Subgraph to the main graph.
11000	Handle adding a Cluster to the main graph if initialized
11001	Displays a dialog for graph selection if more than one exists. Returns None if the dialog is canceled.
11002	Handles display of the options menu.
11003	Handles display of the dot code in a text editor if the info is initialized.
11004	Handles the user attempting to exit Godot.
11005	Position the bottom-left corner of components at the origin.
11006	Saves the object to a given file-like object in the specified format.
11007	Load the object from a file-like object with the given format.
11008	Write object to file given by filename.
11009	Load an instance of the class from a file with the given filename and specified format. If format is not provided, derive it from the file extension.
11010	Create a Property using lambda functions for an alias trait.
11011	Simple file parsing generator
11012	Return a list of cached keys from `content` that can be used to generate sentences, filtered by having an uppercase first letter and not ending with punctuation.
11013	Add chain to current shelve file
11014	Remove chain from current shelve file
11015	Build markov chain from source on top of existing chain
11016	Generates a simple sentence starting with an uppercase letter using a MarkovChain without a length limit.
11017	Creates and returns a graph representation using a specified layout program and format. Writes the graph to a temporary dot file, processes it with the given program, and returns the output as a string if successful. On failure, returns None.
11018	Adds a node to the graph
11019	Removes a node from the graph
11020	Returns the node with the given ID or None
11021	Removes an edge from the graph. Returns the deleted edge or None.
11022	Adds an edge between two nodes in the graph.
11023	Adds a subgraph to the graph.
11024	Handles the Graphviz layout program selection changing.
11025	Maintains the list of available nodes for each edge.
11026	Parses a DOT file and returns a Godot graph.
11027	Return a graph given a file or a filename.
11028	Build a Godot graph instance from parsed data.
11029	Builds a Godot graph using a series of commands and tokens.
11030	Given a duration in seconds, determine the best units and multiplier for display.
11031	Formats a number of seconds using the best units.
11032	Handle the file path changing.
11033	Creates the toolkit-specific control that represents the editor. 'parent' is the toolkit-specific control that is the editor's parent.
11034	Split a sequence into pieces of length n. If the length of the sequence isn't a multiple of n, the rest is discarded. Note that nsplit will split strings into individual characters.
11035	Generates overlapping windows of a specified length from an iterable.
11036	Runs Godot.
11037	Gets the object's children.
11038	Appends a child to the object's children based on its type.
11039	Inserts a child into the object's children based on its type.
11040	Deletes a child from the object's children at the specified index.
11041	Sets up or removes a listener for children being replaced on a specified object.
11042	Sets up or removes a listener for children being changed on a specified object.
11043	Gets the label to display for a specified object.
11044	Sets the label for a specified object.
11045	Sets up or removes a listener for the label being changed on a specified object.
11046	Finishes initialising the editor by creating the underlying toolkit widget.
11047	Updates the editor when the object trait changes externally, adding nodes and edges and listening for changes.
11048	Adds the event listeners for a specified object.
11049	Handles a list of nodes being set.
First, deletes the old nodes, then adds the new nodes.
11050	Handles addition and removal of nodes.
11051	Adds a node to the graph for each item in 'features' using GraphNodes from the editor factory.
11052	Handles a list of edges being set by deleting old edges and adding new ones.
11053	Handles addition and removal of edges.
11054	Adds edges to the graph for each item in 'features' using the GraphEdges from the editor factory.
11055	Handles parsing Xdot drawing directives and adjusting component positions accordingly.
11056	Handles the containers of drawing components being set, updating positions and managing drawings.
11057	Give new nodes a unique ID. If "__table_editor__" is in the row_factory_kw, use the graph's unique name generator to create a unique ID. Otherwise, use a randomly generated 6-character hexadecimal UUID.
11058	Creates a new edge with unique IDs for tail and head nodes based on graph nodes.
11059	Attach this connection's default database to the context using our alias.
11060	Parses the drawing directive, updating the node components.
11061	Parses the label drawing directive, updating the label components.
11062	Handles the container of drawing components changing
11063	Handles the position of the component changing.
11064	Handles the Graphviz position attribute changing.
11065	Handles right mouse button click in 'normal' state. Opens context menu from parent component tools if clicked on this tool's component.
11066	Outputs available code highlight styles and customizes CSS for a specified style.
11067	Draws a closed polygon using the given graphics context and parameters.
11068	Test if a point is within this polygonal region
11069	Draws the Bezier component
11070	Broadcasts an event to the database connections registered.
11071	When the Worker thread is started, the run method gets executed. It continuously checks for items in the in_queue. If an item is found, it is passed to the func method as an argument, and the result is put in the out_queue. The process repeats until the stopper is set.
11072	Get the full, external URL for this page, optionally with the passed in URL scheme
11073	Render the rel=prev and rel=next links to a Markup object for injection into a template
11074	Renders SEO links (rel=canonical, rel=prev, rel=next) to a Markup object for template injection.
11075	Is candidate an exact match or sub-type of pattern?
11076	Selects the best content type based on the requested and available options.
11077	Create a new URL from input_url with modifications applied.
11078	Removes authentication information from a URL and returns it along with the sanitized URL.
11079	Generate the user+password portion of a URL.
11080	Normalize a host for a URL.
11081	Attempts to list all of the modules and submodules found within a given directory tree. Returns a list of candidate module names.
11082	Attempts to list all of the modules and submodules found within a given directory tree. Recursively searches the directory tree for potential python modules and returns a list of candidate names.
11083	Attempts to list all submodules under a given module, recursively, from both default and extended paths.
11084	Attempt to list all classes within a specified module, optionally filtering with a provided function.
11085	Attempts to list all of the classes within a given module namespace, recursively. Filters classes using an optional function.
11086	Ensure directory exists, creating it if necessary.
11087	Store the given text contents associating them with a key for later retrieval.
11088	Checks if a card passes a Luhn mod-10 checksum
11089	Return the git hash as a string
11090	Load a module's code and set the module's expected hidden variables.
11091	Adds a path to search through when attempting to look up a module.
11092	Searches for the required module in the given paths. Returns the module loader if found, otherwise None.
11093	Split a line into multiple lines if it exceeds the maximum length while preserving indentation and ensuring theimum length is not violated.
11094	Remove all namespaces from an lxml.etree document.
11095	Checks that the versions are consistent
11096	Creates a new instance of a rule from a YAML configuration and updates the class dictionary with the configuration details.
11097	Merges a dictionary into the Rule object.
11098	Iterates over the actions and executes them in order.
11099	Create new instance of a rule by merging two dictionaries.
11100	Add extra details to the message Separte so that it can be overridden
11101	Formats and sends a log record as an email, respecting rate limits.
11102	Ensure `image_rendition` is added to the global context.
11103	Log an attempt against a key, incrementing the number of attempts and potentially locking the account.
11104	Adds an URL to the download queue if both music and storage services are initialized.
11105	Creates and starts workers, handling graceful termination on SIGINT signal.
11106	This function adds or updates a key-value pair in a key-value store, making a PUT request to a specified endpoint and handling errors if the request is unsuccessful.
11107	Get the value of a given key.
11108	Recursively get the tree below the given key.
11109	Get the current index of the key or the subtree for later long polling requests.
11110	Deletes a given key or recursively deletes the tree below it
11111	Plot heatmap showing features correlated with classes.
11112	Add a number of months to a timestamp, handling cases where the day exceeds the last day of the month.
11113	Adds a specified number of months to a given date, handling cases where the day of the month doesn't exist in the new month.
11114	Check if it is the Christmas period
11115	Sets the current music service based on service_name and handles API keys if necessary.
11116	Sets the current storage service and runs the connect method on it.
11117	Read dataset from csv.
11118	Reads dataset from json.
11119	Reads dataset to csv.
11120	Select items with label from dataset
11121	Calculates average dictionary from list of dictionaries for a given label
11122	Report significance of features in a dataset using ANOVA and correct for multiple hypothesis testing.
11123	Restore the data dict - update the flask session and this object
11124	Recursively merge the 2 dicts. Destructive on argument 'a'.
11125	Decorator for a function to dispatch on based on the return value of the dispatch function.
11126	Decorator for implementing dispatch_fn with a specified dispatch_key, or as the default function if no dispatch_key is provided.
11127	Auto-discover INSTALLED_APPS registered_blocks.py modules and fail silently when not present. This forces an import on them thereby registering their blocks.
11128	Verifies a block prior to registration.
11129	Registers block to block_type in the registry
11130	Unregister the block associated with `block_type` from the registry.
11131	Converts a file to MP3 and adds the original file to a delete queue.
11132	Determine whether the desired version is a reasonable next version.
11133	Checks if a route needs SSL and redirects if necessary.
11134	Initializes Celery and sets up logging
11135	Add a mail to the queue to be sent.
11136	Parse an HTTP accept-like header.
11137	Parse `Cache-Control` header into dictionary of key-value pairs.
11138	Parse a content type like header.
11139	Parse RFC7239 Forwarded header.
11140	Parse a comma-separated list header.
11141	Parse a named parameter list in the "common" format.
11142	Resize an image to fit the passed-in width, keeping the aspect ratio the same.
11143	Add a new value to the list with validation.
11144	Downloads a MP4 or WebM file from a given URL and returns the local filename.
11145	Creates connection to the Google Drive API and creates the Music folder if it doesn't exist.
11146	Uploads a file to Google Drive's Music folder and logs the upload time.
11147	Initializes the connection attribute with the path to the user home folder's Music folder, and creates it if it doesn't exist.
11148	Writes the parameters to a file needed by skytool_Free to generate the sky radiance distribution.
11149	Does nothing currently. May not need this method.
11150	Read the phytoplankton absorption file from a csv formatted file.
11151	Scale the spectra by multiplying by a linear scaling factor.
11152	Reads pure water absorption from a CSV file.
11153	Reads the pure water scattering data from a CSV file.
11154	Generic IOP reader that interpolates the IOP to the common wavelengths defined in the constructor.
11155	Write numpy array iop to file.
11156	Calculates the total scattering from back-scattering
11157	Calculates the total absorption from water, phytoplankton, and CDOM
11158	Calculates the total attenuation from the total absorption and total scattering.
11159	Build all b and c from IOPs in the correct order.
11160	Takes lists for parameters and saves them as class properties
11161	Read a text file and load its contents into a Python dictionary using '=' as the delimiter.
11162	Convert comma-separated string values to float list by stripping square brackets and splitting by commas.
11163	Reads in a PlanarRad generated report and saves the single line reported parameters as a python dictionary.
11164	Sets a handler for a list of signals.
11165	Pseudo handler for signals. Logs warning if a signal is received while another is being processed.
11166	Handles signals for restarting, aborting, pausing, resuming, and printing status.
11167	Pause execution, resuming after X seconds or interrupt signal received.
11168	Runs abort tasks, then exit tasks, and exits with an error code.
11169	Run all status tasks, then run all tasks in the resume queue
11170	Tries to remove a registered event without triggering it.
11171	Fetch time series data from OpenTSDB
11172	Fetch and sort time series data from OpenTSDB returns a list of (timestamp, value) tuples sorted by timestamp.
11173	Collects and returns a list of values from the given iterable, optionally limiting the number of items.
11174	Prints an item with customizable end and file parameters.
11175	Prints each item from an iterable.
11176	Extract function signature, default arguments, keyword-only arguments, and whether or not variable positional or keyword arguments are allowed. Handle bound instance or class methods by passing an object instance as the first argument.
11177	Extracts function signature from an existing partial instance.
11178	Calculate new argv and extra_argv values resulting from adding specified positional and keyword arguments.
11179	ignore certain metainf files return true if the filename matches one of the patterns
11180	Sort keys for xpi files
11181	Convert VLQ-encoded data to an integer.
11182	Read a table structure with known/unparsed fields.
11183	Parse user data header for StarCraft II replay.
11184	Transforms a duration in seconds into a human-readable form
11185	Print a summary of the game details.
11186	Get user input data from UI elements and store it in class attributes.
11187	Display file and graphic once file is found.
11188	Writes batch file using inputs from self.
11189	Reads data from a file, separates it into wavelengths and other information, and stores the data for curve plotting.
11190	Connect slider to "display_the_graphic" function
11191	Displays information about curves.  
Iterates through labels and data information to set text in UI columns.
11192	Display an error message when a wrong value is typed.
11193	Hide error message when all values are correct.
11194	Executing planarRad using the batch file
11195	Cancels PlanarRad if it's running in normal mode. Asks for confirmation before proceeding.
11196	Quit PlanarRad, checking if it's running before.
11197	Saves the figure displayed to a PNG file in the "Artists_saved" directory of the current repository.
11198	Open and display log file in PlanarRad interface.
11199	Opens the documentation file in a window using a web browser.
11200	Set initial GUI state for prerequisite actions
11201	Intercepts mouse's right click and its position.
11202	Retrieve mouse coordinates and update graph position
11203	Updates labels with mouse coordinates if authorized display is true.
11204	Create a LockSet with a single validator vote to sign the genesis block.
11205	Sign this with a private key
11206	Hash a message using a deterministic algorithm.
11207	Checks the validity and presence of quorum, noquorum, or quorumpossible states.
11208	Allocate new funds for the issuer and store the RTGS hash.
11209	Return the highest lock on height.
11210	Return the last block proposal node voted on.
11211	highest valid lockset on height
11212	setup a timeout for waiting for a proposal
11213	called to inform about synced peers
11214	Makes private keys that support coloring, using a specific hashing and address generation process.
11215	Calculate the end-to-end packet delay considering sender and receiver bandwidths and base latencies.
11216	Deliver a packet with a delay based on the round timeout window
11217	Create an object that acts as a proxy for a contract on a blockchain.
11218	returns class._on_msg_unsafe, use x.im_self to get class
11219	Registers NativeContract classes.
11220	returns True if unknown
11221	Handle received transactions by adding them asynchronously.
11222	Decondition an image from the VGG16 model.
11223	Condition an image for use with the VGG16 model.
11224	Create a function for the response of a layer.
11225	Get symbolic output of a layer.
11226	Evaluate layer outputs for input `x`.
11227	Creates a new encryption key at the specified path and sets the file permissions. The permissions setting does not work on Windows due to platform differences.
11228	Finishes the load job. Called automatically when the connection closes. Returns the exit code.
11229	Load from a file into the target table, handling each step of the load process. Can load from text files and properly formatted giraffez archive files, decompressing files if detected. Determines file encoding automatically. Uses header for column names in text files and parses dates if specified. Raises errors on table not set or format issues if `panic` is `True`.
11230	Load a single row into the target table.
11231	Attempt to release a target mload table.
11232	Return the names of the work tables used for loading.
11233	Monkey-patch compiler to remove default compiler flags
11234	Attempts to find the Teradata install directory with the defaults for a given platform. Returns `None` if defaults are not present and the TERADATA_HOME environment variable is not explicitly set.
11235	Retrieve the decrypted value of a key in a giraffez configuration file.
11236	Set a decrypted value by key in a giraffez configuration file.
11237	Display results in table format
11238	Execute SQL command using CLIv2, handling options like coercion, date parsing, and silent execution. Returns a cursor over results.
11239	Retrieve a value from the configuration based on its key The key may be nested
11240	Writes a default configuration file structure to a file._overwrites existing file. Returns the content written.
11241	Set the names of columns to be used for filtering when iterating or retrieving names.
11242	Writes export archive files in the Giraffez archive format.
This takes a giraffez.io.Writer and writes archive chunks to file until all rows for a given statement have been exhausted.
11243	Converts data to a string representation with specified delimiter and null value.
11244	Convert string with optional k, M, G, T multiplier to float
11245	Convert string with gains of individual amplification elements to dict
11246	Convert string with SoapySDR device settings to dict.
11247	Wrap text to terminal width with default indentation
11248	Return detected SoapySDR devices
11249	Set center frequency and clear averaged PSD data.
11250	Return freqs and averaged PSD for given center frequency
11251	Wait for all PSD threads to finish and return result
11252	Compute PSD from samples and update average for given center frequency.
11253	Read data from file-like object.
11254	Write data to file-like object.
11255	Submit a callable to be executed with the given arguments.Count maximum reached work queue size in ThreadPoolExecutor.max_queue_size_reached.
11256	Converts integration time to number of repeats.
11257	Generate list of frequencies for frequency hopping
11258	Create buffer for reading samples. Calculates optimal buffer size and repeats based on given parameters and device sample rate. Logs relevant information about the buffer size and repeats.
11259	Prepare samples buffer and start streaming samples from device
11260	Stops streaming samples from device and deletes samples buffer.
11261	Tune to specified center frequency and compute Power Spectral Density.
11262	Sweep spectrum using frequency hopping.
11263	Set the I2C address for the device.
11264	Forcing to run cmake
11265	Return a set of datetimes after filtering the input datetimes based on the specified number of units before the current time.
11266	Set datetime to resolution of days
11267	Round datetime to nearest week, using specified first weekday.
11268	Return a set of datetimes that should be kept from the given ``datetimes`` based on specified time intervals.
11269	Return a set of datetimes that should be deleted, excluding those kept based on specified time conditions.
11270	Return a set of dates to keep based on specified intervals and conditions.
11271	Return set of date that should be deleted, out of ``dates``.
11272	Returns an SPI control byte. The MCP23S17 is a slave SPI device. The control byte consists of the hardware address and the read/write command.
11273	Returns the bit value specified from the address.
11274	Writes the value given to the bit in the address specified.
11275	Return the lowest bit number from a given bit pattern. Returns None if no bits are set.
11276	Waits for a port event and places onto the event queue.
11277	Waits for events on the event queue and calls the registered functions.
11278	Bring the interrupt pin on the GPIO into Linux userspace.
11279	Set the interrupt edge on the userspace GPIO pin.
11280	Wait until a file exists.
11281	Registers a pin number and direction to a callback function.
11282	De-registers callback functions for a given pin number and direction. If no parameters are provided, all functions are de-registered.
11283	Enables GPIO interrupts.
11284	Sends bytes via the SPI bus and returns the bytes from the SPI device.
11285	Re-implement code from crispy_forms to render form errors in crispy-forms style.
11286	Find tab fields listed as invalid
11287	Render the link for the tab-pane with optional parameters.
11288	Get package version from installed distribution or configuration file if not installed
11289	Pass template pack argument
11290	Check the status of the incoming response, raise exception if status is not 200.
11291	Makes a GET request with specified params and returns the response.
11292	Requests direct download link for a file using a ticket and optional captcha response.
11293	Makes a request to prepare for file upload.
11294	This interface is used to upload a file to a specified folder ID with an optional SHA-1 hash for verification.
11295	Upload a file remotely to openload.co.
11296	Checks status of remote file uploads.
11297	Request a list of files and folders in specified folder. If no folder_id is provided, the "Home" folder will be listed. Returns a dictionary containing "folders" and "files" keys.
11298	Shows running file conversions by folder. If folder_id is not provided, "Home" folder is used. Returns a list of dictionaries representing file conversion info.
11299	Calculate the relative humidity using temperature and dewpoint
11300	Calculate the dew point in degrees F using the formula from weatherwise.org.
11301	Perform HTTP session to transmit defined weather values.
11302	Calculate CRC value from raw serial data using a table.
11303	Perform CRC check on raw serial data, return true if valid.
11304	Unpack packed storm date field and return 'YYYY-MM-DD' string
11305	Determine if weather station returns Rev.B archives based on 'RecType' field in records.
11306	Sends wakeup command to device to exit standby mode, raising exception if unsuccessful after 3 attempts.
11307	Sends a command followed by ACK/OK response, retries up to 3 times.
11308	issue a command to read the archive records after a known time stamp.
11309	Get newest archive record from device. Return None if no new records.
11310	read and parse a set of data read from the console after the data is parsed it is available in the fields variable
11311	Main execution loop for weather station. Query weather data, sanity check temp, get wind gust, and upload to online services in specified order.
11312	Setup system logging with options for quiet and debug verbosity.
11313	use values in opts data to generate instances of publication services.
11314	Filter gust data above threshold and within reporting window; decrement count or reset value accordingly.
11315	Define weather data parameters. Only set parameters will be included. Unknown keyword arguments are ignored.
11316	Stores keyword arguments to be written to an output file.
11317	Writes output file
11318	Transition a requirement to user-only while passing the current request context internally.
11319	Initializes the Flask-Allows object against the provided application.
11320	Checks if the provided or current identity meets each requirement.
11321	Binds an override to the current context, optionally using the current overrides in conjunction with this override. If use_parent is true, creates a new override from parent and child overrides.
11322	Pops the latest override context. Raises RuntimeError if popped incorrectly.
11323	Allows temporarily pushing an override context, yields the new context into the following block.
11324	Binds an additional to the current context, optionally use the current additionals in conjunction with this additional. If use_parent is true, a new additional is created from the parent and child additionals.
11325	Pops the latest additional context and ensures it was pushed by the same manager.
11326	Allows temporarily pushing an additional context. Yields the new context into the following block.
11327	Append a number to duplicate field names to make them unique.
11328	Generate string showing updates after executing Cypher query
11329	Generates a dictionary with safe keys and values to pass onto Neo4j
11330	Executes a query and returns raw data, a ResultSet, a Pandas DataFrame, or a NetworkX graph.
11331	Returns a Pandas DataFrame instance built from the result set.
11332	Constructs a NetworkX multi-graph from a result set, optionally directed.
11333	Generate a pylab pie chart from the result set.
11334	Plot data from a result set using matplotlib.
11335	Generate a bar plot from the result set using matplotlib.
11336	Generates results in comma-separated form. Writes to a file if provided, otherwise returns as a string.
11337	Re-implements the permission_required decorator, honoring settings. If DASHBOARD_REQUIRE_LOGIN is False, it always returns True; otherwise, it checks for the permission and handles login or raising an exception as needed.
11338	Adds 'is_rendered' to the context and includes the widget's context data.
11339	Return the widgets sorted by position.
11340	Returns all widgets that need an update.
11341	Registers a widget, ensuring it inherits from DashboardWidgetBase and has a unique name.
11342	Unregisters the given widget.
11343	Gets or creates the last update object for this widget
11344	Returns the setting for this widget from the database.
11345	Saves the setting value into the database.
11346	Checks if an update is needed by comparing the time since the last update with the ``update_interval``.
11347	Create a spark bolt array from a local array
11348	Create a Spark bolt array of ones.
11349	Join two bolt arrays together, at least one of which is in spark.
11350	Check arguments for Spark array construction consistency.
11351	Format target axes given an array shape.
11352	Wraps an existing numpy constructor in a parallelized construction.
11353	Transpose and reshape array so that specified axes are iterated over.
11354	Converts a BoltArrayLocal into a BoltArraySpark.
11355	Converts a BoltArrayLocal into an RDD.
11356	Make an intermediate RDD where all records are combined into a list of keys and a larger ndarray along a new 0th dimension.
11357	Apply a function to each subarray
11358	Split values of distributed array into chunks and redistribute the data accordingly.
11359	Apply an array -> array function on each subarray, ensuring the shape of unchunked dimensions remains unchanged.
11360	Apply generic function to each subarray, resulting in BoltArraySpark with object dtype and block indices.
11361	Identify a plan for chunking values along each dimension. Generates an ndarray with the size of chunks in each dimension. If provided, will estimate chunks for only a subset of axes, leaving all others to the full size of the axis.
11362	Remove padding from chunks along specified axes.
11363	Obtain number of chunks for the given dimensions and chunk sizes.
11364	Obtain slices for the given dimensions, padding, and chunks
11365	Create a binary mask where specified indices are set to True and the rest are False.
11366	Repartitions the underlying RDD to a specified number of partitions.
11367	Aggregates records of a distributed array.
11368	Align spark bolt array axes for iteration, ensures valid axes, swaps key/value axes for functional operators
11369	Return the first element of an array
11370	Compute a statistic over an axis.
11371	Calculate the mean of the array over the specified axis.
11372	Return the variance of the array over the given axis.
11373	Return the standard deviation of the array over the given axis.
11374	Compute the sum of the array over the given axis.
11375	Return the maximum of the array over the given axis.
11376	Compute the minimum value over a specified axis with an option to keep dimensions.
11377	Breaks a distributed array into subarrays of specified chunk sizes along each dimension.
11378	Swap axes from keys to values in a Spark bolt array, moving data between key and value arrays.
11379	Return an array with the axes transposed.
11380	Interchange two axes of the array.
11381	Return an array with the same data but a new shape. Supports reshaping the keys, values, or both independently.
11382	Check if requested reshape can be broken into independent reshapes on keys and values. If it can, returns index separating keys from values, otherwise returns -1
11383	Remove one or more single-dimensional axes from the array.
11384	Cast the array to a specified type.
11385	Clip values above and below.
11386	Returns the contents as a local array. Will likely cause memory problems for large objects.
11387	Coerce singletons and lists to tuples.
11388	Coerce a list of arguments to a tuple.
11389	Checks if a list of axes are contained within an array shape.
11390	Test that arrays a and b are close and match in shape.
11391	Flatten lists of indices and ensure bounded by a known dim.
11392	Force a slice to have defined start, stop, and step from a known dim. Adjusts negative indices and handles overflow.
11393	Check if a proposed tuple of axes is a valid permutation of an old set of axes. Validates length, axis repetition, and bounds.
11394	Check if proposed axes tuple is a valid reshape of old axes by ensuring they can be factored, preserving the total size.
11395	Rebuild an original array from chunks that have been split along each axis at multiple locations.
11396	Expand dimensions by iteratively appending empty axes.
11397	Count and index RDD elements.
11398	Append routed docstrings to the decorated function.
11399	Use arguments to route constructor. Applies a series of checks on arguments to identify constructor, starting with known keyword arguments, and then applying constructor-specific checks
11400	Reshape just the keys of a BoltArraySpark, returning a new BoltArraySpark.
11401	Transpose just the keys of a BoltArraySpark, returning a new BoltArraySpark.
11402	Reshape the values of a BoltArraySpark into a new shape, returning a new BoltArraySpark.
11403	Transpose just the values of a BoltArraySpark, returning a new BoltArraySpark.
11404	Create a local bolt array of ones.
11405	Create a local bolt array of zeros.
11406	Join a sequence of arrays together. concatenate(arrays, axis=0)
11407	Calculate the log-likelihood for a given data set, xmin value, and alpha scaling parameter.
11408	Return the most likely alpha for the data given an xmin
11409	Estimate the scaling parameter alpha in the discrete case using Maximum Likelihood Estimation.
11410	Estimate the most likely value of alpha using the maximum L statistic.
11411	Use the maximum likelihood to determine the most likely value of alpha
11412	Plot the power-law-predicted value on the Y-axis against the real values along the X-axis for diagnostic fit quality analysis.
11413	Fit and analyze lognormal distribution parameters using maximum likelihood estimation.
11414	Sanitizes HTML, removing not allowed tags and attributes.
11415	Configure Yandex Metrika analytics counter.
11416	Generates a list of tags identifying those previously selected.Returns a list of tuples of the form (<tag name>, <CSS class name>).
11417	Calculate md5 fingerprint.
11418	Calculate the SHA-256 fingerprint and encode it in base64, replacing '=' with an empty string.
11419	Calculates sha512 fingerprint.
11420	Converts bytes to a signed integer using two's complement.
11421	Decode base64 coded part of the key.
11422	Parse ssh options string.
11423	Parses ssh-rsa public keys.
11424	Parses ssh-dsa public keys.
11425	Parses ecdsa-sha public keys.
11426	Parses ed25516 keys and validates their length.
11427	Validates SSH public key. Throws exception for invalid keys. Returns None and populates key_type, bits, and bits fields. Handles RSA, DSA, and ECDSA key formats.
11428	Performs a step to establish the context as an initiator. This method should be called in a loop and fed input tokens from the acceptor, and its output tokens should be sent to the acceptor, until this context's :attr:`established` attribute is True.
11429	Performs a step to establish the context as an acceptor. This method needs to be called in a loop, receiving input tokens from the initiator and sending output tokens until the context is established.
11430	Return the set of mechanisms supported by the credential.
11431	Stores this credential into a credential store, either default or specified by mechanism-specific key-value pairs.
11432	Imports and runs setup function with given properties.
11433	Imports and returns a setup function. If use_markdown_readme is set, README.md is added to setuptools READMES list. If use_stdeb is set on a Debian based system, the stdeb module is imported. If use_distribute is set, distribute_setup.py is imported.
11434	Returns a file handle for recording audio.
11435	Returns HTML5 Boilerplate CSS file.
11436	Returns Normalize CSS file. Included in HTML5 Boilerplate.
11437	Returns Font Awesome CSS file. If `TEMPLATE_DEBUG` is `True`, returns the full file; otherwise, returns the minified file.
11438	Returns Modernizr JavaScript file based on version number and debug mode.
11439	Returns jQuery JavaScript file based on version number and debug settings.
11440	Returns the jQuery UI plugin file according to version number.
11441	Returns the jQuery DataTables plugin file based on version and settings, either full or minified.
11442	Returns the jQuery DataTables CSS file according to version number.
11443	Returns the jQuery DataTables ThemeRoller CSS file according to version number.
11444	Return the jQuery Dynamic Formset plugin file based on version number and debug settings
11445	Returns the jQuery ScrollTo plugin file based on the version number.
11446	Returns the jQuery Smooth Scroll plugin file according to version number.
11447	Returns Twitter Bootstrap CSS file
11448	Returns Google Analytics asynchronous snippet. Uses settings for domain and cross-domain tracking.
11449	Renders a CodeMirrorTextarea by calling the parent render method and appending a script to initialize CodeMirror on the textarea element.
11450	Generate auth tokens tied to user and specified purpose. Expire at midnight on the minute of now + minutes_valid.
11451	Return the specific time an auth_hash will expire.
11452	Return login token info for given user.
11453	Serialize user as per Meteor accounts serialization.
11454	De-serialize user profile fields into concrete model fields.
11455	Update user data.
11456	Consistent authentication failure message sent to avoid providing attackers with valuable information.
11457	Resolve and validate auth token Returns user object
11458	Check request, return False if using SSL or local connection.
11459	Retrieve username from user selector.
11460	Register a new user account.
11461	Login a user and set up subscription.
11462	Logout a user.
11463	Login with resume token or password.
11464	Authenticate using credentials supplied in params. If the password is correct and the user is active, the user is logged in. Otherwise, the authentication fails.
11465	Login with existing resume token. Either the token is valid and the user is logged in, or the token is invalid and a non-specific ValueError("Login failed.") exception is raised.
11466	Changes the user's password if the old password is correct and saves the new password. Returns a dictionary indicating whether the password change was successful.
11467	Request password reset email.
11468	Resets password using token received in email then logs user in. Returns user ID.
11469	Recursive dict merge.
11470	Read encoded contents from specified path or return default.
11471	Get Alea ID for given object.
11472	Return Alea ID mapping for all given ids of specified model.
11473	Return an object ID for the given meteor_id.
11474	Retrieves object IDs for given meteor IDs.
11475	Return an object for the given meteor_id.
11476	Set default value for AleaIdField.
11477	Unset default value for AleaIdField.
11478	Truncate tables in a specified app.
11479	Apply forward changes using schema_editor.
11480	Apply any reverse changes using schema_editor
11481	Set command option defaults. Initialize meteor, meteor_debug, build_lib, package_dir, meteor_builds, no_prune_npm, and inplace attributes.
11482	Updates command options. Fetches necessary information for installing pure Python modules from the 'install' command.
11483	Builds a Meteor application by executing a command line with specified arguments, optionally pruning npm build directory.
11484	Convert a UNIX-style path into platform specific directory spec.
11485	Seed internal state from supplied values. If no values provided, use secure seed to avoid hash collisions.
11486	Return internal state, useful for testing.
11487	Return string of `length` elements chosen from `alphabet`
11488	Decorator to mark a method as an API endpoint for later registration.
11489	Iterator over all API endpoint names and callbacks.
11490	Clear out cache for api_path_map.
11491	Debug print name and val.
11492	Validate function arguments against expected parameters.
11493	Handle new websocket connection and initialize necessary variables.
11494	Handle closing of websocket connection.
11495	Process a message received from remote.
11496	Yield DDP messages from a raw WebSocket message.
11497	Process a single DDP message.
11498	Dispatches a message to an appropriate handler based on the message type.
11499	Handle DDP connect request.
11500	Handle DDP ping with optional id.
11501	Handling DDP subscription.
11502	Handles DDP unsub requests.
11503	Handles a DDP method and updates the API with the method name, parameters, and ID.
11504	Inform client that WebSocket service is available.
11505	Spawn greenlets for handling websockets and PostgreSQL calls.
11506	Serve files over HTTP(S) with Django options.
11507	Print formatted msg if verbosity set at 1 or above.
11508	Stop all green threads.
11509	Run DDP greenlets.
11510	Spawn sub tasks, wait for stop signal, handle database connection, and listen for database events.
11511	Polls a DB socket, handles async tasks, and processes incoming notifications.
11512	Patch threading and psycopg2 modules for green threads.
11513	Generates a random ID, optionally using a namespace based on the given name
11514	Autodiscover `ddp` submodules from `settings.INSTALLED_APPS`.
11515	Return an error dict for self.args and kwargs.
11516	Gets an attribute, creating it if required using the specified factory.
11517	Emit a formatted log record via DDP.
11518	Middleware which selects a renderer for a request and renders handler data to an `aiohttp.web.Response`.
11519	Context manager for adding multiple routes to a web application from a given module or specified handler functions.
11520	Registers routes for a resource instance.
11521	Runs an `aiohttp.web.Application` using gunicorn.
11522	Sends a push notification to this device via GCM.
11523	Send an APNS notification to one or more registration_ids.
11524	Queries the APNS server for id's that are no longer active since the last fetch
11525	Send a single gcm notification.
11526	Send bulk GCM notifications
11527	Sends a json GCM message
11528	Sends a GCM message with the given content type.
11529	Return the instance of the given module location.
11530	Fast forward selection algorithm for reducing the number of scenarios by selecting the most representative ones based on proximity and probability.
11531	Creates a Giphy API wrapper with the given API key and then calls the search method, returning a generator.
11532	Create a Giphy API wrapper and call the translate method.
11533	Creates a Giphy API wrapper and retrieves trending GIFs with the given limit and rating.
11534	Retrieves a GIF by ID using a provided API key.
11535	Shorthand for creating a Giphy API wrapper with the given API key and then calling the screensaver method.
11536	Upload a file to Giphy with associated tags and optional username and API key.
11537	Convert integer values in image type data from strings to integers where applicable.
11538	Make an API request to Giphy and handle the response.
11539	Retrieve a single image that represents a translation of a term or phrase into an animated gif. Punctuation is ignored. By default, this will perform a `term` translation. If you want to translate by phrase, use the `phrase` keyword argument.
11540	Retrieve GIFs currently trending online. Data mirrors The Hot 100 list on Giphy.
11541	Retrieves a specific gif from giphy based on a unique ID, raises an exception if not found and strict mode is enabled.
11542	Uploads a gif from the filesystem to Giphy.
11543	Prepare extension element for access control settings.
11544	Authenticates the user and sets the GData Auth token. All parameters are optional, using settings if not provided. Raises ApiError on bad authentication.
11545	Browser-based video upload. Creates metadata and initiates upload process. Authentication required.
11546	Checks the video upload status
11547	Update the video with new details if authenticated.
11548	Deletes a video using the provided video_id and requires authentication.
11549	Check video availability and return a JSON response.
11550	Displays a video in an embed player based on its availability.
11551	List videos of a user, showing currently logged-in user's videos if username is not set.
11552	Uploads video to server and then sends to YouTube. Returns JSON if `only_data` is set, otherwise redirects to video page.
11553	Displays an upload form with parameters like title, description, and keywords. Creates a YouTube upload url and token, and uses them in the form. Handles API errors and redirects if something goes wrong.
11554	The upload result page. Redirects to the next page based on the upload status. If successful, saves the video data and sends a signal. If failed, displays an error message and redirects to the upload page.
11555	Removes the video from YouTube and from the database. Requires POST.
11556	Connects to Youtube Api and retrieves the video entry object.
11557	Syncronize the video information on db with the video on Youtube
11558	Deletes the video from YouTube
11559	Generic method for updating metadata for a resource.
11560	Update a metadata field for a resource.
11561	Generic method for updating resource details.
11562	Load a list of trees from a Newick formatted string.
11563	Serialize a list of trees in Newick format.
11564	Load a list of trees from an open Newick formatted file.
11565	Load a list of trees from a Newick formatted file.
11566	Parse a Newick formatted string into a `Node` object.
11567	Create a new Node object
11568	Represent Node in Newick format
11569	Return a unicode string representing a tree in ASCII art fashion.
11570	Gets the specified node by name or None if name does not exist in tree.
11571	Remove nodes in the specified list or not in the list, based on the inverse parameter.
11572	Insert additional nodes with length=0 into the subtree to make it a fully resolved binary tree.
11573	Set the name of all non-leaf nodes in the subtree to None.
11574	Set the name of all leaf nodes in the subtree to None.
11575	Decorator that protects methods with HTTP authentication
11576	Clear JS-style comments like // and /**/ in json_str.
11577	Raises an exception if the given app setting is not defined.
11578	Get the value of an argument by its name with an optional default. Raises an error if required and missing. Returns the last value if argument appears multiple times. Result is always unicode.
11579	Returns a list of arguments with the given name, decoding and stripping values as needed.
11580	Catches exceptions from the wrapped function. Now unnecessary since Tornado 1.1.
11581	Gets the value of the cookie with the given name, else default.
11582	Deletes the cookie with the given name.
11583	Returns authentication URL for service with optional callback URI and attribute requests.
11584	Fetch the authenticated user and access token on callback.
11585	Returns the OAuth parameters as a dict for the given request.
11586	Redirects user for Google OAuth authentication and authorization.
11587	Makes a Facebook API REST request.
11588	Handles the login for the Facebook user, returning a user object.
11589	Concatenates a URL with a dictionary of arguments.
11590	Parse a Content-type like header. Return the main content-type and a dictionary of options.
11591	Adds a new value for the given key.
11592	Returns all values for the given header as a list.
11593	Updates the dictionary with a single header line.
11594	Returns a dictionary from HTTP header text.
11595	Converts a name to Http-Header-Case.
11596	Converts a string to a byte string, ensuring UTF-8 encoding.
11597	Converts a string argument to a unicode string. If already unicode or None, returns unchanged; otherwise decodes byte string as utf8.
11598	Converts a string argument to a subclass of basestring, handling byte and unicode strings in python2.
11599	Convert byte strings to unicode in a nested data structure.
11600	Checks for unique keyword arguments among installed plugins and verifies metadata availability.
11601	recursive generator for all subclasses of a given class
11602	Select policy based on matching strategy, origin, and request method.
11603	Occupancy of each grid point for given array of points
11604	Write a GRO file with the given title, atoms, and box.
11605	Writes a PDB file containing a title, box, and atoms
11606	Determine molecule numbers based on total, absolute, and relative values
11607	Adapt the size of the box to accommodate the lipids.
11608	Write a basic TOP file with either the full topology or a simplified version to stderr.
11609	Returns a stream for a given resource file in the module.
11610	Store and append messages to a user's cache.
11611	Send a message to a group of users.
11612	Fetch messages for given user. Returns None if no such message exists.
11613	Check for messages for the authenticated user and call the messages API if messages exist.
11614	Checks the config.json file for default settings and auth values.
11615	Verifies the profile name exists in the config.json file.
11616	Updates message attributes with values from a configuration if the attributes are None.
11617	Retrieve auth from profile configuration and set in msg.auth.
11618	Updates the profile's config entry with values set in each attr by the user. Overwrites existing values.
11619	Updates the profile's auth entry with values set by the user, overwriting existing values.
11620	Create a profile for the given message type. Prompt user for profile name and data, then configure the profile.
11621	Display the required items needed to configure a profile for the given message type
11622	Get settings from user and return dict
11623	Get the required 'auth' from the user and return as a dict.
11624	Create the profile entry with specified message type, profile name, data, and auth parameters.
11625	Write the settings into the data portion of the cfg.
11626	Write the settings into the auth portion of the cfg.
11627	Add attachments to a message.
11628	Send the message via HTTP POST, default is JSON-encoded.
11629	Constructs a message class and sends the message.Defaults to sending synchronously. Set send_async=True to send asynchronously.
11630	Returns the specified message instance based on msg_type
11631	A credential property factory for each message class that will set private attributes and return obfuscated credentials when requested.
11632	Create a property with custom getter and setter for input validation.
11633	Base function to validate input, dispatched via message type.
11634	Twilio input validator function.
11635	Validate SlackPost input attributes.
11636	WhatsApp input validator function.
11637	Creates a running coroutine to send message instances using a futures executor.
11638	Add a message to the futures executor.
11639	Reads message body from a file specified in the input dictionary.
11640	Gets rid of args with value of None, as well as select keys.
11641	Do some final preprocessing and send the message.
11642	Lookup chat_id of username if chat_id is unknown via API call.
11643	send via HTTP Post.
11644	Start sending the message and attachments.
11645	Return SMTP servername guess from email address.
11646	Construct an email message by assembling headers, body, and attachments.
11647	Adds email header information to the message.
11648	Add body content of email.
11649	Add required attachments.
11650	Start session with email server.
11651	Get an SMTP session with SSL.
11652	Get an SMTP session with TLS.
11653	Send an email message.
11654	Save metadata tags.
11655	Releases renderer resources associated with this image.
11656	Get an image that refers to a specified rectangular region within this image, without copying the data. The image region can be rendered into, affecting the original image.
11657	Validate keys and values
11658	Removes all keys from the comment.
11659	Return a string representation of the data.
11660	Read the chunks data
11661	Removes the chunk from the file. Adjusts parent chunk size if necessary.
11662	Updates the size of a chunk and adjusts the parent chunk's size accordingly.
11663	Inserts a new chunk at the end of an IFF file.
11664	Saves ID3v2 data to AIFF file.
11665	Removes the ID3 chunk from the AIFF file.
11666	Parse a C source file and add its blocks to the processor's list.
11667	Process a normal line and check if it starts a new block.
11668	Adds the current accumulated lines and creates a new block.
11669	Render a string with a given font, with specified alignment and wrapping options (not yet implemented).
11670	Parse ISO 8601 time string and return timezone aware (UTC) datetime.datetime instance.
11671	convert a series of simple words into some HTML text
11672	analyze a simple word to detect cross-references and styling
11673	convert words of a paragraph into tagged HTML text, handle xrefs
11674	Convert a code sequence to HTML
11675	Convert a field's content into valid HTML.
11676	Saves the metadata to the given filename.
11677	Update all parent atoms with the new size.
11678	Start running the game, set up event handlers, and enter the main event loop. If a game is already running, replace it.
11679	Registers a controller mapping associating vendor ID and product ID. Replaces existing mapping if the controller is not yet connected.
11680	Find a mapping that can apply to the given controller. Returns None if unsuccessful.
11681	Register a text key with a getter, setter, and deleter.
11682	This method is used to generate an HMAC signature for a given string using SHA256 and Base64 encoding.
11683	Determine the headers to send along with the request.
11684	Method for sending requests with different HTTP methods and handling the response body.
11685	Sends a GET request to the Route53 endpoint and returns the response body
11686	Sends the POST request to the Route53 endpoint.
11687	Sends a DELETE request to the Route53 endpoint and returns the response body.
11688	Create an APEv2 tag value factory based on the kind and value provided.
11689	Send HTTP request to Route53 API and parse response with lxml.
11690	Function to handle autopaginating API calls by looping through record sets in the API response.
11691	Lists all hosted zones associated with the connection's account using pagination.
11692	Creates a new hosted zone and returns a tuple containing the hosted zone instance and details of the API request.
11693	Fetches a hosted zone's resource record sets by Zone ID, filtered by type and identifier. Uses pagination with a default of 100 records per chunk. Returns a generator of ResourceRecordSet instances.
11694	POST ChangeSet to Route53 API.
11695	Draws an image. The image's top-left corner is drawn at (x1, y1), and its lower-right corner at (x2, y2). If x2 and y2 are omitted, the image is rendered at its native resolution.
11696	Draws a rectangular region of an image at specified coordinates.
11697	Calculate the total frame size based on header and packet lengths.
11698	Replace old pages with new pages within fileobj, adjusting sequence, serial, and flags.
11699	Finds the last page of a stream with a given serial number, or the last page with eos set, whichever comes first. For non-multiplexed streams, it quickly checks the last 64k bytes. For multiplexed streams, it reads the entire file. Returns the last matching page if found, otherwise returns None.
11700	Sets the current section during parsing.
11701	Add a new markup section.
11702	process a block content and return a list of DocMarkup objects corresponding to it.
11703	return the DocMarkup corresponding to a given tag in a block
11704	Forms an XML string to create a new hosted zone in Route53.
11705	Locks a file object safely and returns whether the lock was successful or raises an exception.
11706	Insert size bytes of empty space starting at offset in the file object
11707	Deletes size bytes from file at offset using mmap if possible, otherwise uses slower method.
11708	Convert a basestring to a valid UTF-8 str.
11709	Adds a change to this change set.
11710	Parses a ChangeInfo tag. Converts it into a dictionary representation.
11711	Calculates the width of the given string in this font.
11712	Determines whether this record set has been modified since the last retrieval or save. Returns ``True`` if modified, ``False`` otherwise.
11713	Delete this record set.
11714	Saves any changes to this record set.
11715	Parse an ID3v1 tag and convert its fields into ID3v2.4 frames.
11716	Convert a dict of ID3v2.4 frames into an ID3v1.1 tag string.
11717	Read a certain number of bytes from the source file.
11718	Delete all tags of a given kind; see getall.
11719	Deprecated; use the add method.
11720	Updates common to v23 and v24. Removes "(xx)Foobr" from TCON genres. Adjusts APIC frames for ID3v2.2. Removes LNK frames due to incompatibility.
11721	Converts older tags into an ID3v2.4 tag by updating old ID3v2 frames and handling specific cases.
11722	Release all resources associated with the sound.
11723	Play the sound as a `one-shot`. Adjust gain, pan, and pitch as needed.
11724	Sets loop points within the sound.
11725	Return the list of glyph names and their unicode values
11726	Removes all glyph names from `alist` that are present in `filter`.
11727	This function dumps a given encoding list into a static unsigned short array in C.
11728	Dumps a given encoding as a C array.
11729	Generates a PostScript file containing glyph names and their corresponding Unicode values.
11730	Checks if a given file exists.
11731	builds a list of input files from command-line arguments
11732	Parse and instantiate HostedZone object from XML response
11733	Parses a DelegationSet tag and populates the nameservers in the HostedZone instance.
11734	Render metadata block as a byte string.
11735	Consolidate FLAC padding metadata blocks.
11736	Remove Vorbis comments from a file. If no filename is given, the one most recently loaded is used.
11737	Saves metadata blocks to a file, automatically adjusting padding and optionally deleting ID3 tags.
11738	Parses an Alias tag beneath a ResourceRecordSet, spitting out the two values found within.
11739	Parses the values from ResourceRecords tags on most rrset types and returns a list of resource record strings.
11740	Parse a ResourceRecordSet XML element and return the appropriate ResourceRecordSet object.
11741	Deletes a hosted zone, optionally forcing deletion even if record sets exist. Returns change info.
11742	Convenience method for creating ResourceRecordSets with repetitive calls saved.
11743	Creates and returns an A record attached to this hosted zone.
11744	Creates an AAAA record attached to this hosted zone.
11745	Creates a CNAME record attached to this hosted zone. Accepts parameters for the record's name, values, TTL, weight, region, and set identifier. Returns a tuple containing the newly created CNAMEResourceRecordSet instance and change information.
11746	Creates a MX record attached to this hosted zone.
11747	Creates a NS record attached to this hosted zone.
11748	Creates a PTR record attached to this hosted zone.
11749	Creates a SPF record attached to a hosted zone.
11750	Creates an SRV record attached to this hosted zone.
11751	Creates a TXT record attached to this hosted zone.
11752	Register a user-defined text frame key.
11753	Pull change values from ResourceRecordSet for deletions or creations.
11754	Creates an XML element for a DNS change.
11755	Forms an XML string for changing resource record sets in Route53.
11756	Initiate log file with timestamp and include NanoGUI and NanoPlot versions.
11757	Gets an item by its alias.
11758	Convert dictionary into hashable tuple by sorting items.
11759	Joins a map structure into HTML attributes. Returns a 2-tuple template and ordered values.
11760	Initialize a Flask app with this extension, connecting signals and adding a template global.
11761	Calls the initializers of all bound navigation bars.
11762	Bind a navigation bar into this extension instance.
11763	The arguments which will be passed to ``url_for``.
11764	Get final URL of navigation item.
11765	Checks if the current request has the same endpoint and arguments as the item.
11766	Does basic Metric option validation.
11767	Fetches a statistics based on the given class name. Does a look-up in the gadgets' registered statistics to find the specified one.
11768	Calculate statistics associated with registered gadgets.
11769	Auto-discover INSTALLED_APPS gadgets.py modules and fail silently when not present. This forces an import on them to register any gadgets they may want.
11770	Return a CSV dump of specified metric's counts and cumulative counts.
11771	Command handler for the "metrics" command.
11772	Returns the GET array's contents for the specified variable.
11773	Tries to extract a boolean variable from the specified request.
11774	Rotate through a list of Geckoboard colours and return the next one in the sequence.
11775	Returns default GET parameters for a particular Geckoboard view request.
11776	Returns a number widget for the specified metric's cumulative total.
11777	Searches the GET variables for metric UIDs, and displays them in a RAG widget.
11778	Returns the data for a line chart for the specified metric.
11779	Get latest count for a specific metric and return it along with min and max values.
11780	Returns a funnel chart for the metrics specified in the GET variables.
11781	Returns all of the active statistics for the gadgets currently registered.
11782	Registers a gadget object. Raises AlreadyRegistered if the gadget is already registered.
11783	Get the context for this view.
11784	Print error and stop command
11785	Decorator for validating data using a schema
11786	Get a multi-line string as input
11787	Get a list of strings as input
11788	Get an output file name as input.
11789	Gets schedule information for a team-season.
11790	Returns the team ID of the winning team. Returns NaN if a tie.
11791	Returns the year ID of the season in which this game took place
11792	Returns a DataFrame of starters from PFR tables.
11793	Get the playing surface type from game info table
11794	Gets information relating to the opening coin toss. Returns a dictionary containing the team that won the toss and whether they deferred it.
11795	Returns a dictionary of weather-related information from a game's document.
11796	Gets a dictionary of ref positions and the ref IDs for that game.
11797	Retrieve and concatenate game schedule information from different months, then subset based on the specified month.
11798	Returns a DataFrame containing standings information.
11799	Helper function for stats tables on season pages. Returns a DataFrame.
11800	Extract ROY voting data from a webpage and return as a DataFrame.
11801	Returns the linescore for the game as a DataFrame.
11802	Returns the year ID of the season in which this game took place.
11803	Fetch player stats from the game's tables (either basic or advanced).
11804	Decorator to switch to given directory before executing function, and then returning to original directory.
11805	Cache the HTML returned by the specified function `func`. Caches it in the user cache determined by the appdirs package.
11806	Returns a unique identifier for a class instantiation.
11807	Memoize functions by caching results based on arguments.
11808	Returns age of player on a given date
11809	Get a stats table from the player page; helper function that does the work for per-game, per-100-poss, etc. stats.
11810	Returns a DataFrame of per-game box score stats.
11811	Returns a DataFrame of total box score statistics by season.
11812	Returns a DataFrame of per-36-minutes stats.
11813	Returns a DataFrame of per-100-possession stats.
11814	Returns a DataFrame of advanced stats.
11815	Returns a DataFrame of shooting stats.
11816	Returns a DataFrame of play-by-play stats.
11817	Get a player's basic game-by-game stats for a season.
11818	Retrieves and deletes a session variable
11819	Expand details column of the given dataframe and returns the resulting DataFrame.
11820	Add 'team' and 'opp' columns to the features by iterating through the rows.
11821	Adds team features to a DataFrame based on possession and game outcome.
11822	Calculate the initial win probability of a game based on its Vegas line.
11823	Extract yearly passing stats for a player and return as a Pandas DataFrame.
11824	Template for simple award functions that list years, such as pro bowls and first-team all pro. Returns list of years for the award.
11825	Retrieve team's full name from the given team ID by parsing HTML content.
11826	Retrieves list of BoxScore objects based on the given year.
11827	Returns a PyQuery object containing the info from the meta div at the top of the team year page with the given keyword.
11828	Returns head coach data by game for a given year.
11829	Return a DataFrame with schedule information for the given year.
11830	Returns the coach ID for the team's OC in a given year.
11831	Returns the coach ID for the team's DC in a given year.
11832	Returns the ID for the stadium in which the team played in a given year.
11833	Returns the name of the offensive scheme the team ran in the given year.
11834	Returns the name of the defensive alignment the team ran in the given year.
11835	Returns a DataFrame of offensive team splits for a season.
11836	Fetching HTML with throttling and removing comments
11837	Flattens relative URLs within text of a table cell to IDs and returns the result.
11838	Converts a relative URL to a unique ID based on supported types.
11839	Converts keyword arguments to a query string for PSF.
11840	Main function for processes reading from an HDF5 file. Handles reading in chunks, wrapping around the dataset if cyclic, and using synchronization to ensure buffer order.
11841	Allows direct access to the buffer element. Blocks until there is room to write into the buffer. Returns a guard object.
11842	Allows direct access to the buffer element. Blocks until there is data that can be read. Returns a guard object that returns the buffer element.
11843	Close the queue, signalling that no more data can be put into the queue.
11844	Get a block of data from the node at path.
11845	Get the remainder elements that will not be read in direct queue access mode.
11846	Get a queue that allows direct access to the internal buffer. If the dataset is chunked, the block_size should be a multiple of the chunk size. By default, blocks are returned in on-disk order.
11847	Get a generator that yields rows from a dataset one at a time, including any remaining elements.
11848	Parse a stream and yield protobuf objects.
11849	Write protobuf message objects to a stream.
11850	Read a varint from file, parse it, and return the decoded integer.
11851	Generate a generator yielding protobuf object data from a file stream.
11852	Close the stream
11853	Write a group of one or more protobuf objects to the file and buffer them before flushing based on the buffer size.
11854	Write down buffer to the file.
11855	Returns joined game directory path relative to Steamapps. If the game is common, the path is "common/game_directory". If the game is for a specific user, the path is "username/game_directory". The directory is converted to lowercase on Windows or Cygwin.
11856	Emulate user interactions with text inputs using key-down and key-up events.
11857	Generate 2D fake fluorescence movie with parameters for sparsity, signal decay, noise, and more.
11858	Evaluate traits and return descriptions of false ones. Lazy evaluation for debugging.
11859	Waits until a condition returns a non-None value or raises a TimeoutException if the condition is not met within the timeout period.
11860	Waits until all traits are present in an element. Raises TimeoutException if traits are not present after timeout.
11861	Set a list of exceptions to be ignored in the wait loop.
11862	Executes the Main.Volume command and returns the result as an integer.
11863	Executes the main source command and returns the result as an integer.
11864	Send a command string to the amplifier and optionally read a reply.
11865	Returns the status of the device as a dictionary with keys 'volume', 'power', 'muted', and 'source'.
11866	Power the device off if it's not already off to avoid hangs.
11867	Power the device on if it is not already powered.
11868	Sets device volume level to an integer value between 0 and 200.
11869	Selects a source from the list of sources if the system is powered on and the new source is different.
11870	Deobfuscates a URL and returns an HttpResponse from the source view.
11871	Generate CRC-32 checksum, ensuring the result is within the int range.
11872	Obfuscate text, typically URLs.
11873	It will print the list of songs that can be downloaded
11874	Returns all hyperlinks found in the HTML content
11875	Determine if a song name is present based on HTML content. Returns true if artist or movie name, otherwise provides a download link.
11876	Parses a URL to find a song resource or a list of download options based on the presence of specific strings indicating audio quality.
11877	Generate a Google URL for searching a song on a specified website.
11878	Parse Google HTML response and return the first URL.
11879	Parse a song name and website to retrieve the URL for music file download.
11880	Download the HTML page specified by URL and return the HTML response.
11881	It will download file specified by url using requests module
11882	It will download file specified by url using wget utility of linux
11883	Lookup AQI database for station codes in a given city.
11884	Lookup observations by geo coordinates
11885	Decode AQICN observation response JSON into python object.
11886	Request station data for a specific station identified by code.
11887	Gets the list of logical paths used to search for an asset.
11888	Return the list of compilers used to build assets.
11889	Returns the MIME type of the asset, defaulting to 'application/octet-stream' if not found.
11890	Determines the MIME type of an asset based on its compilers.
11891	Find the asset's format extension by its compiler.
11892	Register a processor for a specific mimetype.
11893	Remove passed `processor` for passed `mimetype`. If processor for this MIME type does not found in the registry, nothing happens.
11894	Return the list of search paths built from registered finders with a ``paths`` property, useful for compilers.
11895	Register default compilers, preprocessors, and MIME types.
11896	Forces loading of IDA's Qt bindings, otherwise uses default PyQt5 or PySide.
11897	Returns the netnode used to store settings metadata in the current IDB.
11898	Adds a plugin name to the list of registered plugin names in the current IDB.
11899	Remove given plugin name from list of registered plugin names in current IDB.
11900	Import settings from the given file system path to given settings instance.
11901	Export the given settings to an Ini file.
11902	Fetch the IDASettings instance for the current plugin with directory scope.
11903	Enumerate the keys found at any scope for the current plugin.
11904	Return the response that should be used for any given exception
11905	Retrieve a given table for the given user.
11906	Returns a list of tables for the given user.
11907	Fetch packages and summary from Crates.io
11908	Extracts the identifier from an item depending on its type.
11909	Extracts the update time from an item and converts it to UNIX timestamp format.
11910	Get crate team owner
11911	Get crate user owners
11912	Get crate versions data
11913	Get crate version downloads
11914	This method retrieves the data for a specified crate.
11915	Get Crates.io summary
11916	Get crates in alphabetical order
11917	Get a crate by its ID.
11918	Get crate attribute
11919	Return the items from Crates.io API using pagination
11920	Fetch questions from the Kitsune url.
11921	Fetch questions from the Kitsune URL and yield a generator of items based on the category and offset.
11922	Retrieve questions from older to newer updated starting from given offset
11923	A method that fetches items from a ReMo URL for a given category, with an optional offset. Loopable.
11924	Extracts the update time from a ReMo item and converts it to a UNIX timestamp using a float value.
11925	Extracts the category from a ReMo item based on unique fields.
11926	Retrieve all items for category using pagination.
11927	Get buffer list this instance operates on.
11928	Return IO priority for this instance.
11929	Cancels all pending IO blocks. Waits until all non-cancellable IO blocks finish. De-initialises AIO context.
11930	Submit transfers and return the number of successfully submitted blocks.
11931	Cancel an IO block and return its event data or None if EINPROGRESS.
11932	Cancels all submitted IO blocks and returns the list of values from individual cancellations.
11933	Returns a list of event data from submitted IO blocks.
11934	A method that fetches events from the MozillaClub URL using the feed API REST. Loopable.
11935	Retrieve all cells from the spreadsheet.
11936	Parses a MozillaClub spreadsheet feed cells JSON, extracting events and handling invalid data.
11937	Get a list of export formats by type.
11938	Return default permission factory.
11939	Create a blueprint for Invenio-Records-UI. Install URL routes and error handler for tombstones.
11940	Create Werkzeug URL rule for a specific endpoint.
11941	Display record view by resolving PID, checking permissions, and calling view method.
11942	Send record_viewed signal and render template.
11943	Serialize record and render export template.
11944	Sends a Timer metric calculating the duration of execution for a provided callable.
11945	Close the socket to free system resources. After the socket is closed, further operations with socket will fail. Multiple calls to close will have no effect.
11946	Remove the client from the users of the socket. If there are no more clients, close automatically.
11947	Increment a Counter metric.
11948	Send a Timer metric with the specified duration in milliseconds.
11949	Calculates and sends a Timer metric representing the duration since a specified start time.
11950	Send a Gauge metric with the specified value.
11951	Send a GaugeDelta metric to change a Gauge by the specified value.
11952	Send a Set metric with the specified unique value
11953	Override parent method to buffer metric data instead of sending immediately.
11954	Return a batch client with same settings of the client.
11955	Return a client with same settings of the batch client
11956	Send buffered metrics in batch requests
11957	Create permission checker function based on record access status.
11958	Return a TCP batch client with the same settings as the TCP client.
11959	Send buffered metrics in batch requests over TCP
11960	Return a TCPClient with same settings of the batch TCP client.
11961	Creates a User with specified attributes and permissions.
11962	tries to convert a Python object into an OpenMath object Interpret function parameters and convert them into OMVariables Call the function with the appropriate OMVariables and convert the result Return an OMBinding object
11963	Converts a term into OpenMath, using either a converter or the interpretAsOpenMath method
11964	Converts OpenMath object to Python
11965	Convert Python object to OpenMath.
11966	Registers a conversion from Python to OpenMath
11967	Register a conversion from OpenMath to Python
11968	Used to initialize redis with app object
11969	Yield keys from choices, handling nested lists/tuples.
11970	Splits keyword arguments for Django models into model fields and their subfields.
11971	Register form field data function.
11972	Generate the lowest value using a function based on the provided instance or class.
11973	Given a form class and keyword arguments, returns a tuple of form data and files.
11974	Sometimes return None if field is not required
11975	Select a random choice from field.choices if it exists.
11976	Returns random value for DecimalField within specified constraints.
11977	Return random value for EmailField with specified min_length and max_length
11978	Return random value for DateField
11979	Return random value for DateTimeField
11980	Return random value for FloatField within specified min and max values and precision.
11981	Generate a random value for IntegerField within specified or default min/max values.
11982	Generates a random time value according to specified formats
11983	Return random value for ChoiceField
11984	Return random value for MultipleChoiceField choices.
11985	Return a random item from the first ten items of a queryset.
11986	Encodes an OpenMath element into a bytes representation.
11987	Deploys the app to PYPI.
11988	Deploys a version tag.
11989	Sometimes return None if field could be blank
11990	Evaluate an OpenMath symbol describing a global Python object
11991	Initialize an instance from a given state using the __setstate__ protocol or direct attribute assignment.
11992	Converts a list of OM objects into an OM object
11993	Converts a tuple of OM objects into an OM object.
11994	Decodes a PackBit encoded data.
11995	Encodes data using PackBits encoding.
11996	Implementation that treats floats more like decimals. Fixes binary rounding issues for accounting and finance-related software.
11997	Format a given number with comma-separated thousands and custom precision/decimal places. Localise by overriding the precision and thousand/decimal separators.
11998	Format a number into currency. If the number is a list, recursively format each item. Clean up the number, build options, check the format, and apply the appropriate format with currency symbol.
11999	Import a blosc array into a numpy array.
12000	Exports a numpy array to a blosc array.
12001	Adds a workspace entry in user config file
12002	Remove workspace from config file.
12003	List all available workspaces
12004	Get workspace infos from name. Return None if workspace doesn't exist.
12005	Returns True if workspace contains repository name.
12006	Synchronises workspace's repositories and logs them.
12007	Clone a repository using the provided URL and path.
12008	Checks if you have the latest version of ndio and prints an update message if not.
12009	Converts a boolean numpy array to a list of voxel coordinates.
12010	Converts a voxel list to an ndarray.
12011	Execute update subcommand.
12012	Print repository update.
12013	Set a console handler with INFO level unless in debug mode.
12014	Execute a command using os.popen and return the output.
12015	Imports a PNG file into a numpy array.
12016	Export a numpy array to a png file.
12017	Exports a numpy array to a set of PNG files, with each 2D Z-index array as its own 2D file.
12018	Print workspace status.
12019	Print repository status.
12020	Get the block-size for a given token at a given resolution. If resolution is not specified, uses the minimum available. Returns the xyz blocksize.
12021	Accepts data in zyx and uploads it as BLOSC-compressed data to a remote URL
12022	Import a TIFF file into a numpy array.
12023	Export a numpy array to a TIFF file.
12024	Load a multipage tiff into a single variable in x,y,z format.
12025	Write config in configuration file. Data must be a dict.
12026	Clone repository from url.
12027	Get version from package resources.
12028	Mixing and matching positional args and keyword options.
12029	Uses the @option decorator to control command line options, printing a greeting with or without shouting.
12030	Requests a list of next-available-IDs from the server.
12031	Merges two RAMON objects into one and optionally deletes one
12032	Kick off the propagate function on the remote server.
12033	Lists projects related to a dataset.
12034	Get info regarding a particular dataset.
12035	Lists datasets in resources. Setting 'get_global_public' to 'True' will retrieve all public datasets in cloud. 'False' will get user's public datasets. Returns datasets in JSON format.
12036	Parse show subcommand.
12037	Execute show subcommand. If args.name is not None, show workspace with the given name. If args.all is not None, show all workspaces.
12038	Show specific workspace details, including path and repositories.
12039	Show details for all workspaces.
12040	Get the base URL of the Remote.
12041	Guess the appropriate data type from file extension.
12042	Reads in a file from disk and returns a numpy.ndarray
12043	Converts in_file to out_file, guessing datatype in the absence of in_fmt and out_fmt.
12044	Builds a graph using the graph-services endpoint.
12045	Compute invariants from an existing GraphML file using remote grute graph services.
12046	Convert a graph from one format to another.
12047	Converts a list of RAMON objects to a dictionary indexed by ID.
12048	Takes str or int, returns class type
12049	Deletes a channel given its name, project name, and dataset name.
12050	Add a new dataset to the ingest with various attributes.
12051	Converts a dataset, project, channel list, and metadata into an ND JSON object
12052	Generate the dataset dictionary
12053	Generate the project dictionary with specified parameters.
12054	Generate the project dictionary.
12055	Identify the image size using the data location and other parameters.
12056	Tries to post data to the server and asserts a 200 status code.
12057	Find path for given workspace and|or repository.
12058	Get a list of public tokens available on this server.
12059	Return the project info for a given token.
12060	Insert new metadata into the OCP metadata database.
12061	Get a response object for a given url.
12062	Returns a post request object taking in a url, user token, and possible json or data information. Handles headers and authentication token.
12063	HTTP DELETE request object taking in a URL and user token.
12064	Import a HDF5 file into a numpy array.
12065	Export a numpy array to a HDF5 file.
12066	Adds a character matrix to DendroPy tree and infers gaps using Fitch's algorithm
12067	Shifts recover execution to flat_map_nvim_io using `map`.
12068	Install our gettext and ngettext functions into Jinja2's environment.
12069	Runs a task with exclusive access to a resource, updating state and handling errors.
12070	Calculates the percentage of a part relative to a total.
12071	Get stats info for a server or all servers.
12072	Get slabs info.
12073	Add admin global context for compatibility with Django 1.7
12074	Return the status of all servers.
12075	Show the dashboard.
12076	Show server statistics.
12077	Show server slabs.
12078	Converts a byte value into a human-readable format.
12079	Find and return a valid Config object from the given children.
12080	Add objects to the environment.
12081	Replace any config tokens in the file's path with values from the config.
12082	Get the path to the file relative to its parent.
12083	Read and return the contents of the file.
12084	Writes data to file.
12085	Configure Python logging module for the current file.
12086	Ensure the file exists before creating it, raising an exception if it already exists.
12087	替换任何配置标记为配置中的值。
12088	Returns the path to this directory.
12089	Remove the directory.
12090	Prepare the directory for use in an Environment. Create the directory if the create flag is set. Recursively prepare children directories.
12091	Cleans up children and removes the directory if the cleanup flag is set.
12092	Returns path to something inside this directory
12093	List the contents of the directory.
12094	Write to a file in the directory.
12095	Read a file from the directory.
12096	Add objects to the directory.
12097	Save the state to a file.
12098	Load a saved state file.
12099	Remove file at specified path if it exists.
12100	Loads plugins from the specified directory. Traverses the directory recursively and loads any Python module that contains a subclass of the Plugin class.
12101	Recursively merge values from a nested dictionary into another nested dictionary.
12102	Return a ConfigNode object representing a child node with the specified relative path.
12103	Return a tuple of a reference to the last container in the path and the last component in the key path.
12104	Retrieve the value from a node, resolving a path if specified.
12105	Update the configuration with new data. Supports updating through `options` and `data`.
12106	Load the config and defaults from files.
12107	Apply the config to a string.
12108	Build Twilio callback URL for confirming message delivery status.
12109	Process input from the socket.
12110	Send output when socket is write-ready.
12111	Send a message containing the RPC method call
12112	Reads data from a network socket and processes it. Handles blocking and non-blocking sockets. Returns number of bytes processed or EOS if done. Re-raises socket exceptions.
12113	Write data to the network layer. Returns the number of output bytes sent, or EOS if output processing is done. Handles exceptions like socket timeout, EAGAIN, EWOULDBLOCK, EINTR, and unknown exceptions, and logs appropriate debug messages.
12114	Decorator that prevents callbacks from calling into link methods that are not reentrant.
12115	Return a map of remote settle modes, skipping defaults.
12116	Assign addresses, properties, and dynamic modes for sender and receiver.
12117	Return the authorative source of the link.
12118	Return the authorative target of the link.
12119	Handle remote closing of a session.
12120	Create a new sender link.
12121	Create link from request for a sender.
12122	Create a new receiver link.
12123	Create link from request for a receiver.
12124	Remove link. If no more links, destroy session and connection
12125	Peer has closed its end of the session. Close the session and notify linked objects.
12126	Handle endpoint state change event.
12127	Modify inline patterns.
12128	Record the remote close of the receiver link and update the done flag.
12129	Protocol error occurred. Close receptor link and set done flag.
12130	Parse the hostname and port out of the server_address.
12131	Create a TCP connection to the server.
12132	Create a TCP listening socket for a server.
12133	Determine connections needing processing and return lists of connections to read, write, and wait for timers.
12134	Decorator that prevents callbacks from calling into methods that are not reentrant
12135	Perform connection state processing.
12136	Get a buffer of data that needs to be written to the network.
12137	Create a sender link with the given source and target addresses.
12138	Rejects the SenderLink and destroys the handle
12139	Create a new receiver link.
12140	Cleans up after a connection failure is detected.
12141	Logs the connection being up and calls the handler's connection_active method, if available.
12142	The remote has closed its end of the endpoint.
12143	Handle protocol error in endpoint state machine.
12144	Decorator for Twilio views with validation, CSRF exemption, and TwiMLsupport.
12145	Generate an Adobe output string for defining colors
12146	Given a search path, find and store font files with the .ttf extension, along with their paths and corresponding family names.
12147	Allows setting compression for PDF files with a boolean value, raising an exception if invalid.
12148	Adds an object to the PDF, optionally forcing its position in the object array.
12149	Stores the pdf code in a buffer. If it is page related, provide the page object.
12150	Creates a PDF text stream sandwich.
12151	Helper function for PDFText to add a page and retry adding a large block of text.
12152	Sets default color scheme for text, fill, and draw.
12153	Set the initial default font.
12154	Add a PDFPage or generate a default one. Set page index and append to pages list. Reset font and session colors.
12155	Change the font size if it's different from the current size.
12156	Input text, short or long. Writes in order, within the defined page boundaries. Sequential add_text commands will print without additional whitespace.
12157	Add new lines to the document, with an option to specify the number of lines.
12158	Adds a pie chart with specified parameters.
12159	Called by the PDFLite object to prompt creating the page objects.
12160	Returns a list of page indices with orientation changes.
12161	Prompt the creation of font objects in the PDFLite object.
12162	Creates reference images for the document.
12163	Create image objects with specified properties and data.
12164	Adjust transformation state of current graphics state matrix
12165	Returns the absolute position of x, y in user space w.r.t. default user space.
12166	Modify the style and underline properties of the current object
12167	Rotates a point relative to the mesh origin by the angle specified in the angle property.
12168	Set property info for an object, can set any attribute and leave the others blank.
12169	Sets the default viewing options for zoom and layout.
12170	Prompt the objects to output PDF code, save to file or return as string.
12171	Output: Write the standard first line of a PDF and, if applicable, append a compression marker to the buffer.
12172	Generates pages object and overall document layout
12173	Creates PDF reference to resource objects.
12174	Create PDF Information object with specified fields.
12175	Output PDF catalog with specific page layout and zoom mode settings.
12176	Final Trailer calculations, and end-of-file reference
12177	Floyd's Cycle Detector.
12178	Detect cycles in a sequence using a basic algorithm.
12179	Gosper's cycle detector. Identifies cycles in a sequence. Yields values and raises CycleDetected if a cycle is found.
12180	Brent's Cycle Detector to find cycles in sequences or finite state machines
12181	Tests if the line can accommodate the given length.
12182	Test to see if the page has enough space for the given text height.
12183	Compare x coordinate of self with test_ordinate
12184	Comparison for y coordinate
12185	Create a copy, and return it.
12186	Adds a value to x, defaulting to self.dx if dx is not provided.
12187	.mutable y addition. Defaults to set delta value.
12188	Draws a table by compiling, advancing rows, setting borders, filling, drawing borders, adding text, and setting the final cursor.
12189	Creates a new label and returns the response.
12190	Get all current labels.
12191	Return list of labels with exact match name.
12192	Update a Label
12193	Delete the specified label.
12194	Create a new tag with the specified label ID.
12195	Get all current tags.
12196	Return a list of tags with a matching label's sn key.
12197	Create a hook
12198	Get all current hooks.
12199	Update a hook with specified details.
12200	Create a new alert with specified configurations and return the response.
12201	Get alerts that match the alert type and args.
12202	Update an alert
12203	Initialize a Sphinx extension with various configurations and extensions.
12204	Retrieve the location of the themes directory from the location of this package
12205	Post a request to the Logentries API and return the response.
12206	Get all log sets. Returns a dictionary where the key is the hostname or log set, and the value is a list of the log keys. Raises a ServerException if there is an error from Logentries.
12207	Get a specific log or log set.
12208	Find a slider attacker
12209	Calculates the approximate transit duration for the general case of an eccentric orbit
12210	Update transit keyword arguments, validate, and set ldmodel based on keys.
12211	Computes the light curve model
12212	Bins the light curve model to the provided time array
12213	Frees the memory used by all of the dynamically allocated C arrays
12214	Reads data from the socket and handles connection errors.
12215	Generator that reads a line of data from the server.
12216	Reads a block of data from the server using an internal buffer. If the buffer doesn't have enough data, it requests more from the server. Yields data when available, with length determining the block size. If length is 0, yields varying amounts of data.
12217	Reads a command response status.
12218	Dispatcher for the info generators. Determines which __info_*_gen() should be used based on the supplied parameters. Returns an info generator.
12219	Returns the complete content of an info response.
12220	Call a command on the server. Handle authentication if necessary. Process command response and return status code and message.
12221	Determines the capabilities of the server. NNTPPermanentError may be raised. VERSION capability is first.
12222	Instructs a mode-switching server to switch modes. Returns whether posting is allowed.
12223	Tells the server to close the connection. After the server acknowledges the request to quit the connection is closed both at the server and client. Only useful for graceful shutdown.
12224	Fetches and returns the UTC time from a NNTP server as a datetime object, parsing the response from the DATE command. Raises an error if the timestamp is invalid.
12225	Provides a short summary of commands understood by the usenet server. Returns the help text from the server.
12226	Generates a list of newsgroups created on the server since the specified timestamp. Yields newsgroup details.
12227	Generate a list of message-ids for articles created since the specified timestamp for newsgroups with names that match the given pattern.
12228	Retrieves a list of message-ids for articles created since the specified timestamp for newsgroups with names that match the given pattern.
12229	Generates a list of active newsgroups that match the specified pattern. If no pattern is specified then all active groups are generated. Yields a tuple containing the name, low water mark, high water mark, and status for each newsgroup.
12230	Generator for LIST ACTIVE.TIMES command. Yields tuple of newsgroup name, creation timestamp, and creator.
12231	Generates a list of newsgroups including the name and a short description.
12232	Generate elements of the list returned by list_overview_fmt().
12233	Generator for LIST EXTENSIONS command. Outputs extensions one by one.
12234	Generator for LIST command. Yields elements based on keyword.
12235	LIST command wrapper for various keyword-specific list functions. Returns output based on keyword. Raises NotImplementedError for unsupported keywords.
12236	GROUP command to retrieve information about a newsgroup.
12237	NEXT command.
12238	Retrieve and parse an NNTP article.
12239	HEAD command.
12240	Fetches the body content of a message using the BODY command. Optionally decodes the body if required.
12241	Execute an XGTITLE command and retrieve information.
12242	Executes the XHDR command with the given header and message ID range.
12243	NNTP XZHDR command for retrieving message headers.
12244	Generator for XOVER command. Returns article information from overview database based on specified range. Raises error if article does not exist or newsgroup is invalid.
12245	Output XPAT command with header, msgid_range, and patterns. Parse server response.
12246	XPAT command.
12247	XFEATURE COMPRESS GZIP command.
12248	Handles a POST request, sends headers and body, checks for illegal characters, and returns the message-id if successful.
12249	Parse timezone to offset in seconds
12250	Parse a datetime to a unix timestamp using fast custom parsing or dateutil parser.
12251	Parse a datetime string to a datetime object using fast custom parsing for common formats or the slow dateutil parser for other formats.
12252	Convenience method for sending a POST request with custom headers and handling errors.
12253	Convenience method for deleting a resource.
12254	Convenience method for getting a response from a URL.
12255	List all scheduled queries.
12256	List all tags for the account.
12257	Get alert by name or id.
12258	Create an inactivity alert.
12259	Delete the specified InactivityAlert
12260	Create the scheduled query.
12261	Create an anomaly alert by making two requests: one to create a "scheduled_query" and another to create the alert.
12262	Delete a specified anomaly alert tag and its scheduled query. Make 3 requests: one to get the associated scheduled query ID, one to delete the alert, and one to delete the scheduled query.
12263	Unparse a range argument.
12264	Parse a newsgroup info line to python types. Return a tuple of group name, low-water as integer, high-water as integer and posting status. Raises ValueError if the newsgroup info cannot be parsed.
12265	Parse a header line.
12266	Convert a dictionary of headers to a string suitable for NNTP POST.
12267	Handles the POST request sent by Boundary Url Action
12268	Run tests based on provided test names with optional reporting and stopping criteria.
12269	Returns a docstring from a list of defaults
12270	Decorator to append default kwargs to a function.
12271	Add the default values to the class docstring
12272	Sets value after invoking type-checking and bounds-checking hooks.
12273	Hook for type-checking invoked during assignment. Raises TypeError if neither value nor self.dtype match and are not None.
12274	Return the current value. If not cached, invoke the loader function, cache, and return.
12275	Allows type-checking, raising TypeError for non-scalar values.
12276	Return the symmetric error.
12277	Set parameter error estimate
12278	Set the value, bounds, free, and errors of an object based on keyword arguments. Invokes hooks for type-checking and bounds-checking.
12279	Reads a JSON file, parses it into a dictionary, and creates or updates definitions using API calls.
12280	Extract required fields from an array
12281	Apply filtering criteria to metrics based on a regular expression.
12282	Make a call to the meter via JSON RPC
12283	Parse text as an expression terminal using alternation of different handlers.
12284	Parse and return an operator token from the given text.
12285	op_add = "+"
12286	Initialize properties by iterating through a list, identifying required and derived properties, and setting up book-keeping.
12287	Return a list of Parameter objects by name or all if no names are provided.
12288	Get array of parameter values, either for all parameters or specified by name.
12289	Return an array with the parameter errors
12290	Reset the value of all Derived properties to None. This method is called by setp and __setattr__.
12291	Validate and assign a value if it is a supported HTTP method.
12292	Gets the configuration stored in environment variables
12293	Encodes URL parameters
12294	HTTP Get Request with specified URL, data, headers, and authentication.
12295	Send HTTP DELETE request with specified URL, data, headers, and authentication.
12296	HTTP POST request
12297	HTTP Put Request
12298	Make an API call to get the metric definition.
12299	Check scene name and whether remote file exists. Raises WrongSceneNameError if the scene name is wrong.
12300	Determines satellite ID and associated stations based on input product type.
12301	Gets the filesize of a remote file, handles errors, and retries the connection if Failed.
12302	Download remote .tar.bz file and extract relevant images
12303	Validate bands parameter. Ensure it's a list and contains only valid bands or 'BQA'.
12304	Establish a connection to Earth Explorer without using a proxy, validate user authentication, and handle errors.
12305	Create a callable to check if names start with a given prefix.
12306	Return a datetime.tzinfo implementation for the given timezone.
12307	Correct the timezone information on the given datetime.
12308	Join an iterable by a delimiter, replacing instances of delimiter in items with escape + delimiter.
12309	Return a list of positions in the text where all new lines occur.
12310	Highlights a specific position in source code with specified formatting around it.
12311	Send output in textual format
12312	Filter out elements based on criteria
12313	Initialize based on a list of fortune files
12314	Initialize based on a list of fortune files with set chances.
12315	virtue discovers and runs tests found in the given objects.
12316	Parse and return a rule consisting of an identifier, an equals sign, an expression, and a semicolon.
12317	special_handling for text processing
12318	The parse tree generated by the source.
12319	The AST rules.
12320	Retrieves AST comments.
12321	The directives parsed from the comments.
12322	The function that returns the parsed Python source code generated from the input source.
12323	Returns the python source code for the generated parser
12324	Reads the directives and generates source code for custom imports.
12325	Builds the python source code for the Parser TokenType enum.
12326	Builds the class definition of the parser.
12327	Gets the entry_point value for the parser.
12328	Generates the source code for a rule.
12329	Gets the variable part of the source code for a rule by calculating the position and consumed length, and then indents and strips the result.
12330	Determines the return value transformation for a rule and returns the corresponding source code text.
12331	Converts an expression to an Abstract Syntax Tree Node.
12332	Converts a parse tree node into an abstract syntax tree node.
12333	Flattens a list of optree operands based on a predicate.
12334	Remove grouping groups from optree by hoisting them up to their parent node.
12335	Converts an abstract syntax tree to python source code
12336	Convert an abstract syntax operator tree to python source code.
12337	Convert an AST terminal to Python source code.
12338	Converts an AST option group to python source code.
12339	Convert an AST repetition group to Python source code
12340	Convert an AST special handling to python source code.
12341	Converts an AST alternate op to python source code.
12342	Convert an AST concatenate op to python source code.
12343	Convert an AST exclude op to python source code.
12344	Converts an AST multiply op to python source code.
12345	Converts an AST repeat op to Python source code.
12346	Finds all directives with a certain name, or that passes a predicate.
12347	Custom flattening method for the parse tree.
12348	Extracts directives from a comment, which are lines starting with '!', strips the '!' and yields parsed directive definitions.
12349	Handle the results of the API call
12350	Returns a new ID if the provided one is None.
12351	Remove a global hotkey.
12352	Configure handling of command line arguments.
12353	Configure logging based on command line options.
12354	Validate command line arguments passed to CLI.
12355	Convert a list of nodes in infix order to a list of nodes in postfix order.
12356	Convert a list of nodes in postfix order to an Optree.
12357	Finds the first operator in a list, converts it and its operands to an OptreeNode, and returns a new list with the operator and operands replaced by the new OptreeNode.
12358	Add the specific arguments of this CLI.
12359	Read the file and parse JSON into dictionary.
12360	Return the metric definition matching the given name.
12361	Gets the maximum length of each column in the field table.
12362	Gets the maximum length of each column.
12363	Escapes underscores in metric names to ensure markdown formatting
12364	Sends the field definitions to standard out.
12365	Sends the markdown of the metric definitions to standard out.
12366	Generate Markdown output by looking up metrics and defining fields and dashboards.
12367	Attempt to parse source code and handle parsing errors.
12368	Keeps track of the furthest point in the source code the parser has reached.
12369	Add specific command line arguments for this command.
12370	Attempt to parse the passed-in string into a valid datetime; if a parse error occurs, assume the string is an epoch time and convert to a datetime.
12371	Output results in CSV format
12372	Output results in structured JSON format.
12373	Output results in raw JSON format
12374	Output results in JSON format
12375	Check if node is a terminal or empty.
12376	Prettily print a parse tree.
12377	Returns a partial of _get_repetition that accepts only a text argument.
12378	Checks the beginning of text for a value and returns a terminal ParseNode if found, otherwise raises DeadEnd.
12379	Tries to pull text with extractor repeatedly based on bounds. Returns a ParseNode if enough children are extracted, otherwise raises DeadEnd.
12380	Returns extractor's result if exclusion does not match.
12381	Returns the number of characters at the beginning of text that are whitespace.
12382	Call an extractor on some text.
12383	Gets the position of the text the ParseNode processed. If the ParseNode does not have its own position, it looks to its first child for its position.
12384	Returns True if this node has no children, or if all of its children are ParseNode instances and are empty.
12385	Add ignored text to the node. Update the consumed property accordingly.
12386	Returns True if node_type == value. If value is a tuple, node_type is checked against each member and True is returned if any of them match.
12387	Flattens nodes by hoisting children up to ancestor nodes if a predicate returns True.
12388	Trim a ParseTree. A node is trimmed if pred(node) returns True.
12389	Returns a new ParseNode with the concatenated children from two nodes, excluding empty children.
12390	Returns a new node with the same contents as self, but with a new node_type.
12391	Converts a node to a value node with concatenated children, optionally including ignored values.
12392	Returns the current position of the cursor.
12393	Return the index of the deepest character readed.
12394	Move cursor to the next character.
12395	Sets cursor as beginning of next line.
12396	Sets cursor as end of previous line.
12397	Gets the last line of content for error message.
12398	Increment the cursor position by a specified length.
12399	Save current position.
12400	Restore previous saved position.
12401	Return a Fmt representation of Translator for pretty-printing.
12402	Sets the name of the object and updates the internal names accordingly.
12403	Count the number of variables defined in this scope.
12404	Count functions defined by this scope.
12405	Update internal counters.
12406	Update the Set with values from another Set
12407	Create a new Scope by taking the union of two Sets.
12408	In-place set intersection
12409	Create a new Set produced by the intersection of 2 Set
12410	Remove values common with another Set
12411	Create a new Set by subtracting another Set
12412	Remove common values and update specific values from another Set
12413	Create a new Scope with values present in only one Set
12414	Add it to the Set.
12415	Remove an item from the set, raising KeyError if not found.
12416	Remove it only if present.
12417	Retrieve all values
12418	Retrieve the first Signature ordered by mangling descendant
12419	Retrieve the last Signature ordered by mangling descendant
12420	Retrieves a signature instance by its internal_name.
12421	Get set of signatures by symbol name.
12422	Retrieve the unique Signature by symbol name. Raise KeyError if not unique.
12423	For now, polymorphic return type are handle by symbol artefact. Encapsulates symbols with polymorphic return types into EvalCtx for meta-var resolution. Inherit type/translation from parent scope.
12424	If don't have injector call from parent
12425	Replaces built-in containers with referenceable subclasses and normalizes AST nodes recursively.
12426	Change the node class and copy all attributes and values from another node.
12427	Generate a generator for data in reverse order.
12428	Check if given hit is within the charge limits.
12429	Compute a signature using resolution, substituting resolved types in `tret` and `tparams` components.
12430	Process the signature and find definition for type.
12431	Use self.resolution to substitute type_name, allowing for polymorphic type instantiation.
12432	Resolves type name and sets it in the resolution dictionary.
12433	Deletes the specified file from the local filesystem.
12434	Deletes the specified file from the given S3 bucket.
12435	Deletes the specified file, either locally or from S3, depending on the file's storage type.
12436	Saves the specified file to the local file system.
12437	Saves the specified file to the configured S3 bucket.
12438	Save the specified file to either S3 or the local filesystem, depending on the currently enabled storage type.
12439	Finds files by listing S3 bucket's contents by prefix.
12440	Create an enum from parameters, including reverse mapping.
12441	Decorator to verify arguments and return types.
12442	Add a mapping with key thing_name for callobject in chainmap with namespace handling.
12443	Attach a method to a class.
12444	Attach a method to a parsing class and register it as a parser hook. The method is registered with its name unless hookname is provided.
12445	Attach a method to a parsing class and register it as a parser rule. The method is registered with its name unless rulename is provided.
12446	Attach a class to a parsing class and register it as a parser directive. The class is registered with its name unless directname is provided.
12447	Attach a class to a parsing decorator and register it to the global decorator list. The class is registered with its name unless directname is provided.
12448	Allows aliasing a node to another name. Binds a node to '_' in Rule.
12449	Return True if the parser can consume an EOL byte sequence.
12450	Push context variable to store rule nodes.
12451	Pop context variable that store rule nodes.
12452	Return the text value of the node
12453	Push a new stream into the parser. All subsequent function calls will parse this new stream until popStream is called.
12454	Save the current index under the given name.
12455	Extracts the string between saved and current index and updates the tag cache.
12456	Merge internal rules set with the given rules.
12457	Merge internal hooks set with the given hooks
12458	Merge internal directives set with the given directives.
12459	Evaluates a rule by name. Raises an error for unknown rules.
12460	Evaluate a hook by its name.
12461	Same as readText but doesn't consume the stream.
12462	Read one byte in stream
12463	Consume the head byte and increment index if it matches the input string, else return False.
12464	Consume all the stream until EOF.
12465	Consume whitespace characters.
12466	Set the data type of the hits.
12467	Set the data type of the cluster.
12468	Check if hit array data fields match clustered array and correct field names.
12469	Creates a tree.Rule
12470	Attach a parser tree to the dict of rules
12471	Adds the rule name
12472	Create a tree.Seq
12473	Create a tree.Alt
12474	Add a read_range primitive
12475	Adds a repeater to the previous sequence, handling errors for lookahead and negated rules.
12476	Create a tree.Capture
12477	Create a tree.Bind
12478	Creates a tree.Hook
12479	Parses an int in parameter list.
12480	Parse a str in parameter list
12481	Parse a char in parameter list
12482	Parse a node name in parameter list
12483	Parse a hook name.
12484	Parse a hook parameter and add it to the list
12485	Parse the DSL and provide a dictionary of all resulting rules. Call by the MetaGrammar class.
12486	Consume comments and whitespace characters.
12487	Register state s with a unique identifier uid.
12488	Provide a '.dot' representation of all State in the register.
12489	Write a '.dot' file
12490	Write a '.png' file from the object's DOT representation.
12491	Provides a useful representation of the register.
12492	Manage transition of state
12493	Reset and clean all living states on S0.
12494	Infer type on a block by recursively inferring the type of each sub-element.
12495	Infer type on the subexpr
12496	Infer type from an ID! Checks if ID is declared in the scope, updates declarations if found, or notifies an error if not declared.
12497	Infer type from an LITERAL based on language, adopting a basic convention.
12498	Dump tag, rule, id, and value cache for debugging
12499	Generates code for a rule.
12500	Creates the appropriate scope exiting statement.
12501	Normalizes a test expression into a statements list. Returns the statements list as-is. Packages the expression as an if statement checking if the expression is not True.
12502	Generates Python code calling a function.
12503	Generates python code calling the function and returning True
12504	Generates python code calling a hook.
12505	Generates python code calling a rule.
12506	Generates python code to capture text consumed by a clause
12507	Generate Python code for a scope, returning a placeholder name or raising an exception.
12508	Generates python code for alternatives using try-except blocks to handle different outcomes of each clause.
12509	Generates python code for clauses combining continuous clauses into and operation
12510	Generates Python code for an optional clause.
12511	Generates python code for a clause repeated 0 or more times.
12512	Generates python code for a clause repeated 1 or more times.
12513	Concatenate two strings, handling newlines for tabulation based on indentation.
12514	Recursively set indentation for items in a list.
12515	Recursively converts a list to a string, handling different types and indentation.
12516	Prints the values of nodes or strings provided as arguments
12517	Function recursively connects states in a sequence of MatchExpr, handling alternatives and updating edges.
12518	Create a state for all instances of MatchExpr and connect them.
12519	Build a bottom-up tree automata for matching statements.
12520	Test if a node set with setint or setstr equals a certain value.
12521	Create a Grammar from a string.
12522	Create a Grammar from a file
12523	Parse source using the grammar.
12524	Parse a filename using a grammar. If no entry rule is specified, use the default entry. Return the parsed result.
12525	Basically copy one node to another.
12526	Set a node to a value captured from another node
12527	Get the value of a subnode from an AST expression and assign it to a destination
12528	Converts python objects to their JSON serializable equivalents.
12529	Get deposits with optional limit and from_date.
12530	Serialize the deposition object as a dictionary.
12531	Retrieve BibDocs for Invenio 1 based on modification date
12532	Get BibDocs for Invenio 2.
12533	Import BibDocFile.
12534	Dumps all BibDoc metadata for a given record and date.
12535	Get bibdocs to check.
12536	Checks if a BibDoc exists and lists its files, printing an error message if it fails.
12537	Dump the oauth2server tokens.
12538	Get UserEXT objects
12539	Exports the UserEXt object as a dictionary.
12540	Return the count and list of all featured communities.
12541	Get record ids for Invenio 1 using a modification date.
12542	Get record ids for Invenio 2 based on a modification date.
12543	Retrieves all restrictions for a given collection, users, and fireroles.
12544	Get record revisions from a given record identifier and date.
12545	Get all collections the record belong to.
12546	Convert MARCXML to JSON.
12547	Get recids matching query and with changes.
12548	Dump MARCXML and JSON representation of a record.
12549	Serialize remote account as a dictionary.
12550	Inserts JSON data into a model and commits the changes to the database.
12551	Collect entry points.
12552	Initializes app context for Invenio 2.x.
12553	Cache for heavy function calls.
12554	Import `run_sql` from `invenio.dbquery` if available, otherwise from `invenio.legacy.dbquery`.
12555	Retrieve roles connected to an action.
12556	Get action definitions to dump.
12557	Dump the remote tokens as a list of dictionaries.
12558	Load the oauth2server token from data dump.
12559	Migrate a record from a migration dump.
12560	Import config var import path or use default value.
12561	Dump the oauth2server Client.
12562	Get user accounts Invenio 1.
12563	Retrieve user accounts from Invenio 2.
12564	Dump the users as a list of dictionaries.
12565	Load the raw JSON dump of the Deposition using Record API.
12566	Create the deposit record metadata and persistent identifier.
12567	Load a single record into the database.
12568	Load records migration dump.
12569	Inspect records in a migration dump. Loads each dump and filters records by recid. Prints record identifiers or specific entity data like files, JSON, or MARCXML.
12570	Load simple objects from JSON sources asynchronously or synchronously with optional predicate filtering.
12571	Load communities.
12572	Load users synchronously due to potential issues with duplicate emails and usernames.
12573	Load the specified deposit from JSON files.
12574	Get and sort profiler statistics based on given parameters.
12575	Run as sample test server.
12576	Dumps current profiler statistics into a file.
12577	Clear profiler statistics.
12578	Stop the profiler.
12579	Check if the profiler is running.
12580	Disable timestamp update per method.
12581	Load user from data dump. Check for email and username duplication. Handle password hashing and user profile updates.
12582	Calculate image translations in parallel.
12583	Stitch regular spaced images. Returns stitched image and registered offset (y, x).
12584	Adds a dimension with ones to array and concatenates it.
12585	Create a record based on a dump, handling records, files, and persistent identifiers.
12586	Create a new record from dump.
12587	Update an existing record.
12588	Creates persistent identifiers for a record.
12589	Deletes a record and its persistent identifiers.
12590	Creates files in a bucket. Handles creating a default bucket if none exists.
12591	Create a single file with all versions.
12592	Delete the bucket.
12593	Filters persistent identifiers that do not exist.
12594	Prepare data by iterating over records and preparing revisions.
12595	Get files from data dump. Sort versions by version number.
12596	Prepare persistent identifiers.
12597	Check if record is deleted.
12598	Load community from data dump
12599	Load community featuring from data dump.
12600	Dump data from Invenio legacy.
12601	Querying and checking data using collect_things_entry_points() method.
12602	Deletes resources of this widget that require manual cleanup, including actions, event handlers, and the background.
12603	Return the length of a vector.
12604	Normalize the given vector.
12605	Transforms texture coordinates using internal texture coordinates.
12606	Ensures per-entity bone data is properly initialized.
12607	Set the length of a bone on a given entity.
12608	Sets the parent of this bone and registers as a child.
12609	Returns the point this bone pivots around on the given entity. This method works recursively by calling its parent and then adding its own offset. The resulting coordinate is relative to the entity, not the world.
12610	Initialize an animation on a specific actor by setting up `_anidata` dictionary with keyframe, last_tick, jumptype, and phase.
12611	Sets the state required for this actor. Translates the matrix to the position of the actor.
12612	Resets actor's state to default by translating matrix to previous position.
12613	Sets the state required for this vertex region. Currently binds and enables the texture of the material of the region.
12614	Resets the state required for this actor to the default state by disabling the target of the texture of the material and unsetting the rotation of the bone associated with the material's data.
12615	Ensure that the given ``obj`` has been initialized to be used with this model. If the object is found to not be initialized, it will be initialized.
12616	Redraws the model of the given object update vertex and texture coordinates for regions
12617	Actually draws the model of the given object to the render target.
12618	Sets the model this actor should use when drawing Initializes new model, removes old one if any
12619	Write the collection of reports to the given path.
12620	converts test reports into an xml file
12621	Adds a menu to the list of menus.
12622	Re-draws the text by calculating its position and centering it.
12623	Re-draws the label by calculating and updating its position.
12624	Draws the submenu and its background, handles different background types, redraws widgets as needed, and draws the content.
12625	Deletes a widget by name and addresses potential memory leaks.
12626	Re-calculates the position of the Label.
12627	Registers the motion and drag handlers.
12628	Registers up and down handlers and schedules a redraw interval for 60fps.
12629	Adds the main label of the dialog, centered on the screen.
12630	Adds an OK button to a dialog with specified label. Triggers an action to close the dialog when clicked.
12631	Exit the dialog and change back to the previously active submenu.
12632	Adds a confirm button to let the user confirm an action, positioned below the main label and to the left of the cancel button.
12633	Adds a cancel button with the given label.
12634	Updates the progressbar by re-calculating the label Automatically triggered by setting properties
12635	Renders the world in 3D mode and allows custom terrain rendering by overriding the method.
12636	Renders the world.
12637	Start a new step. Returns a context manager which allows you to report an error
12638	Check if resource with given name and extension exists.
12639	Adds a new texture category with the given name. Overrides existing category if it exists.
12640	Returns a texture to be used as a placeholder for missing textures. If the default texture cannot be found, a solid purple square is created in-memory and returned instead.
12641	Gets the model object by the given name. If it was loaded previously, a cached version will be returned. If it was not loaded, it will be loaded and inserted into the cache.
12642	Loads the model of the given name and inserts it into the cache.
12643	Gets the model data associated with the given name. If it was loaded, a cached copy will be returned. If it was not loaded, it will be loaded and cached.
12644	Loads the model data of the given name from a .json file, constructs the model structure including materials, bones, regions, and animations, and stores it in a cache.
12645	Adds a widget to this container. Prevents adding the container to itself.
12646	Draws the submenu and its background. Adjusts OpenGL state and scissor settings if necessary.
12647	Redraws the background and any child widgets.
12648	Redraws the background and contents, including scrollbar. Adjusts scrollbar position and size based on movement.
12649	Checks if a point is within a bounding box
12650	Return the percentage this slider is "filled" given the current value and minimum and maximum values.
12651	Adds a new layer to the stack, optionally at the specified z-value.
12652	Map a buffer region using this attribute as an accessor.
12653	Draw vertices in the domain. If `vertex_list` is not specified, all vertices are drawn.
12654	Adds a callback to the specified action.
12655	Calls all callbacks registered for the given action.
12656	Register a name to the registry with an optional force ID to override automatic ID generation.
12657	Adds the given layer at the specified Z Index or by the layer's default Z Index.
12658	Draws all layers of this LayeredWidget.
12659	Deletes all layers within this LayeredWidget before deleting itself.
12660	Gets or sets the border of the layer, causing an immediate redraw if set.
12661	Property to be used for setting and getting the offset of the layer.
12662	Returns the size of the layer, with the border size already subtracted.
12663	reads a mesh saved in the HDF5 format
12664	Connectivity builder for N-dimensional arrays using Numba.
12665	Sets the fields.
12666	Add the fields into the list of fields.
12667	Check element definitions
12668	Returns the dimension of the embedded space of each element.
12669	Return a dataframe containing volume and centroids of all elements.
12670	Calculates internal angles and stats for elements
12671	Calculate the aspect ratio of elements, extracting lengths from coordinates and computing maximum, minimum, and aspect ratio.
12672	Returns mesh quality and geometric stats.
12673	Makes a node set from an element set.
12674	Converts a node set to surface.
12675	Creates elements sets corresponding to a surface.
12676	Returns fields metadata as a dataframe.
12677	Returns metadata as a dataframe.
12678	Checks if the required directories exist and creates them if needed.
12679	Run post-proc script using ABAQUS solver.
12680	Makes the mesh using gmsh.
12681	Reads an history output report and processes step information.
12682	Reads a field output report and returns a dictionary with metadata and data.
12683	Converts a list-like to string with given line width.
12684	Returns an Abaqus INP formatted string for a given linear equation
12685	Returns a set as inp string with unsorted option.
12686	Parses the API response and raises appropriate errors if raise_errors was set to True
12687	Builds the url for the specified method and arguments and returns the response as a dictionary.
12688	Writes a xy_report based on xy data.
12689	Writes and cleans a field report from an ODB file.
12690	List components available on your machine.
12691	Return an error message for use in exceptions thrown by subclasses.
12692	Return True if the last exception was thrown by a Descriptor instance.
12693	Sets Series data by creating X and Y variables and contributing them to the class. Raises exceptions if missing axis or data.
12694	Returns the axis mode ('time') if all series have the specified axis as a TimeVariable, otherwise returns None.
12695	Sets the graph plotting options. Updates the mode of xaxis and yaxis based on axis configurations.
12696	Turn a funcs list element into a class object.
12697	Cycles through notifications with latest results from data feeds and displays them.
12698	Convert value to a numeric value or raise a ValueError if that isn't possible.
12699	Converts a string to an integer or float based on its numeric value.
12700	Renders a graph into the template with specified attributes.
12701	Try to get a Unicode copy of a string using BeautifulSoup's UnicodeDammit. If that fails, assume UTF-8 encoding and ignore errors.
12702	Treats raw text as HTML and attempts to clean and format it, handling encoding and decoding, removing attributes, and sanitizing the HTML.
12703	Check if MIME type matches inclusion list
12704	extract lower-case, no-slashes domain name from URL-like raw string
12705	Returns a list of strings created by splitting the domain on '.' and successively cutting off the left most portion.
12706	Get a Murmur hash and a normalized token.
12707	Collects words to index from a stream item using configured taggers and returns a counter of unique words.
12708	Record index records for a single document.
12709	Get strings that correspond to some hash.
12710	Get document frequencies for a list of hashes.
12711	Get stream IDs for a single hash from a key-value layer.
12712	Get stream IDs and term frequencies for a single hash.
12713	Given a spinn3r feed, produce a sequence of valid StreamItems.
12714	Given a single spinn3r feed entry, produce a single StreamItem. Returns 'None' if a complete item can't be constructed.
12715	Create a ContentItem from a node in the spinn3r data tree.
12716	Read exactly a varint out of the underlying file.
12717	Read some protobuf-encoded object stored in a single block out of the file.
12718	Return packed bytes representation of StreamItem key. The result is 20 bytes, 16 of MD5 hash, 4 of int timestamp.
12719	Extracts parts of a StreamItem for kvlayer key, converts to blob for storage. Returns kvlayer key tuple and data blob.
12720	Change working  directory and restore the previous on exit
12721	Removes the prefix, if it's there, otherwise returns input string unchanged. If strict is True, also ensures the prefix was present
12722	Removes the suffix, if it's there, otherwise returns input string unchanged. If strict is True, also ensures the suffix was present.
12723	Check if all elements of needle are contained in haystack, and in the same order.
12724	Return an Ice application with a default home page.
12725	Run the application using a simple WSGI server.
12726	Stop the simple WSGI server running the application.
12727	Decorator to add an HTTP route.
12728	Define a decorator to add an error page generator callback.
12729	Send content of a static file as response.
12730	Return an error page for the current response status.
12731	Add a route with HTTP method, pattern, and callback
12732	Resolve a request to a route handler.
12733	Resolves a request to a wildcard or regex route handler. Returns a tuple of route handler, positional arguments, and keyword arguments if a match is found. Returns None if no match is found.
12734	Normalize route pattern by removing type prefix and return type and pattern as tuple.
12735	Return the HTTP response body.
12736	Add an HTTP header to response object.
12737	Add a Set-Cookie header to response object.
12738	Return the HTTP response status line.
12739	Return the value of Content-Type header field.
12740	Return the list of all values for the specified key.
12741	Remove all files and directories below path, including path itself, handling read-only errors and following symlinks.
12742	Return a list of open files for the current process on UNIX-like operating systems. Optionally logs the full output.
12743	Processes stream items to generate file type stats based on content.
12744	Fetches a rejester.WorkUnit, verifies chunk counts, and saves data with retries.
12745	Attempt a fetch and iteration over a work\_unit.key path in s3.
12746	Return a list of non-empty lines from a file.
12747	Return an ordered 2-tuple containing a species and a describer.
12748	Return an ordered 2-tuple containing a species and a describer. The letter-count of the pair is guarantee to not exceed `maxlen` if it is given. If `prevent_stutter` is True, the last letter of the first item of the pair will be different from the first letter of the second item.
12749	Morphological analysis for Japanese.
12750	Scoring the similarity of two words.
12751	Converts Japanese text to Hiragana or Katakana
12752	Extract unique representation from sentence.
12753	Summarizes reviews into a short summary using the Goolabs API.
12754	Extract keywords from an input document.
12755	Extract expression expressing date and normalize its value
12756	Create a pipeline stage. Instantiates `stage` with `config`. This translates to ``stage(config)``, except two keys from `scp_config` are injected into the configuration. `scp_config` is the pipeline configuration and is required.
12757	Create a list of indirect stages based on configuration.
12758	Initiate stages for a pipeline using a configuration dictionary.
12759	Runs a pipeline processing stream items from an input source, applying incremental and batch transforms, and writing output chunks until the specified limits are reached or all items are processed.
12760	Run all writers over a chunk, collecting output paths.
12761	Run transforms on a stream item, discard if necessary, write successful items to current chunk, and return transformed item or None.
12762	Replaces the top-level pipeline configurable object using available sources.
12763	Create a WSGI app with HTTPie functionalities.
12764	assemble in-doc coref chains by mapping equiv_id to tokens and their cleansed name strings
12765	For each name string in the target_mentions list, searches through all chain_mentions looking for any cleansed Token.token that contains the name. Returns True only if all of the target_mention strings appeared as substrings of at least one cleansed Token.token. Otherwise, returns False.
12766	Function to check if any target mention is a substring of any chain mention.
12767	Iterate through tokens to find matches of cleansed tokens or regexes, yielding matching tokens.
12768	Iterates through tokens in a stream item to find near-exact matches to strings in ratings.
12769	run tagger a child process to get XML output
12770	Merges NER XML data with an input chunk and stores the result in an output chunk.
12771	Send SIGTERM to the tagger child process.
12772	Returns a Pattern that matches exactly n repetitions of Pattern p.
12773	Replace all angle bracket emails with a unique key.
12774	Generate strings identified as sentences.
12775	creates a sorted collection of labels from the given stream item based on character offsets
12776	Assemble Sentence and Token objects from a given stream item.
12777	Converts HTML, XML, and numeric entities in text to Unicode.
12778	Create a temp file of cleansed text from input chunk.
12779	run child process to get OWPL output
12780	Convert a string of text into a lowercase string with no punctuation and only spaces for whitespace.
12781	Iterates through the i_chunk and tmp_ner_path to generate a new Chunk with body.ner.
12782	Given a config dictionary with `streamcorpus_pipeline` as a key, find all keys under `streamcorpus_pipeline` that end with "_path", and if the value of that key is a relative path, convert it to an absolute path using the value provided by `root_path`.
12783	Setup the config and load external modules.
12784	Generate StreamItem instances from files in specified directories.
12785	Takes an HTML-like binary string as input and returns a binary string of the same length with all tags replaced by whitespace.
12786	Replace all HTML tags and special characters in a Unicode string with whitespace, returning a UTF-8 encoded string.
12787	Create a temporary file of clean_visible text in XML format.
12788	Convert a unicode string into a lowercase string with no punctuation and only spaces for whitespace. Replace PennTreebank escaped brackets with ' '.
12789	Manual test loop for make_clean_visible_from_raw. Parses command-line argument, reads HTML file, and processes non-tag characters, validating against original HTML.
12790	Try to load a stage into self, ignoring errors. If loading a module fails because of some subordinate load failure, just give a warning and move on. On success the stage is added to the stage dictionary.
12791	Loads external stages from a Python module in the specified path.
12792	Add external stages from the Python module mod.
12793	Construct and configure a stage from known stages.
12794	Iterates through idx_bytes until a byte in stop_bytes or a byte not in run_bytes. Returns the index of the last byte and the assembled bytes.
12795	Test whether an href string meets criteria specified by configuration parameters 'require_abs_url' and 'domain_substrings'
12796	Make a list of Labels for 'author' and the filtered hrefs & anchors
12797	Yield all file paths under input_dir
12798	Output:
Generate data objects for every task with optional key prefix filtering.
12799	Retrieve a random available key from the first max_iter rows.
12800	Tokenize words and preserve NER labels from ENAMEX tags
12801	Parses sentences and tokens from XML using LingPipeParser.
12802	Decorator for methods that need retries due to intermittent failures, such as AWS calls via boto.
12803	Verify MD5 hash of data and raise exception if it does not match the expected hash.
12804	Looks for bucket in config, retrieves AWS credentials, and returns a boto.Bucket object.
12805	Decoding raw data from S3 using a generator based on the config option input_format. Handles 'spinn3r', 'streamitem', and 'featurecollection' formats, raising errors for invalid formats.
12806	Retrieve and process a chunk of records from an S3 key, handling various optional attributes like compression and encryption
12807	Convert a text stream ID to a kvlayer key. The return tuple can be used directly as a key in the STREAM_ITEMS_TABLE table. Raises KeyError if the stream_id is malformed.
12808	Convert a kvlayer key to a text stream ID.
12809	Get a kvlayer key from a stream item.
12810	Serve up some ponies.
12811	Build the parser that will have all available commands and options.
12812	Tag tokens with xpath offsets in a stream item.
12813	Convert stream item sentences to character Offset's.
12814	Convert character offsets to character ranges.
12815	Converts HTML and a sequence of char offsets to xpath offsets. Returns a generator of :class:`streamcorpus.XpathRange` objects.
12816	Record that `tag` has been seen at this depth If `tag` is :class:`TextElement`, it records a text node
12817	Get an XPath fragment for this location.
12818	Returns the one-based index of the current text node.
12819	Yields all elements descendant of elem in document order
12820	Yields all elements from the source, recursively if source is an element.
12821	Yields all elements with the given name from the source iterator.
12822	Yields elements from the source whose name matches the given regular expression pattern
12823	Yields elements from the source having the given attribute, optionally with the given attribute value.
12824	Yields elements and text following a given element in document order.
12825	Add text nodes with indentation to improve readability of MicroXML elements.
12826	Call inkscape CLI with arguments and return its return value.
12827	Call Inkscape to export the input_file to output_file using the specific export argument flag for the output file type.
12828	Transform SVG file to PDF file
12829	Transform SVG file to PNG file
12830	Return a Jinja2 environment for the given file path.
12831	Setup self.template from template file path.
12832	Fill the content of the document with the information in doc_contents.
12833	Saves the content of a .txt file to a specified path using UTF-8 encoding. Raises an error if the content has not been updated.
12834	Factory function to create a specific document from a template file, using either a command or file extension.
12835	Fill the content of the document with the information in doc_contents, replacing symbols with XML codes before filling the template.
12836	Save the content of the .svg file in the chosen rendered format.
12837	Save content of the .text file in the PDF.
12838	Convert XML 1.0 to MicroXML.
12839	Parse HTML text into an Amara 3 tree
12840	Parse a fragment of markup in HTML mode and return a bindery node.
12841	Insert data as text in the current node, positioned before the start of node insertBefore or to the end of the node's text.
12842	Insert node as a child of the current node, before refNode in the list of child nodes. Raises ValueError if refNode is not a child of the current node
12843	Return a shallow copy of the current node.
12844	Process the given options, create input files, compile, and execute a script to return the results.
12845	XPath-like string value of node
12846	Append a node as the last child or at a specific index.
12847	Get settings from config file
12848	Get google API credentials for user.
12849	Create event start and end datetimes.
12850	Create event in calendar with SMS reminder using options, config, and credentials.
12851	Processing notification call main function.
12852	Return the extension of fpath.
12853	Add the extension ext to fpath if it doesn't have it. If check_if_exists is True, raise an error if the file does not exist.
12854	Return a temporary file with the given suffix within dirpath.
12855	Remove files in workdir with a given extension
12856	Convert CSV file to JSON file, using specified fieldnames and optionally ignoring the first line.
12857	Replace content of file `filepath`, replacing `old` with `new`.
12858	Run all parsing functions.
12859	Combines two consecutive 'a' tags if they have the same href attribute.
12860	Check if span tag has italic style and wrap with em tag
12861	Wrap tag with strong tag if it has bold style.
12862	Wrap span tag with u tag if it has underline style
12863	Reject attributes not defined in ATTR_WHITELIST.
12864	Removes extraneous whitespace and line breaks from a UTF-8 encoded string.
12865	Extract "real" URL from Google redirected URL by getting `q` querystring parameter.
12866	Parse attribute. Delegate to href parser for hrefs, otherwise return value.
12867	Translate keys in a dictionary based on provided translations. Missing keys will remain unchanged.
12868	Convert data to json string representation.
12869	Returns absolute paths of files that match the regex within folder_path and all its children folders.
12870	Concatenate the input strings and yield the result as a single string.
12871	Check if first string starts with the second
12872	Checks if the first string contains the second string and yields the result as a boolean.
12873	Yields the length of a string. If no string is provided, it defaults to the current node's value. If a callable is passed, it computes the value using the context.
12874	Convert input to boolean based on its value.
12875	Applies an expression to each item in the input sequence and yields the result.
12876	Lookup value from table based on key and yield result or empty sequence if lookup fails.
12877	Replace known special characters to SVG code.
12878	Try to read an SVG file if svg_file is a string. Return the SVG object if successful. Raise an exception if reading fails or if svg_file is not a valid object.
12879	Merge `svg_file2` in `svg_file1` at given coordinates (`x_coord`, `y_coord`) and scale.
12880	Merges multiple PDF files into a single output PDF file.
12881	Return the ElementTree of the SVG content with font content embedded.
12882	Embed TTF and OTF fonts from specified files into an SVG file and save the result to a different file.
12883	Checks inputs to ensure they are iterable and subclasses of the Input class.
12884	Checks that a function is callable and has exactly one argument.
12885	Generates all input combinations by recursively appending options to the output list.
12886	Create an input file using Jinja2 by filling a template with the values from the option variable passed in.
12887	Recursively generates all combinations of a given list.
12888	Cast an arbitrary object or sequence to a string type.
12889	Cast an arbitrary object or sequence to a number type
12890	Cast an arbitrary sequence to a boolean type
12891	Generator yielding token strings for valid XPath serialization of the AST.
12892	Modify the encoding entry in the XML file.
12893	Save text as a QR code SVG image file.
12894	Set options, run GROMACS, extract outputs
12895	Call CLI command with arguments and returns its return value.
12896	Convert TeX files to PDF using PDFLaTeX.
12897	Returns all potential loop fusion options for the psy object provided.
12898	Transforms a Geometry to a specified spatial reference
12899	Returns an ogr.Geometry instance optionally created from a geojson str or dict. The spatial reference may also be provided.
12900	Expands envelope by given Envelope or tuple.
12901	Returns the intersection of this and another Envelope.
12902	Returns true if this envelope intersects another.
12903	Returns an OGR Geometry for this envelope.
12904	Creates a table from arrays Z, N, and M.
12905	Write a CSV file with either 'Z', 'N', 'M' or dataframe values.
12906	Filter Table based on condition
12907	Return a selection of the Table at positions given by `nuclei`
12908	Select nuclei which also belong to `table`
12909	Select nuclei not in table
12910	Selects odd-even nuclei from the table
12911	Selects even-odd nuclei from the table
12912	Selects even-even nuclei from the table
12913	Calculate error difference relative to another mass table.
12914	Calculate root mean squared error
12915	Return binding energies instead of mass excesses.
12916	Return 2 neutron separation energy
12917	Return 1 neutron separation energy
12918	Return the 2 proton separation energy
12919	Return 1 proton separation energy
12920	Helper function for derived quantities. Takes name, relative coordinates, and formula as input. Calculates derived values based on the formula and returns a new Table with the results.
12921	Use as a decorator for operations on the database, ensuring connection setup and teardown.
12922	Computes the key from the salt and the master password.
12923	Initialize a database.
12924	Search the database for the given query. Will find partial matches.
12925	Modify an existing domain.
12926	Creates a new domain entry in the database with error handling.
12927	Extract messages from Handlebars templates and return an iterator with line numbers, function names, messages, and comments.
12928	Given a file path, returns the same path with a GDAL virtual filesystem prefix added.
12929	Returns the EPSG ID as int if it exists.
12930	Main entry point for the CLI.
12931	Initialize loggers with verbose or default settings to control log level and output.
12932	Update the content of a single file.
12933	Returns a dictionary of enabled GDAL Driver metadata keyed by 'ShortName'.
12934	Returns gdal.Driver for a path or None based on file extension.
12935	Converts an OGR polygon to a 2D NumPy array.
12936	Returns a Raster from layer features.
12937	Open a raster instance from a local or remote path using a specified access mode.
12938	Returns an in-memory raster initialized from a pixel buffer
12939	Returns a copied Raster instance.
12940	Return a dict of driver specific raster creation options.
12941	Returns a new Raster instance from the specified path and size, handling multiband and bandtype specifications.
12942	Sets the affine transformation.
12943	Returns an NDArray, optionally subset by spatial envelope.
12944	Returns the minimum bounding rectangle as a tuple of min X, min Y, max X, max Y.
12945	Returns the underlying ImageDriver instance.
12946	Derive new Raster instances with specified size and affine transformation.
12947	Return a MaskedArray using nodata values based on provided geometry.
12948	Returns read only property for band nodata value, assuming single band rasters for now.
12949	Returns raster data bytes for partial or full extent.
12950	Returns a new instance resampled to provided size.
12951	Save this instance to the path and format provided.
12952	Sets the spatial reference. Intercepts the gdal.Dataset call to ensure use as a property setter.
12953	Reprojects image data to a new spatial reference.
12954	computes the ideal conversion ratio for the given alphabet. A ratio is considered ideal when the number of bits in one output encoding chunk that don't add up to one input encoding chunk is minimal.
12955	Retrieves a named charset or treats the input as a custom alphabet and use that
12956	gets a chunk from the input data , converts it to a number and encodes that number
12957	Parses a chunk of bytes to integer using big-endian representation
12958	Partition the data into chunks and retrieve the chunk at the given index
12959	Memoization function
12960	Get a list of patterns from a file and make a regular expression.
12961	Converts a date to an aware UTC datetime object. Handles both epoch time and date strings.
12962	Get timezone as set by the system
12963	Convert model properties to a dict
12964	Catch exceptions with a prompt for post-mortem analysis
12965	Clearer data printing
12966	Connects to remote master, receives calls, executes them, and returns responses until interrupted.
12967	Starts an asyncio event loop to connect to the master and run jobs.
12968	Runs a pool of workers to execute tasks remotely.
12969	Sets the classification of this CompanyDetailCompany, ensuring it is one of a predefined list of values.
12970	Add message to queue and start processing the queue.
12971	Turns on a light device.
12972	Turns on a switch.
12973	Turns on with adjusted brightness.
12974	Create the message to turn off a device
12975	If the queue is not empty, process the queue.
12976	Send msg to LightwaveRF hub using a reliable mechanism with retries.
12977	Generates a wrapped adapter for the given object, handling files, file locations, and sequences. Raises ValueError for unsupported object types.
12978	Sets the nature of this YearlyFinancials.
12979	Update values of configuration section with dict. Only options that can be set in a config file are updated if conf_arg is True, and undefined options are discarded.
12980	Restore default values of options in this section.
12981	Set the list of config files.
12982	Iterator over sections, option names, and option values.
12983	Iterator over sections, option names, and option metadata.
12984	Create config file.
12985	Update values of configuration options with a dictionary. Only options that can be set in a config file are updated if conf_arg is True.
12986	Read a config file and set config values accordingly.
12987	Read config files and set config values accordingly.
12988	List of cli strings for a given option.
12989	List of config sections used by a command.
12990	Scan options related to one command and enrich _opt_cmds.
12991	Add options to a parser.
12992	Build command line argument parser.Add subparsers for subcommands and update defaults.
12993	Parse arguments and update options accordingly.
12994	Write zsh _arguments compdef for a given command.
12995	Write zsh compdef script.
12996	Builds a list of all options for a given command.
12997	Write bash complete script for specified command and subcommands.
12998	Starts a new HighFive master at the given host and port, and returns it.
12999	Called when a remote worker connection has been found. Finishes setting up the protocol object.
13000	Called when a complete line is found from the remote worker. Decodes a response object from the line, then passes it to the worker object.
13001	Called when the connection to the remote worker is broken. Closes the worker.
13002	Sends the job's RPC to the remote worker when a job is found
13003	Handle RPC response, decode, finalize, and report result to job manager
13004	Closes the worker, returning any running job to the job manager.
13005	Runs a job set which consists of the jobs in an iterable job list.
13006	Starts closing the HighFive master. The server will be closed and all queued job sets will be cancelled.
13007	Called when a state change occurs. Notifies waiters and clears the list.
13008	Adds a new result.
13009	Waits until the result set changes. Returns immediately if the result set is already complete.
13010	If there is still a job in the job iterator, loads it and increments the active job count.
13011	Marks the job set as completed, and notifies all waiting tasks.
13012	Adds the result of a completed job to the result list, then decrements the active job count. If the job set is already complete, the result is discarded instead.
13013	Cancels the job set. The job set is immediately finished, and all queued jobs are discarded.
13014	Wait until the job set is finished. Returns immediately if the job set is already finished.
13015	Distributes jobs from the active job set to any waiting get_job callbacks.
13016	Adds a job set to the manager's queue. If no job set is running, it is activated immediately. Returns a new job set handle.
13017	Calls the given callback function when a job becomes available.
13018	Returns a job to its source job set to be run again later.
13019	Adds the result of a job to the results list of the job's source job set.  
Ensures the pipeline is closed before adding the result.
13020	Check if a job set is done or cancelled. If done, load the next job set from the queue and activate it.
13021	Closes the job manager, cancelling active and queued job sets.
13022	Returns a list with no repeated elements.
13023	Returns true if the regex matches the object, or a string in the object if it is some sort of container.
13024	Lists all available instances with optional filters, exclusion criteria, and a limit.
13025	Use the environment to get the current region
13026	Filters a list of host entries based on given regex filters and excludes.
13027	Get the public DNS name of an EC2 instance by name.
13028	Deserialize a HostEntry from a dictionary
13029	Looks up an attribute on the entry, handling tag-specific lookups and converting results to strings if requested.
13030	Sorts a list of entries by the given attribute.
13031	Returns a representation of the host as a single line, with columns joined by `sep`.
13032	Create new HostEntry object from boto instance data
13033	Returns whether the instance matches the given filter text.
13034	Return the best name to display for this host. Uses the instance name if available; else just the public IP.
13035	Pretty-prints a list of entries as either a table or a line-by-line representation.
13036	Attach event time as Unix epoch to event_dict.
13037	Configure logging with specified level and output.
13038	Configure and return a new logger for hivy modules
13039	Setup Celery workers using JSON and Redis.
13040	Return status report for a worker or all workers
13041	Stop and remove a worker
13042	Define a switchable ConfOpt.
13043	Define a configuration section for handling config files. Returns a dictionary of ConfOpt objects defining 'create', 'update', 'edit', and 'editor' configuration options.
13044	Set options from a list of section.option=value string.
13045	Implementation of a command handler that configures settings based on a configuration manager and a specified configuration section.
13046	Create completion files for bash and zsh.
13047	Renders a list of columns.
13048	Render the `num`th row of each column in `columns`.
13049	Render a table by converting it into a string format with optional borders and column coloring.
13050	Prepare the rows for a table by converting them to strings and ensuring they all have the same length.
13051	Returns a function that colors a string with a number from 0 to 255.
13052	Hashes a string and returns a number between `min` and `max`.
13053	Generate a random color between min and max.
13054	Reads stdin, exits with a message if interrupted, EOF, or a quit message. Converts to an integer if possible.
13055	Verifies basic HTTP authentication by checking the provided username and password against a database of users. Returns the matching user object or None if authentication fails.
13056	Verify HTTP header token authentication and return the corresponding user or None.
13057	Flask decorator protecting resources using token scheme
13058	Check if a process is running using `pgrep`.
13059	Dynamically import a module and optionally an object from that module. Raise an error if the module or object does not exist.
13060	Retrieve the IP address, public or from the local network.
13061	Makes the HTTP request using RESTClient.
13062	Builds form parameters with or without files.
13063	Configure from cli and run the server.
13064	Render a hidden input for storing serialized upload value.
13065	Run command in subprocess and print output
13066	Runs the provided list of dictionaries concurrently or sequentially.
13067	Runs multiple commands, optionally in parallel. Each command should be a dictionary with a 'command' key and optionally 'description' and 'write_stdin' keys.
13068	Return the net work days according to RH's calendar.
13069	Queries bash to find the path to a command on the system.
13070	Construct an SSH command using hostname and other info.
13071	Constructs an SCP command using provided parameters for hostname, username, identity file, and paths.
13072	Perform SCP command to copy local_path to remote_path for each entry
13073	Performs SCP command to copy files from remote to local paths
13074	Runs a given command over SSH in parallel on all hosts in the entries.
13075	SSH into a host using a specific username and identity file, with optional tunneling through another host. Returns an exit status code.
13076	Load the user's LSI profile, or provide a default.
13077	Create a profile from parsed arguments.
13078	Relate this package component to the supplied part.
13079	Return a list of parts related to this one via reltype.
13080	Load relationships from source XML.
13081	Add a part to the package. It will also add a content-type - by default an override. If override is False then it will add a content-type for the extension if one isn't already present.
13082	Load a part into this package based on its relationship type.
13083	Get the correct content type for a given name
13084	Given an element, parse out the proper ContentType
13085	Parse an input string containing DSL and return a dictionary of parsed results, optionally adding a prefix to element names.
13086	Builds a final copy of the token using the given secret key.
13087	Assigns force field parameters to Atoms in the AMPAL object.
13088	Finds the maximum radius and npnp in the force field.
13089	Make dictionary of PyAtomData for force field parameters.
13090	Return a zipped package as a readable stream
13091	Return a generator yielding segments matching a name
13092	Copies objects from one directory in an S3 bucket to another directory in the same bucket, preserving metadata and optionally updating headers and creating directory redirect objects.
13093	Opens an S3 Bucket resource
13094	Upload a directory of files to S3. Places contents in a specified bucket and directory, overwriting existing files and deleting those no longer in the source directory. Supports various optional parameters including directory redirects, metadata, and access controls.
13095	Uploads a file to an S3 bucket with optional metadata, ACL, and cache control settings.
13096	Uploads an arbitrary object to an S3 bucket.
13097	List all file-type object names that exist at the root of a bucket directory.
13098	List all names of directories that exist at the root of this bucket directory
13099	Make an absolute directory path in the bucket for a given dirname, which is assumed to be relative to the self._bucket_root prefix directory.
13100	Deletes a file from the bucket.
13101	Ensure a token is in the Click context object or authenticate and obtain the token from LTD Keeper.
13102	Speak loudly and convert to upper case, using specified language method if available.
13103	Delete all objects in the S3 bucket named `bucket_name` that are found in the `root_path` directory.
13104	Get project's home URL based on settings.PROJECT_HOME_NAMESPACE. Returns None if PROJECT_HOME_NAMESPACE is not defined in settings.
13105	Decorator to silence template tags if 'PROJECT_HOME_NAMESPACE' is not defined in settings.
13106	Returns the project's home URL and label formatted as a Bootstrap 3 breadcrumb.
13107	Generates a Bootstrap 4 breadcrumb for the project's home URL with a customizable label.
13108	Calculates the interaction energy between AMPAL objects using a force field.
13109	Calculates the internal energy of the AMPAL object.
13110	Get lines sampled across all threads, sorted by frequency in descending order.
13111	Get a temporary auth token from LTD Keeper using provided host, username, and password. Raises KeeperError if authentication fails.
13112	Uploads a new site build to LSST the Docs, handling authentication, git references, and upload conditions based on CI environment and Travis events.
13113	Detect if the upload should be skipped based on the ``TRAVIS_EVENT_TYPE`` environment variable. Returns True if the upload should be skipped based on the combination of ``TRAVIS_EVENT_TYPE`` and user settings.
13114	Instant purge URLs with a given surrogate key from the Fastly caches.
13115	Register a new build for a product on LSST the Docs using the LTD Keeper API.
13116	Wrapper around endpoint PATCH /builds/{build}.
13117	deeply updates a dictionary - list values are concatenated
13118	Configure logging and set up context for LTD command-line client.
13119	Edit a part from an OOXML Package without unzipping it
13120	List the contents of a subdirectory of a zipfile
13121	Recursively splits a pathname into components using os.path.split.
13122	Returns a path to the file and the path to the part for a given path in a zip file.
13123	Give preference to an XML_EDITOR or EDITOR defined in the environment. Otherwise use notepad on Windows and edit on other platforms.
13124	Process the astroid node stream and validate the file header. If the header does not match, add a message.
13125	Generating an HTML chart from data and optionally writing it to a file
13126	Generate HTML from an Altair chart object and optionally write it to a file
13127	Serialize data to an Altair chart object from various data types
13128	Converts Altair-generated JSON to the newest Vega Lite spec by adding a schema and adjusting width/height.
13129	Generating HTML from Vega lite data
13130	Converts a dictionary to a pandas dataframe
13131	Writes a chart's HTML to a file
13132	Get the right chart class from a string
13133	Encodes the fields in Altair format
13134	Link to a GitHub user.
13135	Infer tarball URL from app.json if present.
13136	Brings up a Heroku app.
13137	Brings down a Heroku app.
13138	Decorator implementing Iterator interface with nicer manner.
13139	Generates a random binary string of a specified length.
13140	Returns a string representing a random IP address, optionally ignoring valid class A networks.
13141	Get a random date between two dates
13142	Returns a prepared ``Session`` instance with默认 authorization and headers.
13143	Send an API request to Heroku and return a JSON response.
13144	Creates an app-setups build. Returns response data as a dict.
13145	Checks the status of an app-setups build. Returns True if succeeded, False if pending.
13146	Generator returns unique string based on prefix and counter from cache.
13147	Memoization decorator storing function results in a dictionary for reuse.
13148	Wrap a function to produce unique results with caching.
13149	Adds sub commands to the argument parser.
13150	Gets the root argument parser object.
13151	Gets description of the command. If not supplied, uses the first sentence of the docstring.
13152	Gets the help text for the command. If not supplied, uses the doc string.
13153	Run the command with parsed arguments. If no args provided, gather from the parser. Execute subcommand if name available, otherwise run the action and returnstatus code.
13154	Encode wrapper for dataset with maximum value, handling strings, integers, floats, and various data types.
13155	Get all available athletes
13156	Get all activity data for the last 'n' activities.
13157	Request activity list for an athlete and parse the response into a DataFrame with appropriate data types and column names.
13158	Performs a memory-cached request for activity data, processes the response into a pandas DataFrame, renames columns, converts time, and returns a subset of columns.
13159	Construct athlete endpoint from host and athlete name
13160	Construct activity endpoint from host, athlete name, and filename.
13161	Do actual GET request to GC REST API and validate responses.
13162	Creates a Heroku app-setup build.
13163	Dynamic URL creation with authentication based on view type
13164	Returns a random title based on optional languages and genders.
13165	Generates a random tuple representing person information with optional language and gender parameters.
13166	Return a random last name from a list of languages.
13167	Render the axes data into the dict data
13168	Update the chart's dataset, can be two-dimensional or contain string data
13169	Renders the chart context and axes into the dict data
13170	Check to see if the type is either in TYPES or fits type name. Returns proper type.
13171	Returns the rendered URL of the chart.
13172	Shows the chart URL in a webbrowser
13173	Download the chart from the URL into a filename as a PNG. The filename defaults to the chart title if any.
13174	Grabs readable PNG file pointer
13175	Returns a PngImageFile instance of the chart. Requires PIL to be installed.
13176	Writes out PNG image data in chunks to file pointer fp
13177	Returns the unique SHA1 hexdigest of the chart URL param parts.
13178	Generate a random floating number within a specified range and with a given number of decimal places.
13179	Assign an entity name based on the class immediately inheriting from Base.
13180	This function returns verified claims if available, otherwise returns self-asserted claims.
13181	Builds a JWKS from the signing keys belonging to the self signer
13182	Unpacks and verifies metadata statements from a signed JWT or JSON document.
13183	Given a MetadataStatement instance create a signed JWT.
13184	Computes the resulting metadata statement from a compounded metadata statement.
13185	Remove MS paths that are not compatible with the expected federation usage.
13186	Add signed metadata statements to a request.
13187	Parses command line args using argparse library
13188	Add logging options to an ArgumentParser.
13189	Applies logging options from `log_levels` and `log_files`.
13190	Log msg at 'verbose' level, debug < verbose < info
13191	Creates a map of letter use in a word.
13192	Find anagrams in a given word based on specified starting and ending characters. Yield tuples of (word, score) that can be formed using the input word and allowable blanks/questions.
13193	Return the exception's name in an AMP Command friendly format.
13194	Transforms a Go Metrics API metric result into a list of values for a given window period.
13195	Gets the most recent non-zero value for a .last metric or zero for empty data.
13196	Validate the given 1-based page number.
13197	Get a page from an iterator handling invalid input from the page number by defaulting to the first page.
13198	Changes the permissions of a file or directory, with an option to apply recursively.
13199	Given configuration initiate an InternalSigningService instance
13200	Given configuration initiate a SigningService instance
13201	Creates a signed JWT
13202	Uses POST to send a metadata statement signing request to a signing service.
13203	Update metadata statement using PUT request.
13204	Update metadata signature using GET request.
13205	Yield bundle contents from dict or list.
13206	Return a bundle initialised by the given dict.
13207	Return URLs needed to include all assets of asset_type by combining URLs from dependencies and self.
13208	Generates HTML tags for URLs of a given asset type.
13209	Return all HTML tags for all asset types.
13210	Given a URL, check if there is an associated protocol. If not, set the protocol to HTTP and return the protocolized URL.
13211	Find the href destinations of all links at a given URL
13212	Connected to AMP server, start listening locally, and give the AMP client a reference to the local listening factory.
13213	Get modules by project_abspath and packages_scan. Traverse all files under folder packages_scan and get all modules name.
13214	Import customer's service module.log.info the modules to be imported try to import each module if import fails raise ImportModulesError with error message
13215	Converts a date string to a normalized and validated date range.
13216	Create a new document using only specified fields from the input document, supporting nested fields using dotted notation.
13217	For all the datetime fields in "datemap" find that key in doc and map the datetime object to a strftime string. This makes pprint and others print out readable datetimes.
13218	Output cursor to a file or stdout, formats as CSV or JSON.
13219	Output all fields using the fieldNames list. For fields in the list, datemap indicates the field must be date.
13220	Given a list of tasks and a dependency graph, return tasks in correct order.
13221	Add or create default departments for a given project.
13222	Add or create default assettypes for a given project.
13223	Adds or creates default sequences for a given project.
13224	Add a random shot for every user in the project.
13225	Create rnd shot for every user. For creations, add default departments, assettypes, and sequences.
13226	Creates a global shot for a saved sequence.
13227	Creates all tasks for a given element.
13228	Ensures an open connection to the given peer and returns the real peer ID.
13229	Sends a packet to a peer.
13230	Reads a configuration value by section and key, returning the value in the specified type.
13231	Register the decorated function to process Nova notifications based on event type, supporting both specific and wildcard event types.
13232	Register a function to process Cinder notification based on event type.
13233	Register function to process neutron notifications based on event type.
13234	Register the decorated function to process glance notifications by event type.
13235	Register the decorated function to process a Swift notification based on the event type.
13236	Register the decorated function to process keystone notifications based on the event type.
13237	Annotate a function to process heat notifications based on event types.
13238	Adds a factory. Remote clients will be able to connect to it. Calls ``factory.doStart``.
13239	Removes a factory. Remote clients will no longer be able to connect to it. This will call the factory's ``doStop`` method.
13240	Attempts to connect using a given factory.Finds the requested factory and uses it to build a protocol as if the AMP protocol's peer was making the connection.Creates a transport for the protocol and connects it immediately.Stores the protocol under a unique identifier and returns that identifier.
13241	Receives some data for the given protocol.
13242	Disconnects the given protocol.
13243	Shorthand for `callRemote`. Uses the factory's connection to the AMP peer.
13244	Create a multiplexed stream connection.
13245	Stores a reference to the connection, registers this protocol on the factory, and sends buffered data.
13246	Received some data from the local side. If a multiplexed connection is set up, sends the data over it. Otherwise, buffers the data.
13247	Sends data over the wire.
13248	Removes AMP connection from factory's protocols if it exists.
13249	Attempts to get a local protocol by connection identifier raises exception if none found
13250	Find the matching protocol and replay received data.
13251	The other side has asked us to disconnect.
13252	Centers a string and pads it on both sides
13253	Print a string with the current time right-aligned
13254	Return a nicely formatted string for a semantic version number based on its parts.
13255	Identify the unit framework (astropy, pint, or quantities) for a given unit object.
13256	Verify that a value has physical type consistent with user-specified units
13257	Applies standard padding to data to ensure its length is a multiple of the block size. Supports PKCS7, ISO7816, and X923 padding styles.
13258	Remove standard padding.
13259	Sign the extended request.
13260	Gathers and returns metadata statements from specified Federation Operators and context.
13261	Sort and print anagram results by score or length.
13262	Parse command line arguments for an anagram finder.
13263	Parse command line arguments, find anagrams, and print results
13264	Called when data is received
13265	Invoked if a packet with an unregistered type was received. Default behaviour is to log and close the connection.
13266	Create a callable stub to invoke a remote function via anycall URL. Validate URL format and extract function ID. Return an RPCFunctionStub object.
13267	Check if a remote call is still active.
13268	Get command regex string and completer dict.
13269	Delegates to amp.AmpList to parse the string and retrieves the element from the list.
13270	Wraps the object in a list, and then defers to ``amp.AmpList``.
13271	Verifies that an instance of this class adheres to given restrictions.
13272	Parse simple JWKS or signed JWKS from HTTP response.
13273	Performs a pg_dump backup and returns status code and shell output.
13274	Returns a list of all databases on this server
13275	Returns a dictionary of all the files under a specified path with their MD5 hashes.
13276	Syncs a local directory with an S3 bucket.
13277	Ensure the user has the necessary tokens for the specified services.
13278	Displays the login form and handles the login action.
13279	Build CLI dynamically based on the package structure.
13280	Return an already closed read-only instance of Fridge.
13281	Force reloading the data from the file. All data in the in-memory dictionary is discarded.
13282	Create a signed JWT containing a JWKS. The JWT is signed by one of the keys in the JWKS.
13283	Create a signed JWT for a metadata statement signing request using the specified keyjar and issuer.
13284	Decorator for providing a unittest with a library and ensuring it's called only once.
13285	Discover and load greencard tests.
13286	Command line entry point for testing cards in a librarian library. Parses arguments, runs discovery, executes tests, and prints results.
13287	Returns the Scrabble score of a letter.  
Args:  
- letter: a single character string  
Raises:  
- TypeError if a non-Scrabble character is supplied
13288	Calculates the Scrabble score of a word based on its letters and the tiles already on the board.
13289	Opens the word list file. Returns words based on specified start and end characters.
13290	Checks if the input word could be played with a full bag of tiles.
13291	Search for an answer using args.query and print it if found, otherwise print an error message.
13292	Parses command line arguments and runs the main function.
13293	Handle a JSON AMP dialect request.
13294	Utility method to retrieve command class and matching responder function for a given command name
13295	Parses values in the request based on the JSON AMP dialect.
13296	Runs the responder function adds the _answer key if it succeeds if it fails with an error known to the command serialize the error
13297	Serializes the response to JSON, and writes it to the transport.
13298	Tells the box receiver to stop receiving boxes.
13299	Builds and returns an instance of JSONAMPDialectReceiver associated with an AMP protocol instance.
13300	Convert a JWKS to a KeyJar instance.
13301	Upload a bundle from an unsigned JSON document.
13302	Handles nova notifications by finding a matching process or using a default if none found.
13303	Handles Cinder notifications by finding a matching process from customer_process, customer_process_wildcard, or using a default process. Acknowledges the message upon completion.
13304	Handles neutron notifications by finding and executing the appropriate process from customer_process or customer_process_wildcard, or using a default process if none match.
13305	Handles glance notifications by processing based on event type, using specific or wildcard processes, or a default process if none match.
13306	Handles Swift notifications by first looking for an exact match in `swift_customer_process`, then using a wildcard match in `swift_customer_process_wildcard`, and if neither match is found, using a default process. Acknowledges the message after handling.
13307	Process keystone notification based on event type and patterns, use default process if no matches found.
13308	This function handles heat notifications. It first tries to find a process in `heat_customer_process`. If not found, it checks `heat_customer_process_wildcard` using regex patterns. If still not found, it uses a default process. Finally, it acknowledges the message.
13309	Serve app using wsgiref or provided server.
13310	Print 'msg' to stdout, and log at info level if 'log' is provided.
13311	Print 'msg' to stderr, and log at info level if 'log' is provided.
13312	Decorator to register Command classes in the default set.
13313	A class decorator for Command classes to register. Checks for existing command names and aliases, and registers new CommandSubClass under their names.
13314	Checks constraints and defers to base argument's toString method.
13315	Converts a string to a value using a composed AMP argument and checks constraints.
13316	Merge `cdict` into `completers`, raise ValueError if duplicate key and not regex, otherwise update key with unique regex.
13317	Start ternya work by importing customer's service modules, initializing OpenStack MQ, and establishing a connection that auto-reconnects.
13318	Init connection and consumer with openstack mq
13319	Import customer's service modules.
13320	Init openstack nova mq
13321	Initializes an OpenStack Cinder consumer by checking notification enablement, creating consumers based on configuration, and enabling notification listening.
13322	Initialize neutron consumer
Create and manage consumers for neutron notifications
13323	Init openstack glance mq
13324	Init openstack heat mq
13325	Check if customer enables notification for a specific OpenStack component.
13326	Get music info from baidu music api
13327	Process for downloading music using multiple threads.
13328	Executes a code object.
13329	Retrieve the value associated with a given name from globals, falling back to built-in names.
13330	Calls a function from the stack with specified arguments and updates the stack with the result.
13331	Performs a mysqldump backup, creating a database dump for the given database, and returns statuscode and shell output.
13332	Render ditaa code into a PNG output file.
13333	Invoked in the 'finally' block of Application.run.
13334	Run Application.main and exits with the return value.
13335	Changes to directory `path` and returns to original CWD when exited.
13336	Copies a directory recursively, merging files if the destination already exists. Handles symbolic links and appends errors to a list if files cannot be copied.
13337	If called in the context of an exception, calls post_mortem; otherwise, set_trace.
13338	Find the time this file was last modified in nanoseconds, handling exceptions if the file is still being written.
13339	Check if a file item has been modified since the last check
13340	Builds a local cache by reading files in a directory.
13341	Completely resets the database, erasing all information in the local cache and on disc.
13342	Rip the events from a given rss feed, normalize the data and store.
13343	Download the image and return the local path to the image file.
13344	Checks if an image has changed since it was last downloaded using a head request for quicker validation.
13345	Returns a template.Node subclass by parsing tag parameters and creating a node object.
13346	Find the stack frame of the caller to note the source file name, line number, and function name.
13347	Get the C_C in which pe_pe is defined
13348	Parse command line options and launch the prebuilder.
13349	Find a symbol in the symbol table by name, kind, or both.
13350	Determines if a PE_PE is contained within a EP_PKG or a C_C.
13351	Check if PE_PE is globally defined, i.e. not inside a C_C
13352	Convert a BridgePoint data type to a pyxtuml meta model type.
13353	Retrieves two lists of related attributes from two related classes in an association.
13354	Create a named tuple from a BridgePoint enumeration.
13355	Create a Python function from a BridgePoint bridge.
13356	Create a python object from a BridgePoint external entity with bridges realized as python member functions.
13357	Create a Python function from a BridgePoint function.
13358	Create a python value from a BridgePoint constant
13359	Creates a python function that interprets the action of a BridgePoint class operation.
13360	Create a python property that interprets the action of a BridgePoint derived attribute.
13361	Create a pyxtuml class from a BridgePoint class.
13362	Create a pyxtuml association from a simple association in BridgePoint.
13363	Create pyxtuml associations from a linked association in BridgePoint.
13364	Create a pyxtuml association from a R_REL in ooaofooa.
13365	Create a pyxtuml meta model from a BridgePoint model. Optionally, restrict to classes and associations contained in the component c_c.
13366	Calls a function and sends results to the collector, supporting function actions and handling returns, yields, and exceptions atomically.
13367	Sends ACCEPT reply.
13368	Sends REJECT reply.
13369	Send RAISE reply with exception information.
13370	Allocates a call ID and emits a request through a collector.
13371	Waits for the call to be accepted by workers and starts collecting the results.
13372	Dispatches the reply to the proper queue.
13373	Guess the type name of a serialized value.
13374	Deserializes a value of some type based on the given type
13375	Updates the endlexpos attribute of the token t and returns the token.
13376	Handles the closing parenthesis token.
13377	Retrieve a feature collection. Returns `None` if the collection does not exist.
13378	Returns an iterable of feature collections for given content ids.
13379	Adds feature collections to the store efficiently. Iterably yields tuples of content_id and FC. Supports selective feature retrieval with wildcards.
13380	Deletes the corresponding feature collection. If the FC does not exist, then this is a no-op.
13381	Deletes all feature collections from an Elasticsearch index.
13382	Deletes the underlying ES index. Only use this if you know what you're doing. This destroys the entire underlying ES index, which could be shared by multiple distinct ElasticStore instances.
13383	Scan for FCs in the given id ranges and return an iterable of (content_id, FC)
13384	Scan for ids within specified ranges.
13385	Scan for FCs with a given prefix.
13386	Scan for ids with a given prefix.
13387	Fulltext search yielding triples (score, identifier, FC) based on the query and specified feature names.
13388	Fulltext search for identifiers, yielding triples of scores and identifiers.
13389	Performs a keyword scan using the query to search for feature collections with terms in each of the query's indexed fields. Returns an iterable of content IDs and corresponding feature collections.
13390	Performs a keyword scan using the query given.
13391	Retrieves identifiers of FCs that have a feature value `val` in the feature named `fname`.
13392	Maps feature names to ES's "_source" field.
13393	Creates ES filters for key ranges used in scanning.
13394	Creates the index with specified settings and handles the error if the index already exists.
13395	Create and configure mappings for a database index.
13396	Retrieve the field mappings. Useful for debugging.
13397	This method retrieves the field types for a specified index and document type in an Elasticsearch index, useful for debugging.
13398	Creates a disjunction for keyword scan queries.
13399	Counts the total size in bytes of a feature collection in dict form.
13400	Count bytes of all feature collections whose key satisfies one of the predicates in `filter_preds`. The byte counts are binned by filter predicate.
13401	Constructs a nicely formatted string for a feature collection.
13402	Handle command line options for the Find Known Secrets tool
13403	Escapes the error and wraps it in a span with the class `error-message`.
13404	Create a human-readable representation of a link on the 'TO'-side
13405	Create a human-readable representation of a unique identifier
13406	Check the model for uniqueness constraint violations.
13407	Check the model for integrity violations on an association in a particular direction.
13408	Check integrity of subtype association in model.
13409	Returns a function to create an index based on given feature names for a feature collection
13410	A basic transform for strings and integers. For integers, it packs them using big-endian format. For strings, it converts them to lowercase and UTF-8 encoding.
13411	Add feature collections to the store. Optionally create new indexes for each content object.
13412	Deletes all storage. This includes every content object and all index data.
13413	Retrieve feature collections in a range of ids. Returns a generator of content objects. Key ranges specified as 2-tuples.
13414	Retrieves content ids in a range of ids.
13415	Returns ids that match an indexed value.
13416	Returns a generator of content identifiers that have an entry in the index with a specified prefix.
13417	Returns ids that match a prefix of an indexed value, and the specific key that matched the search prefix.
13418	Implementation for prefix-based index scanning and returning values using a specified function.
13419	Adds an index to a store instance with a specified name, create function, and transform function.
13420	Adds new index values for an index.
13421	Add new raw index values.
13422	Returns a generator of index triples for the given content IDs and feature collections. The index keys have the form (idx_name, idx_val, content_id).
13423	Returns index transforms for a given name. Raises KeyError if the index has not been registered.
13424	Check if a package name exists on pypi.
13425	Adds direction to the element based on the specified argument (rtl_only, both, or ltr_only) and the current language direction.
13426	get the xsd name of a S_DT
13427	Get the referred attribute by recursively navigating through nested objects.
13428	Build an xsd simpleType out of a S_CDT
13429	Build an xsd simpleType out of a S_EDT.
13430	Build an XML Schema complexType from a S_SDT
13431	Construct XML schema xs:simpleType from a S_UDT
13432	Build a partial xsd tree out of a S_DT and its sub types S_CDT, S_EDT, S_SDT, and S_UDT.
13433	Build an xsd complex element from a O_OBJ, including its O_ATTR.
13434	Build an xsd complex element from a C_C, including its packaged S_DT and O_OBJ.
13435	Build an xsd schema from a bridgepoint component
13436	Indent an xml string with four spaces and add an additional line break after each node.
13437	Gets the full list of bikes from the bikeregister site.
13438	Set positional information on a node.
13439	Decorator for adding positional information to returning nodes.
13440	Handles double equal assignment.
13441	Sets the endlexpos of the token and returns it.
13442	Updates token end position for "->" lexer rule
13443	Processes token for "<=".
13444	Handles the '>=' token.
13445	Sets the endlexpos attribute of the token based on the current lexpos and the length of the token's value.
13446	Updates the end position of token based on the current token value
13447	Updates the lexpos attribute of token t with the end position of the token and returns the token.
13448	Sets the endlexpos attribute of the token
13449	Handles the "?" token.
13450	Set the end position of the less-than token and return it.
13451	Returns a LexToken object with type "GT" and the matched value ">"
13452	Handles the '+' token
13453	Generate message content and properties to create queue with QMFv2.
13454	Delete queue with QMFv2.
13455	Create message content and properties to list all queues with QMFv2
13456	Create message content and properties to list all exchanges with QMFv2.
13457	Create message content and properties to purge queue with QMFv2.
13458	Creates a message object with HTML and plain text attachments.
13459	Returns the text from an image at a given url.
13460	Returns true or false based on if the OCR process has read actual words.
13461	Parse command line options and launch the interpreter.
13462	Serialize a value from an xtuml metamodel instance.
13463	Serialize an xtuml metamodel association into a CREATE ROP statement.
13464	Serialize an xtUML metamodel class.
13465	Function for command line execution. Parses arguments for file search using n-grams and processes the results accordingly.
13466	Searches files satisfying a query by decomposing it into ngrams, scoring documents based on the number of ngram matches, and returning the top ten documents.
13467	Partitions a list into two based on a condition.
13468	Runs the program. Takes a list of postcodes or coordinates and returns various information about them. If using the cli, makes sure to update the bikes database with the -u command.
13469	Adds to context BiDi-related variables
13470	Find links that correspond to the given arguments.
13471	Formalize the association and expose referential attributes on instances
13472	Compute the lookup key for an instance i.e. a foreign key that can be used to identify an instance at the end of the link.
13473	Compute the index key that can be used to identify an instance on the link.
13474	Returns the type of an attribute by its name.
13475	Create and return a new instance, set attributes with initial values, handle positional and named arguments, and relate referential attributes.
13476	Obtain a sequence of all instances in the metamodel.
13477	Define a new class in the metamodel, and return its metaclass.
13478	Sends header, payload, and topics through a ZeroMQ socket.
13479	Receives header, payload, and topics through a ZeroMQ socket.
13480	This script checks for dead code in a project using the vulture tool, and exits if the amount of dead code exceeds a specified cutoff.
13481	Extracts all emails from a string or list of strings
13482	Marks a method as RPC.
13483	Collects methods which are speced as RPC.
13484	Normalize and validate UK postcode in URL.
13485	Progress to the next identifier, and return the current one.
13486	Process top-level packages in a System Model.
13487	A Component contains packageable elements.
13488	Accept a package and process its elements.
13489	Return the average brightness of the image. Only download the image if it has changed.
13490	Indicate whether or not to enter a case suite based on input pattern.
13491	Given a valid position in the text document, tries to find the position of the matching bracket. Returns -1 if unsuccessful.
13492	Select character at given position
13493	Updates the document formatting based on the new cursor position.
13494	Fixes up IronPython string exceptions
13495	Create an input hook for running the Qt4 application event loop.
13496	Return a Mapper instance with the given name. If the name already exists, return its instance. Does not work if a Mapper was created via its constructor. Using Mapper.get() is the preferred way.
13497	Register a path pattern with optional method and type casting.
13498	Decorator for registering a simple path.
13499	Registers a path pattern with an associated function and optional method and type casting.
13500	Registers a simple path with an associated function, method, and type casting.
13501	Calls the first function matching the url pattern and method. Returns the function's return value or `None` if no function was called.
13502	Reimplemented to store history.
13503	Called when the up key is pressed. Returns whether to continue processing the event.
13504	Handle the down key press event. Move cursor, perform history search, and adjust cursor position if needed.
13505	Sets the input buffer to the previous history item if possible.
13506	If possible, set the input buffer to a subsequent history item. Parameters: substring (optional), as_prefix (optional). Returns: Whether the input buffer was changed.
13507	Handles replies for code execution, updates session history length if relevant
13508	Check if history movement is locked
13509	Retrieves a history item, possibly with temporary edits.
13510	Replace current history with a sequence of history items.
13511	Stores edits to the current input buffer if there are any.
13512	Event handler for button click. Handles cleanup and closes window, and explicitly exits Python interpreter.
13513	Generates a list of Record objects given a DataFrame. Each Record instance has a series attribute which is a pandas.Series of the same attributes in the DataFrame. Optional data can be passed in through kwargs which will be included by the name of each object.
13514	Converts a collection of Record objects into a pandas DataFrame.
13515	Run a full turntable process on a pandas DataFrame using a provided method to process each row. Returns the processed DataFrame.
13516	Initalizes the given argument structure as properties of the class
13517	Updates the SUB socket's subscriptions.
13518	Receive and parse a message, then log it.
13519	Performs an N-way merge operation on sorted lists.
13520	Return an iterator on an object living on a remote engine.
13521	Convert a notebook to the v2 format.
13522	Return this platform's maximum compatible version.
13523	Retrieve an importer for a given path item. If no importer is found, use the built-in import machinery. Cache the importer if created by a path hook.
13524	Thunk to load the real StringIO on demand
13525	Convert a version string to a chronologically-sortable key.
13526	Return True when distribute wants to override a setuptools dependency. We want to override when the requirement is setuptools and the version is a variant of 0.6.
13527	Add `dist` to working set, associated with `entry`. If a distribution with the same key already exists and `replace` is False, it will be ignored. Any callbacks registered with the subscribe() method will be called if `dist` is successfully added.
13528	Find all activatable distributions in `plugin_env`.
13529	Return absolute location in cache for archive_name and names.
13530	Parse a single entry point from string src Entry point syntax follows the form: name = some.module:some.attr [extra1,extra2] The entry name and module name are required, but the :attrs and [extras] parts are optional
13531	Parse and cache metadata
13532	Recompute this distribution's dependencies.
13533	Parse a notebook filename and return the notebook format (json/py) and the notebook name.
13534	Remove leading whitespace from lines, preserving newlines in 'description' header.
13535	Reimplemented to disconnect signal handlers and event filter.
13536	Reimplements `showEvent` to connect signal handlers and set up event filtering.
13537	Returns a cursor with text between the start position and the current position selected.
13538	Updates the current item based on the current text.
13539	Registers models of the app with the given "appName" for the admin site
13540	Return disk partitions.
13541	Return system CPU times as a named tuple.
13542	Returns system per-CPU times as a list of named tuples.
13543	Use the raw Win32 handle of sys.stdin for non-blocking reads
13544	Use a blocking stdin read
13545	update visibility of the tabBar based on the number of tabs, with special handling for 0 tabs
13546	create a new frontend attached to the same kernel as the current tab
13547	Inserts a tab with a given frontend in the tab bar and updates the tab bar visibility.
13548	Adds an action to a menu and self, optionally deferring shortcut conflicts to widget-only context.
13549	Return a function that executes `magic` on the current active frontend when called.
13550	Clean "All Magics..." menu and repopulate it with `listofmagic`
13551	Forward the close event to every tab contained by the window. Handle confirmation for closing multiple tabs or a single console, including stopping kernels.
13552	Generate hashed password and salt for use in notebook configuration.
13553	Verify that a given passphrase matches its hashed version.
13554	Generates a HTML snippet for showing a boolean value on the admin page with an optional explanatory text. Uses a checkbox input with AJAX update functionality. If an override value is passed, returns a static image with no user interaction.
13555	Generate a short title for an object, indent it depending on the object's depth in the hierarchy.
13556	Collect all fields marked as editable booleans
13557	Handle an AJAX toggle_boolean request and update the corresponding object's attribute value.
13558	Implements object-level permission check, considering Tree Editor settings.
13559	Implement a lookup for object-level permissions, passing the obj parameter.
13560	Add children recursively to a binary tree.
13561	Make a symmetrical binary tree with specified levels.
13562	Submit jobs via client where G describes the time dependencies.
13563	Check that jobs executed after their dependencies.
13564	Build a set of color attributes in a class using color templates.
13565	Return a full copy of the object, optionally renaming it.
13566	Add a new color scheme to the table.
13567	Set the currently active scheme. Names are compared in a case-insensitive way by default, but case sensitivity can be enabled. Raises a ValueError if the scheme is not recognized.
13568	Return the lib dir under the 'home' installation scheme
13569	Process messages from a kernel's IOPub channel and handle different message types like stdout, stderr, pyout, and status.
13570	Method to capture raw_input with signal handling
13571	Wait for a kernel to be ready
13572	Sets the style to the specified Pygments style.
13573	Returns a QTextCharFormat for a token or None.
13574	Returns a QTextCharFormat for token by formatting lines and setting HTML in document.
13575	Returns a QTextCharFormat for a token based on a Pygments style.
13576	Searches the PATH for the given command and returns its path
13577	Converts a path to its canonical, case-normalized, absolute version.
13578	Verify that namespace packages are valid
13579	Verifies that the entry_points map is parseable.
13580	Determine if the input source ends in a blank.
13581	Determine if the input source ends in two blanks.
13582	Handle the `files = !ls` syntax.
13583	Handle the assignment syntax `a = %who` and transform it into `a = get_ipython().magic(%r)`.
13584	Handle inputs that start with '>>> ' syntax.
13585	Handle inputs that start classic IPython prompt syntax.
13586	Pushes one or more lines of input and returns a status code indicating whether the input forms a complete Python block.
13587	Determines if a block of interactive input can accept more input, based on conditions related to input completion and indentation.
13588	Compute and return new indentation level and full dedent flag for a line of Python code.
13589	Store one or more lines of input with automatic newline handling
13590	Return input and raw source and perform a full reset.
13591	Process lines when they start with %%, which marks cell magics.
13592	Append new content for a cell magic in line mode.
13593	Process and translate a cell of input.
13594	Pushes one or more lines of IPython input, handling special syntax and transformations. Returns a status code indicating if the input forms a complete Python block.
13595	Initialize observer storage
13596	Send notifications to all registered observers
13597	Find all registered observers that should receive notification
13598	Registers an observer callback to post notifications.
13599	Add a new background job and start it in a separate thread.
13600	Update the status of the job lists. Move finished jobs to completed or dead lists and copy to corresponding _report lists. Clear the running list of dead and completed jobs.
13601	Report summary for a given job group. Return True if the group had any elements.
13602	Flush a given job group and return True if it had any elements.
13603	Prints the status of newly finished jobs. Returns True if any new jobs are reported. This call resets its own state every time, so it only reports jobs which have finished since the last time it was called.
13604	Print a status of all jobs currently being managed.
13605	Initializes common properties for BackgroundJob objects and sets up a thread.
13606	Insert a value in the ListVariable at an appropriate index.
13607	Retrieve a shallow copy of the Environment.
13608	Declare an environment variable as a special variable.
13609	Declare an environment variable as a list-like special variable.
13610	Declare an environment variable as a set-like special variable.
13611	Change the working directory for process execution.
13612	Swaps two cities in the route.
13613	Calculates the length of the route.
13614	Create an empty record with specified keys.
13615	Ensure that an incorrect table doesn't exist. If a bad (old) table does exist, return False.
13616	Convert a list to a dictionary using specified keys
13617	Turns a mongodb-style search dict into an SQL query.
13618	Standard warning printer with formatting and control options for different levels of severity, including the ability to exit the program for critical errors.
13619	Read a config file, validate it with a JSON Schema, and merge with default values if specified.
13620	Output a simple table with several columns.
13621	Output a link tag.
13622	Output a script tag to a JS file.
13623	Output a link tag to a CSS stylesheet.
13624	Generate image tag helper with URL and optional attributes.
13625	Subtract the arg from the value
13626	Multiply value with arg.
13627	Divide the arg by the value. Catch exceptions and return an empty string.
13628	Return the modulo value.
13629	Return the verbose name of a model, handling both Model and ModelForm instances.
13630	Split user input into initial whitespace, escape character, function part, and the rest. Handles both pattern matching and simple splitting.
13631	Register command-line options.
13632	Add or remove a builtin and save the original.
13633	Remove an added builtin and re-set the original.
13634	Remove added builtins or restore overwritten ones to their previous values.
13635	Finds the true URL name of a package using case-insensitivity
13636	Yields all links with the given relations
13637	Turn a command-line argument into a list.
13638	The main entry point to Coverage, handling script execution and exceptions.
13639	Add a specialized option to execute a specific action.
13640	Append to the actions list.
13641	Process command line arguments and execute corresponding actions.
13642	Display an error message or help on a specified topic.
13643	Deal with help requests Return True if it handled the request, False if not
13644	Check for conflicts and problems in the options. Returns True if everything is ok, or False if not.
13645	Implementation of 'coverage run'. Set the first path element properly, run the script, and save the coverage data if code ran successfully.
13646	Report coverage data or system information based on provided arguments.
13647	Reconstruct an object serialized by serialize_object from data buffers.
13648	Sets the hook if it's not already set.
13649	Decorator to log unhandled exceptions raised in a method.
13650	Boolean check for whether a string is a zmq url
13651	Validate a URL for ZeroMQ, ensuring it uses a valid protocol and format.
13652	validate a potentially nested collection of urls
13653	Pull values from user namespace by keys.
13654	Selects and returns n random ports that are available.
13655	Turn a function into a remote function.
13656	Turn a function into a parallel remote function.
13657	call a function on each element of a sequence remotely.
13658	Get the last n items in readline history.
13659	Toggle or set the autoindent flag, checking for readline support.
13660	Initialize logging if requested at the command line.
13661	Save the state of hooks in the sys module.
13662	Restore the state of the sys module.
13663	Registers a function to be called after code execution
13664	Return a new 'main' module object for user code execution.
13665	Cache a main module's namespace to prevent memory leaks while allowing access to objects from the last execution.
13666	Initialize user-visible namespaces with minimum defaults.
13667	Get a list of references to all the namespace dictionaries in which IPython might store a user-created object.
13668	Reset all internal namespaces and release references to user objects. Clear user namespaces and restore to minimal usability.
13669	Delete a variable from various namespaces to avoid hidden references, with the option to delete by name or object reference.
13670	Clear selective variables from internal namespaces based on a specified regular expression.
13671	Inject variables into the IPython user namespace.
13672	Finds an object in available namespaces, handling magic functions and aliases.
13673	Find property details for an object.
13674	Find an object and return a struct with info about it.
13675	Call the appropriate inspector method based on the given meth parameter.
13676	Sets up the command history, and starts regular autosaves.
13677	Handle GUI exceptions.
13678	Displays the exception that just occurred, providing options for showing the full traceback or extracting specific error messages.
13679	Actually show a traceback. Subclasses may override this method to put the traceback on a different place, like a side channel.
13680	Displays the syntax error that just occurred and optionally updates the filename in the exception.
13681	Handle auto-indent and insert text at the start of each line
13682	Return the completed text and a list of completions.
13683	Adds a new custom completer function at a specified position in the completers list.
13684	Set the frame of the completer.
13685	Executes a line magic function.
13686	Find and return a magic of the given type by name. Returns None if the magic isn't found.
13687	Define a new macro.
13688	Call given cmd in a subprocess using os.system and store exit code in user_ns.
13689	Prints rewritten user command to screen with visual feedback.
13690	Get a list of variable names from the user's namespace and return their repr() values.
13691	Evaluate a dict of expressions in the user's namespace.
13692	Evaluate a Python expression in the user namespace. Returns the result of the evaluation.
13693	Execute an IPython file safely, handling exceptions and updating sys.path
13694	Call a cell magic with the data stored in self.
13695	Run a complete IPython cell. Handles prefiltering, execution, and post-execution logic.
13696	Run a sequence of AST nodes. The execution mode depends on the interactivity parameter.
13697	Activate pylab support at runtime. This turns on support for matplotlib, preloads into the interactive namespace all of numpy and pylab, and configures IPython to correctly interact with the GUI event loop. The GUI backend to be used can be optionally selected with the optional :param:`gui` argument.
13698	Expand python variables in a string. The depth argument indicates how many frames above the caller should be walked to look for the local namespace where to expand variables. The global namespace for expansion is always the user's interactive namespace.
13699	Make a new tempfile and return its filename, optionally writing data to it.
13700	Returns a string containing a set of input history slices based on the given range string.
13701	Retrieving code string from history, file, url, or a string or macro. Handles various inputs and returns code as a string or raises ValueError or TypeError if not found.
13702	Cleanup operations and saving of persistent data for IPython on exit.
13703	Broadcast a message from one engine to all others.
13704	Send a message from one to one-or-more engines.
13705	Decorator to skip a test if a given condition is true.
13706	Make a function raise KnownFailureTest exception if given condition is true.
13707	Filter deprecation warnings while running the test suite, to avoid printing them during test run, while checking that the test actually raises a DeprecationWarning.
13708	List profiles in a given root directory
13709	List profiles that are bundled with IPython.
13710	find a distribution matching requirement `req`
13711	Run a given command, wait for it to finish, and return all output as a string. Include STDERR in output. Optionally capture exit status.
13712	Find executable file in environment path. Returns full path if found and executable, otherwise None.
13713	Iterate over a file-like object
13714	Sends a string to the child process and writes to log files if set. Returns the number of bytes written.
13715	Sends a SIGINT to the child. It does not require the SIGINT to be the first character on a line.
13716	Recompile unicode regexes as bytes regexes.
13717	Searches for a pattern in a stream, supporting various pattern types and handling exceptions.
13718	Common loop used inside expect to search for patterns in input, handling timeouts and exceptions.
13719	Recompile bytes regexes as unicode regexes
13720	Search 'buffer' for the first occurrence of one of the search strings, update match, start, end, and return the index of the string.
13721	Search for the first occurrence of a regular expression in a buffer.
13722	Progress Monitor listener that logs all updates to the given logger
13723	Unpacks a directory, mimicking the archive interface. Raises UnrecognizedFormat if not a directory. Iterates through files, applying a filter and copying while maintaining directory structure.
13724	Emit a message to the user based on verbosity and debug status.
13725	Get the output of the last command executed.
13726	Wrapper for subprocess.check_output.
13727	Find the source for a given filename. Returns the actual filename and the source, navigating through various cases to handle different file types and locations. Raises an exception if no source is found.
13728	Returns sorted list of executed arcs in code
13729	Return a sorted list of the arcs in the code not executed.
13730	Returns a sorted list of the executed arcs missing from the code.
13731	Return a list of line numbers with more than one exit.
13732	Return the total number of branches with a count greater than one.
13733	Return arcs that weren't executed from branch lines.
13734	Get stats about branches. Returns a dict mapping line numbers to a tuple: (total_exits, taken_exits).
13735	Set the number of decimal places used to report percentages.
13736	Returns a single percentage value for code coverage.
13737	Returns the percent covered, as a string, without a percent sign.
13738	Applies cls_name to all needles found in haystack.
13739	Highlights text in a given string based on a list of keywords.
13740	Highlights the matched words in the given string based on a list of keywords.
13741	Run 'func' under os sandboxing
13742	Remove a single pair of quotes from the endpoints of a string.
13743	Indent a string a given number of spaces or tabstops.
13744	Return the input string centered in a 'marquee'.
13745	Remove some latex-type format codes from a string.
13746	Equivalent of textwrap.dedent that ignores unindented first line
13747	Wraps multiple paragraphs in a text to fit a specified width, handling empty lines as paragraph separators.
13748	Calculate optimal columnization for a list of strings
13749	Return item at index i from list, or default if index is out of bounds.
13750	Returns a nested list and info to columnize items.
13751	Collects whitespace-separated fields from string list. Allows quick awk-like usage of string lists.
13752	Build argv to be passed to kernel subprocess
13753	Sets up SSH tunnels if needed.
13754	Pretty print the object's representation.
13755	Prints a pretty representation of an object to stdout.
13756	Gets a reasonable method resolution order of a class and its superclasses for both old-style and new-style classes.
13757	A function that provides a default pretty-print representation for an object, handling user-provided reprs, built-in objects, and attributes recursively.
13758	Create a pprint function useful for sequences.
13759	Factory to return a pprint function for dicts and dict proxies
13760	Prints a string representation of a super-type object.
13761	Prettprints a regular expression pattern.
13762	pprint for classes and types
13763	Base pprint for all functions and builtin functions.
13764	Base pprint for all exceptions.
13765	Add a pretty printer for a given type.
13766	Add a pretty printer for a type specified by the module and name of a type.
13767	Add literal text to the output.
13768	Add a breakable separator to the output.
13769	Ends a group and adjusts indentation and group stack accordingly.
13770	Flush data from the buffer to the output and clear the buffer.
13771	Pretty print the given object, handling cycles and registered printers.
13772	Return a color table with fields for exception reporting.
13773	Write row with translations to ods file into specified sheet and row_no.
13774	Get the current clipboard's text on Windows. Requires Mark Hammond's pywin32 extensions.
13775	Get the clipboard's text on OS X
13776	Get the clipboard's text using Tkinter.
13777	Returns a safe build_prefix for pip.
13778	Rekey a dict that has been forced to use str keys where there should be ints by json.
13779	Recursively extract ISO8601 dates from an unpacked JSON object.
13780	squash datetime objects into ISO8601 strings
13781	Convert datetime objects to ISO8601 format for JSON serialization.
13782	Clean an object to ensure it's safe to encode in JSON. Atomic, immutable objects are returned unmodified. Sets and tuples are converted to lists, lists are copied, and dicts are also copied.
13783	Checks if the installation directory is .pth-capable and handles related configurations and file processing.
13784	Write an executable file to the scripts directory.
13785	Print a short message, sleep for a time, and return the same args.
13786	Create and return the ArgumentParser for a command.
13787	Convert .pyx extensions to .c
13788	Watch iopub channel and print messages
13789	Create a package finder appropriate to this install command. This method is meant to be overridden by subclasses, not called directly.
13790	Adjust the log level when log_level is set
13791	Start logging for this application using a StreamHandler，默认日志级别为WARNING，可调整log_level。
13792	Ensures flags dictionary is valid by checking key-value pairs.
13793	Prints the alias part of the help, reformating the first line and including all parent classes in available names.
13794	Prints the flag part of the help.
13795	Prints the subcommand part of the help.
13796	Print help for each Configurable class in self.classes. If classes=False (the default), only flags and aliases are printed.
13797	Prints examples of the application's usage.
13798	Updates the config by merging the new config into the current one and firing traits events.
13799	Initializes a subcommand with argv.
13800	flatten flags and aliases so cl - args override as expected
13801	Parse and handle command line arguments.
13802	Loads a .py based config file by filename and path.
13803	Generates a default config file from Configurables.
13804	Choose k random elements of array.
13805	Produce a sequence of formatted lines from info.
13806	Writes a line of debug output.
13807	Update class traits with config=True metadata using values from corresponding config entries.
13808	Returns a help string for the class in ReST format, incorporating instance trait values if provided.
13809	Generates a help string for a single trait.
13810	Get the config class config section with comments and wrapped paragraphs.
13811	Unset _instance for the class and its singleton parents.
13812	Returns a global instance of this class, creating a new one if none exists.
13813	Add detail from traceback inspection to error message of a failure.
13814	Add a small message to the traceback in an exception handler.
13815	Ensure signals are dispatched immediately.
13816	Reimplemented to emit signal.
13817	Read a notebook from a file like object.
13818	Read from a pipe ignoring EINTR errors.
13819	Opens a command in a shell subprocess and executes a callback.
13820	Splits a command line's arguments in a shell-like manner, respecting quotes and handling errors gracefully.
13821	Removes duplicates and compresses directory history to 20 entries.
13822	Class decorator for all subclasses of the main Magics class. Ensures decorated line/cell magics methods are registered in the class instance. Note: not thread-safe.
13823	Store a function as a magic of a specific kind in a dictionary.
13824	Decorator factory for methods in Magics subclasses.
13825	Decorator factory for standalone functions to register IPython magic functions.
13826	Return dict of documentation of magic functions. Keys are 'line' and 'cell' for line and cell magics respectively. Values are functions' docstrings or provided missing value. If brief is True, returns only first line of each docstring.
13827	Register one or more instances of Magics.
13828	Exposes a standalone function as an IPython magic (line, cell or both) from a function with specific signatures.
13829	Formats a string for LaTeX inclusion.
13830	Parse command-line options and arguments.
13831	Add an entry to options_table for a magic function with a given value
13832	Show a GUI Console reference.
13833	Factory function to create a properly initialized task.
13834	Returns task info dictionary from task label.
13835	Find and return a callable object from a task info dictionary.
13836	Calculate the next run time of a task based on the last run time and schedule. If the task has never run before, set the next run time to the current time unless waiting for a schedule. Then, calculate the next run time based on the schedule and save the updated task.
13837	Internal instance method to submit this task for running immediately. Does not handle iteration, end-date, etc., processing.
13838	Run task callable and handle iterations and enabling status.
13839	Instance method to run this task immediately.
13840	Run a callable with a specified number of iterations with optional scheduling and delay.
13841	Run a one-shot task immediately.
13842	Set the URL file path based on the profile directory and file name.
13843	Promote engine to listening kernel, accessible to frontends.
13844	Executes a test described by a YAML file. Performs a syntax check if requested; otherwise, runs the test steps.
13845	Create an interrupt event handle that a parent process can use to interrupt a child process.
13846	Run the poll loop indefinitely, listening for events on specific handles and handling them accordingly.
13847	Filter a namespace dictionary by name pattern and item type.
13848	Return dictionary of all objects in a namespace dictionary that match type_pattern and filter.
13849	Check for presence of mutually exclusive keys in a dict.
13850	Is called after every pylab drawing command. Signals that the current active figure should be sent at the end of execution and sets the _draw_called flag. Ensures the current figure will be drawn and moves the active figure to ensure it is drawn last. Ensures the current figure will be drawn and moves the active figure to ensure it is drawn last.
13851	Send all figures that changed. This is meant to be called automatically and will call show() if during prior code execution, there had been any calls to draw_if_interactive. This function is meant to be used as a post_execute callback in IPython, so user-caused errors are handled with showtraceback() instead of being allowed to raise. If this function is not called from within IPython, then these exceptions will raise.
13852	Send the given figure as a PNG payload.
13853	Load an IPython extension by its module name.
13854	Unload an IPython extension by its module name.
13855	Generate a list of n random ports near the given port.
13856	Initialize tornado webapp and httpserver
13857	Start handling SIGINT with a confirmation dialog in the background.
13858	confirm shutdown on ^C; restarts if 'n' or no response within 5s
13859	shutdown all kernels
13860	Price European and Asian options using a Monte Carlo method.
13861	Replace occurrences of dictionary keys in 'text' with their corresponding values.
13862	Render but don't justify, or update the width or txtwidth attributes.
13863	Launches a localhost kernel, binding to specified ports.
13864	Create a zip file for the project and rename it with the release version.
13865	Fix the version in metadata.txt using the new_version value from context.
13866	Returns whether an object is mappable or not
13867	Returns the pth partition of q partitions of seq.
13868	Monkeypatch pexpect to prevent unhandled exceptions at VM teardown.
13869	Run the given file interactively.
13870	Run the given source code interactively. Accepts a string of code or an open file object. Optionally interact with the running program or capture its output.
13871	Generate Cobertura-compatible XML report for given modules or filenames.
13872	Adds a 'class' XML element for a single file, containing information about the file's lines and methods.
13873	Download a segment of pi from super-computing.org if not already present
13874	Add up a list of frequency counts to get the total counts.
13875	Read digits of pi from a file and compute the n digit frequencies.
13876	Yield the digits of pi read from a .txt file.
13877	Compute frequencies of each digit in a given sequence of digits.
13878	Compute 2-digit frequency counts from pi digits.
13879	Consume digits of pi and compute n digits frequency counts.
13880	Plot two digits frequency counts using matplotlib.
13881	Plot one digit frequency counts using matplotlib.
13882	Prints the value of an expression and the calling function name, with an optional message.
13883	Handbook for Django's `reverse` with `query` arg appending GET parameters.
13884	Check if given prefix and base form a "private" name, considering only the base component. Deposrated function.
13885	A unittest suite for one or more doctest files.
13886	Debug a single doctest docstring
13887	Debug a test script as a string with optional debugger and global variables.
13888	Debug a single doctest docstring
13889	Retrieves all data from hashed categories and returns them as a dictionary, updating and uncaching each file.
13890	Compress category 'hashroot' to improve hset performance, hget may fail for compressed items if fast_only is True.
13891	Returns all keys in the database or all keys matching a glob pattern.
13892	Return whether this record should be printed
13893	Check if `record` matches any item in `matchers` or starts with any item followed by a dot.
13894	Add captured log messages to error output.
13895	Call this to embed IPython at the current point in your program.
13896	Embeds IPython into a running Python program.
13897	Prepare new csv writers, write title rows and return them.
13898	Prepare locale dirs for writing po files. Create new directories if they don't exist.
13899	Write msgstr for every language with all needed metadata and comment.
13900	Writes header into po file for specific lang.Metadata are read from settings file.
13901	Subscribe a user to a service.
13902	Initialize option parser for command-line arguments.
13903	Run a Python module as though with `python -m name args...`.
13904	Run a python file as if it were the main program on the command line. `filename` is the path to the file to execute, it need not be a .py file. `args` is the argument array to present as sys.argv, including the first element naming the file being executed. `package` is the name of the enclosing package, if any.
13905	Reads source code from a file and compiles it into a code object.
13906	Get a code object from a .pyc file.
13907	Return an HTML tablestring from a matrix of items. Optionally highlight a selected item and add a header/footer row.
13908	Set current cursor position and adjust start and stop based on value and width. Adjust start and stop to stay within bounds if close to minimum or maximum.
13909	Cancel the completion, reset internal variables, and clear temporary buffer
13910	Ensures the selection index stays within valid ranges for a grid. Handles wrap-around logic for both horizontal and vertical scrolling.
13911	move cursor up
13912	Move cursor down
13913	Move cursor left
13914	Move cursor right
13915	Update list of completion and highlight currently selected item.
13916	Return a dictionary of words and word counts in a string.
13917	Output:
Print the n most common words and counts from a frequency dictionary.
13918	Return the string representation of the job description XML.
13919	Write the XML job description to a file.
13920	Validates a given pin against a schema. Raises a DocumentError if the pin is not valid.
13921	Send a shared pin for the given topics.
13922	Delete a shared pin.
13923	Sends a user pin with optional validation skip.
13924	Deletes a user pin.
13925	Subscribes a user to the specified topic, handling HTTP errors if they occur.
13926	This interface is used to retrieve the list of topics that a user is subscribed to based on the user's token.
13927	Decorate a function to automatically begin and end a task on the progress monitor.
13928	Calls before starting work on a monitor, specifying name and amount of work
13929	Wrap code into a begin and end call on this monitor
13930	Create a submonitor with the given units and yield it. Ensure the subtask is closed properly.
13931	Monitors the work progress by updating units worked and an optional message. Raises an Exception if called before begin. Updates the total worked units and message. Notifies all listeners of the update.
13932	Creates a sub monitor that represents N units of work in this monitor.
13933	Signal that a task is done, optionally updating with a message.
13934	Prints a string, piping through a pager using IPython's payload system
13935	Move temporary build location to a permanent directory.
13936	Load multiple Python config files and merge them.
13937	Load the config from a file and return it as a Struct.
13938	Load config file into self.config with recursive loading.
13939	Update self.config from a flag, which can be a dict or Config.
13940	Decode list of arguments.
13941	Parse the configuration and generate the Config object.
13942	Parse command line arguments and return as a Config object.
13943	Parse command-line arguments and decode them.
13944	Convert parsed data to configuration, handling unrecognized extra args via KVLoader.
13945	Finds the full path of a module, ignoring any bytecode files.
13946	Registers a callback to be called with this Launcher's stop_data when the process actually finishes.
13947	Call this to trigger startup actions. This logs the process startup and sets the state to 'running'. It is a pass-through so it can be used as a callback.
13948	Call this to trigger process stop actions.
13949	Send INT, then KILL after delay.
13950	Builds self.args using MPI command and program arguments.
13951	Start n instances of the program using mpiexec
13952	Send a single file to a remote location using SCP.
13953	Fetch a single file from a remote location using SSH and SCP, with retries if the file does not exist initially.
13954	Counts the total number of engines based on the values in the `engines` dictionary, handling nested tuples and lists.
13955	Start engines by profile or profile_dir. `n` is ignored, and the `engines` config property is used instead.
13956	Submit n copies of the process using the Win HPC job scheduler and return the job ID.
13957	Return the default context with the default values for the basic keys.
13958	Extract job ID from submit command output.
13959	Instantiate and write a batch script to the work_dir, using template or default.
13960	Start n copies of the process using a batch system.
13961	Reimplemented to return a custom context menu for images.
13962	Append raw JPG data to the widget.
13963	Append raw PNG data to the widget.
13964	Append raw SVG data to the widget.
13965	Adds specified QImage to document and returns QTextImageFormat referencing it.
13966	Copy ImageResource to clipboard
13967	Returns QImage stored as ImageResource with 'name'.
13968	Inserts a raw image (jpg or png) into the cursor.
13969	Insert raw SVG data into the widget.
13970	Shows a save dialog for the ImageResource with 'name'.
13971	stoo when exit_now fires
13972	Configure the user's environment by setting specific variables and installing a payload version of page.
13973	Shows the auto-rewritten input for autocall and friends.
13974	Engage the exit actions.
13975	Send specified text to frontend for next input cell.
13976	Read a filename as UTF-8 configuration data.
13977	Read a list of strings. The value of `section` and `option` is treated as a comma- and newline-separated list of strings. Each value is stripped of whitespace. Returns the list of strings.
13978	Read a list of full-line strings. Treats `section` and `option` as newline-separated lists of strings, stripped of whitespace. Returns the list of strings.
13979	Reads configuration from an environment variable.
13980	Read config values from kwargs.
13981	Read configuration from a .rc file.
13982	Set an attribute on self if it exists in the ConfigParser.
13983	Expand '~'-style usernames in strings. Similar to os.path.expanduser but returns extra information for completions.
13984	Set the delimiters for line splitting
13985	Split a line of text with a cursor at the given position.
13986	Return a list of all keywords, built-in functions and names currently defined in the namespace or global_namespace that match the text.
13987	Computes matches when text contains a dot.
13988	Update splitter and readline delimiters when greedy mode changes
13989	Matches filenames, expanding ~USER type strings and handling spaces in filenames.
13990	Match internal system aliases Return list of matching aliases
13991	Match attributes or global Python names
13992	Return the list of default arguments of obj if it is callable, or empty list otherwise.
13993	Find completions for the given text and line context.
13994	Return the state-th possible completion for 'text'. This is called successively with state == 0, 1, 2, ... until it returns None. The completion should begin with 'text'.
13995	Check if a specific record matches tests.
13996	Find all the matches for a check dict.
13997	extract subdict of keys
13998	Should we silence the display hook because of ';'
13999	Write the output prompt.
14000	Write format data dict to the frontend.
14001	This method logs the output based on the format dictionary provided. It checks if logging is enabled, then logs the text content and updates the history manager.
14002	raise `InvalidOperationException` if object is freezed.
14003	Convert a MySQL TIMESTAMP to a Timestamp object.
14004	Schedule call to eventloop from IOLoop
14005	Handle control requests and execute corresponding handlers
14006	Dispatch shell requests, handling control requests first, then processing identities and deserializing messages. Logs message details and handles aborted messages or unknown message types, ensuring default signal handling during processing.
14007	register dispatchers for streams
14008	Step the event loop just once.
14009	Publish the code request on the pyin stream.
14010	Aborts a specific message by ID.
14011	Clears the namespace.
14012	Constructs a topic string for IOPub messages by prefixing the base with either the engine ID or kernel identifier, followed by the specified topic.
14013	Actions taken at shutdown by the kernel, including sending a shutdown message and flushing shell streams.
14014	Copy sys.modules onto my mod stack
14015	Pop my mod stack and restore sys.modules to the state it was in when mod stack was pushed.
14016	Return absolute, normalized path to directory if it exists; None otherwise.
14017	Checks if a name is file-like if it exists, has a directory, ends with .py, or isn't a valid identifier.
14018	Checks if obj is a class.
14019	Is this path a package directory? at least the end of the path must be a legal python identifier and __init__.py[co] must exist
14020	Find the full dotted package name for a given python source file name.
14021	Draws a 70-char-wide divider with a label in the middle
14022	Sort key function factory that puts items that match a regular expression last.
14023	Make a function appear as if it is located in a different module without modifying the original function.
14024	Make a class appear to reside in `module`.
14025	Return system CPU times as a namedtuple.
14026	Return process cmdline as a list of arguments.
14027	Return files opened by process
14028	Return network connections opened by a process as a list of namedtuples.
14029	Check if a user is in a certain group. Superuser check can be skipped.
14030	Load a class by a fully qualified class_path.
14031	Calculate percentage usage of 'used' against 'total'.
14032	Decorator for memoizing function results
14033	Decorator to mark functions as deprecated with an optional replacement suggestion.
14034	Login into Google Docs with user authentication info.
14035	Parse GDocs key from Spreadsheet url.
14036	Make sure temp directory exists and create one if it does not.
14037	Delete temporary files created during communicator operations.
14038	Uploads file to GDocs spreadsheet with optional content type.
14039	Synchronizes local po files with translations on GDocs Spreadsheet.
14040	Download csv files from GDocs and convert them into po files structure.
14041	Uploads all po files to GDocs ignoring conflicts by converting them to ods and sending to a GDocs Spreadsheet.
14042	Clears the GDoc Spreadsheet by uploading an empty CSV file.
14043	Start a new qtconsole connected to the kernel.
14044	Check whether the URL is accessible and returns HTTP 200 OK or raises ValidationError if not.
14045	Check if the HTML page contains the specified content and return a boolean result.
14046	Return the HTTP response code from visiting the provided URL.
14047	Helper function that compares the content type header of a URL with a given content type and returns a boolean.
14048	Compares the response code of a URL with a given code and returns a boolean result.
14049	Validate display data with source, data, and optional metadata. Checks types of source, data, and metadata for errors.
14050	Clear the output of the cell receiving output.
14051	Find the absolute path to an executable command in a cross-platform manner. Use `which` on Unix/Linux/OS X and `win32api` on Windows. Return the path of the first version on the user's `PATH` unless the command is `python`, in which case return the absolute path of `sys.executable`. Raises an error if the command is not found.
14052	Construct a list of CodeUnits from polymorphic inputs.
14053	A base for a flat filename to correspond to this code unit, replacing dots and slashes with underscores.
14054	Return an open file for reading the source of the code unit.
14055	Does it seem like the file should contain Python based on its extension?
14056	Converts a timedelta object to total seconds.
14057	Returns result when it arrives, raises TimeoutError or RemoteError if conditions not met
14058	Wait until the result is available or until `timeout` seconds pass.
14059	Get the results as a dict, keyed by engine_id. Adjusts for any engine with core results exceeding a single iteration.
14060	Abort ongoing tasks.
14061	Elapsed time since initial submission
14062	interactive wait, printing progress at regular intervals
14063	Republish individual displaypub content dicts.
14064	Wait for the 'status=idle' message to indicate all outputs are ready. with timeout option.
14065	Wait for a result to complete, handling local and remote calls with timeouts and exception handling.
14066	Return the absolute normalized form of `filename`.
14067	Prepare file patterns for use in a `FnmatchMatcher`. If a pattern starts with a wildcard, it is used as is. Otherwise, it is made absolute with the current directory. If `patterns` is None, an empty list is returned.
14068	Find the path separator used in this string, or os.sep if none.
14069	Yield all of the importable Python files in `dirname`, recursively.
14070	Return the relative form of a filename based on the current directory of the `FileLocator`.
14071	Return a canonical filename for a given filename by resolving any relative paths, removing redundant components, and normalizing the case.
14072	Get data from filename if it is a zip file path.
Return the string data read from the zip file or None.
Handle cases where zip file cannot be found or file isn't in it.
Return empty string if file is empty.
14073	Does `fpath` indicate a file in one of our trees?
14074	Does `fpath` match one of our filename patterns?
14075	Map `path` through aliases, replacing root with result root based on first matching pattern. Adjusts separator style to match result. Returns unchanged if no patterns match.
14076	Start a kernel with PyQt4 event loop integration.
14077	Start a kernel with wx event loop support.
14078	Starts a kernel with the Tk event loop.
14079	Start the kernel, coordinating with the GTK event loop
14080	Start the kernel, coordinating with the Cocoa CFRunLoop event loop via the matplotlib MacOSX backend.
14081	Enable integration with a given GUI.
14082	Creates an NxN element of the Gaussian Orthogonal Ensemble
14083	Compute the eigvals of mat and then find the center eigval difference.
14084	Generate num eigenvalue diffs for the NxN GOE ensemble.
14085	Initialize the item with the context and step address.
14086	Parse a YAML file containing test steps and return a list of Step objects.
14087	Parses a step dictionary, validating and processing action and modifier configurations to create a step or a list of steps.
14088	Create a crash handler and register it to handle exceptions.
14089	Search for and load configuration file(s), handling errors as needed.
14090	Initialize the profile directory
14091	Auto generate default config file and stage it into the profile.
14092	Write the collected coverage data to a file with an optional suffix.
14093	Erase data from the object and its file storage.
14094	Return the map from filenames to lists of line numbers executed.
14095	Return the map from filenames to lists of line number pairs.
14096	Write the coverage data to filename using pickle format.
14097	Read the coverage data from a specified file.
14098	Read raw pickled data from a file.
14099	Read coverage data from a file.
14100	Combine data from multiple files with a common prefix, optionally using path aliases, and remove the original files after combining.
14101	Adds executed line data to the instance.
14102	Adds measured arc data to the object, updating existing entries for each filename and arc.
14103	Contribute filename's data to the Md5Hash hasher.
14104	Return a dict summarizing the coverage data. Keys are based on the filenames, and values are the number of executed lines. If `fullpath` is true, then the keys are the full pathnames of the files, otherwise they are the basenames of the files.
14105	Yield pasted lines until the user enters a given sentinel value.
14106	Start the mainloop, allowing optional banner override and handling KeyboardInterrupt.
14107	Store multiple lines as a single entry in history
14108	Write a prompt and read a line. The returned line does not include the trailing newline.
14109	Syntax error handler loop until error fixed or user cancels.
14110	Checks if the current environment needs recompilation for a syntax error.
14111	Handle interactive exit by calling ask_exit callback after confirmation.
14112	Parses the given repository URL to return the correct repository URL and revision.
14113	Create and return new frontend attached to new kernel, launched on localhost.
14114	Configure the coloring of the widget based on color schemes and styles.
14115	Return connection info for this object's sockets.
14116	Convert R object to numpy array, favoring structured arrays for data.frames
14117	Return the entire source file and starting line number for an object
14118	Set own color table and make it the active scheme. Also set debugger colors.
14119	Toggle between the currently active color scheme and NoColor.
14120	Return formatted traceback.
14121	Generates a color-formatted string with traceback information for an exception.
14122	Format a list of traceback entry tuples for printing. Given a list of tuples as returned by extract_tb() or extract_stack(), return a list of strings ready for printing. Each string in the resulting list corresponds to the item with the same index in the argument list. Each string ends in a newline; the strings may contain internal newlines as well, for those items whose source text line is not None.
14123	Formats the exception part of a traceback
14124	Only print the exception type and message, without a traceback.
14125	Call up the pdb debugger if desired, always clean up the tb reference.
14126	Switches to the desired mode or cycles through available modes if none specified. Adjusts whether to include variable details and sets the join character for text tracebacks.
14127	Decorator for views that checks whether a user belongs to a particular group and enforcing login and permission redirection if necessary.
14128	Handles 'from module import a, b, c' imports.
14129	Add a line of source to the code.
14130	Adds a section, a sub-CodeBuilder, to the code and returns it.
14131	Compile code and return function `fn_name`.
14132	Generate a Python expression for `expr`. Handles | and . delimiters.
14133	Render this template by applying it to `context`.
14134	Evaluate dotted expressions at runtime.
14135	Render a partial template with context and return the output
14136	Activate the default formatters and return a dictionary mapping format types to formatter instances.
14137	Add a format function for a given type.
14138	Add a format function for a type specified by the full dotted module and name of the type.
14139	Format float_precision and set float_format accordingly.
14140	Return path to any existing user config files
14141	Configure the nose running environment. Execute configure before collecting tests with nose.TestCollector to enable output capture and other features.
14142	Configure logging for nose or optionally other packages. Allows setting logger levels and propagating log messages.
14143	Configure the working directory or directories for the test run.
14144	Very dumb 'pager' in Python. Prints text line by line, with option to paginate through it.
14145	Print a string, paging through it if it exceeds the specified length. Optionally use a custom pager command or auto-detect the system pager. If paging fails, use a basic Python pager.
14146	Page a file, using an optional pager command and starting line.
14147	Return a pager command.
14148	Return the string for paging files with an offset.
14149	Print a string snipping the midsection to fit in width. Modes control for full printing or interactive viewing. Return 1 if snipping was necessary, 0 otherwise.
14150	A function to pretty print sympy Basic objects.
14151	A function to display sympy expression using inline style LaTeX in PNG.
14152	Display a sympy expression using display style LaTeX in PNG.
14153	Returns True if type o can be printed with LaTeX
14154	Generates the LaTeX representation of sympy expressions
14155	Add options to a parser for backwards compatibility.
14156	Validate that the input is a list of strings. Raises ValueError if not.
14157	Checks if a dictionary has string keys and values, raises ValueError if not.
14158	Run my loop, ignoring EINTR events in the poller.
14159	Handle received message by unpacking it and calling handlers.
14160	This method is used to execute code in the kernel, handling optional parameters for user variables, expressions, and stdin, and returning the message ID of the executed request.
14161	This function performs tab completion in the kernel's namespace based on the provided text, line, cursor position, and optional block of code. It constructs a message with the completion details and sends it through the session, returning the message ID of the sent request.
14162	This method is used to retrieve metadata information about an object, returning the message ID of the sent request.
14163	This function retrieves entries from the history list based on specified parameters and returns the message ID of the sent request.
14164	This function requests an immediate kernel shutdown and returns the message ID of the shutdown request.
14165	Immediately processes all pending messages on the SUB channel.
14166	Send a string of raw input to the kernel.
14167	Starts the channels for this kernel. This will create the channels if they do not exist and then start them. If port numbers of 0 are being used (random ports) then you must first call :method:`start_kernel`. If the channels have been stopped and you call this, :class:`RuntimeError` will be raised.
14168	Stops all the running channels for this kernel.
14169	Check if any of the channels (shell, sub, stdin, hb) are created and running.
14170	load connection info from JSON dict in self.connection_file
14171	Write connection info to JSON dict in self.connection_file.
14172	Starts a kernel process and configures the manager to use it. If random ports are being used, this method must be called before the channels are created. Raises an error if the IP is not local.
14173	Attempts to stop the kernel process cleanly. If it cannot be stopped, it is killed, if possible.
14174	Restart a kernel with the arguments used to launch it, optionally forcefully immediately or after cleanup. Update kernel launch arguments if provided.
14175	Kills the running kernel.
14176	Interrupts the kernel.
14177	Sends a signal to the kernel, limited to Unix systems due to SIGTERM support on Windows.
14178	Is the kernel process still running?
14179	Get the REQ socket channel object to make requests of the kernel.
14180	Get the SUB socket channel object.
14181	Get the heartbeat socket channel object to check that the kernel is alive.
14182	Bind an Engine's Kernel to be used as a full IPython kernel.
14183	Emit a debugging message depending on the debugging level.
14184	Retrieve the extension classes in priority order. Return a list of extension classes, in proper priority order.
14185	Called prior to executing a step, returns True if the step is to be skipped, False otherwise.
14186	Called after executing a step.
14187	Called at the end of processing to emit additional data or alter the return value.
14188	Walks an unpacked egg's contents, skipping the metadata directory
14189	Check whether module possibly uses unsafe-for-zipfile stuff
14190	Create and run the IPython controller. Handle subprocesses on Windows to prevent infinite Controller starts.
14191	Saves a connection dictionary to a JSON file, handling location if not provided.
14192	load config from existing json connector files.
14193	Load and process secondary config from JSON, set defaults, and handle potential errors.
14194	Submit a cell for parallel execution.
14195	Enable %autopx mode by overriding the run_cell method.
14196	Disable %autopx by restoring the original InteractiveShell.run_cell.
14197	Replace local cell execution with remote execution. Handles prefiltering, history storage, syntax checking, and execution errors.
14198	Internal "CLOCK_CHANNEL" consumer to process task runs.
14199	Run a task's callable.
14200	Remove a task from the database using its ID.
14201	Patch the protocol's makeConnection and connectionLost methods to make the protocol and its transport behave more like `Agent` expectations.
14202	Patch a method onto an object if it isn't already there.
14203	Accept a pending connection.
14204	Rejects a pending connection.
14205	Returns an IAgent that makes requests to this fake server.
14206	Calls pre and post save hooks.
14207	Calls pre and post delete hooks for DeleteViews
14208	Use SaveHookMixin pre_save to set the user.
14209	Write a report summarizing coverage statistics per module
14210	Check whether some modules need to be reloaded.
14211	Open the default editor at the given filename and line number. This is IPython's default editor hook, which you can use as an example to write your own modified one. To set your own editor function as the new editor hook, call ip.set_hook('editor', yourfunc).
14212	Open editor at filename, linenum, column and show error message. Support for VIM editor only, falls back on 'editor' hook if VIM not used.
14213	Get text from the clipboard.
14214	Add a function to the command chain with a specified priority.
14215	Try to create a Distribution 'path_or_module'.
14216	Configure which kinds of exceptions trigger plugin.
14217	Import and return an object given a string in the format 'package.module'.
14218	Attempt to make an ssh connection without a password using Paramiko if available.
14219	Try passwordless login with shell ssh command.
14220	Try passwordless login with paramiko.
14221	Connect a socket to an address via an ssh tunnel.
14222	Opens a tunneled connection from a 0MQ url.
14223	Stop scheduling tasks because an engine has been unregistered from a pure ZMQ scheduler
14224	unwrap exception, and remap engine_id to int.
14225	Register a new engine, and update our connection info.
14226	Unregister an engine that has died.
14227	Saves the reply to an execute_request into the results dictionary. Handles different statuses: ok, aborted, and resubmitted.
14228	Flush notifications of engine registrations waiting in ZMQ queue.
14229	Flush task or queue results waiting in ZMQ queue.
14230	Flush replies from the control channel waiting in the ZMQ queue.
14231	Flush ignored control replies
14232	Flush replies from the iopub channel waiting in the ZMQ queue.
14233	Periodically spins a function until stopped.
14234	Stop background spin_thread, if any
14235	Flush any registration notifications and execution results waiting in the ZMQ queue.
14236	Waits on one or more `jobs`, for up to `timeout` seconds. Returns `True` when all msg_ids are done, or `False` if a timeout occurred.
14237	construct and send an apply message via a socket.
14238	Construct and send an execute request via a socket.
14239	Retrieve a result by msg_id or history index, wrapped in an AsyncResult object.
14240	Fetch the status of engine queues.
14241	Tell the Hub to forget results.
14242	This function retrieves the history of messages `msg_ids` sent through a hub, ordered by the time of task submission.
14243	Query the Hub's TaskRecord database using a MongoDB query dict and optionally specify keys to return. Returns a list of task record dicts that match the query. Handles buffer data as well.
14244	Return a set of opcodes by the names in names.
14245	Create a ByteParser on demand.
14246	Find the lines matching one of a list of regexes. Returns a set of line numbers.
14247	Parse the source to find interesting facts about its lines.
14248	Return the first line number of the statement including `line`.
14249	Skip any line mentioned in `ignores` and return a set of the first lines.
14250	Parse source text to find executable and excluded line numbers, normalize reported line numbers.
14251	Return a sorted list of line number pairs for arcs in the code, normalized to the first line of multiline statements.
14252	Get a mapping from line numbers to count of exits from that line, excluding certain lines.
14253	Iterate over all the code objects nested within this one, including `self` as the first value.
14254	Maps byte offsets to line numbers in code using co_lnotab, producing a sequence of tuples.
14255	Find statements in `self.code`. Yield line numbers of statements found by recursively exploring reachable code objects.
14256	Get a string version of block_stack for debugging.
14257	Split the code object into a list of Chunk objects. Each chunk is only entered at its first instruction, though there can be many exits from a chunk. Returns a list of Chunk objects.
14258	Ensure each chunk has a single valid entrance.
14259	Finds the executable arcs in the code. Yields pairs: (from,to) where from and to are integer line numbers. Entries and exits from the code object are also included.
14260	Return s a list of Chunk objects for this code and its children.
14261	Get the set of all arcs in this code object and its children.
14262	Adds options to command line for coverage configuration.
14263	Begin recording coverage information.
14264	Output code coverage report.
14265	If inclusive coverage enabled, return true for all source files in wanted packages.
14266	Generate alternative interpretations of a source distro name.
14267	Open a urllib2 request, handling HTTP authentication.
14268	Obtain a distribution suitable for fulfilling a requirement
14269	get parent from obj.
14270	Returns the root topic based on the engine's ID if available.
14271	renders context aware template
14272	Configure plugin. Plugin is enabled by default.
14273	Add captured output to error report
14274	Turn a list into a list of lists
14275	Convert a notebook to the v3 format.
14276	Convert a hex color to rgb integer tuple.
14277	Construct the styles for a stylesheet from a template.
14278	Return a QFont object of the requested family, using fallback as replacement if the requested family is not found.
14279	Reimplements handling of execute_reply to support prompt requests.
14280	Handles history tail replies for IPython kernel
14281	Reimplemented for IPython-style "display hook". Handle message and append output based on data type (HTML or text/plain).
14282	Handle display data message and process it based on content type.
14283	Reimplement `_started_channels` to make a history request and load GUI reference.
14284	Executes a file using the 'run' magic with path normalization and filename quoting as needed.
14285	Reimplements traceback formatting for IPython.
14286	Reimplemented to dispatch payloads to handler methods
14287	Sets the widget style to the class defaults based on the specified color scheme
14288	Opens a Python script for editing
14289	Given a prompt number, returns an HTML In prompt.
14290	Given a plain text version of an In prompt, returns an HTML continuation prompt.
14291	Set the style sheets of the underlying widgets.
14292	Sets the style for the syntax highlighter based on the syntax style or style sheet if syntax style is not provided.
14293	Handle response from the CloudStack API, optionally polling for final result.
14294	Generate a signature for API requests using the provided URL parameters and API secret.
14295	Remove the first level of a nested dictionary in a CloudStack API response.
14296	Return system virtual memory as a namedtuple.
14297	Return system per-CPU times as a named tuple
14298	Return real, effective and saved user ids.
14299	Return real, effective and saved group ids.
14300	Return the number of threads belonging to the process.
14301	Return files opened by process as a list of namedtuples.
14302	Get short form of commit hash given directory `pkg_path`.
14303	Return dict describing the context of this package.
14304	Returns useful information about IPython and the system as a string.
14305	Return the number of active CPUs on a Darwin system
14306	Retrieves the number of available CPUs in the system as an integer.
14307	Advances to the next result set. Returns None if there are no more result sets.
14308	Fetches a single row from the cursor.
14309	Fetch up to size rows from the cursor with a default to cursor.arraysize.
14310	Fetchs all available rows from the cursor.
14311	Connect to peers and synchronize tree, pub_url, and root_id.
14312	Read a JSON notebook from a string and apply version-specific conversions.
14313	Read a .py notebook from a string and return the NotebookNode object.
14314	Read a notebook from a string and return the NotebookNode object. Properly handles notebooks of any version, always returning the notebook in the current version's format.
14315	Converts a notebook to a string in a given format (json, ipynb, or py) using the appropriate write function.
14316	Write a notebook to a file in a given format in the current nbformat version.
14317	Converts IPython notebooks to ones with notebook metadata.
14318	Try to load a value from a dictionary using a given key. If the key does not exist, mark the state as unset.
14319	Checks if a name matches certain patterns based on include and exclude configurations.
14320	Is the class a wanted test class?
14321	Is the directory a wanted test directory?
14322	Is the file a wanted test file? The file must be a python source file and match testMatch or include, and not match exclude. Files that match ignore are *never* wanted, regardless of plugin, testMatch, include or exclude settings.
14323	Is the function a test function?
14324	Is the method a test method?
14325	Check if the module is a test module based on name and plugin preferences.
14326	Returns the contents of a named file as a list of lines, handling IOError by returning an empty list.
14327	List command for pydb
14328	Print lines from a file with optional line numbers and arrows for the current line.
14329	Call the debugger interface to magic_pdef with the provided arguments.
14330	Generates a multiplying factor used to convert two currencies
14331	Converts an amount of money from one currency to another on a specified date.
14332	Compute the return of the currency between two dates.
14333	Return the given stream's encoding or a default. If the stream does not have an encoding or if the encoding is False, return the default value.
14334	Return IPython's guess for the default encoding for bytes as text.
14335	write connection info to JSON file
14336	starts the heartbeat server
14337	Display connection info and store ports.
14338	Initialize our session object.
14339	Redirect input streams and set a display hook.
14340	Create the Kernel object itself.
14341	construct connection function that handles tunnels
14342	Sends registration request to controller
14343	Converts html content to plain text.
14344	Converts markdown content to text
14345	Returns a fully qualified app domain name.
14346	Define command line options for the plugin to exclude directories from test discovery.
14347	Configures the plugin based on command line options, loads excluded directories from files, and normalizes directory names.
14348	Check if directory is eligible for test discovery
14349	Check if 'ext' links to a dynamic lib in the same package
14350	Calls each function in the provided list and returns the value of the last function, or None if the list is empty.
14351	Calls each function from the reversed list and returns the last function's value or None if the list is empty.
14352	Append a function with given arguments and keywords.
14353	Insert a function with given arguments and keywords at the specified index.
14354	Ensure one newline between usage and first heading if no description
14355	Initialize the app.
14356	Creates a .pid file in the pid_dir with my pid. Raises an error if the file already exists without overwrite.
14357	Remove the pid file. This should be called at shutdown by registering a callback with :func:`reactor.addSystemEventTrigger`.
14358	Get the PID from the pid file. Raises a PIDFileError if the file doesn't exist or if the contents are invalid.
14359	Construct an argument parser using the function decorations.
14360	Find the real name of the magic function.
14361	Reimplements a function to selectively highlight text blocks, considering prompts and excluding them from highlighting.
14362	Reimplemented to temporarily enable highlighting if disabled
14363	Reimplemented to highlight selectively. Adjusts start position by current offset and then calls superclass method.
14364	Copy the currently selected text to the clipboard, removing prompts.
14365	Execute 'source'. If 'hidden', do not show any output.
14366	Clear input buffer.Flush highlighting flag if not reading.
14367	Handle tab key press. Determine if to continue processing event.
14368	Reimplemented to add an action for raw copy
14369	Reimplemented for execution interruption and smart backspace.
14370	Reimplemented for auto-indentation.Insert continuation prompt with spaces.
14371	Handles replies for tab completion.
14372	Silently execute an expression in the kernel and call a callback with the result.
14373	Execute callback corresponding to msg reply after _silent_exec_callback.
14374	Handles replies for code execution.
14375	Handle requests for raw_input.
14376	Handle the kernel's death by asking if the user wants to restart.
14377	Handles replies for call tips.
14378	Handle display hook output log debug show text
14379	Handles stdout, stderr, and stdin
14380	Handle shutdown signal only if from other console.
14381	Attempts to execute file with specified path. If 'hidden', no output is shown.
14382	Attempts to interrupt the running kernel and unsets _reading flag.
14383	Resets widget state, clears or shows kernel restart message.
14384	Attempts to restart the running kernel
14385	Shows a call tip, if appropriate, at the current cursor location.
14386	Performs completion at the current cursor location.
14387	Process a reply for an execution request that resulted in an error
14388	Handle a successful execution request by processing payload items and printing a warning for unknown types.
14389	Called whenever the document's content changes. Display a call tip if appropriate.
14390	Adds plugin to list if it has specified attribute.
14391	Call plugins in a chain, passing the result of each call to the next as input, and return the final output.
14392	Call all plugins, yielding each item in each non - None result.
14393	Call all plugins, returning the first non-None result.
14394	Configure the set of plugins with the given options and config instance. After configuration, disabled plugins are removed from the plugins list.
14395	Load plugins by iterating the `nose.plugins` entry point.
14396	Load plugins from nose.plugins.builtin
14397	Render a LaTeX string to PNG.
14398	Render LaTeX to HTML with embedded PNG data using data URIs.
14399	Convert math expression to image file.
14400	Find an installed distribution that satisfies or conflicts with this requirement, and set self.satisfied_by or self.conflicts_with appropriately.
14401	Return a generator yielding a Process class instance for all running processes on the local machine.
14402	Return a float representing the current system-wide CPU utilization as a percentage over a specified interval.
14403	Return process information as a hashable dictionary.
14404	Retrieves and possibly refines the process name based on platform and cmdline.
14405	Gets the process executable path, guessing if not available.
14406	Return the children of this process as a list of Process objects. If recursive is True, return all parent descendants.
14407	Returns the current process CPU utilization as a percentage, blocking for the given interval if specified.
14408	Calculate process memory utilization as a percentage.
14409	Return process's mapped memory regions as a list of nameduples, grouped or not, based on the platform.
14410	Check whether the process is running by comparing its creation time with the system's current process creation time.
14411	Suspend process execution.
14412	Resume process execution. Safety check. Handle PID reuse. Resume on Windows. Continue on Posix.
14413	Kill the current process.
14414	Wait for process to terminate and, if process is a children of the current one, return its exit code, else None
14415	Initialize the kernel inside GTK. Runs only once at startup.
14416	Hijack key functions in GTK for IPython integration by replacing them with a dummy to prevent user code from blocking IPython.
14417	Check if the identifier is defined in shadowing namespaces.
14418	Create the default transformers.
14419	Registers a transformer instance.
14420	Unregister a transformer instance.
14421	Create the default checkers.
14422	Register a checker instance.
14423	Unregister a checker instance.
14424	Create the default handlers.
14425	Register a handler instance by name with esc_strings.
14426	Unregister a handler instance by name with esc_strings.
14427	Prefilter a line that has been converted to a LineInfo object. Implements the checker/handler part of the prefilter pipe.
14428	Find a handler for the line_info by trying checkers.
14429	Calls the enabled transformers in order of increasing priority.
14430	Prefilters a single input line as text by calling transformers and checkers/handlers.
14431	Prefilters multiple input lines of text. Calls prefilter_line for each line. Handles multiline input correctly.
14432	Instance of IPyAutocall in user_ns gets autocalled immediately
14433	Allow ! and !! in multi-line statements if multi_line_specials is on
14434	Check for escape character and return handler accordingly
14435	Checks if the initial identifier on the line is an alias.
14436	Handle normal input lines. Use as a template for handlers.
14437	Handle alias input lines.
14438	Execute the line in a shell, empty return value
14439	Execute magic functions.
14440	Handle lines which can be auto-executed, quoting if requested.
14441	Try to get help for the object. Handles 'obj?' or '?obj' for basic info, and 'obj??' or '??obj' for more details.
14442	Reimplemented to hide on certain key presses and on text edit focus changes.
14443	Reimplemented to cancel the hide timer.
14444	Reimplements to paint the background panel.
14445	Attempts to display the specified call line and truncated docstring at the current cursor location.
14446	Attempts to show the specified tip at the current cursor location. Adjusts position to ensure the tip fits on the screen.
14447	Updates the tip based on user cursor movement.
14448	Create a property that proxies attributeproxied_attrthrough the local attribute local_attr.
14449	Canonicalizes a path relative to a given working directory. That is, the path, if not absolute, is interpreted relative to the working directory, then converted to absolute form.
14450	Schema validation helper. Performs JSONSchema validation. If a schema validation error is encountered, an exception of the designated class is raised with the validation error message appropriately simplified and passed as the sole positional argument.
14451	Retrieve a read-only subordinate mapping. All values are stringified, and sensitive values are masked. The subordinate mapping implements the context manager protocol for convenience.
14452	Return True if in a venv and no system site packages.
14453	Parallel word frequency counter.
14454	Convert a function based decorator into a class based decorator usable on class based Views.
14455	Return list of shell aliases to auto-define.
14456	Define an alias without raising an AliasError.
14457	Define a new alias after validating it.Raises an AliasError if there are validation problems.
14458	Validate an alias and return the number of arguments.
14459	Call an alias given its name and the rest of the line.
14460	Transform alias to system command string
14461	Expand an alias in the command line
14462	Produce rst from nose help.
14463	Resets graphics attributes to their default values.
14464	Yields substrings for which the same escape code applies.
14465	Returns a QColor for a given color code, or None if one cannot be constructed.
14466	Returns a QTextCharFormat that encodes the current style attributes.
14467	Generate a one-time JWT with an age in seconds.
14468	use a thread lock on current method, if self.lock is defined
14469	Remove expired JWTs from the cache.
14470	Checks if the JWT has been used before. If not, records the current time and returns False.
14471	Validate a JWT token's validity and authenticity.
14472	Uses a semaphore to ensure thread-safe access to a function.
14473	Computes the longest common prefix of a list of strings, with special treatment for escape characters in IPython commands.
14474	Event filter to ensure console-like behavior and handle specific events.
14475	Reimplemented to suggest a size that is 80 characters wide and 25 lines high.
14476	Check if text can be cut to the clipboard based on cursor selection and buffer position.
14477	Check if text can be pasted from the clipboard.
14478	Clear the console, with option to keep input buffer.
14479	Copy selected text to clipboard and delete from buffer if possible
14480	Executes source or the input buffer, possibly prompting for more input.
14481	The function `_get_input_buffer` retrieves the user's input text at the current prompt. If the console is currently executing, it returns the executing text. Otherwise, it extracts the input buffer by selecting text from the prompt position to the end cursor, removing any continuation prompts.
14482	Sets the text in the input buffer
14483	Sets the base font for the ConsoleWidget to the specified QFont and updates related components.
14484	Paste clipboard contents into the input region
14485	Print contents of ConsoleWidget to specified QPrinter.
14486	Moves the prompt to the top of the viewport. Adjusts the cursor if not already at the prompt and sets the top cursor.
14487	Sets the font to the default fixed-width font for the platform.
14488	A low-level method for appending content to the end of the buffer. If 'before_prompt' is enabled, the content will be inserted before the current prompt, if there is one.
14489	Appends HTML at the end of the console buffer.
14490	Append HTML and return plain text version.
14491	Append plain text, processing ANSI codes if enabled.
14492	Clears the "temporary text" buffer, i.e. all text following the prompt region.
14493	Performs completion with 'items' at the specified cursor location.
14494	Fill the area below the active editing zone with text.
14495	Given a KeyboardModifiers flags object, return whether the Control key is down. Consider the Command key as a synonym for Control on Mac OS when include_command is True.
14496	Creates and connects the underlying text widget.
14497	Creates and connects the underlying paging widget.
14498	Filter key events for the paging widget to create console-like interface.
14499	Given a QTextBlock, return its unformatted text.
14500	Returns a cursor for the last character.
14501	Returns the column of the cursor in the input buffer, excluding the contribution by the prompt, or -1 if there is no such column.
14502	Get the text of the line in the input buffer that contains the cursor, excluding the prompt. Return None if there is no such line.
14503	Return a cursor for the prompt position.
14504	Return a cursor with text selected between the positions 'start' and 'end'.
14505	Inserts new continuation prompt using the specified cursor.
14506	Insert HTML using the specified cursor in such a way that future formatting is unaffected.
14507	Inserts HTML using the specified cursor, then returns its plain text version.
14508	Insert plain text using specified cursor, processing ANSI codes if enabled.
14509	Ensures that the cursor is inside the editing region. Returns whether the cursor was moved.
14510	Cancels the current editing task ala Ctrl-G in Emacs.
14511	Displays text using the pager if it exceeds the height of the viewport.
14512	Called immediately after a new prompt is displayed.
14513	Reads one line of input from the user.
14514	Set the continuation prompt in HTML or plain text
14515	Scroll the viewport so that the specified cursor is at the top.
14516	Writes a new prompt at the end of the buffer.
14517	Expands the vertical scrollbar beyond the range set by Qt.
14518	Entry point for pkginfo tool. Parses options, processes metadata for specified paths, formats and outputs the results.
14519	Copies a default config file into the active profile directory.This function moves these from that location to the working profile directory.
14520	Creates a profile directory by profile name and path.
14521	Find an existing profile dir by profile name, return its ProfileDir.
14522	Converts a cmp= function into a key= function
14523	Read a file and close it. Returns the file source.
14524	Take multiple lines of input. A list with each line of input as a separate element is returned when a termination string is entered (defaults to a single '.'). Input can also terminate via EOF (^D in Unix, ^Z-RET in Windows).

Lines of input which end in \\ are joined into single entries (and a secondary continuation prompt is issued as long as the user terminates lines with \\). This allows entering very long strings which are still meant to be treated as single entities.
14525	Create a temporary Python file and return the filename and file handle.
14526	Close the file and restore the channel.
14527	Write data to both channels.
14528	Adds a new handler for new hearts
14529	Add a new handler for heart failure
14530	Handles a heart beat message, checks if it is valid and records the response time.
14531	Converts a list into a list of lists with equal batch_size. Optionally randomizes the sequence before batching.
14532	Splits a path filename string into the path and filename.
14533	A generator for walking a directory tree, returning files that match a specified pattern. Option to recurse through sub-folders.
14534	Displays progress information with estimated time remaining.
14535	Converts time durations to more readable units (seconds, minutes, hours).
14536	Extract configuration data from a bdist_wininst .exe
14537	Ensure the importer caches don't have stale info for `path`.
14538	Quote a command line argument according to Windows parsing rules
14539	Verify that there are no conflicting "old-style" packages.
14540	Ensure fetcher options from easy_install are available to bdist_egg.
14541	Create directories under home directory specified in config_vars if they don't exist.
14542	Return True if `name` is considered as an archive file.
14543	Returns a mutable proxy for the `obj`, with modifications on the proxy not applying to the original object.
14544	Returns a read-only proxy for the `obj`. Modifications on the proxy do not affect the original object. Raises an AttributeError if `error_on_set` is True.
14545	Create a new section cell with a given integer level.
14546	Create a new metadata node.
14547	Create a new author with optional name, email, affiliation, and URL.
14548	Check if given path points to a writable directory.
14549	Remove leading and trailing quotes from filenames on Windows.
14550	Return a valid python filename in the current directory. If the given name is not a file, it adds '.py' and searches again. Raises IOError with an informative message if the file isn't found. On Windows, apply Windows semantics to the filename.
14551	Find a file by looking through a sequence of paths. Raises IOError if the file does not exist in any of the search paths.
14552	Return the 'home' directory, as a unicode string.
14553	Return the XDG_CONFIG_HOME if it is defined and exists, else None.
14554	Get the IPython directory for the current platform and user, typically located in the home directory under .ipython, or XDG_CONFIG_HOME if specified. If not writable, use a temporary directory instead.
14555	Get the base directory where IPython itself is installed.
14556	Find the path to an IPython module in this version of IPython.
14557	Determine whether a target is out of date by comparing its modification time with that of its dependencies
14558	Make an MD5 hash of a file, ignoring line ending characters.
14559	Checks for old IPython config files and presents a warning if they exist, guiding the user to the new config system.
14560	Updates the suggestions' dictionary for an object upon visiting its page.
14561	Gets a list with a certain size of suggestions for an object
14562	Get a list of all suggestions for an object based on visits.
14563	Return this path as a relative path, based from the current working directory.
14564	Return a list of path objects that match the pattern.
14565	Open a file, read all lines into a list, and handle Unicode encoding, error handling, and newline characters according to specified options.
14566	Calculate the md5 hash for this file.
14567	Create profile stats file and load profiler.
14568	Output profiler report.
14569	Clean up stats file, if configured to do so.
14570	Handle CLI command
14571	Enable event loop integration with wxPython.
14572	Disable event loop integration with wxPython. Sets PyOS_InputHook to NULL.
14573	Disable event loop integration with PyQt4. Sets PyOS_InputHook to NULL.
14574	Enable event loop integration with PyGTK.
14575	Enable event loop integration with Tk. If no app is given, create a new one.
14576	Enable event loop integration with pyglet.
14577	save the wave log
14578	Initialize a database connection and create necessary tables if they don't exist.
14579	Prepares and runs an SQL query for the history database. Returns tuples as :meth:`get_range`.
14580	Retrieve info about a session based on a given session number.
14581	Get the last n lines from the history database.
14582	Get lines of history from a string of ranges as used by magic commands %hist, %save, %macro, etc.
14583	Get default history file name based on the Shell's profile.
14584	Give the current session a name in the history database
14585	Clear the session history, releasing all object references, and optionally open a new session.
14586	Get input and output history from the current session.
14587	Saves outputs from a prompt to the database if logging is enabled.
14588	Write any entries in the cache to the database. Handle integrity errors by creating a new session and retrying the write operation. Clear the cache after writing.
14589	This can be called from the main thread to safely stop this thread. It sets a flag to stop and signals the HistoryManager to end the session.
14590	Return the number of CPUs on the system.
14591	Return a list of namedtuple representing the CPU times for every CPU available on the system.
14592	Return mounted disk partitions as a list of nameduples.
14593	Returns a list of PIDs currently running on the system.
14594	Convert a pair of numbers into a nice string representation, showing a range if the numbers are different.
14595	Nicely format a list of line numbers by coalescing consecutive groups of lines.
14596	Return a string summarizing the call stack.
14597	A decorator to cache the result of an expensive operation. Only applies to methods with no arguments.
14598	Combines a list of regexes into one that matches any of them.
14599	Remove a file, ignoring if it doesn't exist.
14600	Add `v` to the hash, recursively if needed.
14601	List all profiles in the ipython_dir and cwd, and add them to the profiles dictionary if not already present.
14602	Start a cluster for a given profile.
14603	Stop a cluster for a given profile.
14604	Find the full path to a .bat or .exe using the win32api module.
14605	Reads output and error streams from a subprocess, prints them to stdout and stderr, and waits for the process to finish.
14606	Find code units to report on based on modules or filenames, applying include and omit filters.
14607	Run a reporting function on multiple morfs.
14608	Decorator to test that a function raises one of the specified exceptions to pass.
14609	Call pdb.set_trace in the calling frame while restoring sys.stdout to the real output stream.
14610	Decorator to ensure a function completes within a specified time limit.
14611	Load all IPython extensions in IPythonApp.extensions.
14612	Run the pre-flight code specified via exec_lines, including startup files, exec lines, exec files, and command line code. Flush stdout and stderr to detach output from the first cell. Hide defined variables from %who etc.
14613	Run lines of code in IPythonApp.exec_lines in the user's namespace.
14614	Run files from profile startup directory
14615	Run files from IPythonApp.exec_files
14616	Run code or file specified at the command-line.
14617	Run module specified at the command-line. Make sure that the module gets a proper sys.argv as if it were run using `python -m`.
14618	Create a flexible generic function with type and object-specific methods.
14619	Return the path to a data file of ours. Searches `STATIC_PATH` directories and optionally `pkgdir` subdirectory. Raises exception if file not found.
14620	Return the contents of a data file
14621	HTML-escape the text in `t`. Convert special chars into entities, replace runs of spaces with `&nbsp;`.
14622	Generate an HTML report for a list of modules or filenames.
14623	Make local instances of static files for HTML report.
14624	Write `html` to `fname`, properly encoded.
14625	Compute a hash that changes if the file needs to be re-reported.
14626	Generates the index.html file for the report containing totals and file data.
14627	Read the last status in the specified directory.
14628	Writes the current status to directory.
14629	Sort and compare two lists.
14630	Return a slice of a sequence with variable step, specifying start, stop, and step.
14631	Chop a sequence into chunks of given size.
14632	Read configuration from setup.cfg and modify global state based on the configuration.
14633	Read existing configuration from MANIFEST.in and update IGNORE and IGNORE_REGEXPS accordingly.
14634	Compile a glob pattern into a regexp. Fix Windows compatibility issue.
14635	Does this filename match any of the patterns?
14636	List all files versioned by git in the current directory.
14637	Start a new kernel.
14638	Stops a kernel by its unique identifier and removes it from the kernel manager.
14639	Kill a kernel by its kernel uuid.
14640	Get the single KernelManager object for a kernel by its uuid. Raises KeyError if kernel with id not found.
14641	Returns a dictionary of ports for a kernel.
14642	Return the notebook_id for a kernel_id or None.
14643	Start a kernel for a notebook and return its kernel_id.
14644	Shutdown a kernel and remove its notebook association.
14645	Interrupt a kernel and log the action.
14646	Restart a kernel while keeping clients connected.
14647	Create a new iopub stream.
14648	Create a new shell stream.
14649	Create a new hb stream.
14650	Resets all OneTimeProperty attributes.
14651	Export the contents of the ConsoleWidget as HTML.
14652	Exports Qt HTML as XHTML with inline SVGs.
14653	Wrapper for ensuring image_tag returns utf8-encoded str on Python 2
14654	Transforms a Qt-generated HTML string into a standards-compliant one.
14655	Displays a dialog for exporting HTML generated by Qt's rich text system. Returns the name of the file that was saved, or None if no file was saved.
14656	Returns a unique instance of `klass` or None
14657	Builds a query for included terms in a text search.
14658	Builds a query for both included & excluded terms in a text search.
14659	Query for if date_field is within number of "days" ago.
14660	Query for if date_field is within number of "days" from now
14661	Query for null or blank field.
14662	Converts queries to case insensitive for special fields.
14663	Register command line options.
14664	Verify whether a method has the required attributes.
14665	Check if method's attributes match
14666	Rotate the kill ring, then yank back the new top.
14667	Backport patches from newer pyzmq for compatibility with older versions.
14668	Returns an XSD-schema-enabled lxml parser from a WSDL or XSD.
14669	Convert HTTP[S]://host[:port] to WS[S]://host[:port]
14670	Reserializes a reply message using JSON. Takes the msg list from the ZMQ socket, unserializes it using self.session, and then serializes the result using JSON. Method used by self._on_zmq_reply to build messages for the browser.
14671	Inject the first message, which is the document cookie, for authentication.
14672	Start heartbeating and call callback if kernel dies.
14673	Only start the hb loop if we haven't been closed during the wait.
14674	Stop the heartbeating and cancel all related callbacks.
14675	Load file object. Read data and parse into blocks.
14676	Get current block index validate and check status. Returns None if demo is finished.
14677	Move the current seek pointer to the given block using a zero-based index. If the index is negative, it is interpreted as an offset from the end. The method also validates the index and updates the seek pointer and finished status.
14678	Edit a block. If no number is given, use the last block executed. This edits the in-memory copy of the demo, not the original source file.
14679	Show a single block on screen
14680	Display the demo on screen, block by block.
14681	Processes a collection in series, applying a method to each item and returning the modified collection.
14682	Process a collection in parallel batches, each batch processes in series on a single process.
14683	Sets up a thread pool to process a sequence in parallel using the specified function, optionally running in series if thread pool creation fails.
14684	Applies a method to a collection in parallel using multiple processes.
14685	Decorator to wrap `with obj` around a function.
14686	Function decorator to enter context one by one.
14687	Get source from a traceback object. Return a tuple of lines of context and the current line index.
14688	Find inspectable lines around err line, considering indent level and line continuation.
14689	Create a countdown.
14690	Shuts down all subprocesses opened in a cleanup routine.
14691	A modifier hook function. This is called in priority order prior to invoking the Action for the step. This allows a modifier to alter the context, or to take over subsequent action invocation. Returns None if the modifier is taking no action. Returns a StepResult object with state SKIPPED if the condition does not evaluate to True.
14692	A modifier hook function invoked after an action, allowing inspection and alteration of the result.
14693	Saves IDs after a method call, keeping history and outstanding attributes updated.
14694	Sync relevant results from self.client to our results attribute.
14695	Call spin after the method.
14696	Get all messages that are currently ready.
14697	Gets a message if there is one that is ready.
14698	Wrapper for property with options to specify getter, setter, and deleter.
14699	'get_onlys' is a decorator to create multiple properties for class attributes.
14700	Parses a database URL and extracts relevant information into a configuration dictionary.
14701	Return the list containing the names of the modules available in the given folder.
14702	Returns a list containing the names of all the modules available in thefolders of the pythonpath.
14703	Create a trivial completer for a command
14704	Returns a list of completion possibilities for an import line based on the input.
14705	Complete files that end in .py or .ipy for the %run command.
14706	Completer function for 'cd', filtering to return only directory names.
14707	Escape an XML attribute. Value can be unicode.
14708	Configure the xunit plugin.
14709	Writes an Xunit-formatted XML file reporting test errors and failures.
14710	Add error output to Xunit report
14711	Add failure output to Xunit report.
14712	Add success output to Xunit report.
14713	Pick two at random, use the LRU of the two.
14714	Pick two random elements using inverse load as weight. Return the less loaded of the two.
14715	Register a new engine.
14716	Unregister an unavailable engine and handle potentially finished tasks.
14717	Handle jobs stranded in an engine after it died. Dispatch fake error replies for each lost task and clean up completed/failed lists.
14718	Dispatch job submission to appropriate handlers.
14719	Auds all waiting tasks for expired timeouts.
14720	a task has become unreachable, send a reply with an ImpossibleDependency error.
14721	Check location dependencies and run job if they are met.
14722	Save a message for later submission when its dependencies are met.
14723	Submit a task to any of a subset of targets.
14724	Handles result replies by parsing message, checking dependencies, and dispatching results accordingly.
14725	Handle a task result, update data structures, and notify client
14726	Handle an unmet dependency. Update job status accordingly.
14727	Update dependency graph and submit runnable jobs
14728	Generate a new log-file with a default header.Raises RuntimeError if the log has already been started.
14729	Prints a status message about the logger's state, including whether it's active or suspended, log file details, and settings for output and input logging.
14730	Write the sources to a log.
14731	Write data to the log file, if active
14732	Fully stop logging and close log file. In order to start logging again, a new logstart() call needs to be made, possibly (though not necessarily) with a new filename, mode and other options.
14733	Creates a worksheet by name with a list of cells.
14734	Adds a target 'string' for dispatching
14735	Register a callback for a regular expression with a priority
14736	Gets a sequence of Commandchain objects that match the given key.
14737	Yield all 'value' targets, without priority
14738	Checks if the new notebook directory exists and is a directory, creates it if it doesn't exist. Raises an error if the new path is not a directory or if it cannot be created.
14739	List all notebooks in the notebook dir. Returns a sorted list of dicts containing notebook_id and name.
14740	Generates a new notebook_id for a name and stores its mappings.
14741	Deletes a notebook's id only. This doesn't delete the actual notebook.
14742	Does a notebook exist?
14743	Return a full path to a notebook given its notebook_id.
14744	Return a full path to a notebook given its name.
14745	Get the representation of a notebook in the specified format by notebook_id.
14746	Get the NotebookNode representation of a notebook by notebook_id.
14747	Save a new notebook and return its notebook_id. If a name is passed in, it overrides any values in the notebook data and the value in the data is updated to use that value.
14748	Saves an existing notebook by notebook_id after validating the format and JSON data. Optionally updates the name and saves the notebook object.
14749	Saves an existing notebook object by notebook_id, updating its name and saving both .json and .py files.
14750	Delete notebook by notebook_id. Raises 404 if notebook does not exist.
14751	Create a new notebook and return its notebook_id.
14752	Copy an existing notebook and return its notebook_id.
14753	Return all physical tokens, even line continuations.
14754	Generate a series of lines for source code, tokenizing each line into pairs of token classes and text. Concatenating and joining these lines reconstructs the original source code, ignoring trailing whitespace and final line newlines.
14755	Load the default configuration file from the specified or default ipython_dir.
14756	Return a list of classes with specific order for initialization.
14757	Override to allow old '-pylab' flag with deprecation warning
14758	Do actions after construct, but before starting the app.
14759	Initialize the InteractiveShell instance.
14760	optionally display the banner
14761	Return a string representation of a value and its type for readable error messages.
14762	Converts the name argument to a list of names, handling strings and None.
14763	Set the default value on a per instance basis. This method is called by :meth:`instance_init` to create and validate the default value. The creation and validation of default values must be delayed until the parent :class:`HasTraits` class has been instantiated.
14764	Setup a handler to be called when a trait changes.
14765	Returns a list of traits based on metadata criteria.
14766	Get metadata values for trait by key.
14767	Validates that the value is a valid object instance.
14768	Instantiate a default value instance. Unique instance created for each HasTraits instance.
14769	Check whether our dependencies have been met.
14770	Return whether this dependency has become impossible
14771	Represent this dependency as a dictionary for JSON compatibility.
14772	get depth of an element in the tree
14773	Print a binary tree
14774	accept either IP address or dns name, and return IP
14775	parallel reduce followed by broadcast of the result
14776	Converts valid targets argument to a list of integer IDs
14777	Handle traffic for messages, identities, and switch topics.
14778	Route registration requests and queries from clients. Handles different message types and invokes appropriate handlers. Logs errors and sends error responses if necessary.
14779	Handler for new heart start. Triggers registration completion. Ignores unknown hearts.
14780	Handle a heart failure event, unregister the engine if it is still active.
14781	Save the submission of a task, handling resubmissions and conflicts.
14782	save the result of a completed task
14783	save an iopub message into the db
14784	Reply with connection addresses for clients.
14785	Register a new engine, validate ID and heartbeat uniqueness, and send registration reply.
14786	Unregisters an engine that explicitly requested to leave, handling the unregistration process and sending a notification.
14787	Second half of engine registration, called after the HeartMonitor receives a beat from the Engine's Heart.
14788	Handle shutdown request and notify other clients.
14789	Purge results from memory. This method is more valuable before we move to a DB-based message storage mechanism.
14790	Decompose a TaskRecord dict into subsections for get_result.
14791	Get the result of 1 or more messages.
14792	Get a list of all msg_ids in our DB records
14793	Perform a raw query on the task record database.
14794	go to the path, yields a context manager to change and then revert the current working directory
14795	Return a standard message from command output.
14796	Run subprocess command under R root directory.
14797	Execute R script
14798	Calls the frontend handler associated with the message type of the given message.
14799	Returns whether a reply from the kernel originated from a request from this frontend.
14800	Run the report.
14801	Annotate a single file by adding coverage information.
14802	Get installed package version and return None if package is not installed.
14803	Coerce unicode back to bytestrings
14804	Given a message or header, return the header as a dictionary.
14805	check packers for binary data and datetime support
14806	Return the nested message dict.
14807	Sign a message with HMAC digest. If no auth, return b''.
14808	Serializes the message components to bytes. Inverse of unserialize. Handles message parts and produces a list of bytes to send.
14809	Build and send a message via stream or socket. Constructs a message from given parameters and sends it using the provided stream. Handles serialization and optional tracking. Returns the constructed message or a tuple including the message and a tracker if tracking is enabled.
14810	Send a raw message via ident path.
14811	Receive and unpack a message from a socket.
14812	Splits the identities from the rest of the message. Feeds until DELIM is reached, then returns the prefix as idents and remainder as msg_list.
14813	Unserialize a msg_list to a nested message dict. This is roughly the inverse of serialize. The serialize/unserialize methods work with full message lists, whereas pack/unpack work with the individual message parts in the message list.
14814	Prompts the user to save an SVG document to disk.
14815	Copy an SVG document to the clipboard.
14816	Convert a SVG document to a QImage.
14817	Make an object info dict with all fields present.
14818	Attempts to retrieve the docstring of an object using a stable wrapper around inspect.getdoc, and falls back to inspect.getdoc if that fails.
14819	Wrapper around inspect.getsource. This can be modified by other projects to provide customized source extraction.
14820	Get the names and default values of a function's arguments.
14821	Extracts call tip data from an oinfo dict, optionally formatting the call line as a string or returning a tuple of (name, argspec). Returns the formatted call info and the most relevant docstring for calling purposes.
14822	Find the absolute path to the file where an object was defined.
14823	Find the line number in a file where an object was defined.
14824	Return the definition header for any callable object. If an exception is generated, None is returned instead and the exception is suppressed.
14825	Return a header string with proper colors.
14826	Generic message when no information is found.
14827	Prints the definition header for callable objects, handling classes and instances.
14828	Print the docstring for any object
14829	Print the source code for an object.
14830	Show the whole file where an object was defined.
14831	Formats a list of fields for display.
14832	Show detailed information about an object. Optional arguments include object name, formatter, precomputed info structure, and detail level. Display fields are generated based on object type and detail level. Output is sent to printer/pager.
14833	Search namespaces with wildcards for objects.
14834	Start the Twisted reactor in a separate thread, if not already done. Returns the reactor.
14835	Wraps a test function with a Twisted Deferred, making the test wait for the deferred to be triggered. The test runs inside the Twisted event loop, and an optional timeout parameter specifies the maximum duration of the test. The decorator checks for common syntax mistakes and catches exceptions raised in the test body.
14836	Return best matching substring of corpus.
14837	Encodes the stored `data` to XML and returns a `string`. Setting `indent` to `False` foregoes pretty-printing, and setting `declaration` to `False` skips the XML declaration.
14838	Encodes the stored data to XML and returns an lxml.etree value.
14839	Recursively loads all modules from a package object or set of package objects and returns a list of unique modules.
14840	Invert a dictionary where values are lists, mapping elements back to original keys
14841	Merge two Structs with customizable conflict resolution
14842	Convert object to primitive type for serialization.
14843	Parse and send the colored source.
14844	Get a list of matplotlib figures by figure numbers.
14845	Converts a figure to svg or png for inline display.
14846	Wrap safe_execfile with matplotlib-aware rendering.
14847	Select figure format for inline backend, either 'png' or 'svg'. Using this method ensures only one figure format is active at a time.
14848	Given a gui string returns the gui and mpl backend
14849	Activates the specified matplotlib backend, sets interactive mode, and applies a decorator to track whether `show()` is called.
14850	Configure an IPython shell object for matplotlib use.
14851	Activate pylab mode in the user's namespace.Loads and initializes numpy, matplotlib and friends for interactive use.
14852	The trace function captures events in code execution, records line profiles, and manages tracing data for analysis.
14853	Starts the Tracer and returns a function for use with sys.settrace().
14854	Stop the Tracer.
14855	Start a new Tracer object and store it in self.tracers.
14856	Called on new threads, installs the real tracer.
14857	Start collecting trace information.
14858	Stops collecting trace information and resumes the previous one if any.
14859	Pause tracing, print tracer stats.
14860	Resume tracing after a `pause`.
14861	Return the line data collected. Data is { filename: { lineno: None, ...}, ...}
14862	check a result dict for errors, and raise CompositeError if any exist. Passthrough otherwise.
14863	Render one or all of my tracebacks to a list of lines
14864	Call this at Python startup to measure coverage if the environment variable COVERAGE_PROCESS_START is defined. The value of the variable is the config file to use. This function can be invoked by adding lines to either sitecustomize.py or a .pth file in the Python installation.
14865	Return the canonical directory of the module or file `morf`.
14866	Return the source file for a given filename, handling specific extensions.
14867	Decides whether to trace execution in a given file, considering various conditions and returns a canonicalized filename with the reason for the decision.
14868	Decide whether to trace execution in `filename`. Calls `_should_trace_with_reason`, and returns just the decision.
14869	Adds a warning message to the instance's warning list and writes it to stderr.
14870	Update the source_match matcher with latest imported packages.
14871	Start measuring code coverage. Coverage measurement occurs in functions called after start is invoked. Statements in the same scope as start won't be measured. Once you invoke start, you must also call stop eventually, or your process might not shut down cleanly.
14872	Clean up on process shutdown.
14873	Exclude source lines from execution consideration by adding a regular expression to a specified list.
14874	Return a compiled regex for the given exclusion list.
14875	Save the collected coverage data to the data file
14876	Combine together a number of similarly-named coverage data files.
14877	Get collected data and reset the collector.Warn about problems collecting data.
14878	Like `analysis2` but doesn't return excluded line numbers.
14879	Analyze a module to determine its coverage statistics.
14880	Analyze a single morf or code unit. Returns an `Analysis` object.
14881	Write a summary report to file. Each module in morfs with counts of statements, executed, missing statements, and lines missed. Include/exclude modules based on filename patterns. Returns total percentage covered.
14882	Annotate a list of modules. Each module is annotated, and the source code is written to a new file with coverage markers.
14883	Generate an HTML report. The HTML is written to the specified directory. The file "index.html" is the overview starting point. Returns the total percentage covered.
14884	Generate an XML report of coverage results.
14885	Display a Python object in all frontends.
14886	Display the HTML representation of an object.
14887	Display the SVG representation of an object.
14888	Displays the PNG representation of one or more Python objects. If raw data is provided, it directly displays the PNG data.
14889	Displays the JPEG representation of an object.
14890	Display the LaTeX representation of an object.
14891	Display the JSON representation of an object.
14892	Display the Javascript representation of an object.
14893	Reloads the raw data from a file or URL.
14894	Find the full path to a command using which.
14895	Execute a command in a subshell and return the child's exit status.
14896	Forward read events from an FD over a socket using a ZeroMQ forwarder thread.
14897	Loop through lines in self.fd, and send them over self.sock.
14898	Return a launcher class for a given clsname and kind.
14899	Start the app for the stop subcommand.
14900	import and instantiate a Launcher based on importstring
14901	Starts the app for the engines subcommand.
14902	Start the app for the start subcommand.
14903	Create a new wx app or return an exiting one.
14904	Check if the wx event loop is running
14905	Start the wx event loop in a consistent manner. If app is None, get the app. If the event loop is not running, set _in_event_loop to True, call MainLoop, then set _in_event_loop to False. If the event loop is running, set _in_event_loop to True.
14906	Create a new qt4 app or return an existing one.
14907	Is the qt4 event loop running.
14908	Start the qt4 event loop in a consistent manner. If app is None, get a new one. If the event loop is not running, start it and set app._in_event_loop to True. If it is running, set app._in_event_loop to True anyway.
14909	Returns a blank canvas for annotation.
14910	Draws a cross on the canvas at a specified position with a given color and radius.
14911	Draws a line between two positions on a canvas using a specified color.
14912	Write text at specified row, col position with given color and font size
14913	Returns a canvas from a grayscale image by populating selected channels.
14914	Returns a unique ID of a given length. User `version=2` for cross-systems uniqueness.
14915	Build a unique key from GET data using the current site's domain and an encoded URL.
14916	Returns domain name portion of a URL
14917	Parse and return dictionary from URL parameters.
