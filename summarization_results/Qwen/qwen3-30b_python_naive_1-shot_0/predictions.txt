0	Convert XML to URL List.
1	Downloads Dailymotion videos by URL.
2	Downloads Sina videos by URL.
3	Format text with color or other effects into ANSI escaped string.
4	Print a log message to standard error.
5	Print an error log message.
6	What a Terrible Failure!
7	Detect operating system.
8	Download Vimeo videos by channel ID.
9	Parse CKPlayer XML information and extract video details into a dictionary.
10	Splicing URLs according to video ID to get video details
11	Give you the real URLs.
12	Converts a string to a valid filename.
13	Downloads CBS videos by URL.
14	Override the original download method to handle different download and display options including JSON output, info only mode, stream selection, and caption handling.
15	Download Acfun video by vid.
16	Scans through a string for substrings matched some patterns.
17	Parses the query string of a URL and returns the value of a parameter.
18	Gets the content of a URL via sending a HTTP GET request.
19	Post the content of a URL via sending a HTTP POST request.
20	Parses host name and port number from a string.
21	Get room ID from room URL key by parsing HTML content.
22	Get a proper title with courseid+topicID+partID.
23	Download a whole course by reusing API calls to save time.
24	Download ONE PART of the course.
25	Checks if a task is either queued or running in this executor.
26	Returns and flushes the event buffer, optionally filtered by specified DAG IDs.
27	Returns a snowflake.connection object.
28	Returns AWS credentials (aws_access_key_id, aws_secret_access_key) from extra connection details.
29	Fetches a field from extras and returns it.
30	Executes SQL using psycopg2 copy_expert method for COPY commands without superuser access.
31	Dumps a database table into a tab-delimited file.
32	Uploads the file to Google Cloud Storage.
33	Gets the max partition for a table.
34	Returns a MySQL connection object with configured parameters.
35	Returns the state of a TaskInstance at the command line.
36	Monitor and restart Gunicorn worker processes periodically based on state transitions.
37	Retrieves connection to Cloud Translate.
38	Translate a string or list of strings.
39	Retrieves a resource containing information about a Cloud SQL instance.
40	Creates a new Cloud SQL instance.
41	Updates settings of a Cloud SQL instance.
42	Deletes a Cloud SQL instance.
43	Retrieves a database resource from a Cloud SQL instance.
44	Creates a new database inside a Cloud SQL instance.
45	Updates a database resource inside a Cloud SQL instance using patch semantics.
46	Deletes a database from a Cloud SQL instance.
47	Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL dump or CSV file.
48	Starts Cloud SQL Proxy.

### Summary:
Starts the Cloud SQL Proxy process, handles directory creation, and monitors the proxy's startup process until it's ready for new connections or an error occurs. Raises exceptions if the proxy is already running or if there are startup errors.
49	Stops the running proxy and performs cleanup operations including removing the proxy process, socket directory, downloaded proxy file, and credentials file.
50	Returns version of the Cloud SQL Proxy.
51	Create connection in the Connection table, according to whether it uses proxy, TCP, UNIX sockets, SSL. Connection ID will be randomly generated.
52	Retrieves the dynamically created connection from the Connection table.
53	Delete the dynamically created connection from the Connection table.
54	Retrieve Cloud SQL Proxy runner. It is used to manage the proxy lifecycle per task.
55	Retrieve database hook. This is the actual Postgres or MySQL database hook that uses proxy or connects directly to the Google Cloud SQL database.
56	Clean up database hook after it was used.
57	Reserve a free TCP port for Cloud SQL Proxy use.
58	Replaces invalid MLEngine job_id characters with '_' and adds a leading 'z' if job_id starts with an invalid character.
59	Extract error code from ftp exception
60	Remove any existing DAG runs for the perf test DAGs.
61	Remove any existing task instances for the perf test DAGs.
62	Toggle the pause state of the DAGs in the test.
63	Print operational metrics for the scheduler test.
64	Override the scheduler heartbeat to determine when the test is complete.
65	Invoke Lambda Function
66	Creates Operators needed for model evaluation and returns three chained operators for prediction, summary, and validation.
67	Creates the directory specified by path, creating intermediate directories as necessary. If directory already exists, this is a no-op.
68	Convert a string to a numeric value if possible, otherwise return the original string.
69	Make a naive datetime.datetime in a given time zone aware.
70	Make an aware datetime.datetime naive in a given time zone.
71	Wrapper around datetime.datetime that adds settings.TIMEZONE if tzinfo not specified
72	Establish a connection to druid broker.
73	Returns http session for use with requests
74	Performs the request to the specified endpoint with the given data, headers, and options.
75	Check the status code and raise an AirflowException exception on non 2XX or 3XX status codes.
76	Grabs extra options like timeout and actually runs the request, checking for the result.
77	Contextmanager that will create and teardown a session.
78	Function decorator that provides a session if it isn't provided.
79	Clear out the database
80	Parses a DatabaseError to provide a better error message.
81	Get a set of records from Presto.
82	Get a pandas dataframe from a SQL query.
83	Execute the statement against Presto. Can be used to create views.
84	A generic way to insert a set of tuples into a table.
85	Return a cosmos db client.
86	Checks if a collection exists in CosmosDB.
87	Creates a new collection in the CosmosDB database.
88	Checks if a database exists in CosmosDB.
89	Creates a new database in CosmosDB.
90	Deletes an existing database in CosmosDB.
91	Deletes an existing collection in the CosmosDB database.
92	Insert a list of new documents into an existing collection in the CosmosDB database.
93	Delete an existing document out of a collection in the CosmosDB database.
94	Get a document from an existing collection in the CosmosDB database.
95	Get a list of documents from an existing collection in the CosmosDB database via SQL query.
96	Returns the Cloud Function with the given name.
97	Creates a new function in Cloud Function in the specified location.
98	Updates Cloud Functions according to the specified update mask.
99	Uploads zip file with sources to a specified location.
100	Deletes the specified Cloud Function.
101	Wrapper around the private _get_dep_statuses method that contains some global checks for all dependencies.
102	Returns whether or not this dependency is met for a given task instance.
103	Returns an iterable of strings that explain why this dependency wasn't met.
104	Parses a config file for S3 credentials, supporting boto, s3cmd.conf, and AWS SDK config formats.
105	Get the underlying `botocore.Credentials` object.
106	Returns verticaql connection object
107	Ensure all logging output has been flushed
108	If the path contains a folder with a .zip suffix, then the folder is treated as a zip archive and the path to zip is returned.
109	Traverse a directory and look for Python files.
110	Construct a TaskInstance from the database based on the primary key.
111	Launch DagFileProcessorManager processor and start DAG parsing loop in manager.
112	Send termination signal to DAG parsing processor manager and expect it to terminate all DAG file processors.
113	Helper method to clean up DAG file processors to avoid leaving orphan processes.
114	Use multiple processes to parse and generate tasks for the DAGs in parallel.
115	Parse DAG files repeatedly in a standalone loop.
116	Parse DAG files in a loop controlled by DagParsingSignal until termination or completion.
117	Refresh file paths from dag dir if we haven't done it for too long.
118	Occasionally print out stats about how fast the files are getting processed
119	Clears import errors for files that no longer exist.
120	Print out stats about how files are getting processed.
121	Update this with a new set of paths to DAG definition files.
122	Sleeps until all the processors are done.
123	Periodically processes DAG definition files and returns newly finished SimpleDags.
124	Kill all child processes on exit by first attempting graceful termination with SIGTERM, then forcefully terminating with SIGKILL if necessary.
125	Opens an SSH connection to the remote host.
126	Creates a transfer job that runs periodically.
127	Get the latest state of a long-running operation in Google Storage Transfer Service.
128	Lists long-running operations in Google Storage Transfer Service that match the specified filter.
129	Updates a transfer job that runs periodically.
130	Deletes a transfer job with the specified name and project ID.
131	Cancels a transfer operation in Google Storage Transfer Service.
132	Pauses a transfer operation in Google Storage Transfer Service.
133	Resumes a transfer operation in Google Storage Transfer Service.
134	Waits until the job reaches the expected state.
135	Returns all task reschedules for the task instance and try number, in ascending order.
136	Returns the number of slots open at the moment
137	Runs a command and returns its stdout.
138	Remove an option from config file or default config, with optional removal from both configs.
139	Returns the section as a dict with type-converted values.
140	Allocate IDs for incomplete keys.
141	Begins a new transaction and returns a transaction handle.
142	Commit a transaction, optionally creating, deleting or modifying some entities.
143	Lookup some entities by key.
144	Roll back a transaction.
145	Run a query for entities and return the batch of query results.
146	Gets the latest state of a long-running operation.
147	Deletes the long-running operation.
148	Poll backup operation state until it's completed.
149	Export entities from Cloud Datastore to Cloud Storage for backup.
150	Import a backup from Cloud Storage to Cloud Datastore.
151	Publish a message to a topic or an endpoint.
152	Fetch the hostname using the callable from the config or using `socket.getfqdn` as a fallback.
153	Retrieves connection to Cloud Natural Language service.
154	Finds named entities in the text along with entity types, salience, mentions for each entity, and other properties.
155	A convenience method that provides all the features that analyzeSentiment, analyzeEntities, and analyzeSyntax provide in one call.
156	Classifies a document into categories.
157	Gets template fields for specific operator class.
158	A role that allows you to include a list of template fields in the middle of the text. This is especially useful when writing guides describing how to use the operator. The result is a list of fields where each field is shorted in the literal block.
159	Properly close pooled database connections
160	Ensures that certain subfolders of AIRFLOW_HOME are on the classpath
161	Gets the returned Celery result from the Airflow task ID provided to the sensor, and returns True if the celery result has been finished execution.
162	Return true if the ticket cache contains "conf" information.
163	Transforms a SQLAlchemy model instance into a dictionary.
164	Yield successive chunks of a given size from a list of items.
165	Reduce the given iterable by splitting it into chunks and processing each chunk through the reducer.
166	Given a number of tasks, builds a dependency chain.
167	Returns a pretty ascii table from tuples, with optional headers if namedtuple is used.
168	Given task instance, try_number, and filename_template, return the rendered log filename.
169	Returns a Google Cloud Dataproc service object.
170	Awaits for Google Cloud Dataproc Operation to complete.
171	Coerces content or all values of content (if it is a dict) to a string.
172	Handles the Airflow + Databricks lifecycle logic for a Databricks operator.
173	Run a Pig script using the Pig CLI and return the output.
174	Fetch and return the state of the given celery task.
175	How many Celery tasks should each worker process send.
176	How many Celery tasks should be sent to each worker process.
177	Like a Python builtin dict object, setdefault returns the current value for a key, and if it isn't there, stores the default value and returns it.
178	Returns a Google MLEngine service object.
179	Launches a MLEngine job and waits for it to reach a terminal state.
180	Gets a MLEngine job based on the job name.
181	Waits for the Job to reach a terminal state.
182	Creates a Version on Google Cloud ML Engine and returns the operation if created successfully.
183	Sets a version to be the default. Blocks until finished.
184	Lists all available versions of a model. Blocks until finished.
185	Deletes the given version of a model and blocks until finished.
186	Create a Model. Blocks until finished.
187	Gets a Model. Blocks until finished.
188	Write batch items to dynamodb table with provisioned throughput capacity.
189	Integrate plugins to the context.
190	Creates a new instance of the configured executor if none exists and returns it
191	Creates a new instance of the named executor, falling back to plugins if necessary.
192	Handles error callbacks when using Segment with segment_debug_mode set to True
193	Returns a mssql connection object.
194	Trigger a new dag run for a Dag with an execution date of now unless specified in the data.
195	Delete all DB records related to the specified Dag.
196	Returns a JSON with a task's public instance variables.
197	Get all pools.
198	Create a pool.
199	Delete pool.
200	Create a new container group or update an existing one.
201	Get the state and exitcode of a container group.
202	Get the messages of a container group.
203	Get the tail from logs of a container group.
204	Delete a container group.
205	Test if a container group exists
206	Function decorator that fills unspecified arguments from default_args and provides detailed error messages for missing arguments.
207	Builds an ingest query for an HDFS TSV load.
208	Check for message on subscribed channels and write to xcom the message with key ``message``
209	Returns a set of dag runs for the given search criteria.
210	Returns the task instances for this dag run.
211	Returns the task instance specified by task_id for this dag run.
212	Get the previous DagRun, if there is one
213	Get the previous, SCHEDULED DagRun, if there is one.
214	Determines the overall state of the DagRun based on the state of its TaskInstances.
215	Verifies the DagRun by checking for removed tasks or tasks that are not in the database yet. It will set state to removed or add the task if required.
216	Get the response body and headers from a Jenkins server request.
217	Given a context, this function provides a dictionary of values that can be used to externally reconstruct relations between dags, dag_runs, tasks and task_instances.
218	This function decides whether or not to trigger the remote DAG.
219	Sends a single datapoint metric to DataDog.
220	Queries datadog for a specific metric with the given parameters and returns the results.
221	Gets the DAG out of the dictionary, and refreshes it if expired.
222	Fail given zombie tasks in the current DagBag by marking them as failed and logging the event.
223	Adds the DAG into the bag, recurses into sub dags, and throws AirflowDagCycleException if a cycle is detected.
224	Given a file path or folder, this method looks for Python modules, imports them, and adds them to the dagbag collection.
225	Prints a report around DagBag loading stats
226	Add or subtract days from a YYYY-MM-DD date.
227	Convert date string from one format to another format.
228	Poke matching files in a directory with self.regex and return boolean result based on search criteria.
229	Poke for a non empty directory and return a boolean based on the search criteria.
230	Clears a set of task instances, but makes sure the running ones get killed.
231	Return the try number that this task will be when it is actually run.
232	Generates the shell command required to execute a task instance.
233	Get the very latest state from the database for this task instance.
234	Forces the task instance's state to FAILED in the database.
235	Refreshes the task instance from the database based on the primary key.
236	Clears all XCom data from the database for the task instance.
237	Returns a tuple that identifies the task instance uniquely
238	Checks whether the dependents of this task instance have all succeeded.
239	Get datetime of the next retry if the task instance fails.
240	Checks on whether the task instance is in the right state and timeframe to be retried.
241	Returns a boolean indicating whether the slot pool has room for the task to run.
242	Returns the DagRun for this TaskInstance.
243	Make an XCom available for tasks to pull.
244	Pull XComs that optionally meet certain criteria.
245	Sets the log context.
246	Close and upload local log file to remote storage Wasb.
247	Retrieves connection to Google Compute Engine.
248	Starts an existing instance defined by project_id, zone and resource_id.
249	Sets machine type of an instance defined by project_id, zone and resource_id.
250	Retrieves instance template by project_id and resource_id.
251	Inserts instance template using the specified body and handles the response operation.
252	Retrieves Instance Group Manager by project_id, zone and resource_id.
253	Patches Instance Group Manager with the specified body.
254	Waits for the named operation to complete by checking its status, and raises an exception if the operation fails.
255	Check if bucket_name exists.
256	Creates an Amazon S3 bucket.
257	Checks that a prefix exists in a bucket.
258	List prefixes in a bucket under a specified prefix with optional pagination and delimiter support.
259	List keys in a bucket under a prefix and not containing a delimiter.
260	Checks if a key exists in a bucket.
261	Returns a boto3.s3.Object for the specified key and bucket name.
262	Reads a key from S3 and returns its content as a decoded string.
263	Reads a key with S3 Select and returns the retrieved subset of original data.
264	Checks that a key matching a wildcard expression exists in a bucket.
265	Returns a boto3.s3.Object object matching the wildcard expression
266	Loads a local file to S3.
267	Loads a string to S3.
268	Loads bytes to S3.
269	Loads a file object to S3.
270	Creates a copy of an object that is already stored in S3.
271	Queries cassandra and returns a cursor to the results.
272	Converts a user type to RECORD with fields corresponding to attributes.
273	Send an email with HTML content using SendGrid.
274	Retrieves connection to Cloud Speech.
275	Recognizes audio input using speech recognition service.
276	Call the SparkSqlHook to run the provided sql query.
277	Load AirflowPlugin subclasses from the entrypoints provided.
278	Check whether a potential object is a subclass of the AirflowPlugin class.
279	Sets tasks instances to skipped from the same dag run.
280	Return a AzureDLFileSystem object.
281	Check if a file exists on Azure Data Lake.
282	Upload a file to Azure Data Lake.
283	List files in Azure Data Lake Storage
284	Run Presto Query on Athena
285	Uncompress gz and bz2 files.
286	Queries MSSQL and returns a cursor of results.
287	Decorates function to execute function at the same time submitting action_logging but in CLI context.
288	Builds metrics dictionary from function arguments for Airflow CLI commands.
289	Create the specified cgroup and return the Node associated with it.
290	Delete the specified cgroup.
291	Parse and normalize host information by stripping protocol prefixes to extract the hostname.
292	Perform an API call with retries and return the response in JSON if successful.
293	Sign into Salesforce, only if we are not already signed in.
294	Make a query to Salesforce and return the results.
295	Get the description of a Salesforce object from its schema and metadata.
296	Get a list of all available fields for an object.
297	Get all instances of the specified object from Salesforce with only the specified fields.
298	Convert a column of a dataframe to UNIX timestamps if applicable.
299	Write query results to file in specified format (csv, json, or ndjson) with optional datetime coercion and timestamp recording.
300	Fetches PyMongo Client
301	Fetches a mongo collection object for querying.
302	Replaces many documents in a mongo collection using bulk write operations.
303	Checks the mail folder for mails containing attachments with the given name.
304	Retrieves mail's attachments in the mail folder by its name.
305	Downloads mail's attachments by name to a local directory.
306	Gets all attachments by name for the mail.
307	Gets the file including name and payload.
308	Write batch records to Kinesis Firehose
309	Determines whether a task is ready to be rescheduled based on its state and reschedule requests.
310	Send email using backend specified in EMAIL_BACKEND.
311	Send an email with HTML content via SMTP.
312	Process DateTimes from the DB making sure it is always returning UTC.
313	Check if a blob exists on Azure Blob Storage.
314	Check if a prefix exists on Azure Blob storage.
315	Upload a string to Azure Blob Storage.
316	Read a file from Azure Blob Storage and return as a string.
317	Delete a file from Azure Blob Storage.
318	List a directory in a standardized format by using MLSD command (RFC-3659).
319	Returns a FTP connection object.
320	Returns a list of files on the remote system.
321	Transfers the remote file to a local location.
322	Transfers a local file to the remote location.
323	Returns a datetime object representing the last time the file was modified
324	Call the DiscordWebhookHook to post message
325	Return the FileService object.
326	Check if a directory exists on Azure File Share.
327	Check if a file exists on Azure File Share.
328	Return the list of directories and files stored on a Azure File Share.
329	Create a new directory on an Azure File Share.
330	Upload a file to Azure File Share.
331	Upload a string to Azure File Share.
332	Upload a stream to Azure File Share.
333	Returns a Google Cloud Storage service object.
334	Copies an object from a bucket to another, with renaming if requested.
335	Get a file from Google Cloud Storage.
336	Uploads a local file to Google Cloud Storage.
337	Checks for the existence of a file in Google Cloud Storage.
338	Checks if a blob in Google Cloud Storage is updated after a given timestamp.
339	Deletes an object from the bucket.
340	List all objects from the bucket with the given string prefix in name.
341	Gets the size of a file in Google Cloud Storage.
342	Gets the CRC32c checksum of an object in Google Cloud Storage.
343	Gets the MD5 hash of an object in Google Cloud Storage.
344	Creates a new bucket with the specified parameters, including storage class, location, and labels, and returns the bucket's ID.
345	Composes a list of existing objects into a new object in the same storage bucket.
346	Returns true if training job's secondary status message has changed.
347	Returns a string containing start time and the secondary training job status message.
348	Tar the local file or directory and upload to S3.
349	Extract the S3 operations from the configuration and execute them.
350	Check if an S3 URL exists and validate its bucket and key/prefix.
351	Establish an AWS connection for retrieving logs during training
352	Create a training job.
353	Create a tuning job.
354	Create a transform job.
355	Create an endpoint.
356	Return the training job info associated with job_name and print CloudWatch logs.
357	Check the status of a SageMaker job and wait for it to complete.
358	Display the logs for a given training job, optionally tailing them until the job is complete.
359	Execute the python dataflow job.
360	Run migrations in 'offline' mode.
361	Run migrations in 'online' mode.
362	Deletes the specified Cloud Bigtable instance.
363	Creates a new BigTable instance with specified configuration including main and optional replica clusters.
364	Creates the specified Cloud Bigtable table.
365	Deletes the specified table in Cloud Bigtable.
366	Updates number of nodes in the specified Cloud Bigtable cluster.
367	This function creates the command list from available information for Hive/Beeline CLI execution.
368	This function prepares a list of hiveconf parameters from a dictionary of key-value pairs.
369	Loads a pandas DataFrame into Hive by converting it to CSV format and then loading it into the specified table.
370	Loads a local file into Hive.
371	Returns a Hive thrift client.
372	Checks whether a partition with a given name exists.
373	Check if table exists
374	Returns a Hive connection object.
375	Get results of the provided hql in target schema.
376	Execute hql in target schema and write results to a csv file.
377	Get a set of records from a Hive query.
378	Get a pandas dataframe from a Hive query
379	Retrieves connection to Cloud Vision.
380	Get Dingding endpoint for sending message.
381	Send Dingding message with validation and error handling.
382	Helper method that binds parameters to a SQL query.
383	Helper method that escapes parameters to a SQL query.
384	Helper method that casts a BigQuery row to the appropriate data types.
385	Validate that the given value matches the expected type and raise a TypeError if not.
386	Returns a BigQuery PEP 249 connection object.
387	Returns a BigQuery service object.
388	Checks for the existence of a table in Google BigQuery.
389	Creates a new, empty table in the specified dataset with optional schema, partitioning, clustering, and view definitions.
390	Patch information in an existing table.
391	Cancel all started queries that have not yet completed.
392	Delete an existing table from the dataset; if the table does not exist, return an error unless ignore_if_missing is set to True.
393	Creates a new table in the dataset or updates an existing table if it already exists.
394	Grant authorized view access of a dataset to a view table.
395	Method returns dataset_resource if dataset exist and raises 404 error if dataset does not exist.
396	Method returns full list of BigQuery datasets in the current project.
397	Stream data into BigQuery one record at a time without needing to run a load job.
398	Execute a BigQuery query and return the job ID.
399	Execute a BigQuery query multiple times with different parameters.
400	Helper method for fetchone, which returns the next row from a buffer. If the buffer is empty, attempts to paginate through the result set for the next page, and load it into the buffer.
401	Queries Postgres and returns a cursor to the results.
402	Create all the intermediate directories in a remote host.
403	Create a queue using the connection object.
404	Send message to the queue.
405	Run the task command with optional wrapper and return the process.
406	A callback that should be called when this is done running.
407	Parse options and process commands
408	Generate HTML header content with CSS and JavaScript assets.
409	Generate HTML div for the container.
410	Generate javascript code for the chart.
411	Create X-axis with optional label, format, and date formatting support.
412	Create Y-axis with optional label and formatting options.
413	Returns a sqlite connection object.
414	Decorator to log user actions
415	Make a view compressed with gzip.
416	Returns the last dag run for a dag, None if there was none.
417	Creates a dag run from this dag including the tasks associated with this dag. Returns the dag run.
418	Publish the message to SQS queue
419	Returns a JSON response from a JSON serializable Python object.
420	Opens a file, treating paths with .zip suffixes as zip archives.
421	Used by cache to get a unique key per URL
422	Returns Gcp Video Intelligence Service client
423	Performs video annotation using the specified parameters.
424	Get Opsgenie api_key for creating alert
425	Overwrite HttpHook get_conn because this hook just needs base_url and headers, and does not need generic params
426	Execute the Opsgenie Alert call.
427	Construct the Opsgenie JSON payload by combining relevant parameters into a valid JSON payload dictionary.
428	Call the OpsgenieAlertHook to post message
429	Check if aws conn exists already or create one and return it.
430	Run a Presto query on Athena with the provided configuration and return the submitted query execution ID.
431	Fetch the status of a submitted Athena query and return its state.
432	Poll the status of a submitted Athena query until it reaches a final state and return the final state.
433	Returns an SFTP connection object.
434	Sleep for the time specified in the exception, defaulting to 60 seconds.
435	Call Zendesk API and return results
436	Retrieves the partition values for a table.
437	Get the information of the table.
438	Get the physical location of the table.
439	Return status of a cluster.
440	Delete a cluster and optionally create a snapshot.
441	Gets a list of snapshots for a cluster.
442	Restores a cluster from its snapshot.
443	Creates a snapshot of a cluster.
444	Execute Slack API call without failing the DAG on unsuccessful calls.
445	Creates a job flow using the EMR connection config and overrides.
446	Filter files by minimum size requirement and return filtered results.
447	Filter the result list to remove items matching ignored extensions, optionally logging the filtering process.
448	Execute task by querying MongoDB, transforming data, and loading results into S3.
449	Get pool by a given name.
450	Create a pool with given parameters.
451	Delete pool by a given name.
452	Converts a python dictionary to the provided proto format.
453	Wait for a Google Cloud operation to complete by continuously polling its status until completion or failure.
454	Fetches the operation from Google Cloud.
455	Append labels to provided Cluster Protobuf.
456	Creates a cluster with the specified configuration, handling both dictionary and protobuf inputs, and returns the cluster's URL.
457	Gets details of specified cluster.
458	Given a Discord http_conn_id, return the default webhook endpoint or override if a webhook_endpoint is manually supplied.
459	Construct the Discord JSON payload. All relevant parameters are combined here to a valid Discord JSON payload.
460	Execute the Discord webhook call.
461	Encrypts a plaintext message using Google Cloud KMS.
462	Imports table from remote location to target dir.
463	Imports a specific query from the rdbms to hdfs.
464	Exports Hive table to remote location.
465	Retrieves connection to Cloud Text to Speech.
466	Synthesizes text input into speech audio.
467	Close and upload local log file to remote storage S3.
468	When using git to retrieve the DAGs, use the GitSync Init Container.
469	Defines any necessary environment variables for the pod executor.
470	Defines any necessary secrets for the pod executor.
471	Defines the security context.
472	Get link to qubole command result page.
473	Update the job's heartbeat timestamp in the database and allow external job termination.
474	Launch a process to process the given file.
475	Launch the process and start processing the DAG.
476	Check if the process launched to process this file is done.
477	Helper method to clean up processor_agent to avoid leaving orphan processes.
478	For the DAGs in the given DagBag, record any associated import errors and clears errors for files that no longer have them.
479	Schedule tasks for a single DAG by processing active DAG runs and adding eligible task instances to the queue.
480	For all DAG IDs in the SimpleDagBag, look for task instances in the old_states and set them to new_state if the corresponding DagRun does not exist or exists but is not in the running state.
481	Get the concurrency maps for task instances in the given states.
482	Changes the state of task instances to QUEUED atomically and returns them in SimpleTaskInstance format.
483	Enqueues task instances with queued state using the executor.
484	Attempts to execute TaskInstances that should be executed by the scheduler.
485	If there are tasks left over in the executor, set them back to SCHEDULED to avoid creating hanging tasks.
486	Respond to executor events.
487	Process a Python file containing Airflow DAGs, execute it, and manage DAGs, tasks, and their states in the database.
488	Updates the counters per state of the tasks that were running.
489	Checks if the executor agrees with the state of running task instances and handles state mismatches.
490	Returns a dag run for the given run date, creating one if necessary, while respecting the max_active_runs limit.
491	Returns a map of task instance key to task instance object for the tasks to run in the given dag run.
492	Computes the dag runs and their respective task instances for the given run dates and executes the task instances. Returns a list of execution dates of the dag runs that were executed.
493	Go through the dag_runs and update the state based on the task_instance state. Then set DAG runs that are not finished to failed.
494	Initializes all components required to run a dag for a specified date range and calls helper method to execute the tasks.
495	Self destruct task if state has been moved away from running externally
496	Provides a client for interacting with the Cloud Spanner API.
497	Gets information about a particular instance.
498	Invokes a method on a given instance by applying a specified Callable.
499	Creates a new Cloud Spanner instance.
500	Updates an existing Cloud Spanner instance.
501	Deletes an existing Cloud Spanner instance.
502	Retrieves a database in Cloud Spanner, returning None if it does not exist.
503	Creates a new database in Cloud Spanner.
504	Updates DDL of a database in Cloud Spanner.
505	Drops a database in Cloud Spanner.
506	Pokes for a mail attachment on the mail server.
507	Creates additional_properties parameter based on language_hints, web_detection_params and additional_properties parameters specified by the user.
508	Returns a cassandra Session object, creating a new one if necessary.
509	Checks if a table exists in Cassandra.
510	Checks if a record exists in Cassandra.
511	Construct the command to poll the driver status.
512	Execute a spark-submit job remotely using subprocess.Popen and track its driver status, raising exceptions if the job fails or exits with an error code.
513	Processes the log files and extracts useful information from them, including application IDs, driver pod names, exit codes, and driver IDs based on the deployment mode and tracking requirements.
514	Parses the logs of the spark driver status query process.
515	Get the task runner that can be used to run the given job.
516	Wait for a batch job to complete using either AWS waiters or exponential backoff retry logic.
517	Queries mysql and returns a cursor to the results.
518	Configure a csv writer with the file_handle and write schema as headers for the new file.
519	Writes BigQuery schema in .json format to a local file system and returns a dictionary with filename and file handle.
520	Return a dict of column name and column type based on self.schema if not None.
521	Helper function that maps from MySQL fields to BigQuery fields.
522	Execute sqoop job by importing or exporting data based on the command type.
523	Saves the lineage to XCom and sends it to the backend if configured to do so.
524	Returns the extra property by deserializing json.
525	Generate a list of dates based on a start date, end date, and time delta or cron expression.
526	Convert an array of time durations in seconds to the specified time unit.
527	Get a datetime object representing `n` days ago. By default the time is set to midnight.
528	Initialize the role with the permissions and related view-menus.
529	Delete the given Role
530	Get all the roles associated with the user.
531	Returns a set of tuples with the permission name and view menu name for all user roles.
532	Whether the user has this role name
533	Whether the user has this permission.
534	Clean faulty permissions by removing orphaned PermissionView records and commit the changes.
535	Add the new permission, view_menu to ab_permission_view_role if not exists.
536	Admin should have all the permission-views. Add the missing ones to the table for admin.
537	Set the access policy on the given DAG's ViewModel.
538	Create perm-vm if not exist and insert into FAB security model for all-dags.
539	Deferred load of Fernet key.
540	Checks for existence of the partition in the AWS Glue Catalog table
541	Gets the AwsGlueCatalogHook.
542	Check for message on subscribed queue and write to xcom the message with key ``messages``
543	Returns a snakebite HDFSClient object.
544	Establishes a connection to HDFS depending on the security mode and returns a client object.
545	Check for the existence of a path in HDFS by querying FileStatus.
546	Uploads a file to HDFS.
547	Establish a connection to pinot broker through pinot dbqpi.
548	Get the connection uri for pinot broker.
549	Convert native python ``datetime.date`` object to a format supported by the API
550	Convert native python ``datetime.time`` object to a format supported by the API
551	Returns a Redis connection.
552	Executes the SQL statement and returns a pandas dataframe.
553	Runs a SQL command or a list of SQL commands sequentially with optional parameters and autocommit handling.
554	Sets the autocommit flag on the connection.
555	A generic way to insert a set of tuples into a table, creating a new transaction every commit_every rows.
556	Returns the SQL literal of the cell as a string.
557	An endpoint helping check the health status of the Airflow instance, including metadatabase and scheduler.
558	A restful endpoint that returns external links for a given Operator.
559	Opens a connection to the cloudant service and closes it automatically if used as context manager.
560	Call the SlackWebhookHook to post the provided Slack message
561	Returns the Credentials object for Google API.
562	Returns an authorized HTTP object to be used to build a Google cloud service hook connection.
563	Function decorator that intercepts HTTP Errors and raises AirflowException with more informative message.
564	Decorator that provides fallback for Google Cloud Platform project id.
565	A list of states indicating that a task either has not completed a run or has not even started.
566	Construct the spark-sql command to execute with verbose output enabled by default.
567	Convert a ``PIL Image`` or ``numpy.ndarray`` to tensor.
568	Normalize a tensor image with mean and standard deviation.
569	Resize the input PIL Image to the given size.
570	Pad the given PIL Image on all sides with specified padding mode and fill value.
571	Crop the given PIL Image.
572	Crop the given PIL Image and resize it to desired size.
573	Horizontally flip the given PIL Image.
574	Perform perspective transform of the given PIL Image.
575	Vertically flip the given PIL Image.
576	Crop the given PIL Image into four corners and the central crop.
577	Adjust brightness of a PIL Image.
578	Adjust contrast of an Image.
579	Adjust color saturation of an image.
580	Adjust the hue of an image by converting to HSV color space and shifting the hue channel.
581	Perform gamma correction on an image.
582	Rotate the image by angle.
583	Apply affine transformation on the image keeping image center invariant.
584	Convert image to grayscale version of image.
585	Save a given Tensor into an image file.
586	Finds the class folders in a dataset.
587	Return a Tensor containing the patches
588	Return a Tensor containing the list of labels by reading the info file and extracting the ID of each 3D point.
589	Return a Tensor containing the ground truth matches by reading matches files and extracting 3D point IDs with match indicators.
590	Computes the accuracy over the k top predictions for the specified values of k
591	This function disables printing when not in master process.
592	Download a file from a url and place it in root.
593	List all directories at a given root.
594	List all files ending with a suffix at a given root
595	Download a Google Drive file and place it in root.
596	Get parameters for ``crop`` for a random crop.
597	Get parameters for perspective transformation with random distortion.
598	Get parameters for ``crop`` for a random sized crop.
599	Get a randomized transform to be applied on image.
600	Get parameters for affine transformation
601	Download and extract the tarball, and download each individual photo.
602	Download the MNIST data if it doesn't exist in processed_folder already.
603	Download the EMNIST data if it doesn't exist and process it into torch files.
604	Returns theme name by checking override, cookies, and settings in that order.
605	Return autocompleter results
606	Render preferences page && save user preferences
607	Returns available themes list.
608	Check if the search query contains a bang and create fitting autocompleter results.
609	Remove first and last lines to get only JSON and process currency conversion response.
610	Embeds a custom gradient into a `Tensor`.
611	Convenience function to efficiently construct a MultivariateNormalDiag.
612	Eight-schools joint log-prob.
613	Runs HMC on the eight-schools unnormalized posterior.
614	Decorator to programmatically expand the docstring.
615	Infer the original name passed into a distribution constructor.
616	RandomVariable constructor with a dummy name argument.
617	Wrap an existing distribution as a traceable random variable.
618	Factory function to make random variable given distribution class.
619	Compute one-step-ahead predictive distributions for all timesteps.
620	Construct predictive distribution over future observations using posterior samples.
621	Returns `max` or `mask` if `max` is not finite.
622	Assert all elements of `x` are finite.
623	Assert that tensor `x` has rank equal to or smaller than the specified rank.
624	Computes the number of elements in a tensor with shape `event_shape`.
625	OneHotCategorical helper computing probs, cdf, etc over its support.
626	Return a convert-to-tensor function, given a name, config, callable, etc.
627	Number of `params` needed to create a `MixtureSameFamily` distribution.
628	Yields the top-most interceptor on the thread-local interceptor stack.
629	Decorator that wraps a function so that its execution is intercepted.
630	Context manager for recording interceptable executions onto a tape.
631	Generates synthetic data for binary classification.
632	Utility method to visualize decision boundaries in R^2.
633	Build a Dataset iterator for supervised classification.
634	Validate `map_values` if `validate_args`==True.
635	Runs a transition operator repeatedly and traces its outputs.
636	Calls a transition operator with args, unpacking args if its a sequence.
637	Calls a transition operator function and returns its gradients with respect to the first output.
638	Maybe broadcasts `from_structure` to `to_structure`.

If `from_structure` is a singleton, it is tiled to match the structure of `to_structure`. Note that the elements in `from_structure` are not copied if this tiling occurs.
639	Transforms a log-prob function using a bijector.
640	Perform a single leapfrog step for Hamiltonian Monte Carlo sampling.
641	Performs a Metropolis-Hastings step to probabilistically choose between current and proposed states based on energy change.
642	Perform Hamiltonian Monte Carlo sampling using the given parameters.
643	A function to do simple sign-based control of a variable.
644	Creates a layer from its config.
645	Convert input to Tensor or leave as None.
646	Construct `scale` from various components.
647	Returns a callable that adds a random normal perturbation to the input.
648	Returns a callable that adds a random uniform perturbation to the input.
649	Expand the rank of x up to static_event_rank times for broadcasting.
650	A lower bound on the entropy of this mixture model.
651	Get a list of num_components batchwise probabilities.
652	Validate `outcomes`, `logits` and `probs`'s shapes.
653	Attempt to import tensorflow, and ensure its version is sufficient.
654	Bayesian logistic regression, which returns labels given features.
655	Builds the Covertype data set.
656	Cholesky factor of the covariance matrix of vector-variate random samples.
657	Estimate standard deviation using samples.
658	Estimate variance using samples.
659	Rectify possibly negative axis values by converting them to positive indices.
660	A version of squeeze that works with dynamic axis.
661	Standardize input `x` to a unit normal.
662	Reconstruct input `x` from its normalized version.
663	Build the transition matrix for a semi-local linear trend model.
664	Build the transition noise model for a semi-local linear trend model.
665	Returns a sample from the d-dimensional Halton sequence.
666	Uniform iid sample from the space of permutations.
667	Generates starting points for the Halton sequence procedure.
668	Computes the number of terms in the place value expansion of a number in specified bases.
669	Returns sorted array of primes such that `2 <= prime < n`.
670	Returns the machine epsilon for the supplied dtype.
671	The Hager Zhang line search algorithm.
672	Shrinks the input step size until the value and grad become finite.
673	Brackets the minimum and performs a line search.
674	The main loop of line search after the minimum has been bracketed.
675	Performs bisection and updates the interval.
676	Prepares the arguments for the line search initialization.
677	Wrapper for tf.Print which supports lists and namedtuples for printing.
678	Use Gauss-Hermite quadrature to form quadrature on `K - 1` simplex.
679	Use SoftmaxNormal quantiles to form quadrature on `K - 1` simplex.
680	Helper which checks validity of `loc` and `scale` init args.
681	Helper to infer batch_shape and event_shape.
682	Helper which interpolates between two locs.
683	Helper which interpolates between two scales.
684	Creates weighted `LinOp` from existing `LinOp`.
685	Concatenates input vectors, statically if possible.
686	Multiply tensor of vectors by matrices assuming values stored are logs.
687	Multiply tensor of matrices by vectors assuming values stored are logs.
688	Multiply tensor of vectors by matrices.
689	Tabulate log probabilities from a batch of distributions.
690	Compute marginal pdf for each individual observable.
691	Compute marginal posterior distribution for each state using the forward-backward algorithm.
692	Compute maximum likelihood sequence of hidden states using the Viterbi algorithm.
693	Chooses a random direction in the event space.
694	Applies a single iteration of slice sampling update.
695	Helper which computes `fn_result` if needed.
696	Pads the shape of x to the right to be of rank final_rank.
697	Runs one iteration of Slice Sampler.
698	Built a transformed-normal variational distribution over a parameter's support.
699	Build a loss function for variational inference in STS models.
700	Run an optimizer within the graph to minimize a loss function.
701	Compute mean and variance of a masked time series, accounting for the mask.
702	Get the first unmasked entry of each time series in the batch.
703	Get broadcast batch shape from distributions, statically if possible.
704	Combine MultivariateNormals into a factored joint distribution.
705	Attempt to sum MultivariateNormal distributions.
706	Compute empirical statistics (mean, standard deviation, and centered initial value) of a provided time series or batch of time series.
707	Ensures `observed_time_series_tensor` has a trailing dimension of size 1.
708	Extract a Tensor with canonical shape and optional mask.
709	Construct a predictive normal distribution that mixes over posterior draws.
710	Return the difference between high and low values.
711	Factory for making summary statistics, eg, mean, mode, stddev.
712	Creates `dist_fn_wrapped` which calls `dist_fn` with all prev nodes.
713	Uses arg names to resolve distribution names.
714	Returns the distribution's required args.
715	Calculate the KL divergence between two `JointDistributionSequential`s.
716	Creates `dist_fn`, `dist_fn_wrapped`, `dist_fn_args`.
717	Creates a tuple of tuples representing distribution dependencies.
718	Compute the Shannon entropy in nats for independent distributions.
719	Decorator function for argument bounds checking.
720	Visualizes sequences as TensorBoard summaries.
721	Visualizes the reconstruction of inputs in TensorBoard.
722	Visualizes a qualitative analysis of a given model by generating reconstructions and generations with different sampling modes.
723	Summarize the parameters of a distribution.
724	Summarize the mean of a tensor in nats and bits per unit.
725	Runs the model to generate multivariate normal distribution.
726	Returns an initial state for the LSTM cell.
727	Runs the model to generate a distribution for a single timestep.
728	Runs the model to generate an intermediate representation of x_t.
729	Generate new sequences.
730	Reconstruct the given input sequences by sampling from latent distributions and decoding the results.
731	Sample the static latent prior.
732	Sample the dynamic latent prior.
733	Static batch shape of models represented by this component.
734	Get the runtime batch shape of models represented by this component.
735	Instantiate this model as a Distribution over specified `num_timesteps`.
736	Sample from the joint prior over model parameters and trajectories.
737	Computes the min_event_ndims associated with the given list of bijectors.
738	Convert a vector size to a matrix size.
739	Numpy implementation of `tf.argsort`.
740	Numpy implementation of `tf.sort`.
741	Normal distribution function.

Returns the area under the Gaussian probability density function, integrated from minus infinity to x.
742	Implements ndtr core logic.
743	The inverse of the CDF of the Normal distribution function.
744	Log Normal distribution function.
745	Calculates the asymptotic series used in log_ndtr.
746	The inverse function for erf, the error function.
747	Log Laplace distribution function.
748	Joint log probability function for text message count data with Poisson likelihood and exponential priors.
749	Runs HMC on the text-messages unnormalized posterior.
750	True if the given index_points would yield a univariate marginal.
751	Compute the marginal distribution of this Gaussian process over function values at specified index points.
752	Return `index_points` if not None, else `self._index_points`.
753	Creates an stacked IAF bijector that operates on vector-valued events with specified hidden layers and random seed.
754	Runs one iteration of NeuTra.
755	Trains the bijector and creates initial `previous_kernel_results`.
756	Computes the outer squared difference between two tensors.
757	Enables uniform interface to value and batch jacobian calculation.
758	Disables computation of the second derivatives for a tensor.
759	Performs distributional transform of the mixture samples by applying conditional CDFs to remove distribution parameters and return a sample of Uniform[0, 1] distributions.
760	Split a covariance matrix into block-diagonal marginals of given sizes.
761	Utility method to decompose a joint posterior into components.
762	Decompose an observed time series into contributions from each component.
763	Decompose a forecast distribution into contributions from each component.
764	Converts dense `Tensor` to `SparseTensor`, dropping `ignore_value` cells.
765	Defers an operator overload to `attr`.
766	Human-readable representation of a tensor's numpy value.
767	Sample shape of random variable as a `TensorShape`.
768	Sample shape of random variable as a 1-D `Tensor`.
769	Get tensor that the random variable corresponds to.
770	In a session, computes and returns the value of this random variable.
771	Value as NumPy array, only available for TF Eager.
772	Posterior Normal distribution with conjugate prior on the mean.
773	Build a scale-and-shift function using a multi-layer neural network.
774	Returns a batch of points chosen uniformly from the unit hypersphere.
775	Returns the unnormalized log density of an LKJ distribution.
776	Returns the log normalization of an LKJ distribution.
777	Returns explicit dtype from `args_list` if exists, else preferred_dtype.
778	Factory for implementing summary statistics, eg, mean, stddev, mode.
779	Helper to broadcast a tensor using a list of target tensors.
780	Pdf evaluated at the peak.
781	Estimate a lower bound on effective sample size for each independent chain.
782	ESS computation for one single Tensor argument.
783	Compute potential scale reduction for one single state tensor.
784	Get number of elements of `x` in `axis`, as type `x.dtype`.
785	Broadcast a listable secondary_arg to that of states.
786	Use Gauss-Hermite quadrature to form quadrature on positive-reals.
787	Use LogNormal quantiles to form quadrature on positive-reals.
788	Returns new _Mapping with args merged with self.
789	To support weak referencing, removes cache key from the cache value.
790	Helper to merge which handles merging one value.
791	Converts nested `tuple`, `list`, or `dict` to nested `tuple`.
792	Computes the doubling increments for the left end point in a slice sampling procedure.
793	Finds the index of the optimal set of bounds for each chain.
794	Returns the bounds of the slice at each stage of doubling procedure.
795	Samples from the slice by applying shrinkage for rejected points.
796	For a given x position in each Markov chain, returns the next x using one dimensional slice sampling algorithm.
797	Creates a value-setting interceptor for Edward2 random variable objects.
798	Takes Edward probabilistic program and returns its log joint function.
799	Filters inputs to be compatible with function `f`'s signature.
800	Network block for VGG.
801	Builds a tree at a given tree depth and at a given state for NUTS sampling.
802	Wraps value and gradients function to assist with None gradients.
803	If two given states and momentum do not exhibit a U-turn pattern.
804	Runs one step of leapfrog integration.
805	Log-joint probability given a state's log-probability and momentum.
806	Returns samples from a Bernoulli distribution.
807	Creates a closure that generates `loc` and `scale` parameters using `tf.get_variable`.
808	Creates a function to build Normal distributions with trainable parameters.
809	Creates multivariate standard `Normal` distribution.
810	Deserializes the Keras-serialized function.
811	Serializes function for Keras.
812	Broadcasts `from_structure` to `to_structure`.

If `from_structure` is a singleton, it is tiled to match the structure of `to_structure`. Note that the elements in `from_structure` are not copied if this tiling occurs.
813	Eagerly converts a structure to Tensor, recursing through nested elements if direct conversion fails.
814	Converts `args` to `Tensor`s with optional dtype constraint.
815	Calls a function with arguments, expanding them according to specific rules.
816	Returns `Tensor` attributes related to shape and Python builtins.
817	Creates the mixture of Gaussians prior distribution.
818	Helper utility to make a field of images.
819	Downloads a file.
820	Builds fake MNIST-style data for unit testing.
821	Helper to validate block sizes.
822	Verifies that `parts` don't broadcast.
823	Constructs a trainable `tfd.MultivariateNormalTriL` distribution.
824	Constructs a trainable `tfd.Bernoulli` distribution parameterized by logits.
825	Constructs a trainable `tfd.Normal` distribution.
826	Constructs a trainable `tfd.Poisson` distribution.
827	Applies one step of Euler-Maruyama method.
828	Compute diffusion drift at the current location using Euler-Maruyama method.
829	Helper to `kernel` which computes the log acceptance-correction.
830	Helper which computes `volatility_fn` results and grads, if needed.
831	Helper to broadcast `volatility_parts` to the shape of `state_parts`.
832	Build transition matrix for an autoregressive StateSpaceModel.
833	Computes graph and static `sample_shape`.
834	Calls `fn`, appropriately reshaping its input `x` and output.
835	Calls `fn` and appropriately reshapes its output.
836	The binomial cumulative distribution function.
837	Executes `model`, creating both samples and distributions.
838	Latent Dirichlet Allocation in terms of its generative process.
839	Creates the variational distribution for LDA.
840	Returns the summary of the learned topics.
841	Creates a tf.data.Dataset from the 20 newsgroups dataset with specified parameters.
842	Builds fake data for unit testing.
843	Builds iterators for train and evaluation data.
844	Minimize using Hessian-informed proximal gradient descent.
845	Add control dependencies to the commitment loss to update the codebook.
846	Helper method to save a grid of images to a PNG file.
847	Helper method to save images visualizing model reconstructions.
848	Returns Hugo Larochelle's binary static MNIST tf.data.Dataset.
849	Returns a `np.dtype` based on this `dtype`.
850	Returns a non-reference `dtype` based on this `dtype`.
851	Returns whether this is a boolean data type.
852	Returns whether this is a complex floating point type.
853	Returns the maximum representable value in this data type.
854	Returns the string name for this `dtype`.
855	Returns the number of bytes to represent this `dtype`.
856	Asserts all items are of the same base type.
857	Validate and return float type based on `tensors` and `dtype`.
858	Minimizes the objective function using the Nelder-Mead simplex algorithm.
859	A single iteration of the Nelder Mead algorithm.
860	Creates the condition function pair for a reflection to be accepted.
861	Creates the condition function pair for an expansion.
862	Creates the condition function pair for an outside contraction.
863	Shrinks the simplex around the best vertex.
864	Replaces an element at supplied index.
865	Returns True if the simplex has converged based on function value variation or position tolerance.
866	Computes the initial simplex and the objective values at the simplex.
867	Evaluates the objective function at the specified initial simplex.
868	Constructs a standard axes aligned simplex and evaluates the objective function at its vertices.
869	Evaluates the objective function on a batch of points.
870	Save a PNG plot with histograms of weight means and stddevs.
871	Save a PNG plot visualizing posterior uncertainty on heldout data.
872	Build fake MNIST-style data for unit testing.
873	Returns initializer configuration as a JSON-serializable dict.
874	Instantiates an initializer from a configuration dictionary.
875	Numpy matmul wrapper.
876	Helper to compute stddev, covariance and variance.
877	Compute the log of the exponentially weighted moving mean of the exp.
878	Ensures non-scalar input has at least one column.
879	Generates a Tensor consisting of -1 or +1, chosen uniformly at random.
880	Generates a Tensor of positive reals drawn from a Rayleigh distribution.
881	Convenience function which chooses the condition based on the predicate.
882	Finish computation of log_prob on one element of the inverse image.
883	Finish computation of prob on one element of the inverse image.
884	Helper which rolls left event_dims left or right event_dims right.
885	Inverse of tf.nn.batch_normalization.
886	Check for valid BatchNormalization layer.
887	Slices a single parameter of a distribution according to the specified slices and batch shape.
888	Computes the override dictionary of sliced parameters.
889	Applies a single slicing step to `dist`, returning a new instance.
890	Applies a sequence of slice or copy-with-overrides operations to `dist`.
891	Slices `dist` along its batch dimensions. Helper for tfd.Distribution.
892	Runs multiple Fisher scoring steps.
893	Returns a callable that checks if the fitting procedure has converged based on the relative norm of weight changes.
894	Helper to `fit` which sanitizes input args.
895	Returns number of cols in a given `Tensor`.
896	Wraps original_fn, preferring to call static_fn when inputs are static.
897	Wraps new_fn with the doc of original_fn.
898	Helper function for statically evaluating predicates in `cond`.
899	Computes `rank` given a `Tensor`'s `shape`.
900	Like tf.case, except attempts to statically evaluate predicates.
901	Helper function to standardize op scope.
902	Computes the standard deviation of a mixture distribution given weights and component statistics.
903	Creates a LinearOperator representing a lower triangular matrix.
904	Creates a LinearOperator representing a diagonal matrix.
905	Infer distribution batch and event shapes from a location and scale.
906	Returns `True` if `scale` is a `LinearOperator` that is known to be diag.
907	Helper which checks validity of a scalar `distribution` init arg.
908	Pad dimensions of event tensors for mixture distributions.
909	Convenience function that chooses one of two values based on the predicate.
910	Move a single tensor dimension within its shape.
911	Assert x is a non-negative tensor, and optionally of integers.
912	Returns whether two tensors have the same dynamic shape.
913	Helper which tries to return a static value.
914	Helper returning True if dtype is known to be unsigned.
915	Helper returning True if dtype is known to be signed.
916	Helper returning the largest integer exactly representable by dtype.
917	Helper returning the smallest integer exactly representable by dtype.
918	Helper returning True if dtype.is_integer or is `bool`.
919	Embeds checks that categorical distributions don't have too many classes.
920	Compute the multinomial coefficient for given outcomes and counts.
921	Circularly moves dims left or right.
922	Picks possibly different length row `Tensor`s based on condition.
923	Convenience function which statically broadcasts shape when possible.
924	Generate a new seed from the given seed and salt.
925	Creates a tridiagonal matrix from the given below, diagonal, and above diagonals.
926	Returns the size of a specific dimension.
927	Validates quadrature grid and probabilities or computes them as necessary.
928	Returns parent frame arguments.
929	Transform a 0-D or 1-D `Tensor` to be 1-D.
930	Produces the content of `output_tensor` only after `dependencies`.
931	Checks that `rightmost_transposed_ndims` is valid.
932	Checks that `perm` is valid.
933	Helper for _forward and _inverse_event_shape.
934	Returns the concatenation of the dimension in `x` and `other`.
935	Returns a list of dimension sizes, or `None` if `rank` is unknown.
936	Returns a shape combining the information in `x` and `other`.
937	Returns a shape based on `x` with at least the given `rank`.
938	Check that source and target shape match, statically if possible.
939	Augment a sample shape to broadcast batch dimensions.
940	Build a callable that performs one step for backward smoothing.
941	Perform backward update for a Kalman smoother.
942	Build a callable that performs one step of Kalman filtering.
943	Conjugate update for a linear Gaussian model.
944	Propagate a filtered distribution through a transition model.
945	Build a callable that performs one step of Kalman mean recursion.
946	Build a callable for one step of Kalman covariance recursion.
947	Build a callable for one step of Kalman sampling recursion.
948	Propagate a mean through linear Gaussian transformation.
949	Propagate covariance through linear Gaussian transformation.
950	Run the backward pass in Kalman smoother.
951	Draw a joint sample from the prior over latents and observations.
952	Run a Kalman smoother to return posterior mean and covariance.
953	Compute prior means for all variables via dynamic programming.
954	Compute prior covariances for all variables via dynamic programming.
955	Push latent means and covariances forward through the observation model.
956	Computes the log-normalizer of the distribution.
957	The mode of the von Mises-Fisher distribution is the mean direction.
958	Applies a Householder rotation to `samples`.
959	Specialized inversion sampler for 3D.
960	Create a deep copy of a function.

```python
def _copy_fn(fn):
  """Create a deep copy of fn.

  Args:
    fn: a callable

  Returns:
    A `FunctionType`: a deep copy of fn.

  Raises:
    TypeError: if `fn` is not a callable.
  """
  # ... (implementation details)
```

Summary: Create a deep copy of a function.
961	Removes dictionary keys which have a specified value.
962	Recursively replace `dict`s with `_PrettyDict` and handle sequences and mappings appropriately.
963	Check args and return samples.
964	Helper which returns `True` if input is `collections.namedtuple`-like.
965	Helper to `choose` which expand_dims `is_accepted` and applies tf.where.
966	Helper which expand_dims `is_accepted` then applies tf.where.
967	Elementwise adds list members, replacing non-finite results with alt_value.
968	Helper to `maybe_call_fn_and_grads`.
969	Calls `fn` and computes the gradient of the result wrt `args_list`.
970	Construct a for loop, preferring a python loop if `n` is statically known.
971	A simplified version of `tf.scan` that has configurable tracing.
972	Wraps a setter so it applies to the inner-most results in `kernel_results`.
973	Wraps a getter so it applies to the inner-most results in `kernel_results`.
974	Enables the `store_parameters_in_results` parameter in a chain of kernels.
975	Replaces the rightmost dimensions in a tensor representing a shape with a new event shape.
976	Replaces the event shape dimensions of a `TensorShape` with a new event shape.
977	Check that a shape Tensor is int-type and otherwise sane.
978	Condition to stop when any batch member converges, or all have failed.
979	Returns a dictionary to populate the initial state of the search procedure.
980	Performs the line search step of the BFGS search procedure using the Hager-Zhang method to compute an appropriate step size and update the search position accordingly.
981	Restricts an n-dimensional function to a given direction and computes its gradient along that direction.
982	Updates the state advancing its position by a given position_delta.
983	Checks if the algorithm satisfies the convergence criteria.
984	Broadcast a value to match the batching dimensions of a target.
985	Compute the harmonic number from its analytic continuation.
986	Default exchange proposal function for replica exchange Monte Carlo.
987	Get a field from kernel_results or its accepted_results attribute.
988	Get list of TensorArrays holding exchanged states, and zeros.
989	Helper to `_covariance` and `_variance` which computes a shared scale.
990	Makes a function which applies a list of Bijectors' `log_det_jacobian`s.
991	Makes a function which applies a list of Bijectors' `forward`s.
992	Makes a function which applies a list of Bijectors' `inverse`s.
993	Runs one iteration of the Transformed Kernel.
994	Like tf.where but works on namedtuples.
995	Performs the secant square procedure of Hager Zhang for finding a root in a bracketing interval.
996	Helper function for secant square.
997	Helper function for secant-square step.
998	Squeezes a bracketing interval containing the minimum.
999	Brackets the minimum given an initial starting point using the Hager-Zhang algorithm.
1000	Bisects an interval and updates to satisfy opposite slope conditions.
1001	Narrow down interval to satisfy opposite slope conditions.
1002	Checks if the supplied values are finite.
1003	Checks whether the Wolfe or approximate Wolfe conditions are satisfied.
1004	Returns the secant interpolation for the minimum.
1005	Create a function implementing a step-size update policy for adaptive MCMC.
1006	Applies one step of the leapfrog integrator for Hamiltonian Monte Carlo.
1007	Helper to `kernel` which computes the log acceptance-correction.
1008	Runs one iteration of Hamiltonian Monte Carlo.
1009	Creates initial `previous_kernel_results` using a supplied `state`.
1010	Constructs a ResNet18 model with Bayesian layers.
1011	Network block for ResNet.
1012	Create the encoder function.
1013	Create the decoder function.
1014	Create the prior distribution.
1015	Implements Markov chain Monte Carlo via repeated `TransitionKernel` steps.
1016	A multi-layered topic model over a documents-by-terms matrix.
1017	Learnable Deterministic distribution over positive reals.
1018	Learnable Gamma via concentration and scale parameterization.
1019	Loads NIPS 2011 conference papers from a CSV file, filters papers from 2011 and words appearing in at least two documents with a total count of at least 10, and returns a bag-of-words matrix with corresponding word labels.
1020	Shared init logic for `amplitude` and `length_scale` params.
1021	Get the KL function registered for classes a and b.
1022	Returns an image tensor.
1023	Downloads the sprites data and returns the saved filepath.
1024	Creates a character sprite from a set of attribute sprites.
1025	Creates a sequence from a character sprite tensor by extracting frames based on action metadata and direction, then padding or truncating to the desired length.
1026	Creates a random sequence.
1027	Creates a tf.data pipeline for the sprites dataset.
1028	Checks that `distributions` satisfies all assumptions.
1029	Flatten a list of kernels by expanding _SumKernel instances into their constituent kernels.
1030	Flatten a list of kernels by expanding _ProductKernel instances into their constituent kernels.
1031	Build fake CIFAR10-style data for unit testing.
1032	Counts the number of occurrences of each value in an integer array, with support for reducing over specific dimensions.
1033	Bin values into discrete intervals.
1034	Count how often `x` falls in intervals defined by `edges`.
1035	Compute quantiles of `x` along `axis`.
1036	Get static number of dimensions and assert that some expectations are met.
1037	Insert the dims in `axis` back as singletons after being removed.
1038	Convert possibly negatively indexed axis to non-negative list of ints.
1039	Move specified dimensions of a tensor to the end and flatten them.
1040	Use `top_k` to sort a `Tensor` along the last dimension.
1041	Build an ordered list of Distribution instances for component models.
1042	Compute the Amari-alpha Csiszar-function in log-space.
1043	The reverse Kullback-Leibler Csiszar-function in log-space.
1044	The Jensen-Shannon Csiszar-function in log-space.
1045	The Pearson Csiszar-function in log-space.
1046	The Squared-Hellinger Csiszar-function in log-space.
1047	The Triangular Csiszar-function in log-space.
1048	The T-Power Csiszar-function in log-space.
1049	The log1p-abs Csiszar-function in log-space.
1050	The Jeffreys Csiszar-function in log-space.
1051	Compute the Modified-GAN Csiszar-function in log-space.
1052	Calculates the dual Csiszar-function in log-space.
1053	Symmetrizes a Csiszar-function in log-space by applying the transformation f_g(u) = 0.5 g(u) + 0.5 u g(1/u), where g is the input Csiszar-function, resulting in a symmetric f-Divergence.
1054	Monte-Carlo approximation of the Csiszar f-Divergence.
1055	Helper to `csiszar_vimco`; computes `log_avg_u`, `log_sooavg_u`.
1056	Assert that Tensor x has expected number of dimensions.
1057	Like batch_gather, but broadcasts to the left of axis.
1058	Broadcasts the event or distribution parameters.
1059	Importance sampling with a positive function, in log-space.
1060	Broadcasts the event or samples.
1061	Applies the BFGS algorithm to minimize a differentiable function.
1062	Computes control inputs to validate a provided inverse Hessian.
1063	Update the BGFS state by computing the next inverse hessian estimate.
1064	Applies the BFGS update to the inverse Hessian estimate.
1065	Computes the product of a matrix with a vector on the right.
1066	Computes the outer product of two possibly batched vectors.
1067	Transpose a possibly batched matrix.
1068	Maybe add `ndims` ones to `x.shape` on the right.
1069	Return `Tensor` with right-most ndims summed.
1070	A sqrt function whose gradient at zero is very large but finite.
1071	Return common dtype of arg_list, or None.
1072	Applies the L-BFGS algorithm to minimize a differentiable function.
1073	Create LBfgsOptimizerResults with initial state of search procedure.
1074	Computes the search direction to follow at the current state using the L-BFGS two-loop recursion algorithm.
1075	Creates a `tf.Tensor` suitable to hold `k` element-shaped tensors.
1076	Conditionally push new vectors into a batch of first-in-first-out queues.
1077	Computes whether each square matrix in the input is positive semi-definite.
1078	Returns whether the input matches the given determinant limit.
1079	Returns a uniformly random tensor of "correlation-like" matrices.
1080	Returns rejection samples from trying to get good correlation matrices.
1081	Computes a confidence interval for the mean of a Bernoulli distribution using the Clopper-Pearson method.
1082	Returns confidence intervals for the desired correlation matrix volumes using the Clopper-Pearson method.
1083	Computes the von Mises CDF and its derivative via series expansion.
1084	Computes the von Mises CDF and its derivative via Normal approximation.
1085	Performs one step of the differential evolution algorithm.
1086	Applies the Differential evolution algorithm to minimize a function.
1087	Process initial arguments for optimization algorithm.
1088	Finds the population member with the lowest value.
1089	Checks whether the convergence criteria have been met.
1090	Constructs the initial population by either using a provided population or generating one by adding random normal noise to an initial position.
1091	Performs binary crossover recombination on a population using mutated vectors.
1092	Computes the mutated vectors for each population member.
1093	Generates an array of indices suitable for mutation operation in differential evolution.
1094	Converts the input argument to a list if it is not a list already.
1095	Gets a Tensor of type `dtype`, 0 if `tol` is None, validation optional.
1096	Soft Thresholding operator.
1097	Clips values to a specified min and max while leaving gradient unaltered.
1098	Build an iterator over training batches.
1099	Save synthetic images as a PNG file.
1100	Converts a sequence of productions into a string of terminal symbols.
1101	Runs the model forward to generate a sequence of productions.
1102	Runs the model forward to return a stochastic encoding.
1103	Integral of the `hat` function, used for sampling.
1104	Inverse function of _hat_integral.
1105	Compute the matrix rank; the number of non-zero SVD singular values.
1106	Compute the Moore-Penrose pseudo-inverse of a matrix using singular-value decomposition.
1107	Solves systems of linear equations `A X = RHS`, given LU factorizations.
1108	Computes a matrix inverse given the matrix's LU decomposition.
1109	Returns list of assertions related to `lu_reconstruct` assumptions.
1110	Returns list of assertions related to `lu_solve` assumptions.
1111	Returns a block diagonal rank 2 SparseTensor from a batch of SparseTensors.
1112	Checks that input is a `float` matrix.
1113	Computes the neg-log-likelihood gradient and Fisher information for a GLM.
1114	Fits a GLM using coordinate-wise FIM-informed proximal gradient descent.
1115	Generate the slices for building an autoregressive mask.
1116	Generate the mask for building an autoregressive dense layer.
1117	A autoregressively masked dense layer analogous to `tf.layers.dense`.
1118	Returns a degree vectors for the input.
1119	Returns a list of degree vectors, one for each input and hidden layer.
1120	Returns a list of binary mask matrices enforcing autoregressivity.
1121	Returns a masked version of the given initializer.
1122	Build the layer by inferring event shape, creating masks, and constructing the network with dense layers.
1123	See tfkl.Layer.call.
1124	Sample a multinomial.
1125	Build a zero-dimensional MVNDiag object.
1126	Build an observation_noise_fn that observes a Tensor timeseries.
1127	Build regression weights from model parameters.
1128	Computes the number of edges on longest path from node to root.
1129	Creates tuple of str tuple-str pairs representing resolved & sorted DAG.
1130	Creates lists of callables suitable for JDSeq.
1131	Creates `dist_fn`, `dist_fn_wrapped`, `dist_fn_args`, `dist_fn_name`.
1132	Compute the negative variational lower bound for the VGP.
1133	Model selection for optimal variational hyperparameters.
1134	Build utility method to compute whether the season is changing.
1135	Build change-of-basis matrices for constrained seasonal effects.
1136	Build a function computing transitions for a seasonal effect model.
1137	Build the transition noise model for a SeasonalStateSpaceModel.
1138	Build transition noise distribution for a ConstrainedSeasonalSSM.
1139	Returns `True` if given observation data is empty.
1140	Ensure that observation data and locations have consistent shapes by checking that their batch shapes are broadcastable.
1141	Add a learning rate scheduler to the contained schedules.
1142	Configure checkpoint settings.
1143	Configure constant clipping settings.
1144	Do an optimization.
1145	Set train summary.
1146	Set validation summary.
1147	Create an optimizer for a neural network model.

The function returns either a local optimizer or a distributed optimizer depending on the type of training set provided. It supports various optimization algorithms and can be configured with different parameters such as batch size, end trigger, and optimization method. The training set can be either a local tuple of features and labels or a distributed RDD of samples.
1148	Set new training dataset for optimizer reuse.
1149	Set the interval of recording for each indicator.
1150	Parse or download mnist data and return features and labels for training or testing set.
1151	Parse or download news20 if source_dir is empty.
1152	Parse or download the pre-trained glove word2vec and return a dictionary mapping words to vectors.
1153	Configures the learning process for the model.
1154	Train a model for a fixed number of epochs on a dataset.
1155	Evaluate a model on a given dataset in distributed mode.
1156	Use a model to do prediction.
1157	Get mnist dataset and parallelize into RDDs.
1158	Preprocess mnist dataset by normalizing and transforming into Sample of RDDs.
1159	When to end the optimization based on input option.
1160	Set validation and checkpoint for distributed optimizer.
1161	Return the broadcasted value.
1162	Call API in PythonBigDL
1163	Call Java Function
1164	Return a JavaRDD of Object by unpickling
1165	Convert Python object into Java
1166	Convert a string activation name to a bigdl activation layer.
1167	Convert a numpy ndarray to a DenseTensor for use in the Java side.
1168	Get label as ndarray from ImageFeature
1169	Read parquet file as DistributedImageFrame
1170	Write ImageFrame as parquet file.
1171	Get image from ImageFrame.
1172	Get image list from ImageFrame.
1173	Get label RDD from ImageFrame.
1174	Get prediction RDD from ImageFrame.
1175	Generates output predictions for the input samples, processing the samples in a batched way.
1176	Optimize the model by the given options
1177	Apply the transformer to the images in "inputCol" and store the transformed result into "outputCols"
1178	Save a Keras model definition to JSON with given path.
1179	Define a convnet model in Keras 1.2.2
1180	Return the prediction labels for the input data RDD.
1181	Set weights for this layer.
1182	Get weights for this layer
1183	Save a model to protobuf files for tensorflow inference.
1184	Set this layer in the training mode or in prediction mode.
1185	Load a pre-trained Torch model.
1186	Load a pre-trained Keras model.
1187	Create a python Criterion by a java criterion object
1188	Load model weights from JSON and HDF5 files.
1189	Load IMDB dataset and transform input data into an RDD of Sample.
1190	Define a recurrent convolutional model in Keras 1.2.2
1191	Return a list of shape tuples if there are multiple inputs. Return one shape tuple otherwise.
1192	Return a list of shape tuples if there are multiple outputs. Return one shape tuple otherwise.
1193	Get MNIST dataset with features and label as ndarray.
1194	Parse or download movielens 1m data and return a 2D numpy array with user index and item index in each row.
1195	Get and return the jar path for bigdl if exists.
1196	Check if spark version is below 2.2
1197	Export variable tensors from the checkpoint files.
1198	Save a variable dictionary to a Java object file for BigDL compatibility.
1199	Expand and tile tensor along given axis.
1200	Collecting possible continuations of length <= n for every node
1201	Computes weighted sum of memory elements using simple attention mechanism.
1202	Computes weighted sum of inputs conditioned on state
1203	Computes BLEU score of translated segments against one or more references.
1204	Returns opened file object for writing dialog logs.
1205	Logs single dialog utterance to current dialog log file.
1206	Get summary operations for the magnitude of gradient updates.
1207	Dump the trained weights from a model to a HDF5 file.
1208	Read data by dataset_reader from specified config.
1209	Make training and evaluation of the model described in corresponding configuration file.
1210	Exchange messages between basic pipelines and the Yandex.Dialogs service.
1211	Convert labels to one-hot vectors for multi-class multi-label classification
1212	Convert vectors of probabilities to one-hot representations using confident threshold
1213	Configure session for particular device.
1214	Checks existence of the model file, loads the model if the file exists
1215	Extract values of momentum variables from optimizer
1216	Update graph variables setting giving `learning_rate` and `momentum`
1217	Calculates F1 macro measure.
1218	Converts word to a tuple of symbols, optionally converts it to lowercase and adds capitalization label.
1219	Stacks multiple convolutional layers on top of each other with optional batch normalization and dilation.
1220	Create a bidirectional recurrent neural network with GRU or LSTM cells.
1221	Stacked recurrent neural networks GRU or LSTM
1222	Highway convolutional network with skip connections and gating mechanism.
1223	Create a token embedding layer with optional pre-trained embeddings.
1224	Fast CuDNN GRU implementation
1225	CuDNN Compatible GRU implementation. It should be used to load models saved with CudnnGRUCell to run on CPU.
1226	Fast CuDNN LSTM implementation
1227	CuDNN Compatible LSTM implementation. It should be used to load models saved with CudnnLSTMCell to run on CPU.
1228	Fast CuDNN Bi-GRU implementation
1229	Fast CuDNN Bi-LSTM implementation
1230	Fast CuDNN Stacked Bi-GRU implementation
1231	Dropout with the same drop mask for all fixed_mask_dims
1232	Builds the network using Keras.
1233	Builds word-level CNN network with convolutional layers, highway networks, and dropout regularization.
1234	Creates the basic network architecture, transforming word embeddings to intermediate outputs.
1235	Trains model on a single batch
1236	Makes predictions on a single batch and returns label sequences.
1237	Transforms a sentence to Numpy array, which will be the network input.
1238	Transforms a sentence of tags to Numpy array, which will be the network target.
1239	Calculate BLEU score with advanced options including smoothing and brevity penalty.
1240	Verify signature certificate URL against Amazon Alexa requirements.
1241	Extracts pycrypto X509 objects from SSL certificates chain string.
1242	Verifies if Amazon and additional certificates creates chain of trust to a root CA.
1243	Verifies Alexa request signature using Amazon certificate and returns True if successful, False otherwise.
1244	Conducts series of Alexa SSL certificate verifications against Amazon Alexa requirements.
1245	Returns list of json compatible states of the RichMessage instance nested controls.
1246	Returns list of MS Bot Framework compatible states of the RichMessage instance nested controls.
1247	Returns list of Telegram compatible states of the RichMessage instance nested controls.
1248	Returns list of Amazon Alexa compatible states of the RichMessage instance nested controls.
1249	DeepPavlov console configuration utility.
1250	Constructs function encapsulated in the graph.
1251	Constructs function encapsulated in the graph and the session.
1252	Calculate accuracy in terms of absolute coincidence.
1253	Rounds predictions and calculates accuracy in terms of absolute coincidence.
1254	Initialize variables with pretrained weights from a file.
1255	Reads a file from a path and returns data as a list of tuples of inputs and correct outputs for every data type in ``train``, ``valid`` and ``test``.
1256	Builds agent based on PatternMatchingSkill and HighestConfidenceSelector.
1257	Transforms an array of integers to an array of one-hot encoded vectors.
1258	Prettifies the dictionary of metrics.
1259	Populate settings directory with default settings files.
1260	Load model parameters from self.load_path
1261	Save model parameters to self.save_path
1262	Get train operation for given loss
1263	Finds all dictionary words in d-window from word.
1264	Sets default operation costs (1.0) for replacements, insertions, deletions and transpositions.
1265	Initiates self-destruct timer.
1266	Routes Alexa requests to appropriate handlers.
1267	Infers DeepPavlov agent with raw user input extracted from Alexa request.
1268	Populates generated response with additional data conforming Alexa response specification.
1269	Handles IntentRequest Alexa request.
1270	Handles LaunchRequest Alexa request.
1271	Handles all unsupported types of Alexa requests and returns a standard response message.
1272	Defines ``Struct``'s pretty printing rules for iPython
1273	Calculates perplexity from model losses.
1274	Build and return the model described in the corresponding configuration file.
1275	Start interaction with the model described in corresponding configuration file.
1276	Make a prediction with the component described in corresponding configuration file.
1277	Reads input file in CONLL-U format and returns a list of sentences with words and optional tag sequences.
1278	Returns a function object with the name given in string.
1279	Decorator for metric registration.
1280	Returns a metric callable with a corresponding name.
1281	Convert given string label of decay type to special index
1282	Find the best value according to given losses.
1283	Embed one text sample.
1284	Parses requirements from requirements.txt file and separates them into installable packages and dependency links.
1285	Calculates log loss between true and predicted values.
1286	Exports a TF-Hub module.
1287	Format catalog item output
1288	Make an agent

```python
def make_agent() -> EcommerceAgent:
    """Make an agent

    Returns:
        agent: created Ecommerce agent
    """

    config_path = find_config('tfidf_retrieve')
    skill = build_model(config_path)
    agent = EcommerceAgent(skills=[skill])
    return agent
```
1289	Parse parameters and run ms bot framework
1290	Download a file from URL to one or several target locations.
1291	Simple tar archive extractor
1292	Download and extract .tar.gz or .gz file to one or several target locations.
1293	Updates a dictionary recursively with values from another dictionary.
1294	Given a file URL, return the URL of the corresponding md5 file by appending '.md5' to the path.
1295	Given a URL, set or replace a query parameter and return the modified URL.
1296	Returns Amazon Alexa compatible state of the PlainText instance.
1297	Returns json compatible state of the Button instance.
1298	Returns MS Bot Framework compatible state of the Button instance.
1299	Returns json compatible state of the ButtonsFrame instance including all nested buttons.
1300	Returns MS Bot Framework compatible state of the ButtonsFrame instance.
1301	Calculates F-1 score between y_true and y_predicted using the best matching answer, similar to SQuAD-v2.0 evaluation method.
1302	Calculates recall at k ranking metric.
1303	Return True if at least one GPU is available.
1304	Recursively apply config's variables values to its property
1305	Read config's variables and apply their values to all its properties
1306	Convert relative paths to absolute with resolving user directory.
1307	Builds and returns the Component from corresponding dictionary of parameters.
1308	Thread run method implementation.
1309	Deletes Conversation instance.
1310	Conducts cleanup of periodical certificates with expired validation.
1311	Conducts series of Alexa request verifications against Amazon Alexa requirements.
1312	Process Alexa requests from skill server and return responses to Alexa.
1313	Returns a class object with the name given as a string.
1314	Register classes that could be initialized from JSON configuration file.
1315	Returns a registered class object with the name given in the string.
1316	Extract full regularization path explored during lambda search from glm model.
1317	Create a custom GLM model using the given coefficients.
1318	Create H2OCluster object from a list of key-value pairs.
1319	Shut down the server.
1320	Determine if the H2O cluster is running or not.
1321	Print current cluster status information.
1322	List all jobs performed by the cluster.
1323	Return the list of all known timezones.
1324	Update information in this object from another H2OCluster instance.
1325	Parameters for metalearner algorithm
1326	Repeatedly test a function waiting for it to return True.
1327	Return the summary for a single column for a single Frame in the h2o cluster.
1328	Delete a frame on the h2o cluster, given its key.
1329	Return a model builder or all of the model builders known to the h2o cluster.
1330	Check a dictionary of model builder parameters on the h2o cluster using the given algorithm and model parameters.
1331	Score a model on the h2o cluster on the given Frame and return only the model metrics.
1332	ModelMetrics list.
1333	Delete a model on the h2o cluster, given its key.
1334	Pretty tabulated string of all the cached data, and column names
1335	Create a new reservation for count instances in EC2, wait for them to start, and optionally wait for SSH access.
1336	Terminate all the instances given by its ids.
1337	Stop all the instances given by its ids.
1338	Start all the instances given by its ids.
1339	Reboot all the instances given by its ids.
1340	Wait for SSH service to appear on given hosts.
1341	Return fully qualified function name.
1342	Given a frame and a compiled function code, find the corresponding function object within the frame.
1343	Return function's declared arguments as a string.
1344	Return piece of text, wrapped around if needed.
1345	Wait until job's completion.
1346	Train the H2O model.
1347	Fit an H2O model as part of a scikit-learn pipeline or grid search.
1348	Obtain parameters for this estimator.
1349	Handle caught signals and tear down clouds.
1350	Clear the output directory.
1351	Remove sandbox directories if they exist under the parent directory.
1352	Look at the stdout log and figure out which port the JVM chose.
1353	Look at the stdout log and wait until the cluster of proper size is formed. This call is blocking. Exit if this fails.
1354	Normal node shutdown.
1355	Normal cluster shutdown.
1356	Return an ip to use to talk to this cluster.
1357	Return a port to use to talk to this cluster.
1358	Return the coordinates of the ROC curve for a given set of data.
1359	Determines vec_size for a pre-trained model after basic model verification.
1360	Calculate mean absolute error regression loss between actual and predicted values.
1361	Calculate mean squared error regression loss between actual and predicted values.
1362	Median absolute error regression loss
1363	Calculate the explained variance regression score.
1364	Assert that the argument has the specified type.
1365	Assert that string variable matches the provided regular expression.
1366	Assert that variable satisfies the provided condition.
1367	Magic variable name retrieval for assertion functions.
1368	Return True if the variable is of the specified type, and False otherwise.
1369	Return the name of the provided type.
1370	Attempt to find the source code of the lambda function within the string.
1371	Return True if the variable does not match any of the types, and False otherwise.
1372	Check whether the provided value is a valid enum constant.
1373	Retrieve the config as a dictionary of key-value pairs.
1374	Find and parse config file, storing all variables in ``self._config``.
1375	Return possible locations for the .h2oconfig file, one at a time.
1376	Start the progress bar and return only when the progress reaches 100%.
1377	Save the current model progress into ``self._progress_data``, and update ``self._next_poll_time``.
1378	Compute t0, x0, v0, ve.
1379	Estimate the moment when the underlying process is expected to reach completion.
1380	Determine when to query the progress status next.
1381	Calculate the modelled progress state for the given time moment.
1382	Return the projected time when progress level `x_target` will be reached using Newton method for nonlinear progress model.
1383	Print the rendered string to the stdout.
1384	Initial rendering stage to compute widths of all widgets.
1385	Find current STDOUT's width, in characters.
1386	Inform the widget about the encoding of the underlying character stream.
1387	Returns encoding map as an object that maps 'column_name' -> 'frame_with_encoding_map_for_this_column_name'
1388	Retrieve an existing H2OFrame from the H2O cluster using the frame's id.
1389	Reload frame information from the backend H2O server.
1390	The type for the given column.
1391	Extract columns of the specified type from the frame.
1392	Display summary information about the frame.
1393	Generate an in-depth description of this H2OFrame.
1394	Return the first rows and cols of the frame as a new H2OFrame.
1395	Multiply this frame, viewed as a matrix, by another matrix.
1396	Get the factor levels.
1397	Get the number of factor levels for each categorical column.
1398	A method to set all column values to one of the levels.
1399	Replace the levels of a categorical column.
1400	Change names of columns in the frame.
1401	Change names of all columns in the frame.
1402	Set a new name for a column.
1403	Test whether elements of an H2OFrame are contained in the item.
1404	Build a fold assignments column for cross-validation using modulo operation.
1405	Build a fold assignment column with stratified sampling based on class distribution.
1406	Compactly display the internal structure of an H2OFrame.
1407	Obtain the dataset as a python-local object.
1408	Pop a column from the H2OFrame at index i.
1409	Compute quantiles.
1410	Append multiple H2OFrames to this frame, column-wise or row-wise.
1411	Append data to this frame column-wise.
1412	Append data to this frame row-wise.
1413	Split a frame into distinct subsets of size determined by the given ratios.
1414	Return a new ``GroupBy`` object using this frame and the desired grouping columns.
1415	Return a new Frame that fills NA along a given axis and along a given direction with a maximum fill length.
1416	Impute missing values into the frame, modifying it in-place.
1417	Merge two datasets based on common column names.
1418	Reorder levels of an H2O factor for one single column of a H2O frame.
1419	Insert missing values into the current frame, modifying it in-place.
1420	Compute the variance-covariance matrix of one or two H2OFrames.
1421	Compute the correlation matrix of one or two H2OFrames.
1422	Compute a pairwise distance measure between all rows of two numeric H2OFrames.
1423	Convert columns in the current frame to categoricals.
1424	Split the strings in the target column on the given regular expression pattern.
1425	For each string in the frame, count the occurrences of the provided pattern.
1426	For each string, return a new string that is a substring of the original string.
1427	Return a copy of the column with leading characters removed.
1428	For each string compute its Shannon entropy, if the string is empty the entropy is 0.
1429	For each string, find the count of all possible substrings with 2 characters or more that are contained in the line-separated text file whose path is given.
1430	Compute the counts of values appearing in a column, or co-occurence counts between two columns.
1431	Compute a histogram over a numeric column.
1432	Compute the iSAX index for DataFrame which is assumed to be numeric time series data.
1433	Substitute the first occurrence of pattern in a string with replacement.
1434	Translate characters from lower to upper case for a particular column.
1435	Searches for matches to a pattern within each element of a string column and returns either matching positions or a logical vector indicating matches.
1436	Remove rows with NAs from the H2OFrame.
1437	Conduct a diff-1 transform on a numeric frame column.
1438	For each element in an H2OFrame, determine if it is NA or not.
1439	Extract the "minute" part from a date column.
1440	Generate a column of random numbers drawn from a uniform distribution [0,1) with the same data layout as the source frame.
1441	Construct a column for random stratified split.
1442	Cut a numeric vector into categorical "buckets".
1443	Get the index of the max value in a column or row
1444	Apply a lambda expression to an H2OFrame.
1445	Parse code from a string of text.
1446	Parse the provided file and return a Code object.
1447	Move the token by `drow` rows and `dcol` columns.
1448	Convert the parsed representation back into the source code.
1449	Get the sizes of each cluster.
1450	Return the centers for the KMeans model.
1451	The standardized centers for the kmeans model.
1452	Connect to an existing H2O server, remote or local.
1453	Perform a REST API request to a previously connected server.
1454	Used to verify that h2o-python module and the H2O server are compatible with each other.
1455	Import a single file or collection of files.
1456	Upload a dataset from a local path to the H2O cluster.
1457	Import a dataset that is already on the cluster.
1458	Import a Hive table to an H2OFrame in memory.
1459	Import a SQL table to an H2OFrame in memory.
1460	Import the SQL table that is the result of the specified SQL query to H2OFrame in memory.
1461	Parse dataset using the parse setup structure.
1462	Create a deep clone of the frame `data`.
1463	Load a model from the server.
1464	Return the specified grid.
1465	Obtain a handle to the frame in H2O with the specified frame_id.
1466	Download the POJO for a model to a specified directory.
1467	Download an H2O data set to a CSV file on the local disk.
1468	Download H2O log files to disk as a zip file.
1469	Export a given H2OFrame to a specified path on disk with options for force overwrite and multiple part files.
1470	Convert an H2O data object into a python-specific object.
1471	H2O built-in demo facility.
1472	Imports a data file within the 'h2o_data' folder.
1473	Create Model Metrics from predicted and actual values in H2O.
1474	Upload a file to DKV and save it under a given key as a raw object.
1475	Upload given metrics function into H2O cluster.
1476	Check that the provided frame id is valid in Rapids language.
1477	Convert given number of bytes into a human readable representation with appropriate suffixes (P, T, G, M, k, b).
1478	Return a "canonical" version of slice ``s``.
1479	Return True if slice ``s`` is in "normalized" form.
1480	MOJO scoring function to take a Pandas frame and use MOJO model as zip file to score.
1481	MOJO scoring function to take a CSV file and use MOJO model as zip file to score.
1482	The decorator to mark deprecated functions.
1483	Wait until grid finishes computing.
1484	Obtain a hidden layer's details on a dataset.
1485	Print a detailed summary of the explored models.
1486	Print models sorted by metric.
1487	Get the hyperparameters of a model explored by grid search.
1488	Derived and return the model parameters used to train the particular grid search model.
1489	Retrieve an H2OGridSearch instance, optionally sorted by a specified metric and sort order.
1490	Get the F1 values for a set of thresholds for the models explored.
1491	Return the Importance of components associated with a pca model.
1492	Convert archetypes of the model into original feature space.
1493	Produce the scree plot.
1494	Convert names with underscores into camelcase.
1495	Dedent text to the specific indentation level.
1496	Extract operation times for GLRM model building iterations from Java log text.
1497	Main program that processes user input, parses commands, and extracts runtime information from Java log files.
1498	Close an existing connection; once closed it cannot be used again.
1499	Return the session id of the current connection.
1500	Start logging all API requests to the provided destination.
1501	Prepare data for sending to the server by converting it into key/value pairs format.
1502	Prepare a file to be sent to the server by creating a suitable data structure for requests.request().
1503	Log the beginning of an API request.
1504	Log response from an API request.
1505	Log the message `msg` to the destination `self._logging_dest`.
1506	Process a response object and prepare it for external use by handling errors, saving to file if needed, and parsing JSON or returning as plain text.
1507	Helper function to print connection status messages when in verbose mode.
1508	Retrieve information about an AutoML instance.
1509	Download the POJO for the leader model in AutoML to the specified directory.
1510	Download the leader model in AutoML in MOJO format.
1511	Fit this object by computing the means and standard deviations used by the transform method.
1512	Scale an H2OFrame with the fitted means and standard deviations.
1513	Undo the scale transformation.
1514	Remove extra characters from Jenkins console output string, returning content after '[0m' marker.
1515	Find the slave machine where a Jenkins job was executed on.
1516	Find the git hash and branch information from Jenkins console output and remove the function from the processing list.
1517	Find if a Jenkins job has taken too long to finish and was killed.
1518	Find if a Jenkins job has failed to build and update failure information accordingly.
1519	Find the build id of a Jenkins job and update global variables accordingly.
1520	Extract Jenkins job information from URL string and store job name, Jenkins URL, and view name in global variables.
1521	Scan through Java output text and extract bad Java messages from unit tests, excluding known good messages.
1522	Save the log scraping results into logs denoted by g_output_filename_failed_tests and g_output_filename_passed_tests.
1523	Concatenate all log files into a summary text file to be sent to users at the end of daily log scraping.
1524	Write one log file into the summary text file.
1525	Loop through all java messages that are not associated with a unit test and write them into a log file.
1526	Load Java messages to ignore from pickle file into global dictionary.
1527	Return enum constant `s` converted to a canonical snake-case.
1528	Find synonyms using a word2vec model.
1529	Wait until the job finishes.
1530	Convert the munging operations performed on H2OFrame into a POJO.
1531	To perform munging operations on a specified frame and return the resulting H2OFrame.
1532	Find the percentile of a list of values.
1533	Dictionary of the default parameters of the model.
1534	Dictionary of actual parameters of the model.
1535	Return hidden layer details.
1536	Retrieve Model Score History.
1537	Print innards of model, without regards to type.
1538	Pretty print the variable importances, or return them in a list.
1539	Retrieve the residual degrees of freedom for the specified model metrics, or None if not present.
1540	Return the coefficients which can be applied to the non-standardized data.
1541	Download the POJO for this model to the specified directory.
1542	Download the model in MOJO format.
1543	Save Model Details of an H2O Model in JSON Format to disk.
1544	Check that y_actual and y_predicted have the same length.
1545	Obtain a list of cross-validation models.
1546	GBM model demo.
1547	Deep Learning model demo.
1548	GLM model demo.
1549	Wait for a key press on the console and return it.
1550	Convert to a python 'data frame'.
1551	Print the contents of this table.
1552	Start a new H2O server on the local machine.
1553	Return the location of an h2o.jar executable.
1554	Produce potential paths for an h2o.jar executable.
1555	Retrieve the Hit Ratios.
1556	Equivalent of csv.DictWriter, but allows `delimiter` to be a unicode string on Py2.
1557	Convert URI to absolute filepath.
1558	Convert directory path to uri
1559	Parse lines of text for functions and classes.
1560	Make autodoc documentation template string for a module
1561	Return module sequence discovered from ``self.package_name``
1562	Generate API reST files.
1563	Make a reST API index file from written files
1564	Convert this confusion matrix into a 2x2 plain list of values.
1565	Load java messages that can be ignored pickle file into a dict structure g_ok_java_messages.
1566	Add new java messages to ignore from user text file.
1567	Update the g_ok_java_messages dict structure by adding or removing java ignored messages based on the action parameter.
1568	Read a text file containing Java messages to be ignored and generate a dictionary structure with test names as keys and lists of Java message strings as values.
1569	Save the ignored java message dict stored in g_ok_java_messages into a pickle file for future use.
1570	Write the java ignored messages into a text file and print them to console.
1571	Parse user inputs and set the corresponding global variables to perform the necessary tasks.
1572	Illustrate what the various input flags are and the options should be.
1573	Find all python files in the given directory and all subfolders.
1574	Search the file for any magic incantations.
1575	Executed when script is run as-is.
1576	Transform H2OFrame using a MOJO Pipeline.
1577	Look at local directory files with specific start names and summarize their results into a global dictionary.
1578	Print intermittents and save them to a file.
1579	Produce the desired metric plot.
1580	Get the confusion matrix for the specified metric.
1581	Returns True if a deep water model can be built, or False otherwise.
1582	Remove data from summary text file and dictionary file for tests that occurred before the specified number of months.
1583	Return endpoints, grouped by the class which handles them.
1584	Set site domain and name.
1585	Adds the default_data to data and dumps it to a json.
1586	Comments last user_id's medias
1587	Returns login and password stored in `secret.txt`.
1588	Likes last user_id's medias.
1589	Likes last medias from hashtag.
1590	Filter bot from real users.
1591	Reads list from file, one line per item, and returns the list of items.
1592	Add a specific enqueue time to the message.
1593	Defer the message.

This message will remain in the queue but must be received specifically by its sequence number in order to be processed.
1594	Gives the sas-url to download the configurations for vpn-sites in a resource group.
1595	Guess Python Autorest options based on the spec path.
1596	Updates a running PowerShell command with more data.
1597	Deletes the managed application definition.
1598	Creates a new managed application definition.
1599	Return the target uri for the request.
1600	Create connection for the request.
1601	Sends request to cloud service server and return the response.
1602	Executes script actions on the specified HDInsight cluster.
1603	Check the availability of a Front Door resource name.
1604	Permanently deletes the specified soft-deleted Azure key vault.
1605	Returns the URI for the authorization server if present, otherwise empty string.
1606	Extracts the host authority from the given URI.
1607	Return a CLI profile class.
1608	Return Credentials and default SubscriptionID of current loaded profile of the CLI.
1609	Gets predictions for a given utterance, in the form of intents and entities.
1610	Check Name Availability for global uniqueness.
1611	Opens the request.
1612	Sets up the timeout for the request.
1613	Sets the request header.
1614	Gets back all response headers.
1615	Sends the request body.
1616	Gets status of response.
1617	Gets status text of response.
1618	Gets response body as a SAFEARRAY and converts the SAFEARRAY to str.
1619	Sets client certificate for the request.
1620	Connects to host and sends the request.
1621	Sends the headers of request.
1622	Sends request body.
1623	Gets the response and generates the _Response object
1624	Simplified an id to be more friendly for humans by extracting the name portion after the namespace.
1625	Converts a Python name into a serializable name.
1626	Verify whether two faces belong to a same person by comparing a face ID with a Person ID.
1627	Adds a job to the specified account.
1628	Get properties from entry xml.
1629	Descends through a hierarchy of nodes returning the list of children at the inner most level. Only returns children who share a common parent, not cousins.
1630	Recursively searches from the parent to the child, gathering all the applicable namespaces along the way.
1631	Converts XML response to service bus namespace object.
1632	Converts XML response to service bus region object by parsing the XML string and extracting region code and full name information.
1633	Converts XML response to service bus namespace availability
1634	Converts XML response to service bus metrics objects.
1635	Replace the runbook draft content.
1636	Get domain name recommendations based on keywords.
1637	Asynchronous operation to modify a knowledgebase.
1638	Gets a collection that contains the object IDs of the groups of which the user is a member.
1639	Builds a package from a given PR number by cloning the PR branch and executing the build process.
1640	Import data into Redis cache.
1641	Publish a runbook draft.
1642	Renew the message lock.
1643	Replace alterations data.
1644	Adds the specified value as a new version of the specified secret resource.
1645	Returns system properties for the specified storage account.
1646	Returns the primary and secondary access keys for the specified storage account.
1647	Regenerates the primary or secondary access key for the specified storage account.
1648	Creates a new storage account in Windows Azure.
1649	Updates the label, the description, and enables or disables the geo-replication status for a storage account in Windows Azure.
1650	Deletes the specified storage account from Windows Azure.
1651	Checks to see if the specified storage account name is available, or if it has already been taken.
1652	Retrieves system properties for the specified hosted service, including service name, type, affinity group or location, and optionally deployment information.
1653	Creates a new hosted service in Windows Azure.
1654	Deletes the specified hosted service from Windows Azure.
1655	Uploads a new service package and creates a new deployment on staging or production.
1656	Deletes the specified deployment.
1657	Initiates a virtual IP swap between the staging and production deployment environments for a service.
1658	Initiates a change to the deployment configuration.
1659	Initiates a change in deployment status.
1660	Initiates an upgrade for a deployment.
1661	Specifies the next upgrade domain to be walked during manual in-place upgrade or configuration change.
1662	Requests a reboot of a role instance that is running in a deployment.
1663	Reinstalls the operating system on instances of web roles or worker roles and initializes the storage resources that are used by them.
1664	Checks to see if the specified hosted service name is available, or if it has already been taken.
1665	Lists all of the service certificates associated with the specified hosted service.
1666	Returns the public data for the specified X.509 certificate associated with a hosted service.
1667	Adds a certificate to a hosted service.
1668	Deletes a service certificate from the certificate store of a hosted service.
1669	Retrieve information about the management certificate with the specified thumbprint.
1670	Add a management certificate to the list of management certificates for authenticating clients connecting to Windows Azure resources.
1671	Delete a management certificate from the list of management certificates associated with the subscription.
1672	Returns the system properties associated with the specified affinity group.
1673	Creates a new affinity group for the specified subscription.
1674	Deletes an affinity group in the specified subscription.
1675	List subscription operations.
1676	Reserves an IPv4 address for the specified subscription.
1677	Deletes a reserved IP address from the specified subscription.
1678	Associate an existing reservedIP to a deployment.
1679	Disassociate an existing reserved IP from the given deployment.
1680	Retrieves information about the specified reserved IP address.
1681	Retrieves the specified virtual machine.
1682	Provisions a virtual machine based on the supplied configuration.
1683	Adds a virtual machine to an existing deployment.
1684	Updates the specified virtual machine.
1685	Deletes the specified virtual machine.
1686	Capture a virtual machine image to the image gallery from a specified role.
1687	Starts the specified virtual machine.
1688	Starts the specified virtual machines.
1689	Restart the specified virtual machine.
1690	Shuts down the specified virtual machine.
1691	Shuts down the specified virtual machines.
1692	Adds a DNS server definition to an existing deployment.
1693	Updates the IP address of a DNS server.
1694	Deletes a DNS server from a deployment.
1695	Lists the versions of a resource extension that are available to add to a Virtual Machine.
1696	Replicate a VM image to multiple target locations.
1697	Unreplicate a VM image from all regions.
1698	Share an already replicated OS image by setting sharing permissions.
1699	Creates a VM Image in the image repository associated with the specified subscription using specified virtual hard disks.
1700	Deletes the specified VM Image from the image repository associated with the specified subscription.
1701	Retrieves a list of VM Images from the image repository associated with the specified subscription.
1702	Updates a VM Image in the image repository that is associated with the specified subscription.
1703	Adds an OS image to the image repository from a storage account.
1704	Updates an OS image in the image repository.
1705	Updates metadata elements from a given OS image reference.
1706	Deletes the specified OS image from your image repository.
1707	Retrieves the specified data disk from a virtual machine.
1708	Adds a data disk to a virtual machine.
1709	Updates the specified data disk attached to the specified virtual machine.
1710	Removes the specified data disk from a virtual machine.
1711	Adds a disk to the user image repository.
1712	Updates an existing disk in your image repository.
1713	Deletes the specified data or operating system disk from your image repository.
1714	Summarizes policy states for the resources under the management group.
1715	Builds and configures a receiver handler for message processing.
1716	Receive a batch of messages at once.
1717	Renew the session lock to continue message processing.
1718	Create or update a VM scale set.
1719	Converts SinglePlacementGroup property to false for an existing virtual machine scale set.
1720	Detect profanity and match against custom and shared blacklists.
1721	Creates a new key in Azure Key Vault and returns its parameters and attributes.
1722	Imports an externally created key into Azure Key Vault and returns key parameters and attributes.
1723	Update a stored key's attributes in Azure Key Vault.
1724	Sets a secret in a specified key vault.
1725	Sets the specified certificate issuer.
1726	Create a Service Bus client from a connection string.
1727	Get an async client for a subscription entity.
1728	Get an async client for all subscription entities in the topic.
1729	Send one or more messages to the current entity.
1730	Get a Sender for the Service Bus endpoint.
1731	Get a Receiver for the Service Bus endpoint.
1732	Get a Receiver for the deadletter endpoint of the entity.
1733	Extracts request id from response header.
1734	Performs a GET request and returns the response.
1735	Performs a PUT request and returns the response.
1736	Waits for an asynchronous operation to complete.
1737	Returns the status of the specified operation.
1738	Add additional headers for management.
1739	Assumed called on Travis, to prepare a package to be deployed

This method prints on stdout for Travis.
Return is obj to pass to sys.exit() directly
1740	List certificates in a specified key vault.
1741	Get list of available service bus regions.
1742	List the service bus namespaces defined on the account.
1743	Get details about a specific namespace.
1744	Create a new service bus namespace.
1745	Delete a service bus namespace.
1746	Checks to see if the specified service bus namespace is available, or if it has already been taken.
1747	Retrieves the topics in the service namespace.
1748	Retrieves the notification hubs in the service namespace.
1749	Retrieves the relays in the service namespace.
1750	Get rollup data for Service Bus metrics queue.
1751	Get rollup data for Service Bus metrics topic.
1752	Get rollup data for Service Bus metrics notification hub.
1753	Get rollup data for Service Bus metrics relay.
1754	Create a virtual environment in a directory.
1755	Create a venv with specified packages in a temp directory and yield the environment.
1756	Create a new Azure SQL Database server.
1757	Reset the administrator password for a server.
1758	Gets quotas for an Azure SQL Database Server.
1759	Gets the event logs for an Azure SQL Database Server.
1760	Creates an Azure SQL Database server firewall rule.
1761	Update a firewall rule for an Azure SQL Database server.
1762	Deletes an Azure SQL Database server firewall rule.
1763	Retrieves the set of firewall rules for an Azure SQL Database Server.
1764	Gets the service level objectives for an Azure SQL Database server.
1765	Creates a new Azure SQL Database.
1766	Updates existing database details.
1767	Deletes an Azure SQL Database.
1768	List the SQL databases defined on the specified server name
1769	Gets all legal agreements that user needs to accept before purchasing a domain.
1770	Close down the handler connection.
1771	Close down the receiver connection.
1772	Get the session state.

Returns None if no state has been set.
1773	Set the session state.
1774	Receive messages that have previously been deferred.
1775	Merges two `Reservation`s into a new `Reservation`.
1776	Verifies that the challenge is a Bearer challenge and returns the key=value pairs.
1777	Purges data in a Log Analytics workspace by a set of user-defined filters.
1778	Handle connection and service errors and determine retry action based on error type.
1779	Creates a new queue with the specified name and properties.
1780	Deletes an existing queue and removes all associated state including messages in the queue.
1781	Retrieves an existing queue.
1782	Creates a new topic with the specified name and properties. Returns a boolean indicating success or failure based on whether the topic already exists and the fail_on_exist flag.
1783	Retrieves the description for the specified topic.
1784	Creates a new rule with the specified topic, subscription, and rule names.
1785	Retrieves the description for the specified rule.
1786	Retrieves the rules that exist under the specified subscription.
1787	Creates a new subscription with the specified topic and subscription names, returning True if successful and handling existence conflicts based on the fail_on_exist parameter.
1788	Gets an existing subscription.
1789	Retrieves the subscriptions in the specified topic.
1790	Enqueues a message into the specified topic.
1791	Unlock a message for processing by other receivers on a given subscription.
1792	Sends a batch of messages into the specified queue.
1793	Unlock a message for processing by other receivers on a given queue.
1794	Receive a message from a queue for processing.
1795	Receive a message from a subscription for processing.
1796	Creates a new Event Hub with the specified name and properties.
1797	Updates an Event Hub.
1798	Retrieves an existing event hub.
1799	Sends a new message event to an Event Hub.
1800	Add additional headers for Service Bus.
1801	Return the signed string with token.
1802	Check if token expires or not.
1803	Returns token for the Service Bus service request.
1804	Pulls the query string out of the URI and moves it into the query portion of the request object, handling existing query parameters and URL encoding.
1805	Reset Service Principal Profile of a managed cluster.
1806	Deletes itself if find queue name or topic name and subscription name.
1807	Unlocks itself if find queue name or topic name and subscription name.
1808	Renew lock on itself if find queue name or topic name and subscription name.
1809	Add additional headers to request for message request.
1810	Return the current message as expected by batch body format.
1811	Gets the health of a Service Fabric cluster.
1812	Gets the health of a Service Fabric cluster using the specified policy.
1813	Removes or unregisters a Service Fabric application type from the cluster.
1814	Gets a list of repair tasks matching the given filters.
1815	Submits a property batch.

Submits a batch of property operations. Either all or none of the operations will be committed.
1816	Simple error handler for azure.
1817	Start capturing network packets for the site.
1818	Get the difference in configuration settings between two web app slots.
1819	Swaps two deployment slots of an app.
1820	Execute OData query.

### Example 1:
Input:
def settext(self, text, cls='current'):
        """Set the text for this element.

        Arguments:
            text (str): The text
            cls (str): The class of the text, defaults to ``current`` (leave this unless you know what you are doing). There may be only one text content element of each class associated with the element.
        """
        self.replace(TextContent, value=text, cls=cls)
Output:
Set the text for this element.

### It is your turn now! Summarizing the follwing code into summary. Please output the answer directly as shown in the example(s) if provided.###
Input:
def get_by_type(
            self, app_id, event_type, timespan=None, filter=None, search=None, orderby=None, select=None, skip=None, top=None, format=None, count=None, apply=None, custom_headers=None, raw=False, **operation_config):
        """Execute OData query.

        Executes an OData query for events.

        :param app_id: ID of the application. This is Application ID from the
         API Access settings blade in the Azure portal.
        :type app_id: str
        :param event_type: The type of events to query; either a standard
         event type (`traces`, `customEvents`, `pageViews`, `requests`,
         `dependencies`, `exceptions`, `availabilityResults`) or `$all` to
         query across all event types. Possible values include: '$all',
         'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests',
         'dependencies', 'exceptions', 'availabilityResults',
         'performanceCounters', 'customMetrics'
        :type event_type: str or ~azure.applicationinsights.models.EventType
        :param timespan: Optional. The timespan over which to retrieve events.
         This is an ISO8601 time period value.  This timespan is applied in
         addition to any that are specified in the Odata expression.
        :type timespan: str
        :param filter: An expression used to filter the returned events
        :type filter: str
        :param search: A free-text search expression to match for whether a
         particular event should be returned
        :type search: str
        :param orderby: A comma-separated list of properties with \\"asc\\"
         (the default) or \\"
1821	Add a face to a large face list from an image stream.
1822	Reset auth_attempted on redirects.
1823	Creates Migration configuration and starts migration of entities from Standard to Premium namespace.
1824	Publishes a batch of events to an Azure Event Grid topic.
1825	Moves resources from one resource group to another resource group.
1826	Define a new default profile.
1827	Queries policy tracked resources under the management group.
1828	Create a queue entity.
1829	Delete a queue entity.
1830	Create a topic entity.
1831	Delete a topic entity.
1832	Create a subscription entity.
1833	Create a Client from a Service Bus connection string.
1834	Perform an operation to update the properties of the entity.
1835	Whether the receivers lock on a particular session has expired.
1836	Creates a session for a node.
1837	Creates an Azure subscription.
1838	Export logs that show Api requests made by this subscription in the given time window to show throttling activities.
1839	Scan output for exceptions and return list of TaskAddResults.
1840	Adds a chunk of tasks to the job, handling retries for large request bodies and server errors.
1841	Main method for worker to run

Pops a chunk of tasks off the collection of pending tasks to be added and submits them to be added.
1842	Build the actual config for Jinja2, based on SDK config.
1843	Resets the user password on an environment. This operation can take a while to complete.
1844	Starts an environment by starting all resources inside the environment.
1845	Create message from response.
1846	Converts an XML entry element to a rule object by parsing filter and action expressions from the XML structure.
1847	Converts an entry element to a queue object by parsing XML response and mapping elements to queue attributes.
1848	Converts an entry element to a topic object by parsing XML content and setting topic properties.
1849	Converts an entry element to a subscription object by parsing XML content and setting subscription properties.
1850	Creates a new certificate inside the specified account.
1851	Deletes the specified certificate.
1852	Return a SDK client initialized with current CLI credentials, CLI default subscription and CLI default cloud.
1853	Return a SDK client initialized with a JSON auth dict.
1854	Return a SDK client initialized with auth file.
1855	Parse enumeration results from XML response and return a populated object with the specified item types.
1856	Get properties from element tree element.
1857	Delete the Provisioning Service Certificate.
1858	Get a client for a queue entity.
1859	Get clients for all queue entities in the namespace.
1860	Get a client for a topic entity.
1861	Get a client for all topic entities in the namespace.
1862	Receive messages by sequence number that have been previously deferred.
1863	Settle messages that have been previously deferred.
1864	List the web sites defined on this webspace.
1865	Create a website.
1866	Delete a website.
1867	Update a web site.
1868	Restart a web site.
1869	Get historical usage metrics for a website in a webspace.
1870	Get metric definitions of metrics available for this website.
1871	Get a site's publish profile as a string.
1872	Get a site's publish profile as an object
1873	Updates the policies for the specified container registry.
1874	Create a new cloud service with the specified parameters.
1875	Check if a new job collection with the given name may be created, or if it is unavailable. Returns a Boolean true or false.
1876	Get the details of a job collection.
1877	Completes the restore operation on a managed database.
1878	Cancel one or more messages that have previously been scheduled and are still pending.
1879	Wait until all pending messages have been sent and return their send results.
1880	Reconnect the handler and re-queue pending messages.
1881	Writes a certificate file from publish settings and returns the subscription ID.
1882	Load any stored cookies for the plugin that have not expired.
1883	Returns the width of the string it would be when displayed.
1884	Drops characters from the beginning of a string based on unicode width, not byte length, and returns the remaining substring that fits within the specified maximum length.
1885	Clears out the previous line and prints a new one.
1886	Formats the file size into a human readable format.
1887	Formats elapsed seconds into a human readable format.
1888	Creates a status line with appropriate size.
1889	Progress an iterator and updates a pretty status line to the terminal.
1890	Generate segment numbers and their availability times for media playlists, handling both static and dynamic stream cases.
1891	Yields segments for this element, considering segment templates, lists, and default segments.
1892	Pauses the thread for a specified time and returns whether the time ran out normally or was interrupted.
1893	Adds a segment to the download pool and write queue.
1894	Puts a value into a queue but aborts if this thread is closed.
1895	Returns parameters needed for Akamai HD player verification.
1896	Extract the nonce from an HTTP response for signing url requests.
1897	Find the Video Packet ID in the HTML for the provided URL.
1898	Wrapper around json.loads that wraps errors in custom exception with a snippet of the data in the message.
1899	Wrapper around ElementTree.fromstring with extra features for handling XML parsing with error handling and namespace stripping.
1900	Parses a query string into a dict.
1901	Search for a key in a nested dict, or list of nested dicts, and return the values.
1902	Spawn the process defined in `cmd` with optional parameters and arguments, handling timeouts and stderr redirection.
1903	Brute force regex based HTML tag parser that finds HTML tags in a page and yields matching tags with their attributes and inner content.
1904	Attempt to parse a DASH manifest file and return its streams.
1905	Determine the Unicode encoding of a JSON text sample based on NULL byte patterns in the first 4 octets.
1906	Parses JSON from a response.
1907	Parses XML from a response.
1908	Parses a semi-colon delimited list of cookies and sets them.
1909	Parses a semi-colon delimited list of headers and stores them in the headers dictionary.
1910	Parses a semi-colon delimited list of query parameters.
1911	Return the message for this LogRecord after merging any user-supplied arguments with the message.
1912	A factory method which can be overridden in subclasses to create specialized LogRecords.
1913	Attempt a login to LiveEdu.tv
1914	Loads a plugin from the same directory as the calling plugin.
1915	Update or remove keys from a query string in a URL.
1916	Reads FLV tags from fd or buf and returns them with adjusted timestamps.
1917	Find all the arguments required by name.
1918	Checks if file already exists and asks the user if it should be overwritten if it does.
1919	Decides where to write the stream.
1920	Creates a HTTP server listening on a given host and port.
1921	Repeatedly accept HTTP connections on a server.
1922	Continuously output the stream over HTTP.
1923	Prepares a filename to be passed to the player.
1924	Opens a stream, reads 8192 bytes from it, and returns the stream file descriptor and prebuffered data.
1925	Open stream, create output and finally write the stream to output.
1926	Reads data from stream and writes it to the output, handling various output types and showing progress when appropriate.
1927	Decides what to do with the selected stream based on various arguments and conditions.
1928	Fetches streams using correct parameters.
1929	Attempts to fetch streams repeatedly until some are returned or limit hit.
1930	Returns the real stream name of a synonym.
1931	Formats a dict of streams by filtering out synonyms and displaying them next to the stream they point to, with streams sorted by quality.
1932	The URL handler that resolves URLs to plugins, fetches available streams, and handles stream selection or displays valid streams.
1933	Outputs a list of all plugins Streamlink has loaded.
1934	Opens a web browser to allow the user to grant Streamlink access to their Twitch account.
1935	Attempts to load plugins from a list of directories.
1936	Parses arguments from command line and config files, handling unknown arguments and normalizing stream names to lowercase.
1937	Setup console with ConsoleOutput class and handle SIGTERM signal.
1938	Sets the global HTTP settings, such as proxy and headers.
1939	Loads any additional plugins.
1940	Sets Streamlink options.
1941	Show current installed versions
1942	Try to find a stream_id
1943	Fallback if no stream_id was found before
1944	Sets general options used by plugins and streams originating from this session object.
1945	Returns current value of specified option.
1946	Sets plugin specific options used by plugins originating from this session object.
1947	Returns current value of plugin specific option.
1948	Attempts to find a plugin that can use this URL and handles redirects.
1949	Attempt to load plugins from the specified path.
1950	Convert a timestamp to seconds.
1951	Checks if the string value starts with another string.
1952	Checks if the string value ends with another string.
1953	Checks if the string value contains another string.
1954	Get a named attribute from an object.
1955	Filters out unwanted items using the specified function.
1956	Apply function to each value inside the sequence or dict.
1957	Parses an URL and validates its attributes.
1958	Find a XML element via xpath.
1959	Find a list of XML elements via xpath.
1960	Finds embedded player url in HTTP response.
1961	Attempts to parse a M3U8 playlist from a string of data.
1962	Check if the current player supports adding a title.
1963	Logs in to Steam.
1964	Returns the stream_id contained in the HTML.
1965	Returns a nested list of different stream options.
1966	Login to a website and update cached cookies.
1967	Creates a key-function mapping.
1968	Makes a call against the api.
1969	Starts a session against Crunchyroll's server and returns the session ID.
1970	Returns the data for a certain media item.
1971	Creates a new CrunchyrollAPI object, initiates its session and tries to authenticate it either by using saved credentials or the user's username and password.
1972	Compress a byte string using the specified compression parameters.
1973	Show character in readable format
1974	Show string or char.
1975	Read n bytes from the stream on a byte boundary.
1976	The value used for processing. Can be a tuple with optional extra bits.
1977	Long explanation of the value from the numeric value with optional extra bits. Used by Layout.verboseRead when printing the value.
1978	Store decodeTable and compute lengthTable, minLength, maxLength from encodings.
1979	Given the bit pattern lengths for symbols, set the decode table and related properties.
1980	Show all words of the code in a nice format.
1981	Read symbol from stream. Returns symbol, length.
1982	Expanded version of Code.explanation supporting extra bits.
1983	Override if you don't define value0 and extraTable
1984	Give the range of possible values in a tuple.
1985	Give count and value.
1986	Make a nice mnemonic
1987	Give mnemonic representation of meaning.
1988	Build the action table from the text above
1989	Perform the proper action.
1990	Produce hex dump of all data containing the bits from pos to stream.pos
1991	Process a brotli stream.
1992	Read MNIBBLES and meta block length; if empty block, skip block and return true.
1993	Handle uncompressed data if true.
1994	Read block type switch descriptor for given kind of blockType.
1995	Perform in-place inverse move-to-front transform.
1996	Read prefix code array
1997	Turns an intensity array into a monochrome image by scaling intensities and applying a color.
1998	Similar to monochrome, but now do it for multiple colors
1999	Implementation of Dataset.to_arrow_table
2000	Adds method f to the Dataset class
2001	Convert velocities from a cartesian system to proper motions and radial velocities.
2002	Convert proper motion to perpendicular velocities.
2003	Return a graphviz.Digraph object with a graph of the expression
2004	Computes counts of unique values.
2005	Map values of an expression or in memory column according to an input dictionary or a custom callable function.
2006	Create a vaex app, the QApplication mainloop must be started.
2007	Open a list of filenames, and return a DataFrame with all DataFrames concatenated.
2008	Connect to a SAMP Hub, wait for a single table load event, disconnect, download the table and return the DataFrame.
2009	Create a vaex DataFrame from an Astropy Table.
2010	Create an in memory DataFrame from numpy arrays.
2011	Similar to from_arrays, but convenient for a DataFrame of length 1.
2012	Create an in memory DataFrame from a pandas DataFrame.
2013	Shortcut to read a csv file using pandas and convert to a DataFrame directly.
2014	Connect to hostname supporting the vaex web api.
2015	Creates a zeldovich DataFrame.
2016	Concatenate a list of DataFrames.
2017	Creates a virtual column equivalent to numpy.arange that uses 0 memory.
2018	Add a dataset and add it to the UI
2019	Evaluate an expression on the server and return the result.
2020	Decorator to transparently accept delayed computation.
2021	Find all columns that this selection depends on for df ds
2022	Helper function for returning task results, either the result directly when immediate is True, or the task itself (a promise) when delayed execution is used.
2023	Sort table by given column number.
2024	Read header data from Gadget data file and return offsets of positions and velocities.
2025	Clear the cursor.
2026	Used for unittesting to make sure the plots are all done
2027	Open document by the default handler of the OS, could be a url opened by a browser, a text file by an editor etc
2028	Flexible writing, where f can be a filename or f object, if filename, closed after writing
2029	Combines all masks from a list of arrays and logically ors them into a single mask.
2030	Evaluates expression and drops the result, useful for benchmarking since vaex is usually lazy.
2031	Return the first element of a binned expression, where the values each bin are sorted by order_expression.
2032	Calculate the mean for expression, possibly on a grid defined by binby.
2033	Calculate the sum for the given expression, possible on a grid defined by binby
2034	Calculate the standard deviation for the given expression, possible on a grid defined by binby
2035	Calculate the covariance matrix for x and y or more expressions, possibly on a grid defined by binby.
2036	Calculate the minimum and maximum for expressions, possibly on a grid defined by binby.
2037	Calculate the minimum for given expressions, possibly on a grid defined by binby.
2038	Calculate the median, possibly on a grid defined by binby.
2039	Viz 1d, 2d or 3d in a Jupyter notebook using specified backend.
2040	Count non missing value for expression on an array which represents healpix data.
2041	Plot data in 2d using a healpix column.
2042	Use at own risk, requires ipyvolume
2043	Return the numpy dtype for the given expression, handling columns and evaluated expressions with special string type conversion logic.
2044	Each DataFrame has a directory where files are stored for metadata etc.
2045	Return the internal state of the DataFrame in a dictionary
2046	Sets the internal state of the DataFrame.
2047	Removes the virtual metadata file and cleans up the directory if empty.
2048	Writes virtual columns, variables and their ucd, description and units to a YAML file.
2049	Writes all meta data, ucd, description and units to a meta.yaml file in the private directory.
2050	Generate a Subspaces object based on custom expressions or all possible combinations based on dimension.
2051	Set the variable to an expression or value defined by expression_or_value.
2052	Evaluates the variable given by name.
2053	Internal use, ignores the filter
2054	Return a dict containing the ndarray corresponding to the evaluated data
2055	Return a copy of the DataFrame with specified column names and selection options.
2056	Return a pandas DataFrame containing the ndarray corresponding to the evaluated data.
2057	Returns an arrow Table object containing the arrays corresponding to the evaluated data
2058	Returns an astropy table object containing the ndarrays corresponding to the evaluated data.
2059	Add an in memory array as a column.
2060	Renames a column in memory, updating all associated metadata and optionally storing the change in state.
2061	Convert cartesian coordinates to polar coordinates and add as virtual columns.
2062	Convert velocities from cartesian to spherical coordinate system.
2063	Convert cartesian to polar velocities.
2064	Convert cylindrical polar velocities to Cartesian.
2065	Perform 2D rotation on virtual columns.
2066	Convert spherical coordinates to cartesian coordinates.
2067	Convert cartesian to spherical coordinates.
2068	Add a virtual column to the DataFrame.
2069	Deletes a virtual column from a DataFrame.
2070	Add a variable to a DataFrame.
2071	Deletes a variable from a DataFrame.
2072	Return a shallow copy of a DataFrame with the last n rows.
2073	Display the first and last n elements of a DataFrame.
2074	Give a description of the DataFrame.
2075	Display the DataFrame from row i1 till i2 in the specified format.
2076	Set the current row, and emit the signal signal_pick.
2077	Return a list of column names with optional filtering criteria.
2078	Return a DataFrame with all columns trimmed by the active range.
2079	Returns a DataFrame containing only rows indexed by indices.
2080	Return a DataFrame containing only the filtered rows.
2081	Returns a DataFrame with a random set of rows
2082	Returns a list containing random portions of the DataFrame.
2083	Returns a list containing ordered subsets of the DataFrame.
2084	Return a sorted DataFrame, sorted by the specified expression.
2085	Returns a new DataFrame where the virtual column is turned into an in memory numpy array.
2086	Undo selection, for the name.
2087	Redo selection for the specified name.
2088	Can selection name be redone?
2089	Perform a selection defined by a boolean expression and combine it with previous selection using specified mode.
2090	Create a selection that selects rows having non missing values for all columns in column_names.
2091	Create a shallow copy of a DataFrame with filtering applied to remove missing values.
2092	Select a 2d rectangular box in the space given by x and y, bounds by limits.
2093	Select a n-dimensional rectangular box bounded by limits.
2094	Select a circular region centered on (xc, yc) with radius r.
2095	Select an elliptical region centered on xc, yc, with given width, height and angle.
2096	For performance reasons, a lasso selection is handled differently.
2097	Invert the selection, i.e. what is selected will not be, and vice versa
2098	Sets the selection object.
2099	Select elements using lasso or similar selection method, updating history and emitting change signals.
2100	Finds a non-colliding name by optional postfixing.
2101	Returns a list of string which are the virtual columns that are not used in any other virtual column.
2102	Return a graphviz.Digraph object with a graph of all virtual columns
2103	Mark column as categorical, with given labels, assuming zero indexing
2104	Encode column as ordinal values and mark it as categorical.
2105	Gives direct access to the data as numpy arrays.
2106	Get the length of the DataFrames, for the selection of the whole DataFrame.
2107	Join the columns of the other DataFrame to this one, assuming the ordering is the same
2108	Concatenates two DataFrames by adding the rows of one to the other DataFrame and returns a new DataFrameConcatenated object.
2109	Exports the DataFrame to a vaex hdf5 file
2110	Add a column to the DataFrame.
2111	Adds method f to the DataFrame class
2112	Decorator to register a new function with vaex.
2113	Returns an array where missing values are replaced by value.
2114	Obtain the day of the week with Monday=0 and Sunday=6
2115	The ordinal day of the year.
2116	Check whether a year is a leap year.
2117	Extracts the year out of a datetime sample.
2118	Extracts the month out of a datetime sample.
2119	Returns the month names of a datetime sample in English.
2120	Extracts the day from a datetime sample.
2121	Returns the day names of a datetime sample in English.
2122	Returns the week ordinal of the year.
2123	Extracts the hour out of a datetime samples.
2124	Extracts the minute out of a datetime samples.
2125	Extracts the second out of a datetime samples.
2126	Capitalize the first letter of a string sample.
2127	Concatenate two string columns on a row-by-row basis.
2128	Check if a string pattern or regex is contained within a sample of a string column.
2129	Count the occurrences of a pattern in a string column.
2130	Returns the lowest indices in each string where the provided substring is fully contained.
2131	Extract a character from each sample at the specified position from a string column.
2132	Returns the lowest indices in each string where the provided substring is fully contained.
2133	Converts string samples to lower case.
2134	Remove leading characters from a string sample.
2135	Pad strings in a given column.
2136	Duplicate each string in a column.
2137	Returns the highest indices in each string where the provided substring is fully contained.
2138	Returns the highest indices in each string where the provided substring is fully contained between within a sample. If the substring is not found, -1 is returned. Same as `str.rfind`.
2139	Fills the left side of string samples with a specified character such that the strings are left-hand justified.
2140	Remove trailing characters from a string sample.
2141	Slice substrings from each string element in a column.
2142	Removes leading and trailing characters from strings in a column.
2143	Converts all string samples to titlecase.
2144	Converts all strings in a column to uppercase.
2145	Attempts to return a numpy array converted to the most sensible dtype. Tries to make dtype int, then float, then no change.
2146	Convert into numpy recordarray
2147	Writes properties to the file in Java properties format.
2148	Writes a comment to the file in Java properties format.
2149	Write a single property to the file in Java properties format.
2150	Incrementally read properties from a Java .properties file.
2151	Wrap a file to convert newlines regardless of whether the file was opened with the "universal newlines" option or not.
2152	Return the version information for all librosa dependencies.
2153	Handle renamed arguments by checking if the old argument is deprecated and returning the appropriate value while issuing a deprecation warning.
2154	Set the FFT library used by librosa.
2155	Beat tracking function that analyzes audio files to detect beat events and saves the timestamps as a CSV file.
2156	Load audio, estimate tuning, apply pitch correction, and save.
2157	Convert frame indices to audio sample indices.
2158	Converts sample indices into STFT frames.
2159	Converts time stamps into STFT frames.
2160	Convert MIDI numbers to note strings.
2161	Convert frequencies from Hz to Mels using either the HTK or Slaney formula.
2162	Convert mel bin numbers to frequencies.
2163	Compute the frequencies computed by `np.fft.fftfreq` for a given sampling rate and FFT size.
2164	Compute the center frequencies of Constant-Q bins.
2165	Compute an array of acoustic frequencies tuned to the mel scale.
2166	Compute the A-weighting of a set of frequencies.
2167	Return an array of time values to match the time axis from a feature matrix.
2168	Return an array of sample indices to match the time axis from a feature matrix.
2169	Compute the hybrid constant-Q transform of an audio signal, using pseudo CQT for higher frequencies and full CQT for lower frequencies.
2170	Compute the pseudo constant-Q transform of an audio signal.
2171	Compute the inverse constant-Q transform.
2172	Generate the frequency domain constant-Q filter basis.
2173	Helper function to trim and stack a collection of CQT responses
2174	Compute the filter response with a target STFT hop.
2175	Compute the number of early downsampling operations
2176	Perform early downsampling on an audio signal, if it applies.
2177	Calculate the accumulated cost matrix D using dynamic programming for DTW.
2178	Backtrack optimal warping path.
2179	Core Viterbi algorithm implementation for hidden Markov models.
2180	Viterbi decoding from discriminative state predictions.
2181	Construct a uniform transition matrix over `n_states`.
2182	Construct a self-loop transition matrix over n_states with specified self-transition probabilities.
2183	Construct a cyclic transition matrix over n_states.
2184	Construct a localized transition matrix with specified width and window function.
2185	Detect note onsets in audio signal using peak picking on onset strength envelope.
2186	Compute a spectral flux onset strength envelope.
2187	Backtrack detected onset events to the nearest preceding local minimum of an energy function.
2188	Compute a spectral flux onset strength envelope across multiple channels.
2189	Save time steps in CSV format.
2190	Output a time series as a .wav file
2191	Get a default colormap from the given data.
2192	Plot the amplitude envelope of a waveform.
2193	Helper to set the current image in pyplot mode.
2194	Compute axis coordinates
2195	Check if "axes" is an instance of an axis object. If not, use `gca`.
2196	Set the axis scaling for the given axes and axis type.
2197	Get the frequencies for FFT bins
2198	Get the frequencies for Mel bins
2199	Get CQT bin frequencies.
2200	Get chroma bin numbers.
2201	Get time coordinates from frames
2202	Estimate the tuning of an audio time series or spectrogram input.
2203	Perform pitch tracking on thresholded parabolically-interpolated STFT.
2204	Decompose an audio time series into harmonic and percussive components.
2205	Extract harmonic elements from an audio time-series.
2206	Extract percussive elements from an audio time-series.
2207	Time-stretch an audio series by a fixed rate.
2208	Pitch-shift the waveform by `n_steps` half-steps.
2209	Remix an audio signal by re-ordering time intervals.
2210	Frame-wise non-silent indicator for audio input.
2211	Trim leading and trailing silence from an audio signal.
2212	Split an audio signal into non-silent intervals.
2213	Apply phase vocoder to time-stretch an STFT matrix by a given rate.
2214	Convert an amplitude spectrogram to dB-scaled spectrogram.
2215	Helper function to retrieve a magnitude spectrogram.
2216	HPSS beat tracking

Load an audio file, separate harmonic and percussive components, track beats on the percussive component, and save beat timestamps as a CSV file.
2217	Decompose a feature matrix using NMF or other sklearn decomposition methods.
2218	Filter data by aggregating nearest neighbors in feature space.
2219	Nearest-neighbor filter helper function.

This is an internal function, not for use outside of the decompose module.

It applies the nearest-neighbor filter to S, assuming that the first index corresponds to observations.
2220	Create a Mel-frequency filterbank matrix to combine FFT bins into Mel-frequency bins.
2221	Create a Filterbank matrix to convert STFT to chroma
2222	Decorator function for windows with fractional input that ensures specific length and zero-padding behavior for fractional inputs while preserving integer behavior.
2223	Construct a constant-Q basis using the filter bank described by McVicar (2013).
2224	Return length of each filter in a constant-Q basis.
2225	Convert a Constant-Q basis to Chroma.
2226	Get the equivalent noise bandwidth of a window function.
2227	Compute a window function.

This is a wrapper for `scipy.signal.get_window` that additionally supports callable or pre-computed windows.
2228	Helper function to construct a multirate filterbank.
2229	Helper function for generating center frequency and sample rate pairs for multirate filterbank implementation.
2230	Helper function for window sum-square calculation.
2231	Compute the sum-square envelope of a window function at a given hop length.
2232	Build a two-dimensional diagonal filter for smoothing recurrence or self-similarity matrices.
2233	Compute the spectral centroid.
2234	Compute roll-off frequency.
2235	Compute spectral flatness for audio signals.

The function calculates the spectral flatness (tonality coefficient) of an audio signal, which quantifies how noise-like a sound is compared to being tone-like. A value close to 1.0 indicates a noise-like spectrum, while lower values indicate more tonal content. The result is normalized to the range [0, 1] and can be converted to decibel scale. Supports both time-series and pre-computed spectrogram inputs.
2236	Get coefficients of fitting an nth-order polynomial to the columns of a spectrogram.
2237	Compute the zero-crossing rate of an audio time series.
2238	Compute a chromagram from a waveform or power spectrogram.
2239	Compute the constant-Q chromagram of an audio time series.
2240	Compute a mel-scaled spectrogram.
2241	Compute the Jaccard similarity between two intervals.
2242	Find the best Jaccard match from query to candidates
2243	Numba-accelerated interval matching algorithm.
2244	Match one set of time intervals to another based on Jaccard similarity.
2245	Match one set of events to another.
2246	Compute harmonic salience function for time-frequency representation.
2247	Compute the energy at harmonics of time-frequency representation.
2248	Populate a harmonic tensor from a time-frequency representation.
2249	Populate a harmonic tensor from a time-frequency representation with time-varying frequencies.
2250	Load an audio file as a floating point time series.
2251	Load an audio buffer using audioread, handling offset and duration parameters.
2252	Force an audio signal down to mono.
2253	Resample a time series from orig_sr to target_sr.
2254	Compute bounded auto-correlation of an array.

The function calculates the auto-correlation of the input array `y` along a specified axis, with an optional maximum lag size. It uses FFT-based convolution for efficient computation and returns the truncated auto-correlation result. The implementation supports both complex and real-valued inputs and handles padding internally to ensure full-length correlation computation.
2255	Compute Linear Prediction Coefficients via Burg's method.
2256	Returns a signal with click events placed at specified times or frame indices.
2257	Generate a pure tone signal as a cosine wave with specified frequency, sampling rate, and duration.
2258	Generate a chirp signal that goes from frequency `fmin` to frequency `fmax`.
2259	Helper function to get files in a single directory
2260	Phase-vocoder time stretch demo function.
2261	Parse and return program arguments for time stretching example.
2262	HPSS demo function.
2263	Dynamic programming beat tracker that estimates tempo and detects beat events in audio time series.
2264	Internal function that tracks beats in an onset strength envelope.
2265	Construct the local score for an onset envelope and given period.
2266	Core dynamic program for beat tracking
2267	Get the last beat from the cumulative score array.
2268	Convert a recurrence matrix into a lag matrix.
2269	Convert a lag matrix into a recurrence matrix.
2270	Filtering in the time-lag domain.
2271	Sub-divide a segmentation by feature clustering.
2272	Perform bottom-up temporal segmentation using agglomerative clustering to partition data into contiguous segments.
2273	Multi-angle path enhancement for self- and cross-similarity matrices.
2274	Onset detection function that detects and saves onset timestamps from audio files.
2275	Slice a time series into overlapping frames.
2276	Validate whether a variable contains valid, mono audio data.
2277	Ensure that an input value is integer-typed by casting it after optional transformation.
2278	Fix the length of an array to exactly the specified size by trimming or padding along a given axis.
2279	Sort an array along its rows or columns.
2280	Normalize an array along a chosen axis.
2281	Find local maxima in an array.
2282	Uses a flexible heuristic to pick peaks in a signal based on local maxima, average thresholding, and waiting periods between peaks.
2283	Return a row-sparse matrix approximating the input `x`.
2284	Sparse matrix roll

This operation is equivalent to ``numpy.roll``, but operates on sparse matrices.
2285	Convert an integer buffer to floating point values.
2286	Generate a slice array from an index array.
2287	Synchronous aggregation of a multi-dimensional array between boundaries.
2288	Robustly compute a softmask operation.
2289	Compute the tiny-value corresponding to an input's data type.
2290	Read frame images from a directory and join them as a video.
2291	Read the next frame.

If the next frame have been decoded before and in the cache, then
return it directly, otherwise decode, cache and return it.
2292	Get frame by index.
2293	Convert a video to frame images.
2294	Track the progress of tasks execution with a progress bar.
2295	Track the progress of parallel task execution with a progress bar.
2296	Flip an image horizontally or vertically.
2297	Rotate an image by a specified angle with optional center, scale, and border value parameters, and return the rotated image.
2298	Clip bboxes to fit the image shape.
2299	Scaling bboxes w.r.t the box center.
2300	Crop image patches by scaling bounding boxes, clipping them, and extracting patches with optional padding.
2301	Pad an image to a certain shape.
2302	Pad an image to ensure each edge to be multiple to some number.
2303	Rescale a size by a ratio.
2304	Resize image to a given size.
2305	Resize image to the same size of a given image.
2306	Resize image while keeping the aspect ratio.
2307	Register a handler for some file extensions.
2308	Get priority value.
2309	Dequantize an array by clipping values and scaling them to the specified range.
2310	Show an image in a window with optional wait time.
2311	Draw bboxes on an image.
2312	Read an optical flow map.
2313	Write optical flow to file.

The function saves optical flow data to either a binary .flo file (when not quantized) or as compressed JPEG images (when quantized). When quantized, the flow components are concatenated along a specified axis before saving as JPEG images. The function supports additional arguments for flow quantization when the quantize parameter is True.
2314	Recover from quantized flow.
2315	Load state_dict to a module.
2316	Load checkpoint from a file or URI.
2317	Copy a model state_dict to cpu.
2318	Save checkpoint to file.

The checkpoint will have 3 fields: ``meta``, ``state_dict`` and
``optimizer``. By default ``meta`` will contain version and time info.
2319	Init the optimizer.

The method initializes an optimizer object from either a dictionary configuration or an existing optimizer instance. It supports creating optimizers using PyTorch's optimization module and performs type checking to ensure the input is valid. The method returns a properly configured optimizer object that can be used for training.
2320	Init the logger.
2321	Get current learning rates.
2322	Register a hook into the hook list.
2323	Start running the training or validation process with the specified data loaders and workflow.
2324	Register default hooks for training.
2325	Convert a video with ffmpeg.
2326	Resize a video.
2327	Cut a clip from a video.
2328	Concatenate multiple videos into a single one.
2329	Load a text file and parse the content as a list of strings.
2330	Load a text file and parse the content as a dict.
2331	Create a 3x3 convolution layer with padding and dilation options.
2332	Initialize an object from a dictionary.
2333	Read an image from a file or numpy array.
2334	Read an image from bytes.
2335	Write image to file.
2336	Convert a BGR image to grayscale image.
2337	Convert a grayscale image to BGR image.
2338	Cast elements of an iterable object into some type.
2339	Check whether it is a sequence of some type.
2340	Slice a list into several sub lists by a list of given length.
2341	A decorator factory to check if prerequisites are satisfied.
2342	Average latest n values or all values
2343	Scatters tensor across multiple GPUs.
2344	Convert various input to color tuples.
2345	Add check points in a single line.
2346	Start the timer.
2347	Total time since the timer is started.
2348	Time since the last checking.
2349	Show optical flow.
2350	Convert flow map to RGB image.
2351	Build a color wheel.
2352	Computes the precision@k for the specified values of k
2353	Scatter inputs to target gpus with support for DataContainer.
2354	Scatter with support for kwargs dictionary
2355	Fetch all the information by using aiohttp
2356	Read and decodes JSON response.
2357	Read response payload and decode.
2358	Process coroutine callback function
2359	For crawling multiple urls asynchronously, either using gather or sequential requests.
2360	Init a Request class for crawling html
2361	Actually start crawling.
2362	Ensures tasks have an action key and strings are converted to python objects.
2363	Parses YAML data with line number information attached to each node.
2364	Return distribution full name with - replaced with _
2365	Return archive name without extension
2366	Add additional requirements from setup.cfg to file metadata_path.
2367	Convert an .egg-info directory into a .dist-info directory
2368	Returns a simple text message.
2369	Returns a message that includes a set of suggested actions and optional text.
2370	Returns a single message activity containing an attachment.
2371	Returns a message that will display a set of attachments in list form.
2372	Returns a message that will display a single image or video to a user.
2373	Creates a trace activity based on this activity.
2374	Sets the telemetry client for logging events.
2375	Read storeitems from storage.
2376	Save storeitems to storage.
2377	Remove storeitems from storage.
2378	Create a StoreItem from a CosmosDB result.
2379	Return the dict of a StoreItem, eliminating non_magic attributes and the e_tag.
2380	Return the sanitized key by replacing forbidden characters with '*' and their Unicode code point.
2381	Call the get or create methods for database and container.
2382	Return the database link by checking if it exists or creating it.
2383	Return the container link by checking if the container exists or creating it.
2384	Fills the event properties and metrics for the QnaMessage event for telemetry.
2385	Returns the conversation reference for an activity.
2386	Give the waterfall step a unique name
2387	Determine if a number of Suggested Actions are supported by a Channel.
2388	Determine if a number of Card Actions are supported by a Channel.
2389	Get the Channel Id from the current Activity on the Turn Context.
2390	Determines if a given Auth header is from the Bot Framework Emulator.
2391	Returns an attachment for a hero card.
2392	Return instruction params.
2393	For a composite instruction, reverse the order of sub-gates.
2394	Invert this instruction.

Returns a fresh instruction for the inverse, recursively inverting composite instructions. Raises QiskitError if the instruction is not composite and inverse is not implemented.
2395	Add classical control on register classical and value val.
2396	Shallow copy of the instruction.
2397	Print an if statement if needed.
2398	Return a default OpenQASM string for the instruction.
2399	Run all the passes on a QuantumCircuit.
2400	Do a pass and its "requires".
2401	Returns a list structure of the appended passes and its options.
2402	Fetches the passes added to this flow controller.
2403	Constructs a flow controller based on the partially evaluated controller arguments.
2404	Apply U to q.
2405	Apply a single qubit gate to the qubit.
2406	Get the matrix for a single qubit gate.

### Example 2:
Input:
def settext(self, text, cls='current'):
        """Set the text for this element.

        Arguments:
            text (str): The text
            cls (str): The class of the text, defaults to ``current`` (leave this unless you know what you are doing). There may be only one text content element of each class associated with the element.
        """
        self.replace(TextContent, value=text, cls=cls)
Output:
Set the text for this element.

### It is your turn now! Summarizing the follwing code into summary. Please output the answer directly as shown in the example(s) if provided.###
Input:
def single_gate_matrix(gate, params=None):
    """Get the matrix for a single qubit.

    Args:
        gate(str): the single qubit gate name
        params(list): the operation parameters op['params']
    Returns:
        array: A numpy array representing the matrix
    """

    # Converting sym to floats improves the performance of the simulator 10x.
    # This a is a probable a FIXME since it might show bugs in the simulator.
    (theta, phi, lam) = map(float, single_gate_params(gate, params))

    return np.array([[np.cos(theta / 2),
                      -np.exp(1j * lam) * np.sin(theta / 2)],
                     [np.exp(1j * phi) * np.sin(theta / 2),
                      np.exp(1j * phi + 1j * lam) * np.cos(theta / 2)]])
Output:
Get the matrix for a single qubit gate.
2407	Return the index string for Numpy.einsum matrix-matrix multiplication.
2408	Return the index string for Numpy.einsum matrix-vector multiplication.
2409	Return the index string for Numpy.einsum matrix multiplication.
2410	Build a ``DAGCircuit`` object from a ``QuantumCircuit``.
2411	Function used to fit the exponential decay.
2412	Function used to fit the decay cosine.
2413	Plot coherence data.
2414	Convert raw RB data into averages and standard deviation.
2415	Plot randomized benchmarking data.
2416	Finds runs containing parameterized gates and splits them into sequential runs excluding the parameterized gates.
2417	Return a triple theta, phi, lambda for the product of two u3 gates.
2418	Express a Y.Z.Y single qubit gate as a Z.Y.Z gate.

Solve the equation Ry(theta1).Rz(xi).Ry(theta2) = Rz(phi).Ry(theta).Rz(lambda) for theta, phi, and lambda, and return a solution.
2419	Validates the input to state visualization functions.
2420	Trim a PIL image and remove white space.
2421	Get the list of qubits that this gate would cover.
2422	Build an Instruction object from a QuantumCircuit.
2423	Pick a convenient layout depending on the best matching qubit connectivity, and set the property `layout`.
2424	Computes the qubit mapping with the best connectivity.
2425	Apply barrier to circuit.
2426	Compute the mean value of a diagonal observable by calculating the weighted average over experimental counts.
2427	Process an Id or IndexedId node as a bit or register type.

Return a list of tuples (Register,index).
2428	Process a custom unitary node.
2429	Process a gate node.

If opaque is True, process the node as an opaque gate node.
2430	Process a CNOT gate node.
2431	Process a measurement node.
2432	Process an if node.
2433	Create a DAG node out of a parsed AST op node.
2434	Return duration of supplied channels.
2435	Return minimum start time for supplied channels.
2436	Return maximum start time for supplied channels.
2437	Iterable for flattening Schedule tree.
2438	Validates a value against the correct type of the field.
2439	Include unknown fields after dumping.
2440	Include unknown fields after load.
2441	Create a patched Schema for validating models by overriding the _deserialize method of fields to call custom validation functions.
2442	Validate the internal representation of the instance.
2443	Add validation after instantiation.
2444	Serialize the model into a Python dict of simple types.
2445	Deserialize a dict of simple types into an instance of this class.
2446	Apply n-qubit QFT on q in circ.
2447	Partial trace over subsystems of multi-partite vector.
2448	Flatten an operator to a vector in a specified basis.
2449	Devectorize a vectorized square matrix into its original form using specified methods.
2450	Convert a Choi-matrix to a Pauli-basis superoperator.
2451	Truncate small values of a complex array.
2452	Construct the outer product of two vectors.
2453	Calculate the concurrence of a quantum state or density matrix.
2454	Compute the Shannon entropy of a probability vector.
2455	Compute the von-Neumann entropy of a quantum state.
2456	Compute the mutual information of a bipartite state.
2457	Compute the entanglement of formation of quantum state.
2458	Compute the Entanglement of Formation of a 2-qubit density matrix.
2459	Create a flattened schedule.
2460	Return schedule shifted by `time`.
2461	Return a new schedule with the `child` schedule inserted into the `parent` at `start_time`.
2462	Return a new schedule with by appending `child` to `parent` at the last time of the `parent` schedule's channels over the intersection of the parent and child schedule's channels.
2463	Apply u3 to q.
2464	Return backend status.
2465	Start the progress bar.
2466	Estimate the remaining time left.
2467	Dissasemble a qobj and return the circuits, run_config, and user header
2468	Calculate the Hamming distance between two bit strings.
2469	Return quaternion for rotation about given axis.
2470	Generate a quaternion from a set of Euler angles.
2471	Normalizes a Quaternion to unit length so that it represents a valid rotation.
2472	Converts a unit-length quaternion to a rotation matrix.
2473	Converts a unit-length quaternion to a sequence of ZYZ Euler angles.
2474	Prepare received data for representation.
2475	Create a histogram representation using vertical bars style graph.
2476	Customize check_type for handling containers.
2477	Check that j is a valid index into self.
2478	Test if an array is a square matrix.
2479	Test if an array is a diagonal matrix.
2480	Test if an array is a symmetric matrix
2481	Test if an array is a Hermitian matrix.
2482	Test if a matrix is positive semidefinite
2483	Test if an array is an identity matrix.
2484	Test if an array is a unitary matrix.
2485	Transform a QuantumChannel to the Choi representation.
2486	Transform a QuantumChannel to the SuperOp representation.
2487	Transform a QuantumChannel to the Kraus representation.
2488	Transform a QuantumChannel to the Chi representation.
2489	Transform a QuantumChannel to the PTM representation.
2490	Transform a QuantumChannel to the Stinespring representation.
2491	Transform a QuantumChannel to the Operator representation.
2492	Transform Operator representation to other representation.
2493	Transform Stinespring representation to Operator representation.
2494	Transform SuperOp representation to Choi representation.
2495	Transform Choi to SuperOp representation.
2496	Transform Kraus representation to Choi representation.
2497	Transform Choi representation to Kraus representation.
2498	Transform Stinespring representation to Kraus representation.
2499	Transform Stinespring representation to Choi representation.
2500	Transform Kraus representation to Stinespring representation.
2501	Transform Kraus representation to SuperOp representation.
2502	Transform Chi representation to a Choi representation.
2503	Transform Choi representation to the Chi representation.
2504	Reravel two bipartite matrices by reshuffling indices and computing their tensor product.
2505	Change of basis of bipartite matrix representation.
2506	Check if dimensions correspond to an n-qubit channel.
2507	Set visible property of ticklines and ticklabels of an axis to False
2508	Set x, y and z labels according to a specified convention.
2509	Resets Bloch sphere data sets to empty.
2510	Add a list of vectors to Bloch sphere.
2511	Add a text or LaTeX annotation to Bloch sphere, parametrized by a qubit state or a vector.
2512	Render the Bloch sphere and its data sets in the given figure and axes.
2513	Plot the front half of a sphere with surface, wireframe, and equator.
2514	Display Bloch sphere and corresponding data sets.
2515	Deprecated function that warns about using the two_qubit_kak function from qiskit.quantum_info.synthesis instead.
2516	Constructs the top line of the element.
2517	Constructs the middle line of the element.
2518	Constructs the bottom line of the element.
2519	Returns the length of the element, including the box around.
2520	Get the params and format them to add them to a label. None if there are no params or if the params are numpy.ndarrays.
2521	Creates the label for a box.
2522	Return the corresponding math mode latex string.
2523	Compile a list of circuits into a qobj.
2524	Apply filters to deprecation warnings for the qiskit module while silencing specific marshmallow warnings.
2525	Get basic hardware information about the local machine including OS, memory, and CPU count.
2526	Checks if internet connection exists to host via specified port.
2527	Internal function that updates the status of a HTML job monitor.
2528	Create a continuous constant pulse with specified times and amplitude.
2529	Generate a continuous square wave signal with specified parameters.
2530	Generate a continuous triangle wave with specified parameters.
2531	Generate a continuous cosine wave signal with specified parameters.
2532	Enforce that the supplied gaussian pulse is zeroed at a specific width by subtracting the baseline offset and optionally rescaling the amplitude.
2533	Generate a continuous unnormalized Gaussian pulse with specified parameters.
2534	Compute continuous unnormalized gaussian derivative pulse.
2535	Generate a continuous Gaussian square pulse waveform.

The function creates a pulse with gaussian rise and fall portions at the edges of a square pulse component. It uses numpy's piecewise function to combine three components: two gaussian functions at the start and end of the square portion, and a constant amplitude for the central square region. The pulse can optionally have its baseline subtracted to enforce zero crossing at specific points.
2536	The default pass manager that maps to the coupling map.
2537	Create a default pass manager that unrolls quantum circuits to specified basis gates without optimization.
2538	Test if this circuit has the specified register.
2539	Mirror the circuit by reversing the instructions.
2540	Invert this circuit by recursively inverting all gates and returning the inverted circuit.
2541	Append an instruction to the end of the circuit, modifying the circuit in place.
2542	DEPRECATED after 0.8
2543	Add registers to the quantum circuit.
2544	Raise exception if list of qubits contains duplicates.
2545	Raise exception if a qarg is not in this circuit or bad format.
2546	Raise exception if clbit is not in this circuit or bad format.
2547	Raise exception if the circuits are defined on incompatible registers
2548	Return OpenQASM string.
2549	Draw the quantum circuit.
2550	Returns total number of gate operations in circuit.
2551	Return number of qubits plus clbits in circuit.
2552	Count each operation kind in the circuit.
2553	How many non-entangled subcircuits can the circuit be factored to.
2554	Assign parameters to values yielding a new circuit.
2555	Assigns a parameter value to matching instructions in-place.
2556	Plot the interpolated envelope of pulse
2557	Search for SWAPs which allow for application of largest number of gates.
2558	Map all gates that can be executed with the current layout.
2559	Return the sum of the distances of two-qubit pairs in each CNOT in gates according to the layout and the coupling.
2560	Count the mapped two-qubit gates, less the number of added SWAPs.
2561	Return a copy of source_dag with metadata but empty, containing only a single qreg matching the size of the coupling_map.
2562	Return op implementing a virtual gate on given layout.
2563	Generate list of ops to implement a SWAP gate along a coupling edge.
2564	Run one pass of the lookahead mapper on the provided DAG.
2565	Add a physical qubit to the coupling graph as a node.
2566	Add directed edge to coupling graph.
2567	Return a CouplingMap object for a subgraph of self.
2568	Returns a sorted list of physical qubits.
2569	Test if the graph is connected. Return True if connected, False otherwise.
2570	Compute the full distance matrix on pairs of nodes.
2571	Returns the undirected distance between two physical qubits in the coupling map.
2572	Transpile one or more circuits.
2573	Apply cu1 from ctl to tgt with angle theta.
2574	Invert all instructions.
2575	Add controls to all instructions.
2576	Add classical control register to all instructions.
2577	Subscribes to an event for callback execution.
2578	Emits an event if there are any subscribers.
2579	Unsubscribe the specific callback to the event.
2580	Triggers an event and associates data to it, calling any subscribed callbacks synchronously.
2581	Apply initialize to circuit.
2582	Calculate a subcircuit that implements this initialization.
2583	Create a circuit with gates that take the desired vector to zero.
2584	Static internal method to work out rotation to create the passed in qubit from the zero vector.
2585	Return a recursive implementation of a multiplexor circuit that applies Ry or Rz gates to a target qubit multiplexed over select qubits, using recursive decomposition and angle manipulation to build the circuit.
2586	Checks if value has the format of a virtual qubit
2587	Returns a copy of a Layout instance.
2588	Combines self and another_layout into an "edge map" for DAG composition.
2589	Apply Toffoli gate from control qubits to target qubit.
2590	Return a new schedule with `schedule` inserted within `self` at `start_time`.
2591	Checks if the attribute name is in the list of attributes to protect and raises TranspilerAccessError if it is.
2592	Converts gate tuples into a nested list of integers.
2593	Run the StochasticSwap pass on a DAG circuit.
2594	Provide a DAGCircuit for a new mapped layer.
2595	Return the Pauli group with 4^n elements.
2596	Take pauli string to construct pauli.
2597	Construct pauli from boolean array.
2598	Multiply two Paulis and track the phase.
2599	Convert to Operator object.
2600	Convert to Pauli circuit instruction.
2601	Update partial or entire z.
2602	Update partial or entire x.
2603	Insert or append pauli to the targeted indices.
2604	Append pauli at the end.
2605	Delete pauli operators at the specified indices.
2606	Return a random Pauli on number of qubits.
2607	Generate single qubit pauli at index with pauli_label with length num_qubits.
2608	Simulate the outcome of measurement of a qubit.
2609	Generate memory samples from current statevector.
2610	Apply a measure instruction to a qubit.
2611	Apply a reset instruction to a qubit by simulating a measurement outcome and projecting onto the outcome state while renormalizing.
2612	Validate an initial statevector.
2613	Set the initial statevector for simulation
2614	Return the current statevector in JSON Result spec format
2615	Determine if measure sampling is allowed for an experiment.
2616	Run qobj asynchronously.
2617	Run experiments in qobj and return the result object.
2618	Perform semantic validations of the qobj to ensure number of qubits does not exceed maximum and check for empty classical registers or missing measurements in experiments.
2619	Validate an initial unitary matrix
2620	Set the initial unitary for simulation
2621	Return the current unitary in JSON Result spec format
2622	Run experiments in qobj and return the result object.
2623	Semantic validations of the qobj which cannot be done via schemas.
2624	Determine if obj is a bit.
2625	Pick a layout by assigning n circuit qubits to device qubits 0, .., n-1.
2626	Check if self has overlap with `interval`.
2627	Return a new interval shifted by `time` from self
2628	Return a new Timeslot shifted by `time`.
2629	Return earliest start time in this collection.
2630	Return maximum time of timeslots over all channels.
2631	Return if self is mergeable with `timeslots`.
2632	Return a new TimeslotCollection merged with a specified timeslots.
2633	Return a new TimeslotCollection shifted by `time`.
2634	Report on GitHub that the specified branch is failing to build at the specified commit.
2635	Sort rho data
2636	Create a paulivec representation graphically displaying the input array as a state vector or density matrix.
2637	Apply RZZ to circuit.
2638	Apply Fredkin gate to circuit.
2639	Extract readout and CNOT errors and compute swap costs.
2640	Create a program graph with virtual qubits as nodes and weighted edges representing 2-qubit gates.
2641	If there is an edge with one endpoint mapped, return it. Else return the first edge.
2642	Select best remaining CNOT in the hardware for the next program edge.
2643	Select the best remaining hardware qubit for the next program qubit based on reliability scores.
2644	Main run method for the noise adaptive layout.
2645	Return a list of instructions for this CompositeGate.
2646	Invert this gate.
2647	Add controls to this gate.
2648	Add classical control register.
2649	Return True if operator is a unitary matrix.
2650	Return the conjugate of the operator.
2651	Return the transpose of the operator.
2652	Return the matrix power of the operator.
2653	Return the tensor shape of the matrix operator
2654	Convert a QuantumCircuit or Instruction to an Operator.
2655	Update the QASM string for an iteration of swap_mapper.
2656	Separate a bitstring according to the registers defined in the result header.
2657	Format an experiment result memory object for measurement level 0.
2658	Format an experiment result memory object for measurement level 1.
2659	Format an experiment result memory object for measurement level 2.
2660	Format a single experiment result from backend to present to the Qiskit user.
2661	Format statevector coming from the backend to present to the Qiskit user.
2662	Format unitary matrix from backend representation to complex number format for Qiskit user.
2663	Ensure that a submit has been performed before calling the method.
2664	Submit the job to the backend for execution.
2665	Gets the status of the job by querying the Python's future
2666	Whether `lo_freq` is within the `LoRange`.
2667	Create a bloch sphere representation for visualizing quantum states.
2668	Embed default qubit LO frequencies from backend and format them to list object.
2669	Embed default meas LO frequencies from backend and format them to list object.
2670	Expand all op nodes to the given basis.
2671	Create a Q sphere representation for the given state vector or density matrix with optional figure size configuration.
2672	Return the number of combinations for n choose k.
2673	Return the lex index of a combination.
2674	Plot the paulivec representation of a quantum state.
2675	Gets the unique backends that are available.
2676	Returns the Instruction object corresponding to the op for the node else None
2677	Generates constant-sampled `SamplePulse` with specified duration, amplitude, and name.
2678	Generates zero-sampled `SamplePulse`.
2679	Generates square wave SamplePulse with specified parameters.
2680	Generates sawtooth wave `SamplePulse`.
2681	Generates triangle wave SamplePulse with specified duration, amplitude, and phase.
2682	Generates cosine wave SamplePulse with specified parameters.
2683	Generates sine wave SamplePulse.
2684	Generates unnormalized gaussian SamplePulse.
2685	Generates unnormalized gaussian derivative `SamplePulse`.
2686	Generates gaussian square `SamplePulse`.
2687	Compute distance.
2688	Print the node data, with indent.
2689	Return an instance of a backend from its class.
2690	Rename a classical or quantum register throughout the circuit.
2691	Remove all operation nodes with the given name.
2692	Add all wires in a quantum register.
2693	Add all wires in a classical register.
2694	Add a qubit or bit to the circuit.
2695	Verify that the condition is valid.
2696	Return a list of bits in the given condition.
2697	Add a new operation node to the graph and assign properties.
2698	Apply an operation to the output of the circuit.
2699	Check that wiremap neither fragments nor leaves duplicate registers.
2700	Check that the wiremap is consistent.
2701	Use the wire_map dict to change the condition tuple's creg name.
2702	Add `dag` at the end of `self`, using `edge_map`.
2703	Apply the input circuit to the output of this circuit.
2704	Check that a list of wires is compatible with a node to be replaced.
2705	Return predecessor and successor dictionaries mapping wires to nodes.
2706	Map all wires of the input circuit to predecessor and successor nodes in self, keyed on wires in self.
2707	Yield nodes in topological order.
2708	Iterator for node values.
2709	Get the list of "op" nodes in the dag.
2710	Get the list of gate nodes in the dag.
2711	Get the set of "op" nodes with the given name.
2712	Get list of 2-qubit gates, ignoring snapshot, barriers, and similar operations.
2713	Returns list of the predecessors of a node as DAGNodes.
2714	Returns list of the predecessors of a node that are connected by a quantum edge as DAGNodes.
2715	Returns set of the ancestors of a node as DAGNodes.
2716	Returns list of the successors of a node that are connected by a quantum edge as DAGNodes.
2717	Remove an operation node and add edges from predecessors to successors.
2718	Remove all of the ancestor operation nodes of node.
2719	Remove all of the descendant operation nodes of node.
2720	Remove all of the non-ancestors operation nodes of node.
2721	Remove all of the non-descendants operation nodes of node.
2722	Yield a shallow view on a layer of this DAGCircuit for all d layers of this circuit.
2723	Yield a layer for all gates of this circuit.
2724	Yield layers of the multigraph.
2725	Return a set of non-conditional runs of "op" nodes with the given names.
2726	Iterator for nodes that affect a given wire
2727	Count the occurrences of operation names.
2728	Return a dictionary of circuit properties.
2729	Generate a TomographyBasis object.
2730	Add state measurement gates to a circuit.
2731	Generate a dictionary of tomography experiment configurations for quantum state and process tomography.
2732	Generate a dictionary of process tomography experiment configurations.
2733	Add tomography measurement circuits to a QuantumProgram.
2734	Return a results dict for a state or process tomography experiment.
2735	Compute the marginal counts for a subset of measured qubits.
2736	Reconstruct a density matrix or process-matrix from tomography data using specified fitting methods.
2737	Reconstruct a state from unconstrained least-squares fitting.
2738	Returns a projector from a list of operators and basis states.
2739	Reconstruct a matrix through linear inversion.
2740	Returns the nearest positive semidefinite operator to an operator.
2741	Get the value of the Wigner function from measurement results.
2742	Add measurement gates to a circuit.
2743	A text-based job status checker that monitors and displays job status updates at specified intervals until the job completes or encounters an error.
2744	Monitor the status of a IBMQJob instance.
2745	Compute Euler angles for a single-qubit gate.
2746	Return the gate u1, u2, or u3 implementing U with the fewest pulses.
2747	Extends DAG with virtual qubits that are in layout but not in the circuit yet.
2748	Create a qubits properties widget for a backend containing frequency, T1, T2, gate errors, and readout error information in a formatted HTML table.
2749	Widget for displaying job history
2750	Plots the job history of the user from the given list of jobs.
2751	Plot the interpolated envelope of pulse.
2752	Apply cu3 from ctl to tgt with angle theta, phi, lam.
2753	Returns a circuit putting 2 qubits in the Bell state.
2754	Transpile one or more circuits according to desired transpilation targets.
2755	Select a PassManager and run a single circuit through it.
2756	Execute a list of circuits or pulse schedules on a backend.
2757	Return the primary drive channel of this qubit.
2758	Return the primary control channel of this qubit.
2759	Return the primary measure channel of this qubit.
2760	Return the primary acquire channel of this qubit.
2761	Create n-qubit input state for QFT that produces output 1.
2762	Assemble a list of circuits or pulse schedules into a Qobj.
2763	Remove the handlers for the 'qiskit' logger.
2764	Create a hinton representation for density matrix visualization.
2765	Return the process fidelity between two quantum channels.
2766	Set the input text data.
2767	Pop a PLY lexer off the stack.
2768	Push a PLY lexer on the stack to parse filename.
2769	Iterate over each block in the DAG and replace it with an equivalent Unitary gate on the same wires.
2770	Get conversion method for instruction.
2771	Return converted `AcquireInstruction`.
2772	Return converted `FrameChangeInstruction`.
2773	Return converted `PersistentValueInstruction`.
2774	Return converted `PulseInstruction`.
2775	Return converted `Snapshot`.

### Example 1:
Input:
def settext(self, text, cls='current'):
        """Set the text for this element.

        Arguments:
            text (str): The text
            cls (str): The class of the text, defaults to ``current`` (leave this unless you know what you are doing). There may be only one text content element of each class associated with the element.
        """
        self.replace(TextContent, value=text, cls=cls)
Output:
Set the text for this element.

### It is your turn now! Summarizing the follwing code into summary. Please output the answer directly as shown in the example(s) if provided.###
Input:
def convert_snapshot(self, shift, instruction):
        """Return converted `Snapshot`.

        Args:
            shift(int): Offset time.
            instruction (Snapshot): snapshot instruction.
        Returns:
            dict: Dictionary of required parameters.
        """
        command_dict = {
            'name': 'snapshot',
            't0': shift+instruction.start_time,
            'label': instruction.name,
            'type': instruction.type
        }
        return self._qobj_model(**command_dict)
Output:
Return converted `Snapshot`.
2776	Update annotations of discretized continuous pulse function with duration.
2777	Sampler decorator base method.
2778	Return the backends matching the specified filtering.
2779	Resolve backend name from a deprecated name or an alias.
2780	Build a QuantumCircuit object from a DAGCircuit.
2781	Convert an observable in matrix form to dictionary form.
2782	Update a node in the symbol table.
2783	Verify a qubit id against the gate prototype.
2784	Verify each expression in a list.
2785	Verify a user defined gate call.
2786	Verify a register by checking its type and index bounds against the global symbol table.
2787	Verify a list of registers.
2788	Compute the column number for a given token in the input text.
2789	Set the parse_deb field.
2790	Parse some data.
2791	Parser runner.

To use this module stand-alone.
2792	Parse the data.
2793	Apply CRZ gate from control to target qubit with given angle theta.
2794	Return a basis state ndarray.
2795	Maps a pure state to a state matrix.
2796	Calculate the purity of a quantum state.
2797	Run the pass on the DAG, and write the discovered commutation relations into the property_set.
2798	Creates a backend widget that displays information about a quantum backend including name, gate map, qubit count, pending jobs, and average T1 and T2 times.
2799	Updates the monitor info by checking backend statuses and updating UI elements accordingly.
2800	Generates a jobs_pending progress bar widget.
2801	Run one pass of cx cancellation on the circuit
2802	Return a single backend matching the specified filtering.
2803	Return the shape for bipartite matrix
2804	Get the number and size of unique registers from bit_labels list.
2805	Truncate long floats
2806	Return LaTeX string representation of circuit.
2807	Get depth information for the circuit.
2808	Get height, width & scale attributes for the beamer page.
2809	Loads the QObj schema for use in future validations.
2810	Generate validator for JSON schema.
2811	Load all default schemas into `_SCHEMAS`.
2812	Validates JSON dict against a schema.
2813	Return a cascading explanation of the validation error.
2814	Majority gate.
2815	Unmajority gate.
2816	Convert QuantumCircuit to LaTeX string.
2817	Draw a quantum circuit using matplotlib.
2818	Return a random dim x dim unitary Operator from the Haar measure.
2819	Generate a random density matrix using specified method and parameters.
2820	Return a normally distributed complex random matrix.
2821	Generate a random density matrix from the Hilbert-Schmidt metric.
2822	Generate a random density matrix from the Bures metric.
2823	Return a list of custom gate names in this gate body.
2824	Return the compose of a QuantumChannel with itself n times.
2825	Return the composition channel.
2826	Convert a QuantumCircuit or Instruction to a SuperOp.
2827	Return a circuit with a barrier before last measurements.
2828	Convert a list of circuits into a qobj.
2829	Expand 3+ qubit gates using their decomposition rules.
2830	Expand a given gate into its decomposition.
2831	Calculate a subcircuit that implements this unitary.
2832	Validate if the value is of the type of the schema's model.
2833	Validate if it's a list of valid item-field values.
2834	Set the absolute tolerance parameter for float comparisons.
2835	Set the relative tolerance parameter for float comparisons.
2836	Reshape input and output dimensions of operator.
2837	Return tuple of input dimension for specified subsystems.
2838	Return tuple of output dimension for specified subsystems.
2839	Make a copy of current operator.
2840	Return the compose of a operator with itself n times.
2841	Check if input dimension corresponds to qubit subsystems.
2842	Perform a contraction using Numpy.einsum
2843	Override `_deserialize` for customizing the exception raised.
2844	Override `_serialize` for customizing the exception raised.
2845	Check if at least one of the possible choices validates the value.
2846	Return the state fidelity between two quantum states.
2847	Apply real scalar function to singular values of a matrix.
2848	Return a new Snapshot object with the same parameters as this instance.
2849	Set snapshot label to name
2850	Return True if QuantumChannel is a unitary channel.
2851	Try to convert channel to a unitary representation Operator.
2852	Convert to a Kraus or UnitaryGate circuit instruction.
2853	Convert input into a QuantumChannel subclass object or Operator object
2854	Create Graphene Enum for sorting a SQLAlchemy class query
2855	Monkey patching _strptime to avoid problems related with non-english locale changes on the system.
2856	Get an ordered mapping with locale codes as keys and corresponding locale instances as values.
2857	Yield locale instances.
2858	Check if tokens are valid tokens for the locale.
2859	Split the date string using translations in locale info.
2860	Parse date and time from given date string.
2861	Attempt to parse the time part of date strings like '1 day ago, 2 PM'
2862	Check if the locale is applicable to translate date string.
2863	Translate the date string to its English equivalent.
2864	Parse a date string with given formats and return a dictionary with 'period' and 'obj_date'.
2865	Return ammo generator based on configuration.
2866	Translate HTTP code to net code, returning 314 for assertion failures and handling unknown exceptions.
2867	Translate exception string to HTTP code.
2868	Read phantom tool specific options
2869	Generate phantom tool run config
2870	Get merged info about phantom conf
2871	Compose benchmark block configuration.
2872	Polls stdout and stderr streams and writes their contents to log.
2873	Helper function to parse and convert time string with units to seconds.
2874	Configure the StepperWrapper by reading and processing various configuration options and settings.
2875	Generate test data if necessary by creating or caching stepper information and publishing status updates.
2876	Choose the name for stepped data file
2877	Read stepper info from json
2878	Write stepper info to json
2879	Generate stpd file using Stepper class.
2880	Create Load Plan as defined in schedule and publish information about its duration.
2881	Return rps for second t.
2882	Execute and check exit code
2883	Decode monitoring data into points format.
2884	Make a set of points for this label including overall quantiles, overall meta, net codes, proto codes, and histograms.
2885	Publish value to status.
2886	Helper to aggregate codes by mask.
2887	Say the workers to finish their jobs and quit.
2888	A feeder that runs in distinct thread in main process.
2889	Set up logging with file and console handlers, configuring different log levels and formatters for various output destinations.
2890	Override config options with user specified options.
2891	Make preparations before running Tank
2892	Call shutdown routines.
2893	Collect data, cache it and send to listeners
2894	Notify all listeners about aggregate data and stats.
2895	Returns a marker function of the requested marker_type.
2896	Parse duration string into milliseconds.
2897	Start local agent
2898	Start remote agent
2899	Searching for JMeter UDP port in log file.
2900	Genius idea by Alexey Lavrenyuk for adding JMeter components to a JMX file with variable substitution and appropriate template selection based on JMeter version and logging settings.
2901	Graceful termination of running process
2902	Parse lines and return stats
2903	Instantiate criterion from config string.
2904	Prepare config data.
2905	Create a startup configuration file with startup, shutdown, and source commands for the agent.
2906	Check disk space and raise exception if exceeded.
2907	Raise exception on RAM exceeded.
2908	Gets width and height of terminal viewport
2909	Gets next line for right panel
2910	Cut tuple of line chunks according to its visible length.
2911	Render left blocks and return formatted lines with proper spacing and truncation.
2912	Main method to render screen view
2913	Add widget string to right panel of the screen.
2914	Right-pad lines of block to equal width
2915	Calculate visible length of string
2916	Creates load plan timestamps generator
2917	Format level string with percentage sign if relative, otherwise return level as is.
2918	Add a right panel widget to the screen.
2919	Send request to writer service.
2920	Tells core to take plugin options and instantiate plugin classes
2921	Retrieve a plugin of desired class, KeyError raised otherwise
2922	Retrieve a list of plugins of desired class, KeyError raised otherwise
2923	Move or copy single file to artifacts directory.
2924	Add file to be stored as result artifact on post-process phase.
2925	Generate temp file name in artifacts base dir and close temp file handle.
2926	Read configs set into storage
2927	Flush current stat to file
2928	Get options list with requested prefix
2929	Return sections with specified prefix.
2930	Return all items found in this chunk
2931	Returns the info object, using a cached version if available, otherwise retrieving it from the phantom object if not cached.
2932	Prepare for monitoring by installing agents on hosts.
2933	Poll agents for data and process collected information.
2934	Sends pending data to listeners.
2935	Detect configuration and return SECTION name or None for defaults.
2936	Store metric in data tree and calc offset signs.
2937	Decode agents jsons and count diffs.
2938	Start subscribing to channels via WebSocket or NATS connection.
2939	Run forever and block until exception is raised.
2940	Close any open connections.
2941	Perform one HTTP request with retry logic and error handling, returning JSON response or raising appropriate exceptions.
2942	Request a new order.
2943	Get an order.
2944	Get an open position.
2945	Get a list of assets.
2946	Get an asset.
2947	Create a joining subplan that fans out a single value to multiple steps and then coalesces them into a single output.
2948	Ensures argument obj is a native Python dictionary and validates key/value types if specified.
2949	Ensures argument is a dictionary or None; if None, returns empty dictionary.
2950	Create an event logger that callbacks with event records.
2951	Record a stream of event records to json
2952	Read a config file and instantiate the RCParser.
2953	Get config dictionary for the given repository.
2954	Formats a config dictionary for GraphQL representation.
2955	Get a pipeline by name, constructing and caching it if necessary.
2956	Return all pipelines as a list.
2957	Polls the process for the next valid event or returns PROCESS_DEAD_AND_QUEUE_EMPTY if the process has terminated and the queue is empty.
2958	Execute pipeline using message queue as a transport
2959	Waits until all processes are complete and no processes are enqueued.
2960	The schema for configuration data that describes the type, optionality, defaults, and description.
2961	Builds the execution plan.
2962	Build a new ExecutionPlan from a pipeline definition and environment config by processing solids in topological order and constructing execution steps for inputs, transform functions, and outputs.
2963	Build a subset pipeline containing only specified solids and their dependencies.
2964	Return the solid named "name". Throws if it does not exist.
2965	Get the shell commands to build and publish a package to PyPI.
2966	Tags all submodules for a new release.
2967	Create a context definition from a pre-existing context for testing purposes.
2968	A decorator for annotating a function that can take the selected properties from a config_value into an instance of a custom type.
2969	A decorator for annotating a function that takes selected properties of a config_value and materializes it.
2970	Automagically wrap a block of text.
2971	Download an object from s3.
2972	Upload a file to s3.
2973	Wraps the execution of user-space code in an error boundary that ensures all user errors are wrapped in DagsterUserCodeExecutionError while preserving the original stack trace.
2974	The missing mkdir -p functionality in os.
2975	Wraps the output of a user provided function that may yield or return a value and returns a generator that asserts it only yields a single value.
2976	Create a context-free logger for pipeline initialization failure logging.
2977	Whether the solid execution was successful
2978	Whether the solid execution was skipped
2979	Return dictionary of transformed results with keys being output names, or None if execution wasn't successful.
2980	Returns transformed value for specified output name, or None if execution wasn't successful. Reconstructs pipeline context to materialize value.
2981	Returns the failing step's data that happened during this solid's execution, if any
2982	A permissive dict that permits partial specification of permitted fields with type checking for specified fields.
2983	Validate that a dataset configuration value is in the correct format.
2984	Validate that a configuration value is a valid table identifier in "project.dataset.table" or "dataset.table" format.
2985	Execute the user-specified transform for the solid with error handling, logging, and metrics tracking.
2986	Creates a Dagster type from a Python class.
2987	A decorator for creating a resource. The decorated function will be used as the resource_fn in a ResourceDefinition.
2988	Create a PagerDuty Event API v2 event with the specified parameters.
2989	Groups execution steps by solid, in topological order of the solids.
2990	Default method to acquire database connection parameters.
2991	Set up a new database connection using the provided connection parameters.
2992	Returns an active connection cursor to the database.
2993	Closes the client connection to the database.
2994	Builds an instance of model from the model_dict by converting field values to their proper Python types.
2995	Overrides standard to_python method from django models to allow correct translation of Mongo array to a python list.
2996	Returns the formfield for the array.
2997	Overrides Django's default to_python to allow correct translation to instance.
2998	Filter the queryset for the instance this manager is bound to.
2999	Computes the matrix of expected false positives for all possible sub-intervals of the complete domain of set sizes, assuming uniform distribution of set sizes within each sub-interval.
3000	Computes the matrix of expected false positives for all possible sub-intervals of the complete domain of set sizes.
3001	Computes the optimal partitions given the size distributions and expected false positives.
3002	Compute the optimal partitions given a distribution of set sizes.
3003	Compute the functions C1 and C2.
3004	Initialize the slots of the LeanMinHash.
3005	Compute the byte size after serialization.
3006	Serialize this lean MinHash and store the result in an allocated buffer.
3007	Deserialize a lean MinHash from a buffer.
3008	Update this MinHash with a new value by hashing it and applying permutations to maintain minimum hash values.
3009	Merge the other MinHash with this one, making this one the union of both.
3010	Create a MinHash which is the union of the MinHash objects passed as arguments.
3011	Index all sets given their keys, MinHashes, and sizes.
3012	Given the MinHash and size of the query set, retrieve keys that references sets with containment with respect to the query set greater than the threshold.
3013	Create a new weighted MinHash given a weighted Jaccard vector.
3014	Remove the key from the index.
3015	Update the HyperLogLog with a new data value by hashing it and updating the appropriate register.
3016	Estimate the cardinality of the data values seen so far.
3017	Merge the other HyperLogLog with this one, making this the union of the two.
3018	Reset the current HyperLogLog to empty.
3019	Computes the average precision at k between two lists of items.
3020	Computes the mean average precision at k between two lists of lists of items.
3021	Index all the keys added so far and make them searchable.
3022	Return the approximate top-k keys that have the highest Jaccard similarities to the query set.
3023	Cleanup client resources and disconnect from AsyncMinHashLSH storage.
3024	Return ordered storage system based on the specified config.
3025	Return an unordered storage system based on the specified config.
3026	Required to allow using custom USER_DETAILS_SERIALIZER in JWTSerializer. Defining it here to avoid circular imports.
3027	Set the social login process state to connect rather than login.
3028	Select the correct text from the Japanese number, reading and alternatives.
3029	Parse scoped selector into scope and selector components.
3030	Parse a single statement.

Returns a `BindingStatement`, `ImportStatement`, `IncludeStatement`, or `None` if no more statements can be parsed (EOF reached).
3031	Parse a single literal value.
3032	Advances to next line.
3033	Try to parse a configurable reference (@[scope/name/]fn_name[()]).
3034	Reraises an exception with an augmented message appended to its string representation.
3035	Convert an operative config string to markdown format.
3036	Writes out Gin's operative config and optionally adds a summary of it.
3037	Make sure `fn` can be wrapped cleanly by functools.wraps.
3038	Decorate a function or class with the given decorator, supporting both direct decoration and subclass-based decoration for classes.
3039	Returns `value` in a format parseable by `parse_value`, or `None`.
3040	Clears the global configuration.
3041	Binds the parameter value specified by `binding_key` to `value`.
3042	Returns the currently bound value to the specified `binding_key`.
3043	Returns True if `arg_name` might be a valid parameter for `fn_or_cls`.
3044	Gets cached argspec for `fn`.
3045	Returns the names of the supplied arguments to the given function.
3046	Returns the names of all positional arguments to the given function.
3047	Retrieve all default values for configurable parameters of a function, excluding those in the blacklist or not in the whitelist, and return a dictionary mapping parameter names to their default values.
3048	Opens a new configuration scope.
3049	Make a function or class configurable by registering it with the global configuration system, allowing its parameters to be supplied from config sources.
3050	Retrieve the "operative" configuration as a config string.
3051	Parse a file, string, or list of strings containing parameter bindings.
3052	Register a file reader for use in parse_config_file.
3053	Parse a Gin config file.
3054	Parse a list of config files followed by extra Gin bindings.
3055	Parse and return a single Gin value.
3056	A function that should be called after parsing all Gin config files to execute registered finalize hooks.
3057	Provides an iterator over all values in a nested structure.
3058	Provides an iterator over references in the given config.
3059	Creates a constant that can be referenced from gin config files.
3060	Decorator for an enum class that generates Gin constants from values.
3061	Retrieves all selectors matching `partial_selector`.
3062	Returns all values matching `partial_selector` as a list.
3063	Returns the minimal selector that uniquely matches `complete_selector`.
3064	Translate a Mopidy search query to a Spotify search query
3065	Parse Retry-After header from response if it is set.
3066	Validate new property value before setting it.
3067	Get the property description.

Returns a dictionary describing the property.
3068	Set the current value of the property.
3069	Get the thing at the given index.
3070	Initialize the handler.
3071	Set the default headers for all requests.
3072	Validate Host header.
3073	Handle a GET request, including websocket requests.
3074	Handle an incoming message.
3075	Handle a POST request.
3076	Handle a DELETE request.
3077	Start listening for incoming connections.
3078	Get the action description.

Returns a dictionary describing the action.
3079	Start performing the action.
3080	Finish performing the action.
3081	Get the event description.
3082	Get the default local IP address.
3083	Get all IP addresses.
3084	Set a new value for this thing.
3085	Notify observers of a new value.
3086	Return the thing state as a Thing Description.
3087	Set the prefix of any hrefs associated with this thing.
3088	Get the thing's properties as a dictionary.
3089	Get the thing's actions as an array.
3090	Get the thing's events as an array.
3091	Add a property to this thing.
3092	Remove a property from this thing.
3093	Get a property's value.
3094	Get a mapping of all properties and their values.
3095	Set a property value.
3096	Get an action by name and ID.
3097	Add a new event and notify subscribers.
3098	Add an available event.
3099	Perform an action on the thing.
3100	Remove an existing action and return a boolean indicating its presence.
3101	Add an available action.
3102	Remove a websocket subscriber and all its event subscriptions.
3103	Add a new websocket subscriber to an event.
3104	Remove a websocket subscriber from an event.
3105	Notify all subscribers of a property change.
3106	Notify all subscribers of an action status change.
3107	Notify all subscribers of an event.
3108	Custom version of the standard annotate function that allows using field names as annotated fields.
3109	Updates all rows that match the filter.
3110	Creates multiple new records in the database with support for custom conflict behavior.
3111	Creates a new record in the database with support for custom conflict behavior.
3112	Creates a new record in the database and then gets the entire row.
3113	Builds the SQL compiler for an insert query.
3114	Verifies whether this field is gonna modify something on its own.
3115	Gets the fields to use in an upsert.
3116	When a model gets created or updated.
3117	When a model gets deleted.
3118	Selects whichever field is not None, in the specified order.
3119	Resolves expressions inside the dictionary.
3120	Compiles the HStore value into SQL.
3121	Gets a re-labeled clone of this expression.
3122	Adds an extra condition to an existing JOIN.
3123	Gets whether the field with the specified name is an HStoreField.
3124	Sets the values to be used in this query.
3125	Creates a REQUIRED CONSTRAINT for the specified hstore key.
3126	Renames an existing REQUIRED CONSTRAINT for the specified hstore key.
3127	Drops a REQUIRED CONSTRAINT for the specified hstore key.
3128	Gets the name for a CONSTRAINT that applies to a single hstore key.
3129	Creates the actual SQL used when applying the migration.
3130	Creates a custom setup.py command.
3131	Gets the base class for the custom database back-end.
3132	Ran to prepare the configured database.

This method enables the `hstore` extension if it isn't already enabled, with appropriate error handling for permission issues.
3133	Override the base class so it doesn't cast all values to strings.
3134	Builds the RETURNING part of the query.
3135	Builds the SQL INSERT statement.
3136	Rewrites a formed SQL INSERT query to include the ON CONFLICT clause.
3137	Rewrites a formed SQL INSERT query to include the ON CONFLICT DO UPDATE clause.
3138	Rewrites a formed SQL INSERT query to include the ON CONFLICT DO NOTHING clause.
3139	Builds the `conflict_target` for the ON CONFLICT clause.
3140	Gets the field on a model with the specified name.
3141	Formats a field's name for usage in SQL.
3142	Formats a field's value for usage in SQL.
3143	Creates a UNIQUE constraint for the specified hstore keys.
3144	Renames an existing UNIQUE constraint for the specified hstore keys.
3145	Drops a UNIQUE constraint for the specified hstore keys.
3146	Gets the name for a UNIQUE INDEX that applies to one or more keys in a hstore field.
3147	Iterates over the keys marked as "unique" in the specified field.
3148	Adds an extra condition to this join.
3149	Compiles this JOIN into a SQL string.
3150	Approximate the 95% confidence interval for Student's T distribution.
3151	Find the pooled sample variance for two samples.
3152	Calculate a t-test score for the difference between two samples.
3153	Determine whether two samples differ significantly using a Student's two-sample t-test.
3154	Return a topological sorting of nodes in a graph.
3155	N-Queens solver.
3156	UCT tree search implementation that plays a move on the board, traverses the tree, and updates the path.
3157	Select move; unexplored children first, then according to uct value.
3158	Randomly play until both players pass.
3159	Filters out benchmarks not supported by both Pythons.
3160	Recursively expand benchmark names by replacing group names with their actual benchmark names.
3161	Generates a list of strings with repeated prefixes and suffixes for benchmarking purposes.
3162	Initialize the strings for running regex benchmarks and return a list of regex-string pairs.
3163	Returns the domain of the B-Spline.
3164	Fetch the messages from a channel based on category and date criteria, yielding posts one by one while handling pagination and user data retrieval.
3165	Parse posts and returns in order.
3166	Fetch user data.
3167	Fetch the entries from the url.

The method retrieves all entries from a RSS url

:param category: the category of items to fetch

:returns: a generator of entries
3168	Fetch the entries from a feed and yield them as a generator.
3169	Returns the RSS argument parser.
3170	Fetch the bugs from the repository.
3171	Get the information of a list of bugs.
3172	Get the comments of the given bugs.
3173	Get the history of the given bugs.
3174	Get the attachments of the given bugs.
3175	Get issue notes including award emoji data.
3176	Fetch the merge requests and yield detailed merge request data including notes, emojis, and versions.
3177	Get merge notes including award emoji data.
3178	Get merge versions
3179	Get the merge requests from pagination
3180	Get the merge full data.
3181	Get the merge versions from pagination.
3182	Get merge version detail
3183	Get the notes from pagination
3184	Get emojis from pagination
3185	Get emojis of a note
3186	Calculate the seconds to reset the token requests by finding the difference between current time and next token regeneration time.
3187	Return the items from GitLab API using links pagination
3188	Initialize rate limit information.
3189	Returns the GitLab argument parser.
3190	Fetch the messages from the channel.
3191	Extracts the identifier from a Slack item by combining 'ts' and user/bot_id values.
3192	Fetch the number of members in a conversation.
3193	Fetch information about a channel.
3194	Fetch user info.
3195	Returns the Slack argument parser.
3196	Extracts and converts the update time from a Bugzilla item to UNIX timestamp format.
3197	Parse a Bugzilla CSV bug list and return an iterator of dictionaries containing bug summaries.
3198	Parse a Bugilla bugs details XML stream and return a generator of parsed bug dictionaries.
3199	Parse a Bugzilla bug activity HTML stream and extract activity events into a generator of dictionaries.
3200	Logout from the server.
3201	Get metadata information in XML format.
3202	Get a summary of bugs in CSV format.
3203	Get the information of a list of bugs in XML format.
3204	Get the activity of a bug in HTML format.
3205	Fetch the events from the server.
3206	Fetch the events for a given category within a date range and yield them as a generator.
3207	Fetch the events pages of a given group.
3208	Fetch the comments of a given event.
3209	Fetch the rsvps of a given event.
3210	Fetch an Askbot HTML question body and return a list of HTML pages for the question.
3211	Fetch all the comments of an Askbot question and answers.
3212	Build an Askbot HTML response by parsing question information and comments from HTML pages.
3213	Retrieve a question page using the API.
3214	Retrieve a raw HTML question and all its information.
3215	Retrieve a list of comments by a given id.
3216	Parse the question info container of a given HTML question and extract user information and update details.
3217	Parse the answers of a given HTML question and return a list with the answers, including their information, votes, accept status, and update details.
3218	Parse number of answer pages to paginate over them.
3219	Parse the user information of a given HTML container.
3220	Fetch the reviews for a given category.

The method takes a category parameter and optional backend arguments, then yields items from either the Gerrit 2.8 or non-2.8 fetcher based on the client version, starting from the specified date.
3221	Parse a Gerrit reviews list.
3222	Fetch reviews from Gerrit 2.8 version, handling open and closed reviews separately and yielding them in chronological order.
3223	Return the Gerrit server version.
3224	Get the reviews starting from last_item.
3225	Return the item to start from in next reviews group.
3226	Execute gerrit command
3227	Execute gerrit command against the archive.
3228	Execute gerrit command with retry if it fails
3229	Returns the Gerrit argument parser.
3230	Get data associated to an issue
3231	Get attachments of an issue
3232	Get messages of an issue.
3233	Get activities on an issue.
3234	Get data associated to an user
3235	Get the user data by URL.
3236	Get the issue data by its ID.
3237	Get a collection list of a given issue.
3238	Build URL project
3239	Return the items from Launchpad API using pagination
3240	Fetch the groupsio paginated subscriptions for a given token.
3241	Find the id of a group given its name by iterating on the list of subscriptions
3242	Fetch requests from groupsio API
3243	Returns the Groupsio argument parser.
3244	Generate a UUID based on the given parameters.
3245	Fetch items using the given backend.

The function creates a backend instance with specified arguments and yields items from it. If an archive manager is provided, it stores fetched items in an archive and removes the archive if an exception occurs during fetching. The function supports filtering classified fields and specifying a category for the items to retrieve.
3246	Fetch items from an archive manager.

The function retrieves items from an archive manager based on the specified backend class, arguments, and category. It filters items to only include those archived after a given date and yields them one by one. If an archive error occurs, it logs a warning and continues with the next archive file.

Parameters:
- backend_class: backend class to retrieve items
- backend_args: dict of arguments needed to retrieve the items
- manager: archive manager where the items will be retrieved
- category: category of the items to retrieve
- archived_after: return items archived after this date

Returns:
- a generator of archived items
3247	Find available backends by searching for Perceval backends and commands under a specified package and its sub-packages, returning tuples of Backend and BackendCommand classes.
3248	Fetch items from the repository.
3249	Fetch the questions from an archive.
3250	Remove classified or confidential data from an item by filtering out fields defined in `CLASSIFIED_FIELDS`.
3251	Parse a list of arguments and return a namespace object with parsed values, including date conversions and validation checks.
3252	Activate authentication arguments parsing
3253	Activate archive arguments parsing
3254	Activate output arguments parsing
3255	Fetch and write items.
3256	Initialize archive based on the parsed parameters
3257	Extracts the update time from a MBox item and converts it to UNIX timestamp format.
3258	Parse a mbox file and return an iterator of email messages as dictionaries.
3259	Fetch and parse messages from a mailing list, filtering by date and handling parsing errors.
3260	Copy the contents of a mbox to a temporary file
3261	Check if the given message has the mandatory fields.
3262	Convert a message in CaseInsensitiveDict to dict, handling special headers like Message-ID and Date.
3263	Return a Message representation or raise a KeyError.
3264	Fetch commits from a Git repository or log file with specified parameters.
3265	Fetch the commits from a git repository.

The method retrieves commits based on the specified category and optional backend arguments. It handles both log-based and repository-based fetching, yielding commits one at a time. The method also logs the total number of commits fetched upon completion.
3266	Parse a Git log file and return an iterator of commit dictionaries.
3267	Initialize repositories directory path
3268	Returns the Git argument parser.
3269	Parse the Git log stream.
3270	Clone a Git repository.

```python
def clone(cls, uri, dirpath):
    """Clone a Git repository.

    Make a bare copy of the repository stored in `uri` into `dirpath`.
    The repository would be either local or remote.

    :param uri: URI of the repository
    :param dirtpath: directory where the repository will be cloned

    :returns: a `GitRepository` class having cloned the repository

    :raises RepositoryError: when an error occurs cloning the given
        repository
    """
    cmd = ['git', 'clone', '--bare', uri, dirpath]
    env = {
        'LANG': 'C',
        'HOME': os.getenv('HOME', '')
    }

    cls._exec(cmd, env=env)

    logger.debug("Git %s repository cloned into %s",
                 uri, dirpath)

    return cls(uri, dirpath)
```
3271	Count the objects of a repository.
3272	Check if the repo is in a detached state.
3273	Update repository from its remote.
3274	Keep the repository in sync with its origin, fetching newest objects and updating references, and return a list of new commits.
3275	Read the list of commits from the repository.
3276	Read the commit log from the repository.
3277	Show the data of a set of commits.
3278	Fetch changes and store them in a pack.
3279	Read the commits of a pack.
3280	Update references removing old ones and prune repository to remove old branches.
3281	Get the current list of local or remote refs.
3282	Update a reference.
3283	Run a command with a non blocking call.
3284	Reads the stderr output from a subprocess and handles error messages.
3285	Run a command.
3286	Fetch the tweets from the server.
3287	Fetch the tweets from the specified category with given parameters and yield them as a generator.
3288	Fetch tweets for a given query between since_id and max_id.
3289	Returns the Twitter argument parser.
3290	Fetch data from Google API.
3291	Fetch Google hit items for a given category and return a generator of items.
3292	Parse the hits returned by the Google Search API
3293	Fetch information about a list of keywords.
3294	Extracts the update time from a GitHub item and converts it to UNIX timestamp format.
3295	Extracts the category from a GitHub item.
3296	Fetch and process pull requests within a date range, yielding processed pull request data with additional fields and related information.
3297	Get repo info about stars, watchers and forks
3298	Get issue reactions
3299	Get reactions on issue comments
3300	Get issue assignees
3301	Get pull request requested reviewers
3302	Get pull request commit hashes
3303	Get pull review comment reactions
3304	Get user and org data for the login
3305	Get reactions of an issue
3306	Fetch the issues from the repository.
3307	Fetch the pull requests from the repository.
3308	Get repository data
3309	Get pull requested reviewers
3310	Get pull request commits
3311	Get reactions of a review comment
3312	Get the user information and update the user cache.
3313	Get the user public organizations.
3314	Return token's remaining API points
3315	Return array of all tokens remaining API points
3316	Check all API tokens defined and choose one with most remaining API points
3317	Check if we need to switch GitHub API tokens
3318	Update rate limits data for the current token.
3319	Init metadata information.
3320	Store a raw item in this archive.
3321	Retrieve a raw item from the archive.
3322	Create a brand new archive file at the specified path with initialized storage.
3323	Generate a SHA1 hash code based on URI, payload, and headers for use as unique identifiers.
3324	Check whether the archive is valid or not.
3325	Load metadata from the archive file
3326	Fetch the number of rows in a table.
3327	Create a new archive in the filesystem with a random SHA1 name, creating the necessary directory structure and returning an Archive object.
3328	Remove an archive from the filesystem.
3329	Search archives based on given criteria and return sorted list of archive file paths.
3330	Search archives using filters.
3331	Retrieve the file paths stored under the base path.
3332	Check if filename is a compressed file supported by the tool.
3333	Generate a months range as consecutive month pairs from from_date to to_date.
3334	Convert an email message into a dictionary with headers and body content.
3335	Remove control and invalid characters from an XML stream.
3336	Convert a XML stream into a dictionary.
3337	Parse a Redmine issues JSON stream and return a generator of parsed issues.
3338	Get the information of a list of issues.
3339	Get the information of the given issue.
3340	Get the information of the given user.
3341	Call to get a resource.
3342	Fetch data from a Docker Hub repository.
3343	Fetch the Docker Hub items from the specified repository and owner, yielding parsed data with fetch timestamp.
3344	Fetch information about a repository.
3345	Add extra information for custom fields.
3346	Filter custom fields from a given set of fields.
3347	Parse a JIRA API raw response and yield issues from the received items.
3348	Retrieve all the items from a given date.
3349	Retrieve all the issues from a given date.
3350	Retrieve all the comments of a given issue.
3351	Retrieve all the fields available.
3352	Fetch the builds from the url.
3353	Retrieve all jobs
3354	Retrieve all builds from a job.
3355	Parse a StackExchange API raw response and yield questions from the received items.
3356	Retrieve all the questions from a given date.
3357	Returns the StackExchange argument parser.
3358	Fetch the pages for a given category using the appropriate API based on MediaWiki version and reviews API flag, returning a generator of items.
3359	Get the maximum date in unixtime format from reviews.
3360	Fetch the pages from the backend url for MediaWiki >=1.27

The method retrieves wiki pages from a MediaWiki url and returns a generator of pages. It handles pagination, skips already processed pages, and filters out pages without revisions. The method also logs information about the number of pages processed and skipped.
3361	Retrieve all pages from a namespace starting from apcontinue.
3362	Retrieve recent pages from all namespaces starting from rccontinue.
3363	Fetch messages from the server with specified category, offset, and chat filters.
3364	Parse a Telegram JSON messages list and return an iterator of dictionaries, where each dictionary contains a Telegram message.
3365	Check if a message can be filtered based on a list of chats.

Returns True when the message was sent to a chat in the given list or when chats is None.
3366	Fetch the messages that a bot can read.
3367	Fetch the articles from a newsgroup category.
3368	NNTP metadata.

This method takes items, overriding `metadata` decorator, to add extra information related to NNTP.

Sets the offset field from the item's data.
3369	Parse a NNTP article and return it as a dictionary.
3370	Fetch NNTP data from the server or from the archive.
3371	Fetch article data.
3372	Fetch data from NNTP
3373	Fetch data from the archive.
3374	Create a HTTP session and initialize the retry object.
3375	Setup the rate limit handler.
3376	The fetching process sleeps until the rate limit is restored or raises a RateLimitError exception if sleep_for_rate flag is disabled.
3377	Update the rate limit and the time to reset from the response headers.
3378	Parse a Supybot IRC log file and return an iterator of dictionaries containing messages from the file.
3379	Retrieve the Supybot archives after the given date.
3380	List the filepath of the archives stored in dirpath
3381	Parse a Supybot IRC stream and yield parsed log entries as dictionaries containing date, type, nick, and body information.
3382	Parse timestamp section
3383	Parse message section
3384	Fetch the topics from a given category and yield them as a generator.
3385	Parse a topics page stream and return a generator of topic information tuples containing identifier, last updated date, and pinned status.
3386	Retrieve the topic with the specified topic_id identifier.
3387	Retrieve the post with the given identifier.
3388	Fetch the tasks for a given category.
3389	Parse a Phabricator tasks JSON stream and return a generator of parsed tasks.
3390	Parse a Phabricator users JSON stream and return a generator of parsed users.
3391	Retrieve tasks updated from a specified date.
3392	Retrieve tasks transactions.
3393	Retrieve users.
3394	Retrieve data about PHIDs.
3395	Call a method through Phabricator Conduit API.

The method constructs a POST request to the Phabricator Conduit API with the specified method and parameters, handles authentication via a token, and returns the response text. It also includes error handling for API errors returned by the server.
3396	Extracts the identifier from a Confluence item by combining its ID and version number in the format <content>#v<version>.
3397	Parse a Confluence summary JSON list and return an iterator of content summaries.
3398	Get the contents of a repository.
3399	Get the snapshot of a content for the given version.
3400	Parse the result property, extracting the value and unit of measure.
3401	Return a capabilities URL with default WFS service parameters.
3402	Get and parse a WFS capabilities document, returning an instance of WFSCapabilitiesInfoset.
3403	Parse a WFS capabilities document, returning an instance of WFSCapabilitiesInfoset
3404	Parse the result element of the observation type.
3405	Helper function to build a WFS 3.0 URL.
3406	Get attribute elements
3407	Construct fiona schema based on given elements
3408	Get url for describefeaturetype request
3409	Use ComplexDataInput with a reference to a document.
3410	Get the list of Movie genres.
3411	Get the list of TV genres.
3412	Get the list of movies for a particular genre by id.
3413	Get the basic movie information for a specific movie id.
3414	Get the alternative titles for a specific movie id.
3415	Get the cast and crew information for a specific movie id.
3416	Get the external ids for a specific movie id.
3417	Get the plot keywords for a specific movie id.
3418	Get a list of recommended movies for a movie.
3419	Get the release dates and certification for a specific movie id.
3420	Get the release date and certification information by country for a specific movie id.
3421	Get the translations for a specific movie id.
3422	Get the similar movies for a specific movie id.
3423	Get the reviews for a particular movie id.
3424	Get the changes for a specific movie id.
3425	Get the list of upcoming movies.
3426	Get the list of movies playing in theatres.
3427	Get the list of popular movies on The Movie Database.
3428	Get the list of top rated movies.
3429	Get the status of whether or not the movie has been rated or added to their favourite or watch lists.
3430	This method lets users rate a movie.
3431	Get the movie credits for a specific person id.
3432	Get the TV credits for a specific person id.
3433	Get the detailed information about a particular credit record.
3434	Discover TV shows by different types of data like average rating, number of votes, genres, the network they aired on and air dates.
3435	Get the system wide configuration info.
3436	Get the list of supported certifications for movies.
3437	Get the basic information for an account.
3438	Get the list of movies on an account watchlist.
3439	Generate a valid request token for user based authentication.
3440	Authenticate a user with a TMDb username and password.
3441	Generate a session id for user based authentication.
3442	Generate a guest session id.
3443	Get a list of rated movies for a specific guest session id.
3444	Check to see if a movie id is already added to a list.
3445	Create a new list.
3446	Delete movies from a list that the user created.
3447	Clears all items within a list. This is an irreversible action and requires a valid session ID. Returns a dictionary representation of the API's JSON response.
3448	Get the content ratings for a TV Series.
3449	Get the similar TV series for a specific TV series id.
3450	Get the list of TV shows that are currently on the air.
3451	Get the primary information about a TV season by its season number.
3452	Get the cast & crew credits for a TV season by season number.
3453	Get the external ids that we have stored for a TV season by season number.
3454	Get the primary information about a TV episode by combination of a season and episode number.
3455	Get the TV episode credits by combination of season and episode number.
3456	Get the external ids for a TV episode by combination of a season and episode number.
3457	Set attributes to dictionary values.
3458	Search for movies by title.
3459	Search for collections by name.
3460	Search for TV shows by title.
3461	Search for people by name.
3462	Search for companies by name.
3463	Search for keywords by name.
3464	Search the movie, tv show and person collections with a single query.
3465	Normalize and tokenize text using NIST mteval-v11a.pl methods.
3466	Takes a list of reference sentences for a single segment and returns an object that encapsulates everything that BLEU needs to know about them.
3467	Takes a reference sentence for a single segment and returns an object that encapsulates everything that BLEU needs to know about it, including length, n-gram counts, and a frozenset of counts for bleualign.
3468	Complementary error function.
3469	Creates the sentence alignment of two texts.
3470	Get descriptors in module.
3471	Register Descriptors from json descriptor objects.
3472	Register descriptors with optional version and 3D ignore flag.
3473	Output the message.
3474	Check if a descriptor is a calculatable descriptor class or not.
3475	Convert to json serializable dictionary.
3476	Get 3D coordinate.
3477	Calculate atomic surface area for a given atom index.
3478	Calculate all atomic surface area.
3479	Construct SurfaceArea from rdkit Mol type.
3480	Create Descriptor instance from json dict.
3481	Replace missing values with a specified value.
3482	Delete missing value.
3483	Get items.
3484	Convert Result to dict.
3485	Access descriptor value by descriptor name or instance.
3486	Decorator to log function calls.
3487	Synchronize function execution using a lock decorator.
3488	Show current progress message to stderr.
3489	Program message output.
3490	Handle runtime failures gracefully by displaying error information and terminating program.
3491	Get a temp filename for atomic download.
3492	Atomically rename and clean tempfile
3493	Clean up temp files
3494	Get the fixed part of the path without wildcard
3495	Given a API name, list all legal parameters using boto3 service model.
3496	Combine existing parameters with extra options supplied from command line options. Carefully merge special type of parameter if needed.
3497	Add the whole list of API parameters into optparse.
3498	Terminate all threads by deleting the queue and forcing the child threads to quit.
3499	Utility function to add a single task into task queue
3500	Wait for all tasks to complete and terminate all threads.
3501	Increase the processed task counter and show progress message
3502	Retrieve S3 access keys from the environment, or None if not present.
3503	Retrieve S3 access keys from the command line, or None if not present.
3504	Retrieve S3 access key settings from s3cmd's config file, if present; otherwise return None.
3505	Initialize s3 access keys from environment variable or s3cfg config file.
3506	Connect to S3 storage
3507	List all buckets
3508	Walk through a S3 directory with support for multiple wildcards and automatic directory detection.
3509	Walk through local directories from root basedir.
3510	Expand the wildcards for an S3 path.
3511	Upload a single file or directory by adding a task to the queue.
3512	Upload files to S3.
3513	Use the create_bucket API to create a new bucket
3514	Get privileges from metadata of the source in s3, and apply them to target
3515	Print out a series of files from S3 storage by expanding the source and reading each file's content.
3516	Download a single file or directory by adding a task into queue.
3517	Download files from S3, handling multiple files with wildcards and recursive directory structure preservation.
3518	Copy a single file or directory by adding a task to the queue.
3519	Copy files from source to target, handling multiple files with wildcards and recursive mode while maintaining directory structure.
3520	Delete files on S3
3521	Generic version of directory walk. Return file list without base path for comparison.
3522	Sync directory to directory.
3523	Calculate MD5 hash code for a local file
3524	Get or calculate MD5 value of the local file.
3525	Ensure all directories are created for a given target file.
3526	Check MD5 for a local file and a remote file. Return True if they have the same md5 hash, otherwise False.
3527	Partially match a path and a filter_path with wildcards.
3528	Thread worker for s3walk that recursively walks into subdirectories and processes S3 objects based on filter path and recursive options.
3529	Check all file items with given conditions.
3530	Get privileges of a local file
3531	Get the s3 object with the S3 URL. Return None if not exist.
3532	Read local file chunk
3533	Thread worker for upload operation.
3534	Verify the file size of the downloaded file.
3535	Write local file chunk
3536	Copy a single file from source to target using boto S3 library.
3537	Main entry to handle commands. Dispatch to individual command handler.
3538	Validate input parameters with given format.
3539	Pretty print the result of s3walk with aligned columns.
3540	Handler for ls command
3541	Handler for mb command
3542	Handler for put command
3543	Handler for get command
3544	Handler for cat command
3545	Handler for dsync command.
3546	Handler for cp command
3547	Handler for mv command
3548	Handler for del command
3549	Handler for size command
3550	Handler of total_size command
3551	Search for date information in the string.
3552	Search for time information in the string
3553	Search for timedelta information in the string and return the delta and remaining string.
3554	Take json as dictionary parameter.
3555	Discover gateways using multicast.
3556	Start listening by creating a multicast socket and beginning a listening thread.
3557	Get data from gateway
3558	Push data broadcasted from gateway to device
3559	Get key using token from gateway
3560	Called by RQ when there is a failure in a worker.
3561	Pyramid entry point that configures Rollbar integration including tween addition, debugtoolbar patching, data hook setup, and Rollbar initialization with parsed settings.
3562	If there's no log configuration, set up a default handler.
3563	Get the current request object from available framework implementations.
3564	Saves configuration variables in this module's SETTINGS.
3565	Decorator for making error handling on AWS Lambda easier
3566	Reports an arbitrary string message to Rollbar.
3567	Searches a project for items that match the input criteria.
3568	Creates .rollbar log file for use with rollbar-agent
3569	Returns a dictionary describing the logged-in user using data from `request`.
3570	Attempts to add information from the lambda context if it exists
3571	Attempts to build request data; if successful, sets the 'request' key on `data`.
3572	Returns True if we should record local variables for the given frame.
3573	Returns a dictionary containing data from the request, handling various web frameworks including webob, django, werkzeug, tornado, bottle, sanic, and falcon.
3574	Returns a dictionary containing information about the server environment.
3575	Returns the full payload as a string.
3576	Initialize Rollbar, create an Echo protocol server on port 8000, and start the reactor.
3577	Compose a Hangul letter from the specified chosung, joongsung, and jongsung.
3578	Returns the individual components of a Hangul letter by decomposing it.
3579	Check whether this letter contains Jongsung
3580	Add josa at the end of this word.
3581	Returns true if node is inside the name of an except handler.
3582	Return true if given node is inside lambda
3583	Recursively returns all atoms in nested lists and tuples.
3584	Checks if an assignment node in an except handler clobbers an existing variable. Returns (True, args for W0623) if assignment clobbers an existing variable, (False, None) otherwise.
3585	Return True if the node is referencing the "super" builtin function.
3586	Return True if the function does nothing but raise an exception.
3587	Return true if the given Name node is used in function or lambda default argument's value.
3588	Return True if the name is used in function decorator.
3589	Return True if `frame` is an astroid.Class node with `node` in the subtree of its bases attribute.
3590	Return the highest parent node that is not an AssignName, Tuple, or List node.
3591	Decorator to store messages that are handled by a checker method.
3592	Given a format string, return an iterator of all the valid format fields. It handles nested fields as well.
3593	Returns the specified argument from a function call.
3594	Return true if the given class node is subclass of exceptions.Exception.
3595	Check if the given exception handler catches the given error type.
3596	Detect if the given function node is decorated with a property.
3597	Determine if the `func` node has a decorator with the qualified name `qname`.
3598	Return the ExceptHandler or TryExcept node in which the given node is located.
3599	Check if the given node is from a fallback import block.
3600	Return the collections of handlers handling the exception in arguments.
3601	Check if the node is in a TryExcept which handles the given exception.
3602	Return True if the given class node should be considered as an abstract class.
3603	Return the inferred value for the given node, or None if inference failed or there is ambiguity.
3604	Return the inferred type for a node if there is only one possible type, otherwise return None.
3605	Check if the given function node is a singledispatch function.
3606	Check if the postponed evaluation of annotations is enabled
3607	Split the names of the given module into subparts
3608	Get a prepared module name from the given import node.
3609	Return a string which represents imports as a tree.
3610	Generate a dependencies graph and add information about it to the report's section.
3611	Triggered when an import statement is seen.
3612	Triggered when a from statement is seen.
3613	Check if node import or importfrom node position is correct and send a message if it comes before another instruction.
3614	Record the package `node` imports from
3615	Checks imports of module node are grouped by category.
3616	Check relative import and report relative-import message if enabled.
3617	Notify an imported module and analyze dependencies.
3618	Check if the module is deprecated.
3619	Check if the module has a preferred replacement.
3620	Return a verbatim layout for displaying dependencies.
3621	Build the internal or external dependency graph.
3622	Read config file and return list of options
3623	Insert default options to sys.argv.
3624	Return True if the node should be treated based on visibility and mode settings.
3625	Get callbacks from handler for the visited node.
3626	Launch the visit starting from the given node.
3627	Check the consistency of msgid.
3628	Visit a Call node and perform various checks based on the inferred function type.
3629	Check that a datetime was inferred and emit boolean-datetime warning if so.
3630	Check that the mode argument of an open or file call is valid.
3631	Manage message of different type and in the context of path.
3632	Launch layouts display
3633	Get title for objects.
3634	Set different default options with _default dictionary.
3635	True if builtins and not show_builtins
3636	Visit one class and add it to diagram.
3637	Return ancestor nodes of a class node.
3638	Return associated nodes of a class node.
3639	Extract recursively classes related to klass_node
3640	Leave the pyreverse.utils.Project node and return the generated diagram definition.
3641	Visit astroid.ImportFrom and catch modules for package diagram.
3642	Return a class diagram definition for the given class and its related classes.
3643	Get the diagrams configuration data.
3644	Check if the given owner should be ignored based on module and class name matching.
3645	Given an owner and a name, try to find similar names using a distance metric and return up to a specified number of choices.
3646	Try to see if no-member should be emitted for the given owner.
3647	Check if the given node has a parent of the given type.
3648	Check if the given name is used as a variadic argument.
3649	Verify if the given call node has variadic nodes without context.
3650	Check that the accessed attribute exists.
3651	Check that if assigning to a function call, the function is possibly returning something valuable.
3652	Check that the given uninferable Call node does not call an actual function.
3653	Detect TypeErrors for unary operands.
3654	Return an iterator on interfaces implemented by the given class node.
3655	Return a Project from a list of files or modules.
3656	Visit an astroid.Package node and optionally tag it with a unique id.
3657	Visit an astroid.Function node and set the locals_type mapping, optionally tagging the node with a unique id.
3658	Visit an astroid.AssignName node and handle locals_type.
3659	Handle an astroid.assignattr node and update instance_attrs_type with inferred values.
3660	Visit an astroid.Import node and resolve module dependencies.
3661	Visit an astroid.ImportFrom node and resolve module dependencies.
3662	Return true if the module should be added to dependencies.
3663	Notify an imported module, used to analyze dependencies
3664	Return ANSI escape code corresponding to color and style.
3665	Colorize a message by wrapping it with ANSI escape codes.
3666	Register the reporter classes with the linter.
3667	Manage message of different type and in the context of path.
3668	Launch layouts display.
3669	Manage message of different types and colorize output using ANSI escape codes.
3670	Open a vcg graph.
3671	Draw a node.
3672	Draw an edge from a node to another.
3673	Check the new string formatting.
3674	Check for bad escapes in a non-raw string.
3675	Display a section as text.
3676	Display an evaluation section as a text.
3677	Display a table as text.
3678	Format a table with specified layout, content, and column widths.
3679	Register the old ID and symbol for a warning that was renamed.
3680	Register all messages from a checker.
3681	Register a MessageDefinition with consistency checks and update internal message registries.
3682	Check that a symbol is not already used.
3683	Raise an error when a symbol is duplicated.
3684	Raise an error when a msgid is duplicated.
3685	Returns the Message object for this message.
3686	Generates a user-consumable representation of a message.
3687	Display help messages for the given message identifiers.
3688	Output full messages list documentation in ReST format.
3689	Output full documentation in ReST format for all extension modules
3690	Use sched_affinity if available for virtualized or containerized environments, otherwise fall back to multiprocessing.cpu_count() or return 1.
3691	Make messages type report.
3692	Prepare sys.path for running the linter checks.
3693	Load and register pylint plugin modules from a list of module names.
3694	Call the configuration hook for plugins
3695	Overridden method to handle special options and set configuration values.
3696	Register a new checker and its associated reports, options, and messages.
3697	Disable all reporters.
3698	Disable all other checkers and enable Python 3 warnings.
3699	Return all available checkers as a list.
3700	Get all the checker names that this linter knows about.
3701	Return checkers needed for activated messages and reports.
3702	Get modules and errors from a list of modules and handle errors.
3703	Set the name of the currently analyzed module and init statistics for it.
3704	Check a module from its astroid representation.
3705	Make the global evaluation report.
3706	Optik callback for printing help about a particular message.
3707	optik callback for printing full documentation
3708	optik callback for printing available messages
3709	List all the check groups that pylint knows about.
3710	Wrap the text on the given line length.
3711	Return the module name and the frame id in the module.
3712	Return decoded line from encoding or decode with default encoding.
3713	Determines if the basename is matched in a regex blacklist.
3714	Load all modules and packages in the given directory, looking for a 'register' function in each one to register pylint checkers.
3715	Return string as a comment.
3716	Return the user input's value from a 'compiled' value.
3717	Format an options section using the INI format.
3718	Format options using the INI format.
3719	Insert a child node at the specified index.
3720	Override append to detect problems easily.
3721	Return the ancestor nodes.
3722	Format and write the given layout into the stream object.
3723	Get table content as an aligned list of lists containing cell values as strings.
3724	A trick to compute the formatting of children layout before actually writing it, returning an iterator on strings (one for each child element).
3725	Walk the AST to collect block level options line numbers.
3726	Report an ignored message.

The method handles ignored messages by tracking suppression mappings and updating ignored message records based on the state scope (module or config) and message details. It attempts to map original lines and adds ignored message lines to the appropriate tracking structures, gracefully handling cases where mappings don't exist.

Note: The actual summary should be much shorter like in the example. Let me reconsider:

Report an ignored message.
3727	Register a report with the given parameters.
3728	Render registered reports.
3729	Add stats entries to the statistic dictionary.
3730	Get the name of the property that the given node is a setter for.
3731	Get the property node for the given setter node.
3732	Check if a return node returns a value other than None.
3733	Gets all of the possible raised exception types for the given raise node.
3734	Inspect the source file to find messages activated or deactivated by id.
3735	Inspect the source file to find encoding problems.
3736	Inspect the source to find fixme problems.
3737	Check if the name is a future import from another module.
3738	Returns True if stmt is inside the else branch for a parent For stmt.
3739	Get overridden method if any.
3740	Return extra information to add to the message for unpacking-non-sequence and unbalanced-tuple-unpacking errors.
3741	Detect that the given frames shares a global scope.
3742	Checks if name_node has corresponding assign statement in same scope
3743	Mark the name as consumed and delete it from the to_consume dictionary.
3744	Check that names imported exist in the global scope.
3745	Return True if the node is in a local class scope, as an assignment.
3746	Return True if there is a node with the same name in the to_consume dict of an upper function scope.
3747	Check for unbalanced tuple unpacking and unpacking non sequences.
3748	Update consumption analysis for metaclasses.
3749	Return a list of subpackages for the given directory.
3750	Setup entry point for installing the package with specified configuration and dependencies.
3751	Overridden from install_lib class to manually install included directories.
3752	Make a layout with some stats about duplication.
3753	standalone command line access point
3754	Append a file to search for similarities.
3755	Compute similarities in appended files by grouping duplicate line sets and returning sorted similarity results.
3756	Display computed similarities on stdout.
3757	Find similarities in the two given linesets.
3758	Iterate on similarities among all files by making a cartesian product.
3759	Return an iterator on stripped lines, starting from a given index.
3760	Create the index for this set.
3761	Check if a definition signature is equivalent to a call.
3762	Check equality of nodes based on the comparison of their attributes.
3763	Check if original and overridden methods arguments have different default values.
3764	Determine if two methods have different parameters.
3765	Safely infer the return value of a function.
3766	Set the given node as accessed.
3767	Initialize visit variable _accessed and perform various class definition checks including base classes, __init__ method, slots, and MRO consistency.
3768	Detect that a class has a consistent mro or duplicate bases.
3769	Detect that a class inherits something which is not a class or a type.
3770	Check method arguments and overriding conditions for a function definition node.
3771	Check if the given function node is an useless method override that uses super() builtin without additional functionality.
3772	On method node, check if this method couldn't be a function.
3773	Check that the given AssignAttr node is defined in the class slots.
3774	Check if the name handles access to a class member and register it if so.
3775	Check that accessed members are defined.
3776	Check that the given class node implements abstract methods from base classes.
3777	Check that the signature of the two given methods match.
3778	Check if astroid.Name corresponds to first attribute variable name

Name is `self` for method, `cls` for classmethod and `mcs` for metaclass.
3779	Return true if the given statement node raises an exception.
3780	Verify that the exception context is properly set.
3781	Check use of super in method definitions.
3782	Display results encapsulated in the layout tree.
3783	Check if a class node is a typing.NamedTuple class
3784	Check if a class definition defines an Enum class.
3785	Check if a class definition defines a Python 3.7+ dataclass
3786	Initialize visit variables.
3787	Check size of inheritance hierarchy and number of instance attributes.
3788	Check the number of public methods in a class and add messages if the count is outside the allowed range.
3789	Increments the branches counter and checks boolean expressions.
3790	Go through "if" node and count its boolean expressions, raising a message if threshold is exceeded.
3791	Check the node for spelling errors in its docstring.
3792	Format the message according to the given template.
3793	Check if the given token is a trailing comma.
3794	Check if the given node is an actual elif statement.

The method determines whether a given AST node represents an actual `elif` clause rather than a separate `if` statement that the AST module incorrectly parses as such. It does this by checking if the node's parent is an `If` statement, if the node is the direct child of an `else` block, and if the node's position matches known `elif` locations.
3795	Check if an if statement can be simplified to a boolean expression.
3796	Check if a StopIteration exception is raised inside a generator and add a message if it is.
3797	Return True if the exception inherits from StopIteration.
3798	Check if a StopIteration exception is raised by the call to next function in a generator.
3799	Update and check the number of nested blocks.
3800	Get the duplicated types from the underlying isinstance calls.
3801	Check isinstance calls which can be merged together.
3802	Check if there is any chained comparison in the expression and add a refactoring message if a boolOp contains comparison that can be chained.
3803	Returns true if node is 'condition and true_value or false_value' form.
3804	Check that all return statements inside a function are consistent.
3805	Check if the node ends with an explicit return statement.
3806	Emit a convention whenever range and len are used for indexing.
3807	Check if graphviz is available for the specified output format.
3808	Checking arguments and running project.
3809	Write a package diagram by emitting nodes for modules and edges for dependencies.
3810	Write a class diagram by processing objects and their relationships.
3811	Initialize DotWriter and add options for layout.
3812	Initialize VCGWriter for a UML graph.
3813	Return True if message may be emitted using the current interpreter.
3814	Return the help string for the given message id with optional checker reference and version restrictions.
3815	Extracts the environment PYTHONPATH and appends the current sys.path to those.
3816	Pylint the given file, traversing down the directory tree to find the root of the package and correcting filenames in the output for Emacs compatibility.
3817	Run pylint from python
3818	Recursive function that finds cycles in a graph using depth-first search traversal.
3819	Returns the source code for this element.
3820	Generates a graph file in the specified format.
3821	Format an options section using ReST formatted output.
3822	Register a numeric message ID to inform the user it could furnish a symbolic message ID instead.
3823	Disable the output of a message with the given id.
3824	Re-enable message of the given id.
3825	Get the message symbol of the given message id, returning the original message id if it doesn't exist.
3826	Return true if the message associated to the given message id is enabled.
3827	Adds a message given by ID or name.
3828	Output a full documentation in ReST format
3829	Helper method for printing checker documentation.
3830	Return the length of the indentation on the given token's line.
3831	Return a line with |s for each of the positions in the given lists.
3832	Get an indentation string for hanging indentation, consisting of the line-indent plus a number of spaces to fill up to the column of this token.
3833	Record the first non-junk token at the start of a line.
3834	Returns the valid offsets for the token at the given position.
3835	Extracts indentation information for a hanging indent after a bracket.
3836	Extracts indentation information for a continued indent.
3837	Pushes a new token for continued indentation on the stack.
3838	Process a new line encounter, check for unnecessary semicolons and update line information.
3839	Check that there are not unnecessary parentheses after a keyword.
3840	Extended check of PEP-484 type hint presence
3841	Check the spacing of a single equals sign.
3842	Check that a binary operator is surrounded by exactly one space.
3843	Check the node line number and check it if not yet done.
3844	Check for lines containing multiple statements and add a message if found, while handling special cases for with statements, try-except-finally blocks, single-line if statements, and single-line class statements.
3845	Check lines have less than a maximum number of characters.
3846	Return the indent level of the string and check for indentation consistency.
3847	Check if the node is being used as an iterator.
3848	Checks if an import node is in the context of a conditional.
3849	Detect when a "bad" built-in is referenced.
3850	Look for indexing exceptions.
3851	Look for removed attributes and check for xreadlines attribute and exception-message-attribute violations.
3852	Visit an except handler block and check for exception unpacking.
3853	Visit a raise statement and check for raising strings or old-raise-syntax.
3854	Search the pylint rc file and return its path if it find it, else None.
3855	Return a validated value for an option according to its type.
3856	Patch OptionParser.expand_default with custom behaviour to handle defaults and avoid overriding configuration file values.
3857	Disable abbreviations.
3858	Register an options provider.
3859	optik callback for option setting
3860	Set an option on the correct option provider.
3861	Write a configuration file according to the current configuration into the given stream or stdout.
3862	Dispatch values previously read from a configuration file to each options provider.
3863	Override configuration according to command line parameters and return additional arguments.
3864	Add a dummy option section for help purpose.
3865	Return the usage string for available options.
3866	Initialize the provider using default values.
3867	Get the config attribute corresponding to opt.
3868	Return the dictionary defining an option given its name.
3869	Return an iterator on options grouped by section.
3870	Determines if a BoundMethod node represents a method call.
3871	Checks if node represents a string with complex formatting specs.
3872	Clears any state left in this checker from last module checked.
3873	Checks to see if a module uses a non-Python logging module.
3874	Checks to see if this module uses Python's built-in logging.
3875	Checks calls to logging methods.
3876	Checks that format string tokens match the supplied arguments.
3877	Return True if the node is inside a kind of for loop.
3878	Returns the loop node that holds the break node in arguments.
3879	Returns true if a loop may end up in a break statement.
3880	Returns a tuple of property classes and names.
3881	Determine the name type whose regex the a function's name should match.
3882	Make a report of percentage of different types documented and percentage of different types with a bad name.
3883	Return True if the object is a method redefined via decorator.
3884	Is this a call with exactly 1 argument, where that argument is positional?
3885	Check that a Starred expression is used in an assignment target.
3886	Check that a name is both nonlocal and global.
3887	Check instantiating abstract class with abc.ABCMeta as metaclass.
3888	Check that any loop with an else clause has a break statement.
3889	Check that a node is inside a for or while loop.
3890	Initialize visit variables and statistics.
3891	Check for various kinds of statements without effect.
3892	Check whether or not the lambda is suspicious.
3893	Check the use of an assert statement on a tuple.
3894	Check for duplicate keys in dictionary.
3895	Check for unreachable code in the given node.
3896	Check that a node is not inside a finally clause of a try...finally statement.
3897	Check that the argument to `reversed` is a sequence.
3898	Check module level assigned names.
3899	Check for a name using the type's regexp and handle various naming validation cases including bad names, multi-naming matches, and invalid names.
3900	Check if the node has a non-empty docstring.
3901	Check if we compare to a literal, which is usually what we do not want to do.
3902	Create the subgraphs representing any `if` and `for` statements.
3903	Parse the body and any `else` block of `if` and `for` statements.
3904	Visit an astroid.Module node to check too complex rating and add message if complexity is greater than max_complexity.
3905	Walk to the checker's dir and collect visit and leave methods.
3906	Call visit events of astroid checkers for the given node, recurse on its children, then leave events.
3907	Create a relationship between two objects of a given type.
3908	Return a relationship or None.
3909	Return visible attributes with class names for a given node.
3910	Return visible methods from a node.
3911	Create a diagram object.
3912	Return class names needed in diagram.
3913	Return all class nodes in the diagram.
3914	Return a class by its name, raise KeyError if not found.
3915	Return all module nodes in the diagram.
3916	Return a module by its name, raise KeyError if not found.
3917	Return a module by its name, looking also for relative imports; raise KeyError if not found.
3918	Add dependencies created by from-imports.
3919	Removes itself from the cache
3920	Determines which method of getting the query object for use
3921	Returns the User object if found and password matches, otherwise returns None.
3922	Returns a Token object with the given access token or refresh token.
3923	Creates a Token object and removes all expired tokens that belong to the user.
3924	Creates Grant object with the given params
3925	Get the Grant object with the given client ID and code.
3926	Make request parameters right.
3927	Init app with Flask instance.
3928	Registers a new remote application.
3929	Send a request to the remote server with OAuth tokens attached.
3930	Returns a redirect response to the remote authorization URL with the signed callback given.
3931	Handles an oauth1 authorization response.
3932	Handles an oauth2 authorization response.
3933	Handles authorization response smartly.
3934	Handles an OAuth callback.
3935	Creates a hashable object for given token to use as a dictionary key.
3936	Uses cached client or creates new one with specific token.
3937	Creates a client with specific access token pair.
3938	Creates a context to enable the oauthlib environment variable for debugging with insecure transport.
3939	Confirm the authorization request and handle OAuth1 errors.
3940	Request token handler decorator.
3941	Get client secret.
3942	Get request token secret.
3943	Get access token secret.
3944	Get the default realms of the client.
3945	Get realms for this request token.
3946	Get redirect uri for this request token.
3947	Retrieves a previously stored client provided RSA key.
3948	Validates that supplied client key.
3949	Validates request token is available for client.
3950	Validates access token is available for client.
3951	Validate the timestamp and nonce is used or not.
3952	Validate if the redirect_uri is allowed by the client.
3953	Check if the token has permission on those realms.
3954	Validate verifier exists.
3955	Verify if the request token is existed.
3956	Verify if the realms match the requested realms.
3957	Save access token to database.
3958	Save request token to database.
3959	Save verifier to database.
3960	The error page URI.

When something turns error, it will redirect to this error page.
3961	Handle the authorization request confirmation and process the OAuth2 authorization response.
3962	Verify current request and get the oauth data.
3963	Return client credentials based on the current request.
3964	Determine if client authentication is required for current request.
3965	Authenticate the client using provided credentials and validate against stored client information.
3966	Authenticate a non-confidential client.
3967	Get the list of scopes associated with the refresh token.
3968	Ensures the requested scope matches the scope originally granted by the resource owner for a refresh token.
3969	Get the default redirect_uri for the given client.
3970	Default scopes for the given client.
3971	Invalidate an authorization code after use.
3972	Persist the authorization code.
3973	Persist the Bearer token.
3974	Validate access token.
3975	Ensure client_id belongs to a valid and active client.
3976	Ensure the grant code is valid.
3977	Ensure the client is authorized to use the requested grant type.
3978	Ensure the token is valid and belongs to the client.
3979	Ensure client is authorized to use the response type requested.
3980	Ensure the client is authorized access to requested scopes.
3981	Ensure the username and password is valid and attach user object on request for later use.
3982	Revoke an access or refresh token.
3983	Update some required parameters for OAuth2.0 API calls
3984	Recursively converts dictionary keys to strings.
3985	Since weibo is a rubbish server, it does not follow the standard, we need to change the authorization header for it.
3986	Creates a remote app and registers it.
3987	Creates a remote app only.
3988	Extract request params.
3989	Make sure text is bytes type.
3990	Decode base64 string.
3991	Create response class for Flask.
3992	Gets the cached clients dictionary in current context.
3993	Adds remote application and applies custom attributes on it.
3994	Creates and adds a new remote application.
3995	Call the method repeatedly such that it will raise an exception.
3996	Call the method repeatedly such that it will return a PKey object.
3997	Call the function with an encrypted PEM and a passphrase callback.
3998	Call the function with an encrypted PEM and a passphrase callback which returns the wrong passphrase.
3999	Call the function with an encrypted PEM and a passphrase callback which returns a non-string.
4000	Create a CRL object with 100 Revoked objects, then call the get_revoked method repeatedly.
4001	Copy an empty Revoked object repeatedly and manually free each copy.
4002	Create a certificate request.
4003	Generate a certificate given a certificate request.
4004	Builds a decorator that ensures functions relying on OpenSSL functions raise NotImplementedError if the functions are not present in this build.
4005	Load and verify SSL certificate locations.
4006	Set the passphrase callback for private key decryption.
4007	Load a certificate chain from a file.
4008	Load a certificate from a file.
4009	Load a certificate from a X509 object.
4010	Add certificate to chain.
4011	Load a private key from a file.
4012	Load a private key from a PKey object.
4013	Load the trusted certificates that will be sent to the client.
4014	Set the maximum depth for the certificate chain verification that shall be allowed for this Context object.
4015	Load parameters for Ephemeral Diffie-Hellman
4016	Set the list of ciphers to be used in this context.
4017	Set the list of preferred client certificate signers for this server context.
4018	Add the CA certificate to the list of preferred signers for this context.
4019	Specify a callback function to be called when clients specify a server name.
4020	Enable support for negotiating SRTP keying material.
4021	Specify a callback function that will be called when a server offers Next Protocol Negotiation options.
4022	Specify the protocols that the client is prepared to speak after the TLS connection has been negotiated using Application Layer Protocol Negotiation.
4023	Specify a callback function that will be called on the server when a client offers protocols using ALPN.
4024	This internal helper does the common work for `set_ocsp_server_callback` and `set_ocsp_client_callback`.
4025	Set a callback to provide OCSP data for stapling to the TLS handshake on the server side.
4026	Set a callback to validate OCSP data stapled to the TLS handshake on the client side.
4027	Switch this connection to a new session context.
4028	Retrieve the servername extension value from the client hello message, or None if not present.
4029	Set the value of the servername extension to send in the client hello.
4030	Receive data on the connection.
4031	Receive data on the connection and copy it directly into the provided buffer, rather than creating a new string.
4032	Read bytes from the write end of a memory BIO.
4033	Renegotiate the session.
4034	Send the shutdown message to the Connection.
4035	Retrieve the list of ciphers used by the Connection object.
4036	Get CAs whose certificates are suggested for client authentication.
4037	Set the shutdown state of the Connection.
4038	Retrieve the random value used with the server hello message.
4039	Retrieve the random value used with the client hello message.
4040	Retrieve the value of the master key for this session.
4041	Obtain keying material for application use.
4042	Returns the Session currently used.
4043	Obtain the name of the currently used cipher.
4044	Obtain the number of secret bits of the currently used cipher.
4045	Obtain the protocol version of the currently used cipher.
4046	Retrieve the protocol version of the current connection.
4047	Get the protocol that was negotiated by NPN.
4048	Specify the client's ALPN protocol list.
4049	Get the protocol that was negotiated by ALPN.
4050	Allocate a new OpenSSL memory BIO.
4051	Copy the contents of an OpenSSL BIO object into a Python byte string.
4052	Set the time value of an ASN1 time object.
4053	Retrieve the time value of an ASN1 time object.
4054	Return a single curve object selected by name.
4055	Dump a public key to a buffer.
4056	Load a public key from a buffer.
4057	Sign a data string using the given key and message digest.
4058	Verify the signature for a data string.
4059	Dump a certificate revocation list to a buffer.
4060	Export as a ``cryptography`` key.
4061	Generate a key pair of the given type with the given number of bits.
4062	Check the consistency of an RSA private key.
4063	Get the curves supported by OpenSSL.
4064	Get, cache, and return the curves supported by OpenSSL.
4065	Create a new OpenSSL EC_KEY structure initialized to use this curve.
4066	Return the DER encoding of this name.
4067	Returns the components of this name, as a sequence of 2-tuples.
4068	Returns the short type name of this X.509 extension.
4069	Returns the data of the X509 extension, encoded as ASN.1.
4070	Export as a ``cryptography`` certificate signing request.
4071	Set the public key of the certificate signing request.
4072	Get the public key of the certificate signing request.
4073	Return the subject of this certificate signing request.
4074	Add extensions to the certificate signing request.
4075	Get X.509 extensions in the certificate signing request.
4076	Verifies the signature on this certificate signing request.
4077	Export as a ``cryptography`` certificate.
4078	Set the version number of the certificate.
4079	Get the public key of the certificate.
4080	Set the public key of the certificate.
4081	Sign the certificate with the provided key and digest type.
4082	Return the signature algorithm used in the certificate.
4083	Return the digest of the X509 object.
4084	Set the serial number of the certificate.
4085	Return the serial number of this certificate.
4086	Adjust the time stamp on which the certificate stops being valid.
4087	Adjust the timestamp on which the certificate starts being valid.
4088	Check whether the certificate has expired.
4089	Return the issuer of this certificate.
4090	Set the issuer of this certificate.
4091	Return the subject of this certificate.
4092	Set the subject of this certificate.
4093	Add extensions to the certificate.
4094	Get a specific extension of the certificate by index.
4095	Adds a trusted certificate to this store.
4096	Add a certificate revocation list to this store.
4097	Set the time against which the certificates are verified.
4098	Set up the store context for a subsequent verification operation.
4099	Convert an OpenSSL native context error failure into a Python exception.
4100	Verify a certificate in a context.
4101	Set the serial number from a hexadecimal string.
4102	Get the serial number.
4103	Set the reason of this revocation.
4104	Get the reason of this revocation.
4105	Set the revocation timestamp.
4106	Export as a ``cryptography`` CRL.
4107	Return the revocations in this certificate revocation list.
4108	Get the CRL's issuer.
4109	Sign the CRL with the given issuer certificate and private key.
4110	Export the CRL as a string.
4111	Returns the type name of the PKCS7 structure.
4112	Replace or set the CA certificates within the PKCS12 object.
4113	Dump a PKCS12 object as a string.
4114	Sign the certificate request with the given private key and digest type.
4115	Verifies a signature on a certificate request.
4116	Generate a base64 encoded representation of this SPKI object.
4117	Get the public key of this certificate.
4118	Set the public key of the certificate.
4119	Convert an OpenSSL library failure into a Python exception.
4120	If ``obj`` is text, emit a warning that it should be bytes instead and try to convert it to bytes automatically.
4121	Internal helper to provide color names.
4122	Return extra config options to be passed to the TrelloIssue class
4123	Returns a list of dicts representing issues from a remote service.
4124	A wrapper around get_comments that builds the taskwarrior annotations.
4125	Get the list of boards to pull cards from.
4126	Returns a list of the filtered lists for the given board, filtering according to include_lists and exclude_lists configuration values.
4127	Returns an iterator for the cards in a given list, filtered according to configuration values.
4128	Returns an iterator for the comments on a certain card.
4129	Build the full url to the API endpoint
4130	Pagination utility function that handles API requests with authentication and link headers.
4131	Utility for ripping apart github's Link header field.
4132	Grab all issues matching a github query
4133	Grab all the pull requests
4134	Return all issues from every target.
4135	Return a main config value, or default if it does not exist.
4136	Get any defined templates for configuration values.
4137	Validate generic options for a particular target.
4138	Return true if the issue in question should be included based on assignment or author criteria.
4139	Make a RST-compatible table from a grid of cells.
4140	Retrieve password from the given command.
4141	Accepts both integers and empty values.
4142	Pull down tasks from forges and add them to your taskwarrior tasks.
4143	Perform a request to the fully qualified url and return json.
4144	Pages through an object collection from the bitbucket API and returns an iterator that lazily goes through all the 'values' of all the pages in the collection.
4145	For a given issue, find its local UUID by matching against TaskWarrior task IDs using specified keys or description field.
4146	Merge array field from the remote_issue into local_task, preserving local entries and appending new remote entries.
4147	Returns a list of UDAs defined by given targets.
4148	Parse the big ugly sprint string stored by JIRA into a dictionary of fields.
4149	Gets valid user credentials from storage, completing OAuth2 flow if necessary.
4150	Efficiently compute highly repetitive ROUGE-N scoring for sequences.
4151	Calculate pvalues for all categories in the graph using hypergeometric testing.
4152	Perform Benjamini-Hochberg FDR correction on p-values.
4153	Standardize the mean and variance of the data across the specified axis.
4154	Visualize the dataframe as a heatmap.
4155	Remove spines and ticks from axes object based on specified spine names.
4156	Prepare argparser object. New options will be added in this function first.
4157	Add function 'prerank' argument parsers.
4158	Add function 'plot' argument parsers.
4159	Add function 'enrichr' argument parsers.
4160	Compute enrichment score for gene set analysis with GSEA algorithm.
4161	Build shuffled ranking matrix when permutation_type equals phenotype.
4162	Rank genes in an expression table based on different statistical methods.
4163	Compute nominal p-value for GSEA analysis.
4164	Compute nominal pvals, normalized ES, and FDR q value for GSEA significance testing.
4165	Get available marts and their names.
4166	Get available datasets from the specified mart and return them as a DataFrame with Name and Description columns.
4167	Get available attributes from dataset you've selected
4168	Get available filters from dataset you've selected
4169	Query ids using BioMart and return a dataframe with specified attributes.
4170	Run Gene Set Enrichment Analysis.
4171	Run Gene Set Enrichment Analysis with single sample GSEA tool
4172	Run Gene Set Enrichment Analysis with pre-ranked correlation defined by user.
4173	The main function to reproduce GSEA desktop outputs.
4174	Set CPU numbers to be used.
4175	Load gene set dictionary from GMT file or dictionary, filter gene sets by size constraints, and return the filtered dictionary.
4176	Return active enrichr library names from the official API.
4177	Download enrichr libraries and generate gene sets.
4178	Create a heatmap matrix for GSEA analysis using positive and negative phenotype classes.
4179	Reformat GSEA results and save to CSV/TEXT files.
4180	Pre-process the data frame with filtering methods.
4181	GSEA main procedure
4182	GSEA prerank workflow
4183	Run Single Sample GSEA workflow with permutation procedure
4184	Single Sample GSEA workflow with multiprocessing support.
4185	Save enrichment scores and statistics.
4186	Main replot function that processes GSEA results, parses input files, and generates enrichment plots.
4187	Run Enrichr API analysis on a gene list with specified gene sets and parameters.
4188	Parse gene_sets input file type.
4189	Parse gene list from various input formats (list, DataFrame, Series, or file) and process gene identifiers.
4190	Send gene list to enrichr server.
4191	Compare the genes sent and received to get successfully recognized genes
4192	Get background genes from file, package data, or Biomart database.
4193	Run enrichr for one sample gene list but multi-libraries
4194	Create a cube primitive.
4195	Create an icosphere mesh with specified radius, subdivisions, and optional color.
4196	Create a torus mesh.
4197	Creates a plane with a specified number of vertices on its sides, but no vertices on the interior.
4198	Create a box with user defined number of segments in each direction.
4199	Read color_names.txt and find the red, green, and blue values for a named color.
4200	Check if a variable is a list and is the correct length, converting it to a list if necessary.
4201	Make a variable a list if it is not already.
4202	Write filter to FilterScript object or filename
4203	Apply LS3 Subdivision Surface algorithm using Loop's weights.
4204	Merge together all the vertices that are nearer than the specified threshold.
4205	Close holes smaller than a given threshold.
4206	Split non-manifold vertices until it becomes two-manifold.
4207	Try to snap together adjacent borders that are slightly mismatched.
4208	An alternative translate implementation that uses a geometric function. This is more accurate than the built-in version.
4209	An alternative rotate implementation that uses a geometric function. This is more accurate than the built-in version.
4210	An alternative scale implementation that uses a geometric function. This is more accurate than the built-in version.
4211	Geometric function using cylindrical coordinates.
4212	Deform mesh around cylinder of radius and axis z
4213	Bends mesh around cylinder of radius radius and axis z to a certain angle.
4214	Deform a mesh along a parametric curve function.
4215	Transfer vertex colors to texture colors
4216	Transfer mesh colors to face colors.
4217	Create a new mesh that is a resampled version of the current one using uniform volumetric representation and marching cube algorithm.
4218	This surface reconstruction algorithm creates watertight surfaces from oriented point sets using the screened Poisson method.
4219	Turn a model into a surface with Voronoi style holes in it.
4220	Select all the faces of the current mesh.
4221	Select all the faces and vertexes within the specified vertex quality range.
4222	Perform face selection on current mesh using a boolean function with muparser library.
4223	Boolean function using muparser lib to perform vertex selection over current mesh.
4224	Select all vertices within a cylindrical radius.
4225	Select all vertices within a spherical radius.
4226	Flatten all or only the visible layers into a single new mesh.
4227	Rename layer label

Can be useful for outputting mlp files, as the output file names use the labels.

Args:
    script: the mlx.FilterScript object or script filename to write the filter to.
    label (str): new label for the mesh layer
    layer_num (int): layer number to rename. Default is the current layer. Not supported on the file base API.

Layer stack:
    Renames a layer

MeshLab versions:
    2016.12
    1.3.4BETA
4228	Change the current layer by specifying the new layer number.
4229	Duplicate a layer by creating a copy of the specified layer or current layer, updating the layer stack, and returning None.
4230	Delete all layers below the specified one.
4231	Subprocess program error handling with user interaction options.
4232	Create new mlx script and write opening tags, with special processing for stl files and handling of input files.
4233	Add new mesh layer to the end of the stack
4234	Delete mesh layer and adjust current layer if needed.
4235	Save filter script to an mlx file
4236	Run the script with optional temporary file handling and output parsing.
4237	Run main script to create a shield model with star pattern using meshlab.
4238	Compute the Hausdorff Distance between two meshes by sampling one mesh and finding the closest points on the other mesh.
4239	Create a new layer populated with a point sampling of the current mesh using Poisson-disk distribution.
4240	Create a new layer populated with a point sampling of the current mesh, at most one sample for each element of the mesh is created.
4241	Create a new layer populated with a subsampling of the vertexes of the current mesh using a grid-based clustering strategy.
4242	Flat plane parameterization

The function creates a flat plane parameterization filter with specified projection plane and aspect ratio preservation options, writes it to the given script, and returns None. The projection plane can be XY, XZ, or YZ, and the aspect ratio can be preserved or not.
4243	Trivial Per-Triangle parameterization
4244	Voronoi Atlas parameterization
4245	Compute a set of topological measures over a mesh.
4246	Parse the ml_log file generated by the measure_topology function.
4247	Parse the ml_log file generated by the hausdorff_distance function.
4248	Color function using muparser lib to generate new RGBA color for every vertex
4249	Given a Mesh 'M' and a Pointset 'P', the filter projects each vertex of P over M and color M according to the geodesic distance from these projected points. Projection and coloring are done on a per vertex basis.
4250	Color mesh vertices in a repeating sinusoidal rainbow pattern.
4251	Implements an atan2(y,x) function for older muparser versions (<2.1.0).
4252	Compute the cross product of two 3x1 vectors.
4253	Multiply vector by scalar
4254	Add a new Per-Vertex scalar attribute to current mesh and fill it with the defined function.
4255	Invert faces orientation, flipping the normals of the mesh.
4256	Compute the normals of the vertices of a mesh without exploiting the triangle connectivity, useful for dataset with no faces.
4257	Apply Taubin smoothing filter to a mesh with specified parameters.
4258	A laplacian smooth that is constrained to move vertices only along the view direction.
4259	Sort separate line segments in obj format into a continuous polyline or polylines. NOT FINISHED; DO NOT USE

Also measures the length of each polyline

Return polyline and polylineMeta (lengths)
4260	Measures mesh topology and returns detailed mesh statistics including vertex, edge, and face counts, manifold properties, and geometric features.
4261	Measures mesh geometry, aabb and topology.
4262	Measure a dimension of a mesh.
4263	Helper function to provide lowercase extensions for processed files.
4264	Patch the app's request class to limit upload size.
4265	This is a helper function for `configure_uploads` that extracts the configuration for a single set.
4266	Configure upload sets for a Flask app by setting up their configuration and registering the uploads module if needed.
4267	Get the current configuration, either from a manually set `_config` attribute or from the current application's upload set configuration.
4268	Get the URL for a file uploaded to this set.
4269	Returns the absolute path of a file uploaded to this set.
4270	Determine whether a specific extension is allowed.
4271	Resolve filename conflicts by adding numeric suffixes to avoid duplicates in the target folder.
4272	Returns actual version specified in filename.
4273	Remove duplicate objects from a list while preserving order.
4274	Returns count difference in two collections of Python objects.
4275	Formats object count by parsing object type and name from representations and sorting by count in descending order.
4276	Checks memory usage when 'line' event occurs.
4277	Returns processed memory usage.
4278	Returns all objects that are considered a profiler overhead.
4279	Returns memory overhead.
4280	Returns memory stats for a package.
4281	Returns memory stats for a module.
4282	Returns memory stats for a function.
4283	Collects memory stats for specified Python program.
4284	Returns module filenames from package.
4285	Runs function in separate process.
4286	Determines run object type.
4287	Initializes profiler with a module.
4288	Initializes profiler with a package.
4289	Initializes profiler with a function.
4290	Replaces sys.argv with proper args to pass to script.
4291	Samples current stack and adds result to self._stats.
4292	Inserts stack into the call tree.
4293	Counts and fills sample counts inside call tree.
4294	Reformats call tree for the UI.
4295	Returns call tree.
4296	Runs statistical profiler on a package.
4297	Runs statistical profiler on a module and returns profiling results including call statistics and runtime information.
4298	Runs statistical profiler on a function and returns profiling results including call statistics and runtime information.
4299	Process collected stats for UI display.
4300	Runs cProfile on a package and returns profiling statistics.
4301	Runs cProfile on a module and returns profiling statistics.
4302	Runs cProfile on a function and returns profiling statistics.
4303	Initializes DB.
4304	Returns all existing guestbook records.
4305	Adds single guestbook record.
4306	Profiler handler.
4307	Starts HTTP server with specified parameters.
4308	Handles index.html requests.
4309	Handles static files requests.
4310	Handles HTTP GET requests.
4311	Handles HTTP POST requests by reading and processing gzipped JSON data, then sends a response.
4312	Sends HTTP response code, message and headers.
4313	Checks whether path belongs to standard library or installed modules.
4314	Records line execution time.
4315	Filters code from standard library from self.lines.
4316	Fills code heatmap and execution count dictionaries.
4317	Skips lines in src_code specified by skip map.
4318	Calculates heatmap for package.
4319	Formats heatmap for UI.
4320	Calculates heatmap for module.
4321	Calculates heatmap for function.
4322	Runs profilers on run_object and returns collected statistics.
4323	Runs profilers on a function and sends the results to a remote host.
4324	Return probability estimates for the RDD containing test vector X.
4325	Return log-probability estimates for the RDD containing the test vector X.
4326	Fit Gaussian Naive Bayes according to X, y
4327	Create sparse feature matrix and vocabulary where fixed_vocab=False
4328	Sort features by name and return reordering map.
4329	Remove too rare or too common features based on document frequency thresholds and term frequency limits.
4330	Learn the vocabulary dictionary and return term-document matrix.
4331	Transform documents to document-term matrix.
4332	Convert to equivalent StandardScaler
4333	Wraps a Scikit-learn Linear model's fit method to use with RDD input.
4334	Wraps a Scikit-learn Linear model's predict method to use with RDD input.
4335	Fit linear model.
4336	Fit all the transforms one after the other and transform the data, then fit the transformed data using the final estimator.
4337	Fit all the transforms one after the other and transform the data, then use fit_transform on transformed data using the final estimator.
4338	Applies transforms to the data and returns the score from the final estimator.
4339	Perform actual fitting by searching over parameters using cross-validation.
4340	Compute the score of an estimator on a given test set.
4341	Compute k-means clustering.
4342	Predict the closest cluster each sample in X belongs to.
4343	Distributed method to predict class labels for samples in X.
4344	Checks if the blocks in the RDD matches the expected types.
4345	Learn a list of feature name -> indices mappings.
4346	Learn empirical variances from X.
4347	Fit LSI model to X and perform dimensionality reduction on X.
4348	Perform dimensionality reduction on X.
4349	Pack rdd with a specific collection constructor.
4350	Pack RDD of tuples as tuples of arrays or scipy.sparse matrices.
4351	Block an RDD into numpy arrays, scipy sparse matrices, or pandas data frames based on the data type of its elements.
4352	Equivalent to map, compatibility purpose only.
4353	Returns the shape of the data.
4354	Returns the data as numpy.array from each partition.
4355	Execute a transformation on a column or columns. Returns the modified DictRDD.
4356	Returns zero if there are no permissions for a bit of the perm. of a file. Otherwise it returns a positive value
4357	Check if file is only writable by root.
4358	Command to check configuration file. Raises InvalidConfig on error
4359	Parse and validate the config file, making the read data accessible as a dictionary in this instance.
4360	Get the arguments to execute a command as a user.
4361	Execute a command in a subprocess with timeout and return its output.
4362	Execute command on remote machine using SSH
4363	Check self.data and validate content-type and body configuration. Raise InvalidConfig on error.
4364	Get HTTP Headers to send by combining default headers and data headers.
4365	Return "data" value on self.data
4366	Get the Home Assistant URL with event endpoint.
4367	Get the IFTTT Webhook url.
4368	Return source mac address for this Scapy Packet
4369	Scandevice callback that registers source MAC addresses and prints device information to screen.
4370	Print help and scan devices on screen.
4371	Execute this device and handle the execution result or errors.
4372	Send success or error message to configured confirmation
4373	Press button. Check DEFAULT_DELAY.
4374	Execute a device using threading.
4375	Start daemon mode
4376	Convert an OFX Transaction to a posting.
4377	Returns main ledger file path or raise exception if it cannot be found.
4378	Run the unit test suite with each support library and Python version.
4379	Transform README.md into a usable long description by replacing relative references to svg images with absolute https references.
4380	Return a PrecalculatedTextMeasurer given a JSON stream.
4381	Returns a reasonable default PrecalculatedTextMeasurer.
4382	Creates a github-style badge as an SVG image.
4383	Generate the characters supported by the font at the given path.
4384	Generates the subset of 'characters' that can be encoded by 'encodings'.
4385	Return a mapping between each given character and its length.
4386	Write the data required by PrecalculatedTextMeasurer to a stream.
4387	Convolve a 2D image with a 2D Gaussian kernel by applying 1D Gaussian filters along each axis.
4388	Generate a gaussian kernel.
4389	Convert PIL image to numpy grayscale array and numpy alpha array.
4390	Main function for pyssim that compares an image with a list of images using the SSIM metric.
4391	Compute the SSIM value from the reference image to the target image.
4392	Computes SSIM between two PIL Image objects.
4393	Correctly destroy SyncObj. Stop autoTickThread, close connections, etc.
4394	Switch to a new code version on all cluster nodes.
4395	Dumps different debug info about cluster to dict and return it
4396	Dumps different debug info about cluster to default logger
4397	Find the node to which a connection belongs.
4398	Bind the server unless it is already bound, this is a read-only node, or the last attempt was too recently.
4399	Callback for connections initiated by the other side
4400	Handle initial messages on incoming connections, including encryption setup, utility commands, and node association.
4401	Callback for the utility messages
4402	Check whether this node should initiate a connection to another node
4403	Connect to a node if necessary.
4404	Handle outgoing connection establishment with encryption support.
4405	Callback for receiving a message on a new outgoing connection to exchange random keys and trigger node connection.
4406	Handle connection disconnection by initiating reconnect if necessary.
4407	Add a node to the network.
4408	Drop a node from the network.
4409	Send a message to a node and return whether the operation was successful.
4410	Destroy this transport
4411	Put an item into the queue.
True - if item placed in queue.
False - if queue is full and item can not be placed.
4412	Put an item into the queue. Returns True if item placed in queue, False if queue is full and item cannot be placed.
4413	Extract the smallest item from queue. Return default if queue is empty.
4414	Attempt to acquire lock.
4415	Check if lock is acquired by ourselves.
4416	Release previously-acquired lock.
4417	Decorator which wraps checks and returns an error response on failure.
4418	Decorator which ensures that one of the WATCHMAN_TOKENS is provided if set.
4419	Sets the Elasticsearch hosts to use with optional SSL configuration.
4420	Create Elasticsearch indexes.
4421	Updates index mappings for aggregate and forensic indexes.
4422	Duplicates org_name, org_email and report_id into JSON root and removes report_metadata key.
4423	Saves aggregate DMARC reports to Kafka
4424	Extracts XML from a zip or gzip file at the given path, file-like object, or bytes.
4425	Parses a file, file-like object, or bytes as a DMARC aggregate report and returns the parsed report as an OrderedDict.
4426	Converts parsed forensic reports to flat CSV format with headers.
4427	Parses a DMARC aggregate or forensic file and returns the parsed report.
4428	Returns a list of an IMAP server's capabilities.
4429	Save report data in the given directory
4430	Creates a zip file of parsed report output.
4431	Emails parsing results as a zip file.
4432	Saves aggregate DMARC reports to Splunk
4433	Saves forensic DMARC reports to Splunk
4434	Decodes a base64 string with optional padding.
4435	Gets the base domain name for the given domain.
4436	Resolves an IP address to a hostname using a reverse DNS query.
4437	Converts a human-readable timestamp into a Python DateTime object.
4438	Uses the MaxMind Geolite2 Country database to return the ISO code for the country associated with the given IPv4 or IPv6 address.
4439	Returns reverse DNS and country information for the given IP address.
4440	Convert an Outlook MSG file to RFC 822 format using the msgconvert utility.
4441	Converts a comma separated string to a list.
4442	Separated this function for multiprocessing
4443	Drain the connection by putting it into a drain state, draining subscriptions, and optionally closing the connection.
4444	Sends a PUB command to the server on the specified subject.
4445	Publishes a message with a reply subscription for responses.
4446	Sends PUB command to the NATS server.
4447	Sets the subscription to use a task per message to be processed.
4448	Remove a subscription from the client, optionally after receiving more than max_msgs.
4449	Sends a ping to the server to ensure written data has reached the server and measure roundtrip time, raising ErrTimeout if no pong is returned within the timeout.
4450	Looks up in the server pool for an available server and attempts to connect.
4451	Processes the raw error message sent by the server and closes the connection with the current server.
4452	Process errors which occurred while reading or parsing the protocol, attempting reconnection if enabled otherwise disconnect.
4453	Generates a JSON string with the params to be used when sending CONNECT to the server.
4454	Process PONG sent by server.
4455	Process MSG sent by server.
4456	Process INFO lines sent by the server to reconfigure client with latest updates from cluster to enable server discovery.
4457	Process INFO received from the server and CONNECT to the server with authentication, and set up reading and ping interval tasks.
4458	Coroutine which continuously consumes pending commands and flushes them to the socket.
4459	Coroutine which gathers bytes sent by the server and feeds them to the protocol parser.
4460	Compute and save coactivation map given input image as seed.
4461	Decodes a set of images and returns the results as a numpy array or saves to a CSV file.
4462	Load feature data from a 2D ndarray on disk.
4463	Load feature image data from image files.
4464	Decode images using Pearson's r correlation.
4465	Decoding using the dot product.
4466	Implements various kinds of feature selection.
4467	Set up data for a classification task given a set of masks.
4468	Returns a list with the order that features requested appear in dataset
4469	Perform classification on specified regions using given masks and dataset.
4470	Wrapper for scikit-learn classification functions that implements various types of classification and cross-validation.
4471	Fits X to outcomes y, using clf.
4472	Sets the class_weight of the classifier to match y
4473	Fits X to outcomes y using cross-validation and classification.
4474	Given a dataset, fits either features or voxels to y
4475	Aggregates over all voxels within each ROI in the input image.
4476	Returns mappable data for a random subset of voxels.
4477	Return top forty words from each topic in trained topic model.
4478	Correlates row vector x with each row vector in 2D array y.
4479	Determine FDR threshold given a p value array and desired false discovery rate q.
4480	Load activation data from a text file.
4481	Create and store a new ImageTable instance based on the current Dataset.
4482	Get IDs or data for studies that meet specific criteria.
4483	Construct a new FeatureTable from file.
4484	Returns names of features. If features is None, returns all features. Otherwise returns ordered names of specified features.
4485	Returns a dictionary with feature names as keys and their study counts as values.
4486	Load a pickled Dataset instance from file.
4487	Pickle the Dataset instance to the provided file.
4488	Slices and returns a subset of image data.
4489	Slices and returns a subset of feature data.
4490	Given a list of features, returns features in order that they appear in database.
4491	Returns a list of all studies in the table that meet the desired feature-based criteria.
4492	Returns all features that match any of the elements in the input list.
4493	Use a PEG to parse expression and return study IDs.
4494	Convert FeatureTable to SciPy CSR matrix.
4495	Deprecation warning decorator. Takes optional deprecation message, otherwise will use a generic warning.
4496	Convert coordinates from one space to another using provided transformation matrix.
4497	Convert an N x 3 array of XYZ coordinates to matrix indices.
4498	Apply a named transformation to a set of foci.
4499	Vectorize an image and mask out all invalid voxels.
4500	Set the current mask by taking the conjunction of all specified layers.
4501	Load multiple images from file into an ndarray.
4502	Save a vectorized image to file.
4503	Set neurosynth's logging level
4504	Expand the given address into one or more normalized strings.
4505	Normalizes a string, tokenizes, and normalizes each token with string and token-level options.
4506	Parse address into components.
4507	Hash addresses into normalized strings for grouping similar addresses together.
4508	Converts a python dict to a namedtuple, saving memory.
4509	Return the latest EOD Composite Price for a stock ticker with optional date range and formatting options.
4510	Return a pandas.DataFrame of historical prices for one or more ticker symbols.
4511	Get bulk news data from Tiingo API. If file_id is provided, returns download URL and metadata for that file. If file_id is not provided, returns array of available file IDs. Only available to institutional clients.
4512	Make HTTP request and return response object
4513	Get the application bearer token from client_id and client_secret.
4514	Make a request to the spotify API with the current bearer credentials.
4515	Get an album's tracks by ID.
4516	Get a spotify artist by their ID.
4517	Get an artist's albums by their Spotify ID.
4518	Get an artist's top tracks per country using their Spotify ID.
4519	Get related artists for an artist by their ID.
4520	Get Spotify artists by their IDs.
4521	Get a single category used to tag items in Spotify.
4522	Get a list of Spotify playlists tagged with a particular category.
4523	Get a list of categories used to tag items in Spotify.
4524	Get a list of Spotify featured playlists.
4525	Get a list of new album releases featured in Spotify.
4526	Get Recommendations Based on Seeds.
4527	Check to see if the current user is following one or more artists or other Spotify users.
4528	Get the albums of a Spotify artist.
4529	Load all of the artist's albums, depending on how many the artist has this may be a long operation.
4530	Get the total amount of albums for an artist.
4531	Get Spotify catalog information about artists similar to a given artist.
4532	Get the user's currently playing track.
4533	Get information about the users current playback.
4534	Get information about the user's available devices.
4535	Get tracks from the current user's recently played tracks.
4536	Replace all the tracks in a playlist, overwriting its existing tracks.
4537	Reorder a track or a group of tracks in a playlist.
4538	Create a playlist for a Spotify user.
4539	Get the user's playlists from Spotify.
4540	Get the album's tracks from Spotify.
4541	Load all of the album's tracks, with optional market parameter for track relinking.
4542	Generate an OAuth2 URL for user authentication.
4543	Retrive an album with a spotify ID.
4544	Retrieve an artist with a Spotify ID.
4545	Retrive an track with a spotify ID.
4546	Retrieve a user with a Spotify ID.
4547	Retrive multiple albums with a list of spotify IDs.
4548	Retrieve multiple artists with a list of Spotify IDs.
4549	Access the spotify search functionality.
4550	Get a Spotify ID from a URI or open.spotify URL.
4551	Decorator to assert an object has an attribute when run.
4552	Construct a OAuth2 object from a `spotify.Client`.
4553	Construct a OAuth2 URL instead of an OAuth2 object.
4554	Attributes used when constructing url parameters.
4555	Return URL parameters as a string.
4556	Get the track object for each link in the partial tracks data.
4557	Get all playlist tracks from the playlist.
4558	Resume playback on the user's account.
4559	Transfer playback to a new device and determine if it should start playing.
4560	Get the full object from spotify with a `href` attribute.
4561	Execute the logic behind the meaning of ExpirationDate + return the matched status.
4562	Convert a given month into our unified format.
4563	Read the code and update all links.
4564	Check if the current version is greater than the older one.
4565	Check if the current branch is `dev`.
4566	Check if we have to put the previous version into the deprecated list.
4567	Backup the current execution state.
4568	Restore data from the given path.
4569	Check if the given line has to be ignored based on regex patterns.
4570	Handle the data from the options and extract domains, returning a list of domains or True based on aggressive mode.
4571	Extract the base of the given element.
4572	Format the extracted adblock line before passing it to the system.
4573	Get the HTTP code status.
4574	Return the HTTP code status.
4575	Check the syntax of the given domain.
4576	Check if the given domain is a subdomain.
4577	Check the syntax of the given IPv4.
4578	Check if the given IP is an IP range.
4579	Check the syntax of the given URL.
4580	Load the configuration.
4581	Print a friendly message.
4582	Check if the given information is a URL, download it if necessary, and update the file location for testing.
4583	Manage the loading of the url system.
4584	Decide if we print or not the header.
4585	Manage the database, autosave and autocontinue systems for file reading.
4586	Manage the case that we want to test only a domain.
4587	Manage the case that we want to test only a given url.
4588	Print the colored logo based on global results.
4589	Format the extracted domain before passing it to the system.
4590	Extract all non-commented lines from the file we are testing.
4591	Manage the case that need to test each domain of a given file path.
4592	Manage the case that we have to test a file.
4593	Switch PyFunceble.CONFIGURATION variables to their opposite.
4594	Get the status while testing for an IP or domain.
4595	Handle the backend of the given status.
4596	Get the structure we are going to work with.
4597	Creates the given directory if it does not exist.
4598	Delete the directories which are not registered into our structure.
4599	Set the paths to the configuration files.
4600	Load .PyFunceble.yaml into the system.
4601	Download the production configuration and install it in the current directory.
4602	Download `iana-domains-db.json` if not present.
4603	Download `public-suffix.json` if not present.
4604	Download the latest version of `dir_structure_production.json`.
4605	Simply merge the older into the new one.
4606	Execute the logic behind the merging.
4607	Convert the versions to a shorter one.
4608	Compare the given versions and return whether local is less than, equal to, or greater than upstream.
4609	Check if the current version of PyFunceble is a cloned version by verifying the existence of specific files and directories.
4610	Handle and check that some configuration index exists.
4611	Return the analytic directory to write depending on the matched status.
4612	Generate unified file using a single table instead of separate tables for each status.
4613	Generate a file according to the domain status.
4614	Check if file production is allowed based on given conditions.

The method evaluates multiple criteria including inactive status, domain status being down or invalid, and whether the current test is in the extracted list to determine if a file should be produced. Returns True if file production is blocked, False otherwise.
4615	Extract the extension from the given line.
4616	Load the public suffix database into the system.
4617	Implement the standard and alphabetical sorting.
4618	Sort a domain hierarchically by reversing its components for proper ordering.
4619	Initiate the IANA database if it is not the case.
4620	Return the referer for the given extension.
4621	Extract the extension from the given block and get its referer.
4622	Update the content of the `iana-domains-db` file.
4623	Search for domain or URL related to the original URL or domain.
4624	Retrieve the mining informations.
4625	Backup the mined informations.
4626	Add the currently mined information to the mined "database".
4627	Remove the currently tested element from the mining data.
4628	Provide the list of mined so they can be added to the list queue.
4629	Process the logic and structuration of the mining database.
4630	Get and return the content of the given log file.
4631	Write the content into the given file.
4632	Logs the WHOIS record if debugging and logging are enabled.
4633	Logs the extracted expiration date and writes it to a log file, with optional API sharing.
4634	Logs the case that the referer was not found.
4635	Print informations about PyFunceble and the date of generation of a file into a given path, if doesn't exist.
4636	Construct header of the table according to template.
4637	Management and creation of templates of header.
4638	Construct the table of data according to given size.
4639	Get the size of each column from the header.
4640	Return colored string based on status conditions.
4641	Management of the json template.
4642	Management and input of data to the table.
4643	Save the current time to the file.
4644	Calculate the difference between starting and ending time.
4645	Format the calculated time into a human readable format.
4646	Return the list of files to delete.
4647	Set the database files to delete.
4648	Delete almost all discovered files.
4649	Get the hash of the given file.
4650	Get hash of the given data.
4651	Return the hash of the given file.
4652	Execute the given command and return its output.
4653	Remove a given key from a given dictionary.
4654	Rename keys in a dictionary with optional strict matching.
4655	Merge the content of to_merge into the given main dictionary.
4656	Save a dictionary into a JSON file.
4657	Save a dictionary into a YAML file.
4658	Fix the path of the given path.
4659	Write or append data into the given file path.
4660	Read a given file path and return its content.
4661	Return a well formatted list. Basically, it's sort a list and remove duplicate.
4662	Merge a list into the main list, either in strict mode (respecting indices) or non-strict mode (without respecting indices), and return the merged result.
4663	Return a list of strings that don't match the given regex.
4664	Used to get exploitable result of re.search
4665	Used to replace a matched string with another.
4666	Count the number of domain for each status.
4667	Calculate the percentage of each status.
4668	Print on screen and on file the percentages for each status.
4669	Check if the given URL is valid and optionally return its base or formatted version.
4670	Check if the given domain is a valid.
4671	Check if the given subdomain is a subdomain.
4672	Execute the logic behind the Syntax handling.
4673	Format the old database format to be compatible with the new format and merge it into the current database.
4674	Return the current content of the inactive-db.json file.
4675	Save the current database into the inactive-db.json file.
4676	Get the timestamp where we are going to save our current list.
4677	Get the content of the database.
4678	Check if the currently tested element is in the database.
4679	Retrieve the data from the database.
4680	Backup the database into its file.
4681	Check if the element is in the database.
4682	Check if the current time is older than the one in the database.
4683	Get the expiration date from the database.
4684	Add the currently tested element into the database.
4685	Set permissions in order to avoid issues before committing.
4686	Logic behind autosave under Travis CI.
4687	Implementation of UNIX nslookup.
4688	Implementation of UNIX whois.
4689	Execute the logic behind the URL handling.
4690	Return the referer aka the WHOIS server of the current domain extension.
4691	Get current object.
This is useful if you want the real object behind the proxy at a time for performance reasons or because you want to pass the object into a different context.
4692	Yield paths to standard modules.
4693	Yield standard module names.
4694	Yield line numbers of unused imports.
4695	Yield line number and module name of unused imports.
4696	Yield line number of star import usage.
4697	Yield line number, undefined name, and its possible origin module.
4698	Yield line numbers of unused variables.
4699	Yield line numbers of duplicate keys.
4700	Return dict mapping the key to list of messages.
4701	Return messages from pyflakes.
4702	Return package name in import statement.
4703	Return True if import spans multiple lines.
4704	Return True if this is part of a multiline statement.
4705	Parse and filter `from something import a, b, c` statements, removing unused imports and returning either the filtered line or `pass` if all imports are unused.
4706	Return line with imports on separate lines.
4707	Yield code with unused imports removed.
4708	Return dictionary that maps line number to message.
4709	Return line with the star import expanded.
4710	Return '' if first occurrence of the key otherwise return `line`.
4711	Return True if `line` is a dict entry that uses `key`.
4712	Return True if value is a literal or a name.
4713	Yield line numbers of unneeded "pass" statements.
4714	Yield code with useless "pass" lines removed.
4715	Return leading whitespace.
4716	Return line ending.
4717	Return code with all filtering run on it.
4718	Return a set of strings from a comma-separated string.
4719	Return True if filename is Python file.
4720	Return True if file matches exclude pattern.
4721	Yield filenames recursively, filtering based on exclude patterns.
4722	Return exit status.

0 means no error.
4723	Read the data encoding the ObtainLease response payload and decode it into its constituent parts.
4724	Write the data encoding the ObtainLease response payload to a stream.
4725	Write the data encoding the Cancel request payload to a stream.
4726	Read the data encoding the Cancel response payload and decode it into its constituent parts.
4727	Returns a Name object, populated with the given value and type.
4728	Read the data encoding the Digest object and decode it into its constituent parts.
4729	Write the data encoding the Digest object to a stream.
4730	Construct a Digest object from provided digest values.
4731	Read the data encoding the ApplicationSpecificInformation object and decode it into its constituent parts.
4732	Write the data encoding the ApplicationSpecificInformation object to a stream.
4733	Construct an ApplicationSpecificInformation object from provided data and namespace values.
4734	Read the data encoding the DerivationParameters struct and decode it into its constituent parts.
4735	Write the data encoding the DerivationParameters struct to a stream.
4736	Read the data encoding the Get request payload and decode it into its constituent parts.
4737	Write the data encoding the Get request payload to a stream.
4738	Read the data encoding the Get response payload and decode it into its constituent parts.
4739	Write the data encoding the Get response payload to a stream.
4740	Read the data encoding the SignatureVerify request payload and decode it into its constituent parts.
4741	Write the data encoding the SignatureVerify request payload to a stream.
4742	Read the data encoding the SignatureVerify response payload and decode it into its constituent parts.
4743	Process a KMIP request message.
4744	Build a simple ResponseMessage with a single error result.
4745	Given a kmip.core TemplateAttribute object, extract the attribute value data into a usable dictionary format.
4746	Given a kmip.pie object and a list of attribute names, attempt to get all of the existing attribute values from the object.
4747	Get the attribute value from the kmip.pie managed object.
4748	Given a kmip.pie object and a dictionary of attributes, attempt to set the attribute values on the object.
4749	Set the attribute value on the kmip.pie managed object.
4750	Determine if object access is allowed for the provided policy and session settings.
4751	Write the data encoding the Decrypt request payload to a stream.
4752	Create a secret object of the specified type with the given value.
4753	Set a specific setting value.
4754	Load configuration settings from the specified file path.
4755	Returns the integer value of the usage mask bitmask. This value is stored in the database.
4756	Returns a new list of enums.CryptographicUsageMask Enums by converting the integer value into a list of enums.
4757	Read the encoding of the LongInteger from the input stream.
4758	Write the encoding of the LongInteger to the output stream.
4759	Verify that the value of the LongInteger is valid.
4760	Read the encoding of the BigInteger from the input stream.
4761	Write the encoding of the BigInteger to the output stream.
4762	Verify that the value of the BigInteger is valid.
4763	Verify that the value of the Enumeration is valid.
4764	Read the value of the Boolean object from the input stream.
4765	Write the value of the Boolean object to the output stream.
4766	Write the encoding of the Boolean object to the output stream.
4767	Verify that the value of the Boolean object is valid.
4768	Read the encoding of the Interval from the input stream.
4769	Verify that the value of the Interval is valid.
4770	Retrieve all relevant key wrapping data fields and return them as a dictionary.
4771	Set the key wrapping data attributes using a dictionary.
4772	Verify that the contents of the PublicKey object are valid.
4773	Verify that the contents of the SecretData object are valid.
4774	Verify that the contents of the OpaqueObject are valid.
4775	Convert an attribute name string into the corresponding attribute tag enumeration value.
4776	Convert an attribute tag enumeration value into its corresponding attribute name string.
4777	A utility function that computes a bit mask from a collection of enumeration values.
4778	A utility function that creates a list of enumeration values from a bit mask for a specific mask enumeration class.
4779	A utility function that checks if the provided value is a composite bit mask of enumeration values in the specified enumeration class.
4780	Read the data encoding the CreateKeyPair request payload and decode it into its constituent parts.
4781	Write the data encoding the CreateKeyPair request payload to a buffer.
4782	Read the data encoding the CreateKeyPair response payload and decode it into its constituent parts.
4783	Write the data encoding the CreateKeyPair response payload to a buffer.
4784	Read the data encoding the GetAttributeList request payload and decode it into its constituent parts.
4785	Write the data encoding the GetAttributeList request payload to a stream.
4786	Read the data encoding the GetAttributeList response payload and decode it into its constituent parts.
4787	Write the data encoding the GetAttributeList response payload to a stream.
4788	Scan the provided policy directory for all JSON policy files.
4789	Scan the policy directory for policy data and update policy files, timestamps, and policy mappings accordingly.
4790	Start monitoring operation policy files.
4791	Extract an X.509 certificate from a socket connection.
4792	Given an X.509 certificate, extract and return the extendedKeyUsage extension.
4793	Given an X.509 certificate, extract and return all common names.
4794	Given an X.509 certificate, extract and return the client identity.
4795	Read the data encoding the Create request payload and decode it into its constituent parts.
4796	Write the data encoding the Create request payload to a buffer.
4797	Read the data encoding the Create response payload and decode it into its constituent parts.
4798	Write the data encoding the Create response payload to a buffer.
4799	Convert a Pie object into a core secret object and vice versa.
4800	Read the data encoding the Encrypt response payload and decode it into its constituent parts.
4801	Read the data encoding the DeriveKey request payload and decode it into its constituent parts.
4802	Write the data encoding the DeriveKey request payload to a stream.
4803	Check if the attribute is supported by the current KMIP version.
4804	Check if the attribute is deprecated by the current KMIP version.
4805	Check if the attribute is supported by the given object type.
4806	Check if the attribute is allowed to have multiple instances.
4807	Returns a value that can be used as a parameter in client or server, checking direct value, config file, and default value in that order.
4808	Read the data encoding the Check response payload and decode it into its constituent parts.
4809	Write the data encoding the Check response payload to a stream.
4810	Read the data stream and decode the AttributeReference structure into its parts.
4811	Write the AttributeReference structure encoding to the data stream.
4812	Read the data stream and decode the Attributes structure into its parts.
4813	Write the Attributes structure encoding to the data stream.
4814	Read the data encoding the Nonce struct and decode it into its constituent parts.
4815	Write the data encoding the Nonce struct to a stream.
4816	Read the data encoding the UsernamePasswordCredential struct and decode it into its constituent parts.
4817	Write the data encoding the UsernamePasswordCredential struct to a stream.
4818	Read the data encoding the DeviceCredential struct and decode it into its constituent parts.
4819	Write the data encoding the DeviceCredential struct to a stream.
4820	Read the data encoding the Credential struct and decode it into its constituent parts.
4821	Write the data encoding the Credential struct to a stream.
4822	Read the data encoding the MACSignatureKeyInformation struct and decode it into its constituent parts.
4823	Write the data encoding the MACSignatureKeyInformation struct to a stream.
4824	Read the data encoding the KeyWrappingData struct and decode it into its constituent parts.
4825	Write the data encoding the KeyWrappingData struct to a stream.
4826	Read the data encoding the KeyWrappingSpecification struct and decode it into its constituent parts.
4827	Write the data encoding the KeyWrappingSpecification struct to a stream.
4828	Read the data encoding the ExtensionInformation object and decode it into its constituent parts.
4829	Write the data encoding the ExtensionInformation object to a stream.
4830	Construct an ExtensionInformation object from provided extension values.
4831	Read the data encoding the RevocationReason object and decode it into its constituent parts.
4832	Write the data encoding the RevocationReason object to a stream.
4833	Validate the RevocationReason object.
4834	Read the data encoding the ObjectDefaults structure and decode it into its constituent parts.
4835	Write the ObjectDefaults structure encoding to the data stream.
4836	Read the data encoding the DefaultsInformation structure and decode it into its constituent parts.
4837	Write the DefaultsInformation structure encoding to the data stream.
4838	Read the data encoding the RNGParameters structure and decode it into its constituent parts.
4839	Write the RNGParameters structure encoding to the data stream.
4840	Read the data encoding the ProfileInformation structure and decode it into its constituent parts.
4841	Write the ProfileInformation structure encoding to the data stream.
4842	Write the ValidationInformation structure encoding to the data stream.
4843	Read the data encoding the CapabilityInformation structure and decode it into its constituent parts.
4844	Write the CapabilityInformation structure encoding to the data stream.
4845	Stop the server.

Halt server client connections and clean up any existing connection threads.
4846	Serve client connections.

Begin listening for client connections, spinning off new KmipSessions as connections are handled. Set up signal handling to shutdown connection service as needed.
4847	Read the data encoding the Locate request payload and decode it into its constituent parts.
4848	Write the data encoding the Locate request payload to a buffer.
4849	Read the data encoding the Locate response payload and decode it into its constituent parts.
4850	Write the data encoding the Locate response payload to a buffer.
4851	Create a symmetric key with the specified algorithm and length.
4852	Create an asymmetric key pair.
4853	Generate message authentication code.
4854	Encrypt data using symmetric or asymmetric encryption.
4855	Encrypt data using symmetric encryption.
4856	Encrypt data using asymmetric encryption.
4857	Decrypt data using asymmetric decryption.
4858	Create an RSA key pair with specified length and public exponent, returning dictionaries containing the public and private key data.
4859	Derive key data using a variety of key derivation functions.
4860	Instantiates an RSA key from bytes.
4861	Verify a message signature.
4862	Read the data encoding the Sign response payload and decode it.
4863	Write the data encoding the Sign response to a stream.
4864	Read the data encoding the GetUsageAllocation request payload and decode it into its constituent parts.
4865	Convert a ProtocolVersion struct to its KMIPVersion enumeration equivalent.
4866	Read the data encoding the ProtocolVersion struct and decode it into its constituent parts.
4867	Write the data encoding the ProtocolVersion struct to a stream.
4868	Read the data encoding the Authentication struct and decode it into its constituent parts.
4869	Write the data encoding the Authentication struct to a stream.
4870	Read the data encoding the Poll request payload and decode it into its constituent parts.
4871	Read the data encoding the Certificate object and decode it into its constituent parts.
4872	Write the data encoding the Certificate object to a stream.
4873	Query the configured SLUGS service with the provided credentials.
4874	Read the data encoding the Archive response payload and decode it into its constituent parts.
4875	Write the data encoding the Archive response payload to a stream.
4876	Manage the client connection and run the message handling loop in a separate thread.
4877	Read the data encoding the Rekey response payload and decode it into its constituent parts.
4878	Check if a profile is supported by the client.
4879	Derive a new key or secret data from an existing managed object.
4880	Send a GetAttributes request to the server and return the results.
4881	Send a GetAttributeList request to the server and return the results.
4882	Send a Query request to the server.
4883	Sign specified data using a specified signing key.
4884	Open the client connection.
4885	Close the client connection.
4886	Create a symmetric key on a KMIP appliance.
4887	Create an asymmetric key pair on a KMIP appliance.
4888	Register a managed object with a KMIP appliance.
4889	Rekey an existing key.
4890	Derive a new key or secret data from existing managed objects.
4891	Search for managed objects based on specified attributes and return their unique identifiers.
4892	Check the constraints for a managed object.
4893	Get a managed object from a KMIP appliance.
4894	Get the attributes associated with a managed object.
4895	Activate a managed object stored by a KMIP appliance.
4896	Revoke a managed object stored by a KMIP appliance.
4897	Get the message authentication code for data.
4898	Build a CryptographicParameters struct from a dictionary.
4899	Build an EncryptionKeyInformation struct from a dictionary.
4900	Build a MACSignatureKeyInformation struct from a dictionary.
4901	Build a KeyWrappingSpecification struct from a dictionary.
4902	Build a list of common attributes that are shared across symmetric as well as asymmetric objects.
4903	Build a name attribute, returned in a list for ease of use in the caller.
4904	Read the data encoding the QueryRequestPayload object and decode it into its constituent parts.
4905	Write the data encoding the QueryRequestPayload object to a stream.
4906	Write the data encoding the QueryResponsePayload object to a stream.
4907	Read the data encoding the GetAttributes response payload and decode it into its constituent parts.
4908	Write the data encoding the GetAttributes response payload to a stream.
4909	Find a single entry point.

Returns an EntryPoint object, or raises NoSuchEntryPoint if no match is found.
4910	Find a group of entry points with unique names.
4911	Find all entry points in a group.
4912	Load the object to which this entry point refers.
4913	Parse an entry point from the syntax in entry_points.txt
4914	Run livereload server
4915	Generate a new project by copying and rewriting template files to a destination directory.
4916	Generate controller, include the controller file, template & css & js directories.
4917	Generate action.
4918	Generate form.
4919	Generate model.
4920	Generate a macro with HTML, CSS, and JS files in the specified category or default location.
4921	Create directory and all intermediate directories, similar to mkdir -p command.
4922	Replace variables and copy file.
4923	Friendly time gap
4924	Check url schema.
4925	Encode something with SECRET_KEY.
4926	Decode something with SECRET_KEY.
4927	JSON decorator.
4928	Generate absolute URL for a given endpoint.
4929	Load config based on environment mode, falling back to default config if import fails.
4930	Sign in user.
4931	Get current user.
4932	Create Flask app with configured middleware, extensions, and components.
4933	Register jinja filters, vars, and functions.
4934	Register routes.
4935	Register HTTP error pages.
4936	Register hooks.
4937	Serialize the dataframe to CSV format with specified delimiter and header options.
4938	Returns csv data as a pandas Dataframe object
4939	Serialize a dataframe.
4940	Deserialize a dataframe from a file-like object using the specified serialization format and return a pandas DataFrame.
4941	Serialize the specified DataFrame and replace the existing dataset.
4942	Upload already serialized raw data and replace the existing dataset.
4943	Full URL to the dataset contents.
4944	Serialize the specified DataFrame and upload it as a new dataset.
4945	Upload already serialized raw data as a new dataset.
4946	Open and return a stream for the dataset contents.
4947	Read and return the dataset contents as binary.
4948	Read and return the dataset contents as text.
4949	Read and return the dataset contents as a pandas DataFrame.
4950	Get an intermediate dataset.
4951	Runs HTTP GET request to retrieve the list of experiments.
4952	Runs HTTP GET request to retrieve the list of datasets.
4953	Runs HTTP GET request to retrieve a single dataset.
4954	Publishes a callable function or decorates a function to be published. Returns a callable, iterable object that invokes the published service when called and provides API URL, API key, and API help URL when iterated.
4955	Marks a function as having been published and causes all invocations to go to the remote operationalized service.
4956	Specifies the types used for the arguments of a published service.
4957	Specifies the return type for a published service.
4958	Attaches a file to the payload to be uploaded.
4959	Walks the byte code to find the variables which are actually globals.
4960	Create a copy of this pen.
4961	Return RGBA values of color c

The function takes a color string and returns its RGBA values. It supports both X11 colors (parsed using Gdk.color_parse) and brewer color schemes (split by '/' to extract scheme and index). If the color is not recognized, it writes a warning and returns None.
4962	Draw this shape with the given cairo context.
4963	Find extremas of a cubic bernstein polynomial by evaluating its derivative.
4964	Evaluate cubic Bernstein polynomial using de Casteljau's algorithm.
4965	Build choices list runtime using 'sitetree_tree' tag
4966	Compatibility function to get rid of optparse in management commands after Django 1.10.
4967	Registers a hook callable to process tree items right before they are passed to templates.
4968	Returns a structure describing a dynamic sitetree.
4969	Initializes local cache from Django cache.
4970	Empties cached sitetree data.
4971	Returns cache entry parameter value by its name.
4972	Updates cache entry parameter with new data.
4973	Replace entire cache entry parameter data by its name with new data.
4974	Initializes sitetree to handle new request.
4975	Resolves internationalized tree alias by checking for language-specific sitetree and returning appropriate alias.
4976	Returns boolean whether current application is Admin contrib.
4977	Calculates depth of the item in the tree.
4978	Resolves current tree item of 'tree_alias' tree matching current request path against URL of given tree item.
4979	Resolves item's URL by processing URL patterns or simple URLs and returns the resolved URL string.
4980	Initializes sitetree in memory and returns resolved tree alias and items on success, or (None, None) on fail.
4981	Returns an arbitrary attribute of a sitetree item resolved as current for current page.
4982	Returns ancestor of specified depth recursively.
4983	Builds and returns menu structure for 'sitetree_menu' tag.
4984	Checks whether a current user has an access to a certain item.
4985	Builds and returns breadcrumb trail structure for 'sitetree_breadcrumbs' tag.
4986	Builds and returns tree structure for 'sitetree_tree' tag.
4987	Builds and returns site tree item children structure for 'sitetree_children' tag.
4988	Returns item's children.
4989	Updates 'has_children' attribute for tree items inplace.
4990	Filters sitetree item's children if hidden and by navigation type.
4991	Climbs up the site tree to resolve root item for chosen one.
4992	Climbs up the site tree to mark items of current branch.
4993	Resolves name as a variable in a given context.
4994	Parses sitetree tag parameters and renders tree for specified site tree using optional custom template.
4995	Parses sitetree_children tag parameters.
4996	Parses sitetree_breadcrumbs tag parameters.
4997	Parses sitetree_menu tag parameters.
4998	Render helper used by template node functions to render given template with given tree items in context.
4999	Node constructor to be used in tags.
5000	Returns a URL for a given Tree admin page type.
5001	Forces unregistration of tree admin class with following re-registration.
5002	Fixes Admin contrib redirects compatibility problems introduced in Django 1.4 by url handling changes.
5003	Generic redirect for item editor.
5004	Redirects to the appropriate items' 'continue' page on item add.
5005	Redirects to the appropriate items' 'add' page on item change.
5006	Returns modified form for TreeItem model with custom parent field and URL pattern hints.
5007	Fetches Tree for current or given TreeItem.
5008	Moves item up or down by swapping 'sort_order' field values of neighboring items.
5009	Saves TreeItem model under certain Tree and handles item's parent assignment exception.
5010	Manages TreeAdmin and TreeItemAdmin URLs.
5011	Dumps sitetrees with items using django-smuggler.
5012	Dynamically creates and returns a sitetree.
5013	Dynamically creates and returns a sitetree item object.
5014	Imports sitetree module from a given app.
5015	Returns a certain sitetree model as defined in the project settings.
5016	Create a configuration from a mapping.
5017	Create a configuration from a Python file.
5018	Load the configuration values from a TOML formatted file.
5019	Create a configuration from a Python object.
5020	Creates a set of zipkin attributes for a span.
5021	Generate the headers for a new zipkin span.
5022	Returns the current ZipkinAttrs and generates new ones if needed.
5023	Enter the new span context. All annotations logged inside this context will be attributed to this span. All new spans generated inside this context will have this span as their parent.
5024	Exit the span context.
5025	Updates the binary annotations for the current span.
5026	Adds a 'sa' binary annotation to the current span.
5027	Overrides the current span name.
5028	Creates a new Endpoint object.
5029	Creates a copy of a given endpoint with a new service name.
5030	Builds and returns a V1 Span.
5031	Encode list of protobuf Spans to binary.
5032	Converts a py_zipkin Span into a protobuf Span.
5033	Encodes hexadecimal ids to big-endian binary.
5034	Converts py_zipkin's Kind to Protobuf's Kind.
5035	Converts py_zipkin's Endpoint to Protobuf's Endpoint.
5036	Converts py_zipkin's annotations dict to protobuf.
5037	Create a zipkin annotation object.
5038	Create a zipkin binary annotation object.
5039	Create a zipkin Endpoint object.
5040	Copies a zipkin endpoint with a new service name.
5041	Reformat annotations dict to return list of corresponding zipkin_core objects.
5042	Reformat binary annotations dict to return list of zipkin_core objects.
5043	Takes a bunch of span attributes and returns a thriftpy2 representation of the span.
5044	Returns a TBinaryProtocol encoded Thrift span.
5045	Returns a TBinaryProtocol encoded list of Thrift objects.
5046	Returns the span type and encoding for the message provided.
5047	Converts encoded spans to a different encoding.
5048	Stores the zipkin attributes to thread local.
5049	Encodes the current span to thrift.
5050	Converts an Endpoint to a JSON endpoint dict.
5051	Encodes a single span to protobuf.
5052	Decodes an encoded list of spans.
5053	Accepts a thrift decoded endpoint and converts it to an Endpoint.
5054	Convert thrift annotations to v1 annotations.
5055	Accepts a thrift decoded binary annotation and converts it to a v1 binary annotation.
5056	Decodes a thrift span into a Span object with all its attributes converted and processed.
5057	Converts a trace ID hex value with optional high bits to a string.
5058	Converts the provided unsigned long value to a hex string.
5059	Writes an unsigned long value across a byte array.
5060	Replace illegal February 29, 30 dates with the last day of February.
5061	Set the transaction code for mBank transactions by extracting it from the tag dictionary and adding it to the transaction code field.
5062	Add IPH ID to tag dictionary for mBank transactions processing.
5063	Set the TNR (transaction number) for mBank transactions by extracting it from transaction details.
5064	Parses MT940 data and returns a list of Transaction objects.
5065	Parses mt940 data and returns transactions object
5066	Join strings together and strip whitespace in between if needed
5067	Turns response into a properly formatted json or text object
5068	Handles the message shown when we are ratelimited.
5069	Handles API requests with rate limiting and error handling.
5070	Gets the information of the given Bot ID.
5071	Gets an object of bots on DBL
5072	Read incoming message.
5073	Write outgoing message.
5074	Close port.
5075	Decode Erlang external term.
5076	Encode Erlang external term with optional compression.
5077	Add a source address for multicast communication.
5078	Method that sends pending messages, sleeping briefly if queue is empty.
5079	Set callback for remote service Hello messages with optional type and scope filtering.
5080	Clean up and stop the discovery server.
5081	Send Bye messages for the services and remove them.
5082	Search for services given the TYPES and SCOPES in a given TIMEOUT.
5083	Construct a raw SOAP XML string, given a prepared SoapEnvelope object.
5084	Discover systems using WS-Discovery.
5085	Return the manager that handles the relation from this instance to the tagged_item class.
5086	Return a list of RelatedObject records for child relations of the given model, including ones attached to ancestors of the model.
5087	Return a list of ParentalManyToManyFields on the given model, including ones attached to ancestors of the model.
5088	Save the model and commit all child relations.
5089	Build an instance of this model from a JSON-like structure, recursively processing related objects and handling foreign key references.
5090	This clean method will check for unique_together condition
5091	Return True if data differs from initial.
5092	Returns the address with a valid checksum attached.
5093	Generates the correct checksum for this address.
5094	Parses arguments for the command and returns a dictionary of parsed arguments with API configuration.
5095	Returns the argument parser that will be used to interpret arguments and options from argv.
5096	Prompts the user to enter their seed via stdin.
5097	Returns whether a sequence of signature fragments is valid.
5098	Generates a single key with specified index and iterations.
5099	Generates the key associated with the specified address.
5100	Creates a generator that can be used to progressively generate new keys.
5101	Prepares the hash sponge for the generator.
5102	Absorb trits into the sponge.
5103	Squeeze trits from the sponge.
5104	Transforms internal state by applying a series of transformations based on a truth table and state transitions.
5105	Generates one or more key digests from the seed.
5106	Generates one or more private keys from the seed.
5107	Prepares a bundle that authorizes the spending of IOTAs from a multisig address.
5108	Adds two sequences of trits together.
5109	Returns a trit representation of an integer value.
5110	Adds two individual trits together.
5111	Adds two trits together, with support for a carry trit.
5112	Outputs the user's seed to stdout, along with security warnings and prompts.
5113	Find transactions that match the specified input parameters and return the results.
5114	Gets all possible inputs of a seed and returns them, along with the total balance.
5115	Generates one or more new addresses from the seed.
5116	Returns all transfers associated with the seed.
5117	Promotes a transaction by adding spam on top of it.
5118	Takes a tail transaction hash, gets the associated bundle, and replays it by attaching to the Tangle.
5119	Prepares a set of transfers, creates the bundle, attaches it to the Tangle, and broadcasts and stores the transactions.
5120	Attaches transaction trytes to the Tangle, then broadcasts and stores them.
5121	Given a URI, returns a properly-configured adapter instance.
5122	Sends an API request to the node.
5123	Sends a message to the instance's logger, if configured.
5124	Sends the actual HTTP request.

The method handles sending HTTP requests with optional authentication, timeout settings, and logging of request/response details. It supports both GET and POST methods and is designed to be mockable for unit testing purposes. The method logs both the outgoing request and incoming response for debugging and monitoring.
5125	Interprets the HTTP response from the node and validates it against expected status codes, raising appropriate exceptions for malformed or unexpected responses.
5126	Sets the response that the adapter will return for the specified command.
5127	Absorbs a digest into the sponge.
5128	Returns the new multisig address.
5129	Creates an iterator that can be used to progressively generate new addresses.
5130	Generates an address from a private key digest.
5131	Generates a new address for cache miss events.
5132	Finds transactions matching the specified criteria, fetches the corresponding trytes and converts them into Transaction objects.
5133	Scans the Tangle for used addresses.
5134	Given a set of transaction hashes, returns the corresponding bundles, sorted by tail transaction timestamp.
5135	Determines which codec to use for the specified encoding.
5136	Returns information used by the codecs library to configure the codec for use.
5137	Encodes a byte string into trytes.
5138	Decodes a tryte string into bytes.
5139	Find addresses matching the command parameters.
5140	Adds a route to the wrapper.
5141	Creates a Transaction object from a sequence of trytes.
5142	Returns a JSON-compatible representation of the object.
5143	Returns the values needed to validate the transaction's signature_message_fragment value.
5144	Sets the ``is_confirmed`` status for the bundle and updates all transactions within the bundle.
5145	Attempts to decipher encoded messages from the transactions in the bundle.
5146	Returns TryteString representations of the transactions in this bundle.
5147	Groups transactions in the bundle by address.
5148	Automatically discover commands in the specified package.
5149	Sends the request object to the adapter and returns the response.
5150	Applies a filter to a value and raises an exception with contextual information if the value fails the filter.
5151	Returns the URL to check job status.
5152	Returns all errors found with the bundle.
5153	Returns whether the bundle is valid.
5154	Creates a generator that validates bundle transactions by checking indices, balance, and signatures.
5155	Validates the signature fragments in the bundle and returns a list of error messages.
5156	Validates the signature fragments for a group of transactions using the specified sponge type and returns an error message if invalid.
5157	Recursively traverse the Tangle, collecting transactions until we hit a new bundle.
5158	Starts the REPL (Read-Eval-Print Loop) for the IOTA API client.
5159	Generates a random seed using a CSPRNG.
5160	Generates the digest used to do the actual signing.
5161	Signs the inputs starting at the specified index in a bundle.
5162	Makes JSON-serializable objects play nice with IPython's default pretty-printer.
5163	Absorb trits into the sponge from a buffer.
5164	Squeeze trits from the sponge into a buffer.
5165	Attaches a context value to an Exception.
5166	Generates a filter chain for validating a security level.
5167	Increments the transaction's legacy tag to fix insecure bundle hashes when finalizing a bundle.
5168	Determines the most relevant tag for the bundle.
5169	Adds a transaction to the bundle, automatically splitting long messages into multiple transactions.
5170	Finalizes the bundle, preparing it to be attached to the Tangle.
5171	Sign inputs in a finalized bundle.
5172	Signs the input at the specified index using the provided private key.
5173	Creates transactions for the specified input address, including a main transaction that spends the entire balance and additional meta transactions for signatures based on the address security level.
5174	Converts between any two standard units of iota.
5175	Recovers x and y coordinates from the compressed point.
5176	Extended euclidean algorithm to find modular inverses for integers
5177	Load a lexicon from a JSON file.
5178	Given a string and a category, finds and combines words into groups based on their proximity.
5179	Given a word and a dictionary of synonyms, returns the 'preferred' word. Case insensitive.
5180	Parse a piece of text and replace any abbreviations with their full word equivalents using the lexicon.abbreviations dictionary.
5181	Split a description into parts, each of which can be turned into a single component.
5182	Lists the categories in the lexicon, except the optional categories.
5183	Returns a minimal Decor with a random colour.
5184	Make a simple plot of the Decor.
5185	Generate a default legend based on the specified name.
5186	Generate a default timescale legend from predefined names.
5187	Generate a random legend for a given list of components.
5188	A slightly easier way to make legends from images.
5189	Read CSV text and generate a Legend.
5190	Renders a legend as a CSV string.
5191	The maximum width of all the Decors in the Legend.
5192	Get the decor for a component.
5193	Get the attribute of a component.
5194	Get the component corresponding to a display colour, with optional tolerance-based matching and default fallback.
5195	Make a simple plot of the legend.
5196	Generate a Component from a text string, using a Lexicon.
5197	Given a format string, return a summary description of a component.
5198	Graceful deprecation for old class name.
5199	Process a single row from the file.
5200	Read all the rows and return a dict of the results.
5201	Check if striplog is monotonically increasing in depth.
5202	Property. Summarize a Striplog with some statistics.
5203	Private method to convert a sequence of tops into a list of intervals for striplog construction.
5204	Private function. Make sure we have what we need to make a striplog.
5205	Makes a striplog from a Petrel text file.
5206	Private function. Takes a data dictionary and reconstructs a list of Intervals from it.
5207	Load data from a CSV file or text string into a structured format.
5208	Read an image and generate Striplog.
5209	Turn a 1D array into a striplog, given a cutoff.
5210	Turn LAS3 'lithology' section into a Striplog.
5211	Eat a Canstrat DAT file and make a striplog.
5212	Returns a shallow copy.
5213	Returns a CSV string built from the summaries of the Intervals.
5214	Returns an LAS 3.0 section string.
5215	Plot rectangles on a matplotlib axis with optional coloring and width adjustments.
5216	Get data from the striplog.
5217	Extract a log into the components of a striplog.
5218	Look for a regex expression in the descriptions of the striplog.
5219	Find overlaps in a striplog.
5220	Finds gaps in a striplog and returns a striplog of all the gaps.
5221	Remove intervals below a certain limit thickness. In place.
5222	Fill in empty intervals by growing from top and base.
5223	Fill gaps with the component provided.
5224	Makes a striplog of all unions.
5225	Makes a striplog of all intersections.
5226	Merges overlapping intervals in a striplog by combining overlapping Intervals and operating on the striplog in place.
5227	Plots a histogram and returns the data for it.
5228	Inverts the striplog, changing its order and the order of its contents.
5229	Crop to a new depth range.
5230	Run a series of tests and return the corresponding results.
5231	Convert hex to a color name, using matplotlib's colour names.
5232	Get a log-like stream of RGB values from an image.
5233	Return an underscore if the attribute is absent.
5234	Lists all the jobs registered with Nomad.
5235	Parse a HCL Job file and return a dict with the JSON formatted job.
5236	Update token.

### Summary:
Update a token by sending a POST request to the specified endpoint with the given token data. Returns the JSON response from the server. Raises exceptions for base Nomad API errors or URL not found errors.
5237	Lists all the allocations.
5238	Mark a deployment as failed and trigger scheduler to stop creating allocations or cause a rollback.
5239	Pause or unpause a deployment.
5240	Set the health of allocations in a deployment manually.
5241	Toggle the drain mode of the node.
5242	Toggle the drain mode of a node, enabling or disabling allocation assignment and migration.
5243	Toggle the eligibility of the node.
5244	List files in an allocation directory.
5245	Stream the contents of a file in an allocation directory.
5246	Stat a file in an allocation directory.
5247	Initiate a join between the agent and target peers.
5248	Updates the list of known servers to the provided list.
5249	Force a failed gossip member into the left state.
5250	Lists all the client nodes registered with Nomad.
5251	Lists all the evaluations.
5252	Lists all the namespaces registered with Nomad.
5253	Register a new job or update an existing job.
5254	Invoke a dry-run of the scheduler for the job.
5255	Dispatches a new instance of a parameterized job.
5256	Revert a job to an older version.
5257	Set the job's stability.
5258	Deregisters a job and stops all allocations part of it.
5259	Query the status of a client node registered with Nomad.
5260	Remove the Nomad server with given address from the Raft configuration.
5261	List all deployments with optional prefix filtering.
5262	Get a random mutator from a list of mutators.
5263	Get a random mutator for the given type.
5264	Return a polyglot attack containing the original object.
5265	Perform the fuzzing
5266	Safely return an unicode encoded string
5267	Start the servers
5268	Kill the servers
5269	Serve custom HTML page.
5270	Serve fuzzed JSON object
5271	Generic fuzz mutator, use a decorator for the given type
5272	Spawn a new process using subprocess.
5273	Try to get output in a separate thread
5274	Wait until we got output or until timeout is over
5275	Terminate the newly created process
5276	Parse the command line and start PyJFuzz
5277	Perform the actual external fuzzing.
5278	Decorator used to change the return value from PJFFactory.fuzzed, it makes the structure printable
5279	Build the String instance.
5280	Build the ``And`` instance
5281	Build the ``Quote`` instance.
5282	Build the ``Or`` instance.
5283	Build the current ``Opt`` instance.
5284	Build the ``Ref`` instance by fetching the rule from the GramFuzzer instance and building it.
5285	Build the STAR field.
5286	Shutdown the running process and the monitor.
5287	Run command once and check exit code
5288	Run command in a loop and check exit status plus restart process when needed.
5289	Return a random float.
5290	Add a new rule definition to the specified category.
5291	Associate the provided rule definition name with the category group in the category.
5292	Generate ``num`` rules from category ``cat`` with optional preferred category groups.
5293	Fuzz all elements inside the object.
5294	Get a printable fuzzed object.
5295	Return the fuzzed object.
5296	Mutate a generic object based on type
5297	Handle termination signal by stopping the ioloop, with specific behavior based on the current state (WAITING, RUNNING, or PAUSED).
5298	Kills the child process and exits.
5299	Pause the running child process or set the state to paused.
5300	Sets state to waiting so we resume spawning children.
5301	Stops the running child process if it's running, killing it and setting the state to PAUSED.
5302	Restart the subprocess by killing it and setting state to RESTARTING.
5303	Retrieve a list of events since the last poll.
5304	Update the activity message for the current user.
5305	Update the profile picture for the current user.
5306	Retrieve various metadata associated with a URL, as seen by Skype.
5307	Retrieve all details for a specific contact, including fields such as birthday and mood.
5308	Retrieve public information about a user.
5309	Retrieve a list of all known bots.
5310	Retrieve a single bot by UUID or username.
5311	Search the Skype Directory for a user.
5312	Retrieve any pending contact requests.
5313	Create a new instance based on the raw properties of an API response.
5314	Copy properties from other into self, skipping None values, and merge raw data.
5315	Add a given object to the cache, or update an existing entry to include more fields.
5316	Follow and track sync state URLs provided by an API endpoint, in order to implicitly handle pagination.
5317	Attempt to re-establish a connection using previously acquired tokens.
5318	Store details of the current connection in the named file.
5319	Ensure the authentication token for the given auth method is still valid.
5320	Refresh the Skype token to extend its expiry time.
5321	Ask Skype for the authenticated user's identifier, and store it on the connection object.
5322	Acquire a new registration token.
5323	Retrieve all current endpoints for the connected user.
5324	Query a username or email address to see if a corresponding Microsoft account exists.
5325	Take an existing Skype token and refresh it, to extend the expiry time without other credentials.
5326	Request a new registration token using a current Skype token.
5327	Configure this endpoint to allow setting presence.
5328	Send a keep-alive request for the endpoint.
5329	Retrieve a selection of conversations with the most recent activity, and store them in the cache.
5330	Get a single conversation by identifier.
5331	Create a new group chat with the given users.
5332	Extract the username from a contact URL.
5333	Extract the conversation ID from a conversation URL.
5334	Repeatedly call a function until false-y, yielding each item in turn.
5335	Return unicode text, no matter what
5336	Figure out which handler to use based on metadata and return a handler instance or None.
5337	Parse text with frontmatter, return metadata and content.
5338	Post as a dict, for serializing
5339	Parse YAML front matter using SafeLoader by default.
5340	Export metadata as YAML using yaml.SafeDumper by default.
5341	Turn metadata into JSON
5342	Return the match object for the current list.
5343	Return items as a list of strings.
5344	Return the Lists inside the item with the given index.
5345	Convert to another list type by replacing starting pattern.
5346	Parse template content and create self.name and self.arguments.
5347	Return the lists in all arguments.
5348	Create a Trie out of a list of words and return an atomic regex pattern.
5349	Convert a trie to a regex pattern.
5350	Return adjusted start and stop index as tuple.
5351	Insert the given string before the specified index.
5352	Partition self.string where `char`'s not in atomic sub-spans.
5353	Return all the sub-span including self._span.
5354	Update self._type_to_spans according to the removed span.
5355	Update self._type_to_spans according to the added length.
5356	Return the nesting level of self.
5357	Return a copy of self.string with specific sub-spans replaced by spaces or underscores.
5358	Replace invalid characters in external link shadow with b'_' or spaces based on type.
5359	Create the arguments for the parse function used in pformat method.
5360	Deprecated, use self.pformat instead.
5361	Return a list of parameter objects.
5362	Return a list of parser function objects.
5363	Return a list of templates as template objects.
5364	Return a list of wikilink objects.
5365	Return a list of comment objects.
5366	Return a list of found external link objects.
5367	Return a list of section in current wikitext.
5368	Return a list of found table objects.
5369	Return a list of WikiList objects.
5370	Return all tags with the given name.
5371	Yield all the sub-span indices excluding self._span.
5372	Return the ancestors of the current node.
5373	Return the parent node of the current object.
5374	Return the most common item in the list.
5375	Return the first argument in the args that has the given name.
5376	Return normal form of self.name.
5377	Eliminate duplicate arguments by removing the first occurrences.
5378	Remove duplicate arguments in a safe manner.
5379	Set the value for `name` argument. Add it if it doesn't exist.
5380	Return the last argument with the given name.
5381	Return true if there is an arg named `name`.
5382	Delete all arguments with the given name.
5383	Lookup CRS code on spatialreference.org and return in specified format.
5384	Search for an ellipsoid name in this module.
5385	Returns the CRS object from a string interpreted as a specified format, located at a given URL site.
5386	Returns the crs object from a file, with the format determined from the filename extension.
5387	Load CRS object from EPSG code via spatialreference.org.
5388	Load crs object from esri code via spatialreference.org and parse based on proj4 representation.
5389	Load CRS object from SR-ORG code by parsing its proj4 representation.
5390	Detect crs string format and parse into crs object with appropriate function.
5391	Write the raw header content to the out stream
5392	Instantiate a RawVLR by reading the content from the data stream.
5393	Gets the 3 GeoTiff vlrs from the vlr_list and parse them into a nicer structure
5394	Parses the GeoTiff VLRs information into nicer structs.
5395	Returns the signedness for the given type index.
5396	Returns the index of the type as defined in the LAS Specification
5397	Construct a new PackedPointRecord from an existing one with the ability to change to a different point format.
5398	Tries to copy the values of the current dimensions from other_record
5399	Appends zeros to the points stored if the value we are trying to fit is bigger
5400	Returns all the dimensions names, including the names of sub_fields and their corresponding packed fields
5401	Creates a new point record with all dimensions initialized to zero
5402	Construct the point record by reading the points from the stream.
5403	Construct the point record by reading and decompressing the points data from the input buffer.
5404	Returns the scaled x positions of the points as doubles.
5405	Returns the scaled y positions of the points as doubles
5406	Returns the scaled z positions of the points as doubles.
5407	Add a new extra dimension to the point record.
5408	Writes the data to a stream, with optional compression support.
5409	Writes the las data into a file.
5410	Writes to a stream or file.
5411	Builds a dictionary mapping point format IDs to numpy dtypes.
5412	Builds the dict mapping point format id to numpy.dtype with unpacked bit fields.
5413	Tries to find a matching point format id for the input numpy dtype.
5414	Returns the minimum file version that supports the given point_format_id.
5415	Returns true if the file version supports the point_format_id.
5416	Returns the list of vlrs of the requested type.
5417	Returns the list of vlrs of the requested type and removes them from the list.
5418	Read vlrs from a stream and parse them if possible.
5419	Returns true if all the files have the same points format id.
5420	Returns true if all the files have the same numpy datatype.
5421	Reads the 4 first bytes of the stream to check that is LASF
5422	Reads the head of the las file and returns it.
5423	Reads and returns the vlrs of the file.
5424	Private function to handle reading of the points record parts of the las file.
5425	Reads the compressed point record.
5426	Reads and returns the waveform VLR header and waveform record.
5427	Reads the EVLRs of the file, will fail if the file version does not support evlrs
5428	Helper function to warn about unknown bytes found in the file
5429	Opens and reads the header of the LAS content from a file or stream.
5430	Entry point for reading las data in pylas.
5431	Creates a File from an existing header, allocating the array of points according to the provided header and returning a LasBase object.
5432	Function to create a new empty las data object
5433	Convert a LAS file from one point format to another, automatically upgrading the file version when necessary.
5434	Merges multiple las files into one.
5435	Writes the given LAS file to memory using BytesIO and reads it again, returning the newly read file. Mostly used for testing purposes without writing to disk.
5436	Returns the creation date stored in the last file.
5437	Returns the date of file creation as a python date object.
5438	Returns the minimum values of x, y, z as a numpy array.
5439	Sets the minimum values of x, y, z as a numpy array.
5440	Returns the maximum values of x, y, z as a numpy array.
5441	Sets the maximum values of x, y, z as a numpy array.
5442	Returns the scaling values of x, y, z as a numpy array
5443	Returns the offsets values of x, y, z as a numpy array
5444	Seeks to the position of the last version header fields in the stream and returns it as a string.
5445	Convert a header to another version.
5446	Unpack sub field using its mask
5447	Packs a sub field's array into another array using a mask.
5448	Returns a list of the names of the dimensions that will be lost when converting from point_fmt_in to point_fmt_out.
5449	Returns a dict of the sub fields for this point format
5450	Returns the number of extra bytes.
5451	Returns True if the point format has waveform packet dimensions
5452	Console script for satel_integra.
5453	Function to calculate checksum as per Satel manual.
5454	Debugging method to print out frames in hex.
5455	Verify checksum and strip header and footer of received frame.
5456	Return list of positions of bits set to one in given data.
5457	Add header, checksum and footer to command data.
5458	Basic demo of the monitoring capabilities.
5459	Make a TCP connection to the alarm system.
5460	Start monitoring for interesting events.
5461	Send command to disarm.
5462	Send command to clear the alarm.
5463	Send output turn on/off command to the alarm.
5464	A workaround for Satel Integra disconnecting after 25s that sends random questions to keep the connection alive.
5465	Start monitoring of the alarm status.
5466	Stop monitoring and close connection.
5467	Clear all matching our user_id.
5468	Guess the type of a file.
5469	Get the id of a file in the database.
5470	Get a notebook from the database.
5471	Build a notebook model from database record.
5472	Get a directory from the database.
5473	Apply _notebook_model_from_db or _file_model_from_db to each entry in file_records based on the guessed type.
5474	Build a directory model from database directory record.
5475	Build a file model from database record.
5476	Save a notebook and return a validation message.
5477	Save a non-notebook file.
5478	Rename a file or directory from old_path to path.
5479	Delete object corresponding to path.
5480	Add a new user to the database if they don't already exist.
5481	Delete a user and all of their resources.
5482	Create a directory.
5483	Return a WHERE clause that matches entries in a directory.
5484	Delete a directory.
5485	Internal implementation of dir_exists. Expects a db-style path name.
5486	Return files in a directory.
5487	Return subdirectories of a directory.
5488	Return a WHERE clause matching the given API path and user_id.
5489	Return a SELECT statement that returns the latest N versions of a file.
5490	Default fields returned by a file query.
5491	Get file data for the given user_id, path, and query_fields.
5492	Get file data for the given user_id and path. Include content only if include_content=True.
5493	Get the value in the 'id' column for the file with the given user_id and path.
5494	Check if a file exists.
5495	Rename a directory.
5496	Save a file.
5497	Create a generator of decrypted files.

Files are yielded in ascending order of their timestamp.

This function selects all current notebooks (optionally, falling within a
datetime range), decrypts them, and returns a generator yielding dicts,
each containing a decoded notebook and metadata including the user,
filepath, and timestamp.
5498	Delete all database records for the given user_id.
5499	Create a generator of decrypted remote checkpoints.
5500	Generate notebooks from a database table based on timestamp conditions and yield decrypted notebook data.
5501	Re-encrypt a row from a table with the specified row ID.
5502	Re-encrypt all files and checkpoints for a single user.
5503	Convert a secret key and a user ID into an encryption key for Fernet encryption.
5504	Derive a list of per-user Fernet keys from a list of master keys and a username.
5505	Create and return a function suitable for passing as a crypto_factory to pgcontents.utils.sync.reencrypt_all_users. The factory returns a FernetEncryption that uses a key derived from password and salted with the supplied user_id.
5506	Decorator memoizing a single-argument function
5507	Get the name from a column-like SQLAlchemy expression.
5508	Convert a SQLAlchemy row that does not contain a 'content' field to a dict.
5509	Convert a SQLAlchemy row containing a 'content' field to a dictionary with decrypted content.
5510	Create a checkpoint of the current state of a notebook and return its ID.
5511	Create a checkpoint of the current state of a file and return a checkpoint_id.
5512	Delete a checkpoint for a file.
5513	Get the content of a checkpoint.
5514	Return a list of checkpoints for a given file.
5515	Rename all checkpoints for old_path to new_path.
5516	Delete all checkpoints for the given path.
5517	Purge all database records for the current user.
5518	Resolve a path based on a dictionary of manager prefixes. Returns a triple of (prefix, manager, manager_relative_path).
5519	Prefix all path entries in model with the given prefix.
5520	Decorator for methods that accept path as a first argument.
5521	Parameterized decorator for methods that accept path as a second argument.
5522	Decorator for methods accepting old_path and new_path.
5523	Strip slashes from directories before updating.
5524	Special case handling for listing root dir.
5525	Resolve paths with '..' to normalized paths, raising an error if the final result is outside root.
5526	Split an API file path into directory and name.
5527	Write a notebook as base64.
5528	Read a notebook from base64.
5529	Decode base64 data of unknown format.

Attempts to interpret data as utf-8, falling back to ascii on failure.
5530	Decode base64 content for a file and return decoded content, format, and mimetype.
5531	Return an iterable of all prefix directories of path, descending from root.
5532	Decorator for converting PathOutsideRoot errors to 404s.
5533	Create a user.
5534	Split an iterable of models into a list of file paths and a list of directory paths.
5535	Recursive helper for walk.
5536	Iterate over all files visible to ``mgr``.
5537	Iterate over the contents of all files visible to ``mgr``.
5538	Re-encrypt data for all users.
5539	Re-encrypt all files and checkpoints for a single user.
5540	Unencrypt data for all users.
5541	Unencrypt all files and checkpoints for a single user.
5542	Temporarily write an alembic.ini file for use with alembic migration scripts.
5543	Upgrade the given database to revision.
5544	Sanitizes the data for the given block using its matching embed serializer's `to_internal_value` method.
5545	Queue an instance to be fetched from the database.
5546	Fetch all queued instances of type `embed_type`, save results to `self.instances`
5547	Insert a fetched instance into embed block.
5548	Load data in bulk for each embed block.
5549	Perform validation of the widget data.
5550	Render HTML entry point for manager app.
5551	Return JSON representation for this template
5552	Hides authenticated_fields if request context is missing or user is not authenticated.
5553	Excludes fields that are included in the query parameters.
5554	Get the latest article with the given primary key, handling version and preview_id query parameters.
5555	Optionally restricts the returned articles by filtering against a `topic` query parameter in the URL.
5556	Only display unpublished content to authenticated users, filter by query parameter if present.
5557	Overrides the default get_attribute method to convert None values to False.
5558	Checks that the given widget contains the required fields
5559	Checks that the given zone contains the required fields
5560	Return True if id is a valid UUID, False otherwise.
5561	Returns the user's permissions.
5562	Modify the user's permissions.
5563	Raise a ValidationError if data does not match the author format.
5564	Save widget data for this zone.
5565	Returns data from each field.
5566	Prepare widget data for template.
5567	Renders the widget as HTML.
5568	Retrieves the settings for this integration as a dictionary.
5569	Receive OAuth callback request from Facebook.
5570	Return settings for given integration as a dictionary.
5571	Updates settings for given integration.
5572	Handles requests to the user signup page.
5573	Returns the HTML produced from enclosing each item in `contents` in a tag of type `tagname`
5574	Renders the contents of the zone with given zone_id.
5575	Handles saving the featured image.
5576	Save the subsection to the parent article.
5577	Returns the file extension.
5578	Returns the medium size image URL.
5579	Custom save method to process thumbnails and save image dimensions.
5580	Process and save a resized thumbnail version of the image.
5581	Attempts to connect to the MySQL server.
5582	Wraps a fileobj in a bandwidth limited stream wrapper
5583	Read a specified amount of data, with optional bandwidth throttling.
5584	Consume a requested amount of bytes while managing bandwidth consumption and handling exceptions.
5585	Schedules a wait time to be able to consume an amount.
5586	Process a scheduled consumption request that has completed.
5587	Get the projected rate using a provided amount and time
5588	Record the consumption rate based off amount and time point.
5589	Downloads the object's contents to a file.
5590	Poll for the result of a transfer and return the result or raise an exception if the transfer failed.
5591	Retrieves callbacks from a subscriber for a specified callback type.
5592	Gets a dictionary filtered by whitelisted keys
5593	Decrement the count by one.
5594	Finalize the counter and invoke callback if count is zero.
5595	Checks to see if a file is a special UNIX file.
5596	Acquire the semaphore.
5597	Release the semaphore.
5598	Get a chunksize close to current that fits within all S3 limits.
5599	Queue IO write for submission to the IO executor.
5600	Get an IO write task for the requested set of data.
5601	Retrieves a class for managing output for a download
5602	Downloads an object and places content into io queue.
5603	Pulls off an io queue to write contents to a file
5604	Request any available writes given new incoming data.
5605	Backwards compat function to determine if a fileobj is seekable
5606	Uploads a file to S3
5607	Downloads a file from S3.
5608	Copies a file in S3.
5609	Delete an S3 object.
5610	Shutdown the TransferManager.
5611	Cancels all inprogress transfers by calling cancel() on all tracked transfer coordinators.
5612	Wait until there are no more inprogress transfers.
5613	Read a specific amount of data from a stream and return it, handling initial data and file object reading with optional truncation.
5614	Wraps data with the interrupt reader and the file chunk reader.
5615	Retrieves a class for managing input for an upload based on file type.
5616	Sets the exception on the future.
5617	Set a result for the TransferFuture.
5618	Set an exception for the TransferFuture.
5619	Waits until TransferFuture is done and returns the result.
5620	Cancels the TransferFuture
5621	Submits a task to a provided executor and returns a future representing the submitted task.
5622	Add a done callback to be invoked when transfer is done.
5623	Adds a callback to call upon failure.
5624	Announce that future is done running and run associated callbacks
5625	Submit a task to complete and return the associated future.
5626	Adds a callback to be completed once future is done
5627	Upload a file to an S3 object.
5628	Download an S3 object to a file.
5629	Find functions with step decorator in parsed file
5630	Get the arguments passed to step decorators converted to python objects.
5631	Find the step with old_text and change it to new_text, and refactor the step function parameters according to move_param_from_idx.
5632	Find functions with step decorator in parsed file.
5633	Get arguments passed to step decorators converted to python objects.
5634	Find the step with old_text and change it to new_text, and refactor the step function parameters according to move_param_from_idx.
5635	Select the Python parser for loading and refactoring steps, with support for both the new Parso backend (default) and the legacy Redbaron backend (deprecated).
5636	List team memberships for a team, by ID.
5637	Add someone to a team by Person ID or email address.
5638	Update a team membership by ID.
5639	Delete a team membership, by ID.
5640	Get a cat fact from catfact.ninja and return it as a string.
5641	Respond to inbound webhook JSON HTTP POSTs from Webex Teams.
5642	List room memberships.

The method retrieves room membership information from the Webex Teams API, supporting filtering by room ID, person ID, or person email. It provides pagination support through a generator container that automatically handles multiple API requests to fetch all results. The method accepts optional parameters to limit the results and supports additional request parameters for future compatibility. It returns a generator that yields membership objects created from the API response data.
5643	Delete a membership, by ID.
5644	Verify that base_url specifies a protocol and network location.
5645	Check to see if string is an validly-formatted web url.
5646	Open the file and return an EncodableFile tuple.
5647	Check if an object is an instance of an acceptable type or None.
5648	Creates a dict with the inputted items; pruning any that are `None`.
5649	Check response code against the expected code; raise ApiError.
5650	Given a dictionary or JSON string, return a dictionary.
5651	Parse a datetime string using the Webex Teams DateTime format as the default and replace timezone with Zulu timezone.
5652	List rooms.

### Explanation:
The method `list` is designed to retrieve a collection of rooms from the Webex Teams API. It supports filtering by team ID, room type, sorting options, and pagination. The method returns a generator container that yields room objects, making it easy to iterate through all matching rooms without manually handling pagination. It includes parameter validation and supports additional request parameters for future extensibility.
5653	Create a room.

### Example 1:
Input:
def settext(self, text, cls='current'):
        """Set the text for this element.

        Arguments:
            text (str): The text
            cls (str): The class of the text, defaults to ``current`` (leave this unless you know what you are doing). There may be only one text content element of each class associated with the element.
        """
        self.replace(TextContent, value=text, cls=cls)
Output:
Set the text for this element.

### It is your turn now! Summarizing the follwing code into summary. Please output the answer directly as shown in the example(s) if provided.###
Input:
def create(self, title, teamId=None, **request_parameters):
        """Create a room.

        The authenticated user is automatically added as a member of the room.

        Args:
            title(basestring): A user-friendly name for the room.
            teamId(basestring): The team ID with which this room is
                associated.
            **request_parameters: Additional request parameters (provides
                support for parameters that may be added in the future).

        Returns:
            Room: A Room with the details of the created room.

        Raises:
            TypeError: If the parameter types are incorrect.
            ApiError: If the Webex Teams cloud returns an error.

        """
        check_type(title, basestring)
        check_type(teamId, basestring)

        post_data = dict_from_items_with_values(
            request_parameters,
            title=title,
            teamId=teamId,
        )

        # API request
        json_data = self._session.post(API_ENDPOINT, json=post_data)

        # Return a room object created from the response JSON data
        return self._object_factory(OBJECT_TYPE, json_data)
Output:
Create a room.
5654	Update details for a room, by ID.
5655	Delete a room.
5656	List all licenses for a given organization.
5657	Creation date and time in ISO8601 format.
5658	Attempt to get the access token from the environment.
5659	Create a webhook.
5660	Update a webhook by ID.
5661	Delete a webhook, by ID.
5662	Remove max=null parameter from URL.
5663	Enable or disable automatic rate-limit handling.
5664	Update the HTTP headers used for requests in this session.
5665	Given a relative or absolute URL, return an absolute URL.
5666	Abstract base method for making requests to the Webex Teams APIs.
5667	Sends a GET request.
5668	Return a generator that GETs and yields pages of data.
5669	Return a generator that GETs and yields individual JSON `items`.
5670	Sends a PUT request.
5671	Sends a DELETE request to the specified URL.
5672	Create a new guest issuer using the provided issuer token.
5673	Lists messages in a room.
5674	Post a message, and optionally an attachment, to a room.
5675	Delete a message.
5676	Create a new user account for a given organization.
5677	Get a person's details, by ID.
5678	Update details for a person, by ID.
5679	Remove a person from the system.
5680	Get the details of the person accessing the API.
5681	List all roles.
5682	List teams to which the authenticated user belongs.
5683	Create a team.
5684	Update details for a team, by ID.
5685	Delete a team.
5686	List events in your organization with optional filters.
5687	Serialize data to a frozen tuple.
5688	Exchange an Authorization Code for an Access Token.
5689	The date and time of the person's last activity.
5690	Respond to inbound webhook JSON HTTP POST from Webex Teams.
5691	Get the ngrok public HTTP URL from the local client API.
5692	Find a webhook by name and delete it.
5693	Create a Webex Teams webhook pointing to the public ngrok URL.
5694	Delete previous webhooks. If local ngrok tunnel, create a webhook.
5695	Output DSMR data to console.
5696	Read complete DSMR telegram's from the serial interface and parse it into CosemObject's and MbusObject's
5697	Read complete DSMR telegram's from the serial interface and parse them into CosemObject's and MbusObject's, pushing parsed values to a provided queue for asynchronous processing.
5698	Creates a DSMR asyncio protocol.
5699	Creates a DSMR asyncio protocol coroutine using serial port.
5700	Creates a DSMR asyncio protocol coroutine using TCP connection.
5701	Add incoming data to buffer.
5702	Stop when connection is lost.
5703	Send off parsed telegram to handling callback.
5704	Parse telegram from string to dict.
5705	Get the version of the package from the given file by executing it and extracting the given name.
5706	Given a list of range specifiers for python, ensure compatibility.
5707	Find all of the packages.
5708	Create a command class with optional prerelease and file handling capabilities.
5709	Create a command that calls the given function.
5710	Echo a command before running it. Defaults to repo as cwd.
5711	Return a Command that checks that certain files exist.
5712	Wrap a setup command with pre-commands execution.
5713	Get a package_data and data_files handler command.
5714	Expand data file specs into valid data files metadata.
5715	Expand file patterns to a list of `package_data` paths.
5716	Translate and compile a glob pattern to a regular expression matcher.
5717	Iterate over all the parts of a path.
5718	Translate a glob PATTERN to a regular expression.
5719	Join translated glob pattern parts, handling ** pattern matching differently from simple join.
5720	Translate a glob PATTERN PART to a regular expression.
5721	Send DDL to truncate the specified table.
5722	Send DDL to create the specified table.
5723	Send DDL to create the specified table indexes
5724	Send DDL to create the specified `table` triggers
5725	Send DDL to create the specified `table` constraints
5726	Write the contents of `table` to a file object and copy them to the database.
5727	Examines row data from MySQL and alters the values when necessary to be compatible with sending to PostgreSQL via the copy command.
5728	Write DDL of `table` indexes to the output file
5729	Write DDL of `table` constraints to the output file
5730	Write TRIGGERs existing on `table` to the output file
5731	Return an approximate number of queued tasks in the queue.
5732	Enqueue task with specified data.
5733	Retrieve a task handler from the queue.
5734	This method builds an extra predicate for a queue by handling supported formats and escaping queries.
5735	Serializes dates and datetimes to ISO strings for JSON serialization.
5736	Closes the existing database connection and re-opens it.
5737	Returns the first row returned for the given query.
5738	Returns a new connection to the database.
5739	Run a set of InsertWorkers and record their performance.
5740	Returns an aggregator connection.
5741	Used for development only
5742	Returns the number of connections cached by the pool.
5743	Handle potential connection failures by verifying if the error is actually a connection issue before terminating the connection and firing off a PoolConnectionException.
5744	Build a simple expression ready to be added onto another query.
5745	Build an update query.
5746	Connect to the database specified.
5747	Initialize the required tables in the database
5748	Destroy the SQLStepQueue tables in the database.
5749	Start a step.
5750	Stop a step.
5751	Load steps by converting datetime ISO formats into datetime objects.
5752	Disconnects from the websocket connection and joins the Thread.
5753	Initiates a reconnection sequence by setting the reconnect required event and closing the socket if it exists.
5754	Creates a websocket connection and handles reconnection logic.
5755	Handles and passes received data to the appropriate handlers.
5756	Stops ping, pong and connection timers.
5757	Sends a ping message to the API and starts pong timers.
5758	Checks if a Pong message was received and handles timeout by reconnecting if necessary.
5759	Sends the given Payload to the API via the websocket connection.
5760	Unpauses the connection and re-subscribes to all channels.
5761	Distributes system messages to the appropriate handler.
5762	Handle INFO messages from the API and issue relevant actions.
5763	Handle error messages and log them accordingly.
5764	Handles data messages by passing them up to the client.
5765	Resubscribes to all channels found in self.channel_configs.
5766	Handles authentication responses.
5767	Handles configuration messages.
5768	Updates the timestamp for the given channel id.
5769	Reset the client by reconnecting and reconfiguring channels.
5770	Return a queue containing all received candles data.
5771	Send configuration to websocket server
5772	Subscribe to the passed pair's ticker channel.
5773	Unsubscribe to the passed pair's ticker channel.
5774	Subscribe to the passed pair's order book channel.
5775	Unsubscribe to the passed pair's order book channel.
5776	Subscribe to the passed pair's raw order book channel.
5777	Unsubscribe to the passed pair's raw order book channel.
5778	Subscribe to the passed pair's trades channel.
5779	Unsubscribe to the passed pair's trades channel.
5780	Subscribe to the passed pair's OHLC data channel.
5781	Unsubscribe to the passed pair's OHLC data channel.
5782	Authenticate with the Bitfinex API.
5783	Cancel one or multiple orders via Websocket.
5784	Internal callback for device command messages that parses source device from topic string and passes information to registered device command callback.
5785	Internal callback for gateway command messages that parses source device from topic string and passes information to registered device command callback.
5786	Internal callback for gateway notification messages, parses source device from topic string and passes the information on to the registered device command callback
5787	Register one or more new device types.
5788	Publish an event to Watson IoT Platform.
5789	Update an existing device.
5790	Iterate through all Connectors.
5791	List all device management extension packages.
5792	Create a new device management extension package.
5793	Update a schema. Throws APIException on failure.
5794	Disconnect the client from IBM Watson IoT Platform
5795	Called when the broker responds to our connection request.
5796	Subscribe to device event messages.
5797	Subscribe to device status messages.
5798	Subscribe to device command messages.
5799	Publish a command to a device.
5800	Internal callback for messages that have not been handled by any of the specific internal callbacks, these messages are not passed on to any user provided callback.
5801	Internal callback for device event messages, parses source device from topic string and passes the information on to the registered device event callback
5802	Internal callback for device status messages, parses source device from topic string and passes the information on to the registered device status callback
5803	Internal callback for application command messages, parses source application from topic string and passes the information on to the registered application status callback
5804	Retrieves the last cached message for specified event from a specific device.
5805	Retrieves a list of the last cached message for all events from a specific device.
5806	Retrieve bulk devices via API call and return JSON response, or raise exception on failure.
5807	Initiates a device management request and handles the response.
5808	Get device management request statuses or an individual device management request device status.
5809	Force a flush of the index to storage and render it inaccessible.
5810	Return number of objects that intersect the given coordinates.
5811	Returns the k-nearest objects to the given coordinates.
5812	Returns the bounds of the index.
5813	Deletes items from the index with the given ID within the specified coordinates.
5814	Create an index from an iterable stream of data using a callback function to fill pointers for individual entries.
5815	Must be overridden. Must return a string with the loaded data.
5816	Deletes the item from the container within the specified coordinates.
5817	Error checking for Error calls
5818	Attempt an import of the specified application.
5819	Initializes the Flask application with Common.
5820	Serves the Flask application using either development server or Gunicorn.
5821	For djangorestframework <=2.3.14
5822	Return a PIL Image instance cropped from `image` with specified dimensions and centerpoint.
5823	Return a BytesIO instance of `image` cropped to `width` and `height`.
5824	Return a BytesIO instance of `image` that fits in a bounding box.
5825	Return a BytesIO instance of `image` with inverted colors.
5826	Ensure data is prepped properly before handing off to ImageField.
5827	Process the field's placeholder image.

Ensures the placeholder image has been saved to the same storage class as the field in a top level folder with a name specified by settings.VERSATILEIMAGEFIELD_SETTINGS['placeholder_directory_name']

This should be called by the VersatileImageFileDescriptor __get__.
If self.placeholder_image_name is already set it just returns right away.
5828	Return field's value just before saving.
5829	Update field's ppoi field, if defined.
5830	Handle data sent from MultiValueField forms that set ppoi values.
5831	Return a formfield.
5832	Prepare field for serialization.
5833	Discover versatileimagefield.py modules.
5834	Unregister the SizedImage subclass currently assigned to `attr_name`.
5835	Unregister the FilteredImage subclass currently assigned to attr_name.
5836	Return the appropriate URL based on field conditions.
5837	Build the filters and sizers for a field.
5838	Return the location where filtered images are stored.
5839	Return the location where sized images are stored.
5840	Return the location where filtered + sized images are stored.
5841	Delete files in `root_folder` which match `regex` before file ext.
5842	Preprocess an image by handling rotation based on EXIF data and preserving ICC profiles, with optional format-specific preprocessing.
5843	Preprocess a GIF image and return the image with transparency information.
5844	Preprocess a JPEG image and return a 2-tuple with image data and save parameters.
5845	Return a PIL Image instance stored at `path_to_image`.
5846	Save an image to self.storage at the specified path.
5847	Return PPOI value as a string.
5848	Create a resized image by processing and saving it to the specified storage path with given dimensions.
5849	Render the widget as an HTML string.

Overridden here to support Django < 1.11.
5850	Get the context to render this widget with.
5851	Build an attribute dictionary.
5852	Return a resized image path location based on width, height, and filename key.
5853	Return the 'filtered path' for an image file.
5854	Validate a list of size keys.
5855	Build a URL from `image_key`.
5856	Retrieve a validated and prepped Rendition Key Set from settings.VERSATILEIMAGEFIELD_RENDITION_KEY_SETS
5857	Takes a raw `Instruction` and translates it into a human readable text representation.
5858	Takes a `FunctionBody` and optionally a `FunctionType`, yielding the string representation of the function line by line.
5859	Decodes raw bytecode, yielding `Instruction`s.
5860	Decodes raw WASM modules, yielding `ModuleFragment`s.
5861	Deprecates a function, printing a warning on the first usage.
5862	Connect to the server.
5863	Close the connection
5864	Parse a response from the AGI and return it as a dictionary.
5865	AsyncIO coroutine handler to launch socket listening.
5866	Parse AGI results using Regular expression.
5867	Check the AGI code and return a dict to help on error handling.
5868	Mostly used for unit testing. Allow to use a static uuid and reset all counter.
5869	Mostly used for debugging
5870	Returns data from a package directory.
5871	Get primary key properties for a SQLAlchemy model.
5872	Deserialize a serialized value to a model instance.
5873	Retrieve the related object from an existing instance in the DB.
5874	Updates declared fields with fields converted from the SQLAlchemy model passed as the `model` class Meta option.
5875	Deserialize data to internal representation.
5876	Split serialized attributes to ensure association proxies are passed separately for SQLAlchemy compatibility.
5877	Deletes old stellar tables that are not used anymore
5878	Takes a snapshot of the database.
5879	Returns a list of snapshots
5880	Restores the database from a snapshot.
5881	Removes a snapshot
5882	Renames a snapshot with validation checks.
5883	Replace a snapshot by removing the existing one and creating a new one with the same name.
5884	Updates indexes after each epoch for shuffling
5885	Defines the default function for cleaning text.
5886	Apply function to list of elements in parallel using multiple CPU cores.
5887	Generate a function that will clean and tokenize text.
5888	Combine the cleaner and tokenizer.
5889	Apply cleaner -> tokenizer in parallel.
5890	Analyze document length statistics for padding strategy
5891	See token counts as pandas dataframe
5892	Perform param type mapping with type conversion and default handling.
5893	Parse the conduit.query json dict response and return a dict that Resource can understand.
5894	The inverse of this bidict.
5895	Update, rolling back on failure.
5896	A shallow copy of the bidirectional dictionary.
5897	A shallow copy of this ordered bidict.
5898	Order-sensitive equality check.
5899	Yield the inverse items of the provided object.
5900	Remove all items.
5901	Move an existing key to the beginning or end of this ordered bidict.
5902	Create a new temporary file and write some initial text to it.
5903	Get a list of contacts from one or more address books.
5904	Merge parsed command line arguments into the config object.
5905	Load all address books with the given names from the config.
5906	Prepare the search query string from the given command line args.
5907	Create a new contact.
5908	Print birthday contact table.
5909	Print a phone application friendly contact table.
5910	Print a user friendly contacts table.
5911	Modify a contact in an external editor.
5912	Remove a contact from the address book.
5913	Open the vcard file for a contact in an external editor.
5914	Merge two contacts into one.
5915	Copy or move a contact to a different address book.
5916	Find the name of the action for the supplied alias. If no action is associated with the given alias, None is returned.
5917	Convert the named field to bool.
5918	Use this to create a new and empty contact.
5919	Create a new contact from an existing .vcf file.
5920	Create a new contact from user input.
5921	Use this if you want to clone an existing contact and replace its data with new user input in one step.
5922	Get some part of the "N" entry in the vCard as a list
5923	Add categories to the vcard element.
5924	Parse type value of phone numbers, email and post addresses.
5925	Converts a list to a string recursively, supporting nested lists.
5926	Convert string to date object.
5927	Calculate the minimum length of initial substrings of uid1 and uid2 for them to be different.
5928	Search in all fields for contacts matching query.
5929	Search in the name field for contacts matching query.
5930	Search for contacts with a matching uid.
5931	Search this address book for contacts matching the query.
5932	Create a dictionary of shortened UIDs for all contacts.
5933	Get the shortened UID for the given UID.
5934	Find all vcard files inside this address book.
5935	Load all vcard files in this address book from disk.
5936	Get one of the backing address books by its name.
5937	Initialize the dictionary of architectures for assembling via keystone
5938	Initialize the dictionary of architectures for disassembling via capstone
5939	An `inspect.getargspec` with a relaxed sanity check to support Cython.
5940	Parses given list of arguments using given parser, calls the relevant function and prints the result.
5941	Prompts user for input and handles prompt message encoding correctly.
5942	Encodes a given value for writing to a file object, handling differences between Python 2 and Python 3.
5943	Adds types, actions, etc. to given argument specification.
5944	Adds given functions as commands to given parser.
5945	Sets given string as command name instead of the function name.
5946	Declares an argument for given function.
5947	A shortcut for typical confirmation prompt.
5948	Copy the Query object, optionally replacing the filters, order_by, or limit information on the copy.
5949	Limit entities returned to those that include the provided patterns using like queries with wildcard characters.
5950	Execute the query and return a key where results are stored for pagination, with expiration timeout.
5951	Returns only the first result from the query, if any.
5952	Delete entities that match the query, processing them in chunks to avoid memory issues.
5953	Handle all on_delete semantics defined on OneToMany columns, including cascade, restrict, set null, and set default actions.
5954	Performs the actual prefix, suffix, and pattern match operations.
5955	Estimates the total work necessary to calculate the prefix match over the given index with the provided prefix.
5956	Search for model ids that match the provided filters.
5957	Returns the count of the items that match the provided filters.
5958	Tries to get the _conn attribute from a model. Barring that, gets the global default connection using other methods.
5959	Create a full-text index keygen function that lowercases, splits by whitespace, strips punctuation, and generates an inverted index for term searching.
5960	Refresh the indices of all entities in a model by iterating through them in blocks and re-saving their data to trigger index updates.
5961	Clean out old index data that was accidentally left during item deletion in rom versions <= 0.27.0.
5962	Adds an entity to the session.
5963	Fetches an entity from the session based on primary key.
5964	Actually write data to Redis. This is an internal detail. Please don't call me directly.
5965	Saves the current entity to Redis, handling pre-commit and post-commit hooks, and returns the save result.
5966	Delete the entity immediately and perform related operations.
5967	Fetch one or more entities of this type from the session or Redis.
5968	Attach a reducer function to a given type in the dispatch table.
5969	Construct or retrieve a semaphore with the given name.
5970	Return the number of CPUs the current process can use, accounting for system limits, affinity settings, CFS scheduler constraints, and environment variables.
5971	Safely send back the given result or exception
5972	Evaluates calls from call_queue and places the results in result_queue.

This worker is run in a separate process.
5973	Fills call_queue with _WorkItems from pending_work_items.

This function never blocks.
5974	Ensures all workers and management thread are running.
5975	Wrapper for non-picklable object to use cloudpickle to serialize them.
5976	Spawn a server process for this manager object.
5977	Return a wrapper for an fd.
5978	Return the current ReusableExecutor instance.
5979	Wait for the cache to be empty before resizing the pool.
5980	Return info about parent needed by child to unpickle process object
5981	Try to get current process ready to unpickle process object
5982	Close all the file descriptors except those specified to be kept open.
5983	Terminate a process and its descendants.
5984	Recursively kill the descendants of a process before killing it.
5985	Return a formatted string with the exit codes of terminated workers, waiting up to 0.25s for exit codes to be set if necessary.
5986	Format a list of exit code with names of the signals if possible
5987	Run semaphore tracker.
5988	Make sure that semaphore tracker process is running.
5989	A simple event processor that prints out events.
5990	Program counter.
5991	Almost a copy of code.interact. Closely emulate the interactive Python interpreter.
5992	Split a command line's arguments in a shell-like manner returned as a list of lists.
5993	Return a stack of frames for the debugger to use in showing backtraces and frame switching.
5994	Run each function in `hooks` with args and return True if any hook returns True, otherwise return False.
5995	Remove memory of state variables set in the command processor
5996	Eval arg and return its integer value if possible, otherwise return None.
5997	Parse and validate an integer argument with min/max constraints, returning a default value or reporting errors.
5998	Handle debugger commands.
5999	Arrange for file of debugger commands to get read in the process-command loop.
6000	Find the next token in string from start position and return the token and next blank position after the token.
6001	Common routine for reporting debugger error messages.
6002	Script interface to read a command.
6003	Closes both input and output.
6004	Disassemble a code object.
6005	Disassemble byte string of code into human-readable format with optional highlighting and line number tracking.
6006	Return a count of the number of frames
6007	If f_back is looking at a call function, return the name for it. Otherwise return None
6008	Print count entries of the stack trace
6009	Find subcmd in self.subcmds
6010	Show short help for a subcommand.
6011	Add subcmd to the available subcommands for this object.
6012	Run subcmd_name with args using obj for the environment
6013	Enter the debugger.
6014	Show short help for all commands in a given category.
6015	Current line number in source file
6016	Find the first frame that is a debugged frame by looking for the first frame where f_trace is set, skipping over debugger frames that don't have f_trace set.
6017	Invert threading._active mapping thread names to thread IDs.
6018	If arg is an int, use that otherwise take default.
6019	Return True if arg is 'on' or 1 and False if arg is 'off' or 0. Raises ValueError for any other value.
6020	Set a Boolean-valued debugger setting.
6021	Set an integer-valued debugger setting.
6022	Generic subcommand showing a boolean-valued debugger setting.
6023	Generic subcommand integer value display
6024	Generic subcommand value display
6025	Return True if we are looking at a def statement
6026	Return True if we are looking at a class definition statement
6027	Quit command when several threads are involved.
6028	Get background from default values based on the TERM environment variable.
6029	Determine if RGB color value is dark based on midpoint threshold.
6030	Return suitable frame signature to key display expressions off of.
6031	List all display items; return 0 if none
6032	Display any active items for the given frame.
6033	Format display item.
6034	Read one message unit from the connection, handling buffering for multiple messages and raising EOFError on end-of-file.
6035	Set breakpoint at current location, or a specified frame
6036	Error message when subcommand asked for but doesn't exist
6037	Run a frame command with support for multiple parameter variations.
6038	Try to pretty print a simple case where a list is not nested. Return True if we can do it and False if not.
6039	Find the corresponding signal name for 'num'. Return None if 'num' is invalid.
6040	Find the corresponding signal number for 'name'. Return None if 'name' is invalid.
6041	Return a canonical signal name for a signal name or signal number.
6042	A replacement for signal.signal which chains the signal behind the debugger's handler
6043	Check to see if any of the signal handlers we are interested in have changed or is not initially set. Change any that are not right.
6044	Print information about a signal.
6045	Delegate the actions specified in 'arg' to another method.
6046	Set whether we print or not when this signal is caught.
6047	Handle a received signal by printing information and optionally passing it along to the program.
6048	Given a file name, extract the most likely module name.
6049	Return a full pathname for filename if we can find one in the specified directories, otherwise return None.
6050	Do a shell-like path lookup for py_script and return the results.
If we can't find anything return py_script
6051	Get all Python files in the caller's directory without path and trailing .py extension.
6052	Used to write to a debugger that is connected to this server; `str' written will have a newline added to it.
6053	Execution status of the program.
6054	List commands arranged in an aligned columns
6055	Enter debugger read loop after your program has crashed.
6056	Closes both socket and server connection.
6057	This method writes a message through the debugger connection, handling packet size limitations.
6058	Complete an arbitrary expression.
6059	Invoke a debugger command from inside a python shell called inside the debugger.
6060	Add frames or functions to the list of functions that are not to be debugged.
6061	Turns `filename' into its canonic representation and returns this string. This allows a user to refer to a given file in one of several equivalent ways.
6062	Return filename or the basename of that depending on the basename setting.
6063	Return True if debugging is in progress.
6064	Determine if execution should stop at the current frame based on debugging events and stopping conditions.
6065	Sets to stop on the next event that happens in the specified frame.
6066	A mini stack trace routine for threads.
6067	Get file information.
6068	Check whether we should break at this frame based on function name or line number breakpoint criteria.
6069	Remove breakpoint `bp` and clean up associated data structures.
6070	Remove a breakpoint given its breakpoint number.
6071	Enable or disable all breakpoints.
6072	Enable or disable a breakpoint given its breakpoint number.
6073	Removes all breakpoints at a given filename and line number, returning a list of deleted breakpoint numbers.
6074	Use this to set what file to read from.
6075	Read a line of input. Raise EOFError on EOF.
6076	Called when a dangerous action is about to be done to make sure it's okay. `prompt' is printed; user response is returned.
6077	Handle whitespace characters by adding a SPACE token and updating position.
6078	Process a number token from the input string.
6079	Wrap a SQLAlchemy query object into a concurrent.futures.Future so that it can be yielded.
6080	Restore an original login session by checking the signed session and reverting to the original user account.
6081	Load and return a module and attribute from a given path string.
6082	Yield each document in a Luminoso project in turn, with options for expanded fields and progress tracking.
6083	Handle arguments for the 'lumi-download' command.
6084	Read a JSON or CSV file and convert it into a JSON stream, which will be saved in an anonymous temp file.
6085	Deduce the format of a file and load it accordingly.
6086	Normalize data for upload to the Luminoso Analytics system by converting dates according to the specified format.
6087	Convert a date in a given format to epoch time. Mostly a wrapper for datetime's strptime.
6088	Use ftfy to detect the encoding of a file based on a sample of its first megabyte.
6089	Load a JSON stream and return a generator, yielding one object at a time.
6090	Convert a file in some other encoding into a temporary file that's in UTF-8.
6091	Open a CSV file using Python 2's CSV module, working around the deficiency where it can't handle the null bytes of UTF-16.
6092	Given a constructed CSV reader object, a header row that we've read, and a detected encoding, yield its rows as dictionaries.
6093	Handle command line arguments to convert a file to a JSON stream as a script.
6094	Returns an object that makes requests to the API, authenticated with a saved or specified long-lived token.
6095	Save a long-lived API token to a local file for a specified domain.
6096	Make a request via the `requests` module and handle HTTP error statuses by converting them to Python exceptions.
6097	Make a DELETE request to the given path and return the JSON-decoded result.
6098	Wait for a project build to complete by polling the API until no build is running, then return the build info if successful or raise an error if failed.
6099	Get the "root URL" for a URL, as described in the LuminosoClient documentation.
6100	Obtain the user's long-lived API token and save it in a local file. Returns the token that was saved.
6101	Make a request of the specified type and expect a JSON object in response. If the result has an 'error' value, raise a LuminosoAPIError with its contents. Otherwise, return the contents of the 'result' value.
6102	Make a POST request to the given path with data in its body and return JSON-decoded result.
6103	Return a new LuminosoClient for a subpath of this one.
6104	Get the ID of an account you can use to access projects.
6105	Get the documentation that the server sends for the API.
6106	Wait for an asynchronous task to finish by polling the Luminoso API endpoint until the job is complete.
6107	Get the raw text of a response.
6108	Print a JSON list of JSON objects in CSV format.
6109	Read parameters from input file, -j, and -p arguments, in that order.
6110	Limit a document to just the three fields we should upload.
6111	Given an iterator of documents, upload them as a Luminoso project.
6112	Create a project from documents in a JSON lines file using a LuminosoClient.
6113	Handle arguments for the 'lumi-upload' command.
6114	Upload a JSON stream to Luminoso with the given account and project name.
6115	Upload a file to Luminoso with the given account and project name.
6116	Handle command line arguments, to upload a file to a Luminoso project as a script.
6117	Obtain a short-lived token using a username and password, and use that token to create an auth object.
6118	Set http session.
6119	Login to enedis.
6120	Get data from Enedis.fr API with specified parameters and handle various error cases.
6121	Get the latest data from Enedis for all time periods.
6122	Load the view on first load
6123	Load the view on first load and set initial view properties.
6124	Execute the correct handler depending on what is connecting.
6125	Handle messages sent from enaml.js by decoding JSON data and triggering corresponding events or updates on the view node.
6126	When pages change, update the menus.
6127	Generate the handlers for this site.
6128	When we get an event from js, lookup the node and invoke the action on the enaml node.
6129	When an event from enaml occurs, send it out the websocket so the client's browser can update accordingly.
6130	Create the toolkit widget for the proxy object.
6131	Initialize the state of the toolkit widget.
6132	A reimplemented destructor that clears the reference to the toolkit widget and sets its parent to None.
6133	Handle the child added event from the declaration.
6134	Handle the child removed event from the declaration.

This handler will unparent the child toolkit widget. Subclasses which need more control should reimplement this method.
6135	Get the child toolkit widgets for this object.
6136	Default handler for setting widget attributes.
6137	Update the proxy widget when the Widget data changes.
6138	If a change occurs when we have a websocket connection active, notify the websocket client of the change.
6139	Find nodes matching the given xpath query.
6140	Prepare for rendering
6141	Initialize the widget with the source.
6142	Set the source by parsing the source and inserting it into the component.
6143	If the mode changes, refresh the items.
6144	A change handler for the 'objects' list of the Include that manages object parenting and destruction during updates.
6145	When the children of the block change, update the referenced block.
6146	Read the contents of a file located relative to setup.py
6147	Print `msg` error and exit with status `exit_code`
6148	Print any parsing error and exit with status -1
6149	Gets a Item from the Menu by name.
6150	Clear out the current session on the remote and setup a new one.
6151	Clears out the current store and gets a cookie. Set the cross site request forgery token for each subsequent request.
6152	Search for dominos pizza stores using a search term.
6153	Set the delivery system by initializing it with store ID, postcode, and fulfilment method, returning the initialization response.
6154	Retrieve the menu from the selected store.
6155	Add an item to the current basket.
6156	Add a pizza to the current basket.
6157	Add a side to the current basket.
6158	Remove an item from the current basket.
6159	Select the payment method going to be used to make a purchase.
6160	Proceed with payment using the selected payment method.
6161	Make a HTTP GET request to the Dominos UK API with the given parameters for the current session.
6162	Make a HTTP POST request to the Dominos UK API with the given parameters for the current session.
6163	Make a HTTP request to the Dominos UK API with the given parameters for the current session.
6164	Add an item to the end of the menu before the exit item.
6165	Add the exit item if necessary.
6166	Redraws the menu and refreshes the screen.
6167	Gets the next single character and decides what to do with it
6168	Select the current item and run it.
6169	Take an old-style menuData dictionary and return a CursesMenu
6170	Get the top or flop N results based on a column value for each specified group columns.
6171	Get the top or flop N results based on a function and a column value that aggregates the input.
6172	Convert string column into datetime column
6173	Convert datetime column into string column
6174	Convert the format of a date column in a DataFrame.
6175	Convert column's type into specified type.
6176	Creates rank columns based on numeric values to be ranked.
6177	Return a line for each bars of a waterfall chart, totals, groups, subgroups. Compute the variation and variation rate for each line.
6178	Basic mathematical operation to apply operator on two columns or values, creating a new column in the dataframe.
6179	Round each value of a column.
6180	Get the absolute numeric value of each element of a column.
6181	Pivot the data by reshaping it based on index, column, and value parameters with optional aggregation function.
6182	Pivot a dataframe by group of variables.
6183	Aggregate values by groups.
6184	DEPRECATED - please use `compute_cumsum` instead
6185	Add missing rows to a DataFrame based on a reference column.
6186	Decorator to catch an exception and don't raise it. Logs information if a decorator failed.
6187	Decorator to log a message before executing a function
6188	Decorator to log the execution time of a function
6189	Decorator to log the shapes of input and output dataframes
6190	Replaces data values and column names according to the locale.
6191	Compute cumulative sum for a group of columns.
6192	Aggregates data to reproduce "All" category for requester by grouping data based on specified columns and applying aggregation functions.
6193	Get the value of a function's parameter based on its signature and the call's args and kwargs.
6194	Remove old entries from the cache
6195	Creates aggregates following a given hierarchy.
6196	Keep the row of the data corresponding to the maximal value in a column.
6197	Keep the row of the data corresponding to the minimal value in a column.
6198	Fill NaN values in a DataFrame column with a given value or values from another column.
6199	Add a human readable offset to `dateobj` and return corresponding date.
6200	Return the date after adding a specified number of months, handling cases where the resulting month has fewer days than the original date.
6201	Return `dateobj` plus `nb_years` years, adjusting for month-end dates by using the last day of the target month when the original day doesn't exist.
6202	Parse a date string and return the corresponding date object, supporting additional offset operations and symbolic names.
6203	Filter a dataframe by date using specified date ranges or exact date matching.
6204	Add a column to the dataframe with percentage values calculated based on groupby logic.
6205	Optimize by SGD, AdaGrad, or AdaDelta.
6206	Return updates in the training.
6207	Get parameters to be optimized.
6208	Return updates from optimization.
6209	Compute first glimpse position using down-sampled image.
6210	Prepare the model by setting up encoder, decoder, and classifier layers with their respective dimensions and activation functions.
6211	Build the computation graph and return the final cost.
6212	Process all data with given function.
6213	Make targets be one-hot vectors.
6214	Print dataset statistics.
6215	Train the model using mini-batches and evaluate periodically.
6216	Sample outputs from LM.
6217	Compute the alignment weights based on the previous state.
6218	Compute the context vector with soft attention.
6219	A utility function for concatenating variables along a specified axis.
6220	Pad sequences to given length in the left or right side.
6221	RMSPROP optimization core.
6222	Report elapsed time.
6223	Run the model with validation data and return costs.
6224	This function is called after each iteration to update counters, calculate averages, compare results, and save checkpoints when necessary.
6225	Create inner loop variables.
6226	Internal scan with dummy input variables.
6227	Momentum SGD optimization core.
6228	Execute `then_branch` when training.
6229	Skip N batches in the training.
6230	Load parameters for the training and resume the training progress.
6231	Train the model and return costs.
6232	Run one training iteration.
6233	Run one validation iteration, return true if training should continue.
6234	Report the scores and record them in the log.
6235	Get specified split of data.
6236	Apply a function to tensors.
6237	Report usage of training parameters.
6238	An alias of deepy.tensor.var.
6239	Create variables from dataset data and set test values.
6240	Create a shared theano scalar value.
6241	Stack encoding layers, this must be done before stacking decoding layers.
6242	Stack decoding layers.
6243	Encode given input.
6244	Decode given representation.
6245	Create a 2D Gaussian kernel with specified dimension and standard deviation.
6246	Register the layer so that its parameters will be trained, but the output will not be stacked.
6247	Monitoring the outputs of each layer.
6248	Return all parameters by combining parameters and free_parameters.
6249	Set up variables.
6250	Return network output.
6251	Save parameters to file.
6252	Load parameters from file.
6253	Print network statistics.
6254	Register parameters.
6255	Register updates that will be executed in each iteration.
6256	Register updates that will only be executed in training phase.
6257	Register monitors for training and testing.
6258	Get the L2 norm of multiple tensors.
6259	Dumps one element to a file object.
6260	Load contents from file_obj, returning a generator that yields one element at a time.
6261	Load parameters to the block.
6262	Creates OAuth 2.0 request elements of specified type with given credentials and parameters.
6263	Decode state and return param.
6264	Override credential parsing to fix Facebook's naming deviation.
6265	Filter request elements for Google access token requests to avoid conflicts between client credentials in parameters and authorization header.
6266	Login handler, must accept both GET and POST to be able to use OpenID.
6267	Replaces all values that are single-item iterables with the value of its index 0.
6268	Converts list of tuples to dictionary with duplicate keys converted to lists.
6269	Parses response body from JSON, XML or query string.
6270	Returns a provider class based on the input class name or class object.
6271	Creates the value for ``Set-Cookie`` HTTP header.
6272	Adds the session cookie to headers.
6273	Extracts the session data from cookie.
6274	Gets session data lazily.
6275	Creates signature for the session.
6276	Converts the value to a signed string with timestamp.
6277	Returns ``True`` if credentials are valid, ``False`` if expired.
6278	Returns ``True`` if credentials expire sooner than specified.
6279	Converts the credentials to a percent encoded string to be stored for later use.
6280	Return true if string is binary data.
6281	The whole response content.
6282	Creates OAuth1 request elements.
6283	Email is available in separate method so second request is needed.
6284	Decorator for Flask view functions.
6285	Launches the OpenID authentication procedure.
6286	Generates session key string.
6287	Saves a value to session.
6288	Generates CSRF token.
6289	Logs a message with pre-formatted prefix.
6290	Checks whether a HTTP status code is in the category denoted by the hundreds digit.
6291	Splits given url to url base and params converted to list of tuples.
6292	This function is a decorator for wrapping Sanic routes with CORS headers, allowing controlled cross-origin resource sharing.
6293	Performs the actual evaluation of Sanic-CORS options and modifies the response object with CORS headers.
6294	Returns the dictionary of CORS specific app configurations.
6295	A more flexible str function which intelligently handles stringifying strings, lists and other iterables.
6296	Wraps scalars or string types as a list, or returns the iterable instance.
6297	Check if two floating point numbers are close in value.
6298	Deprecator decorator.
6299	Attempts to deserialize a bytestring into an audiosegment.
6300	Returns an AudioSegment object from the given file based on its file extension.
6301	Returns an AudioSegment created from the given numpy array.
6302	Execute a Sox command in a platform-independent manner.
6303	Returns a copy of this AudioSegment with silence removed.
6304	Transforms the indicated slice of the AudioSegment into the frequency domain and returns the frequency bins and their corresponding values.
6305	Yields audio data in chunks of specified duration.
6306	Normalize the values in the AudioSegment so that its `spl` property gives the specified decibel level.
6307	Reduces others into this one by concatenating all the others onto this one and returning the result.
6308	Returns a new AudioSegment with resampled audio data based on the specified characteristics.
6309	Serializes into a bytestring.
6310	Does a series of FFTs on an AudioSegment to create a spectrogram, transforming the audio into the frequency domain across different time bins.
6311	Returns a front ID which is the id of the offset front that contains the most overlap with offsets that correspond to the given onset front ID.
6312	Returns the offset_front_id which corresponds to the offset front which occurs first entirely after the given onset sample_idx.
6313	Get the ID of the offset front that occurs first after the given onset front ID.
6314	Find the matching offset front ID that corresponds to the given onset front ID by matching onsets to offsets and selecting the offset front with the most matching offsets, or return -1 if no matches are found.
6315	Gets an onset_front and an offset_front that overlap in frequency channels, then returns the overlapping portions of each.
6316	Update a segmentation mask by segmenting between specified onset and offset fronts, and return the updated fronts and completion status.
6317	Returns the front ID found in `front` at the given `index`.
6318	Yields one onset front ID at a time until they are gone. All the onset fronts from a frequency channel are yielded, then all of the next channel's, etc., though one at a time.
6319	Gets the offsets that occur as close as possible to the onsets in the given onset-front.
6320	Removes all points in the fronts that overlap with the segmentation mask.
6321	Removes fronts smaller than specified size from the fronts array.
6322	For each onset front, break the front between frequencies if signals between adjacent frequency onsets are not sufficiently similar, and remove fronts narrower than 3 channels.
6323	Merges all segments in `mask` which are touching.
6324	Returns a list of segmentation masks each with exactly one segment, filtering out segments smaller than the specified threshold.
6325	Downsamples one of the given matrices to match the time dimension of the other, while preserving the frequency dimension.
6326	Worker for the ASA algorithm's multiprocessing step.
6327	Applies a bandpass filter to the given data using a Butterworth filter.
6328	Does a lowpass filter over the given data.
6329	Separates the outcome feature from the data and creates the onehot vector for each row.
6330	Standardizes continuous features and expands categorical features.
6331	Used to check whether two edge lists have the same edges when elements are neither hashable nor sortable.
6332	Given a list of audit files, rank them using the measurer and return the features that never deviate more than similarity_bound across repairs.
6333	Loads a confusion matrix from a file and returns a list of repair levels with their corresponding confusion matrices.
6334	Separates the outcome feature from the data.
6335	Checks for alternative index-url in pip.conf and updates the API URL accordingly.
6336	Attempt to detect requirements files in the current working directory
6337	Resolve all streams on the network and return a list of StreamInfo objects.
6338	Resolve all streams with a specific value for a given property.
6339	Resolve all streams that match a given predicate.
6340	Error handler function. Translates an error code into an exception.
6341	Push a sample into the outlet.
6342	Push a list of samples into the outlet.
6343	Retrieve the complete information of the given stream.
6344	Subscribe to the data stream.
6345	Retrieve an estimated time correction offset for the given stream.
6346	Get a child with a specified name.
6347	Get the next sibling in the children list of the parent node.
6348	Get the previous sibling in the children list of the parent node.
6349	Set the element's name. Returns False if the node is empty.
6350	Set the element's value. Returns False if the node is empty.
6351	Append a child element with the specified name.
6352	Prepend a child element with the specified name.
6353	Append a copy of the specified element as a child.
6354	Prepend a copy of the specified element as a child.
6355	Remove a given child element, specified by name or as element.
6356	Obtain the set of currently present streams on the network.
6357	See all token associated with a given token.
6358	Shows autocomplete results for a given token.
6359	Compute edge ngram of token from min. Does not include token itself.
6360	Allow for iterators to return either an item or an iterator of items.
6361	Customized version of imap_unordered that sends chunks directly to func instead of iterating in each process.
6362	Generate fuzzy variations of a word using naive neighborhood algorithm.
6363	Compute fuzzy extensions of word.
6364	Compute fuzzy extensions of word that exist in index.
6365	Try to extract the bigger group of interlinked tokens.
6366	Display this help message.
6367	Print some useful infos from Redis DB.
6368	Print raw content of a DB key.
6369	Compute a geohash from latitude and longitude.
6370	Get document from index with its id.
6371	Get index details for a document by its id.
6372	Return document linked to word with higher score.
6373	Print the distance score between two strings using | as separator.
6374	Just sends the request using its send method and returns its response.
6375	Concurrently converts a list of Requests to Responses.
6376	Gets value of bits between selected range from memory
6377	Cast HArray signal or value to signal or value of type Bits
6378	Convert python slice to value of SLICE hdl type.
6379	Find files by pattern in directory
6380	Hdl convertible in operator, check if any of items in "iterable" equals "sigOrVal"
6381	Generate for loop for static items
6382	Logical shift left operation on a signal.
6383	Returns the number of bits required to store x-1.
6384	Check if number or constant is power of two
6385	Handle a case in a switch statement.
6386	c-like default of switch statement
6387	Register signals from interfaces for Interface or Unit instances.
6388	This method is called before first step of simulation.
6389	Called for every value change of any signal.
6390	Serialize HWProcess instance
6391	Walk all interfaces on unit and instantiate agent for every interface.
6392	If interface has associated clk return it otherwise try to find clk on parent recursively
6393	Return unique elements from an iterable based on a key function.
6394	Group elements of a collection by a key function, similar to itertools.groupby but without requiring initial sorting.
6395	Flatten nested lists, tuples, generators and maps up to a specified depth.
6396	Merge nested IfContainer from else branch to this IfContainer as elif and else branches.
6397	Remove unconnected signals from the netlist by identifying signals that are not driving anything and deleting them along with their unused drivers.
6398	Check if process is just unconditional assignments and it is useless to merge them.
6399	Try to merge procB into procA.
6400	Try to merge processes as much as possible.
6401	Handle write request received in monitor mode.
6402	Convert unit to RTL using specified serializer
6403	Resolve name for process and mark outputs of statements as not hidden
6404	Cut off drivers from statements
6405	Create new signal in this context.
6406	Build Entity and Architecture instance out of netlist representation
6407	Get maximum _instId from all assignments in statement
6408	Get the maximum statement id for sorting processes in architecture.
6409	Write data to interface.
6410	Note that this interface will be master
6411	Load declarations from _declr method for this element and its children, setting up interfaces, parameters, and directions.
6412	Generate signals for each interface that has no subinterface, returning existing signals if they already exist.
6413	Get name in HDL
6414	Sum of all width of interfaces in this interface
6415	Get sensitivity type for operator.
6416	Load all operands and process them by self._evalFn
6417	Cast signed-unsigned, to int or bool
6418	Reinterpret signal of type Bits to signal of type HStruct
6419	Count of complete words between two addresses
6420	Group transaction parts split on words into words.
6421	Pretty print interface with indentation and signature information.
6422	Convert transaction template into FrameTmpls
6423	Walk enumerated words in this frame
6424	Pack data into list of BitsVal of specified dataWidth
6425	Clean informations about enclosure for outputs and sensitivity of this statement.
6426	Discover enclosure for list of statements.
6427	Discover sensitivity for list of signals
6428	Get RtlNetlist context from signals.
6429	Update signal IO after reduce attempt
6430	After merging statements update IO, sensitivity and context
6431	Walk statements and compare if they can be merged into one statement list
6432	Merge statements in list to remove duplicated if-then-else trees.
6433	Merge two lists of statements into one, handling complex statements that require merging based on their rank, while simple statements (rank 0) are added directly to the result list.
6434	Simplify statements in the list
6435	After parent statement becomes event dependent, propagate event dependency flag to child statements.
6436	Assign parent statement and propagate dependency flags if necessary
6437	Append statements to this container under conditions specified by condSet.
6438	Disconnect this statement from signals and delete it from RtlNetlist context
6439	Create register in this unit.
6440	Create signal in this unit
6441	Disconnect internal signals so unit can be reused by parent unit
6442	Walk all simple values in HStruct or HArray
6443	Unpack structured data using a given structure template.
6444	Convert signum representation of a value, handling signed, unsigned, and vector cases with appropriate bit manipulation operations.
6445	Register sensitivity for process.
6446	Evaluate list of values as condition.
6447	Connect ports of simulation models by name
6448	Create value updater for simulation.
6449	Create value updater for simulation for value of array type
6450	Create HDL vector value.
6451	Gues resource usage by HWProcess
6452	Get value of parameter
6453	Set the value of this parameter.
6454	Generate flattened register map for HStruct
6455	Resolve ports of discovered memories
6456	Find out if this signal is something indexed.
6457	Construct value of this type.
6458	Cast value or signal of this type to another compatible type.
6459	Cast value or signal of this type to another type of same size.
6460	Walk parameter instances on this interface.
6461	Connect 1D vector signal to this structuralized interface.
6462	Concatenate all signals to one big signal, recursively
6463	Due to verilog restrictions, hardcode ROM memories into processes by converting array constants into process representations.
6464	Synthesize all subunits, make connections between them, build entity and component for this unit.
6465	Register interface in implementation phase
6466	Return sig and val reduced by & operator or None if it is not possible to statically reduce expression
6467	Return sig and val reduced by ^ operator or None if it is not possible to statically reduce expression
6468	Get root of name space
6469	Decide if this unit should be serialized or not and fix name to fit already serialized unit.
6470	Serialize HdlType instance
6471	Serialize IfContainer instance
6472	If negated, return original condition and negated flag.
6473	Construct SimBitsT with cache
6474	Get constant name for value, reusing name if same value was used before.
6475	Cut off statements which are driver of specified signal.
6476	Parse HArray type to this transaction template instance
6477	Parse HStruct type to this transaction template instance
6478	Parse any HDL type to this transaction template instance
6479	Return the width of an item in the original array for HArray-derived transactions.
6480	Walk fields in instance of TransTmpl
6481	Convert negative int to positive int which has same bits set
6482	Merge other statement to this statement
6483	Cached indent getter function
6484	Check if not redefining property on obj
6485	Register a parameter object on the interface level object.
6486	Update all parameters defined on self from otherObj.
6487	Register unit object on interface level object.
6488	Register interface object on interface level object.
6489	Register array of items on interface level object
6490	Returns a first driver if signal has only one driver.
6491	Recursively statistically evaluate result of this operator.
6492	Create operator with result signal
6493	Create a copy of this context with increased indent.
6494	Try connect src to interface of specified name on unit. Ignore if interface is not present or if it already has driver.
6495	Propagate "clk" clock signal to all subcomponents
6496	Propagate "clk" clock and negative reset "rst_n" signal to all subcomponents
6497	Propagate "clk" clock and reset "rst" signal to all subcomponents
6498	Propagate negative reset "rst_n" signal to all subcomponents
6499	Propagate reset "rst" signal to all subcomponents
6500	Iterate over bits in vector
6501	Always decide not to serialize obj
6502	Decide to serialize only first obj of its class.
6503	Decide to serialize only objs with uniq parameters and class
6504	Get all name hierarchy separated by '.'
6505	Delegate _make_association on items
6506	Create simulation model and connect it with interfaces of original unit and decorate it with agents.
6507	Create a simulation model for unit
6508	Reconnect model signals to unit to run simulation with simulation model but use original unit interfaces for communication
6509	Syntax sugar for HDL simulation unit testing with VCD output support.
6510	Process for injecting this callback loop into simulator.
6511	Connect to port item on subunit
6512	Connect internal signal to port item, only output port items will be connected.
6513	Connect signal from internal side of this component to this port.
6514	Return signal inside unit which has this port.
6515	Check if hdl process has event dependency on signal
6516	Schedule process on actual time with specified priority
6517	Add hdl process to execution queue
6518	Schedule combUpdateDoneEv event to let agents know that current delta step is ending and values from combinational logic are stable
6519	Apply stashed values to signals.
6520	Resolve write conflicts for signal and return appropriate updater function and event dependency flag.
6521	Delta step for combinational processes
6522	Delta step for event dependent processes
6523	Perform delta step by writing stacked values to signals
6524	Read value from signal or interface
6525	Write value to signal or interface.
6526	Add process to events with default priority on current time
6527	Run simulation for Unit instance
6528	Function to create variadic operator function
6529	Convert all ternary operators to IfContainers
6530	Serialize HWProcess objects as VHDL.
6531	Compute the Hamming distance between two hashes.
6532	Compute the average hash of the given image.
6533	Compute the hamming distance between two images.
6534	Set up the Vizio media player platform.
6535	Retrieve latest state of the device.
6536	Mute the volume.
6537	Increasing volume of the device.
6538	Decreasing volume of the device.
6539	Set the volume level.
6540	Restores the starting position.
6541	Gets the piece at the given square.
6542	Remove a piece from the given square if present.
6543	Sets a piece at the given square, replacing any existing piece.
6544	Checks if the given move would leave the king in check or put it into check.
6545	Checks if the king of the other side is attacked.
6546	Checks if the game is over due to checkmate, stalemate or fourfold repetition.
6547	Checks if the current position is a checkmate.
6548	Check if a game has ended due to fourfold repetition.
6549	Restores the previous position and returns the last move from the stack.
6550	Gets an SFEN representation of the current position.
6551	Parses a move in standard coordinate notation, makes the move, and puts it on the move stack. Raises `ValueError` if neither legal nor a null move. Returns the move.
6552	Returns a Zobrist hash of the current position.
6553	Gets the symbol `p`, `l`, `n`, etc.
6554	Creates a piece instance from a piece symbol. Raises `ValueError` if the symbol is invalid.
6555	Gets an USI string for the move.
6556	Parses an USI string and returns a new instance, raising `ValueError` if the USI string is invalid.
6557	Parse a string into multiple commits and yield each commit-dictionary as a generator.
6558	Parse a single commit by processing its components and returning a dictionary with all parsed information.
6559	Loads config from CLI arguments, patching Django's command parser to add config arguments and yielding default arguments after loading the config file.
6560	Load config then runs Django's execute_from_command_line
6561	Adds argument for config to existing argparser
6562	Find config file and set values
6563	Dumps initial config in YAML format with documentation and help comments.
6564	Documents values in markdown
6565	Converts string to type requested by `cast_as`
6566	Returns all dates from first to last included.
6567	Fast %Y-%m-%d parsing.
6568	Load data from a file or URL, handling both local files and ZIP archives.
6569	Fill missing rates of a currency with the closest available ones.
6570	Fill missing rates of a currency using linear interpolation of the two closest available rates.
6571	Get a rate for a given currency and date.
6572	Convert amount from one currency to another currency.
6573	Group iterable by n elements.
6574	Animate given frames for a set number of iterations with specified interval and name.
6575	Return record `n` as 1,024 bytes; records are indexed from 1.
6576	Write `data` to file record `n`; records are indexed from 1.
6577	Return a memory-map of the elements from start to end index.
6578	Return the text inside the comment area of the file.
6579	Add a new array to the DAF file.
6580	Close this SPK file.
6581	Compute the component values for the time `tdb` plus `tdb2`.
6582	Close this file.
6583	Map the coefficients into memory using a NumPy array.
6584	Generate angles and derivatives for time `tdb` plus `tdb2`.
6585	Visit a function call.
6586	Process binary operations while processing the first logging argument.
6587	Process dict arguments.
6588	Process f-string arguments.
6589	Process keyword arguments.
6590	Process except blocks.
6591	Heuristic to decide whether an AST Call is a logging call.
6592	Helper to get the exception name from an ExceptHandler node in both py2 and py3.
6593	Check if value has id attribute and return it.
6594	Checks if the node is a bare exception name from an except block.
6595	Reports a violation if exc_info keyword is used with logging.error or logging.exception.
6596	Delete file from database only if needed.
6597	Edit the download-link inner text.
6598	Returns the freshly rendered content for the template and context described by the PDFResponse.
6599	Returns a PDF response with a template rendered with the given context.
6600	Given a unicode string, will do its dandiest to give you back a valid ascii charset string you can use in HTTP headers and the like.
6601	Sets defaults for ``class Meta`` declarations.
6602	Converts a given string from CamelCase to under_score.
6603	Builds all indices, listed in model's Meta class.
6604	Load and parse a .csv file into PriceModel objects with specified currency.
6605	Loads the content of the text file.
6606	Parse a CSV line into a price element
6607	Translate the incoming symbol into locally-used format.
6608	Loads all symbol maps from db
6609	Reuses the same db session
6610	Add individual price.
6611	Import prices from CSV file
6612	Displays the last price for a given symbol or all securities if no symbol is provided.
6613	Display all prices.
6614	Download the latest prices.
6615	Delete old prices, leaving just the last.
6616	Return the default session. The path is read from the default config.
6617	Creates a symbol mapping and saves it to the database.
6618	Displays all symbol maps.
6619	Finds the map by in-symbol.
6620	Read text lines from a file.
6621	Map the price entity to a PriceModel object, converting currency, datetime, and value properties.
6622	Parse into the Price entity, ready for saving
6623	Read the config file.
6624	Gets the default config path from resources.
6625	Copy the config template into user's directory
6626	Returns the path where the active config file is expected.
6627	Reads the contents of the config file.
6628	Sets a value in config
6629	Retrieves a config value
6630	Save the config file.
6631	Splits the symbol into namespace, symbol tuple
6632	Creates a new price record
6633	Adds the price to the database, updating existing prices or inserting new ones.
6634	Download and save price online.
6635	Returns the current db session
6636	Fetches all the prices for the given date and currency arguments.
6637	Returns the latest price on the specified date.
6638	Prune historical prices for all symbols, leaving only the latest. Returns the number of items removed.
6639	Delete all but the latest available price for the given symbol and return the number of items removed.
6640	Downloads and parses the price for a given symbol and currency using the specified agent.
6641	Fetches the securities that match the given filters
6642	Return partial of original function call
6643	Replace child nodes on original function call with their partials
6644	Descend depth first into all child nodes
6645	Decorator for multi to remove nodes for original test functions from root node
6646	Verify that a part that is zoomed in on has equal length.
6647	Test whether abstract syntax trees match between the student and solution code.
6648	Test the student code to check if they typed a specific pattern or text.
6649	Checks whether student imported a package or function correctly.
6650	Search student output for a pattern.
6651	Check if the correct printouts occurred in the student's code by comparing against the solution's print output.
6652	Check whether the submission did not generate a runtime error.
6653	Test multiple choice exercise.
6654	Check whether a particular function is called.
6655	Get a value from process, return tuple of value, res if successful
6656	Override the solution code with something arbitrary.
6657	Check whether an object is an instance of a certain class.
6658	Return copy of instance, omitting entries that are EMPTY
6659	Dive into nested tree and create a child state with subtree.
6660	Getter for Parser outputs.
6661	When dispatched on loops, has_context the target vars are the attribute _target_vars.
6662	When dispatched on with statements, has_context loops over each context manager.
6663	Return child state with name part as its ast tree
6664	Return child state with indexed name part as its ast tree.
6665	Check whether a function argument is specified.
6666	When checking a function definition or lambda function, prepare to verify the function call by replacing the function name with the target function/lambda and setting up the appropriate message for verification.
6667	Return the true anomaly at each time.
6668	Configures this extension with the given app by registering a ``teardown_appcontext`` call and attaching this ``LDAP3LoginManager`` to it as ``app.ldap3_login_manager``.
6669	Configures this extension with a given configuration dictionary.
6670	Add an additional server to the server pool and return the freshly created server.
6671	Remove a connection from the appcontext.
6672	Cleanup after a request. Close any open connections.
6673	An abstracted authentication method that decides between direct bind and search bind based on configuration.
6674	Performs direct bind authentication for a user with the given username and password, returning an AuthenticationResponse object with the authentication status and user information.
6675	Performs a search bind to authenticate a user by finding their DN through LDAP search and then attempting to bind with their credentials.
6676	Gets a list of groups a user at dn is a member of.
6677	Gets info about a user specified at dn.
6678	Gets info about a user at a specified username by searching the Users DN.
6679	Gets an object at the specified DN and returns it.
6680	Convenience property for externally accessing an authenticated connection to the server.
6681	Make a connection to the LDAP Directory.
6682	Make a connection.
6683	Destroys a connection by removing it from the appcontext and unbinding it.
6684	Query a s3 endpoint for an image based on a string.
6685	Search across labels with optional key-value filtering.
6686	Query a GitLab artifacts folder for a list of images. If query is None, collections are listed.
6687	Perform a "show all" search to find and display artifact URLs from successful jobs in a specified collection.
6688	Announce the client and database information if not in quiet mode, and call the _speak method.
6689	Announce the client itself unless the command is in a predefined list.
6690	Update secrets for the Google Drive client, including credentials and root path, with error handling if secrets are not found.
6691	Update headers with a token & other fields.
6692	Require secrets ensures that the client has the secrets file and specifically has one or more parameters defined. If params is None, only a check is done for the file.
6693	Stream content from a URL to a file with optional progress indication and SSL verification.
6694	Stream a file from a URL to a local file with progress tracking.
6695	Update HTTP headers with a new authorization token using AWS ECR authentication.
6696	Create a folder at the drive root. If the folder already exists, it is simply returned.
6697	Attempt to read the detail provided by the response, default to using the reason if none.
6698	Given a bucket name and a client that is initialized, get or create the bucket.
6699	Update secrets by reading from credential file and updating client secrets and API base.
6700	Initialize clients by obtaining transfer and access tokens, then create a transfer client.
6701	Load the secrets credentials file with the Globus OAuthTokenResponse.
6702	Return logs for a particular container, or the most recent log if no name is specified.
6703	Return a list of logs by filtering files that end with '.log' extension from the bucket.
6704	Create an endpoint folder, catching the error if it exists.
6705	Return a transfer client for the user.
6706	Perform a "list all" search to return all objects with custom properties value type set to container, including their IDs and URIs.
6707	Print the status for all or one of the backends.
6708	Add the variable to the config.
6709	Remove a variable from the config, if found.
6710	Activate a backend by adding it to the .sregistry configuration file.
6711	Delete a backend and update the secrets file.
6712	Update a base based on an image name by detecting a registry and updating the base accordingly.
6713	Generate a base64 encoded header for basic authentication by encoding a username and password and adding them to the Authorization header.
6714	Generate a signature for a request using payload and client secret.
6715	Authorize a client by generating a header signature with HMAC-SHA256 encryption.
6716	Delete request, use with caution.
6717	head request, typically used for status code retrieval, etc.
6718	A wrapper for get to paginate results.
6719	Verify the requests call and return True or False, with a warning message if SSL verification is disabled for testing purposes.
6720	Delete an image from Singularity Registry.
6721	Get version by way of sregistry.version, returns a lookup dictionary with several global variables without needing to import singularity.
6722	Get requirements by reading in requirements and versions from the lookup.
6723	Get the singularity version for a build by checking environment variable first, then system version.
6724	Check if software is installed and return True if available.
6725	Get the installation directory of the application.
6726	Return the robot.png thumbnail from the database folder, using a user-exported image if available.
6727	Run a command using subprocess and return its output and return code.
6728	This is a wrapper around the main client.get_metadata to first parse a Dropbox FileMetadata into a dictionary, then pass it on to the primary get_metadata function.
6729	Update secrets by retrieving Dropbox token from environment and creating a client.
6730	Print the output to the console and optionally to a file, showing status information, logs, and optional public URL.
6731	kill is a helper function to call the "kill" function of the client, meaning we bring down an instance.
6732	List a specific log for a builder, or the latest log if none provided.
6733	Get a listing of collections that the user has access to.
6734	Update secrets by looking for user and token in the environment, cache values, and set up Swift connection based on authentication type.
6735	Update secrets by reading from environment variable or exit with error.
6736	Get the correct client depending on the driver of interest.
6737	Give the user an ipython shell, optionally with an endpoint of choice.
6738	Get manifests for a repository by calling get_manifest for each schema version (v1, v2, and config), including image layers and metadata. If a digest is not provided, latest is used. Returns a dictionary of manifests indexed by schema version.
6739	Get the manifest for a Docker image repository.

The function retrieves an image manifest for a specified repository and tag, supporting different manifest versions (v1, v2, and config). It constructs the appropriate URL and HTTP headers based on the requested version, makes a GET request to fetch the manifest, and returns the manifest data along with its self-link. If the request fails, it returns None.

Parameters:
- repo_name: reference to the <username>/<repository>:<tag> to obtain
- digest: a tag or shasum version (optional)
- version: one of v1, v2, and config (defaults to v1)
6740	Determine the user preference for atomic download of layers and return the appropriate cache directory path.
6741	Extract the environment from the manifest, or return None.
6742	Update the base, including the URL for GitLab and the API endpoint.
6743	Update secrets will update metadata needed for pull and search.
6744	Return metadata dictionary containing Gitlab artifacts, API base, and job information.
6745	Get all settings, either for a particular client if a name is provided, or across clients.
6746	a wrapper to get_and_update, but if not successful, will print an error and exit.
6747	Just update a setting, doesn't need to be returned.
6748	Authorize a client by generating and returning an HMAC-SHA256 signature based on the payload and client token.
6749	List builders or instances for a project, filtering those that start with "sregistry-builder" and display them in a table format.
6750	Load a particular template based on a name, returning matching templates or logging info if no matches found.
6751	Get the IP address of an inserted instance with retry logic.
6752	Run a build by inserting an instance with retry on failure.
6753	Return a list of containers by filtering blobs based on metadata field "type" with value "container".
6754	Perform a "list all" search to retrieve all containers with custom metadata value of "container" and display them in a table format.
6755	The list command corresponds with listing images for an external resource.
6756	Sharing an image means sending a remote share from an image you control to a contact, usually an email.
6757	Initialize the database with the specified path, set up the database engine and session, and create all necessary database tables.
6758	Get default build template.
6759	Search for containers in endpoints based on query and endpoint parameters.
6760	List all endpoints and display them in a table format for user selection.
6761	List files within a specified endpoint, optionally filtering by query and displaying results in a formatted table.
6762	Share an image by creating a shareable link using the client and return the URL.
6763	Read client secrets for private or protected registries, using defaults if none found.
6764	Get version 1 of the Google Compute and Storage services.
6765	Delete an object from a bucket.
6766	Delete an image from Google Storage.
6767	Destroy an instance by stopping the build process and removing the instance.
6768	Get a dictionary of subparsers to help with printing help.
6769	Generate a robot name using descriptor, noun, and random numbers.
6770	Get a temporary directory for an operation, prioritizing requested directories over environment variables.
6771	Extract a tar archive to a specified output folder.
6772	Extract an archive using blob2oci tool with whiteout file handling.
6773	Find the SHA256 hash string of a file.
6774	Open a file and read its content, returning either all lines or the entire content as a string.
6775	Read a JSON file and return its contents as a dictionary.
6776	Clean up a list of files by deleting them if they exist.
6777	Push an image to an S3 endpoint.
6778	Get a collection if it exists. If it doesn't exist, create it first.
6779	Get a collection by name, returning None if it doesn't exist.
6780	Get a container by name, collection_id, tag, and optional version, otherwise return None.
6781	List local images in the database, optionally with a query.
6782	Inspect a local image in the database and print its details.
6783	Rename an image file while maintaining its storage path.
6784	Move an image from its current location to a new path.
6785	Remove an image from the database and filesystem.
6786	Add a container to the registry, including creating or retrieving a collection.
6787	Push an image to Singularity Registry.
6788	Parse a recipe header and return either the complete header line or just the value portion.
6789	Find a single recipe file matching a pattern and return an updated manifest with its metadata.
6790	Given a list of files, copy them to a temporary folder, compress into a .tar.gz, and rename based on the file hash. Return the full path to the .tar.gz in the temporary folder.
6791	Run a build by creating a build with retry on failure, monitor its status, and update blob metadata and visibility on success.
6792	Update blob metadata with artifact file name, dependencies, and image hash from Google build response.
6793	Format a container name by removing special characters and converting to lowercase.
6794	Determine if color should be added to a print by checking terminal support and user preferences.
6795	Determine if a level should print to stderr, includes all levels but INFO and QUIET.
6796	Write a message to a stream, first checking the encoding.
6797	Create and display a table with specified rows and column width, handling both dictionary and list inputs.
6798	Push an image to a Globus endpoint.
6799	Return a default template for some function in sregistry. If there is no template, None is returned.
6800	Return the image manifest via the AWS client, saved in self.manifest.
6801	Get a particular build template, by default returning templates based on package managers.
6802	Update secrets will take a secrets credential file from .sregistry or SREGISTRY_CLIENT_SECRETS environment variable and update the current client secrets as well as the associated API base, including reading client secrets and handling credential cache.
6803	Generate a repr string for a class, including positional arguments and keyword arguments that differ from their defaults.
6804	Translate S3 errors to FSErrors.
6805	Create a S3File backed with a temporary file.
6806	Builds a gravatar url from a user or email
6807	Builds a URL to a gravatar from an email address.
6808	Returns True if the user has a gravatar, False if otherwise
6809	Builds a url to a gravatar profile from an email address.
6810	Generator for blocks for a chimera block quotient
6811	Extract blocks from a graph and return a block-quotient graph according to acceptability functions.
6812	Return a set of resonance forms as SMILES strings, given a SMILES string.
6813	Enumerate all possible resonance forms and return them as a list.
6814	Apply a series of Normalization transforms to correct functional groups and recombine charges.
6815	Repeatedly apply normalization transform to molecule until no changes occur.
6816	Return a canonical tautomer by enumerating and scoring all possible tautomers.
6817	Return log messages for a given SMILES string using the default validations.
6818	Break covalent bonds between metals and organic atoms under certain conditions.
6819	Return a standardized canonical SMILES string given a SMILES string.
6820	Return a set of tautomers as SMILES strings, given a SMILES string.
6821	Return a standardized canonical tautomer SMILES string given a SMILES string.
6822	Return a standardized version of the given molecule through a series of processing steps including sanitization, removal of hydrogen atoms, metal disconnection, normalization, reionization, and stereochemistry assignment.
6823	Return the tautomer parent of a given molecule.
6824	Return the fragment parent of a given molecule.
6825	Return the stereo parent of a given molecule.
6826	Return the isotope parent of a given molecule by replacing all atoms with the most abundant isotope for that element.
6827	Return the charge parent of a given molecule.
6828	Return the super parent of a given molecule by applying standardization and removing fragment, charge, isotope, stereochemistry and tautomer information.
6829	Main function for molvs command line interface.
6830	Return the molecule with specified fragments removed.
6831	Return the largest covalent unit.
6832	Example program integrating an IVP problem of van der Pol oscillator
6833	Retrieves statistics from a GitHub organization using given credentials, with options to force refresh and specify repository type. Saves data to JSON and CSV files while tracking API rate limit usage.
6834	Retrieves the number of members of the organization.
6835	Retrieves the number of teams of the organization.
6836	Retrieves info about the repos of the current organization.
6837	Retrieves the number of contributors to a repo in the organization and updates unique contributor lists.
6838	Retrieves the number of pull requests on a repo in the organization.
6839	Retrieves the number of closed issues for a repository.
6840	Checks to see if the given repo has a ReadMe, returns 'MD' if found, 'MISS' if not found.
6841	Checks to see if the given repo has a top level LICENSE file.
6842	Retrieves the number of commits to a repo in the organization, handling cached data and returning the commit count.
6843	Writes stats from the organization to JSON.
6844	Updates the total.csv file with current data.
6845	Updates languages.csv file with current data.
6846	Check if a directory exists and create it if it doesn't, using the specified file path.
6847	Removes all rows of the associated date from the given csv file. Defaults to today.
6848	Returns a list of the names of US Government GitHub organizations based on government.github.com/community.
6849	Create a github3.py session for a GitHub Enterprise instance.
6850	Check API limits and sleep if necessary waiting for API to reset before returning.
6851	Create a GitHub session for making requests.
6852	Yields GitHub3.py repo objects for provided orgs and repo names, with options for public-only access and special mode for all repositories.
6853	Retrieves an organization via given org name. If given empty string, prompts user for an org name.
6854	Writes stargazers data to file.
6855	Create CodeGovProject object from GitLab Repository
6856	Create CodeGovProject object from DOE CODE record
6857	A helper function to look up license object information from GitHub API names.
6858	Retrieves the traffic for the repositories of the given organization.
6859	Retrieves the releases for the given repo in JSON.
6860	Retrieves and stores referrer data from JSON, aggregating counts and unique visitors across repositories.
6861	Retrieves data from json and stores it in the supplied dict. Accepts 'clones' or 'views' as type.
6862	Writes all traffic data to file in JSON form.
6863	Writes all traffic data to file.
6864	Checks the given csv file against the json data scraped for the given dict. It will remove all data retrieved that has already been recorded so we don't write redundant data to file. Returns count of rows from file.
6865	Writes given dictionary data to a file with specified formatting and structure.
6866	Writes the referrers data to file.
6867	Converts a DOE CODE .json file into DOE CODE projects and yields DOE CODE records from the file.
6868	Yields DOE CODE records from a DOE CODE .json URL response and converts the JSON response into DOE CODE projects.
6869	Yields DOE CODE records based on provided input sources.
6870	Performs a login with given credentials, handles authentication and two-factor authentication, and stores the authentication token for future logins.
6871	Retrieves the emails of the members of the organization.
6872	Writes the user emails to file.
6873	Return a connected Bitbucket session.
6874	Return a connected GitLab session.
6875	Yields Gitlab project objects for all projects in Bitbucket
6876	Given a Git repository URL, returns the number of lines of code based on cloc.
6877	Compute the labor hours using the COCOMO II model based on source lines of code.
6878	Prune "None" or empty string values from dictionary items.
6879	Read a 'pretty' formatted GraphQL query file into a one-line string.
6880	Submit a GitHub GraphQL query from a file.
6881	Send a curl request to GitHub.
6882	Wait until the given UTC timestamp.
6883	Makes a pretty countdown.
6884	Load a JSON data file into the internal JSON data dictionary.
6885	Write the internal JSON data dictionary to a JSON data file.
6886	Creates the TFS Connection Context
6887	Create a project analysis client for a Team Foundation Server Enterprise connection instance.
6888	Create a core_client.py client for a Team Foundation Server Enterprise connection instance.
6889	Creates a TFS Git Client to pull Git repo info.
6890	Creates a TFS TFVC Client to pull TFVC repo info.
6891	Returns a list of all git repos for the supplied project within the supplied collection.
6892	Returns a list of all tfvc branches for the supplied project within the supplied collection.
6893	Does setup such as login, printing API info, and waiting for GitHub to build the commit statistics. Then gets the last year of commits and prints them to file.
6894	Calculate total commits by traversing back through weekly commits from the last year, updating commit counts from most recent to oldest.
6895	Writes the weeks with associated commits to file.
6896	Instantiate and configure backends.
6897	Return MetricsInterface instance with specified name.
6898	Record a timing value.
6899	Contextmanager for easily computing timings.
6900	Timer decorator for easily computing timings.
6901	Generate a tag for use with the tag backends.
6902	Report a timing.
6903	Report a histogram.
6904	Roll up stats and log them.
6905	Make an annotation value that can be used to sort by an enum field.
6906	Convert a string from the database into an Enum value
6907	Convert a string from a form into an Enum value.
6908	Convert an Enum value into a string for the database.
6909	Resolve a path for an object and return the corresponding elements based on object type and path criteria.
6910	Project USLs on dictionary.
6911	Returns the mean value.
6912	Record an event with the meter. By default it will record one event.
6913	Returns the mean rate of the events since the start of the process.
6914	Record an event with the derive.
6915	Send metric and its snapshot.
6916	Serialize and send available measures of a metric.
6917	Compose a statsd compatible string for a metric's measurement.
6918	Add a metric to the buffer.
6919	Get method that raises MissingSetting if the value was unset.
6920	Convert UTF-8 encoded data to a string format suitable for JSON processing.
6921	Base method to fetch values and to set defaults in case they don't exist.
6922	Convert a set of human codes to a dictionary mapping codes to ExactOnline GUIDs.
6923	Get the "current" division and return a dictionary of divisions so the user can select the right one.
6924	Optionally supply a list of ExactOnline invoice numbers and return a dictionary mapping them to foreign (YourRef) invoice numbers.
6925	Solve a Sudoku grid inplace using SAT solving.
6926	Create Django class-based view from injector class.
6927	Create Django form processing class-based view from injector class.
6928	Create Flask method based dispatching view from injector class.
6929	Create DRF class-based API view from injector class.
6930	Create DRF generic class-based API view from injector class.
6931	Create DRF model view set from injector class.
6932	Receive a streamer for a given file descriptor.
6933	Called by the event loop whenever the fd is ready for reading.
6934	Actual closing code, both from manual close and errors.
6935	Finalize closing.
6936	Add a new watching rule.
6937	Stop watching a given rule.
6938	Actual rule setup.
6939	Start the watcher, registering new watches if any.
6940	Fetch an event from the stream, skipping events for removed watches.
6941	Respond to ``nsqd`` that you need more time to process the message.
6942	Update the timer to reflect a successful call.
6943	Update the timer to reflect a failed call
6944	Closes all connections and stops all periodic callbacks.
6945	Used to identify when buffered messages should be processed and responded to.
6946	Adds a connection to ``nsqd`` at the specified address.
6947	Trigger a query of the configured nsq_lookupd_http_addresses.
6948	Dynamically adjust the reader max_in_flight. Set to 0 to immediately disable a Reader
6949	Called when a message has been received where msg.attempts > max_tries
6950	Listen for the named event with the specified callback.
6951	Stop listening for the named event via the specified callback.
6952	Execute the callbacks for the listeners on the specified event with the supplied arguments.
6953	Publish a message to nsq.
6954	Transform data features to a higher dimension using the specified mode and degree.
6955	Make prediction on input data using trained model parameters.
6956	Theta sigmoid function
6957	Retrieves statistics from a Trimmomatic log file.
6958	Cleans the working directory of unwanted temporary files.
6959	Merges the default adapters file in the trimmomatic adapters directory and returns the path to the merged file.
6960	Main executor of the trimmomatic template.
6961	Parse samtools depth file and create dictionaries with coverage per position for each plasmid.
6962	Function that handles the inputs required to parse depth files from bowtie and dumps a dict to a json file that can be imported into pATLAS.
6963	Sets the path to the appropriate jinja template file.
6964	Sets the main channel names based on the provided input and output channel suffixes.
6965	Returns the main raw channel for the process.
6966	Wrapper to the jinja2 render method from a template file
6967	Class property that returns a populated template string
6968	General purpose method that sets the main channels

Sets the main channels for the process by appending the process ID to channel prefix strings and updating the process context with input, output, and template information.
6969	Updates the forks attribute with the sink channel destination
6970	General purpose method for setting a secondary channel that creates forks from a source channel to multiple sink channels, handling main channels specially to avoid overlapping output channels by modifying the output channel name and updating the forks attribute.
6971	Updates the directives attribute from a dictionary object.
6972	General method for setting the input channels for the status process
6973	Sets the main input channels of the pipeline and their forks.
6974	Adds secondary inputs to the start of the pipeline.
6975	Sets the initial definition of the extra input channels.
6976	Attempts to retrieve the coverage value from the header string by splitting on "_" and searching backwards for the first float value.
6977	Parse an assembly fasta file and populate contig data.
6978	Get GC content and proportions.
6979	Filters the contigs of the assembly according to user provided comparisons.
6980	Returns the length of the assembly, without the filtered contigs.
6981	Writes the assembly to a new file, optionally filtered to exclude certain IDs.
6982	Writes a report with the test results for the current assembly.
6983	Recursively removes nested brackets from fork strings using regular expressions.
6984	Performs sanity checks on a pipeline string to ensure each fork contains a lane token '|' and no duplicated processes within the same fork.
6985	Wrapper that performs all sanity checks on the pipeline string
6986	Parses a pipeline string into a list of dictionaries with the connections between processes.
6987	Returns the lane of the last process that matches fork_process
6988	From a raw pipeline string, get a list of lanes from the start of the current fork.
6989	Connects a linear list of processes into a list of dictionaries.
6990	Makes the connection between a process and the first processes in the lanes to which it forks.
6991	Returns the pipeline string with unique identifiers and a dictionary with references between the unique keys and the original values.
6992	Removes unique identifiers and replaces them with original process names in parsed pipelines.
6993	Checks whether the trace and log files are available.
6994	Parses the trace file header and retrieves the positions of each column key.
6995	Converts a hms string into seconds.
6996	Converts size string into megabytes
6997	Parses the .nextflow.log file and retrieves the complete list of processes, including pipeline name and tags.
6998	Clears inspect attributes when re-executing a pipeline
6999	Checks whether the channels to each process have been closed.
7000	Method used to retrieve the contents of a log file into a list.
7001	Assess whether the cpu load or memory usage is above the allocation
7002	Updates the process stats with information from the processes.
7003	Method that parses the nextflow log file once and updates the submitted number of samples for each process
7004	Wrapper method that updates class attributes from trace and log files by calling appropriate parsing methods with retry logic for file operations.
7005	Displays the default pipeline inspection overview using curses interface with keybindings and real-time updates.
7006	Provides curses scroll functionality.
7007	Provides curses horizontal padding
7008	Returns a list with the last ``n`` lines of the nextflow log file
7009	Prepares the first batch of information containing static information such as the pipeline file and configuration files.
7010	Function that opens the dotfile named .treeDag.json in the current working directory and returns it as a dictionary, or returns an empty dictionary if the file is not found or is corrupted.
7011	Gets the hash of the nextflow file by combining pipeline file hash with working directory and hostname hash.
7012	Gets the nextflow file path from the nextflow log file by searching for the nextflow run command.
7013	Main executor of the split_fasta template.
7014	Parses a nextflow trace file, searches for processes with a specific tag and sends a JSON report with the relevant information.
7015	Brews a given list of processes according to the recipe.
7016	Returns a pipeline string from a recipe name.
7017	Method that iterates over all available recipes and prints their information to the standard output.
7018	Validate pipeline string by checking for forbidden characters.
7019	Builds the upstream pipeline of the current process by checking upstream processes and adding them to the current pipeline fragment if they are provided in the process list.
7020	Builds the downstream pipeline of the current process by checking for downstream processes and adding them to the current pipeline fragment.
7021	Builds the possible forks and connections between the provided processes.
7022	Main method to run the automatic pipeline creation
7023	Generates a component string based on the provided parameters and directives
7024	Writes a report from multiple samples.
7025	Main executor of the trimmomatic_report template.
7026	Removes whitespace from the assembly contig names
7027	Cleans temporary fastq files, removing symlinks and their sources.
7028	Public method for parsing abricate output files.
7029	Parse a single abricate output file and populate the storage attribute with its contents.
7030	General purpose filter iterator that filters entries based on custom filters with support for database filtering and field selection.
7031	Tries to retrieve contig id from a fasta header string, returning the original string if unable to extract the id.
7032	Generates the JSON report to plot the gene boxes.
7033	Writes the JSON report to a json file
7034	Main executor of the assembly_report template.
7035	Parse an assembly file in fasta format and populate the Assembly.contigs attribute with data for each contig in the assembly.
7036	Generates a CSV report with summary statistics about the assembly.
7037	Returns the mapping between sliding window points and their contigs, and the x-axis position of contig.
7038	Get proportion of GC from a string.
7039	Calculates a sliding window of the GC content for the assembly.
7040	Main executor of the skesa template.
7041	Writes a JSON report with quality statistics data.
7042	Returns the trim index from a boolean list that minimizes the number of True elements at the extremities.
7043	Assess the optimal trim range for a given FastQC data file.
7044	Get the optimal read trim range from data files of paired FastQ reads.
7045	Parses a FastQC summary report file and returns it as a dictionary.
7046	Checks the health of a sample from the FastQC summary file.
7047	Parse a bowtie log file and populate alignment statistics attributes.
7048	Parses the process string and returns the process name and its directives.
7049	Automatically adds a dependency of a process by inserting a template into the process list and adapting input/output lanes and process IDs.
7050	Searches the process tree backwards in search of a provided process template within specified parent lanes and returns True if found, otherwise False.
7051	Adds the header template to the master template string
7052	Adds the footer template to the master template string
7053	Sets the main channels for the pipeline by parsing processes and configuring input/output channels, main input forks, and secondary channels.
7054	Sets the main raw inputs and secondary inputs on the init process.
7055	Sets the secondary channels for the pipeline by iterating over the secondary_channels dictionary and configuring secondary links for each source.
7056	Compiles all status channels for the status compiler process.
7057	Returns the nextflow resources string from a dictionary object for process resource directives.
7058	Returns the nextflow containers string from a dictionary object for injection in the nextflow config file template.
7059	Returns the nextflow params string from a dictionary object.
7060	Returns the merged nextflow params string from a dictionary object.
7061	Returns the nextflow manifest config string to include in the config file from the information on the pipeline.
7062	This method iterates over all processes in the pipeline and populates the nextflow configuration files with the directives of each process.
7063	Writes dag to output file
7064	Write pipeline attributes to json and render graphical DAG output.
7065	Wrapper method that writes all configuration files to the pipeline directory.
7066	Export pipeline params as a JSON to stdout
7067	Export pipeline directives as a JSON to stdout
7068	Export all dockerhub tags associated with each component given by the -t flag.
7069	Main pipeline builder

This method builds the Nextflow pipeline by constructing the template attribute that contains the nextflow code. It generates the header, sets up channels, initializes processes, configures secondary channels and configurations, and writes the final code to a nextflow file.
7070	Returns a kmer list based on the provided kmer option and max read len.
7071	Main executor of the SPAdes template.
7072	Returns a hash of the reports JSON file or report ID based on whether watching mode is enabled.
7073	Parses the nextflow trace file and retrieves the path of report JSON files that have not been sent to the service yet.
7074	Parses nextflow log file and updates the run status.
7075	Sends a PUT request with report JSON files from the report_queue attribute.
7076	Sends a POST request to initialize the live reports.
7077	Sends a delete request for the report JSON hash and handles connection errors.
7078	Generates an adapter file for FastQC from a fasta file.
7079	Main executor of the fastq template.
7080	Send dictionary to output json file.
7081	Main function that allows to dump a mash dist txt file to a json file
7082	Writes versions JSON for a template file
7083	Converts top results from mash screen txt output to json format.
7084	Enable colored printing with customizable color and message.
7085	Handles the dictionary of attributes of each Process class to print to stdout lists of all the components or the components specified by the user.
7086	Function that collects all processes available and stores a dictionary of the required arguments of each process class to be passed to procs_dict_parser
7087	Guesses the compression type of an input file by checking binary signatures at the beginning of the file.
7088	Get range of the Unicode encode range for a given string of characters.
7089	Returns the valid encodings and phred scores for a given Unicode code range.
7090	Parses a TSV file with coverage information into objects and returns coverage dictionary, total size, and total coverage.
7091	Generates a filtered assembly file based on minimum coverage threshold.
7092	Uses Samtools to filter a BAM file according to minimum coverage.
7093	Evaluates the minimum coverage threshold from the value provided in coverage_opt.
7094	Returns the number of nucleotides and the size per contig for the provided assembly file path.
7095	Main executor of the process_assembly_mapping template.
7096	Convert a CamelCase string into a snake_case one.
7097	Collects Process classes and return dict mapping templates to classes
7098	Main executor of the process_newick template.
7099	Find data points on the convex hull of a supplied data set.
7100	Return data points that are most similar to basis vectors W
7101	Apply median filter along the first axis of the feature matrix X.
7102	Creates a gaussian kernel following Foote's paper.
7103	Computes the self-similarity matrix of X.
7104	Computes the novelty curve from the self-similarity matrix and gaussian kernel.
7105	Apply Gaussian filter along the specified axis of the feature matrix X.
7106	Computes the novelty curve from the structural features.
7107	Shifts circularly the X square matrix to create a time-lag matrix.
7108	Time-delay embedding with m dimensions and tau delays.
7109	Formats the plot with the correct axis labels, title, ticks, and other formatting options.
7110	Plot all the boundaries from multiple algorithms.
7111	Plots all the labels.
7112	Plots the results of one track, with ground truth if it exists.
7113	Plots a given tree containing hierarchical segmentation with optional frame-rate resolution and custom title.
7114	Returns a set of segments defined by the bound_idxs.
7115	Convert a list of feature segments into a list of 2D-Fourier Magnitude Coefficients using maximum segment size and zero padding.
7116	Main function to compute the segment similarity of file file_struct.
7117	Fit the OLDA model.
7118	Partial-fit the OLDA model.
7119	Reads the boundary times and the labels.
7120	Finds the correct estimation from all the estimations contained in a JAMS file given the specified arguments.
7121	Saves the segment estimations in a JAMS file.
7122	Gets all the possible boundary algorithms in MSAF.
7123	Gets the configuration dictionary from the current parameters of the algorithms to be evaluated.
7124	Gets the files of the given dataset.
7125	Reads hierarchical references from a jams file.
7126	Reads the duration of a given features file.
7127	Writes results to file using the standard MIREX format.
7128	Gets the desired dataset file.
7129	Load a ground-truth segmentation and align times to the nearest detected beats.
7130	Estimates the beats using librosa.
7131	Reads the annotated beats if available.
7132	Make the features beat-synchronous.
7133	Reads the features from a file and stores them in the current object.
7134	Saves features to file.
7135	Returns the parameter names for these features, avoiding the global parameters.
7136	Computes the framesync times based on the framesync features.
7137	This getter returns the frame times, for the corresponding type of features.
7138	This getter will compute the actual features if they haven't been computed yet.
7139	Selects the features from the given parameters.
7140	This method obtains the actual features.
7141	Post processes the estimations from the algorithm, removing empty segments and making sure the lengths of the boundaries and labels match.
7142	Main function to sweep parameters of a certain algorithm.
7143	Print all the results.
7144	Computes the results by using the ground truth dataset for either hierarchical or flat evaluation.
7145	Computes the information gain of the estimated file from annotated and estimated intervals.
7146	Process a single track by evaluating audio files using specified boundary and label algorithms with given configuration.
7147	Based on the config and the dataset, get the file name to store the results.
7148	Main process to evaluate algorithms' results.
7149	Add a new variable to msaf.config
7150	Computes all features for the given file.
7151	Computes the features for the selected dataset or file.
7152	Return the average log-likelihood of data under a standard normal distribution.
7153	Log-normalizes features such that each vector is between min_db to 0.
7154	Normalizes features such that each vector is between floor to 1.
7155	Normalizes the given matrix of features according to the specified normalization type.
7156	Gets the time frames and puts them in a numpy array.
7157	Removes empty segments if needed.
7158	Sonifies the estimated times into the output file.
7159	Synchronizes labels from old boundary indices to new boundary indices by unfolding and median filtering.
7160	Process a level of segmentation and convert it into times.
7161	Align the end of hierarchies to end at the same exact second when they have the same duration within a certain threshold.
7162	Compute distances of a specific data point to all other samples.
7163	Estimates the optimal number of clusters (K) using K-means and Bayesian Information Criterion (BIC) by sweeping different values of K and selecting the one with optimal BIC.
7164	Returns the data with a specific label_index, using the previously learned labels.
7165	Runs k-means clustering and returns the cluster labels for the input data.
7166	Computes the Bayesian Information Criterion.
7167	Calculate the magnitude of a complex matrix.
7168	Extracts boundaries from a JSON file and returns them as an np array.
7169	Extracts the boundaries from a bounds json file and puts them into an np array.
7170	Extracts labels from a JSON file and converts them into a numpy array of integer labels.
7171	Extracts beats from a JSON file and returns them as a numpy array.
7172	Computes the 2D-Fourier Magnitude Coefficients.
7173	Computes the labels using the bounds.
7174	Filters the activation matrix G and returns a flattened copy.
7175	Obtains the boundaries module given a boundary algorithm identificator.
7176	Obtains the label module given a label algorithm identificator.
7177	Runs hierarchical algorithms with the specified identifiers on the audio_file.
7178	Runs the flat algorithms with the specified identifiers on the audio file.
7179	Runs the specified algorithms on the audio file and returns estimated segment boundaries and labels.
7180	Prepares the parameters, runs the algorithms, and saves results.
7181	Main process to segment a file or a collection of files.
7182	Alternating least squares step to update W under convexity constraint.
7183	Main Entry point for translator and argument parser
7184	Initializes a coroutine by priming it to the yield statement. Used as a decorator over functions that generate coroutines.
7185	Generic accumulator function that combines values based on the type of the initial value.
7186	Task Setter Coroutine

End point destination coroutine of a purely consumer type. Delegates Text IO to the `write_stream` function.
7187	Consumes text streams and spools them together for more IO efficient processing.
7188	Produces text stream from input source and forwards to consumers.
7189	Decorates a function returning the url of translation API and creates/maintains HTTP connection state. Returns a dict response object from the server containing the translated text and metadata of the request body.
7190	Returns the url encoded string that will be pushed to the translation server for parsing.
7191	Opens up a JSON file containing language codes and returns a dictionary mapping language codes to their names for a specified language.
7192	Generates a formatted table of language codes
7193	Create DataFrames of nodes and edges that do not include specified nodes.
7194	Save a Network's data to a Pandas HDFStore.
7195	Build a Network from data in a Pandas HDFStore.
7196	Characterize urban space with a variable that is related to nodes in the network.
7197	Aggregate information for every source node in the network within a specified distance using the given aggregation type and decay function.
7198	Assign node_ids to data specified by x_col and y_col based on nearest node mapping.
7199	Plot an array of data on a map using matplotlib and Basemap, automatically matching the data to the Pandana network node positions.
7200	Set the location of all the pois of this category.
7201	Find the distance to the nearest pois from each source node.
7202	Identify nodes that are connected to fewer than some threshold of other nodes within a given distance.
7203	Process a node element entry into a dict suitable for going into a Pandas DataFrame.
7204	Make a request to OSM and return the parsed JSON.
7205	Build the string for a node-based OSM query.
7206	Search for OSM nodes within a bounding box that match given tags.
7207	Returns ``True`` if the input argument object is a native regular expression object, otherwise ``False``.
7208	Compares two values with regular expression matching support.
7209	Simple function decorator allowing easy method chaining.
7210	Compares a string or regular expression against a given value.
7211	Triggers specific class methods using a reflection mechanism based on the given input dictionary params.
7212	Match the given HTTP request instance against the registered matcher functions in the current engine.
7213	Returns a matcher instance by class or alias name.
7214	Initializes a matcher instance passing variadic arguments to its constructor. Acts as a delegator proxy.
7215	Defines response body data.
7216	Defines the mock response JSON body.
7217	Sets a header field with the given value, removing previous values.
7218	Helper function to append functions into a given list.
7219	Triggers request mock definition methods dynamically based on input keyword arguments passed to `pook.Mock` constructor.
7220	Defines the mock URL to match.
7221	Define a dictionary of arguments for headers matching.

The method sets HTTP headers for a mock request and adds a headers matcher to validate incoming requests against the specified headers. Header keys are case insensitive. The method accepts either a dictionary of headers or variadic keyword arguments, with keyword arguments taking precedence when both are provided. Returns the current mock instance to allow for method chaining.
7222	Defines a new header matcher expectation that must be present in the outgoing request.
7223	Defines a list of headers that must be present in the outgoing request in order to satisfy the matcher, no matter what value the headers host.
7224	Defines the ``Content-Type`` outgoing header value to match.
7225	Defines a set of URL query params to match.
7226	Defines the body data to match.
7227	Defines the JSON body to match.
7228	Defines a XML body value to match.
7229	Reads the body to match from a disk file.
7230	Enable persistent mode for the current mock.
7231	Defines a simulated exception error that will be raised.
7232	Defines the mock response.
7233	Matches an outgoing HTTP request against the current mock matchers.
7234	Async version of activate decorator
7235	Sets a custom mock engine, replacing the built-in one.
7236	Enables real networking mode with optional hostname filtering.
7237	Creates and registers a new HTTP mock in the current engine.
7238	Remove a specific mock instance by object reference.
7239	Activates the registered interceptors in the mocking engine.
7240	Disables interceptors and stops intercepting any outgoing HTTP traffic.
7241	Verifies if real networking mode should be used for the given request.
7242	Matches a given Request instance contract against the registered mocks.
7243	Copies the current Request object instance for side-effects purposes.
7244	Enable the HTTP traffic interceptors.
7245	Creates a new isolated mock engine to be used via context manager.
7246	Add one or multiple HTTP traffic interceptors to the current mocking engine.
7247	Removes a specific interceptor by name and returns True if successful, otherwise False.
7248	Get key from connection or default to settings.
7249	Build SQL with decryption and casting.
7250	Save the original_value.
7251	Tell postgres to encrypt this field with a hashing function.
7252	Get the decryption for col.
7253	Tell postgres to encrypt this field using PGP.
7254	Parses yaml and returns a list of repeated variables and the line on which they occur.
7255	Calculate regression coefficients for given tip and branch quantity averages.
7256	Inverse of the covariance matrix
7257	Recursion to calculate inverse covariance matrix.
7258	Calculate the weighted sums of the tip and branch values and their second moments.
7259	Propagate means, variance, and covariances along a branch towards root and tips.
7260	Calculate standard explained variance.
7261	Regress tip values against branch values.
7262	Determine the position on the tree that minimizes the bilinear product of the inverse covariance and the data vectors.
7263	Initialize the merger model with a coalescent time.
7264	Calculate the number of concurrent branches in the tree over time and store the result as an interpolation object.
7265	Returns the cost associated with a branch starting at t_node.
7266	Attaches the merger cost to each branch length interpolator in the tree.
7267	Determines the coalescent time scale that optimizes the coalescent likelihood of the tree.
7268	Convert profile to sequence and normalize profile across sites.
7269	Return a normalized version of a profile matrix.
7270	Set a new GTR object.
7271	Create new GTR model if needed, and set the model as an attribute of the TreeAnc class.
7272	Set the length of the uncompressed sequence.
7273	For each node of the tree, check whether there is a sequence available in the alignment and assign this sequence as a character array.
7274	Set link to parent and calculate distance to root for all tree nodes.
7275	Set auxiliary parameters to every node of the tree.
7276	For each node in the tree, set its root-to-node distance as dist2root attribute
7277	Reconstruct ancestral sequences using specified method and return number of differences from previous reconstruction.
7278	Uses results from marginal ancestral inference to return a joint distribution of the sequence states at both ends of the branch.
7279	Expand a node's compressed sequence into the real sequence.
7280	Reconstruct ancestral states using Fitch's algorithm.
7281	Determine the Fitch profile for a single character of the node's sequence.
7282	Find the intersection of any number of 1D arrays. Return the sorted, unique values that are in all of the input arrays.
7283	Return the likelihood of the observed sequences given the tree.
7284	Calculate the likelihood of the given realization of the sequences in the tree.
7285	Set branch lengths to either mutation lengths or given branch lengths for ML analysis.
7286	Perform optimization for the branch lengths of the entire tree.
7287	Perform experimental global optimization of branch lengths in the tree.
7288	Calculate optimal branch length given the sequences of node and parent
7289	Iteratively optimize branch lengths and reconstruct ancestral sequences until convergence.
7290	Get the multiple sequence alignment, including reconstructed sequences for the internal nodes.
7291	Function that returns the product of the transition matrix and the equilibrium frequencies to obtain the rate matrix of the GTR model.
7292	Create a GTR model by specifying the matrix explicitly
7293	Create standard model of molecular evolution.
7294	Check and fix the main diagonal of Q to ensure it corresponds to the definition of the rate matrix, and handle rate matrix degeneracy.
7295	Calculate the probability of observing a sequence pair at a distance t for compressed sequences.
7296	Find the optimal distance between the two sequences.
7297	Find the optimal distance between two sequences for compressed sequences.
7298	Calculate the probability of observing a node pair at a distance t.
7299	Compute the probability of the sequence state of the child at time t later, given the parent profile.
7300	Returns the log-likelihood of sampling a sequence from equilibrium frequency.
7301	Set the branch length mode based on input tree's empirical branch length distribution or explicit parameter.
7302	Labels outlier branches that don't follow a molecular clock and excludes them from subsequent molecular clock estimation and timetree propagation.
7303	Plot root-to-tip regression
7304	Resolve the polytomies on the tree by scanning for multiple mergers, re-optimizing the tree topology, and returning the number of polytomies found.
7305	Print the total likelihood of the tree given the constrained leaves.
7306	Add a coalescent model to the tree and optionally optimize it.
7307	Determine the node that results in the best regression of temporal constraints and root to tip distances when the tree is rooted on this node.
7308	Function that attempts to load a tree and build it from the alignment if no tree is provided.
7309	Parse the arguments referring to the GTR model and return a GTR structure.
7310	Checks if input is VCF and reads in appropriately if it is
7311	Implement treetime ancestral reconstruction.
7312	Assess the width of the probability distribution by computing full-width-half-max.
7313	Create delta function distribution.
7314	Multiplies a list of Distribution objects, handling both delta functions and general distributions with proper error checking and edge case handling.
7315	Assign dates to nodes in the tree and return success/error code.
7316	Instantiate a TreeRegression object and set its tip_value and branch_value functions to defaults sensible for treetime instances.
7317	Use date constraints to calculate the most likely positions of unconstrained nodes.
7318	Return the likelihood of the data given the current branch length in the tree
7319	Convert estimated "time_before_present" properties of all nodes to numerical dates stored in the "numdate" attribute and further convert into human readable date strings.
7320	Use previously calculated variation of the rate to estimate the uncertainty in a particular numdate due to rate variation.
7321	Determines the high posterior probability region containing a specified fraction of the probability mass for a given node, using marginal likelihood mode reconstruction when available, otherwise falling back to rate variation-based uncertainty estimation.
7322	Find the global minimum of a function represented as an interpolation object.
7323	Find the median of the function represented as an interpolation object.
7324	Convert datetime object to numeric date format YYYY.F, where F is the fraction of the year passed.
7325	Create the conversion object automatically from the tree
7326	Socket connection.
7327	Terminate connection with Guacamole guacd server.
7328	Receive instructions from Guacamole guacd server.
7329	Send encoded instructions to Guacamole guacd server.
7330	Send instruction after encoding.
7331	Establish connection with Guacamole guacd server via handshake.
7332	Return a utf-8 encoded string from a valid unicode string.
7333	Loads a new GuacamoleInstruction from encoded instruction string.
7334	Encode argument to be sent in a valid GuacamoleInstruction.
7335	Prepare the instruction to be sent over the wire.
7336	Returns a versioned URI string for this class
7337	Get instance URL by ID
7338	Returns a versioned URI string for this class, and don't pluralize the class name.
7339	Download the file to the specified directory or file path. Downloads to a temporary directory if no path is specified. Returns the absolute path to the file.
7340	Get the commit objects parent Import or Migration
7341	Asks the user for their email and password.
7342	Force an interactive login via the command line and update client authentication.
7343	Prints information about the current user.
7344	Prints information about the current user.
7345	Returns this Query instance with the query args combined with existing set with AND.
7346	Shortcut to do range filters on genomic datasets.
7347	Shortcut to do a single position filter on genomic datasets.
7348	Returns a dictionary with the requested facets.
7349	Takes a list of filters and returns JSON API filters.
7350	Allows the Query object to be an iterable.
7351	Execute a query with optional offset and additional query parameters, returning request parameters and raw query response.
7352	Migrate the data from the Query to a target dataset.
7353	Main entry point for SolveBio CLI
7354	Recursively downloads a folder in a vault to a local directory.
7355	Used to create a new object from an HTTP response
7356	Revoke the token and remove the cookie.
7357	Issues an HTTP Request across the wire via the Python requests library.
7358	Get Task child object class
7359	Cancel a task
7360	Specialized INFO field parser for SnpEff ANN fields.
7361	Return a parsed dictionary for JSON.
7362	Returns the user's stored API key if a valid credentials file is found. Raises CredentialsError if no valid credentials file is found.
7363	Dump the class data in the format of a .netrc file.
7364	Format a value according to its type.
7365	Transform tabular data into a list of lists and a list of headers, supporting various data types including lists, NumPy arrays, dictionaries, and pandas DataFrames.
7366	Return a string which represents a row of data cells.
7367	Return a string which represents a horizontal line.
7368	Prefix every cell in a row with an HTML alignment attribute.
7369	Produce a plain-text representation of the table.
7370	Migrate the data from this dataset to a target dataset.
7371	Helper method to parse a full or partial path and return a full path as well as a dict containing path parts.
7372	Upload files and folders to a remote location, skipping existing files.
7373	Helper method to validate and return a full vault path from a full or partial path, handling special cases like personal vault ("~") and default domain/vault assumptions.
7374	Validate SolveBio API host url.
7375	Add one or more files or URLs to the manifest.
7376	Annotate a set of records with stored fields.
7377	Evaluates the expression with the provided context and format.
7378	Set the default format name.
7379	Register a new output formatter.
7380	Format the headers and data using a specific formatter.
7381	Wrap tabulate inside a function for TabularOutputFormatter.
7382	Returns the config folder for the application, with platform-specific paths and options for roaming and XDG compliance.
7383	Returns a list of system-wide config folders for the application.
7384	Read the default config file and validate it if validation is enabled, raising an exception if validation fails.
7385	Read the default, additional, system, and user config files.
7386	Get the absolute path to the user config file.
7387	Get a list of absolute paths to the system config files.
7388	Get a list of absolute paths to the additional config files.
7389	Write the default config to the user's config file.
7390	Read a list of config files.
7391	Truncate string values.
7392	Replace multiple values in a string.
7393	Run multiple commands in a row, exiting if one fails.
7394	Apply command-line options to the command.
7395	Apply a command-line option.
7396	Set the default options.
7397	Run the linter.
7398	Generate and view the documentation.
7399	Truncate very long strings in tabular data for display purposes.
7400	Format numbers according to a format specification.
7401	Format a row by joining headers and row elements with ' | ' and newlines.
7402	Wrap vertical table in a function for TabularOutputFormatter.
7403	Wrap terminaltables inside a function for TabularOutputFormatter.
7404	Copy template file and substitute template strings with provided values.
7405	Check if the type is a numerical value.
7406	Check if the given PKCS#11 type is a boolean value.
7407	Check if the type is a byte array value.
7408	Generate a secret key using the specified template and mechanism.
7409	Generate a key pair using the specified templates and mechanism, returning a tuple of public and private key handles.
7410	Find the objects matching the template pattern.
7411	Inserts a small icon to QR Code image
7412	Export gene panels to .bed like format.
7413	Given a weekday and a date, increment the date until it's weekday matches that of the given weekday, then return that date.
7414	Add 'num' to the day and count that day until we reach end_repeat, or until we're outside of the current month, counting the days as we go along.
7415	Starts from 'start' day and counts backwards until 'end' day.
7416	Created to take some of the load off of _handle_weekly_repeat_out
7417	Handle a non-repeating event chunk or the first month of a repeating event chunk.
7418	Export causative variants for a collaborator.
7419	Create the lines for an excel file with verified variants for an institute.
7420	Export mitochondrial variants for a case to create a MT excel report
7421	Update a user in the database
7422	Display a list of STR variants.
7423	Display a specific structural variant.
7424	Display a specific STR variant.
7425	Start procedure to validate variant using other techniques.
7426	Build a clinVar submission form for a variant.
7427	Show cancer variants overview.
7428	Handle ACMG classification form submission for a variant.
7429	Show or delete an ACMG evaluation.
7430	Calculate an ACMG classification from submitted criteria.
7431	Parse gene panel file and fill in HGNC symbols for filter.
7432	Download all verified variants for user's cases and return as a zip archive.
7433	Return a dictionary with hgnc symbols as keys and their associated gene information as values.
7434	Add information of incomplete penetrance
7435	Gather information from different sources and return a gene dict
7436	Send a request to MatchMaker and return its response
7437	Return the available MatchMaker nodes.
7438	Get the cytoband coordinate for a position.
7439	Get the subcategory for a VCF variant.
7440	Return the length of a variant based on its category and provided parameters.
7441	Return the end coordinate for a variant.
7442	Find out the coordinates for a variant.
7443	Parse cytoband file and demonstrate coordinate checking functionality.
7444	Show all panels for a case and handle panel creation or modification via CSV upload.
7445	Update panel to a new version.
7446	Export panel to PDF file
7447	Edit additional information about a panel gene.
7448	Add delivery report to an existing case.
7449	Retrieves a list of HPO terms from scout database.
7450	Show all objects in the whitelist collection
7451	Build a small phenotype object

The function creates a dictionary containing phenotype information by fetching data from an adapter. It takes a phenotype ID and an adapter object as arguments, looks up the phenotype term using the adapter, and returns a dictionary with the phenotype ID and its description if found. If no phenotype is found, it returns None.
7452	Parse information about a gene.
7453	Fetch matching genes and convert to JSON.
7454	Display the Scout dashboard.
7455	Show all transcripts in the database
7456	Returns the events that occur on the given day by filtering month events.
7457	Pre-process list of SV variants.
7458	Pre-process list of STR variants.
7459	Pre-process an STR variant entry for detail page.
7460	Pre-process an SV variant entry for detail page.
7461	Parse information about variants, including compounds, hgnc symbols, and other variant details.
7462	Returns a header for the CSV file with the filtered variants to be exported.
7463	Get variant information for genes including canonical transcripts, exon information, and coding sequence names.
7464	Get sift predictions from genes.
7465	Pre-process case for the variant view by adding information about files from case object to variant.
7466	Find the BAI file associated with a BAM file by checking common file extension conventions.
7467	Query observations for a variant.
7468	Parse variant genes and their transcripts, adding gene links and selecting refseq transcripts as primary.
7469	Generate amino acid change as a string.
7470	Calculate end position for a variant.
7471	Returns a judgement on the overall frequency of the variant by combining multiple metrics into a single call.
7472	Convert to human readable version of CLINSIG evaluation.
7473	Compose link to 1000G page for detailed information.
7474	Compose link to COSMIC Database.
7475	Compose link to Beacon Network.
7476	Compose link to UCSC.
7477	Translate SPIDEX annotation to human readable string.
7478	Gather manual inheritance models from gene information in a variant object.
7479	Return info about callers.
7480	Fetch data related to cancer variants for a case.
7481	Gather the required data for creating the clinvar submission form
7482	Collects all variants from the clinvar submission collection with a specific submission_id and returns data for the clinvar_update.html template page.
7483	Collect data relevant for rendering ACMG classification form.
7484	Calculate an ACMG classification based on a list of criteria.
7485	Fetch and fill-in evaluation object.
7486	Parse out HGNC symbols from a stream.
7487	Collect all verified variants in a list on institutes and save them to file
7488	Export all genes from the database to .bed format.
7489	Get the clnsig information
7490	Get a list with compounds objects for this variant.
7491	Export all genes from a build
7492	Build a Individual object from a dictionary of individual information.
7493	Upload variants to a case
7494	Return a variant.
7495	Show all collections in the database
7496	Create a new institute and add it to the database.
7497	Update an institute.
7498	Return an opened file handle, handling both regular and gzipped files.
7499	Get the net of any 'next' and 'prev' querystrings.
7500	Returns the next and previous querystrings based on the given net value.
7501	Checks that the year is within 50 years from now.
7502	Make sure any event day for weekday repeating events is not a weekend.
7503	Parse all data necessary for loading a case into scout.
7504	Add information from peddy outfiles to the individuals
7505	Parse individual information from a sample dictionary and return a structured dictionary with individual details including ID, sex, phenotype, family relationships, and optional analysis-related fields.
7506	Parse individual information and validate family relationships.
7507	Parse case information from config or PED files.
7508	Parse out minimal family information from a PED file.
7509	Build a evaluation object ready to be inserted to database
7510	Export all mitochondrial variants for each sample of a case and write them to an excel file.
7511	Check if the criteria for Pathogenic classification is fulfilled.
7512	Check if the criteria for Likely Pathogenic classification are fulfilled.
7513	Check if criteria for Likely Benign are fulfilled.
7514	Use the ACMG paper algorithm to classify variants based on prediction terms.
7515	Add extra information about genes from gene panels to a variant object.
7516	Returns variants specified in question for a specific case.
7517	Return all variants with sanger information
7518	Returns the specified variant object from the database based on the provided identifiers, with optional gene panel information and PAR status calculation for X/Y chromosomes.
7519	Return all variants seen in a given gene.
7520	Return all verified variants for a given institute.
7521	Return all causative variants for an institute.
7522	Check if there are any variants that are previously marked causative.
7523	Find the same variant in other cases marked causative.
7524	Delete variants of one type for a case.
7525	Return overlapping variants for a given variant object by querying variants that overlap the same genes, switching between SNV and SV categories, and limiting results to 30 most severe variants.
7526	Returns variants that have been evaluated for a case, including those with ACMG classification, manual rank, dismiss variant, or comments.
7527	Produce a reduced VCF with variants from specified coordinates for the alignment viewer.
7528	Given a list of variants, retrieve variant objects found in a specific patient.
7529	Get a client to the mongo database
7530	Extract objects from form data for clinvar database collection.
7531	Determine which fields to include in CSV header by checking a list of submission objects.
7532	Create the lines to include in a Clinvar submission csv file from a list of submission objects and a custom document header
7533	Load all the transcripts from ensembl and build transcript objects.
7534	Add a gene panel to the database.
7535	Build a Exon object from exon information dictionary.
7536	Delete a version of a gene panel or all versions of a gene panel
7537	Delete all indexes in the database
7538	Delete a user from the database.
7539	Delete all genes in the database
7540	Delete all exons in the database.
7541	Delete a case and its variants from the database.
7542	Show all individuals from all cases in the database
7543	Parse MatchMaker matches objects into a readable list of matches for display in the matches view.
7544	Display cases from the database
7545	Returns the currently active user as an object.
7546	Login a user if they have access.
7547	Build a institute object.
7548	Delete a event from the database collection using the provided event_id.
7549	Create an event with the given parameters.
7550	Fetch events from the database.
7551	Fetch all events by a specific user.
7552	Add a new phenotype term to a case.
7553	Remove an existing phenotype from a case.
7554	Add a comment to a variant or a case.
7555	Parse the genotype calls for a variant.
7556	Check if the variant is in the interval given by the coordinates.
7557	Render search box and view for HPO phenotype terms
7558	Export all transcripts to .bed like format
7559	Load exons into the scout database
7560	Load all variants in a region to an existing case.
7561	Returns all events that have an occurrence within the given month & year.
7562	Returns a queryset of events that will occur again after 'now'.
7563	Recursively parse requirements from nested pip files.
7564	Check if gene is already added to a panel.
7565	Update an existing gene panel with genes.
7566	Create a new gene panel.
7567	Preprocess a panel of genes.
7568	Get information about a case from archive.
7569	Migrate case information from archive, including collaborators, assignees, suspected/causative variants, synopsis, and phenotype data.
7570	Update all information that was manually annotated from a old instance.
7571	Upload research variants to cases.
7572	Load genes into the database by collecting information from multiple sources and merging them into gene objects.
7573	Show all HPO terms in the database.
7574	Flask app factory function.
7575	Configure Flask extensions.
7576	Register Flask blueprints.
7577	Setup coverage related extensions.
7578	Show all alias symbols and how they map to ids
7579	Build a gene_panel object from panel information and validate its contents.
7580	Export verified variants for an institute and write them to an Excel file.
7581	Export causatives for a collaborator in .vcf format
7582	Get VCF entry from variant object.
7583	Start the web server.
7584	Generate an MD5 key from a list of arguments.
7585	Setup via Flask.
7586	Setup connection to database.
7587	Create indexes for the database.
7588	Setup a scout database.
7589	Setup a scout demo instance.
7590	Setup scout instances.
7591	Show all institutes in the database
7592	Parse the genetic models entry of a vcf.
7593	Show all gene panels in the database
7594	Add a institute to the database.
7595	Update the information for an institute.
7596	Fetch a single institute from the backend.

The method retrieves an institute object from the institute collection using the provided institute_id. It logs the fetch operation and returns the institute object if found, otherwise returns None.
7597	Check if a string is a valid date.
7598	Return a datetime object if there is a valid date, otherwise raise an exception or return today's date.
7599	Export a list of genes based on HPO terms.
7600	Parse the rank score from a raw rank score entry based on case ID.
7601	Add a user to the database.
7602	Check if a connection could be made to the mongo process specified.
7603	Initialize MongoDB connection from Flask app configuration.
7604	Load a delivery report into a case in the database.
7605	Add a user object to the database.
7606	Visualize BAM alignments.
7607	Load all the exons from ensembl transcript information, checking that each transcript exists in the database and inserting them with their associated gene and transcript data.
7608	Update all compounds for a case
7609	Update a gene object with links
7610	Query the HGNC aliases.
7611	Parse an hgnc formatted line and return a dictionary with relevant gene info.
7612	Parse lines with hgnc formatted genes
7613	Retrieve the database id of an open clinvar submission for a user and institute, if none is available then create a new submission and return it
7614	Saves an official ClinVar submission ID in a ClinVar submission object.
7615	Returns the official Clinvar submission ID for a submission object.
7616	Adds submission objects to clinvar collection and updates the corresponding submission object with their ids.
7617	Set a clinvar submission ID to 'closed' or update its status.
7618	Collect all open and closed clinvar submissions created by a user for an institute.
7619	Remove a variant object from clinvar database and update the relative submission object.
7620	Get all variants included in clinvar submissions for a case.
7621	Parse a .obo formatted hpo line
7622	Render search box for genes.
7623	Render information about a gene.
7624	Return JSON data about genes.
7625	Make sure that the gene panels exist in the database and check if the default panels are defined in gene panels.
7626	Load all variants in a region defined by a HGNC id or genomic coordinates for a given case.
7627	Load a new case from a Scout config.
7628	Template decorator.
7629	Fetch institute and case objects.
7630	Preprocess institute objects.
7631	Get the hgnc id for a gene based on priority order of existing hgnc_id, matching hgnc symbol, or matching aliases.
7632	Update a panel in the database
7633	Update disease terms in mongo database.
7634	Load omim phenotypes into the database by parsing phenotypes from genemap2.txt and associating HPO terms from disease-to-gene-to-phenotype files.
7635	Add the frequencies to a variant by parsing from info fields or transcripts.
7636	Parse any frequency from the info dict
7637	Parsing of some custom sv frequencies

Returns a dictionary of structural variant frequencies from specific keys in the variant's INFO field, converting values to appropriate numeric types and filtering for non-zero frequencies.
7638	Show all users in the database
7639	Build a hgnc_gene object from gene information dictionary.
7640	Load a gene panel by building a panel object from parsed data and adding it to the database.
7641	Create and load the OMIM-AUTO panel by fetching OMIM data, comparing with existing panel, and updating if necessary.
7642	Check if the latest version of OMIM differs from the most recent in database and return all genes that were not in the previous version.
7643	Set the correct version for each gene in the new panel.
7644	Add a gene panel to the database.
7645	Fetch a gene panel by '_id'.
7646	Delete a panel by '_id'.
7647	Fetch a gene panel from the database.

The method retrieves a gene panel by its unique ID and optional version. If no version is specified, it returns the latest version of the panel. If no panel is found, it returns None.
7648	Return all gene panels, optionally filtered by panel_id, version, and institute_id.
7649	Fetch all gene panels and group them by gene.
7650	Replace an existing gene panel with a new one, updating its version and date information while preserving the object id.
7651	Add a pending action to a gene panel.
7652	Apply pending changes to a gene panel or create a new version of the same panel.
7653	Return all the clinical gene symbols for a case.
7654	Interact with cases existing in the database.
7655	Emit a record by formatting it and sending it via email.
7656	Add the proper indexes to the scout instance.
7657	Update the indexes in the database by adding any missing indexes to the existing collections.
7658	Delete all indexes for the database
7659	Build a mongo query across multiple cases.
7660	Build a mongo query for variant filtering based on case_id, query parameters, and variant IDs.
7661	Add clinsig filter values to the mongo query object
7662	Adds genomic coordinated-related filters to the query object.
7663	Adds gene-related filters to the query object.
7664	Drop the mongo database given.
7665	Parse user submitted panel from CSV stream into structured gene data.
7666	Build a clnsig object from clnsig information.
7667	Load a bulk of hgnc gene objects.
7668	Load a bulk of transcript objects to the database.
7669	Load a bulk of exon objects to the database.
7670	Fetch a HGNC gene by identifier and build version, including associated transcripts.
7671	Query the genes with a HGNC symbol and return the HGNC id.
7672	Fetch all hgnc genes that match a hgnc symbol.
7673	Fetch all hgnc genes.
7674	Return the number of hgnc genes in collection.
7675	Delete the genes collection
7676	Delete the transcripts collection
7677	Delete the exons collection
7678	Return a dictionary with ensembl ids as keys and transcripts as values.
7679	Return a dictionary with hgnc_symbol as key and gene_obj as value for the specified build.
7680	Return a iterable with hgnc_genes based on symbol and build, checking primary symbol and aliases.
7681	Return a dictionary with hgnc symbols as keys and a list of hgnc ids as values.
7682	Return a dictionary with ensembl ids as keys and gene objects as value.
7683	Check if a HGNC symbol is an alias and return the correct HGNC symbol, or None if not found.
7684	Add the correct hgnc id to a set of genes with hgnc symbols
7685	Return a dictionary with chromosomes as keys and interval trees as values representing coding regions of overlapping genes.
7686	Update the automate generated omim gene panel in the database.
7687	Display a list of cases for an institute.
7688	Display one case.
7689	Show all MatchMaker matches for a given case
7690	Starts an internal match or a match against one or all MME external nodes.
7691	Remove a case from MatchMaker
7692	Visualize case report
7693	Download a pdf report for a case
7694	Add or remove a diagnosis for a case.
7695	Handle phenotypes.
7696	Perform actions on multiple phenotypes.
7697	Handle events.
7698	Update status of a specific case.
7699	Assign and unassign a user from a case.
7700	Search for HPO terms and return matching terms as JSON.
7701	Mark a variant as sanger validated.
7702	Mark a variant as confirmed causative.
7703	Display delivery report.
7704	Share a case with a different institute.
7705	Request a case to be rerun.
7706	Open the research list for a case.
7707	Download vcf2cytosure file for individual.
7708	Load multiqc report for the case.
7709	Preprocess case objects and organize them by status for display in the 'cases' view.
7710	Gather contents to be visualized in a case report
7711	Posts a request to chanjo-report and captures the body content of the returned response to include in case report.
7712	Get all Clinvar submissions for a user and an institute.
7713	Collect MT variants and format them for Excel export.
7714	Update synopsis.
7715	Return the list of HGNC symbols that match annotated HPO terms.
7716	Convert VCF to Cytosure CGH file for individual.
7717	Find MultiQC report for the case.
7718	Get all variants for an institute having Sanger validations ordered but still not evaluated.
7719	Add a patient to MatchMaker server
7720	Delete all affected samples for a case from MatchMaker
7721	Show Matchmaker submission data for a sample and eventual matches.
7722	Initiate a MatchMaker match against either other Scout patients or external nodes.
7723	Load hgnc aliases to the mongo database.
7724	Parse how the different variant callers have performed.
7725	Build a hgnc_transcript object from transcript information.
7726	Load a institute into the database.
7727	Check if the cadd phred score is annotated
7728	Load a case into the database.
7729	Update one variant document in the database.
7730	Updates the manual rank for all variants in a case based on rank score sorting.
7731	Update compounds for a variant by adding necessary variant information to compound objects.
7732	Update the compounds for a set of variants.
7733	Update the compound information for a bulk of variants in the database.
7734	Update the compounds for a case by looping over coding intervals and variants, then performing bulk updates for compound variants.
7735	Load a variant object into the database.

The method inserts a variant object into the variant collection. If a duplicate key error occurs (indicating the variant already exists), it raises an IntegrityError. Returns the inserted document's ID.
7736	Load a variant object, if the object already exists update compounds.
7737	Load a bulk of variants into the database, handling potential duplicates by inserting variants individually if bulk insert fails.
7738	Assign a user to a case by creating an event and updating the case's assignees list.
7739	Share a case with a new institute.
7740	Diagnose a case using OMIM ids.
7741	Mark a case as checked or unchecked from an analysis point of view.
7742	Create events for variant and case verification when ordering Sanger validation.
7743	Get all variants with validations ever ordered.
7744	Mark validation status for a variant.
7745	Mark a variant as causative in a case and create corresponding events.
7746	Create an event for updating the manual dismiss variant entry and update the dismiss variant field of the variant.
7747	Create an event for updating the ACMG classification of a variant.
7748	Construct the necessary ids for a variant
7749	Parse the simple id for a variant.
7750	Parse the unique document id for a variant.
7751	Convert a gene panel with hgnc symbols to a new one with hgnc ids.
7752	Create a new variant id from a variant object and family id.
7753	Return the number of cases for a given institute id.
7754	Update the dynamic gene list for a case by fetching genes based on HGNC symbols or IDs and storing the information in the case document.
7755	Fetches a single case from database

Use either the _id or combination of institute_id and display_name
7756	Delete a single case from database
7757	Add a case to the database.
7758	Replace an existing case with a new one, keeping the object id.
7759	Update case id for a case across the database.
7760	Submit an evaluation to the database.
7761	Return all evaluations for a certain variant.
7762	Parse and massage the transcript information, merging multiple lines of information about the same transcript into a dictionary mapping enstid to transcript info.
7763	Parse a dataframe with ensembl gene information and yield gene information dictionaries.
7764	Parse a dataframe with ensembl transcript information
7765	Parse an ensembl formatted line into a dictionary with relevant gene information.
7766	Parse lines with ensembl formatted genes

Yields dictionaries with relevant gene information from ensembl biomart dump.
7767	Parse lines with ensembl formatted exons and yield dictionaries with relevant exon information.
7768	Parse a dataframe with ensembl exon information and yield gene information with recalculated start and end positions based on UTR regions.
7769	Initializes the log file in the proper format.
7770	Parse a line of OMIM data into a dictionary using the provided header.
7771	Parse OMIM morbid lines into structured data.

The function processes lines of OMIM morbid data, extracting header information from comment lines and yielding parsed data rows. It skips comment lines that aren't in the first 10 lines and specifically looks for lines starting with '# Phenotype' to identify the header. For non-comment lines, it parses each line using a helper function `parse_omim_line` with the extracted header.
7772	Get a dictionary with phenotypes from genemap lines.

Use the mim numbers for phenotypes as keys and phenotype information as values.
7773	Parse the omim files
7774	Convert a string to a number, returning an int if possible, otherwise a float, or None if not possible.
7775	Return a formatted month as a table.
7776	Set some commonly used variables.
7777	Change colspan to "5", add "today" button, and return a month name as a table row.
7778	Populate variables used to build popovers.
7779	Parse metadata for a gene panel from header information.
7780	Parse a gene line with information from a panel file.
7781	Parse a file with genes and return the hgnc ids
7782	Parse the panel info and return a gene panel
7783	Show all diseases in the database
7784	Update the hpo terms in the database. Fetch the latest release and update terms.
7785	Display a list of all users and which institutes they belong to.
7786	Parse the conservation predictors
7787	Get the conservation prediction for a variant.
7788	Return general information about cases including statistics and pedigree distribution.
7789	Return the information about case groups.
7790	Returns a JSON response, transforming 'context' to make the payload.
7791	Get the year and month from kwargs or querystrings, with fallback to current year and month.
7792	Check if any events are cancelled on the given date 'd'.
7793	Fetch a HPO term by ID from the collection.
7794	Return all HPO terms based on query parameters.
7795	Return a disease term by checking if the identifier is a disease number or id.
7796	Return all disease terms that overlap a gene, or all disease terms if no gene is specified.
7797	Load a disease term into the database
7798	Generate a sorted list with namedtuples of hpogenes.
7799	Populate Filterbank instance with data from HDF5 file
7800	Setup frequency axis and calculate frequency array based on start and stop frequencies.
7801	Setup time axis.
7802	Populate Filterbank instance with data from Filterbank file
7803	Compute LST for observation
7804	Blank DC bins in coarse channels.
7805	Print header information
7806	Setup plotting edges.
7807	Plot waterfall of data.
7808	Plot the time series.
7809	Write data to blimpy file in filterbank (.fil) format.
7810	Calibrate the band pass by dividing by the median value for every frequency fine channel.
7811	Converts a data array to a coarser resolution by averaging over specified channels.
7812	Returns calibrated Stokes parameters for an observation given an array of differential gains and phase differences.
7813	Write Stokes-calibrated filterbank file for a given observation with a calibrator noise diode measurement on the source.
7814	Output fractional linear and circular polarizations for a rawspec cross polarization .fil file.
7815	Writes two new filterbank files containing fractional linear and circular polarization data.
7816	Return the index of the closest value in xarr to the given value val.
7817	Rebin data by averaging bins together.
7818	Upgrade data from nbits to 8bits.
7819	Returns ON-OFF differences for all Stokes parameters given a cross_pols noise diode measurement.
7820	Plots the uncalibrated full Stokes spectrum of the noise diode, showing either the difference (ON-OFF) or separate ON and OFF spectra based on the diff parameter.
7821	Plots the corrected noise diode spectrum after applying inverse Mueller matrix calibration.
7822	Plots the calculated gain offsets of each coarse channel along with the time averaged power spectra of the X and Y feeds.
7823	Open a HDF5 or filterbank file and return a Reader instance to read data from the file.
7824	Making sure the selection if time and frequency are within the file limits.
7825	Calculate size of data of interest.
7826	Calculate shape of data of interest.
7827	Setup channel borders
7828	Updating frequency borders from channel values
7829	Populate time axis. If update_header is True, only return tstart; otherwise return full timestamp array.
7830	Populate frequency axis
7831	Calculate the number of coarse channels in a given file.
7832	Given the blob dimensions, calculate how many fit in the data selection.
7833	Check if the current selection is too large.
7834	Read data with optional frequency and time range selection, handle large selections, load binary data into numpy array.
7835	Read all the data from the file and return it as a 2-D numpy array, with optional x-axis reversal.
7836	Read a block of data from a specified row, with optional x-axis flipping.
7837	Reads data selection if small enough.
7838	Updates the header information from the original file to the selection.
7839	Print header information and other derived information.
7840	Write data to .fil file, checking file size to decide writing method.
7841	Write data to HDF5 file.
7842	Write data to HDF5 file in one go.
7843	Sets the blob dimensions, trying to read around 1024 MiB at a time.
7844	Sets the chunking dimensions depending on the file type.
7845	Extract a portion of data by frequency range.
7846	Command line tool for plotting and viewing info on guppi raw files
7847	Read first header in file
7848	Seek through the file to find how many data blocks there are in the file
7849	Compute some basic stats on the next block of data
7850	Plot a histogram of data values.
7851	Generate a blimpy header dictionary based on the first header of the file.
7852	Script to find the header size of a filterbank file
7853	Command line tool to make a md5sum comparison of two .fil files.
7854	Command line tool for converting guppi raw into HDF5 versions of guppi raw
7855	Returns time-averaged spectra of the ON and OFF measurements in a calibrator measurement with flickering noise diode.
7856	Folds Stokes I noise diode data and integrates along coarse channels.
7857	Given properties of the calibrator source, calculate fluxes of the source in a particular frequency range.
7858	Returns central frequency of each coarse channel
7859	Calculate f_ON and f_OFF ratios as defined in van Straten et al. 2012 equations 2 and 3.
7860	Calculate the coarse channel spectrum and system temperature of the noise diode in Jy given two noise diode measurements ON and OFF the calibrator source.
7861	Returns frequency dependent system temperature given observations on and off a calibrator source
7862	Produce calibrated Stokes I for an observation given a noise diode measurement on the source and a diode spectrum with the same number of coarse channels
7863	Return the length of the blimpy header, in bytes
7864	Open file and confirm if it is a filterbank file or not.
7865	Apply a quick patch-up to a Filterbank header by overwriting a header value
7866	Generate a serialized sigproc header which can be written to disk.
7867	Convert an astropy.Angle to the ridiculous sigproc angle format string.
7868	Calculate number of integrations in a given file
7869	Convert a Traceback into a dictionary representation
7870	Make a subparser for a given type of DNS record
7871	Make an ArgumentParser that accepts DNS RRs
7872	Remove comments from a zonefile.
7873	Go through each line of the text and ensure that a name is defined. Use '@' if there is none.
7874	Parse a line of text into a dictionary record using the provided parser and return the updated set of parsed records.
7875	Parse a zonefile into a dict.
7876	Parse a zonefile into a dict
7877	Quote a field in a list of DNS records and return the new data records.
7878	Load and return a PySchema class from an avsc string.
7879	Build a Python package representation of pyschema classes with one module per namespace.
7880	Generate Python source code for one specific class.
7881	Temporarily disable automatic registration of records in the auto_store.

Decorator factory. This is _NOT_ thread safe
7882	Dump record in json-encodable object format
7883	Create a Record instance from a json-compatible dictionary.
7884	Create a Record instance from a json serialized dictionary
7885	Add record class to record store for retrieval at record load time.

Can be used as a class decorator
7886	Will return a matching record or raise KeyError if no record is found.
7887	Return a dictionary containing the field definition with nullable, default, and description fields.
7888	Decorator for mixing in additional functionality into field type
7889	Create proper PySchema class from cls
7890	Return a python dict representing the jsonschema of a record
7891	Return a root jsonschema for a given record including the $schema attribute and all sub-record schemas and definitions.
7892	Converts a file object with json serialised pyschema records to a stream of pyschema objects.
7893	Writes a stream of json serialised pyschema Records to a file object

Can be used as job.writer in luigi.hadoop.JobTask
7894	Set a value at the front of an OrderedDict.
7895	Specify query string to use with the collection.
7896	Sends all filters to the API and returns search results.
7897	Returns all entities present in the collection with ``attributes`` included.
7898	Returns entity in correct collection by matching href value with current collection or finding appropriate collection that href refers to.
7899	When you pass a quote character, returns you another one if possible.
7900	Tries to escape the values that are passed to filter as correctly as possible.
7901	Construct an elementary rotation matrix describing a rotation around the x, y, or z-axis.
7902	Construct the covariance matrix from astrometric parameter uncertainties and correlations.
7903	Calculate radial velocity error from V-band magnitude and spectral type, averaged over the sky.
7904	Calculate the parallax error for the given input source magnitude and colour.
7905	Calculate the single-field-of-view-transit photometric standard error in the G band as a function of G magnitude.
7906	Calculate the end of mission photometric standard error in the G band as a function of G magnitude.
7907	Make the plot with photometry performance predictions.
7908	Returns the number of transits across the Gaia focal plane averaged over ecliptic longitude.
7909	Calculate the angular distance between pairs of sky coordinates.
7910	Rotates Cartesian coordinates from one reference system to another using the rotation matrix.
7911	Converts sky coordinates from one reference system to another using the class's rotation matrix.
7912	Transform the astrometric covariance matrix to its representation in the new coordinate system.
7913	Look up the numerical factors to apply to the sky averaged parallax error in order to obtain error values for a given astrometric parameter, taking the Ecliptic latitude and the number of transits into account.
7914	Plot relative parallax errors as a function of distance for stars of a given spectral type.
7915	Make the plot with radial velocity performance predictions.
7916	A utility function for selecting the first non-null query.
7917	Decorator for eval_ that prints a helpful error message if an exception is generated in a Q expression
7918	Convert to unicode, and add quotes if initially a string
7919	Call `func` on each element in the collection.

If multiple functions are provided, each item in the output will be a tuple of each func(item) in self.

Returns a new Collection.
7920	Return a new Collection excluding some items.
7921	Return a new Collection with some items removed.
7922	Return a new Collection with the last few items removed.
7923	Return a new Collection with the first few items removed.
7924	Zip the items of this collection with one or more other sequences, and wrap the result.
7925	Find a single Node among this Node's descendants.
7926	Return potential locations of IACA installation.
7927	Yield all groups of simple regex-like expression.
7928	Generate a list of register names based on regular expressions describing register groups.
7929	Return a LIKWID event string from an event tuple or keyword arguments.
7930	Compile list of minimal runs for given events.
7931	Report analysis outcome in human readable form.
7932	Print human readable report of model.
7933	Report generated model in human readable form.
7934	Naively strip comments, macros, and pragmas from source code.
7935	Round float to next multiple of base.
7936	Split list of integers into blocks of block_size and return block indices.
7937	Dispatch to cache predictor to get cache stats.
7938	Calculate performance model cycles from cache stats.
7939	Run complete analysis and return results.
7940	Run complete analysis and return results.
7941	Strip whitespaces and comments from asm lines.
7942	Strip all labels that are never referenced.
7943	Return best block selected based on simple heuristic.
7944	Let user interactively select byte increment.
7945	Let user interactively select a block from a list of blocks.
7946	Insert IACA marker into list of ASM instructions at given indices.
7947	Add IACA markers to an assembly file.
7948	Execute command line interface.
7949	Setup and execute model with given blocking length
7950	Return list of evenly spaced integers over an interval.
7951	Return datetime object of latest change in kerncraft module directory.
7952	Check arguments passed by user that are not checked by argparse itself.
7953	Initialize and run command line interface.
7954	Command line interface of picklemerge.
7955	Create a sympy.Symbol with positive and integer assumptions.
7956	Transform multidimensional array declaration to single dimension declaration and return the array name and dimensions.
7957	Transform ast of multidimensional reference to a single dimension reference.
7958	Return list of array references in AST.
7959	Will make any functions return an iterable objects by wrapping its result in a list.
7960	Check that information about kernel makes sense and is valid.
7961	Set constant of name to value.
7962	Substitute constants in expression unless it is already a number.
7963	Return a dictionary with all arrays sizes.
7964	Return the offset from the iteration center in number of elements.
7965	Remove duplicate source and destination accesses
7966	Return the number of global loop iterations that are performed.
7967	Yield loop stack dictionaries in order from outer to inner.
7968	Return the order of indices as they appear in array references, filtered by sources and destinations.
7969	Return a dictionary of lists of sympy accesses, for each variable.
7970	Return load and store distances between accesses.
7971	Return sympy expressions translating global_iterator to loop indices.
7972	Return global iterator sympy expression
7973	Transform a dictionary of indices to a global iterator integer.
7974	Return global iterator with last iteration number
7975	Print kernel information in human readable format.
7976	Print variables information in human readable format.
7977	Print constants information in human readable format.
7978	Print source code of kernel.
7979	Convert mathematical expressions to a sympy representation.
7980	Return a tuple of offsets of an ArrayRef object in all dimensions.
7981	Return base name of ArrayRef object.

e.g. c[i+1][j-2] -> 'c'
7982	Return index type used in loop nest.
7983	Generate constants declarations
7984	Return array declarations.
7985	Return kernel loop nest including any preceding pragmas and following swaps.
7986	Generate declaration statements for arrays, transforming multi-dim to 1d arrays and initializing with malloc.
7987	Return inner most for loop in loop nest
7988	Generate initialization statements for arrays.
7989	Generate false if branch with dummy calls
7990	Build and return kernel function declaration
7991	Build and return scalar variable declarations
7992	Generate and return compilable source code with kernel function from AST.
7993	Generate and return kernel call ast.
7994	Generate and return compilable source code from AST.
7995	Run an IACA analysis and return its outcome.
7996	Compile source to executable with likwid capabilities and return the executable name.
7997	Convert any string to a sympy object or None.
7998	Return identifier which is either the machine file name or sha256 checksum of data.
7999	Return datetime object of modified time of machine file. Return now if not a file.
8000	Return a cachesim.CacheSimulator object based on the machine description.
8001	Return best fitting bandwidth according to number of threads, read and write streams.
8002	Return tuple of compiler and compiler flags.
8003	Parse performance counter events into tuple representation for Benchmark module.
8004	Enforce that no ranges overlap in internal storage.
8005	Return local folder path of header files.
8006	Align iteration with cacheline boundary.
8007	Return a list with number of loaded cache lines per memory hierarchy level.
8008	Return a list with number of hit cache lines per memory hierarchy level.
8009	Return a list with number of missed cache lines per memory hierarchy level.
8010	Return a list with number of stored cache lines per memory hierarchy level.
8011	Return a list with number of evicted cache lines per memory hierarchy level.
8012	Return verbose information about the predictor.
8013	Fix environment variable to a value within context. Unset if value is None.
8014	Configure argument parser.
8015	Report gathered analysis data in human readable form.
8016	Parse the description in the README file
8017	Schedule a retry
8018	Build and return Sailthru purchase item object
8019	Record a purchase in Sailthru.
8020	Get course information using the Sailthru content api or from cache.
8021	Get course information using the Ecommerce course api.
8022	Maintain a list of courses the user has unenrolled from in the Sailthru user record.
8023	Sends the course refund email.
8024	Handles sending offer assignment notification emails and retrying failed emails when appropriate.
8025	Returns a dictionary containing logging configuration.
8026	Retry with exponential backoff until fulfillment succeeds or the retry limit is reached. If the retry limit is exceeded, the exception is re-raised.
8027	Fulfills an order.
8028	Returns a Sailthru client for the specified site.
8029	Get an object from the cache.
8030	Save an object in the cache.
8031	Get a value from configuration.
8032	Get the name of the file containing configuration overrides from the provided environment variable.
8033	Finds the value depending on current eplus version.
8034	Return the Energy Plus version to be used, either the defined version or the most recent available version.
8035	Defined here so that we can use the class variables, in order to subclass in oplusplus
8036	Populate element from JSON data, handling comments, external files, and creating records with hooks and links activation.
8037	An external file manages file paths.
8038	Set default values for all fields in Epm that are null.
8039	Finish initialization for extensible elements, set up cycle patterns and field descriptors.
8040	Manages extensible names by generating extended names based on field descriptors and extensibility information.
8041	Calculate short references for external files by grouping by naive short references and generating unique short names.
8042	Returns first occurrence of value of filter column matching filter criterion.
8043	Update a value in inert mode, handling various value types and unregistering previous references when necessary.
8044	Updates simultaneously all given fields.
8045	Sets all empty fields for which a default value is defined to default value.
8046	Add field values to an extensible record without specifying field names or indexes.
8047	Remove a value from an extensible field at the specified index and shift remaining values to fill the gap, returning the serialized value of the removed field.
8048	Insert a value at the specified index in an extensible field, shifting subsequent values.
8049	Deletes record from database and removes it from table without unregistering.
8050	Register a record hook, checking for duplicate keys and raising FieldValidationError if a key already exists.
8051	Register a link by finding matching record or table hooks, setting the target, and storing the link by source and target.
8052	Create regex and return. If error occurs returns None.
8053	Returns the remaining duration for a recording.
8054	Serialize this object as dictionary usable for conversion to JSON.
8055	Make an HTTP request to a given URL with optional parameters.
8056	Get available service endpoints for a given service type from the Opencast ServiceRegistry.
8057	Try to create a directory. Pass without error if it already exists.
8058	Get the location of a given service from Opencast and add it to the current configuration.
8059	Register this capture agent at the Matterhorn admin server so that it shows up in the admin interface.
8060	Send the state of the current recording to the Matterhorn core.
8061	Update the status of a particular event in the database.
8062	Update the current agent state in opencast.
8063	Find the best match for the configuration file.
8064	Update configuration from file.
8065	Check configuration for sanity.
8066	Initialize logger based on configuration
8067	Serve the status page of the capture agent.
8068	Serve the preview image with the given id.
8069	Start all services.
8070	Parse Opencast schedule iCalendar file and return events as dict
8071	Try to load schedule from the Matterhorn core. Returns a valid schedule or None on failure.
8072	Main loop, retrieving the schedule.
8073	Main loop, updating the capture agent state.
8074	Return a response with a jsonapi error object
8075	Return a response with a list of jsonapi data objects
8076	Serve a json representation of internal agent state as meta data.
8077	Serve a JSON representation of events
8078	Return a specific event's JSON data by UID, or error if not found.
8079	Delete a specific event identified by its uid.
8080	Modify an event specified by its uid with the provided JSON data, validating the input and updating the event's attributes in the database.
8081	Extract the set of configuration parameters from the properties attached to the schedule.
8082	Ingest a finished recording to the Opencast server.
8083	Start the capture process, creating all necessary files and directories as well as ingesting the captured files if no backup mode is configured.
8084	Returns a simple fragment with embedded JavaScript and CSS.
8085	Returns list of unique `FragmentResource`s by order of first appearance.
8086	Returns the fragment in a dictionary representation.
8087	Returns a new Fragment from a dictionary representation.
8088	Add content to this fragment.
8089	Add a resource needed by this Fragment.
8090	Add a resource by URL needed by this Fragment.
8091	Register a Javascript function to initialize the Javascript resources.
8092	Get resource HTML for this Fragment.
8093	Returns `resource` wrapped in the appropriate html tag for its mimetype.
8094	Render a fragment to HTML or return JSON describing it, based on the request.
8095	Renders a standalone page as a response for the specified fragment.
8096	Render the specified fragment to HTML for a standalone page.
8097	Calculate q-values and FDR statistics for p-values using the Benjamini-Hochberg procedure with pi0 estimation.
8098	Converts list or flattens n-dim array to 1-dim array if possible
8099	Find matching q-value for each score in 'scores'
8100	Compute posterior probabilities for each chromatogram hypothesis and null hypothesis.
8101	Create artificial cutoff sample points from given range of cutoff values in df with specified number of sample points.
8102	Summary error table for some typical q-values
8103	Takes lists of decoy and target scores and creates error statistics for target values.
8104	Finds cut off target score for specified false discovery rate fdr
8105	Conduct semi-supervised learning and error-rate estimation for MS1, MS2 and transition-level data.
8106	Infer peptidoforms after scoring of MS1, MS2 and transition-level data.
8107	Infer peptides and conduct error-rate estimation in different contexts.
8108	Infer proteins and conduct error-rate estimation in different contexts.
8109	Subsample OpenSWATH file to minimum for integrated scoring
8110	Reduce scored PyProphet file to minimum for global scoring.
8111	Backpropagate multi-run peptide and protein scores to single files.
8112	Filter sqMass files
8113	Returns a restclients.Group object for the group identified by the passed group ID.
8114	Creates a group from the passed restclients.Group object.
8115	Deletes the group identified by the passed group ID.
8116	Returns a list of restclients.GroupMember objects for the group identified by the passed group ID.
8117	Updates the membership of the group and returns a list of members not found.
8118	Returns a count of effective members for the group identified by the passed group ID.
8119	Returns True if the netid is in the group, False otherwise.
8120	Modify the Sphinx configuration file to add custom extensions and change the HTML theme to read-the-docs.
8121	Create 3 datasets in a group to represent the sparse array.
8122	Decrypts context.io_manager's stdin and sends that to context.io_manager's stdout.
8123	Returns a stdin-suitable file-like object based on the optional os_path and optionally skipping any configured sub-command.
8124	Returns a stdout-suitable file-like object based on the optional os_path and optionally skipping any configured sub-command.
8125	Returns a stderr-suitable file-like object based on the optional os_path and optionally skipping any configured sub-command.
8126	Returns a debug-output-suitable file-like object based on the optional os_path and optionally skipping any configured sub-command.
8127	A context manager yielding a stdin-suitable file-like object based on the optional os_path and optionally skipping any configured sub-command.
8128	A context manager yielding a stdout-suitable file-like object based on the optional os_path and optionally skipping any configured sub-command.
8129	A context manager yielding a stderr-suitable file-like object based on the optional os_path and optionally skipping any configured sub-command.
8130	A context manager yielding a debug-output-suitable file-like object based on the optional os_path and optionally skipping any configured sub-command.
8131	Deletes all objects and containers in the account.
8132	Deletes all objects in the container.
8133	Instance method decorator to convert an optional file keyword argument into an actual value, whether it be a passed value, a value obtained from an io_manager, or sys.stdout.
8134	Instance method decorator to convert an optional file keyword argument into an actual value, whether it be a passed value, a value obtained from an io_manager, or sys.stderr.
8135	Outputs the error msg to the specified file or stderr.
8136	Outputs help information to the specified file or stdout.
8137	Outputs usage information to the specified file or standard output.
8138	Outputs version information to the specified file or stdout.
8139	Performs a direct HTTP request to the Swift service.
8140	POSTs the account and returns the results.
8141	Sends a DELETE request to the account and returns the results.
8142	PUTs the container and returns the results.
8143	HEADs the object and returns the results.
8144	GETs the object and returns the results.
8145	PUTs the object and returns the results. This is used to create or overwrite objects.
8146	POSTs the object and returns the results, used to update the object's header values.
8147	Resolves an option value into options by setting options.<option_name> to a resolved value, prioritizing options over environment variables over configuration file values.
8148	Returns a new CLIContext instance that is a shallow copy of the original.
8149	Convenience function to output headers in a formatted fashion to a file-like object, optionally muting specified headers.
8150	Authenticates and outputs the resulting authentication information.
8151	Returns a TempURL good for the given request method, url, and number of seconds from now, signed by the given key.
8152	URL encode a string with UTF-8 encoding, protecting safe characters.
8153	Issues commands for each item in an account or container listing.
8154	Obtains a client for use, whether an existing unused client or a brand new one if none are available.
8155	Generator that encrypts a content stream using AES 256 in CBC mode.
8156	Generator that decrypts a content stream using AES 256 in CBC mode.
8157	Performs PUTs rooted at the path using a directory structure pointed to by context.input_.
8158	Performs a PUT operation on an account with the specified context parameters.
8159	Performs a PUT on the container.
8160	Returns body for manifest file and modifies put_headers.
8161	Creates container for segments of file with `path`
8162	Generates a TempURL and sends it to the context's stdout.
8163	Translates information from x_trans_id and sends it to context.io_manager's stdout.
8164	Outputs help information.
8165	Check whether the "file" is empty reading the single byte.
8166	Encrypts context.io_manager's stdin and sends that to context.io_manager's stdout.
8167	Gets the status of a commit.
8168	Get data for a given pull request.
8169	Get the last 30 pull requests from a repository.
8170	Write forwards method to set all SliderItemTitle objects as published.
8171	Returns the published slider items.
8172	Renders the hero slider.
8173	Acquire the lock to read
8174	Release the lock after reading
8175	Acquire the lock to write
8176	Add a task to the registry.
8177	Remove a task from the registry.
8178	Get a task from the registry.
8179	Get the list of tasks.
8180	Returns a dict with the representation of this task configuration object.
8181	Create a configuration object from a dictionary.
8182	Execute a Perceval job on RQ.
8183	Initialize the archive manager.
8184	Run the backend with the given parameters.
8185	Execute a backend of Perceval.
8186	Configure the index to work with
8187	Create a mapping in Elasticsearch by sending a PUT request with the provided mapping data to the specified index URL.
8188	Custom JSON encoder handler
8189	Write items to the queue indefinitely with a 1-second delay between writes.
8190	Add and schedule a task.
8191	Remove and cancel a task.
8192	Get the items fetched by the jobs.
8193	Check that the task arguments received are valid
8194	Parse the archive arguments of a task.
8195	Custom method to execute a job and notify of its result
8196	Schedule a job in the given queue.
8197	Cancel the job related to the given task.
8198	Run thread to listen for jobs and reschedule successful ones.
8199	Listen for completed jobs and reschedule successful ones.
8200	Start scheduling jobs.
8201	Schedule a task by creating and queuing a job based on the task configuration.
8202	Cancel or 'un-schedule' a task.
8203	Handle successful jobs by processing results and rescheduling tasks.
8204	Handle failed jobs
8205	Build the set of arguments required for running a job
8206	Gets contents of secret file
8207	Register the API view class in the bananas router.
8208	Register a generic class based view wrapped with ModelAdmin and fake model.
8209	Extended DRF with fallback to requested namespace if request.version is missing
8210	Get or generate human readable view name.
8211	Derives a PEP386-compliant version number from VERSION.
8212	Get engine or raise exception, resolves Alias-instances to a sibling target.
8213	Perform a lookup in _ENGINE_MAPPING using engine_string.
8214	Get database name and database schema from path.
8215	Return a django-style database configuration based on ``url``.
8216	Parse a database URL and return a DatabaseInfo named tuple.
8217	Log in django staff user
8218	Retrieve logged in user info
8219	Change password for logged in django staff user.
8220	This method builds a URL field for a model serializer, overriding DRF's default behavior to use a custom view name derived from the current view's URL name.
8221	Parse string to bool.
8222	Parse numeric string to int. Supports oct formatted string.
8223	Return appropriate parser for given type.
8224	Get and parse prefixed django settings from env.
8225	Work-in-progress constructor, consuming fields and values from django model instance.
8226	Implementation of Y64 non-standard URL-safe base64 variant.
8227	Create a field by field info dict.
8228	Create a Validator instance from a data structure dictionary.
8229	Generates a Cartesian product of the input parameter dictionary.
8230	Takes a list of explored parameters and finds unique parameter combinations.
8231	Helper function to turn the simple logging kwargs into a `log_config`.
8232	Decorator to allow a simple logging configuration.
8233	Tries to make directories for a given filename, ignoring errors but notifying via stderr.
8234	Returns all valid python strings inside a given argument string.
8235	Renames a given filename with valid wildcard placements.
8236	Adds a logger with a given name. If no name is given, constructs name from the class name.
8237	Extracts the wildcards and file replacements from the `trajectory`
8238	Displays a progress bar.
8239	Searches for parser settings that define filenames and renames them according to wildcard rules, while also creating corresponding folders if specified.
8240	Turns a ConfigParser into a StringIO stream.
8241	Searches for multiprocessing options within a ConfigParser and returns a new parser with those options (without the 'multiproc_' prefix).
8242	Searches for multiprocessing options in a given dictionary and returns a new dictionary with the 'multiproc_' prefix removed.
8243	Checks and converts all settings passed to the Manager, including multiprocessing options and logging configuration.
8244	Checks for filenames within a config file and translates them, and creates directories for the files.
8245	Recursively walks and copies the `log_config` dict, translates filenames, and creates directories if necessary.
8246	Creates logging handlers and redirects stdout.
8247	Finalizes the manager, closes and removes all handlers if desired.
8248	Starts redirection of `stdout`
8249	Writes data from buffer to logger
8250	Compares two result instances for equality based on full name and data, excluding comments. Returns True if equal, False otherwise. Raises ValueError if both inputs are parameters.
8251	Compares two parameter instances for equality based on full name, data, and ranges.
8252	Decorate a function as a manual run function.
8253	A decorator to mark functions as deprecated, emitting a warning when the function is used.
8254	Check for mutually exclusive parameters and map one to another if specified.
8255	This is a decorator that handles keyword argument name changes over versions, supporting both old and new argument names while issuing deprecation warnings.
8256	Retries a function with specified error handling and optional logging.
8257	Decorate that adds the prefix naming scheme
8258	Adds all necessary parameters to `traj`.
8259	Creates and runs BRIAN network based on the parameters in `traj`.
8260	Simulation function for Euler integration.
8261	Adds all necessary parameters to the `traj` container.
8262	Compute the Lorenz attractor differential equation for given parameters and initial values.
8263	Creates a service from a constructor and checks which kwargs are not used.
8264	Creates a storage service based on the provided parameters, handling filename extensions and class instantiation.
8265	Adds all necessary parameters to the `traj` container for differential equation simulation, including steps, dt, initial_conditions, and system-specific parameters for Lorenz or Roessler attractors.
8266	Evaluate the Roessler attractor differential equation for given parameters and initial conditions.
8267	Compress an HDF5 file to reduce size by calling ptrepack with compression properties from a specified trajectory.
8268	Checks if any parameter in the group node is explored.
8269	Computes model equations for the excitatory and inhibitory population.
8270	Pre-builds the neuron groups if relevant parameters are not explored.
8271	Builds the neuron groups.

The method constructs neuron groups only if they haven't been pre-built previously. It takes a trajectory container, a list of BRIAN network objects, and a network dictionary as parameters. The network dictionary is updated with references to the inhibitory and excitatory neuron groups.
8272	Builds the neuron groups from `traj` and adds them to `brian_list` and `network_dict`.
8273	Pre-builds the connections if relevant parameters are not explored and neuron groups exist.
8274	Builds the connections.
8275	Adds all necessary parameters to `traj` container.
8276	Computes Fano Factor for one neuron.
8277	Computes average Fano Factor over many neurons.
8278	Calculates average Fano Factor of a network.
8279	Adds monitors to the network if the measurement run is carried out.
8280	Adds monitors to the network

The method adds multiple monitors (spike times, membrane potential, excitatory synaptic current, and inhibitory synaptic current) to a network and stores them in a dictionary.
8281	Makes a subfolder for plots and returns the path name to the print folder.
8282	Plots a state variable graph for several neurons into one figure
8283	Makes plots and stores them into subfolders
8284	Extracts monitor data and plots.
8285	Function that parses the batch id from the command line arguments
8286	Chooses exploration according to `batch`
8287	Return the variables associated with this node, creating them if they don't exist.
8288	Alternative naming, you can use `node.func.name` instead of `node.f_func`
8289	Renames the tree node.
8290	Sets some details for internal handling.
8291	Maps a given node and a store_load constant to the message that is understood by the storage service.
8292	Removes a subtree from the trajectory tree.
8293	Deletes a single node from the tree and removes all references to it, including handling special cases for root node and various parameter groups.
8294	Removes a single node from the tree.
8295	Removes a given node from the tree along a specified branch.
8296	Maps a given shortcut to corresponding name.
8297	Adds the correct sub branch prefix to a given name.
8298	Determines types for generic additions
8299	Adds a given item to the tree irrespective of the subtree.
8300	Adds a new item to the tree.
8301	Creates a link and checks if names are appropriate.
8302	Checks if a list contains strings with invalid names and returns a description of the name violations.
8303	Generically creates a new group inferring from the `type_name`.
8304	Generically creates a novel parameter or result instance inferring from the type_name.
8305	Renames a given instance based on parent_node and name, adding meta information like depth.
8306	Returns an iterator over nodes hanging below a given start node.
8307	Returns an iterator over a node's children, optionally including links and handling trajectory runs by blinding out irrelevant sub branches.
8308	Iterator function traversing the tree below `node` in breadth first search manner.
8309	Fast search for a node in the tree using reference dictionaries.
8310	Searches for an item in the tree below the specified node and returns the found node along with its depth.
8311	Performs a backwards search from the terminal node back to the start node.
8312	Alternative naming, you can use `node.kids.name` instead of `node.name` for easier tab completion.
8313	Can be called from storage service to create a new group to bypass name checking
8314	Can be called from storage service to create a new leaf to bypass name checking
8315	Returns a list of all children names.
8316	Creates a debug object containing the whole tree structure for easier inspection.
8317	Returns the parent of the node.
8318	Adds an empty generic group under the current node.
8319	Adds a link to an existing node.
8320	Removes a link from the current group node with a given name.
8321	Adds an empty generic leaf under the current node.
8322	Recursively removes the group and all its children.
8323	Removes a child of the group.
8324	Checks if the node contains a specific parameter or result.
8325	Similar to `f_get`, but returns the default value if `name` is not found in the trajectory.
8326	Returns a children dictionary.
8327	Returns a dictionary of groups hanging immediately below this group.
8328	Returns a dictionary of all leaves hanging immediately below this group.
8329	Returns a link dictionary.
8330	Stores a child or recursively a subtree to disk.
8331	Stores a group node to disk.
8332	Loads a child or recursively a subtree from disk.
8333	Loads a group from disk.
8334	Adds an empty parameter group under the current node.
8335	Adds a parameter under the current node.
8336	Adds an empty result group under the current node.
8337	Adds a result under the current node.
8338	Adds an empty derived parameter group under the current node.
8339	Adds a derived parameter under the current group.
8340	Adds an empty config group under the current node.
8341	Adds a config parameter under the current group.
8342	The fitness function evaluates an individual by summing its elements and storing the result.
8343	Adds commit information to the trajectory.
8344	Makes a git commit and returns whether a new commit was triggered and the SHA_1 code of the commit.
8345	Flattens a nested dictionary by concatenating keys with a separator.
8346	Nests a given flat dictionary by splitting keys around the specified separator.
8347	Plots a progress bar to the given logger for large for loops.
8348	Helper function to support both Python versions
8349	Takes a function and keyword arguments and returns the ones that can be passed.
8350	Formats timestamp to human readable format
8351	Returns local tcp address for a given port, automatic port if None
8352	Like os.makedirs but takes care about race conditions
8353	Resets the progressbar to start a new one.
8354	Calculates remaining time as a string.
8355	Returns annotations as dictionary.
8356	Removes `key` from annotations
8357	Returns all annotations lexicographically sorted as a concatenated string.
8358	Turns a given shared data item into an ordinary one.
8359	Turns an ordinary data item into a shared one.
8360	Creates shared data on disk with a StorageService on disk.

Needs to be called before shared data can be used later on.

Actual arguments of ``kwargs`` depend on the type of data to be
created. For instance, creating an array one can use the keyword
``obj`` to pass a numpy array (``obj=np.zeros((10,20,30))``).
Whereas for a PyTables table may need a description dictionary
(``description={'column_1': pt.StringCol(2, pos=0),'column_2': pt.FloatCol( pos=1)}``)
Refer to the PyTables documentation on how to create tables.
8361	Interface with the underlying storage.
8362	Returns the actual node of the underlying data.
8363	Checks if outer data structure is supported.
8364	Calls the corresponding function of the shared data item.
8365	Target function that manipulates the trajectory and stores process information.
8366	Handles locking of locks, returning WAIT if already locked by another client, LOCK_ERROR if client re-locks without releasing, or GO if successfully locking.
8367	Notifies the Server to shutdown
8368	Closes socket and terminates context. NO-OP if already closed.
8369	Starts connection to server if not existent.

NO-OP if connection is already established.
Makes ping-pong test as well if desired.
8370	Returns response and number of retries for a request with retry logic.
8371	Acquires lock and returns `True`, blocking until lock is available.
8372	Handles listening requests from the client.
8373	If there is space it sends data to server, otherwise waits until space becomes available.
8374	Detects if lock client was forked by comparing process IDs and restarts connection if fork is detected.
8375	Handles data and returns `True` or `False` if everything is done.
8376	Starts listening to the queue.
8377	Gets data from queue
8378	Gets data from pipe
8379	Acquires a lock before storage and releases it afterwards.
8380	Simply keeps a reference to the stored data
8381	Stores references to disk and may collect garbage.
8382	Decorator wrapping the environment to use a config file
8383	Collects all settings within a section
8384	Collects all info from three sections
8385	Copies parsed arguments into the kwargs passed to the environment
8386	Adds parameters and config from the `.ini` file to the trajectory
8387	Converts a rule given as an integer into a binary list representation.
8388	Creates an initial state for the automaton.
8389	Plots an automaton pattern and saves the image to a file.
8390	Simulates a 1 dimensional cellular automaton.
8391	Main simulation function for cellular automaton patterns generation and plotting.
8392	Signals the process timer and emits a message if more time than the display time has passed.
8393	Direct link to the overview group
8394	Loads a particular item from disk.
8395	Stores a particular item to disk.
8396	Loads several items from an iterable.
8397	Reads out the properties for storing new data into the hdf5file
8398	Stores several items from an iterable into the service.
8399	Routine to close an hdf5 file

The file is closed only when `closing=True`. `closing=True` means that
the file was opened in the current highest recursion level. This prevents re-opening
and closing of the file if `store` or `load` are called recursively.
8400	Extracts file information from kwargs by popping relevant keys and setting instance attributes.
8401	Backs up a trajectory to a specified or default backup file location.
8402	Reads out a row and returns a dictionary containing the row content.
8403	Prepares a trajectory for merging by storing extended parameters and updating metadata.
8404	Loads meta information about the trajectory including version checking, skeleton information, and run information.
8405	Loads data starting from a node along a branch and recursively loads all data at the end of the branch.
8406	Checks for version mismatch and raises VersionMismatchError if versions do not match unless force=True.
8407	Fills the `run` overview table with trajectory information and updates existing records.
8408	Recalls names of all explored parameters from trajectory data.
8409	Stores all explored parameter names for internal recall in an HDF5 file table.
8410	Creates the overview tables in overview group.
8411	Stores a trajectory to an HDF5 file, including all groups, parameters, and results.
8412	Stores data starting from a node along a branch and recursively loads all data at the end of the branch.
8413	Creates a new pypet leaf instance.
8414	Loads a node from hdf5 file and recursively loads children up to max_depth.
8415	Stores a node to hdf5 and recursively stores everything below it if desired.
8416	Stores a single row into an overview table.
8417	Creates a new table, or if the table already exists, returns it.
8418	Returns an HDF5 node by the path specified in `name`
8419	Stores original data type to hdf5 node attributes for preserving the data type.
8420	Checks if loaded data has the type it was stored in. If not converts it.
8421	Adds or changes a row in a pytable.
8422	Copies data from `insert_dict` into a pytables `row`.
8423	Extracts information from a given item to be stored into a pytable row.
8424	Cuts string data to the maximum length allowed in a pytables column if string is too long.
8425	Creates or returns a group.
8426	Creates new or follows existing group nodes along a given colon separated key.
8427	Stores annotations into an hdf5 file.
8428	Loads annotations from disk.
8429	Stores a group node.
8430	Loads a group node and potentially everything recursively below.
8431	Reloads skeleton data of a tree node
8432	Extracts storage flags for data in `data_dict` if they were not specified in `flags_dict`.
8433	Adds data to the summary tables and returns if `instance`s comment has to be stored.
8434	Adds meta information to HDF5 storage, including overview tables and instance attributes.
8435	Stores a `store_dict` into HDF5 format based on storage flags and data types.
8436	Stores a parameter or result to hdf5.
8437	Creates and array that can be used with an HDF5 array object
8438	Creates a new empty table in HDF5 format with optional description and filters.
8439	Stores a python dictionary as pytable
8440	Stores a pandas DataFrame into hdf5.
8441	Stores data as carray, earray or vlarray depending on flag.
8442	Stores data as array in HDF5 file with type handling and error management.
8443	Removes a link from disk
8444	Removes a parameter or result or group from the hdf5 file.
8445	Stores data as pytable.
8446	Returns a description dictionary for pytables table creation
8447	Creates a pytables column instance based on the type of the first element in the column data.
8448	Returns the longest string size for a string entry across data.
8449	Loads data from HDF5 group into a dictionary based on specified loading criteria and data types.
8450	Loads data that was originally a dictionary when stored.
8451	Reads shared data and constructs the appropriate class.
8452	Reads a non-nested PyTables table column by column and creates a new ObjectTable for the loaded data.
8453	Reads data from an array or carray.
8454	Helper function that creates a novel trajectory and loads it from disk.
8455	Creates a run set name based on `idx`
8456	Sets properties like ``v_fast_access``.
8457	Adds classes or paths to classes to the trajectory to create custom parameters.
8458	Make the trajectory behave as during a particular single run for easier data analysis.
8459	Makes the trajectory iterate over all runs.
8460	Shrinks the trajectory and removes all exploration ranges from the parameters.
8461	Generic preset function, marks a parameter or config for presetting.
8462	Presets parameter value before a parameter is added.
8463	Called by the environment to make some initial configurations before performing the individual runs.
8464	Searches for all occurrences of `name` in each run and returns an ordered dictionary with run names or indices as keys and found items as values.
8465	Check if a run is completed, either all runs or a specific one by name or ID.
8466	Called if trajectory is expanded, deletes all explored parameters from disk.
8467	Pass a node to insert the full tree to the trajectory.
8468	Prepares the trajectory to explore the parameter space.
8469	Overwrites the run information of a particular run.
8470	Adds a new run to the `_run_information` dict.
8471	Locks all non-empty parameters
8472	Locks all non-empty derived parameters.
8473	Final rollback initiated by the environment that restores the trajectory and stores metadata to disk.
8474	Loads the full skeleton from the storage service.
8475	Loads a trajectory via the storage service.
8476	Backs up the trajectory with the given storage service.
8477	Creates a full mapping from all wildcard translations to the corresponding wildcards
8478	Merge several trajectories into the current one.
8479	Updates the `run_information` of the current trajectory by merging run data from another trajectory.
8480	Renames a full name based on wildcards and a particular run.
8481	Merges derived parameters with `run_ALL` in their names by creating a new parameter for the first run and linking other runs to it, while handling duplicates and maintaining parameter consistency.
8482	Merges all links from another trajectory, handling renaming and translation of linked items while respecting allowed translations and ignored data.
8483	Merges meta data about previous merges, git commits, and environment settings of the other trajectory into the current one.
8484	Merges trajectories by loading iteratively items from another trajectory and storing them into the current trajectory, while handling renaming and memory management.
8485	Merges all results from another trajectory, handling name renaming and ignoring specified data.
8486	Can be called to rename and relocate the trajectory.
8487	Stores the trajectory to disk and recursively all data in the tree.
8488	Restores the default value in all explored parameters and sets the v_idx property back to -1 and v_crun to None.
8489	Notifies the explored parameters what current point in the parameter space they should represent.
8490	Modifies the trajectory for single runs executed by the environment
8491	Returns a list of run names, optionally sorted using bucket sort for efficiency.
8492	Returns information about a single run or all runs as a dictionary.
8493	Finds a single run index given a particular condition on parameters.
8494	Start a run for this experiment trajectory.

The method allows manually initiating an experiment run, either using the current trajectory or a specified run. It handles run initialization, optional conversion to a more efficient run format, and sets the start state for the run. The method ensures that a valid run is established before proceeding, raising an error if the trajectory is not set to a specific run when no run name or index is provided.
8495	Finish a manually started run and optionally clean up data and store meta data.
8496	Sets the start timestamp and formatted time to the current time.
8497	Sets the finish time and computes the runtime in human readable format
8498	Creates a new node and checks if the node needs to know the trajectory.
8499	Returns a dictionary containing parameters with options for fast access and copying.
8500	Called by the environment after storing to perform some rollback operations.

All results and derived parameters created in the current run are removed.

Important for single processing to not blow up the parent trajectory with the results of all runs.
8501	Returns a dictionary containing the full config names as keys and the config parameters or the config parameter data items as values.
8502	Returns a dictionary containing the full result names as keys and the corresponding result objects or result data items as values.
8503	Stores individual items to disk.
8504	Loads parameters and results specified in `iterator` from disk into the trajectory.
8505	Removes parameters, results or groups from the trajectory.
8506	Deletes several links from the hard disk.
8507	Recursively removes all children of the trajectory.
8508	Deletes items from storage on disk.
8509	Starts a pool single run and passes the storage service.
8510	Single run wrapper for the frozen pool, makes a single run and passes kwargs
8511	Configures the pool and keeps the storage service.
8512	Configures the frozen pool and keeps all kwargs
8513	Wrapper function that first configures logging and starts a single run afterwards.
8514	Wrapper function that configures a frozen SCOOP set up and deletes old SCOOP data if necessary.
8515	Wrapper function for scoop that does not configure logging.
8516	Requests the logging manager to configure logging.
8517	Sets niceness of a process
8518	Wrapper that allows graceful exits of single runs
8519	Performs a single run of the experiment.
8520	Starts running a queue handler and creates a log file for the queue.
8521	Loads a class from a string naming the module and class name.
8522	Dynamically creates a class using either existing imports or dynamic imports.
8523	Returns the length of the parameter range.
8524	String summary of the value handled by the parameter.
8525	Checks if the parameter considers two values as equal.
8526	Returns a python iterable containing the exploration range.
8527	Explores the parameter according to the iterable and stores the exploration range in memory.
8528	Explores the parameter according to the iterable and appends to the exploration range.
8529	Checks if data values are valid by ensuring they are supported by the parameter and of the same type as the default value.
8530	Returns a dictionary of formatted data understood by the storage service.
8531	Loads the data and exploration range from the load_dict.
8532	Reconstructs the data and exploration array from a load dictionary.
8533	Matrices are equal if they hash to the same value.
8534	Checks if a data is csr, csc, bsr, or dia Scipy sparse matrix
8535	Extracts data from a sparse matrix to make it serializable in a human readable format.
8536	Formats a name for storage.
8537	Reconstructs a matrix from a list containing sparse matrix extracted properties.
8538	Reconstructs the data and exploration array for a sparse parameter.
8539	Returns a dictionary for storage of the object's data and explored range, with pickle serialization.
8540	Reconstructs objects from the pickle dumps in `load_dict` and sets the `v_protocol` property to the protocol used to store 'data'.
8541	Translates integer indices into the appropriate names
8542	Summarizes data handled by the result as a string.
8543	Returns all handled data as a dictionary.
8544	Method to put data into the result.
8545	Returns items handled by the result.
8546	Sets a single data item of the result.
8547	Supports everything of parent class and csr, csc, bsr, and dia sparse matrices.
8548	Returns a storage dictionary understood by the storage service, handling sparse matrices by extracting them similar to SparseParameter and marking them with the identifier `__spsp__`.
8549	Loads data from `load_dict` and reconstructs sparse matrices similar to `SparseParameter`.
8550	Adds a single data item to the pickle result.
8551	Returns a dictionary containing pickle dumps of the stored data.
8552	Reconstructs all items from the pickle dumps in `load_dict` and sets the `v_protocol` property.
8553	Simply merge all trajectories in the working directory
8554	Uploads a file to a remote SFTP location.
8555	Downloads a file from a remote SFTP server to the local working directory.
8556	Creates and returns a new SAGA session with authentication context.
8557	Merges all trajectories found in the working directory using a SAGA job.
8558	Starts all jobs and runs `the_task.py` in batches.
8559	Sophisticated simulation of multiplication
8560	Runs a simulation of a model neuron and returns an estimate of its firing rate.
8561	Postprocesses computed firing rates into a pandas DataFrame table indexed by parameters.
8562	Adds all parameters to `traj`
8563	Explores different values of `I` and `tau_ref` by creating a cartesian product of parameter ranges and adding them to the trajectory for exploration.
8564	Runs a network before the actual experiment.
8565	Runs a network in an experimental run by executing a series of subruns with defined steps including adding components, running the network, and analyzing results.
8566	Extracts subruns from the trajectory by processing duration parameters and organizing them by order, raising errors for duplicate or missing orders.
8567	Generic `execute_network_run` function, handles experimental runs as well as pre-runs.
8568	Adds parameters for a network simulation by calling the add_parameters method on all components, analyzers, and the network runner in sequence.
8569	Starts a network run before the individual run.
8570	Top-level simulation function that performs individual network runs during parameter exploration.
8571	Starts a single run carried out by a NetworkRunner.
8572	Function to create generic filenames based on explored parameters.
8573	Returns next element from chain.
8574	Merges all files in a given folder into a single trajectory.
8575	Handle SIGINT signal, exit gracefully on first encounter, raise KeyboardInterrupt on second encounter.
8576	Small configuration file management function
8577	Method to request a PIN from ecobee for authorization
8578	Method to request API tokens from ecobee.
8579	Method to refresh API tokens from ecobee
8580	Set self.thermostats to a json list of thermostats from ecobee.
8581	Write API tokens to a file.
8582	Set the HVAC mode for a thermostat.
8583	Set the minimum time to run the fan each hour.
8584	Set a hold temperature for a thermostat.
8585	Set a climate hold - ie away, home, sleep
8586	Delete the vacation with name vacation
8587	Resume currently scheduled program.
8588	Send a message to the thermostat.
8589	Set humidity level.
8590	Generate the delay in seconds for DISCOVER packet transmission with randomization.
8591	Generate the time in seconds for DHCPDISCOVER retransmission with exponential backoff and randomization.
8592	Generate time in seconds to retransmit DHCPREQUEST.
8593	Generate RENEWING time according to RFC 2131 section 4.4.5, calculating T1 time with random fuzz factor to avoid synchronization.
8594	Return the self object attributes not inherited as dict.
8595	Reset object attributes when state is INIT.
8596	Workaround to get timeout in the ATMT.timeout class method.
8597	Workaround to change timeout values in the ATMT.timeout class method.
8598	Send discover packet and handle retransmission logic.
8599	Select an offer from the offers received.
8600	Send a DHCPREQUEST message and handle retransmission logic based on the current state.
8601	Set renewal, rebinding times.
8602	Process a received ACK packet.
8603	Process a received NAK packet.
8604	Initialize the DHCP client in INIT state, setting up timeouts and delays according to RFC 2131.
8605	BOUND state.
8606	RENEWING state.
8607	REBINDING state.
8608	END state.
8609	ERROR state.
8610	Timeout of selecting on SELECTING state.
8611	Timeout requesting in REQUESTING state.
8612	Timeout of renewing on RENEWING state.
8613	Timeout request rebinding on REBINDING state.
8614	Receive offer on SELECTING state.
8615	Receive ACK in REQUESTING state.
8616	Receive NAK in REQUESTING state.
8617	Receive ACK in RENEWING state.
8618	Receive NAK in RENEWING state.
8619	Receive ACK in REBINDING state.
8620	Receive NAK in REBINDING state.
8621	Action on renewing on RENEWING state.
8622	Assign a value to a name, removing it if the value is None.
8623	Append a value to multiple value parameter.
8624	Remove a value from multiple value parameter.
8625	Get programs statuses.
8626	Create Nagios and human readable supervisord statuses.
8627	Program main.
8628	Validate a decoded SNS message.
8629	Read tdms file and return channel names and data
8630	From circularity, compute the deformation
8631	Creates an fcs file for a given tdms file
8632	Returns True if left and right are equal.
8633	Adds a new patch with patchname to the queue and sets it as the topmost applied patch.
8634	Delete next unapplied patch
8635	Delete specified patch from the series.
8636	Checks if a backup file of the filename in the current patch exists.
8637	Creates a backup of file
8638	Add file to the patch with patch_name.
8639	Run command as a subprocess and wait until it is finished.
8640	Creates the directory and all its parent directories if it does not exist yet.
8641	Copy to destination directory recursively.
8642	Create hard link as link to this file
8643	Copy file to destination
8644	Returns the directory where the file is placed in or None if the path to the file doesn't contain a directory.
8645	Backup file in dest_dir directory and return File object or None.
8646	Refresh patch with specified patch_name or applied top patch if patch_name is None.
8647	Unapply patches up to patch_name. patch_name will end up as top patch.
8648	Unapply the top patch.
8649	Unapply all patches
8650	Apply all patches up to the specified patch name.
8651	Apply next patch in series file
8652	Apply all patches in series file.
8653	Reads all patches from the series file.
8654	Saves current patches list in the series file
8655	Add a patch to the patches list.
8656	Insert list of patches at the front of the current patches list.
8657	Add a list of patches to the patches list.
8658	Remove a patch from the patches list
8659	Returns a list of patches after the specified patch from the patches list.
8660	Returns a list of patches before the given patch from the patches list.
8661	Returns a list of patches before the specified patch from the patches list, including the provided patch.
8662	Replace old_patch with new_patch while preserving comments.
8663	Creates the dirname and inserts a .version file
8664	Checks if the .version file has the correct supported version number.
8665	Adds the group and its arguments to a argparse.ArgumentParser instance
8666	Adds the argument to an argparse.ArgumentParser instance
8667	Adds this SubParser to the subparsers created by argparse.ArgumentParser.add_subparsers method.
8668	Sets args and kwargs that are passed when creating a subparsers group in an argparse.ArgumentParser.
8669	Adds the subparsers to an argparse.ArgumentParser
8670	Checks if a backup file of the filename in the current patch exists and raises a QuiltError if not.
8671	Checks if a backup file of the filename in the applied patches after patch exists
8672	Revert not added changes of filename using the specified patch or the topmost available patch.
8673	Import patch into the patch queue.
8674	Import several patches into the patch queue.
8675	Process each way.
8676	Get a list of nodes not found in OSM data.
8677	Process each node.
8678	Extract information of one route.
8679	Create a meaningful route name.
8680	Construct an id for agency using its tags.
8681	Process the files and collect necessary data.
8682	Process each relation and store valid relations with their attributes and members.
8683	Create `calendar`, `stop_times`, `trips` and `shapes` dummy data.
8684	Fill the fields that are necessary for passing transitfeed checks.
8685	Create station stop times for each trip.
8686	Write the GTFS feed to a zipped file.
8687	Write GTFS text files in the given path.
8688	Extract agency information from relation tags.
8689	Extract stops in a relation.
8690	Extract shape of one route.
8691	Gets a list of supported U2F versions from the device.
8692	Sends an APDU to the device and waits for a response.
8693	Interactively authenticates a AuthenticateRequest using an attached U2F device.
8694	Register a U2F device.
8695	Signs an authentication challenge.
8696	Interactively registers a single U2F device by attempting registration with available devices and handling various errors.
8697	Recursively converts unicode objects to UTF-8 encoded byte strings.
8698	Wraps a function with reporting to errors backend
8699	Wraps a class with reporting to errors backend by decorating each function of the class.
8700	Given a filepath and a list of regex patterns, this function returns true if the filepath matches any one of the patterns.
8701	Given an email address, check the email_remapping table to see if the email should be sent to a different address. This function also handles overriding the email domain if ignore_vcs_email_domain is set or the domain was missing.
8702	Helper function for retrieving a particular entry from the prefix trees
8703	Convert markdown text to reStructuredText format with specific pattern replacements for parameters, links, and numbered lists.
8704	Start the Flawless server with both HTTP and Thrift components.
8705	Helper function to record errors to the flawless backend
8706	Fetch an image from url and convert it into a Pillow Image object
8707	Convert string data into a Pillow Image object.
8708	Return a decorator that validates arguments with provided `validator` function.
8709	Check that the image's size is superior to `size`
8710	Check that the image width is superior to `width`
8711	Check that the image height is superior to `height`
8712	Converts the text category to a tasks.Category instance.
8713	Parse numeric fields.
8714	Iterator of the list of items in the XML source.
8715	Saves an error in the error list.
8716	Parses all data from the source, saving model instances.
8717	Receives an item and returns a dictionary of field values.
8718	Get an item from the database or an empty one if not found.
8719	Saves a model instance to the database.
8720	Downloads a HTTP resource from `url` and save to `dest`, handling Gzip compressed content.
8721	Opens the source file.
8722	Iterator to read the rows of the CSV file.
8723	Raises ValueError if this sandbox instance is currently running.
8724	Runs a command inside the sandbox and returns the results.
8725	Copies specified files into the working directory of this sandbox.
8726	Copies a file to the sandbox working directory and renames it.
8727	Return a list of all enrollments for the passed course_id.
8728	Return a list of all enrollments for the passed course sis id.
8729	Return a list of all enrollments for the passed section_id.
8730	Return a list of all enrollments for the passed section sis id.
8731	Return a list of enrollments for the passed user regid.
8732	Enroll a user into a course.
8733	List the roles for an account, for the passed Canvas account ID.
8734	List the roles for an account, for the passed account SIS ID.
8735	List all course roles available to an account, including inherited course roles.
8736	Get information about a single role for the specified Canvas account ID.
8737	Get information about a single role for the passed account SIS ID.
8738	Return course resource for given canvas course id.
8739	Return course resource for given sis id.
8740	Returns a list of courses for the passed account ID.
8741	Return a list of courses for the passed account SIS ID.
8742	Return a list of published courses for the passed account ID.
8743	Return a list of published courses for the passed account SIS ID.
8744	Return a list of courses for the passed regid.
8745	Create a canvas course with the given subaccount id and course name.
8746	Updates the SIS ID for the specified course.
8747	Returns participation data for the given account_id and term_id.
8748	Returns grade data for the given account_id and term_id.
8749	Returns statistics for the given account_id and term_id.
8750	Returns participation data for the given sis_course_id.
8751	Returns assignment data for the given course_id.
8752	Returns per-student data for the given course_id.
8753	Returns student activity data for the given user_id and course_id.
8754	Returns student messaging data for the given user_id and course_id.
8755	Return external tools for the passed canvas account id.
8756	Return external tools for the passed canvas course id.
8757	Create an external tool using the passed json_data.
8758	Update the external tool with the provided JSON data.
8759	Delete the external tool identified by external_tool_id.
8760	Check if a parameter is available on an object
8761	Returns user profile data.
8762	Returns a list of users for the given course id.
8763	Returns a list of users for the given sis course id.
8764	Create and return a new user and pseudonym for an account.
8765	Return a user's logins for the given user_id.
8766	Update an existing login for a user in the given account.
8767	Return url path to next page of paginated data.
8768	Canvas GET method on a full url. Return representation of the requested resource, chasing pagination links to coalesce resources if indicated.
8769	Return representation of the requested paged resource, either the requested page or chasing pagination links to coalesce resources.
8770	Canvas GET method. Return representation of the requested resource.
8771	Canvas PUT method.
8772	Canvas POST method.
8773	Canvas DELETE method.
8774	Return a list of the admins in the account.
8775	Flag an existing user as an admin within the account.
8776	Flag an existing user as an admin within the account sis id.
8777	Remove an account admin role from a user.
8778	Remove an account admin role from a user for the account sis id.
8779	Create a new grading standard for the specified course.
8780	Return section resource for given canvas section id.
8781	Return section resource for given sis id.
8782	Return list of sections for the passed course ID.
8783	Return list of sections for the passed course SIS ID.
8784	Return list of sections including students for the passed course ID.
8785	Return list of sections including students for the passed sis ID.
8786	Create a canvas section in the given course id.
8787	Update a canvas section with the given section id.
8788	List quizzes for a given course.
8789	Return account resource for given canvas account id.
8790	Return list of subaccounts within the account with the passed canvas id.
8791	Update the passed account and return the updated account.
8792	Updates the SIS ID for the specified account.
8793	Return the authentication settings for the passed account_id.
8794	Update the authentication settings for the passed account_id.
8795	Return a term resource for the passed SIS ID.
8796	Imports a CSV string via SIS import API.
8797	Imports a directory of CSV files.
8798	Get the status of an already created SIS import.
8799	Creates a zip archive from files in path.
8800	List assignments for a given course.
8801	Modify an existing assignment.
8802	Returns the list of reports for the canvas account id.
8803	Shows all reports of the passed report_type that have been run for the canvas account id.
8804	Generates a report instance for the canvas account id.
8805	Create a course provisioning report.
8806	Convenience method for creating a course SIS export report.
8807	Convenience method for creating an unused courses report.
8808	Returns a completed report as a list of csv strings.
8809	Returns the status of a report.
8810	Deletes a generated report instance.
8811	Move detections in the specified direction by applying delta values to x and y coordinates.
8812	Horizontally flip detections according to an image flip.
8813	Convert an object to a dictionary, handling ForeignKey fields and many-to-many relationships.
8814	Get the arguments given to the template tag element and complete these with the ones from the settings.py if necessary.
8815	Get the text to display when the field is empty.
8816	Parse uniformly args and kwargs from a templatetag
8817	Create and register metrics from a list of MetricConfigs.
8818	Setup logging for the application and aiohttp.
8819	Configure the MetricRegistry.
8820	Create Prometheus metrics from a list of MetricConfigs.
8821	Return a metric, optionally configured with labels.
8822	Home page request handler.
8823	Handler for metrics.
8824	A free-text query resolver by Wolfram|Alpha that returns the first result if available.
8825	Add forward compatibility for HTTPMessage in Python 2 by mapping deprecated method names to their new equivalents.
8826	Query Wolfram|Alpha using the v2.0 API
8827	The pods, assumptions, and warnings of this result.
8828	The pods that hold the response to a simple, discrete query.
8829	Add request content data to request body, set Content-type header.
8830	Call API and return response object with error details if applicable.
8831	Call the API with a GET request.
8832	Call the API with a DELETE request.
8833	Call the API with a PUT request.
8834	Call the API with a POST request.
8835	Process query recursively, splitting long text into sentences and handling API requests with support for sentence grouping and entity processing.
8836	Split sentences into groups of a specified length.
8837	Call the disambiguation service to process a PDF file and return the API response and status.
8838	Call the disambiguation service to disambiguate a search query.
8839	Call the segmenter to split text into sentences.
8840	Recognise the language of the text in input.
8841	Fetch the concept from the Knowledge base.
8842	Constructs the MDR ensemble from the provided training data and builds a feature map from ensemble predictions.
8843	Estimates the accuracy of the predictions from the MDR ensemble
8844	Constructs the MDR feature map from the provided training data.
8845	Convenience function that fits the provided data then constructs predictions from the provided features.
8846	Estimates the accuracy of the predictions from the constructed feature.
8847	Constructs the Continuous MDR feature map from the provided training data.
8848	Uses the Continuous MDR feature map to construct a new binary feature from the provided features.
8849	Estimates the quality of the ContinuousMDR model using a t-statistic.
8850	Fits a MDR model to variables X and Y with the given labels, then returns the resulting predictions
8851	Fits a MDR model to all n-way combinations of the features in X.
8852	Visualizes the MDR grid of a given fitted MDR instance for 2-way models.
8853	Conveniently get the security configuration for the specified application without the annoying 'SECURITY_' prefix.
8854	Get a Flask-Security configuration value.
8855	Creates a new vector.
8856	Creates a new vector from members.
8857	Evaluate a file with the given name into a Python module AST node.
8858	Evaluate the forms in stdin into a Python module AST node.
8859	Evaluate the forms in a string into a Python module AST node.
8860	Bootstrap the REPL with useful variables and return the bootstrapped module for REPL command usage.
8861	Run a Basilisp script or a line of code.
8862	Decorator function which can be used to make Python multi functions.
8863	Swap the methods atom to include method with key.
8864	Add a new method to this function which will respond for key returned from the dispatch function.
8865	Return the method which would handle this dispatch key or None if no method defined for this key and no default.
8866	Swap the methods atom to remove method with key.
8867	Remove the method defined for this key and return it.
8868	Return True if the Var holds a macro function.
8869	Fetch the location of the form in the original filename from the input form's metadata.
8870	Attach any available location information from the input form to the node environment returned from the parsing function.
8871	Assert that `recur` forms do not appear in any position of this or child AST nodes.
8872	Assert that `recur` forms only appear in the tail position of AST nodes.
8873	Resolve a non-namespaced symbol into a Python name or a local Basilisp Var.
8874	Resolve a Basilisp symbol as a Var or Python name.
8875	Take a Lisp form as an argument and produce a Basilisp syntax tree matching the clojure.tools.analyzer AST spec.
8876	If True, warn when a defined Var name is shadowed in an inner scope.
8877	Add a new symbol to the symbol table.
8878	Produce a Lisp representation of an associative collection with specified start and end strings.
8879	Produce a Lisp representation of a sequential collection, bookended with the start and end string supplied.
8880	Return a string representation of a Lisp object.
8881	Fallback function for lrepr for subclasses of standard types.
8882	Return a transformed copy of this node with location information updated and child nodes recursively transformed.
8883	Compile and execute the given form. This function will be most useful for the REPL and testing purposes. Returns the result of the executed expression.
8884	Incrementally compile a stream of AST nodes in module mod.
8885	Compile an entire Basilisp module into Python bytecode which can be executed as a Python module.
8886	Compile cached bytecode into the given module.
8887	Create a Sequence from Iterable s.
8888	Replace characters which are not valid in Python symbols with valid replacement strings.
8889	Replace munged string components with their original representation.
8890	Create a Fraction from a numerator and denominator.
8891	Get the default logging handler for Basilisp.
8892	Creates a new map.
8893	Partition coll into groups of size n.
8894	Wrap a reader function in a decorator to supply line and column information along with relevant forms.
8895	Read a namespaced token from the input stream.
8896	Read a collection from the input stream and create the collection using f.
8897	Read a list element from the input stream.
8898	Read a vector element from the input stream.
8899	Return a set from the input stream.
8900	Return a map from the input stream.
8901	Return a string from the input stream.
8902	Return a symbol from the input stream, resolving it if in syntax quoted form.
8903	Return a keyword from the input stream.
8904	Read metadata from input stream and apply it to the next object.
8905	Read a function reader macro from the input stream.
8906	Read a quoted form from the input stream.
8907	Expand syntax quoted forms to handle unquoting and unquote-splicing.
8908	Post-process syntax quoted forms to generate forms that can be assembled into the correct types at runtime.
8909	Read a syntax-quote and set the syntax-quoting state in the reader.
8910	Read an unquoted form and handle any special logic of unquoting.
8911	Read a derefed form from the input stream.
8912	Read a character literal from the input stream.
8913	Read a regex reader macro from the input stream.
8914	Return a data structure evaluated as a reader macro from the input stream.
8915	Read the next full form from the input stream, consuming any reader comments completely.
8916	Read the next full form from the input stream.
8917	Read the contents of a stream as a Lisp expression.
8918	Read the contents of a string as a Lisp expression.
8919	Read the contents of a file as a Lisp expression.
8920	Update the internal line and column buffers after a new character is added.
8921	Push one character back onto the stream, allowing it to be read again.
8922	Advance the stream forward by one character and return the next token in the stream.
8923	Return the bytes for a Basilisp bytecode cache file.
8924	Unmarshal the bytes from a Basilisp bytecode cache file, validating the file header prior to returning. If the file header does not match, throw an exception.
8925	Return the path to the cached file for the given path.
8926	Hook into Python's import machinery with a custom Basilisp code importer.
8927	Find the ModuleSpec for the specified Basilisp module.
8928	Load and execute a cached Basilisp module.
8929	Load and execute a non-cached Basilisp module.
8930	Compile the Basilisp module into Python code.
8931	Create a new symbol.
8932	Return an iterable of possible completions for the given text.
8933	Private swap function used to either get the interned keyword instance from the input string.
8934	Create a new keyword.
8935	Chain a sequence of generated Python ASTs into a tuple of dependency nodes
8936	Generate recursive Python Attribute AST nodes for resolving nested names.
8937	Wrap simpler AST generators to return a GeneratedPyAST.
8938	Turn a collection of Lisp forms into Python AST nodes.
8939	Hydrate Generated Python AST nodes with line numbers and column offsets if they exist in the node environment.
8940	Wrap a generator function in a decorator to supply line and column information to the returned Python AST node.
8941	Wrap a generator function in a decorator to supply line and column information to the returned Python AST node and dependency nodes.
8942	Return True if the Var holds a value which should be compiled to a dynamic Var access.
8943	Return True if the Var can be redefined.
8944	Transform non-statements into ast.Expr nodes so they can stand alone as statements.
8945	Given a series of expression AST nodes, create a function AST node with the given name that can be called and will return the result of the final expression in the input body nodes.
8946	Return True if the compiler should emit a warning about this name being redefined.
8947	Return a Python AST Node for a `do` expression.
8948	Generate a safe Python function name from a function name symbol.
8949	Generate a list of Python AST nodes from function method parameters.
8950	Return a Python AST node for a function with a single arity.
8951	Return a Python AST node for a function with multiple arities.
8952	Return a Python AST Node for a `fn` expression.
8953	Generate custom `if` nodes to handle `recur` bodies.
8954	Generate an intermediate if statement which assigns to a temporary variable, which is returned as the expression value at the end of evaluation.
8955	Return a Python AST Node for a Basilisp function invocation.
8956	Return a Python AST Node for a `quote` expression.
8957	Return a Python AST node for `recur` occurring inside a `loop`.
8958	Return a Python AST Node for a `recur` expression.
8959	Return a Python AST Node for a `set!` expression.
8960	Return a Python AST Node for a `throw` expression.
8961	Return a Python AST Node for a `try` expression.
8962	Generate a Python AST node for accessing a locally defined Python variable.
8963	Generate Var.find calls for the named symbol.
8964	Generate a Python AST node for accessing a Var.
8965	Generate a Python AST node for Python interop property access.
8966	Generate a Python AST node for accessing a potential Python module variable name.
8967	Generate a Python AST node for accessing a potential Python module variable name with a namespace.
8968	Generate Python AST nodes for constant Lisp forms.
8969	Turn a quoted collection literal of Lisp forms into Python AST nodes.
8970	Take a Lisp AST node as an argument and produce zero or more Python AST nodes.
8971	Generate the Python Import AST node for importing all required language support modules.
8972	Generate the Python From ... Import AST node for importing language support modules.
8973	Assign a Python variable named `ns_var` to the value of the current namespace.
8974	Creates a new set.
8975	Creates a new set from members.
8976	Eliminate dead code from except handler bodies.
8977	Eliminate no-op constant expressions which are in the tree as standalone statements.
8978	Eliminate dead code from function bodies.
8979	Eliminate dead code from while bodies.
8980	Eliminate dead code from except try bodies.
8981	Create a new empty Basilisp Python module.
8982	If o is a ISeq, return the first element from o. If o is None, return None. Otherwise, coerces o to a Seq and returns the first.
8983	Return the elements after the first in a sequence, or an empty sequence if the input is None or cannot be converted to a sequence.
8984	Returns the nth rest sequence of coll, or coll if i is 0.
8985	Returns the nth next sequence of coll.
8986	Creates a new sequence where o is the first element and seq is the rest.
8987	Coerce the argument to a ISeq. If the argument is None, return None.
8988	Concatenate the sequences given by seqs into a single ISeq.
8989	Associate keys to values in associative data structure m.
8990	Conjoin xs to collection. New elements may be added in different positions depending on the type of coll. conj returns the same type as coll. If coll is None, return a list with xs conjoined.
8991	Return a function which is the partial application of f with args.
8992	Dereference a Deref object and return its contents.
8993	Compare two objects by value, treating True != 1 and False != 0.
8994	Division reducer. If both arguments are integers, return a Fraction. Otherwise, return the true division of x and y.
8995	Return a sorted sequence of the elements in coll. If a comparator function f is provided, compare elements in coll using f.
8996	Return true if collection contains the key k.
8997	Return the value of k in m. Return default if k not found in m.
8998	Recursively convert Python collections into Lisp collections.
8999	Recursively convert Lisp collections into Python collections.
9000	Produce a string representation of an object with optional human-readable formatting.
9001	Collect Python starred arguments into a Basilisp list.
9002	Trampoline a function repeatedly until it is finished recurring to help avoid stack growth.
9003	Decorator to set attributes on a function. Returns the original function after setting the attributes named by the keyword arguments.
9004	Return a new function with the given meta, merging with existing meta if present.
9005	Create a Basilisp function, setting meta and supplying a with_meta method implementation.
9006	Resolve the aliased symbol in the current namespace.
9007	Resolve the aliased symbol to a Var from the specified namespace.
9008	Add generated Python code to a dynamic variable in which_ns.
9009	Bootstrap the environment with functions that are difficult to express with the very minimal lisp environment.
9010	Intern the value bound to the symbol `name` in namespace `ns`.
9011	Create a new unbound `Var` instance to the symbol `name` in namespace `ns`.
9012	Return the value current bound to the name `name_sym` in the namespace specified by `ns_sym`.
9013	Return the value currently bound to the name in the specified namespace.
9014	Return the Var currently bound to the name in the namespace specified by `ns_qualified_sym`. If no Var is bound to that name, raise an exception.
9015	Add a gated default import to the default imports.
9016	Add a Symbol alias for the given Namespace.
9017	Intern the Var given in this namespace mapped by the given Symbol.
9018	Swap function used by intern to atomically intern a new variable in the symbol mapping for this Namespace.
9019	Find Vars mapped by the given Symbol input or None if no Vars are mapped by that Symbol.
9020	Add the Symbol as an imported Symbol in this Namespace. If aliases are given, the aliases will be applied to the symbol.
9021	Return the module if a module named by sym has been imported into this Namespace, None otherwise.
9022	Refer var in this namespace under the name sym.
9023	Get the Var referred by Symbol or None if it does not exist.
9024	Refer all public interns from another namespace.
9025	Refer all the Vars in the other namespace.
9026	Private swap function used by `get_or_create` to atomically swap the new namespace map into the global cache.
9027	Get the namespace bound to the symbol `name` in the global namespace cache, creating it if it does not exist. Return the namespace.
9028	Get the namespace bound to the symbol `name` in the global namespace cache. Return the namespace if it exists or None otherwise.
9029	Remove the namespace bound to the symbol `name` in the global namespace cache and return that namespace.
Return None if the namespace did not exist in the cache.
9030	Return a function which matches any symbol keys from map entries against the given text.
9031	Return an iterable of possible completions matching the given prefix from the list of aliased namespaces.
9032	Return an iterable of possible completions matching the given prefix from the list of imports and aliased imports.
9033	Return an iterable of possible completions matching the given prefix from the list of interned Vars.
9034	Return an iterable of possible completions matching the given prefix from the list of referred Vars.
9035	Return an iterable of possible completions for the given text in this namespace.
9036	Return the arguments for a trampolined function, with special handling for varargs by unrolling the final sequence argument if present.
9037	Creates a new list.
9038	Creates a new list from members.
9039	Create a new representer function that formats key values as multi-line strings with specified style.
9040	Decrypts a JWE token, decodes the resulting JWT token, and returns the payload.
9041	Encrypts the supplied JSON and returns a JWE token.
9042	Remove the key from the request cache and from memcache.
9043	Deconstruct the ``Constraint`` instance to a tuple.
9044	Close stream.
9045	Parse a FIQL formatted string into an Expression.
9046	Custom json dump using the custom encoder above.
9047	Handles decoding of nested date strings.
9048	Tries to decode strings that look like dates into datetime objects.
9049	Override of the default decode method that also uses decode_date.
9050	Overriding the default JSONEncoder.default for NDB support.
9051	Validate version before release.
9052	Generate changelog for the specified version.
9053	Find the strongly connected components in a graph using Tarjan's algorithm.
9054	Identify strongly connected components and perform topological sort on those components.
9055	Set parent ``Expression`` for this object.
9056	Get the parent ``Expression`` for this object.
9057	Add an operator to the expression, handling precedence rules and nested expressions appropriately.
9058	Add an element of type ``Operator``, ``Constraint``, or ``Expression`` to the ``Expression``.
9059	Update the ``Expression`` by joining the specified additional ``elements`` using an "AND" ``Operator``
9060	Update the Expression by joining the specified additional elements using an "OR" Operator
9061	Decorate passed in function and log message to module logger.
9062	Parse received response.
9063	Translate a list of tuples to OrderedDict with key and val as strings.
9064	Check if specific message is present.
9065	Prepare message to be sent.
9066	Flush incoming socket messages.
9067	Enable a given scan field.
9068	Save scanning template to filename.
9069	Load scanning template from filename.
9070	Get information about given keyword. Defaults to stage.
9071	Include a Python source file in a docstring formatted in reStructuredText.
9072	Find and return the location of package.json.
9073	Extract the JSPM configuration from package.json.
9074	Handle YOURLS API errors by parsing JSON responses and raising appropriate exceptions.
9075	Validate response from YOURLS server.
9076	Generate combined independent variable vector from two waveforms and their dependent variable vectors.
9077	Create new dependent variable vector by interpolating based on interpolation method and scale.
9078	Create new independent variable vector.
9079	Verify that two waveforms can be combined with various mathematical functions.
9080	Load the existing systemjs manifest and remove any entries that no longer exist on the storage.
9081	Define trace parameters.
9082	Run module tracing.
9083	Shorten URL with optional keyword and title.
9084	Expand short URL or keyword to long URL.
9085	Get stats for short URL or keyword.
9086	Get stats about links.
9087	Get database statistics.
9088	Echo terminal output.
9089	Print STDOUT resulting from a Bash shell command formatted in reStructuredText.
9090	Small log helper
9091	Alternative to reify and property decorators that caches the computed value on first access.
9092	Break an iterable into chunks and yield those chunks as lists until there's nothing left to yield.
9093	Take a function that takes an iterable as the first argument and return a wrapper that breaks an iterable into chunks, processes each chunk with the function, and yields the results as an iterator.
9094	Recursively flatten nested objects.
9095	Add a handler for SIGINT that optionally prints a given message and exits cleanly.
9096	Stupidly print an iterable of iterables in TSV format.
9097	Make a placeholder object that uses its own name for its repr
9098	Attempt to parse a size in bytes from a human-readable string.
9099	Command line interface for YOURLS.
9100	Trace eng wave module exceptions.
9101	Define Sphinx requirements links.
9102	Generate Python interpreter version entries for 2.x or 3.x series.
9103	Generate Python interpreter version entries.
9104	Translate requirement specification to words.
9105	Chunk input noise data into valid Touchstone file rows.
9106	Chunk input data into valid Touchstone file rows.
9107	Write a Touchstone file with the provided data and options.
9108	Add independent variable vector bounds if they are not in vector.
9109	Build unit math operations.
9110	Perform generic operation on a waveform object.
9111	Calculate running area under curve.
9112	Validate min and max bounds are within waveform's independent variable vector.
9113	Return the arc cosine of a waveform's dependent variable vector.
9114	Return the hyperbolic arc cosine of a waveform's dependent variable vector.
9115	Return the arc sine of a waveform's dependent variable vector.
9116	Return the hyperbolic arc tangent of a waveform's dependent variable vector.
9117	Return the running average of a waveform's dependent variable vector.
9118	Return a waveform's dependent variable vector expressed in decibels.
9119	Return the numerical derivative of a waveform's dependent variable vector using backwards differences method.
9120	Return the imaginary part of the Fast Fourier Transform of a waveform.
9121	Return the magnitude of the Fast Fourier Transform of a waveform.
9122	Return the phase of the Fast Fourier Transform of a waveform.
9123	Return the real part of the Fast Fourier Transform of a waveform.
9124	Return the inverse Fast Fourier Transform of a waveform with dependent variable in decibels.
9125	Return the imaginary part of the inverse Fast Fourier Transform of a waveform.
9126	Return the magnitude of the inverse Fast Fourier Transform of a waveform.
9127	Return the phase of the inverse Fast Fourier Transform of a waveform.
9128	Return the real part of the inverse Fast Fourier Transform of a waveform.
9129	Return the running integral of a waveform's dependent variable vector using the trapezoidal method.
9130	Return the group delay of a waveform.
9131	Return the natural logarithm of a waveform's dependent variable vector.
9132	Return the numerical average of a waveform's dependent variable vector.
9133	Return the numerical integral of a waveform's dependent variable vector using the trapezoidal method.
9134	Return the maximum of a waveform's dependent variable vector.
9135	Return the minimum of a waveform's dependent variable vector.
9136	Return the phase of a waveform's dependent variable vector.
9137	Round a waveform's dependent variable vector to a given number of decimal places.
9138	Return the square root of a waveform's dependent variable vector.
9139	Return a waveform that is a sub-set of a waveform, potentially re-sampled.
9140	Convert a waveform's dependent variable vector to complex.
9141	Convert a waveform's dependent variable vector to float.
9142	Convert a waveform's dependent variable vector to integer.
9143	Return the dependent variable value at a given independent variable point using linear interpolation.
9144	Only allow lookups for jspm_packages.
9145	Get first sentence of first paragraph of long description.
9146	Build mathematical expression from hierarchical list.
9147	Return position of next matching closing delimiter.
9148	Parse function calls.
9149	Pair delimiters.
9150	Parse mathematical expression using PyParsing.
9151	Remove consecutive delimiters.
9152	Return list of the words in the string, using count of a separator as delimiter.
9153	Return tuple with mantissa and exponent of number formatted in engineering notation.
9154	Convert number to string guaranteeing result is not in scientific notation.
9155	Convert a number to engineering notation.
9156	Return floating point equivalent of a number represented in engineering notation.
9157	Return the fractional part of a number represented in engineering notation.
9158	Return the mantissa of a number represented in engineering notation.
9159	Return engineering suffix and its floating point equivalent of a number.
9160	Return engineering suffix from a starting suffix and an number of suffixes offset.
9161	Remove unnecessary delimiters in mathematical expressions.
9162	Convert a number to a scientific notation string.
9163	Return mantissa and exponent of a number in scientific notation.
9164	Seeks and removes the sourcemap comment from a file, returning the comment if found.
9165	Check whether `self.app` is missing the '.js' extension and if it needs it.
9166	Bundle the app and return the static url to the bundle.
9167	Trace the dependencies for app, caching results to avoid expensive re-tracing.
9168	Compares the app deptree file hashes with the hashes stored in the cache.
9169	Convert a bytes object to a hexdump format with offset, hexadecimal representation, and ASCII characters.
9170	Parse a docstring into ParameterInfo and ReturnInfo objects.
9171	Get a list of all valid identifiers for the current context.
9172	Lazily load a callable by performing a lazy import of a context to avoid large initial startup time from loading all modules.
9173	Split a line into arguments using shlex and a dequoting routine.
9174	Check if our context matches initialization commands and run them to initialize the context.
9175	Return help information for a context or function.
9176	Find a function in the given context by name.
9177	Return a listing of all of the functions in this context including builtins.
9178	Check if an argument is a flag.
9179	Process arguments from the command line into positional and keyword arguments.
9180	Try to find the value for a keyword argument.
9181	Invoke a function given a list of arguments with the function listed first.
9182	Invoke a function given a list of arguments and return whether a new context was created.
9183	Parse and invoke a string line.
9184	Parse a single typed parameter statement.
9185	Parse a single return statement declaration.
9186	Attempt to find the canonical name of this section.
9187	Classify a line into a type of object.
9188	Join adjacent lines together into paragraphs using either a blank line or indent as separator.
9189	Wrap, format and print this docstring for a specific width.
9190	Convert value to the specified type.
9191	Convert binary data to the specified type.
9192	Get the size of this type for converting a hex string to the type. Return 0 if the size is not known.
9193	Convert value to type and format it as a string
9194	Validate that all required type methods are implemented.
9195	Check if type is known to the type system.
9196	Given a potentially complex type, split it into its base type and specializers.
9197	Instantiate a complex type.
9198	Return the type object corresponding to a type name, loading external types if necessary.
9199	Check if format is known for given type.
9200	Inject a module-like object that defines a type into the type system so that it can be used with the iotile tool and other annotated API functions.
9201	Given a module that contains a list of types, find all symbols in the module that do not start with _ and attempt to import them as types.
9202	Check if we have enough arguments to call this function.
9203	Add type information for a parameter by name.
9204	Add type information to the return value of this function.
9205	Use a custom function to print the return value.
9206	Try to convert a prefix into a parameter name.
9207	Get the parameter type information by name.
9208	Return our function signature as a string.
9209	Format the return value of this function as a string.
9210	Convert and validate a positional argument.
9211	Check if there are any missing or duplicate arguments.
9212	Given a parameter with type information, convert and validate it.
9213	Format this exception as a string including class name.
9214	Convert this exception to a dictionary.
9215	Check the type of all parameters with type information, converting as appropriate and then execute the function.
9216	Parse a list of validator names or n-tuples, checking for errors.
9217	Find all annotated functions inside of a container.
9218	Given a module, create a context from all of the top level annotated symbols in that module.
9219	Return usage information about a context or function.
9220	Decorate a function to give type information about its parameters.
9221	Specify how the return value of this function should be handled.
9222	Specify that this function returns a typed value.
9223	Declare that a class defines a context.
9224	Annotate a function using information from its docstring.
9225	Mark a function as callable from the command line.
9226	Given an object with a docstring, return the first line of the docstring.
9227	Load ``cron`` modules for applications listed in ``INSTALLED_APPS``.
9228	Register tasks with cron.
9229	Print the tasks that would be installed in the crontab, for debugging purposes.
9230	Uninstall tasks from cron.
9231	Create a project handler instance based on URI schema.
9232	Load the projects config data from local path
9233	Save the projects configs to local path
9234	Creates a property with the given name, but the cls will be created only with the first call.
9235	Get the dependencies of the Project.
9236	Calls the project handler same named function
9237	Initialize a project and return a list of failed initialization components.

The method initializes a project with the given path and language settings, tracks the initialization status, and returns a list of components that failed to initialize. It processes the status dictionary to identify failed components and returns them as a list.
9238	Takes an object, a key, and a value and produces a new object that is a copy of the original but with the specified value set for the given key.
9239	Takes an object, a string, and a value and produces a new object that is a copy of the original but with the attribute called ``name`` set to ``value``.
9240	Takes an object and an iterable and produces a new object that is a copy of the original with data from the iterable reincorporated.
9241	Set the focus to `newvalue`.
9242	Set many foci to values taken by iterating over `new_values`.
9243	Apply a function to the focus.
9244	Returns a function that collects arguments over multiple calls and returns them as a tuple when the specified count is reached.
9245	Intended to be overridden by subclasses. Raises NotImplementedError.
9246	Runs the lens over the state applying f to all the foci collecting the results together using the applicative functor functions defined in lenses.typeclass.
9247	Returns the focus within state, joining multiple focused items as a monoid if necessary. Raises TypeError if optic is not of Fold kind, and ValueError if no focus exists.
9248	Returns a list of all the foci within `state`.
9249	Applies a function `fn` to all the foci within `state`.
9250	Sets all the foci within `state` to `value`.
9251	Sets all the foci within `state` to values taken from `iterable`.
9252	Returns a class representing the 'kind' of optic.
9253	The main function that instantiates a GameState object and enters a REPL-like main loop, waiting for input, updating the state based on the input, then outputting the new state.
9254	Returns the vector moved one step in the direction of the other, potentially diagonally.
9255	Handle game input by moving the player or performing game actions based on single character input.
9256	Produces a new game state in which the robots have advanced towards the player by one step, handling crashes.
9257	Returns a completed game state object, setting an optional message to display after the game is over.
9258	Shows the board to the player and asks them to make a move.
9259	Play a game of naughts and crosses against the computer.
9260	Return a board with a cell filled in by the current player. If the cell is already occupied then return the board unchanged.
9261	The winner of this board if one exists.
9262	Generates all the combinations of board positions that need to be checked for a win.
9263	Process single item. Add item to items and then upload to S3 if size of items >= max_chunk_size.
9264	Callback function when spider is open.
9265	Upload items to S3.
9266	Build file object from items.
9267	Returns the account state information associated with a specific address.
9268	Returns the asset information associated with a specific asset ID.
9269	Returns the block information associated with a specific hash value or block index.
9270	Returns the hash value associated with a specific block index.
9271	Returns the system fees associated with a specific block index.
9272	Returns the contract information associated with a specific script hash.
9273	Returns detailed information associated with a specific transaction hash.
9274	Returns the value stored in the storage of a contract script hash for a given key.
9275	Returns the transaction output information corresponding to a hash and index.
9276	Invokes a contract with given parameters and returns the result.
9277	Invokes a contract's function with given parameters and returns the result.
9278	Invokes a script on the VM and returns the result.
9279	Broadcasts a transaction over the NEO network and returns the result.
9280	Validates if the considered string is a valid NEO address.
9281	Calls the JSON-RPC endpoint.
9282	Returns True if the considered string is a valid SHA256 hash.
9283	Returns True if the considered string is a valid RIPEMD160 hash.
9284	Returns a list of parameters meant to be passed to JSON-RPC endpoints, encoding them with their appropriate types and values.
9285	Tries to decode the values embedded in an invocation result dictionary.
9286	Emulates keyword-only arguments under python2. Works with both python2 and python3.
9287	Handle timezone aware datetimes with timezone transformations.
9288	Ensure correct timezone handling when truncating datetime values, particularly avoiding daylight saving time switches.
9289	Renders the barcode and saves it in the specified filename.
9290	Renders the barcode using the specified writer with given options and returns the rendered output.
9291	Calculates the checksum for EAN13-Code.
9292	Renders the barcode to whatever the inheriting writer provides, using the registered callbacks.
9293	Call that method in the pyramid configuration phase.
9294	Simple command line tool to help manage environment variables stored in a S3-like system. Facilitates editing text files remotely stored, as well as downloading and uploading files.
9295	Download a file or folder from the S3-like service.
9296	Upload a file or folder to the S3-like service.
9297	For each section defined in the local config file, creates a folder inside the local config folder named after the section and downloads the environment file defined by the S3CONF variable for this section to this folder.
9298	For each section defined in the local config file, look up for a folder inside the local config folder named after the section and upload the environment file to the remote S3 path.
9299	Split an environment variable string into a tuple of key and value.
9300	Add basic authentication to the requests of the clients.
9301	Authenticate via an api key.
9302	Yield objects from json files in the folder and subfolders.
9303	Return a dict of schema names mapping to a Schema.
9304	Return the schema.
9305	Return a jsonschema.RefResolver for the schemas.
9306	Validate an object against the schema.
9307	Return a list of valid examples for the given schema.
9308	Return a list of examples which violate the schema.
9309	Build authorization URL for User Agent.
9310	Process tokens and errors from redirect_uri.
9311	Refresh or acquire access_token.
9312	Returns "id" of a OneDrive user.
9313	Get OneDrive object representing list of objects in a folder.
9314	Create a folder with a specified "name" attribute.
9315	Add comment message to a specified object.
9316	Convert or dump object to unicode.
9317	Recursively create and set the drop target for obj and childs
9318	Start a drag and drop operation for GUI elements.
9319	Track default top level window for toolbox menu default action.
9320	Open the inspector window for a given object.
9321	Open a shell
9322	Convert PythonCard font description to gui2py style
9323	Loads HTML page from location and then displays it
9324	Convenience function for accessing tag parameters
9325	Process an outgoing communication by sending a message, recording it, and clearing the input field.
9326	Show a welcome tip message with instructions for the gui2py designer.
9327	Get the selected object and store start position
9328	Move the selected object or draw a rubber-band rectangle overlay.
9329	Called by SelectionTag to handle resizing operations, adjusting object position and size based on mouse movement and direction flags, with optional grid snapping.
9330	Handle keyboard input for moving selected components with cursor keys, deleting with DELETE key, and duplicating with INSERT key.
9331	Delete all of the selected objects.
9332	Create a copy of each selected object.
9333	Capture the new control superficial image after an update
9334	When dealing with a Top-Level window position it absolute lower-right
9335	Returns the python item data associated with the item.
9336	Set the python item data associated with the wx item.
9337	Do a reverse lookup for an item containing the requested data.
9338	Remove the item from the list and unset the related data.
9339	Remove all the item from the list and unset the related data
9340	Remove all items and column headings
9341	Sets the item at index 'n' to be the selected item.
9342	Returns the label of the selected item or an empty string if none
9343	Associate the given client data with the item at position n.
9344	Adds the item to the control, associating the given data if not None.
9345	Construct a string representing the object.
9346	Find an object already created by name or return None.
9347	Create a new object exactly similar to self
9348	Called when adding a control to the window.
9349	Re-parent a child control with the new wx_obj parent.
9350	Make several copies of the background bitmap to fill the client area.
9351	Draw the image as background.
9352	Custom draws the label when transparent background is needed.
9353	Look for every file in the directory tree and return a dict of modules.
9354	Return a list of column heading sub-components in Grid order.
9355	Update the grid if rows and columns have been added or deleted
9356	Update all displayed values
9357	Update the column attributes to add the appropriate renderer.
9358	Sort the data based on the column indexed by col.
9359	Remove all rows and reset internal structures
9360	Called to create the control, which must derive from wxControl.
9361	Fetch the value from the table and prepare the edit control.
9362	Complete the editing of the current cell. Returns True if changed
9363	Return True to allow the given key to start editing.
9364	This will be called to let the editor do something with the first key
9365	A metaclass generator that returns a metaclass to register class handling for a specific input type.
9366	Enable or disable all menu items.
9367	Check if all menu items are enabled.
9368	Enable or disable all top menus.
9369	Check if all top menus are enabled.
9370	Helper method to remove a menu avoiding using its position
9371	Process form submission
9372	Add a tag attribute to the wx window
9373	Make the first column of the table non-breaking.
9374	Get an autodoc.Documenter class suitable for documenting the given object.
9375	Reformat a function signature to a more compact form.
9376	Import a Python object given its full name.
9377	Smart linking role that expands to ':obj:`text`' if `text` is an importable object, otherwise expands to '*text*'.
9378	Show a simple pop-up modal dialog
9379	Modal dialog asking for an input, returns string or None if cancelled
9380	Show a dialog to select a font.
9381	Show a dialog to pick a color
9382	Show a dialog to choose a directory.
9383	Shows a find text dialog
9384	Force appearance of the button next to the item
9385	Set icon based on resource values
9386	Display or hide the window, optionally disabling all other windows.
9387	Open, read and eval the resource from the source file
9388	Save the resource to the source file.
9389	Create a gui2py window based on the python resource
9390	Create a gui2py control based on the python resource
9391	Associate event handlers with components and controllers.
9392	Translate gui2py attribute name from pythoncard legacy code.
9393	Write content to the clipboard, data can be either a string or a bitmap
9394	Find out what items are documented in the given object's docstring.
9395	Add the object and all their childs.
9396	Select the object and show its properties
9397	Load the selected item in the property editor.
9398	Update the tree item when the object name changes
9399	Open a popup menu with options regarding the selected object.
9400	Perform the actual serialization.
9401	Returns a decorator function for adding an expression filter.
9402	Returns a decorator function for adding a node filter.
9403	Asserts that the page has the given path.
9404	Asserts that the page doesn't have the given path.
9405	Checks if the page has the given path.
9406	Checks if the page doesn't have the given path.
9407	Select this node if it is an option element inside a select tag.
9408	Returns the given expression filtered by the given value.
9409	Returns an instance of the given browser with the given capabilities.
9410	Returns the XPath query for this selector.
9411	Returns whether the given node matches all filters.
9412	Switch to the given frame.

### Summary:
Switch to the specified iframe/frame element, parent frame, or top-level frame, with proper scope management and error handling for invalid frame specifications.
9413	Execute the wrapped code, accepting an alert.
9414	Execute the wrapped code, accepting a confirm.
9415	Execute the wrapped code, dismissing a confirm.
9416	Execute the wrapped code, accepting a prompt, optionally responding to the prompt.
9417	Execute the wrapped code, dismissing a prompt.
9418	Save a snapshot of the page.
9419	Save a screenshot of the page.
9420	Raise errors encountered by the server.
9421	Returns whether the given node matches the filter rule with the given value.
9422	Checks if the page or current node has a radio button or checkbox with the given label, value, or id that is currently checked.
9423	Checks if the page or current node has no radio button or checkbox with the given label, value, or id that is currently checked.
9424	Checks if the page or current node has a radio button or checkbox with the given label, value, or id that is currently unchecked.
9425	Checks if the page or current node has no radio button or checkbox with the given label, value, or id that is currently unchecked.
9426	Asserts that the page or current node has the given text content, ignoring any HTML tags.
9427	Asserts that the page or current node doesn't have the given text content, ignoring any HTML tags.
9428	Asserts that the page has the given title.
9429	Asserts that the page doesn't have the given title.
9430	Checks if the page has the given title.
9431	Checks if the page doesn't have the given title.
9432	Find all elements on the page matching the given selector and options.
9433	Find the first element on the page matching the given selector and options, or None if no element matches.
9434	Returns the inner content of a given XML node, including tags.
9435	Returns the inner text of a given XML node, excluding tags.
9436	Returns the given URL with all query keys properly escaped.
9437	Define a write-only property that provides multiple assignment methods including traditional assignment, method argument, and decoration.
9438	Capybara's primary defense against asynchronicity problems that retries functions until they succeed or a timeout occurs.
9439	Returns whether to catch the given error.
9440	Returns how the result count compares to the query options.
9441	Attempts to fill the result cache with at least the given number of results.
9442	Returns whether the given query options expect a possible count of zero.
9443	Returns an expectation failure message for the given query description.
9444	Returns whether the given count matches the given query options.
9445	Normalizes the given value to a string of text with extra whitespace removed.
9446	Returns the given text with outer whitespace removed and inner whitespace collapsed.
9447	Returns a compiled regular expression for the given text.
9448	Returns whether this query resolves for the given session.
9449	Resize the window to the given dimensions.
9450	Boots a server for the app, if it isn't already booted.
9451	Descriptor to change the class wide getter on a property.
9452	Descriptor to change instance method.
9453	Descriptor to change class method.
9454	Get outer traceback text for logging.
9455	Get object repr block.
9456	Get logger for log calls.
9457	Set the logger instance to use as override.
9458	Low-level method to call the Slack API.
9459	List of channels of this slack team
9460	List of users of this slack team
9461	High-level function for creating messages. Return packed bytes.
9462	Translate machine identifiers into human-readable form by converting user and channel IDs to their corresponding names.
9463	Send message to Slack
9464	Get available messages and send through to the protocol.
9465	Main interface. Instantiate the SlackAPI, connect to RTM and start the client.
9466	Pass in raw arguments, instantiate Slack API and begin client.
9467	Return a dict of keys that differ with another config object.
9468	Given a string, add necessary codes to format the string with the specified color.
9469	Run when a task starts.
9470	Run when a task finishes correctly.
9471	Display info about playbook statistics.
9472	Run when a task is skipped.
9473	Converts a CIDR formatted prefix into an address netmask representation.
9474	Decorator that checks if a value passed to a Jinja filter evaluates to false and returns an empty string. Otherwise calls the original Jinja filter.
9475	Add a model to the configuration.

The model will be assigned to a class attribute with the YANG name of the model. If the model is not in SUPPORTED_MODELS, `force=True` must be set to add it. The method also loads the model if it is provided as a string.
9476	Returns a dictionary with the values of the model, optionally filtering unset values.
9477	Load a dictionary into the model.
9478	Returns a dictionary with the values of the model, evaluating leaf values to python types.
9479	Parse native configuration and load it into the corresponding models.
9480	Parse native state and load it into the corresponding models.
9481	Translate the object to native configuration with merge and replace options.
9482	Loads and returns all filters.
9483	Find the necessary file for the given test case.
9484	Given a model, return a representation of the model in a dict.

This is mostly useful to have a quick visual representation of the model.
9485	Given two models, return the difference between them.
9486	POST to URL and get result as a response object.
9487	Construct a full URL that can be used to obtain an authorization code from the provider authorization_uri.
9488	Get an access token from the provider token URI.
9489	Return query parameters as a dict from the specified URL.
9490	Return a URL with the query component removed.
9491	Construct a URL based off of base containing all parameters in the query portion of base plus any additional parameters.
9492	Handle an internal exception that was caught and suppressed.
9493	Return a response object from the given parameters.
9494	Return a HTTP 302 redirect response object containing the error.
9495	Return a response object from the given JSON data.
9496	Generate authorization code HTTP response.
9497	Generate access token HTTP response from a refresh token.
9498	Generate access token HTTP response.
9499	Get authorization code response from a URI.
9500	Get a token response from POST data.
9501	Get authorization object representing status of authentication.
9502	Open the smbus interface on the specified bus.
9503	Read a single byte from the specified device.
9504	Read many bytes from the specified device.
9505	Read a single byte from the specified cmd register of the device.
9506	Write many bytes to the specified device.
9507	Write a byte of data to the specified cmd register of the device.
9508	Write a buffer of data to the specified cmd register of the device.
9509	Returns file's CDN url.
9510	Creates a File Copy on Uploadcare or Custom Storage.
9511	Creates a Local File Copy on Uploadcare Storage.
9512	Creates file copy in remote storage.
9513	Constructs `File` instance from file information.
9514	Uploads a file and returns ``File`` instance.
9515	Uploads file from given url and returns ``FileFromUrl`` instance.
9516	Uploads file from given url and returns ``File`` instance.
9517	Returns CDN urls of all files from group without API requesting.
9518	Constructs ``FileGroup`` instance from group information.
9519	Creates file group and returns ``FileGroup`` instance.
9520	Base method for storage operations.
9521	Extract uuid from each item of specified sequence.
9522	A common function for building methods of the "list showing".
9523	Iterates over the "iter_content" and draws a progress bar to stdout.
9524	Makes Uploading API request and returns response as ``dict``.
9525	Returns the status of Home Mode
9526	Return a list of cameras.
9527	Return a list of cameras matching camera_ids.
9528	Return bytes of camera image.
9529	Disable camera.
9530	Return motion settings matching camera_id.
9531	Update motion settings matching camera_id with keyword args.
9532	Update cameras and motion settings with latest from API.
9533	Determine if ``li`` is the last list item for a given list.
9534	Find consecutive li tags that have content that have the same list id.
9535	Get the indentation level of a list item tag.
9536	Get the vertical merge attribute for a table cell, returning 'restart' for the first cell in a rowspan or None for continuation cells.
9537	Get the grid span (colspan) of a table cell in a docx document.
9538	When calculating the rowspan for a given cell it is required to find all table cells 'below' the initial cell with a v_merge. This function will return the td element at the passed in index, taking into account colspans.
9539	For bold, italics and underline, check if styles are present and not set to False.
9540	The function will return True if the r tag passed in is considered bold.
9541	Return True if the r tag is considered italicized.
9542	Return True if the r tag is considered underlined.
9543	Return True if the passed in p tag is considered a title.
9544	Return text run content data in order of appearance.
9545	Return a dictionary mapping relationship IDs to their targets, with special handling for image targets.
9546	Extract document data, numbering data, and relationship data from a ZIP file containing a Word document.
9547	Return the list type for ordered lists, defaulting to decimal if numId or ilvl are not valid.
9548	Build the list structure and return the root list.
9549	Build a single tr element with all tds already populated.
9550	This returns a table object with all rows and cells correctly populated.
9551	Generate the string data for a particular t tag.
9552	Remove all tags that have the tag name ``tag``
9553	Find the location of a dataset on disk, downloading if needed.
9554	Load the MNIST digits dataset.
9555	Load the CIFAR10 image dataset.
9556	Plot an array of images in a grid layout.
9557	Create a plot of weights visualized as pixel arrays across multiple layers.
9558	Create a plot of conv filters, visualized as pixel arrays.
9559	Create a callable that generates samples from a dataset.
9560	Encode a text string by replacing characters with alphabet index.
9561	Create a callable that returns a batch of training data for classifier training.
9562	Draw a sequential sample of class labels from this network.
9563	Add a convolutional weight array to this layer's parameters.
9564	Encode a dataset using the hidden layer activations of our network.
9565	Decode an encoded dataset by computing the output layer activation.
9566	Find a layer output name for the given layer specifier.
9567	Compute R^2 coefficient of determination for a given input.
9568	Compute a greedy classification for the given set of data.
9569	Compute class posterior probabilities for the given set of data.
9570	Compute the logit values that underlie the softmax output.
9571	Compute the mean accuracy on a set of labeled data.
9572	Extract a single batch of data to pass to the model being trained.
9573	Returns a callable that chooses sequences from netcdf data.
9574	Load a saved network from a pickle file on disk.
9575	Create a matrix of randomly-initialized weights with optional sparsity, spectral radius scaling, and diagonal configuration.
9576	Create a vector of randomly-initialized values.
9577	Get the outputs from a network that match a pattern.
9578	Get the parameters from a network that match a pattern.
9579	Construct common regularizers from a set of keyword arguments.
9580	A list of Theano variables used in this loss.
9581	Build a Theano expression for computing the accuracy of graph output.
9582	Helper method for defining a basic loop in theano.
9583	Construct an activation function by name.
9584	Select a random sample of n items from xs using reservoir sampling with normalization and padding.
9585	Clear the current loss functions from the network and add a new one.
9586	Train a network one batch at a time, yielding training and validation monitor values.
9587	Train the network until the trainer converges.
9588	Construct a string key for representing a computation graph.
9589	Connect the layers in this network to form a computation graph.
9590	A list of Theano variables for feedforward computations.
9591	A list of Theano variables for loss computations.
9592	Get a parameter from a layer in the network.
9593	Compute a forward pass of all layers from the given input.
9594	Compute a forward pass of the inputs, returning the network output.
9595	Compute R^2 coefficient of determination for a given labeled input.
9596	Save the state of this network to a pickle file on disk.
9597	Load a saved network from disk.
9598	Return a variable representing the regularized loss for this network.
9599	Return expressions to run as updates during network training.
9600	Number of "neurons" in this layer's default output.
9601	Create Theano variables representing the outputs of this layer.
9602	Bind this layer into a computation graph.
9603	Resolve the names of inputs for this layer into shape tuples.
9604	Resolve the names of outputs for this layer into shape tuples.
9605	Log some information about this layer.
9606	Log information about this layer's parameters.
9607	Helper method to format our name into a string.
9608	Given a list of layers, find the layer output with the given name.
9609	Get a shared variable for a parameter by name.
9610	Helper method to create a new bias vector.
9611	Create a specification dictionary for this layer.
9612	Returns the envelope of a LogGabor.
9613	Returns the image of a LogGabor by computing its Fourier transform, applying the specified phase, and inverting the result.
9614	Add an IntervalTier or a TextTier on the specified location.
9615	Remove a tier by name or number.
9616	Gives a tier by name or number, returning the first match when multiple tiers exist with the same name.
9617	Convert the object to a pympi.Elan.Eaf object.
9618	Add a point to the TextTier.
9619	Add an interval to the IntervalTier.
9620	Remove an interval at the specified time, if it exists. Raises TierTypeException if the tier is not an IntervalTier.
9621	Remove a point at the specified time, if it exists. Raises TierTypeException if the tier is not a TextTier.
9622	Give all the intervals or points.
9623	Returns the true list of intervals including the empty intervals.
9624	Function to pretty print the xml, meaning adding tabs and newlines.
9625	Add an annotation to a tier with specified start and end times, along with optional value and SVG reference.
9626	Add an entry to a controlled vocabulary.
9627	Add a description to a controlled vocabulary.
9628	Add an external reference.
9629	Add a language.
9630	Add lexicon reference.
9631	Add a linguistic type.
9632	Add a linked file.
9633	Add a locale.
9634	Add a secondary linked file.
9635	Add a tier to the element with specified properties, handling default values and validation.
9636	Clean up all unused timeslots.
9637	Extracts the selected time frame as a new object.
9638	Generate the next annotation id.
9639	Generate the next timeslot id, this function is mainly used internally.
9640	Give all child tiers for a tier.
9641	Give the full time interval of the file.
9642	Give the ref annotation after a time. If an annotation overlaps with the given time, that annotation will be returned.
9643	Give the ref annotation before a time. If an annotation overlaps with the time, that annotation will be returned.
9644	Give a list of all tiers matching a linguistic type.
9645	Merge tiers into a new tier and glue annotations together when gaps are below the threshold.
9646	Remove all annotations from a tier.
9647	Remove a controlled vocabulary description.
9648	Remove all licenses matching both key and value.
9649	Remove all linked files that match all the specified criteria.
9650	Remove all properties matching both key and value.
9651	Remove a reference annotation.
9652	Remove all secondary linked files that match all the specified criteria, ignoring criterias that are None.
9653	Remove a tier and optionally clean the timeslots.
9654	Remove multiple tiers efficiently by batch processing and delayed timeslot cleaning.
9655	Rename a tier and update its child tiers' parent references.
9656	Shift all annotations in time and return tuples of squashed and removed annotations.
9657	Will be used to create the console script
9658	Display debug information for the storage
9659	Get the paragraph base embedding level. Returns 0 for LTR, 1 for RTL.
9660	Get the paragraph base embedding level and direction, set the storage to the array of chars.
9661	Apply X1 to X9 rules of the unicode algorithm to handle explicit embeddings and overrides.
9662	Split the storage to run of char types at the same level.

Applies X10. See http://unicode.org/reports/tr9/#X10
9663	Resolve weak type rules W1 - W3 according to Unicode Bidirectional Algorithm.
9664	Resolving neutral types according to Unicode Bidirectional Algorithm (N1 and N2 rules).
9665	Reverse contiguous sequences of characters at specified levels in a text.
9666	Reorder resolved levels according to L1 and L2 rules.
9667	Inject the current working file into the context.
9668	Convert compiled .ui file from PySide2 to Qt.py
9669	Append to self, accessible via Qt.QtCompat
9670	Qt.py command-line interface
9671	Add members found in prior versions up till the next major release for backwards compatibility.
9672	Try showing the most desirable GUI

This function cycles through the currently registered graphical user interfaces and presents it to the user.
9673	Return the most desirable of the currently registered GUIs
9674	Register supported hosts
9675	Add Pyblish to file-menu
9676	Maintain selection during context
9677	Maintain current time during context
9678	Show an information dialog about how to register a new GUI when no GUI is available.
9679	Setup type references by name for Message object.
9680	Get the cumulative data for charting, where each subsequent set is the sum of all previous sets.
9681	Return all the values for a single axis of the data.
9682	Draw a constant line on the y-axis with the label.
9683	Cache the parameters necessary to transform x & y coordinates
9684	For every key, value pair, return the mapping for the equivalent value, key pair.
9685	Generate a sequence of floating-point numbers, similar to the built-in range function but accepting float values.
9686	Add a data set to the graph.
9687	Add SVG definitions including a filter and Gaussian blur effect.
9688	Add data to the graph object. May be called several times to add additional data sets.
9689	Process the template with the set data and config, then return the resulting SVG.
9690	Calculates the margin to the left of the plot area, setting border_left.
9691	Calculate the margin in pixels to the right of the plot area, setting border_right.
9692	Calculate the margin in pixels above the plot area, setting border_top.
9693	Add pop-up information to a point on the graph.
9694	Calculate the margin in pixels below the plot area, setting border_bottom.
9695	The central logic for drawing the graph.

Sets self.graph (the 'g' element in the SVG root)
9696	Add text for a datapoint.
9697	Draw the X axis labels.
9698	Draw the Y axis labels.
9699	Draw the X-axis guidelines.
9700	Draw the Y-axis guidelines.
9701	Draws the graph title and subtitle
9702	Hard-code the styles into the SVG XML if style sheets are not used.
9703	Base SVG Document Creation
9704	Get the stylesheets for this instance.
9705	Start a bot on the given network, optionally joining some channels.
9706	Send raw data over the wire if connection is registered, otherwise save to output buffer.
9707	Connect to the IRC server using the nickname.
9708	Multipurpose method for sending responses to channel or via message to a single user
9709	Low-level dispatching of socket data based on regex matching.
9710	Generates a new nickname based on original nickname followed by a random number.
9711	Respond to periodic PING messages from server
9712	When the connection to the server is registered, send all pending data.
9713	Main loop of the IRCConnection - reads from the socket and dispatches based on regex matching
9714	Register the worker with the boss
9715	Run tasks in a greenlet, pulling from the workers' task queue and reporting results to the command channel
9716	Decorator to ensure that commands only can come from the boss
9717	Actual messages listened for by the worker bot.
9718	Received registration acknowledgement from the BotnetBot, as well as the name of the command channel, so join up and indicate that registration succeeded
9719	Work on a task from the BotnetBot.
9720	Indicate that the worker with given nick is performing this task.
9721	Send a validation email to the user's email address.
9722	Send a password reset to the user's email address.
9723	Validate password strength based on complex character requirements.
9724	Verify a one-time access token for a user account.
9725	Delete the user's avatar by setting it to None.
9726	Throttle POST requests only.
9727	Return the single global executor, creating it if it doesn't exist.
9728	Return the single global client instance, creating it if necessary.
9729	A tuple consisting of the TLS client certificate and key if they have been provided, otherwise None.
9730	Service name inside the Docker Swarm
9731	Wrapper for calling docker methods.
9732	Call a docker method in a background thread

returns a Future
9733	Check for a task state like `docker service ps id`
9734	Stop and remove the service
9735	Check lower-cased email is unique.
9736	Check the old password is valid and set the new password.
9737	Set the new password for the user.
9738	Validate if email exists and requires a verification.
9739	Create auth token. Differs from DRF that it always creates new token but not re-using them.
9740	Delete auth token when `delete` request was issued.
9741	Disallow users other than the user whose email is being reset.
9742	Validate `email` and send a request to confirm it.
9743	Update token's expiration datetime on every auth action.
9744	Email context to reset a user password.
9745	Send a notification by email.
9746	Password reset email handler.
9747	Validation email handler.
9748	Authenticate a user from a token form field.
9749	Custom authentication to check if auth token has expired and update its expiration date.
9750	Displays bokeh output inside a notebook.
9751	Temporary fix to patch HoloViews plot comms
9752	Returns a CustomJS callback that can be attached to send the widget state across the notebook comms.
9753	Get widget for param_name.
9754	The default Renderer function which handles HoloViews objects.
9755	Forces a parameter value to be text
9756	Given a list of objects, returns a dictionary mapping from string name for the object to the object itself.
9757	Returns the instance owning the supplied instancemethod or the class owning the supplied classmethod.
9758	Take the http_auth value and split it into the attributes that carry the http auth username and password.
9759	Returns True if the cluster is up, False otherwise.
9760	Get the basic info from the current cluster.
9761	Coroutine. Queries cluster Health API.
9762	Convert bytes to a human readable format.
9763	Calculate total CPU load for Synology DSM by summing system, user, and other loads.
9764	Get the total memory size of Synology DSM.

The method returns the total memory size, with an option to return it in a human-readable format. When human_readable is True (default), it converts the memory size from kilobytes to a more readable format using SynoFormatHelper.bytes_to_readable(). When human_readable is False, it returns the raw memory size in bytes. The memory size is extracted from self._data["memory"]["memory_size"] and converted from kilobytes to bytes by multiplying by 1024.
9765	Get the total upload speed being used.

The method retrieves network statistics and returns the total upload speed, with an option to return the value in a human-readable format.
9766	Returns all available volumes
9767	Returns a specific volume by ID from the stored data.
9768	Total size of volume
9769	Calculate and return the percentage of used volume size.
9770	Average temperature of all disks making up the volume
9771	Get the maximum temperature of all disks making up the volume.
9772	Returns a specific disk by ID from the data.
9773	Build and execute login request
9774	Function to handle sessions for a GET request
9775	Function to execute and handle a GET request
9776	Updates the various instanced modules.
9777	Getter for various Utilisation variables
9778	Getter for various Storage variables
9779	Creates the context for a specific request.
9780	The cached token of the current tenant.
9781	Helper function for building an attribute dictionary.
9782	Class decorator that makes sure the passed apps are present in INSTALLED_APPS.
9783	Class decorator that makes sure the passed apps are not present in INSTALLED_APPS.
9784	Return a dictionary of all global_settings values.
9785	Handle the retrieval of the code.
9786	Helper method to get a value from the config.
9787	Change the value of the given key in the given file to the given value.
9788	Migrates the old config file format to the new one.
9789	Start the webserver that will receive the code.
9790	Wait until the user accepted or rejected the request.
9791	Request new access information from reddit using the built in webserver.
9792	Check whether the tokens are set and request new ones if not
9793	Set the access credentials on the Reddit object.
9794	Check if the token is still valid and request a new one if it is not valid anymore.
9795	Create DynamoDB table for run manifests.
9796	Return pair of bucket without protocol and path
9797	Check if prefix is archived in Glacier by checking storage class of first object inside that prefix.
9798	Extract date part from run id
9799	Remove all keys with Nones as values
9800	Add run_id into DynamoDB manifest table
9801	Check if run_id is stored in DynamoDB table. Return True if run_id is stored or False otherwise.
9802	Extracts Schema information from Iglu URI
9803	Create an Elasticsearch field name from a schema string.
9804	Convert a contexts JSON to an Elasticsearch-compatible list of key-value pairs.
9805	Convert an unstructured event JSON to a list containing one Elasticsearch-compatible key-value pair.
9806	Convert a Snowplow enriched event TSV into a JSON
9807	Convert a Snowplow enriched event in the form of an array of fields into a JSON
9808	Get the template used in a TemplateResponse. This returns a tuple of "active choice, all choices"
9809	Print the entire template context
9810	Print a set of variables with their resolved values and types.
9811	Highlight common SQL words in a string.
9812	Dump a variable to a HTML string with sensible output for template context fields.
9813	Briefly print the dictionary keys.
9814	Apply HTML highlighting to text contents.
9815	Format an item in the result. Could be a dictionary key, value, etc..
9816	Recursive part of the formatting
9817	Parse the next token in the stream.
9818	Parses latex content and returns a list of LatexNode objects along with position and length information.
9819	Extracts text from LaTeX code for database indexing.
9820	Set the directory for looking up input files when encountering the \input or \include macro.
9821	Read and return the contents of an input file, with support for automatic file extension resolution and strict input directory checking.
9822	Parses the given LaTeX code and returns its textual representation.
9823	Encode a UTF-8 string to a LaTeX snippet.
9824	Unpack \uNNNN escapes in 's' and encode the result as UTF-8
9825	Get information for this organisation. Returns a dictionary of values.
9826	Get all the boards for this organisation. Returns a list of Board s.
9827	Get all members attached to this organisation. Returns a list of Member objects.
9828	Update this organisations information. Returns a new organisation object.
9829	Remove a member from the organisation and return JSON of all members if successful, otherwise raise an Unauthorised exception.
9830	Add a member to the board using the id with specified membership type and return JSON of all members.
9831	Add a member to the board with specified email, full name, and membership type.
9832	Get information for this list. Returns a dictionary of values.
9833	Create a card for this list and return a Card object.
9834	Get all information for this Label. Returns a dictionary of values.
9835	Get all the items for this label. Returns a list of dictionaries. Each dictionary has the values for an item.
9836	Update the current label's name and return a new Label object.
9837	Update the current label and return a new Label object.
9838	Returns a URL that needs to be opened in a browser to retrieve an access token.
9839	Get information for this card. Returns a dictionary of values.
9840	Get board information for this card. Returns a Board object.
9841	Get list information for this card. Returns a List object.
9842	Get the checklists for this card. Returns a list of Checklist objects.
9843	Adds a comment to this card by the current user.
9844	Adds an attachment to this card.
9845	Add a checklist to this card. Returns a Checklist object.
9846	Add a label to this card, from a dictionary.
9847	Add an existing label to this card.
9848	Add a member to this card and return a list of Member objects.
9849	Get information for a member. Returns a dictionary of values.
9850	Get all cards this member is attached to. Return a list of Card objects.
9851	Get all organisations this member is attached to.
9852	Create a new board from the given query parameters and return the created Board object.
9853	Enable singledispatch for class methods.
9854	Get all information for this board. Returns a dictionary of values.
9855	Get the lists attached to this board. Returns a list of List objects.
9856	Get the labels attached to this board. Returns a list of Label objects.
9857	Get a Card for a given card id. Returns a Card object.
9858	Get the checklists for this board. Returns a list of Checklist objects.
9859	Get the Organisation for this board. Returns Organisation object.
9860	Update this board's information. Returns a new board.
9861	Create a list for a board and return a new List object.
9862	Create a label for a board and return a new Label object.
9863	Get all information for this Checklist. Returns a dictionary of values.
9864	Get card this checklist is on.
9865	Get the items for this checklist. Returns a list of ChecklistItem objects.
9866	Update the current checklist. Returns a new Checklist object.
9867	Add an item to this checklist and return a dictionary of the new item's values.
9868	Deletes an item from this checklist.
9869	Rename the current checklist item. Returns a new ChecklistItem object.
9870	Set the state of the current checklist item. Returns a new ChecklistItem object.
9871	Adds the API key and user auth token to the query parameters
9872	Check HTTP response for known errors.
9873	Build the URI for the API call.
9874	Make a call to Trello API and capture JSON response. Raises an error when it fails.
9875	Create an Organisation object from a JSON object.
9876	Create Board object from a JSON object
9877	Create Label object from JSON object
9878	Create List object from JSON object
9879	Create a Card object from JSON object
9880	Create a Checklist object from JSON object
9881	Create a Member object from JSON object
9882	Get an organisation.

### Example 2:
Input:
def create_organisation(self, data):
        '''
        Create an organisation

        Returns:
            Organisation: The created organisation
        '''
        return Organisation(data)
Output:
Create an organisation.
9883	Get a board by ID.

The method retrieves a board using its unique identifier and optional name, returning a Board object. The board is created using the provided parameters through the create_board method.
9884	Get a list with the given id and optional name.
9885	Get a card with the given id and optional name.
9886	Get a checklist with the given id and optional name.
9887	Get a member or your current member if `id` wasn't given.
9888	Get root domain from url.
9889	Convert raw text to a list of words without markup.
9890	Convert raw text segments with markup and non-textual content to a list of words without any markup, with options to keep whitespace and normalize ASCII characters, and replace dates with '7777' for normalization.
9891	A generator to convert raw text segments with XML and other non-textual content to a list of words without markup, with additional normalization of dates to '7777' and preservation of Wikipedia anchors.
9892	Write the password to the file.
9893	Split a string using integer locations to determine split points.
9894	Mark regex matches in split locations with SHOULD_SPLIT marker.
9895	Adds 'SHOULD_SPLIT' markers at the beginning and end of matching regex groups, and marks characters within the groups as 'SHOULD_NOT_SPLIT'.
9896	Main command line interface.
9897	Create the cipher object to encrypt or decrypt a payload.
9898	Return the AES mode, or a list of valid AES modes, if mode == None
9899	Applicable for all platforms, where the schemes, that are integrated with your environment, does not fit.
9900	Check for a valid encryption scheme and raise appropriate errors if missing or invalid.
9901	Callback receiving messages from publisher
9902	Produce ids for Protocol packets, outliving their sessions
9903	Send a CONNECT control packet.
9904	Handles CONNACK packet from the server
9905	Encode an UTF-8 string into MQTT format. Returns a bytearray
9906	Decodes an UTF-8 string from an encoded MQTT bytearray. Returns the decoded string and remaining bytearray to be parsed.
9907	Encodes a 16 bit unsigned integer into MQTT format.
9908	Encodes a value into a multibyte sequence using the MQTT protocol for packet length fields.
9909	Decodes a variable length value defined in the MQTT protocol.
9910	Encode and store a DISCONNECT control packet.
9911	Encode and store a CONNECT control packet.
9912	Decode a CONNECT control packet.
9913	Encode and store a CONNACK control packet.
9914	Decode a CONNACK control packet.
9915	Decode a SUBSCRIBE control packet.
9916	Encode and store a SUBACK control packet.
9917	Encode and store an UNSUBSCRIBE control packet
9918	Decode a UNSUBACK control packet.
9919	Encode and store an UNSUBACK control packet
9920	Encode and store a PUBLISH control packet.
9921	Decode a PUBLISH control packet.
9922	Decode a PUBREL control packet.
9923	Return URL for calling API method.
9924	Send request to API.
9925	Refresh the list of blocks to the disk, collectively
9926	Function for converting a dict to an array suitable for sklearn.
9927	Function to format data for cluster fitting.
9928	Fit KMeans clustering algorithm to data.
9929	Fit MeanShift clustering algorithm to data.
9930	Fit classifiers from large dataset using specified clustering method.
9931	Label new data with cluster identities.
9932	Translate cluster identity back to original data size.
9933	Sort clusters by the concentration of a particular analyte.
9934	Return a datetime object from a string, with optional time format.
9935	Returns the total number of data points in values of dict.
9936	Returns total length of analysis.
9937	Determines the most appropriate plotting unit for data.
9938	Returns formatted element name as a LaTeX string with superscript numbers.
9939	Converts analytes from format '27Al' to 'Al27'.
9940	Converts analytes from format 'Al27' to '27Al'.
9941	Copy all csvs in nested directory to single directory.
9942	Consecutively numbers contiguous booleans in array.
9943	Generate boolean array from list of limit tuples.
9944	Returns rolling-window smooth of a numpy array using stride_tricks for efficient computation.
9945	Returns rolling-window gradient of a 1D numpy array using efficient stride tricks for computational optimization.
9946	Function to find local minima.
9947	Identify clusters using Meanshift algorithm.
9948	Identify clusters using K-Means algorithm.
9949	Identify clusters using DBSCAN algorithm.
9950	Returns list of SRMS defined in the SRM database.
9951	Read LAtools configuration file and return parameters as a dictionary.
9952	Reads configuration file and returns a ConfigParser object along with the file path.
9953	Prints all currently defined configurations.
9954	Creates a copy of the default SRM table at the specified location.
9955	Adds a new configuration to latools.cfg.
9956	Change the default configuration.
9957	Exclude all data after the first excluded portion.
9958	Defragment a filter by removing consecutive values that meet a threshold condition.
9959	Applies exponential decay and noise spike filtering to data.
9960	Plot a detailed autorange report for this sample.
9961	Transform boolean arrays into list of limit pairs.
9962	Divide all analytes by a specified internal_standard analyte.
9963	Apply calibration to data using calibration values for specified analytes.
9964	Calculate sample statistics for given analytes and return statistics arrays.
9965	Function for calculating the ablation time for each ablation.
9966	Apply threshold filter to generate two filters (above and below) for the given analyte and threshold values.
9967	Apply gradient threshold filter to generate above and below threshold filters for the given analyte.
9968	Calculate local correlation between two analytes.
9969	Calculate correlation filter.
9970	Make new filter from combination of other filters.
9971	Returns parameters used to process data.
9972	Plot histograms of all items in dat.
9973	Compute summary statistics for paired x, y data.
9974	Fetch LAtools reference data from online repository.
9975	Find an instance of the type class `TC` for type `G`.
9976	Loads a DataFrame of all elements and isotopes.
9977	Returns the molecular weight of a molecule given in standard chemical notation.
9978	Generate single escape sequence mapping.
9979	Squash and reduce the input stack by removing elements that match the predicate and keeping only the last match at the end of the stack.
9980	Remove duplicates from the stack in first-seen order.
9981	Calculate gaussian weighted moving mean, standard deviation, and standard error.
9982	Gaussian function.
9983	Calculate the standard error of a.
9984	Helper function to get sample names from subset.
9985	Despikes data with exponential decay and noise filters.
9986	Background calculation using a gaussian weighted mean.
9987	Background calculation using 1D interpolation.
9988	Subtract calculated background from data.
9989	Calculates the ratio of all analytes to a single analyte.
9990	Creates a subset of samples that can be treated independently.
9991	Calculate a gradient threshold filter for the specified analyte using percentile values.
9992	Create a clustering classifier based on all samples, or a subset.
9993	Apply a clustering classifier to samples, either all or a subset, and return the classifier name.
9994	Applies a correlation filter to the data by calculating rolling correlations between analytes and excluding data with significant correlations above the specified threshold.
9995	Turns data filters on for particular analytes and samples.
9996	Turns data filters off for particular analytes and samples.
9997	Prints the current status of filters for specified samples.
9998	Remove 'fragments' from the calculated filter.
9999	Report how many data are removed by the active filters.
10000	Plot a histogram of the gradients in all samples.
10001	Plot analyte gradients against each other.
10002	Plot histograms of analytes.
10003	Plot analytes as a function of time.
10004	Plot analyte gradients as a function of time.
10005	Plot filter reports for all filters that contain the specified string in the name.
10006	Calculate sample statistics for analytes and return arrays of statistics.
10007	Return pandas dataframe of all sample statistics.
10008	Used for exporting minimal dataset. DON'T USE.
10009	Export raw data traces.
10010	Save analysis.log in specified location
10011	Exports analysis parameters, standard info, and a minimal dataset for sharing with another user.
10012	Split one long analysis file into multiple smaller ones based on a regex pattern.
10013	Map over the traversable, then fold over the result using the supplied initial element and operation.
10014	Plot a fitted PCA and all components.
10015	Remove mean and divide by standard deviation, using bayes_kvm statistics.
10016	Remove median, divide by IQR.
10017	Apply standard deviation filter to remove anomalous values.
10018	Apply exponential decay filter to remove physically impossible data based on instrumental washout.
10019	Add a filter to the object.

The method adds a new filter with the specified name, boolean filter array, and associated metadata. It assigns a unique identifier to the filter based on the current count, updates internal data structures including sets, components, info, and parameters, and prepares switches for analytes. The filter is registered with the object and the internal counter is incremented.
10020	Remove filter.
10021	Clear all filters.
10022	Remove unused filters.
10023	Identify a filter by fuzzy string matching.
10024	Make filter from logical expression.
10025	Flexible access to specific filter using any key format.
10026	Get info for all filters.
10027	Function for logging method calls and parameters
10028	Write and analysis log to a file.
10029	Reads a latools analysis.log file and returns dictionaries of arguments.
10030	Decorator that will try to login and redo an action before failing.
10031	Example of printing the inbox.
10032	Example of sending a message.
10033	Parse a file-like object or string and return pyparsing parse results.
10034	Return the link to the Jupyter nbviewer for the given notebook url
10035	The string for creating the thumbnail of this example
10036	The string for creating a code example for the gallery
10037	Get the code example from the notebook metadata.
10038	The url on jupyter nbviewer for this notebook or None if unknown
10039	Get the output file with the specified ending.
10040	Process the notebook and create all the pictures and files
10041	Create the python script from the notebook node.
10042	Create the rst string to download supplementary data
10043	Create the thumbnail for html output
10044	Get summary and description of this notebook.
10045	Scales an image with the same aspect ratio centered in an image with a given max_width and max_height.
10046	Save the thumbnail image.
10047	Get the integer of the thumbnail figure.
10048	Return the url corresponding to the given notebook file
10049	Get only db changes fields
10050	When accessing the name of the field itself, the value in the current language will be returned. Unless it's set, the value in the default language will be returned.
10051	Post processors are functions that receive file objects, performs necessary operations and return the results as file objects.
10052	Process the source image through the defined processors.
10053	Populate self._thumbnails with thumbnail metadata.
10054	Return all thumbnails in a dict format.
10055	Creates and returns a thumbnail of a given size.
10056	Deletes a thumbnail of a given size.
10057	Creates a thumbnail file and its relevant metadata. Returns a Thumbnail instance.
10058	Returns a Thumbnail instance, or None if thumbnail does not yet exist.
10059	Deletes a thumbnail file and its relevant metadata.
10060	Simulate an incoming message.
10061	Register a virtual subscriber which receives messages to the matching number.
10062	Get the set of states. Mostly used for pretty printing
10063	Register a provider on the gateway.
10064	Send a message object using the appropriate provider based on routing rules.
10065	Get a Flask blueprint for the named provider that handles incoming messages & status reports.
10066	Get Flask blueprints for every provider that supports it.
10067	Handle incoming message callback and fire event hook.
10068	Handle incoming status callback and fire gateway event hook.
10069	View wrapper for JsonEx responses that catches exceptions and returns JSON formatted responses with appropriate HTTP status codes.
10070	Forward an object to clients.
10071	Sign a web3 transaction and return the RLP encoded transaction and its hash.
10072	Estimate transaction gas using web3.
10073	Estimate transaction gas by combining safe and web3 calculations, with special handling for CALL operations.
10074	Appends towrite to the write queue and optionally waits for the buffer to be flushed.
10075	Reads one line from the serial instance, waiting for a linefeed if necessary.
10076	Verifies and sends message.
10077	Creates the email message with proper encoding, attachments, and headers.
10078	Checks for bad headers i.e. newlines in subject, sender or recipients.
10079	Adds an attachment to the message.
10080	Register Services that can be accessed by this DAL. Upon registration, the service is set up.
10081	Load a configuration module and return a Config
10082	Register resources with the ResourceManager.
10083	Raises an exception if value for `key` is empty.
10084	Teardown a Resource or Middleware.
10085	Hook to setup this service with a specific DataManager.
10086	The group index with respect to wavelength.
10087	Evaluate Cauchy equations for refractive index calculation.
10088	Initialize the backend authentication and retrieve user and realm information.
10089	Log into the backend and get the token.
10090	Connect to alignak backend and retrieve all available child endpoints of root.
10091	Get all items from the specified endpoint of the alignak backend with pagination support.
10092	Method to update an item via PATCH request with etag validation and optional inception retry logic.
10093	Method to delete an item or all items.
10094	Returns True if path1 and path2 refer to the same file.
10095	Create a junction at link_name pointing to source.
10096	Sets command name and formatting for subsequent calls to logger
10097	Suppress default exit behavior
10098	Recognizes and claims MuTect VCFs from the set of all input VCFs.
10099	Returns a standardized column header by replacing MuTect sample names with NORMAL and TUMOR labels.
10100	Recognizes and claims VarScan VCFs from the set of all input VCFs.
10101	Derive mean and standard deviation from VCF reader data using Knuth's online algorithm.
10102	Allows each caller to claim incoming files as they are recognized.
10103	Split data into lines where lines are separated by LINE_TERMINATORS.
10104	Return line terminator data begins with or None.
10105	Return line terminator data ends with or None.
10106	Seek next line relative to the current file position.
10107	Seek previous line relative to the current file position.
10108	Return the last lines of the file.
10109	Return the top lines of the file.
10110	Iterator generator that returns lines as data is added to the file.
10111	Recognizes and claims Strelka VCFs from the set of all input VCFs.
10112	Alternative constructor that parses VcfRecord from VCF string.
10113	Creates a sample dict of tag-value dicts for a single variant record.
10114	Returns set of format tags.
10115	Updates info attribute from info dict.
10116	Returns string representation of format field.
10117	Returns string representation of sample-format values.
10118	Returns tab-delimited, newline terminated string of VcfRecord.
10119	Appends a new format tag-value for all samples.
10120	Replaces null or blank filter or adds filter to existing list.
10121	Returns the categories available to the user, optionally filtered by specified products.
10122	Produces an appropriate _ProductsForm subclass for the given render type.
10123	Creates a StaffProductsForm that restricts the available products to those that are available to a user.
10124	Adds an error to the given product's field.
10125	Decorator that stores the result of the stored function in the user's results cache until the batch completes.
10126	Creates a form for specifying fields from a model to display.
10127	Returns the items that this user has purchased or has pending.
10128	Sends an e-mail to the given address.
10129	Start processing an OSM diff stream and yield one changeset at a time to the caller.
10130	Parse a file-like containing OSM XML into memory and return an object with the nodes, ways, and relations it contains.
10131	Parses the global OSM Notes feed and yields note information.
10132	Returns true if the condition passes the filter
10133	Returns True if this flag condition is met, otherwise returns False.
10134	Returns the quantity remaining under the stock limit for a user, or 0 if the date range is violated.
10135	Returns all items from queryset where the user has a product from a category invoking that item's condition in one of their carts.
10136	Returns all items from queryset where the user has a product invoking that item's condition in one of their carts.
10137	Returns all items from queryset where the date falls into any specified range and the stock limit has been reached.
10138	Returns all of the items from queryset which are enabled by a user being a presenter or copresenter of a non-cancelled proposal.
10139	Returns all of the items from conditions which are enabled by a user being member of a Django Auth Group.
10140	Decorator that makes the wrapped function raise ValidationError if we're doing something that could modify the cart, and wraps the execution in a database transaction while marking cart operations batch boundaries.
10141	Returns the user's current cart, or creates a new cart if there isn't one ready yet.
10142	Updates the cart's time last updated value and calculates the new reservation duration based on vouchers, products, and existing reservations.
10143	Applies the voucher with the given code to this cart.
10144	Determines whether the status of the current cart is valid; this is normally called before generating or paying an invoice
10145	Attempts to fix easy errors by removing unavailable items from cart, recalculating discounts, and removing unavailable voucher codes.
10146	Calculates all of the discounts available for this product.
10147	Applies the best discounts on the given product from the given discounts.
10148	Decorator that converts a report view function into something that displays a Report.
10149	Returns the data rows for the table.
10150	Creates an instance of self.form_type using request.GET
10151	Renders the reports based on data.content_type's value.
10152	Lists all of the reports currently available.
10153	Summarises the items sold and discounts granted for a given set of products, or products from categories.
10154	Summarises paid items and payments.
10155	Shows the history of payments into the system
10156	Shows all of the credit notes that have been generated.
10157	Summarises the inventory status of the given items, grouping by invoice status.
10158	Summarises the usage of a given discount.
10159	Shows each product line item from invoices, including their date and purchasing customer.
10160	Shows the number of paid invoices containing given products or categories per day.
10161	Shows all of the credit notes in the system.
10162	Shows all of the invoices in the system.
10163	Returns a list of all attendees with their information and registration status.
10164	Shows registration status for speakers with a given proposal kind.
10165	Produces the registration manifest for people with the given product type.
10166	Adds the categories that the user does not currently have.
10167	Calculates the sum of unclaimed credit from this user's credit notes.
10168	Returns True if there are no products available in the ticket category for unregistered users, False if there are products available, and None for registered users.
10169	Guides users through the registration process step-by-step, ensuring they see all valid categories and handling different registration pages such as profile, ticket selection, and additional products.
10170	View for editing an attendee's profile.
10171	Returns a profile form instance and a boolean indicating if the form was handled.
10172	Handle product category selection and form submission for product reservations.
10173	Handles a products list form in the given request. Returns the form instance, the discounts applicable to this form, and whether the contents were handled.
10174	Handles a voucher form in the given request. Returns the voucher form instance and whether the voucher code was handled.
10175	Run the checkout process for the current cart.
10176	Redirects to an invoice for the attendee that matches the given access code, selecting the appropriate invoice based on payment status and issue time.
10177	Displays an invoice.

This view is not authenticated, but it will only allow access to either the user the invoice belongs to; staff; or a request made with the correct access code.

Returns rendered invoice template with invoice data.

Raises Http404 if the current user cannot view this invoice and the correct access_code is not provided.
10178	Allows staff to make manual payments or refunds on an invoice.
10179	Marks an invoice as refunded and requests a credit note for the full amount paid against the invoice.
10180	Displays a credit note and processes forms for applying or refunding it.
10181	Allows staff to amend a user's current registration cart and manage product items and vouchers.
10182	Allows staff to extend the reservation on a given user's cart.
10183	Allows staff to send emails to users based on their invoice status.
10184	Either displays a form containing a list of users with badges to render, or returns a .zip file containing their badges.
10185	Renders a single user's badge using an SVG template.
10186	Returns all discounts available to the user for the given categories and products, including available quantities and filtering based on user conditions and use limits.
10187	Annotates the queryset with a usage count for that discount clause by the given user.
10188	Returns a list of all of the products that are available per flag conditions from the given categories.
10189	Applies the total value of this credit note to the specified invoice, creating a new credit note for any residual value if the credit note overpays the invoice. Raises ValidationError if the invoice is not allowed to be paid.
10190	Generates an invoice with a cancellation fee and applies credit to the invoice.
10191	Generate an access code for users' payments and check-in fulfilment.
10192	Produces a callable for lazy evaluation of functions in templates.
10193	Returns the named object by importing the module and retrieving the specified property.
10194	Returns an invoice object for a given cart at its current revision, generating one if it doesn't exist.
10195	Generates an invoice for arbitrary items, not held in a user's cart.
10196	Generates an invoice for the given cart.
10197	Applies the user's credit notes to the given invoice on creation.
10198	Returns true if the accessing user is allowed to view this invoice, or if the given access code matches this invoice's user's access code.
10199	Refreshes the underlying invoice and cart objects.
10200	Passes cleanly if we're allowed to pay, otherwise raise a ValidationError.
10201	Updates the status of this invoice based upon the total payments.
10202	Marks the invoice as paid and updates the attached cart if necessary.
10203	Returns true if there is no cart, or if the revision of this invoice matches the current revision of the cart.
10204	Voids this invoice if the attached cart is no longer valid because the cart revision has changed, or the reservations have expired.
10205	Voids the invoice if it is valid to do so.
10206	Refunds the invoice by generating a CreditNote for the value of all payments against the cart. Marks the invoice as refunded and the underlying cart as released. Raises a ValidationError if the invoice is void. Generates a credit note for the invoice amount or voids the invoice if the amount is zero.
10207	Sends out an e-mail notifying the user about something with that invoice.
10208	Update the object with new data.
10209	Reduce dicts of dicts to dot separated keys.
10210	Print file fields to standard output.
10211	Download a file from a specified field.

The method validates that the field is a processor result (output.*), exists in the annotation, and is of type 'basic:file:', then returns a file handle from the cloud download service.
10212	Return a list of Data objects for given project.
10213	Return a list of Processor objects.
10214	Print processor input fields and types.
10215	POST JSON data object to server
10216	Upload files and data objects to a specified processor for a given project.
10217	Upload a single file on the platform.
10218	Download files of data objects.
10219	Gets the subclasses of a class.
10220	Returns repository and project.
10221	For each variant, yields evidence and associated phenotypes, both current and suggested.
10222	For each variant, yields evidence and merged phenotype from applying suggested changes to current.
10223	Search the cache for variants matching provided coordinates using the corresponding search mode.
10224	An iterator to search the cache for variants matching the set of sorted coordinates and yield matches corresponding to the search mode.
10225	Updates record and returns True if record is complete after update, else False.
10226	Returns a unique list of seq
10227	Connects to Github and Asana and authenticates via OAuth.
10228	Given a list of values and names, accepts the index value or name.
10229	Returns issue data from local data.
10230	Moves an issue_data from one namespace to another.
10231	Returns task data from local data.
10232	Retrieves a task from asana.
10233	Save data.
10234	Applies a setting value to a key, if the value is not `None`.
10235	Decorator for retrying tasks with special cases.
10236	Waits until queue is empty.
10237	Creates a task
10238	Returns formatting for the tasks section of asana.
10239	Creates a missing task.
10240	Return a list of data types.
10241	Send string to module level log
10242	Required initialization call, wraps pyserial constructor.
10243	Set optional polling loop control values.
10244	Use the serial block definitions in V3 and V4 to create one field list.
10245	Simple since Time_Stamp query returned as JSON records.
10246	Set context string for serial command.
10247	Simple wrap to calc legacy PF value
10248	Serial call to set max demand period.
10249	Serial Call to set meter password. USE WITH CAUTION.
10250	Wrapper for struct.unpack with SerialBlock buffer definitions.
10251	Move data from raw tuple into scaled and converted values.
10252	Translate the passed serial block into string only JSON.
10253	Internal read CRC wrapper.
10254	Break out a date from Omnimeter read.
10255	Get the months tariff SerialBlock for meter.
10256	Set the CT ratio for attached inductive pickup with password protection.
10257	Assign one schedule tariff period to meter buffer.
10258	Define a single season and assign a schedule.
10259	Set the season schedules table via serial command.
10260	Set a single holiday day and month in object buffer.
10261	Serial call to read schedule tariffs buffer
10262	Read a single schedule tariff from meter object buffer.
10263	Serial call to read month tariffs block into meter object buffer.
10264	Extract the tariff for a single month from the meter object buffer.
10265	Serial call to read holiday dates into meter object buffer.
10266	Read a single holiday date from meter buffer.
10267	Recommended call to read all meter settings at once.
10268	Internal method to set the command result string.
10269	Password step of set commands
10270	Fire update method in all attached observers in order of attachment.
10271	Initialize lookup table for string input of LCD fields
10272	Combined A and B read for V4 meter.
10273	Issue an A read on V4 meter.
10274	Issue a B read on V4 meter.
10275	Munge A and B reads into single serial block with only unique fields.
10276	Write calculated fields for read buffer.
10277	Set the LCD display using a list of display items and an optional password.
10278	Serial call to set relay.
10279	Send termination string to implicit current meter.
10280	Set the pulse input ratio on a specified line through serial communication.
10281	Serial call to zero resettable kWh registers.
10282	Serial call to set LCD using meter object buffer.
10283	Recursively iterate over all DictField sub-fields.
10284	Recursively iterate over all schema sub-fields.
10285	Generate random paragraphs with specified formatting and structure.
10286	Generate random text with specified constraints.
10287	Return output for the combined time and result summary statistics.
10288	Color some text in the given ANSI color.
10289	Write the text to the stream and flush immediately.
10290	Return a summary of the results.
10291	Parse some arguments using the parser.
10292	Setup the environment for an example run.
10293	Time to run.
10294	Run in transform mode.
10295	Transform a describe node into a ``TestCase``.
10296	Transform the body of an ExampleGroup.
10297	Transform an example node into a test method.
10298	Transform the body of an Example into the body of a method by replacing context variables with "self".
10299	Return an argument list node that takes only ``self``.
10300	Register the path hook.
10301	Transform the source code, then return the code object.
10302	Apply the argument parser.
10303	Load a spec from either a file path or a fully qualified name.
10304	Load a spec from a given path, discovering specs if a directory is given.
10305	Discover all of the specs recursively inside ``path``.
10306	Construct a function that checks a directory for process configuration changes and calls appropriate receiver methods for additions, removals, or modifications of JSON files.
10307	Construct a function that checks a directory for messages and calls the appropriate method on the receiver.
10308	Add a process.
10309	Remove a process from the specified places instance by deleting its configuration file.
10310	Restart a process.
10311	Call results.func on the attributes of results
10312	Return a service which monitors processes based on directory contents
10313	Return a service based on parsed command-line options
10314	Adds or refreshes a particular node in the nodelist with the current timestamp.
10315	Remove all expired nodes from the nodelist.
10316	Removes a particular node from the nodelist.
10317	Returns the time a particular node has been last refreshed.
10318	Returns all nodes in the hash with their last refresh timestamps as a dictionary.
10319	Update the session for this node by refreshing expired nodes and updating the reference time.
10320	Increments the number of times this resource has been modified by all processes.
10321	Decrement the reference count for the resource and return whether it was the last reference.
10322	Returns a list of tokens interleaved with the delimiter.
10323	Check which processes need to be restarted.
10324	Merge the failure message from another status into this one.
10325	Query to test if a value exists.
10326	Query to get the value.
10327	Produce a function that always returns a supplied value.
10328	Convert a function taking multiple arguments into a function taking a single iterable argument.
10329	Convert a function taking a single iterable argument into a function taking multiple arguments.
10330	Run a process and return a deferred that fires when it is done.
10331	Make scheduler service
10332	Consume reader and return Success only on complete consumption.
10333	Match a literal sequence.
10334	Optionally match a parser.
10335	Match a parser one or more times repeatedly.
10336	Match a parser zero or more times repeatedly.
10337	Match a parser one or more times separated by another parser.
10338	Match a parser zero or more times separated by another parser.
10339	Check all processes and synchronize states with child processes.
10340	Discard data and cancel all calls.

Instance cannot be reused after closing.
10341	Check the state of HTTP.
10342	Add a heart to a service collection if the heart is not None.
10343	Wrap a service in a MultiService with a heart.
10344	Freeze and shrink the graph based on a checkpoint and the output node names.
10345	Freeze and shrink the graph based on a session and the output node names.
10346	Save a small version of the graph based on a session and the output node names.
10347	Save a small version of the graph based on a checkpoint and the output node names.
10348	Save the weights of the trainable variables from a checkpoint to separate files in the output path.
10349	Return a TensorFlow saver from a checkpoint containing the metagraph.
10350	Parse the tag, instantiate the class.
10351	Render the tag, with all arguments resolved to their actual values.
10352	Validate the syntax of the template tag.
10353	Return the context data for the included template.
10354	Parse the "as var" syntax.
10355	Return the context data for the inclusion tag.
10356	Create a TensorFlow Session from a Caffe model.
10357	Freeze and shrink the graph based on a Caffe model, the input tensors and the output node names.
10358	Save a small version of the graph based on a Caffe model, the input tensors and the output node names.
10359	Make a sequence into rows of num_columns columns.
10360	Break a sequence into chunks of specified size, with special handling for strings.
10361	Yield every other item from the iterable.
10362	Remove sequential duplicate items from an iterable, keeping the first occurrence of each group of duplicates.
10363	Get the next value from an iterable and return both the value and a new iterable containing the value and the rest of the original iterable.
10364	Like takewhile, but takes a peekable iterable and doesn't consume the non-matching item.
10365	Given the total number of items, determine the number of items that can be added to each bin with a limit on the bin size.
10366	Given an object, always return an iterable. If the item is not already iterable, return a tuple containing only the item. If item is None, an empty iterable is returned. Mappings are treated as singletons rather than sequences.
10367	Call each callable in callables, suppressing any exceptions supplied. If no exception classes are supplied, all Exceptions will be suppressed.
10368	Yield duplicate items from any number of sorted iterables of items.
10369	Assert that for all items in the iterable, they're in order based on comp
10370	Given a partition_dict result, if the partition missed, swap the before and after.
10371	Given an ordered dictionary of items and a key in that dict, return an ordered dict of items before, the keyed item, and an ordered dict of items after.
10372	Run through the sequence until n queues are created and return them. If fewer are created, return those plus empty iterables to compensate.
10373	Resets the iterator to the start.
10374	Parse the remainder of the token to find a "as varname" statement.
10375	Register class tags with a template tag library.
10376	A descendant is a child many steps down.
10377	Get sqlite_master table information as a list of dictionaries.
10378	Yields each node of object graph in postorder.
10379	Apply selector to obj and return matching nodes.
10380	Accept a list of tokens and returns matched nodes of self.obj.
10381	Production for a full selector.
10382	Find nodes in rhs which have parents in lhs.
10383	Return nodes from rhs which have ancestors in lhs.
10384	Find nodes in rhs having common parents in lhs.
10385	Parse args and pass them to pclass_func_validator.
10386	Apply each validator in validators to each node in obj and return nodes that match all validators.
10387	Sends ICMP echo requests to destination `dst` `count` times and returns a deferred which fires when responses are finished.
10388	Make an HTTP request and return the body.
10389	Expire any items in the cache older than `age` seconds
10390	Set a key `k` to value `v`
10391	Returns key contents and modify time.
10392	Return True if key `k` exists
10393	Given a record timestamp, verify the chain integrity.
10394	Convert a JSON string representing a NIST randomness beacon value into a NistBeaconValue object.
10395	Convert a string of XML which represents a NIST Randomness Beacon value into a 'NistBeaconValue' object.
10396	Returns a 'minified' version of the javascript content.
10397	Passes each parsed log line to `fn`
10398	Returns a big list of all log lines since the last run.
10399	Validate secret link token.
10400	Get cryptographic engine.
10401	Multiple algorithm-compatible token validation.
10402	Create the secret link token.
10403	32bit counter aggregator with wrapping
10404	64bit counter aggregator with wrapping
10405	Calculate and format an average duration safely.
10406	Setup output processors
10407	Sets up source objects from the given config
10408	Callback that all event sources call when they have a new event or list of events.
10409	Watchdog timer function that recreates stale sources with watchdog enabled.
10410	Converts the input format to a regular expression and extracts fields, raising an exception if regex compilation fails.
10411	Parses a single line from the log file and returns a dictionary of its contents.
10412	Validate that date is in the future.
10413	Validate message.
10414	Verify token and save in session if it's valid.
10415	Return a basic meaningful name based on device type
10416	Do not warn on external images.
10417	Connect receivers to signals.
10418	Create a secret link for a record access request.
10419	Send email notification for accepted access request.
10420	Send email notifications for a confirmed access request.
10421	Receiver for request-created signal to send email notification.
10422	Send email notification when access request is rejected.
10423	Render a template and send as email.
10424	Create a new secret link.
10425	Validate a secret link token by checking its validity and whether it has been revoked.
10426	Revoke a secret link.
10427	Create a new access request.
10428	Get access request for a specific receiver.
10429	Confirm that sender's email is valid.
10430	Accept request.
10431	Reject request.
10432	Create a secret link from request.
10433	Compute the SHA512Hash object for NistBeaconValue signature verification.
10434	Verify a given NIST message hash and signature for a beacon value.
10435	Template filter to check if a record is embargoed.
10436	Create an access request.
10437	Confirm email address.
10438	Creates a generic endpoint connection that doesn't finish.
10439	Get reverse direction of ordering.
10440	Get column which is being ordered by.
10441	Get query with correct ordering.
10442	Open the file referenced in this object, and scrape the version.
10443	Set the version for this given file.
10444	Configure SSH client options and initialize SSH connection parameters.
10445	Starts the timer for this source.
10446	Called for every timer tick. Calls self.get which can be a deferred and passes that result back to the queueBack method. Returns a deferred.
10447	List pending access requests and shared links.
10448	Create a TCP connection to Riemann with automatic reconnection.
10449	Stop this client.
10450	Remove all or self.queueDepth events from the queue
10451	Receives a list of events and transmits them to Riemann.
10452	Create a UDP connection to Riemann.
10453	Sets up HTTP connector and starts queue timer
10454	Adapts an Event object to a Riemann protobuf event Event
10455	Encode a list of Tensor events with protobuf
10456	Decode a protobuf message into a list of Tensor events
10457	Send a Tensor Event to Riemann
10458	Generate preview for URL.
10459	Retrieve preview results for ID.
10460	Send message dicts through r_q, with explicit pickle error handling.
10461	Loop through messages and execute tasks
10462	Return True if it's time to log
10463	Send a response to the previously received challenge with the given payload and return the next state of the state machine.
10464	Abort an initiated SASL authentication process.
10465	Perform the stringprep mapping step of SASLprep on a list of unicode characters.
10466	Template tag that renders the footer information based on the authenticated user's permissions.
10467	Builds the parameters needed to present the user with a datatrans payment form.
10468	Builds the parameters needed to present the user with a datatrans form to register a credit card.
10469	Charges money using datatrans with a previously registered credit card alias.
10470	Return full version number, including release candidate, beta, etc. tags.
10471	Construct widget.
10472	Perform post-construction operations.
10473	Add keyboard shortcuts to navigate the filesystem.
10474	Handle activation of item in listing.
10475	Handle selection of item in listing.
10476	Handle selection of path segment.
10477	Finalize options to be used.
10478	Run build.
10479	Run clean.
10480	Fetch and return new children.
10481	Reload children.
10482	Return icon for index.
10483	Run an external command in a separate process and detach it from the current process.
10484	Return the maximum file descriptor value.
10485	Close a file descriptor if it is open.
10486	Close open file descriptors.
10487	Redirect a system stream to the provided target.
10488	Applies given HTML attributes to each field widget of a given form.
10489	Returns a module from a given app by its name.
10490	Imports modules from registered apps using given module name and returns them as a list.
10491	Similar to built-in ``include`` template tag, but allowing template variables to be used in template name and a fallback template, thus making the tag more dynamic.
10492	Returns Gravatar image URL for a given string or UserModel.
10493	Returns Gravatar image HTML tag for a given string or UserModel.
10494	Checks if the path is a valid filesystem location (absolute directory path, not a file).
10495	Checks if the url contains S3. Not an accurate validation of the url
10496	Return a valid absolute path. filename can be relative or absolute.
10497	Get a list of keys for the accounts.
10498	Build a workflow definition from the cloud_harness task.
10499	Execute the cloud_harness task.
10500	Move an active project to the archive.
10501	The equivalent of 'mkdir -p' in shell.
10502	List the contents of the archive directory.
10503	Restore a project from the archive.
10504	Create new storage service client.
10505	List the entities found directly under the given path.
10506	Download a file from storage service to local disk.
10507	Check if a certain path exists in the storage service.
10508	Get the parent entity of the entity pointed by the given path.
10509	Create a folder in the storage service at the specified path.
10510	Upload local file content to a storage service destination folder.
10511	Delete an entity from the storage service using its path.
10512	Validate a string as a valid storage path
10513	Creates a new cross-service client.
10514	Create a new storage service REST client.
10515	Get generic entity by UUID.
10516	Set metadata for an entity.
10517	Get metadata of an entity.
10518	Update the metadata of an entity.
10519	Delete the selected metadata entries of an entity.
10520	List all the projects the user have access to.
10521	Get information on a given project.
10522	Create a new project in the specified collaboration space and return its details.
10523	Delete a project and all its content recursively.
10524	Create a new folder.
10525	Get information on a given folder.
10526	Delete a folder recursively by its UUID, raising appropriate exceptions for invalid arguments or request errors.
10527	Upload file content to the server, validating against an optional ETag for concurrency control.
10528	Copy file content from source file to target file.
10529	Download file content.
10530	Get a signed unauthenticated URL for downloading file content.
10531	Insert a formatted log record into a MongoDB collection.
10532	Sets the service name and version the request should target.
10533	Adds headers to the request.
10534	Adds parameters to the request params.
10535	Defines if an exception should be thrown after the request is sent.
10536	Return a sequence containing the fields to be displayed on the changelist.
10537	Spawns a tree of jobs to avoid overloading the number of jobs spawned by a single parent.
10538	Runs GenotypeGVCFs on one or more gVCFs generated by HaplotypeCaller.
10539	Uses Oncotator to add cancer relevant variant annotations to a VCF file.
10540	Sort the list by timestamp by default, or by a custom function if provided.
10541	Returns just the timestamp portion of the datapoints as a list.
10542	Adds the data from a ConnectorDB export.
10543	Shifts all timestamps in the datapoint array by the given number of seconds.
10544	Gets the sum of the data portions of all datapoints within
10545	Start the event loop to collect data from the serial device.
10546	Create a new user.
10547	Parse Visual Novel search pages and extract name and id information from HTML table data.
10548	Parse Releases search pages.
10549	Parse a page of producer or staff results.
10550	Parse a page of character results and return a list of dictionaries containing character information including name, gender, and associated games.
10551	Parse a page of tag or trait results and return a list of tags.
10552	Parse a page of user results and return a list of dictionaries containing user names and join dates.
10553	Creates a tarball from a group of files.
10554	Applies a function to a set of files and an output directory.
10555	Job version of move_files for one file
10556	Makes a Spark Submit style job submission line.
10557	Augment a list of "docker run" arguments with host mapping options if needed.
10558	Refresh reloads data from the server. It raises an error if it fails to get the object's metadata.
10559	Calls MuTect to perform variant analysis
10560	Creates the device with optional public flag and additional properties.
10561	Returns the list of streams that belong to the device.
10562	Exports the device to the given directory.
10563	Search vndb.org for a term and return matching results from type.
10564	This is our parsing dispatcher
10565	Adds the given stream to the query construction with specified interpolator and column naming options, supporting Merge queries with custom column names.
10566	Invalidates the device's current API key, generates a new one, and resets current auth to use the new API key.
10567	Returns the list of users in the database
10568	Use BWA to create reference index files
10569	Returns the ConnectorDB object that the logger uses. Raises an error if Logger isn't able to connect.
10570	Adds the given stream to the logger.
10571	Adds a stream to the logger without checking if it exists in the ConnectorDB database.
10572	Insert the datapoint into the logger for the given stream name.
10573	Attempt to sync with the ConnectorDB server
10574	Start the logger background synchronization service.
10575	Stops the background synchronization thread
10576	Job version of `download_url`
10577	Job version of s3am_upload
10578	Output the names to the given file
10579	Output the parent-child relations to the given file.
10580	Function to calculate the mean insert size from a BAM file using samtools via docker, with error handling for empty files.
10581	Returns the container ID of the current Docker container.
10582	Performs alignment of fastqs to bam via STAR.
10583	Creates a stream given an optional JSON schema, accepting both string and dict-encoded schemas, and sets the stream's metadata.
10584	Exports the stream to the given directory.
10585	Returns the device which owns the given stream.
10586	Iterates over the labels of terms in the ontology.
10587	Iterates over the parent-child relationships in an ontology.
10588	Prepares and runs the pipeline in a Docker container, handling configuration, work directory management, and cleanup.
10589	Populates an ArgumentParser object with arguments from config data dictionary.
10590	Returns the config file contents as a string. The config file is generated and then deleted.
10591	Returns the path of the mount point of the current container, raising exceptions if outside a container or if the docker daemon is unreachable.
10592	Add an argument to the given arg_parser with the given name.
10593	Creates and returns an ArgumentParser object prepopulated with 'no clean', 'cores' and 'restart' arguments.
10594	Creates and returns a list that represents a command for running the pipeline.
10595	Set the authentication header for use in the session.
10596	Handles HTTP error codes for the given request.
10597	Attempts to ping the server using current credentials and returns the path of the currently authenticated device.
10598	Send a POST CRUD API request to the given path using the given data which will be converted to json.
10599	Send an update request to the given path of the CRUD API, with the given data dict, which will be converted into json.
10600	Send a delete request to the given path of the CRUD API. This deletes the object. Or at least tries to.
10601	Subscribe to the given stream with the callback.
10602	Creates a user with the given email and password, along with additional properties and device/stream configurations.
10603	Returns the list of devices that belong to the user
10604	Adapter trimming for RNA-seq data using CutAdapt.
10605	Use SAMtools to create reference index file
10606	Runs SAMtools index to create a BAM index file
10607	Marks reads as PCR duplicates using Sambamba
10608	Marks reads as PCR duplicates using SAMBLASTER
10609	Runs Picard MarkDuplicates on a BAM file to mark duplicate reads.
10610	Sorts BAM file using Picard SortSam
10611	Creates recalibration table for Base Quality Score Recalibration
10612	RNA quantification via Kallisto
10613	RNA quantification with RSEM
10614	Prepare test set for C++ SAR prediction code by finding all items the test users have seen in the past.
10615	Send the given command thru the websocket
10616	Set up a subscription to a stream with an optional transform and callback.
10617	Attempt to connect to the websocket and returns True or False depending on if the connection was successful or not.
10618	Attempts to reconnect to the server when a connection is lost.
10619	Send subscribe command for all existing subscriptions to resume a connection that was closed.
10620	Called when the websocket is opened
10621	Called when the websocket is closed
10622	Called when there is an error in the websocket
10623	Handle incoming WebSocket messages from the server, process subscriptions, and manage downlink acknowledgments.
10624	Check if websocket ping timeout occurs and handle reconnection attempt if necessary.
10625	Isolates a particular variant type from a VCF file using GATK SelectVariants
10626	Filters VCF file using GATK VariantFiltration and fixes quotation marks in VCF header.
10627	Runs GATK VariantRecalibrator for SNP or INDEL variant recalibration.
10628	Applies variant quality score recalibration to VCF file using GATK ApplyRecalibration
10629	Merges VCF files using GATK CombineVariants
10630	Perform a quick check on a BAM file using `samtools quickcheck` to detect obvious errors such as truncation.
10631	Load and import message handlers based on a mapping dictionary, returning a dictionary mapping packet types to their corresponding handlers.
10632	Helper to write the JSON configuration to a file
10633	Gets the configuration for this project from the default JSON file, or writes one if it doesn't exist.
10634	Gets the data for a given term.
10635	Searches the OLS with the given term.
10636	Suggest terms from an optional list of ontologies.
10637	Iterates over the descendants of a given term.
10638	Iterates over the labels for the descendants of a given term.
10639	Iterates over the labels of terms in the ontology.
10640	Iterates over parent-child relations in an ontology hierarchy and yields term label pairs.
10641	Run Fastqc on the input reads
10642	Adds the given stream to the query construction.
10643	Create and configure a Flask application with specified settings and register blueprints for web and API endpoints.
10644	Start spark and hdfs master containers.
10645	Start spark and hdfs worker containers.
10646	Launches the Hadoop datanode.
10647	Stop spark and hdfs worker containers
10648	Checks to see if Spark worker and HDFS datanode are still running.
10649	Tokenizer. Generates tokens stream from text
10650	Look up a zone ID for a zone string.
10651	Fetch all pieces of a Route 53 config from Amazon.
10652	Merge a set of fetched Route 53 config Etrees into a canonical form.
10653	Validate a changeset is compatible with Amazon's API spec.
10654	Orders population members from highest fitness to lowest fitness.
10655	Return the average fitness score of the population members, or None if the population is empty.
10656	Returns average cost function return value for all members
10657	Returns median cost function return value for all members
10658	Return population parameter values as average member parameter values.
10659	Returns Member objects of population
10660	Adds a parameter to the Population.
10661	Generates the next population from a previously evaluated generation.
10662	Return a config dictionary with normalized keys regardless of whether the keys were specified in environment variables or in config files.
10663	Returns a generator with all environmental vars with prefix PIP_
10664	Return True if the callable throws the specified exception.
10665	Transform a list of package versions from PyPI into a list of packages with inline version information, sorted by score.
10666	Convert the result back into the input type.
10667	Convert all tags in an HTML tree to XHTML by moving them to the XHTML namespace.
10668	Convert all tags in an XHTML tree to HTML by removing their XHTML namespace.
10669	Return an HTML string representation of the document.
10670	Open the HTML document in a web browser by saving it to a temporary file.
10671	Removes this element from the tree, including its children and text. The tail text is joined to the previous element or parent.
10672	Remove the tag, but not its children or text.  The children and text are merged into the parent.
10673	Get the first element in a document with the given id.
10674	Run the CSS expression on this element and its children, returning a list of the results.
10675	Iterate through the attributes of every logger's handler.

This function is used to switch out stderr and stdout in tests when buffer is True.

Returns a generator of tuples, each tuple has (name, handler, member_name, member)
10676	Return test counts set via pytest environment variables.
10677	Returns True if only a single class is being run or some tests within a single class
10678	Returns True if only a module is being run
10679	Validate request params.
10680	Validate request id.
10681	Ensure that the given path is decoded, NONE when no expected encoding works
10682	Helper for various string-wrapped functions.
10683	Return the python codec name corresponding to an encoding or None if the string doesn't correspond to a valid encoding.
10684	Attempts to detect a BOM at the start of the stream and return the corresponding encoding name, or return None if no BOM is found.
10685	Selects the new remote addr from the given list of ips in X-Forwarded-For.
10686	Converts amount value from several types into Decimal.
10687	Parse a string of HTML data into an Element tree using the BeautifulSoup parser.
10688	Parse a file into an ElementTree using the BeautifulSoup parser.
10689	Convert a BeautifulSoup tree to a list of Element trees.
10690	Get the current exception info as `Traceback` object.
10691	String representation of the exception.
10692	Render the traceback for the interactive console.
10693	Like the plaintext attribute but returns a generator
10694	Helper function that returns lines with extra information.
10695	Render the source code.
10696	Pull the version part out of a string.
10697	Returns the locations found via self.index_urls for a given project name.
10698	Find all available versions for a project by searching index URLs, find links, and dependency links, then return a prioritized list of versions.
10699	Try to find an InstallationCandidate for req.
10700	Returns elements of links in order, non-egg links first, egg links second, while eliminating duplicates
10701	Get the Content-Type of the given url, using a HEAD request
10702	Yields all links in the page
10703	Returns True if this link can be verified after download, False if it cannot, and None if we cannot determine.
10704	Return filenames for package's data files in 'src_dir'
10705	Filter filenames for package's data files in 'src_dir'
10706	Parse a requirements file and yield InstallRequirement instances.
10707	Joins a line ending in '\' with the previous line.
10708	Strips and filters empty or commented lines.
10709	Return compiled marker as a function accepting an environment dict.
10710	Ensure statement only contains allowed nodes.
10711	Flatten one level of attribute access.
10712	Coerce a value to a number (int or float) if possible, otherwise return the original value.
10713	A helper function that decorates a function to retain the current request context, useful when working with greenlets.
10714	Binds the app context to the current context.
10715	Pops the app context.
10716	Creates a copy of this request context with the same request object.
10717	Can be overridden by a subclass to hook into the matching of the request.
10718	Binds the request context to the current context.
10719	Make a filename relative to another path.
10720	Check if distribution is an editable install.
10721	Registers a function as URL value preprocessor for this blueprint.
10722	Callback function for URL defaults for this blueprint.
10723	Registers an error handler that becomes active for this blueprint only.
10724	Enable streaming responses with preserved request context.
10725	Create a response object from view function arguments, useful for adding headers or forcing a response return type.
10726	Generates a URL to the given endpoint with the method provided.
10727	Safely join `directory` and `filename`.
10728	Returns the path to a package or cwd if that cannot be found.
10729	The Jinja loader for this package bound object.
10730	Prints the completion code of the given shell
10731	Returns the cookie domain that should be used for the session cookie if session cookies are used.
10732	Return a directory to store cached wheels in for link.
10733	Return True if the extracted wheel in wheeldir should go into purelib.
10734	Yield all the uninstallation paths for dist based on RECORD-without-.pyc
10735	Raises errors or warns if called with an incompatible Wheel-Version.
10736	Build one wheel.
10737	Yield names and strings used by `code` and its nested code objects
10738	Decorator for Backend that ensures rates are fresh within last 5 mins
10739	Add paths for egg-info files for an external egg-base.
10740	Write the pip delete marker file into this directory.
10741	Return True if running inside a virtualenv, False otherwise.
10742	Returns the effective username of the current process.
10743	Return a distutils install scheme
10744	Parse the cache control headers returning a dictionary with values for the different directives.
10745	Return a cached response if it exists in the cache and is fresh enough, otherwise return False.
10746	Algorithm for caching requests.
10747	Update zipimporter cache data for a given normalized path.
10748	Load and prepare a template script from the package for use.
10749	Make sure there's a site.py in the target dir, if needed
10750	Write changed .pth file back to disk
10751	Convert values to an appropriate type. dicts, lists and tuples are replaced by their converting alternatives. Strings are checked to see if they have a conversion format and are converted if they do.
10752	Add filters to a filterer from a list of names.
10753	Configure a handler from a dictionary.
10754	Add handlers to a logger from a list of names.
10755	Perform configuration which is common to root and non-root loggers.
10756	Python 3 implementation of execfile.
10757	Monkey-patch tempfile.tempdir with replacement, ensuring it exists
10758	Prefixes stub URLs with 'ssh://' scheme for SSH-based URLs, then removes the scheme from the final URL before returning it along with the revision.
10759	Get an item or attribute of an object but prefer the item.
10760	Internal hook that can be overridden to hook a different generate method in.
10761	Finds all templates the loader can find, compiles them, and stores them in a target directory or zipfile.
10762	Determine the default cache location.
10763	Find eggs in zip files; possibly multiple nested eggs.
10764	Yield distributions accessible on a sys.path directory
10765	Declare that package 'packageName' is a namespace package.
10766	Get an mro for a type or classic class
10767	Return an adapter factory for `ob` from `registry`
10768	Ensure that the parent directory of `path` exists
10769	Yield entry point objects from `group` matching `name`
10770	Is distribution `dist` acceptable for this environment?
10771	Find distribution best matching `req` and usable on `working_set`
10772	Evaluate a PEP 426 environment marker on CPython 2.4+ and return a boolean indicating the marker result in this environment.
10773	Evaluate a PEP 426 environment marker using markerlib and return a boolean result.
10774	Calls the standard formatter and indents all log messages by the current indentation level.
10775	Return formatted currency value.
10776	Parse number format patterns into a NumberPattern object, handling positive and negative subpatterns, number formatting rules, and precision calculations.
10777	Return minimal quantum of a number, as defined by precision.
10778	Return maximum precision of a decimal instance's fractional part.
10779	Returns normalized scientific notation components of a value.
10780	Provide Python 2.6 compatibility for total_seconds method on timedelta objects.
10781	Yield ``Requirement`` objects for each specification in `strs`
10782	Protect against re-patching the distutils if reloaded and ensure distutils is not already monkeypatched by another extension.
10783	Verify that install_requires is a valid requirements list
10784	Fetch an egg needed for building.
10785	Roll n-sided dice and return each result and the total
10786	Ensures that string prices are converted into Price objects.
10787	Price field for attrs.
10788	Validate JSON-RPC request.
10789	Get request method for service application.
10790	Apply application method.
10791	The name of the current module if the request was dispatched to an actual module.
10792	Get the name of the current blueprint.
10793	Since Flask 0.8 we're monkeypatching the files object in case a request is detected that does not use multipart form data but the files object is accessed.
10794	Factory to make an abstract dist object.
10795	Add install_req as a requirement to install.
10796	Call handler for all pending reqs.
10797	Check if a requirement should be skipped based on installation status and user options.
10798	Create the installation order using topological sorting with cycle breaking.
10799	Return sorted list of all package namespaces
10800	Convert QuerySet objects to their list counter-parts
10801	Tokenize a document and add an annotation attribute to each token.
10802	Merge the annotations from tokens_old into tokens_new, when the tokens in the new document already existed in the old document.
10803	Copy annotations from the tokens listed in src to the tokens in dest
10804	Combine adjacent tokens when there is no HTML between the tokens and they share an annotation.
10805	Serialize the list of tokens into a list of text chunks, calling markup_func around text to add annotations.
10806	Given a list of tokens, return a generator of the chunks of text for the data in the tokens.
10807	Handle unbalanced end tags by moving the point earlier in the document.
10808	This function takes a list of chunks and produces a list of tokens.
10809	Generate text chunks for an lxml element, including start tags, words, and end tags, with optional href handling.
10810	Splits some text into words, including trailing whitespace when appropriate.
10811	The text representation of the start tag for a tag.
10812	The text representation of an end tag for a tag. Includes trailing whitespace when appropriate.
10813	Serialize a single lxml element as HTML, optionally skipping the outermost tag.
10814	Fixup ins and del tags in an lxml document in-place by moving elements inside block-level tags and dropping the original tags.
10815	Extract the constant value of 'symbol' from 'code'
10816	A simplified URL to be used for caching the given query.
10817	Turn any URLs into links.
10818	Kill IE conditional comments that could embed HTML the parser doesn't normally see.
10819	Parse a whole document into a string.
10820	Define the return schema of an API.
10821	Get a TreeWalker class for various types of tree with built-in support.
10822	Export the svn repository at the url to the destination location.
10823	Return the maximum revision for all files under a given location.
10824	Wraps a method so that it performs a check in debug mode if the first request was already handled.
10825	Get the name of the application, which is usually the import name but is guessed from the run file if the import name is main.
10826	Returns the value of the `PROPAGATE_EXCEPTIONS` configuration value, otherwise returns a sensible default.
10827	Tries to locate the instance path if it was not provided to the constructor of the application class.
10828	Update the template context with commonly used variables, injecting request, session, config, and g variables along with values from template context processors, while ensuring original context values take precedence.
10829	Handles an HTTP exception by invoking registered error handlers or returning the exception as a response.
10830	Checks if an HTTP exception should be trapped or not.
10831	Default exception handling that kicks in when an exception occurs that is not caught.
10832	Exceptions that are recording during routing are reraised with this method.
10833	Dispatches the request and performs request pre and postprocessing as well as HTTP exception catching and error handling.
10834	Create the default `OPTIONS` response for the current request.
10835	Creates a URL adapter for the given request.
10836	Injects the URL defaults for the given endpoint directly into the values dictionary passed.
10837	Yield unique values in iterable, preserving order.
10838	Place the runtime requirements from pkg_info into metadata.
10839	Compose the version predicates for requirement in PEP 345 fashion.
10840	Convert .egg-info directory with PKG-INFO to the Metadata 1.3 aka old-draft Metadata 2.0 format.
10841	Return modules that match module_name by importing them from specified paths.
10842	Find and yield TestCase classes that match a given class name pattern from modules.
10843	Return the actual test methods that matched self.method_name
10844	Check if a name combined with test prefixes or postfixes is found in a list of basenames.
10845	Returns true if the passed in path is a test module path
10846	Walk all the directories of basedir except hidden directories
10847	Yield all test module paths recursively found in basedir that are test modules.
10848	Inject default arguments for dump functions.
10849	Inject default arguments for load functions.
10850	Sets multiple keys and values from a mapping.
10851	Increments the value of a key by `delta`.
10852	Dumps an object into a string for redis, serializing integers as regular strings and pickling everything else.
10853	Generate a dictionary of query string parameters from an editable URL.
10854	Ensure that if a link can be found for this, that it is found.
10855	Ensure that a source_dir is set. This will create a temporary build dir if the name of the requirement isn't known yet.
10856	Remove the source files from this requirement, if they are marked for deletion
10857	Return a pkg_resources.Distribution built from self.egg_info_path
10858	Read and return buffered incoming data from the client as a bytestring, with options for caching, text decoding, and form data parsing.
10859	This is automatically called right before the response is started and returns headers modified for the given environment.
10860	Converts a unicode-based IRI to an ASCII URI, handling encoding and safe conversion options.
10861	Return full path to the user-specific cache dir for this application.
10862	Return full path to the user-specific data dir for this application.
10863	Return full path to the user-specific log dir for this application.
10864	Return full path to the user-specific config dir for this application.
10865	Return a list of potential user-shared config dirs for this application.
10866	Iterates over all relevant Python files by examining loaded modules and their file paths.
10867	Spawn a new Python interpreter with the same arguments as this one, but running the reloader thread.
10868	Wrapper around six.text_type to convert None to empty string
10869	Return an existing CA bundle path, or None
10870	Parse a string or file-like object into a tree
10871	Parse a HTML document into a well-formed tree.
10872	Parse a HTML fragment into a well-formed tree fragment.
10873	Pass in a word string that you would like to see probable matches for.
10874	Convert input data lines to usable format, returning list of token strings and dictionary of tokens.
10875	Bind and activate HTTP server.
10876	Report startup info to stdout.
10877	Loads bytecode from a file or file like object.
10878	Return a copy of paramsDict updated with kwargsDict entries, wrapped as stylesheet arguments, ignoring None values.
10879	Run a VCS subcommand.
10880	Return implementation version.
10881	Yield egg or source distribution objects based on basename
10882	Find rel="homepage" and rel="download" links in `page`, yielding URLs
10883	Read a local path, with special support for directories.
10884	Evaluate a URL as a possible download, and maybe retrieve it
10885	Remove duplicate entries from sys.path along with making them absolute.
10886	Return a set containing all existing directory entries from sys.path
10887	Add a new path to known_paths by combining sitedir and 'name' or execute sitedir if it starts with 'import'
10888	Add 'sitedir' argument to sys.path if missing and handle .pth files in 'sitedir'
10889	Check if user site directory is safe for inclusion
10890	Add a per user site-package to sys.path.
10891	Define new built-ins 'quit' and 'exit' that display a hint on how to exit.
10892	On Windows, alias default encodings to "mbcs" when available.
10893	Set the string encoding used by the Unicode implementation.
10894	Force easy_installed eggs in the global environment to get placed in sys.path after all packages inside the virtualenv.
10895	Adjust the special classpath sys.path entries for Jython. These entries should follow the base virtualenv lib directories.
10896	Open a subprocess without blocking and replace output streams with queues of lines from that stream.
10897	Return True if Cython or Pyrex can be imported.
10898	Replace .pyx sources with target language extensions, preferring pre-converted sources when Cython is not available.
10899	Run the application and conserve the traceback frames.
10900	Return a static resource from the shared folder.
10901	Return a string representing the user agent.
10902	Returns true if the name looks like a URL
10903	Unpack a link into a location, with optional download directory support.
10904	Download a file from a URL into a temporary directory using a provided session, handling content type and filename detection.
10905	Check download_dir for previously downloaded file with correct hash. If a correct file is found return its path else None.
10906	Handle currencyFormat subdirectives.
10907	Handle exchange subdirectives.
10908	Decode the data passed in and potentially flush the decoder.
10909	Default template context processor. Injects `request`, `session` and `g`.
10910	Renders the template and fires the signal.
10911	Renders a template from the template folder with the given context.
10912	Renders a template from the given template source string with the given context.
10913	Use parse_version from pkg_resources or distutils as available.
10914	Check if a name is declared in this or an outer scope.
10915	All assignments to names go through this function.
10916	Handles includes.
10917	Visit named imports.
10918	Create a whl file from all the files under 'base_dir' and place .dist-info at the end of the archive.
10919	Decorate a function with a reentrant lock to prevent multiple threads from calling said function simultaneously.
10920	Create service, start server.
10921	URL escapes a single bytestring or unicode string with the given charset if applicable to URL safe quoting under all rules that need to be considered under all supported Python versions. If non strings are provided they are converted to their unicode representation first.
10922	List of wheels matching a requirement.
10923	Marshal cmd line args into a requirement set.
10924	Export the Bazaar repository at the url to the destination location.
10925	Lookup an Amazon Product.
10926	Iterate Pages.

A generator which iterates over all pages.
Keep in mind that Amazon limits the number of pages it makes available.

:return:
    Yields lxml root elements.
10927	Return the immediate ancestor of this browse node in the browse node tree.
10928	Return this browse node's children in the browse node tree.
10929	Safe Get Element.

Get a child element of root (multiple levels deep) failing silently if any descendant does not exist.
10930	Safe get element text.
10931	Safe get element date.

Get element as datetime.date or None,
return datetime.date or None.
10932	Get Offer Price and Currency.
10933	Return the list price and currency code for this item.
10934	Send a request and handle caching logic for GET requests, including cache checks and conditional headers.
10935	Build a response by making a request or using the cache.
10936	Returns a callable that looks up the given attribute from a passed object with the rules of the environment.
10937	Return a titlecased version of the value. Words will start with uppercase letters, all remaining characters are lowercase.
10938	Sort an iterable with optional reverse order, case sensitivity, and attribute-based sorting.
10939	Group a sequence of objects by a common attribute.
10940	Applies a filter on a sequence of objects or looks up an attribute.
10941	Creates a logger for the given application with debug-level functionality and custom handler configuration.
10942	Returns True if the two strings are equal, False otherwise.

The time taken is independent of the number of characters that match.  Do
not use this function for anything else than comparision with known
length targets.
10943	Verifies the given signature matches the expected signature.
10944	This method derives a key using the specified key derivation method and salt.
10945	Returns the signature for the given value.
10946	Signs the given string.
10947	Verifies the signature for the given value.
10948	Unsigns the given string.
10949	Signs the given string and also attaches a time information.
10950	Just validates the given signed value. Returns `True` if the signature exists and is valid, `False` otherwise.
10951	Returns a signed string serialized with the internal serializer.
10952	JSON-RPC server error handler that constructs and raises a service exception with a 500 status code and error details.
10953	Return a list of all Python packages found within directory 'where', filtered by include/exclude patterns.
10954	Exclude any apparent package that apparently doesn't include its parent.
10955	Return all dirs in base_path, relative to base_path
10956	Verify vary headers match and construct a urllib3 HTTPResponse object.
10957	Remove RECORD.jws from a wheel by truncating the zip file.
10958	Unpack a wheel file to a specified destination directory.
10959	Regenerate the entry_points console_scripts for the named distribution.
10960	Sets for the _draw_ and _ldraw_ attributes for each of the graph sub-elements by processing the xdot format of the graph.
10961	Parses the Xdot attributes of all graph components and adds the components to a new canvas.
10962	Returns a node given an ID or None if no such node exists.
10963	Sets the connection string for all edges.
10964	Handles the list of edges for any graph changing.
10965	Handles the component being changed.
10966	Handles the left mouse button being double-clicked when the tool is in the 'normal' state. Opens a Traits UI view on the object referenced by the 'element' trait of the component that was double-clicked, setting the tool as the active tool for the duration of the view.
10967	Handles the diagram canvas being set
10968	Removes all components from the canvas and creates a new canvas with the same background color and axis drawing settings.
10969	Handles the domain model changing by unmapping the old model and mapping the new model.
10970	Maps a domain model to the diagram by creating a visual representation using pydot and xdot libraries, handling node mappings, styling, and tool associations.
10971	Removes listeners from a domain model
10972	Handles mapping elements to diagram components
10973	Styles a node
10974	Parses xdot data and returns the associated components.
10975	Sets the font.
10976	Returns the components of an ellipse.
10977	Returns the components of a polygon.
10978	Returns the components of a polyline.
10979	Returns text components.
10980	Returns the components of an image.
10981	Allow direct use of GridOut GridFS file wrappers as endpoint responses.
10982	Save to file.
10983	Load the file.
10984	Test if the point is within this ellipse
10985	Draws the component bounds for testing purposes
10986	Perform the action.
10987	Construct the SQLAlchemy engine and session factory.
10988	Parses the dot_code string and replaces the existing model.
10989	Handles the new Graph action.
10990	Handles the open action.
10991	Handles saving the current model to the last file.
10992	Handles saving the current model to file.
10993	Handles display of the graph dot traits.
10994	Handles display of the nodes editor.
10995	Handles display of the edges editor.
10996	Handles displaying a view about Godot.
10997	Handles adding a Node to the graph.
10998	Handles adding an Edge to the graph.
10999	Handles adding a Subgraph to the main graph.
11000	Handles adding a Cluster to the main graph.
11001	Displays a dialog for graph selection if more than one exists. Returns None if the dialog is canceled.
11002	Handles display of the options menu.
11003	Handles display of the dot code in a text editor.
11004	Handles the user attempting to exit Godot.
11005	Position components at the origin by adjusting their coordinates based on their type.
11006	Save the object to a given file like object in the given format.
11007	Load the object from a file-like object with the given format.
11008	Save the object to file given by filename.
11009	Return an instance of the class that is saved in the file with the given filename in the specified format.
11010	Syntactically concise alias trait that creates a pair of lambda functions for every alias declared.
11011	Simple file parsing generator
11012	Cached list of keys that can be used to generate sentence.
11013	Add chain to current shelve file
11014	Remove chain from current shelve file
11015	Build a Markov chain from a source iterable and extend an existing chain.
11016	Generate a simple sentence using a Markov chain with weighted random choices.
11017	Creates and returns a representation of the graph using the Graphviz layout program.
11018	Adds a node to the graph.
11019	Removes a node from the graph.
11020	Returns the node with the given ID or None.
11021	Removes an edge from the graph. Returns the deleted edge or None.
11022	Adds an edge to the graph.
11023	Adds a subgraph to the graph.
11024	Handles the Graphviz layout program selection changing.
11025	Maintains each edge's list of available nodes.
11026	Parse a DOT file and return a Godot graph.
11027	Returns a graph given a file or a filename.
11028	Build a Godot graph instance from parsed data.
11029	Builds a Godot graph from tokens containing graph construction commands.
11030	Given a duration in seconds, determines the best units and multiplier to use to display the time. Return value is a 2-tuple of units and multiplier.
11031	Formats a number of seconds using the best units.
11032	Handle the file path changing.
11033	Creates the toolkit-specific control that represents the editor.
11034	Split a sequence into pieces of length n

If the length of the sequence isn't a multiple of n, the rest is discarded. Note that nsplit will split strings into individual characters.
11035	Generate sliding windows of a specified length from an iterable, with optional overlap and padding.
11036	Runs Godot.
11037	Get the object's children.
11038	Appends a child to the object's children.
11039	Inserts a child into the object's children.
11040	Delete a child at a specified index from the object's children.
11041	Set up or remove a listener for children being replaced on a specified object.
11042	Sets up or removes a listener for children being changed on a specified object.
11043	Gets the label to display for a specified object.
11044	Sets the label for a specified object.
11045	Sets up or removes a listener for the label being changed on a specified object.
11046	Finishes initialising the editor by creating the underlying toolkit widget.
11047	Updates the editor when the object trait changes externally to the editor.
11048	Adds the event listeners for a specified object.
11049	Handles a list of nodes being set.
11050	Handles addition and removal of nodes.
11051	Adds a node to the graph for each item in 'features' using the GraphNodes from the editor factory.
11052	Handles a list of edges being set.
11053	Handles addition and removal of edges.
11054	Adds an edge to the graph for each item in 'features' using the GraphEdges from the editor factory.
11055	Handles parsing Xdot drawing directives.
11056	Handles the containers of drawing components being set.
11057	Give new nodes a unique ID.
11058	Give new edges a unique ID.
11059	Attach this connection's default database to the context using our alias.
11060	Parses the drawing directive and updates the node components by creating a container with parsed components and setting the drawing attribute.
11061	Parses the label drawing directive, updating the label components.
11062	Handles the container of drawing components changing.
11063	Handles the position of the component changing.
11064	Handles the Graphviz position attribute changing.
11065	Handles the right mouse button being clicked when the tool is in the 'normal' state.
11066	Outputs the CSS which can be customized for highlighted code
11067	Draws a closed polygon.
11068	Test if a point is within this polygonal region
11069	Draws the Bezier component.
11070	Broadcast an event to the database connections registered.
11071	Method that gets run when the Worker thread is started.
11072	Get the full, external URL for this page, optionally with the passed in URL scheme.
11073	Render the rel=prev and rel=next links to a Markup object for injection into a template
11074	Render the rel=canonical, rel=prev and rel=next links to a Markup object for injection into a template.
11075	Is ``candidate`` an exact match or sub-type of ``pattern``?
11076	Selects the best content type.
11077	Create a new URL from `input_url` with modifications applied.
11078	Removes the user & password from a URL and returns the authorization information along with the sanitized URL.
11079	Generate the user+password portion of a URL.
11080	Normalize a host for a URL.
11081	Attempts to list all of the modules and submodules found within a given directory tree.
11082	Recursively discovers all modules and submodules within a given directory tree and returns a list of candidate module names.
11083	Attempts to recursively find submodules under a module.
11084	Attempts to list all classes within a specified module, optionally filtering them based on a provided filter function.
11085	Attempts to list all classes within a given module namespace, recursing into submodules and applying an optional filter.
11086	Ensure that a needed directory exists, creating it if it doesn't
11087	Store the given text contents so that they are later retrievable by the given key.
11088	Check if a card number passes a Luhn mod-10 checksum validation.
11089	Return the git hash as a string.
11090	Loads a module's code and sets the module's expected hidden variables.
11091	Adds a path to search through when attempting to look up a module.
11092	Searches the paths for the required module.
11093	Split a line of text into multiple lines based on indentation and length constraints.
11094	Call this on an lxml.etree document to remove all namespaces
11095	Checks that the versions are consistent.
11096	Creates a new instance of a rule in relation to the config file.
11097	Merges a dictionary into the Rule object.
11098	Iterates over the actions and executes them in order.
11099	Creates a new instance of a rule by merging two dictionaries.
11100	Add extra details to the message, including Flask request details and session information.
11101	Emit a record by formatting it and sending an email, with rate limiting applied.
11102	Ensure `image_rendition` is added to the global context.
11103	Log an attempt against key, incrementing the number of attempts for that key and potentially adding a lock to the lock table.
11104	Adds an URL to the download queue.
11105	Creates and starts the workers for the pipeline, and attaches a signal handler to terminate them gracefully on SIGINT.
11106	Add or update a key, value pair to the database
11107	Get the value of a given key.
11108	Recursively get the tree below the given key.
11109	Get the current index of the key or the subtree for long polling requests.
11110	Delete a given key or recursively delete the tree below it
11111	Plot heatmap which shows features with classes.
11112	Add a number of months to a timestamp.
11113	Add a number of months to a date.
11114	Is this the christmas period?
11115	Sets the current music service to the specified service name and initializes it with the provided API key if necessary.
11116	Sets the current storage service to service_name and runs the connect method on the service.
11117	Read dataset from csv.
11118	Reads dataset from json.
11119	Reads dataset to json.
11120	Select items with label from dataset.
11121	Calculates average dictionary from list of dictionaries for given label.
11122	Provide significance for features in dataset with anova using multiple hypothesis testing.
11123	Restore the data dict - update the flask session and this object
11124	Recursively merge two dictionaries destructively.
11125	A decorator for a function to dispatch on.
11126	A decorator for a function implementing dispatch_fn for dispatch_key.
11127	Auto-discover INSTALLED_APPS registered_blocks.py modules and register their blocks, with silent failure when modules are not present.
11128	Verifies a block prior to registration.
11129	Registers a block to a specified block type in the registry.
11130	Unregisters the block associated with `block_type` from the registry.
11131	Converts a file to MP3 format, returning the new filename and adding the original to a delete queue.
11132	Determine whether the desired version is a reasonable next version.
11133	Check if a route needs SSL and redirect accordingly, or return None.
11134	Initialize Celery and set up logging
11135	Add a mail to the queue to be sent.
11136	Parse an HTTP accept-like header into a list of ContentType instances sorted by quality order.
11137	Parse a `Cache-Control` header, returning a dictionary of key-value pairs.
11138	Parse a content type like header.
11139	Parse RFC7239 Forwarded header into a list of dictionaries containing parameter values.
11140	Parse a comma-separated list header.
11141	Parse a named parameter list in the "common" format.
11142	Resize an image to fit a specified width while maintaining the aspect ratio.
11143	Add a new value to the list.
11144	Downloads a MP4 or WebM file associated with the video at the given URL.
11145	Creates connection to the Google Drive API, sets the connection attribute to make requests, and creates the Music folder if it doesn't exist.
11146	Uploads a file to Google Drive in the Music folder and returns the original filename.
11147	Initializes the connection attribute with the path to the user home folder's Music folder, and creates it if it doesn't exist.
11148	Writes the sky parameters to a file for skytool_Free to generate the sky radiance distribution.
11149	Does nothing currently. May not need this method.
11150	Read the phytoplankton absorption file from a csv formatted file.
11151	Scale the spectra by multiplying by linear scaling factor
11152	Read the pure water absorption from a csv formatted file.
11153	Read the pure water scattering from a csv formatted file.
11154	Generic IOP reader that interpolates the iop to the common wavelengths defined in the constructor
11155	Generic iop file writer
11156	Calculates the total scattering from back-scattering
11157	Calculates the total absorption from water, phytoplankton and CDOM
11158	Calculates the total attenuation from the total absorption and total scattering
11159	Meta method that calls all of the build methods in the correct order
11160	Takes lists for parameters and saves them as class properties
11161	Loads a text file to a python dictionary using '=' as the delimiter
11162	Convert a comma-separated string representation into a list of floats.
11163	Reads a PlanarRad generated report file and parses its contents into a Python dictionary, extracting various data tables and parameters specified in the file.
11164	Takes a list of signals and sets a handler for them.
11165	Pseudo handler placeholder while signal is being processed
11166	Default handler for signal processing with specific actions for different signal types.
11167	Pause execution for a specified number of seconds or until a resume signal is received, then execute a callback function and return whether the timer expired.
11168	Run all abort tasks, then all exit tasks, then exit with error return status
11169	Run all status tasks, then run all tasks in the resume queue
11170	Tries to remove a registered event without triggering it.
11171	Fetch time series data from OpenTSDB.
11172	Fetch and sort time series data from OpenTSDB.
11173	Collects and returns a list of values from the given iterable.
11174	Prints an item to the specified file or stdout.
11175	Prints each item from an iterable.
11176	Extract function signature, default arguments, keyword-only arguments, and variable argument flags from a function.
11177	Extract function signature from an existing partial instance.
11178	Calculate new argv and extra_argv values resulting from adding the specified positional and keyword arguments.
11179	Return True if the given filename is a META-INF file that should be ignored to prevent multiple signatures in XPI signing.
11180	Sort keys for xpi files
11181	Read one VLQ-encoded integer value from an input data stream.
11182	Read a table structure.
11183	Parse the user data header portion of the replay.
11184	Transform duration into a human-readable form.
11185	Print a summary of the game details.
11186	Get data that the user typed.
11187	Display data file and graphics when file is found in normal mode.
11188	Write batch file using GUI inputs.
11189	Separate data from file for plotting curves and organize them into appropriate arrays.
11190	Permit connection between slider and display_the_graphic function by binding parameters.
11191	Display information about curves by setting text for labels and results based on the specified curve index.
11192	Display an error message with warning image and red text when a wrong value is typed.
11193	Hide the error message when all values are correct.
11194	Execute planarRad using the batch file.
11195	Cancel the PlanarRad process if it is running in normal mode.
11196	quits PlanarRad, checking if it is running before quitting.
11197	Save the displayed figure as a PNG file in the Artists_saved directory with an incremented name to avoid overwriting previous figures.
11198	Open the log file of PlanarRad and display its contents in the log window.
11199	Open the documentation file in a web browser window.
11200	Perform all required actions at the beginning when running the GUI.
11201	Intercepts mouse right click and its position to show graphic context menu.
11202	Get mouse coordinates on the canvas and update graphic target.
11203	Update labels about mouse coordinates.
11204	Define the genesis signing lockset as a lockset with one vote by any validator.
11205	Sign this with a private key.
11206	Generate a hash of the object excluding signature fields.
11207	Check the validity and quorum status of this element.
11208	In the IOU fungible the supply is set by Issuer, who issue funds.
11209	Get the highest lock on height.
11210	Return the last block proposal node voted on.
11211	Return the highest valid lockset on height.
11212	Setup a timeout for waiting for a proposal.
11213	Called to inform about synced peers.
11214	Make private keys that support coloring, see utils.cstr
11215	Calculate the delay for packet transmission between sender and receiver, accounting for bandwidth and latency.
11216	deliver on edge of timeout_window
11217	Create an object which acts as a proxy for the contract on the chain.
11218	Returns the native contract class for the given address.
11219	Registers NativeContract classes.
11220	Returns True if unknown.
11221	Receives and processes remote transactions asynchronously.
11222	Decondition an image from the VGG16 model.
11223	Condition an image for use with the VGG16 model.
11224	Create a function for the response of a layer.
11225	Get symbolic output of a layer.
11226	Evaluate layer outputs for `x`
11227	Creates a new encryption key file with specified path and sets file permissions.
11228	Finish the load job and return the exit code, raising an exception if the exit code is non-zero.
11229	Load data from a file into a target table, handling various file formats and encoding options.
11230	Load a single row into the target table.
11231	Attempt release of target mload table.
11232	Return the names of the work tables used for loading.
11233	Monkey-patch compiler to allow for removal of default compiler flags.
11234	Attempts to find the Teradata install directory using platform-specific defaults.
11235	Retrieve the decrypted value of a key in a giraffez configuration file.
11236	Set a decrypted value by key in a giraffez configuration file.
11237	Display results in table format
11238	Execute commands using CLIv2.
11239	Retrieve a value from the configuration based on its key.
11240	Write a default configuration file structure to a file.
11241	Set the names of columns to be used when iterating through the list, retrieving names, etc.
11242	Writes export archive files in the Giraffez archive format.
11243	Sets the current encoder output to Python `str` and returns a row iterator.
11244	Convert string with optional k, M, G, T multiplier to float
11245	Convert string with gains of individual amplification elements to dict
11246	Convert string with SoapySDR device settings to dict
11247	Wrap text to terminal width with default indentation
11248	Returns detected SoapySDR devices
11249	Set center frequency and clear averaged PSD data
11250	Return freqs and averaged PSD for given center frequency
11251	Wait for all PSD threads to finish and return result
11252	Compute PSD from samples and update average for given center frequency.
11253	Read data from file-like object
11254	Write data to file-like object
11255	Submits a callable to be executed with the given arguments.
11256	Convert integration time to number of repeats
11257	Returns list of frequencies for frequency hopping
11258	Create buffer for reading samples
11259	Prepare samples buffer and start streaming samples from device
11260	Stop streaming samples from device and delete samples buffer
11261	Tune to specified center frequency and compute Power Spectral Density
11262	Sweep spectrum using frequency hopping
11263	Private helper method to set I2C address.
11264	Force running cmake to configure and build zql.
11265	Return a set of datetimes, after filtering the input datetimes based on the specified number of units before now, while keeping duplicates and future datetimes.
11266	Return a datetime with the same value as `dt`, to a resolution of days.
11267	Return a datetime with the same value as `dt`, to a resolution of weeks.
11268	Return a set of datetimes that should be kept, filtering by time periods.
11269	Return a set of datetimes that should be deleted, out of ``datetimes``.
11270	Return a set of dates that should be kept, out of ``dates``.
11271	Return a set of dates that should be deleted, out of the given dates.
11272	Returns an SPI control byte for the MCP23S17 slave device with specified read/write command.
11273	Returns the bit specified from the address.
11274	Writes the specified value to the given bit address.
11275	Returns the lowest bit number from a given bit pattern. Returns None if no bits are set.
11276	Waits for a port event and places it onto the event queue.
11277	Waits for events on the event queue and calls the registered functions.
11278	Bring the interrupt pin on the GPIO into Linux userspace.
11279	Set the interrupt edge on the userspace GPIO pin.
11280	Wait until a file exists.
11281	Registers a pin number and direction to a callback function.
11282	De-registers callback functions for specified pin number and direction.
11283	Enables GPIO interrupts.
11284	Sends bytes via the SPI bus.
11285	Re-implement the rendering logic for tabbed interface by processing tabs and their content, updating context with links and content, and rendering the final template with form data.
11286	Find tab fields listed as invalid
11287	Render the link for the tab-pane.
11288	Get package version from installed distribution or configuration file if not installed
11289	Pass template pack argument
11290	Check the status of the incoming response and raise exceptions for different error codes.
11291	Used by every other method, it makes a GET request with the given params.
11292	Requests direct download link for requested file.
11293	Makes a request to prepare for file upload.
11294	Uploads a file to a specified folder using the openload API.

The method first retrieves an upload link by calling `upload_link` with the provided parameters (folder_id, sha1, and httponly). It then opens the specified file in binary mode and sends a POST request to the obtained upload URL with the file as the payload.

The method returns a dictionary containing information about the uploaded file, including its content type, ID, name, SHA1 hash, size, and URL. The `upload_link` method is called internally, so there's no need to call it explicitly.

Note:
- If `folder_id` is not provided, the file will be uploaded to the "Home" folder.
- If a SHA1 hash is provided, the uploaded file's hash must match it or the upload will fail.
- The method handles the entire upload process including getting the upload URL and making the POST request.

Args:
    file_path (str): Full path of the file to be uploaded
    folder_id (str, optional): Folder-ID to upload to
    sha1 (str, optional): Expected SHA1 hash to verify upload
    httponly (bool, optional): If True, use only HTTP upload links

Returns:
    dict: Dictionary containing uploaded file information including content_type, id, name, sha1, size, and url
```
11295	Used to make a remote file upload to openload.co
11296	Checks a remote file upload to status.
11297	Request a list of files and folders in specified folder.
11298	Shows running file conversions by folder.
11299	Calculate the relative humidity using the weatherwise.org formula based on temperature and dew point.
11300	Calculate the dewpoint in degrees F from temperature and humidity.
11301	Perform HTTP session to transmit defined weather values.
11302	Return CRC calc value from raw serial data.
11303	Perform CRC check on raw serial data, return true if valid.
11304	Given a packed storm date field, unpack and return 'YYYY-MM-DD' string.
11305	Return True if weather station returns Rev.B archives.
11306	Issue wakeup command to device to take out of standby mode.
11307	Write a single command to device and wait for ACK response.
11308	Issue a command to read the archive records after a known time stamp.
11309	Returns a dictionary of fields from the newest archive record in the device.
11310	Read and parse data from console, then store parsed fields in the fields variable.
11311	Main execution loop that queries weather data and posts it to an online service.
11312	Setup system logging to desired verbosity.
11313	Use values in opts data to generate instances of publication services.
11314	Return gust data if above threshold and within reporting window period.
11315	Set weather data for publishing to a server, with parameters for pressure, dewpoint, humidity, temperature, rain, wind speed and direction, clouds, and weather conditions.
11316	Store keyword args to be written to output file.
11317	Write output file.
11318	Helper decorator for transitioning to user-only requirements that passes the current request context internally to the requirement.
11319	Initializes the Flask-Allows object against the provided application.
11320	Checks that the provided or current identity meets each requirement passed to this method.
11321	Binds an override to the current context, optionally combining it with the parent override.
11322	Pops the latest override context.
11323	Allows temporarily pushing an override context, yields the new context into the following block.
11324	Binds an additional to the current context, optionally using parent additionals.
11325	Pops the latest additional context.
11326	Allows temporarily pushing an additional context, yields the new context into the following block.
11327	Append a number to duplicate field names to make them unique.
11328	Generates the string to be shown as updates after the execution of a Cypher query
11329	Generates a dictionary with safe keys and values to pass onto Neo4j
11330	Execute a Cypher query and return results in various formats based on configuration options.
11331	Returns a Pandas DataFrame instance built from the result set.
11332	Returns a NetworkX multi-graph instance built from the result set.
11333	Generates a pylab pie chart from the result set.
11334	Generates a pylab plot from the result set.
11335	Generate a pylab bar plot from the result set.
11336	Generates results in comma-separated form. Write to ``filename`` if given. Any other parameter will be passed on to ``csv.writer``.
11337	Re-implementation of the permission_required decorator, honors settings.
11338	Adds ``is_rendered`` to the context and the widget's context data.
11339	Returns the widgets sorted by position.
11340	Returns all widgets that need an update.
11341	Register the given widget class, ensuring it inherits from DashboardWidgetBase and is not already registered.
11342	Unregisters the given widget.
11343	Gets or creates the last update object for this widget.
11344	Returns the setting for this widget from the database.
11345	Saves the setting value into the database.
11346	Checks if an update is needed by comparing the time since last update with the update interval.
11347	Create a spark bolt array from a local array.
11348	Create a spark bolt array of ones.
11349	Join two bolt arrays together, at least one of which is in spark.
11350	Check that arguments are consistent with spark array construction.
11351	Format target axes given an array shape
11352	Wrap an existing numpy constructor in a parallelized construction
11353	Align local bolt array so that axes for iteration are in the keys.
11354	Converts a BoltArrayLocal into a BoltArraySpark.
11355	Converts a BoltArrayLocal into an RDD.
11356	Make an intermediate RDD where all records are combined into a list of keys and larger ndarray along a new 0th dimension.
11357	Apply a function on each subarray.
11358	Split values of distributed array into chunks.
11359	Apply an array -> array function on each subarray.
11360	Apply a generic array -> object function to each subarray, returning a BoltArraySpark with object dtype where blocked dimensions are replaced with block ID indices.
11361	Identify a plan for chunking values along each dimension.
11362	Remove the padding from chunks.
11363	Obtain number of chunks for the given dimensions and chunk sizes.
11364	Obtain slices for the given dimensions, padding, and chunks.
11365	Obtain a binary mask by setting a subset of entries to true.
11366	Repartition the underlying RDD to the specified number of partitions.
11367	Aggregates records of a distributed array into a StackedArray object for improved vectorized operation performance.
11368	Align spark bolt array so that axes for iteration are in the keys.
11369	Return the first element of an array.
11370	Compute a statistic over an axis.
11371	Return the mean of the array over the given axis.
11372	Return the variance of the array over the given axis.
11373	Return the standard deviation of the array over the given axis.
11374	Return the sum of the array over the given axis.
11375	Return the maximum of the array over the given axis.
11376	Return the minimum of the array over the given axis.
11377	Chunks records of a distributed array.
11378	Swap axes from keys to values.
11379	Return an array with the axes transposed.
11380	Return the array with two axes interchanged.
11381	Return an array with the same data but a new shape.
11382	Check if the requested reshape can be broken into independent reshapes on the keys and values. If it can, returns the index in the new shape separating keys from values, otherwise returns -1.
11383	Remove one or more single-dimensional axes from the array.
11384	Cast the array to a specified type.
11385	Clip values above and below.
11386	Returns the contents as a local array.
11387	Coerce singletons and lists and ndarrays to tuples.
11388	Coerce a list of arguments to a tuple.
11389	Checks to see if a list of axes are contained within an array shape.
11390	Test that a and b are close and match in shape.
11391	Flatten lists of indices and ensure bounded by a known dim.
11392	Force a slice to have defined start, stop, and step from a known dimension.
11393	Check to see if a proposed tuple of axes is a valid permutation of an old set of axes.
11394	Check if a proposed tuple of axes is a valid reshaping of the old axes by ensuring they can be factored.
11395	Rebuilds an original array from nested lists of ndarrays by recursively concatenating chunks along specified axes.
11396	Expand dimensions by iteratively appending empty axes.
11397	Alternate version of Spark's zipWithIndex that eagerly returns count.
11398	Decorator to append routed docstrings
11399	Use arguments to route constructor.
11400	Reshape just the keys of a BoltArraySpark, returning a new BoltArraySpark.
11401	Transpose just the keys of a BoltArraySpark, returning a new BoltArraySpark.
11402	Reshape just the values of a BoltArraySpark, returning a new BoltArraySpark.
11403	Transpose just the values of a BoltArraySpark, returning a new BoltArraySpark.
11404	Create a local bolt array of ones.
11405	Create a local bolt array of zeros.
11406	Join a sequence of arrays together.
11407	Computes the log-likelihood for a given data set, xmin value, and alpha parameter using Equation B.8 in Clauset.
11408	Return the most likely alpha for the data given an xmin.
11409	Calculate the Maximum Likelihood Estimator of the "scaling parameter" alpha in the discrete case.
11410	Use the maximum likelihood to determine the most likely value of alpha.
11411	Use maximum likelihood to determine the most likely value of alpha.
11412	Plots the power-law-predicted value on the Y-axis against the real values along the X-axis to diagnose fit quality.
11413	Use the maximum likelihood estimator for a lognormal distribution to produce the best-fit lognormal parameters.
11414	Sanitizes HTML by removing unallowed tags and attributes.
11415	Configure Yandex Metrika analytics counter.
11416	Generates a list of tags identifying those previously selected.
11417	Calculate md5 fingerprint.
11418	Calculate sha256 fingerprint.
11419	Calculates sha512 fingerprint.
11420	Calculate two's complement.
11421	Decode base64 coded part of the key.
11422	Parses SSH options string into a dictionary of option names and their values.
11423	Parses ssh-rsa public keys and validates their length.
11424	Parses ssh-dsa public keys and validates their parameters.
11425	Parses ecdsa-sha public keys.
11426	Parses ed25519 keys by validating their length and checking that the verifying key is positive.
11427	Validates SSH public key and populates key type, bits, and raw public key data fields.
11428	Performs a step to establish the context as an initiator.
11429	Performs a step to establish the context as an acceptor.
11430	The set of mechanisms supported by the credential.
11431	Stores this credential into a credential store.
11432	Imports and runs setup function with given properties.
11433	Imports and returns a setup function.
11434	Returns a file handle which is used to record audio
11435	Returns HTML5 Boilerplate CSS file.
11436	Returns Normalize CSS file included in HTML5 Boilerplate.
11437	Returns Font Awesome CSS file, using full file in debug mode or minified file otherwise.
11438	Returns Modernizr JavaScript file according to version number, using either full or minified version based on TEMPLATE_DEBUG setting.
11439	Returns jQuery JavaScript file according to version number.
11440	Returns the jQuery UI plugin file according to version number, with debug and CDN fallback options.
11441	Returns the jQuery DataTables plugin file according to version number.
11442	Returns the jQuery DataTables CSS file according to version number.
11443	Returns the jQuery DataTables ThemeRoller CSS file according to version number.
11444	Returns the jQuery Dynamic Formset plugin file according to version number, using either the full or minified version based on TEMPLATE_DEBUG setting.
11445	Returns the jQuery ScrollTo plugin file according to version number, using either the full or minified version based on TEMPLATE_DEBUG setting.
11446	Returns the jQuery Smooth Scroll plugin file according to version number, using either the full or minified version based on TEMPLATE_DEBUG setting.
11447	Returns Twitter Bootstrap CSS file.
11448	Returns Google Analytics asynchronous snippet.
11449	Render CodeMirrorTextarea
11450	Generate auth tokens tied to user and specified purpose.
11451	Return specific time an auth_hash will expire.
11452	Return login token info for given user.
11453	Serialize user as per Meteor accounts serialization.
11454	De-serialize user profile fields into concrete model fields.
11455	Update user data.
11456	Consistent fail for authentication attempts to prevent information leakage.
11457	Resolve and validate auth token, returns user object.
11458	Check request, return False if using SSL or local connection.
11459	Retrieve username from user selector.
11460	Register a new user account.
11461	Login a user.
11462	Logout a user.
11463	Login either with resume token or password.
11464	Authenticate using credentials supplied in params.
11465	Login with existing resume token.
11466	Change password.
11467	Request password reset email.
11468	Reset password using a token received in email then logs user in.
11469	Recursively merge two dictionaries, with nested dictionaries being merged rather than replaced.
11470	Read encoded contents from specified path or return default.
11471	Return an Alea ID for the given object.
11472	Return Alea ID mapping for all given ids of specified model.
11473	Return an object ID for the given meteor_id.
11474	Return all object IDs for the given meteor_ids.
11475	Return an object for the given meteor_id.
11476	Set default value for AleaIdField.
11477	Unset default value for AleaIdField.
11478	Truncate tables.
11479	Use schema_editor to apply forward changes to the database.
11480	Use schema_editor to apply any reverse changes.
11481	Set command option defaults.
11482	Update command options.
11483	Perform build.
11484	Convert a UNIX-style path into platform specific directory spec.
11485	Seed internal state from supplied values.
11486	Return internal state, useful for testing.
11487	Return string of `length` elements chosen from `alphabet`.
11488	Decorator to mark a method as an API endpoint for later registration.
11489	Iterator over all API endpoint names and callbacks.
11490	Clear out cache for api_path_map.
11491	Debug print name and val.
11492	Validate arguments to be supplied to func.
11493	Handle new websocket connection.
11494	Handle closing of websocket connection.
11495	Process a message received from remote.
11496	Yield DDP messages from a raw WebSocket message.
11497	Process a single DDP message.
11498	Dispatch msg to appropriate recv_foo handler.
11499	DDP connect handler.
11500	DDP ping handler.
11501	DDP sub handler.
11502	DDP unsub handler.
11503	DDP method handler.
11504	Inform client that WebSocket service is available.
11505	Spawn greenlets for handling websockets and PostgreSQL calls.
11506	Main entry point for `dddp` command.
11507	Print formatted msg if verbosity set at 1 or above.
11508	Stop all green threads.
11509	Run DDP greenlets.
11510	Spawn sub tasks, wait for stop signal.
11511	Poll DB socket and process async tasks.
11512	Patch threading and psycopg2 modules for green threads.
11513	Generate a new ID, optionally using namespace of given `name`.
11514	Import all `ddp` submodules from `settings.INSTALLED_APPS`.
11515	Return an error dict for self.args and kwargs.
11516	Get attribute, creating if required using specified factory.
11517	Emit a formatted log record via DDP.
11518	Middleware which selects a renderer for a given request then renders a handler's data to a Response.
11519	Context manager which yields a function for adding multiple routes from a given module.
11520	Add routes by an resource instance's methods.
11521	Run an `aiohttp.web.Application` using gunicorn.
11522	Sends a push notification to this device via GCM
11523	Sends an APNS notification to one or more registration IDs.
11524	Queries the APNS server for id's that are no longer active since the last fetch
11525	Send a single GCM notification using a standalone method.
11526	Send bulk GCM notifications using a standalone method.
11527	Sends a JSON GCM message and handles response errors.
11528	Sends a GCM message with the given content type.
11529	Returns the instance of the given module location.
11530	Fast forward selection algorithm for scenario reduction.
11531	Shorthand for creating a Giphy api wrapper and calling the search method.
11532	Shorthand for creating a Giphy api wrapper and calling the translate method.
11533	Shorthand for creating a Giphy api wrapper and calling the trending method.
11534	Shorthand for creating a Giphy api wrapper and calling the gif method.
11535	Shorthand for creating a Giphy api wrapper and calling the screensaver method.
11536	Upload a file to Giphy with the given tags and optional parameters.
11537	Does a normalization of sorts on image type data so that values that should be integers are converted from strings
11538	Wrapper for making an API request from Giphy.
11539	Retrieve a single image that represents a translation of a term or phrase into an animated gif.
11540	Retrieve GIFs currently trending online, limited by rating and count.
11541	Retrieves a specific gif from giphy based on unique id.
11542	Uploads a gif from the filesystem to Giphy.
11543	Prepares the extension element for access control and returns a tuple of extension elements.
11544	Authenticates the user and sets the GData Auth token.
11545	Initiate a browser-based video upload by creating video entry and metadata.
11546	Check the video upload status and return whether the video is available or return upload state and detailed message.
11547	Updates the video with the given parameters, requiring authentication and returning the updated video entry on success.
11548	Deletes the video.

The method requires authentication, fetches a video entry by its ID, and attempts to delete it from YouTube. It raises an OperationError if the deletion fails and returns True upon successful deletion.
11549	Controls the availability of the video and returns a JSON response indicating whether the video is available or not.
11550	Displays a video in an embed player.
11551	List videos of a user, showing currently logged in user if no username specified.
11552	Direct upload method that uploads video to server and then to YouTube, with optional JSON response.
11553	Displays an upload form and creates upload url and token from youtube api for video upload.
11554	Handle YouTube upload results and redirect accordingly.
11555	Remove the video from youtube and from db, requires POST request.
11556	Connects to Youtube Api and retrieves the video entry object
11557	Synchronize the video information on db with the video on Youtube.
11558	Deletes the video from youtube.
11559	Generic method for a resource's Update Metadata endpoint.
11560	Generic method for a resource's Update Metadata Field endpoint.
11561	Generic method for a resource's Update endpoint.
11562	Load a list of trees from a Newick formatted string.
11563	Serialize a list of trees in Newick format.
11564	Load a list of trees from an open Newick formatted file.
11565	Load a list of trees from a Newick formatted file.
11566	Parse a Newick formatted string into a `Node` object.
11567	Create a new `Node` object.
11568	The representation of the Node in Newick format.
11569	Return a unicode string representing a tree in ASCII art fashion.
11570	Gets the specified node by name.
11571	Remove specified nodes from the tree structure, either including or excluding the listed nodes based on the inverse parameter.
11572	Insert additional nodes with length=0 into the subtree to make all non-leaf nodes have exactly 2 descendants, creating a fully resolved binary tree.
11573	Set the name of all non-leaf nodes in the subtree to None.
11574	Set the name of all leaf nodes in the subtree to None.
11575	Protect methods with HTTP authentication.
11576	Clear all comments in json_str.
11577	Raises an exception if the given app setting is not defined.
11578	Returns the value of the argument with the given name.
11579	Returns a list of the arguments with the given name.
11580	Obsolete - catches exceptions from the wrapped function.

This function is unnecessary since Tornado 1.1.
11581	Gets the value of the cookie with the given name, else default.
11582	Deletes the cookie with the given name.
11583	Returns the authentication URL for this service.
11584	Gets the OAuth authorized user and access token on callback.
11585	Returns the OAuth parameters as a dict for the given request.
11586	Authenticates and authorizes for the given Google resource.
11587	Makes a Facebook API REST request.
11588	Handles the login for the Facebook user, returning a user object.
11589	Concatenate url and argument dictionary regardless of whether url has existing query parameters.
11590	Parse a Content-type like header and return the main content-type and a dictionary of options.
11591	Adds a new value for the given key.
11592	Returns all values for the given header as a list.
11593	Updates the dictionary with a single header line.
11594	Returns a dictionary from HTTP header text.
11595	Converts a name to Http-Header-Case.
11596	Converts a string argument to a byte string.

If the argument is already a byte string or None, it is returned unchanged.
Otherwise it must be a unicode string and is encoded as utf8.
11597	Converts a string argument to a unicode string.

If the argument is already a unicode string or None, it is returned unchanged. Otherwise it must be a byte string and is decoded as utf8.
11598	Converts a string argument to a subclass of basestring.
11599	Walks a simple data structure, converting byte strings to unicode.

Supports lists, tuples, and dictionaries.
11600	Make sure that other installed plugins don't affect the same keyword argument and check if metadata is available.
11601	Generator over all subclasses of a given class, in depth-first order.
11602	Based on the matching strategy and the origin and optionally the requested method a tuple of policyname and origin to pass back is returned.
11603	Return a vector with the occupancy of each grid point for given array of points.
11604	Write a GRO file.
11605	Write a PDB file.
11606	Determine molecule numbers for given total, absolute and relative numbers.
11607	Adapt the size of the box to accommodate the lipids.
11608	Write a basic TOP file.
11609	Return a stream for a given resource file in the module.
11610	Send a message to a particular user.
11611	Send a message to a group of users.
11612	Fetch messages for given user. Returns None if no such message exists.
11613	Check for messages for this user and, if it exists, call the messages API with it.
11614	Checks the config.json file for default settings and auth values.
11615	Verifies the profile name exists in the config.json file.
11616	Update msg attributes with values from profile configuration if attributes are None.
11617	Retrieve auth from profile configuration and set in msg.auth attr.
11618	Updates the profile's config entry with values from message attributes.
11619	Updates the profile's auth entry with values set by the user.
11620	Create a profile for the given message type.
11621	Display the required items needed to configure a profile for the given message type.
11622	Get the required 'settings' from the user and return as a dict.
11623	Get the required 'auth' from the user and return as a dict.
11624	Create the profile entry.
11625	Write the settings into the data portion of the cfg.
11626	Write the settings into the auth portion of the cfg.
11627	Add attachments to the message.
11628	Send the message via HTTP POST, default is json-encoded.
11629	Constructs and sends a message, either synchronously or asynchronously based on the send_async parameter.
11630	Factory function to return the specified message instance.
11631	A credential property factory for each message class that will set private attributes and return obfuscated credentials when requested.
11632	A property factory that validates user input to ensure critical parameters are of a specific type.
11633	Base function to validate input, dispatched via message type.
11634	Twilio input validator function.
11635	SlackPost input validator function.
11636	WhatsApp input validator function.
11637	Creates a running coroutine to receive message instances and send them in a futures executor.
11638	Add a message to the futures executor.
11639	Reads message body if specified via filepath.
11640	Gets rid of args with value of None, as well as select keys.
11641	Do some final preprocessing and send the message.
11642	Lookup chat_id of username if chat_id is unknown via API call.
11643	Send content via HTTP POST request.
11644	Start sending the message and attachments.
11645	Return an SMTP servername guess from outgoing email address.
11646	Put the parts of the email together.
11647	Add email header info.
11648	Add body content of email.
11649	Add required attachments.
11650	Start session with email server.
11651	Get an SMTP session with SSL.
11652	Get an SMTP session with TLS.
11653	Send the message by constructing it, creating a session with email servers, sending the message, and stopping the session.
11654	Save metadata tags.
11655	Releases renderer resources associated with this image.
11656	Get an image that refers to the given rectangle within this image.
11657	Validate keys and values for Vorbis metadata.
11658	Clear all keys from the comment.
11659	Return a string representation of the data.
11660	Read the chunks data
11661	Removes the chunk from the file
11662	Update the size of the chunk
11663	Insert a new chunk at the end of the IFF file.
11664	Save ID3v2 data to the AIFF file
11665	Completely removes the ID3 chunk from the AIFF file
11666	Parse a C source file and add its blocks to the processor's list.
11667	Process a normal line and check whether it is the start of a new block.
11668	Add the current accumulated lines and create a new block.
11669	Draw a string with the given font.
11670	Parses a standard ISO 8601 time string and returns a timezone aware UTC datetime.datetime instance.
11671	Convert a series of simple words into some HTML text.
11672	Analyze a simple word to detect cross-references and styling.
11673	Convert words of a paragraph into tagged HTML text, handle xrefs and format quotations and non-breakable spaces.
11674	Convert a code sequence to HTML.
11675	Convert a field's content into valid HTML.
11676	Save the metadata to the given filename.
11677	Update all parent atoms with the new size.
11678	Start running the game by creating and showing the window, then entering the main event loop until the game exits.
11679	Register a mapping for controllers with the given vendor and product IDs.
11680	Find a mapping that can apply to the given controller. Returns None if unsuccessful.
11681	Register a text key for MP4 freeform atom mapping.
11682	Sign a string using HMAC with SHA256 and return the Base64 encoded result.
11683	Determine the headers to send along with the request for Route53 API calls.
11684	All outbound requests go through this method. It defers to the transport's various HTTP method-specific methods.
11685	Sends a GET request to the Route53 endpoint and returns the response body.
11686	Sends a POST request to the Route53 endpoint and returns the response body.
11687	Sends a DELETE request to the Route53 endpoint and returns the response body.
11688	APEv2 tag value factory.

```
11689	Uses the HTTP transport to query the Route53 API and returns an lxml Element root.
11690	Loop through paginated API call results and yield all records.
11691	List all hosted zones associated with this connection's account.
11692	Creates and returns a new hosted zone.
11693	Lists a hosted zone's resource record sets by Zone ID.
11694	Given a ChangeSet, POST it to the Route53 API.
11695	Draw an image on the canvas.

The image is drawn with its top-left corner at ``(x1, y1)`` and bottom-right corner at ``(x2, y2)``. If ``x2`` and ``y2`` are omitted, the image is rendered at its native resolution. The image can be scaled or flipped by providing alternative values for ``x2`` and ``y2``.
11696	Draw a rectangular region of an image.
11697	Calculate the total frame size including header and packet data.
11698	Replace old_pages with new_pages within fileobj.
11699	Find the last page of the stream 'serial'.
11700	Set current section during parsing.
11701	Add a new markup section.
11702	Process a block content and return a list of DocMarkup objects corresponding to it.
11703	Return the DocMarkup corresponding to a given tag in a block.
11704	Forms an XML string for creating a new hosted zone in Route53.
11705	Lock a file object safely.

The function attempts to acquire an exclusive lock on a file object using `fcntl.lockf`. If the platform doesn't support `fcntl` or filesystem locks, it returns `False` without raising an exception. If an `IOError` occurs during locking (such as due to permission issues or lock table exhaustion), it also returns `False`. The function blocks until the lock is acquired or fails. It raises exceptions only in extreme cases like invalid file descriptors or full lock tables. The return value indicates whether the lock was successfully acquired.
11706	Insert size bytes of empty space starting at offset in a file.
11707	Delete size bytes of empty space starting at offset in a file object.
11708	Convert a basestring to a valid UTF-8 str.
11709	Adds a change to this change set.
11710	Parses a ChangeInfo tag and returns its dictionary representation containing status and submission information.
11711	Calculates the width of the given string in this font.
11712	Determines whether this record set has been modified since the last retrieval or save.
11713	Deletes this record set.
11714	Saves any changes to this record set by deleting the existing record and creating a new one within a single change set.
11715	Parse an ID3v1 tag, returning a list of ID3v2.4 frames.
11716	Return an ID3v1.1 tag string from a dict of ID3v2.4 frames.
11717	Read a certain number of bytes from the source file.
11718	Delete all tags of a given kind.
11719	Deprecated; use the add method.
11720	Updates done by both v23 and v24 update
11721	Convert older tags into an ID3v2.4 tag.
11722	Release all resources associated with the sound.
11723	Play the sound as a one-shot.
11724	Set the loop points within the sound.
11725	Return the list of glyph names and their unicode values.
11726	Filter `alist` by taking out all glyph names that are in `filter`.
11727	Dump a given encoding to file with formatted output.
11728	Dumps a given encoding array to the specified write function with formatted output.
11729	Main program body that generates PostScript glyph names header file with glyph lists, encodings, and Adobe Glyph List table.
11730	Check that a given file exists.
11731	Builds a list of input files from command-line arguments.
11732	Parse a HostedZone XML element and return a HostedZone object.
11733	Parse a DelegationSet tag and populate a HostedZone instance with nameserver information.
11734	Render metadata block as a byte string.
11735	Consolidate FLAC padding metadata blocks.
11736	Remove Vorbis comments from a file.
11737	Save metadata blocks to a file.
11738	Parse an Alias tag beneath a ResourceRecordSet and return its hosted zone ID and DNS name.
11739	Parse resource record values from XML elements and return a list of record strings.
11740	Parse a ResourceRecordSet XML element and return the corresponding ResourceRecordSet object.
11741	Deletes this hosted zone, with optional force parameter to remove all associated record sets before deletion.
11742	Convenience method for creating ResourceRecordSets.
11743	Creates and returns an A record attached to this hosted zone.
11744	Creates an AAAA record attached to this hosted zone.
11745	Creates a CNAME record attached to this hosted zone.
11746	Creates a MX record attached to this hosted zone.
11747	Creates a NS record attached to this hosted zone.
11748	Creates a PTR record attached to this hosted zone.
11749	Creates an SPF record attached to this hosted zone.
11750	Creates a SRV record attached to this hosted zone.
11751	Creates a TXT record attached to this hosted zone.
11752	Register a user-defined text frame key.
11753	In the case of deletions, we pull the change values for the XML request from the ResourceRecordSet._initial_vals dict, since we want the original values. For creations, we pull from the attributes on ResourceRecordSet.
11754	Creates an XML element for the change.
11755	Forms an XML string to change resource record sets in Route53.
11756	Initiate log file.
11757	Gets an item by its alias.
11758	Freezes a dictionary into a tuple of key-value pairs, making it hashable.
11759	Joins the map structure into HTML attributes.
11760	Initializes an app to work with this extension.
11761	Calls the initializers of all bound navigation bars.
11762	Binds a navigation bar into this extension instance.
11763	The arguments which will be passed to ``url_for``.
11764	The final url of this navigation item.
11765	Check if current request has the same endpoint as the item.
11766	Does basic Metric option validation.
11767	Fetches a statistics based on the given class name.
11768	Calculates all of the metrics associated with the registered gadgets.
11769	Auto-discover INSTALLED_APPS gadgets.py modules and fail silently when not present. This forces an import on them to register any gadgets they may want.
11770	Returns a CSV dump of all of the specified metric's counts and cumulative counts.
11771	Command handler for the "metrics" command.
11772	Returns the GET array's contents for the specified variable.
11773	Tries to extract a boolean variable from the specified request.
11774	Gets the next colour in the Geckoboard colour list.
11775	Returns the default GET parameters for a particular Geckoboard view request.
11776	Returns a number widget for the specified metric's cumulative total.
11777	Searches the GET variables for metric UIDs and displays them in a RAG widget.
11778	Returns the data for a line chart for the specified metric.
11779	Returns a Geck-o-Meter control for the specified metric.
11780	Returns a funnel chart for the metrics specified in the GET variables.
11781	Returns all of the active statistics for the gadgets currently registered.
11782	Registers a gadget object.
11783	Get the context for this view.
11784	Print error and stop command
11785	Validate data by specific validictory configuration
11786	Get a multi-line string as input
11787	Get a list of strings as input
11788	Get an output file name as input
11789	Gets schedule information for a team-season.
11790	Returns the team ID of the winning team. Returns None if a tie.
11791	Returns the year ID of the season in which this game took place.
11792	Returns a DataFrame with starters information from PFR, including player_id, playerName, position, team, home status, and offense status.
11793	Return the playing surface on which the game was played.
11794	Gets information relating to the opening coin toss.
11795	Returns a dictionary of weather-related info.
11796	Gets a dictionary of ref positions and the ref IDs of the refs for that game.
11797	Returns a list of BoxScore IDs for every game in the season.
11798	Returns a DataFrame containing standings information.
11799	Helper function for stats tables on season pages. Returns a DataFrame.
11800	Returns a DataFrame containing information about ROY voting.
11801	Returns the linescore for the game as a DataFrame.
11802	Returns the year ID of the season in which this game took place.
11803	Returns a DataFrame of player stats (basic or advanced) from the game with cleaned data and additional features.
11804	Decorator that switches to given directory before executing function, and then returning to original directory.
11805	Caches the HTML returned by the specified function `func` in the user cache directory determined by the appdirs package.
11806	Returns a unique identifier for a class instantiation.
11807	A decorator for memoizing functions.
11808	Returns the age of the player on a given date.
11809	Gets a stats table from the player page; helper function that does the work for per-game, per-100-poss, etc. stats.
11810	Returns a DataFrame of per-game box score stats.
11811	Returns a DataFrame of total box score statistics by season.
11812	Returns a DataFrame of per-36-minutes stats.
11813	Returns a DataFrame of per-100-possession stats.
11814	Returns a DataFrame of advanced stats.
11815	Returns a DataFrame of shooting stats.
11816	Returns a DataFrame of play-by-play stats.
11817	Returns a table of a player's basic game-by-game stats for a season.
11818	Memory Session Object Demo: retrieves and deletes session value "sv" if exists, otherwise reports session data not found.
11819	Expands the details column of the given dataframe and returns the resulting DataFrame.
11820	Function that adds 'team' and 'opp' columns to the features by iterating through the rows in order.
11821	Adds extra convenience features based on teams with and without possession.
11822	Gets the initial win probability of a game given its Vegas line.
11823	Gets yearly passing stats for the player.
11824	Template for simple award functions that simply list years, such as pro bowls and first-team all pro.
11825	Returns the real name of the franchise given the team ID.
11826	Gets list of BoxScore objects corresponding to the box scores from that year.
11827	Returns a PyQuery object containing info from the meta div at the top of the team year page with the given keyword.
11828	Returns head coach data by game.
11829	Returns a DataFrame with schedule information for the given year.
11830	Returns the coach ID for the team's OC in a given year.
11831	Returns the coach ID for the team's DC in a given year.
11832	Returns the ID for the stadium in which the team played in a given year.
11833	Returns the name of the offensive scheme the team ran in the given year.
11834	Returns the name of the defensive alignment the team ran in the given year.
11835	Returns a DataFrame of offensive team splits for a season.
11836	Gets the HTML for the given URL using a GET request.
11837	Flattens relative URLs within text of a table cell to IDs and returns the result.
11838	Converts a relative URL to a unique ID.
11839	Converts kwargs given to PSF to a querystring.
11840	Main function for the processes that read from the HDF5 file.
11841	Allows direct access to the buffer element. Blocks until there is room to write into the buffer.
11842	Allows direct access to the buffer element. Blocks until there is data that can be read.
11843	Close the queue, signalling that no more data can be put into the queue.
11844	Get a block of data from the node at path.
11845	Get the remainder elements that will not be read in direct queue access cyclic=False mode.
11846	Get a queue that allows direct access to the internal buffer for reading HDF5 dataset chunks in parallel.
11847	Get a generator that allows convenient access to the streamed data.
11848	Parse a stream into protobuf message objects.
11849	Write to a stream.
11850	Read a varint from file, parse it, and return the decoded integer.
11851	A generator yielding all protobuf object data in the file. It is the main parser of the stream encoding.
11852	Close the stream.
11853	Write a group of one or more protobuf objects to the file.
11854	Write down buffer to the file.
11855	Returns joined game directory path relative to Steamapps
11856	Works around the problem of emulating user interactions with text inputs by emulating key-down and key-up actions for text input testing.
11857	Generate 2D fake fluorescence movie with specified parameters.
11858	Evaluates traits and returns a list containing the description of traits which are not true.
11859	Waits until condition is True or returns a non-None value, raising TimeoutException if condition is not met within timeout.
11860	Waits until all traits are present, raising a TimeoutException if any trait is still not present after timeout.
11861	Set a list of exceptions that should be ignored inside the wait loop.
11862	Execute Main.Volume and return the volume level as an integer.
11863	Execute Main.Source and return an integer result.
11864	Send a command string to the amplifier.
11865	Return the status of the device.
11866	Power the device off.
11867	Power the device on.
11868	Set volume level of the device.
11869	Select a source from the list of sources.
11870	Deobfuscates the URL and returns HttpResponse from source view.
11871	Generates crc32 checksum and keeps it within int range.
11872	Template filter that obfuscates text (supposedly a URL) with optional SEO juice.
11873	Print list of songs that can be downloaded when a song is not found.
11874	Return all hyper links found in the mr-jatt page for download.
11875	Returns true if user entered artist or movie name
11876	Parse the URL to find song download links, returning either a single link for direct download or a list of available songs based on the flag parameter.
11877	Return the Google URL to be searched based on song name and website.
11878	Parse Google HTML response and return the first URL.
11879	Parse song information from a website and return the download URL.
11880	Download the HTML page specified by URL and return the HTML response.
11881	Download a file from a URL using requests module with progress tracking.
11882	Download a file from a URL using wget utility.
11883	Lookup AQI database for station codes in a given city.
11884	Lookup observations by geo coordinates.
11885	Decode AQICN observation response JSON into python object.
11886	Request station data for a specific station identified by code.
11887	The list of logical paths which are used to search for an asset.
11888	The list of compilers used to build asset.
11889	MIME type of the asset.
11890	Get the implicit MIME type of the asset by its compilers.
11891	Implicit format extension on the asset by its compilers.
11892	Register passed `processor` for passed `mimetype`.
11893	Remove passed `processor` for passed `mimetype` from the registry.
11894	The list of search paths built from registered finders.
11895	Register default compilers, preprocessors and MIME types.
11896	Force loading of IDA's Qt bindings or default Qt installation.
11897	Get the netnode used to store settings metadata in the current IDB.
11898	Add the given plugin name to the list of plugin names registered in the current IDB.
11899	Remove the given plugin name from the list of plugin names registered in the current IDB.
11900	Import settings from the given file system path to given settings instance.
11901	Export the given settings instance to the given file system path.
11902	Fetch the IDASettings instance for the current plugin with directory scope.
11903	Enumerate the keys found at any scope for the current plugin.
11904	Returns the response that should be used for any given exception.
11905	Returns a given table for the given user.
11906	Returns a list of tables for the given user.
11907	Fetch packages and summary from Crates.io
11908	Extracts the identifier from an item depending on its type.
11909	Extracts the update time from an item and converts it to UNIX timestamp format.
11910	Get crate team owner
11911	Get crate user owners
11912	Get crate versions data
11913	Get crate version downloads
11914	Get crate data
11915	Get Crates.io summary
11916	Get crates in alphabetical order
11917	Get a crate by its ID.
11918	Get crate attribute
11919	Return the items from Crates.io API using pagination
11920	Fetch questions from the Kitsune url.
11921	Fetch questions from the Kitsune url.
11922	Retrieve questions from older to newer updated starting offset.
11923	Fetch items from the ReMo url.
11924	Extracts the update time from a ReMo item and converts it to a UNIX timestamp.
11925	Extracts the category from a ReMo item.
11926	Retrieve all items for a given category using pagination.
11927	The buffer list this instance operates on.
11928	IO priority for this instance.
11929	Cancels all pending IO blocks, waits for non-cancellable IO blocks to finish, and de-initializes the AIO context.
11930	Submits transfers and returns the number of successfully submitted blocks.
11931	Cancel an IO block and return its event data, or None if kernel returns EINPROGRESS.
11932	Cancel all submitted IO blocks and return the list of values returned by individual cancellations.
11933	Returns a list of event data from submitted IO blocks.
11934	Fetch events from the MozillaClub URL.
11935	Retrieve all cells from the spreadsheet.
11936	Parse the MozillaClub spreadsheet feed cells json.
11937	List of export formats.
11938	Load default permission factory.
11939	Create Invenio-Records-UI blueprint.
11940	Create Werkzeug URL rule for a specific endpoint.
11941	Display record view.
11942	Display default view.

Sends record_viewed signal and renders template.
11943	Record serialization view.

Serializes record with given format and renders record export template.
11944	Send a Timer metric calculating duration of execution of the provided callable.
11945	Close the socket to free system resources.
11946	Remove the client from the users of the socket and close it automatically if no clients remain.
11947	Increment a Counter metric
11948	Send a Timer metric with the specified duration in milliseconds
11949	Send a Timer metric calculating the duration from the start time.
11950	Send a Gauge metric with the specified value.
11951	Send a GaugeDelta metric to change a Gauge by the specified value.
11952	Send a Set metric with the specified unique value.
11953	Override parent by buffering the metric instead of sending now
11954	Return a batch client with same settings of the client
11955	Return a client with same settings of the batch client
11956	Send buffered metrics in batch requests
11957	Create a permission checker class that validates if a record has 'open' access.
11958	Return a TCP batch client with same settings of the TCP client
11959	Send buffered metrics in batch requests over TCP
11960	Return a TCPClient with same settings of the batch TCP client
11961	Shortcut for creating Users with specified permissions and groups.
11962	Tries to convert a Python object into an OpenMath object, handling various types including integers, floats, strings, functions, and custom wrappers, while raising exceptions for unknown object types.
11963	Converts a term into OpenMath using a converter or fallback method.
11964	Convert OpenMath object to Python
11965	Convert Python object to OpenMath.
11966	Register a conversion from Python to OpenMath.
11967	Register a conversion from OpenMath to Python.

This function supports two forms:
1. Three-argument form: Registers a conversion for a specific symbol in a content dictionary
2. Two-argument form: Overrides default conversions for basic OpenMath tags

The function handles conversion of OpenMath objects (OMSymbol, OMApplication) to Python objects using provided converter functions or returning specified Python objects directly.
11968	Initialize redis with app object.
11969	Return list of choices's keys
11970	Split model keyword arguments into model fields and nested field arguments.
11971	Register form field data function.

Could be used as decorator
11972	Lowest value generator.

Separated from __call__, because it seems that python
cache __call__ reference on module import
11973	Returns tuple with form data and files
11974	Sometimes return None if field is not required
11975	Selection from field.choices
11976	Return random value for DecimalField
11977	Return random value for EmailField
11978	Return random value for DateField
11979	Return random value for DateTimeField
11980	Return random value for FloatField
11981	Return random integer value for IntegerField within specified range.
11982	Return random value for TimeField
11983	Return random value for ChoiceField
11984	Return random value for MultipleChoiceField
11985	Return one of first ten items for field queryset
11986	Encodes an OpenMath element into a string.
11987	Deploy the app to PYPI.
11988	Deploy a version tag.
11989	Sometimes return None if field could be blank
11990	Evaluate an OpenMath symbol describing a global Python object.
11991	Apply the setstate protocol to initialize `inst` from `state`.
11992	Convert a list of OM objects into an OM object.
11993	Convert a tuple of OM objects into an OM object.
11994	Decodes a PackBit encoded data.
11995	Encodes data using PackBits encoding.
11996	Implementation that treats floats more like decimals.
11997	Format a given number with comma-separated thousands and custom precision/decimal places.
11998	Format a number into currency.
11999	Import a blosc array into a numpy array.
12000	Export a numpy array to a blosc array.
12001	Add a workspace entry in user config file.
12002	Remove workspace from config file.
12003	List all available workspaces.
12004	Get workspace infos from name. Return None if workspace doesn't exists.
12005	Return True if workspace contains repository name.
12006	Synchronise workspace's repositories.
12007	Clone a repository.
12008	Check if you have an old version of ndio and print a message if a newer version is available.
12009	Converts a boolean numpy array to a list of voxel coordinates.
12010	Converts a voxel list to an ndarray.
12011	Execute update subcommand.
12012	Print repository update.
12013	Set console handler with optional debug mode.
12014	Execute a command using subprocess and return the process object.
12015	Import a png file into a numpy array.
12016	Export a numpy array to a png file.
12017	Export a numpy array to a set of png files, with each Z-index 2D array as its own 2D file.
12018	Print workspace status.
12019	Print repository status.
12020	Gets the block-size for a given token at a given resolution.
12021	Accepts data in zyx and uploads it using blosc compression.
12022	Import a TIFF file into a numpy array.
12023	Export a numpy array to a TIFF file.
12024	Load a multipage tiff into a single variable in x,y,z format.
12025	Write config in configuration file.
12026	Clone repository from url.
12027	Get version from package resources.
12028	Mixing and matching positional args and keyword options.
12029	Same as mix_and_match, but using the @option decorator.
12030	Requests a list of next-available-IDs from the server.
12031	Merge two RAMON objects into one through a RESTful endpoint call.
12032	Kick off the propagate function on the remote server.
12033	Lists a set of projects related to a dataset.
12034	Returns info regarding a particular dataset.
12035	Lists datasets in resources, retrieving either all public datasets in cloud or user's public datasets based on the 'get_global_public' parameter.
12036	Parse show subcommand.
12037	Execute show subcommand.
12038	Show specific workspace.
12039	Show details for all workspaces.
12040	Get the base URL of the Remote.
12041	Guess the appropriate data type from file extension.
12042	Reads in a file from disk and returns a numpy.ndarray or Image object.
12043	Converts in_file to out_file, guessing datatype in the absence of in_fmt and out_fmt.
12044	Builds a graph using the graph-services endpoint.
12045	Compute invariants from a GraphML file using remote graph services.
12046	Convert a graph from one GraphFormat to another.
12047	Converts a RAMON object list to a JSON-style dictionary indexed by ID.
12048	Takes str or int, returns class type
12049	Delete a channel given its name, project name, and dataset name. Returns True if successful, False otherwise.
12050	Add a new dataset to the ingest.
12051	Generate ND json object.
12052	Generate the dataset dictionary
12053	Generate the project dictionary.
12054	Generate the project dictionary.
12055	Identify the image size using the data location and other parameters.
12056	Try to post data to the server.
12057	Find path for given workspace and/or repository.
12058	Get a list of public tokens available on this server.
12059	Return the project info for a given token.
12060	Insert new metadata into the OCP metadata database.
12061	Get a response object for a given url.
12062	Returns a post request object taking in a url, user token, and possible json information.
12063	Returns a delete request object taking in a url and user token.
12064	Import a HDF5 file into a numpy array.
12065	Export a numpy array to a HDF5 file.
12066	Adds a character matrix to DendroPy tree and infers gaps using Fitch's algorithm. Infer gaps in sequences at ancestral nodes.
12067	calls `map` to shift the recover execution to flat_map_nvim_io
12068	Install our gettext and ngettext functions into Jinja2's environment.
12069	This is the central unsafe function, using a lock and updating the state in `guard` in-place.
12070	Calculate a percentage.
12071	Get stats info.
12072	Get slabs info.
12073	Add admin global context, for compatibility with Django 1.7
12074	Return the status of all servers.
12075	Show the dashboard.
12076	Show server statistics.
12077	Show server slabs.
12078	Convert a byte value into a human-readable format.
12079	Find a config in children to fill in variables for other children.
12080	Add objects to the environment.
12081	Replace any config tokens in the file's path with values from the config.
12082	Get the path to the file relative to its parent.
12083	Read and return the contents of the file.
12084	Write data to the file.
12085	Configure the Python logging module for this file.
12086	Create the file.

If the file already exists an exception will be raised
12087	Replace any config tokens with values from the config.
12088	Return the path to this directory.
12089	Remove the directory.
12090	Prepare the Directory for use in an Environment.
12091	Clean up children and remove the directory.
12092	Find the path to something inside this directory.
12093	List the contents of the directory.
12094	Write to a file in the directory.
12095	Read a file from the directory.
12096	Add objects to the directory.
12097	Save the state to a file.
12098	Load a saved state file.
12099	Clean up the saved state.
12100	Loads plugins from the specified directory recursively, loading Python modules that implement subclasses of the Plugin class.
12101	Recursively merge values from a nested dictionary into another nested dictionary.
12102	Return a ConfigNode object representing a child node with the specified relative path.
12103	Returns a tuple of a reference to the last container in the path, and the last component in the key path.
12104	Get the value represented by this node.
12105	Update the configuration with new data and/or options.
12106	Load the config and defaults from files.
12107	Apply the config to a string.
12108	Build Twilio callback URL for confirming message delivery status.
12109	Called when socket is read-ready
12110	Called when socket is write-ready
12111	Send a message containing the RPC method call.
12112	Read from the network layer and processes all data read.
12113	Write data to the network layer using socket output.
12114	Prevents callbacks from calling into link methods that are not reentrant.
12115	Return a map containing the settle modes as provided by the remote, skipping default values.
12116	Assign addresses, properties, etc.
12117	Return the authorative source of the link.
12118	Return the authoritative target address of the link.
12119	Remote has closed the session used by this link.
12120	Create a new sender link.
12121	Create link from request for a sender.
12122	Create a new receiver link.
12123	Create link from request for a receiver.
12124	Link has been destroyed.
12125	Peer has closed its end of the session.
12126	Called when the Proton Engine generates an endpoint state change event.
12127	Modifies inline patterns.
12128	Peer has closed its end of the link.
12129	Protocol error occurred.
12130	Parse the hostname and port out of the server_address.
12131	Create a TCP connection to the server.
12132	Create a TCP listening socket for a server.
12133	A utility to help determine which connections need processing. Returns a triple of lists containing those connections that need to read from the network, need to write to the network, and are waiting for pending timers to expire.
12134	Decorator that prevents callbacks from calling into methods that are not reentrant.
12135	Perform connection state processing.
12136	Get a buffer of data that needs to be written to the network.
12137	Factory method for Sender links.
12138	Rejects the SenderLink and destroys the handle.
12139	Factory method for creating Receive links.
12140	Clean up after connection failure detected.
12141	Both ends of the Endpoint have become active.
12142	The remote has closed its end of the endpoint.
12143	The endpoint state machine failed due to protocol error.
12144	This decorator provides several helpful shortcuts for writing Twilio views.
12145	Generate Adobe output string for defining colors based on color type and properties.
12146	Given a search path, find font files with requested extension and build font dictionary and families list.
12147	Set the compression property for PDF files with boolean validation.
12148	Add an object to the object array at the specified position, creating a new object or replacing an existing one at the given flag position.
12149	Stores the pdf code in a buffer. If it is page related, provide the page object.
12150	Creates a PDF text stream sandwich.
12151	Helper function for PDFText, to have the document add a page, and retry adding a large block of text that would otherwise have been too long for the page.
12152	Set the color scheme for drawing, filling, and text elements with default black colors.
12153	Internal method to set the initial default font.
12154	Add a page to the document, generating a default page if none is provided.
12155	Convenience method for just changing font size.
12156	Input text, short or long. Writes in order, within the defined page boundaries. Sequential add_text commands will print without additional whitespace.
12157	Starts over again at the new line. If number is specified, it will leave multiple lines.
12158	Add a pie chart to the document with specified data and styling options.
12159	Called by the PDFLite object to prompt creating the page objects.
12160	Returns a list of the pages that have orientation changes.
12161	Called by the PDFLite object to prompt creating the font objects.
12162	Creates reference images that can be drawn throughout the document.
12163	Prompts the creating of image objects.
12164	Adjust the current transformation state of the current graphics state matrix.
12165	Return the absolute position of x,y in user space w.r.t. default user space
12166	Set the style for this element, including bold, underline, and italic formatting options.
12167	Rotates a point relative to the mesh origin by the specified angle property.
12168	Convenience function to add property info, can set any attribute and leave the others blank, it won't over-write previously set items.
12169	Set the default viewing options.
12170	Prompt the objects to output pdf code, and save to file.
12171	Standard first line in a PDF.
12172	First, the Document object processes individual page objects and content, then generates the overall "Pages" object that provides reference to page objects through the Kids list, including page count and media box information.
12173	Creates PDF reference to resource objects.
12174	Create a PDF Information object with metadata fields.
12175	Catalog object.
12176	Final Trailer calculations, and end-of-file reference.
12177	Floyd's Cycle Detector implementation that detects cycles in sequences using the tortoise and hare algorithm.
12178	Naive cycle detector that yields values from a sequence until a cycle is found, raising CycleDetected with first and period values when a cycle is detected.
12179	Gosper's cycle detector implementation that detects cycles in sequences and yields values until a cycle is found.
12180	Brent's Cycle Detector implementation that finds cycles in sequences using tortoise and hare algorithm.
12181	Test to see if the line can fit the given length.
12182	Test to see if the page has enough space for the given text height.
12183	Comparison for x coordinate
12184	Comparison for y coordinate
12185	Create a copy, and return it.
12186	Mutable x addition. Defaults to set delta value.
12187	Mutable y addition. Defaults to set delta value.
12188	Don't use this, use document.draw_table
12189	Creates a new label and returns the response.
12190	Get all current labels
12191	Get labels by name

The function retrieves labels from a list by exact name matching and returns a list of dictionaries containing the matching labels. It raises a ServerException if there is an error from Logentries.
12192	Update a Label
12193	Delete the specified label.
12194	Create a new tag with the specified label ID and return the response.
12195	Get all current tags
12196	Get tags by a label's sn key.
12197	Create a hook with the specified parameters and return the response.
12198	Get all current hooks
12199	Update a hook.
12200	Create a new alert with specified configuration and frequency settings.
12201	Get alerts that match the alert type and args.
12202	Update an alert with the provided data and return the result.
12203	Initialize this Sphinx extension
12204	Retrieve the location of the themes directory from the location of this package.
12205	A wrapper for posting things.
12206	Get all log sets

Returns a dictionary where the key is the hostname or log set, and the value is a list of the log keys

Raises ServerException if there is an error from Logentries
12207	Get a specific log or log set.
12208	Find a slider attacker.
12209	Calculate the approximate transit duration for an eccentric orbit.
12210	Update the transit keyword arguments
12211	Computes the light curve model.
12212	Bins the light curve model to the provided time array.
12213	Frees the memory used by all of the dynamically allocated C arrays.
12214	Reads data from the socket.
12215	Generator that reads a line of data from the server.
12216	Generator that reads a block of data from the server.
12217	Reads a command response status and returns a tuple of status code and status message.
12218	Dispatcher for the info generators.
12219	The complete content of an info response.
12220	Call a command on the server.
12221	Determine the capabilities of the server.
12222	Instructs a mode-switching server to switch modes and returns whether posting is allowed.
12223	QUIT command. Tells the server to close the connection.
12224	Get the UTC time according to the server as a datetime object.
12225	Provide a short summary of commands that are understood by the usenet server.
12226	Generator for the NEWGROUPS command.

Generates a list of newsgroups created on the server since the specified timestamp.
12227	Generator for the NEWNEWS command.
12228	Retrieve a list of message-ids for articles created since the specified timestamp for newsgroups matching the given pattern.
12229	Generator for the LIST ACTIVE command.

Generates a list of active newsgroups that match the specified pattern.
If no pattern is specified then all active groups are generated.
12230	Generator for the LIST ACTIVE.TIMES command that yields newsgroup information including name, creation time, and creator.
12231	Generator for the LIST NEWSGROUPS command that yields newsgroup names and descriptions.
12232	Generator for the LIST OVERVIEW.FMT
12233	Generator for the LIST EXTENSIONS command.
12234	Generator for LIST command.
12235	LIST command.

A wrapper for all of the other list commands. The output of this command depends on the keyword specified.
12236	Execute the GROUP command and parse the response to extract group information.
12237	Execute the NEXT command and return the article number and message identifier.
12238	ARTICLE command implementation for NNTP protocol.
12239	HEAD command.
12240	Execute the BODY command and return the message body, optionally decoding yEnc encoded content.
12241	XGTITLE command.
12242	XHDR command.
12243	XZHDR command implementation.
12244	Generator for the XOVER command.
12245	Generator for the XPAT command.
12246	XPAT command.
12247	XFEATURE COMPRESS GZIP command.
12248	POST command.
12249	Parse timezone to offset in seconds.
12250	Parse a datetime to a unix timestamp.
12251	Parse a datetime to a datetime object.
12252	Convenience method for posting.
12253	Convenience method for deleting
12254	Convenience method for getting data from API endpoint.
12255	List all scheduled queries and return them as a list of dictionaries.
12256	List all tags for the account.
12257	Get alert by name or id
12258	Create an inactivity alert.
12259	Delete the specified InactivityAlert
12260	Create a scheduled query with the specified parameters and return the API response.
12261	Create an anomaly alert by making two API requests to create a scheduled query and the alert itself.
12262	Delete a specified anomaly alert tag and its scheduled query.
12263	Unparse a range argument.
12264	Parse a newsgroup info line to python types.
12265	Parse a header line.

The function processes a header line string and returns different types of values based on the line content:
- None if the line is empty or represents end of headers
- A continuation line (with leading whitespace removed) if the line starts with whitespace
- A tuple of (name, value) when a valid header line is found

The function raises ValueError if the line cannot be parsed as a header.
12266	Parse a dictionary of headers to a string.
12267	Handles the POST request sent by Boundary Url Action
12268	Run the tests that are loaded by each of the strings provided.
12269	Return a docstring from a list of defaults.
12270	Decorator to append default kwargs to a function.
12271	Add the default values to the class docstring
12272	Set the value and invoke type-checking and bounds-checking hooks.
12273	Hook for type-checking, invoked during assignment.
12274	Return the current value, caching it if not already cached.
12275	Hook for type-checking, invoked during assignment. Allows size 1 numpy arrays and lists, but raises TypeError if value cannot be cast to a scalar.
12276	Return the symmetric error.
12277	Set parameter error estimate.
12278	Set the value, bounds, free, errors based on corresponding kwargs.
12279	Import and process metrics by parsing JSON data and creating/updating definitions through API calls.
12280	Extract required fields from an array.
12281	Apply the criteria to filter out the metrics required.
12282	Make a call to the meter via JSON RPC
12283	Parse an expression terminal, which can be one of identifier, terminal, option_group, repetition_group, grouping_group, or special_handling.
12284	Parse operator tokens including "|", ".", ",", and "-" from the given text.
12285	op_add = "+" ;
12286	Loop through the list of Properties, extract the derived and required properties and do the appropriate book-keeping
12287	Return a list of Parameter objects.
12288	Return an array with the parameter values
12289	Return an array with the parameter errors.
12290	Reset the value of all Derived properties to None
12291	Validate and assign HTTP method value.
12292	Gets the configuration stored in environment variables
12293	Encode URL parameters
12294	HTTP Get Request
12295	HTTP Delete Request
12296	HTTP Post Request
12297	HTTP Put Request
12298	Make an API call to get the metric definition.
12299	Check scene name and whether remote file exists. Raises WrongSceneNameError if the scene name is wrong.
12300	Gets satellite id and returns product type information including satellite ID and associated stations.
12301	Gets the filesize of a remote file.
12302	Download remote .tar.bz file.
12303	Validate bands parameter.
12304	Establish connection to Earthexplorer without proxy.
12305	Make a callable returning True for names starting with the given prefix.
12306	Return a datetime.tzinfo implementation for the given timezone.
12307	Correct the timezone information on the given datetime
12308	Join an iterable by a delimiter, replacing instances of delimiter in items with escape + delimiter.
12309	Returns a list of the positions in the text where all new lines occur.
12310	Point to a position in source code.
12311	Send output in textual format
12312	Apply the criteria to filter out the output required.
12313	Initialize based on a list of fortune files
12314	Initialize based on a list of fortune files with set chances.
12315	virtue discovers and runs tests found in the given objects.
12316	Parse a rule expression consisting of identifier, equals sign, expression, and semicolon.
12317	Handle special handling pattern with question marks around identifier.
12318	The parse tree generated by the source.
12319	The AST rules.
12320	The AST comments.
12321	Return the directives parsed from the comments.
12322	Return the Python source of the parser generated from the input source.
12323	Returns the python source code for the generated parser.
12324	Reads the directives and generates source code for custom imports.
12325	Builds the python source code for the Parser TokenType enum.
12326	Builds the class definition of the parser.
12327	Gets the entry_point value for the parser.
12328	Generates the source code for a rule.
12329	Gets the variable part of the source code for a rule.
12330	Determine the transformation rule for a given rule and return the corresponding source code text.
12331	Convert an expression to an Abstract Syntax Tree Node.
12332	Convert a parse tree node into an abstract syntax tree node.
12333	Flattens a list of optree operands based on a predicate.
12334	Grouping groups are implied by optrees, this function hoists grouping group expressions up to their parent node.
12335	Convert an abstract syntax tree to python source code.
12336	Convert an abstract syntax operator tree to python source code.
12337	Convert an AST terminal to python source code.
12338	Convert an AST option group to python source code.
12339	Convert an AST repetition group to python source code.
12340	Convert an AST special handling to python source code.
12341	Convert an AST alternate op to python source code.
12342	Convert an AST concatenate op to python source code.
12343	Convert an AST exclude op to python source code.
12344	Convert an AST multiply op to python source code.
12345	Convert an AST repeat op to python source code.
12346	Finds all directives with a certain name, or that passes a predicate.
12347	Custom flattening method for the parse tree.
12348	Extract and parse directives from a comment, where directives are lines beginning with '!'.
12349	Handle the results of the API call
12350	Get a new id if the provided one is None.
12351	Remove a global hotkey.
12352	Configure handling of command line arguments.
12353	Configure logging based on command line options.
12354	Validates the command line arguments passed to the CLI.
12355	Convert a list of nodes in infix order to a list of nodes in postfix order.
12356	Convert a list of nodes in postfix order to an Optree.
12357	Finds the first operator in the list, converts it and its operands to a OptreeNode, then returns a new list with the operator and operands replaced by the new OptreeNode.
12358	Add the specific arguments of this CLI.
12359	Read the file and parse JSON into dictionary
12360	Looks up the metric definition from the definitions from the API call.
12361	Gets the maximum length of each column in the field table
12362	Gets the maximum length of each column
12363	Escape underscores in metrics names to ensure correct markdown formatting.
12364	Sends the field definitions to standard output.
12365	Sends the markdown of the metric definitions to standard out
12366	Look up each of the metrics and then output in Markdown
12367	Attempt to parse source code.
12368	Keeps track of the furthest point in the source code the parser has reached to this point.
12369	Add specific command line arguments for this command
12370	Attempt to parse the passed in string into a valid datetime, falling back to epoch time conversion if parsing fails.
12371	Output results in CSV format.
12372	Output results in structured JSON format
12373	Output results in raw JSON format.
12374	Output results in XML format from JSON data.
12375	The default predicate used in Node.trimmed.
12376	Pretty print a parse tree.
12377	Returns a partial of _get_repetition that accepts only a text argument.
12378	Checks the beginning of text for a value. If it is found, a terminal ParseNode is returned filled out appropriately for the value it found. DeadEnd is raised if the value does not match.
12379	Tries to pull text with extractor repeatedly based on given bounds constraints.
12380	Returns extractor's result if exclusion does not match.
12381	Returns the number of characters at the beginning of text that are whitespace.
12382	This method calls an extractor on some text, handling both string and callable extractors.
12383	Gets the position of the text the ParseNode processed.
12384	Returns True if this node has no children, or if all of its children are empty ParseNode instances.
12385	Add ignored text to the node and update its consumed property.
12386	Returns True if node_type equals the specified value or matches any value in a tuple of options.
12387	Flattens nodes by hoisting children up to ancestor nodes.
12388	Trim a ParseTree by removing nodes that satisfy the given predicate.
12389	Returns a new ParseNode with merged children from this node and another node.
12390	Returns a new node with the same contents as self, but with a new node_type.
12391	Turns the node into a value node, whose single string child is the concatenation of all its children.
12392	The current position of the cursor.
12393	The index of the deepest character read.
12394	Puts the cursor on the next character.
12395	Sets cursor as beginning of next line.
12396	Sets cursor as end of previous line.
12397	Useful string to compute error message.
12398	Increment the cursor to the next character.
12399	Save current position.
12400	Rollback to previous saved position.
12401	Return a Fmt representation of Translator for pretty-printing
12402	Set the name after construction and update internal names.
12403	Count variables defined by this scope.
12404	Count functions defined by this scope.
12405	Update internal counters
12406	Update the Set with values of another Set
12407	Create a new Scope produced by the union of two Scopes.
12408	Update Set with common values of another Set
12409	Create a new Scope produced by the intersection of two Scopes.
12410	Remove values common with another Set
12411	Create a new Scope by subtracting another Scope from this Scope.
12412	Remove common values and update specific values from another set.
12413	Create a new Set with values present in only one Set
12414	Add it to the Set
12415	Remove an item from the set and raise KeyError if not found.
12416	Remove it only if present
12417	Retrieve all values
12418	Retrieve the first Signature ordered by mangling descendant
12419	Retrieve the last Signature ordered by mangling descendant.
12420	Get a signature instance by its internal_name
12421	Retrieve a Set of all signature by symbol name
12422	Retrieve the unique Signature of a symbol. Fail if the Signature is not unique.
12423	For now, polymorphic return type are handle by symbol artefact.
12424	If don't have injector call from parent
12425	Normalize an AST node by replacing built-in containers with referencable subclasses and recursively processing their contents.
12426	Allow to completely mutate the node into any subclasses of Node.
12427	Output:
Iterate through elements in reversed order, yielding each element's data.
12428	Check if given hit is within the limits.
12429	Compute a signature using resolution.
12430	Process the signature and find definition for type.
12431	Use self.resolution to substitute type_name and return resolved names.
12432	Set the resolved name for a type reference.
12433	Deletes the specified file from the local filesystem.
12434	Deletes the specified file from the given S3 bucket.
12435	Deletes the specified file, either locally or from S3, depending on the file's storage type.
12436	Saves the specified file to the local file system.
12437	Saves the specified file to the configured S3 bucket.
12438	Saves the specified file to either S3 or the local filesystem, depending on the currently enabled storage type.
12439	Finds files by listing an S3 bucket's contents by prefix.
12440	Build an enum statement
12441	Decorator to verify arguments and return types.
12442	Add a mapping with key thing_name for callobject in chainmap with namespace handling.
12443	Attach a method to a class.
12444	Attach a method to a parsing class and register it as a parser hook.
12445	Attach a method to a parsing class and register it as a parser rule.
12446	Attach a class to a parsing class and register it as a parser directive.
12447	Attach a class to a parsing decorator and register it to the global decorator list.
12448	Allow to alias a node to another name.
12449	Return True if the parser can consume an EOL byte sequence.
12450	Push context variable to store rule nodes.
12451	Pop context variable that stores rule nodes
12452	Return the text value of the node.
12453	Push a new Stream into the parser.
12454	Save the current index under the given name.
12455	Extract the string between saved and current index.
12456	Merge internal rules set with the given rules.
12457	Merge internal hooks with the given hooks.
12458	Merge internal directives set with the given directives.
12459	Evaluate a rule by name.
12460	Evaluate the hook by its name.
12461	Same as readText but doesn't consume the stream.
12462	Read one byte in stream.
12463	Consume the c head byte, increment current index and return True else return False.
12464	Consume all the stream until EOF.
12465	Consume whitespace characters.
12466	Set the data type of the hits.
12467	Set the data type of the cluster.
12468	Check if hit array has compatible data types and field names with the clustered hit array.
12469	Create a tree.Rule and assign it to the parser_tree attribute of ns_name.
12470	Attach a parser tree to the dict of rules.
12471	Add the rule name
12472	Create a tree.Seq by adding sequences.
12473	Create a tree.Alt by adding an alternative to existing alternatives.
12474	Add a read_range primitive
12475	Add a repeater to the previous sequence.
12476	Create a tree.Capture
12477	Create a tree.Bind
12478	Create a tree.Hook
12479	Parse an int in parameter list.
12480	Parse a str in parameter list
12481	Parse a char in parameter list
12482	Parse a node name in parameter list
12483	Parse a hook name
12484	Parse a hook parameter
12485	Parse the DSL and provide a dictionaries of all resulting rules.
12486	Consume comments and whitespace characters.
12487	Add a state to the register with a unique identifier.
12488	Provide a '.dot' representation of all State in the register.
12489	Write a '.dot' file.
12490	Write a '.png' file using dot command.
12491	Provide a useful representation of the register.
12492	Manage transition of state.
12493	Reset the living state by cleaning up invalid living states and initializing all states.
12494	Infer type on block is to type each of its sub-elements.
12495	Infer type on the subexpr
12496	Infer type from an ID by checking if it's declared in the scope, or set as polymorphic type if not declared.
12497	Infer type from an LITERAL!
12498	Dump tag,rule,id and value cache. For debug.
12499	Generates Python code for a rule as a function definition.
12500	Create the appropriate scope exiting statement.
12501	Normalize a test expression into a statements list.

Statements list are returned as-is.
Expression is packaged as:
if not expr:
    return False
12502	Generates python code calling the function.
12503	Generates python code calling the function and returning True.
12504	Generates Python code calling a hook.
12505	Generates python code calling a rule.
12506	Generates python code to capture text consumed by a clause.
12507	Generates python code for a scope.
12508	Generates python code for alternatives.
12509	Generates python code for clauses.
12510	Generates python code for an optional clause.
12511	Generates python code for a clause repeated 0 or more times.
12512	Generates python code for a clause repeated 1 or more times.
12513	Concatenate two strings while handling newlines for tabulation.
12514	Recursively sets indentation for list elements.
12515	Recursively processes a list to compute a string representation.
12516	Print nodes.
12517	Function that connects each element in a sequence of MatchExpr to form a state machine.
12518	Function that creates a state for all instances of MatchExpr in the given list and connects them together.
12519	Main function for creating a bottom-up tree automata for a block of matching statements.
12520	Test if a node set with setint or setstr equals a certain value.
12521	Create a Grammar from a string
12522	Create a Grammar from a file.
12523	Parse source using the grammar
12524	Parse a file using the grammar and return the parsed node.
12525	Basically copy one node to another, useful to transmit a node from a terminal rule as result of the current rule.
12526	Set a node to a value captured from another node.
12527	Get the value of subnode.
12528	Default serializer for json.
12529	Get deposits.
12530	Dump the deposition object as dictionary.
12531	Get BibDocs for Invenio 1.
12532	Get BibDocs for Invenio 2.
12533	Import BibDocFile.
12534	Dump all BibDoc metadata.

The function retrieves metadata for all BibDoc versions associated with a given record ID, filtering by a specified date. It returns a list of dictionaries containing detailed information about each file version, including checksums, dates, descriptions, and other file attributes. The function skips icon files and files not modified after the given date.
12535	Get bibdocs to check.
12536	Check bibdocs.
12537	Dump the oauth2server tokens.
12538	Get UserEXT objects.
12539	Dump the UserEXt objects as a list of dictionaries.
12540	Get communities.
12541	Get record ids for Invenio 1.
12542	Get record ids for Invenio 2.
12543	Get all restrictions for a given collection, users and fireroles.
12544	Get record revisions.
12545	Get all collections the record belongs to.
12546	Dump JSON of record.
12547	Get recids matching query and with changes.
12548	Dump MARCXML and JSON representation of a record.
12549	Dump the remote accounts as a list of dictionaries.
12550	Helper function for loading JSON data verbatim into model.
12551	Collect entry points.
12552	Initialize app context for Invenio 2.x.
12553	Cache for heavy function calls.
12554	Import ``run_sql``.
12555	Get roles connected to an action.
12556	Get action definitions to dump.
12557	Dump the remote tokens as a list of dictionaries.
12558	Load the oauth2server token from data dump.
12559	Migrate a record from a migration dump.
12560	Import config var import path or use default value.
12561	Dump the oauth2server Client.
12562	Get user accounts Invenio 1.
12563	Get user accounts from Invenio 2.
12564	Dump the users as a list of dictionaries.
12565	Load the raw JSON dump of the Deposition.
12566	Create the deposit record metadata and persistent identifier.
12567	Load a single record into the database.
12568	Load records migration dump.
12569	Inspect records in a migration dump.
12570	Common helper function for loading simple objects from JSON sources with optional asynchronous execution and predicate filtering.
12571	Load communities.
12572	Load users.
12573	Load deposit from sources, optionally filtering by deposit ID.
12574	Return profiler statistics sorted by specified key.
12575	Run as sample test server.
12576	Dump current profiler statistics into a file.
12577	Clear profiler statistics.
12578	Stop the profiler.
12579	Check if the profiler is running.
12580	Disable timestamp update per method.
12581	Load user from data dump.
12582	Calculate image translations in parallel.
12583	Stitch regular spaced images into a single image.
12584	Adds a dimension with ones to array.
12585	Create record based on dump.
12586	Create a new record from dump.
12587	Update an existing record.
12588	Create persistent identifiers.
12589	Delete a record and its persistent identifiers.
12590	Create files for a record in a single bucket, handling bucket creation and file metadata management.
12591	Create a single file with all versions.
12592	Delete the bucket.
12593	Filter persistent identifiers.
12594	Prepare data for revisions.
12595	Get files from data dump and organize them by version.
12596	Prepare persistent identifiers.
12597	Check if record is deleted.
12598	Load community from data dump.
12599	Load community featuring from data dump.
12600	Dump data from Invenio legacy.
12601	Check data in Invenio legacy.
12602	Deletes resources of this widget that require manual cleanup.
12603	Simple vector helper function returning the length of a vector.
12604	Normalizes the given vector by dividing each component by its magnitude.
12605	Transforms the given texture coordinates using the internal texture coordinates.
12606	Helper method ensuring per-entity bone data has been properly initialized.
12607	Sets the length of this bone on the given entity.
12608	Sets the parent of this bone for all entities.
12609	Returns the pivot point of this bone relative to the entity.
12610	Initialize animation on a specific actor and set up animation data.
12611	Sets the state required for this actor.
12612	Resets the state required for this actor to the default state.
12613	Sets the state required for this vertex region.
12614	Resets the state required for this actor to the default state.
12615	Ensures that the given object has been initialized to be used with this model. If the object is found to not be initialized, it will be initialized.
12616	Redraws the model of the given object.
12617	Actually draws the model of the given object to the render target.
12618	Sets the model this actor should use when drawing.
12619	Write the collection of reports to the given path.
12620	Convert test reports into an XML file.
12621	Adds a menu to the list of menus.
12622	Re-draws the text by calculating its position.
12623	Re-draws the label by calculating its position.
12624	Draws the submenu and its background, handles OpenGL state management, and renders all widgets and content.
12625	Deletes the widget by the given name.

Note that this feature is currently experimental as there seems to be a memory leak with this method.
12626	Re-calculates the position of the Label.
12627	Registers the motion and drag handlers.
12628	Registers the up and down event handlers and sets up a 60fps redraw schedule.
12629	Adds the main label of the dialog.
12630	Adds an OK button to allow the user to exit the dialog.
12631	Helper method that exits the dialog.
12632	Adds a confirm button to let the user confirm whatever action they were presented with.
12633	Adds a cancel button to let the user cancel whatever choice they were given.
12634	Updates the progressbar by re-calculating the label.
12635	Renders the world in 3D-mode by rendering all actors.
12636	Renders the world.
12637	Start a new step and return a context manager for reporting errors.
12638	Returns whether or not the resource with the given name and extension exists.
12639	Adds a new texture category with the given name.
12640	Returns a texture to be used as a placeholder for missing textures.
12641	Gets the model object by the given name, using cache if available.
12642	Loads the model of the given name and inserts it into the cache.
12643	Gets the model data associated with the given name, returning cached copy if available or loading and caching it if not.
12644	Loads the model data of the given name from a JSON file and processes it into materials, bones, regions, and animations.
12645	Adds a widget to this container.
12646	Draws the submenu and its background.
12647	Redraws the background and any child widgets.
12648	Redraws the background and contents, including scrollbar.
12649	AABB Collision checker that can be used for most axis-aligned collisions.
12650	Helper property containing the percentage this slider is "filled".
12651	Adds a new layer to the stack, optionally at the specified z-value.
12652	Map a buffer region using this attribute as an accessor.
12653	Draw vertices in the domain.
12654	Adds a callback to the specified action.
12655	Helper method that calls all callbacks registered for the given action.
12656	Registers a name to the registry.
12657	Adds the given layer at the given Z Index.
12658	Draws all layers of this LayeredWidget.
12659	Deletes all layers within this LayeredWidget before deleting itself.
12660	Property to be used for setting and getting the border of the layer.
12661	Property to be used for setting and getting the offset of the layer.
12662	Returns the size of the layer, with the border size already subtracted.
12663	Reads a mesh saved in the HDF5 format.
12664	Connectivity builder using Numba for speed boost.
12665	Sets the fields.
12666	Add the fields into the list of fields.
12667	Checks element definitions.
12668	Returns the dimension of the embedded space of each element.
12669	Returns a dataframe containing volume and centroids of all the elements.
12670	Returns the internal angles of all elements and the associated statistics.
12671	Returns the aspect ratio of all elements.
12672	Returns mesh quality and geometric stats.
12673	Makes a node set from an element set.
12674	Converts a node set to surface.
12675	Creates element sets corresponding to a surface.
12676	Returns fields metadata as a dataframe.
12677	Returns metadata as a dataframe.
12678	Checks if required directories exist and creates them if needed.
12679	Runs the post-proc script.
12680	Makes the mesh using gmsh.
12681	Reads an history output report from a CSV file and processes the data by renaming columns and adding step information based on given steps.
12682	Reads a field output report from a file and parses its metadata and data sections into a structured output with associated mesh class.
12683	Converts a list-like object to a formatted string with specified line width and indentation.
12684	Returns an Abaqus INP formatted string for a given linear equation.
12685	Returns a set as inp string with unsorted option.
12686	Parses the API response and raises appropriate errors if raise_errors was set to True
12687	Builds the URL for the specified method and arguments and returns the response as a dictionary.
12688	Writes a xy_report based on xy data.
12689	Writes a field report and rewrites it in a cleaner format.
12690	List components that are available on your machine
12691	Return an error message for use in exceptions thrown by subclasses.
12692	Return True if the last exception was thrown by a Descriptor instance.
12693	This method sets Series data by creating X and Y variables from the data or validating existing axis objects.
12694	Will get the axis mode for the current series.
12695	Set the graph plotting options.
12696	Turn a funcs list element into a class object.
12697	Cycles through notifications with latest results from data feeds.
12698	Convert value to a numeric value or raise a ValueError if that isn't possible.
12699	Convert str_value to an int or a float, depending on the numeric value represented by str_value.
12700	Tag to plot graphs into the template
12701	Try really really hard to get a Unicode copy of a string.
12702	Get a clean text representation of presumed HTML.
12703	Implement MIME-type matching logic for deciding whether to run `make_clean_html`.
12704	Extract a lower-case, no-slashes domain name from a raw string that might be a URL.
12705	Returns a list of strings created by splitting the domain on '.' and successively cutting off the leftmost portion.
12706	Get a Murmur hash and a normalized token.
12707	Collect all of the words to be indexed from a stream item.
12708	Record index records for a single document.
12709	Get strings that correspond to some hash.
12710	Get document frequencies for a list of hashes.
12711	Get stream IDs for a single hash.
12712	Get stream IDs and term frequencies for a single hash.
12713	Given a spinn3r feed, produce a sequence of valid StreamItems.
12714	Given a single spinn3r feed entry, produce a single StreamItem. Returns 'None' if a complete item can't be constructed.
12715	Create a ContentItem from a node in the spinn3r data tree with decompressed and UTF-8 normalized raw data.
12716	Read exactly a varint out of the underlying file.
12717	Read some protobuf-encoded object stored in a single block out of the file.
12718	Return packed bytes representation of StreamItem kvlayer key.
12719	Extract parts of a StreamItem for kvlayer key storage and return the key tuple and data blob.
12720	Change working directory and restore the previous on exit
12721	Removes the prefix from a string if it's present, otherwise returns the input string unchanged. If strict is True, raises an error when the prefix is not found.
12722	Removes the suffix from a string if it exists, otherwise returns the original string. If strict mode is enabled, raises an error when the suffix is not present.
12723	Check if all elements of needle are contained in haystack in the same order.
12724	Return an Ice application with a default home page.
12725	Run the application using a simple WSGI server.
12726	Stop the simple WSGI server running the application.
12727	Decorator to add route for a request with any HTTP method.
12728	Add a callback that generates error page.
12729	Send content of a static file as response.
12730	Return an error page for the current response status.
12731	Add a route.
12732	Resolve a request to a route handler.
12733	Resolve a request to a wildcard or regex route handler.
12734	Return a normalized form of the pattern.
12735	Return the HTTP response body.
12736	Add an HTTP header to response object.
12737	Add a Set-Cookie header to response object.
12738	Return the HTTP response status line.
12739	Return the value of Content-Type header field.
12740	Return the list of all values for the specified key.
12741	Remove a directory tree recursively, handling read-only files and NFS issues.
12742	Return list of open files for current process.
12743	Returns a kba.pipeline "transform" function that generates file type stats from stream items, analyzing content to identify HTML, XML, PDF, or unknown file types based on content patterns.
12744	Fetch a WorkUnit with KBA s3 path, process it, and save counts about it.
12745	Attempt a fetch and iteration over a work_unit.key path in s3.
12746	Return a list of non-empty lines from `file_path`.
12747	Return an ordered 2-tuple containing a species and a describer.
12748	Return an ordered 2-tuple containing a species and a describer, with optional length and stutter prevention constraints.
12749	Perform morphological analysis for Japanese text.
12750	Scoring the similarity of two words.
12751	Convert Japanese text to Hiragana or Katakana.
12752	Extract unique representation from sentence.
12753	Summarize reviews into a short summary.
12754	Extract "keywords" from an input document.
12755	Extract expression expressing date and time and normalize its value
12756	Create a pipeline stage by instantiating it with configuration, injecting execution-specific paths from the pipeline configuration.
12757	Create a list of indirect stages based on configuration.
12758	Create stages that are used for the pipeline.
12759	Run the pipeline.
12760	Run all of the writers over some intermediate chunk.
12761	Run transforms on stream item, handle exceptions, validate output, and write successful items to current chunk.
12762	Replace the top-level pipeline configurable object.
12763	Make a WSGI app that has all the HTTPie pieces baked in.
12764	Assemble in-doc coref chains by mapping equiv_id to tokens and their cleansed name strings.
12765	Returns True if all target mention strings appear as substrings in the chain mentions, otherwise returns False.
12766	Check if any target mentions appear as substrings in chain mentions.
12767	Iterate through all tokens looking for matches of cleansed tokens or token regexes, skipping empty tokens and handling Token objects that produce multiple space-separated strings when cleansed. Yields tokens that match.
12768	Iterate through tokens looking for near-exact matches to strings in stream_item ratings mentions and annotate matched tokens.
12769	Run tagger as a child process to get XML output.
12770	Iterate through ner_xml_path to fuse with i_chunk into o_chunk.
12771	Send SIGTERM to the tagger child process.
12772	Returns a Pattern that matches exactly n repetitions of Pattern p.
12773	Replace all angle bracket emails with a unique key.
12774	Generate strings identified as sentences.
12775	Make a sorted collection on body.labels.
12776	Assemble Sentence and Token objects.
12777	Convert HTML, XML, or numeric entities in text to Unicode characters.
12778	Make a temp file of cleansed text.
12779	Run child process to get OWPL output.
12780	Convert a string of text into a lowercase string with no punctuation and only spaces for whitespace.
12781	Aligns chunk data with NER information by processing XML files and updating stream items with tagging and labeling data.
12782	Given a config dict with streamcorpus_pipeline as a key, find all keys under streamcorpus_pipeline that end with "_path" and if the value of that key is a relative path, convert it to an absolute path using the value provided by root_path.
12783	Setup the config and load external modules.
12784	Generate StreamItem instances from the John Smith corpus with specified creation time and annotations.
12785	Takes an HTML-like binary string as input and returns a binary string of the same length with all tags replaced by whitespace.
12786	Takes an HTML-like Unicode string as input and returns a UTF-8 encoded string with all tags replaced by whitespace.
12787	Create a temporary XML file containing clean visible text data from input chunks.
12788	Convert a unicode string into a lowercase string with no punctuation and only spaces for whitespace.
12789	Manual test loop for make_clean_visible_from_raw
12790	Try to load a stage into self, ignoring errors.
12791	Add external stages from the Python module in `path`.
12792	Add external stages from the specified Python module.
12793	Construct and configure a stage from known stages.
12794	Iterates through idx_bytes until a byte in stop_bytes or a byte not in run_bytes is found, returning the index, collected bytes, and terminating byte.
12795	Test whether an href string meets specific criteria based on configuration parameters for absolute URLs and domain substrings.
12796	Make a list of Labels for 'author' and the filtered hrefs & anchors.
12797	Yield all file paths under input_dir.
12798	Generate the data objects for every task.
12799	Get a random key out of the first max_iter rows.
12800	Tokenize all the words and preserve NER labels from ENAMEX tags
12801	Parse the sentences and tokens out of the XML.
12802	Decorator for methods that need many retries, because of intermittent failures, such as AWS calls via boto.
12803	Verify MD5 checksum matches expected value, raise exception if not.
12804	This function manages AWS S3 bucket configuration and returns a boto.Bucket object. It retrieves AWS credentials from config files, environment variables, or AWS credential sources, then establishes an S3 connection and retrieves the specified bucket.
12805	Given the raw data from s3, return a generator for the items contained in that data.
12806	Return a Chunk object full of records from the specified S3 bucket and key path, handling decryption and decompression if needed, and verifying MD5 if configured.
12807	Convert a text stream ID to a kvlayer key.
12808	Convert a kvlayer key to a text stream ID.
12809	Get a kvlayer key from a stream item.
12810	Serve up some ponies.
12811	Build the parser that will have all available commands and options.
12812	Mutably tag tokens with xpath offsets.
12813	Convert stream item sentences to character offsets.
12814	Convert character offsets to character ranges.
12815	Converts HTML and a sequence of char offsets to xpath offsets.
12816	Record that `tag` has been seen at this depth.
12817	Get an XPath fragment for this location.
12818	Returns the one-based index of the current text node.
12819	Yields all the elements descendant of elem in document order
12820	Yields all the elements from the source.
12821	Yields all the elements with the given name.
12822	Yields elements from the source whose name matches the given regular expression pattern.
12823	Yields elements from the source having the given attribute, optionally with the given attribute value
12824	Yields elements and text which have the same parent as elem, but come afterward in document order
12825	Add text nodes as possible to all descendants of an element for spacing & indentation to make the MicroXML as printed easier for people to read.
12826	Call inkscape CLI with arguments and returns its return value.
12827	Call Inkscape to export the input file to output file using the specific export argument flag for the output file type.
12828	Transform SVG file to PDF file.
12829	Transform SVG file to PNG file.
12830	Return a Jinja2 environment for the directory of the given file path.
12831	Setup self.template using the provided template file path.
12832	Fill the content of the document with the information in doc_contents.
12833	Save the content of the .txt file in a text file.
12834	Factory function to create a specific document from a template file.
12835	Fill the content of the document with the information in doc_contents, replacing symbols with XML codes before filling the template.
12836	Save the content of the .svg file in the chosen rendered format.
12837	Save the content of the .text file in the PDF.
12838	Convert XML 1.0 to MicroXML

Returns MicroXML element and extra information from the source.
12839	Parse an input source with HTML text into an Amara 3 tree.
12840	Parse a fragment of markup in HTML mode and return a bindery node.
12841	Insert data as text in the current node, positioned before the start of the specified node or at the end of the node's text.
12842	Insert node as a child of the current node, before refNode in the list of child nodes.
12843	Return a shallow copy of the current node i.e. a node with the same name and attributes but with no parent or child nodes
12844	A script that melody calls with each valid set of options. This script runs the required code and returns the results.
12845	XPath-like string value of node
12846	Append a node as the last child.
12847	Get settings from config file.
12848	Get google API credentials for user.
12849	Create event start and end datetimes.
12850	Create event in calendar with sms reminder.
12851	Processing notification call main function.
12852	Return the extension of fpath.
12853	Add the extension ext to filepath if it doesn't have it.
12854	Return a temporary file with the given suffix within dirpath.
12855	Remove the files in workdir that have the given extension.
12856	Convert a CSV file to a JSON file with specified field names and optional header skipping.
12857	Modify the content of `filepath`, replacing `old` for `new`.
12858	Run all parsing functions.
12859	If next tag is link with same href, combine them.
12860	See if span tag has italic style and wrap with em tag.
12861	See if span tag has bold style and wrap with strong tag.
12862	See if span tag has underline style and wrap with u tag.
12863	Reject attributes not defined in ATTR_WHITELIST.
12864	Get unicode string without any other content transformation and clean extra spaces.
12865	Extract "real" URL from Google redirected url by getting `q` querystring parameter.
12866	Parse attribute. Delegate to href parser for hrefs, otherwise return value.
12867	Modify the keys in a dictionary according to specified translations and return the translated dictionary.
12868	Convert data to json string representation.
12869	Returns absolute paths of files that match the regex within folder_path and all its child folders.
12870	Yields one string, concatenation of argument strings
12871	Yields one boolean, whether the first string starts with the second
12872	Yields one boolean, whether the first string contains the second
12873	Yields the length of a string.
12874	Yields one boolean based on the first item of the sequence according to specific rules for different data types.
12875	Yields the result of applying an expression to each item in the input sequence.
12876	Yields a sequence of a single value, the result of looking up a value from the tables provided in the context, or an empty sequence if lookup is unsuccessful
12877	Replace known special characters with SVG code entities.
12878	Try to read a SVG file if `svg_file` is a string. Raise an exception in case of error or return the svg object. If `svg_file` is a svgutils svg object, will just return it.
12879	Merge `svg_file2` into `svg_file1` at the specified coordinates and scale.
12880	Merge all the PDF files in `pdf_filepaths` in a new PDF file `out_filepath`.
12881	Return the ElementTree of the SVG content in `filepath` with the font content embedded.
12882	Write ttf and otf font content from font_files in the svg file and write the result in outfile.
12883	Make some basic checks on the inputs to make sure they are valid.
12884	Make some basic checks on the function to make sure it is valid.
12885	Internal recursion routine called by the run method that generates all input combinations.
12886	Create an input file using jinja2 by filling a template with the values from the option variable passed in.
12887	We work out all combinations using this internal recursion method
12888	Cast an arbitrary object or sequence to a string type
12889	Cast an arbitrary object or sequence to a number type
12890	Cast an arbitrary sequence to a boolean type
12891	Generate token strings which, when joined together, form a valid XPath serialization of the AST.
12892	Modify the encoding entry in the XML file.
12893	Save `text` in a QR code SVG image file.
12894	Set the gromacs input data using the supplied input options, run gromacs and extract and return the required outputs.
12895	Call CLI command with arguments and returns its return value.
12896	Convert TeX files to PDF or DVI using PDFLatex.
12897	Returns all potential loop fusion options for the psy object provided.
12898	Returns a transformed Geometry.
12899	Returns an ogr.Geometry instance optionally created from a geojson str or dict. The spatial reference may also be provided.
12900	Expands this envelope by the given Envelope or tuple.
12901	Returns the intersection of this and another Envelope.
12902	Returns true if this envelope intersects another.
12903	Returns an OGR Geometry for this envelope.
12904	Creates a table from arrays Z, N and M
12905	Export the contents to a file as comma separated values.
12906	Selects nuclei according to a condition on Z, N, or M.
12907	Return a selection of the Table at positions given by ``nuclei``
12908	Select nuclei which also belong to ``table``
12909	Select nuclei not in table
12910	Selects odd-even nuclei from the table.
12911	Selects even-odd nuclei from the table.
12912	Selects even-even nuclei from the table.
12913	Calculate error difference
12914	Calculate root mean squared error.
12915	Return binding energies instead of mass excesses
12916	Return 2 neutron separation energy
12917	Return 1 neutron separation energy
12918	Return 2 proton separation energy
12919	Return 1 proton separation energy
12920	Helper function for derived quantities
12921	Use as a decorator for operations on the database, to ensure connection setup and teardown.
12922	Computes the key from the salt and the master password.
12923	Initialize a database.
12924	Search the database for the given query and return partial matches.
12925	Modify an existing domain.
12926	Create a new domain entry in the database.
12927	Extract messages from Handlebars templates.
12928	Returns a GDAL virtual filesystem prefixed path.
12929	Returns the EPSG ID as int if it exists.
12930	Main entry point for the CLI.
12931	Initialize loggers.
12932	Update the content of a single file.
12933	Returns a dictionary of enabled GDAL Driver metadata keyed by the 'ShortName' attribute.
12934	Returns the gdal.Driver for a path or None based on the file extension.
12935	Converts an OGR polygon to a 2D NumPy array.
12936	Returns a Raster from layer features.
12937	Returns a Raster instance from a file path or file-like object.
12938	Returns an in-memory raster initialized from a pixel buffer.
12939	Returns a copied Raster instance.
12940	Returns a dict of driver specific raster creation options.
12941	Returns a new Raster instance.
12942	Sets the affine transformation.
12943	Returns an NDArray, optionally subset by spatial envelope.
12944	Returns the minimum bounding rectangle as a tuple of min X, min Y, max X, max Y.
12945	Returns the underlying ImageDriver instance.
12946	Derive new Raster instances.
12947	Returns a MaskedArray using nodata values, optionally clipped to a specified geometry.
12948	Returns read only property for band nodata value, assuming single band rasters for now.
12949	Returns raster data bytes for partial or full extent.
12950	Returns a new instance resampled to provided size.
12951	Save this instance to the path and format provided.
12952	Sets the spatial reference.
12953	Returns a new reprojected instance.
12954	Computes the ideal conversion ratio for the given alphabet by finding the optimal number of bits and encoding length where the fractional part of the encoding length is minimized.
12955	Retrieves a named charset or treats the input as a custom alphabet and uses that.
12956	Gets a chunk from the input data, converts it to a number and encodes that number.
12957	Parses a chunk of bytes to integer using big-endian representation.
12958	Partition the data into chunks and retrieve the chunk at the given index.
12959	Cache result of function call.
12960	Get a list of patterns from a file and make a regular expression.
12961	Normalize date format to UTC timezone aware datetime object.
12962	Get timezone as set by the system
12963	Returns the model properties as a dictionary.
12964	Catch exceptions with a prompt for post-mortem analysis
12965	Clearer data printing with optional dictionary alignment.
12966	Connects to the remote master and continuously receives calls, executes them, then returns a response until interrupted.
12967	Starts an asyncio event loop to connect to the master and run jobs.
12968	Runs a pool of workers which connect to a remote HighFive master and begin executing calls.
12969	Sets the classification of this CompanyDetailCompany.
12970	Add message to queue and start processing the queue.
12971	Create the message to turn light on.
12972	Create the message to turn switch on.
12973	Scale brightness from 0..255 to 1..32 and send light control message.
12974	Create the message to turn light or switch off.
12975	If the queue is not empty, process the queue.
12976	Send a reliable message to LightwaveRF hub with retry logic.
12977	Generates a wrapped adapter for the given object.
12978	Sets the nature of this YearlyFinancials.
12979	Update values of configuration section with dict.
12980	Restore default values of options in this section.
12981	Set the list of config files.
12982	Iterator over sections, option names, and option values.
12983	Iterator over sections, option names, and option metadata.
12984	Create config file.
12985	Update values of configuration options with dict.
12986	Read a config file and set config values accordingly.
12987	Read config files and set config values accordingly.
12988	List of cli strings for a given option.
12989	List of config sections used by a command.
12990	Scan options related to one command and enrich _opt_cmds.
12991	Add options to a parser.
12992	Build command line argument parser.
12993	Parse arguments and update options accordingly.
12994	Write zsh _arguments compdef for a given command.
12995	Write zsh compdef script.
12996	Build a list of all options for a given command.
12997	Write bash complete script.
12998	Starts a new HighFive master at the given host and port, and returns it.
12999	Called when a remote worker connection has been found. Finishes setting up the protocol object.
13000	Called when a complete line is found from the remote worker. Decodes a response object from the line, then passes it to the worker object.
13001	Called when the connection to the remote worker is broken. Closes the worker.
13002	Called when a job has been found for the worker to run. Sends the job's RPC to the remote worker.
13003	Called when a response to a job RPC has been received. Decodes the response and finalizes the result, then reports the result to the job manager.
13004	Close the worker and return any running job to the job manager.
13005	Runs a job set which consists of the jobs in an iterable job list.
13006	Starts closing the HighFive master. The server will be closed and all queued job sets will be cancelled.
13007	Called when a state change has occurred. Waiters are notified that a change has occurred.
13008	Adds a new result.
13009	Waits until the result set changes.
13010	If there is still a job in the job iterator, loads it and increments the active job count.
13011	Marks the job set as completed, and notifies all waiting tasks.
13012	Adds the result of a completed job to the result list, then decrements the active job count. If the job set is already complete, the result is simply discarded instead.
13013	Cancels the job set, finishing it immediately and discarding all queued jobs.
13014	Waits until the job set is finished. Returns immediately if the job set is already finished.
13015	Distributes jobs from the active job set to waiting get_job callbacks.
13016	Adds a job set to the manager's queue. If no job set is running, it is activated immediately. A new job set handle is returned.
13017	Calls the given callback function when a job becomes available.
13018	Returns a job to its source job set to be run again later.
13019	Adds the result of a job to the results list of the job's source job set.
13020	Called when a job set has been completed or cancelled. If the job set was active, the next incomplete job set is loaded from the job set queue and is activated.
13021	Closes the job manager and cancels all active and queued job sets.
13022	Remove duplicates in a list.
13023	Returns true if the regex matches the object, or a string in the object if it is some sort of container.
13024	Lists all available instances with filtering and limiting options.
13025	Use the environment to get the current region
13026	Filter a list of host entries according to given filters and exclusion rules.
13027	Prints the public DNS name of a running EC2 instance with the specified name.
13028	Deserialize a HostEntry from a dictionary.
13029	Get an attribute value with special handling for tags and conversion options.
13030	Sorts a list of entries by the given attribute.
13031	Returns a representation of the host as a single line, with columns joined by the specified separator.
13032	Loads a ``HostEntry`` from a boto instance.
13033	Returns whether the instance matches the given filter text.
13034	Returns the best name to display for this host, using the instance name if available, otherwise just the public IP.
13035	Pretty-prints a list of entries as a formatted table or line-by-line representation.
13036	Attach the event time as unix epoch timestamp to the event dictionary.
13037	Setup a Hivy formatted logger with specified level and output configuration.
13038	Configure and return a new logger for hivy modules.
13039	Implement celery workers using json and redis
13040	Return status report for a worker or all workers.
13041	Stop and remove a worker.
13042	Define a switchable ConfOpt.
13043	Define a configuration section handling config file.
13044	Set options from a list of section.option=value string.
13045	Implement the behavior of a subcmd using config_conf_section
13046	Create completion files for bash and zsh.
13047	Renders a list of columns with optional borders and colors.
13048	Render the nth row of each column in columns with specified widths and optional coloring.
13049	Renders a table from a list of rows and returns the formatted string representation.
13050	Prepare the rows so they're all strings, and all the same length.
13051	Returns a function that colors a string with a number from 0 to 255.
13052	Hashes a string and returns a number between ``min`` and ``max``.
13053	Returns a random color between min and max.
13054	Reads stdin and returns user input, converting to integer if possible, with interrupt handling.
13055	Verify basic http authentication
13056	Verify HTTP header token authentication.
13057	Flask decorator protecting resources using token scheme
13058	Check if a process is currently running.
13059	Take a string and return the corresponding module or object from the module.
13060	Utility for logbook information injection that returns the machine's IP address, either public or private, with error handling.
13061	Makes the HTTP request using RESTClient.
13062	Builds form parameters with file support.
13063	Configure from cli and run the server
13064	Include a hidden input to stored the serialized upload value.
13065	Starts a bash command in a subprocess and streams its output line by line, with optional formatting and stdin writing.
13066	Takes a list of dictionaries with keys corresponding to ``stream_command`` arguments, and runs all concurrently.
13067	Runs multiple commands, optionally in parallel, with optional coloring and formatting.
13068	Return the net work days according to RH's calendar.
13069	Queries bash to find the path to a command on the system.
13070	Uses hostname and other info to construct an SSH command.
13071	Uses hostname and other info to construct an SCP command.
13072	Performs an SCP command where the remote_path is the target and the local_path is the source.
13073	Performs an SCP command where the remote_path is the source and the local_path is a format string, formatted individually for each host being copied from so as to create one or more distinct paths on the local system.
13074	Runs the given command over SSH in parallel on all hosts in `entries`.
13075	SSH into a host.
13076	Loads the user's LSI profile, or provides a default.
13077	Takes arguments parsed from argparse and returns a profile.
13078	Relate this package component to the supplied part.
13079	Return a list of parts related to this one via reltype.
13080	Load relationships from source XML.
13081	Add a part to the package.
13082	Load a part into this package based on its relationship type.
13083	Get the correct content type for a given name.
13084	Given an element, parse out the proper ContentType.
13085	Parses the given DSL string and returns parsed results.
13086	Builds a final copy of the token using the given secret key.
13087	Assigns force field parameters to Atoms in the AMPAL object.
13088	Finds the maximum radius and npnp in the force field.
13089	Makes a dictionary containing PyAtomData for the force field parameters.
13090	Return a zipped package as a readable stream.
13091	Return a generator yielding each of the segments whose names match name.
13092	Copy objects from one directory in an S3 bucket to another directory in the same bucket, preserving metadata while allowing optional overrides for surrogate key, cache control, and surrogate control headers.
13093	Open an S3 Bucket resource.
13094	Upload a directory of files to S3.
13095	Upload a file to the S3 bucket.
13096	Upload an arbitrary object to an S3 bucket.
13097	List all file-type object names that exist at the root of this bucket directory.
13098	List all names of directories that exist at the root of this bucket directory.
13099	Make an absolute directory path in the bucket for dirname, which is assumed relative to the self._bucket_root prefix directory.
13100	Delete a file from the bucket.
13101	Ensure a token is in the Click context object or authenticate and obtain the token from LTD Keeper.
13102	Speak loudly! FIVE! Use upper case!
13103	Delete all objects in the S3 bucket from the specified directory path.
13104	Get project's home URL based on settings.PROJECT_HOME_NAMESPACE.
13105	Decorator to silence template tags if 'PROJECT_HOME_NAMESPACE' is not defined in settings.
13106	A template tag to return the project's home URL and label formatted as a Bootstrap 3 breadcrumb.
13107	A template tag to return the project's home URL and label formatted as a Bootstrap 4 breadcrumb.
13108	Calculates the interaction energy between AMPAL objects.
13109	Calculate the internal energy of the AMPAL object using the specified force field.
13110	Get lines sampled across all threads, in order from most to least sampled.
13111	Get a temporary auth token from LTD Keeper.
13112	Upload a new site build to LSST the Docs.
13113	Detect if the upload should be skipped based on the TRAVIS_EVENT_TYPE environment variable.
13114	Instant purge URLs with a given surrogate key from the Fastly caches.
13115	Register a new build for a product on LSST the Docs.
13116	Confirm a build upload is complete.
13117	Deeply updates a dictionary with nested dictionaries and concatenates list values.
13118	Initialize the ltd command-line client for LSST the Docs with logging and context configuration.
13119	Edit a part from an OOXML Package without unzipping it
13120	List the contents of a subdirectory of a zipfile
13121	Recursively split a path into all its components for safe joining back together.
13122	Given a path to a part in a zip file, return a path to the file and the path to the part.
13123	Give preference to an XML_EDITOR or EDITOR defined in the environment. Otherwise use notepad on Windows and edit on other platforms.
13124	Process the astroid node stream to check for a valid file header pattern match.
13125	Generates an HTML chart from various data objects and optionally writes it to a file.
13126	Generate HTML from an Altair chart object and optionally write it to a file.
13127	Serialize data to an Altair chart object from various data types.
13128	Patch the Altair generated json to the newest Vega Lite spec
13129	Generates HTML from Vega lite data.
13130	Converts a dictionary to a pandas dataframe.
13131	Writes a chart's HTML to a file.
13132	Get the right chart class from a string.
13133	Encode the fields in Altair format
13134	Link to a GitHub user.
13135	Returns the tarball URL inferred from an app.json, if present.
13136	Brings up a Heroku app.
13137	Brings down a Heroku app.
13138	Decorator implementing Iterator interface with nicer manner.
13139	Returns a random binary string representation of specified length.
13140	Generate a random IP address string, optionally excluding specified class A networks.
13141	Get a random date between two dates.
13142	Returns a prepared ``Session`` instance.
13143	Sends an API request to Heroku and returns the JSON response.
13144	Creates an app-setups build. Returns response data as a dict.
13145	Checks the status of an app-setups build.
13146	Generator that returns an unique string.
13147	Decorator that stores function results in a dictionary to be used on the next time that the same arguments were informed.
13148	Wraps a function to produce unique results.
13149	Add any sub commands to the argument parser.
13150	Gets the root argument parser object.
13151	Gets the description of the command. If its not supplied the first sentence of the doc string is used.
13152	Gets the help text for the command. If its not supplied the doc string is used.
13153	Runs the command passing in the parsed arguments.
13154	Encode wrapper for a dataset with maximum value
13155	Get all available athletes from the host endpoint and return as a pandas DataFrame.
13156	Get all activity data for the last activity.
13157	Actually do the request for activity list.
13158	Actually do the request for activity filename and return processed activity data.
13159	Construct athlete endpoint from host and athlete name
13160	Construct activity endpoint from host, athlete name and filename
13161	Do actual GET request to GC REST API and validate responses.
13162	Creates a Heroku app-setup build.
13163	Create a URL pattern with optional authentication wrapper.

The function `url_with_auth` generates URL patterns while optionally applying API authentication to views. It handles three cases:
1. String-based views that must be full paths
2. Include patterns (lists/tuples)
3. Object-based views that get wrapped with API authentication

The function uses `api_auth` from `djapiauth.auth` to wrap views requiring authentication, while preserving the original URL pattern behavior for other cases.
13164	Returns a random title from the specified languages and genders.
13165	Returns a random tuple representing person information.
13166	Return a random last name.
13167	Render the axes data into the dict data
13168	Update the chart's dataset, can be two dimensional or contain string data
13169	Renders the chart context and axes into the dict data
13170	Check to see if the type is either in TYPES or fits type name and return proper type.
13171	Returns the rendered URL of the chart.
13172	Shows the chart URL in a webbrowser
13173	Download the chart from the URL into a filename as a PNG
13174	Grabs readable PNG file pointer
13175	Returns a PngImageFile instance of the chart
13176	Writes out PNG image data in chunks to file pointer fp
13177	Returns the unique SHA1 hexdigest of the chart URL param parts
13178	Return a random floating number with specified min/max values and decimal places.
13179	Assign an entity name based on the class immediately inheriting from Base.
13180	Return the union of claims from this object and its supertype, with verified information taking precedence over self-asserted information.
13181	Build a JWKS from the signing keys belonging to the self signer.
13182	Starting with a signed JWT or a JSON document, unpack and verify all the separate metadata statements.
13183	Given a MetadataStatement instance, create a signed JWT.
13184	Computes the resulting metadata statement from a compounded metadata statement.
13185	Remove MS paths that are marked to be used for another usage.
13186	Add signed metadata statements to a request.
13187	Parses command line arguments for a concordance generator application.
13188	Add logging option to an ArgumentParser.
13189	Apply logging options produced by LogLevelAction and LogFileAction.
13190	Log msg at 'verbose' level, debug < verbose < info
13191	Creates a letter usage map for a word.
13192	Finds anagrams in word.
13193	Returns the exception's name in an AMP Command friendly format.
13194	Transforms a Go Metrics API metric result into a list of values for a given time window period.
13195	Gets the most recent non-zero value for a .last metric or zero for empty data.
13196	Validate the given 1-based page number.
13197	Get a page from an iterator, handling invalid page numbers by defaulting to the first page.
13198	Alternative to os.chmod, recursively changes file permissions.
13199	Given configuration initiate an InternalSigningService instance
13200	Given configuration initiate a SigningService instance
13201	Creates a signed JWT
13202	Uses POST to send a first metadata statement signing request to a signing service.
13203	Uses PUT to update an earlier accepted and signed metadata statement.
13204	Uses GET to get a newly signed metadata statement.
13205	Yield bundle contents from the given dict.
13206	Return a bundle initialised by the given dict.
13207	Returns urls needed to include all assets of asset_type
13208	Return HTML tags for URLs of the specified asset type.
13209	Return all HTML tags for all asset types.
13210	Given a URL, check to see if there is an associated protocol. If not, set the protocol to HTTP and return the protocolised URL.
13211	Find the href destinations of all links at URL
13212	Connected to AMP server, start listening locally, and give the AMP client a reference to the local listening factory.
13213	Get modules by project_abspath and packages_scan.
13214	Import customer's service module.
13215	Convert a date string in various formats to a normalized and validated date range.
13216	Take 'doc' and create a new doc using only keys from the 'fields' list.
13217	For all the datetime fields in "datemap" find that key in doc and map the datetime object to a strftime string. This pprint and others will print out readable datetimes.
13218	Output a cursor to a filename or stdout in CSV or JSON format.
13219	Output all fields using the fieldNames list. For fields in the list datemap indicates the field must be date.
13220	Given a list of tasks to perform and a dependency graph, return the tasks that must be performed, in the correct order.
13221	Add or create the default departments for the given project
13222	Add or create the default assettypes for the given project.
13223	Add or create the default sequences for the given project
13224	Add a rnd shot for every user in the project.
13225	Post save handler for Project model that creates default departments, asset types, and sequences on creation, and random shots for users on save.
13226	Post save receiver for when a sequence is saved. Creates a global shot.
13227	Create all tasks for the element.
13228	Ensures that we have an open connection to the given peer and returns the actual peer id.
13229	Sends a packet to a peer.
13230	Read customer's config value by section and key.
13231	Add a function to process nova notification events.
13232	Cinder annotation for adding function to process cinder notification.
13233	Neutron annotation for adding function to process neutron notification.
13234	Add a function to process glance notification with event type handling.
13235	Swift annotation for adding function to process swift notification.
13236	Swift annotation for adding function to process keystone notification.
13237	Add function to process heat notification.
13238	Adds a factory and starts it, making it available for remote clients to connect to.
13239	Removes a factory and stops its associated service.
13240	Attempts to connect using a given factory and returns a unique connection identifier.
13241	Receives some data for the given protocol.
13242	Disconnects the given protocol.
13243	Shorthand for ``callRemote`` using the factory's connection to the AMP peer.
13244	Create a multiplexed stream connection to the AMP server.
13245	Stores a reference to the connection, registers this protocol on the factory as one related to a multiplexed AMP connection, and sends currently buffered data. Gets rid of the buffer afterwards.
13246	Received some data from the local side.

If we have set up the multiplexed connection, sends the data over the multiplexed connection. Otherwise, buffers.
13247	Actually sends data over the wire.
13248	If we already have an AMP connection registered on the factory, get rid of it.
13249	Attempts to get a local protocol by connection identifier.
13250	Some data was received from the remote end. Find the matching protocol and replay it.
13251	The other side has asked us to disconnect.
13252	Centers a string and pads it on both sides with fill characters.
13253	Takes a string and prints it with the time right aligned.
13254	Takes the parts of a semantic version number and returns a nicely formatted string.
13255	Identify the unit framework (astropy.units, pint, or quantities) for a given target unit.
13256	Check that a value has physical type consistent with user-specified units.
13257	Apply standard padding to data using specified padding algorithm.
13258	Remove standard padding from data.
13259	Sign the extended request.
13260	Only gathers metadata statements and returns them.
13261	Prints the anagram results sorted by score to stdout.
13262	Parse command line arguments for the nagaram anagram finder program.
13263	Main command line entry point.
13264	Process incoming data packets by parsing headers and dispatching packets to appropriate handlers.
13265	Invoked if a packet with an unregistered type was received. Default behaviour is to log and close the connection.
13266	Create a callable that will invoke the given remote function.
13267	Called from remote to ask if a call made to here is still in progress.
13268	Get command regex string and completer dict.
13269	Defers to `amp.AmpList`, then gets the element from the list.
13270	Wraps the object in a list and delegates to `amp.AmpList.toStringProto`.
13271	Verifies that an instance of this class adheres to the given restrictions.
13272	Parse simple JWKS or signed JWKS from the HTTP response.
13273	Performs a pg_dump backup.
13274	Returns a list of all databases on this server.
13275	Returns a dictionary of all the files under a path.
13276	Syncs a local directory with an S3 bucket.
13277	Ensure the user has the necessary tokens for the specified services.
13278	Displays the login form and handles the login action.
13279	Build CLI dynamically based on the package structure.
13280	Return an already closed read-only instance of Fridge.
13281	Force reloading the data from the file.
13282	Create a signed JWT containing a JWKS that is signed by one of the keys in the JWKS.
13283	Create a signed metadata statement request with signing keys.
13284	A decorator for providing a unittest with a library and have it called only once.
13285	Discover and load greencard tests.
13286	Command line entry point for a test runner that executes tests on cards in a librarian library.
13287	Returns the Scrabble score of a letter.
13288	Checks the Scrabble score of a single word.
13289	Opens the word list file and yields words based on optional start and end character filters.
13290	Checks if the input word could be played with a full bag of Scrabble tiles.
13291	Execute main function to search and display code answer from StackOverflow based on query and tags.
13292	Parse command line arguments and run the main function with the provided arguments.
13293	Handle a JSON AMP dialect request.
13294	Gets the command class and matching responder function for the given command name.
13295	Parses all the values in the request that are in a form specific to the JSON AMP dialect.
13296	Run the responser function and handle its response or failure.
13297	Serializes the response to JSON and writes it to the transport.
13298	Tells the box receiver to stop receiving boxes.
13299	Builds a bridge and associates it with an AMP protocol instance.
13300	Convert a JWKS to a KeyJar instance.
13301	Upload a bundle from an unsigned JSON document.
13302	Deal with nova notification by processing it through customer processes or default process.
13303	Process Cinder notifications by matching against customer processes, wildcard patterns, or using default processing.
13304	Deal with neutron notification by finding appropriate process based on event type, trying exact match first, then wildcard match, and finally using default process if no match is found.
13305	Process glance notifications by matching event types against customer processes, falling back to wildcard matches, and using a default process if no matches are found.
13306	Process Swift notifications by matching event types against customer processes and default handlers.
13307	Process keystone notifications by matching against customer processes and default handlers.
13308	Handle heat notification processing by searching for matching processes in customer_process, customer_process_wildcard, or using default process.
13309	Serve app using wsgiref or provided server.
13310	Print 'msg' to stdout, and option 'log' at info level.
13311	Print 'msg' to stderr, and option 'log' at info level.
13312	A class decorator for Command classes to register in the default set.
13313	Register a Command class by name and aliases.
13314	If all constraints are satisfied with the given value, defers to the composed AMP argument's toString method.
13315	Converts the string to a value using the composed AMP argument, then checks all constraints against that value.
13316	Merges a dictionary into completers, handling duplicate keys by either raising an error or making them unique with a regex update.
13317	Start ternya work.
13318	Init connection and consumer with openstack mq.
13319	Import customer's service modules.
13320	Initialize OpenStack Nova message queue consumer.

The method checks if Nova notifications are enabled, and if so, creates multiple message queue consumers based on the configured consumer count. It uses the provided MQ instance to set up consumers with the specified exchange and queue names, and processes messages using a Nova-specific processor factory.
13321	Init openstack cinder mq consumer.
13322	Init openstack neutron mq consumer.
13323	Init openstack glance mq consumer.
13324	Init openstack heat mq

1. Check if enable listening heat notification
2. Create consumer
13325	Check if customer enables openstack component notification.
13326	Get music information from Baidu music API.
13327	Process for downloading music with multiple threads.
13328	Execute a code object with optional globals and locals dictionaries.
13329	Implementation of the LOAD_NAME operation
13330	Implement the CALL_FUNCTION operation.
13331	Performs a mysqldump backup of a database.
13332	Render ditaa code into a PNG output file.
13333	Invoked in the 'finally' block of Application.run.
13334	Run Application.main and exits with the return value.
13335	Context manager that changes to directory `path` and returns to CWD when exited.
13336	Copies a directory tree, merging files rather than requiring the destination to not exist.
13337	If called in the context of an exception, calls post_mortem; otherwise set_trace.
13338	Find the time this file was last modified.
13339	Check if a file item has been modified since last access.
13340	Goes through the directory and builds a local cache based on the content of the directory.
13341	Completely resets the database by erasing all information in the local cache and on disc.
13342	Rip the events from a given rss feed, normalize the data and store.
13343	Download the image and return the local path to the image file.
13344	Method to check if an image has changed since it was last downloaded by making a HEAD request to compare Last-Modified headers.
13345	Returns a template.Node subclass.
13346	Find the stack frame of the caller to note the source file name, line number and function name.
13347	Get the C_C in which pe_pe is defined.
13348	Parse command line options and launch the prebuilder.
13349	Find a symbol in the symbol table by name, kind, or both.
13350	Determine if a PE_PE is contained within a EP_PKG or a C_C.
13351	Check if a PE_PE is globally defined, i.e. not inside a C_C
13352	Convert a BridgePoint data type to a pyxtuml meta model type.
13353	Get the related attributes which relate two classes in an association.
13354	Create a named tuple from a BridgePoint enumeration.
13355	Create a python function from a BridgePoint bridge.
13356	Create a python object from a BridgePoint external entity with bridges realized as python member functions.
13357	Create a python function from a BridgePoint function.
13358	Create a python value from a BridgePoint constant.
13359	Create a python function that interprets that action of a BridgePoint class operation.
13360	Create a python property that interprets the action of a BridgePoint derived attribute.
13361	Create a pyxtuml class from a BridgePoint class.
13362	Create a pyxtuml association from a simple association in BridgePoint.
13363	Create pyxtuml associations from a linked association in BridgePoint.
13364	Create a pyxtuml association from a R_REL in ooaofooa.
13365	Create a pyxtuml meta model from a BridgePoint model, optionally restricted to a specific component.
13366	Calls a function and sends results to the collector, supporting function actions that can return, yield, or raise packable objects.
13367	Sends ACCEPT reply.
13368	Sends REJECT reply.
13369	Sends RAISE reply.
13370	Allocates a call id and emits a message.
13371	Waits for the call to be accepted by workers and starts to collect the results.
13372	Dispatches the reply to the proper queue.
13373	Guess the type name of a serialized value.
13374	Deserialize a value of some type.
13375	Handle left parenthesis token in lexical analysis.
13376	Return the right parenthesis token with updated end position.
13377	Retrieve a feature collection by ID, returning None if not found.
13378	Returns an iterable of feature collections for the given content IDs.
13379	Adds feature collections to the store.
13380	Deletes the corresponding feature collection.

If the FC does not exist, then this is a no-op.
13381	Deletes all feature collections.
13382	Deletes the underlying ES index.
13383	Scan for FCs in the given id ranges.
13384	Scan for ids only in the given id ranges.
13385	Scan for FCs with a given prefix.
13386	Scan for ids with a given prefix.
13387	Fulltext search.

Yields an iterable of triples (score, identifier, FC) corresponding to the search results of the fulltext search. The results can be ordered by score when preserve_order is True, but this may decrease performance.
13388	Fulltext search for identifiers.
13389	Perform a keyword scan for feature collections using the given query.
13390	Keyword scan for ids.
13391	Low-level keyword index scan for ids. Retrieves identifiers of FCs that have a feature value in the feature named fname. Note that fname must be indexed.
13392	Maps feature names to ES's "_source" field.
13393	Creates ES filters for key ranges used in scanning.
13394	Create the index.
13395	Create the field type mapping.
13396	Retrieve the field mappings. Useful for debugging.
13397	Retrieve the field types. Useful for debugging.
13398	Creates a disjunction for keyword scan queries.
13399	Take a feature collection in dict form and count its size in bytes.
13400	Count bytes of all feature collections whose key satisfies one of the predicates in ``filter_preds``. The byte counts are binned by filter predicate.
13401	Construct a nice looking string for an FC.
13402	Take care of command line options
13403	Escape the error and wrap it in a span with class "error-message"
13404	Create a human-readable representation of a link on the 'TO'-side
13405	Create a human-readable representation of a unique identifier.
13406	Check the model for uniqueness constraint violations.
13407	Check the model for integrity violations on an association in a particular direction.
13408	Check the model for integrity violations across a subtype association.
13409	Returns a index creation function.
13410	A basic transform for strings and integers.
13411	Add feature collections to the store.
13412	Deletes all storage.

This includes every content object and all index data.
13413	Retrieve feature collections in a range of ids.
13414	Retrieve content ids in a range of ids.
13415	Returns ids that match an indexed value.
13416	Returns ids that match a prefix of an indexed value.
13417	Returns ids that match a prefix of an indexed value, and the specific key that matched the search prefix.
13418	Implementation for index_scan_prefix and index_scan_prefix_and_return_key, parameterized on return value function.
13419	Add an index to this store instance.
13420	Add new index values.
13421	Add new raw index values.
13422	Returns a generator of index triples for the given IDs and feature collections.
13423	Returns index transforms for ``name``.
13424	Check if a package name exists on PyPI.
13425	Adds direction to the element based on language bidirectionality and argument specified.
13426	Get the XSD name of a S_DT.
13427	Get the referred attribute.
13428	Build an xsd simpleType out of a S_CDT.
13429	Build an xsd simpleType out of a S_EDT.
13430	Build an xsd complexType out of a S_SDT.
13431	Build an xsd simpleType out of a S_UDT.
13432	Build a partial xsd tree out of a S_DT and its sub types S_CDT, S_EDT, S_SDT and S_UDT.
13433	Build an xsd complex element out of a O_OBJ, including its O_ATTR.
13434	Build an xsd complex element out of a C_C, including its packaged S_DT and O_OBJ.
13435	Build an xsd schema from a bridgepoint component.
13436	Indent an XML string with four spaces and add line breaks after each node.
13437	Gets the full list of bikes from the bikeregister site by performing a form post request to extract tokens and retrieve bike data.
13438	Set positional information on a node.
13439	Decorator for adding positional information to returning nodes.
13440	Handle double equals token in lexical analysis.
13441	Handle the NOT EQUAL operator token in the lexer.

The function `t_NOTEQUAL` is a lexer rule that matches the "!=" operator pattern. It takes a token `t` as input, updates the token's end position to account for the length of the matched value, and returns the token. This allows the lexer to correctly identify and process the not equal comparison operator during lexical analysis.

```python
Handle the NOT EQUAL operator token in the lexer.
```
13442	Process arrow token pattern matching.
13443	Return the token for the less-than-or-equal operator.
13444	Handle the ">=" token in lexical analysis.
13445	Return the equality token.
13446	Handle dot token in lexer.

The method `t_DOT` is a lexer rule that matches a literal dot character (`.`) in the input text. It sets the `endlexpos` attribute of the token `t` to the position after the dot character, and then returns the token. This is typically used in lexical analysis to tokenize punctuation or special characters in a programming language or markup language.

Note: The example provided appears to be incomplete or incorrectly formatted, as the return statement `return t` would typically be part of a larger lexer implementation where the token `t` has already been properly initialized with the necessary attributes like `type`, `value`, `lexpos`, etc. The typical pattern for such lexer methods would involve setting the token's type and value, and then returning it.

In a more complete context, this method would likely be part of a larger class that inherits from `ply.lex` Lexer, and the actual return statement would reference the token object that was properly initialized with the required attributes.

However, based on the exact code shown, the summary is:
Handle dot token in lexer.
13447	Handle left square bracket token.
13448	Handle right square bracket token in lexer.
13449	Return the question mark token.
13450	Handle less than token in lexical analysis.
13451	Handle greater-than token recognition and position tracking.
13452	Process a plus sign token in the lexer.
13453	Create message content and properties to create queue with QMFv2
13454	Create message content and properties to delete queue with QMFv2
13455	Create message content and properties to list all queues with QMFv2
13456	Create message content and properties to list all exchanges with QMFv2
13457	Create message content and properties to purge queue with QMFv2
13458	Create and format an email message with HTML and plain text content, along with optional attachments.
13459	Returns the text from an image at a given url.
13460	Returns true or false based on if the OCR process has read actual words.
13461	Parse command line options and launch the interpreter
13462	Serialize a value from an xtuml metamodel instance.
13463	Serialize an xtuml metamodel association.
13464	Serialize an xtUML metamodel class.
13465	Function for command line execution
13466	Searches files satisfying query and returns ranked results based on ngram matching.
13467	Partitions a list into two based on a condition.
13468	Run the program with the specified parameters, handling both CLI and API modes with optional database updates and logging configuration.
13469	Adds to the context BiDi related variables
13470	Find links that correspond to the given arguments.
13471	Formalize the association and expose referential attributes on instances.
13472	Compute the lookup key for an instance, i.e. a foreign key that can be used to identify an instance at the end of the link.
13473	Compute the index key that can be used to identify an instance on the link.
13474	Obtain the type of an attribute.
13475	Create and return a new instance.
13476	Obtain a sequence of all instances in the metamodel.
13477	Define a new class in the metamodel and return its metaclass.
13478	Sends header, payload, and topics through a ZeroMQ socket.
13479	Receives header, payload, and topics through a ZeroMQ socket.
13480	Find and report dead code in the project, exiting if too many lines are detected.
13481	Take a string or list of strings and try to extract all the emails
13482	Marks a method as RPC.
13483	Collects methods which are speced as RPC.
13484	If there is a postcode in the url it validates and normalizes it.
13485	Progress to the next identifier, and return the current one.
13486	A System Model contains top-level packages
13487	A Component contains packageable elements
13488	A Package contains packageable elements
13489	Return the average brightness of the image.
13490	Indicate whether or not to enter a case suite.
13491	Given a valid position in the text document, try to find the position of the matching bracket. Returns -1 if unsuccessful.
13492	Convenience method for selecting a character.
13493	Updates the document formatting based on the new cursor position.
13494	Bottleneck to fix up IronPython string exceptions
13495	Create an input hook for running the Qt4 application event loop.
13496	Return a Mapper instance with the given name. If the name already exists, return its instance. Does not work if a Mapper was created via its constructor. Using `Mapper.get()` is the preferred way.
13497	Decorator for registering a path pattern.
13498	Decorator for registering a simple path.
13499	Function for registering a path pattern.
13500	Function for registering a simple path.
13501	Calls the first function matching the urls pattern and method.
13502	Reimplemented to store history.
13503	Called when the up key is pressed. Returns whether to continue processing the event.
13504	Called when the down key is pressed. Returns whether to continue processing the event.
13505	If possible, set the input buffer to a previous history item.
13506	If possible, set the input buffer to a subsequent history item.
13507	Handles replies for code execution, updating session history length information.
13508	Returns whether history movement is locked.
13509	Retrieves a history item, possibly with temporary edits.
13510	Replace the current history with a sequence of history items.
13511	If there are edits to the current input buffer, store them.
13512	Event handler for the button click.
13513	Generates a list of Record objects given a DataFrame.
13514	Converts a collection of Record objects back into a pandas DataFrame.
13515	Runs the full turntable process on a pandas DataFrame
13516	Initializes the given argument structure as properties of the class to be used by name in specific method execution.
13517	Update our SUB socket's subscriptions.
13518	Receive and parse a message, then log it.
13519	Perform an N-way merge operation on sorted lists.
13520	Return an iterator on an object living on a remote engine.
13521	Convert a notebook to the v2 format.
13522	Return this platform's maximum compatible version.
13523	Retrieve a PEP 302 "importer" for the given path item.
13524	Thunk to load the real StringIO on demand
13525	Convert a version string to a chronologically-sortable key.
13526	Return True when distribute wants to override a setuptools dependency.
13527	Add `dist` to working set, associated with `entry`

If `entry` is unspecified, it defaults to the ``.location`` of `dist`.
On exit from this routine, `entry` is added to the end of the working
set's ``.entries`` (if it wasn't already present).

`dist` is only added to the working set if it's for a project that
doesn't already have a distribution in the set, unless `replace=True`.
If it's added, any callbacks registered with the ``subscribe()`` method
will be called.
13528	Find all activatable distributions in `plugin_env` and return a 2-tuple of distributions and error information.
13529	Return absolute location in cache for `archive_name` and `names`
13530	Parse a single entry point from string `src`
13531	Parse and cache metadata
13532	Recompute this distribution's dependencies.
13533	Parse a notebook filename and return the notebook format and name.
13534	Collapse leading whitespace from text based on header type, preserving newlines for 'description' header.
13535	Reimplemented to disconnect signal handlers and event filter.
13536	Reimplemented to connect signal handlers and event filter.
13537	Returns a cursor with text between the start position and the current position selected.
13538	Updates the current item based on the current text.
13539	Registers the models of the app with the given "appName" for the admin site.
13540	Return disk partitions.
13541	Return system CPU times as a named tuple.
13542	Return system per-CPU times as a list of named tuples.
13543	Use the raw Win32 handle of sys.stdin to do non-blocking reads
13544	Use a blocking stdin read
13545	Update visibility of the tab bar based on number of tabs and close window if no tabs remain.
13546	Create a new frontend attached to the same kernel as the current tab.
13547	Insert a tab with a given frontend in the tab bar and give it a name.
13548	Add action to menu and self, with optional shortcut context setting.
13549	Return a function that will execute magic on active frontend.
13550	Clean "All Magics..." menu and repopulate it with the provided list of magic commands.
13551	Forward the close event to every tabs contained by the windows
13552	Generate hashed password and salt for use in notebook configuration.
13553	Verify that a given passphrase matches its hashed version.
13554	Generate an HTML snippet for displaying a boolean value in the admin page, with optional AJAX editing capability or static display based on override parameter.
13555	Generate a short title for an object, indent it depending on the object's depth in the hierarchy.
13556	Collect all fields marked as editable booleans for AJAX requests.
13557	Handle an AJAX toggle_boolean request.
13558	Implement a lookup for object level permissions. Basically the same as ModelAdmin.has_change_permission, but also passes the obj parameter in.
13559	Implement a lookup for object level permissions for delete actions, checking both global settings and object-level permissions.
13560	Add children recursively to a binary tree.
13561	Make a symmetrical binary tree with the specified number of levels.
13562	Submit jobs via client where G describes the time dependencies.
13563	Validate that jobs executed after their dependencies.
13564	Build a set of color attributes in a class.
13565	Return a full copy of the object, optionally renaming it.
13566	Add a new color scheme to the table.
13567	Set the currently active scheme.
13568	Return the lib dir under the 'home' installation scheme
13569	Process subscribe channel's messages and handle different output types like stdout, stderr, pyout and status.
13570	Method to capture raw_input from stdin channel with SIGINT handling and timeout support.
13571	Wait for a kernel to be ready by monitoring its heartbeat.
13572	Sets the style to the specified Pygments style.
13573	Returns a QTextCharFormat for token or None.
13574	Returns a QTextCharFormat for token by formatting it with the document formatter.
13575	Returns a QTextCharFormat for a token by reading a Pygments style.
13576	Searches the PATH for the given command and returns its path
13577	Convert a path to its canonical, case-normalized, absolute version.
13578	Verify that namespace packages are valid
13579	Verify that entry_points map is parseable
13580	Determine if the input source ends in a blank.
13581	Determine if the input source ends in two blanks.
13582	Handle the `files = !ls` syntax.
13583	Handle the `a = %who` syntax.
13584	Handle inputs that start with '>>> ' syntax.
13585	Handle inputs that start classic IPython prompt syntax.
13586	Push one or more lines of input and return whether they form a complete Python block.
13587	Return whether a block of interactive input can accept more input.
13588	Compute the new indentation level for a single line.
13589	Store one or more lines of input, automatically appending a newline if necessary, and update the specified storage attribute with the processed source.
13590	Return input and raw source and perform a full reset.
13591	Process lines when they start with %%, which marks cell magics.
13592	Append new content for a cell magic in line mode.
13593	Process and translate a cell of input.
13594	Push one or more lines of IPython input and return a status code indicating whether the code forms a complete Python block.
13595	Initialize observer storage
13596	Post notification to all registered observers.
13597	Find all registered observers that should receive notification.
13598	Add an observer callback to this notification center.
13599	Add a new background job and start it in a separate thread.
13600	Update the status of the job lists by moving finished jobs to completed or dead lists and updating corresponding report lists.
13601	Report summary for a given job group. Return True if the group had any elements.
13602	Flush a given job group and return True if the group had any elements.
13603	Print the status of newly finished jobs.
13604	Print a status of all jobs currently being managed.
13605	Common initialization for all BackgroundJob objects
13606	Inserts a value in the ListVariable at an appropriate index.
13607	Retrieve a copy of the Environment.  Note that this is a shallow copy.
13608	Declare an environment variable as a special variable.
13609	Declare an environment variable as a list-like special variable.
13610	Declare an environment variable as a set-like special variable.
13611	Change the working directory that processes should be executed in.
13612	Swaps two cities in the route.
13613	Calculates the length of the route.
13614	Create an empty record with specified keys initialized to None.
13615	Ensure that an incorrect table doesn't exist. If a bad (old) table does exist, return False.
13616	Inverse of dict_to_list
13617	Turn a mongodb-style search dict into an SQL query.
13618	Standard warning printer with formatting consistency and multiple warning levels.
13619	Read a config file, validate it with JSON Schema specs, and merge with default values if requested.
13620	Output a simple table with several columns.
13621	Output a link tag.
13622	Output a script tag to a js file.
13623	Output a link tag to a css stylesheet.
13624	Image tag helper.
13625	Subtract the arg from the value.
13626	Multiply the arg with the value.
13627	Divide the arg by the value.
13628	Return the modulo value.
13629	Return the verbose name of a model.
13630	Split user input into initial whitespace, escape character, function part and the rest.
13631	Register command-line options.
13632	Add a builtin and save the original.
13633	Remove an added builtin and re-set the original.
13634	Remove any builtins which might have been added by add_builtins, or restore overwritten ones to their previous values.
13635	Finds the true URL name of a package by implementing case-insensitivity lookup.
13636	Yields all links with the given relations
13637	Turn a command-line argument into a list.
13638	The main entry point to Coverage.
13639	Add a specialized option that is the action to execute.
13640	Callback for an option that adds to the `actions` list.
13641	The bulk of the command line interface to Coverage.
13642	Display an error message, or the named topic.
13643	Deal with help requests.
13644	Check for conflicts and problems in the options. Returns True if everything is ok, or False if not.
13645	Implementation of 'coverage run'.
13646	Implementation of 'coverage debug'.
13647	Reconstruct an object serialized by serialize_object from data buffers.
13648	Set the hook.
13649	decorator to log unhandled exceptions raised in a method
13650	Boolean check for whether a string is a zmq url.
13651	Validate a URL for ZeroMQ.
13652	Validate a potentially nested collection of URLs.
13653	Helper method for implementing `client.pull` via `client.apply`
13654	Selects and returns n random ports that are available.
13655	Turn a function into a remote function.
13656	Turn a function into a parallel remote function.
13657	Call a function on each element of a sequence remotely.
13658	Get the last n items in readline history.
13659	Set the autoindent flag, checking for readline support.
13660	Initialize logging based on command line options.
13661	Save the state of hooks in the sys module.
13662	Restore the state of the sys module.
13663	Register a function for calling after code execution.
13664	Return a new 'main' module object for user code execution.
13665	Cache a main module's namespace to prevent memory leaks while preserving access to objects from the last execution.
13666	Initialize all user-visible namespaces to their minimum defaults.
13667	Get a list of references to all the namespace dictionaries in which IPython might store a user-created object.
13668	Clear all internal namespaces and release references to user objects, optionally starting a new history session.
13669	Delete a variable from the various namespaces, so that, as far as possible, we're not keeping any hidden references to it.
13670	Clear selective variables from internal namespaces based on a specified regular expression.
13671	Inject a group of variables into the IPython user namespace.
13672	Find an object in the available namespaces.
13673	Second part of object finding, to look for property details.
13674	Find an object and return a struct with info about it.
13675	Generic interface to the inspector system.
13676	Sets up the command history, and starts regular autosaves.
13677	One more defense for GUI apps that call sys.excepthook.
13678	Display the exception that just occurred.
13679	Actually show a traceback.

Subclasses may override this method to put the traceback on a different place, like a side channel.
13680	Display the syntax error that just occurred.
13681	Handle auto-indent and insert next input text at the start of each line.
13682	Return the completed text and a list of completions.
13683	Adds a new custom completer function.
13684	Set the frame of the completer.
13685	Execute the given line magic.
13686	Find and return a magic of the given type by name. Returns None if the magic isn't found.
13687	Define a new macro.
13688	Call the given command in a subprocess using os.system.
13689	Print to the screen the rewritten form of the user's command.
13690	Get a list of variable names from the user's namespace.
13691	Evaluate a dict of expressions in the user's namespace.
13692	Evaluate python expression expr in user namespace.
13693	Like safe_execfile, but for .ipy files with IPython syntax.
13694	Special method to call a cell magic with the data stored in self.
13695	Run a complete IPython cell.
13696	Run a sequence of AST nodes with specified interactivity mode.
13697	Activate pylab support at runtime.
13698	Expand python variables in a string.
13699	Make a new tempfile and return its filename.
13700	Return as a string a set of input history slices.
13701	Get a code string from history, file, url, or a string or macro.
13702	This will be executed at the time of exit.

Cleanup operations and saving of persistent data that is done unconditionally by IPython should be performed here.
13703	Broadcast a message from one engine to all others.
13704	Send a message from one to one-or-more engines.
13705	Make function raise SkipTest exception if a given condition is true.
13706	Make function raise KnownFailureTest exception if given condition is true.
13707	Filter deprecation warnings while running the test suite.
13708	List profiles in a given root directory.
13709	List profiles that are bundled with IPython.
13710	Find a distribution matching requirement `req`
13711	Run a command and return its output, with optional event handling and timeout support.
13712	Find and return the full path to an executable file in the environment path, or None if not found.
13713	Support iteration over a file-like object.
13714	Send a string to the child process and return the number of bytes written.
13715	Send a SIGINT to the child process.
13716	Recompile unicode regexes as bytes regexes. Overridden in subclass.
13717	Wait for a pattern to be matched in the stream.
13718	This is the common loop used inside expect. The 'searcher' should be an instance of searcher_re or searcher_string, which describes how and what to search for in the input.
13719	Recompile bytes regexes as unicode regexes.
13720	Search for the first occurrence of search strings in a buffer and return the index of the matching string.
13721	Searches 'buffer' for the first occurrence of one of the regular expressions and returns the index of the matching string, or -1 if no match is found.
13722	Progress Monitor listener that logs all updates to the given logger
13723	Unpack a directory from a file path, using the same interface as for archives. Raises UnrecognizedFormat if the filename is not a directory.
13724	Emit a message to the user.
13725	Get the output of the last command executed.
13726	Wrapper for subprocess.check_output.
13727	Find the source for `filename`.
13728	Returns a sorted list of the arcs actually executed in the code.
13729	Returns a sorted list of the arcs in the code not executed.
13730	Returns a sorted list of the executed arcs missing from the code.
13731	Returns a list of line numbers that have more than one exit.
13732	How many total branches are there?
13733	Return arcs that weren't executed from branch lines.
13734	Get stats about branches.
13735	Set the number of decimal places used to report percentages.
13736	Returns a single percentage value for coverage.
13737	Returns the percent covered as a string without a percent sign, with special handling for values near 0 and 100 to avoid rounding to those values.
13738	Applies cls_name to all needles found in haystack.
13739	Given a list of words, this function highlights the matched text in the given string.
13740	Given a list of words, this function highlights the matched words in the given string.
13741	Run 'func' under os sandboxing
13742	Remove a single pair of quotes from the endpoints of a string.
13743	Indent a string a given number of spaces or tabstops.
13744	Return the input string centered in a 'marquee'.
13745	Format a string for screen printing by removing latex-type format codes.
13746	Equivalent of textwrap.dedent that ignores unindented first line.
13747	Wrap multiple paragraphs to fit a specified width.
13748	Calculate optimal information to columnize a list of strings.
13749	Return list item number i, or default if don't exist.
13750	Returns a nested list and info to columnize items into a formatted table structure.
13751	Collect whitespace-separated fields from string list
13752	Build argv to be passed to kernel subprocess.
13753	Set up SSH tunnels for kernel connections.
13754	Pretty print the object's representation.
13755	Like `pretty` but print to stdout.
13756	Get a reasonable method resolution order of a class and its superclasses for both old-style and new-style classes.
13757	The default print function. Used if an object does not provide one and it's none of the builtin objects.
13758	Factory that returns a pprint function useful for sequences.
13759	Factory that returns a pprint function used by the default pprint of dicts and dict proxies.
13760	The pprint for the super type.
13761	The pprint function for regular expression patterns.
13762	The pprint for classes and types.
13763	Base pprint for all functions and builtin functions.
13764	Base pprint for all exceptions.
13765	Add a pretty printer for a given type.
13766	Add a pretty printer for a type specified by the module and name of a type rather than the type object itself.
13767	Add literal text to the output.
13768	Add a breakable separator to the output.
13769	End a group. See `begin_group` for more details.
13770	Flush data that is left in the buffer.
13771	Pretty print the given object.
13772	Return a color table with fields for exception reporting.
13773	Write row with translations to ods file into specified sheet and row number.
13774	Get the current clipboard's text on Windows.
13775	Get the clipboard's text on OS X.
13776	Get the clipboard's text using Tkinter.
13777	Returns a safe build_prefix for temporary building directories.
13778	Rekey a dictionary that has been forced to use string keys where there should be integer keys by json.
13779	Extract ISO8601 dates from unpacked JSON.
13780	Squash datetime objects into ISO8601 strings.
13781	Default function for packing datetime objects in JSON.
13782	Clean an object to ensure it's safe to encode in JSON.
13783	Verify that self.install_dir is .pth-capable dir, if needed
13784	Write an executable file to the scripts directory
13785	Simple function that takes args, prints a short message, sleeps for a time, and returns the same args.
13786	Create and return the ``ArgumentParser`` which will be used to parse the arguments to this command.
13787	Convert .pyx extensions to .c
13788	Watch iopub channel and print messages.
13789	Create a package finder appropriate to this install command.
13790	Adjust the log level when log_level is set.
13791	Start logging for this application.
13792	Ensure flags dict is valid
13793	Print the alias part of the help.
13794	Print the flag part of the help.
13795	Print the subcommand part of the help.
13796	Print the help for each Configurable class in self.classes.
13797	Print usage and examples.
13798	Fire the traits events when the config is updated.
13799	Initialize a subcommand with argv.
13800	Flatten flags and aliases so command-line arguments override as expected, promoting aliases and flags with single descendents in the class hierarchy.
13801	Parse the command line arguments.
13802	Load a .py based config file by filename and path.
13803	Generate default config file from Configurables
13804	Choose k random elements of array.
13805	Produce a sequence of formatted lines from info.
13806	Write a line of debug output.
13807	Update all the class traits having ``config=True`` as metadata.
13808	Get the help string for this class in ReST format.
13809	Get the help string for a single trait.
13810	Get the config class config section
13811	Unset _instance for this class and singleton parents.
13812	Returns a global instance of this class.
13813	Add detail from traceback inspection to error message of a failure.
13814	A light excepthook, adding a small message to the usual traceback
13815	Reimplemented to ensure that signals are dispatched immediately.
13816	Reimplemented to emit signal.
13817	Read a notebook from a file like object
13818	Read from a pipe ignoring EINTR errors.
13819	Open a command in a shell subprocess and execute a callback.
13820	Split a command line's arguments in a shell-like manner.
13821	Compress a directory history into a new one with at most 20 entries.
13822	Class decorator for all subclasses of the main Magics class.
13823	Utility function to store a function as a magic of a specific kind.
13824	Decorator factory for methods in Magics subclasses.
13825	Decorator factory for standalone functions.
13826	Return dict of documentation of magic functions.
13827	Register one or more instances of Magics with IPython to use their magic functions.
13828	Expose a standalone function as magic function for IPython.
13829	Format a string for latex inclusion.
13830	Parse options passed to an argument string.
13831	Make an entry in the options_table for fn, with value optstr
13832	Show a basic reference about the GUI Console.
13833	Factory function to create a properly initialized task.
13834	Return task info dictionary from task label.
13835	Find and return a callable object from a task info dictionary.
13836	Calculate next run time of this task
13837	Internal instance method to submit this task for running immediately.
13838	Internal instance method run by worker process to actually run the task callable.
13839	Instance method to run this task immediately.
13840	Class method to run a callable with a specified number of iterations
13841	Run a one-shot task immediately.
13842	Set the url file.

The method sets the url file path by joining the security directory and url file name from the configuration, only if the url_file attribute is not already set.
13843	Promote engine to listening kernel, accessible to frontends.
13844	Execute a test described by a YAML file.
13845	Create an interrupt event handle for process synchronization.
13846	Run the poll loop. This method never returns.
13847	Filter a namespace dictionary by name pattern and item type.
13848	Return dictionary of all objects in a namespace dictionary that match type_pattern and filter.
13849	Check for presence of mutually exclusive keys in a dict.
13850	Is called after every pylab drawing command
13851	Send all figures that changed and handle any exceptions safely within IPython.
13852	Draw the given figure and send it as a PNG payload.
13853	Load an IPython extension by its module name.
13854	Unload an IPython extension by its module name.
13855	Generate a list of n random ports near the given port, with the first 5 ports sequential and remaining ports randomly selected in the range [port-2*n, port+2*n].
13856	Initialize tornado webapp and httpserver.
13857	SIGINT handler spawns confirmation dialog
13858	Confirm shutdown on ^C with timeout and user confirmation.
13859	Shutdown all kernels and cleanup connection files.
13860	Price European and Asian options using a Monte Carlo method.
13861	Replace all occurrences of dictionary keys in text with their corresponding values.
13862	Render but don't justify, or update the width or txtwidth attributes.
13863	Launches a localhost kernel, binding to the specified ports.
13864	Create a zipfile and copy it to the working directory with versioned name.
13865	Fix the version in metadata.txt
13866	Return whether an object is mappable or not.
13867	Returns the pth partition of q partitions of seq.
13868	Patch pexpect to prevent unhandled exceptions at VM teardown.
13869	Run the given file interactively.
13870	Run the given source code interactively.
13871	Generate a Cobertura-compatible XML report for the given modules or filenames.
13872	Add to the XML report for a single file.
13873	Download a segment of pi from super-computing.org if the file is not already present.
13874	Add up a list of freq counts to get the total counts.
13875	Read digits of pi from a file and compute the n digit frequencies.
13876	Yield the digits of pi read from a .txt file.
13877	Consume digits of pi and compute 1 digit freq. counts.
13878	Consume digits of pi and compute 2 digits frequency counts.
13879	Consume digits of pi and compute n digits freq. counts.
13880	Plot two digits frequency counts using matplotlib.
13881	Plot one digit frequency counts using matplotlib.
13882	Print the value of an expression from the caller's frame.
13883	User-friendly reverse function that wraps Django's reverse to support additional query parameters.
13884	Return true iff base begins with an underscore but does not both begin and end with double underscores.
13885	A unittest suite for one or more doctest files.
13886	Debug a single doctest docstring.
13887	Debug a test script by executing it with pdb, optionally in post-mortem mode.
13888	Debug a single doctest docstring.
13889	Get all data contained in hashed category 'hashroot' as dict
13890	Compress category 'hashroot' to make hset fast again.
13891	Return all keys in DB, or all keys matching a glob pattern.
13892	Returns whether this record should be printed.
13893	Return the bool of whether `record` starts with any item in `matchers`
13894	Add captured log messages to error output.
13895	Call this to embed IPython at the current point in your program.
13896	Embeds IPython into a running python program.
13897	Prepare new csv writers, write title rows and return them.
13898	Prepare locale directories for writing po files by creating new directories if they don't exist.
13899	Write msgstr for every language with all needed metadata and comment.
13900	Write header into po file for specific lang.
13901	Method to subscribe a user to a service.
13902	Function to initialize option parser for command line arguments.
13903	Run a Python module as though with ``python -m name args...``.
13904	Run a python file as if it were the main program on the command line.
13905	Get source from `filename` and make a code object of it.
13906	Get a code object from a .pyc file.
13907	Return a string for an HTML table.
13908	Set current cursor position and update related boundaries.
13909	Cancel the completion and reset internal variables.
13910	Change the selection index, and make sure it stays in the right range
13911	Move cursor up.
13912	Move cursor down.
13913	Move cursor left.
13914	Move cursor right.
13915	Update the list of completion and highlight the currently selected completion.
13916	Return a dictionary of words and word counts in a string.
13917	Print the n most common words and counts in the freqs dict.
13918	Return the string representation of the job description XML.
13919	Write the XML job description to a file.
13920	Validate the given pin against the schema.
13921	Send a shared pin for the given topics.
13922	Delete a shared pin.
13923	Send a user pin.
13924	Delete a user pin.
13925	Subscribe a user to the given topic.
13926	Get the list of the topics which a user is subscribed to.
13927	Decorate a function to automatically begin and end a task on the progress monitor.
13928	Call before starting work on a monitor, specifying name and amount of work
13929	Wrap code into a begin and end call on this monitor.
13930	Create a submonitor with the given units and ensure proper cleanup.
13931	Increment the monitor with N units worked and an optional message.
13932	Create a sub monitor that stands for N units of work in this monitor.
13933	Signal that this task is done.
13934	Print a string, piping through a pager.
13935	If the build location was a temporary directory, this will move it to a new more permanent location.
13936	Load multiple Python config files, merging each of them in turn.
13937	Load the config from a file and return it as a Struct.
13938	Load the config file into self.config, with recursive loading.
13939	Update self.config from a flag, which can be a dict or Config.
13940	Decode argv if bytes, using stdin.encoding, falling back on default encoding.
13941	Parse the configuration and generate the Config object.
13942	Parse command line arguments and return as a Config object.
13943	Parse command-line arguments and store results in self.parsed_data and self.extra_args.
13944	Convert parsed data to configuration, handling unrecognized extra arguments via KVLoader.
13945	Find the path of a module by name, returning only the file path or None if the module is missing or doesn't have a .py or .pyw extension.
13946	Register a callback to be called with this Launcher's stop_data when the process actually finishes.
13947	Call this to trigger startup actions.
13948	Call this to trigger process stop actions.
13949	Send INT signal, wait a delay, and then send KILL signal.
13950	Build and return the complete argument list for the MPI command by combining all relevant components.
13951	Start n instances of the program using mpiexec.
13952	Send a single file to a remote location using SCP.
13953	Fetch a single file from remote location to local path with retry logic.
13954	Determine engine count from `engines` dict.
13955	Start engines by profile or profile_dir.
13956	Start n copies of the process using the Win HPC job scheduler.
13957	Load the default context with the default values for the basic keys.
13958	Take the output of the submit command and return the job id.
13959	Instantiate and write the batch script to the work_dir.
13960	Start n copies of the process using a batch system.
13961	Reimplemented to return a custom context menu for images.
13962	Append raw JPG data to the widget.
13963	Append raw PNG data to the widget.
13964	Append raw SVG data to the widget.
13965	Adds the specified QImage to the document and returns a QTextImageFormat that references it.
13966	Copies the ImageResource with 'name' to the clipboard.
13967	Returns the QImage stored as the ImageResource with the specified name.
13968	Insert a raw image (jpg or png) into the document at the specified cursor position.
13969	Insert raw SVG data into the widget.
13970	Shows a save dialog for the ImageResource with 'name'.
13971	Stop eventloop when exit_now fires.
13972	Configure the user's environment.
13973	Called to show the auto-rewritten input for autocall and friends.
13974	Engage the exit actions.
13975	Send the specified text to the frontend to be presented at the next input cell.
13976	Read a filename as UTF-8 configuration data.
13977	Read a list of strings from a configuration section and option.
13978	Read a list of full-line strings.

The method retrieves a newline-separated list of strings from the specified section and option, strips whitespace from each value, and returns the resulting list with empty lines filtered out.
13979	Read configuration from the `env_var` environment variable.
13980	Read config values from `kwargs`.
13981	Read configuration from a .rc file.
13982	Set an attribute on self if it exists in the ConfigParser.
13983	Expand '~'-style usernames in strings.
13984	Set the delimiters for line splitting.
13985	Split a line of text with a cursor at the given position.
13986	Compute matches when text is a simple name.
13987	Compute matches when text contains a dot.
13988	Update the splitter and readline delims when greedy is changed.
13989	Match filenames, expanding ~USER type strings.
13990	Match internal system aliases.
13991	Match attributes or global python names.
13992	Return the list of default arguments of obj if it is callable, or empty list otherwise.
13993	Find completions for the given text and line context.
13994	Return the state-th possible completion for 'text'.
13995	Check if a specific record matches tests.
13996	Find all the matches for a check dict.
13997	Extract subdict of keys.
13998	Should we silence the display hook because of ';'?
```
13999	Write the output prompt.

The method writes the output prompt to stdout using the shell's separate_out and prompt_manager, with conditional writing based on do_full_cache flag.
14000	Write the format data dict to the frontend.
14001	Log the output.
14002	Raise `InvalidOperationException` if is freezed.
14003	Convert a MySQL TIMESTAMP to a Timestamp object.
14004	Schedule call to eventloop from IOLoop
14005	Dispatch control requests.
14006	Dispatch shell requests.
14007	Register dispatchers for streams.
14008	Step eventloop just once.
14009	Publish the code request on the pyin stream.
14010	Abort a specific msg by id.
14011	Clear our namespace.
14012	Generate prefixed topic for IOPub messages with engine or kernel base depending on int_id.
14013	Actions taken at shutdown by the kernel, called by python's atexit.
14014	Copy sys.modules onto my mod stack
14015	Pop the module stack and restore sys.modules to its previous state.
14016	Return absolute, normalized path to directory, if it exists; None otherwise.
14017	A name is file-like if it is a path that exists, or it has a directory part, or it ends in .py, or it isn't a legal python identifier.
14018	Is obj a class? Inspect's isclass is too liberal and returns True for objects that can't be subclasses of anything.
14019	Check if a path is a package directory.
14020	Find the full dotted package name for a given python source file name. Returns None if the file is not a python source file.
14021	Draw a 70-char-wide divider, with label in the middle.
14022	Sort key function factory that puts items that match a regular expression last.
14023	Make a function imported from module A appear as if it is located in module B.
14024	Make a class appear to reside in a different module than where it is actually defined.
14025	Return system CPU times as a namedtuple.
14026	Return process cmdline as a list of arguments.
14027	Return files opened by process.
14028	Return network connections opened by a process as a list of namedtuples.
14029	Check if a user is in a certain group. By default, the check is skipped for superusers.
14030	Load a class by a fully qualified class path.
14031	Calculate percentage usage of 'used' against 'total'.
14032	A simple memoize decorator for functions.
14033	A decorator which can be used to mark functions as deprecated.
14034	Login into Google Docs with user authentication info.
14035	Parse GDocs key from Spreadsheet url.
14036	Make sure temp directory exists and create one if it does not.
14037	Clear temp directory from created csv and ods files during communicator operations.
14038	Uploads file to GDocs spreadsheet.
14039	Synchronize local po files with translations on GDocs Spreadsheet.
14040	Download csv files from GDocs and convert them into po files structure.
14041	Upload all po files to GDocs ignoring conflicts.
14042	Clear GDoc Spreadsheet by sending empty csv file.
14043	Start a new qtconsole connected to our kernel.
14044	Check whether the URL is accessible and returns HTTP 200 OK, otherwise raise ValidationError.
14045	Check whether the HTML page contains the specified content and return a boolean value.
14046	Visit the URL and return the HTTP response code as an integer.
14047	Compare the content type header of a URL with a given content type and return a boolean result.
14048	Compare the response code of a URL with a given code and return a boolean result.
14049	Validate the display data.
14050	Clear the output of the cell receiving output.
14051	Find absolute path to executable command in a cross platform manner.
14052	Construct a list of CodeUnits from polymorphic inputs.
14053	A base for a flat filename to correspond to this code unit.
14054	Return an open file for reading the source of the code unit.
14055	Does it seem like this file should contain Python?
14056	Return the total number of seconds in a timedelta object, compatible with Python 2.6 and later versions.
14057	Return the result when it arrives.
14058	Wait until the result is available or until timeout seconds pass.
14059	Get the results as a dict, keyed by engine_id.
14060	Abort my tasks.
14061	Elapsed time since initial submission.
14062	Interactive wait with progress printing at regular intervals.
14063	Republish individual displaypub content dicts.
14064	Wait for the 'status=idle' message that indicates we have all outputs.
14065	Wait for result to complete.
14066	Return the absolute normalized form of `filename`.
14067	Prepare the file patterns for use in a `FnmatchMatcher`.
14068	Find the path separator used in this string, or os.sep if none.
14069	Yield all of the importable Python files in `dirname`, recursively.
14070	Return the relative form of `filename` relative to the current directory when the `FileLocator` was constructed.
14071	Return a canonical filename for `filename`.
14072	Get data from a zip file if the filename indicates a zip file path.
14073	Does `fpath` indicate a file in one of our trees?
14074	Does `fpath` match one of our filename patterns?
14075	Map `path` through the aliases.
14076	Start a kernel with PyQt4 event loop integration.
14077	Start a kernel with wx event loop support.
14078	Start a kernel with the Tk event loop.
14079	Start the kernel, coordinating with the GTK event loop
14080	Start the kernel, coordinating with the Cocoa CFRunLoop event loop via the matplotlib MacOSX backend.
14081	Enable integration with a given GUI
14082	Creates an NxN element of the Gaussian Orthogonal Ensemble
14083	Compute the eigvals of mat and then find the center eigval difference.
14084	Return num eigenvalue diffs for the NxN GOE ensemble.
14085	Initialize the item.
14086	Parse a YAML file containing test steps.
14087	Parse a step dictionary and return a list of steps.
14088	Create a crash handler, typically setting sys.excepthook to it.
14089	Load the configuration file.
14090	Initialize the profile directory by finding or creating it based on configuration and profile settings.
14091	Auto generate default config file and stage it into the profile.
14092	Write the collected coverage data to a file.
14093	Erase the data, both in this object, and from its file storage.
14094	Return the map from filenames to lists of line numbers executed.
14095	Return the map from filenames to lists of line number pairs.
14096	Write the coverage data to a file.
14097	Read the coverage data from `filename`.
14098	Return the raw pickled data from `filename`.
14099	Return the stored coverage data from the given file.
14100	Combine a number of data files together into one.
14101	Add executed line data.

The method takes line data in the form of a dictionary mapping filenames to line numbers and updates the internal lines dictionary with this data. It uses setdefault to ensure the filename key exists in the lines dictionary, then updates the corresponding line numbers.
14102	Add measured arc data.

The method adds arc data to the object's arcs dictionary. The arc_data parameter is a dictionary where keys are filenames and values are dictionaries mapping arc tuples to None. For each filename and its associated arcs in arc_data, the method updates the corresponding entry in self.arcs with the new arcs, preserving existing entries and adding new ones.
14103	Contribute `filename`'s data to the Md5Hash `hasher`.
14104	Return a dict summarizing the coverage data.
14105	Yield pasted lines until the user enters the given sentinel value.
14106	Start the mainloop.
14107	Store multiple lines as a single entry in history
14108	Write a prompt and read a line.
14109	The bottom half of the syntax error handler called in the main loop.

Loop until syntax error is fixed or user cancels.
14110	Utility routine for edit_syntax_error that determines whether to recompile based on error context and user input.
14111	Handle interactive exit by confirming with user before calling the ask_exit callback.
14112	Returns the correct repository URL and revision by parsing the given repository URL.
14113	Create and return new frontend attached to new kernel, launched on localhost.
14114	Configure the coloring of the widget based on color settings and style preferences.
14115	Return the connection info for this object's sockets.
14116	Convert an R object to a Python-friendly format, with optional data frame handling.
14117	Return the entire source file and starting line number for an object.
14118	Shorthand access to the color table scheme selector method.
14119	Toggle between the currently active color scheme and NoColor.
14120	Return formatted traceback.
14121	Return a color formatted string with the traceback info.
14122	Format a list of traceback entry tuples for printing.
14123	Format the exception part of a traceback.
14124	Only print the exception type and message, without a traceback.
14125	Call up the pdb debugger if desired, always clean up the tb reference.
14126	Switch to the desired mode, cycling through available modes if none specified.
14127	View decorator for requiring a user group.
14128	Handle 'from module import a, b, c' imports.
14129	Add a line of source to the code.
14130	Add a section, a sub-CodeBuilder.
14131	Compile the code, and return the function `fn_name`.
14132	Generate a Python expression for `expr`.
14133	Render this template by applying it to `context`.
14134	Evaluate dotted expressions at runtime.
14135	A shortcut function to render a partial template with context and return the output.
14136	Activate the default formatters.
14137	Add a format function for a given type.
14138	Add a format function for a type specified by the full dotted module and name of the type.
14139	float_precision changed, set float_format accordingly.
14140	Return path to any existing user config files
14141	Configure the nose running environment, parse command line arguments and configuration files, set up test collection options, and initialize logging and plugin configuration.
14142	Configure logging for nose and optionally other packages with debug level settings.
14143	Configure the working directory or directories for the test run.
14144	Very dumb 'pager' in Python, for when nothing else works.
14145	Print a string, piping through a pager after a certain length.
14146	Page a file, using an optional pager command and starting line.
14147	Return a pager command suitable for the operating system.
14148	Return the string for paging files with an offset.
14149	Print a string snipping the midsection to fit in width.
14150	A function to pretty print sympy Basic objects.
14151	A function to display sympy expression using inline style LaTeX in PNG.
14152	Display sympy expression using display style LaTeX in PNG.
14153	Return True if type o can be printed with LaTeX.
14154	A function to generate the latex representation of sympy expressions.
14155	Non-camel-case version of func name for backwards compatibility. DEPRECATED: Do not use this method, use `options <nose.plugins.base.IPluginInterface.options>` instead.
14156	Validate that the input is a list of strings.
14157	Validate that the input is a dict with string keys and values.
14158	Run my loop, ignoring EINTR events in the poller
14159	Callback for stream.on_recv that unpacks message and calls handlers with it.
14160	Execute code in the kernel.
14161	Tab complete text in the kernel's namespace.
14162	Get metadata information about an object.
14163	Get entries from the history list.
14164	Request an immediate kernel shutdown.
14165	Immediately processes all pending messages on the SUB channel.
14166	Send a string of raw input to the kernel.
14167	Starts the channels for this kernel.
14168	Stops all the running channels for this kernel.
14169	Are any of the channels created and running?
14170	Load connection information from JSON file.
14171	Write connection info to JSON dict in self.connection_file.
14172	Starts a kernel process and configures the manager to use it.
14173	Attempts to stop the kernel process cleanly, with fallback to killing if necessary.
14174	Restarts a kernel with the arguments that were used to launch it.
14175	Kill the running kernel.
14176	Interrupts the kernel with well-supported platform-specific operations.
14177	Sends a signal to the kernel if one is running, otherwise raises an error.
14178	Is the kernel process still running?
14179	Get the REQ socket channel object to make requests of the kernel.
14180	Get the SUB socket channel object.
14181	Get the heartbeat socket channel object to check that the kernel is alive.
14182	Bind an Engine's Kernel to be used as a full IPython kernel.
14183	Emit a debugging message depending on the debugging level.
14184	Retrieve the extension classes in priority order.
14185	Called prior to executing a step.
14186	Called after executing a step.
14187	Called at the end of processing to allow extensions to emit additional data or alter the return value.
14188	Walk an unpacked egg's contents, skipping the metadata directory.
14189	Check whether module possibly uses unsafe-for-zipfile stuff
14190	Create and run the IPython controller.
14191	Save a connection dict to json file.
14192	Load configuration from existing JSON connector files.
14193	Load secondary configuration from JSON and set defaults.
14194	Implementation used by %px and %%parallel for parallel execution on engine(s).
14195	Enable %autopx mode by saving the original run_cell and installing pxrun_cell.
14196	Disable %autopx by restoring the original InteractiveShell.run_cell.
14197	Execute a code cell remotely, handling syntax errors and magic commands.
14198	Process task runs from heartbeat messages.
14199	Internal ``RUN_TASK`` consumer to run the task's callable
14200	Internal ``KILL_TASK`` consumer to remove retired tasks
14201	Patch the protocol's makeConnection and connectionLost methods to make the protocol and its transport behave more like what `Agent` expects.
14202	Patch a method onto an object if it isn't already there.
14203	Accept a pending connection.
14204	Reject a pending connection.
14205	Returns an IAgent that makes requests to this fake server.
14206	Calls pre and post save hooks.
14207	Calls pre and post delete hooks for DeleteViews.
14208	Use SaveHookMixin pre_save to set the user.
14209	Writes a report summarizing coverage statistics per module.
14210	Check whether some modules need to be reloaded.
14211	Open the default editor at the given filename and linenumber.
14212	Open the editor at the given filename, linenumber, column and show an error message. This is used for correcting syntax errors. The current implementation only has special support for the VIM editor, and falls back on the 'editor' hook if VIM is not used.
14213	Get text from the clipboard.
14214	Add a func to the cmd chain with given priority.
14215	Try to create a Distribution from a path or module, handling various file types and module types, returning None if parsing fails.
14216	Configure which kinds of exceptions trigger plugin.
14217	Import and return an item given a string specification like foo.bar.
14218	Attempt to make an SSH connection without a password.
14219	Try passwordless login with shell ssh command.
14220	Try passwordless login with paramiko.
14221	Connect a socket to an address via an SSH tunnel.
14222	Open a tunneled connection from a 0MQ url.
14223	Stop scheduling tasks because an engine has been unregistered from a pure ZMQ scheduler.
14224	Unwrap exception and remap engine_id to int.
14225	Register a new engine, and update our connection info.
14226	Unregister an engine that has died.
14227	Save the reply to an execute_request into our results.
14228	Flush notifications of engine registrations waiting in ZMQ queue.
14229	Flush task or queue results waiting in ZMQ queue.
14230	Flush replies from the control channel waiting in the ZMQ queue.

Currently: ignore them.
14231	Flush ignored control replies by receiving and decrementing the counter.
14232	Flush replies from the iopub channel waiting in the ZMQ queue.
14233	Target function for use in spin_thread.
14234	Stop background spin_thread, if any
14235	Flush any registration notifications and execution results waiting in the ZMQ queue.
14236	Waits on one or more jobs, for up to timeout seconds.

Returns True when all msg_ids are done, False if timeout reached with some msg_ids still outstanding.
14237	Construct and send an apply message via a socket.
14238	Construct and send an execute request via a socket.
14239	Retrieve a result by msg_id or history index, wrapped in an AsyncResult object.
14240	Fetch the status of engine queues.
14241	Tell the Hub to forget results.

The method allows purging individual results by msg_id or entire history by target. It accepts parameters for jobs (msg_ids) and targets (int/str IDs), validates inputs, constructs appropriate message IDs, sends a purge request to the hub, and handles the response. Use purge_results('all') to scrub everything from the Hub's db.
14242	Get the Hub's history

The method retrieves the Hub's history, which is a list of message IDs ordered by task submission time. It sends a history request to the session and processes the response to return the history content.

Returns:
    msg_ids : list of strs
        list of all msg_ids, ordered by task submission time.
14243	Query the Hub's TaskRecord database and return matching task record dictionaries.
14244	Return a set of opcodes by the names in `names`.
14245	Create a ByteParser on demand.
14246	Find the lines matching one of a list of regexes.
14247	Parse the source to find the interesting facts about its lines.
14248	Return the first line number of the statement including the given line.
14249	Map line numbers to their correct first line of statement, skipping ignored lines, and return a set of first lines.
14250	Parse source text to find executable lines, excluded lines, etc.
14251	Get information about the arcs available in the code.
14252	Get a mapping from line numbers to count of exits from that line.
14253	Iterate over all the code objects nested within this one.
14254	Map byte offsets to line numbers in `code`.
14255	Find the statements in `self.code`.

Produce a sequence of line numbers that start statements. Recurses into all code objects reachable from `self.code`.
14256	Get a string version of `block_stack`, for debugging.
14257	Split the code object into a list of `Chunk` objects.
14258	Validate the rule that chunks have a single entrance.
14259	Find the executable arcs in the code.

Yields pairs: (from,to).  From and to are integer line numbers.  If
from is < 0, then the arc is an entrance into the code object.  If to
is < 0, the arc is an exit from the code object.
14260	Returns a list of `Chunk` objects for this code and its children.
14261	Get the set of all arcs in this code object and its children.
14262	Add options to command line.
14263	Begin recording coverage information.
14264	Output code coverage report.
14265	If inclusive coverage enabled, return true for all source files in wanted packages.
14266	Generate alternative interpretations of a source distro name.
14267	Open a urllib2 request, handling HTTP authentication
14268	Obtain a distribution suitable for fulfilling the specified requirement.
14269	Get the parent object from a given object by traversing its qualified name and module structure.
14270	Return the root topic string for the engine, using its ID if available, otherwise returning "engine".
14271	Renders a context aware template.
14272	Configure plugin. Plugin is enabled by default.
14273	Add captured output to error report.
14274	Turn a list into a list of lists by splitting it into chunks of specified size.
14275	Convert a notebook to the v3 format.
14276	Convert a hex color to rgb integer tuple.
14277	Construct the keys to be used building the base stylesheet from a template.
14278	Return a font of the requested family, using fallback as alternative.
14279	Reimplemented to support prompt requests.
14280	Handle history tail replies from IPython kernel, including error handling and retry logic for failed requests.
14281	Reimplemented for IPython-style "display hook".
14282	Handle the ``display_data`` message by processing and displaying HTML or plain text content from the message.
14283	Reimplemented to make a history request and load %guiref.
14284	Reimplemented to use the 'run' magic.
14285	Reimplemented for IPython-style traceback formatting.
14286	Reimplemented to dispatch payloads to handler methods.
14287	Sets the widget style to the class defaults.
14288	Opens a Python script for editing.
14289	Given a prompt number, returns an HTML In prompt.
14290	Given a plain text version of an In prompt, returns an HTML continuation prompt.
14291	Set the style sheets of the underlying widgets.
14292	Set the style for the syntax highlighter.
14293	Handles the response returned from the CloudStack API, including asynchronous job handling and result polling.
14294	Generate a signature for CloudStack API requests by hashing URL parameters with HMAC-SHA1.
14295	Transforms CloudStack API response data by removing the first level of nesting and returning the simplified response.
14296	Return system virtual memory information as a named tuple.
14297	Return system per-CPU times as a named tuple
14298	Return real, effective and saved user ids.
14299	Return real, effective and saved group ids.
14300	Return the number of threads belonging to the process.
14301	Return files opened by process as a list of namedtuples.
14302	Get short form of commit hash given directory `pkg_path`

We get the commit hash from (in order of preference):

* IPython.utils._sysinfo.commit
* git output, if we are in a git repository

If these fail, we return a not-found placeholder tuple
14303	Return dict describing the context of this package
14304	Return useful information about IPython and the system, as a string.
14305	Return the number of active CPUs on a Darwin system.
14306	Return the effective number of CPUs in the system as an integer.
14307	Advance to the next result set.
14308	Fetches a single row from the cursor.
14309	Fetch up to size rows from the cursor. Result set may be smaller than size. If size is not defined, cursor.arraysize is used.
14310	Fetch all available rows from the cursor.
14311	Called on the engines, this function connects the communication component with the specified peers, tree, publish URL, and root ID.
14312	Read a JSON notebook from a string and return the NotebookNode object.
14313	Read a .py notebook from a string and return the NotebookNode object.
14314	Read a notebook from a string and return the NotebookNode object.
14315	Write a notebook to a string in a given format in the current nbformat version.
14316	Write a notebook to a file in a given format in the current nbformat version.
14317	Convert notebooks to have notebook metadata.
14318	Try load value from dict. If key is not exists, mark as state unset.
14319	Does the name match my requirements?
14320	Is the class a wanted test class?
14321	Is the directory a wanted test directory?
14322	Is the file a wanted test file?
14323	Is the function a test function?
14324	Is the method a test method?
14325	Check if the module is a test module based on naming conventions and plugin requirements.
14326	Return the contents of a named file as a list of lines.
14327	List command to use if we have a newer pydb installed
14328	The printing (as opposed to the parsing part of a 'list' command).
14329	The debugger interface to magic_pdef
14330	Generates a multiplying factor used to convert two currencies
14331	Converts an amount of money from one currency to another on a specified date.
14332	Compute the return of the currency between two dates.
14333	Return the given stream's encoding or a default.
14334	Return IPython's guess for the default encoding for bytes as text.
14335	Write connection info to JSON file.
14336	Start the heart beating process by creating a heartbeat channel and beginning the heartbeat process.
14337	Display connection info and store ports.
14338	Create our session object.
14339	Redirect input streams and set a display hook.
14340	Create the Kernel object itself
14341	Construct connection function, which handles tunnels.
14342	Send the registration request.
14343	Converts HTML content to plain text.
14344	Converts markdown content to text.
14345	Returns a fully qualified app domain name.
14346	Define the command line options for the plugin.
14347	Configure plugin based on command line options
14348	Check if directory is eligible for test discovery
14349	Return true if 'ext' links to a dynamic lib in the same package
14350	Call each function from a list with given arguments and return the last function's return value or None if the list is empty.
14351	Call each function from the reversed function list and return the last function's return value or None if the function list is empty.
14352	Append a function with given arguments and keywords.
14353	Insert a function with given arguments and keywords at the specified index.
14354	Ensure there is only one newline between usage and the first heading if there is no description.
14355	Initialize the app.
14356	Create a .pid file in the pid_dir with my pid.
14357	Remove the pid file.

### Example 2:
Input:
def settext(self, text, cls='current'):
        """Set the text for this element.

        Arguments:
            text (str): The text
            cls (str): The class of the text, defaults to ``current`` (leave this unless you know what you are doing). There may be only one text content element of each class associated with the element.
        """
        self.replace(TextContent, value=text, cls=cls)
Output:
Set the text for this element.

### It is your turn now! Summarizing the follwing code into summary. Please output the answer directly as shown in the example(s) if provided.###
Input:
def remove_pid_file(self):
        """Remove the pid file.

        This should be called at shutdown by registering a callback with
        :func:`reactor.addSystemEventTrigger`. This needs to return
        ``None``.
        """
        pid_file = os.path.join(self.profile_dir.pid_dir, self.name + u'.pid')
        if os.path.isfile(pid_file):
            try:
                self.log.info("Removing pid file: %s" % pid_file)
                os.remove(pid_file)
            except:
                self.log.warn("Error removing the pid file: %s" % pid_file)
Output:
Remove the pid file.
14358	Get the pid from the pid file.
14359	Construct an argument parser using the function decorations.
14360	Find the real name of the magic.
14361	Highlight a block of text selectively based on prompt identification.
14362	Reimplemented to temporarily enable highlighting if disabled.
14363	Reimplemented to highlight selectively.
14364	Copy the currently selected text to the clipboard, removing prompts.
14365	Execute 'source'. If 'hidden', do not show any output.
14366	Called immediately after a prompt is finished, i.e. when some input will be processed and a new prompt displayed.
14367	Called when the tab key is pressed. Returns whether to continue processing the event.
14368	Reimplemented to add an action for raw copy.
14369	Reimplemented for execution interruption and smart backspace.
14370	Reimplemented for auto-indentation.
14371	Handle replies for tab completion.
14372	Silently execute `expr` in the kernel and call `callback` with reply
14373	Execute callback corresponding to msg reply, after _silent_exec_callback
14374	Handles replies for code execution.
14375	Handle requests for raw_input.
14376	Handle the kernel's death by asking if the user wants to restart.
14377	Handle replies for call tips.
14378	Handle display hook output.
14379	Handle stdout, stderr, and stdin.
14380	Handle shutdown signal from other console, with options to exit or reset based on kernel state and restart flag.
14381	Attempts to execute file with 'path'. If 'hidden', no output is shown.
14382	Attempts to interrupt the running kernel and unset _reading flag.
14383	Resets the widget to its initial state, clearing traces if requested or printing a visual indication of kernel restart.
14384	Attempts to restart the running kernel.
14385	Shows a call tip, if appropriate, at the current cursor location.
14386	Performs completion at the current cursor location.
14387	Process a reply for an execution request that resulted in an error.
14388	Process a reply for a successful execution request.
14389	Called whenever the document's content changes. Display a call tip if appropriate.
14390	Add plugin to my list of plugins to call, if it has the attribute I'm bound to.
14391	Call plugins in a chain, where the result of each plugin call is sent to the next plugin as input. The final output result is returned.
14392	Call all plugins, yielding each item in each non-None result.
14393	Call all plugins, returning the first non-None result.
14394	Configure the set of plugins with the given options and config instance. After configuration, disabled plugins are removed from the plugins list.
14395	Load plugins by iterating the `nose.plugins` entry point.
14396	Load plugins in nose.plugins.builtin
14397	Render a LaTeX string to PNG using specified backend.
14398	Render LaTeX to HTML with embedded PNG data using data URIs.
14399	Renders a math expression to an image file using matplotlib.
14400	Find an installed distribution that satisfies or conflicts with this requirement, and set self.satisfied_by or self.conflicts_with appropriately.
14401	Return a generator yielding a Process class instance for all running processes on the local machine.
14402	Return the current system-wide CPU utilization as a percentage.
14403	Utility method returning process information as a hashable dictionary.
14404	The process name.
14405	Get the process executable path, with fallback to cmdline[0] if unavailable.
14406	Return the children of this process as a list of Process objects. If recursive is True return all the parent descendants.
14407	Return a float representing the current process CPU utilization as a percentage.
14408	Compare physical system memory to process resident memory and calculate process memory utilization as a percentage.
14409	Return process's mapped memory regions as a list of nameduples, with optional grouping by path.
14410	Return whether this process is running.
14411	Suspend process execution.
14412	Resume process execution.
14413	Kill the current process.
14414	Wait for process to terminate and return its exit code.
14415	Initializes the kernel inside GTK and sets up periodic iteration.
14416	Hijack key GTK functions for IPython integration.
14417	Check if the given identifier is defined in namespaces that shadow alias and magic namespaces.
14418	Create the default transformers.
14419	Register a transformer instance.
14420	Unregister a transformer instance.
14421	Create the default checkers.
14422	Register a checker instance.
14423	Unregister a checker instance.
14424	Create the default handlers.
14425	Register a handler instance by name with esc_strings.
14426	Unregister a handler instance by name with esc_strings.
14427	Prefilter a line that has been converted to a LineInfo object.
14428	Find a handler for the line_info by trying checkers.
14429	Calls the enabled transformers in order of increasing priority.
14430	Prefilter a single input line as text by invoking transformers and checkers/handlers.
14431	Prefilter multiple input lines of text.
14432	Check if an object in user_ns is an IPyAutocall instance and return the auto handler if so.
14433	Allow ! and !! in multi-line statements if multi_line_specials is on
14434	Check for escape character and return either a handler to handle it, or None if there is no escape char.
14435	Check if the initial identifier on the line is an alias.
14436	Handle normal input lines.
14437	Handle alias input lines.
14438	Execute the line in a shell, empty return value
14439	Execute magic functions.
14440	Handle lines which can be auto-executed, quoting if requested.
14441	Try to get some help for the object.
14442	Reimplemented to hide on certain key presses and on text edit focus changes.
14443	Reimplemented to cancel the hide timer.
14444	Reimplemented to paint the background panel.
14445	Attempts to show the specified call line and docstring at the current cursor location. The docstring is possibly truncated for length.
14446	Attempts to show the specified tip at the current cursor location.
14447	Updates the tip based on user cursor movement.
14448	Create a property that proxies an attribute through a local attribute.
14449	Canonicalizes a path relative to a given working directory into absolute form.
14450	Schema validation helper that performs JSONSchema validation and raises exceptions of a designated class with simplified error messages.
14451	Retrieve a read-only subordinate mapping with masked sensitive values.
14452	Return True if in a venv and no system site packages.
14453	Parallel word frequency counter.
14454	Convert a function based decorator into a class based decorator usable on class based Views.
14455	Return list of shell aliases to auto-define.
14456	Define an alias, but don't raise on an AliasError.
14457	Define a new alias after validating it.
14458	Validate an alias and return its number of arguments.
14459	Call an alias given its name and the rest of the line.
14460	Transform alias to system command string.
14461	Expand an alias in the command line.
14462	Produces rst from nose help.
14463	Reset graphics attributes to their default values.
14464	Yields substrings for which the same escape code applies.
14465	Returns a QColor for a given color code, or None if one cannot be constructed.
14466	Returns a QTextCharFormat that encodes the current style attributes.
14467	Generate a one-time jwt with an age in seconds
14468	Use a thread lock on current method, if self.lock is defined
14469	Run by housekeeper thread to clean expired JWTs.
14470	Check if a JWT has been used.
14471	Check if a JWT token is valid by decoding it, verifying expiration, and ensuring it hasn't been reused.
14472	Use `Semaphore` to keep func access thread-safety.
14473	Get common prefix for completions
14474	Reimplemented to ensure a console-like behavior in the underlying text widgets.
14475	Reimplemented to suggest a size that is 80 characters wide and 25 lines high.
14476	Returns whether text can be cut to the clipboard.
14477	Returns whether text can be pasted from the clipboard.
14478	Clear the console.
14479	Copy the currently selected text to the clipboard and delete it if it's inside the input buffer.
14480	Executes source or the input buffer, possibly prompting for more input.
14481	Get the text that the user has entered at the current prompt.
14482	Sets the text in the input buffer.
14483	Sets the base font for the ConsoleWidget to the specified QFont.
14484	Paste the contents of the clipboard into the input region.
14485	Print the contents of the ConsoleWidget to the specified QPrinter.
14486	Moves the prompt to the top of the viewport.
14487	Sets the font to the default fixed-width font for this platform.
14488	A low-level method for appending content to the end of the buffer.
14489	Appends HTML at the end of the console buffer.
14490	Appends HTML and returns the plain text version of it.
14491	Appends plain text, processing ANSI codes if enabled.
14492	Clears the "temporary text" buffer by removing all text following the prompt region and resets the undo/redo history.
14493	Performs completion with 'items' at the specified cursor location.
14494	Fill the area below the active editing zone with text.
14495	Given a KeyboardModifiers flags object, return whether the Control key is down.
14496	Creates and connects the underlying text widget.
14497	Creates and connects the underlying paging widget.
14498	Filter key events for the paging widget to create console-like interface.
14499	Given a QTextBlock, return its unformatted text.
14500	Convenience method that returns a cursor for the last character.
14501	Returns the column of the cursor in the input buffer, excluding the prompt contribution, or -1 if no such column exists.
14502	Returns the text of the line of the input buffer that contains the cursor, or None if there is no such line.
14503	Convenience method that returns a cursor for the prompt position.
14504	Convenience method that returns a cursor with text selected between the positions 'start' and 'end'.
14505	Inserts new continuation prompt using the specified cursor.
14506	Inserts HTML using the specified cursor while ensuring future formatting is unaffected.
14507	Inserts HTML using the specified cursor, then returns its plain text version.
14508	Inserts plain text using the specified cursor, processing ANSI codes if enabled.
14509	Ensures that the cursor is inside the editing region. Returns whether the cursor was moved.
14510	Cancels the current editing task ala Ctrl-G in Emacs.
14511	Displays text using the pager if it exceeds the height of the viewport.
14512	Called immediately after a new prompt is displayed.
14513	Reads one line of input from the user.
14514	Sets the continuation prompt.
14515	Scrolls the viewport so that the specified cursor is at the top.
14516	Writes a new prompt at the end of the buffer.
14517	Expands the vertical scrollbar beyond the range set by Qt.
14518	Entry point for pkginfo tool
14519	Copy a default config file into the active profile directory.
14520	Create a profile directory by profile name and path.
14521	Find an existing profile dir by profile name, return its ProfileDir.
14522	Convert a cmp= function into a key= function
14523	Read a file and close it. Returns the file source.
14524	Take multiple lines of input and return them as a list, with support for line continuation using backslashes and termination with a specified string or EOF.
14525	Make a temporary python file, return filename and filehandle.
14526	Close the file and restore the channel.
14527	Write data to both channels.
14528	Add a new handler for new hearts.
14529	Add a new handler for heart failure.
14530	Handle a pong message for heartbeat monitoring.
14531	Converts a list into a list of lists with equal batch_size.
14532	Takes a path filename string and returns the split between the path and the filename.
14533	Generator for walking a directory tree.
14534	Displays time information including percentage completion and estimated time of arrival (ETA) based on elapsed time and loop count.
14535	Calculate and return the appropriate time units (seconds, minutes, hours) for elapsed time, average time, and estimated end time based on their values.
14536	Extract configuration data from a bdist_wininst .exe

Returns a ConfigParser.RawConfigParser, or None
14537	Ensure that the importer caches don't have stale info for `path`
14538	Quote a command line argument according to Windows parsing rules
14539	Verify that there are no conflicting "old-style" packages
14540	Ensure fetcher options from easy_install are available to bdist_egg command when handling source distributions with setup_requires directives.
14541	Create directories under ~.
14542	Return True if `name` is considered as an archive file.
14543	Return a mutable proxy for the `obj`.

All modifications on the proxy will not apply on the origin object.
14544	Return a readonly proxy for the given object that prevents modification.
14545	Create a new section cell with a given integer level.
14546	Create a new metadata node.
14547	Create a new author.
14548	Whether `path` is a directory, to which the user has write access.
14549	On Windows, remove leading and trailing quotes from filenames.
14550	Return a valid python filename in the current directory.
14551	Find a file by looking through a sequence of paths.
14552	Return the 'home' directory, as a unicode string.
14553	Return the XDG_CONFIG_HOME directory if it is defined and exists, else None.
14554	Get the IPython directory for this platform and user.
14555	Get the base directory where IPython itself is installed.
14556	Find the path to an IPython module in this version of IPython.
14557	Determine whether a target file is out of date compared to its dependencies.
14558	Make an MD5 hash of a file, ignoring any differences in line ending characters.
14559	Check for old config files and warn if they exist, with guidance on the new config system.
14560	Updates the suggestions' dictionary for an object upon visiting its page.
14561	Gets a list with a certain size of suggestions for an object.
14562	Get a list of all suggestions for an object.
14563	Return this path as a relative path, based from the current working directory.
14564	Return a list of path objects that match the pattern.
14565	Open this file, read all lines, return them in a list.
14566	Calculate the md5 hash for this file.
14567	Create profile stats file and load profiler.
14568	Output profiler report.
14569	Clean up stats file, if configured to do so.
14570	Handle CLI command
14571	Enable event loop integration with wxPython.
14572	Disable event loop integration with wxPython.
14573	Disable event loop integration with PyQt4.
14574	Enable event loop integration with PyGTK.
14575	Enable event loop integration with Tk.
14576	Enable event loop integration with pyglet.
14577	Save the wave log.
14578	Connect to the database and create tables if necessary.
14579	Prepares and runs an SQL query for the history database.
14580	Get info about a session.
14581	Get the last n lines from the history database.
14582	Get lines of history from a string of ranges, as used by magic commands %hist, %save, %macro, etc.
14583	Get default history file name based on the Shell's profile.
14584	Give the current session a name in the history database.
14585	Clear the session history, releasing all object references, and optionally open a new session.
14586	Get input and output history from the current session for a specified range.
14587	If database output logging is enabled, save outputs from the indicated prompt number to the database.
14588	Write any entries in the cache to the database.
14589	Stop this thread safely from the main thread.
14590	Return the number of CPUs on the system.
14591	Return a list of namedtuple representing the CPU times for every CPU available on the system.
14592	Return mounted disk partitions as a list of namedtuples
14593	Returns a list of PIDs currently running on the system.
14594	Make a nice string representation of a pair of numbers.
14595	Nicely format a list of line numbers by coalescing groups of consecutive statements.
14596	Return a string summarizing the call stack.
14597	A decorator to cache the result of an expensive operation.
14598	Combine a list of regexes into one that matches any of them.
14599	Remove a file, and don't get annoyed if it doesn't exist.
14600	Add `v` to the hash, recursively if needed.
14601	List all profiles in the ipython_dir and cwd.
14602	Start a cluster for a given profile.
14603	Stop a cluster for a given profile.
14604	Find the full path to a .bat or .exe using the win32api module.
14605	Callback for _system that handles system process output and waits for completion.
14606	Find the code units we'll report on.
14607	Run a reporting function on a number of morfs.
14608	Test must raise one of expected exceptions to pass.
14609	Call pdb.set_trace in the calling frame, first restoring sys.stdout to the real output stream.
14610	Test must finish within specified time limit to pass.
14611	Load all IPython extensions in IPythonApp.extensions.
14612	Run the pre-flight code, specified via exec_lines.
14613	Run lines of code in IPythonApp.exec_lines in the user's namespace.
14614	Run files from profile startup directory
14615	Run files from IPythonApp.exec_files
14616	Run code or file specified at the command-line
14617	Run module specified at the command-line.
14618	Create a simple generic function with type and object dispatch capabilities.
14619	Return the path to a data file by searching on STATIC_PATH.
14620	Return the contents of a data file of ours.
14621	HTML-escape the text in `t`.
14622	Generate an HTML report for the given modules or filenames.
14623	Make local instances of static files for HTML report.
14624	Write `html` to `fname`, properly encoded.
14625	Compute a hash that changes if the file needs to be re-reported.
14626	Write the index.html file for this report.
14627	Read the last status in `directory`.
14628	Write the current status to `directory`.
14629	Sort and compare two lists.
14630	Get a slice of a sequence with variable step. Specify start, stop, step.
14631	Chop a sequence into chunks of the given size.
14632	Read configuration from setup.cfg.
14633	Read existing configuration from MANIFEST.in.
14634	Compile a glob pattern into a regexp, preventing * from matching / directory separators.
14635	Does this filename match any of the patterns?
14636	List all files versioned by git in the current directory.
14637	Start a new kernel.
14638	Shutdown a kernel by its kernel uuid.
14639	Kill a kernel by its kernel uuid.
14640	Get the single KernelManager object for a kernel by its uuid.
14641	Return a dictionary of ports for a kernel.
14642	Return the notebook_id for a kernel_id or None.
14643	Start a kernel for a notebook and return its kernel_id.
14644	Shutdown a kernel and remove its notebook association.
14645	Interrupt a kernel.
14646	Restart a kernel while keeping clients connected.
14647	Create a new iopub stream.
14648	Create a new shell stream.
14649	Create a new hb stream.
14650	Reset all OneTimeProperty attributes that may have fired already.
14651	Export the contents of the ConsoleWidget as HTML.
14652	Export the contents of the ConsoleWidget as XHTML with inline SVGs.
14653	Wrapper for ensuring image_tag returns utf8-encoded str on Python 2
14654	Transforms a Qt-generated HTML string into a standards-compliant one.
14655	Displays a dialog for exporting HTML generated by Qt's rich text system.
14656	Returns a unique instance of `klass` or None
14657	Builds a query for included terms in a text search.
14658	Builds a query for both included & excluded terms in a text search.
14659	Query for if date_field is within number of "days" ago.
14660	Query for if date_field is within number of "days" from now.
14661	Query for null or blank field.
14662	Converts queries to case insensitive for special fields.
14663	Register command line options
14664	Verify whether a method has the required attributes.
14665	Accept the method if its attributes match.
14666	Rotate the kill ring, then yank back the new top.
14667	Backport a few patches from newer pyzmq to maintain compatibility with older versions.
14668	Returns an XSD-schema-enabled lxml parser from a WSDL or XSD.
14669	Return the websocket URL matching the current request by converting HTTP protocol to WS and using the appropriate host.
14670	Reserialize a reply message using JSON.
14671	Inject the first message, which is the document cookie, for authentication.
14672	Start the heartbeating and call the callback if the kernel dies.
14673	Callback for delayed heartbeat start.

Only start the hb loop if we haven't been closed during the wait.
14674	Stop the heartbeating and cancel all related callbacks.
14675	Load file object.
14676	Get the current block index, validating and checking status. Returns None if the demo is finished.
14677	Move the current seek pointer to the given block.
14678	Edit a block for in-memory demonstration changes.
14679	Show a single block on screen
14680	Show entire demo on screen, block by block
14681	Process a collection in series by applying a method to each element and return the results.
14682	Process a collection in parallel batches, each batch processes in series on a single process.
14683	Set up and execute parallel processing using a thread pool with optional serial fallback.
14684	Processes a collection in parallel by applying a method to each element using multiple processes.
14685	Wrap `with obj` outside of function.
14686	Like `with_objattr` but enter context one by one.
14687	Get source from a traceback object.
14688	Find lines in home that are inspectable by walking back up to 3 lines and forward up to 3 lines while considering indentation levels and continued lines.
14689	Create a countdown with optional progress bar.
14690	Cleanup routine to shut down all subprocesses we opened.
14691	A modifier hook function that is called prior to invoking an Action for a step, allowing modification of the context or taking over subsequent action invocation. Returns a StepResult with SKIPPED state if the condition evaluates to False, otherwise returns None.
14692	A modifier hook function that alters the ignore property of the step result based on the configured value.
14693	Keep our history and outstanding attributes up to date after a method call.
14694	Sync relevant results from self.client to our results attribute.
14695	Call spin after the method.
14696	Get all messages that are currently ready.
14697	Gets a message if there is one that is ready.
14698	Create a property with optional field mapping, getter, setter, and type checking.
14699	`get_onlys` is a sugar for multi-`property`.
14700	Parses a database URL and extracts configuration parameters.
14701	Return the list containing the names of the modules available in the given folder.
14702	Returns a list containing the names of all the modules available in the folders of the pythonpath.
14703	Easily create a trivial completer for a command.
14704	Returns a list containing the completion possibilities for an import line.
14705	Complete files that end in .py or .ipy for the %run command.
14706	Completer function for cd, which only returns directories.
14707	Escape an XML attribute. Value can be unicode.
14708	Configures the xunit plugin.
14709	Writes an Xunit-formatted XML file with test errors and failures report.
14710	Add error output to Xunit report.
14711	Add failure output to Xunit report.
14712	Add success output to Xunit report.
14713	Pick two at random, use the LRU of the two.
14714	Pick two items at random using inverse load as weight and return the less loaded of the two.
14715	New engine with ident `uid` became available.
14716	Handle the removal of an unavailable engine by cleaning up its tasks and updating the engine list.
14717	Deal with jobs resident in an engine that died.
14718	Dispatch job submission to appropriate handlers.
14719	Audit all waiting tasks for expired timeouts.
14720	Handle an unreachable task by sending an ImpossibleDependency error reply.
14721	Check location dependencies and run job if they are met.
14722	Save a message for later submission when its dependencies are met.
14723	Submit a task to any of a subset of our targets.
14724	Dispatch method for result replies
14725	Handle a real task result, either success or failure.
14726	Handle an unmet dependency by managing job execution and dependency tracking.
14727	Update the dependency graph and submit runnable jobs when a dependency finishes or when updating the entire graph for HWM.
14728	Generate a new log-file with a default header.
14729	Print a status message about the logger.
14730	Write the sources to a log.
14731	Write data to the log file, if active
14732	Fully stop logging and close log file.
14733	Create a worksheet by name with a list of cells.
14734	Adds a target 'string' for dispatching.
14735	Adds a target regexp for dispatching.
14736	Get a sequence of Commandchain objects that match key
14737	Yield all 'value' targets, without priority
14738	Do a bit of validation of the notebook dir.
14739	List all notebooks in the notebook directory.
14740	Generate a new notebook_id for a name and store its mappings.
14741	Delete a notebook's id only. This doesn't delete the actual notebook.
14742	Does a notebook exist?
14743	Return a full path to a notebook given its notebook_id.
14744	Return a full path to a notebook given its name.
14745	Get the representation of a notebook in the specified format by notebook_id.
14746	Get the NotebookNode representation of a notebook by notebook_id.
14747	Save a new notebook and return its notebook_id.
14748	Save an existing notebook by notebook_id.
14749	Save an existing notebook object by notebook_id.
14750	Delete notebook by notebook_id.
14751	Create a new notebook and return its notebook_id.
14752	Copy an existing notebook and return its notebook_id.
14753	Return all physical tokens, even line continuations.
14754	Generate a series of lines, one for each line in `source`, where each line is a list of token pairs.
14755	Load the default config file from the default ipython_dir.
14756	Return the default classes for TerminalIPythonApp.
14757	Override to allow old '-pylab' flag with deprecation warning.
14758	Do actions after construct, but before starting the app.
14759	Initialize the InteractiveShell instance.
14760	Optionally display the banner and ensure space below it.
14761	Return a string representation of a value and its type for readable error messages.
14762	Convert the name argument to a list of names.
14763	Set the default value on a per instance basis.
14764	Setup a handler to be called when a trait changes.
14765	Get a list of all the traits of this class.
14766	Get metadata values for trait by key.
14767	Validates that the value is a valid object instance.
14768	Instantiate a default value instance.
14769	Check whether our dependencies have been met.
14770	Return whether this dependency has become impossible.
14771	Represent this dependency as a dict. For json compatibility.
14772	Get the depth of an element in the tree.
14773	Print a binary tree with indentation.
14774	Accept either IP address or DNS name, and return IP.
14775	Parallel reduce followed by broadcast of the result.
14776	Turn any valid targets argument into a list of integer ids.
14777	Process monitor traffic by routing messages based on their topic to appropriate handlers.
14778	Route registration requests and queries from clients.
14779	Handler to attach to heartbeater. Called when a new heart starts to beat. Triggers completion of registration.
14780	Handle heart failure in heartbeat system.

The method is a callback function that gets triggered when a registered heart (engine) fails to respond to heartbeat requests. It logs the failure, checks if the heart is still registered and alive, and if so, unregisters the engine from the system. If the heart is not recognized or already marked as dead, it ignores the failure. The method manages engine lifecycle by removing dead engines from the system and updating internal state accordingly.
14781	Save the submission of a task.
14782	Save the result of a completed task.
14783	Save an iopub message into the db.
14784	Reply with connection addresses for clients.
14785	Register a new engine and create the necessary socket(s).
14786	Unregister an engine that explicitly requested to leave.
14787	Second half of engine registration, called after HeartMonitor receives a beat from the Engine's Heart.
14788	Handle shutdown request.
14789	Purge results from memory based on message IDs or all records, handling exceptions and sending reply back to client.
14790	Decompose a TaskRecord dict into subsection of reply for get_result
14791	Get the result of 1 or more messages.
14792	Get a list of all msg_ids in our DB records
14793	Perform a raw query on the task record database.
14794	Go to the path.
14795	Return a standard message by decoding command output and error streams with multiple encoding fallbacks.
14796	Run a command under the R root directory and return the process result.
14797	Execute R script
14798	Calls the frontend handler associated with the message type of the given message.
14799	Returns whether a reply from the kernel originated from a request from this frontend.
14800	Run the report.
14801	Annotate a single file by analyzing coverage statistics and writing annotated output with coverage markers.
14802	Returns installed package version and None if package is not installed.
14803	Coerce unicode objects back to bytestrings recursively.
14804	Given a message or header, return the header.
14805	Check packers for binary data and datetime support.
14806	Return the nested message dict.
14807	Sign a message with HMAC digest. If no auth, return b''.

The function takes a message list consisting of [p_header, p_parent, p_content] parts and signs it using HMAC digest. If no authentication key is available, it returns an empty bytes object. Otherwise, it creates a copy of the authentication object, updates it with each message part, and returns the hexadecimal digest as bytes.
14808	Serialize the message components to bytes.
14809	Build and send a message via stream or socket.
14810	Send a raw message via ident path.
14811	Receive and unpack a message.
14812	Split the identities from the rest of the message.
14813	Unserialize a msg_list to a nested message dict.
14814	Prompts the user to save an SVG document to disk.
14815	Copy a SVG document to the clipboard.
14816	Convert a SVG document to a QImage.
14817	Make an object info dict with all fields present.
14818	Stable wrapper around inspect.getdoc that provides fallback behavior for objects with custom documentation methods.
14819	Wrapper around inspect.getsource that extracts source code from objects, with support for decorated functions and binary source handling.
14820	Get the names and default values of a function's arguments.
14821	Extract call tip data from an oinfo dict.
14822	Find the absolute path to the file where an object was defined.
14823	Find the line number in a file where an object was defined.
14824	Return the definition header for any callable object.
14825	Return a header string with proper colors.
14826	Generic message when no information is found.
14827	Print the definition header for any callable object.
14828	Print the docstring for any object.
14829	Print the source code for an object.
14830	Show the whole file where an object was defined.
14831	Formats a list of fields for display.
14832	Show detailed information about an object.
14833	Search namespaces with wildcards for objects.
14834	Start the Twisted reactor in a separate thread, if not already done. Returns the reactor.
14835	Wrap a test function with this decorator to return a twisted Deferred and wait for it to be triggered.
14836	Return best matching substring of corpus.
14837	Encodes the stored data to XML and returns a string.
14838	Encodes the stored data to XML and returns an lxml.etree value.
14839	Recursively loads all modules from a package object, or set of package objects.
14840	Helper function for merge that inverts a dictionary with list values into a dictionary with list elements as keys and original keys as values.
14841	Merge two Structs with customizable conflict resolution.
14842	Convert an object to primitive types for serialization.
14843	Parse and send the colored source.
14844	Get a list of matplotlib figures by figure numbers.

If no arguments are given, all available figures are returned.  If the
argument list contains references to invalid figures, a warning is printed
but the function continues pasting further figures.
14845	Convert a figure to svg or png for inline display.
14846	Factory to return a matplotlib-enabled runner for %run.
14847	Select figure format for inline backend, either 'png' or 'svg'.
14848	Given a gui string, return the corresponding gui and matplotlib backend.
14849	Activate the given matplotlib backend and set interactive mode to True.
14850	Configure an IPython shell object for matplotlib use.
14851	Activate pylab mode in the user's namespace.
14852	The trace function passed to sys.settrace.
14853	Start this Tracer.

Return a Python function suitable for use with sys.settrace().
14854	Stop this Tracer.
14855	Start a new Tracer object, and store it in self.tracers.
14856	Called on new threads, installs the real tracer.
14857	Start collecting trace information.
14858	Stop collecting trace information.
14859	Pause tracing, but be prepared to resume.
14860	Resume tracing after a pause.
14861	Return the line data collected.

Data is { filename: { lineno: None, ...}, ...}
14862	Check a result dict for errors, and raise CompositeError if any exist. Passthrough otherwise.
14863	Render one or all of my tracebacks to a list of lines
14864	Call this at Python startup to perhaps measure coverage.
14865	Return the canonical directory of the module or file `morf`.
14866	Return the source file for `filename`.
14867	Decide whether to trace execution in `filename`, with a reason.
14868	Decide whether to trace execution in `filename`.
14869	Use `msg` as a warning.
14870	Update the source_match matcher with latest imported packages.
14871	Start measuring code coverage.
14872	Clean up on process shutdown.
14873	Exclude source lines from execution consideration.
14874	Return a compiled regex for the given exclusion list.
14875	Save the collected coverage data to the data file.
14876	Combine together a number of similarly-named coverage data files.
14877	Get the collected data and reset the collector. Also warn about various problems collecting data.
14878	Like `analysis2` but doesn't return excluded line numbers.
14879	Analyze a module and return coverage statistics including filename, executable statements, excluded statements, missing statements, and formatted missing line numbers.
14880	Analyze a single morf or code unit and return an Analysis object.
14881	Write a summary report to `file`.
14882	Annotate a list of modules with coverage information.
14883	Generate an HTML report.
14884	Generate an XML report of coverage results.
14885	Display a Python object in all frontends.
14886	Display the HTML representation of an object.
14887	Display the SVG representation of an object.
14888	Display the PNG representation of an object.
14889	Display the JPEG representation of an object.
14890	Display the LaTeX representation of an object.
14891	Display the JSON representation of an object.
14892	Display the Javascript representation of an object.
14893	Reload the raw data from file or URL.
14894	Find the full path to a command using which.
14895	Execute a command in a subshell.
14896	Forward read events from an FD over a socket.
14897	Loop through lines in self.fd, and send them over self.sock.
14898	Return a launcher class for a given class name and kind.
14899	Start the app for the stop subcommand.
14900	Import and instantiate a Launcher based on importstring.
14901	Start the app for the engines subcommand.
14902	Start the app for the start subcommand.
14903	Create a new wx app or return an existing one.
14904	Is the wx event loop running.
14905	Start the wx event loop in a consistent manner.
14906	Create a new qt4 app or return an existing one.
14907	Is the qt4 event loop running.
14908	Start the qt4 event loop in a consistent manner.
14909	Return a blank canvas to annotate.
14910	Draw a cross on the canvas.
14911	Draw a line between two positions on the canvas.
14912	Write text at the specified position with optional centering and antialiasing.
14913	Return a canvas from a grayscale image.
14914	Returns a unique ID of a given length.
14915	Build a unique key from get data
14916	Returns domain name portion of a URL
14917	Returns a dictionary from a URL params
