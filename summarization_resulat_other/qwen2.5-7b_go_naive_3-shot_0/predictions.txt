0	NewSTM creates a new transactional state machine with options and applies a function to it.
1	first will return the smallest revision from readSet or max int64 - 1 if empty
2	cmps will return a list of comparisons for each key in the write set
3	NewSTMRepeatable creates a new STM transaction with repeatable reads isolation and abort context.
4	NewSTMSerializable creates a new STM transaction with serializable isolation and abort context.
5	NewSTMReadCommitted creates a new STM transaction with ReadCommitted isolation and applies the given function.
6	NewCertPool reads CA files and returns a certificate pool.
7	NewCert reads cert and key files, parses them using a given or default function, and returns a TLS certificate.
8	Pause method sets peer to paused state and pauses message readers.
9	Resume unpauses the peer and its readers.
10	pick method selects appropriate channel based on message type and returns it along with a string indicating the channel type.
11	post sends HTTP request and handles response or error
12	newTxnResp processes transaction requests and returns a response along with the count of transactions.
13	applyCompare checks if a read view satisfies a comparison condition
14	OpCompact creates a CompactOp with a revision and applies options.
15	NewPriorityQueue creates a new priority queue instance with a given client, empty context, and modified key.
16	Enqueue adds a value to a priority queue with a given key and priority, returning an error if unsuccessful.
17	NewLeaderStats creates a new LeaderStats instance with the given ID and initializes its followers map.
18	Succ updates FollowerStats with success count and latency details.
19	Fail method increments the Fail count in FollowerStats struct while ensuring thread safety with Lock and Unlock.
20	delete removes a watcher and its associated broadcast from the watchBroadcasts instance returns the count of remaining broadcasts
21	startStreamWriter initializes a new streamWriter and starts its goroutine
22	checkStreamSupport checks if a version supports a given stream type
23	maybeUpdate updates progress if n is greater than Match and Next, resumes if updated
24	IsPaused checks if progress is paused based on its state.
25	needSnapshotAbort checks if snapshot state requires abort based on match and pending snapshot values
26	add will add an inflight to the buffer and panic if it's full
27	growBuf doubles buffer size or sets to 1 if zero, ensuring it doesn't exceed max size, then copies data to new buffer
28	freeTo will free inflights up to a specified ID and adjust the start index accordingly
29	SaveDBFrom saves a database snapshot from a reader to a temporary file, fsyncs it, renames it, logs the save operation, and measures the duration.
30	DBFilePath returns the path to a database snapshot or an error if it doesn't exist
31	Set will store unique strings from a comma-separated list in Values map and return an error if any issue occurs
32	NewUniqueStringsValue creates a new instance of UniqueStringsValue from a comma-separated string of unique values.
33	UniqueStringsFromFlag retrieves unique strings from a specified flag in FlagSet.
34	UniqueStringsMapFromFlag retrieves unique strings from a flag's value and returns them as a map.
35	Percentiles calculates percentiles from a slice of numbers and returns the calculated percentiles and the original data.
36	VerifyBootstrap checks server config and returns error if invalid.
37	VerifyJoinExisting checks if the server config can join an existing cluster, returning an error if it cannot.
38	hasLocalMember checks if the server's local member URL exists in the initial peer URLs map, returning an error if not found.
39	advertiseMatchesCluster checks if initial peer URLs match advertised URLs, returning an error if they don't.
40	ReqTimeout calculates total request timeout considering queue delay, computation, disk IO, and election timeouts.
41	getStatus retrieves the current status of the raft node including progress if it's a leader
42	GetDefaultHost returns the default host based on routing messages and prioritizes IPv4.
43	getIfaceAddr retrieves network address info for a given interface index and family returns Netlink message or error
44	getIfaceLink retrieves Netlink message for specified interface index returns pointer to message or error
45	lsCommandFunc processes CLI args to list keys recursively and sorts them if specified, handling errors and printing results.
46	printLs prints list based on output type simple or JSON
47	rPrint recursively prints node keys with optional directory formatting.
48	NewLeaseRenewerCommand creates a Cobra command for lease renewal with a TTL flag.
49	Read will return a Snapshot object and an error if the file cannot be read or is corrupted
50	GetCipherSuite retrieves the cipher suite ID and checks if it exists.
51	post sends data to a server and handles the response or error accordingly
52	send method updates the sender ID and term in raft message before appending it to the msgs slice
53	sendHeartbeat sends a heartbeat message to a follower, including the minimum matched index and context.
54	bcastAppend will broadcast append entries to all peers except itself
55	bcastHeartbeat broadcasts a heartbeat to followers using the last pending request context or nil
56	tickElection increments election timer promotes leader if eligible
57	tickHeartbeat updates heartbeat and election timers checks quorum and leader transfer steps heartbeats if in leader state
58	stepCandidate handles raft message types and updates state accordingly
59	restore will apply a snapshot to the raft log and progress maps if it's newer than the current state, returning true on success
60	promotable checks if the raft instance has a peer with its own ID and returns true if it does
61	checkQuorumActive checks if quorum is active based on progress and returns true if quorum is met
62	increaseUncommittedSize updates the uncommitted size and returns whether it exceeds the max limit
63	reduceUncommittedSize reduces the uncommitted size by entries payload sizes, setting to zero if exceeds limit
64	newPeriodic initializes a Periodic struct with logger, clock, duration, revGetter, compactable, and returns it.
65	Pause sets pc.paused to true after locking pc.mu
66	Resume will set paused to false and unlock the mutex
67	Lock acquires a mutex using etcd transaction, waits for unlock if necessary, and returns an error if the operation fails.
68	NewLocker creates a locker using a session and prefix
69	NewFIFOScheduler creates a new FIFO scheduler with channels and a goroutine.
70	Schedule adds job to pending list or resumes scheduler if empty
71	Stop will stop the fifo and wait for it to finish.
72	NewServer initializes a server with logger, network, and address returning a pointer to Server.
73	StartServe starts a gRPC server on specified address and logs its status.
74	Stop will stop the gRPC server and log the address
75	Transport handles RPC requests and responses in a goroutine, updating server state and sending/receiving data until an error occurs or the context is done.
76	RegisterInterruptHandler adds an interrupt handler to the list while ensuring thread safety.
77	HandleInterrupts will register signal handlers for SIGINT and SIGTERM, log shutdown signals, execute registered interrupt handlers, and stop signals if not running as init process.
78	OpGet constructs an Op object with specified key and options, ensuring exclusive use of WithPrefix or WithFromKey.
79	OpDelete will return an operation to delete a key with options an error will be returned if invalid options are provided
80	OpPut creates an Op for setting a key-value pair with options and validates them.
81	OpTxn creates a transaction operation with comparisons and conditional operations.
82	WithFromKey sets default key and end values for an operation option
83	withTop returns a list of OpOptions for sorting a target field by order with a limit of 1
84	Exist checks if any .wal files exist in the specified directory.
85	searchIndex will return the index of the first WAL file name that matches or exceeds the given index and a boolean indicating if a match was found an error will be logged if parsing fails
86	isValidSeq checks if sequence numbers in WAL filenames are consecutive
87	NewListener creates a network listener, wraps it with TLS if needed, and returns it along with any errors encountered.
88	TLSInfo.cafiles returns a list of CA files based on TrustedCAFile
89	ServerConfig returns a TLS configuration based on the provided TLSInfo, including client authentication settings and CA files, with HTTP/2 enabled.
90	ClientConfig returns a TLS configuration based on TLSInfo, handling client certificates, server name, and insecure settings.
91	newTLSKeepaliveListener creates a TLS keep-alive listener wrapping an inner listener with specified TLS configuration
92	applyV2Request processes V2 requests based on method type and returns appropriate response.
93	NewRoleCommand creates a Cobra command for role-related subcommands.
94	roleAddCommandFunc adds a role based on user input and displays the result or an error message
95	roleGetCommandFunc retrieves a role's details based on the provided name and displays them.
96	roleGrantPermissionCommandFunc processes role permissions and grants them based on user input arguments.
97	roleRevokePermissionCommandFunc revokes permission from a role and displays the result
98	NewCluster creates a cluster with the given size and returns it along with a testing.TB object.
99	NewClusterByConfig creates a cluster instance using the given configuration and testing TB.
100	HTTPMembers returns a list of cluster members with their URLs based on TLS info
101	waitLeader will determine the leader's position in the cluster using HTTP requests and member statuses, returning -1 if no leader is found
102	waitNoLeader waits until no member leads and then sleeps
103	isMembersEqual will compare two slices of client.Member after sorting them by PeerURLs and removing IDs, returning true if they are equal
104	listenGRPC sets up gRPC listener and bridge handling errors
105	NewClientV3 creates a new gRPC client using member configuration and returns it or an error
106	Clone creates a deep copy of member object and returns it.
107	Close method stops all associated servers and bridges safely.
108	Stop will log stopping info close server set closers to nil then log stopped info
109	checkLeaderTransition waits until the leader changes and returns the new lead ID
110	Restart will restart a member and log the restart process and any errors encountered.
111	Terminate will log termination details, close the member, remove data directory if specified, and log completion.
112	Metric retrieves a specific metric from a member's URL and returns its value or an error.
113	InjectPartition will cut peer connections between a member and multiple others in a testing environment.
114	RecoverPartition will mend peers between a member and others in a testing environment.
115	NewClusterV3 creates a new ClusterV3 instance with GRPC enabled and initializes clients based on config settings.
116	ParseWithDefaults sets default TTL if missing and calls Parse with options.
117	Parse will set JWT options from a map and return an error if any option is invalid
118	Key returns the appropriate key based on the JWT options or an error if the signing method is unsupported
119	fill will set response header fields from header instance
120	add will determine if a watcher can receive events based on its revision and update receivers accordingly
121	Watch method handles watch requests, validates ranges, assigns IDs, and manages watchers.
122	newFileEncoder creates a file encoder at the current offset with the given CRC.
123	purgeFile will monitor a directory, remove files with a specified suffix based on a maximum count, and notify via a channel while logging errors or success
124	Set will split the input string by commas and assign it to ss returning no error
125	NewStringsValue creates a new StringsValue instance from a string, initializing it or panicking on failure.
126	StringsFromFlag retrieves values from a flag set and returns them as a string slice
127	Cluster will return a string with only the first two parts separated by a dot if there are more than two parts
128	NewPageWriter creates a new PageWriter instance initialized with writer, page size, and offset.
129	watcherHub's watch method handles watching keys recursively or streaming events, returning a Watcher instance and any errors encountered.
130	notify adds an event to history and notifies watchers along the path's segments
131	clone method creates a new watcherHub instance with a cloned EventHistory.
132	isHidden checks if watchPath is hidden within keyPath by comparing lengths and checking for "_".
133	createEtcdLogFile creates an etcd log file and logs the path or returns an error
134	runEtcd starts etcd either externally or internally, logs errors, and waits for readiness or timeout.
135	stopEtcd stops etcd processes based on signal and logs errors
136	handle_SIGQUIT_ETCD_AND_REMOVE_DATA_AND_STOP_AGENT stops Etcd, removes data, and stops agent returning a response
137	LimitListener returns a listener that limits concurrent connections to n.
138	allowMethod checks if method is allowed and sets Allow header if not
139	NewWatchServer creates a new watch server instance with etcd configuration details and server references.
140	FiltersFromRequest constructs a list of filter functions based on the WatchCreateRequest's filters.
141	newPipelineHandler creates a pipeline handler with transport, raft, and client ID
142	checkClusterCompatibilityFromHeader checks if local and remote servers are compatible based on headers and logs errors if incompatible.
143	KeyExists checks if a key exists in etcd by comparing its version.
144	KeyMissing checks if a key exists in etcd by comparing its version to zero.
145	ValidateSecureEndpoints checks HTTPS endpoints using TLS and returns valid ones or errors
146	putNewKV inserts a new key-value pair with a lease and returns the revision or an error if the key already exists
147	newUniqueEphemeralKey generates a unique ephemeral key with an optional suffix.
148	NewUpdateDirCommand defines a CLI command to update an existing directory with key-value pairs and an optional TTL flag.
149	updatedirCommandFunc updates a directory key with optional TTL, handles errors, and prints response based on output format
150	handleBackup handles backup operation by copying snapshots and WAL files between specified directories, updating metadata, and saving new WAL.
151	saveDB copies data from source DB to destination DB, handling versioning and updating indices.
152	NewWatchCommand creates a Cobra command for watching operations with customizable flags for running time, prefix, and key counts.
153	NewV3 creates a new manager with a logger or uses an example logger if none is provided.
154	Save will create a temporary file, fetch a snapshot from a single endpoint, write it to the temp file, sync and close the file, then rename it to the target path.
155	Status checks database path, opens it, verifies integrity, calculates total size and hash, returns status or error.
156	Restore will initialize an etcd server from configuration, verify bootstrap, create cluster, set paths, save database and WAL/Snapshot, and log restoration status.
157	NewAuthStore initializes an authentication store with validation and setup.
158	NewTokenProvider initializes a token provider based on options and logs warnings or errors accordingly.
159	MendPeer resumes paused peer and remote connections if they exist
160	removePeer removes a peer from transport and logs the action
161	ActivePeers returns the count of active peers in the transport.
162	resolveTCPAddrDefault will return a TCP address and an error given a host and port, resolving the IP address using DNS if necessary.
163	resolveTCPAddrs will process URLs, resolving them and updating hostnames, returning updated URLs or an error
164	urlsEqual checks if two URL arrays are equal after resolving TCP addresses and sorting them.
165	URLStringsEqual checks if two slices of URLs are equal, logging errors if parsing fails or if lengths differ.
166	NewLeaseCommand creates a Cobra command for lease-related subcommands.
167	NewLeaseGrantCommand initializes a Cobra command for granting leases.
168	leaseGrantCommandFunc handles lease grant commands, validates arguments, parses TTL, makes a grant request, and displays the response or error.
169	NewLeaseRevokeCommand creates a Cobra command to revoke leases.
170	leaseRevokeCommandFunc handles lease revocation by checking arguments, extracting ID, performing revocation, and displaying response or error.
171	NewLeaseTimeToLiveCommand creates a Cobra command to retrieve lease info with options to fetch associated keys.
172	leaseTimeToLiveCommandFunc processes a lease ID and displays its TTL.
173	NewLeaseListCommand creates a Cobra command to list active leases
174	leaseListCommandFunc retrieves lease information and displays it or exits with an error
175	NewLeaseKeepAliveCommand creates a Cobra command for keeping leases alive with options to run once.
176	leaseKeepAliveCommandFunc handles lease keep-alive commands displaying responses until lease expires or is revoked
177	NewAlarmCommand creates and returns a Cobra command for alarm-related subcommands.
178	alarmDisarmCommandFunc processes the "alarm disarm" command without arguments, sends a request to disarm the alarm, and displays the response or error accordingly.
179	alarmListCommandFunc handles the "alarm list" command, validates input, fetches alarms, and displays them.
180	Flags method returns a slice of strings representing flags and their values from the Etcd struct, formatted according to YAML tags.
181	EmbedConfig will return an Etcd configuration and an error if any URL parsing fails
182	PPProfHandlers sets up HTTP handlers for profiling metrics.
183	NewBackendQuota initializes a backend quota based on server configuration and logs relevant information.
184	NewClusterProxy creates a cluster proxy with the given client, address, and prefix returns the cluster server and a channel indicating when resolution is done
185	NewHandler creates a new HTTP handler using a lease.Lessor and a wait channel function.
186	TimeToLiveHTTP sends a POST request to a URL with a lease ID and returns a response or an error.
187	newWatcherBatch creates a batch of watchers for given events based on their revision numbers
188	watcherGroup's add method adds a watcher to its watchers set and optionally to keyWatchers or an interval tree based on conditions.
189	contains checks if a key exists in watcherGroup or intersects with ranges returns true if either condition is met
190	delete removes a watcher from the group and updates the interval tree if necessary
191	choose will return a watcherGroup and the next revision to watch or error if unable to allocate more watchers
192	watcherSetByKey returns a merged watcher set based on key and range values
193	Compare intervals based on their begin and end points, returning -1, 0, or 1 accordingly.
194	successor returns the next node in order or nil if no such node exists
195	updateMax updates the maximum value of interval nodes recursively until no change occurs
196	visit method checks interval overlap and applies visitor to nodes
197	Delete method removes an interval from an IntervalTree and returns true if successful, otherwise false.
198	Insert method inserts an interval into the tree maintaining properties and updating count.
199	rotateLeft will perform a left rotation on an interval tree node updating parent and max values
200	replaceParent updates the parent pointers of nodes in an interval tree
201	MaxHeight calculates the maximum height of an IntervalTree based on its length.
202	Visit traverses the interval tree and applies the visitor to each interval node
203	find will search for an interval in the tree and return the node if found or nil if not
204	Find will search for an interval and return its corresponding IntervalValue or nil if not found
205	Intersects checks if two intervals intersect by traversing the tree.
206	Contains checks if an interval is contiguous within an IntervalTree.
207	Stab will return all intervals that intersect with the given interval.
208	Union will merge intervals from two trees into the first tree
209	NewExactReadCloser creates a wrapper around a ReadCloser to ensure exact byte reading.
210	NewElection creates an Election instance with a session and a prefixed key path
211	ResumeElection creates and returns a new Election instance with specified parameters.
212	Proclaim method checks leadership, updates leader key, handles transaction commit, and returns error or header.
213	Election.Resign will delete the leader key if the session exists and update the header with the response's header.
214	Leader method retrieves the current leader from etcd and returns its response or an error if no leader exists.
215	Observe method returns a channel for observing election responses.
216	check will return an error if the quota is exceeded and activate an alarm
217	NewExecWatchCommand creates a CLI command to watch a key for changes and execute an executable.
218	execWatchCommandFunc executes a command on key changes with optional recursion and signal handling
219	NewListener creates a new timeout listener using URL and TLS info.
220	NewRoundTripper creates a new HTTP round tripper using TLS info and dial timeout without read/write timeouts.
221	createPostRequest constructs a POST HTTP request with specified URL, path, body, content type, URLs, and IDs setting appropriate headers.
222	checkPostResponse evaluates HTTP response for errors related to version, cluster ID, or unexpected statuses.
223	serverVersion retrieves the server version from headers and returns a semver object, defaulting to "2.0.0" if not set.
224	checkVersionCompatibility checks if versions are compatible and returns the appropriate local versions or an error
225	setPeerURLsHeader sets peer URLs header on HTTP request
226	addRemoteFromRequest adds remote server details from request headers to transporter
227	NewKeysAPIWithPrefix creates a new keys API instance with the given client and prefix
228	TTLDuration converts node's TTL to time duration
229	SetPflagsFromEnv sets flags from environment variables based on a given prefix and flagset, handling errors and verifying used keys.
230	FlagToEnv converts a flag to an environment variable using the given prefix.
231	excerpt will return a substring with prefix and suffix if within bounds otherwise returns the original string
232	passConfChange checks if entry type is ConfigChange and returns a message
233	printInternalRaftRequest unmarshals a raft entry and prints its term, index, and string representation if successful.
234	listEntriesType processes raft entries based on type filters and prints them using specified decoders.
235	newLog creates a new log instance with specified storage and logger, using no limit.
236	newLogWithSize creates a new raftLog instance with specified storage, logger, and maxNextEntsSize, initializes its unstable offset and pointers based on storage's first and last indices, and returns it.
237	findConflict identifies the first entry causing a term mismatch and returns its index or 0 if no conflict is found
238	nextEnts returns the next set of unapplied entries or nil if none are available
239	allEntries retrieves all log entries or retries on compaction error
240	slice returns a subset of log entries within specified bounds and limits the result size, handling errors for out-of-bounds access or unavailable data
241	NewSession creates a new session with options, handles leasing, and starts a goroutine to keep the lease alive.
242	Close will revoke the session's lease and return an error if it fails
243	WithTTL sets session option TTL if positive.
244	WithLease sets a lease ID on a session option.
245	addRequest adds a request to the queue if it's not already pending
246	recvAck updates pending reads with an acknowledgment and returns the total count including local.
247	advance method updates read queue and pending read index based on context and returns read index statuses
248	lastPendingRequestCtx returns the last item from readIndexQueue or empty string if queue is empty
249	Start initializes EtcdServer with various goroutine attachments for different tasks.
250	start initializes EtcdServer configurations, logs details, and starts running goroutine
251	Process handles raft messages, logs warnings for removed members, updates stats for append requests, and steps the raft state machine.
252	ReportSnapshot reports the snapshot status to the raft server
253	MoveLeader initiates a leader transfer in EtcdServer, logs the process, waits for completion, and logs the result.
254	TransferLeadership checks if the server is a leader and multi-node before transferring leadership to the longest connected transferee.
255	configure updates server config through raft and returns members or error
256	sync sends a synchronous request with a timeout and proposes it using goroutine
257	publish method marshals attributes to JSON, sends PUT request, retries on failure or until stopped.
258	applyEntryNormal processes raft entries, updates consistent index, applies requests, handles versioning, and manages alarms for storage capacity.
259	applyConfChange processes configuration changes and updates cluster members accordingly.
260	monitorVersions checks versions periodically, updates if necessary
261	goAttach will execute a function asynchronously after ensuring the server is running
262	NewRoundrobinBalanced creates a new round-robin load balancer picker with the given logger and subconns.
263	Pick will select a subconnection and return it along with a callback function to handle the pick result
264	NewTLSListener creates a TLS-enabled listener from a regular listener and TLS information, returning the listener and any errors encountered.
265	acceptLoop handles incoming connections, performs TLS handshake, and manages connection state
266	SetEndpoints updates resolver group's endpoints and notifies resolvers about the change.
267	Target method returns the resolved target for a given endpoint using the resolver group's ID.
268	Target constructs a URL using a given ID and endpoint.
269	Build will create a new Resolver instance, add it to the resolver group, and return it or an error if the target authority is empty or the resolver group cannot be retrieved.
270	Handle processes HTTP requests based on method type and returns appropriate response or error.
271	NewElectionCommand creates a Cobra command for performing an election operation with options for total client connections.
272	nodeToMember converts a NodeExtern to a Member, unmarshalling JSON attributes and handling errors
273	NewTmpBackend creates a temporary backend with specified batch interval and limit returns the backend instance and path
274	newRevision initializes a Revision object with logger, clock, retention, revision getter, and compactor, setting up a cancelable context.
275	Run starts a goroutine to automatically compact revisions based on interval and retention settings, logging success or failure.
276	Pause method sets paused flag to true within a mutex lock
277	Resume will unlock a mutex and set paused to false
278	voteRespMsgType returns the corresponding response message type for a given vote message type or panics if it's not a valid vote message type
279	DescribeMessage formats a message into a string using a formatter.
280	DescribeEntry formats an entry's data using a formatter or default formatting based on its type and returns a descriptive string.
281	DescribeEntries formats and concatenates entries using a formatter.
282	SetLogger sets a new logger with locking to ensure thread safety
283	GetLogger returns a logger instance using thread-safe locking.
284	maybeFirstIndex returns the first index from the snapshot or 0 if none exists
285	maybeLastIndex returns the last index or snapshot index and whether it was successful
286	maybeTerm retrieves term from unstable storage based on index.
287	shrinkEntriesArray reduces entries array size if underutilized
288	SaveSnap saves a snapshot to storage and releases the lock to the specified index.
289	New will create a new Client instance from a given configuration or return an error if no endpoints are available.
290	NewCtxClient creates a new Client with a cancellable context.
291	NewFromURL creates a new client using a URL as an endpoint and returns it along with any errors encountered
292	Close will close the client's resources and return any errors encountered during the process
293	Endpoints returns a copy of the client's configured endpoints to prevent modifications.
294	SetEndpoints updates client endpoints and resolver group endpoints while locking.
295	Sync updates client endpoints using member list and returns an error if failed.
296	dialSetupOpts configures gRPC dial options with connection settings, credentials, and interceptors.
297	Dial connects to a gRPC server using the specified endpoint and credentials.
298	dialWithBalancer establishes a gRPC connection using a balancer and credentials for the given endpoint.
299	dial establishes a gRPC connection to a target server with optional credentials and timeout.
300	WithRequireLeader adds leader requirement metadata to the given context
301	roundRobinQuorumBackoff returns a backoffFunc that skips backoff for half plus one attempts and applies jitter to the waitBetween duration
302	isHaltErr checks if an error indicates a halt condition based on context and gRPC status codes.
303	NewLease creates a new lease with a given prefix.
304	IsCreate checks if event type is Put and revision numbers match indicating a create operation.
305	Err returns an error based on the state of WatchResponse.
306	IsProgressNotify checks if WatchResponse indicates progress notification based on event count, cancellation status, creation flag, compact revision, and header revision.
307	RequestProgress sends progress request or returns error based on context and stream status.
308	nextResume returns the first non-nil watcherStream from resuming slice or nil
309	dispatchEvent processes a gRPC watch response, converts it to an internal format, and broadcasts or unicast the response based on whether it's a progress notification or not.
310	broadcastResponse sends a response to all subscribers and returns true
311	unicastResponse sends a WatchResponse to a specific watch stream or returns false if the stream is closed
312	joinSubstreams waits for all substreams to complete before returning
313	toPB converts watchRequest to pb.WatchRequest
314	toPB converts progressRequest to WatchRequest protobuf message
315	Contains checks if a value exists in the unsafeSet and returns a boolean indicating its presence.
316	ContainsAll checks if all given strings are in the unsafeSet.
317	Equals checks if two sets have identical values.
318	Values returns all string elements from an unsafe set.
319	Copy method creates a new unsafe set and adds all values from the original set to it
320	Subtract values from another set and return the difference as a new set.
321	v2MembersURL appends a path prefix to a URL and returns it.
322	NewMigrateCommand creates a new cobra command for migrating keys from a v2 store to a mvcc store with flags for excluding TTL keys, specifying data and WAL directories, and providing a transformer program path.
323	publishEntries processes entries, commits them, and handles configuration changes, returning false on stop.
324	openWAL initializes or opens a Write-Ahead Logging (WAL) file for a raftNode, creating it if necessary and loading its snapshot.
325	replayWAL reads the WAL file and applies its contents to the raft storage
326	stop will close HTTP connections and channels and stop the node
327	NewWatchCommand creates a Cobra command for watching events on keys or prefixes.
328	InitialState returns the current hard state and configuration state from MemoryStorage.
329	SetHardState updates hard state in MemoryStorage and returns error if any
330	Entries retrieves a range of log entries within specified limits and returns them along with any errors encountered.
331	Term returns a term ID and error based on input index
332	LastIndex returns the last memory storage index and an error if locked
333	FirstIndex returns the first index of memory storage with locking.
334	Snapshot will return a memory storage snapshot and an error if locking fails
335	ApplySnapshot updates MemoryStorage with a valid snapshot, ensuring it's newer than the current one.
336	Compact reduces the memory storage by removing entries up to the specified index.
337	unreachable updates the picked URL index in a thread-safe manner
338	NewEndpointCommand creates a Cobra command for endpoint-related subcommands with options to use cluster endpoints and add specific subcommands.
339	epHealthCommandFunc processes etcdctl commands to check endpoint health, collecting results and displaying them or exiting with an error if any endpoint is unhealthy.
340	NewElectCommand creates a Cobra command for leader election with optional listening mode.
341	NewDefragCommand creates a new cobra command for defragmenting etcd storage with optional flags for cluster endpoints and custom data directory.
342	RegisterBuilder configures and registers a builder with the balancer, logging the policy and name.
343	Build will create and return a new balancer instance initialized with the given client connection and options.
344	recordTransition updates state counters and evaluates connectivity state
345	doSerialize serializes data using authentication info and handles stale token revisions
346	send processes watch response filtering events and updating next revision
347	watcher.post sends WatchResponse to watchCh or cancels after timeout
348	OriginAllowed checks if the given origin is allowed based on CORS configuration.
349	IsHostWhitelisted checks if a host is allowed based on the whitelist configuration.
350	SelectiveStringValue's Valids returns sorted list of valid strings.
351	NewSelectiveStringsValue creates a SelectiveStringsValue with a map of valid strings and an empty slice
352	NewKV wraps a KV client with a prefix.
353	NewURLsValue creates a new URLsValue instance from a string, setting its value or panicking on error.
354	URLsFromFlag retrieves URLs from a flag set using a specified flag name and returns them as a slice of url.URL objects.
355	servePeers starts peer servers handling HTTP/2 and gRPC traffic with optional TLS.
356	NewStore initializes a new store instance with given dependencies and sets up its internal state and data structures.
357	appendMarkTombstone appends a tombstone mark to revision bytes and logs an error if the byte size is incorrect
358	IsDirWriteable checks if a directory is writable by creating and then removing a temporary file
359	TouchDirAll ensures a directory exists and is writable, returning an error if it fails.
360	CreateDirAll will create a directory and return an error if it's not empty or if there's an issue creating the directory
361	ZeroToEnd sets file offset to end, truncates file, preallocates blocks, then resets offset.
362	Open will return a locked file and an error from the file pipeline.
363	NewRaftLoggerFromZapCore creates a new Raft logger using Zap core and syncer with caller information and error output.
364	NewConfig reads a YAML config file and returns a clientv3 Config object with TLS settings based on the configuration.
365	RegisterElectionHandler registers an election handler using gRPC.
366	UpdateCapability updates the enabled capabilities based on the given version and logs the change using zap or plog.
367	NewLockCommand creates a Cobra command to acquire a named lock with optional TTL.
368	tick will call Tick method on raftNode after acquiring lock
369	advanceTicks will update the raft node's state by calling tick method for the given number of times
370	NewAuthCommand creates a Cobra command for enabling or disabling authentication.
371	authEnableCommandFunc enables authentication or creates root role and grants it if necessary
372	authDisableCommandFunc disables authentication and handles errors gracefully
373	RetryKVClient returns a retryable KV client using the provided connection.
374	RetryLeaseClient creates a retry wrapper around a LeaseClient.
375	RetryClusterClient returns a retryable cluster client using the provided connection.
376	RetryMaintenanceClient returns a retry MaintenanceClient using the given grpc connection
377	RetryAuthClient returns a retry wrapper for AuthClient
378	NewSetDirCommand defines a CLI command to create or update a directory's TTL.
379	Enter method blocks until count clients have entered, then unblocks them all.
380	Leave method handles double barrier logic, waits for other processes, and cleans up resources.
381	HandleBasic sets up HTTP handlers for basic routes including variables, configuration, metrics, and version.
382	WriteError logs errors and writes them to HTTP response based on their type.
383	MemberByName returns a member by name or a clone of it, ensuring no duplicate names.
384	PeerURLs returns sorted peer URLs from Raft cluster members.
385	ValidateConfigurationChange checks Raft cluster config changes for validity.
386	AddMember will add a new member to the RaftCluster and log the addition.
387	RemoveMember deletes a cluster member by ID and logs the action.
388	ValidateClusterAndAssignIDs compares two Raft clusters assigns IDs based on matching peer URLs returns an error if validation fails
389	Keep will return a map of revisions to keep given a revision number
390	closeRequireLeader will close leader channels and update keepAlive data structures
391	resetRecv resets lease receiver and returns a new client stream or error
392	recvKeepAlive updates lease keep-alive status and sends responses to channels.
393	deadlineLoop manages keep-alive deadlines, closing expired ones and removing from map.
394	sendKeepAliveLoop sends keep-alive requests for expired leases using a gRPC stream.
395	NewKV initializes a leasing KV client, starts monitoring session, clears old revokes, returns KV, close function, and wait session error.
396	rescind will delete a lease key if its revision is greater than the given revision and retry until context is canceled
397	LeaseValue returns a Compare object with specified key and lease target
398	ValueBytes returns the byte representation of the target union's value or nil if it's not set.
399	WithRange sets the end of the range for the comparison and returns the updated comparison object
400	WithPrefix method sets RangeEnd to prefix of Key and returns updated Cmp object
401	mustInt64 converts an interface to int64, panicking if conversion fails
402	mustInt64orLeaseID converts val to int64, preferring LeaseID if possible
403	Next method fetches gRPC watcher updates and processes them to return service updates or errors.
404	getJournalWriteSyncer returns a sync writer or error for logging to journal
405	newKV creates a new node with given path, value, and metadata.
406	newDir creates a new directory node with specified properties
407	Read method returns node's value or an error if it's a directory
408	Write updates a node's value and modified index, returning an error if the node is a directory.
409	List method returns child nodes of a directory or an error if it's not a directory.
410	GetChild retrieves a child node by name, returning it and any errors encountered.
411	Add will add a child node to the current directory and return an error if the current node is not a directory or if the child already exists
412	Remove will delete a node and its children recursively or not based on the flags and call a callback function if provided
413	Compare compares current node's value and index with previous values and returns match status and type.
414	Clone will create a copy of the node including its children if it's a directory
415	isConnectedToQuorumSince checks if more than half of members are connected to quorum
416	isConnectedSince checks if a connection was active before a given time
417	numConnectedSince returns the count of members connected to transport after since timestamp excluding self.
418	longestConnected finds the ID of the member with the oldest active connection and returns it along with a boolean indicating if any member is active.
419	isTornEntry checks if data has zeroed sectors indicating a torn write
420	StartMockServersOnNetwork starts mock servers on a specified network and returns them or an error if the network type is unsupported
421	StartAt starts a gRPC server at a specified index in MockServers, listens on a network address, registers a KV server, and handles errors.
422	StopAt will stop the gRPC server at the specified index and decrement the wait group
423	Stop will stop all servers and wait for goroutines to finish.
424	NewCheckCommand initializes a Cobra command for checking etcd cluster properties with subcommands.
425	NewCheckPerfCommand creates a Cobra command for checking etcd cluster performance with options for workload, key prefix, and automatic compaction/defragmentation.
426	NewCheckDatascaleCommand creates a Cobra command to check memory usage for different workloads on a server endpoint.
427	NewGetCommand initializes a Cobra command for retrieving keys or ranges of keys with various options.
428	NewGetCommand creates a CLI command to retrieve a key's value with optional sorting and quorum requirement.
429	PickPeerURL selects a random peer URL from the member's list.
430	HandleMetricsHealth registers metrics and health handlers on the given HTTP mux.
431	NewRemoveCommand creates a CLI command for removing keys or directories with optional flags.
432	rmCommandFunc deletes a key or directory recursively and prints the response based on options.
433	checkIntervals processes requests to validate intervals, ensuring no duplicates or overlaps among puts and deletes.
434	ReportEventReceived decrements pending events gauge and increments total events counter by n
435	RegisterKVHandler registers a key-value handler using gRPC client connection.
436	RegisterWatchHandler registers a watch handler client using the given context, serve mux, and gRPC connection.
437	RegisterLeaseHandler registers a lease handler client to gRPC server.
438	RegisterClusterHandler registers a cluster handler client using the given context, serve mux, and gRPC connection.
439	RegisterMaintenanceHandler registers a maintenance handler client with gRPC server.
440	RegisterAuthHandler registers authentication handler with gRPC server
441	startEtcd starts an etcd server returns stop notify channel error channel and error
442	identifyDataDirOrDie checks a directory for valid data files and returns the type of directory or dies on error
443	openLast will return a LockedFile and an error if unable to open the last WAL file in the directory
444	gotLeader will signal leader channel and reset it if already signaled
445	lostNotify returns a channel that notifies when the leader is lost
446	newGRPCProxyCommand creates a grpc-proxy command with a subcommand.
447	NewMemberCommand initializes a Cobra command for membership-related subcommands.
448	NewMemberAddCommand creates a Cobra command to add a member to the cluster with optional peer URLs.
449	NewMemberRemoveCommand creates a new Cobra command to remove a member from the cluster
450	NewMemberUpdateCommand creates a Cobra command to update a cluster member with options.
451	NewMemberListCommand creates a Cobra command for listing cluster members.
452	memberAddCommandFunc adds a new member to etcd and updates configuration if necessary
453	memberRemoveCommandFunc processes a remove member command, validates arguments, sends a request to remove a member, and displays the response.
454	memberUpdateCommandFunc processes a command to update a member's details, validates arguments, makes a request, and displays the response.
455	memberListCommandFunc will execute a command to list members and display the response or exit with an error if it fails
456	Open will create a WAL instance and initialize it with a logger, directory path, and snapshot, returning an error if any step fails
457	OpenForRead initializes a WAL for reading using a logger, directory path, and snapshot.
458	Verify checks WAL files for consistency using logger, directory, and snapshot data, returning error if inconsistencies are found.
459	Close will close the WAL file, flush logs, and release locks returning any errors encountered
460	notify checks if the watcher should be notified based on the event and updates the event channel accordingly.
461	watcher.Remove closes eventChan and executes remove func if defined
462	mkPathDepth constructs a normalized path with a prefix, depth, and node path.
463	mkV2Node converts a KeyValue to a NodeExtern, handling nil input and setting directory flag based on key's last character.
464	prevKeyFromPuts extracts the previous key-value pair from a transaction response where the revision is greater than zero
465	NewWeightedReport creates a weighted report with a base report, a new report based on precision, and a results channel.
466	NewURLsMapFromStringMap creates a URLsMap from a string map using a specified separator and returns an error if any URL parsing fails.
467	URLsMap's String method returns a sorted list of URL pairs as a string.
468	URLs method returns sorted list of URLs from map
469	parse will convert a comma-separated list into a map where keys can have multiple values
470	NewClientHandler sets up HTTP handlers for etcd server with logging and timeouts.
471	writeKeyEvent encodes and writes an event to an HTTP response with appropriate headers and status codes based on the event's action.
472	writeKeyError logs errors to logger or merges them, then sends a new error response
473	getUint64 retrieves a uint64 value from URL query parameters and returns it along with any parsing errors.
474	getBool parses a boolean value from URL query parameters and returns it along with any parsing errors.
475	waitDeletes will monitor deletions under a prefix until none remain, returning the final response header or an error
476	AddOutputPaths updates zap.Config's OutputPaths and ErrorOutputPaths with new paths while discarding duplicates and sorting them.
477	NewConfig initializes a Config struct with default values for various fields related to etcd configuration.
478	PeerURLsMapAndToken returns a map of URLs and a token, resolving via DNS or static configuration.
479	GetDNSClusterNames retrieves DNS cluster names using SSL and HTTP services, combining results and logging details.
480	checkBindURLs will validate URLs ensuring they use either unix or unixs schemes, have valid IPs, or are localhost. An error is returned if any URL fails validation.
481	GetCluster resolves AP URLs and updates node map with SRV records, returning cluster details or errors.
482	GetClient fetches service URLs and SRV records, returning them or an error if DNS lookups fail.
483	GetSRVService constructs an SRV service name based on input parameters and returns it.
484	ReadDir reads directory contents, filters by extension if specified, returns sorted list of filenames or error
485	compact will perform a compaction on the client's data up to a specified revision and handle any errors that occur during the process
486	defrag will defragment a client endpoint and handle errors
487	NewUserCommand creates a new Cobra command for user-related subcommands
488	userAddCommandFunc adds a new user with a given username and password, handling interactive input and displaying the result.
489	userGetCommandFunc processes a command to retrieve user details and optionally shows roles.
490	userChangePasswordCommandFunc handles changing a user's password, prompting interactively or from arguments, sending to server, and displaying response.
491	addEvent will insert an event into the queue update lastIndex and startIndex return the added event
492	scan retrieves an Event from the EventHistory based on the given key, recursively checking subkeys if specified, ensuring the index is within valid bounds.
493	clone will create a deep copy of EventHistory and its queue returning the new instance
494	openSnapshotBackend will move a snapshot file to a new location and open a backend using the configuration, returning an error if any step fails
495	openBackend opens a backend database with a timeout and logs the operation's duration.
496	recoverSnapshotBackend will replace the backend if the snapshot index is newer than the current consistent index.
497	NewUpdateCommand creates a CLI command to update an existing key with a given value and an optional TTL flag.
498	updateCommandFunc updates a key's value with optional TTL and handles errors
499	frontAndBack retrieves the first and last items from the stats queue safely
500	Insert will add a request to the stats queue and handle overflow by removing the oldest entry
501	Rate calculates the processing and bandwidth rates based on queue statistics.
502	Clear will reset the stats queue's indices and size
503	UniqueStrings generates a slice of unique random strings of specified length up to given count.
504	RandomStrings generates a slice of random strings with specified length and count.
505	IsKeyNotFound checks if an error indicates a key not found.
506	IsRoleNotFound checks if an error is due to a missing role.
507	IsUserNotFound checks if an auth error matches the user not found regex
508	JoinCluster initializes discovery and joins cluster with given config returning result or error
509	GetCluster initializes discovery and retrieves cluster information with logging.
510	newProxyFunc will return a proxy function and an error if the proxy address is invalid
511	isSafeRetry determines if an error is safe to retry based on its type and the specified retry policy
512	withRetryPolicy sets a retry policy option
513	withAuthRetry sets whether to retry authentication and returns a retry option
514	withMax sets maximum retries for a retry option
515	withBackoff sets a backoff function for retrying operations
516	RecvAppendReq updates server state and logs request stats.
517	SendAppendReq updates server stats by locking, becoming leader, inserting request stats, and incrementing send count.
518	merge combines two bucketBuffers, adding entries from the source buffer, sorting, and removing duplicates based on keys, keeping the most recent updates.
519	deleteRevKey checks if a key has a specific revision and deletes it if so, returning success or an error
520	isMemberBootstrapped checks if a member is bootstrapped by verifying its client URLs
521	GetClusterFromRemotePeers retrieves a cluster from remote peers using logger, URLs, timeout, retry, and HTTP round tripper.
522	getClusterFromRemotePeers retrieves a Raft cluster from remote peers and logs errors if specified.
523	getRemotePeerURLs returns sorted URLs of remote peers from a raft cluster excluding the local peer's URL.
524	getVersions retrieves versions from cluster members, logging errors and handling non-local nodes
525	decideClusterVersion will determine the cluster's version based on remote members' versions and log warnings if any member has a higher or lower version than the leader.
526	getVersion retrieves versions from member URLs and logs errors if any occur
527	NewTimeoutDetector creates a new TimeoutDetector instance with a maximum duration and initializes a records map.
528	Reset TimeoutDetector records map
529	Observe checks if a timeout has exceeded and updates the record.
530	NewPeerHandler creates a handler for peer operations using logger, cluster, raft, and lease handlers.
531	put updates keyIndex with a new revision and logs if the revision is unexpected.
532	tombstone updates keyIndex with a tombstone entry logs panic if keyIndex is empty returns error if last generation is empty
533	get retrieves a revision from the keyIndex and logs an error if the keyIndex is empty
534	Since will return revisions after a given revision, logging an error if the key index is empty.
535	keep updates keyIndex generations by compacting revisions and removing tombstones when applicable
536	findGeneration returns a generation object based on revision number or nil if not found
537	cancelWatcher removes a watcher from unsynced or synced sets and updates metrics
538	syncWatchersLoop manages watchers in a loop, syncing them and adjusting wait duration based on unsynced count.
539	syncVictimsLoop continuously moves victims and updates watchers until stopped or no more victims exist.
540	moveVictims moves watchers from victims to synced or unsynced based on whether they can receive events.
541	kvsToEvents converts key-value pairs to events, filtering by watcher group and handling tombstones.
542	notify processes watch events, handles multiple revisions, moves slow watchers, and adds victims.
543	isOpFuncCalled checks if any option is a function containing the specified operation name
544	UnsafePut method calls another unsafePut method on batchTx instance with given bucketName, key, and value arguments.
545	UnsafeSeqPut calls unsafePut on batchTx instance to store a sequence of transactions.
546	UnsafeRange retrieves a range of keys from a bucket and returns them along with their values.
547	UnsafeDelete removes a key from a bucket logging errors if the bucket or key cannot be deleted.
548	UnsafeForEach iterates over a batch transaction's bucket using a visitor function, returning an error if any occur.
549	Commit will lock the batchTx, call commit method, then unlock it
550	CommitAndStop locks batchTx, commits transaction, then unlocks it.
551	Renew will extend the expiration of a lease and return its new TTL, or an error if the lease is not found or has expired.
552	Attach method adds items to a lease and updates mappings while handling concurrency.
553	revokeExpiredLeases revokes expired leases up to a limit and sends them to expiredC or retries later if full
554	checkpointScheduledLeases manages scheduled leases, applying rate limiting and processing batches until all due checkpoints are handled or the batch size is reached.
555	expireExists checks if a lease exists and returns it along with flags indicating if it's expired, needs removal, or is still valid.
556	findExpiredLeases will return a list of expired leases up to a specified limit
557	refresh will extend the lease duration by adding the given duration to the current expiry time and update the lease's expiry time safely using a mutex
558	forever method sets lease expiry to forever safely
559	Lease.Keys returns a list of item keys while holding a read lock on the lease's mutex
560	Remaining calculates the duration until lease expiry or returns max duration if expired.
561	NewCompactionCommand creates a Cobra command for compacting etcd event history with options to wait for physical removal.
562	compactionCommandFunc processes a compaction command, validates arguments, parses revision, sets options, performs compaction, and handles errors.
563	NewPutCommand creates a new cobra command for putting key-value pairs into a store with options for lease, previous KV, ignoring value, and ignoring lease.
564	putCommandFunc processes a command to put a key-value pair and displays the response or exits with an error.
565	NewHandler creates an HTTP handler with proxy functionality.
566	NewReadonlyHandler returns a new HTTP handler that wraps the given handler to make it readonly.
567	NewSetCommand creates a CLI command to set key values with options for TTL, swap, and action.
568	setCommandFunc sets a key-value pair in etcd with optional TTL and swap options handling errors and printing response
569	waitOnLastRev checks if a key is blocking and waits for its release, returning a bool and an error
570	GetDefaultInterfaces returns an empty map and an error indicating default host is not supported for current OS/Arch.
571	NewSnapshotCommand creates a new cobra command for managing etcd snapshots.
572	NewMoveLeaderCommand creates a Cobra command for transferring leadership to another etcd member.
573	transferLeadershipCommandFunc transfers leadership to a specified target using the move-leader command
574	OpenDir opens a directory and returns a file descriptor or an error
575	NewRemoveDirCommand creates a CLI command to remove directories or key-value pairs if they're empty.
576	rmdirCommandFunc will delete a directory key and print response based on output option
577	NewDelCommand creates a Cobra command for deleting keys or ranges of keys with options to specify prefix, return deleted KV pairs, or delete from a specific key.
578	delCommandFunc processes delete operation using command arguments, client context, and options, displaying response or exiting with error.
579	NewExpect creates an ExpectProcess instance with optional arguments using the current environment or a specified one.
580	NewExpectWithEnv initializes a new ExpectProcess with specified command, arguments, and environment, starts a pseudo-terminal session, and returns the process along with any errors encountered.
581	ExpectFunc waits for a line matching a condition and returns it or an error.
582	Expect checks if input contains specified string and returns it along with any errors encountered during the process.
583	LineCount returns the current count after acquiring the lock on ExpectProcess.
584	Signal sends the given signal to the process managed by ExpectProcess.
585	keyFunc will convert a RangeRequest message to a string using Marshal and return it, panicking on error
586	Add method updates cache based on RangeRequest and RangeResponse, handles revisions and updates cached ranges accordingly.
587	Get retrieves a cached response based on the request key and revision, updating cache state if necessary.
588	Invalidate will remove cached ranges based on the provided key and endkey, updating the LRU cache accordingly.
589	Compact updates the cache's compacted revision to the higher of the current and input revision.
590	NewUniqueURLsWithExceptions creates a new set of unique URLs with allowed exceptions.
591	UniqueURLsFromFlag retrieves URLs from a flag set and returns them.
592	UniqueURLsMapFromFlag extracts URLs from a flag set and returns them as a map.
593	Hold will return an error if creating a key fails
594	Release will delete a barrier key from the client and return any errors encountered
595	Wait method waits for a barrier key to be removed or updated returns an error if unsuccessful
596	NewLockRacerCommand creates a Cobra command for performing lock race operations with options for total client connections.
597	ElectionTimeout returns member's election timeout duration in milliseconds.
598	DialEtcdGRPCServer establishes a gRPC connection to an etcd server using specified options and TLS configuration based on client URLs.
599	CreateEtcdClientConfig generates an etcd client config using member's etcd URLs and options, handling secure connections with TLS.
600	CreateEtcdClient will create and return an Etcd client using the provided options or return an error if the configuration creation fails
601	CheckCompact verifies etcd compact revision matches expected value.
602	Defrag method on Member struct creates etcd client, performs defragmentation, cancels context, and returns error.
603	RevHash will return the revision and hash values from etcd and an error if the request fails
604	Rev retrieves etcd client revision using context and endpoint.
605	Compact will compact etcd keys older than a given revision within a specified timeout returning an error if unsuccessful
606	IsLeader checks if the member is the leader in etcd and returns a bool and error
607	WriteHealthKey creates an etcd client, puts "health:good" key-value pair, and handles errors.
608	SaveSnapshot removes old snapshot, creates new etcd client config, logs start, saves snapshot, calculates duration, gets file info, retrieves status, populates SnapshotInfo, logs end.
609	RestoreSnapshot removes old data, logs start, restores snapshot, logs end with details and duration.
610	NewWatcher wraps a clientv3 watcher with a prefix and returns it.
611	NewRawNode initializes a Raft node from configuration and peers, handling both new and restored nodes.
612	Campaign sends a heartbeat message to the raft group and returns an error if the operation fails
613	Propose method sends proposed data to raft node.
614	ProposeConfChange serializes a configuration change proposal and sends it to the Raft node.
615	ApplyConfChange updates Raft configuration based on ConfChange message and returns updated ConfState.
616	Step processes a message, ignoring local ones, steps raft or returns an error based on progress.
617	`Ready checks if the node is ready to commit entries and returns the current state.`
618	WithProgress applies visitor to each peer and learner progress in RawNode.
619	ReportUnreachable sends an unreachable message to the specified ID
620	ReportSnapshot updates raft node with snapshot status.
621	TransferLeader sends a transfer leader message to the specified transferee.
622	ReadIndex sends a read request to the raft node with the given context.
623	printcURL logs a cURL command from an HTTP request and resets the body.
624	StartNode initializes a Raft node with given config and peers, applying initial configuration entries and starting the node in a goroutine.
625	RestartNode initializes a new node with given config, starts it in a goroutine, and returns a pointer to the node.
626	Tick method sends signal to node or logs warning if it misses.
627	MustSync returns true if there are unsynced entries or term/vote changes between states.
628	NewGRPC17Health initializes a new GRPC17Health instance with given endpoints, timeout, and dial function.
629	NeedUpdate checks if GRPC17Health needs address update based on connection status and pinAddr presence.
630	dflSignal sets the specified signal to its default action using syscall.
631	New creates a store instance with specified namespaces and sets the real clock.
632	Index returns the current index of the store safely.
633	Get retrieves a node from the store and returns an event or an error based on success or failure.
634	Create node with path, directory flag, value, uniqueness, and expiration options; returns event and error.
635	Set will update or create a node and return an event with success or failure stats and an error if any.
636	getCompareFailCause returns a comparison failure message based on the node's modified index and value and previous values and indices
637	delete a node or directory recursively and return an event and error
638	walk will traverse a tree structure using a given path and a callback function to process each node, returning the final node and any errors encountered
639	internalGet retrieves a node based on its path, returning the node or an error if not found or not a directory
640	DeleteExpiredKeys removes expired keys from the store and notifies watchers.
641	checkDir will return a directory node and an error if the directory does not exist or is not a directory
642	Save method serializes store instance to JSON and returns byte array and error
643	Recovery will parse state to update store's world lock, unmarshal JSON, reset TTL key heap, recover root, and return error if any.
644	Next will return the next unique ID generated by appending a suffix to a prefix and ensuring uniqueness using atomic operations.
645	NewMakeMirrorCommand creates a Cobra command for making a mirror of an etcd cluster with various options for customization.
646	NewZapCoreLoggerBuilder initializes a logger builder with given parameters and configures it with specified values.
647	NewSyncer creates a new syncer instance with given client, prefix, and revision.
648	DropPort executes iptables commands to drop outgoing and incoming TCP traffic on a specified port.
649	SetLatency configures network latency on default interfaces using tc command, correcting rv if greater than ms, and handles existing rules gracefully.
650	RemoveLatency will delete network latency from default interfaces and return an error if any step fails
651	NewTxnCommand creates a Cobra command for processing transactions interactively or non-interactively.
652	txnCommandFunc handles transaction commands reading input from stdin and displaying the response.
653	New will create a Compactor based on the mode provided and return it along with an error if the mode is unsupported
654	printResponseKey formats client response based on specified output format
655	RegisterLockHandler registers a lock handler client with gRPC server context and connection.
656	grpcHandlerFunc will return an HTTP handler that serves gRPC requests or forwards them to another handler based on request content type
657	addCORSHeader adds CORS headers to response writer for specified origin
658	fallback generates get operations for non-get operations in a transaction.
659	IDFromString converts a hexadecimal string to an ID and returns an error if parsing fails
660	release will remove the pid file and close the file descriptor returning any errors encountered
661	EncodedSize calculates the encoded size of ValueStruct considering its fields.
662	Decode will set Meta, UserMeta, ExpiresAt, and Value from byte slice b.
663	NewMergeIterator creates a new merge iterator for given iterators and direction
664	initHeap initializes heap from iterators, stores first valid key.
665	MergeIterator's Valid method checks if it's non-nil and has elements, returning whether the first iterator is valid.
666	MergeIterator's Key method returns the first iterator's key or nil if empty.
667	MergeIterator's Value method returns the first iterator's value or an empty struct if the heap is empty
668	MergeIterator's Next method advances to the next item, updating keys and storing valid items.
669	MergeIterator's Seek method iterates over all iterators and seeks to the given key before reinitializing the heap.
670	Close will close all iterators in MergeIterator and return an error if any fail
671	Encode method encodes Fid, Len, Offset values into byte slice and returns it
672	Decode method sets header fields from byte buffer.
673	encodeEntry serializes an Entry to a buffer with header and CRC32 checksum.
674	SetEntry updates entry in write batch committing if txn too big
675	Set will add a key-value pair to WriteBatch and return an error if unsuccessful
676	SetWithTTL sets a key-value pair with an expiration duration in a write batch and returns an error if unsuccessful
677	Delete key from batch, commit transaction, handle errors
678	commit will return an error if there is one otherwise it commits the transaction and starts a new one
679	Flush will commit the write batch discard the transaction unlock the write batch wait for all goroutines and return the error
680	WriteBatch's Error method returns any accumulated error, locking and unlocking the batch during access.
681	db.getMemTables returns slice of memtables and a cleanup func to decrement refs
682	writeRequests processes requests, writing to value log, memtable, and updating head, returning any encountered errors
683	ensureRoomForWrite checks if DB needs flushing, locks DB, attempts to flush if necessary, unlocks, and returns error or success
684	writeLevel0Table writes a level 0 table to a file and returns an error if any occurs during the process
685	handleFlushTask manages flushing tasks, storing metadata and committing data to disk, handling errors during the process.
686	flushMemtable manages memtables by handling flush tasks until the channel closes or errors occur, updating immutable lists and retrying on failures.
687	calculateSize computes LSM and Vlog sizes, updates expvar counters
688	DB.Size retrieves LSM and Vlog sizes from expvar variables
689	Next will return the next available value from the sequence or update the lease if needed
690	Release will update the sequence's next value in the database and set leased to next, returning any errors encountered
691	KeySplits returns sorted strings from DB tables where Right key starts with given prefix
692	Flatten function in DB struct attempts to consolidate levels using multiple workers, compacting them until only one level remains, logging progress and errors.
693	Mmap maps a file to memory, returning a byte slice and an error if the mapping fails.
694	Madvise adjusts memory advice for a byte slice based on readahead preference.
695	setDiscardTs updates the discard timestamp in the oracle object while ensuring thread safety
696	hasConflict checks if a transaction has conflicts based on its reads and the oracle's commits.
697	Set assigns a key-value pair to a transaction and returns an error if the entry cannot be set.
698	SetWithMeta will store a key-value pair with metadata in the transaction and return an error if unsuccessful
699	deleteKey will modify the transaction entry to delete the specified key and return an error if unsuccessful
700	Get retrieves an item from a transactional database based on a key, returning the item or an error if the key is empty, the transaction is discarded, or the key does not exist.
701	CommitWith commits transaction and runs callback with result or error.
702	View executes a function within a database transaction and discards it afterward.
703	Update will execute a transaction using the provided function and commit it, handling errors appropriately.
704	Seek advances block iterator to specified key or end of iteration.
705	SeekToLast will move iterator to last valid position or set error if invalid
706	parseKV updates key and val from data based on header values, handling buffer resizing and bounds checking.
707	NewIterator creates a new iterator for table t, optionally reversed, increments reference count, and returns it.
708	seekFrom adjusts the iterator's position based on a given key and seek mode, using binary search to locate the appropriate block and then refining the search within that block.
709	seekForPrev adjusts iterator's position to find previous key based on given key
710	Value will decode and return the current iterator's value
711	Seek will move the iterator to the specified key or the closest previous key based on the iteration direction
712	NewConcatIterator creates a new ConcatIterator from a list of tables and a reversal flag
713	Valid checks if the current item in ConcatIterator is valid.
714	Next method advances the iterator or rewinds it through empty tables until a valid item is found or the end is reached.
715	Close ConcatIterator to release resources and handle errors
716	OpenExistingFile opens a file with specified filename and flags returns a file pointer and error if any
717	Copy will return a copy of the input byte slice
718	KeyWithTs prepends a timestamp to a byte array using big-endian encoding and returns the result.
719	ParseTs extracts a uint64 from the last 8 bytes of key, subtracting it from MaxUint64.
720	ParseKey removes the last 8 bytes from a non-nil key
721	SameKey checks if two byte slices have equal parsed keys.
722	FixedDuration converts duration to a formatted string showing hours, minutes, and seconds.
723	NewCloser creates a Closer instance with an initial wait count.
724	NewThrottle initializes a Throttle instance with a buffered channel for limiting concurrent operations.
725	Do method on Throttle type attempts to send a struct to channel or receive an error, adding to wait group if successful
726	Done method sends error to channel if any, checks throttle state, and decrements wait group.
727	Finish waits for all tasks to complete then closes channels returning any errors encountered.
728	SetDiscardTs sets the discard timestamp for the database if transaction management is enabled.
729	openReadOnly opens a log file for reading and maps it to memory, returning an error if any step fails
730	iterate processes log entries starting from a given offset, applying a function to each entry and returning the new offset or an error.
731	sortedFids returns a sorted list of file IDs that are not marked for deletion.
732	write will process requests, encode entries, update pointers, and flush data to disk based on specified conditions.
733	populateDiscardStats populates discard statistics from the database or initializes it if empty
734	Backup will write database backup to writer starting from given sequence number
735	ToList converts iterator items to a KeyValueList, filtering by key and handling versioning.
736	produceRanges will send ranges of keys to a channel based on database splits and close the channel when done
737	produceKVs reads key-value pairs from a database within a specified time transactionally and sends them to a channel in chunks.
738	Orchestrate manages stream processing, coordinating range production, KV list generation, and key streaming with error handling.
739	NewStream creates a new stream if not in managed transaction mode.
740	NewStreamAt creates a new stream at a specified timestamp in managed mode
741	DecrRef decrements the table's reference count, deletes the file if no references remain, and handles memory mapping and file operations accordingly.
742	ParseFileID extracts a numeric ID from a filename suffix and returns it as a uint64 along with a boolean indicating success.
743	PrintHistogram prints histograms of key and value sizes for a given prefix in a database.
744	newSizeHistogram creates and returns a new sizeHistogram instance with predefined key and value bins.
745	buildHistogram creates a size histogram for keys and values in a database with a given prefix.
746	printHistogram will display the total count, min, max, mean, and distribution of values in a histogram.
747	WaterMark.Init sets up channels and logs, then starts processing.
748	Begin updates watermark's last index and sends a mark to channel.
749	BeginMany updates lastIndex and sends a mark message to markCh with initial index 0 and given indices.
750	Done method sends a mark with given index to WaterMark's channel indicating completion.
751	DoneMany sends a mark message with specified indices to the WaterMark's channel.
752	SetDoneUntil updates the watermark's doneUntil value atomically.
753	WaitForMark will block until the watermark is reached or the context is canceled.
754	Encode method encodes header fields into byte slice using big-endian encoding.
755	Decode will set header fields from buffer and return size.
756	NewTableBuilder initializes a Builder with key and data buffers and sets initial offset.
757	keyDiff returns the difference between two keys starting from the first differing byte
758	Add will add a key-value pair to the builder and handle block restarts if needed.
759	blockIndex calculates the size of the restart array and returns it as a byte slice.
760	Finish method processes keys using Bloom filter, updates buffer, and returns byte slice.
761	opt.Errorf logs an error message using opt.Logger if it's not nil
762	Infof logs a message using the logger if it's set
763	DecrRef decrements the reference count and resets the arena if it reaches zero.
764	NewSkiplist creates a new skip list with specified arena size and returns a pointer to it.
765	Put method inserts or updates a key-value pair in a skip list using a probabilistic approach.
766	Get will retrieve a value from the skiplist using a key, returning an empty ValueStruct if the key is not found or if the keys do not match.
767	Key retrieves the key from the iterator's current node.
768	Value will return a value struct from the iterator's list arena based on offset and size
769	Next advances the iterator to the next item and returns it.
770	Prev method updates iterator to previous item ensuring validity.
771	Seek updates the iterator's position to the nearest element greater than or equal to the target byte slice.
772	SeekForPrev will search for the closest previous element to the target in the list.
773	NewUniIterator creates a new iterator for a skiplist with optional reversal.
774	UniIterator's Next method advances or retreats based on its reversed state.
775	Seek will move iterator to specified key or previous key based on reversed flag
776	asChanges will return a list of manifest changes for each table in the manifest
777	rewrite will close the file pointer, perform a rewrite operation, update the manifest, and return any errors encountered
778	validate checks if tables are sorted correctly and returns an error if they are not
779	acquireDirectoryLock will return a directory lock guard or an error if unable to create a lock file
780	release will reset path and close handle returning an error
781	AssertTruef logs a fatal error with a formatted message if the condition is false
782	Wrapf will wrap an error with a formatted message and return it. If debug mode is off, it returns the original error or a new one with formatting. If debug mode is on, it uses errors.Wrapf to wrap the error.
783	initTables initializes table handler's tables and total size sorts them based on fileID or keys
784	deleteTables removes specified tables from levelHandler and updates total size and references.
785	tryAddLevel0Table adds a table to level 0 if within limit and returns success
786	getTableForKey retrieves tables based on a key, handling different levels and ensuring reference counting.
787	get retrieves the highest versioned value for a key from multiple tables, returning the value and a decrement function.
788	overlappingTables will return the indices of tables overlapping with given key range
789	String method returns formatted string representation of Item instance.
790	KeyCopy copies item's key to dst safely and returns the result.
791	ValueSize returns the size of the item's value based on its metadata and pointer, accounting for key length, timestamp, and headers.
792	NewKeyIterator creates a new iterator with the given key and options, setting the prefix to the key and marking it as a key.
793	Valid checks if the iterator's item key starts with the given prefix.
794	ValidForPrefix checks if iterator's key starts with given prefix and iterator is valid.
795	Close method marks iterator as closed waits for goroutines to finish decrements iterator count
796	parseItem processes an iterator to filter and set items based on conditions.
797	Seek updates iterator to point to key or prefix, handling reverse iteration and timestamping.
798	GetMergeOperator initializes a MergeOperator with a merge function, database, key, and closer, then starts compaction goroutine and returns it.
799	Get retrieves merged data from the database or returns existing data if no merge is needed.
800	compareAndAdd updates ranges and delSize if no overlap exists and returns true if successful
801	newArena initializes a new arena with a given size and reserves offset=0 as a nil pointer
802	putNode calculates and returns an aligned offset for a node based on its height in the arena, ensuring proper memory alignment.
803	getNode retrieves a node from an arena using an offset and returns it.
804	getKey extracts a byte slice from Arena's buffer based on given offset and size.
805	getVal retrieves a value from an arena buffer and decodes it into a ValueStruct.
806	getNodeOffset calculates the offset of a node within an arena's buffer and returns it as a uint32.
807	init initializes various metrics using expvar for monitoring disk reads, writes, and other operations in BadgerDB.
808	revertToManifest checks manifest files, deletes unnecessary ones, and returns an error if any issues arise
809	dropTree deletes tables and updates manifest returning count or error
810	dropPrefix removes the specified prefix from keys in levels, triggering compactions when necessary.
811	isLevel0Compactable checks if the first level has enough tables to compact based on the configuration.
812	doCompact manages compaction for specified levels, handling L0 and others, ensuring data integrity and efficiency.
813	get will retrieve a value based on a key and update maxVs if necessary
814	seekTotal will retrieve all accounts from the transaction and calculate their total balance, returning an error if the balance does not match the expected value.
815	findFirstInvalidTxn identifies the first invalid transaction timestamp within a given range.
816	Create will initialize a new snapshot sink and return it along with any errors encountered during creation
817	List returns snapshot metadata or an empty list if no snapshot exists
818	Open will return the snapshot metadata and contents for the given ID or an error if the ID does not match.
819	Write method copies data to snapshot sink and updates metadata size returning bytes written and error
820	NewFileSnapshotStoreWithLogger initializes a new file snapshot store with optional logging, ensuring the base directory exists and testing permissions.
821	NewFileSnapshotStore initializes a file snapshot store with optional logging.
822	snapshotName generates a unique name using term, index, and current timestamp in milliseconds.
823	Create a FileSnapshotStore instance and initialize it with given parameters, creating a new snapshot directory and writing metadata and state file. Return a SnapshotSink object or an error if any step fails.
824	List will return a list of SnapshotMetas up to the retain limit or an error
825	getSnapshots retrieves file snapshots from a directory, filters out invalid ones, reads their metadata, validates versions, sorts them, and returns up to the retain count.
826	readMeta opens a meta file, buffers the I/O, reads JSON data, and returns a fileSnapshotMeta object or an error
827	Open will return snapshot metadata, reader, and error if any step fails
828	ReapSnapshots will remove old snapshots from the filesystem and log errors encountered during the process.
829	Write method writes byte slice to buffered writer returning written bytes and error
830	Close will release resources and finalize the snapshot, handling errors during process.
831	Cancel will close a file snapshot sink and remove its directory, handling errors appropriately
832	finalize flushes buffer syncs stateFile closes file sets fileSize and CRC returns error
833	writeMeta will create, buffer, and sync a meta file with JSON-encoded snapshot metadata returning any encountered errors
834	NewNetworkTransportWithConfig initializes and returns a new NetworkTransport instance with default logger if none provided.
835	setupStreamContext initializes a stream context for network transport
836	getStreamContext returns the stream context of NetworkTransport safely.
837	SetHeartbeatHandler assigns a callback function to handle heartbeats in NetworkTransport.
838	CloseStreams releases network connections and updates context.
839	Close will shut down the network transport and return an error if already closed
840	getPooledConn retrieves a connection from the pool for a given target server address, locking the pool during operation to ensure thread safety.
841	getConnFromAddressProvider fetches a connection using an address provider or fallback, returning a netConn and an error if unsuccessful.
842	getConn retrieves a network connection from a pool or dials a new one, wraps it, and sets up encoders/decoders.
843	returnConn adds or releases a connection based on pool size and shutdown status
844	listen method handles incoming network connections with exponential backoff on errors until shutdown
845	handleConn manages network connections, reads commands, handles them, and sends responses, logging errors and closing on context done or I/O errors.
846	handleCommand reads an RPC type, decodes the corresponding request, checks for heartbeats, dispatches the RPC, and waits for a response to send back.
847	decodeResponse decodes a response from a connection and returns an error if any
848	sendRPC sends an RPC request over a connection and returns an error if it fails
849	newNetPipeline initializes a network pipeline with transport, connection, channels, and starts decoding responses.
850	decodeResponses handles decoding responses from a network pipeline with timeouts and shutdown handling.
851	AppendEntries sends RPC request and returns future or error
852	Close will release the connection and set shutdown flag returning an error if already closed
853	NewObserver creates a new Observer instance with given channel, blocking flag, and filter function.
854	RegisterObserver adds an observer to Raft's list of observers.
855	DeregisterObserver removes an observer from the Raft's list of observers.
856	observe processes notifications for registered observers without blocking, filtering based on observer criteria.
857	NewInmemStore initializes and returns a new InmemStore instance with maps for logs, key-value pairs, and integer values.
858	FirstIndex retrieves the lowest index from InmemStore safely.
859	LastIndex returns the last index and an error if the store is not available
860	GetLog retrieves a log entry by index and returns an error if not found.
861	StoreLog will store a single log entry and return an error if it fails
862	StoreLogs will store logs in memory and update low and high indices.
863	DeleteRange will delete entries within a specified key range and adjust low and high indices accordingly.
864	Set will store a key-value pair in InmemStore and return an error if unsuccessful
865	Get retrieves a key's value from InmemStore and returns it or an error if not found.
866	SetUint64 sets a key-value pair in memory store and returns error if any.
867	GetUint64 retrieves a uint64 value from the InmemStore using a key and returns it along with any errors encountered.
868	NewLogCache creates a new log cache with the specified capacity and returns it along with any errors encountered during creation.
869	Connect will add a peer to the InmemTransport instance.
870	Disconnect will remove a peer from the transport and close any associated pipelines.
871	DisconnectAll will close all connections and clear peer and pipeline data
872	Respond sends response and error to channel.
873	Open will return a SnapshotMeta, ReadCloser, and error if no snapshot is available or if the opener is called multiple times
874	vote updates leader votes and notifies when quorum reached or immediately if not leader
875	notifyAll sends votes to all futures and clears the waiting list
876	cleanNotify removes a verifyFuture from followerReplication's notify map
877	LastContact returns the last contact time with a read lock on the follower replication object.
878	setLastContact updates last contact timestamp with current time safely using mutex
879	replicate manages asynchronous replication, handles RPCs, and switches to pipeline mode for high-performance replication.
880	pipelineReplicate manages Raft log replication to followers using pipelines, handling errors, stopping conditions, and decoding responses.
881	pipelineSend sends append entries to a follower and updates nextIdx, returning whether to stop.
882	pipelineDecode processes follower responses and updates Raft state, handling stale terms and aborting on failure or stop signal.
883	setupAppendEntries configures AppendEntriesRequest with necessary details and returns an error if any step fails
884	setPreviousLog updates AppendEntriesRequest PrevLogEntry and PrevLogTerm based on nextIndex and Raft logs, handling edge cases for first index and snapshots.
885	setNewLogs appends logs to req up to MaxAppendEntries or lastIndex returns error if failed to retrieve logs
886	appendStats records RPC duration and increments log count for a peer
887	handleStaleTerm logs an error when a peer has a newer term and stops replication by notifying followers and asynchronously signaling step-down.
888	AppendEntries appends entries to a server and sends RPC response.
889	sendRPC sends RPC request to server and returns error
890	InstallSnapshot logs a message and returns an error
891	EncodePeer converts server address to byte slice
892	DecodePeer converts peer bytes to ServerAddress
893	AppendEntries appends entries to the pipeline and returns an AppendFuture and an error if the operation fails
894	ReadPeersJSON reads a JSON file and converts it into a Configuration object while validating its contents.
895	ReadConfigJSON reads a JSON config file and returns a Configuration object along with any errors encountered during parsing or validation.
896	NewTCPTransport initializes a TCP transport with bind address, advertise address, maximum pool size, timeout, and log output returning a network transport and an error.
897	NewTCPTransportWithLogger creates a TCP transport with logging functionality.
898	NewTCPTransportWithConfig creates a TCP transport with given config and returns it along with an error.
899	Dial connects to a TCP server and returns a connection or an error
900	Accept will return a new connection and an error if the connection cannot be accepted
901	Addr method returns the advertised address or the listener's address
902	restoreSnapshot attempts to load and apply the most recent snapshot, updating state and configurations accordingly, or returns an error if no valid snapshots are found.
903	BootstrapCluster initializes a cluster request and returns a future based on the shutdown status or successful bootstrapping.
904	Leader returns the current leader's address safely using a lock
905	Apply command to Raft with optional timeout, returns ApplyFuture on success or error
906	Barrier will return a future result after a timeout or on shutdown an error will be returned if either condition occurs
907	VerifyLeader checks if the leader is valid, increments metrics, handles shutdown, and sends verification future.
908	AddVoter will send a configuration change request to add a voter server and return a future with the result or an error if the protocol version is unsupported.
909	RemoveServer will send a configuration change request to remove a server and return a future with the result or an error if the protocol version is unsupported
910	Raft.Shutdown initiates or prevents shutdown, returning a future indicating status.
911	SnapshotFuture from Snapshot method on Raft struct handles user snapshot request or shutdown scenario
912	Restore will apply a snapshot and a no-op log entry to Raft returning an error if it times out or is shut down
913	String method returns Raft node details as a formatted string
914	LastContact returns the last contact time of a Raft instance.
915	Logf method logs a formatted message using the underlying logger adapter.
916	containsNode checks if a node exists in a list of raftNodes
917	LeaderPlus returns up to n raft nodes including the leader, ensuring no duplicates.
918	WaitTilUptoDate waits for all nodes in the cluster to apply the same index within a maximum wait duration, logging progress or failing if not met.
919	assertLogEntryEqual checks if two raft log entries are equal and reports errors using t.Errorf if they differ.
920	runFSM manages Raft's state machine, handling commits, restores, and snapshots.
921	Clone method creates a copy of the Servers slice in the Configuration struct.
922	Clone method creates a copy of the configurations struct with its nested committed and latest fields cloned.
923	hasVote checks if a server with given ID has voting rights in the configuration
924	checkConfiguration verifies server IDs and addresses in a config ensuring uniqueness and at least one voter.
925	nextConfiguration updates a cluster's configuration based on a change request, ensuring valid transitions between server roles and maintaining quorum.
926	encodePeers will return encoded peer information from configuration using transport method or panic if encoding fails
927	decodePeers will return a Configuration object containing decoded servers from the input buffer using the provided transport.
928	encodeConfiguration encodes a configuration object to MsgPack and returns the byte buffer or panics on failure
929	decodeConfiguration will parse a byte buffer into a Configuration object and panic on failure
930	goFunc starts a new goroutine to execute the given function f and waits for it to complete.
931	getLastIndex returns the maximum of lastLogIndex and lastSnapshotIndex while ensuring thread safety
932	getLastEntry returns the last log or snapshot index and term
933	checkRPCHeader validates RPC header protocol version and supports backward compatibility
934	setLeader updates Raft's leader and notifies observers if it changes
935	requestConfigChange sends a config change request to Raft and returns a future indicating success or failure due to timeout or shutdown.
936	run starts a Raft server's main loop handling different states and shutdown
937	runFollower manages follower state, processes RPCs, handles configuration changes, applies commands, verifies data, responds to user restores, clones configurations, bootsstraps, restarts heartbeat timers, checks contact, transitions to candidate on timeout, shuts down gracefully.
938	liveBootstrap initializes Raft cluster with configuration and sets current term and last log entry.
939	runCandidate manages Raft's candidate state, processes RPCs, votes, and transitions states based on outcomes.
940	runLeader transitions Raft node to leader state, initializes leadership structures, starts replication, dispatches no-op log, and manages state on step-down.
941	startStopReplication manages Raft's replication by starting new goroutines for added peers and stopping them for removed ones.
942	configurationChangeChIfStable returns a channel for configuration changes if the latest config is committed and the leader has committed an entry.
943	verifyLeader increments votes, sets quorum, tracks request, triggers heartbeats
944	checkLeaderLease checks Raft leader's lease duration, logs failures, and steps down if unable to contact quorum.
945	restoreUserSnapshot will apply a user snapshot to the Raft system, updating the state machine and metadata, and handling errors during the process.
946	appendConfigurationEntry updates the cluster configuration based on a new request, logs the change, and dispatches it to followers.
947	dispatchLogs processes log entries, updates leader state, commits them locally, and notifies replicators.
948	processLogs applies logs from a given index and updates the last applied index and term
949	processLog handles log entries by forwarding commands to the FSM or invoking futures based on log type.
950	processRPC handles different RPC commands by checking headers and calling appropriate handlers or logging errors
951	processHeartbeat handles RPCs, ignoring shutdowns and processing AppendEntriesRequests, logging errors for unexpected commands.
952	setLastContact updates last contact time with current time safely
953	persistVote will save vote term and candidate to stable storage and return error if failed
954	setCurrentTerm updates the Raft instance's term and persists it to disk before setting the state.
955	setState updates Raft's state, notifies observers if changed
956	getCommitIndex retrieves the commit index from a commitment object while ensuring thread safety.
957	recalculate updates commitIndex if quorum match index is valid
958	randomTimeout generates a timeout channel with a minimum duration and additional randomness
959	generateUUID will create and return a UUID using cryptographically secure random bytes
960	decodeMsgPack will decode a MsgPack-encoded byte buffer into an interface{} object and return an error if decoding fails
961	encodeMsgPack will serialize an interface to a MsgPack encoded byte stream and return the buffer and any encoding errors
962	backoff calculates exponential backoff duration based on base, round, and limit
963	newApplySource generates a hash seed and initializes applySource with it
964	reset will reinitialize the random number generator with the seed value
965	DefaultConfig returns a default configuration object for the system.
966	ValidateConfig checks if the configuration settings meet certain criteria and returns an error if they do not.
967	runSnapshots manages snapshots triggered by time or user request, logging errors if snapshot fails
968	shouldSnapshot determines if a snapshot should be taken based on the log index and the last snapshot index
969	takeSnapshot initiates a snapshot, waits for FSM and config responses, checks conditions, creates, persists, and closes the snapshot, updating info and compacting logs, returning snapshot ID or error.
970	Raft.compactLogs truncates logs based on snapshot index and configuration settings, ensuring at least trailing logs remain.
971	WebpackCheck verifies if the local webpack.config.js matches the template and replaces it if necessary.
972	New will create a new generator based on options, validate them, and initialize version control with the specified provider.
973	UnixSocket creates a new Unix listener and returns it along with an HTTP server or an error
974	Get retrieves an error handler based on status or defaults to a global handler
975	PanicHandler catches panics, logs errors, emits events, and invokes error handlers.
976	partialFeeder adjusts name to include prefix and correct extension then retrieves template string
977	New will create and configure a new Engine instance with default options and template engines.
978	WriteTo method on Message struct writes message to writer and returns number of bytes written and error if any
979	SMTPSender.Send sets up and sends an email using the provided message object.
980	NewSMTPSender creates an SMTPSender instance from host, port, user, and password, returning an error if the port is invalid.
981	Param retrieves a parameter value from the context's parameters using the specified key.
982	Set will store a key-value pair in the context's data map with mutex locking to ensure thread safety
983	defaultContext.Value retrieves a value from its data map or falls back to the parent context's value
984	Redirect handles HTTP redirection, processes URL parameters, and updates session flash data.
985	File method parses multipart form data retrieves file and returns it along with error if any
986	MarshalJSON converts DefaultContext to JSON by excluding itself and marshaling other values.
987	New will create a new genny group and transformer based on options and templates, returning an error if validation fails
988	New creates an App instance with default settings and custom options.
989	DeprecrationsCheck scans files for deprecated usages and updates them, appending warnings to Runner's Warnings slice.
990	List method returns an error indicating resource not implemented.
991	Render will execute the renderFunc method on the funcRenderer instance, passing w and data, and return any error encountered.
992	Save session data using request and response.
993	GetOnce retrieves and deletes a session value by name, returning it or nil if not found.
994	Set method updates session values with given name and value
995	Clear will delete all session values from the Session object
996	getSession retrieves a session from the store or root, initializes it, and returns a new Session object.
997	New creates a generator with options and runs a file generation function returning the generator and any errors.
998	New initializes a generator with options, validates them, checks for npm, runs templates, installs packages, and returns the generator.
999	New initializes a generator with options, validates them, sets up templates, and returns the generator or an error.
1000	NewMessage creates a new message with default settings and applies custom ones before setting the appropriate encoder based on the encoding type
1001	Reset method clears message header and resets parts, attachments, and embedded fields to nil.
1002	SetHeader updates message header field with values.
1003	SetHeaders sets multiple headers on a message from a map.
1004	SetAddressHeader updates message header with formatted address.
1005	FormatAddress formats a message's address with an optional name, encoding special characters and appending the email address in angle brackets.
1006	SetDateHeader updates the message header with the formatted date
1007	FormatDate converts a time to RFC1123Z string
1008	SetBody updates message's body writer with given content type and body string, applying optional part settings.
1009	SetPartEncoding assigns an encoding to a part setting
1010	SetHeader updates file headers based on provided map.
1011	SetCopyFunc assigns a copy function to a file setting
1012	AttachReader adds a reader to a message with optional settings.
1013	Attach adds a file to a message with optional settings.
1014	EmbedReader adds a reader to a message with specified settings.
1015	Embed method appends a file to a message's embedded files using a filename and optional settings.
1016	ValidateTemplates will run template validators on files walked by packd and return an error if any validator fails
1017	PlushValidator checks if file has .html, .md, or .plush extension and returns error if plush parsing fails
1018	Validate will check if App is zero and set it to "." if so then it checks if Name is empty and returns an error if it is
1019	LoadPlugins loads available plugins and registers their events for handling.
1020	WriteHeader updates response status and calls underlying WriteHeader method.
1021	Write method updates response size and forwards byte slice to ResponseWriter.
1022	Flush method on Response writer flushes buffered data if possible
1023	CloseNotify returns a channel signaling when the underlying connection has gone away.
1024	Run will execute an app update and handle warnings or errors encountered during the process
1025	onlyRelevantFiles filters out irrelevant files based on their path and extension, calling a function for relevant Go files
1026	GoTemplateEngine processes input string using provided data and helpers, returning rendered template or error
1027	addRoute method adds a new route with HTTP method "GET" path and handler returns a RouteInfo object
1028	Redirect sets up a GET route that redirects to another URL.
1029	ANY registers a handler for multiple HTTP methods on a given path
1030	buildRouteName constructs route names from path strings, singularizing certain words and handling special cases like "new" or "edit".
1031	New will create a new genny group, validate options, initialize generator, add files to group, and return the group and error
1032	NewDialer initializes a Dialer struct with host, port, username, password, SSL, Timeout, and RetryFailure set accordingly.
1033	Dialer.Dial establishes a connection using TCP, upgrades to TLS if configured, authenticates with SMTP, and returns a SendCloser interface along with any errors encountered during the process.
1034	DialAndSend establishes a connection and sends messages, returning any errors encountered.
1035	Flash.Set updates the key's values in its data map.
1036	Flash.Add appends a value to a key's slice in data map
1037	persist method serializes Flash data to JSON and saves it in session
1038	newFlash initializes a Flash object from a Session's flash data
1039	Get cookie value by name, returns value and error if not found
1040	Set sets a cookie with the given name, value, and maximum age on the response writer.
1041	SetWithExpirationTime sets a cookie with a specified expiration time
1042	Delete cookie by setting expiration to past
1043	NewMessage initializes a new message with default values.
1044	NewFromData creates a new message from render data.
1045	New creates a new message from context data and sets the context.
1046	CloseNotify returns a channel for close notifications or nil if not supported
1047	NewEventSource initializes an EventSource instance sets necessary headers returns it and an error if streaming is unsupported
1048	NewSimpleWithContext creates a new Simple instance with a logger, context, cancellation function, handlers map, and mutex.
1049	Register will add a handler to a map under a given name returning an error if the name is already taken
1050	Start initializes the worker's logger and context, returning any errors encountered
1051	Stop method logs worker stop message cancels the worker and returns no error
1052	Simple.Perform executes a job using its handler or logs an error if no handler is available
1053	PerformAt will execute a job at a specific time by calculating the duration until that time and then calling PerformIn.
1054	PerformIn schedules job execution after duration or context cancellation
1055	RouteInfo's String method returns its JSON representation with indentation.
1056	Alias method appends aliases to RouteInfo and registers them with router handling specific methods.
1057	RouteInfo's Name method updates path name and replaces route info if match found.
1058	BuildPathHelper returns a function to build URL paths from options an error will be returned if parameters are missing
1059	New will create a generator with transformers based on options and return it along with an error if validation fails or template not found
1060	New creates a generator instance from options and runs construction functions, returning the generator and any validation errors.
1061	RegisterCustomDecoder registers a custom decoder function for specified types and fields.
1062	Replace middleware function in stack with another function
1063	Routes method returns a list of routes from either root or app's routes.
1064	WrapBuffaloHandler wraps a Buffalo handler with an HTTP handler.
1065	PackageJSONCheck checks if the local package.json matches the latest Buffalo template, prompts to replace if different, and installs dependencies accordingly.
1066	match will return the converted import path and a boolean indicating whether a conversion was made
1067	Send will send messages to a sender and return an error if any message fails to send
1068	Last checks if the last part of opts matches the given name.
1069	Stop will cancel the app and log any non-cancellation errors
1070	DepEnsure will update dependencies based on configuration and run either `go get` or `dep ensure`.
1071	BuildInfo's String method returns version and time as a formatted string
1072	New initializes a generator with options, validates them, and adds necessary templates and data transformations.
1073	AddBody appends a new body to the message using the renderer and data, returning an error if rendering fails.
1074	AddBodies will add bodies to message using given renderers and return an error if any renderer fails
1075	AddAttachment appends an attachment to the message with specified details and returns no error
1076	AddEmbedded method appends an embedded attachment to the message's attachments list.
1077	SetHeader updates the message header with the specified field and value
1078	New initializes a new group with options and returns it along with an error
1079	New initializes a generator with options and modifies a template file.
1080	New initializes a generator with options and runs various functions to configure it, returning the generator and any errors encountered.
1081	Cleanup will remove temporary files, clean up resources, and perform rollback operations based on given options.
1082	MDTemplateEngine processes input using templates, escaping HTML, and applying content type-specific rendering.
1083	Update will modify or create a ConfigMap based on given updates and return an error if the operation fails
1084	FilterChanges processes PR changes to identify and update relevant configmaps based on filenames and statuses.
1085	getLabelsFromREMatches extracts labels from regular expression matches and returns them in lowercase with a prefix.
1086	getLabelsFromGenericMatches filters labels from matches based on additional labels
1087	Start method initializes configuration loading and periodic reloading based on file modification times.
1088	Subscribe method adds a subscription to Agent's subscriptions list.
1089	Config method returns agent's configuration safely.
1090	Set updates config, locks mutex, sends delta to subscriptions after a delay.
1091	IsMember checks if a user belongs to an organization and returns a boolean and an error if the organization does not exist
1092	ListIssueComments retrieves comments for a specific issue and returns them along with any errors encountered
1093	ListPullRequestComments retrieves comments from a fake client for a given pull request.
1094	ListReviews returns reviews for a given owner, repo, and number
1095	ListIssueEvents retrieves issue events from a fake client.
1096	CreateComment appends a comment to the fake client's issue comments and returns nil.
1097	CreateReview will add a review to the FakeClient's Reviews map and increment ReviewID
1098	CreateCommentReaction appends a comment reaction to FakeClient's CommentReactionsAdded slice and returns nil
1099	CreateIssueReaction adds a reaction to an issue and returns an error
1100	DeleteComment removes a comment from a fake client and returns an error if the comment is not found
1101	DeleteStaleComments will remove comments from an issue if they meet the specified criteria an error will be returned if any deletion fails
1102	GetPullRequest retrieves a pull request from a fake client by owner, repository, and number, returning it or an error if it doesn't exist.
1103	GetPullRequestChanges retrieves pull request changes from FakeClient by organization, repository, and number.
1104	GetRef returns a test reference and no error for given owner, repo, and ref.
1105	DeleteRef logs the deletion of a reference and returns no error
1106	GetSingleCommit retrieves a single commit from a fake client based on the organization, repository, and SHA.
1107	CreateStatus updates or adds a status to the FakeClient's CreatedStatuses map for a given SHA.
1108	ListStatuses retrieves statuses for a given reference from FakeClient.
1109	GetCombinedStatus returns a combined status from the FakeClient for a given owner, repo, and ref.
1110	GetRepoLabels retrieves existing repository labels for a given owner and repository.
1111	GetIssueLabels extracts labels from a string using regex and returns them as a slice of github.Label.
1112	AddLabel checks if a label can be added to an issue and updates the client's state accordingly.
1113	RemoveLabel checks if a label can be removed from an issue and adds it to the list if not already present
1114	FindIssues returns all issues from FakeClient matching query, sorted by sort direction.
1115	AssignIssue assigns issue to users and returns missing users.
1116	GetFile retrieves file content from a fake client based on organization, repository, file name, and commit reference. It returns the file's byte content or an error if the file is not found.
1117	ListTeams returns predefined teams for an organization and an error if any.
1118	ListTeamMembers returns team members based on teamID and role, or an error if role is unsupported.
1119	IsCollaborator checks if a user is a collaborator of a repository and returns a boolean indicating the result along with any errors encountered during the process.
1120	ListCollaborators retrieves users from a fake client based on organization and repository returns a list of GitHub users and an error
1121	ClearMilestone resets the milestone for a given organization, repository, and issue number.
1122	SetMilestone updates the milestone number for a given organization and repository and returns an error if the milestone number is negative
1123	ListMilestones retrieves milestones from FakeClient's MilestoneMap and returns them as a list.
1124	ListPRCommits retrieves PR commits from a map using a key constructed from organization, repository, and PR number.
1125	GetRepoProjects fetches projects for a given repository from a fake client.
1126	GetOrgProjects retrieves projects for a given organization from a fake client.
1127	GetProjectColumns retrieves project columns based on project ID from a map, returning an error if not found.
1128	CreateProjectCard adds a project card to a specified column and returns it or an error if the column doesn't exist
1129	DeleteProjectCard removes a project card from its column and updates the map.
1130	MoveProjectCard updates the position of a project card within the client's state by removing it from its current column and adding it to a new column.
1131	CreateDatabaseClient initializes InfluxDB client using config details and returns it along with an error.
1132	Push method sends a data point to InfluxDB database.
1133	NewProwJobWithAnnotation creates a ProwJob with specified spec, labels, and annotations.
1134	NewProwJob creates a ProwJob instance using the given spec and labels.
1135	NewPresubmit creates a ProwJob for a pull request with specified base SHA, presubmit job configuration, and event GUID.
1136	PresubmitSpec constructs a ProwJobSpec from a Presubmit and Refs, setting job type, context, reporting, rerun command, Jenkins spec, and completing primary refs.
1137	PostsubmitSpec constructs a ProwJobSpec from a Postsubmit configuration and refs.
1138	PeriodicSpec creates a ProwJobSpec from a Periodic configuration
1139	BatchSpec creates a ProwJobSpec from a Presubmit and Refs.
1140	PartitionActive categorizes ProwJobs into pending and triggered channels based on their states.
1141	ProwJobFields extracts and returns log fields from a ProwJob object.
1142	ClusterToCtx converts cluster name to context alias if in-cluster context is detected
1143	AddCommand appends a command to the PluginHelp's Commands slice.
1144	Get retrieves a ProwJob object by name and returns it along with any errors encountered.
1145	Watch method on FakeProwJobs returns watch interface or error based on test action
1146	Delete will remove a ProwJob and return an error if the operation fails
1147	Patch will apply a patch to a ProwJob resource and return the updated object or an error
1148	MergeMethod retrieves pull request merge type based on organization and repository name.
1149	Query constructs a search query string based on provided filters and returns it.
1150	ForRepo checks if a repository is included or excluded based on organization and repository names.
1151	OrgExceptionsAndRepos returns a map of organizations to their exceptions and a set of repositories.
1152	QueryMap initializes a new instance with queries and an empty cache.
1153	ForRepo retrieves TideQueries for a given organization and repository, caching results for future use.
1154	Validate checks for conflicting context definitions and returns an error if any are found
1155	GetTideContextPolicy constructs a TideContextPolicy object based on options, branch requirements, and branch protection settings, returning it or an error.
1156	IsOptional checks if a context is optional based on policy settings.
1157	MissingRequiredContexts identifies and returns any required contexts that are missing from the provided list.
1158	ValidateWebhook validates a webhook request and returns the event type, GUID, payload, validation status, and HTTP status code.
1159	HelpProvider returns help text for the needs-rebase plugin and nil error
1160	HandleEvent checks PR events, waits, fetches mergeability, labels, and takes action accordingly.
1161	HandleAll checks open PRs in enabled repos, updates their status based on rebase needs, and logs errors.
1162	NewDryRunProwJobClient creates a new ProwJob client for dry run operations using the provided deck URL.
1163	Create will return a ProwJob and an error for creating a ProwJob
1164	Update will return a ProwJob and an error
1165	UpdateStatus method returns nil values for ProwJob object and error
1166	Delete will return an error indicating the deletion operation was successful or failed
1167	DeleteCollection will return an error indicating that the collection was successfully deleted
1168	Get will return a ProwJob object and an error if the retrieval fails
1169	DryRunProwJobClient's List method fetches ProwJobList using label selector and returns it along with any errors encountered during the request.
1170	Watch method returns a watch interface and an error for dry run prow job client
1171	Patch method on dryRunProwJobClient returns a ProwJob and error, always returning nil for both.
1172	hasSynced checks if all resources are synced and logs progress
1173	Run starts the Pipeline controller waits for caches to sync starts workers shuts down workers on stop
1174	runWorker continuously processes items from workqueue, retries on failure, and marks as done when successful.
1175	fromKey will split a key into three parts and return them along with an error if the key is invalid
1176	enqueueKey adds objects to workqueue based on their type and namespace
1177	finalState checks if ProwJobState is pending or triggered and returns false otherwise
1178	description returns a condition message or reason or a fallback string
1179	prowJobStatus returns a ProwJobState and message based on PipelineRunStatus conditions.
1180	pipelineMeta constructs and returns metadata for a ProwJob including labels and annotations.
1181	sourceURL returns the source URL from ProwJob or constructs it using RepoLink if CloneURI is empty
1182	makePipelineGitResource constructs a PipelineResource object from a ProwJob, setting the Git URL and revision based on the job's specifications.
1183	makePipelineRun constructs a PipelineRun from ProwJob and PipelineResource, appending build ID and resource binding.
1184	matchingConfigs filters plugin configurations based on organization, repository, branch, and labels.
1185	SuggestCodeChange analyzes a lint problem using regex handlers to provide a code suggestion, which is then formatted and returned if it differs from the original line text.
1186	ServeExternalPluginHelp sets up an HTTP handler to provide external plugin help via POST requests, logs errors, and returns JSON-formatted help data or internal server errors.
1187	protect method updates branch protection for organizations and repositories based on configuration, skipping tested repos
1188	UpdateOrg updates organization repositories based on protection settings and returns an error if any update fails.
1189	UpdateRepo updates repository status based on GitHub data.
1190	UpdateBranch updates branch protection based on policy.
1191	LoadConfig will unmarshal a JSON config string into Options and return an error if parsing fails
1192	Run will initialize Kubernetes clients, create an artifact uploader controller, and start it indefinitely.
1193	Start will load secrets from paths, store them, and start goroutines to reload each secret.
1194	reloadSecret periodically checks and updates the secret from a file if it has changed.
1195	GetSecret retrieves a secret from a map using a path while holding a read lock on the Agent instance.
1196	setSecret updates the Agent's secrets map with a new secret value at the specified path
1197	GetTokenGenerator returns a function that retrieves a secret from a specified path.
1198	New initializes a History object with a specified maximum records per key, an opener, and a path, optionally loading existing history from GCS and logging the duration and path.
1199	`Record` method adds a new record to `History` with details like pool key, time, action, base SHA, targets, and error.
1200	ServeHTTP encodes History to JSON and writes it to the response, handling errors gracefully.
1201	Flush will save all records to GCS and log duration and pool count on success or error.
1202	AllRecords returns a map of all records grouped by key.
1203	MakeCommand creates a Cobra command to download a coverage profile file from the latest healthy build, handling flags for output, artifacts directory, and profile name.
1204	CheckFlags compiles regex patterns and stores matchers in CommentCounterPlugin
1205	ReceiveComment processes comments, applying matchers to count them and record dates.
1206	NewController initializes a new Controller instance with provided parameters
1207	Controller.Run initializes a controller, sets up event handlers, starts an informer, waits for cache sync, runs worker loops, and shuts down gracefully on stop signal.
1208	runWorker will process items until none are left and then signal completion
1209	New initializes a LocalGit instance with a temporary directory and Git client, setting credentials and remote.
1210	MakeFakeRepo creates a fake git repository and commits an initial change
1211	AddCommit adds files to a git repository and commits them
1212	CheckoutNewBranch will create a new git branch in the specified repository and return an error if it fails
1213	Checkout will change to a specified commit in a repository and return an error if it fails
1214	RevParse will execute git rev-parse on a given repository and return the result or an error.
1215	CleanAll cleans all resources in specified or default region.
1216	optionsForRepo returns an Lgtm object for a given repo or an empty Lgtm object if no match is found
1217	getChangedFiles retrieves changed files from a pull request and returns their filenames along with any errors encountered.
1218	loadReviewers combines approvers and reviewers from multiple files into a single set
1219	NewController initializes a controller with fallback, cookie file path, projects, Kubernetes client, and configuration, handling errors and setting default values for last update.
1220	SaveLastSync saves the last sync time to a file, handling fallback and renaming errors.
1221	Sync will update the controller's last update time based on processed changes and log errors if any occur during processing.
1222	AddFlags method adds an event flag to the command.
1223	CheckFlags initializes event matcher for plugin and returns error
1224	ReceiveIssueEvent filters events based on a matcher and returns points with a count if matched
1225	Upload will execute multiple upload functions concurrently and return an error if any upload fails.
1226	FileUploadWithMetadata returns a function to upload file with metadata and handles errors
1227	DataUploadWithMetadata will upload data to storage with associated metadata returning an error if any step fails
1228	HasLabel checks if a label exists in a list of labels ignoring case sensitivity.
1229	ImageTooBig checks if the image size exceeds 10MB based on the Content-Length header and returns true if it does or if there's an error.
1230	LevelFromPermissions determines the permission level based on the given permissions.
1231	PermissionsFromLevel returns repository permissions based on the given level
1232	newProwJobs creates a prowJobs instance with the given client and namespace
1233	GetApplicable returns applicable blockers for given organization, repository, and branch sorted by number
1234	serve sets up HTTP handlers and starts the server with logging and metrics.
1235	NewCountPlugin creates a Cobra command to count events and issues using various plugins.
1236	ReceiveComment appends a fake "commented" event to the result of ReceiveComment and ReceiveIssueEvent calls on plugin
1237	updateMetrics updates disk metrics at specified intervals logging errors and updating Prometheus metrics
1238	LogStatus retrieves and logs Ranch's resources as JSON.
1239	SyncConfig will parse a config string and sync resources to storage returning any errors encountered
1240	Metric will return a resource count based on type and owner an error will be returned if no matching resources are found
1241	FormatURL will return a formatted URL with an embedded dog image and an error if the input URL is invalid or empty
1242	runAndSkipJobs will execute requested jobs and optionally skip skipped jobs returning an error if validation fails
1243	validateContextOverlap checks for overlapping contexts in presubmit jobs and returns an error if any are found
1244	RunRequested starts builds for requested jobs and logs errors if any occur.
1245	skipRequested logs and creates status for skipped jobs returning an aggregated error
1246	Match checks if the event name is labeled and the label matches the event's label.
1247	Match checks if the event name is "unlabeled" and the label matches the event's label.
1248	AddFlags adds GitHub options to flag set
1249	AddFlagsWithoutDefaultGitHubTokenPath adds flags to FlagSet without default GitHub token path
1250	Validate GitHub options and endpoints, set defaults, warn about deprecated flags, ensure valid URIs, and log token usage warnings.
1251	GitHubClientWithLogFields creates a new GitHub client with optional logging fields and token generation.
1252	GitHubClient returns a GitHub client and an error based on options and secret agent.
1253	GitClient initializes a new git client sets credentials using bot name and token generator returns the client or an error
1254	toMap converts CoverageList to a map using Group name as key
1255	findChanges will identify significant coverage changes between two lists and return them as a list of coverageChange objects.
1256	CreateDatabase initializes MySQL connection creates database if it doesn't exist migrates tables and returns DB instance or error
1257	ShouldReport checks if a ProwJob should be reported based on its settings and the client's configuration.
1258	Report will process a ProwJob and return it along with an error if reporting fails
1259	MarkComplete deletes keys from firstSeen that are not marked and logs any swept resources, returning their count.
1260	NewJobAgent initializes a JobAgent struct with Kubernetes client, pod log clients, and configuration settings.
1261	Start method initiates job updates by calling tryUpdate and setting up a goroutine to periodically call it.
1262	Jobs method returns a copy of the jobs slice from JobAgent struct while holding a lock.
1263	ProwJobs method returns a copy of the prowJobs slice while locking the JobAgent's mutex.
1264	GetProwJob fetches a ProwJob based on job and ID returns it or an error if not found
1265	GetJobLog retrieves job logs based on job ID and agent type, returning log data or an error if the agent is unsupported or logs cannot be fetched.
1266	unionStrings combines two string slices into a single slice without duplicates
1267	Apply combines policies by selecting or merging specific fields.
1268	GetOrg retrieves an organization policy from BranchProtection applying the default policy if not found.
1269	GetRepo retrieves a repository by name, applying the organization's policy if it exists.
1270	GetBranch retrieves a branch by name applying policies and checking protection.
1271	GetPolicy fetches and applies policies based on branch requirements and configurations, returning the final policy or an error if invalid.
1272	UpdateIssueEvents fetches and updates issue events from a database using a client interface.
1273	enqueueKey adds objects to workqueue based on their type and context
1274	prowJobStatus returns ProwJobState and message based on BuildStatus conditions.
1275	buildEnv constructs environment variables from ProwJob spec and build ID returning a map or an error
1276	defaultArguments adds missing arguments from rawEnv to t.Arguments ensuring all required args are present.
1277	defaultEnv merges environment variables from two sources ensuring no duplicates.
1278	injectSource updates build spec with source from ProwJob, sets working dir, and returns success flag.
1279	injectedSteps processes job spec and config to inject sidecar, init upload, and entrypoint containers returns them along with GCS volume and any errors
1280	determineTimeout returns the timeout duration from BuildSpec or DecorationConfig or defaultTimeout
1281	makeBuild creates a build from ProwJob details and returns it with injected environment and source, handling errors appropriately.
1282	newLabels converts GitHub labels to SQL labels, handling errors for missing names and converting issue ID to string.
1283	newAssignees converts GitHub users to SQL assignees with issue details.
1284	NewIssueComment creates a sql.Comment from a github.IssueComment and returns it along with any errors.
1285	messageFilter applies filters based on commit messages and returns aggregated filters
1286	IsSuccess checks if build result equals success
1287	IsFailure checks if build result is either failure or unstable.
1288	IsAborted checks if build result is aborted
1289	ProwJobID retrieves the job ID from parameters in build actions or returns empty string if not found.
1290	BuildID returns the build ID from parameters or an empty string if not found
1291	CrumbRequest fetches CSRF token and field from Jenkins API and stores them in authConfig.
1292	measure updates metrics with request latency and count based on method, path, and status code
1293	GetSkipMetrics sends a GET request to the specified path and returns the response body or an error.
1294	`Get sends a GET request to the specified path and returns the response body or an error.`
1295	request sends HTTP requests to a server and handles retries with exponential backoff
1296	doRequest sends an HTTP request with authentication headers based on the client's configuration and returns the response or an error.
1297	getJobName returns the job name based on the ProwJobSpec, incorporating GitHub branch source details if available.
1298	getBuildPath constructs a Jenkins build path from a ProwJobSpec
1299	GetJobInfo fetches job info from API and returns it along with error.
1300	JobParameterized checks if any property has parameter definitions and returns true if so.
1301	EnsureBuildableJob checks if a job exists, is parameterized, or launches a new one with exponential backoff.
1302	LaunchBuild sends a POST request to build path with parameters and returns an error if response status is not 201.
1303	Build method logs the ProwJob details and invokes BuildFromSpec with job spec, build ID, and job name.
1304	BuildFromSpec configures a client to launch a build based on a ProwJobSpec, setting environment variables and ensuring the job is buildable before launching it.
1305	GetEnqueuedBuilds fetches and filters enqueued builds based on specified jobs returning a map of builds and an error.
1306	Abort will send a POST request to stop a job and return an error if unsuccessful
1307	PresubmitToJobSpec converts a presubmit configuration to a job specification.
1308	PostsubmitToJobSpec converts a postsubmit config to a JobSpec with type PostsubmitJob.
1309	PeriodicToJobSpec converts a periodic config to a job spec
1310	GetBuildID retrieves build ID from URL or generates a new one with retries on failure.
1311	listGcsObjects retrieves GCS objects based on bucket name, prefix, and delimiter returns a list of object names and an error if any occurs
1312	FindBaseProfile will return a byte array of the coverage profile or an error if no successful build is found.
1313	sortBuilds converts string builds to integers, sorts them in descending order, and returns the sorted indices.
1314	GetAll retrieves all EC2 regions from the given session and returns them as a slice of strings, or an error if the request fails.
1315	NewEventClient initializes and returns an EventClient instance with organization, repository, issue number, GitHub client, and logger.
1316	PruneComments removes comments based on a condition, considering bot comments first.
1317	FormatResponse constructs a response string using to, message, and reason strings along with predefined bot information.
1318	FormatSimpleResponse constructs a simple response message with a recipient and bot information wrapped in HTML details.
1319	FormatICResponse formats an issue comment response raw.
1320	FormatResponseRaw formats a raw response by quoting the user's comment and returns it.
1321	Validate checks GCS options and returns an error if invalid
1322	Encode converts options to JSON string and returns it along with any errors encountered.
1323	RegisterIssueHandler associates an issue handler and help provider with a given name
1324	RegisterIssueCommentHandler associates a handler and help provider with a given name
1325	RegisterPullRequestHandler associates a handler function and help provider with a given name
1326	RegisterStatusEventHandler associates a status event handler with its name and help provider.
1327	RegisterPushEventHandler associates a name with a push event handler and its help provider
1328	RegisterReviewEventHandler associates a review event handler and help provider with a given name
1329	RegisterReviewCommentEventHandler associates a review comment event handler with a name and help provider
1330	RegisterGenericCommentHandler associates a comment handler with a name and provides help information.
1331	NewAgent initializes an Agent struct with configurations and clients from various agents and a logger.
1332	InitializeCommentPruner sets up a new event client for pruning comments on a GitHub pull request.
1333	CommentPruner returns comment pruner client or error if not initialized
1334	Load reads a YAML config file sets it in ConfigAgent returns error on failure
1335	ConfigAgent's Config method returns its current configuration while ensuring thread safety.
1336	Set updates the configuration in ConfigAgent using a mutex lock.
1337	Start will load a configuration file and then continuously reload it every minute, logging any errors encountered during reloading.
1338	GenericCommentHandlers returns a map of comment handlers for a given owner and repo
1339	IssueHandlers returns a map of issue handlers for a given owner and repo.
1340	IssueCommentHandlers returns a map of issue comment handlers for given owner and repo.
1341	PullRequestHandlers retrieves PR handlers for a given owner/repo
1342	ReviewEventHandlers returns a map of event handlers for given owner and repo.
1343	ReviewCommentEventHandlers returns a map of review comment event handlers for a given owner and repository.
1344	StatusEventHandlers returns a map of status event handlers for a given owner and repository.
1345	PushEventHandlers returns a map of push event handlers for a given owner and repo
1346	EventsForPlugin returns a list of events handled by a plugin based on its name.
1347	insertLink updates URL in metadata and returns if changed
1348	HelpProvider generates plugin help for cherrypick functionality and returns it along with any errors.
1349	getPatch retrieves a pull request patch from GitHub and saves it to a temporary file, returning the path to the file and any errors encountered.
1350	releaseNoteFromParentPR extracts and formats a release note from the parent PR body
1351	ValidatePayload checks if the payload's signature matches the HMAC-SHA1 hash using the provided key.
1352	PayloadSignature generates a SHA-1 HMAC signature for a given payload using a secret key and returns it as a hexadecimal string.
1353	updateString updates have to want if they differ and returns true if updated
1354	updateBool updates a boolean pointer to match another and returns whether it changed
1355	configureOrgMeta updates organization metadata fields and saves changes if any.
1356	configureTeamRepos updates team repositories based on desired permissions and returns errors if any update fails
1357	ShouldReport checks if ProwJob has non-empty PubSub project and topic labels
1358	Run will execute a job spec uploading targets to GCS or log dry-run uploads.
1359	Format combines default fields with entry data and uses wrapped formatter to output log entry
1360	FindLabels filters issue labels based on regex and returns matching labels.
1361	AddFlags method adds flags to flag set for Options struct.
1362	NewAgent creates an Agent instance with GitHubOAuthConfig and logrus.Entry.
1363	HandleLogin generates an OAuth session, sets its options, saves it, and redirects to the authentication URL.
1364	HandleLogout invalidates sessions and redirects after logout
1365	serverError logs an error and sends a 500 response to the client
1366	FromItem converts an item to resources config and updates the object if successful.
1367	GetItems returns all items from ResourcesConfigCollection as a slice of Object
1368	SetItems assigns resources to collection
1369	UnmarshalText assigns a valid repo permission level to the receiver or returns an error if invalid.
1370	IsAssignee checks if a user is assigned to an issue based on their login.
1371	IsAuthor checks if the issue's author matches the given login.
1372	HasLabel checks if an issue has a specific label.
1373	Branch returns the branch or tag name from the push event's reference.
1374	truncate will return a truncated string with an ellipsis in the middle if it exceeds a maximum length
1375	reportStatus updates GitHub status based on Prow job details
1376	parseIssueComments filters out old bot comments, keeps relevant entries, and determines actions based on job status and comments.
1377	createComment constructs a comment using a template and ProwJob details, appending test failures and rerun instructions.
1378	Lens.Config returns lens config with specified name, title, and priority.
1379	Callback processes artifacts, resource directory, and data, returning a string result.
1380	FormatRecord will generate a formatted string representation of a record containing information about failed status, cloning details, pull requests, and commands executed.
1381	Namespace sets the client's namespace and returns the updated client instance
1382	NewFakeClient creates a new fake client with default namespace and given deck URL
1383	NewClientInCluster initializes a Kubernetes client using in-cluster credentials and returns it along with an error if any step fails.
1384	NewClientFromFile reads a YAML file to create and return a Client object along with an error.
1385	NewClient initializes a new client with TLS configuration and returns it along with an error if any.
1386	ReplaceConfigMap updates a config map with new values and returns the updated config map or an error.
1387	GetDiskUsage calculates disk usage statistics for a given path and returns percentage of free blocks, free bytes, used bytes, and any errors encountered.
1388	GetATime retrieves the access time of a file or returns a default time if an error occurs.
1389	RegisterLens will register a lens and return an error if the viewer is already registered or if the title or priority is invalid.
1390	GetLens retrieves a Lens instance by name, returning an error if the name is invalid.
1391	LastNLines returns the last n lines of an artifact using chunks with a buffer size of 300n+1 bytes.
1392	NewClient creates a new client with a logger and token generator function.
1393	WriteMessage sends a message to a channel and logs it returns an error if posting fails
1394	MarkAndSweep will mark and delete NAT gateways based on a session, account, region, and set, returning an error if any step fails
1395	ListAll retrieves all NAT gateways for an account and region returns a set of gateways and an error
1396	NewClient creates a new client instance with specified owner and URL, configures its network settings, and returns it.
1397	Acquire resource and add to storage if acquired successfully.
1398	AcquireWait attempts to acquire a resource repeatedly until successful or context cancels.
1399	AcquireByState fetches resources by state, locks client, adds to storage, then returns resources.
1400	ReleaseAll will release all resources from storage to the specified destination and return any errors encountered
1401	ReleaseOne deletes a resource from storage and releases it to a destination.
1402	UpdateAll updates the state of all resources, collecting errors and returning them.
1403	SyncAll will synchronize all resources, updating their state and storage, handling errors and logging if no resources are found.
1404	UpdateOne updates a resource's state and user data by locking, retrieving, updating, and then updating locally.
1405	Metric method returns a metric object and an error based on the given type
1406	HasResource checks if any resources exist in storage.
1407	DialContext attempts connection with retries based on configuration.
1408	NewDashboardAgent creates a new DashboardAgent instance with repositories, configuration, and logger.
1409	QueryPullRequests fetches pull requests using a GitHub client, handling pagination and logging the cost and remaining points.
1410	GetHeadContexts fetches PR head contexts from GitHub API and returns them as Context structs.
1411	ConstructSearchQuery will generate a search query string based on the login and repositories of the DashboardAgent.
1412	NewBundledStates initializes a new instance of BundledStates with the given description and an empty states map.
1413	ReceiveEvent updates the state of an event and returns if it has changed
1414	ages calculates the age of active states in a bundle and returns a map of IDs to durations
1415	Percentile calculates the duration at a specified percentile from bundled states, ensuring valid input and handling edge cases.
1416	NewMetrics creates a new Metrics object with initialized ClientMetrics and ResyncPeriod.
1417	NewDiskCache creates a new HTTP RoundTripper with caching enabled using disk storage and limits concurrency.
1418	NewMemCache creates a new memory cache with a delegate and maximum concurrency.
1419	NewFromCache creates a new transport that caches responses and limits concurrency.
1420	ProwV1 returns a fake prowv1 interface for testing purposes.
1421	Prow method returns a fake prow interface for testing purposes.
1422	NewOwners creates a new Owners instance with given parameters.
1423	GetApprovers will return a map of owners to their approvers using the repo's Approvers method.
1424	GetAllPotentialApprovers returns sorted list of unique approvers or logs if none exist
1425	GetReverseMap creates a reverse mapping from approvers to owners files
1426	temporaryUnapprovedFiles returns unapproved files based on given approvers
1427	KeepCoveringApprovers filters potential approvers based on reverseMap and unapproved files.
1428	GetSuggestedApprovers returns a set of suggested approvers based on unapproved files and potential approvers.
1429	GetOwnersSet retrieves a set of unique owner names from filenames in repo and removes subdirectory owners.
1430	GetShuffledApprovers returns shuffled list of potential approvers based on seed
1431	Approval's String method returns a formatted HTML link string.
1432	IntersectSetsCase returns the intersection of two sets, ignoring case sensitivity.
1433	NewApprovers initializes an Approvers struct with given owners and default values for other fields.
1434	AddLGTMer adds LGTM approval to user if conditions met
1435	RemoveApprover deletes an approver by login from Approvers.
1436	AddAssignees inserts lowercase logins into the assignees set.
1437	GetCurrentApproversSetCased returns a set of cased approvers from the approvers list.
1438	GetFilesApprovers returns a map of file names to sets of approvers based on current and potential approvers.
1439	NoIssueApprovers filters approvers without issues and returns a map of their logins and approvals.
1440	UnapprovedFiles returns a set of files with no approvers.
1441	GetFiles retrieves a list of files with their approvers or status based on the branch and URL.
1442	IsApproved checks if requirements are met or manually approved
1443	ListApprovals retrieves all approvals from the current set of approvers.
1444	ListNoIssueApprovals returns a list of approvals without issues
1445	GenerateTemplate will render a template with given data and return the result as a string or an error if parsing or execution fails
1446	writeTemplate will render a template file to an output path with given data and return an error if any step fails
1447	Labels retrieves all unique labels from configuration and sorts them alphabetically.
1448	LabelsForTarget filters labels by target and sorts them alphabetically by name.
1449	LoadConfig reads a configuration file from a given path and validates it against organization data, returning the parsed configuration or an error if any step fails.
1450	loadLabels fetches labels from multiple repositories concurrently and aggregates results or errors.
1451	kill logs repo and label then returns an update indicating the label is dead
1452	create logs repository and label information then returns an update object
1453	classifyLabels categorizes labels based on their attributes and returns three maps containing live, archaic, and dead labels.
1454	linkify converts spaces to dashes removes special characters and lowercases the text
1455	NewCache creates a Cache instance with trimmed disk root path.
1456	KeyToPath converts cache key to file path
1457	ensureDir creates directory if it doesn't exist and returns error if creation fails
1458	Put will store a cache entry with the given key and content, verifying SHA256 hash if provided.
1459	Get will open a file based on a key and call a handler with existence status and file object or error.
1460	Delete key from cache by removing file
1461	NewGCSArtifact creates a new GCSArtifact instance with given parameters.
1462	Size method returns the size of GCS artifact and an error if unable to retrieve attributes.
1463	ReadAll reads all data from a GCSArtifact and returns it as a byte slice or an error if any step fails.
1464	ReadTail reads the last n bytes of a GCSArtifact, handling gzip compression and errors gracefully.
1465	gzipped checks if GCS artifact's content encoding is gzip and returns a bool and error
1466	optionsForRepo searches for repository or organization configuration in given plugins configuration and returns it or an empty configuration with default message
1467	Lister retrieves ProwJobs based on a label selector from the indexer.
1468	ProwJobs returns a ProwJobNamespaceLister for a given namespace.
1469	List returns ProwJobs based on namespace and selector
1470	RunsAgainstAllBranch checks if a brancher has no branches to skip or run against
1471	Intersects checks if two Branchers have intersecting branches or run against all branches.
1472	ShouldRun determines if a change matcher should run based on provided changes and returns whether it was determined and if it should run, along with any errors encountered.
1473	RunsAgainstChanges checks if any change matches a regular expression and returns true if so
1474	CouldRun determines if a postsubmit job should run based on the branch ref
1475	ShouldRun determines if postsubmit should run based on base ref and changes returns true or error
1476	CouldRun checks if the presubmit should run based on the brancher's criteria.
1477	ShouldRun determines if presubmit should run based on base ref, changes, forced flag, and defaults.
1478	GetPresubmit retrieves a presubmit configuration by repository and job name from JobConfig.
1479	SetPresubmits updates Presubmits in JobConfig with copies of input jobs and sets regexes, returning an error if any regex setting fails
1480	SetPostsubmits updates the postsubmits field of JobConfig with copies of input jobs and sets regexes for each job.
1481	AllPresubmits filters presubmits based on provided repositories.
1482	AllPostsubmits filters postsubmits based on repositories and returns them.
1483	AllPeriodics returns all periodic jobs from JobConfig.
1484	ClearCompiledRegexes will clear all regex fields in presubmits
1485	Empty checks if all fields in SimpleConfig are empty
1486	NewClient initializes a new client with git, github clients, and various configuration functions.
1487	ExpandAlias returns a set of aliases for a given GitHub login, or nil if the input is invalid.
1488	ExpandAliases will expand aliases in a set of logins and return the updated set
1489	ParseFullConfig will unmarshal byte slice to FullConfig and return it along with any errors encountered
1490	ParseSimpleConfig will unmarshal YAML data into a SimpleConfig object and return it along with any parsing errors
1491	decodeOwnersMdConfig reads a YAML config file and parses it into a SimpleConfig object
1492	findOwnersForFile returns the directory owner for a given file path based on regex matching, or an empty string if no match is found
1493	FindApproverOwnersForFile retrieves approvers for a file based on its path.
1494	FindReviewersOwnersForFile returns owners for a file based on reviewers and logs
1495	FindLabelsForFile retrieves labels for a file path from repo owners entries.
1496	IsNoParentOwners checks if a given path has no parent owners in the RepoOwners options.
1497	Ratio calculates coverage percentage as covered statements divided by total statements.
1498	FromPayload will unmarshal JSON data into PeriodicProwJobEvent and return an error if unmarshalling fails
1499	ToMessage converts PeriodicProwJobEvent to pubsub.Message.
1500	UnmarshalText sets the privacy level from text and returns an error if invalid
1501	compileApplicableBlockades filters and compiles applicable blockades based on repository information and logs errors if regex compilation fails.
1502	calculateBlocks processes pull request changes against blockades, categorizing them by explanation.
1503	MergeMultipleProfiles combines multiple coverage profiles into a single one, returning an error if any merging fails.
1504	AddFlags adds flags to FlagSet for Options struct fields.
1505	processNextItem processes the next item from the queue, retrieves logs, uploads them to GCS, and handles errors.
1506	handleErr will log and requeue or forget a log upload error based on the number of retries
1507	AggregateFilter combines multiple filters to return combined results based on presubmit configuration
1508	FilterPresubmits filters presubmits based on given conditions and returns two lists: toTrigger and toSkip.
1509	MakeCommand creates a Cobra command to filter Go coverage files based on include/exclude patterns and outputs to a specified file.
1510	Push adds an element to the EventTimeHeap.
1511	Pop removes and returns the smallest item from the heap.
1512	NewFakeOpenPluginWrapper creates a wrapper for a plugin with a map to track open states.
1513	ReceiveIssue checks if an issue is already open, adds a fake "opened" event if not, then calls plugin.ReceiveIssue.
1514	Validate checks Options ensuring non-empty srcRoot, log, and unique git refs per org/repo.
1515	Complete updates GitRefs and KeyFiles, setting PathAlias and CloneURI for each ref.
1516	Set will parse a string into a template and store it along with the original value
1517	ensure checks if a binary exists, if not it returns an error prompting installation.
1518	output will execute a command and return its trimmed output along with any errors encountered
1519	projects will return a list of project IDs and an error if the command fails
1520	selectProject selects a project based on user input or availability, ensuring the user has access.
1521	createCluster will return a cluster object and an error it will prompt for a cluster name if none is provided it will execute gcloud commands to create and describe the cluster
1522	createContext will return a context string and an error based on user input for creating or reusing a cluster
1523	contextConfig ensures kubectl or gcloud is installed, loads client config, returns loader, config, and error
1524	selectContext selects a Kubernetes context based on user input or predefined options.
1525	applyCreate runs kubectl create command with dry-run and outputs YAML, then applies it to context, handling errors.
1526	determineSkippedPresubmits filters out presubmits based on triggered contexts and logs skipped jobs
1527	Dispatch processes plugin events from channels, sends them to a plugin, and pushes the results to an InfluxDB instance.
1528	CreateIssue sends a request to create an issue on GitHub and returns the created issue or an error.
1529	CreateStatus will create a repository status and return it or an error
1530	`ForEachPR` processes each pull request page using `mpungePR`, continuing on errors if specified.
1531	GetCollaborators retrieves users collaborating on a GitHub repository and returns their details along with any errors encountered.
1532	GetCombinedStatus retrieves a combined repository status for a specified owner, repo, and reference, returning any errors encountered during the process.
1533	GetIssues fetches issues from a GitHub repository using pagination and returns them along with any errors encountered.
1534	GetRepoLabels retrieves repository labels from GitHub.
1535	GetUser retrieves a GitHub user by login name and returns the user object along with any errors encountered during the process.
1536	checkConfigValidity verifies flag values and activates gcloud service account returning an error if any step fails
1537	createSystemdLogfile generates and runs a journalctl command, saving its output to a specified log file.
1538	createFullSystemdLogfile will execute journalctl command and save its output to a log file in the specified directory, returning an error if any step fails
1539	createSystemdLogfiles records journalctl logs for specified services and outputs them to a directory.
1540	prepareLogfiles gathers and copies relevant log files based on the cloud provider and configuration settings.
1541	writeSuccessMarkerFile creates a marker file on GCS with public read access
1542	MakeCommand creates a Cobra command to summarize coverage profiles and produce JUnit XML output.
1543	warnDeprecated checks if a warning has been issued recently and logs a message if not.
1544	Describe will generate a string describing the requirements for matching labels, including missing labels, comments, issues, PRs, branches, organizations, repositories, and regular expressions.
1545	TriggerFor searches configuration triggers for matching organization or repository and returns the first match or an empty trigger
1546	EnabledReposForPlugin returns organizations and repositories enabled for a given plugin
1547	EnabledReposForExternalPlugin returns organizations and repositories enabled for an external plugin based on its name.
1548	SetDefaults initializes ConfigUpdater defaults for missing maps and appends namespaces to each spec.
1549	validatePlugins checks plugin configurations for unknown plugins and duplicates within organizations, returning an error if any issues are found
1550	ShouldReport checks if a ProwJob should be reported based on its state and annotations.
1551	Run clones refs, executes commands, logs results, and returns a record.
1552	PathForRefs constructs a repository path based on base directory and refs information
1553	gitCtxForRefs constructs a git context for given refs, base directory, and environment variables.
1554	`commandsForBaseRef generates Git clone and configuration commands based on provided references and user details.`
1555	gitTimestampEnvs will return environment variables for Git author and committer dates using the given timestamp.
1556	gitRevParse retrieves the current Git commit hash and returns it as a string, handling any errors encountered during the process.
1557	`commandsForPullRefs generates git clone and merge commands for specified pull requests and returns them.`
1558	ProduceCovList will generate a CoverageList from multiple cover.Profile objects by summarizing their blocks and appending to a group
1559	popRandom removes a random element from a set and returns it
1560	resolve will configure Kubernetes options based on dry run mode and load cluster configurations, returning an error if any step fails
1561	ProwJobClientset returns a prow job clientset based on namespace and dry run mode, resolving options first, and handling dry-run limitations.
1562	ProwJobClient returns a ProwJob client based on the options and namespace, handling dry run scenarios.
1563	InfrastructureClusterClient returns a Kubernetes client or an error if resolution fails or dry-run mode is active.
1564	BuildClusterClients constructs cluster clients for a given namespace and returns an error if resolution fails or dry-run mode is unsupported.
1565	Age calculates duration since active state started
1566	ReceiveEvent checks event and updates state accordingly.
1567	ReceiveEvent checks if event matches entry criteria, transitions to ActiveState if true
1568	Active checks if all states in MultiState are active
1569	Age calculates the minimum age from multiple states at a given time.
1570	ReceiveEvent processes events for all states, updating them and returning the new MultiState and whether any state changed.
1571	ProwJobs returns a new prowJobInformer instance initialized with the version's factory, namespace, and tweakListOptions.
1572	ItemToResourcesConfig will convert an item to a resources config and return it or an error if conversion fails
1573	Copy method creates a new instance of TypeToResources by copying key-value pairs from the original.
1574	MakeCommand creates a Cobra command to aggregate Go coverage files with optional output.
1575	incrementNumPendingJobs updates the count of pending jobs for a given job key in a thread-safe manner.
1576	setPreviousReportState updates the previous report state of a ProwJob in the controller
1577	SyncMetrics acquires a lock on c.pjLock, gathers Prow job metrics using kube.GatherProwJobMetrics, and releases the lock.
1578	DumpProfile writes profiling data to a writer.
1579	blocksEqual checks if two ProfileBlocks have equal start and end positions and number of statements
1580	NewProwJobInformer creates a new ProwJob informer with optional filter.
1581	NewFilteredProwJobInformer creates a new shared informer for ProwJobs in a given namespace with specified options.
1582	New initializes a Spyglass instance with JobAgent, config, storage client, and context.
1583	Lenses method filters and sorts lenses based on their priority and name.
1584	JobPath parses a source string to extract a job path based on its type and returns it or an error.
1585	RunPath parses a source string, extracts a key, and converts it to GCS format if needed.
1586	ExtraLinks fetches extra links from metadata and returns them as a slice of ExtraLink structs.
1587	needDemux filters external plugins based on repository and event type
1588	demuxExternal processes external plugins asynchronously, logging errors or successes
1589	dispatch sends a POST request to an endpoint with a payload and headers, reads the response, and returns an error if the response status is outside the 2xx range
1590	AddFlags adds flags to a command for state description and age percentiles.
1591	CheckFlags initializes states for the plugin and returns an error if any issues arise.
1592	ReceiveIssueEvent processes an issue event updates state calculates total and sum returns data points
1593	Load will parse and validate configuration files returning a Config object or an error
1594	loadConfig will return a configuration object and an error it will merge job configurations from multiple sources and validate their basenames
1595	yamlToConfig reads a YAML file, unmarshals it to a struct, and sets the source path for jobs.
1596	ReadFileMaybeGZIP reads a file, checks for GZIP header, and returns decompressed content or original if not compressed.
1597	finalizeJobConfig sets default values for job configurations and validates regexes.
1598	validateComponentConfig checks Plank's JobURLPrefix and JobURLPrefixConfig for validity, ensuring SlackReporter config is validated too.
1599	ConfigPath returns the config path or a default warning message
1600	ValidateController checks controller settings and parses URL/Report templates, setting defaults where necessary, returning an error on invalid values.
1601	defaultJobBase sets default values for Agent, Namespace, and Cluster fields in JobBase struct.
1602	SetPresubmitRegexes compiles regex triggers and validates rerun commands and branchers for presubmit jobs.
1603	setBrancherRegexes compiles regex for branches and skip branches in a Brancher object and returns it with errors if compilation fails
1604	SetPostsubmitRegexes updates branch and change regexes for postsubmits and returns an error if any step fails
1605	Body processes artifacts to extract metadata, calculates elapsed time, and renders HTML using a template.
1606	NewBoskosHandler initializes an HTTP server with routes for managing resources.
1607	ErrorToStatus converts an error to an HTTP status code based on its type
1608	DumpProfile will write a coverage profile to a file or standard output and return an error if it fails
1609	LoadProfile reads coverage profile from input source and returns parsed profiles or error
1610	NewClient creates a new git client instance and returns it along with any errors encountered during initialization
1611	SetCredentials updates client credentials with user and token generator function.
1612	Checkout will attempt to checkout a commit-like reference and log the operation, returning any errors encountered during the process.
1613	CheckoutNewBranch creates a new git branch and checks it out, returning an error if unsuccessful.
1614	Merge attempts to merge a commit and aborts on failure, returning success or error
1615	CheckoutPullRequest will check out a pull request from a Git repository and return an error if the operation fails
1616	Config sets a git configuration key-value pair and logs the command.
1617	retryCmd will execute a command up to three times with exponential backoff on failure
1618	LabelsAndAnnotationsForSpec generates labels and annotations for a ProwJobSpec, applying extra values and validating them.
1619	ProwJobToPod converts a ProwJob to a Pod, setting environment variables, adjusting restart policy, and handling service account configurations.
1620	CloneLogPath constructs the path to a cloned log file based on the given volume mount's mount path and a predefined constant cloneLogPath.
1621	cloneEnv will return a list of environment variables and an error if cloning configuration fails
1622	sshVolume generates a named SSH volume and its mount details from a given secret.
1623	InjectEntrypoint modifies container command to include entrypoint configuration and returns wrapper options.
1624	PlaceEntrypoint creates a container with specified image, command, arguments, and volume mount.
1625	kubeEnv converts a map to a sorted list of EnvVars
1626	Client returns a Kubernetes client based on the options and whether it's a dry run.
1627	handle will add or remove a label based on whether an event needs it and whether it already has the label
1628	SendHook sends a POST request to the specified address with the given event type, payload, and HMAC. It returns an error if any step fails or if the response status is not 200.
1629	janitorClean executes a cleanup command for a given resource and returns any errors encountered
1630	janitor will process resources from a channel, applying a cleaning function and releasing them back to Boskos with appropriate status
1631	Run will execute the PullServer, handling configuration updates and errors gracefully.
1632	specToStarted constructs a Started object from a JobSpec and optional SHA, setting timestamps, repo versions, pull numbers, and extra refs.
1633	Run will execute the options with specified environment, process log, upload results, and return error if cloning fails
1634	hasPRChanged checks if PR action is open, reopen, or sync and returns true otherwise false
1635	UpdateIssues updates issues in the database using a client interface.
1636	handleReviewEvent logs review event using agent's logger and passes it to handleReview function along with other dependencies.
1637	findAssociatedIssue returns an issue ID and error from body text using regex match
1638	optionsForRepo retrieves approval options for a repository based on configuration and sets default values if necessary
1639	localOnlyMain sets up routes for HTTP server based on configuration and options returns the updated ServeMux
1640	summarize will update NumCoveredStmts and NumAllStmts by iterating through Group
1641	Subset filters CoverageList Group by prefix and returns filtered list
1642	CoverageList's ListDirectories returns unique directories from its Group field as a slice of strings.
1643	readRequest reads a request from an io.Reader based on the content type and returns an AdmissionRequest object or an error if unsuccessful
1644	handle processes HTTP requests by reading them, processing, and writing responses, logging errors if any occur
1645	writeResponse processes an AdmissionRequest, makes a decision, constructs a response, marshals it to JSON, and writes it to the writer.
1646	onlyUpdateStatus checks if the request updates status or has matching specs, returning an AdmissionResponse accordingly
1647	convertSuiteMeta converts a test suite metadata to a structured resultstore format
1648	NewHealth initializes a HTTP server to respond with "OK" on /healthz endpoint and returns a Health struct.
1649	ServeReady registers a handler for checking health status.
1650	NewController initializes a controller with various clients and configurations, setting up logging and background tasks.
1651	newExpectedContext creates a new context with the given string and default values for state and description
1652	contextsToStrings converts a slice of Context to a slice of strings containing their Context values
1653	filterSubpools filters subpools concurrently using goroutines, initializes data, applies filters, and returns the filtered results.
1654	filterSubpool filters PRs based on ghc and returns updated subpool or nil if none pass
1655	poolPRMap aggregates PullRequests from subpools into a single map
1656	unsuccessfulContexts filters out successful and optional contexts logs the failure details returns the list of failed contexts
1657	accumulate processes PRs, categorizes them based on presubmit job results, and returns lists of successful, pending, and non-passing PRs.
1658	tryMerge attempts to merge using a provided function, retrying on certain errors up to three times with exponential backoff.
1659	prChanges retrieves cached or fetches pull request changes from GitHub.
1660	prune updates changeCache with nextChangeCache and resets nextChangeCache
1661	dividePool organizes pull requests and prow jobs into subpools based on repository and branch information, returning an error if operations fail.
1662	AggregateProfiles aggregates multiple coverage profiles into a single profile, converting counts to booleans and merging them, returning the result or an error.
1663	countToBoolean converts coverage profiles to binary counts
1664	NewStorage creates a new Storage instance from a persistence layer and a storage file, loading resources from the file if it exists.
1665	AddResource to Storage adds a resource and returns an error if it fails
1666	DeleteResource removes a resource from storage and returns an error if it fails
1667	UpdateResource updates resource in storage and returns error
1668	GetResource fetches a resource by name from storage and converts it to a Resource object, returning the result or an error if the process fails.
1669	GetResources retrieves sorted resources from storage or returns an error.
1670	SyncResources updates storage resources by adding new ones and deleting old ones not present in input data, handling errors gracefully.
1671	ParseConfig reads a config file, unmarshals it to BoskosConfig, converts entries to Resources, and returns them along with any errors.
1672	problemsInFiles identifies issues in files within a Git repository using Bazel syntax.
1673	NewPodLogArtifact creates a new PodLogArtifact object or returns an error if input values are invalid.
1674	CanonicalLink constructs a URL string for a pod log artifact using its name and build ID.
1675	ReadAt reads bytes from pod log artifact starting at offset off and returns the number of bytes read and an error if any.
1676	ReadAll retrieves all logs from a job agent ensuring the file size does not exceed the limit returning the logs or an error
1677	ReadAtMost reads up to n bytes from the pod log and returns them along with the number of bytes read or an error if unsuccessful.
1678	ReadTail fetches the last n bytes of pod logs or returns an error if retrieval fails
1679	newProblems removes lint problems associated with review comments from a map
1680	problemsInFiles will analyze files in a git repository, identify linting issues, and return a map of problems and draft review comments.
1681	undoPreset removes preset configurations from a pod's spec based on label matching.
1682	undoPresubmitPresets will apply undos to presubmit configurations based on given presets
1683	yamlBytesStripNulls removes lines containing key: null from YAML byte slice
1684	monitorDiskAndEvict monitors disk usage and evicts cache entries when below certain thresholds.
1685	difference calculates the difference between two orgRepoConfigs and returns a new config with the differences.
1686	union combines two orgRepoConfig objects, updating org exceptions and repos while ensuring consistency and pruning unnecessary entries.
1687	clearStaleComments removes stale comments from a pull request if it's not following the release note process or if the release note has already been added.
1688	determineReleaseNoteLabel processes a release note body to determine its label based on content.
1689	getReleaseNote will return the first capture group from a regex match on body or an empty string if no match is found
1690	NewClient creates a new client instance with the given Boskos client and initializes resources map.
1691	Acquire resources, handle errors, ensure release on failure.
1692	ReleaseOne will release resources for a given name and destination, handling errors and nested resources.
1693	UpdateAll updates the client's state with the given string and returns an error if unsuccessful
1694	GetGitHubClient creates a new GitHub client using an OAuth2 token.
1695	GetUsername retrieves a username from GitHub using a client, returning an error if the request fails or if no login is found.
1696	CreateTokenHandler reads a token stream, authenticates with GitHub, retrieves the username, and returns a TokenHandler object or an error.
1697	CreateTokenHandlers will process token files and return a list of TokenHandlers and an error if any file cannot be opened or token created
1698	String method returns job identifier in formatted string
1699	TerminateOlderPresubmitJobs will cancel older presubmit jobs and update their status an error will be returned if the cancellation fails
1700	PushMetrics continuously pushes metrics from a gatherer at specified intervals until interrupted.
1701	RateLimiter creates a named rate limiting queue with exponential and bucket rate limiters for a given controller name.
1702	checkExistingStatus will retrieve and log the existing DCO status context from GitHub, returning it or an error
1703	checkExistingLabels checks GitHub issue labels for "DCO yes" and "DCO no" returning their presence and any error encountered
1704	handle will process a GitHub pull request and perform actions based on commit messages, existing status, and labels, returning any errors encountered
1705	MarkdownSHAList generates a markdown-formatted list of commits with their SHAs and messages.
1706	PathForSpec generates a log path based on job type and details.
1707	AliasForSpec returns a log directory path for presubmit jobs and an empty string for others, logging an error for unknown job types.
1708	RootForSpec returns the log directory based on the job type specified
1709	NewSingleDefaultRepoPathBuilder creates a function to build repository paths based on organization and repository names, returning an empty string if they match the defaults, otherwise replacing slashes with underscores and formatting the path accordingly.
1710	NewExplicitRepoPathBuilder returns a closure that constructs a repository path by replacing slashes with underscores and concatenating the organization and repository names.
1711	RegisterSourceOrDie registers an IssueSource under a given name or panics if it already exists.
1712	CreateAndSync initializes IssueCreator, generates issues from sources, and syncs them, logging errors and progress.
1713	loadCache fetches user, labels, collaborators, and issues from client, populating cache or returning errors.
1714	setIntersect returns two slices: filtered contains elements from a that are also in b, and removed contains elements from a that are not in b
1715	sync checks if an issue is already synced or creates a new one with filtered details
1716	GetAWSCreds retrieves AWS credentials from a resource and returns them or an error if the resource type or keys are missing.
1717	stopper creates a channel that listens for OS signals to trigger a graceful or forced shutdown
1718	newPipelineConfig creates a pipeline configuration and starts a shared informer factory for watching PipelineRuns with a resync period of 30 minutes.
1719	KubeClient method returns a Kubernetes client interface and an error based on master URL and kube config.
1720	ProwJobClient method returns a Kubernetes client interface and an error if the client cannot be created
1721	resolveSymLink reads a GCS object and returns its content without the bucket prefix, or an error
1722	readJSON will fetch JSON data from a bucket, unmarshal it into a given struct, and return an error if unsuccessful
1723	listSubDirs returns a slice of subdirectories and an error for a given GCS bucket and prefix
1724	listAll retrieves all objects from a GCS bucket with a specified prefix and returns their names along with any errors encountered.
1725	listBuildIDs extracts build IDs from GCS paths, returning them as integers or errors if parsing fails.
1726	FilterProfilePaths filters profiles based on given paths and inclusion flag using regex.
1727	LoadSecrets will return a map of file paths to their secret values and an error if any file cannot be loaded
1728	LoadSingleSecret reads a file and returns its trimmed content or an error
1729	Set method updates bool value from string and returns error if parsing fails
1730	NewOpener initializes a GCS client using provided credentials or default application credentials, returning an Opener object and any errors encountered.
1731	IsNotExist checks if an error indicates non-existence.
1732	LogClose will attempt to close a resource and log any errors encountered during the process
1733	opener.Writer creates or returns a writer for a given GCS path, handling errors and creating files as needed.
1734	InitGitHubOAuthConfig registers token type and sets cookie store
1735	deltaDisplayed calculates the percentage difference between new and base ratios if base ratio is non-negative.
1736	makeTable generates a table comparing coverage changes and checks if coverage is low based on a threshold.
1737	ContentForGitHubPost generates a code coverage report comparing old and new profiles, returns it as a string along with a flag indicating low coverage.
1738	AddFlags method adds OAuth token and project flags to a command.
1739	CheckFlags checks and normalizes organization and project flags returning an error if any are unset
1740	getGitHubClient retrieves or creates a GitHub client using a token from the client instance or a file, returning it along with any errors encountered.
1741	limitsCheckAndWait checks GitHub rate limits and sleeps accordingly
1742	Fetches GitHub issues since a given time and sends them to a channel.
1743	hasID checks if an issue ID exists in a list of GitHub issue events and returns true if it does
1744	FetchIssueEvents retrieves issue events from GitHub using pagination until all events or the latest event is reached.
1745	isPRChanged checks if PR event action indicates a change
1746	NewFetcher creates a Fetcher instance with specified repository and initializes channels for issues and events/comments.
1747	fetchRecentIssues retrieves recent issues from the database and pushes them to a channel, updating the last fetched issue timestamp.
1748	fetchRecentEventsAndComments will retrieve recent events and comments from the database, compare their timestamps, and push them to a channel while updating the last processed IDs, returning an error if any issues occur during the process.
1749	Fetch issues and events from database, return error if failed
1750	Issues will return a list of creator issues and an error if the FlakyJobReporter fails to parse or sync the data.
1751	Title method returns a string describing the FlakyJob's name and how many times it has flaked in the last week
1752	Labels method returns job labels including kind/flake and sig/ identifiers.
1753	ReadHTTP will fetch data from a URL with retries on server errors and returns the response body or an error.
1754	String method for linesByTimestamp returns sorted log string with newlines
1755	NewJobSpec constructs a JobSpec from ProwJobSpec and additional IDs.
1756	ResolveSpecFromEnv retrieves a JobSpec from environment variables, unmarshalling JSON and returning it or an error if the environment variable is unset or malformed.
1757	EnvForSpec constructs an environment map from a JobSpec, adding various fields like job name, build ID, and repository information based on the job type and agent.
1758	EnvForType returns environment variables based on the ProwJobType.
1759	getRevisionFromRef returns the revision from refs, prioritizing Pulls over BaseSHA then BaseRef
1760	GetRevisionFromSpec returns a revision from job spec's refs or extra refs, or empty string if none available
1761	helpProvider returns plugin help with a description of the merge commit blocker plugin's functionality
1762	load reads configuration from a reader and returns repository paths and errors
1763	loadPaths reads file paths from reader, ignoring comments and empty lines, and stores them in Group's Paths map with an error if scanning fails.
1764	Match checks if a path or its base matches any group paths or prefixes
1765	CreateDatabase initializes InfluxDB client, drops existing series, creates new batch points, and returns InfluxDB instance.
1766	mergeTags combines two maps into one, overwriting duplicates from extraTags
1767	tagsToWhere converts a map of tags to a SQL WHERE clause
1768	Push adds a point to the batch with specified tags, fields, and timestamp returning an error if any issue occurs
1769	artifact fetches a PodLogArtifact using jobName, buildID, and sizeLimit, returning the artifact or an error if access fails
1770	serve sets up HTTP server to handle /metrics endpoint using Prometheus and logs any errors encountered during ListenAndServe.
1771	gather will continuously sync metrics every 30 seconds or shut down on interrupt signal
1772	makeRequest constructs a BranchProtectionRequest from a Policy.
1773	makeReviews converts branch protection review policy to GitHub PR review requirements.
1774	Header will return a template string based on artifacts and resource directory
1775	Callback processes artifacts, extracts log lines based on request parameters, highlights them, and returns the result using a template.
1776	logLinesAll reads all lines from an artifact and returns them as a slice of strings or an error
1777	executeTemplate will render a template using provided data and return the result or an error message
1778	DeepCopyObject creates a deep copy of the ResourceObject and returns it or nil if copying fails.
1779	FromItem converts an item to a resource object.
1780	SetItems updates the resource collection's items with a slice of ResourceObjects.
1781	DeepCopyObject creates a deep copy of the ResourceCollection object or returns nil if the copy fails.
1782	useContext will run a kubectl command to switch contexts and return an error if it fails
1783	currentContext will return the current kubectl context and an error if the command fails
1784	command will execute a binary with arguments and return the arguments and the executed command object
1785	describeCluster will return a cluster description or an error if the cluster details cannot be retrieved or parsed correctly
1786	Set will add a value to the slice and return nil
1787	parseXML unmarshals XML body to gcsDir, checks if it's a directory, trims prefixes, and removes self-record if not a directory.
1788	Render will generate an HTML page for a directory listing including headers, contents, and navigation buttons.
1789	Render will write a file record to HTTP response
1790	Render will generate HTML grid item for given path and prefix
1791	Printf logs a message with transaction nonce prepended.
1792	NewClient creates a new client with handlers for multiple Gerrit instances.
1793	SetReview updates a review on a Gerrit instance and returns an error if it fails.
1794	GetBranchRevision retrieves a revision from a Gerrit instance for a specified project and branch, returning an error if the instance is not active or the retrieval fails.
1795	queryAllChanges gathers all changes from projects, logging errors but continuing on failure
1796	NewTypeFilterWrapperPlugin creates a new instance of TypeFilterWrapperPlugin with the given plugin and an empty pass map.
1797	AddFlags method adds flags to command to ignore pull requests and issues
1798	CheckFlags will return an error if both pull-requests and issues are ignored
1799	AddFlags method adds KubernetesClientOptions flags to FlagSet.
1800	Validate checks if kubeConfig file exists and returns error if it doesn't
1801	Client will return a Kubernetes client interface based on the specified type and options.
1802	newCRDClient will create a Kubernetes client for a given resource type and return it along with any errors encountered during configuration or registration
1803	createRESTConfig will return a REST config, runtime scheme, and an error based on the kubeconfig and type provided
1804	registerResource will create a CRD based on the given config and type and return an error if it fails
1805	newDummyClient creates a new dummy client with type t and an empty objects map
1806	Update method checks if object exists in map, updates it if found, returns updated object or error if not found
1807	TrustedPullRequest checks if the author is a trusted user or if the PR has the "ok-to-test" label. It returns the labels, a boolean indicating if the author is trusted, and an error if any occurs.
1808	buildAll processes PR changes, filters presubmits, determines skips, and runs jobs accordingly.
1809	Run will execute options and return failure count and error handling interruptions
1810	AddConfig adds a configuration to storage and returns an error if unsuccessful
1811	DeleteConfig removes a config from storage by name.
1812	UpdateConfig updates the configuration using the provided resources config and returns an error if the update fails
1813	GetConfig retrieves a configuration resource by name returning an error if not found or invalid.
1814	GetConfigs retrieves all resource configurations from storage, converting each item to a ResourcesConfig object and returning them along with any errors encountered.
1815	SyncConfigs updates, adds, and deletes resource configurations based on differences between current and new sets, returning any errors encountered.
1816	addKnownTypes registers custom types with a Kubernetes scheme
1817	NewController initializes a new controller with various configurations.
1818	Run will handle configuration changes and reconcile statuses or shutdown on signal.
1819	addedBlockingPresubmits identifies new or modified blocking presubmits between two configurations.
1820	removedBlockingPresubmits identifies and logs removed blocking presubmits between two maps, returning the count and updated map.
1821	migratedBlockingPresubmits identifies and logs migrated blocking presubmits between two configurations.
1822	Load will parse configuration options from environment or command-line arguments and apply them to the loader.
1823	canExecuteConcurrently checks if a ProwJob can run concurrently based on global and job-specific limits
1824	getJenkinsJobs filters out completed ProwJobs and returns a list of BuildQueryParams for active jobs.
1825	terminateDupes will remove duplicate presubmit jobs and cancel older ones, updating their status accordingly.
1826	Throttle controls request rate limiting based on hourly tokens and burst limit.
1827	NewClientWithFields creates a client with fields, token retrieval function, GraphQL endpoint, and optional bases.
1828	NewClient initializes a new client with token, GraphQL endpoint, and optional bases.
1829	NewDryRunClient creates a new client for dry run operations using provided token, endpoint, and optional base values.
1830	NewFakeClient creates a new fake client instance with logging, standard time, and dry run enabled
1831	request sends a request and unmarshals the response to a struct if provided
1832	requestRaw sends a request and returns the status code, response body, and any errors encountered
1833	getUserData fetches user data logs it updates bot name and email from response returns any errors
1834	readPaginatedResultsWithValues fetches paginated results from a server using a GET request, processes each response, and accumulates the results using custom functions.
1835	UpdatePullRequest updates a GitHub pull request with new details and returns any errors encountered
1836	getLabels fetches labels from a GitHub API endpoint and returns them as a slice of Label objects.
1837	stateCannotBeChangedOrOriginalError checks if an error contains a specific message prefix and returns a custom error if it does, otherwise returns the original error.
1838	IsMergeable checks pull request mergeability with retries and returns a boolean and an error
1839	reloadingTokenSource's Token method returns an oauth2.Token containing the access token from getToken and no error
1840	ListArtifacts will return a list of artifacts for a given source, appending "build-log.txt" if it's not already present. An error will be returned if the source cannot be parsed or if the GCS fetch fails.
1841	KeyToJob extracts jobName and buildID from source string, returning them along with any errors encountered during parsing.
1842	prowToGCS retrieves the GCS path from a Prow key, handling errors and validating the URL prefix.
1843	FetchArtifacts retrieves artifacts from a source based on pod name, size limit, and artifact names. It handles different key types, fetches GCS and pod logs, and logs retrieval duration.
1844	DeepCopy creates a copy of DecorationConfig and returns it
1845	DeepCopy creates a copy of GCSConfiguration.
1846	DeepCopy creates a copy of JenkinsSpec instance.
1847	DeepCopy creates a deep copy of ProwJob and returns it.
1848	DeepCopy creates a copy of ProwJobList and returns it
1849	DeepCopy creates a copy of ProwJobSpec and returns it.
1850	DeepCopy will create a copy of ProwJobStatus and return it.
1851	DeepCopy creates a deep copy of Pull object.
1852	DeepCopy creates a deep copy of the Refs object and returns it.
1853	DeepCopy creates a deep copy of UtilityImages returning the copied instance.
1854	upload creates resources on a server and returns a URL or an error
1855	ApplyDefault merges two DecorationConfig objects, prioritizing non-nil values from both.
1856	Validate checks if necessary utility images and GCS configurations are specified and valid.
1857	ApplyDefault will merge default values into utility images and return the merged result
1858	ApplyDefault merges two GCSConfigurations, using defaults where applicable.
1859	Validate checks if GCS configuration is valid and returns an error if it is not.
1860	ClusterAlias returns cluster alias or default if empty
1861	NewResource creates a new resource object with specified attributes and current timestamp.
1862	NewResourcesFromConfig creates a list of resources from a config entry
1863	UserDataFromMap will create a new UserData instance and store key-value pairs from the input map.
1864	Set will add comma-separated values to the CommaSeparatedStrings if it's empty, otherwise it returns an error.
1865	UnmarshalJSON converts JSON data to UserData using a temporary map and then populates the struct.
1866	Extract will load content based on id and unmarshal it into out, returning an error if the user data is not found
1867	Set will marshal input to YAML and store it under given ID, returning error if marshalling fails.
1868	userData update method updates user data based on key-value pairs where non-empty strings are stored and empty strings are deleted
1869	ToMap converts UserData to a map where keys and values are strings.
1870	FromMap will populate UserData from a map.
1871	ItemToResource converts an Item to a Resource or returns an error if it's not possible.
1872	Run will execute tasks using multiple workers and log the results
1873	addSSHKeys will execute ssh-agent, walk through provided paths adding SSH keys, and return the SSH agent environment variables along with any errors encountered
1874	Issues fetches top clusters from HTTP data and returns them as issues.
1875	loadClusters parses JSON data, filters clusters, aggregates failing builds by job, and calculates total jobs/tests/builds.
1876	parseTriageData will unmarshal JSON into triageData and populate Jobs with appropriate indexers or return errors for missing keys or invalid types
1877	topClusters returns the top N clusters based on total builds, sorting them in descending order
1878	topJobsFailed returns up to `count` jobs with the most failed builds.
1879	Title will return a formatted string with cluster info and statistics
1880	Labels method returns a list of labels including the cluster kind and top tests failed signatures.
1881	New creates a new Cron instance with initialized fields.
1882	QueuedJobs returns triggered jobs and resets their trigger status
1883	HasJob checks if a job exists in the cron scheduler.
1884	addJob will schedule a cron job and log success or failure
1885	removeJob will delete a job from Cron and log the removal an error will be returned if the job does not exist
1886	updateComments updates issue comments based on the latest update and optionally pull request comments
1887	GatherProwJobMetrics aggregates ProwJob metrics into a map and updates Prometheus metrics accordingly.
1888	optionOrDefault returns default if option is zero otherwise it returns option
1889	newGCSJobSource parses a GCS URL to extract job source details and returns them in a structured format or an error if parsing fails.
1890	artifacts will fetch GCS artifacts and return their names and an error if failed
1891	canonicalLink constructs a URL from job source details.
1892	jobPath constructs a job path using bucket and jobPrefix.
1893	targetURL constructs a URL based on configuration or parses a base URL to include pull request details, logging errors if parsing fails.
1894	newBuildConfig creates a build configuration with a client and informer, ensuring the knative-build CRD is deployed.
1895	NewClient creates a new GitHub client with OAuth authentication and returns it.
1896	retry will execute an action with retries handling rate limit and two-factor authentication errors
1897	depaginate retrieves all paginated results from GitHub API using specified action and options
1898	NewHelpAgent initializes a HelpAgent with logging and client dependencies.
1899	GeneratePluginHelp constructs help information for plugins based on configuration and repository mappings.
1900	getPullCommitHash extracts commit hash from pull request string returning parsed hash or error
1901	listJobBuilds fetches job builds from a storage bucket based on prefixes and returns them.
1902	getPRBuildData fetches build data from a bucket for multiple jobs and returns a list of buildData objects.
1903	getGCSDirsForPR retrieves GCS directories for a given PR based on the configuration and returns a map of buckets and paths.
1904	imageDeleteFromDisk will delete an image's main file and rootfs file from disk logging errors if deletion fails
1905	doNetworksCreate starts a network and deletes it on failure
1906	networkLoadByName retrieves a network by name and returns it along with an error if any occurs
1907	Transaction will execute a function within a database transaction context and return any errors encountered
1908	ForLocalInspectionWithPreparedStmts prepares SQL statements for local inspection and returns a Cluster object along with any errors encountered.
1909	SetDefaultTimeout updates the default timeout for the cluster's database driver.
1910	Transaction will execute a function on a cluster transaction and return any errors encountered
1911	EnterExclusive acquires an exclusive lock on cluster DB with a timeout error if it takes too long
1912	ExitExclusive releases exclusive lock on cluster DB, executes transaction, and returns error
1913	Close will close all statements and then the database connection returning any errors encountered
1914	TxCommit will commit a transaction and ignore duplicate commits or rollbacks returning any other errors
1915	ParseRemote will split the input string by ":" and return the remote and path, or an error if the remote does not exist
1916	GetContainerServer retrieves a container server by name, validates its configuration, and establishes a connection using appropriate transport based on the remote address.
1917	GetImageServer retrieves an image server based on the given name and returns it along with any errors encountered during the process.
1918	initAppArmor detects and initializes AppArmor support, stacking, and confinement in the OS struct.
1919	appArmorCanStack checks if AppArmor can stack based on its features and version.
1920	containerDeviceAdd adds a device to a container and returns an error if the device already exists or if there's an issue updating the container.
1921	profileDeviceAdd adds a device to a container's profile if it doesn't exist and updates the profile.
1922	ensureImageAliases updates image aliases on a server by deleting existing matches and creating new ones based on provided data.
1923	GetExistingAliases returns a list of aliases that exist in both input slices.
1924	String method returns human-readable description for StatusCode enumeration.
1925	ImagesGetExpired retrieves expired image fingerprints from the database based on expiry duration.
1926	ImageSourceInsert inserts image source details into database and returns error if protocol is invalid
1927	ImageSourceGet retrieves an image source by ID, returning its details or an error if not found.
1928	ImageExists checks if an image exists in a project by fingerprint and returns a boolean and an error.
1929	ImageGet retrieves an image based on project, fingerprint, and public status, returning the image details and any errors encountered during the process.
1930	ImageGetFromAnyProject retrieves an image by its fingerprint and returns the image details along with any errors encountered during the process.
1931	imageFill updates an image with details from the database and returns any errors encountered
1932	ImageLocate will return the address of a node with the specified image or an error if the image is not available on any online node
1933	ImageAssociateNode associates an image with a node in a cluster and returns an error if the operation fails.
1934	ImageDelete will remove an image from the database based on its ID and return an error if the operation fails
1935	ImageAliasesGet retrieves image aliases for a project, handling transactions and errors.
1936	ImageAliasGet retrieves image alias details based on project and name, handling transactions and filtering by client trust.
1937	ImageAliasRename updates image alias name in database and returns error if failed
1938	ImageAliasDelete deletes an image alias from the database within a transaction, handling project defaults and returning any errors encountered.
1939	ImageAliasesMove updates the image_id in images_aliases table from source to destination and returns an error if failed
1940	ImageAliasAdd adds an alias to an image in a project, handling transactions and default projects.
1941	ImageAliasUpdate updates the alias of an image in the database and returns an error if the operation fails
1942	ImageLastAccessUpdate updates the last use date of an image identified by its fingerprint in the database and returns any errors encountered during the operation.
1943	ImageLastAccessInit updates image cache status and last use date based on fingerprint.
1944	ImageUpdate updates an image's details and properties within a transaction.
1945	ImageInsert inserts an image into the database and returns an error if the insertion fails.
1946	ImageGetPools fetches storage pool IDs for a given image fingerprint and returns them along with any errors encountered during the process.
1947	ImageGetPoolNamesFromIDs retrieves pool names from IDs using a database query.
1948	ImageUploadedAt updates the upload date of an image in the database and returns an error if the operation fails
1949	ImagesGetOnCurrentNode retrieves images on the current node using its ID.
1950	ImagesGetByNodeID retrieves images by node ID returns map of fingerprints to project names and error
1951	ImageGetNodesWithImage retrieves nodes associated with a specific image fingerprint from the database.
1952	ImageGetNodesWithoutImage retrieves node addresses without a specific image based on its fingerprint.
1953	Add will add a function and its schedule to a group and return a task pointer
1954	Start starts a group of tasks concurrently, canceling them when called.
1955	zfsIsEnabled checks if ZFS is installed on the system and returns true if it is enabled.
1956	zfsToolVersionGet retrieves the ZFS tool version from dpkg-query on Ubuntu, returning the version as a string or an error if the command fails.
1957	zfsModuleVersionGet will return the ZFS module version and an error if it cannot be determined
1958	zfsPoolVolumeCreate creates a ZFS volume with specified dataset and properties returns the command output and error
1959	zfsPoolVolumeExists checks if a dataset exists and returns a bool and error
1960	NetworkIDsNotPending retrieves a map of network IDs and names from the database where the state is not pending.
1961	NetworkConfigAdd adds network configuration to a cluster transaction and returns an error if the operation fails.
1962	NetworkNodeJoin inserts network and node IDs into the networks_nodes table and returns any errors encountered
1963	NetworkCreatePending checks for or creates a pending network, associates a node, and adds configuration, returning an error if any step fails.
1964	NetworkCreated updates the cluster's network state to created and returns an error if the operation fails
1965	NetworkErrored checks if a cluster transaction has network errors and returns an error if so.
1966	NetworkGet retrieves network details by name, returns ID, Network object, and error if any.
1967	networkNodes retrieves node names associated with a given network ID within a transactional context
1968	NetworkGetInterface retrieves network details based on device name, returning ID, network object, and error.
1969	NetworkConfigGet retrieves network configuration based on ID, returns a map of key-value pairs or an error.
1970	NetworkCreate inserts a new network and returns its ID or an error.
1971	NetworkUpdate updates a cluster's network configuration and returns an error if any step fails
1972	NetworkUpdateDescription updates network description for given ID in transaction and returns error if any.
1973	NetworkConfigClear will delete rows from networks_config where network_id matches and node_id either matches or is null returning an error if the operation fails
1974	NetworkDelete will delete a network by name and return an error if the operation fails
1975	NetworkRename updates a network's name and returns an error if the operation fails
1976	GetContainers fetches and returns all containers using a GET request.
1977	GetContainersFull fetches all container details from the server returning an array of ContainerFull objects or an error if the "container_full" extension is missing or the request fails
1978	GetContainer fetches a container's details and returns it along with its ETag and any errors encountered.
1979	CreateContainerFromBackup will create a container from a backup and handle pool-specific configurations and errors
1980	CreateContainer sends a POST request to create a container and returns an operation and error.
1981	CreateContainerFromImage creates a container from an image on a given source, handling both local and remote cases with appropriate optimizations and error handling.
1982	UpdateContainer sends a PUT request to update a container and returns an operation and error.
1983	RenameContainer will perform a rename operation on a container and return an Operation object and an error if the operation fails
1984	ExecContainer sends a command to a container and handles input/output streams.
1985	GetContainerFile retrieves a file from a container and returns its content and metadata or an error if the request fails.
1986	CreateContainerFile sends a POST request to create a file or directory in a container with specified arguments and checks for required API extensions.
1987	DeleteContainerFile removes a file from a container and returns an error if the operation fails or the server lacks the necessary extension.
1988	GetContainerSnapshotNames fetches container snapshot names and returns them as a slice or an error.
1989	GetContainerSnapshots fetches container snapshots and returns them or an error
1990	GetContainerSnapshot retrieves a container snapshot and its ETag from the LXD protocol.
1991	CreateContainerSnapshot sends a POST request to create a container snapshot and returns an Operation object or an error if the request fails.
1992	MigrateContainerSnapshot sends a migration request for a container snapshot and returns an operation and error
1993	UpdateContainerSnapshot updates a container snapshot and returns an operation or an error
1994	GetContainerState retrieves a container's state and its ETag, returning an error if unsuccessful.
1995	UpdateContainerState sends a PUT request to update a container's state and returns the operation or an error.
1996	GetContainerLogfiles fetches container logs URLs and extracts log file names from them.
1997	GetContainerLogfile sends a GET request to retrieve a container logfile and returns an io.ReadCloser and an error.
1998	GetContainerMetadata retrieves container metadata from the server returns metadata, ETag, and an error if the "container_edit_metadata" extension is missing or the query fails
1999	SetContainerMetadata updates container metadata on the server if the "container_edit_metadata" extension is supported.
2000	GetContainerTemplateFiles retrieves container template files and returns them along with any errors encountered during the process.
2001	CreateContainerTemplateFile sends a POST request to set a container's template file.
2002	DeleteContainerTemplateFile will delete a container template file and return an error if the required API extension is missing
2003	ConsoleContainer sends a POST request to connect to a container's console and handles terminal input/output using websockets.
2004	GetContainerConsoleLog fetches container console log and returns reader or error
2005	DeleteContainerConsoleLog will send a DELETE request to remove a container's console log and return an error if the "console" extension is missing or the request fails
2006	GetContainerBackups fetches container backups from the LXD server and returns them or an error
2007	GetContainerBackup fetches a container backup and its ETag, returning an error if the "container_backup" extension is missing or the query fails.
2008	CreateContainerBackup sends a POST request to create a container backup and returns an operation and error
2009	RenameContainerBackup will send a POST request to rename a container backup and return an operation or an error
2010	DeleteContainerBackup sends a DELETE request to remove a container backup and returns the operation or an error if the "container_backup" extension is missing.
2011	GetContainerBackupFile fetches a container backup file and returns its size along with an error if the operation fails.
2012	RsyncSend sends a file over a websocket connection and returns any errors encountered during the process.
2013	patchesGetNames retrieves names from a list of patches and returns them as a slice of strings.
2014	patchRenameCustomVolumeLVs renames custom LVM volumes in pools.
2015	patchLvmNodeSpecificConfigKeys updates LVM configuration across nodes and handles transactions, returning an error if any step fails.
2016	GetHTTPClient retrieves the HTTP client from ProtocolLXD or returns an error if it's not set.
2017	do method sends HTTP request using bakeryClient or http depending on availability adding macaroon headers if applicable
2018	RawQuery constructs the URL and calls rawQuery to send the HTTP request.
2019	RawWebsocket returns a WebSocket connection for a given path or an error
2020	RawOperation sends a raw HTTP request and returns an operation and response body or an error.
2021	ProfileToAPI converts a Profile to an api.Profile.
2022	Profiles retrieves project profiles from the database, handling transactions and default project cases.
2023	ProfileGet fetches a profile from the cluster and returns its ID and API representation, handling transactions and default projects.
2024	ProfilesGet fetches profiles from a cluster transactionally, handling project defaults and returning API-formatted profiles or an error.
2025	ProfileConfig fetches profile configuration for a given project and name, returning a map of key-value pairs or an error if the profile does not exist.
2026	ProfileConfigClear deletes config data associated with a given profile ID in transactions.
2027	ProfileConfigAdd inserts configuration values into the database for a given profile ID, returning an error if any operation fails.
2028	ProfileContainersGet retrieves container names by project and profile, returning a map of project names to container names.
2029	ProfileCleanupLeftover will delete leftover records from profiles_config, profiles_devices, and profiles_devices_config tables referencing non-existent profiles and return an error if execution fails.
2030	ProfilesExpandConfig merges given config with profiles' configs, giving priority to the given config.
2031	ProfilesExpandDevices combines multiple device sets from profiles and then adds specific devices on top, returning the combined set.
2032	GetServer fetches server details, fills missing cert info, adds auth methods, caches result, returns server, ETag, and error.
2033	UpdateServer sends a PUT request to update the server and returns an error if it fails
2034	HasExtension checks if a server supports a specific LXD protocol extension
2035	GetServerResources fetches server resources using the "resources" API extension. It returns the resources and any errors encountered during the process.
2036	UseProject sets the project name in ProtocolLXD and returns a new instance.
2037	sqliteOpen opens a SQLite database with a specified path and returns a DB object and an error.
2038	Rebalance updates the Raft cluster by promoting a spare node to a database node and returns the updated Raft nodes and the new node's address.
2039	Promote will promote a node to a database node, handle errors, update node information, replace raft nodes, and join the raft cluster.
2040	Purge will remove a node from the database by its name and handle errors during the transaction process
2041	List retrieves cluster members' info from state and updates their status based on versions and connectivity.
2042	Count will return the number of nodes in the cluster and an error if the transaction fails
2043	Enabled checks if a database node has any Raft addresses and returns a bool indicating its status along with any errors encountered during the check.
2044	membershipCheckNodeStateForBootstrapOrJoin checks if a node can bootstrap or join a cluster based on its state and configuration
2045	membershipCheckClusterStateForBootstrapOrJoin checks if there's only one node in the cluster during bootstrap or join, returning an error if not.
2046	membershipCheckClusterStateForAccept checks if a node can join a cluster based on its name, address, schema, and API version returning an error if any condition fails
2047	membershipCheckClusterStateForLeave checks if a node can leave the cluster by ensuring it has no containers/images and is not the last node.
2048	membershipCheckNoLeftoverClusterCert checks for any leftover cluster certificates in a directory and returns an error if found.
2049	ConfigLoad will return a Config object and an error if the configuration cannot be loaded from the database or parsed.
2050	Replace values in Config and return updated string map with errors
2051	Patch will update configuration values with a given patch and return updated string values along with any errors
2052	HTTPSAddress retrieves the HTTPS address from a database node's configuration.
2053	CertificatesGet retrieves certificates from the database within a transaction.
2054	CertificateGet fetches certificate info by fingerprint and returns it or an error if not found.
2055	CertSave inserts a certificate into the database and returns an error if it fails.
2056	CertDelete deletes a certificate by its fingerprint from the database and returns any errors encountered.
2057	CertUpdate updates a certificate's details within a transaction and returns any errors encountered
2058	createDevLxdlListener will return a Unix listener on a specified directory path or an error if the socket cannot be created or configured correctly
2059	Servers method returns the list of servers and an error if the raft instance is not a leader
2060	Shutdown raft instance, wait for timeout or error, then close logs store.
2061	raftNetworkTransport creates a new network transport for raft nodes with specified configurations and returns the transport, handler, and layer along with any errors.
2062	raftConfig scales raft timeouts based on latency and sets snapshot and trailing log thresholds
2063	raftMaybeBootstrap checks if Raft needs bootstrapping and does it if necessary
2064	CPUResource will return CPU resource details including sockets, cores, and other attributes, or an error if retrieval fails
2065	MemoryResource reads memory info from /proc/meminfo and returns total and used memory in bytes.
2066	GetOperationUUIDs fetches operation URLs and extracts UUIDs from them returning a list of UUIDs and an error if any.
2067	GetOperations fetches all LXD operations and returns them as a list.
2068	GetOperation fetches an operation by UUID returns the operation ETag and an error
2069	GetOperationWebsocket returns a websocket connection and error for a given operation UUID and secret
2070	tryMount attempts to mount a filesystem up to 20 times with a 500ms delay between each attempt returns an error if mounting fails after retries
2071	lxdUsesPool checks if a pool exists with specific properties and returns its name and existence status.
2072	ProjectURIs filters projects by name and returns URIs using a prepared statement.
2073	ProjectList filters and retrieves project details from a database using prepared statements, populating fields like Config and UsedBy before returning the list.
2074	ProjectGet filters projects by name and returns the first match or an error if none or multiple matches are found
2075	ProjectExists checks if a project exists by name returning a bool and an error
2076	ProjectCreate checks if a project exists, populates arguments, executes a prepared statement to create the project, retrieves the project ID, and inserts config references, returning the project ID or an error.
2077	ProjectUsedByRef filters projects by name and returns a map of names to values using a prepared SQL statement.
2078	ProjectRename updates a cluster transaction's project name and returns an error if unsuccessful or if the update affects more than one row.
2079	ProjectDelete deletes a project by name and returns an error if it fails or if multiple rows are affected.
2080	PasswordCheck verifies if the provided password matches the stored hash using scrypt encryption and returns an error if they don't match or if there's an issue with decoding the secret.
2081	LoadCert will return a CertInfo and an error if it fails to load the TLS certificate from the specified directory
2082	WriteCert saves certificate, key, and optional CA file to specified directory with given prefix and permissions.
2083	NewDaemon creates a new daemon instance with the given configuration and operating system.
2084	DefaultDaemon initializes a new daemon with default configuration and OS settings.
2085	AllowProjectPermission checks user permissions before allowing access to a project.
2086	checkTrustedClient verifies client auth and returns error if unauthorized
2087	Authenticate checks request's validity and returns authentication status, user, method, and error.
2088	State returns a new state object initialized with daemon's dependencies
2089	UnixSocket returns the path to the Unix socket either from environment or default location.
2090	Stop will initiate a graceful shutdown of the daemon, handling errors from endpoints, tasks, and cluster connections, and logging the status.
2091	setupExternalAuthentication configures external authentication with endpoint, pubkey, expiry, and domains returns an error if setup fails
2092	initializeDbObject initializes a local database object, renames old databases if necessary, applies legacy patches, and creates a fresh database with initial hooks.
2093	WriteJSON encodes JSON to http.ResponseWriter, captures output if debug enabled, logs it, and returns error.
2094	EtagHash computes SHA256 hash of JSON-encoded data returns the hexadecimal representation of the hash and an error if encoding fails
2095	EtagCheck verifies If-Match header against data's ETag and returns an error if they don't match
2096	HTTPClient creates an HTTP client with TLS config and custom proxy settings, handling certificates and redirect policies.
2097	IsRecursionRequest checks if the request contains a non-zero "recursion" parameter.
2098	GetListeners retrieves inherited network listeners from environment variables.
2099	internalSQLGet handles SQL requests, validates database, starts transaction, dumps data, and returns response.
2100	internalSQLPost processes SQL queries, validates input, executes them, and returns results or errors.
2101	PublicKey method returns the PEM-encoded certificate data from CertInfo's KeyPair.
2102	PrivateKey method returns PEM-encoded private key from CertInfo object or nil if unsupported key type
2103	CertInfo.Fingerprint returns the certificate's fingerprint or panics if the public key is invalid
2104	GenCert will generate and save a certificate and key file, returning an error if any step fails
2105	PrintServerInfo prints details about the LXD container server's environment.
2106	LaunchContainers launches multiple containers in batches and measures the duration, handling errors during creation, starting, and freezing.
2107	CreateContainers launches multiple containers in batches and returns the total duration and any errors encountered.
2108	GetContainers retrieves active containers based on user configuration.
2109	StartContainers starts multiple containers concurrently and returns the total duration and any errors encountered.
2110	setQueryParam adds or updates a query parameter in a URI and returns the modified URI as a string. An error is returned if the URI is invalid.
2111	GetImages retrieves all images from LXD returning them or an error
2112	GetImageFile fetches an image file using its fingerprint and returns the response or an error.
2113	GetImageSecret retrieves an image secret using its fingerprint and returns the secret string or an error.
2114	GetPrivateImage retrieves an image using its fingerprint and optional secret, returning the image data, ETag, and any errors encountered during the process.
2115	GetPrivateImageFile downloads an image file using either a Unix socket or HTTP based on the presence of a secret.
2116	GetImageAliases fetches image aliases from the server and returns them along with any errors encountered during the process
2117	tryCopyImage attempts to copy an image from multiple URLs and handles aliases for older servers.
2118	CopyImage copies an image from a source server to the current server, handling authentication and processing options.
2119	UpdateImage sends a PUT request to update an image with the given fingerprint and returns an error if unsuccessful
2120	DeleteImage sends a DELETE request to remove an image by its fingerprint and returns the operation and any errors encountered
2121	RefreshImage will send a POST request to refresh an image on the server and return an operation or an error if the "image_force_refresh" extension is missing.
2122	CreateImageAlias sends a POST request to create an image alias and returns an error if it fails
2123	UpdateImageAlias sends a PUT request to update an image alias and returns an error if the request fails
2124	RenameImageAlias sends a POST request to rename an image alias and returns an error if the request fails
2125	DeleteImageAlias will send a DELETE request to remove an image alias and return an error if it fails
2126	Open will return a SQL database connection or an error if the database cannot be opened
2127	EnsureSchema updates the database schema, runs hooks, and handles backups.
2128	FilesystemDetect determines the filesystem type from a given path returning its name or an error
2129	Schema will return a new schema object based on updates and freshSchema
2130	updateFromV37 will execute a transaction to copy a configuration value from core.https_address to cluster.https_address if there are raft nodes present. An error will be returned if any step fails.
2131	ArchitectureGetLocal retrieves local architecture or returns default on error.
2132	NewController initializes a new controller instance by connecting to MAAS and finding the specified machine, returning an error if any step fails.
2133	CreateContainer initializes a new container with specified interfaces and sets up network configurations, cleaning up on failure.
2134	DefinedContainer checks if a container is defined by name and returns a boolean and error.
2135	UpdateContainer updates a container's network interfaces based on provided configurations and ensures they are correctly linked to subnets.
2136	RenameContainer updates a container's name and returns an error if unsuccessful
2137	DeleteContainer removes a container by name and returns an error if unsuccessful.
2138	Add updates to schema
2139	ensureSchemaTableExists checks if the schema table exists, creates it if not, and returns any errors encountered during the process.
2140	queryCurrentVersion returns the highest recorded schema version from the database, fixing missing or broken versions along the way.
2141	ensureUpdatesAreApplied applies schema updates using a transaction, executing hooks and tracking versions.
2142	checkSchemaVersionsHaveNoHoles verifies consecutive version numbers, returning an error if any gaps are found.
2143	checkAllUpdatesAreApplied checks if all database updates have been applied correctly by comparing their versions.
2144	formatSQL formats SQL statements by replacing ", " with ",\n    " unless the line contains "UNIQUE"
2145	GetAllXattr retrieves all extended attributes of a file and returns them as a map, ensuring consistency between retrievals.
2146	GetErrno extracts errno from error and returns it along with a boolean indicating success.
2147	Uname retrieves system information and returns a Utsname struct or an error.
2148	RegisterStmt adds a SQL statement to stmts and returns its code.
2149	PrepareStmts prepares SQL statements from a map and returns them indexed by their codes, handling errors appropriately.
2150	NewGateway creates a new Gateway instance with the provided database, certificate, and options, initializing it and returning any errors encountered.
2151	DialFunc returns a dialer function for establishing connections to a gateway, using either a memory or network dialer based on availability.
2152	Shutdown will stop the database gateway, close the server, and unset the memory dial if applicable, returning any errors encountered during the process.
2153	Sync will save the gateway's database to disk if the server is running.
2154	Reset will shutdown the gateway remove all global data reset the database transaction replace raft nodes update the certificate and initialize the gateway returning any errors encountered
2155	LeaderAddress returns the address of the current leader or an error if the cluster is unavailable or misconfigured.
2156	waitLeadership waits for leadership election or returns an error if not achieved within the timeout
2157	currentRaftNodes returns Raft nodes from gateway's raft instance or an error if not available.
2158	cachedRaftNodes retrieves cached Raft node addresses from the database or returns an error.
2159	dqliteMemoryDial returns a dial function to connect via unix socket using the given listener's address.
2160	DqliteLog formats a log message and logs it at the specified level using a logger.
2161	MetadataAsMap converts response metadata to a map and returns it along with any errors encountered during conversion
2162	MetadataAsOperation converts response metadata to operation struct and returns it or an error
2163	MetadataAsStringSlice converts response metadata to a string slice.
2164	MetadataAsStruct unmarshals JSON metadata into a target struct and returns an error if unsuccessful.
2165	Load will open a CSV file, read records, add them to the report, and log success or failure.
2166	Write CSVReport to file and log success or error
2167	AddRecord appends a record to CSVReport with current timestamp, elapsed time, label, and success status.
2168	LoadConfig reads a config file, decodes it, applies defaults, and updates remote settings.
2169	SaveConfig saves the configuration to a specified path after removing static remotes and marshaling it to YAML.
2170	ChrootLoader.Get will return a reader for a file at a given path within a restricted directory or an error if the path is invalid.
2171	ConfigPath will concatenate the config directory with additional paths and return the full path
2172	ServerCertPath returns the path to the server certificate file for a given remote server.
2173	NewConfig initializes a Config object with the given directory and optional default settings.
2174	checkForPreDumpSupport determines if pre-dump support exists and configures settings accordingly.
2175	preDumpLoop performs a pre-dump using CRIU, sends it via rsync, reads stats, calculates skipped pages, determines if final pre-dump, and sends a sync message.
2176	newRoot initializes a Cobra command for LXD code generation, sets its usage, description, and adds subcommands.
2177	APIExtensionsCount calculates total API extensions considering an optional artificial bump from an environment variable.
2178	SelectURIs executes SQL query, scans results, applies function to generate URIs, returns list and handles errors
2179	SelectStrings executes a SQL query to retrieve strings from the database and returns them along with any errors encountered during execution
2180	scanSingleColumn executes a SQL query on a transaction and scans each row using a provided scanning function, returning an error if any step fails.
2181	LazyHandler processes a handler to execute lazy functions and update context values, appending an error key if issues arise.
2182	Callers returns a trace of callers' program counters and converts them to call objects
2183	name will return the function name from a call pointer or "???" if not found
2184	TrimBelow will remove all calls below the specified call in the trace.
2185	TrimAbove removes calls above specified call from trace.
2186	TrimBelowName removes all traces below the specified name returning the modified trace
2187	TrimAboveName will remove trace entries above the specified name and return the modified trace
2188	TrimRuntime will remove runtime entries from the trace until it encounters a non-runtime entry.
2189	GetCaps retrieves the security capability xattr from a given path returns the byte array of the value or an error
2190	SetCaps converts path and caps to C strings applies capabilities to the path returns an error if it fails
2191	Read method tracks progress while reading from a reader
2192	Supported checks if quota is supported on a given path and returns a boolean result and an error if any.
2193	GetProject retrieves a project ID from a given path and returns it as a uint32 along with any errors encountered during the process.
2194	SetProject sets the project ID for a given path and returns an error if it fails.
2195	DeleteProject removes a project from a specified path and unset its quota returning an error if any operation fails
2196	GetProjectUsage retrieves disk usage for a given project ID and path, returning the usage in bytes or an error if the operation fails.
2197	SetProjectQuota sets the project quota for a given path and ID using CGo and returns an error if the operation fails.
2198	backupLoadByName loads a backup by name, retrieves its associated container, and returns a backup struct along with any errors encountered.
2199	backupCreate will create a backup in the database and storage, handling errors and removing the backup if creation fails
2200	Rename updates a backup's name, moves its directory, and adjusts the database record.
2201	delete backup returns error
2202	backupFixStoragePool updates backup.yaml files to fix storage pool references
2203	Count executes a SQL query to count rows in a specified table with optional WHERE clause and returns the count or an error.
2204	CountAll retrieves row counts for all tables in a SQLite database and returns them as a map.
2205	InitTLSConfig initializes a TLS configuration with specific cipher suites and settings.
2206	copyContainerThinpool creates a snapshot and assigns a new UUID to a container's thinpool, handling Btrfs unmounting if necessary.
2207	copyContainerLv checks if the target container exists, creates it if necessary, starts both containers, copies data using rsync, and optionally makes the target read-only.
2208	copyContainer will copy a container from source to target using thinpool or lv based on the storage pool configuration and apply template changes.
2209	copyVolume will create target mount point and copy volume from source to destination based on pool type and return error if any step fails
2210	GetPrivateImage will return an error indicating private images are unsupported by the protocol
2211	GetPrivateImageFile will return an error indicating private images are unsupported
2212	GetImageAliasNames fetches image aliases and returns their names along with any errors encountered.
2213	ProtoRecv reads a binary message from a WebSocket connection and unmarshals it into a protocol buffer message, returning any errors encountered.
2214	ProtoSend sends a protobuf message over a websocket connection and returns an error if it fails
2215	ProtoSendControl sends a control message over websocket indicating success or failure along with an error message if any.
2216	stdinMirror's Read method reads data from the input, checks for escape sequences, and handles console disconnection requests.
2217	doContainersGetFromNode connects to a node, retrieves containers, and handles timeouts
2218	Retry function attempts to execute a given function up to 5 times with a delay if it encounters a retriable error.
2219	IsRetriableError checks if an error is retriable based on its message or type.
2220	AppArmorProfile reads and returns the current profile from /proc/self/attr/current or an empty string on error.
2221	StoragePoolVolumeCreate creates a BTRFS storage volume and applies a quota if specified
2222	ContainerStorageReady checks if the Btrfs subvolume is ready for the given container.
2223	ContainerCreateFromImage creates a new BTRFS storage volume for a container using an image, handling mounting, snapshots, and template application.
2224	storageBtrfs.ContainerSnapshotRename renames a BTRFS snapshot and logs the operation
2225	ContainerSnapshotCreateEmpty creates an empty BTRFS snapshot volume and mounts it.
2226	btrfsSubVolumesDelete deletes subvolumes recursively and then the parent subvolume
2227	isBtrfsSubVolume checks if the given path is a Btrfs subvolume by verifying its inode number
2228	SelectConfig retrieves config values from a database table based on a query condition and returns them as a map.
2229	UpdateConfig updates config values in a transaction handling inserts and deletes.
2230	deleteConfig will execute a SQL DELETE statement on specified table and keys returning an error if any occurs
2231	FormatSection concatenates header and indented content with optional section separator
2232	GetProjects retrieves all projects from the LXD server returning them as a slice or an error if the "projects" API extension is missing.
2233	GetProject fetches a project by name and returns it along with its ETag and an error if the project does not exist or the "projects" API extension is missing.
2234	CreateProject sends a POST request to create a project and returns an error if the "projects" extension is missing or the request fails
2235	UpdateProject updates a project on the LXD server and returns an error if the operation fails
2236	RenameProject sends a POST request to rename a project and returns an Operation and error
2237	Reader's Read method retries on EAGAIN or EINTR errors.
2238	Writer's Write method retries on EAGAIN or EINTR errors
2239	NewCanceler initializes a new canceler with a request channel map and returns it.
2240	Cancelable checks if there are any items in the reqChCancel channel and returns true if there are.
2241	Cancel method cancels operations by closing channels and removing requests from map if cancelation is allowed.
2242	CancelableDownload sends a request and returns a response, cancellation channel, and error.
2243	clusterGet retrieves cluster info and config, returns API response with ETag.
2244	clusterGetMemberConfig retrieves member configuration keys from a cluster's storage pools and networks, excluding volatile properties, and returns them along with their descriptions.
2245	clusterPutDisable will disable clustering by closing the database, updating TLS config, resetting gateway, re-opening the database, stopping cluster tasks, and removing the cluster flag from the agent.
2246	tryClusterRebalance attempts to rebalance a cluster by connecting to the leader node and sending a request, returning an error if any step fails
2247	internalClusterPostRebalance redirects requests to the cluster leader or promotes a spare node based on rebalance criteria.
2248	internalClusterPostPromote processes a promotion request, validates it, updates the cluster state, and returns a response indicating success or failure.
2249	Filters extracts and sorts filters from package scope based on entity prefix.
2250	Parse will return a Mapping object and an error if the struct is not found or parsing fails
2251	findStruct will return a struct type from the given scope and name or nil if not found
2252	parseStruct will extract all fields from a struct including nested structs and return them along with any encountered errors
2253	GetProfileNames fetches profile names from LXD and returns them along with any errors encountered during the process.
2254	GetProfiles retrieves all profiles from the LXD server and returns them as an array of api.Profile objects along with any errors encountered during the process.
2255	GetProfile fetches a profile by name and returns its details along with ETag and any errors encountered
2256	CreateProfile sends a POST request to create a profile and returns an error if it fails
2257	UpdateProfile sends a PUT request to update a profile and returns an error if the request fails
2258	RenameProfile sends a POST request to rename a profile and returns an error if it fails
2259	Load populates a new Map with the given schema and values, returning any errors encountered during the update process.
2260	Dump method returns a map of non-default values from a Map instance, including hidden keys marked as true.
2261	GetRaw retrieves the raw value from a map using a name, returning the default value if the name does not exist.
2262	GetString retrieves a string value from a map using a specified key after asserting its type.
2263	GetBool retrieves a boolean value from a map using a given name, asserting the key type and checking its truthiness.
2264	GetInt64 retrieves an int64 value from the map using the specified name after asserting its type and converting it from a raw string.
2265	update will return a list of updated key names and an error if any updates fail
2266	set updates a map's value if it differs from the current one, triggering a setter if applicable and handling deletions.
2267	DoesSchemaTableExist checks if a schema table exists in a SQLite database using a transaction and returns a boolean indicating its existence along with any errors encountered during the process.
2268	selectSchemaVersions retrieves integer versions from the schema table ordered by version and returns them along with any errors encountered during execution
2269	selectTablesSQL retrieves table, index, view names from SQLite master excluding schema and sqlite_ prefixed entries.
2270	createSchemaTable creates a table named schema in the database with specified columns and constraints, returning an error if the operation fails.
2271	insertSchemaVersion inserts a new version into the schema table with the current timestamp and returns any errors encountered
2272	NewState initializes a new State instance with provided dependencies.
2273	containerLXCUnload will remove finalizers and release resources associated with a container
2274	containerLXCInstantiate creates a new containerLXC instance from given state and arguments
2275	initStorage initializes container storage or returns error if already initialized
2276	OnNetworkUp updates device's host_name and sets up host VETH device.
2277	setupHostVethDevice sets up a virtual Ethernet device for a container, populates it with the host's interface name, refreshes network limits, and configures static routes, returning an error if any step fails
2278	getLxcState returns the current state of an LXC container or an error if it cannot determine the state within 5 seconds
2279	StorageStartSensitive initializes storage for a container and starts a snapshot or mounts it based on whether the container is a snapshot, returning whether the operation is ours and any errors encountered.
2280	deviceExistsInDevicesFolder checks if a device exists in the devices folder by constructing a device name from prefix and path and then checking its existence at the specified path.
2281	createDiskDevice will return a disk device path and an error if the device cannot be created due to invalid input or other issues
2282	setNetworkRoutes updates network routes for a container based on device settings, handling both IPv4 and IPv6 routes.
2283	Path method returns the container's path based on its name and project prefix, including snapshot status.
2284	maasInterfaces extracts network interfaces from container devices returning a list of MAAS interface objects or an error
2285	getSystemHandler returns a log handler based on syslog and debug mode
2286	findNvidiaMinor reads file to extract NVIDIA GPU device minor or uses old method.
2287	GetLogger configures and returns a logger with specified handlers and formats based on input parameters.
2288	SetLogger sets a new logger and returns a function to restore the original logger.
2289	WaitRecord waits on a log record or times out after a specified duration.
2290	AddContext will add logging context to a logger and return it or log an error if conversion fails
2291	NewDottedVersion parses a version string and returns a DottedVersion struct or an error if the format is incorrect.
2292	Parse will return a DottedVersion object from a version string or an error if parsing fails
2293	String method for DottedVersion returns a formatted version string
2294	Compare will return an integer representing the comparison result between two version numbers
2295	projectCreateDefaultProfile creates a default profile for a project and adds it to the database
2296	projectChange updates project settings and validates configurations.
2297	projectIsEmpty checks if a project has no users or only the default profile user.
2298	GetCertificateFingerprints fetches and parses certificate fingerprints from a ProtocolLXD instance.
2299	GetCertificates retrieves all certificates from the server and returns them along with any errors encountered during the process.
2300	GetCertificate retrieves a certificate by its fingerprint and returns the certificate object, ETag, and any errors encountered during the process.
2301	CreateCertificate sends a POST request to create a certificate and returns an error if it fails
2302	UpdateCertificate updates a certificate on the server returns an error if the "certificate_update" extension is missing or the request fails
2303	DeleteCertificate sends a DELETE request to remove a certificate by fingerprint and returns an error if unsuccessful
2304	containerMetadataTemplatesGet handles container metadata template requests, returning either a list of templates or a specific template file.
2305	containerMetadataTemplatesPostPut handles POST/PUT requests for container metadata templates, checks existence, and writes new templates.
2306	containerMetadataTemplatesDelete deletes a container template and returns a response or error
2307	getContainerTemplatePath constructs a template path from a container and filename ensuring no slashes are present in the filename.
2308	Error method returns formatted error message including name, value, and reason
2309	ErrorList's Error method returns a formatted error message based on the number of errors.
2310	add method to ErrorList appends new Error with name, value, and reason
2311	UpdateSchema updates cluster and node database schemas returning an error if any update fails
2312	doProfileUpdateCluster updates cluster profile for containers handling failures gracefully
2313	doProfileUpdateContainer updates a container's configuration based on profiles and arguments.
2314	getProfileContainersInfo retrieves container info from the database for a given project and profile, returning a list of ContainerArgs or an error.
2315	GetNetworkNames retrieves network names from the LXD protocol, returning them as a list or an error if the "network" API extension is missing or there's a parsing issue.
2316	GetNetworks retrieves network details from the LXD server and returns them along with any errors encountered.
2317	GetNetwork retrieves network details by name, returns the network object, ETag, and an error if the "network" API extension is missing or fetching fails
2318	GetNetworkLeases fetches network leases for a given name and returns them along with any errors encountered.
2319	GetNetworkState retrieves network state by name and returns it or an error if the "network_state" extension is missing or fetch fails
2320	CreateNetwork checks for "network" API extension and sends a POST request to create a network returns an error if unsuccessful
2321	UpdateNetwork sends a PUT request to update a network's configuration and returns an error if the server lacks the "network" API extension or if the request fails.
2322	RenameNetwork will rename a network and return an error if the "network" API extension is missing or the request fails
2323	Open will initialize a new SQL database using the dqlite driver and return it along with an error if initialization fails
2324	URLEncode will return a URL-encoded path and query parameters as a string, or an error if parsing fails.
2325	IsUnixSocket checks if the given path is a Unix socket and returns true if it is.
2326	HostPath adjusts file paths for use within Snap packages.
2327	FileMove will rename a file or copy it if renaming fails then remove the old file
2328	DirCopy will recursively copy a directory from source to dest and handle errors during copying process
2329	StringMapHasStringKey checks if a map contains any of the given string keys and returns true if it does.
2330	TextEditor opens a temporary file or specified file with a user's preferred text editor, reads edited content, and returns it.
2331	WriteTempFile creates a temporary file in the specified directory with the given prefix and writes content to it, returning the file name and any errors encountered.
2332	RenderTemplate will render a template string with context and return the result or an error if the template is invalid or contains nested templates.
2333	Every will create a schedule that returns a fixed interval after applying given options, skipping the first run if specified.
2334	StoragePoolMount checks if the storage pool source is absolute and mounts it if necessary, returning success or an error.
2335	Dump will generate SQL dump of a database schema or data based on the schemaOnly flag
2336	dumpTable generates SQL INSERT statements from a database table and returns them as a string.
2337	ProjectHasProfiles checks if a cluster transaction has profiles and returns a boolean and an error.
2338	ProjectNames will fetch project names from the database and return them along with any errors encountered
2339	ProjectMap will return a map of project IDs to names and an error if the query fails
2340	ProjectHasImages checks if a project has images enabled returns a bool and an error
2341	ProjectUpdate updates a project's description, checks affected rows, clears old config, and inserts new config.
2342	GetCluster retrieves cluster info from LXD server returns cluster object ETag and error
2343	UpdateCluster will execute a PUT request to update cluster settings and return an operation or an error if clustering extensions are missing
2344	GetClusterMemberNames fetches cluster member names from the LXD server and returns them or an error if clustering is not supported.
2345	GetClusterMembers retrieves cluster members from the server if the clustering extension is enabled.
2346	GetClusterMember retrieves a cluster member's details and ETag, returning an error if clustering is unsupported.
2347	RenameClusterMember will rename a cluster member and return an error if the operation fails
2348	Disconnect method stops event handling by removing the listener and closing channels.
2349	CompareVersions compares two version tuples and returns an integer indicating their relationship or an error if they are inconsistent.
2350	HasClientCertificate checks if client certificate and key files exist returns true if both exist
2351	GenerateClientCertificate will generate or find client certificate and key files returning an error if it fails
2352	LoadModule will load a kernel module and return an error if it fails
2353	Parse will return a parsed Go package and an error if parsing fails
2354	Endpoints.PprofAddress returns the address of the pprof listener or an empty string if it's not set
2355	PprofUpdateAddress updates the pprof address and handles errors during the process.
2356	NewMethod creates a new Method instance with provided parameters and returns it along with any errors encountered.
2357	Generate will process different types of method kinds and write to buffer or return error
2358	fillSliceReferenceField populates a slice reference field using a buffer and filter method, handling nested structures and default values.
2359	StoragePoolID retrieves the ID of a storage pool by name from the database, returning an error if no or multiple pools match.
2360	StoragePoolIDsNotPending fetches non-pending storage pool IDs and names from the database and returns them as a map.
2361	StoragePoolNodeJoin inserts a new entry into the storage_pools_nodes table and returns an error if it fails.
2362	StoragePoolNodeJoinCeph will add a new node to a Ceph pool and copy its volumes and configurations to the new node.
2363	StoragePoolConfigAdd adds a configuration to a cluster transaction's storage pool and returns an error if it fails.
2364	StoragePoolCreatePending checks if a storage pool exists, creates it if not, and adds node-specific config.
2365	StoragePoolCreated updates the state of a named storage pool to created.
2366	StoragePoolErrored will update the state of a storage pool to errored and return any errors encountered.
2367	StoragePoolNodeConfigs retrieves storage pool configurations for specified nodes.
2368	StoragePoolsGetDrivers retrieves distinct storage pool drivers from the database, returning them as a slice or an error if none found.
2369	StoragePoolGetID fetches the ID of a storage pool by name and returns it along with an error if not found
2370	StoragePoolGet retrieves a storage pool's details from the database and returns its ID, configuration, and status.
2371	storagePoolNodes retrieves node names associated with a given storage pool ID within a transaction, returning an error if the operation fails.
2372	StoragePoolConfigGet retrieves configuration settings for a storage pool as a map from the database.
2373	StoragePoolCreate inserts a new storage pool with configuration and returns its ID or an error
2374	storagePoolConfigAdd inserts config values into storage pools using a transaction.
2375	StoragePoolUpdate updates a cluster's storage pool with new details and configuration within a transaction.
2376	StoragePoolConfigClear will delete rows from storage_pools_config where storage_pool_id matches poolID and node_id matches nodeID or is null, returning an error if the operation fails
2377	StoragePoolDelete removes a storage pool by name and returns the deleted pool or an error
2378	StoragePoolVolumesGetNames retrieves volume names from the database for a given pool ID and node ID.
2379	StoragePoolVolumesGet retrieves storage volumes based on project, pool ID, and types, returning a list of volumes or an error.
2380	StoragePoolNodeVolumesGet fetches storage volumes based on pool ID and types.
2381	storagePoolVolumesGet retrieves storage volumes based on project, poolID, nodeID, and volumeTypes returns a list of volumes or an error
2382	StoragePoolVolumesGetType fetches volume names based on project, type, pool ID, and node ID from the database and returns them as a slice of strings.
2383	StoragePoolVolumeSnapshotsGetType retrieves snapshot names based on volume details from the database.
2384	StoragePoolNodeVolumesGetType retrieves volumes of a specific type from a storage pool node.
2385	StoragePoolVolumeGetType retrieves storage volume details based on project, name, type, pool ID, and node ID, returning volume ID, details, and error.
2386	StoragePoolNodeVolumeGetType calls StoragePoolNodeVolumeGetTypeByProject with "default" as the project name.
2387	StoragePoolNodeVolumeGetTypeByProject retrieves storage volume type by project, volume name, volume type, and pool ID, returning the volume ID, volume details, and an error.
2388	StoragePoolVolumeUpdate updates a volume's configuration and description within a cluster transaction.
2389	StoragePoolVolumeDelete deletes a volume from a storage pool and returns an error if it fails
2390	StoragePoolVolumeRename renames a volume in a cluster transactionally and returns an error if the operation fails.
2391	storagePoolVolumeReplicateIfCeph will replicate volume changes on Ceph pools by executing a function on each volume ID.
2392	StoragePoolVolumeCreate will return the volume ID and an error after creating a new storage volume across nodes or returning -1 on failure.
2393	StoragePoolVolumeGetTypeID retrieves the type ID of a storage volume based on project, name, type, pool ID, and node ID, returning an error if not found or other issues occur.
2394	StoragePoolNodeVolumeGetTypeID calls another method with default values and returns the result along with any error.
2395	StoragePoolVolumeTypeToName converts volume type to name or returns error
2396	DevicesAdd inserts multiple devices and their configurations into a database transactionally.
2397	Devices will return device details based on project and query name, handling both profile and container cases with errors if data is invalid.
2398	Patches will return a list of patch names and an error if the database query fails
2399	PatchesMarkApplied inserts a patch record into the database and returns an error if unsuccessful.
2400	entityType returns the capitalized entity name prefixed with the package name if it's not "db"
2401	entityPost returns a capitalized plural version of the input string followed by "Post"
2402	stmtCodeVar constructs a variable name based on entity, kind, and optional filters
2403	destFunc generates a function string appending specified fields to a slice.
2404	CompareConfigs will compare two configurations and return an error if there are differences for any non-excluded keys.
2405	CopyConfig creates a deep copy of a configuration map.
2406	NewNotifier creates a notifier that sends state changes to online cluster peers based on the given policy.
2407	Events initializes event listeners and returns a function to update them and a schedule.
2408	eventsConnect establishes a connection to LXD using the specified address and certificate, sets the project to listen for all events, and returns an event listener or an error
2409	StoragePoolInit initializes storage pool after core initialization.
2410	getAAProfileContent constructs an AppArmor profile based on container configuration and system state.
2411	AALoadProfile checks AppArmor permissions and updates profiles if necessary before loading them.
2412	AADestroy will unload AppArmor policy if conditions are met and return an error if removal fails
2413	AAParseProfile checks AppArmor availability and runs parse command if available
2414	getSystemHandler returns a log handler based on syslog, debug mode, and log format
2415	NotifyUpgradeCompleted sends a notification to clients about an upgrade completion using a notifier function.
2416	KeepUpdated will return a function to update state and a schedule to run every 5 minutes.
2417	maybeUpdate checks if the cluster node needs an update and triggers it if necessary
2418	NewServer initializes a server with API details and authentication, returning it or an error.
2419	StartStatusCheck initializes status check runs periodically flushing cache on change.
2420	SyncProjects will update RBAC resources based on ProjectsFunc output and lock resource map during update.
2421	AddProject adds a new project to the server's resources with its ID and name, updating both RBAC and the project map.
2422	DeleteProject updates RBAC and removes project from map by ID.
2423	RenameProject calls AddProject to add a project with a new name.
2424	IsAdmin checks if a user has admin privileges by locking access to permissions, checking cache, syncing if necessary, and verifying membership in the "admin" group.
2425	HasPermission checks if a user has a specific permission on a project returns a boolean
2426	rsyncSend sends a file over a WebSocket connection and returns any errors encountered during the process
2427	rsyncSendSetup initializes a Unix listener, constructs an rsync command, starts it, and accepts a connection.
2428	tlsClientConfig creates a TLS configuration using the provided certificate information and returns it along with any errors encountered.
2429	tlsCheckCert checks if TLS cert is valid and trusted
2430	internalClusterContainerMovedPost handles post creation of a container mount point and returns an empty response or an error
2431	containerPostCreateContainerMountPoint ensures proper setup of container and its snapshots on a target node.
2432	Contains checks if a device exists in the list under a given key and returns true if they match.
2433	Update will compare two lists of devices and return maps of removed, added, updated devices, and a list of keys with differences.
2434	DeviceNames returns sorted device names from a list of devices.
2435	Infof logs a formatted message using the Log variable if it's not nil
2436	Debugf logs debug messages using the Log variable if it's not nil.
2437	Warnf logs a warning message using the provided format and arguments if a logger is available
2438	Errorf logs an error message using the provided format and arguments if a logger is available.
2439	Critf logs critical messages using a specified format and arguments if a logger is available.
2440	eventForward processes events based on type and metadata, then broadcasts them or logs errors
2441	StorageProgressReader wraps a reader to track progress using an operation object and returns a new reader that updates progress.
2442	StorageProgressWriter returns a WriteCloser that tracks progress using a progress wrapper render function.
2443	GetLSBRelease will return a map of OS release information and an error if the file does not exist
2444	Reset will generate package code with specified imports and write it to a file or standard output, returning an error if unsuccessful.
2445	Append will write a code snippet to a file or stdout, handling errors during generation and file operations.
2446	ContainerToArgs converts a Container to a ContainerArgs object.
2447	ContainerNames retrieves container names for a given project from the database.
2448	ContainerNodeAddress fetches a node's address based on project and container name, returning an error if not found or if multiple nodes are associated.
2449	ContainersListByNodeAddress returns a map of container names by node address and an error if the query fails
2450	ContainerListExpanded retrieves expanded container details with associated profiles.
2451	ContainersByNodeName retrieves container names and their corresponding node names for a given project from the database.
2452	SnapshotIDsAndNames retrieves a map of container IDs to their names from the database based on a given name prefix.
2453	ContainerNodeList fetches container list for the local node with regular type filtering.
2454	ContainerNodeProjectList retrieves containers based on project, node, and type filters.
2455	ContainerRemove will delete a container within a project and return an error if the operation fails
2456	ContainerProjectAndName retrieves container's project and name from database based on ID.
2457	ContainerConfigClear deletes records from multiple tables based on container ID and returns an error if any delete operation fails.
2458	ContainerConfigGet retrieves a config value by ID and key from the database, returning an error if the object does not exist.
2459	ContainerConfigRemove deletes a config entry from the database based on the given ID and key, returning any errors encountered during the operation.
2460	ContainerSetStateful updates the statefulness of a container by its ID and returns an error.
2461	ContainerProfilesInsert inserts profiles into containers_profiles table, applying order sequentially, handling default project if necessary.
2462	ContainerProfiles retrieves container profiles by ID and returns them as a list of strings along with any errors encountered during the process.
2463	ContainerConfig retrieves a container's configuration from the database as a map.
2464	ContainerSetState updates the container's volatile last power state in the database.
2465	ContainerUpdate updates container details in database returns error on failure
2466	ContainerLastUsedUpdate updates the last use date of a container by ID in the database and returns an error if the operation fails.
2467	ContainerGetSnapshots retrieves snapshots for a container by project and name returns list of snapshot names or error
2468	ContainerGetSnapshotsFull retrieves snapshots for a container and returns them along with any errors encountered.
2469	ContainerNextSnapshot finds next snapshot number based on project and container name
2470	ContainerPool retrieves the storage pool name for a given project and container, returning an error if not found.
2471	ContainerGetBackup retrieves backup details for a specified project and container name, returning the backup arguments and any errors encountered.
2472	ContainerGetBackups retrieves backup names for a specific container in a project from the database.
2473	ContainerBackupCreate inserts a new backup record or returns an error if it already exists
2474	ContainerBackupRemove will delete a container backup by name and return an error if it fails
2475	ContainerBackupRename updates container backup names within a transaction, logging the query details and handling errors.
2476	ContainerBackupsGetExpired returns expired container backups and an error if any.
2477	DefaultOS initializes and returns a new OS instance with default directory paths and inotify watch settings.
2478	Init initializes OS with directories, architectures, LXC path, backing FS, ID map set, exec path, user NS status, app armor, and CG settings returning an error if any step fails
2479	GetWebsocket fetches a WebSocket connection using the operation's ID and secret, returning the connection or an error.
2480	Refresh updates the operation with its latest version from the repository and returns an error if the fetch fails.
2481	CancelTarget cancels the associated target operation and returns an error if it doesn't exist
2482	GetTarget retrieves the target operation from remoteOperation or returns an error if none is associated.
2483	up method initializes endpoints with configuration, sets listeners, and starts serving HTTP handlers.
2484	Down method stops all listeners and tomb process for Endpoints.
2485	serveHTTP binds a server to a listener and starts serving requests
2486	closeListener will remove and close a specified listener returning an error if the listener does not exist
2487	activatedListeners will return a map of listener kinds to net.Listeners after processing systemdListeners with TLS if necessary.
2488	CandidServer returns configuration values for server URL, API key, expiry time, and domains as strings and an integer.
2489	RBACServer retrieves configuration values for API URL, key, expiry, agent URL, username, private key, and public key from Config.
2490	AutoUpdateInterval returns the auto-update interval duration from configuration
2491	MAASController extracts API URL and key from Config and returns them
2492	OfflineThreshold returns the cluster's offline threshold duration in seconds
2493	ConfigGetString retrieves a string value from a configuration using a cluster and key, returning the value and any errors encountered.
2494	ConfigGetBool retrieves a boolean value from a configuration using a cluster and key, returning the value and any errors encountered.
2495	ConfigGetInt64 fetches an integer from cluster configuration and returns it along with any errors encountered during retrieval.
2496	ClusterAddress returns the cluster address from Endpoints.
2497	Debug logs a message with file, line, function name, and context using the global Log variable if it's not nil
2498	RestServer sets up and returns an HTTP server with routes and handlers for a daemon.
2499	projectParam extracts project param from request or returns default
2500	queryParam extracts a query parameter value from an HTTP request
2501	newDb creates a Cobra command for database operations, adding sub-commands for schema and mapper generation.
2502	Description returns human-readable text for each operation type
2503	Permission will return a string representing the required permission based on the operation type
2504	OperationsUUIDs will return UUIDs from the operations table for a given node ID or an error if the query fails.
2505	OperationNodes will return distinct node addresses for a given project or all projects an error will be returned if the query fails
2506	OperationByUUID fetches operation by UUID and returns it or an error if not found or ambiguous.
2507	OperationAdd inserts or updates an operation record and returns affected rows or an error
2508	OperationRemove will execute a delete operation on the operations table based on the given UUID and return an error if it deletes more or fewer than one row.
2509	operations retrieves data from the database based on the given where clause and returns a list of Operations along with any errors encountered
2510	expireLogsTask will return a task function and schedule to run daily, which expires log files and handles errors
2511	absPath calculates the absolute path by appending a given path to the root directory of the LXD source tree.
2512	Keys will return a sorted list of schema keys
2513	Schema.Defaults returns a map of default values for each field.
2514	mustGetKey retrieves a key from the schema or panics if it doesn't exist
2515	assertKeyType checks if the specified key's type matches the given code, panicking otherwise
2516	validate checks a key's value against its type, default, deprecated status, and custom validator, returning an error if any checks fail
2517	GetStoragePoolVolumes fetches storage pool volumes and returns them or an error if the "storage" API extension is missing or there's an issue fetching the data.
2518	GetStoragePoolVolume fetches storage volume details and returns them along with ETag or an error
2519	CreateStoragePoolVolume sends a POST request to create a storage pool volume and returns an error if the "storage" API extension is missing or the request fails
2520	CreateStoragePoolVolumeSnapshot sends a POST request to create a storage pool volume snapshot and returns the operation and any errors.
2521	GetStoragePoolVolumeSnapshots fetches storage pool volume snapshots and returns them or an error if the extension is missing or query fails.
2522	GetStoragePoolVolumeSnapshot fetches a storage pool volume snapshot returns the snapshot and its ETag or an error if the server lacks the necessary extension
2523	UpdateStoragePoolVolumeSnapshot updates a storage pool volume snapshot and returns an error if the operation fails
2524	MigrateStoragePoolVolume sends a POST request to migrate a storage pool volume and returns an operation or an error
2525	MoveStoragePoolVolume transfers a storage volume between pools on the same server.
2526	UpdateStoragePoolVolume updates a storage pool volume and returns an error if the operation fails due to missing extensions or other issues
2527	DeleteStoragePoolVolume deletes a storage pool volume and returns an error if the operation fails
2528	RenameStoragePoolVolume checks if the server supports renaming volumes and sends a POST request to rename a storage pool volume.
2529	doStoragePoolCreateInternal creates a storage pool and updates its configuration in the database
2530	containerGetParentAndSnapshotName splits a container name into parent and snapshot names returning them along with a flag indicating if a snapshot was present
2531	containerLoadFromAllProjects retrieves all containers from multiple projects in a transaction, concatenating results and handling errors.
2532	containerLoadNodeAll retrieves all containers from the cluster and loads them internally.
2533	containerLoadNodeProjectAll fetches containers for a project and loads them internally.
2534	heartbeatNode sends a heartbeat request to a specified address using TLS and waits for a response or cancellation.
2535	dotPrefixMatch checks if the short command list matches the prefix of the full command list
2536	ContainerMount checks if a container can be mounted and returns a bool and error.
2537	ContainerStorageReady checks if a ZFS filesystem exists for a given container's storage volume.
2538	AskChoice prompts user for choice until valid input is received
2539	AskInt asks for integer input within specified bounds and returns it after validation.
2540	AskString will prompt user for a string, validate it using provided function, and return valid or default answer.
2541	AskPassword will prompt user to enter password twice and return it if both match, otherwise ask again.
2542	AskPasswordOnce prompts user for password and returns it as string
2543	askQuestion prints a question and returns an answer using a default if none provided
2544	readAnswer reads user input or returns a default value if empty
2545	profilePost updates a profile's name and returns a response or error
2546	profileDelete deletes a specified profile from the cluster if it's not in use and returns an error if the operation fails or if the default profile is attempted to be deleted
2547	IsRootDiskDevice checks if a device is a root disk by verifying its type, path, and source.
2548	GetRootDiskDevice will return the name and details of the root disk device from a map of devices, or an error if none is found or multiple are present.
2549	ForwardedResponse creates a new forwardedResponse object encapsulating the client and request.
2550	ForwardedResponseIfTargetIsRemote forwards response to remote target if specified in request.
2551	ForwardedResponseIfContainerIsRemote checks if container is remote, connects if necessary, and returns forwarded response or error.
2552	ForwardedOperationResponse creates a new forwardedOperationResponse object encapsulating the operation and project details.
2553	Done marks progress renderer as complete and prints message if not in quiet mode
2554	Update progress status, handling locks and terminal conditions.
2555	Warn updates progress renderer with a warning message and timeout duration, ensuring it's displayed correctly within the terminal.
2556	UpdateProgress updates progress text based on ProgressData
2557	UpdateOp updates progress renderer with operation metadata if it contains a progress key.
2558	updateFromV6 updates zfs.pool_name config for all nodes associated with each zfs pool
2559	localCreateListener will create a Unix socket listener on the specified path and set access permissions for the given group, returning the listener or an error if any step fails
2560	NewStmt creates a new statement with the given parameters and returns it along with any errors encountered.
2561	Generate will process different types of statements and write to buffer or return error based on statement type
2562	register will write a SQL statement to a buffer with a specific entity and kind
2563	httpsLXD establishes a secure LXD connection using TLS and authenticates based on provided arguments, returning a ContainerServer instance or an error.
2564	IsActive checks if the container status is active
2565	RaftNodeAddress retrieves a node's address from the database by ID, returning an error if not found or more than one match occurs.
2566	RaftNodeFirst inserts a new raft node with given address and ensures its ID is 1
2567	RaftNodeAdd inserts a new address into the raft_nodes table and returns the row count and an error
2568	RaftNodeDelete deletes a node from the raft_nodes table and returns an error if the node does not exist
2569	RaftNodesReplace will delete existing raft nodes and insert new ones from the given list returning an error if any operation fails
2570	initCGroup sets up control group flags based on their existence and logs warnings if they don't exist
2571	sqliteDirectAccess sets WAL mode and disables truncation/checkpointing for database replication.
2572	ContainerGet retrieves a container by project and name, returning it or an error if not unique.
2573	ContainerID retrieves a container's ID from the database based on project and name, returning an error if the result is invalid or not unique.
2574	ContainerExists checks if a container exists by project and name returning a bool and error if not found
2575	ContainsFields checks if all specified fields exist in the mapping with matching names and types.
2576	FieldByName returns a field from the mapping by its name or nil if not found.
2577	FieldColumnName returns the column name for a given field name in a mapping.
2578	FilterFieldByName retrieves a field from a mapping by name, returning an error if the field does not exist or is not a column.
2579	ColumnFields filters out excluded fields and returns only those with column type.
2580	ScalarFields returns selected fields from Mapping based on join configuration.
2581	RefFields returns slice of fields with type slice or map
2582	Column returns the snake-cased column name or joins it with an alias if specified.
2583	ZeroValue returns the zero value for a given field type, panicking if the field is not a column or the type is unsupported.
2584	FieldColumns will return a string of column names from a list of fields separated by commas.
2585	FieldArgs will return a string of field arguments in the format "name type" separated by commas
2586	FieldParams will concatenate field names to a comma-separated string
2587	FieldCriteria constructs a SQL WHERE clause from a list of fields.
2588	initDataClusterApply updates cluster config if enabled and returns error if failed
2589	JsonFormatEx returns a JSON formatter based on pretty-printing and line separation options.
2590	formatLogfmtValue formats log values to strings handling different types including escaping.
2591	ResolveTarget fetches the address of a specified cluster node or returns an error if the node does not exist.
2592	Write method for ProgressWriter tracks progress while writing bytes.
2593	updateNodeVersion updates node version in database and returns error if update fails or affects incorrect number of rows
2594	selectNodesVersions will execute a SQL query to retrieve node versions and return them as a slice of integer pairs, or an error if the execution fails.
2595	GetArchitectures returns a list of supported architectures and their personalities or an error
2596	RuntimeLiblxcVersionAtLeast checks if lxc version is at least the specified major, minor, and micro versions returns true if it is otherwise false
2597	GetExecPath retrieves the executable path from LXD_EXEC_PATH or falls back to /proc/self/exe handling errors gracefully.
2598	Connect establishes a connection to an LXD server using TLS certificates and returns the container server instance along with any errors encountered.
2599	ConnectIfContainerIsRemote connects to a remote container server if it's not running locally
2600	ConnectIfVolumeIsRemote connects to a remote volume server if necessary
2601	SetupTrust connects to a target LXD node, decodes a certificate, calculates its fingerprint, and adds it to the cluster's trust store with a specific name and type. An error is returned if the connection or certificate operations fail.
2602	GetStoragePools retrieves storage pools from the LXD server and returns them along with any errors encountered.
2603	GetStoragePool fetches storage pool details and returns them along with ETag and error
2604	CreateStoragePool checks for necessary extensions before sending a POST request to create a storage pool and returns an error if any required extension is missing
2605	UpdateStoragePool updates storage pool details and returns error if API extension is missing or update fails
2606	DeleteStoragePool deletes a storage pool and returns an error if the "storage" extension is missing or the request fails
2607	GetStoragePoolResources fetches storage pool resources by name and returns them or an error if the "resources" extension is missing or the request fails.
2608	initDirs initializes directories with specified paths and modes, returning an error if any directory creation fails.
2609	Config method returns a map of configuration strings and an error for a NodeTx object
2610	UpdateConfig updates the configuration for a node transaction with given key-value pairs and returns an error if any issue occurs.
2611	Config method returns cluster configuration map and error if query fails
2612	UpdateConfig updates the cluster's configuration using a transaction and returns an error if it fails
2613	storagePoolClusterConfigForEtag removes specific keys from a configuration map and returns the updated map
2614	GetEvents sets up a new event listener, manages connections, and handles events.
2615	LogfmtFormat returns a log format function that formats a record's key-value pairs in logfmt.
2616	StorageVolumeNodeAddresses retrieves addresses of storage volume nodes based on given parameters and filters out the current node's address.
2617	StorageVolumeNodeGet retrieves node name for given volume ID from database returns error if no such object exists
2618	StorageVolumeConfigGet retrieves configuration for a volume using its ID and returns it as a map with key-value pairs, or an error if the retrieval fails.
2619	StorageVolumeDescriptionGet retrieves a volume's description from the database and returns it or an error if the volume does not exist.
2620	StorageVolumeIsAvailable checks if a storage volume is available in a cluster using a transaction.
2621	StorageVolumeDescriptionUpdate updates the description of a storage volume and returns an error if the update fails
2622	StorageVolumeConfigAdd inserts volume configurations into the database for a given volume ID.
2623	StorageVolumeConfigClear deletes a storage volume configuration from the database and returns an error if failed
2624	storageVolumeIDsGet retrieves volume IDs based on project, name, type, and pool ID, returning them as int64 slices with potential errors.
2625	StorageVolumeCleanupImages will delete images from storage volumes based on fingerprints and return an error if execution fails
2626	StorageVolumeMoveToLVMThinPoolNameKey updates the storage pools config to use LVM thin pool name and deletes the old key, returning an error if any step fails.
2627	L formats and appends to buffer then calls N method
2628	code will return formatted byte slice of buffer's content or an error
2629	Pretty will return a human-readable JSON string or the original input if marshaling fails
2630	NetworkPublicKey returns the public key from the certificate with synchronization.
2631	NetworkPrivateKey returns the private key from the certificate held by Endpoints.
2632	NetworkCert returns the network certificate information while holding the read lock on Endpoints.
2633	NetworkAddress returns the network address of the listener or an empty string if not available.
2634	NetworkUpdateAddress updates the network address with retries and handles listeners.
2635	NetworkUpdateCert updates the certificate for network and cluster listeners if they exist.
2636	networkCreateListener creates a TCP listener with TLS encryption using the given address and certificate, returning it or nil on error
2637	Accept will return a TLS server connection or an error if the listener fails to accept a connection
2638	networkListener's Config method updates its TLS configuration using a shared certificate info.
2639	IsOffline checks if a node is offline based on its heartbeat and a given threshold.
2640	NodeByAddress returns a node info or an error based on the given address.
2641	NodePendingByAddress returns a node's info based on its address, or an error if no or multiple matching nodes are found.
2642	NodeByName fetches a node by name and returns its info or an error if none or multiple match.
2643	NodeName retrieves the unique name of a node from the database or returns an error if the ID is inconsistent.
2644	NodeAddress retrieves a unique node address from the database or returns an error if the ID is inconsistent.
2645	NodeIsOutdated checks if any node has a newer version than the current node.
2646	NodesCount will return the count of nodes and an error if counting fails
2647	NodeRename updates a node's name in the database and checks if it was successfully updated.
2648	nodes will return a list of NodeInfo objects based on the SQL query parameters and conditions provided
2649	NodeAdd inserts a new node with name and address into the nodes table and returns the number of affected rows and an error if any.
2650	NodePending updates a node's pending status and returns an error if unsuccessful or if it affects more than one row.
2651	NodeUpdate updates a node's details and returns an error if the update fails or affects the wrong number of rows.
2652	NodeRemove deletes a node from the database and returns an error if it fails or deletes the wrong number of rows.
2653	NodeHeartbeat updates node's heartbeat and checks if exactly one row was affected.
2654	NodeIsEmpty checks if a cluster node has any containers, images, or custom volumes and returns an error if it does.
2655	NodeClear will delete a node and its associated images if they are no longer used elsewhere.
2656	NodeOfflineThreshold returns cluster offline threshold duration from config or default value
2657	NodeUpdateVersion updates node version and returns error if update fails
2658	Transaction starts a database transaction executes a function rolls back or commits based on error returns final error
2659	rollback will attempt to rollback a transaction and log any errors before returning the original reason for the rollback
2660	ProfileURIs filters profiles by project and name returns matching URIs and an error
2661	ProfileGet retrieves a single profile based on project and name, returning an error if none or multiple profiles match.
2662	ProfileExists checks if a profile exists by ID and returns a boolean indicating its existence and any potential errors.
2663	ProfileConfigRef filters cluster transactions by project and/or name returning a nested map of configuration values with errors.
2664	ProfileUsedByRef filters cluster transactions and returns indexed results based on project and name criteria.
2665	ProfileCreate inserts a new profile with its configuration and devices returning the profile ID or an error.
2666	ProfileRename updates a cluster transaction's profile name and returns an error if unsuccessful or affected rows are not exactly one.
2667	ProfileDelete executes a delete statement and checks if exactly one row was affected, returning an error if not.
2668	ServerTLSConfig initializes TLS configuration with client certificate request, specific protocol, and optionally CA certificates.
2669	NetworkInterfaceAddress returns the first non-loopback IP address found or an empty string if none is available.
2670	IsAddressCovered checks if one IP address covers another based on host and port
2671	SelectObjects will execute a SQL query and scan results into destination objects, returning an error if any step fails
2672	DeleteObject deletes a record from a specified table based on ID and returns success status and error if any
2673	loop will execute the task function based on the schedule and handle errors and context cancellation
2674	IsTerminal checks if a file descriptor corresponds to a terminal.
2675	socketUnixListen will create a Unix socket listener on the specified path and return it along with any errors encountered during resolution or binding.
2676	socketUnixRemoveStale deletes stale Unix socket file if it exists
2677	socketUnixSetPermissions changes file permissions for a Unix socket and returns an error if it fails
2678	socketUnixSetOwnership changes the ownership of a Unix socket based on the provided group or current group.
2679	cephOSDPoolExists checks if a Ceph OSD pool exists and returns true if it does.
2680	cephOSDPoolDestroy will delete an OSD pool and return an error if it fails
2681	cephRBDVolumeExists checks if a Ceph RBD volume exists and returns a boolean result
2682	cephRBDSnapshotProtect will protect a RBD snapshot and return an error if it fails or if the snapshot is already protected
2683	cephRBDCloneCreate clones a volume from a source cluster to a target cluster and returns an error if the operation fails
2684	cephRBDSnapshotListClones will return a list of clones and an error if any issues occur during the process
2685	cephRBDVolumeMarkDeleted renames a RBD volume to indicate deletion returns an error if the operation fails
2686	cephRBDVolumeUnmarkDeleted will rename a deleted RBD volume from old to new name based on user credentials and suffixes, returning an error if the command fails.
2687	cephRBDVolumeRename will rename a Ceph RBD volume and return an error if it fails
2688	cephRBDVolumeSnapshotRename will rename a Ceph RBD snapshot and return an error if the operation fails
2689	cephRBDSnapshotDelete will delete a RBD snapshot and return an error if the operation fails
2690	cephRBDVolumeCopy copies a volume from an old name to a new name in a specified cluster and user context, returning any errors encountered during the operation.
2691	cephRBDVolumeListSnapshots retrieves snapshots for a given RBD volume and returns their names along with any errors encountered during the process.
2692	getRBDSize retrieves the RBD volume size in bytes or defaults to "10GB" if invalid.
2693	getRBDFilesystem retrieves the filesystem type from volume or pool config, defaulting to ext4
2694	copyWithoutSnapshotsFull creates a non-sparse copy of an RBD storage volume from one container to another without snapshots, handling errors during copying, mapping, mounting, and applying templates.
2695	copyWithoutSnapshotsSparse creates a sparse copy of an RBD storage volume from source to target without snapshots, handling snapshots, cloning, and template application.
2696	GetConfigCmd creates a Cobra command to retrieve and display Pachyderm's authentication configuration in JSON or YAML format.
2697	SetConfigCmd sets Pachyderm's auth configuration using a file or stdin.
2698	NewSharder creates a sharder using a discovery client, number of shards, and namespace.
2699	NewRouter creates a new router instance with the given sharder, dialer, and local address.
2700	renewUserCredentials extends user token TTL using admin credentials and returns an error if unsuccessful
2701	NewLocalClient creates a new local client with specified root directory and returns it or an error if creation fails.
2702	AddSpanToAnyExisting will create or use existing span add tags and return it along with context
2703	InstallJaegerTracerFromEnv configures and installs Jaeger tracer based on environment variables, setting up logging and tracing parameters.
2704	UnaryClientInterceptor returns a gRPC client interceptor for OpenTracing.
2705	StreamClientInterceptor returns a gRPC stream client interceptor for OpenTracing.
2706	UnaryServerInterceptor returns a gRPC server interceptor for OpenTracing.
2707	StreamServerInterceptor returns a gRPC server interceptor for OpenTracing.
2708	CloseAndReportTraces will close the tracer if it implements io.Closer.
2709	newWriter initializes a Writer with a context, client, prefix, callbacks, buffer, hash, and split mask.
2710	For sets the maximum elapsed time for constant backoff and returns the backoff instance
2711	Log logs request, response, error, and duration at appropriate level and reports metric asynchronously.
2712	FormatterFunc will apply formatting to log entry and return formatted bytes or error
2713	NewGRPCLogWriter initializes a new GRPCLogWriter instance with a logger and source string.
2714	Read will load or generate a Config object from a JSON file, ensuring it has a valid UserID.
2715	Write will marshal the Config to JSON, set the config path, ensure the directory exists, and write the file with appropriate permissions.
2716	Read reads bytes from the reader and unmarshals them into a protocol buffer message.
2717	Write marshals a protocol buffer message to bytes and writes them using WriteBytes, returning the number of bytes written and any error encountered.
2718	NewReadWriter will create a new ReadWriter using the given io.ReadWriter
2719	RunGitHookServer initializes clients and server to handle git hooks over HTTP.
2720	newLoggingPipe creates a logging pipe with tee readers for client and server communication buffers
2721	Read from logging connection and return number of bytes read and error
2722	Write logs to connection
2723	Accept method returns a network connection from a channel or an error if called multiple times
2724	Close will close the connection channel and unlock the listener's mutex.
2725	errorf creates a hashTreeError with a given error code and formatted message
2726	InitWithKube initializes a service environment with Kubernetes client and returns it.
2727	GetEtcdClient returns the etcd client from service env or panics if connection fails
2728	GetKubeClient retrieves the Kubernetes client or panics if not connected.
2729	NewHasher creates a new Hasher instance with specified job and pipeline moduli.
2730	HashJob computes Adler-32 checksum of jobID and returns it modulo JobModulus.
2731	HashPipeline computes a hash value for a pipeline name using Adler-32 checksum and returns it modulo PipelineModulus
2732	Status retrieves workers' statuses using gRPC clients.
2733	Cancel cancels a job across multiple workers and returns an error if no datum matches the filter
2734	Conns retrieves gRPC client connections from etcd based on the pipeline name and worker port.
2735	Clients retrieves client connections from etcd and returns them as a list.
2736	NewClient creates a gRPC client using the provided address and environment variable port, returning an error if any step fails.
2737	RunFixedArgs validates command-line arguments before running a specified function.
2738	RunBoundedArgs enforces argument count on a command and executes a function if within bounds, otherwise prints usage or exits with error.
2739	Run will execute a command with arguments and handle errors by exiting with an error message
2740	ErrorAndExit formats and prints an error message to stderr before exiting the program.
2741	ParseCommit will return a Commit object from a given string argument an error will be returned if the format is invalid
2742	ParseBranch will parse a branch from a given argument and return a pointer to a pfs.Branch and an error if parsing fails
2743	ParseFile extracts repository, commit, and path from input string and returns a File object or an error.
2744	Set appends a string to RepeatedStringArg and returns nil
2745	SetDocsUsage modifies a Cobra command to include associated commands in its help text.
2746	makeCronCommits will handle cron jobs by creating commits with timestamps based on the schedule, overwriting existing files if specified.
2747	Writer adds a tracing span to the request and returns an io.WriteCloser along with any errors.
2748	`Reader` adds a span to a tracing context and returns a reader from the client with the given parameters.
2749	tracingObjClient's Delete method adds a span, deletes a resource, and finishes the span
2750	tracingObjClient's Walk method adds a span to the context, executes a walk operation, and returns any errors encountered.
2751	Exists checks if a resource exists using a tracing span.
2752	GetBlock will return a Block object containing the encoded hash using Base64 URL encoding.
2753	Health checks server readiness and returns an empty response or an error if not ready.
2754	split will return the directory path and the file name from a given path
2755	ValidatePath checks if a path contains only printable ASCII characters and allows no globbing characters, returning an error if validation fails.
2756	MatchDatum checks if all filters match any datum path or hash in base64/hex encoding.
2757	NewCacheServer initializes a new cache server with a router and shard count returns it
2758	authorizePipelineOp checks user permissions for pipeline operations on input and output repositories
2759	sudo will execute a function with elevated privileges using a cached superuser token from etcd.
2760	setPipelineDefaults initializes default values for a pipeline's configuration settings
2761	incrementGCGeneration increments the garbage collection generation key in etcd by 1 or creates it if it doesn't exist.
2762	NewDebugServer initializes and returns a new debug server instance with given parameters.
2763	APIClient's Health method returns an error after checking its health client.
2764	newObjBlockAPIServer creates a new server instance with specified configurations and caches, initializes them, and starts watching garbage collection if not in test mode.
2765	watchGC will watch for changes to the GC generation number in etcd and update the server's generation accordingly.
2766	splitKey generates a new key by appending the generation to either the full or partial original key
2767	NewWriter initializes a Writer with a given header and wraps it with a tab writer, ensuring the header ends with a newline.
2768	Write buffer to writer, flush if lines exceed terminal height, count newlines and update lines.
2769	PrintRepoHeader prints the appropriate header based on whether authentication should be printed or not
2770	PrintRepoInfo outputs repository information to a writer with optional full timestamps and size formatting.
2771	PrintDetailedRepoInfo prints detailed repository information using a Go template and returns any errors encountered during parsing or execution.
2772	PrintBranch will print branch name and head ID or "-" to writer
2773	PrintCommitInfo prints formatted commit info to writer
2774	PrintDetailedCommitInfo will print detailed commit information using a template and return an error if parsing or execution fails
2775	PrintFileInfo outputs file info to writer with optional full timestamps and byte size.
2776	PrintDetailedFileInfo will print file details using a template and return an error if parsing fails
2777	Add appends ancestors to a string with a tilde separator
2778	RetryNotify will execute an operation with retries using backoff and notify on errors.
2779	Get retrieves data from cache, copies it to writer, and handles errors.
2780	Delete removes an item from the cache using its ID and returns an error if the operation fails
2781	PrintJobInfo prints job details to writer based on job info and timestamp preference.
2782	PrintPipelineInfo outputs pipeline details to writer based on timestamps and state
2783	PrintWorkerStatus outputs worker status details to a writer, including worker ID, job ID, data paths, start time (full or relative), and queue size.
2784	PrintDetailedJobInfo will print detailed job information using a template and jobInfo struct, returning an error if the template execution fails
2785	PrintDetailedPipelineInfo generates a detailed pipeline info report using a template and prints it to stdout.
2786	PrintDatumInfo outputs datum info to writer including ID, state, and total time in human-readable format.
2787	PrintDetailedDatumInfo prints detailed information about a datum to a writer, including ID, Job ID, state, data sizes, total time, and file details.
2788	PrintFile writes file details to writer
2789	ShorthandInput returns a shorthand representation of ppsclient.Input based on its type
2790	Retrieve AWS credentials from Vault, validate, convert to strings, update lease, and renew in background.
2791	IsExpired checks if vault credentials have expired based on lease duration and last renewal time.
2792	NewBranch creates a new branch object with specified repo and name
2793	NewCommit creates a new commit object for a given repository and commit ID
2794	NewCommitProvenance creates a new CommitProvenance object with the given repoName, branchName, and commitID.
2795	NewFile creates a new file object with specified repository name, commit ID, and path.
2796	CreateRepo creates a new repository using the API client and returns an error if it fails.
2797	InspectRepo will return repo info or an error for a given repo name
2798	ListRepo will return repository information and an error if the request fails
2799	DeleteRepo will send a request to delete a repository and return an error if it fails
2800	BuildCommit will create a new commit using the provided repository name, branch, parent commit, and tree object returning the created commit and any errors encountered
2801	StartCommitParent initiates a new commit based on a parent commit in a specified repository and branch, returning the created commit or an error.
2802	FinishCommit will send a request to finish a commit and return an error if the request fails
2803	InspectCommit returns a commit info and an error for a given repo and commit ID
2804	BlockCommit returns a commit info for a finished commit or an error
2805	ListCommit fetches commit info for a repository within a specified range and returns it.
2806	ListCommitF sends a request to list commits and processes each commit using a callback function.
2807	ListCommitByRepo retrieves commit information from a specified repository using APIClient.
2808	CreateBranch method creates a new branch in a repository using provided parameters and returns an error if creation fails.
2809	InspectBranch retrieves branch info from API client and handles GRPC errors.
2810	ListBranch retrieves branch info from a repository and handles errors.
2811	SetBranch sets the branch for a repository using the APIClient.
2812	DeleteBranch method deletes a branch from a repository with optional force flag returns an error
2813	DeleteCommit sends a request to delete a commit and returns an error if unsuccessful
2814	FlushCommit sends commit data to a client and returns an iterator over commit info or an error
2815	FlushCommitF sends commits to specified repositories and processes commit info using a callback function, returning any errors encountered.
2816	FlushCommitAll sends commits to repositories and returns commit information or an error
2817	SubscribeCommit will return a CommitInfoIterator and an error if the subscription fails
2818	SubscribeCommitF subscribes to commit events in a repository and processes them with a callback function, handling errors appropriately.
2819	APIClient.PutObjectAsync creates a new PutObjectWriteCloserAsync instance and returns it along with any errors encountered during creation.
2820	APIClient.PutObject uploads object to storage with optional tags returns written bytes and error
2821	APIClient's PutObjectSplit method processes an input reader to split objects, returning the objects, total written bytes, and any errors encountered during the process.
2822	GetObject will download an object using a client and write it to a writer returning an error if any step fails
2823	GetObjectReader will return a reader for an object given its hash and an error if the retrieval fails
2824	GetObjects fetches objects using API client and writes to writer, handling errors.
2825	TagObject assigns tags to an object using the APIClient.
2826	ListObject iterates over objects using a callback function, handling errors and EOF gracefully.
2827	InspectObject retrieves object info from API client and handles errors
2828	GetTag fetches a tag from the API client and writes it to the specified writer, handling any errors encountered during the process.
2829	GetTagReader fetches a tag reader from the API client with cancellation support.
2830	APIClient's ListTag method iterates over tag responses, applying a callback function and handling errors.
2831	Compact will send a compact request to ObjectAPIClient and return any errors encountered
2832	NewPutFileClient creates a PutFileClient using APIClient's PfsAPIClient and returns it along with any errors encountered during creation.
2833	putFileClient's PutFileOverwrite method transfers file content using a writer, handling errors and returning the number of bytes written.
2834	Close will close the connection and receive any final message before returning any gRPC errors scrubbed
2835	CopyFile method copies a file from source to destination in PFS, handling errors and overwriting options.
2836	APIClient.GetFile fetches a file from a repository using gRPC, applying rate limiting and handling errors.
2837	APIClient.GetFileReader fetches a file reader from a specified repository, commit, path, offset, and size, handling errors and returning a streaming bytes reader.
2838	GetFileReadSeeker retrieves a file's reader and seeker from a repository and commit, handling errors and returning a custom struct.
2839	APIClient.InspectFile will return file info or error for specified repo, commit, and path
2840	APIClient's ListFile method retrieves file info from a specified repository, commit, and path returning a list of FileInfo objects and an error if any occurs
2841	ListFileHistory retrieves file history from API client and returns list of file info or error
2842	ListFileF fetches file info from API and processes it using a callback function.
2843	Walk will traverse files in a repository and apply a function to each file, returning an error if traversal fails or the function returns an error.
2844	DeleteFile method deletes a file from a repository using API client and returns an error
2845	putObjectWriteCloserAsync's Write method handles buffer overflow by writing fitting bytes to buf and sending full buffers via writeChan, returning the total bytes written.
2846	Close will send buffer to write channel close it receive error scrub gRPC error then call client's CloseAndRecv returning scrubbed error
2847	PrettyPrintVersionNoAdditional formats a version number into a human-readable string.
2848	recursiveBlockQuoteExamples will add block quotes to examples of a command and its subcommands
2849	errMissingField returns an error response indicating a missing required field.
2850	validateFields checks request data against schema and returns error if any unknown fields are present
2851	putConfig will store a config object in logical storage and return an error if it fails
2852	getConfig retrieves a configuration from storage, decodes it, and returns an error if unsuccessful.
2853	Serve starts gRPC servers with specified options and registers handlers, handling TLS if enabled, and listens on ports until canceled or errors occur.
2854	NewPuller initializes a Puller struct with an error channel and a map of pipes.
2855	PullTree pulls files from a Pachyderm repository using concurrency control and optional piping.
2856	Push uploads files from a local directory to a Pachyderm repository, handling overwrites and errors gracefully.
2857	PushObj uploads files from a Pachyderm commit to an object storage system using multiple concurrent workers.
2858	PushFile will upload a file to Pachyderm and overwrite existing chunks if necessary
2859	APIClient's Dump method writes debug information to a writer, handling errors and scrubbing gRPC details.
2860	APIClient's Profile method sends a profiling request and writes the response to a writer, handling errors gracefully.
2861	APIClient's Binary method transfers binary data to writer, handling errors.
2862	RegisterCacheStats registers cache statistics with Prometheus, handling potential registration errors.
2863	wait will block until counter's n reaches or exceeds given n
2864	RunWorkload will execute a workload on a client using workers and verify their success, returning an error if any fail
2865	createRepo generates a random repository, creates it using the API client, appends it to worker's repos list, starts the initial commit, and records it.
2866	advanceCommit manages worker's commit progress by either finishing an existing commit or starting a new one.
2867	RandString generates a random string of specified length using given characters from a predefined set.
2868	NewReader creates a new reader with a random generator and byte count.
2869	iterDir traverses a BoltDB directory, applying a function to each key-value pair and returning an error if the traversal is interrupted or fails
2870	FSSize returns the size of the file system tree starting from the root node.
2871	Diff will compare two hash trees and call a callback function for differences.
2872	Serialize will write a dbHashTree to an io.Writer using protobuf encoding, returning an error if any step fails
2873	Deserialize reads data from a reader into a BoltDB hash tree structure.
2874	Copy creates a new hash tree by hashing, serializing to pipe, and deserializing from it, returning the new tree or an error.
2875	Destroy method closes db hash tree and removes its path returning any errors encountered.
2876	putFileOverwrite calls putFile to overwrite files with given path, objects, overwriteIndex, and sizeDelta.
2877	PutDirHeaderFooter updates a directory's header and footer in BoltDB, ensuring the node exists and handling updates conditionally.
2878	putFileHeaderFooter will call putFile to store file header/footer with specified path, objects, and size returning an error if failed
2879	deleteDir will remove a directory and its contents from a BoltDB transaction, returning an error if any operation fails
2880	NewReader creates a new Reader object with the given io.Reader and Filter.
2881	Read will return a MergeNode containing key and value from pbr after filtering based on filter function. An error is returned if reading fails.
2882	NewWriter initializes a new Writer instance wrapping the given io.Writer.
2883	Write method marshals and writes a MergeNode to a Writer, updating offsets and indices.
2884	Copy will copy data from reader to writer returning an error if any occurs
2885	Index will return the byte representation of writer's indices and an error if writing fails
2886	GetRangeFromIndex reads from a reader to find the range of offsets for a given prefix.
2887	NewFilter creates a filter function to check if a key belongs to a specific tree.
2888	PathToTree converts a path to a tree structure and returns the number of trees.
2889	Merge will merge multiple readers into a single writer and return an error if any operation fails
2890	Hash method returns error after processing database batch
2891	IsGlob checks if a pattern matches the glob syntax and returns true if it does
2892	GlobLiteralPrefix removes the first segment matching glob syntax from a pattern.
2893	GetHashTreeObject retrieves a hash tree object from Pachyderm using the provided client and storage root.
2894	GetHashTreeTag retrieves a hash tree from Pachyderm using a client, storage root, and tree reference.
2895	PutHashTree serializes a hash tree to an object using Pachyderm client and returns the object reference and any errors encountered.
2896	NewChildCursor creates a new cursor for a given path in a BoltDB transaction.
2897	Next retrieves the next key-value pair from the cursor, filtering by directory prefix.
2898	NewOrdered creates a new Ordered instance with the given root directory.
2899	MkdirAll will create directories in reverse order starting from the deepest directory to the root directory
2900	PutDir cleans the path, creates a NodeProto for a directory, and calls putDir to add it.
2901	Serialize Ordered object to writer, updating hashes and subtree sizes recursively.
2902	NewUnordered creates a new unordered map with a cleaned root path.
2903	Ordered method sorts file system paths and returns an ordered structure.
2904	revokeUserCredentials will revoke a user's credentials using an admin token and return an error if it fails
2905	NewAPIServer initializes and returns a new API server instance.
2906	String converts a pb.Version to its string representation
2907	getPipelineInfo retrieves pipeline info from etcd using Pachyderm client and service environment returns PipelineInfo or error
2908	removeStr will remove a string from a slice and return true if successful
2909	PublicCertToPEM converts TLS certificate to PEM format.
2910	GenerateSelfSignedCert creates a self-signed TLS certificate from given address, name, and IP addresses.
2911	ActivateCmd configures and runs a Cobra command to activate Pachyderm's authentication system, setting up the initial admin user and handling GitHub login if necessary.
2912	DeactivateCmd creates a Cobra command to deactivate Pachyderm auth, prompting confirmation before proceeding.
2913	LoginCmd creates a Cobra command for logging into Pachyderm using OTP or GitHub token.
2914	LogoutCmd creates a Cobra command to log out of Pachyderm by deleting the local credential.
2915	WhoamiCmd creates a Cobra command to print user's Pachyderm identity, session expiration, and admin status.
2916	CheckCmd creates a Cobra command to check authorization for a given repository and scope.
2917	GetCmd creates a Cobra command to retrieve ACLs or user scopes from Pachyderm repositories.
2918	SetScopeCmd creates a command to set user access scope to a repository.
2919	ListAdminsCmd creates a Cobra command to list cluster admins, handling metrics and port forwarding options.
2920	ModifyAdminsCmd creates a command to manage cluster admins with options to add and remove users, handling errors and authentication.
2921	GetAuthTokenCmd creates a Cobra command to fetch an authentication token for a given username, optionally suppresses verbose output.
2922	UseAuthTokenCmd creates a Cobra command to read a Pachyderm auth token from stdin and write it to the current user's Pachyderm config file.
2923	Cmds generates a list of authentication-related commands with optional metrics and port forwarding flags.
2924	ParseScope will return a Scope enum and an error if the scope is unrecognized
2925	IsErrNotActivated checks if an error indicates it's not activated
2926	IsErrPartiallyActivated checks if an error contains a specific message related to partial activation.
2927	IsErrNotSignedIn checks if an error indicates a user is not signed in.
2928	IsErrBadToken checks if an error contains a specific bad token message.
2929	IsErrNotAuthorized checks if an error indicates lack of authorization.
2930	IsErrInvalidPrincipal checks if an error indicates an invalid principal format.
2931	IsErrTooShortTTL checks if an error message indicates that the provided TTL is shorter than the existing TTL.
2932	NewDatumFactory creates a datum factory based on the input type.
2933	NewCollection initializes a new collection with the given parameters and returns it.
2934	Path concatenates collection prefix and key to form a full path
2935	getIndexPath retrieves the indexed path for a given value and key using reflection.
2936	getMultiIndexPaths retrieves multiple index paths from a collection based on a given value, index, and key.
2937	Upsert will update or insert a key-value pair in the collection if it doesn't exist, applying a given function before updating. An error is returned if any step fails.
2938	get will retrieve a value from etcd using a key and options returning the response and an error
2939	List will iterate over items, unmarshal each to a protobuf message, and apply a function to the key, returning an error if any step fails.
2940	Watch creates a new watcher using the readonlyCollection's context, etcd client, prefix, template, and options.
2941	WatchByIndex sets up a watcher on a specific index and returns a channel for events or an error.
2942	WatchOne creates a watcher for a single key in a readonly collection.
2943	WatchOneF sets up a watcher on a key and processes events using a callback function until an error occurs or the context is canceled.
2944	Get will return a file reader and an error if the key is not found in the cache
2945	Cache.Keys returns sorted list of cache keys
2946	Clear will remove all items from cache and delete their files returning an error if any file deletion fails
2947	NewHTTPServer creates an HTTP server with routes and returns it along with any errors.
2948	NewDeployServer creates a new API server instance with Kubernetes client and namespace.
2949	Export will export Docker images to a writer using authentication and handling pull errors
2950	Import function loads an image from reader, tags it, and pushes to registries with authentication.
2951	DatumTagPrefix hashes the input salt and returns the first four characters of its hexadecimal representation.
2952	NewPFSInput creates a new PFS input object with specified repository and glob pattern.
2953	NewPFSInputOpts creates a new PFS input object with specified options.
2954	NewJobInput creates a new job input with repo name, commit ID, and glob pattern.
2955	NewPipelineInput creates a new pipeline input object with the given repo name and glob pattern
2956	CreateJob sends a request to create a new job using the provided pipeline and output commit, returning the created job and any errors encountered.
2957	ListJob retrieves job information from API client for given pipeline and commit details.
2958	ListJobF will list jobs from a pipeline and process each job info using a callback function, returning an error if any step fails
2959	FlushJob sends job flush requests and processes responses using a callback function.
2960	FlushJobAll calls FlushJob with a callback to collect job info results.
2961	DeleteJob will delete a job using its ID and return an error if the operation fails.
2962	StopJob will send a stop request to the PPS API client for the specified job ID and return any errors encountered during the process.
2963	RestartDatum restarts a datum job and returns an error if the request fails.
2964	ListDatum retrieves data using jobID, pageSize, and page returns a response or error
2965	ListDatumF fetches datum information from a job using pagination and processes it with a callback function, handling errors appropriately.
2966	InspectDatum retrieves a datum's information from a job and returns it along with any errors encountered during the process.
2967	Next will return true if there is another log message available and update the logs iter msg field otherwise it returns false
2968	InspectPipeline retrieves a pipeline's info using the API client and returns it along with any errors.
2969	ListPipeline retrieves pipeline information from the API client and returns it along with any errors encountered during the process.
2970	DeletePipeline sends a request to delete a pipeline with optional force flag and returns any errors encountered
2971	StartPipeline initiates a pipeline using the client's context and returns an error if the operation fails
2972	StopPipeline will stop a pipeline by name and return an error if the request fails
2973	RerunPipeline method will call PpsAPIClient's RerunPipeline method to rerun a pipeline with specified commits to include and exclude and returns an error if any occurs
2974	CreatePipelineService sends a request to create a pipeline service using the APIClient.
2975	GetDatumTotalTime calculates the total duration from process stats.
2976	Mount will mount a filesystem at a specified point using given options and handle unmount on interrupt or custom signal.
2977	NewBufPool creates a buffer pool with specified size.
2978	StorageRootFromEnv retrieves the storage root from environment variables, removes leading slashes for certain backends, and returns it along with any errors.
2979	BlockPathFromEnv returns a block path from environment or an error.
2980	NewGoogleClient creates a new Google client for a bucket with given options.
2981	NewGoogleClientFromSecret creates a Google client using secret files or environment variables for authentication.
2982	NewGoogleClientFromEnv creates a new Google client using environment variables for bucket and credentials, returning an error if either is missing.
2983	NewMicrosoftClientFromSecret creates a new Microsoft client using secrets from files or returns an error if any file is missing.
2984	NewMicrosoftClientFromEnv will create a new Microsoft client using environment variables and return it or an error if any required variable is missing
2985	NewMinioClientFromSecret reads configuration from secrets and returns a Minio client or an error
2986	NewMinioClientFromEnv creates a Minio client from environment variables or returns an error if any required variable is missing
2987	NewAmazonClientFromSecret constructs an Amazon client using secret files and optional parameters.
2988	NewAmazonClientFromEnv creates an Amazon client from environment variables, returning it or an error if any required variable is missing.
2989	NewClientFromURLAndSecret creates a client from a URL and secret based on the store type.
2990	ParseURL will return an ObjectStoreURL and an error if the URL is not properly formatted
2991	NewClientFromEnv creates a new client from environment variables, handling different storage backends and returning an error if unrecognized or invalid.
2992	NewExponentialBackOffConfig initializes and configures an exponential backoff strategy with specific settings.
2993	Close method on BackoffReadCloser will close the reader and add a span to the trace
2994	Close method on BackoffWriteCloser closes writer, spans trace, and ignores ignorable errors
2995	IsRetryable checks if an error is retryable based on network conditions or client settings
2996	RunStdin reads from standard input using the provided arguments and returns an error if any occurs.
2997	RunIODirPath executes a command with specified I/O objects and directory path, returning any errors encountered.
2998	NewAuthServer creates and initializes an AuthServer instance, setting up collections for authentication data and starting goroutines for token retrieval, admin monitoring, and SAML service if public.
2999	expiredClusterAdminCheck verifies if the user has admin rights when Pachyderm Enterprise is inactive.
3000	getOneTimePassword generates and stores a new OTP for a user and returns it along with any errors encountered
3001	hashToken calculates the SHA-256 hash of a token and returns it as a hexadecimal string
3002	getAuthToken extracts and validates authentication token from context returns token and error if not found or multiple tokens exist
3003	canonicalizeSubjects will return a list of canonicalized subjects and an error if any subject cannot be canonicalized
3004	Matches checks if actual string matches expected regex pattern and reports error if it doesn't.
3005	OneOfMatches checks if any actual string matches the expected regex pattern and reports an error if none do.
3006	Equal checks if two values are equal and reports an error using testing.TB if they are not.
3007	NotEqual asserts that two values are not equal and logs a fatal error if they are.
3008	oneOfEquals checks if an element exists within a slice, considering pointer types, returning a boolean and an error if the slice is invalid
3009	NoneEquals checks if none of the actual values match the expected value and logs an error if they do.
3010	NoError asserts no error occurred, reporting an error message if one is found.
3011	NoErrorWithinT checks if an operation completes without errors within a specified timeout.
3012	NoErrorWithinTRetry runs a function until it succeeds or times out, logging an error if it fails.
3013	YesError checks if an error occurs during testing and reports it if none is found.
3014	NotNil checks if the given object is not nil and reports an error if it is.
3015	Nil checks if the given object is nil and reports an error if it's not.
3016	False checks if a value is false and logs an error if it's not.
3017	NewSTM creates a new transactional state machine response using the given client and apply function, returning any errors encountered.
3018	NewDryrunSTM will execute a dry run using STM and return any errors encountered during the process
3019	newSTMRepeatable creates a transactional STM with repeatable read isolation level and executes it
3020	newSTMSerializable creates a STM serializable object and runs it with the given apply function and dryrun flag returning a transaction response or an error
3021	newSTMReadCommitted initiates a transactional read operation using STM and executes the given apply function, returning the response or any errors encountered.
3022	commit will reset the result set and return the transaction response
3023	Pipelines creates a new collection using etcd client and prefix
3024	Jobs returns a collection from etcd with specified indices and type
3025	NewTicker creates a new ticker with a backoff strategy and starts it in a goroutine.
3026	nodeToMap updates a map with etcd node values and returns true if any changes were made
3027	ServiceAccount creates a new v1.ServiceAccount with specified options.
3028	ClusterRole constructs a new rbacv1.ClusterRole instance with specified options.
3029	RoleBinding constructs a new RoleBinding resource with specified options.
3030	GetSecretEnvVars constructs environment variables based on storage backend and secret keys, returning them as a list.
3031	PachdService creates a Kubernetes service with specific ports and annotations for Prometheus monitoring.
3032	GithookService creates a LoadBalancer service for GitHook in specified namespace.
3033	EtcdDeployment creates a Kubernetes Deployment for etcd with specified CPU, memory, and storage options.
3034	EtcdStorageClass generates a StorageClass object based on backend options and returns it along with any errors encountered.
3035	EtcdVolume creates a PersistentVolume based on the backend type and options, returning it or an error.
3036	EtcdNodePortService creates a NodePort service for etcd with optional local port override.
3037	EtcdHeadlessService creates a headless service for etcd with specified options.
3038	EtcdStatefulSet generates a Kubernetes manifest for deploying an Etcd cluster based on provided options and backend.
3039	DashDeployment creates a Deployment resource with specified containers and configurations based on AssetOpts.
3040	DashService creates a v1 Service with specific ports and selectors based on AssetOpts.
3041	WriteSecret encodes and returns a secret using the given encoder and options.
3042	GoogleSecret will return a map containing google-bucket and google-cred as keys with their respective byte values
3043	WriteDashboardAssets encodes dashboard service and deployment using provided encoder and options, returning any errors encountered.
3044	WriteLocalAssets will write local assets and a secret using the provided encoder and options returns an error if any step fails
3045	WriteCustomAssets encodes assets based on object and persistent store types returning an error if invalid parameters are provided.
3046	WriteAmazonAssets will upload assets to Amazon S3 using the provided credentials and options, returning an error if unsuccessful
3047	WriteGoogleAssets encodes assets to Google storage using specified options and credentials returns an error if any step fails
3048	WriteMicrosoftAssets will write assets to Microsoft backend and set a secret using the provided encoder, options, container, ID, secret, and volume size. An error will be returned if the operation fails.
3049	Images will return a list of image strings based on asset options and default images.
3050	AddRegistry prepends a registry to an image name if specified, handling cases where the image name already includes a registry.
3051	withCanonicalRandomizationFactor normalizes the randomization factor of ExponentialBackOff to ensure it's within [0, 1]
3052	Reset will reset the exponential backoff to its initial state.
3053	incrementCurrentInterval increases the backoff interval or sets it to the maximum if overflow occurs
3054	NewBlockAPIServer creates a BlockAPIServer based on the specified backend and returns it along with any errors encountered
3055	LocalStorage initializes a local client and storage object for testing.
3056	deleteJob updates job counts and deletes a job from storage.
3057	writeXML sets headers and encodes XML response to writer
3058	clean1_7HashtreePath prepends a slash to the path if it's missing and cleans the path before appending the default root
3059	NewFromAddress creates an APIClient instance from an address and optional configurations, returning it or an error.
3060	getUserMachineAddrAndOpts retrieves the user's machine address and options based on environment variables or configuration settings, returning an error if unable to determine the address.
3061	NewInCluster creates a new APIClient using environment variables for PACHD_SERVICE_HOST and PACHD_SERVICE_PORT, returning an error if either is not set.
3062	Close method on APIClient closes the client connection and port forwarder if it exists, returning any errors encountered.
3063	DeleteAll method will deactivate auth, delete all from pps and pfs clients returning an error if any operation fails
3064	APIClient's SetMaxConcurrentStreams method updates the limiter to allow up to n concurrent streams
3065	WithCtx sets a new context for APIClient and returns it.
3066	NewDLock creates a new distributed lock implementation using etcd.
3067	DatumID computes a SHA-256 hash of file paths and hashes from input data, returning a hexadecimal string representation.
3068	runUserErrorHandlingCode will execute user error handling code, log execution time, handle process state, and return any errors encountered during execution.
3069	HashDatum computes a SHA-256 hash for a given set of input data and pipeline details, returning a tagged hexadecimal string.
3070	HashDatum15 generates a hash from pipeline info and input data, returning a prefixed hexadecimal string.
3071	Status returns worker status with job ID, worker ID, start time, data, and queue size.
3072	CancelRequest checks jobID and dataFilters, cancels if match, resets state, returns success response.
3073	mergeStats combines two ProcessStats objects, adding their download and upload times and bytes, returning an error if any duration addition fails
3074	mergeChunk will merge chunks and update caches with or without stats enabled, logging errors and durations.
3075	IsCommitNotFoundErr checks if an error indicates a missing commit.
3076	IsCommitDeletedErr checks if an error indicates a deleted commit.
3077	IsCommitFinishedErr checks if an error indicates a finished commit
3078	IsRepoNotFoundErr checks if an error matches the repository not found pattern.
3079	IsBranchNotFoundErr checks if the error matches the branch not found regex.
3080	IsFileNotFoundErr checks if an error indicates a file not found.
3081	APIClient's Version method fetches and formats its version info or returns an error.
3082	validateRepoName checks if repo name contains only valid characters and returns an error if it does not
3083	newDriver initializes a driver with environment, etcd prefix, cache, storage root, and memory request returns the driver or an error
3084	inspectCommit checks authorization, resolves commit info, waits for provenant commits, and watches commit state before returning commit info.
3085	scratchCommitPrefix will return a string representing the prefix for a scratch commit based on the repository name and commit ID
3086	scratchFilePrefix returns a prefixed path for a file in the driver's scratch directory
3087	getTreeForFile retrieves a hash tree for a file based on its commit, handling different states and parent commits.
3088	provenantOnInput checks if provenance exists outside the spec repo
3089	nodeToFileInfo converts commit info, path, and node to file info with optional full details
3090	fileHistory will return an error if the file history cannot be inspected or processed
3091	upsertPutFileRecords updates or inserts put file records ensuring the commit is open and handling tombstones, splits, and headers/footers.
3092	ReadRow reads a PostgreSQL dump row, handling headers, footers, and line endings.
3093	NewReporter initializes a Reporter instance with clusterID and kubeClient starts a goroutine to report metrics.
3094	ReportUserAction returns a callback to report user actions with start time and error details.
3095	FinishReportAndFlushUserAction will return a function to report and flush user action based on error status and duration.
3096	Read method reads data from a reader, handling multiple chunks until all data is read or EOF is encountered.
3097	ActivateCmd creates a Cobra command to activate Pachyderm enterprise features using an activation code and optional expiration timestamp.
3098	GetStateCmd creates a Cobra command to check Pachyderm cluster's enterprise features and prints token state and expiration.
3099	Cmds returns a slice of Cobra commands for managing Pachyderm Enterprise features.
3100	NewConfiguration creates a Configuration object based on the input interface.
3101	Repos returns a collection from etcd client with specified prefix and RepoInfo type
3102	PutFileRecords creates a new collection using etcd client and prefix
3103	Commits creates a new collection using etcd client and specified prefix and repo
3104	Branches creates a collection from an etcd client, prefix, and repository, validating branch names to ensure they are not UUIDs without dashes.
3105	OpenCommits creates a collection using an etcd client and prefix
3106	NewDAG initializes a Directed Acyclic Graph (DAG) from a map of nodes to their parent nodes and returns it.
3107	NewNode adds a node to the DAG with given ID and parents updating child and leaf relationships.
3108	Sorted will return a list of strings representing the nodes in topological order using depth-first search.
3109	Leaves will return all leaf node IDs from a directed acyclic graph.
3110	Ancestors returns the ancestor nodes of a given ID starting from specified nodes.
3111	Descendants will return all descendant nodes from the given ID using BFS.
3112	Ghosts will return a list of nodes without parents in the DAG.
3113	NewPortForwarder initializes a new port forwarder with default or specified namespace, loads Kubernetes configuration, creates a client, and returns a PortForwarder instance.
3114	Run will start a port forward to a specified pod and return an error if it fails
3115	RunForDaemon configures and runs a port forwarder for a daemon using specified or default ports.
3116	RunForSAMLACS starts PortForwarder for SAML ACS on specified or default port
3117	RunForDashUI starts PortForwarder for Dash UI on specified or default local port
3118	RunForDashWebSocket starts a port forwarder for Dash WebSocket using specified or default local port.
3119	RunForPFS starts port forwarding for PFS on a specified local port
3120	RunForS3Gateway starts port forwarding for S3 gateway on a specified or default local port
3121	Lock method sets PID file path and writes it, returning an error if unsuccessful
3122	Close stops the port forwarder and logs errors
3123	Unmarshal will set key to event's key unmarshal event's value into provided message and return error if types don't match
3124	UnmarshalPrev updates key with event's previous key unmarshals previous value into given message and returns error if types mismatch
3125	MakeWatcher initializes a watcher with event and done channels.
3126	CheckType will validate if the type of val matches the type of template returning an error if they do not match.
3127	NewPool creates a new connection pool using Kubernetes client and service details.
3128	Do acquires a connection from a pool and executes a function with it, ensuring proper resource management.
3129	Close will close the pool and its connections returning any errors encountered
3130	buildImage builds a Docker image using the provided client, repository, context directory, Dockerfile, and destination tag, returning an error if the build fails.
3131	pushImage tags and pushes a Docker image from source to destination with authentication and returns the new tag or an error
3132	newMinioClient creates a MinIO client with specified endpoint, bucket, credentials, and security settings returns the client or an error
3133	newMinioClientV2 creates a MinIO client with specified endpoint, bucket, credentials, and security settings returns the client and an error if creation fails
3134	newMinioWriter creates a MinIO writer that uploads data to a specified bucket asynchronously.
3135	minioWriter.Close will close the writer and return any errors encountered during the write process
3136	PipelineRepo returns a repository object from a pipeline's name
3137	PipelineRcName will generate a valid Kubernetes resource name from input name and version by replacing underscores with hyphens and appending version.
3138	GetRequestsResourceListFromPipeline retrieves resource list from pipeline info.
3139	GetLimitsResourceListFromPipeline will extract resource limits from pipeline info returning a resource list and an error
3140	getNumNodes retrieves the number of Kubernetes nodes and returns an error if unsuccessful or if no nodes are found.
3141	GetExpectedNumWorkers calculates the expected number of workers based on Kubernetes client and parallelism specification.
3142	GetExpectedNumHashtrees calculates the expected number of hashtrees based on the spec, returning an error if the spec cannot be interpreted.
3143	FailPipeline updates the state of a pipeline to failure in etcd with a given reason and returns any errors encountered.
3144	JobInput updates pipeline input with latest commit IDs from provenance.
3145	PipelineReqFromInfo converts ppsclient.PipelineInfo to ppsclient.CreatePipelineRequest.
3146	NewPipelineManifestReader initializes a PipelineManifestReader from a file or stdin, reading JSON data and storing it in a buffer.
3147	NextCreatePipelineRequest will parse the next create pipeline request from JSON and return it or an error if malformed.
3148	DescribeSyntaxError will return a descriptive syntax error message based on the offset of the original JSON syntax error and the parsed buffer.
3149	UpdateJobState updates the state and reason of a job in the given pipelines and jobs collections, also updating the corresponding pipeline's job counts.
3150	New generates a UUID and retries on failure.
3151	HTTPError.Code returns the HTTP status code or OK if the error is nil
3152	NewHTTPError creates a new HTTPError instance with the given code and formatted error message.
3153	NewStorage initializes a Storage object with given client and prefix.
3154	DeleteAll will delete all objects under a specific prefix and return an error if any deletion fails
3155	Chunk divides data into chunks of specified size returning a slice of slices.
3156	ChunkReader reads from a reader in chunks, processes each chunk with a function, and returns the total bytes processed or an error.
3157	NewStreamingBytesReader creates a new reader from a streaming client and cancellation function.
3158	WriteToStreamingBytesServer copies data from reader to streamingBytesServer using a buffer and returns any errors encountered.
3159	WriteFromStreamingBytesClient reads from a streaming client and writes to a writer until EOF or an error occurs.
3160	NewSidecarAPIServer creates and returns a new API server instance with specified configurations and dependencies.
3161	NewEnterpriseServer initializes an enterprise API server with environment and etcd details.
3162	validateActivationCode checks if the given activation code is valid and returns its expiration time or an error if invalid
3163	Activate validates an activation code, updates the enterprise token record, waits for observation, and returns response info.
3164	Deactivate will deactivate enterprise mode and wait for confirmation before returning an error will be returned if any step fails
3165	lookExtensions searches for executable files by adding extensions to a given path within a specified directory, returning the full path or an error if not found
3166	Start starts a command execution, handling errors and setting up file descriptors.
3167	CombinedOutput sets Stdout and Stderr to a buffer, runs the command, and returns the combined output and error.
3168	StdinPipe sets up a pipe for stdin and returns it along with an error if already set or process started.
3169	StdoutPipe sets up a pipe for stdout and returns it along with an error if already set or process started
3170	dedupEnvCase removes duplicate environment variable keys while preserving original order, optionally case-insensitively.
3171	InputName returns the name from nested input structures or empty string if none found
3172	SortInput sorts inputs based on their names using VisitInput and SortInputs functions
3173	InputBranches processes an input and returns a list of branches based on PFS, Cron, and Git information.
3174	ValidateGitCloneURL checks if the input URL is a valid Git clone URL and returns an error if it's not.
3175	containsEmpty checks if any string in the slice is empty
3176	NewAPIServer creates a new API server instance with the specified parameters.
3177	Ago will return a human-readable duration string from the given timestamp "ago" or an empty string if the timestamp is zero.
3178	TimeDifference calculates and returns human-readable duration between two timestamps.
3179	Duration converts a protobuf duration to a human-readable string.
3180	InspectCluster fetches cluster info using AdminAPIClient and returns it or an error.
3181	Extract extracts objects using the APIClient and processes each operation with a given function, handling errors appropriately.
3182	ExtractAll will extract all admin operations based on the objects flag and return them along with any errors encountered during extraction
3183	APIClient's ExtractWriter method extracts data to a writer, handling protobuf serialization and errors.
3184	ExtractURL sends a request to the admin API client to extract a URL and handles the response or error accordingly.
3185	ExtractPipeline extracts a pipeline using a client and returns it or an error if the operation fails or the response is malformed.
3186	Restore sends operations to the admin client and handles errors.
3187	RestoreReader reads from a reader and sends data to a gRPC client, handling errors and closing the connection.
3188	RestoreFrom sends objects from another client using AdminAPIClient and returns any errors encountered during the process.
3189	RestoreURL sends a URL to the admin API client and handles errors.
3190	IgnoreTypes filters types using a type filter and returns a comparison option to ignore those types
3191	AppendEllipsis updates the text list with an ellipsis and optional stats
3192	IsType checks if a type matches a given function signature.
3193	NameOf retrieves the full qualified method name from a reflect.Value object
3194	PointerOf converts reflect.Value to Pointer using unsafe.Pointer.
3195	EditScript's String method returns a human-readable representation of the script.
3196	stats method calculates counts of different types of edits in an EditScript and returns them as a struct.
3197	connect updates path based on destination and equality function
3198	EquateNaNs will return comparison options to treat NaNs as equal for float64 and float32 types
3199	Path.Index retrieves a PathStep from the Path at the specified index, handling negative indices and bounds checking.
3200	SliceIndex.Key returns xkey if it equals ykey, otherwise returns -1
3201	defaultReporter's String method returns formatted differences if any exist.
3202	FormatType will format the type of a given reflection type and text node based on the options provided, returning a new text node with the formatted type.
3203	formatMapKey formats a map key's value using specified options and returns it as a trimmed string
3204	formatString returns a formatted string using either quoted or raw format based on certain conditions
3205	formatHex converts a uint64 to a hexadecimal string with appropriate padding
3206	formatPointer returns a formatted string representation of a pointer value, using a deterministic value for testing if enabled
3207	Visit method checks if a pointer has been visited before, marking it as visited and returning the previous visit status.
3208	retrieveUnexportedField will return the value of an unexported field in a struct given its reflection values.
3209	insert will add a field to the tree and set ok to true if no more fields are present
3210	matchPrefix checks if a path prefix matches the field tree returning true if it does
3211	canonicalName will return a slice of strings representing the canonical path to a struct field and an error if the field does not exist or is not exported
3212	FilterPath applies a path filter function to an option and returns a new option or nil if the input is invalid.
3213	normalizeOption will flatten options and return the normalized result
3214	flattenOptions merges two options into one recursively handling nested options
3215	CanFormatDiffSlice checks if the given value node can be formatted in diff mode based on various conditions including the type of the value and its length.
3216	formatASCII replaces non-printable ASCII characters with dots in a given string
3217	coalesceAdjacentEdits groups edits based on type
3218	SortKeys sorts and removes duplicates from reflect.Values, returning the unique sorted slice.
3219	FormatDiff formats a valueNode based on its type and returns a textNode representation.
3220	coalesceAdjacentRecords aggregates report records into groups based on their differences and returns the groups along with statistics.
3221	Diff compares two values, returns their differences as a string, and panics if the difference and equality results don't match.
3222	statelessCompare resets state, compares step, then restores original state and returns result.
3223	sanitizeValue will return a sanitized reflect value based on the type, handling interface nil values for Go versions below 1.10
3224	Check verifies path length and detects recursive transformers, panicking if found.
3225	makeAddressable returns a reflect.Value that is addressable
3226	Marshal will encode a field using a visitor based on its type.
3227	Field's String method returns its key and Value as a formatted string.
3228	Set tag on span with key and value from tag
3229	Inject method sets trace context and baggage items to carrier using TextMapWriter
3230	Extract will extract span context from text map carrier and return it or an error if extraction fails
3231	ToLogRecord converts LogData to LogRecord with current timestamp or existing one, and includes event and payload fields.
3232	New creates a MockTracer instance with default injectors and extractors for TextMap and HTTPHeaders propagators.
3233	StartSpan creates a mock span with given operation name and options.
3234	RegisterInjector associates a format with an injector in MockTracer.
3235	RegisterExtractor assigns an extractor to a specific format in MockTracer's extractors map.
3236	MockTracer's Inject method injects a span context into a carrier using a specified format, returning an error if the format is unsupported or the carrier is invalid.
3237	ExtractSpanContext from carrier using tracer's extractors
3238	ContextWithSpan adds a span to the context.
3239	Set tag on span with value
3240	Set will add a tag to the span with the given value
3241	Set tag on span with boolean value
3242	SetString will add a tag to the span with the given value
3243	EmitString sets mock key-value pair with type and string representation
3244	EmitLazyLogger sets the key, value kind, and value string from a lazy logger.
3245	RunAPIChecks will run API checks using a tracer and options.
3246	CheckBaggageValues sets the baggage check option in an API suite.
3247	CheckExtract sets the CheckExtract option on the APICheckSuite to the specified boolean value.
3248	CheckInject sets API check injection option
3249	CheckEverything configures an APICheckSuite to enable baggage value checking, extraction, and injection.
3250	UseProbe sets a probe option on an API check suite
3251	MockSpanContext's WithBaggageItem updates the baggage with a new key-value pair and returns a new MockSpanContext instance.
3252	Tags method returns a copy of the span's tags map while holding a read lock
3253	Tag retrieves a tag value from MockSpan by key, ensuring thread safety.
3254	Logs method returns a copy of log records from MockSpan.
3255	MockSpan's Context method returns the span context after locking and unlocking the instance.
3256	SetTag updates a mock span's tag and returns the span.
3257	SetBaggageItem updates the baggage item of a mock span and returns the updated span.
3258	BaggageItem retrieves a baggage item from a MockSpan using a key while holding a read lock.
3259	Finish will update the finish time of the mock span lock the span record it with the tracer
3260	FinishWithOptions updates span options, logs records, and records span.
3261	String method returns formatted trace information
3262	LogFields will log fields with the current timestamp for the MockSpan object.
3263	logFieldsWithTimestamp logs fields with a timestamp to a mock span's logs
3264	MockSpan's LogKV logs key-value pairs, ensuring even length and converting to fields before logging any errors.
3265	LogEvent logs an event using LogFields with a key "event" and the given value.
3266	LogEventWithPayload logs an event with a payload using MockSpan's LogFields method
3267	SetOperationName updates the operation name of a MockSpan and returns the span.
3268	registriesDirPath returns the path to the registries directory based on the system context
3269	loadAndMergeConfig will merge multiple YAML configuration files into a single Docker registry configuration and return it, or an error if there are conflicts.
3270	ParseReference will return an image reference and an error if the input string is not a valid image reference
3271	NewReference creates an OpenShift image reference from a Docker reference an error is returned if the Docker reference is invalid
3272	CheckAuth verifies user credentials using Docker API and returns an error if authentication fails or encounters unexpected status codes.
3273	doHTTP sends an HTTP request using a TLS transport and returns the response or an error.
3274	detectPropertiesHelper checks Docker registry properties, preferring HTTPS over HTTP if insecure skip verify is enabled.
3275	detectProperties will execute detectPropertiesHelper once and cache the result or return the cached error
3276	getExtensionsSignatures fetches and parses extension signatures from a Docker registry.
3277	NewTransport creates an HTTP transport with custom dialer settings and optional proxy support.
3278	readRegistryConf will read and return the contents of the registries configuration file path from the system context or an error if the file cannot be read
3279	GetRegistries will return a list of registries from system context or an error if configuration loading fails
3280	GetInsecureRegistries loads registry configuration and returns a list of insecure registries or an error.
3281	RegistriesConfPath returns the configuration path based on context or default.
3282	NewOptionalBool will create an OptionalBool from a boolean value
3283	changeState updates the PolicyContext state if it matches the expected state
3284	policyContext.Destroy will transition state from ready to destroying and then to destroyed returning an error if any step fails
3285	policyIdentityLogName returns a log name combining transport and policy identity of an image reference
3286	requirementsForImageRef returns policy requirements based on image reference and available transport scopes
3287	ParseImageName will return an ImageReference and an error if the image name is not correctly formatted
3288	BlobInfoFromOCI1Descriptor converts OCI descriptor to blob info
3289	OCI1FromManifest parses a manifest byte slice to create and return an OCI1 struct, or an error if parsing fails.
3290	OCI1FromComponents constructs an OCI1 object from image configuration and layers
3291	newReference validates Docker references and returns an error if they contain both tags and digests
3292	tagOrDigest returns the tag or digest of a Docker reference, or an error if it has neither.
3293	updateEmbeddedDockerReference updates the embedded Docker reference if necessary and allowed, returning an error if not.
3294	isTTY checks if the writer is a terminal
3295	copyUpdatedConfigAndManifest updates image config and manifest, returns updated manifest or error
3296	createProgressBar adds a progress bar to copy operations and returns it.
3297	copyConfig will copy configuration from source image to destination image and validate the digest
3298	diffIDComputationGoroutine calculates the digest of a layer stream using a decompressor and sends the result or error through a channel.
3299	computeDiffID computes a digest from a stream after optionally decompressing it using a given function
3300	compressGoroutine will compress data from reader to writer and handle errors
3301	newDockerClient creates a Docker client with the specified system context and host URL, handling different schemes like Unix, HTTP, and HTTPS.
3302	defaultPolicyPath returns the path to the signature policy based on the system context
3303	NewPolicyFromFile reads a file and returns a Policy object or an error if the file is invalid.
3304	NewPolicyFromBytes will parse JSON data into a Policy object and return it or an error if the format is invalid
3305	newPolicyRequirementFromJSON parses JSON data to create a specific policy requirement object based on the type field. An error is returned if the type is unknown or if there's an issue unmarshalling the data.
3306	newPRSignedBy creates a policy reference signed by with validation errors for invalid keyType, simultaneous keyType/keyData usage, and missing signedIdentity
3307	newPRSignedByKeyPath creates a new prSignedBy instance using the specified key type, path, and signed identity, returning an error if creation fails
3308	NewPRSignedByKeyPath creates a policy requirement signed by a key from a specified path.
3309	newPRSignedByKeyData creates a new prSignedBy instance with the given key type, empty string, key data, and signed identity.
3310	NewPRSignedByKeyData creates a policy requirement from key data and identity.
3311	IsValid checks if the key type is valid
3312	newPRSignedBaseLayer creates a new prSignedBaseLayer instance from a given PolicyReferenceMatch, returning an error if the input is nil.
3313	newPolicyReferenceMatchFromJSON will create a PolicyReferenceMatch from JSON data based on the type field and return it along with any errors encountered during unmarshalling.
3314	newPRMExactReference will parse a Docker reference and return a PRM exact reference or an error if the format is invalid or missing required components
3315	newPRMExactRepository will create a new PRM exact repository instance from a Docker repository string and return an error if the format is invalid
3316	newImageSource resolves an image reference to create a storageImageSource with metadata parsing.
3317	getBlobAndLayerID retrieves a blob and its corresponding layer ID from storage, handling both layer and data items, applying compression options, and managing concurrency.
3318	computeID calculates and returns the image ID based on the manifest and stored blob diff IDs.
3319	PutManifest updates storage with validated manifest blob.
3320	PutSignatures will store the concatenated signatures and their sizes in storageImageDestination.
3321	newImage will create a new image from a source and return it along with its size and an error if any step fails
3322	newImageSource creates a temporary directory, extracts an image source, cleans up on error, and returns the image source or an error
3323	LoadManifestDescriptor converts OCI image reference to manifest descriptor.
3324	Close will delete temporary directory and close unpacked source returning any errors encountered
3325	append will add a string to the ordered set if it's not already included
3326	isMultiImage checks if an image has multiple layers and returns a boolean and an error
3327	lockPath acquires a lock on a given path, increments its reference count, and locks the path's mutex.
3328	unlockPath releases a lock on a given path and removes it from the map if ref count reaches zero
3329	view will execute a transactional function on the cache's BoltDB instance, ensuring exclusive access and proper resource management.
3330	update will apply a transactional function to a BoltDB cache and handle errors and locking
3331	uncompressedDigest fetches an uncompressed digest from BoltDB buckets or returns an empty string if not found
3332	appendReplacementCandidates updates cache bucket with new candidate entries and returns updated list
3333	indexExists checks if an index file exists at the specified path returns true if it does exist or if there's an error other than "file does not exist"
3334	createSignature will generate a GPG signature for a given manifest and key identity returning the signature and any errors encountered
3335	ParseReference will split a reference into directory and image then create a new reference object or return an error
3336	NewReference will return an OCI reference and an error if the directory or image name is invalid
3337	ociReference.getIndex will return an image index and an error if the JSON file cannot be opened or decoded
3338	LoadManifestDescriptor converts ImageReference to ociReference and returns Descriptor or error
3339	blobPath generates a blob path based on a digest and shared blob directory, validating the digest first.
3340	SignDockerManifest will generate a signed Docker manifest and return it along with any errors encountered during the signing process
3341	VerifyDockerManifestSignature checks Docker manifest signature against expected values and returns the signature or an error if verification fails.
3342	newOpenshiftClient creates a client using openshift reference and returns it along with any errors encountered during the process.
3343	doRequest sends HTTP request with specified method, path, and body returns response body or error
3344	getImage retrieves an image from OpenShift using the provided namespace, stream, and image name, returning an image object and any errors encountered during the process.
3345	convertDockerImageReference will return a modified Docker image reference and an error if the input is invalid
3346	ensureImageIsResolved checks if an image is resolved and sets docker source if not.
3347	newImageDestination creates a new image destination using the given system context and reference, returns an ImageDestination object or an error
3348	newUntrustedSignature creates a new untrusted signature with the provided Docker manifest digest and reference
3349	MarshalJSON will convert an untrustedSignature to JSON, returning an error if any required fields are missing.
3350	UnmarshalJSON method unmarshals JSON data into untrustedSignature struct and returns error if invalid JSON format is encountered
3351	verifyAndExtractSignature checks signature validity and extracts details or returns errors
3352	RewriteReference rewrites a container image reference using a specified prefix and returns the updated reference or an error if the prefix is invalid.
3353	getV1Registries will process V1 registries from config and return a list of Registry objects along with their properties and an error if any issue occurs during processing
3354	getConfigPath returns the configuration path based on context or default system registries config path
3355	GetRegistries retrieves system registries from a configuration file, handling caching and version compatibility.
3356	readRegistryConf will return the contents of a registry configuration file as a byte slice and an error if the file cannot be read
3357	Manifest will return the manifest blob MIME type and an error
3358	ConfigUpdate updates the tarball reference's configuration and annotations.
3359	parseImageAndDockerReference will return two docker references and an error if the second reference is invalid
3360	parseDockerReferences will return two named Docker references and an error if parsing fails
3361	ListNames returns a sorted list of non-deprecated transport names
3362	NewReference constructs an OSTree image reference from image and repo strings, resolving the repository path and adding a default tag if none is specified.
3363	signaturePath constructs a path to a signature file based on the given index
3364	ValidateImageName checks if the image name is valid and returns an error if it's not.
3365	SplitPathAndImage returns path and image based on OS
3366	ValidateOCIPath checks if a path contains a valid OCI reference and returns an error if it does not meet the criteria based on the operating system.
3367	ValidateScope checks if the scope is valid on Windows or non-Windows systems, cleans the path, and returns an error if invalid.
3368	BlobInfoFromSchema2Descriptor converts a descriptor to blob info
3369	Schema2FromManifest converts manifest to Schema2 struct and returns it along with any errors encountered during unmarshalling.
3370	Schema2FromComponents constructs a new Schema2 object using the given components.
3371	SetAuthentication updates system context with authentication details for a registry, returning an error if unsuccessful.
3372	RemoveAuthentication removes authentication from system context for given registry.
3373	RemoveAllAuthentication clears authentication details from system context.
3374	readJSONFile reads a Docker config file from a given path, returns it as a dockerConfigFile struct, and handles legacy format if specified
3375	modifyJSON updates JSON content using provided editor function and saves changes
3376	findAuthentication will return authentication details from a JSON file or a credential helper an error will be returned if authentication details cannot be found
3377	NewDestination creates a new Destination instance with the given writer and reference, initializes tar writer, sets up repository tags and blob map.
3378	AddRepoTags appends repository tags to Destination's repoTags field
3379	writeLegacyLayerMetadata generates metadata for legacy layers from descriptors, returns paths, and the last layer ID, handling symlinks, version files, and config JSONs.
3380	sendSymlink creates a tar link header and writes it to the destination.
3381	sendBytes sends bytes to a file and returns an error
3382	sendFile sends a file over a tar stream, checks size, and returns an error if sizes don't match
3383	Commit will close the tar file associated with the destination and return any errors encountered.
3384	imageMatchesRepo checks if an image matches a repository reference
3385	resolveImage retrieves an image from storage using either its ID or name, resolving any references and updating the object accordingly.
3386	storageReference's Transport method returns a new image transport with store, UID, and GID maps.
3387	StringWithinTransport constructs a string representation of a storage reference including transport details and optional named or ID information.
3388	PolicyConfigurationNamespaces returns a list of namespaces derived from the storage reference.
3389	GzipDecompressor returns a reader to decompress data from the input reader or an error if it fails.
3390	Bzip2Decompressor returns a decompressed reader from a given input reader.
3391	XzDecompressor returns a reader that decompresses data from the input reader or an error if decompression fails.
3392	DetectCompression identifies compression format from reader returns decompression func and new reader or error
3393	newImageDestination creates a Docker image destination from a system context and reference returns an ImageDestination and an error if creation fails
3394	mountBlob attempts to mount a blob from a source repository to a destination, handling cases where the mount is ignored and falling back to uploading.
3395	bicTransportScope returns a BICTransportScope object with Opaque set to the domain of the given docker reference
3396	newBICLocationReference returns a BICLocationReference object from a docker reference
3397	parseBICLocationReference will return a named reference and an error if parsing fails
3398	NewSourceFromStream creates a Source from an inputStream by saving it to a temp file, handling decompression, and returning an error if any step fails.
3399	readTarComponent will read a tar component from a source and return its bytes and an error if the read fails
3400	ensureCachedDataIsPresent will update cache data from tar manifest and config if not already present, returning an error if any step fails
3401	loadTarManifest reads tar manifest file and returns decoded ManifestItems or error
3402	Close method removes tar path on close if specified and returns error if fails
3403	newImageDestination initializes a Docker image destination with validation and asynchronous loading.
3404	imageLoadGoroutine will send error or close reader after loading image to Docker engine
3405	NewReference creates an ImageReference from file and image paths, resolving and validating them before returning an error if any step fails.
3406	createOCIRef creates a temporary directory and returns OCI reference and error
3407	createUntarTempDir creates a temporary directory, unarchives a file there, and cleans up on error
3408	destructivelyPrioritizeReplacementCandidatesWithMax sorts candidates based on timestamps and returns up to maxCandidates replacements.
3409	newImageDestination creates a new image destination for OSTree refs, ensuring directory exists and returns an error if it fails
3410	resolveExistingPathToFullyExplicit will return the absolute path with symlinks resolved and cleaned or an error
3411	newImageDestination creates a new image destination or overwrites an existing one if it matches the expected container image directory structure.
3412	isDirEmpty checks if a directory is empty and returns a boolean along with an error
3413	removeDirContents deletes all contents of a directory and returns an error if any operation fails
3414	GetRepositoryTags fetches repository tags using Docker API, returning a list of tags and handling pagination through links.
3415	DefaultCache returns a BlobInfoCache from disk or memory if an error occurs.
3416	uncompressedDigestLocked retrieves an uncompressed digest from cache or returns empty if not found
3417	Close method will delete temporary directory and close unpacked destination returning any errors encountered
3418	PutManifest forwards manifest to unpacked destination
3419	Commit method commits changes to the OCI archive image destination, wraps errors, and tars the directory.
3420	tarDirectory will create a tar file from a directory and return an error if there is an issue with reading or writing the files
3421	ParseStoreReference extracts a storage reference from a given string and returns a storageReference object along with an error if any issues arise during the process.
3422	chooseDigestFromManifestList selects a digest from a manifest list based on system context and returns it or an error
3423	ChooseManifestInstanceFromManifestList selects a digest from a Docker manifest list.
3424	manifestSchema1FromComponents creates a generic manifest from schema1 components and returns it along with an error
3425	manifestDigest returns a digest from the source or loaded manifest, handling various cases and errors
3426	deleteImage will remove an image from a registry and handle authentication and errors
3427	Schema1FromComponents creates a new Schema1 object from components and returns it along with any errors encountered during initialization.
3428	initialize will check layer and history lengths, unmarshal V1Compatibility, and return error if any step fails
3429	ToSchema2Config converts schema 1 to schema 2 config by processing history, adjusting DockerVersion, building rootfs, manipulating JSON fields, and finally marshalling the result.
3430	Digest calculates a manifest's digest, handling Docker V2 schema 1 signatures.
3431	MatchesDigest verifies if the manifest's digest matches the expected digest.
3432	NormalizedMIMEType maps input MIME types to standardized values.
3433	FromBlob parses a blob based on its MIME type returning a Manifest or an error
3434	NewReference resolves a path to an image reference and returns it along with any errors encountered.
3435	layerPath combines directory path and digest to form a full path
3436	dirReference's signaturePath returns path to signature file at given index
3437	New creates a pool of workers with the specified size and constructor function
3438	NewFunc creates a pool with workers processing tasks using a given function.
3439	ProcessTimed processes a job with a timeout returning the result or an error if timed out
3440	SetSize adjusts pool size asynchronously stopping excess workers
3441	GetSize returns the current size of the worker pool
3442	TL will return the top-left corner point of the rectangle
3443	BR method returns the bottom-right corner point of the rectangle
3444	CVBox will convert Box2D to CvBox2D
3445	Points method returns slice of Point2D32f from Box2D's cvBoxPoints function
3446	FOURCC will return a 32-bit unsigned integer representing the given four characters
3447	Merge combines four images into a single destination image using OpenCV's cvMerge function.
3448	Split will separate image channels into blue, green, red, and alpha components
3449	AddWeighted combines two images using weighted sums and stores the result.
3450	And performs logical AND operation on two images and stores result in third image with no mask applied
3451	AndWithMask applies a bitwise AND operation between two images using a mask.
3452	AndScalar applies a scalar operation to an image without a mask.
3453	AndScalarWithMask applies a mask to a scalar value and stores the result in a destination image.
3454	Or performs bitwise OR operation on two images and stores result in destination image with optional mask.
3455	OrWithMask performs bitwise OR operation on two images using a mask.
3456	OrScalar performs OR operation between src image and scalar value storing result in dst image with no mask.
3457	OrScalarWithMask applies a bitwise OR operation between src and value using mask, storing the result in dst.
3458	AddWithMask adds two images using a mask and stores the result.
3459	AddScalar adds a scalar value to each pixel in src and stores the result in dst.
3460	AddScalarWithMask adds a scalar to an image with a mask.
3461	Subtract will subtract two images and store the result in a destination image without using a mask
3462	SubtractWithMask subtracts pixels from src2 to dst using mask
3463	SubScalar subtracts a scalar value from each pixel of an image and stores the result in another image.
3464	SubScalarWithMask subtracts a scalar from source image using a mask and stores result in destination image
3465	SubScalarRev subtracts a scalar from images without a mask.
3466	SubScalarWithMaskRev subtracts a scalar from an image with a mask.
3467	AbsDiff calculates the absolute difference between two images and stores the result in a third image.
3468	AbsDiffScalar calculates the absolute difference between a scalar value and each pixel of an image and stores the result in another image.
3469	MeanStdDevWithMask calculates mean and standard deviation of an image with a mask.
3470	CreateSeq initializes and returns a sequence object with specified flags and element size
3471	Push will add an element to the sequence and return the new pointer to the element.
3472	Pop removes an element from a sequence.
3473	PushFront adds an element to the front of a sequence and returns the new head.
3474	PopFront removes an element from the front of the sequence and returns it.
3475	GetElemAt retrieves an element from a sequence at a specified index and returns it as an unsafe pointer.
3476	RemoveAt removes an element from a sequence at a specified index
3477	Delay will return an Option to set the delay duration on a Config object
3478	BackOffDelay calculates exponential backoff delay based on attempt number and configuration.
3479	Error will return a formatted string listing all non-nil errors with their indices.
3480	Arguments appends strings to request builder's args and returns self
3481	BodyString sets request body to string and returns RequestBuilder
3482	BodyBytes sets request body from byte slice and returns RequestBuilder instance
3483	Body sets the request body and returns the builder.
3484	Option method sets a key-value pair in the RequestBuilder's options map and returns the builder.
3485	Header adds a header to the request builder and returns it
3486	Send sends a request using the specified context, URL, command, and options, returning a response or an error.
3487	Exec sends HTTP request and decodes response or returns error
3488	Next will return a message and an error if the response or JSON decoding fails
3489	Cancel will close the subscription's output stream if it exists, returning an error if the operation fails.
3490	FileList retrieves a file list from a shell and returns the first object or an error if no objects are found.
3491	Cat sends a request to retrieve the contents of a file and returns a reader or an error.
3492	List retrieves file links from a given path and returns them or an error.
3493	Pin will send a request to pin a file or directory recursively and return an error if it fails
3494	Pins method returns a map of pin info and an error from executing a request
3495	Version will return shell version commit and error if request fails
3496	SwarmPeers sends a request to retrieve peer information and returns it along with any errors encountered.
3497	SwarmConnect sends a swarm connection request with addresses and returns an error.
3498	DagPutOptions will apply options to a new DagPutSettings instance and return it along with any errors encountered
3499	Pin method sets the pin option for dag put settings and returns an error if it fails
3500	Kind sets the DAG kind option and returns a DagPutOption function
3501	Hash sets the hash value for a DAG put option.
3502	AddDir adds a directory to the shell, returns the hash or an error
3503	Publish will send a publish request to a shell node with a given name and value and return any errors encountered during execution
3504	PublishWithDetails sends a publish request with details and returns the response or error.
3505	ResolveValue will return a resolved value from bind vars or the current value, an error if lookup fails, or NULL if no valid value is found
3506	GenerateQuery constructs SQL query with bound variables and extras, handling errors if variable not found.
3507	EncodeValue encodes a bind variable to SQL, handling tuples by wrapping values in parentheses.
3508	Lex scans tokenizes input skipping comments if allowed returns token type and value
3509	skipStatement advances the tokenizer until it encounters a semicolon or EOF.
3510	reset will clear all fields in Tokenizer struct
3511	Preview analyzes SQL to determine statement type based on first word and content.
3512	NewPlanValue will return a PlanValue based on the type of expression passed and handle different types like SQLVal, ListArg, ValTuple, NullVal, and return an error if the expression is too complex.
3513	StringIn checks if a string matches any given value and returns true if it does.
3514	NewTrackedBuffer creates a new TrackedBuffer instance with a given NodeFormatter and initializes its Buffer field.
3515	NewStringArena creates a new StringArena with a specified size.
3516	NewString appends byte slice to buffer and returns string view
3517	SpaceLeft returns remaining buffer capacity in StringArena.
3518	ParseStrictDDL will return a SQL statement and an error if parsing fails
3519	ParseNext will return the next statement from the tokenizer or an error if the end of file is reached
3520	Append formats a SQLNode to a buffer.
3521	ExprFromValue converts a sqltypes Value to an AST Expr, handling null, integral, float, decimal, and quoted values, returning an error for unsupported types.
3522	Backtick will add backticks around input string doubling any existing backticks
3523	NewValue creates a new Value based on the given type and byte slice, handling different data types and returning an error if the type is invalid.
3524	String method returns a formatted string representation of the value based on its type and whether it's quoted or not
3525	EncodeSQL method encodes a SQL value using a binary writer based on its type and whether it's quoted.
3526	EncodeSQL appends SQL-encoded values to a buffer, separating each row and value with commas.
3527	EncodeSQL encodes SQL based on tuple columns using IN or equality method.
3528	WalkStatement processes SQL nodes, converting them based on type, and returns a bool and error.
3529	WalkSelect processes SQL nodes converting values and comparisons, then returns true and no error.
3530	BindVariablesEqual checks if two maps of bind variables are equal using reflection.
3531	New creates a new JWTMiddleware instance with default options if none provided
3532	HandlerWithNext checks JWT and calls next handler if valid.
3533	FromAuthHeader extracts token from HTTP Authorization header returns token and error if format is incorrect
3534	FromParameter creates a TokenExtractor that retrieves a query parameter's value from an HTTP request.
3535	FromFirst combines multiple token extractors to return the first non-empty token or an error
3536	getHelloPacket will construct and return an RPC object containing subscription options for all topics in PubSub's myTopics field.
3537	NewFloodsubWithProtocols initializes a Floodsub pub-sub system with specified protocols and options.
3538	NewFloodSub creates a new Floodsub pubsub instance with default protocol ID.
3539	NewLRUBlacklist creates a new LRU blacklist with the given capacity and returns it or an error if creation fails
3540	NewRandomSub creates a new PubSub instance with RandomSubRouter using given context, host, and options.
3541	NewGossipSub creates a new PubSub instance with a GossipSubRouter and options.
3542	NewPubSub initializes a new pubsub system with options and returns it along with an error.
3543	WithValidateThrottle sets a validation throttle for PubSub and returns an Option to apply it.
3544	WithBlacklist sets a blacklist option on a PubSub instance.
3545	handleRemoveSubscription will cancel a subscription remove it from topic and announce to other subscribers
3546	handleAddSubscription will add a subscription to the PubSub instance and notify other subscribers
3547	announce sends a subscription message to peers, handling queue overflow by retrying
3548	notifySubs sends a message to all subscribers of each topic, logging if a subscriber is too slow.
3549	seenMessage checks if a message ID has been seen before using a PubSub struct.
3550	subscribedToMsg checks if a message's topic ID matches any of the subscriber's topics
3551	msgID will return a concatenated message ID from the sender and sequence number
3552	pushMsg filters and validates messages, then publishes them or rejects them based on conditions.
3553	validate checks message signature and topic values before sending it
3554	validateSingleTopic checks if message validation can proceed based on topic-specific throttling, returning validation result or false if throttled.
3555	getValidators returns validators for a given message's topics.
3556	Subscribe to a topic with options and return a subscription object or an error
3557	SubscribeByTopicDescriptor creates a subscription for a topic descriptor with options and returns it or an error if auth or encryption modes are set.
3558	GetTopics sends a request to PubSub and returns the list of topics.
3559	Publish will send a message to a topic with optional signing an error will be returned if signing fails
3560	ListPeers sends a request to retrieve peers subscribed to a given topic and returns their IDs.
3561	WithValidatorTimeout sets a timeout for a validator and returns an error if validation fails
3562	WithValidatorConcurrency sets concurrency level for validator
3563	RegisterTopicValidator adds a validator for a topic and returns any errors encountered during registration.
3564	UnregisterTopicValidator removes a topic validator and returns an error
3565	DefaultMetricPrefix prepends "tchannel." to a metric name with associated tags
3566	MetricWithPrefix constructs a metric name with a given prefix, name, and tags, appending relevant keys and values to the buffer.
3567	NewClient creates a new Client instance with specified Channel, target service, and optional HostPort.
3568	Call sends a request to a server and returns the response or an error
3569	CallPeer initiates a peer call with the given context, service name, method, argument, and response, returning an error if the call fails.
3570	CallSC initiates a remote procedure call using the specified sub-channel and method, wrapping the call with additional functionality before returning any errors.
3571	ReadResponse reads HTTP response from TChannel call and returns it along with any errors encountered during the process.
3572	writeHeaders method writes HTTP headers to a response writer using a typed write buffer.
3573	ResponseWriter creates a http.ResponseWriter from a tchannel.ArgWritable and returns it along with a finish function to complete the request.
3574	ReadHeaders reads headers from a reader and returns them as a map with errors if any.
3575	NewTCPRawRelay creates a TCP relay for raw connections copying data between them.
3576	NewClient initializes a new client with default options, parses configuration, sets initial peers, and returns the client instance.
3577	Advertise method starts service discovery, performs initial advertisement, triggers handler on advertised event, and runs an advertising loop.
3578	Handle processes tchannel calls, reads JSON headers and args, invokes handler, handles errors, and writes responses.
3579	Start method initializes and starts a TChannel server with default settings, handling errors and updating host port.
3580	Server.Port extracts and returns the port number from HostPort string.
3581	SetStrategy updates the score calculation strategy for a peer list and recalculates scores for all peers.
3582	Add hostPort to PeerList or return existing peer.
3583	GetNew selects a new peer from a list, avoiding previously chosen ones. Returns the selected peer or an error if no suitable peer is found.
3584	Get will return a Peer or an error if no peers are available
3585	Remove will delete a peer from the list by hostPort and return an error if not found
3586	Copy will return a copy of the peer list by host port mapping an error will be returned if the copy process fails
3587	Len method returns the number of peers in the list while ensuring thread safety through locking
3588	exists checks if a peer exists by host:port and returns its score and existence status
3589	getPeerScore retrieves peer score and existence from hostPort map
3590	onPeerChange updates peer score if changed
3591	updatePeer updates peer score and heap if it changes
3592	getConn returns a connection from either inbound or outbound connections based on the index
3593	GetConnection returns a connection or creates one if none exists, ensuring only one attempt per goroutine.
3594	getConnectionRelay retrieves a connection or creates one with a timeout, avoiding race conditions.
3595	canRemove checks if all connections are closed
3596	addConnection adds a new connection to the peer and updates the status.
3597	removeConnection removes a connection from a slice and returns whether it was successful
3598	connectionCloseStateChange updates peer's connection state and notifies about removal.
3599	Connect method establishes peer connection using channel and returns connection object or error
3600	BeginCall initiates a call to a service method, validates it, retrieves a connection, and returns the outbound call or an error.
3601	NumConnections returns the count of inbound and outbound connections for a peer.
3602	NumPendingOutbound returns the total number of pending outbound connections for both inbound and outbound peers
3603	isEphemeralHostPort checks if the host port is empty or matches specific values
3604	Get retrieves a value from the handler using a key, returning an error if the key is invalid or not found.
3605	Set method updates key-value pair and returns error if invalid key.
3606	ClearAll will remove all key-value pairs from handler's map if user is authorized
3607	NewChannel creates a new channel instance with default or provided options, validating inputs and initializing various components like logger, stats reporter, and idle check.
3608	Serve starts listening on a channel's listener and logs the event.
3609	ListenAndServe starts listening on a given host port and serves requests until an error occurs or the server is stopped.
3610	Register method on Channel registers a handler with a specific method name on a sub-channel.
3611	PeerInfo retrieves and returns the local peer information from a channel safely.
3612	GetSubChannel retrieves or creates a subchannel for a given service name applying optional configurations.
3613	serve handles incoming connections on a channel, performing handshakes and managing errors with backoff.
3614	Ping method checks connection to a host and port using a channel's root peers.
3615	StatsTags returns a copy of commonStatsTags as a new map.
3616	Connect method establishes a connection using a given host port and returns a Connection object or an error if the operation fails due to invalid state, timeout, cancellation, or other issues.
3617	exchangeUpdated updates peer info if remote hostport is known
3618	updatePeer updates peer info on channel and sub-channels then calls update complete callback
3619	addConnection adds a connection to the channel if it's active and matches the channel's state, returning true on success
3620	removeClosedConn removes a closed connection from the channel's mutable connections map if it's already closed.
3621	connectionCloseStateChange updates channel state based on connection closure events and logs the new state
3622	Channel's State method returns its current state safely.
3623	NewReader creates a new Reader instance from a pool, sets its reader field, and returns it.
3624	ReadUint16 reads two bytes from the reader and returns them as a big-endian uint16, or 0 on error.
3625	ReadString reads up to n bytes from the reader and returns them as a string or an empty string on error.
3626	ReadLen16String reads a 16-bit unsigned integer representing the length and returns a string of that length.
3627	Register registers Thrift and JSON on a channel
3628	Run method starts a trace, validates it, and logs the result.
3629	Get retrieves a timer from the pool or creates a new one, ensuring it's in a stopped state.
3630	relayTimerPool's Put method releases a relayTimer unless verification is enabled.
3631	Start method sets relay timer properties and resets it if active.
3632	Release marks a timer as released and puts it back into the pool after verifying it's not active.
3633	NewLogger creates a logger with a writer and optional log fields.
3634	NewTCPFrameRelay creates a TCP frame relay with destinations and a modifier function, returns a Relay and error if failed.
3635	tallyTags will create a map of tags and their values from the knownTags struct fields
3636	Isolated locks a SubChannel updates its peers with new siblings sets strategy and unlocks
3637	Isolated checks if the top channel's peers differ from the current channel's peers
3638	Register will add a handler for a specific method on a subchannel
3639	GetHandlers returns a copy of the handlers map for the SubChannel, or panics if the handler type has been changed.
3640	StatsTags returns a map of stats tags with the subchannel tag set to the service name
3641	registerNewSubChannel registers a new sub-channel for a service and returns it along with a flag indicating if it was added
3642	subChMap.get retrieves a SubChannel for a given serviceName and returns it along with a boolean indicating its existence.
3643	getOrAdd retrieves or adds a subchannel for a service returning the channel and whether it was added
3644	Discover will return a list of host ports and an error if the discovery fails
3645	Start will listen on a connection and serve HTTP requests using a multiplexer.
3646	listen method sets default ports, initializes HTTP mux, listens on TCP port, and returns any errors encountered
3647	WriteRequest sends HTTP request details to a TChannel call with method, URL, headers, body, and closes writers.
3648	ReadRequest will parse a request from tchannel arguments to an http.Request object, handling headers and returning any errors encountered.
3649	NewReadBufferWithSize creates a new ReadBuffer instance with a specified buffer size.
3650	ReadByte will return a byte from the buffer and an error if the buffer is empty or has an error
3651	ReadBytes will return the next n bytes from the buffer or an error if not enough bytes are available
3652	ReadString reads up to n bytes from the buffer and returns them as a string, or an empty string if no bytes are available.
3653	ReadUint16 reads two bytes from the buffer and returns them as a big-endian uint16, or zero if reading fails.
3654	ReadUint32 will return a uint32 value from the buffer or 0 if reading fails
3655	ReadUint64 reads 8 bytes from the buffer and returns a uint64 in big-endian format or 0 if no bytes are available.
3656	ReadUvarint reads an unsigned variable-length integer from the buffer and returns its value.
3657	ReadLen8String reads a single byte to determine length then reads that many bytes as a string.
3658	ReadLen16String reads a 16-bit unsigned integer and returns a string of that length.
3659	FillFrom will fill buffer from reader and return the amount of bytes read and an error if it fails
3660	Wrap assigns a byte slice to a ReadBuffer's buffer, sets remaining to the same slice, and resets any error.
3661	WriteSingleByte will write a single byte to the buffer and return an error if the buffer is full
3662	WriteBytes reserves space in buffer and copies input bytes if available.
3663	WriteUint16 reserves space and writes a big-endian uint16 to it
3664	WriteUint32 will write a 32-bit unsigned integer to the buffer using big-endian byte order.
3665	WriteUint64 will write an unsigned 64-bit integer to the buffer if there is enough space available
3666	WriteUvarint encodes and writes a variable-length unsigned integer to the buffer.
3667	WriteString reserves space in buffer and copies string into it
3668	WriteLen8String will write a string to the buffer with a 8-bit length prefix an error will be set if the string is too long
3669	WriteLen16String will write a 16-bit length-prefixed string to the buffer, setting an error if the string is too long
3670	DeferByte will return a reference to the first byte in remaining buffer or an empty reference if buffer is full
3671	DeferBytes defers writing n bytes and returns a reference to them.
3672	FlushTo will write buffered data to an I/O writer and return the number of bytes written and an error if any
3673	Reset will clear the buffer and reset the error
3674	Wrap assigns buffer to w.buffer and sets remaining to b
3675	Update method updates the reference to a new uint16 value using BigEndian encoding.
3676	Update will store a new unsigned 32-bit integer in the reference if it's not nil
3677	Update will set the reference to a new big-endian encoded uint64 value if it's not nil
3678	Update method copies byte slice to BytesRef if it's not nil.
3679	UpdateString updates the string in BytesRef if it's not nil
3680	ArgReader starts argument reading and returns reader or error
3681	finish updates checksum and flags based on whether more fragments exist
3682	newWritableChunk creates a new writable chunk with a checksum and contents buffer
3683	writeAsFits writes bytes to a chunk, ensuring it fits, updates checksum, and returns written count
3684	newFragmentingWriter initializes a fragmentingWriter with a logger, sender, and checksum
3685	ArgWriter starts an argument and returns the writer or an error
3686	BeginArgument starts an argument and handles state transitions and errors.
3687	Write method for fragmentingWriter will write bytes to current chunk and handle overflow by flushing and starting new chunks until all bytes are written or an error occurs
3688	Flush will finish current chunk and fragment send fragment flush error create new fragment reset current chunk return error
3689	Close method on fragmentingWriter handles state transitions and flushing based on whether there are more arguments or if the current fragment is full.
3690	handleCallRes forwards frame to outbound and returns true on error
3691	Arg2Reader reads from arg1Reader to get method then returns arg2Reader
3692	handleError processes error frames logs issues and forwards them returning whether forwarding failed
3693	doneReading processes the completion of an outbound call, logging errors, updating stats, and shutting down resources based on success or failure conditions.
3694	newFragment creates a new writableFragment with the given initial state and checksum, writing the message and checksum to it.
3695	flushFragment will send a frame over the connection or return an error if there's a problem
3696	failed logs error and returns current or new error
3697	arg1Reader returns an ArgReader and an error by calling argReader with specific parameters.
3698	arg2Reader returns an ArgReader for argument 2 and an error if unsuccessful
3699	arg3Reader returns an ArgReader for the third argument with pre-processing and completion handlers.
3700	argReader will return an ArgReader and an error if the state mismatch or fail to read arguments
3701	recvNextFragment reads the next fragment from the peer, returns it along with any errors encountered.
3702	releasePreviousFragment will set previousFragment to nil and call done on it if it's not nil
3703	failed logs reader error returns existing or new error
3704	parseInboundFragment reads a frame's payload to create a readableFragment and returns it along with any errors encountered
3705	NewContext creates a new context with a timeout returns the wrapped context and a cancel function
3706	WithHeaders adds headers to a context and returns it.
3707	healthCheck performs periodic health checks on a connection and logs failures or closes the connection based on consecutive failures.
3708	SetTimeout updates the context builder's timeout and returns itself.
3709	AddHeader adds a header to ContextBuilder and returns itself
3710	SetHeaders updates the headers in ContextBuilder and marks to replace parent headers before returning the builder.
3711	SetConnectTimeout updates connection timeout and returns ContextBuilder
3712	SetRetryOptions updates RetryOptions in ContextBuilder and returns updated builder
3713	SetTimeoutPerAttempt sets the timeout per attempt on a context builder and returns it
3714	SetParentContext updates the parent context of ContextBuilder and returns itself
3715	Build constructs a context with headers and a cancellation function based on input options and parent context.
3716	overrideHeaders updates headers based on CallOptions fields
3717	Read reads all data from the reader into bs and returns an error if any occurs.
3718	ReadJSON reads JSON data from the given reader into the specified interface, handling empty data gracefully.
3719	NewArgWriter initializes ArgWriteHelper with writer and error
3720	Write will write bytes to a writer and return an error if it fails
3721	WriteJSON encodes data to JSON using writer and returns error
3722	Register sets up a handler to serve pprof over HTTP using a registrar.
3723	Count returns the number of active items in relayItems after subtracting tombstones.
3724	Get will return a relay item and a boolean indicating if it was found
3725	Add method to relayItems struct adds an item with a given ID and locks the items map during operation
3726	Entomb marks a relay item for deletion after a specified duration, returns the item and a success flag.
3727	NewRelayer creates a new Relayer instance with specified Channel and Connection parameters.
3728	Relay will process a Frame, handling non-call requests by checking outgoing calls, and forwarding if necessary. For call requests, it handles them using newLazyCallReq.
3729	Receive processes a frame, checks its type, and handles it accordingly, returning whether the call was sent successfully and any failure reason.
3730	handleNonCallReq processes a non-call request, routes it using appropriate maps, handles timeouts, and manages relay items based on frame type and status.
3731	addRelayItem adds a new relay item to either inbound or outbound based on originator status and returns it
3732	failRelayItem handles a failed relay item, stops its timeout, entombs it, sends system error if applicable, and decrements pending count.
3733	WriteStruct serializes a struct to a writer using a protocol writer and returns any errors encountered during the process
3734	ReadStruct reads a struct from a reader using a protocol and returns an error if unsuccessful
3735	EnsureEmpty checks if reader has unexpected bytes after given stage returns error if found unexpected bytes or EOF otherwise
3736	NewServer creates a server using options and returns it.
3737	Advertise will configure and start a Hyperbahn client with given hosts returning an error if setup fails
3738	handleCallReqContinue forwards frame on connection's inbound, returns true if forwarded successfully, otherwise false
3739	dispatchInbound handles inbound calls, reads methods, updates stats, checks for cancellation, and processes the call using a handler.
3740	CallOptions will return a new CallOptions instance populated with values from InboundCall
3741	Response method returns InboundCallResponse object, setting error if present
3742	SendSystemError sends system error if not already sent updates state, marks done, releases fragment, and returns connection error
3743	SetApplicationError sets application error if state mismatch occurs and returns error.
3744	Arg2Writer initializes an ArgWriter with arg1Writer and returns arg2Writer or an error
3745	doneSending updates the response's stats, records latency, cancels the context, and shuts down the message exchange if there are no errors.
3746	newState constructs a state object from Thrift definitions, mapping typedefs and enums.
3747	rootType checks includes and typedefs to resolve the root type
3748	checkInclude splits the type name, updates it, retrieves include details, and returns updated state, new type, and include.
3749	isResultPointer checks if the given Thrift type is not a basic Go type
3750	goType returns the Go type prefix based on the Thrift type
3751	goTypePrefix determines the Go type based on the Thrift type name and returns the corresponding Go type string
3752	NewContext creates a new context with a timeout and returns it along with a cancel function.
3753	newIncomingContext creates a new context with the given call and timeout duration
3754	CurrentCall retrieves the current call from context parameters or returns nil if not available.
3755	New will initialize a new random number generator using the given seed
3756	Health checks the handler's status and returns a response with an optional message.
3757	Headers method returns a map of request headers or nil if not available
3758	ResponseHeaders returns response headers from header context or nil
3759	SetResponseHeaders updates response headers or panics if context not initialized
3760	Child method returns a new context with copied headers
3761	Wrap creates a new ContextWithHeaders from the given context, or wraps it with an empty headers container if none exists.
3762	WrapWithHeaders adds headers to a context and returns a new context with those headers
3763	WithoutHeaders removes headers from a context.
3764	Notify will update the error notifier with a new error and close the channel if it hasn't been notified before, otherwise, it returns an error indicating the notification failed because the error has already been reported.
3765	forwardPeerFrame forwards a frame prioritizing context errors, then receiver channel capacity, and finally other message exchange errors
3766	recvPeerFrame will receive and validate a peer frame or return an error based on context or other issues
3767	recvPeerFrameOfType reads a peer frame and checks its type, returning the frame or an error based on the message type received.
3768	shutdown method ensures safe shutdown of messageExchange by using atomic flags and notifying error channel
3769	newMessageExchangeSet creates a new message exchange set with a given name and logger.
3770	addExchange adds a message exchange to the set returns an error if the set is shut down or the message ID already exists
3771	newExchange creates a new message exchange and returns it along with any errors encountered during creation.
3772	deleteExchange checks if a message ID exists in exchanges or expiredExchanges and deletes it accordingly returning whether found or timed out
3773	removeExchange removes a message exchange and performs cleanup if found or expired.
3774	expireExchange removes a message exchange from set logs expiration and calls onRemoved method
3775	forwardPeerFrame forwards a peer frame to the corresponding message exchange, logging details on success or failure.
3776	copyExchanges creates a copy of message exchanges and returns shutdown status and copied exchanges map
3777	stopExchanges will stop exchanges due to an error and notify blocked callers without shutting down the exchange if it's already stopped
3778	NewFrame initializes a new frame with a given payload capacity and returns it
3779	ReadBody reads the body of a frame from a reader, copying the header and parsing it, then reading the specified payload size or returning if there's no payload.
3780	WriteOut will write out a frame to the given writer and return an error if any step fails
3781	CanRetry checks if an error can be retried based on its code and retry policy.
3782	HasRetries checks if retries can be attempted based on the current attempt count and retry options.
3783	SinceStart calculates duration since request started or returns fallback if RequestState is nil
3784	AddSelectedPeer adds a peer to the selected peers list in RequestState
3785	RunWithRetry will execute a function with retries based on options and return an error if all attempts fail.
3786	ChecksumSize returns the size of the checksum based on its type.
3787	New creates a new checksum instance from the pool and resets it
3788	parseTemplates will return a slice of templates and an error if any file cannot be parsed
3789	NewStringSliceFlag creates a flag for a slice of strings with given name and usage.
3790	withStateFuncs updates template functions with global goType from data
3791	IntrospectOthers returns a map of service names to channel info excluding self.
3792	ReportInfo returns channel information based on options.
3793	IntrospectState returns peer runtime states based on options.
3794	IntrospectState returns runtime states of sub-channels with options.
3795	Peer's introspection state includes host port, inbound/outbound connections, chosen count, and SC count.
3796	IntrospectState returns connection runtime state including ID, state, addresses, exchanges, health checks, last activity, and relayer state if available.
3797	Relayer's IntrospectState method calculates total count, introspects inbound and outbound states, and returns runtime state including max timeout.
3798	IntrospectState retrieves relay item set state based on options and name.
3799	IntrospectState will return the runtime state of a message exchange set including optional exchanges details.
3800	NewContext creates a new context with a timeout returns a wrapped context and a cancel function
3801	WriteResponse sends a response to a TChannel call handling errors and writing arguments.
3802	Wrap will wrap a handler with error handling and response writing logic
3803	initFromOpenTracing will inject a span context using OpenTracing's tracer and Zipkin format returning any errors encountered
3804	startOutboundSpan initiates a new OpenTracing span for an outbound RPC call, sets relevant tags, and configures tracing based on context.
3805	intToIP4 converts a 32-bit integer to an IPv4 address.
3806	servicePeerToHostPort converts a peer to its host and port
3807	NewStatsdReporter creates a new statsd reporter with the given address and prefix returns the reporter and an error if creation fails
3808	UnmarshalText will set ToS to corresponding value from map or return error if invalid.
3809	Push method adds a peer score to the heap and updates its index.
3810	peerHeap's Pop method removes and returns the last element, setting its index to -1 for safety.
3811	updatePeer adjusts the position of a peer score in the heap based on its updated score.
3812	removePeer will remove a peer from the heap based on its score
3813	pushPeer updates peer heap order and adds a new peer score with randomized order.
3814	addPeer adds a peer to the heap and swaps it with a random element
3815	NewClient creates a new TChanClient instance using provided channel, service name, and options.
3816	Add will add a peer to the list or return an existing one if it exists.
3817	Get retrieves a peer by hostPort from the RootPeerList and returns it along with a boolean indicating if it was found.
3818	WithTimeout sets a timeout option for operations.
3819	Methods will return a list of sorted service methods or create them if they don't exist.
3820	InheritedMethods returns a sorted list of inherited methods from the service's ancestor services.
3821	Arguments method returns a list of fields for a given method
3822	ArgList will concatenate method arguments into a comma-separated string, prefixed with "ctx".
3823	CallList constructs method arguments string from struct fields
3824	RetType returns the method's return type or "error" if it has no return value.
3825	WrapResult returns response variable with '&' if it's a pointer type otherwise returns as is
3826	ReturnWith formats response and error names into a string or returns error name if no return exists
3827	Declaration will return a string representing the field's name and type
3828	startIdleSweep initializes and starts an idle sweep process for a channel with given options.
3829	start method initializes idle connection poller logs interval and starts polling if not already started
3830	idleSweep.Stop will stop the poller if it has started and log the action before closing the stop channel.
3831	ResolveWithGoPath checks each candidate Go path for a file and returns it if found, otherwise returns an error.
3832	setExtends updates service extends fields based on import paths or local services.
3833	register adds a handler to the map for a specific method
3834	NewClient creates a client based on options, either external or internal multi-client.
3835	ListenIP retrieves the IP address of the first non-loopback interface or returns an error.
3836	Close will close the listener and wait until all references are released before returning an error if closing fails
3837	ReadArgsV2 reads arguments from a channel and returns them along with any errors encountered.
3838	WriteArgs sends args to a TChannel call and returns responses.
3839	Call will initiate a channel call, send arguments, and return responses or errors
3840	CallSC initiates a channel call with the specified method and arguments, returning the response data and any errors encountered
3841	CallV2 sends a call using subchannel and returns response along with errors.
3842	NewRealRelay creates a new real relay service with given services map returns a Relay instance and error
3843	NewServer initializes a new server instance with the given registrar and registers it with the provided handlers.
3844	RegisterHealthHandler adds a health check handler to the server's metadata.
3845	Handle processes incoming RPC calls, validates them, and routes them to appropriate handlers.
3846	MetricsKey will return a string representing the error code key
3847	NewSystemError creates a new system error with a given code, message, and arguments.
3848	NewWrappedSystemError wraps an error with a system error code and message if it's not already a system error
3849	SystemError's Error method returns a formatted string combining its code and message.
3850	GetContextError will convert specific context errors to custom errors or return the original error if none match.
3851	GetSystemErrorCode extracts system error code from error or returns invalid/unexpected code
3852	ping sends a ping request and waits for a response or an error
3853	handlePingRes forwards a peer frame and logs if unexpected, releasing the ping request if successful
3854	handlePingReq processes ping requests, checks connection state, sends pong response or logs error
3855	SendSystemError sends an error message over a connection and returns any errors encountered during the process.
3856	connectionError logs and handles connection errors for a site, stopping health checks, logging, closing, and notifying exchanges accordingly.
3857	withStateLock acquires state lock, executes function, releases lock, returns any error
3858	withStateRLock acquires a read lock on stateMut executes a function returning an error releases the lock and returns the error
3859	readFrames reads frames from a connection handling errors and releasing frames appropriately
3860	writeFrames sends frames over the connection, logs each, updates activity, and handles stop signal.
3861	hasPendingCalls checks if there are any pending calls or if the relay can't close, returning true if either condition is met
3862	checkExchanges updates the connection's state based on its current state and performs actions like closing exchanges or notifying about state changes.
3863	closeNetwork will close the underlying network connection stop health check set closeNetworkCalled log warning if connection closure fails
3864	getLastActivityTime returns the last activity time of the connection as a time.Time object
3865	Validate checks each method in the service for errors and returns the first encountered error.
3866	logFailedRegistrationRetry logs an error message based on the number of consecutive failures
3867	initialAdvertise attempts to send an advertise message up to maxAdvertiseFailures times, backing off exponentially on failures. It returns the final error encountered.
3868	Service extracts service name from payload based on indices.
3869	TTL extracts and converts a 32-bit big-endian integer from Payload to a duration in milliseconds.
3870	SetTTL updates the TTL field in Payload with the given duration in milliseconds.
3871	finishesCall checks if a frame's message type indicates the end of a call or response.
3872	Flat will return a sorted list of unique strings from PlatformStrings.
3873	Map applies a function to each string in PlatformStrings and returns a new PlatformStrings and any errors encountered.
3874	MapSlice applies a function to slices within a PlatformStrings struct, collecting errors and returning a new PlatformStrings instance.
3875	GetProtoConfig retrieves the ProtoConfig from the config's extensions or returns nil if not found.
3876	MapExprStrings applies a transformation to all string values within a Bazel expression recursively.
3877	FlattenExpr will flatten expressions and return a list of platform strings an error will be returned if any expression cannot be flattened
3878	makePlatformStringsExpr constructs a bzl.Expr based on platformStringsExprs, applying select and concatenating expressions.
3879	String method returns platform OS and Arch separated by underscore or individual value or empty string based on availability
3880	Find will locate a directory containing a specified file starting from a given path and moving up until it reaches the root directory or finds the file, returning the directory path or an error.
3881	runGazelle runs Gazelle with specified mode and directories, handling errors and logging the command execution.
3882	restoreBuildFilesInRepo will walk through the directory and restore build files in each directory it encounters any errors encountered during the process will be logged
3883	FixLoads updates rule file's load statements based on known loads, ensuring consistency and correctness.
3884	fixLoad adjusts a rule's load based on kind mappings and returns it.
3885	newLoadIndex returns the next available rule index based on given rules and conditions.
3886	removeLegacyGoRepository removes legacy go repository from file
3887	Version.Compare will return the comparison result between two versions based on lexicographical order and the difference in their lengths
3888	ParseVersion will return a Version object and an error if the input string cannot be parsed as a valid version number
3889	EmptyFile creates a new File object with specified path and package.
3890	LoadWorkspaceFile reads a file and loads workspace data.
3891	LoadMacroFile reads a file and loads macro data from it.
3892	EmptyMacroFile creates a new macro file and loads data into it
3893	LoadData parses a BUILD file and returns a File object or an error
3894	LoadWorkspaceData parses workspace data and returns a File object or an error.
3895	LoadMacroData parses a .bzl file and returns a File object and an error if parsing fails
3896	ScanAST parses an AST from a Bazel file
3897	ScanASTBody parses AST body, constructs File object, scans expressions, handles def statements, and sets directives.
3898	MatchBuildFileName searches for a file among given names and returns its path if found, otherwise returns empty string.
3899	SyncMacroFile updates or appends a macro function from one file to another
3900	MacroName retrieves the name of the function's statement or returns an empty string.
3901	Sync method processes file loads and rules, updates statements, and manages function insertion and deletion.
3902	Format will sync the file and return formatted content
3903	Save method formats file data and writes it to specified path returning any errors encountered.
3904	HasDefaultVisibility checks if any rule in the file has default visibility.
3905	NewLoad creates a new Load object with the given name and initializes its fields.
3906	Symbols method returns sorted list of symbols from Load object
3907	Has checks if symbol exists in symbols map
3908	Add symbol to Load instance if it doesn't exist update flag
3909	Remove symbol from Load's symbols map and mark updated if present
3910	Insert will add a Load to a File at a specified index and mark it as inserted
3911	NewRule creates a new rule with the given kind and name.
3912	SetKind updates the rule's kind and marks it as updated
3913	AttrKeys will return sorted attribute keys based on priority and lexicographical order.
3914	Attr retrieves an attribute's RHS from a rule based on the key.
3915	AttrString retrieves the value of a specified attribute as a string from a rule. If the attribute or its RHS is not of type StringExpr, it returns an empty string.
3916	AttrStrings retrieves string values from a rule's attribute list.
3917	DelAttr removes an attribute from the rule and marks it as updated
3918	SetAttr updates the attribute of a rule with a new value and marks it as updated
3919	PrivateAttrKeys returns sorted private attribute keys
3920	SetPrivateAttr updates the private attribute of a rule with a given key and value.
3921	Insert rule into file at the end or sorted position.
3922	IsEmpty checks if all non-empty attributes in info are not present in r's attrs
3923	CheckInternalVisibility adjusts package visibility based on path.
3924	New creates a new label with the given repository, package, and name.
3925	Rel method modifies label based on repository and package
3926	Label.Equal checks if two labels are equal based on their Repo, Pkg, Name, and Relative fields.
3927	Contains checks if two labels share the same repository and package prefix.
3928	generateFromPath walks through a directory and generates output based on .proto files, handling special cases and logging errors.
3929	shouldCall determines whether to call based on mode and relation updates
3930	shouldUpdate checks if updates should occur based on mode and relation status
3931	shouldVisit determines whether to visit a relation based on the update mode and relation map
3932	SquashRules merges rules from src to dst, handling attributes and expressions, and appends comments.
3933	runClient will attempt to connect to a Unix socket, start the server if it fails, and copy data from the connection to standard error, logging the elapsed time.
3934	UpdateRepo fetches repository details and returns a Repo object or an error.
3935	NewRemoteCache initializes a new RemoteCache instance with given repos and returns it along with a cleanup function.
3936	Remote will fetch and return the remote repository and VCS command for a given root path, or an error if the retrieval fails
3937	get will retrieve a value from remoteCacheMap and indicate if it was found or if there was an error
3938	ensure checks cache, loads if missing, waits for load completion, returns value and error
3939	RelBaseName returns the relative base name after checking prefixes and root
3940	Clone method creates a deep copy of Config object by copying all fields including nested maps.
3941	IsValidBuildFileName checks if a given build file name is valid based on a list of allowed names.
3942	check will return true if any group in the tagLine matches the given config and OS/ARCH strings
3943	fileNameInfo extracts file info from a given path including name, extension, and build tags like test, goos, and goarch.
3944	otherFileInfo retrieves file info, reads tags, and updates info object
3945	protoFileInfo processes a file path and protobuf info to extract file info including package name and imports.
3946	AddRule adds a rule to the RuleIndex if it's importable, otherwise returns.
3947	Finish method processes rules and builds import index
3948	buildImportIndex populates importMap with imported rules, skipping embedded ones.
3949	IsSelfImport checks if the result is a self-import from the given label.
3950	applyKindMappings updates rule loads with new mappings or merges existing ones
3951	appendOrMergeKindMapping will add or merge a kind mapping to the existing list of loads based on the name
3952	RuleName extracts the last valid identifier from input strings and appends "_proto" to it
3953	buildPackages organizes proto files into packages based on options and modes returning a list of packages or an empty list if no valid package is found
3954	selectPackage selects a package from a map based on directory and relative path returns the selected package or an error if multiple packages are found
3955	generateProto creates a proto_library rule with specified attributes based on ProtoConfig, Package, and visibility settings.
3956	generateEmpty will return a list of rules for proto_library targets without source files from given lists
3957	ImportRepoRules will parse a repository rules file and return a list of rules sorted by name an error will be returned if the file format is unrecognized or parsing fails
3958	MergeRules combines generated rules with existing ones, sorts them, merges them by file, and returns the updated files.
3959	GenerateRule creates a new go_repository rule with attributes from the given repo object
3960	FindExternalRepo returns the path to an external repo or an error if it doesn't exist.
3961	ListRepositories processes a workspace to list repositories and maps them by file, handling repository macro directives.
3962	migrateLibraryEmbed modifies Go rules to replace "library" attribute with "embed" if certain conditions are met
3963	migrateGrpcCompilers updates go_grpc_library rules to go_proto_library with grpcCompilerLabel compiler
3964	squashCgoLibrary will update or create a go_library rule by merging attributes from a cgo_library rule, removing unnecessary attributes, and deleting the original cgo_library rule if possible.
3965	removeLegacyProto removes deprecated proto rules from a config and file if not already fixed
3966	removeLegacyGazelle will delete the "gazelle" attribute from the "def.bzl" load statement in the config file if it exists
3967	selectPackage selects a buildable Go package from a directory and returns it or an error if multiple packages are found
3968	AddBuiltin adds a builtin resolver to metaResolver
3969	MappedKind appends a mapped kind to the resolver's map for a given package relation.
3970	Resolver method maps rule Kind to builtin resolver based on package relation.
3971	sortExprLabels sorts labels in a Bazel expression list if all elements are strings
3972	checkRulesGoVersion checks Gazelle compatibility with rules_go version updates required
3973	preprocessTags will add "gc" to genericTags map if it's not already initialized
3974	setBuildTags will process build tags and store them in genericTags map or return an error if a tag is negated
3975	splitValue will return a slice of trimmed strings split by commas
3976	copyGoModToTemp will create a temporary directory, copy go.mod file to it, and return the path or an error
3977	findGoTool returns the path to the go tool, prioritizing GOROOT if set, adjusting for Windows executable extension
3978	isBuildable checks if a Go package has a go file or non-empty proto sources.
3979	startServer starts a new server process with the same arguments as the current process
3980	watchDir sets up a watcher to monitor directory changes, records them using the provided function, and returns a cancel function to stop watching.
3981	listDirs will return a list of directories and any errors encountered during traversal
3982	shouldIgnore checks if a path should be ignored based on its prefix or base name
3983	recordWrite updates a map with a given path indicating a directory write operation is set
3984	getAndClearWrittenDirs will return a slice of strings representing the directories currently stored in dirSet and clear the set.
3985	CombineHandlers merges multiple HTTP handlers into a single handler that executes them sequentially.
3986	VerifyContentType checks HTTP request's Content-Type header against specified type returning middleware.
3987	VerifyMimeType returns an HTTP handler to verify the request's Content-Type matches the specified MIME type.
3988	VerifyBasicAuth checks HTTP request's Authorization header against provided username and password.
3989	VerifyJSONRepresenting returns an HTTP handler to verify JSON content type and representation
3990	VerifyFormKV returns an HTTP handler to verify form data key-value pairs.
3991	RespondWithProto returns a handler to respond with protobuf data and headers.
3992	RegisterFailHandlerWithT sets global fail wrapper if handler is not nil
3993	EventuallyWithOffset sets up an assertion with custom timeout and polling intervals based on provided offsets and returns an AsyncAssertion object.
3994	ConsistentlyWithOffset creates an assertion that checks consistency over time with specified intervals and offset.
3995	Expect will create a new Assertion instance for the given actual value and additional arguments using the testing support wrapper.
3996	Eventually will return an AsyncAssertion object with specified timeout and polling intervals or defaults.
3997	Consistently checks if a condition holds within a specified timeout and interval, returning an assertion object.
3998	TimeoutCloser wraps a closer with a timeout duration.
3999	TimeoutReader returns a reader that times out after a specified duration.
4000	TimeoutWriter wraps a writer with a timeout duration.
4001	Nest will recursively nest errors with a given path returning an AggregateError or NestedError based on the input error type
4002	SetMockService initializes mock services for various components and assigns them to servicemanager.
4003	FindMachineByIdOrAddress retrieves a machine by ID or address from a collection, returning an error if not found.
4004	`Write data to FlushingWriter, handle flusher interface, log any errors.`
4005	Hijack method returns net.Conn and bufio.ReadWriter from ResponseWriter if it implements http.Hijacker interface, otherwise returns nil and error.
4006	ListDeploys filters apps, retrieves events, validates images, and returns deploy data.
4007	DelayedRouter's AddAll method adds routes for multiple HTTP methods and returns the added route.
4008	samlRequestTimeout extracts request_timeout from map and returns its integer value
4009	RegisterHandler registers an HTTP handler with a specific path and method using version "1.0".
4010	RegisterHandlerVersion adds a new handler to the list with specified version, path, method, and handler.
4011	Check will evaluate multiple named or all health checks returning their statuses and durations.
4012	DiscoverRepositoryPath checks if a directory contains a .git folder and returns its path or an error if not found.
4013	OpenRepository checks if the given path points to a Git repository and returns it or an error if not found.
4014	RemoteURL fetches the URL of a remote repository from its configuration file, returning an error if the remote is not found.
4015	List method retrieves apps based on a label selector from the indexer returning a list of apps and an error
4016	Apps returns an AppNamespaceLister for a given namespace
4017	appNamespaceLister's List method retrieves App resources based on a label selector and returns them along with any errors encountered.
4018	StreamJSONResponse will write JSON response to writer and return error if any.
4019	DropDatabase will delete a database and return an error if it fails
4020	Collection method returns a new Collection instance for the given name from the Storage session.
4021	SetLogger updates the logger field of Target instance while ensuring thread safety.
4022	Target's Error logs an error using its logger.
4023	Errorf logs an error message with formatting and includes stack traces for items implementing withStack interface.
4024	Fatal logs a critical message using the target's logger if it exists.
4025	Debugf logs a debug message using the target's logger if it exists.
4026	GetStdLogger returns a standard logger or nil if not set
4027	Namespace returns cluster namespace from custom data or default "tsuru"
4028	recreateContainers will start containers on specified nodes using the given provisioner and writer, returning an error if any issues occur
4029	checkProvisioner will return an error if the provisioner value is not set or matches the default value, otherwise it returns the result of checkDocker
4030	checkDocker verifies configuration and performs basic checks on Docker, scheduler, router, and cluster.
4031	checkScheduler will return an error or warning based on deprecated or incorrect configuration settings
4032	checkRouter verifies router configuration and returns an error if any misconfiguration is found
4033	Available checks if unit status is started, starting, or error
4034	Get retrieves a provisioner function by name or returns an error if it doesn't exist
4035	Registry constructs a list of Provisioners from registered functions, returning any errors encountered.
4036	Error returns a formatted error message combining the underlying error and reason.
4037	validateVersion checks if the current version meets or exceeds the minimum supported version returning true if valid.
4038	ReadTarget retrieves the target from environment or file, returning it and handling errors.
4039	WriteTarget will save a string to a file in the user's directory, returning an error if it fails
4040	WriteOnTargetList adds a new target to a list if it doesn't already exist.
4041	Conn initializes a Storage instance from database configuration and returns it along with any errors encountered.
4042	Apps method returns a collection with a unique index on name field
4043	PoolsConstraints ensures unique pool constraints on a collection and returns it.
4044	Users method returns a collection with unique email index
4045	SAMLRequests will return a collection of SAML requests with an index on the id field
4046	AppLogCollection returns a storage collection based on the app name or nil if the app name is empty.
4047	CreateAppLogCollection creates a log collection for an app and returns it along with any errors encountered
4048	LogsCollections retrieves all log collection names from storage and returns their corresponding Collection objects.
4049	ArchiveBuildCmds generates build commands for an app using an archive URL
4050	ArchiveDeployCmds generates deployment commands for an app using an archive URL.
4051	DeployCmds generates a command to deploy an app using a unit agent, appending "deploy-only" and joining with spaces, then returns it wrapped in /bin/sh -lc.
4052	runWithAgentCmds constructs command to run unit agent with app details and returns it along with any errors encountered
4053	newApps creates a new apps instance with the given client and namespace
4054	Commit container, build image, tag, push to registry, return image ID
4055	processTags removes duplicates from a list of tags and trims whitespace
4056	aggregateContainersBy will return a map of host addresses to container counts based on a matcher and an error if the operation fails
4057	chooseNodeToAdd selects a node for adding a container, updates its host address, and returns the chosen node or an error.
4058	chooseContainerToRemove selects a node and removes a container based on the given app and process name returns the container ID and any errors encountered
4059	Get will return a Router instance and an error if the router type or name is invalid
4060	Default returns the name of the default router or an error if none is found
4061	Store updates or inserts a router app entry in a database collection.
4062	TsuruV1 returns a fake TsuruV1 interface for the clientset
4063	Tsuru returns a fake Tsuru V1 interface for the clientset
4064	NewAppInformer creates a new shared informer for apps using a filtered version.
4065	NewFilteredAppInformer creates a new shared index informer for Tsuru apps.
4066	Watch will return a watch interface and an error based on the list options provided
4067	Patch method applies a patch to an app and returns the updated app object along with any errors encountered.
4068	NewSharedInformerFactory creates a new shared informer factory with the specified client and default resync duration for all namespaces and no additional filters.
4069	NewFilteredSharedInformerFactory creates a new shared informer factory with specified client, resync duration, namespace, and list options tweak function.
4070	Proxy method returns an error indicating service proxy unavailability
4071	UnbindUnit method returns nil error
4072	Create will validate a plan's name, CPU share, and memory before inserting it into storage, returning errors if validation fails
4073	Remove will delete a plan from storage based on its name and return an error if unsuccessful
4074	ensureDefault checks if plans exist, if not inserts a default plan using values from configuration.
4075	DeleteInstance removes a service instance from the database if it's not bound to any apps.
4076	ToInfo method returns a ServiceInstanceWithInfo struct containing service instance details and an error if retrieval fails
4077	Update service instance with validation, database connection, tag processing, and execution pipeline.
4078	BindApp binds an application to a service instance, executes a series of actions, and returns any errors encountered.
4079	BindUnit updates service instance's bound units and handles errors during binding or rollback.
4080	UnbindApp will execute a series of actions to unbind an app from a service instance, returning an error if the app is not bound.
4081	Status retrieves service status using provided request ID.
4082	ProxyInstance forwards HTTP requests to a backend service while validating paths and handling errors.
4083	Inc increments the quota for an app and checks limits before updating storage.
4084	SetLimit updates an app's quota limit ensuring it's non-negative and greater than or equal to current usage.
4085	Set will update the usage of appName in QuotaService storage, returning an error if inUse is less than zero or exceeds the limit.
4086	Get retrieves quota from storage for given app name
4087	RemoveImage will delete an image from a Docker registry and return an error if it fails
4088	RemoveAppImages deletes Docker images based on app name and handles multiple errors.
4089	Create will validate, insert, and manage platform image and builder errors with rollback.
4090	List will return all or only enabled platforms based on the enabledOnly flag
4091	FindByName retrieves platform details by name from storage, returning an error if invalid.
4092	Update platform details and handle file content, errors, and database operations.
4093	Remove platform and its associated images from storage, log errors on failure
4094	Rollback updates platform options, checks image existence, modifies data, creates new image, updates platform, appends image, and marks apps for update.
4095	GetPoolByName retrieves a pool by name from the database, returning it or an error if not found.
4096	Manager retrieves a repository manager based on configuration or defaults to "nop".
4097	Register will store a repository manager under a given name in a global map.
4098	start method initializes and runs the bindSyncer, handling app listing and synchronization intervals, and shuts down gracefully.
4099	Shutdown will stop the syncer and wait for completion or timeout, then return any error encountered
4100	GetForProvisioner retrieves a Builder for a given Provisioner or defaults to Docker or Kubernetes if not found.
4101	get will return a Builder and an error if the builder is unknown
4102	Registry returns a slice of Builder objects and an error if any occurs
4103	RegisterQueueTask registers a task with the queue using a Docker provisioner.
4104	Apps method returns an AppInformer instance configured with the version's factory, namespace, and tweakListOptions.
4105	DeepCopy creates a copy of the App instance.
4106	DeepCopy will create a copy of AppList and return it.
4107	DeepCopy creates a copy of AppSpec.
4108	Write logs to channel or buffer based on whether it's closed
4109	ResetPassword resets user's password using a valid token, generates a new password, updates the user record, sends a notification, and marks the token as used.
4110	addKnownTypes adds known types to a scheme for a specific group version and returns an error if unsuccessful
4111	Register adds a Shutdownable to the registered list under a mutex lock
4112	Do will run shutdown operations on registered handlers and wait for completion or context cancellation, logging progress and errors.
4113	ListImagesOrDefault retrieves images for a platform or returns a default image if none are found.
4114	MigrateAppsCRDs sets config, retrieves provisioner, lists pools, filters by provisioner, lists apps, provisions each app, and returns any errors encountered.
4115	Register will store a migration function under a given name and return an error if registration fails
4116	RegisterOptional registers an optional migration function with a name and returns an error if registration fails
4117	Run will execute based on args, running optionally or returning an error if forced without name.
4118	Units will return a slice of provision units and an error if the provisioner fails
4119	MarshalJSON serializes App struct to JSON, handling errors and including various fields like name, platform, teams, units, repository, plan, routers, and more.
4120	AcquireApplicationLockWait attempts to acquire a lock on an application and waits for it within a specified timeout, returning whether the lock was acquired successfully and any errors encountered.
4121	ReleaseApplicationLock attempts to release an app lock up to three times, retrying with increasing delays before logging an error if all attempts fail.
4122	GetByName retrieves an application by its name from the database or returns an error if not found.
4123	AddUnits adds units to an application ensuring it's active and handles logging and provisioning errors.
4124	SetUnitStatus updates the status of a unit by name and returns an error if the unit is not found or the provisioner does not support it.
4125	UpdateNodeStatus updates node status, handles errors, and returns results.
4126	available checks if any unit is available
4127	Grant will add a team to an app's access list update the database remove teams on error grant access to users with permissions return an error if any step fails
4128	Revoke removes a team from an app and updates database and permissions accordingly.
4129	GetTeams retrieves teams from the service manager using app's team names and returns them.
4130	setEnv updates the application's environment variable map and logs the change if it's public
4131	getEnv retrieves environment variable or returns an error if not declared
4132	validateNew checks if app name is valid and calls validate method on app instance
4133	validate will check pool and plan validation returning error if any fails
4134	InstanceEnvs retrieves environment variables for a specific service and instance.
4135	Run command with logging and validation
4136	GetUnits retrieves a list of units from the application and returns them along with any errors encountered.
4137	GetUUID returns the UUID of an app, generating a new one if needed and updating the database.
4138	app.Envs merges environment variables from app and serviceEnvs into a single map.
4139	SetEnvs updates application environment variables, logs changes, validates each environment name, updates database, and restarts units if required.
4140	UnsetEnvs will remove specified environment variables from app and update database, restart if required.
4141	AddCName will execute a series of actions to validate, set, save, and update CNAMEs for an app, then rebuild routes or enqueue them, returning any errors encountered
4142	Log will record a message with details to a database connection or return an error if it fails
4143	LastLogs fetches recent logs based on specified criteria and returns them along with any errors encountered.
4144	List retrieves filtered applications from the database, processes them based on statuses, and loads cached addresses before returning the list.
4145	Swap will swap two apps' CNames and routes, returning an error if any step fails.
4146	Start method starts the application or process logs the start message gets the provisioner starts the process rebuilds routes returns any errors
4147	GetDbDriver retrieves a database driver by name and returns it or an error if the driver is unknown.
4148	GetCurrentDbDriver returns the current database driver or initializes it from configuration.
4149	NewForConfig creates a new clientset from a rest config and returns it along with any errors encountered during creation
4150	GetAppFromUnitID retrieves an application from a unit ID by fetching the container and then the application by name, returning the application and any errors encountered.
4151	NewPipeline creates a pipeline from given actions ensuring each has its own isolated result.
4152	Result retrieves the last action's result from a pipeline safely.
4153	DecodeJsonPayload reads JSON payload from request body and unmarshals it into given variable returning error if any.
4154	UrlFor constructs a URL from a request's base URL, path, and query parameters.
4155	GetCorsInfo determines CORS info based on request headers.
4156	MiddlewareFunc sets up CORS validation and executes the handler accordingly.
4157	RecorderMiddleware wraps a handler to record status code and bytes written.
4158	recordStatusCode sets header code and marks as written if not already
4159	MakeRouter creates a router with given routes starts it and returns the app and error
4160	AppFunc returns a handler that finds and runs a matching route or returns 404/405 errors.
4161	escapedPath extracts and returns the path part from a URL, splitting on the first '?' character.
4162	escapedPathExp will sanitize and escape a URL path expression returning the sanitized path or an error if invalid
4163	start method initializes router's trie and index, adds routes, and compresses trie if enabled
4164	ofFirstDefinedRoute finds the first defined route from a list of matches based on the router's index
4165	findRouteFromURL searches for a route based on HTTP method and URL, returns the matching route, parameters, and whether the path was matched.
4166	ContentTypeCheckerMiddleware checks content type and charset, returns error if invalid, otherwise calls wrapped handler
4167	CloseNotify returns a channel that receives a value when the client connection has gone away.
4168	`MiddlewareFunc logs HTTP requests using Apache format`
4169	executeTextTemplate executes a text template with access log utilities and returns the result or panics on error
4170	RemoteUser retrieves the remote user from the environment or returns an empty string.
4171	ApacheQueryString returns the query string from URL or empty string if none exists
4172	StartTime returns the start time from the environment or nil
4173	ApacheRemoteAddr extracts and returns the IP address from the remote address field, handling errors gracefully.
4174	ResponseTime returns elapsed time from access log or nil
4175	JsonIndentMiddleware will wrap a handler to add indentation to JSON responses using a specified prefix and indent string.
4176	EncodeJson marshals a JSON object with indentation using writer's prefix and indent, returning the byte slice and any errors encountered
4177	WriteHeader sends HTTP response status code to client and sets flag indicating header has been written.
4178	MakePath replaces placeholders in route path with corresponding values from pathParams
4179	RecoverMiddleware handles panics in HTTP handlers, logging errors and optionally returning stack traces.
4180	WrapMiddlewares applies middleware functions to a handler sequentially from last to first.
4181	GzipMiddleware's MiddlewareFunc wraps a handler to enable gzip compression if supported by the client.
4182	gzipResponseWriter sets headers before writing response status code.
4183	Hijack method returns a net.Conn, bufio.ReadWriter, and error from http.Hijacker interface
4184	gzipResponseWriter's Write method compresses data before writing it to the underlying response writer, or writes it directly if compression is disabled.
4185	MW.MiddlewareFunc will wrap handler, validate auth header, check user credentials, and call handler if authorized
4186	printDebug recursively prints a tree structure with indentation based on level
4187	AddRoute method adds a route to Trie using HTTP method and path expression returning an error if failed
4188	printDebug method prints trie structure with indentation.
4189	FindRoutes searches for matching routes in a Trie based on HTTP method and path returning a list of Match objects.
4190	FindRoutesAndPathMatched finds routes and checks path match using HTTP method and path returns matches and path matched status
4191	FindRoutesForPath will search for routes matching the given path and return them along with their parameters.
4192	Use will add middleware functions to the api stack
4193	MakeHandler returns an HTTP handler from API's application function or a default empty function wrapped with middlewares.
4194	MiddlewareFunc adds X-Powered-By header to response before calling the handler.
4195	StatusMiddleware logs request status and elapsed time.
4196	GetStatus retrieves server status including uptime, response counts, and averages.
4197	MW modifies handler to wrap response if callback key exists
4198	flusher will flush the response writer if the header has been written
4199	MiddlewareFunc sets logger and logs JSON record after handling request.
4200	Fetch method from S3 struct returns io.Reader or error, performing delayed fetch, status check, and binary retrieval with optional gzip extraction.
4201	sanityCheck will print and return true if either environment variable is set, otherwise it returns false
4202	release method stops accepting connections, starts a timer, and forces closure if timeout is reached before all tasks complete.
4203	fetchLoop will continuously call fetch after ensuring a minimum interval between calls
4204	forkLoop continuously forks commands until an error occurs.
4205	Init initializes File ensuring Path is set, Interval is at least 1s, and updates hash returning any errors
4206	Fetch returns a reader for a file, delaying on first call, checking for changes, and retrying until stable or timed out.
4207	Fetch will return a reader and error from HTTP URL after checking headers and skipping if unchanged.
4208	NewConfig initializes a Config struct with default Sarama settings and custom configurations for Kafka consumer group.
4209	Validate will check configuration settings for errors and log warnings for unsupported settings
4210	NewClient creates a new Kafka client from addresses and configuration, validates config, and returns a Client object or error.
4211	AsyncClose ensures partition consumer closes once and sets close error.
4212	close partitionConsumer and wait for it to finish returning any errors
4213	MarkOffset updates the partition consumer's state with the new offset and metadata if the offset is greater than the current one.
4214	NewConsumer creates a new Kafka consumer from addresses, group ID, topics, and configuration returns the consumer or an error
4215	MarkOffsets locks the stash, iterates over offsets, marks them for subscriptions, then deletes from stash.
4216	ResetOffset updates the consumer's offset for a specific message and metadata.
4217	Close will release resources and close channels for a Consumer instance, handling errors during the process.
4218	hbLoop manages heartbeats, stops on errors or signals.
4219	twLoop manages consumer's metadata refresh and handles errors or shutdown signals.
4220	cmLoop handles committing offsets at intervals or on stop signals.
4221	fetchOffsets retrieves consumer group offsets for specified topics and partitions returns a map of topic-partition to offset info and error
4222	MarkOffset on OffsetStash marks partition offset with metadata
4223	ResetOffset updates partition offset for given message and metadata
4224	Offsets will return a map of topic partitions to their offsets
4225	`Actual` method retrieves or caches the actual state of an instance group and returns it along with a resource object and any errors encountered.
4226	Expected calculates and returns the expected cluster state based on the instance group's properties and caches the result.
4227	Delete instance group and resources, handle errors, update cluster config.
4228	GetReconciler returns a cloud reconciler based on provider config and runtime parameters or an error if the cloud type is invalid.
4229	GetVersion returns a Version struct containing build information.
4230	GetVersionJSON will return a JSON string of the version or an empty string if marshalling fails
4231	Actual will return a cluster and resource with updated details or an error if retrieval fails
4232	Expected will generate a cluster resource based on the immutable state and return it along with any errors encountered during rendering.
4233	CreateCmd generates a Cobra command for creating a Kubicorn API model with options for name, profile, and cloud ID.
4234	NewUbuntuCluster creates a new Kubernetes cluster with specified configurations.
4235	ProviderConfig will return a ControlPlaneProviderConfig object or log an error if the JSON unmarshalling fails.
4236	SetProviderConfig marshals a control plane provider config to JSON, converts it to a string, and sets it in the cluster API spec, returning any errors encountered during the process.
4237	MachineProviderConfigs parses provider configs from machine sets and returns them as a slice.
4238	SetMachineProviderConfigs updates machine sets with corresponding provider configurations or logs warnings if no match is found.
4239	NewCluster creates a new cluster instance with the specified name and initializes its API and control plane components.
4240	DeployControllerCmd creates a Cobra command to deploy a controller, handling name input and common flags.
4241	NewRetrier creates a retrier object with given parameters.
4242	RunRetry handles retries with signal handling and returns error on failure.
4243	MustGenerateRandomBytes will panic if it cannot generate random bytes otherwise it returns the generated bytes
4244	ExplainCmd creates a Cobra command to explain a cluster's state, setting options based on flags and arguments.
4245	TimeOrderedUUID generates a UUID based on the current Unix time and random bytes.
4246	GetConfigCmd creates a Cobra command to manage Kubernetes configuration, handling options and running the get-config operation.
4247	RunAnnotated executes a task with optional logging and timing, returning any errors encountered.
4248	ListCmd creates a Cobra command to list available states, binds common flags, and runs the list operation.
4249	NewUbuntuCluster creates a new Ubuntu-based Kubernetes cluster with specified configurations.
4250	EditCmd creates and returns a Cobra command for editing a cluster state.
4251	RemoveKey removes a key from the agent and returns an error if it fails
4252	RemoveKeyUsingFile will remove a key from the Keyring using its public key file path
4253	Actual method fetches firewall details from API, updates port ranges, renders cluster, and returns updated resources.
4254	Expected will return a modified cluster and resource based on immutable input
4255	Apply method updates firewall rules based on expected resource, waits for droplets to activate, creates firewall, returns updated cluster and resource.
4256	Delete firewall resource from cluster and return updated cluster and resource objects.
4257	DeleteCmd creates a Cobra command for deleting Kubernetes clusters with options for purging the API model.
4258	NewStateStore selects a state store based on options and returns it along with an error if the state store type is invalid
4259	Commit will marshal a cluster object to JSON, write it to a Git repository, create a remote, and commit changes, returning any errors encountered.
4260	ApplyCmd creates and configures a Cobra command for applying a cluster resource to a cloud.
4261	ExpandPath expands relative paths like . and ~ to their absolute equivalents, logging errors if unable to determine the current working directory or home directory.
4262	CompletionCmd generates bash/zsh completion code based on user input.
4263	AdoptCmd creates a Cobra command for adopting a Kubernetes cluster into a Kubicorn state store.
4264	StrEnvDef returns environment variable or default value
4265	IntEnvDef retrieves an integer environment variable or returns a default value if not set or invalid.
4266	BoolEnvDef returns a boolean environment variable or default value.
4267	readFromFS reads a file from the filesystem and returns its contents or an error
4268	VersionCmd creates a Cobra command to display Kubicorn's version.
4269	NewSignalHandler initializes a signal handler with a timeout and returns it
4270	Register starts a goroutine handling signals and timeouts.
4271	NewUbuntuCluster creates a new Kubernetes cluster with specified master and node configurations.
4272	BeginningOfHour returns the time at the start of the current hour.
4273	BeginningOfDay returns the time at the start of the day for the given Now instance
4274	BeginningOfWeek calculates the start of the current week based on the configured WeekStartDay.
4275	BeginningOfMonth returns the first day of the month for the given Now instance
4276	BeginningOfQuarter calculates the first day of the quarter for a given date
4277	BeginningOfYear returns the first day of the year for the given Now instance.
4278	EndOfMinute returns the time at the end of the current minute
4279	EndOfHour calculates the time at the end of the current hour by adding one less nanosecond to the beginning of the hour.
4280	EndOfDay returns the end time of the current day for the Now instance.
4281	EndOfWeek returns the end time of the week for the given Now instance.
4282	EndOfMonth calculates the last day of the current month.
4283	EndOfQuarter calculates the end of the quarter for the given Now instance
4284	EndOfYear calculates the last moment of the current year.
4285	MustParse will parse strings to time and panic if there's an error
4286	Between checks if the current time is between two given times.
4287	ParseInLocation will return a time.Time object based on the given location and strings, or an error if parsing fails
4288	MustParse returns the current time after parsing the input strings, or panics on error.
4289	MustParseInLocation converts strings to time.Time using specified location and returns current time if parsing fails.
4290	Between checks if current time is between two given times.
4291	NewChannelMemoryBackend creates a new channel memory backend with a specified size starts it and returns the backend
4292	Start method locks the channel memory backend starts a new goroutine to process data if not already running
4293	Flush sends an event to flush events and waits for completion.
4294	ChannelMemoryBackend.Stop will stop the backend and wait for all events to finish processing
4295	Formatted will return a formatted string using a buffer and formatter method, caching the result for future calls.
4296	Message returns a formatted string from record's args, redacting any implementing Redactor interface.
4297	SetBackend updates logger's backend and marks it as having a backend.
4298	MustGetLogger retrieves a logger or panics if it cannot.
4299	Reset initializes logging configuration and sets default values.
4300	isEnabledFor checks if logging is enabled for a given level in a logger
4301	Criticalf logs critical messages using a logger instance.
4302	Warningf logs a warning message using the specified format and arguments
4303	Noticef logs a notice message using the Logger instance.
4304	Logger's Infof method logs info messages using a specified format and arguments.
4305	SetFormatter updates the formatter's default value with the provided function.
4306	MustStringFormatter returns a Formatter instance or panics if initialization fails.
4307	formatFuncName returns a formatted function name based on the provided verb and input string
4308	Log method logs a message at a given level with call depth and record, replacing formatter before logging.
4309	LogLevel will return a log level from a given string or an error if the level is invalid
4310	AddModuleLevel converts a backend to a LeveledBackend, creating a new one if necessary.
4311	GetLevel retrieves a module's log level or defaults to debug if not configured.
4312	SetLevel updates the logging level for a specific module.
4313	isEnabledFor checks if the log level is enabled for a given module
4314	MultiLogger aggregates multiple logging backends with module levels and returns a multi-logger instance.
4315	multiLogger's Log method iterates through backends, logs records conditionally, and returns any errors encountered.
4316	GetLevel returns the highest logging level from all backends for a given module.
4317	SetLevel updates logging level for all backends in multiLogger
4318	IsEnabledFor checks if any backend is enabled for the given level and module
4319	ConvertColors will convert color integers to strings with or without bold formatting
4320	NewSyslogBackend creates a new SyslogBackend instance with the given prefix and returns it along with any errors encountered during creation.
4321	NewSyslogBackendPriority creates a new SyslogBackend instance with the given prefix and priority, returning any errors encountered during creation.
4322	SetBackend configures and returns a logging backend based on input parameters
4323	NewCommander creates a new Commander instance with specified flags, name, and default output/error streams.
4324	Execute command with arguments, parse flags, and run command or show usage error.
4325	explain will print usage instructions for a command including subcommands and flags
4326	explainGroup prints command group details to writer including subcommands, aliases, and synopsis.
4327	explain will write command usage and flags to writer
4328	dealias will recursively resolve aliases in a command
4329	Execute will run a command using the default commander and return the exit status
4330	LoadFromData reads configuration data from byte slice and returns a ConfigFile instance and an error.
4331	LoadFromReader reads configuration from a reader and returns a ConfigFile object and any errors encountered.
4332	ReloadData reads configuration from reader and updates current config or returns error if multiple files are loaded
4333	AppendFiles adds files to the ConfigFile and reloads it, returning an error if appending is not allowed.
4334	GetKeyList returns a list of keys for a given section in a config file. If the section is empty, it defaults to "DEFAULT". The method ensures thread safety in block mode. It checks if the section exists and filters out any empty keys before returning the list.
4335	SaveConfigData will write configuration data to an output writer, formatting based on PrettyFormat flag, handling section and key comments, and escaping special characters in keys and values.
4336	SaveConfigFile saves a ConfigFile to a specified filename, returning an error if any step fails
4337	Find method returns a selection object based on the given CSS selector
4338	FindByXPath returns a Selection object based on an XPath query.
4339	FindByLink returns a Selection object based on a link selector.
4340	FindByLabel will return a Selection object based on a label text
4341	FindByName returns a Selection object for the specified name using the session and selectors.
4342	FindByClass will find elements by class and return a Selection object
4343	FindByID returns a Selection object based on the given ID.
4344	First will return a Selection object representing the first element matching the given CSS selector.
4345	FirstByXPath selects the first element matching an XPath expression and returns it as a Selection object.
4346	FirstByLink will return a Selection object based on the first link matching the given text
4347	FirstByLabel returns a Selection based on the first occurrence of a label with the given text.
4348	FirstByName returns a selection for the first element matching the given name.
4349	All will return a MultiSelection object containing all elements matching the CSS selector
4350	AllByXPath will return a MultiSelection object containing elements selected by XPath
4351	AllByLink returns a MultiSelection object for all elements matching a link selector with the given text
4352	AllByLabel returns a MultiSelection for all elements matching a label.
4353	AllByName returns a MultiSelection for all elements matching a given name.
4354	AllByClass returns a MultiSelection object filtering elements by class.
4355	AllByID returns a MultiSelection object containing elements matching the given ID.
4356	FindForAppium will return a Selection object based on the selector type and text provided
4357	Timeout sets a timeout duration on a configuration object.
4358	ChromeOptions sets a Chrome option and its value in the config.
4359	JoinPage constructs a Page object using a URL and optional configurations.
4360	Destroy will delete the page's session and return an error if it fails
4361	Reset method clears cookies, local storage, session storage, and navigates to about:blank.
4362	Navigate will set the URL in the session and return an error if it fails
4363	GetCookies retrieves cookies from a session, converting API cookie structs to http.Cookie objects with proper expiration handling.
4364	SetCookie sets a cookie on a page session returning an error if the operation fails
4365	DeleteCookie will remove a cookie from the session and return an error if it fails
4366	ClearCookies will delete all cookies from the session and return an error if it fails
4367	Page.URL retrieves session's URL or returns an error
4368	Set window size on session and return error if failed
4369	page.screenshot saves a screenshot to a file returns an error if any step fails
4370	Page.Title retrieves the page's title and returns it along with any errors encountered during retrieval.
4371	HTML retrieves page source from session returns HTML content or error
4372	PopupText retrieves alert text from session and returns it or an error.
4373	EnterPopupText sets alert text on session and returns error if failed
4374	ConfirmPopup will attempt to accept an alert and return an error if it fails
4375	CancelPopup dismisses an alert on the page and returns an error if it fails
4376	SwitchToParentFrame attempts to switch to the parent frame of the current session and returns an error if it fails
4377	SwitchToRootFrame will switch to the root frame of the current session and return an error if it fails
4378	NextWindow will switch to the next window in the session or wrap around to the first window if at the end an error will be returned if any step fails
4379	CloseWindow method on Page struct deletes the active window session returning an error if it fails
4380	WindowCount returns the count of windows and an error if it fails to retrieve them.
4381	LogTypes retrieves log types from session and returns them or an error.
4382	MoveMouseBy will move the mouse by the specified offsets and return an error if it fails
4383	DoubleClick will execute a double-click action on the page and return an error if it fails
4384	Click will execute a click action based on the event type and button, returning an error if the event is invalid
4385	Click method executes click action on each selected element and returns an error if any click fails
4386	DoubleClick method performs a double-click action on each selected element in the session, handling errors during mouse movement or clicking.
4387	Fill method sets the text for each selected element and returns an error if any operation fails
4388	Tap will execute a touch action based on the event type on each selected element and return an error if any step fails
4389	Touch will execute a touch action based on the event type on each selected element and return an error if any step fails
4390	FlickFinger will perform a touch flick gesture on a selected element and return an error if the selection or flick fails
4391	ScrollFinger scrolls a selected element by given offsets and returns an error if it fails
4392	NewCapabilities creates a new Capabilities instance with specified features.
4393	JSON method converts Capabilities object to a JSON string and returns it along with any errors encountered during the process
4394	HaveTitle returns a GomegaMatcher to check if the actual title matches the expected title
4395	HaveURL will return a matcher to check if the URL matches the expected value
4396	HavePopupText returns a Gomega matcher to check if the popup text matches the expected value
4397	HaveLoggedError creates a matcher to check if specified error messages have been logged at WARNING or SEVERE levels
4398	Text method retrieves text content from a selected element or returns an error
4399	Active checks if the selected element matches the active element, returning a boolean and an error if any step fails.
4400	Attribute checks if an element has a specified attribute and returns its value or an error.
4401	CSS method returns a CSS property value and an error if the property is invalid
4402	Selected checks if the element has the 'selected' state and returns a bool and error
4403	Visible method checks if selection element is displayed and returns a boolean along with any errors encountered.
4404	Enabled checks if an element is enabled and returns a boolean along with any errors encountered
4405	HaveCount creates a Gomega matcher to check if the element count matches the specified value
4406	HaveAttribute will return a matcher to check if an attribute has a specific value
4407	EdgeDriver initializes WebDriver with specific options and OS-specific binary name
4408	Selendroid will create a WebDriver instance using a JAR file and optional configurations.
4409	SwitchToFrame selects an element and switches to the corresponding frame, returning an error if either operation fails.
4410	Count will return the number of selected elements and an error if selection fails
4411	EqualsElement checks if two Selection objects represent the same single element, returning true if they do and an error otherwise.
4412	MouseToElement will move the mouse to the selected element or return an error if selection fails
4413	loggingMiddleware logs request details before forwarding it to the next handler
4414	chainHandlers combines multiple middleware functions into a single handler
4415	HTTPReverseProxy starts a reverse proxy server on specified or available port logs errors and returns the port number
4416	CheckInstallation checks each binary's version against a specified range and returns an error if any check fails.
4417	CheckVersion verifies if the given version of a binary matches its required version range.
4418	GetVersionForBinary retrieves the version of a binary using its name and returns it along with any errors encountered during execution.
4419	getUser retrieves a user from the server using their ID and returns the user data or an error
4420	login sends a request to the server with the given credentials and returns the user data or an error
4421	loginHandler processes HTTP requests to authenticate users, setting session data or returning errors based on credentials.
4422	logoutHandler clears user session and redirects to home page
4423	viewHandler renders login template with user and error data
4424	Run sets up HTTP handlers for login, logout, and view routes then starts the server on port 8081.
4425	WithRequest sets the request on Interaction and logs a warning if the body is a JSON object.
4426	WillRespondWith sets the response and returns the interaction object
4427	isJSONFormattedObject checks if input is a JSON-formatted object returns true if valid JSON object
4428	ByUsername retrieves a user by username from the repository, returning the user or an error if not found.
4429	ByID will find a user by their ID and return it or an error if not found
4430	UserLogin handles user authentication, processes request body, validates credentials, sets appropriate headers, and returns response based on validation result.
4431	newClient initializes a PactClient with setup services and default timeout.
4432	NewClient creates a PactClient with mock services.
4433	ListServers logs debug info and returns list of mock servers
4434	UpdateMessagePact updates a message pact and returns an error if the command execution fails.
4435	PublishPacts sends a request to publish pacts and waits for the response before returning any errors encountered during the process.
4436	getPort extracts port from URL or returns default based on scheme
4437	getAddress will extract and return the host part from a URL string
4438	sanitiseRubyResponse removes comments, bundle exec rake pact:verify, and extra newlines from the input string
4439	Publish will send a Pact request using a client, validate it, and return any errors encountered.
4440	FindPortInRange will return a port number from a given string or range and an error if the port is invalid or all ports are unusable
4441	EachLike returns a matcher for content with a minimum required count.
4442	Term creates a new Matcher with the given generate and matcher strings
4443	UnmarshalJSON converts JSON bytes to a map of Matcher objects
4444	objectToString converts an interface{} to a string, handling strings and other types by marshalling to JSON
4445	match will return a matcher based on the source type and parameters an error will be raised for unhandled types
4446	AddMessage appends a new message to Pact's interactions and returns it
4447	AddInteraction sets up a Pact, logs a debug message, creates an Interaction, appends it to Interactions, and returns the Interaction.
4448	Teardown will stop the Pact server and log any errors before returning the Pact instance
4449	Verify will execute an integration test using mock server setup and verify interactions, returning any encountered errors
4450	stateHandlerMiddleware processes HTTP requests, executing state handlers based on URL path and logging errors or warnings accordingly
4451	VerifyMessageProviderRaw sets up a temporary server to handle message verification requests and returns the verification response or error.
4452	VerifyMessageConsumerRaw logs debug info, sets up pact, reifies message, narrows type if necessary, yields message to handler, and updates message pact on success.
4453	mockClient's VerifyProvider method returns predefined response and error based on request
4454	NewService constructs a new service with provided arguments and sets command path.
4455	Setup initializes channels and starts monitoring services.
4456	addServiceMonitor starts a goroutine to monitor new services and adds them to processMap
4457	removeServiceMonitor logs debug info starts a monitor to handle completed commands signals processes deletes process IDs from map
4458	List will return a map of service IDs to command objects after logging debug information
4459	Command constructs and returns an exec.Cmd object with service manager's command and arguments, incorporating additional environment variables.
4460	call sends HTTP request based on method and returns error
4461	DeleteInteractions logs a debug message deletes interactions at the specified URL returns an error if the call fails
4462	AddInteraction logs debug info, constructs URL, calls POST method with interaction data.
4463	WritePact logs debug info checks consumer/provider names sets default mode creates pact map constructs URL calls POST method returns error
4464	ExpectsToReceive sets the message description and returns the message object
4465	WithMetadata sets metadata on a message and returns it
4466	AsType sets the decoding type of a message and returns it
4467	UserLogin handles JSON login requests, validates credentials, and responds accordingly.
4468	Region returns the AWS region based on environment or domain.
4469	New creates a new S3 instance with a specified domain and keys, using default domain if none provided
4470	Bucket returns a new bucket instance with the given name and default configuration.
4471	PutWriter writes data to a specified path using the given header and configuration returns a writer and an error
4472	bucket.url constructs a URL based on bucket name, path, and configuration parameters, handling versioning and path style addressing.
4473	SetLogger configures the logger with output writer, prefix, flags, and debug mode.
4474	InstanceKeys fetches IAM security credentials from EC2 metadata and returns access key, secret key, and security token along with any errors encountered.
4475	EnvKeys retrieves AWS credentials from environment variables and returns them along with any errors.
4476	Sign method sets headers for HTTP request using bucket's credentials and signs it with current time.
4477	getAWSKeys retrieves AWS credentials from environment or instance metadata, returning them or an error if none found.
4478	homeDir retrieves the user's home directory from environment or command output, returning it as a string and an error if not found
4479	ACL sets the x-amz-acl header if acl is non-empty and returns the modified header
4480	putPart uploads a part of a file and checks its integrity
4481	abort will send a DELETE request to cancel a multipart upload and log errors if the response status is not 204
4482	growPartSize checks if increasing the part size is feasible given max object size and partition count.
4483	CheckDisallowed verifies allowed environment variables based on a prefix and specification.
4484	Process will validate and process fields based on their tags and values, returning an error if any required field is missing or invalid.
4485	MustProcess will process the given prefix and spec and panic if there's an error
4486	toTypeDescription will return a type description based on the given reflect.Type
4487	Usage will print usage info as a table using tabwriter for a given prefix and specification, returning an error if it fails
4488	Usagef will render a usage message based on the provided specification and output writer using the specified format and custom functions.
4489	Usaget gathers information and executes a template with the given prefix, specification, writer, and template.
4490	Scan method assigns a time value to Time struct or sets Valid to false if input is nil, returning an error if the input type is invalid
4491	Time's Value method returns its underlying time value or nil if it's invalid
4492	NewTime constructs a Time object with the given time and validity status.
4493	TimeFromPtr converts a pointer to time.Time to a custom Time struct.
4494	ValueOrZero returns zero time if invalid, otherwise returns the stored time value.
4495	MarshalJSON method returns JSON representation of time or null if invalid
4496	SetValid updates the Time instance with a new valid time value
4497	Ptr returns a pointer to the time.Time value if valid, otherwise it returns nil
4498	NewBool constructs a new Boolean value with the specified bool and validity status.
4499	BoolFromPtr converts a pointer to a bool to a custom Bool type.
4500	UnmarshalJSON method parses JSON data to a boolean or null.Bool value, updating the receiver's fields and returning an error if parsing fails.
4501	UnmarshalText sets bool value from text or returns error if invalid
4502	MarshalJSON method returns JSON representation of Boolean value "true" or "false" or "null" based on its validity
4503	SetValid updates a Bool's value and validity.
4504	NewString creates a new String instance with a given string value and validity flag.
4505	UnmarshalJSON parses JSON data into a String or NullString, updating its Valid field accordingly.
4506	MarshalText will convert a valid string to byte slice or return empty byte slice if invalid.
4507	UnmarshalText assigns text to String and sets Valid based on whether text is empty
4508	SetValid updates the string and marks it as valid.
4509	StringFromPtr converts a pointer to a string and returns it as a custom String type.
4510	String's MarshalJSON returns JSON representation or null if invalid.
4511	NewInt creates a new Int instance with the given integer value and validity flag.
4512	IntFromPtr converts pointer to integer returning new Int object
4513	UnmarshalJSON converts JSON data to Int, handling various types including float64, string, map, and nil, ensuring valid conversion or returning an error.
4514	MarshalText converts Int to text representation using strconv.
4515	SetValid updates integer value and sets validity to true
4516	UnmarshalText converts text to int64 and sets validity based on parsing success
4517	MarshalText method returns byte slice representation of Boolean value.
4518	SetValid updates a Float's value and validity flag
4519	Time.MarshalJSON returns JSON representation or error if time is invalid
4520	UnmarshalJSON parses JSON data into a Float object handling different types including float64, string, map, and nil.
4521	UnmarshalText will unmarshal text to float64 and set valid flag based on parsing success
4522	MarshalJSON will convert a Float to JSON, returning "null" if invalid or an error if infinity or NaN.
4523	newGossipChannel initializes and returns a gossipChannel struct with given parameters
4524	GossipUnicast sends a unicast message to a destination peer using gossip protocol.
4525	GossipBroadcast will relay a gossip update to all peers in the channel
4526	Send data to ourself through relay method
4527	gossipChannel.SendDown sends data to a connection using its sender method.
4528	gobEncode serializes a slice of interfaces to a byte array using Go's encoding/gob package
4529	newTokenBucket initializes a token bucket with given capacity and refill interval returns a pointer to the initialized token bucket
4530	wait method on tokenBucket struct sleeps until the earliest unspent token or enforces bucket capacity before removing a token
4531	capacityToken calculates the last refill time for a token bucket based on its refill duration and token interval.
4532	PrefixRangeEnd will return the last byte of a given prefix incremented by 1 or a new byte slice starting with 0 if no valid increment exists
4533	newLocalPeer creates a new local peer with a name, nickname, and router returns a pointer to the created local peer
4534	getConnections will return a set of connections from the local peer
4535	createConnection establishes a TCP connection between peers, checks connection limits, resolves addresses, handles errors, and starts local connections.
4536	doAddConnection sends a connection to handleAddConnection and waits for the result.
4537	startLocalConnection initializes a local connection using remote, TCP, router details and starts its goroutine.
4538	SendProtocolMsg sends a protocol message over a connection and handles errors by shutting down the connection.
4539	NewStatus constructs a Status struct from Router details.
4540	makePeerStatusSlice converts peers to a list of PeerStatus objects
4541	makeUnicastRouteStatusSlice will return a slice of unicast route statuses from a routes object
4542	makeBroadcastRouteStatusSlice will return a slice of broadcast route statuses for each source and its corresponding hops as strings
4543	makeLocalConnectionStatusSlice generates a list of local connection statuses by iterating over connections and targets, updating their states and information accordingly.
4544	makeTrustedSubnetsSlice converts IPNet slice to string slice
4545	Range handles key range requests using internal raft protocol and returns response or error.
4546	Put method processes a put request using internal raft protocol, handles errors and cancels request on context done or store quit.
4547	DeleteRange will delete a key range and return a response or error based on the request.
4548	Txn processes a transaction request using internal raft protocol and returns response or error.
4549	Compact returns an error indicating the functionality is not implemented.
4550	proposeInternalRaftRequest marshals the request, checks its size, registers it, sends data to proposalc channel, and returns message and error channels along with any errors encountered.
4551	applyCompare checks if a key-value pair matches a comparison condition and returns the revision and whether the condition is met
4552	Descriptions method returns a list of peer descriptions while locking the peers object
4553	OnGC adds a callback to the peers slice safely under a lock.
4554	OnInvalidateShortIDs adds a callback to the peers object's onInvalidateShortIDs slice while ensuring thread safety.
4555	chooseShortID attempts to find an unused short ID from a pool and returns it along with a boolean indicating success
4556	fetchWithDefault retrieves or creates a peer, updating its reference count and adding it to the peers map and short ID list.
4557	Fetch retrieves a peer by name from the Peers instance.
4558	fetchAndAddRef will lock peers, increment localRefCount if peer exists, and return the peer
4559	FetchByShortID retrieves a peer by its short ID using a read lock.
4560	GarbageCollect will lock peers, perform garbage collection, unlock and notify pending notifications.
4561	newRoutes initializes a routes object with channels for recalculation, waiting, and actions, then starts a goroutine to run it.
4562	OnChange will register a callback to be executed when routes change.
4563	Unicast method retrieves a peer's name and whether it was found in the routes map
4564	UnicastAll retrieves a peer's hop count and presence from routes.
4565	Broadcast will return peer names based on lookup or calculation
4566	BroadcastAll will lookup or calculate peers based on name and return them
4567	NewPeer creates a new peer instance with given name, UID, and logger, starts its loop goroutine, and returns it.
4568	Register updates peer's gossip state asynchronously.
4569	ReadFrom reads data from a peer and returns the number of bytes read, the remote address, and any errors encountered.
4570	WriteTo sends data to a peer and returns the number of bytes written and an error if any.
4571	LocalAddr returns the local address of the peer.
4572	OnGossip processes buffer to create gossip data.
4573	OnGossipBroadcast processes a gossip broadcast, constructs a packet, sends it for reading, and returns the packet slice along with no error.
4574	OnGossipUnicast processes unicast gossip messages and sends them to the read channel.
4575	NewDefaultServer initializes a default server with specified configurations and returns a Server instance.
4576	PeerNameFromUserInput converts user input to a fixed-length peer name using SHA-256 hashing.
4577	PeerName.bytes converts hexadecimal string to byte slice
4578	NewRouter initializes a Router instance with given configuration, name, nickname, overlay, and logger, setting up various components like peers, routes, and connection maker.
4579	sendAllGossip sends all gossips to their respective channels
4580	sendAllGossipDown sends all gossip messages from the router's channels to the given connection
4581	broadcastTopologyUpdate will send updated peer information to all peers in the topology
4582	OnGossipUnicast logs unexpected topology gossip unicast messages and returns an error.
4583	OnGossipBroadcast processes gossip updates, applies topology changes, and returns updated peer data or an error.
4584	Gossip returns topology gossip data containing router peers and their names
4585	OnGossip applies topology updates and returns gossip data or an error.
4586	Encode method returns encoded peers data as byte slices
4587	newState creates a new state object for a given peer name
4588	Merge combines two state objects and returns a complete GossipData object.
4589	mergeReceived updates state with received data, removes duplicates, and returns the merged set.
4590	mergeComplete updates state with higher values from input set and returns a new state object
4591	OnGossipBroadcast processes gossip updates and returns new surrogate gossip data along with no error.
4592	OnGossip checks if an update has been seen before and stores it if unique.
4593	generateKeyPair will create and return a public and private key pair along with any errors encountered during generation
4594	formSessionKey generates a session key from remote and local public keys and a secret key using box.Precompute and sha256.
4595	newTCPCryptoState creates a TCP crypto state with a session key and sets nonce flags based on direction
4596	Send encodes and sends a message using the encoder associated with the gobTCPSender.
4597	Send method sends a TCP message prefixed with its length and returns an error if the message is too large.
4598	Send will encrypt a message using the sender's session key and send it over the network. An error will be returned if the encryption fails.
4599	Receive method decodes a message from the decoder and returns it along with any errors encountered.
4600	Receive reads a TCP message with a 4-byte prefix indicating its length and returns the message or an error if the message exceeds the maximum size.
4601	Receive method reads encrypted message, decrypts it using session key and nonce, advances state, and returns decrypted message or error
4602	newPeer creates a peer instance with given name and logger starts its goroutine
4603	incr increments the peer's state and broadcasts the update, returning the new state
4604	Gossip method returns a copy of peer's state data and logs the current set.
4605	OnGossipUnicast decodes a map from gossip buffer merges it with peer state logs merge result
4606	makeRaftPeer creates a Raft peer from a network address.
4607	peer.String returns a formatted string combining Name and NickName
4608	forEachConnectedPeer iterates over connected peers, applying a function based on connection status and exclusion criteria.
4609	parsePeerUID converts a string to a PeerUID and returns an error if parsing fails
4610	Swap two elements in listOfPeers
4611	listOfPeers.Less will compare two peers by their name and return true if the first peer's name is less than the second peer's name
4612	doIntro sets connection deadlines, exchanges protocol header, generates key pair if needed, sets new deadlines, and handles protocol versions.
4613	filterV1Features will return a filtered map containing only keys from protocolV1Features present in the input map.
4614	newConnectionMaker initializes a new connection maker with necessary parameters and starts a query loop.
4615	connectionAborted updates target state, last error, and schedules next try later
4616	newGossipSender creates a new gossip sender with message functions, sender, and stop channel, returning a pointer to the gossip sender.
4617	Send method updates gossip data atomically, merges new data if necessary, and notifies producer if queue was empty.
4618	Broadcast updates gossip data for a peer or merges new data.
4619	Flush sends a signal to the gossipSender and waits for a response indicating whether the flush was successful.
4620	Sender retrieves or creates a gossip sender for a channel.
4621	Flush will send all messages and return true if any were sent
4622	findMainPath will return the file path of the main function or tRunner in tests
4623	Create generates a channel token using the provided client ID and returns it along with any errors encountered during the process.
4624	Send sends a message to a client using the given context and returns an error if the request fails
4625	SendJSON will marshal a Go value to JSON and send it using the Send function, returning any errors encountered.
4626	remapError will modify APIError service field to "channel" if it's currently "xmpp" and return the modified or original error
4627	NamespacedContext adds a namespace to a context and returns it
4628	protoToItem converts a protocol buffer item to an Item struct.
4629	singleError returns the first error from a MultiError or the original error
4630	Get retrieves a cached item by key or returns an error if the item is not found
4631	GetMulti retrieves multiple items from memcache using keys and returns them as a map.
4632	Delete removes a key from cache and returns an error if any occurs
4633	DeleteMulti deletes multiple keys from memcache and returns an error if any deletion fails
4634	Increment will return the new value of a counter and an error if the increment operation fails
4635	IncrementExisting increments a counter by a given delta and returns the new value.
4636	set will send items to memcache and handle response errors
4637	Codec.Get retrieves an item from storage, unmarshals its value into the given variable, and returns the item or an error.
4638	Stats retrieves cache statistics from Memcache and returns them as a Statistics object or an error if the request fails or no stats are available.
4639	Flush sends a flush request to memcache and returns any errors encountered.
4640	RunInBackground will run a function in background and return an error if it fails to start
4641	List will return a list of modules and an error
4642	SetNumInstances updates the number of instances for a given module and version in a specified context.
4643	Versions will fetch versions for a given module and return them along with any errors encountered during the process
4644	DefaultVersion retrieves the default version for a given module and returns it along with any errors encountered.
4645	Start will initiate a module request with optional parameters and return an error if unsuccessful
4646	Stop sends a stop request to the specified module and version and returns an error if the call fails
4647	Ancestor sets the ancestor key for a query and returns the modified query.
4648	EventualConsistency sets eventual consistency on a query and returns it.
4649	Project clones a query and sets the projection fields.
4650	Distinct method on Query struct clones it sets distinct flag to true and returns the modified query
4651	DistinctOn method clones query and sets distinct fields.
4652	KeysOnly method sets keysOnly field to true and returns a cloned Query instance.
4653	Limit sets the maximum number of results to return and returns an error if the limit is out of bounds
4654	Offset sets the query's offset and returns the modified query or an error if the offset is invalid.
4655	BatchSize sets the query's batch size to the given integer, returns the modified query or an error if out of bounds
4656	Start clones Query, validates Cursor, sets start cursor, returns modified Query
4657	End sets query's end cursor and returns modified query or error if cursor is invalid.
4658	Count will return the number of matching entities based on the query parameters, handling pagination and potential errors.
4659	Run will execute a datastore query and return an iterator or an error
4660	Next retrieves the next key and entity, loading it into dst if not keysOnly, returning the key and any error encountered
4661	Cursor returns the current cursor for the iterator or an error if the iterator is invalid.
4662	Cursor's String method returns its base64 URL-encoded protobuf representation or panics on marshal failure.
4663	DecodeCursor decodes a cursor from a base64-encoded string and returns a Cursor object or an error if decoding fails
4664	saveEntity will convert a Go struct to a protobuf entity proto an error will be returned if conversion fails
4665	Namespace validates a namespace and returns a namespaced context or an error.
4666	typeof returns the type of a variable or function from TypeConfig, defaulting to empty string
4667	dot method searches for field or method by name in struct and embedded types, returning its value if found.
4668	joinFunc will generate a function signature based on input and output parameter lists
4669	validPropertyName checks if a property name is valid according to certain rules
4670	getStructCodec retrieves a struct codec for a given type, locking to ensure thread safety.
4671	LoadStruct will load properties into a struct and return an error if it fails
4672	SaveStruct converts an interface to a struct and saves it, returning properties and any errors encountered.
4673	ServingURL constructs a serving URL for a blob key with optional resizing and cropping options.
4674	DeleteServingURL deletes a serving URL using the provided BlobKey and returns an error if the operation fails
4675	CurrentOAuth retrieves user details using OAuth, handling multiple scopes and returning a User object or an error.
4676	OAuthConsumerKey sends a request to check OAuth signature and returns the consumer key or an error.
4677	String method returns user's email without domain or federated identity if available.
4678	LoginURL will return a federated login URL and an error if the destination is invalid
4679	LoginURLFederated constructs a login URL using federated identity and returns it or an error
4680	LogoutURL constructs a logout URL using a given destination and returns it or an error.
4681	insertContext will add a context to a function call if it doesn't already have one
4682	NewClient creates a new client with an appcfg header and returns it along with the URL and app ID. An error is returned if the server cannot be contacted.
4683	NewContext creates a new context with call, log, and app ID overrides.
4684	NewRemoteContext creates a new remote context using the provided host and HTTP client, returning an error if creation fails.
4685	Debugf logs a message using internal.Logf with the given context, format, and arguments.
4686	guestbookKey generates a datastore key for a guestbook entity with a default name.
4687	toRetryParameters converts RetryOptions to TaskQueueRetryParameters
4688	NewPOSTTask creates a new POST task with given path and parameters.
4689	ParseRequestHeaders extracts headers from an HTTP request and returns a RequestHeaders object containing various parsed values.
4690	Add will add a task to a queue and return the added task or an error if the task was already added
4691	AddMulti adds multiple tasks to a queue and returns the updated tasks along with any errors encountered.
4692	Delete removes a task from a queue and returns an error if any occurs.
4693	DeleteMulti deletes multiple tasks from a specified queue and returns an error if any task deletion fails
4694	Lease will return a list of tasks and an error if the lease request fails
4695	LeaseByTag will return tasks based on a tag and an error if leasing fails
4696	Purge will send a request to purge a task queue and return an error if it fails
4697	ModifyLease updates a task's lease time and returns an error if unsuccessful.
4698	QueueStats retrieves stats for task queues and returns them along with errors.
4699	IsTimeoutError checks if an error is a timeout error
4700	Func registers a function with a unique key and validates its signature.
4701	Task validates arguments and encodes them into a task queue.
4702	RequestHeaders retrieves request headers from context or returns error if not found.
4703	WithContext will add HTTP request to parent context and return it
4704	WithAPICallFunc sets an API call override function in the context.
4705	APICall makes a remote procedure call using the given context, service, method, input, and output messages, returning any errors encountered during the call.
4706	ModuleHostname retrieves a hostname based on module, version, and instance, returning an error if the request fails.
4707	AccessToken retrieves an access token with specified scopes and returns it along with its expiration time or an error.
4708	PublicCertificates fetches public certificates using gRPC and converts them to Certificate structs.
4709	ServiceAccount will return a service account name and an error
4710	SignBytes sends a request to sign bytes using the app identity service and returns the key name and signature or an error.
4711	fetch will fetch data from a blob store and update reader buffer and offset on success or return error
4712	seek will update reader's position and buffer based on offset, returning new position and error if out of bounds
4713	multiKeyToProto converts multiple keys to proto references
4714	referenceValueToKey converts a reference value to a key and returns it along with an error if invalid
4715	keyToReferenceValue converts a Key to a ReferenceValue with the specified defaultAppID.
4716	Put will store a key-value pair and return the key and an error if the operation fails
4717	PutMulti will put multiple entities into the datastore and return the keys and an error if any operation fails
4718	Delete will remove a key from the cache and return an error if it fails
4719	DeleteMulti deletes multiple keys from datastore and returns an error if any key is invalid
4720	deploy will execute a command with arguments from flags and return an error if it fails
4721	Next method returns the next record from the result set or an error if no more records are available.
4722	protoToAppLogs converts protobuf log lines to application logs.
4723	protoToRecord converts a protobuf request log to a Record object.
4724	Run method executes query and returns result object
4725	run method processes log read response updates context offset converts protobuf logs to records and sets results seen flag returns error if any
4726	Current retrieves user details from headers and returns a User object or nil if no valid email or federated identity is found.
4727	IsAdmin checks if user is admin based on header.
4728	isErrFieldMismatch checks if an error is a *datastore.ErrFieldMismatch
4729	Stat retrieves BlobInfo from Datastore using blobKey, returns it or an error if retrieval fails.
4730	Send sets the X-AppEngine-BlobKey header and ensures Content-Type is set correctly
4731	UploadURL constructs a request to generate a URL for uploading files with optional size and bucket constraints, then parses the response URL.
4732	Delete will remove a blob key from storage and return an error if unsuccessful
4733	DeleteMulti deletes multiple blobs from the blobstore and returns an error if any deletion fails
4734	NewReader creates a new reader from a blob key using the given context.
4735	Handle registers an HTTP handler to process XMPP chat messages using a provided function.
4736	Send sends an XMPP message and returns an error if the message fails to send or if there are any errors in the response status.
4737	Invite sends an XMPP invite request and returns an error
4738	Send presence request using protobuf and return response or error
4739	GetPresence fetches user presence and returns it or an error.
4740	GetPresenceMulti fetches presence status for multiple JIDs and returns results or errors
4741	newStructFLS will return a FieldLoadSaver and an error if the input is not a non-nil pointer to a struct
4742	SaveStruct will return a slice of Field and an error after saving a struct with metadata.
4743	Namespaces will return all namespace keys as strings an error will be returned if the query fails
4744	Kinds will return all kind names from datastore or an error if failed
4745	RunInTransaction executes a function within a transaction with retries on concurrent errors.
4746	imports checks if a file has an import path and returns true if it does
4747	importSpec searches through an AST file's imports to find a matching path and returns the corresponding ImportSpec or nil if not found
4748	declImports checks if a given import path exists in an AST's GenDecl node.
4749	isPkgDot checks if expression is a selector of given package and name
4750	isTopName checks if an expression is an identifier matching a given name and has no object associated with it
4751	isName checks if an expression is an identifier matching a given name
4752	isCall checks if an expression is a call to a specific package and function
4753	refersTo checks if two AST nodes refer to the same identifier
4754	isEmptyString checks if an expression represents an empty string.
4755	countUses counts how many times an identifier is used within a given scope
4756	assignsTo checks if a variable is assigned within a given scope
4757	newPkgDot constructs a selector expression for package and name at given position
4758	renameTop renames top-level identifiers from old to new in an AST, fixing imports and declarations.
4759	matchLen will return the length of the common prefix between two strings
4760	deleteImport removes an import statement from a Go file and returns whether the import was deleted
4761	rewriteImport updates import paths in an AST file and returns whether any changes were made
4762	DefaultTicket returns a unique ticket based on app ID and version info
4763	flushLog will send logs to a server and return whether the operation was successful
4764	withDeadline sets a deadline on a context and returns a new context and cancel function
4765	KeepAlive sends a request to get the socket name and returns an error if unsuccessful.
4766	applyTransaction applies a transaction to a protocol buffer message using a setter function
4767	analyze processes tags to determine if main exists, collects files, and imports, returning an app struct and error
4768	buildContext constructs a new build context with specified tags appended to default tags.
4769	synthesizeMain will create a unique filename for a main Go file and add it to a tar archive, returning an error if no unique name can be found
4770	findInGopath searches for a directory within GOPATH and returns its path or an error if not found
4771	copyTree will recursively copy files and directories from source to destination using tar.Writer, skipping certain files based on a list
4772	copyFile will copy file from source to destination using tar writer and handle errors
4773	checkMain will verify if the Go project contains a valid main package and func main, returning a boolean indicating success, a list of file paths, and any encountered errors.
4774	isMain checks if a function declaration represents the main function with no parameters or receiver
4775	readFile checks if a Go file contains a main function and returns true if it does.
4776	initField navigates through nested fields using indices and returns the final field value, creating pointers if necessary.
4777	loadEntity converts protobuf entity to struct properties and loads them into destination or returns error
4778	validIndexNameOrDocID checks if a string is a valid index name or document ID, returning true if it meets the criteria and false otherwise.
4779	Open initializes an Index object from a valid name or returns an error
4780	Put will store a value and return its ID or an error
4781	Get will retrieve a document by its ID and store it in dst, returning an error if the document is not found or the ID is invalid.
4782	Delete will remove an item from the index based on the given ID and context, returning an error if unsuccessful
4783	DeleteMulti deletes multiple documents from an index and returns any errors encountered.
4784	Search will return an iterator for searching with a query and options, handling cursor, limit, fields, and other search parameters.
4785	fetchMore updates iterator's error or retrieves more results if available
4786	Next retrieves the next document ID and loads it into the destination if not idsOnly, returning an error if any issues arise.
4787	Iterates over facets to create a result list with refined values and counts.
4788	DefaultBucketName retrieves the default GCS bucket name from the RPC response or returns an error.
4789	valid checks if a key is complete and consistent
4790	Equal checks if two keys are equal by comparing their kind, stringID, intID, appID, and namespace fields, returning true if they match.
4791	root method returns the top-level parent key of the given key
4792	Key's marshal method serializes its fields to a buffer recursively.
4793	String method returns a marshaled representation of Key or empty string if Key is nil
4794	Encode will convert a Key to a URL-safe base64 encoded string, stripping any trailing padding.
4795	DecodeKey decodes a base64 encoded string to a Key object.
4796	NewIncompleteKey creates a new incomplete key using the given context, kind, and parent key.
4797	NewKey creates a new Key instance with the given parameters and uses the parent's namespace or the context's namespace if no parent is provided.
4798	AllocateIDs will return allocated ID range and error if input is invalid
4799	IsOverQuota checks if an error is a CallError with code 4.
4800	ClassicContextFromContext extracts appengine context from netcontext or returns an error if not available
4801	Send sends a message using a context and returns an error
4802	sendToAdmins will send a message to admins using a context and return an error if it fails
4803	Failures counts the number of failed tests in a report
4804	decodeFieldNumberAndTyp3 extracts a field number and type from a byte slice returning the values and any errors encountered
4805	checkTyp3 verifies if the provided Typ3 matches the expected type based on the reflection and field options, returning an error if they mismatch.
4806	decodeTyp3 will parse a typ3 byte and return its value along with the number of bytes read and an error if the byte is invalid
4807	NewPrefixBytes creates a new PrefixBytes instance with the given prefixBytes copied over.
4808	getLengthStr returns a string representation of the size or type of a variable based on its kind
4809	collectImplementers_nolock updates implementers map for given type info
4810	checkConflictsInPrio_nolock checks for type conflicts in priority list and returns an error if any type does not conflict
4811	constructConcreteType creates a concrete type reflect.Value based on pointer preference and returns it along with a set of reflect.Values
4812	MarshalBinaryLengthPrefixedWriter will write a binary representation of an object to a writer and return the number of bytes written or an error
4813	Codec.MarshalBinaryBare encodes an object to binary format, handling pointers and appending prefix bytes if registered.
4814	UnmarshalBinaryLengthPrefixed decodes a length-prefixed binary message into a Go value, returning an error if the data is incomplete or invalid.
4815	UnmarshalBinaryBare decodes binary data into a Go struct, handling registered types and verifying prefix bytes.
4816	MustMarshalJSON will marshal JSON and panic if an error occurs
4817	MustUnmarshalJSON will unmarshal JSON data to a given pointer and panic if there's an error
4818	MarshalJSONIndent encodes an object to JSON with indentation using specified prefix and indent strings, returning the resulting byte slice and any errors encountered.
4819	newDataReader wraps an io.Reader with a buffered reader and returns an internalDataReader instance
4820	Read method processes Telnet commands and returns bytes read or an error.
4821	ListenAndServeTLS starts a secure server with TLS using provided certificate and key files.
4822	Produce will execute a producer function and return a handler.
4823	PromoteHandlerFunc wraps a HandlerFunc with input/output redirection and returns a new Handler.
4824	Serve starts a server with a given listener and handler, returning an error if it fails to start.
4825	Serve listens for TELNET connections, handles them with a specified or default handler, and logs each step.
4826	Fail method logs usage and exits with error message.
4827	WriteUsage prints the usage message to the specified writer.
4828	WriteHelp method prints parser's usage and descriptions to given writer
4829	MustParse initializes a parser, parses flags, handles help/version errors, and returns the parser or fails on other errors
4830	Parse initializes a parser and parses flags into destination interfaces.
4831	walkFields will recursively visit each field in a struct and apply a visitor function
4832	Parse checks command-line flags and processes arguments accordingly.
4833	setSlice updates a slice field with parsed values from a string array, handling pointers and truncation.
4834	canParse determines if a type is parseable, boolean, or supports multiple values recursively
4835	isBoolean checks if a type implements textUnmarshaler or is a boolean pointer
4836	NewFromMap creates a new Tree from a given map, inserting each key-value pair.
4837	Insert method adds a new key-value pair to a tree, updating or splitting nodes as necessary.
4838	Delete a string from a tree and return its value and deletion status
4839	DeletePrefix removes all nodes with the given prefix and returns the count.
4840	deletePrefix removes a prefix from a tree and merges nodes if necessary.
4841	Get retrieves a value from a tree using a given key and returns it along with a boolean indicating whether the key was found.
4842	LongestPrefix finds the longest matching prefix in a tree and returns its key, value, and whether it was found.
4843	Minimum returns the smallest key, its value, and whether it exists in the tree
4844	WalkPrefix traverses a tree starting with a given prefix and applies a function to each node along the path.
4845	recursiveWalk will traverse a tree structure calling a function on each node and return true if the function returns true for any node
4846	ToMap converts a Tree to a map using Walk method.
4847	checkip determines the type and index of an IP address, returning its numeric representation and the calculated index based on metadata.
4848	readuint32 reads a uint32 from a file at a specified position and returns it
4849	readuint128 reads a 128-bit unsigned integer from file at given position in big-endian format
4850	loadmessage sets all fields of IP2Locationrecord to input message and returns it
4851	Printrecord prints details of an IP2Location record
4852	Main will draw a scaled-down gopher image and return the output file name with the specified extension.
4853	SaveToPdfFile saves PDF content to a file and returns an error if it fails.
4854	CubicCurveTo adds a cubic Bézier curve to the path.
4855	ArcTo method updates path components based on arc parameters.
4856	String method for Path returns a string representation of path commands and their coordinates.
4857	VerticalFlip will return a new Path with vertical flipping applied to its components and y-coordinate.
4858	NewGlyphCache initializes a new GlyphCacheImp instance with an empty map of glyphs.
4859	Fetch retrieves or renders a glyph from the cache and returns its copy.
4860	renderGlyph creates a Glyph object from a rune using the specified font name and GraphicContext
4861	Copy method creates a new Glyph instance with copied Path and Width from the original Glyph.
4862	Fill method sets up a graphic context to fill a path at specified coordinates and returns the width.
4863	Main will generate a PDF with lines and shapes and return the filename
4864	Draw will render a line on the canvas using the specified coordinates and graphic context
4865	Paint will process spans to update vertices and colors for rendering.
4866	SetColor updates painter's color based on input color object
4867	NewPainter creates a new Painter instance initializes vertices and colors slices with initial capacities returns the painter object
4868	GetStringBounds calculates bounds for a given string using the current font, returning left, top, right, and bottom coordinates.
4869	recalc updates the scale factor based on font size, DPI, and conversion rate
4870	setFont updates the current font in GraphicContext
4871	ClearRect updates the SVG groups with a new masked group based on specified coordinates.
4872	drawString renders text based on font mode and returns width
4873	newGroup creates a new SVG group based on drawType and attaches it to the GraphicContext's svg.Groups slice.
4874	newMask creates a new Mask object initializes its properties and attaches it to the GraphicContext's SVG masks list returns the created Mask object
4875	embedSvgFont will return a Font object with embedded SVG glyphs for given text an error will be returned if the font cannot be loaded
4876	TraceQuad will recursively trace a quadratic Bézier curve using the provided Liner interface and flattening threshold, returning an error if the input quad length is less than 6.
4877	GetFontName returns a formatted string combining font name, family, style, and size from ContextStack
4878	NewStackGraphicContext initializes a new StackGraphicContext with default values.
4879	NewFolderFontCache initializes a FolderFontCache instance with the specified folder path.
4880	NewSyncFolderFontCache creates a new font cache for a given folder.
4881	Main sets drawing context, draws a gopher, restores state, and returns output filename.
4882	NewPdf creates a new PDF document with specified orientation, unit, and size returns a pointer to the Fpdf object
4883	clearRect clears a rectangular area on the GraphicContext with white color and restores the previous fill color and position
4884	NewGraphicContext initializes a new GraphicContext object with a given PDF document and sets its DPI.
4885	Clear will clear the entire drawing area of a graphic context.
4886	GetStringBounds calculates text bounds using font metrics.
4887	CreateStringPath sets the PDF cursor position and draws a string path, returning the width.
4888	FillStringAt creates a string path and returns the cursor position
4889	SetStrokeColor updates stroke color on graphic context and PDF drawing settings.
4890	SetFillColor updates fill color in graphic context and related PDF settings
4891	SetLineDash updates the line dash pattern and offset in the graphic context and PDF document
4892	SetLineWidth updates the line width in both stack and PDF contexts
4893	Main draws "Hello World" on a graphic context and returns the output file name with the given extension.
4894	Draw will render a rounded rectangle and display "Hello World" in bold italic font
4895	SaveToPngFile saves an image to a PNG file and returns an error if any step fails
4896	LoadFromPngFile opens a PNG file and returns its image data along with any errors encountered.
4897	Resource constructs a file path based on folder, filename, and extension, prepending "../" for specific extensions.
4898	Output will generate a file path based on the input name and extension
4899	Main function draws a tiger image using draw2d library and returns the output filename.
4900	Draw opens a PostScript file and interprets its contents using a graphics context.
4901	Main draws a droid and returns the output filename with specified extension
4902	Bubble will draw a bubble shape on the GraphicContext at position (x,y) with given width and height
4903	Dash draws a dashed line on a graphic context.
4904	CubicCurve draws a cubic curve on the given GraphicContext using specified parameters and stroke colors.
4905	FillStroke draws a stroke on a graphic context with specified dimensions and properties
4906	FillStyle draws a filled rectangle with two wheels using GraphicContext.
4907	PathTransform modifies gc with transformed path.
4908	Star draws a star shape at specified coordinates with given dimensions and rotation.
4909	Draw will render various shapes and graphics on a canvas using a GraphicContext object.
4910	ConvertPath converts a drawing path to PDF components.
4911	Draws lines with different caps and joins then returns the output filename.
4912	Draw will render two lines on a graphic context, a thicker black line and a thinner red line connecting points (x0,y0) to (x1,y1).
4913	DrawContour will draw a contour using a path builder and a list of points with translation offsets, connecting them with lines or quadratic curves based on point flags.
4914	Flatten converts a complex path to a simpler form using a flattener and a scaling factor.
4915	Clear will clear the entire image area by calling ClearRect with the image dimensions.
4916	ClearRect will clear a rectangular area on the graphic context with the current fill color
4917	DrawImage applies a transformation to an image based on the given filter and draws it onto a destination image using specified options.
4918	Main will return an output filename and an error after drawing a gopher on a graphic context with specified margin and line width
4919	Draw will render a PNG image within a framed area with scaling and rotation transformations, returning any errors encountered during the process.
4920	Draw function uses GraphicContext to draw a droid at specified coordinates.
4921	ChecksumString32S calculates a checksum for a given string using a 32-bit seed.
4922	ChecksumString64S computes checksum for a string using a seed value
4923	NewS32 initializes and returns an XXHash32 instance with the given seed.
4924	NewS64 initializes and returns a new XXHash64 instance with the given seed.
4925	round64 will return a hashed value using a combination of input values and primes through rotation and multiplication operations
4926	Checksum32S computes a 32-bit checksum for input data using a specified seed and various prime numbers.
4927	Checksum64S calculates a 64-bit checksum using either checksum64 or checksum64Short based on input length and seed.
4928	getStage will return the current stage, a function to advance the stage, and a function to reset the environment an error will be returned if setting the environment variable fails
4929	New initializes Glg with default settings and logger configurations.
4930	Get initializes and returns a singleton Glg instance
4931	SetMode updates logger modes and returns Glg instance
4932	SetPrefix updates the logger's prefix and returns the Glg instance
4933	GetCurrentMode retrieves logger mode based on level, returns NONE if not found
4934	InitWriter resets writers in logger and updates mode for each level in Glg.
4935	SetWriter updates the logger's writer and returns the Glg instance.
4936	SetLevelColor updates the color function for a specified log level in Glg.
4937	SetLevelWriter updates logger's writer for a given level and returns Glg instance
4938	AddStdLevel adds a standard logging level to Glg and returns it
4939	EnableColor enables color logging for all log levels in Glg instance.
4940	EnableLevelColor enables color for a logger level and returns the Glg instance.
4941	DisableLevelColor updates the color setting for a log level in Glg and returns the updated logger instance
4942	RawString extracts a substring from byte data based on separators and removes trailing characters.
4943	TagStringToLevel will convert a tag string to a level using a map, returning 255 if the tag is not found.
4944	Println will log a message with optional values and return any errors encountered
4945	Fatal logs a message and exits the program with status 1
4946	Fatalf logs a fatal error message and panics if logging fails
4947	isModeEnable checks if a given mode is enabled for a Glg instance
4948	CaptureMetrics captures metrics using a handler and returns them.
4949	cedar.get retrieves a value from a data structure using a key and returns its address.
4950	Save will encode Cedar data to specified format using Writer and return error if format is invalid
4951	SaveToFile opens a file, writes data using Save method, and returns an error if any occurs.
4952	Load will decode data from reader based on data type and return error if data type is invalid
4953	LoadFromFile opens a file and reads its contents using Load method.
4954	Key will return a byte slice representing the key and an error if invalid or no path is found
4955	Value retrieves the value from Cedar's array or returns an error if not found
4956	Delete key from Cedar data structure, handle siblings and release nodes
4957	Set will parse a version string and set the Major, Minor, Patch, PreRelease, and Metadata fields of the Version struct, returning an error if the input is invalid
4958	Version.Compare compares two versions recursively then uses pre-release compare if needed.
4959	Slice method returns version components as int64 slice
4960	BumpMajor increments the major version and resets minor, patch, pre-release, and metadata fields.
4961	BumpMinor increments minor version resets patch to 0 and clears pre-release and metadata
4962	BumpPatch increments the patch version and resets pre-release and metadata fields.
4963	validateIdentifier checks if the input string is a valid semver identifier and returns an error if it's not
4964	newStream initializes a Stream object with specified buffer size and replay option
4965	addSubscriber adds a subscriber to the stream and returns it
4966	New creates a new Server instance with default settings and initializes its streams map.
4967	Close method releases all streams by sending quit signal and removing them from server's Streams map
4968	CreateStream creates or returns an existing stream for a given ID, ensuring thread safety.
4969	RemoveStream will remove a stream by ID and close it if it exists
4970	StreamExists checks if a stream exists by ID and returns a boolean.
4971	Publish method sends an event to a stream identified by id after processing it.
4972	NewClient creates a new client with the given URL and default settings
4973	Subscribe to a stream, handle events with a callback, retry on errors using exponential backoff.
4974	SubscribeChan will subscribe to a stream and send events to a channel handling reconnections and errors
4975	SubscribeRaw registers a raw event handler for the client.
4976	Unsubscribe will send a signal to close a subscription channel
4977	NewEventStreamReader initializes an EventStreamReader with a custom split function for parsing event payloads.
4978	ReadEvent reads next event from stream returns byte slice and error if any
4979	HTTPHandler manages streaming server responses, handling connections, events, and errors.
4980	Add event to log, set ID and timestamp.
4981	Replay will send events to subscriber's connection if their ID is greater than or equal to the subscriber's eventid
4982	readKey reads a private key from a file and returns a crypto.Signer or an error
4983	writeKey will save an ECDSA private key to a file at a specified path and return an error if any step fails
4984	anyKey generates or reads a key from a file and returns a crypto.Signer and error
4985	sameDir joins existing directory path with filename
4986	printAccount formats and prints account details to a writer
4987	tmpl will execute a template with data and write to an io.Writer, handling errors appropriately
4988	printUsage outputs the usage template to the given writer
4989	FromRequest retrieves the client's IP address from headers or remote address.
4990	Do method on ClearParams executes a command with given context and parameters returning an error.
4991	Do method executes a command using cdp.Execute with DisableParams and returns any errors encountered
4992	Do will execute the RemoveDOMStorageItem command on the given context and parameters returning an error if any.
4993	Do method executes a command to set DOM storage item and returns an error if any.
4994	Do method executes a command to deliver a push message using the provided parameters and returns an error.
4995	Do method executes a command to dispatch a sync event and returns any errors encountered
4996	Do will execute a command with the given parameters and return an error if it fails
4997	Do method on SetForceUpdateOnPageLoadParams struct executes a command using cdp.Execute and returns any error encountered.
4998	Do method executes a command to skip waiting parameters and returns any errors encountered
4999	Do will execute a command to start a worker with parameters and return an error
5000	Do method executes StopAllWorkers command using cdp library and returns any errors encountered.
5001	Do method executes a command to stop a worker and returns any errors encountered
5002	Do will execute a command to unregister parameters and return an error
5003	Do method executes an update registration command using the provided parameters and returns any errors encountered.
5004	Do will execute a command with parameters and return an error.
5005	Do will execute a command using the UnbindParams and return an error if it fails
5006	ExceptionDetails.Error returns a formatted string representing the exception details.
5007	Do method executes ReleaseAnimations command using provided parameters and context, returning any errors encountered.
5008	Do will execute a command to seek animations with parameters and return an error
5009	Do will execute a command to pause a set of parameters in a given context and return any errors encountered
5010	Do method executes SetPlaybackRate command with parameters using cdp library.
5011	Do method executes a command to set timing parameters and returns any errors encountered.
5012	Do method executes a command to prepare for leak detection in the given context and returns any errors encountered
5013	Do method executes JavaScript memory purge command
5014	Do method executes a command to set pressure notifications suppressed and returns an error.
5015	Do method executes a command to simulate pressure notification with parameters and returns any errors encountered.
5016	WithSamplingInterval sets the sampling interval and returns the modified params object.
5017	WithSuppressRandomness sets SuppressRandomness field and returns updated StartSamplingParams instance
5018	Do method executes a command to start sampling with given parameters and returns an error if any occurs
5019	Do method executes a command to stop sampling and returns an error if it fails
5020	Do will execute a command to clear device orientation override parameters and return an error if the execution fails
5021	Do will execute a command to set device orientation override parameters and return any errors encountered
5022	Do will execute a command to start violations report and return an error
5023	Do will execute a command to stop violations report and return an error
5024	String method returns a string representation of a modifier type.
5025	WithNodeID sets the NodeID field of GetPartialAXTreeParams and returns the modified params
5026	WithBackendNodeID sets the BackendNodeID field of GetPartialAXTreeParams and returns the updated struct
5027	WithObjectID sets the ObjectID field and returns the updated GetPartialAXTreeParams instance
5028	WithFetchRelatives sets the FetchRelatives field and returns the modified GetPartialAXTreeParams instance
5029	Do will execute a command to set time domain parameters and return an error if it fails
5030	WithClipRect sets the clipRect field in ProfileSnapshotParams and returns the updated struct
5031	Do will execute a command with the given parameters and return any errors encountered.
5032	Do method executes ClearObjectStore command on ctx returning an error
5033	Do will execute a command to delete a database with parameters and return an error
5034	Do method executes a command to delete object store entries and returns any errors encountered.
5035	WithKeyRange sets the key range and returns the modified params.
5036	Do method executes a command to set sampling interval with given parameters and returns an error if any.
5037	Do will execute a command and return an error
5038	WithCallCount sets the CallCount field in StartPreciseCoverageParams and returns the updated struct pointer.
5039	WithDetailed updates the Detailed field of StartPreciseCoverageParams and returns the updated instance.
5040	Do method executes a precise coverage command using cdp library.
5041	Do will execute a command to start type profiling and return any errors encountered
5042	Do will execute a command to stop precise coverage and return an error if it fails
5043	Do method executes a command to stop type profiling and returns an error if it fails
5044	Do will execute a command to set ignore certificate errors parameters and return an error
5045	Do method executes a command to add inspected heap object params and returns an error.
5046	Do will execute a garbage collection command and return an error if it fails
5047	WithSamplingInterval sets the sampling interval in StartSamplingParams and returns the updated struct pointer.
5048	Do will execute a command to start tracking heap objects and return any errors encountered.
5049	WithReportProgress sets the ReportProgress field and returns the modified params.
5050	Do will execute a command to stop tracking heap objects and return an error if it fails
5051	WithReportProgress sets whether to report progress and returns updated params
5052	Do will execute a command to take a heap snapshot and return an error if it fails
5053	WithBrowserContextID sets the BrowserContextID field and returns the modified GrantPermissionsParams object
5054	Do will execute a command to grant permissions with given parameters in the context and return any errors encountered
5055	WithBrowserContextID updates the BrowserContextID field of ResetPermissionsParams and returns the updated instance.
5056	Do will execute the ResetPermissions command on the given context and parameters and return any errors encountered
5057	Do executes a command to crash the application.
5058	Do will execute a command to crash GPU process and return any errors encountered
5059	WithQuery sets the query parameter on GetHistogramsParams and returns the updated instance.
5060	WithTargetID sets the target ID for GetWindowForTargetParams and returns the updated params.
5061	Do will execute a command to set window bounds and return an error if it fails
5062	WithImage updates the image field of SetDockTileParams and returns the updated instance
5063	Do method executes a command to set dock tile parameters with given context and returns an error
5064	Do will execute a command to delete cache parameters in a given context and return any errors encountered
5065	Do method on DeleteEntryParams executes command with context and returns error
5066	WithPathFilter sets the PathFilter field of RequestEntriesParams and returns a pointer to the updated struct.
5067	Do method on DiscardSearchResultsParams executes a command and returns an error.
5068	Do method executes a command to focus on parameters using a context and returns any errors encountered
5069	Do will execute a command to mark undoable state and return an error if it fails
5070	WithIncludeUserAgentShadowDOM updates the IncludeUserAgentShadowDOM field and returns the modified PerformSearchParams instance.
5071	Do will execute a command and return an error
5072	Do will execute a command to remove an attribute and return an error if it fails
5073	Do method executes a command to remove a node using provided parameters and returns any errors encountered.
5074	Do will execute a command to request child nodes with parameters and return an error if it fails
5075	WithNodeID updates the NodeID field of ResolveNodeParams and returns the updated params
5076	WithBackendNodeID updates the BackendNodeID field of ResolveNodeParams and returns the updated instance.
5077	WithExecutionContextID sets the execution context ID in ResolveNodeParams and returns the updated params
5078	Do method executes a command to set attribute value and returns an error
5079	WithName sets the Name field of the SetAttributesAsTextParams struct and returns a pointer to the updated struct.
5080	Do method executes a command to set attributes as text using context and returns an error.
5081	Do method executes a command to set file input files parameters in the context.
5082	Do method executes a command to set inspected node parameters.
5083	Do method executes a command to set node value with parameters in the given context and returns an error.
5084	Do method executes a command to set outer HTML on a target element and returns an error if execution fails
5085	Do method on UndoParams executes an undo command and returns an error.
5086	Do method executes a command with pseudo state parameters and returns an error.
5087	Do will execute a command to set effective property value for a node and return an error if it fails
5088	Do will execute a command to start rule usage tracking and return any errors encountered
5089	Do will execute a command to close parameters and return any errors encountered
5090	Do will execute a command to clear data for an origin and return any errors encountered
5091	Do will execute a command with parameters and return an error
5092	Do will execute a command to track IndexedDB for a given origin and return any errors encountered.
5093	Do method executes a command to untrack cache storage for an origin with potential errors
5094	Do method executes a command to untrack IndexedDB for an origin with given parameters and returns an error.
5095	Do will execute a command to hide highlight parameters in the given context and return an error if the execution fails
5096	Do will execute a command to highlight a frame and return an error if it fails
5097	WithNodeID sets the NodeID field of HighlightNodeParams and returns the modified instance.
5098	WithBackendNodeID sets the BackendNodeID field and returns the updated HighlightNodeParams object.
5099	WithObjectID sets the ObjectID field of HighlightNodeParams and returns the updated instance
5100	WithSelector sets the selector field of HighlightNodeParams and returns a pointer to the updated struct
5101	Do will execute a command to highlight a node and return any errors encountered
5102	Do method executes HighlightQuad command with given params in context and returns any errors encountered
5103	Do will execute a command to highlight a rectangle and return an error
5104	WithHighlightConfig sets the highlight config for SetInspectModeParams and returns the updated params.
5105	Do will execute a command to set inspect mode and return an error if it fails
5106	Do will execute a command to set ad highlights parameters with the given context and return an error if any occurs
5107	WithMessage sets the message field of SetPausedInDebuggerMessageParams and returns the updated struct pointer
5108	Do method executes SetPausedInDebuggerMessage command with given parameters and returns an error.
5109	Do will execute a command to set debug borders on a page and return an error if it fails
5110	Do will execute a command to set FPS counter parameters and return an error if the execution fails
5111	Do will execute a command to show paint rects with parameters and return an error
5112	Do method executes a command to set show scroll bottleneck rects parameters and returns an error
5113	Do executes a command to set show hit test borders params and returns an error
5114	Do will execute a command to set viewport size on resize and return an error
5115	Do will execute a command to clear browser cache and return an error if it fails
5116	Do method executes a command to clear browser cookies using Chrome DevTools Protocol.
5117	WithErrorReason sets the error reason on the params and returns the updated params
5118	WithRawResponse updates the RawResponse field of ContinueInterceptedRequestParams and returns the updated struct.
5119	WithURL sets the URL field and returns the updated struct pointer
5120	WithMethod updates the method field and returns the modified params
5121	WithPostData updates the PostData field and returns the modified object
5122	WithHeaders updates the request headers and returns the updated params.
5123	WithAuthChallengeResponse updates the AuthChallengeResponse field and returns the modified object.
5124	Do method executes a command to continue intercepted request parameters in a given context and returns an error if any occurs.
5125	WithURL sets the URL field in DeleteCookiesParams and returns the updated struct pointer
5126	WithDomain sets the domain in DeleteCookiesParams and returns the modified params
5127	WithPath updates the Path field of DeleteCookiesParams and returns the updated instance
5128	Do will execute a command to delete cookies and return any errors encountered
5129	WithConnectionType updates the connection type and returns the updated params
5130	Do will execute a network conditions emulation command with the given parameters and return an error if the execution fails
5131	Do method executes command enable on EnableParams object and returns any error encountered
5132	WithUrls sets URLs on GetCookiesParams and returns updated instance
5133	Do will execute a command with parameters and return an error
5134	Do method executes a command to set blocked URLs and returns any errors encountered.
5135	Do will execute a command to bypass service worker params and return an error
5136	Do method executes a command to disable cache and returns an error
5137	WithURL updates URL field in SetCookieParams and returns updated instance
5138	WithDomain sets the cookie's domain and returns the updated params.
5139	WithPath updates the cookie's path and returns the updated parameters
5140	WithSecure sets whether a cookie is secure and returns the updated SetCookieParams.
5141	WithHTTPOnly sets the HTTPOnly flag on a SetCookieParams instance and returns it
5142	WithSameSite sets the SameSite attribute of a cookie parameter and returns the updated parameters
5143	WithExpires sets the expiration time for cookie parameters and returns updated params
5144	Do method executes SetCookies command with parameters and returns error
5145	Do will execute a command with the given parameters and return an error if any.
5146	Do method executes a command to set extra HTTP headers with given parameters and returns an error.
5147	Do method executes a command to set request interception parameters with a given context and returns an error.
5148	Do will execute a command to clear device metrics override parameters and return any errors encountered
5149	Do method executes ClearGeolocationOverride command using cdp Execute function.
5150	Do will execute a command to reset page scale factor and return an error
5151	Do will execute a command to set focus emulation enabled and return an error if it fails
5152	Do will execute a command to set CPU throttling rate and return an error if it fails
5153	WithColor sets the color parameter and returns the updated params object
5154	Do method executes a command to set default background color override parameters in the context.
5155	WithScale sets the scale parameter and returns the modified params object
5156	WithDontSetVisibleSize sets the DontSetVisibleSize field and returns the updated params.
5157	WithScreenOrientation updates ScreenOrientation field in SetDeviceMetricsOverrideParams and returns updated instance
5158	Do will execute a command to set device metrics override parameters and return an error
5159	Do will execute a command to set scrollbars hidden and return any errors encountered
5160	Do will execute a command to set document cookie disabled and return an error if it fails
5161	Do method executes a command to set touch events for mouse parameters in a given context.
5162	Do will execute a command to set emulated media parameters and return an error if it fails
5163	WithLatitude updates the latitude parameter in SetGeolocationOverrideParams and returns the updated parameters
5164	WithLongitude sets the longitude value in SetGeolocationOverrideParams and returns the updated instance.
5165	WithAccuracy sets the accuracy parameter and returns the modified object
5166	Do will execute a command to set geolocation override parameters and return an error if it fails
5167	Do method executes command SetPageScaleFactor with params and returns an error.
5168	Do will execute a command to disable script execution and return an error if it fails
5169	WithMaxTouchPoints updates the MaxTouchPoints field of SetTouchEmulationEnabledParams and returns the updated params
5170	Do method executes SetTouchEmulationEnabled command with given parameters in the specified context and returns an error if any.
5171	WithBudget sets the budget in SetVirtualTimePolicyParams and returns the updated struct pointer
5172	WithMaxVirtualTimeTaskStarvationCount sets the maximum virtual time task starvation count and returns the updated parameters.
5173	WithWaitForNavigation sets navigation wait option and returns updated params
5174	WithAcceptLanguage sets the Accept-Language header and returns the modified params.
5175	WithPlatform sets the platform and returns the updated params
5176	Do will execute a command to set user agent override parameters and return an error if it fails
5177	Do method executes a command to dispatch a key event with given parameters and returns an error if any occurs
5178	Do method executes a command to insert text using params and returns an error.
5179	WithButtons sets the mouse event parameters and returns the updated object
5180	Do will execute a mouse event command with parameters and return an error
5181	Do will execute a command to dispatch a touch event and return any errors encountered
5182	Do method executes a command to emulate touch from mouse event params and returns an error.
5183	Do method executes a command to set ignore input events params with given context and returns an error
5184	Do will execute a pinch gesture command with the given parameters and return an error if the execution fails
5185	WithXOverscroll sets the x overscroll value and returns the modified params
5186	WithYOverscroll sets the YOverscroll property and returns the modified SynthesizeScrollGestureParams object.
5187	Do method executes a scroll gesture command using provided parameters and context, returning any errors encountered.
5188	Do executes a tap gesture command using SynthesizeTapGestureParams and returns an error
5189	Domain method returns the substring before the first dot in the MethodType
5190	WithDepth sets the depth parameter and returns the modified GetEventListenersParams object
5191	Do method executes RemoveDOMBreakpoint command using cdp.Execute.
5192	WithTargetName sets the target name in RemoveEventListenerBreakpointParams and returns the updated params
5193	Do method executes a command to remove an event listener breakpoint and returns an error if it fails
5194	Do will execute the RemoveInstrumentationBreakpoint command and return an error if it fails
5195	Do method on RemoveXHRBreakpointParams executes a command to remove an XHR breakpoint and returns any error encountered
5196	Do method executes a command to set a DOM breakpoint and returns an error.
5197	Do will execute a command to set an event listener breakpoint and return an error if it fails
5198	Do method executes a command to set instrumentation breakpoint and returns an error.
5199	Do will execute a command to set an XHR breakpoint and return an error if it fails
5200	WithExecutor attaches an Executor to a context returning a new context
5201	Execute will run a method using a context and parameters returning an error if the context is invalid
5202	AttributeValue retrieves the value of an attribute by its name from a Node's Attributes slice, ensuring thread safety with RLock and RUnlock.
5203	xpath returns an XPath expression based on the node's position and attributes
5204	String representation of NodeType enum values.
5205	Do will execute a command to set sink to use with parameters and return an error
5206	Do method executes StartTabMirroring command using context and returns error
5207	Do method executes a command to stop casting with parameters and returns any errors encountered
5208	Do will execute a command to start observing with parameters and return an error
5209	Do method executes a command to stop observing with parameters and returns an error
5210	Do method on SetRecordingParams executes a command and returns an error
5211	Do method executes a ClearEvents command with given parameters in the specified context and returns any errors encountered.
5212	WithObjectID sets the ObjectID field of CallFunctionOnParams and returns the updated params pointer
5213	WithArguments sets the arguments for CallFunctionOnParams and returns the updated instance
5214	WithExecutionContextID sets the execution context ID and returns the updated params object
5215	WithObjectGroup sets the object group and returns the updated CallFunctionOnParams instance
5216	Do will execute a command to discard console entries and return any errors encountered
5217	WithContextID updates the ContextID field of EvaluateParams and returns the updated instance.
5218	WithOwnProperties sets the OwnProperties field of GetPropertiesParams and returns the updated object
5219	WithGeneratePreview updates the GeneratePreview field of GetPropertiesParams and returns the updated object.
5220	WithExecutionContextID updates the execution context ID in GlobalLexicalScopeNamesParams and returns the updated instance.
5221	WithObjectGroup updates the ObjectGroup field in QueryObjectsParams and returns the updated instance.
5222	Do will execute a command to release an object and return an error if it fails
5223	Do will execute a command to release object group parameters with a given context and return an error if it fails
5224	Do method executes a command to run if waiting for debugger with given context and returns an error.
5225	Do will execute a command to set custom object formatter enabled params and return an error
5226	Do method executes a command to set the maximum call stack size for capturing in the given context.
5227	Do method executes a command to terminate execution with an error if it fails
5228	Do will execute a command to add a binding params and return an error
5229	Do method executes a command to remove a binding with given parameters in the context.
5230	Do method executes a command using cdp Execute function and returns any error encountered.
5231	Do method executes a command with given parameters and returns an error
5232	WithBufferUsageReportingInterval sets the buffer usage reporting interval and returns the updated StartParams object
5233	WithNoDisplayUpdates sets noDisplayUpdates and returns updated BeginFrameParams
5234	WithScreenshot sets the screenshot parameter and returns the updated BeginFrameParams object
5235	Do method executes a command to bring something to front and returns an error
5236	WithClip sets the clip viewport and returns the updated parameters
5237	WithFromSurface sets whether to capture from surface and returns updated params
5238	WithWorldName sets the world name for CreateIsolatedWorldParams and returns the updated params
5239	WithGrantUniveralAccess sets the GrantUniveralAccess field and returns the modified params
5240	Do will execute a command to reset navigation history and return an error
5241	WithPromptText sets the prompt text for JavaScript dialog params and returns the updated params
5242	Do method executes JavaScript dialog command and returns error
5243	WithReferrer sets the referrer in NavigateParams and returns the updated params.
5244	WithTransitionType sets the transition type in NavigateParams and returns the updated params
5245	WithFrameID sets the frame ID in NavigateParams and returns the updated instance.
5246	Do method executes a command to navigate to a history entry and returns an error.
5247	WithLandscape sets the Landscape field of PrintToPDFParams and returns the modified instance.
5248	WithDisplayHeaderFooter updates the display header footer flag and returns the updated parameters.
5249	WithPrintBackground sets whether to print background and returns the modified PrintToPDFParams object.
5250	WithScale updates the scale parameter in PrintToPDFParams and returns the updated parameters.
5251	WithPaperWidth sets the paper width and returns the updated PrintToPDFParams
5252	WithPaperHeight sets the paper height in PrintToPDFParams and returns the updated parameters.
5253	WithIgnoreInvalidPageRanges sets whether to ignore invalid page ranges and returns the updated PrintToPDFParams
5254	WithFooterTemplate sets the footer template and returns the updated PrintToPDFParams instance.
5255	WithPreferCSSPageSize updates PreferCSSPageSize field and returns updated params pointer
5256	WithScriptToEvaluateOnLoad sets the script to evaluate on load and returns the modified ReloadParams
5257	Do method executes a command with parameters and returns an error
5258	Do will execute a command to remove a script from evaluating on new document contexts returning an error if the execution fails
5259	Do method executes a command to acknowledge a screencast frame and returns any errors encountered.
5260	Do method executes a command to set ad blocking enabled with given parameters and returns an error.
5261	Do method executes a command to bypass CSP parameters and returns any errors encountered
5262	Do method executes a command to set font families with parameters and returns an error
5263	Do method executes a command to set font sizes using parameters and returns an error.
5264	Do will execute a command to set document content and return an error if it fails
5265	WithDownloadPath sets the download path and returns the updated params object
5266	Do will execute a command to set download behavior parameters and return any errors encountered
5267	Do method executes a command to set lifecycle events enabled.
5268	WithFormat sets the screencast format and returns the updated parameters
5269	WithMaxWidth sets the maximum width for a screencast parameter and returns the updated parameters object.
5270	WithMaxHeight updates the MaxHeight field of StartScreencastParams and returns the updated struct pointer.
5271	WithEveryNthFrame updates the EveryNthFrame field and returns the updated struct pointer
5272	Do method executes a command to start a screencast and returns any errors encountered
5273	Do method on StopLoadingParams struct executes a command and returns any errors encountered
5274	Do will execute a command to set web lifecycle state and return an error if it fails
5275	Do will execute a command to stop screencast and return an error if it fails
5276	Do method executes a command to set produce compilation cache params and returns an error.
5277	Do will execute a command to add compilation cache parameters and return an error if it fails
5278	Do will execute a command to clear the compilation cache and return any errors encountered
5279	WithGroup sets the group parameter and returns the modified GenerateTestReportParams instance
5280	Do will execute a command to wait for a debugger and return an error if it fails
5281	Do method executes a command with ActivateTargetParams and returns an error
5282	WithBindingName sets the binding name and returns the updated params
5283	ExposeDevToolsProtocolParams.Do will execute a command and return an error
5284	WithBrowserContextID sets the browser context ID in CreateTargetParams and returns the updated params
5285	WithSessionID sets the session ID for DetachFromTargetParams and returns the updated params.
5286	Do will execute a command to detach from a target and return any errors encountered
5287	Do will execute a command to dispose of a browser context and return any errors encountered
5288	WithSessionID updates the SessionID field of SendMessageToTargetParams and returns the updated params.
5289	Do method executes SendMessageToTarget command using cdp Execute function and returns an error
5290	Do will execute a command to set auto attach parameters and return an error if it fails
5291	Do method executes a command to discover targets using the provided parameters and returns an error if any occurs.
5292	Do method executes a command to set remote locations with parameters and returns an error
5293	WithPatterns sets the patterns field in EnableParams and returns the updated object
5294	WithHandleAuthRequests sets the HandleAuthRequests field and returns the modified object
5295	Do method executes a command with parameters and returns an error
5296	WithBody sets the request body and returns the modified params
5297	WithResponsePhrase sets the response phrase and returns the modified params object
5298	Do method executes a command to fulfill request parameters within a given context and returns any errors encountered.
5299	WithURL sets URL field in ContinueRequestParams and returns updated instance
5300	WithMethod sets the method field of ContinueRequestParams and returns the updated struct pointer
5301	WithPostData sets the PostData field of ContinueRequestParams and returns a pointer to the updated struct.
5302	WithHeaders sets headers on a request params object and returns it.
5303	Do method executes a command with parameters and returns an error.
5304	Do method executes ContinueWithAuth command using cdp.Execute.
5305	Do method executes a command to continue to a specified location in a debugging session.
5306	WithIncludeCommandLineAPI sets whether to include the command line API and returns the updated params object.
5307	Do will execute a pause command and return an error if it fails
5308	Do method on PauseOnAsyncCallParams executes a command with the given parameters and returns any errors encountered.
5309	Do method executes a command to remove a breakpoint and returns any errors encountered.
5310	Do method executes a command and returns any errors encountered
5311	Do will execute a command to set the async call stack depth and return an error if it fails
5312	Do will execute a command to set blackbox patterns and return an error if it fails
5313	Do method executes a command to set blackboxed ranges and returns any errors encountered.
5314	WithURL sets URL field and returns modified SetBreakpointByURLParams instance
5315	WithURLRegex sets URL regex and returns modified params
5316	WithScriptHash sets the script hash in SetBreakpointByURLParams and returns the updated params
5317	WithColumnNumber sets the column number for breakpoint parameters and returns the updated params pointer.
5318	WithCondition sets the breakpoint condition and returns the modified params.
5319	Do method executes a command to set breakpoints active and returns an error if unsuccessful.
5320	Do method executes a command to pause on exceptions with parameters and returns an error.
5321	Do will execute a command to set a return value with parameters and return an error
5322	WithDryRun sets whether to run the script in dry-run mode and returns the modified params
5323	Do will execute a command to skip all pauses using the given parameters and return an error if it fails
5324	Do method executes a command to set variable value using CDP protocol.
5325	WithBreakOnAsyncCall sets whether to pause on async calls and returns modified params
5326	Do will execute a step into command on the target object and return any errors encountered during execution
5327	Do will execute a command and return an error
5328	Do will execute a step-over command and return an error if it fails
5329	Listen method on NotifyBundle calls ListenF if it's not nil
5330	ListenClose will invoke the callback function if it exists
5331	Connected method will execute the ConnectedF function if it's not nil with network and connection as arguments
5332	Disconnected will call the DisconnectedF function with the given network and connection objects if it is not nil
5333	OpenedStream will call the OpenedStreamF function if it's not nil, passing the Network and Stream parameters.
5334	ClosedStream calls a callback if it exists
5335	WithNoDial adds a no-dial reason to the context.
5336	GetNoDial checks context for noDial value and returns its presence and reason
5337	WithDialPeerTimeout sets a timeout in the context for dialing peers.
5338	Open will return a connection or an error based on the type of the input connection
5339	Prevpos will return the previous position in a ring buffer or -1 if invalid.
5340	Last returns the index of the last readable item or -1 if empty
5341	DeleteMostRecentBytes removes n bytes from the ring buffer if n is positive and less than the readable count
5342	NewFloat64RingBuf initializes a new float64 ring buffer with the specified maximum view items and returns it.
5343	TwoContig returns two contiguous slices from a circular buffer, handling wrap-around cases.
5344	Earliest returns the earliest value from a ring buffer and a flag indicating if the buffer is readable
5345	Float64RingBuf.Values combines two contiguous slices into one and returns it.
5346	NewAtomicFixedSizeRingBuf creates a new ring buffer with fixed size and returns a pointer to it.
5347	Reset will clear the buffer's state and lock access during reset.
5348	NewPointerRingBuf creates a new pointer ring buffer with the given size and returns a pointer to it
5349	TwoContig returns two contiguous slices from a circular buffer.
5350	NumPage returns the total number of pages in a PDF document
5351	Font retrieves a font resource by name from a page's resources.
5352	Font.Width returns font width for given char code or 0 if out of bounds
5353	Font.Encoder returns a text encoding based on font properties or defaults to nopEncoder.
5354	Interpret will process a stream of values using a stack and dictionaries, applying operations defined by a callback function.
5355	Open opens a file and returns a reader along with an error if any occurs.
5356	NewReader creates a new reader from an encrypted file reader.
5357	NewReaderEncrypted creates a Reader object for encrypted PDF files, validates its header and footer, locates the "startxref" token, reads cross-reference tables, and decrypts it using user-provided passwords.
5358	Trailer returns the trailer value from the reader
5359	Kind method returns the type of the given Value
5360	newBuffer creates a buffer from a reader with specified offset and initializes it with default values
5361	Paginate will return pagination information and an error based on the total records and specified page size
5362	CascadeDelete deletes documents based on cascading configurations and IDs.
5363	cascadeDeleteWithConfig updates documents based on relation type and returns change info or error
5364	cascadeSaveWithConfig updates documents based on configuration, handling both single and multiple relationships.
5365	MapFromCascadeProperties constructs a nested map from a list of dot-separated property paths in a document, handling nested structures and updating values accordingly.
5366	Connect method attempts to establish a MongoDB connection using provided configuration, handling errors and panics gracefully.
5367	lowerInitial converts the first character of a string to lowercase and returns the modified string
5368	Find will search for data based on a query and return a ResultSet containing the results and parameters.
5369	RawInformationQuery sends an XML IQ query and returns the ID and any error encountered
5370	NewClient creates a Client instance using options and returns it or an error.
5371	Close method on Client struct closes the connection if it exists, otherwise returns nil.
5372	startTLSIfRequired checks if TLS is required and starts it if necessary, updating the stream features and connection.
5373	startStream initializes XML decoding, sends a stream request, waits for features response, and returns them or an error.
5374	IsEncrypted checks if client connection is encrypted using TLS.
5375	Recv reads messages from a client connection and returns parsed stanzas or errors.
5376	Send will send a chat message and return the number of bytes written and an error if the message cannot be sent
5377	SendOrg sends an organization name to the client connection and returns the number of bytes written and an error if any.
5378	SendKeepAlive sends a keep-alive message to the client's connection and returns the number of bytes written and any error encountered.
5379	SendHtml sends HTML message and returns bytes sent and error if any
5380	nextStart reads XML decoder token until it finds a StartElement or returns an error
5381	JoinProtectedMUC sends a presence request to join a protected MUC chat room with optional password and history settings.
5382	LeaveMUC sends an unavailable presence message to the specified JID and returns the number of bytes written and any errors encountered
5383	AttachBuffer adds an attachment to a message with the given filename, buffer, and whether it's inline.
5384	Attach will add a file to the message and return an error if it fails
5385	Inline will attach a file to the message and return an error if it fails
5386	AddHeader to Message appends a new header and returns it
5387	Tolist will concatenate To, Cc, and Bcc fields of Message struct into a single list
5388	Bytes method constructs a MIME-formatted email message from Message struct fields and returns its byte representation.
5389	Send will send an email using SMTP and return an error if it fails
5390	GetHeader retrieves header value from Envelope or returns empty string if header is nil
5391	GetHeaderValues returns header values for a given name, decoding each value.
5392	SetHeader updates the header with the given name and values, encoding them in UTF-8 and handling multiple values correctly.
5393	AddHeader will add a header to the envelope and return an error if the name is empty
5394	DeleteHeader removes a header from the envelope and returns an error if the name is empty
5395	AddressList retrieves email addresses from a header, handling decoding and parsing errors gracefully.
5396	Clone method creates a copy of Envelope instance with its properties.
5397	ReadEnvelope reads MIME parts from a reader and returns an Envelope or an error.
5398	EnvelopeFromPart processes a part and constructs an envelope, handling multipart messages, binary bodies, and text-only bodies, converting HTML to text if necessary, and copying part errors.
5399	parseTextOnlyBody will process a part's content based on its media type and convert it to UTF-8 if necessary, setting either HTML or Text field in Envelope accordingly.
5400	parseMultiPartBody processes a multipart message extracting various parts like text, HTML, attachments, and inlines, returning them in an Envelope structure.
5401	matchHTMLBodyPart checks if part content type is HTML and disposition is not attachment
5402	ensureCommaDelimitedAddresses normalizes whitespace, handles quotes, escapes sequences, and ensures comma-delimited addresses in a string.
5403	Date sets the mail's date and returns the builder.
5404	MailBuilder's From method sets the sender's name and address and returns the builder.
5405	MailBuilder's Subject method sets the email subject and returns the builder.
5406	To will add a recipient to the email and return the builder
5407	ToAddrs sets recipient addresses in MailBuilder and returns updated builder
5408	CC appends a recipient to the email's CC list and returns the modified builder.
5409	MailBuilder's CCAddrs method sets CC addresses and returns itself.
5410	MailBuilder.ReplyTo sets the reply-to address and returns the builder.
5411	MailBuilder's Header method adds a new header to the email and returns itself.
5412	MailBuilder will add an attachment to the email and return itself
5413	AddFileAttachment adds a file attachment to the mail builder, handling errors and setting the content type based on the file extension.
5414	AddInline adds an inline attachment to the mail builder and returns the updated builder
5415	Equals method checks if two MailBuilder instances are deeply equal.
5416	Encode will write a Part to an io.Writer, handling headers, content, and nested parts recursively.
5417	encodeHeader will write encoded header values to a buffer using specified transfer encoding
5418	encodeContent encodes content based on transfer encoding using Base64 or QuotedPrintable, wrapping lines for Base64 and handling errors accordingly.
5419	selectTransferEncoding determines the most appropriate transfer encoding based on the input content and whether to quote line breaks
5420	setParameterValue updates a map with a key-value pair if the value is non-empty
5421	NewBase64Cleaner creates a Base64Cleaner struct with errors slice and reader field initialized
5422	decodeToUTF8Base64Header will convert header values to UTF-8 base64 encoding while preserving parentheses
5423	parseMediaType extracts media type from content-type string, handles parsing errors, removes duplicates, fixes formatting issues, and filters out invalid parameters.
5424	fixMangledMediaType will return a fixed media type string by fixing empty or malformed parameters according to RFC-2047 standards
5425	detectMultipartMessage checks if the given part's content type indicates a multipart message
5426	detectBinaryBody checks if a part's content type indicates binary data
5427	BreadthMatchFirst performs a breadth-first search on the tree using the given matcher and returns the first matching node or nil if no match is found.
5428	BreadthMatchAll will find all parts matching the given matcher using a breadth-first search approach returning a slice of matched parts
5429	DepthMatchFirst traverses a tree structure using depth-first search and returns the first part that matches the given matcher.
5430	DepthMatchAll searches for parts matching a given matcher recursively and returns them.
5431	ToASCII normalizes a string to ASCII by removing non-spacing marks and mapping Latin special characters.
5432	NewPart creates a new Part object with the given content type and default header.
5433	AddChild adds a child part to a parent part, preventing loops and updating parent pointers.
5434	TextContent checks if the ContentType is empty or starts with "text/" or "multipart/".
5435	setupHeaders reads headers from reader, sets content type and other properties, validates parameters, and returns any errors.
5436	setupContentHeaders sets up content headers for Part using mediaParams and parses content disposition.
5437	convertFromDetectedCharset will return a Reader with the converted charset or an error if the charset cannot be detected or converted
5438	Clone will create a deep copy of a Part and its descendants, setting the parent accordingly.
5439	ReadParts reads parts from a reader and returns a Part object along with any errors encountered during parsing.
5440	parseParts processes MIME parts recursively, setting headers, decoding content, and handling boundaries.
5441	UUID generates a random string representing a universally unique identifier.
5442	NewQPCleaner creates a QPCleaner instance using a buffered reader from the given input stream.
5443	Error method returns a formatted error message based on severity, name, and detail.
5444	addError appends an error to Part's Errors slice with the given name and formatted detail.
5445	addWarning appends a warning to Part's Errors slice with formatted detail.
5446	Wrap will return a byte slice containing the input strings wrapped to a maximum width, breaking lines at spaces or tabs
5447	ConvertToUTF8String converts byte slice to UTF-8 string using specified charset returns converted string or error
5448	JoinAddress concatenates mail addresses into a single string separated by commas
5449	Printf formats according to a format specifier and writes to the markdown object.
5450	EnvelopeToMarkdown converts an email envelope to Markdown format, writing it to a writer.
5451	FormatPart recursively formats MIME parts with indentation and prints them to a writer.
5452	newBoundaryReader initializes a boundaryReader with a given boundary string and returns it
5453	boundaryReader.Read will copy data from underlying reader to dest up to len(dest) bytes and handle partial reads and boundaries.
5454	Next reads the next part from the boundary reader and returns whether it's the terminator or an error
5455	Parse will return a parsed object and an error based on the input buffer and offset
5456	Assign assigns a value to a symbol based on its type and returns the byte representation and an error if the type is unsupported.
5457	NewRClient creates a new RClient instance using default authentication.
5458	NewRClientWithAuth creates a new R client with authentication and returns it or an error if connection fails.
5459	Register will add a custom generator for a given identifier using its camelized version as the key
5460	Fuzz will set random values to fields of a struct or its pointer.
5461	findFakeFunctionFor returns a function based on input string or an empty function if not found
5462	Apply options to opts and return error if any option fails
5463	ToOption converts Options to Option function copying values.
5464	waitThenClose will close the channel after context is done and lock/unlock mutex
5465	send method sends a query event to channel or waits for context cancellation while holding a lock
5466	NewMovingAverage creates a moving average based on input ages returning either SimpleEWMA or VariableEWMA.
5467	Set updates the variable's value and increments count if below warmup threshold.
5468	calcKeys50 calculates cryptographic keys using PBKDF2 algorithm with HMAC-SHA256 and XOR operations.
5469	getKeys reads encryption parameters from buffer, checks cache, calculates keys if necessary, and updates cache.
5470	checkPassword will verify password checksum and key index 2
5471	parseFileEncryptionRecord checks file encryption record version, parses flags, retrieves keys, sets key and IV, verifies password if present, and sets checksum key if necessary.
5472	parseEncryptionBlock will read encryption block from buffer and validate password if required returning an error if any issue arises
5473	newArchive50 creates an archive50 reader with a buffer and sets the password
5474	Read will return data from a cipher block reader into a buffer, handling buffered output, errors, and reading blocks as needed.
5475	ReadByte reads a byte from the cipher block reader or returns an error if the buffer is empty or has reached its end.
5476	newCipherBlockReader creates a reader that encrypts/decrypts data using a block cipher mode
5477	newAesDecryptReader creates a reader that decrypts data using AES-CBC mode with the given key and IV
5478	limitByteReader returns a limitedByteReader object that limits the number of bytes read from the input reader to n
5479	Mode returns the file mode based on the attributes and host OS
5480	nextBlockInFile will update the file header and return an error if the block is invalid or unexpected
5481	next retrieves the next file block header or EOF/error
5482	Read reads from packed file until EOF or error
5483	Read method reads data from reader and checks checksum validity before returning bytes read and error.
5484	Next reads the next file header from a Reader, handling decryption, decompression, and checksumming as needed.
5485	NewReader creates a new reader from an input reader and password returns an error if the file block reader cannot be created
5486	OpenReader will return a ReadCloser object and an error if the volume cannot be opened with the given name and password
5487	getV3Filter checks for known filters or creates a new VM filter from given code, returning the filter function and any errors encountered.
5488	init initializes decoder29 with reader resets filters and resets lz and ppm if required returns error if block header read fails
5489	readBlockHeader reads a block header initializes decoding method and returns error if out of data
5490	readCodeLengthTable reads Huffman codes from a bit reader and updates codeLength table based on the read values.
5491	shrinkStates reduces memory usage by resizing and reorganizing state blocks
5492	expandStates will expand the state slice and allocate new units if necessary, then set the number of states and return the updated slice.
5493	pushByte updates subAllocator's states based on byte input and returns an integer indicating heap status.
5494	subAllocator.succByte returns a byte based on the input index, using states array and shifting operations.
5495	succContext returns a context object for the next state or nil if invalid
5496	calcAes30Params generates AES-30 key and IV using passphrase and salt.
5497	parseDosTime converts a DOS date and time to a Go time.Time object
5498	decodeName decodes a file name from a buffer, handling different encoding formats and returning the decoded string.
5499	readExtTimes reads file timestamps from buffer updating header times based on flags and additional data
5500	readBlockHeader reads block header data from archive buffer, decrypts if encrypted, validates CRC, extracts data size if large. Returns header or error.
5501	newArchive15 creates a new archive15 instance from a reader and password, encoding it to UTF-16 and initializing checksum and buffer
5502	readFilter5Data reads bits from a reader to form an integer.
5503	writeByte updates buffer and increments write pointer with wrap-around
5504	copyBytes will copy bytes from the buffer and update the window's write position and available space
5505	read will return the number of bytes read from a circular buffer and handle leftover data
5506	queueFilter adds a filter block to the decoder's queue, adjusting offsets and ensuring they're within bounds.
5507	processFilters applies filters to input data and returns an error if any filter fails or if the input data is incomplete.
5508	fill will update the decode reader's window with filters from the decoder and queue them, handling errors accordingly
5509	Read will return the number of bytes read and an error if reading fails
5510	readFull will read from a reader until it fills a buffer or encounters an unexpected EOF
5511	findSig reads from a buffered reader to locate a signature prefix and returns its version or an error if not found
5512	execute will run commands on the virtual machine until maxCommands or end of commands list
5513	newVM creates a VM instance with initialized memory and registers
5514	limitBitReader returns a limitedBitReader struct wrapping br with n and err
5515	readUint32 reads a 32-bit unsigned integer from a bit reader and returns it along with any errors encountered during the process.
5516	step3 checks for and removes a derivational suffix in R2, returning true if successful
5517	Stem will process and reduce a word to its base form while handling special cases and stop words
5518	step6 modifies the input word by removing accents from 'é' or 'è' if followed by non-vowels
5519	step5 removes last rune from word if suffix matches and returns false
5520	step2a removes a specific suffix from a word if it exists and ends with 'u'.
5521	step4 modifies a snowballword by removing specific suffixes or characters and returns true if any changes were made
5522	Stem will return the stemmed word for given language and stop words option an error will be returned if the language is unknown
5523	step1c checks and replaces suffix "y" or "Y" with "i" if preceded by a non-vowel and returns true if modified
5524	step3 processes word suffixes according to specific rules and returns whether changes were made.
5525	isStopWord checks if a given word is a stop word returns true if it is otherwise false
5526	capitalizeYUI modifies a word by capitalizing specific vowels based on their neighbors.
5527	step2 applies stemming rules to words based on suffixes and returns whether any changes were made.
5528	step3 removes specific suffixes from a word, including "e" or "é", and deletes preceding "u" if present.
5529	step0 removes possessive suffix from word if present
5530	VnvSuffix identifies the suffix start index based on vowel transitions in the word RS.
5531	step1 will remove a specific suffix from a word if certain conditions are met, returning true if successful
5532	step2a removes specific suffixes from RV if preceded by a non-vowel and returns true if successful
5533	removePerfectiveGerundEnding removes specific suffixes from a word if they meet certain conditions and returns whether any were removed.
5534	removeAdjectivalEnding removes adjectives and optional participles from a word, returning true if any were removed
5535	step2b will remove specific suffixes from a word and handle special cases related to "gu".
5536	step4 processes a word, removing or replacing suffixes based on specific conditions, returning whether any changes were made.
5537	step5 will remove "e" from word end if in R2 or not preceded by short syllable remove second "l" if in R2 and word ends with double "l" return true on modifications else return false
5538	Stem will return the stemmed form of a word based on language-specific rules and options to remove stopwords
5539	Stem will return the stemmed form of a word ignoring small words and stop words if specified
5540	isStopWord checks if a given word is a stopword and returns a boolean value
5541	isStopWord checks if a word is a common stop word returns true if it is otherwise false
5542	New creates a new SnowballWord instance from a given string initializing R1start, R2start, and RVstart to the length of the input string
5543	RemoveLastNRunes removes last N runes from SnowballWord RS and resets R1R2
5544	resetR1R2 will adjust R1, R2, RV start positions to be within RS length
5545	slice method returns a portion of RS rune array based on start and stop indices
5546	FitsInR1 checks if x fits within R1start boundary
5547	FitsInR2 checks if x fits within R2start boundary in RS slice
5548	FitsInRV checks if the word fits within the reverse vocabulary bounds.
5549	FirstPrefix checks if any given prefix exists within RS and returns it along with its rune representation.
5550	HasSuffixRunes checks if a word has a given suffix.
5551	FirstSuffixIfIn returns the first matching suffix and its runes within the word bounds, or empty if none match.
5552	RemoveFirstSuffixIfIn checks if a suffix exists from startPos to end and removes it if found, returning the removed suffix and its runes.
5553	RemoveFirstSuffix removes the first matching suffix from SnowballWord and returns it along with its runes.
5554	FirstSuffix will return the first matching suffix from the given list within the word's rune slice.
5555	preprocess normalizes, trims, capitalizes, and finds regions of a word
5556	step0 removes a specific suffix from a word based on certain conditions and returns a boolean indicating success.
5557	step1b processes word suffixes, applying specific transformations based on conditions.
5558	step2b checks for specific suffixes in RV and deletes them based on conditions.
5559	capitalizeYs capitalizes 'y' to 'Y' in words if it's the first letter or preceded by a lowercase vowel, counting the number of changes.
5560	uncapitalizeYs will convert all uppercase 'Y's to lowercase 'y's in a given word
5561	stemSpecialWord will return the stemmed form of a given word based on predefined rules.
5562	isShortWord checks if a word is short based on its R1start position and whether it ends in a short syllable
5563	step1a processes word suffixes and applies specific transformations based on rules.
5564	Set assigns a value to a key in the current goroutine's data map.
5565	Get retrieves a value from data using a key and goroutine ID, returning nil if the key does not exist.
5566	Cleanup will remove the current goroutine ID from the data map
5567	getValues retrieves values for the current goroutine ID
5568	linkGRs assigns parent data to current goroutine ID in a thread-safe manner
5569	unlinkGRs removes a goroutine from the data map using its ID.
5570	AppUri constructs a URI using the given app name, path, and configuration.
5571	CurlAppWithTimeout uses Curl to execute an application command with a specified timeout and returns the result.
5572	CurlApp executes a command using AppCurler and returns the result.
5573	CurlAppRoot constructs and executes an HTTP request to an application's root endpoint using the provided configuration and app name.
5574	GetTags extracts tags from a string based on a prefix and optional terminators.
5575	GetTagsAsUniqueStrings extracts unique tags from a string with a given prefix and optional terminator.
5576	isTerminator checks if a rune matches any terminator or is whitespace/non-printable
5577	uniquify will remove duplicate strings from the input slice and return the unique elements
5578	New will create a middleware function that applies configuration to Gin context
5579	Get retrieves a URL from Gin context using a key and returns it or nil if not found or invalid type.
5580	GenerateRSAKeyPair creates RSA key pair based on bit size and source reader returns private and public keys along with any errors encountered
5581	Verify data with RSA public key using SHA-256 hash and PKCS1v15 scheme returns verification result and error if failed
5582	Encrypt will return encrypted data and an error if encryption fails
5583	Sign will return the RSA signature of a message and an error if signing fails
5584	GetPublic returns the public key from RSA private key object
5585	Decrypt will decrypt data using RSA PKCS1v15 padding and return the decrypted bytes or an error
5586	UnmarshalRsaPrivateKey will parse PKCS1 RSA private key and return it or an error if invalid or too small
5587	GenerateKeyPair will return a private key, public key, and an error for the specified type and bit size using the default random reader.
5588	GenerateKeyPairWithReader will generate a key pair based on the specified type using the provided reader and return private and public keys along with any errors encountered
5589	GenerateEKeyPair will generate an elliptic curve key pair and return the public key, a function to generate a shared key, and an error if any step fails
5590	UnmarshalPublicKey will return a public key and an error if the data is not properly formatted
5591	MarshalPublicKey converts a public key to protobuf format and returns the marshaled bytes and any errors encountered.
5592	UnmarshalPrivateKey will parse private key data and return a PrivKey object or an error if the key type is invalid.
5593	MarshalPrivateKey will convert a private key to a protobuf message and then marshal it to bytes, returning any errors encountered during the process.
5594	KeyEqual checks if two keys are equal by comparing their byte representations and errors.
5595	GenerateECDSAKeyPair will generate ECDSA key pair using default curve and source reader returning private and public keys along with any errors
5596	GenerateECDSAKeyPairWithCurve will generate an ECDSA key pair using the specified curve and source reader, returning the private and public keys along with any errors encountered.
5597	ECDSAKeyPairFromKey generates ECDSA private and public keys from a given private key or returns an error if the input is invalid.
5598	UnmarshalECDSAPrivateKey will parse ECDSA private key data and return a PrivKey object or an error if parsing fails.
5599	UnmarshalECDSAPublicKey parses PKIX public key data and returns ECDSA public key or error
5600	Equals checks if two ECDSA private keys are equal by comparing their private values.
5601	Sign data with ECDSA and return ASN.1 encoded signature
5602	Equals checks if two ECDSA public keys are equal by comparing their X and Y coordinates.
5603	Verify checks ECDSA signature validity for given data and returns bool and error.
5604	GenerateSecp256k1Key will generate private and public keys from a source reader and return them along with any errors encountered
5605	UnmarshalSecp256k1PrivateKey will convert byte data to a private key or return an error if the data size is incorrect
5606	UnmarshalSecp256k1PublicKey converts byte data to a secp256k1 public key and returns it or an error
5607	Equals checks if two Secp256k1 private keys are equal by comparing their D values.
5608	Sign will return a signature and an error if the signing fails
5609	Equals checks if two Secp256k1 public keys are equal by comparing their underlying btcec.PublicKey instances.
5610	Verify checks signature against data using secp256k1 public key returning bool result and error if verification fails
5611	Raw method returns a copy of the Ed25519 private key's byte representation along with any errors encountered during the process.
5612	Sign method returns signature of message using Ed25519 private key
5613	Ed25519PublicKey.Equals checks if two keys are equal by comparing their byte slices.
5614	Verify will check the signature of the given data using Ed25519 public key and return true if valid otherwise false along with any errors encountered
5615	UnmarshalEd25519PublicKey converts byte data to Ed25519 public key and returns it or an error if data size is incorrect.
5616	UnmarshalEd25519PrivateKey parses private key data removing redundant public keys if present ensuring correct size and returning a PrivKey object or error.
5617	EditScriptForStrings calculates and returns an edit script for transforming source to target using specified options.
5618	EditScriptForMatrix generates an edit script for a given matrix using specified options.
5619	WriteMatrix will write a matrix to a writer using the provided source and target rune slices.
5620	New will create a new lockfile from an absolute path and return an error if the path is not absolute
5621	GetOwner reads a lockfile to find its owner process, returns it if running, otherwise returns an error.
5622	TryLock attempts to acquire a lock file, returning an error if unsuccessful or if another process holds the lock.
5623	Unlock will remove the lockfile if owned by current process, otherwise return an error
5624	NewBase initializes a new Base instance with default values and applies optional configurations.
5625	SetFallbackLogger sets or shuts down the fallback logger for the Base instance
5626	AddLogger will add a logger to the Base object and initialize it if necessary an error will be returned if initialization fails
5627	LogWithTime logs a message with timestamp, level, attributes, and hooks if initialized and configured correctly.
5628	Log method logs a message with a given level, attributes, and arguments using the current time from the Base instance.
5629	Warnm calls Warningm on Base with given attributes, message, and arguments, returning any resulting error.
5630	NewTemplateWithFuncMap creates a new template with the given function map for different log levels.
5631	Execute template with message and optional colorization, returning rendered string or error
5632	NewTemplateMsg constructs a new TemplateMsg with the given timestamp, level, attributes, and message.
5633	NewLogAdapterFor creates a new log adapter with default attributes if none provided
5634	SetAttr updates key-value pair in LogAdapter's attrs
5635	LogWithTime logs a message with a timestamp and attributes if the log level allows.
5636	LogAdapter's Log method checks log level, merges attributes, and delegates logging to the base logger.
5637	Dbgm calls Debugm on LogAdapter with given attributes, message, and arguments, returning any errors encountered.
5638	NewAttrsFromMap creates an Attrs object from a map of attributes
5639	NewAttrsFromAttrs combines multiple Attrs objects into a single Attrs object
5640	MergeAttrs merges attributes from another Attrs instance into the current one.
5641	SetAttr sets an attribute on an Attrs object and returns the updated object
5642	GetAttr retrieves an attribute from a map using a key after acquiring a read lock on the attributes.
5643	RemoveAttr will delete an attribute from attrs based on key after acquiring a lock
5644	`Attrs method returns a copy of attributes with keys converted using getHashAttr`
5645	Debugm will log a message with attributes and arguments using the current default logger.
5646	Infom logs a message with attributes and arguments using the current default logger.
5647	Warningm logs a warning message using the current default logger with attributes and variable arguments.
5648	Errm returns an error using the provided message and arguments.
5649	Errorm returns an error using default logger's Errorm method
5650	Fatalm logs a fatal error message using default logger.
5651	Dief will exit with the given code after logging the message and arguments using curDefault's Dief method.
5652	Diem will invoke curDefault's Diem method with provided exitCode, attrs, message, and arguments.
5653	ToLogLevel converts a string to a LogLevel and returns an error if the level is unknown.
5654	CallErr will execute a function and return any errors it generates through a channel.
5655	New will create a new StackdriverHook instance with options and validate required fields returning an error if any are missing.
5656	Fire method logs entry using StackdriverHook, converting data to labels and sending via agent or API based on availability.
5657	Levels sets logrus levels for StackdriverHook
5658	ProjectID sets the project ID for StackdriverHook and returns an Option.
5659	EntriesService sets the logging service for StackdriverHook and returns an Option.
5660	LoggingService sets logging service entries on StackdriverHook.
5661	ErrorService sets the error service for the StackdriverHook.
5662	HTTPClient sets up StackdriverHook with logging and error reporting services using provided client.
5663	MonitoredResource sets the monitored resource for StackdriverHook
5664	ErrorReportingLogName sets the error reporting log name for StackdriverHook.
5665	Labels sets hook's labels option
5666	PartialSuccess sets whether partial success is enabled and returns an option to modify a StackdriverHook
5667	GoogleComputeCredentials sets up StackdriverHook with OAuth2 authentication using the provided service account credentials and verifies required scopes.
5668	NewEncoder creates an encoder using a codec and writer.
5669	NewDecoder creates a new decoder using the parser from the codec's reader
5670	NewStreamEncoder creates a new stream encoder using the given writer and codec.
5671	NewStreamDecoder will create a new StreamDecoder using the parser from the given reader
5672	Register will add a new codec to the registry for a given mimetype
5673	Registry.Unregister removes a MIME type from its codecs map after locking and unlocking.
5674	Lookup will return a codec and a boolean indicating if the codec was found for a given mimetype
5675	Codecs method returns a copy of the codecs map from the Registry struct with a read lock.
5676	Type will extract the uppercase prefix from the error message or return an empty string
5677	Install will add an adapter for a given type and clear the struct cache
5678	AdapterOf retrieves an adapter from a store based on type and returns it along with a boolean indicating success.
5679	AppendDuration appends a human-readable duration to a byte slice and returns the updated slice.
5680	fmtInt converts a uint64 to a string and returns the number of bytes written
5681	NewDecoder creates a new decoder using the provided reader.
5682	NewStreamDecoder creates a new StreamDecoder using a Parser from the given Reader.
5683	Unmarshal will decode a byte slice into a given value and return an error if the decoding fails
5684	Type.String will return a string representation of the type
5685	zeroValueOf returns the zero value for a given type from cache or creates it if not present.
5686	NewValueParser creates a new ValueParser instance with the given value on its stack.
5687	ParseTag extracts tag information from a string and returns a structured Tag object
5688	NewEncoder creates an encoder using a writer.
5689	NewStreamEncoder creates a new StreamEncoder object using the provided writer.
5690	NewPrettyEncoder creates a new encoder with pretty emitter using the given writer.
5691	NewPrettyStreamEncoder creates a stream encoder with a pretty emitter
5692	Marshal converts an interface to a byte slice, reusing a pool of encoders and returning any errors encountered.
5693	NewEncoder creates an encoder instance with a non-nil emitter or panics if emitter is nil.
5694	EncodeArray encodes an array using a callback function and returns an error if encoding fails
5695	EncodeMap will serialize a map using a custom encoding function and return an error if serialization fails
5696	NewStreamEncoder creates a new StreamEncoder instance with the given Emitter, panicking if the Emitter is nil.
5697	Open will open a stream encoder and set its maximum size an error will be returned if the encoder is already closed or has been opened
5698	Close will close the stream encoder if it's not already closed and return any errors encountered during the process
5699	Encode will serialize a value using the StreamEncoder, handling errors and limits.
5700	newStructType creates a struct type from a given reflect.Type and cache, returns cached struct type if available
5701	lookup will retrieve or create a struct type from the cache based on the given reflection type.
5702	clear will remove all entries from structTypeCache store while holding mutex lock
5703	CheckUint64Bounds checks if v exceeds max and returns an error if it does, indicating overflow for type t.
5704	CheckInt64Bounds checks if an integer is within specified bounds and returns an error if it's out of range.
5705	NewDecoder creates a new decoder using a given parser, panicking if the parser is nil.
5706	Decode will parse data into a given Go type and return an error if parsing fails
5707	DecodeArray will decode an array using a given function and return an error if parsing fails
5708	DecodeMap will call a function to decode map values and return an error if parsing fails
5709	NewStreamDecoder creates a new StreamDecoder instance with the given Parser, panicking if the Parser is nil.
5710	Len returns the remaining number of bytes to read from the stream or zero if an error occurred
5711	Err returns any error encountered during decoding or nil if no error occurred.
5712	Decode will process and decode a value from a stream decoder returning any encountered errors
5713	Encoder method creates a new StreamEncoder based on the parsed type from the decoder's parser, setting oneshot flag if the type is not Array.
5714	init sets log flags based on environment variable values
5715	LevelFromString converts a string to its corresponding log level and returns it along with a boolean indicating success.
5716	NewBackend creates a new backend instance with the given writer and options.
5717	callsite returns the caller's file name and line number based on the given flag
5718	print formats and outputs log messages with timestamp, level, tag, file, and line information
5719	Logger will create and return a new slog instance with specified subsystem tag and backend.
5720	Trace logs message if level is trace or lower.
5721	Tracef logs a trace message if the level is trace or lower.
5722	`Debug logs messages if the level is debug or lower.`
5723	slog's Debugf method logs debug messages if the level allows it
5724	Info logs message if level is info or higher
5725	`Infof logs informational messages if the level is info or higher.`
5726	Warn method logs warning messages if the current level allows it.
5727	Warnf logs a warning message if the log level is set to warn or lower.
5728	Error logs messages if level is greater than or equal to Error
5729	slog.Errorf logs an error message if the current level is error or lower
5730	`slog.Critical logs critical messages if the level is appropriate`
5731	`slog.Criticalf logs a critical message if the level is critical or higher`
5732	Level retrieves the current logging level from a slog instance.
5733	SetLevel updates the logging level atomically.
5734	Concatenate two permissions into a new permission object
5735	HasPermission checks if a user has the required permission based on their roles and the defined allowed/denied roles for a given mode.
5736	ConcatPermissioner combines multiple Permissioner instances into a single instance, filtering out any nil values.
5737	HasPermission checks if all permissioners have the specified permission.
5738	Register method adds or updates a checker for a role by its name.
5739	NewPermission creates a new Permission instance associated with the Role.
5740	Get retrieves a Checker from Role's definitions map by name and returns it along with a boolean indicating if the Checker was found.
5741	isPtrFromHeap checks if an address is a pointer from the heap
5742	IsPtr checks if address is a pointer in process's heap or modules.
5743	FindObject searches for an object at a given address and returns it along with its size, or zero if not found or invalid.
5744	ForEachObject iterates over each object in the process's pages and applies a function to it, stopping if the function returns false
5745	ForEachRoot applies a function to each root in the process's globals and goroutine frames, stopping early if the function returns false.
5746	Addr converts an object to its address representation
5747	Size method returns heap size for given object
5748	Type will return a type object and its reference count based on the given object's address.
5749	ForEachRootPtr applies a function to each root pointer in the process graph.
5750	edges1 traverses object graph, calling fn on pointers encountered, returning false if any call returns false
5751	setHeapPtr updates process heap pointer based on address and pointer size
5752	findHeapInfo retrieves heap info for a given address or returns nil if not found
5753	allocHeapInfo calculates heap info for a given address and returns it, creating entries as needed.
5754	runtimeName will return a Go type string based on the input DWARF type, handling pointers, arrays, structs, and other types.
5755	readRuntimeConstants populates a map with runtime constant names and their corresponding integer values from both hardcoded values and DWARF records.
5756	add will append a new entry to funcTab with specified address range and function
5757	sort sorts entries in funcTab based on their min values
5758	find will return a Func object based on the given address or nil if not found
5759	read method reads variable integers from core process updates pc quantum appends entries to t
5760	readVarint reads a variable-length integer from memory and returns its value and size
5761	useLine constructs the usage line for a Cobra command, appending flags if available and not disabled.
5762	commandPath recursively builds the path of a Cobra command
5763	readCore reads core process details and returns them along with any errors encountered
5764	typeName returns a type name based on object properties and size
5765	fieldName generates a field name based on object offset and type information
5766	typeFieldName returns the field name based on the offset and type kind
5767	FindFunc will return a function based on the program counter address from the process's function table.
5768	Core processes a core dump and returns a Process object along with any errors encountered during the parsing of DWARF information and runtime globals.
5769	Address returns the memory address of a pointer region.
5770	region.Int returns an integer value from a specified address, panicking if the type is not an integer.
5771	Uintptr will return the uintptr value from the given region or panic if it's not a valid uintptr type
5772	region.Cast will return a new region with updated type based on input string
5773	Deref method returns the value pointed to by the pointer region or panics if it's not a pointer or unsafe.Pointer
5774	Uint64 reads a 64-bit unsigned integer from a region and returns it
5775	Uint32 will return a uint32 value from the region or panic if the type is incorrect
5776	region.Int32 will return an int32 value from the region's process or panic if the type is incorrect
5777	Uint16 reads a 2-byte unsigned integer from a region and returns it.
5778	Uint8 returns the uint8 value from the region's process memory.
5779	region.String converts a region to its string representation
5780	SlicePtr returns a pointer to the slice region.
5781	SliceLen returns the length of a slice in a region or panics if it's not a slice.
5782	Field will return a new region object with updated offset based on the given field name or panic if the field is not found
5783	ReadUint8 will return an 8-bit unsigned integer from the specified address or panic if the address is not mapped
5784	ReadUint16 reads a 16-bit unsigned integer from the specified address in the process's memory mapping.
5785	ReadUint32 reads a 32-bit unsigned integer from the specified address in the process's memory mapping, handling both big-endian and little-endian byte orders.
5786	ReadUint64 reads an unsigned 64-bit integer from a given address in a process's memory mapping, handling both little-endian and big-endian formats.
5787	ReadInt8 converts uint8 to int8 from address a
5788	ReadInt16 converts a uint16 to int16 from memory address.
5789	ReadInt32 reads a 32-bit integer from memory address a using ReadUint32 and converts it to int32.
5790	ReadInt64 converts uint64 to int64 from memory address.
5791	ReadUintptr reads an uintptr from memory at address a based on pointer size.
5792	ReadPtr will return a pointer address by reading an uintptr from the given address
5793	ReadCString reads a C-style string from memory and returns it as a Go string
5794	Source method returns file name and offset from mapping object
5795	findMapping will return a mapping based on the address or nil if not found
5796	Max will return the larger address between two addresses.
5797	Min method returns the smaller of two addresses
5798	Align address to nearest multiple of x
5799	initialize will build a spanning tree for objects in ltDom, assigning vertex numbers and initializing semi and parent arrays
5800	calculate will compute the immediate dominator tree for a directed graph using a variant of Lengauer-Tarjan algorithm
5801	eval will return the label of a vertex after compressing its path in the graph
5802	compress will flatten the ancestor structure for a given node v by updating labels and ancestors based on semicolon values
5803	link updates the ancestor map with the given vertex v as the parent of w
5804	reverse will invert the dominator tree structure and update redge and ridx accordingly
5805	calcSize calculates the size of each vertex in the dominator tree using depth-first search.
5806	objField will return a field name or indexed field name based on object type and offset
5807	Readable checks if a mapping exists for a given address.
5808	ReadableN checks if a process can read from an address range.
5809	splitMappingsAt splits memory mappings at address `a`
5810	DynamicType returns the dynamic type of an interface or panics if called on a non-interface type.
5811	Create will create a Btrfs filesystem image and mount it at a specified path an error will be returned if the operation fails
5812	Resolve will return an IP address from a URL and an error if the resolution fails
5813	Equal method checks if two Token instances have the same type and value, returning true if they do.
5814	newDefaultClassifier initializes a classifier with predefined rune classes
5815	Next returns the next word token from the lexer or an error if the token type is unknown.
5816	NewTokenizer initializes a tokenizer with a reader and default classifier.
5817	Split will tokenize a string into substrings based on lexer rules and return them along with any errors encountered
5818	Between extracts content between specified delimiters from a string.
5819	BetweenF returns a function that extracts text between specified delimiters from a given string.
5820	Camelize converts a string to camel case by replacing underscores with spaces, capitalizing each word, and removing non-alphabetic characters.
5821	Capitalize will return a string with the first letter capitalized and the rest in lowercase
5822	CharAt returns the character at a specified index or an empty string if out of bounds.
5823	CharAtF returns a closure that extracts a character from a string at a specified index.
5824	ChompLeft removes the specified prefix from the beginning of the given string if it exists.
5825	ChompLeftF returns a function that removes the specified prefix from a given string
5826	ChompRight removes a specified suffix from a string if it exists, otherwise returns the original string
5827	ChompRightF returns a function that removes the specified suffix from a given string.
5828	ClassifyF returns a function that classifies a given string
5829	Clean removes extra spaces from the beginning and end of a string.
5830	Dasherize converts string to dash-separated lowercase with underscores and capitals replaced by hyphens.
5831	EscapeHTML will escape HTML special characters in a given string using html.EscapeString and print a verbose message if enabled
5832	DecodeHTMLEntities will unescape HTML entities in a given string and return the result
5833	EnsurePrefixF returns a function that ensures a given string has a specified prefix.
5834	EnsureSuffixF returns a function that appends a suffix to a given string
5835	Humanize converts a string to a human-readable format by replacing underscores with spaces, removing trailing '_id', trimming whitespace, and capitalizing the first letter.
5836	Iif evaluates a condition and returns one of two strings based on the result.
5837	IndexOf finds the position of the first occurrence of a substring within a string starting from a given index.
5838	IsLower checks if a string is lowercase and alphabetic.
5839	IsUpper checks if a string is uppercase and alphabetic
5840	Left will return the first n characters of s or the last n characters if n is negative
5841	LeftF returns a function that trims the left side of a string to a specified length.
5842	Letters will return a slice of strings where each element is a single rune from the input string.
5843	Lines converts a string to a slice of lines, replacing Windows-style newlines with Unix-style.
5844	Map applies a function to each element of an array returning a new array with the results.
5845	Match checks if a string matches a given regular expression pattern and returns a boolean result.
5846	tasks defines project tasks including install, lint, readme, and test.
5847	Pad will add padding to a string until it reaches a specified length
5848	PadF returns a closure that pads a string s with char c to length n
5849	PadLeft will return a left-padded string to a specified length using a given character
5850	PadLeftF returns a function that pads a string to the left with a specified character to a minimum length.
5851	PadRightF returns a closure that pads a string to the right with a specified character up to a given length.
5852	Pipe applies a series of functions to a string sequentially and returns the result
5853	QuoteItems will return a new array where each item is quoted.
5854	ReplaceF returns a closure that replaces up to n occurrences of old with new in a given string.
5855	ReplacePatternF returns a closure that replaces occurrences of a pattern with a replacement string in a given input string.
5856	Reverse will return the reversed version of the input string
5857	RightF returns a function that right-aligns a string to a specified length.
5858	Slice extracts a substring from a given string based on start and end indices.
5859	SliceF returns a function that slices a string from start to end.
5860	SliceContains checks if a slice contains a given value and returns true if found.
5861	SliceIndexOf returns the index of a value in a slice or -1 if not found
5862	Slugify converts a string to lowercase, removes non-alphanumeric characters, and replaces spaces with hyphens.
5863	StripPunctuation removes punctuation from a string and replaces whitespace with a single space.
5864	StripTags removes specified HTML/XML tags from a string.
5865	Substr extracts a substring from s starting at index for n characters, handling bounds and empty strings.
5866	SubstrF creates a closure that returns a substring from the given string starting at index and having length n.
5867	TemplateWithDelimiters replaces placeholders in a string with corresponding values from a map using custom delimiters.
5868	ToArgv converts a string to a list of arguments, handling quotes, escapes, and whitespace.
5869	ToBool checks if a string represents a boolean value.
5870	ToBoolOr converts a string to a boolean, returning a default value if conversion fails.
5871	ToIntOr converts string to integer or returns default if conversion fails
5872	ToFloat32Or converts a string to a float32 or returns a default value if conversion fails
5873	ToFloat64Or converts a string to a float64, returning a default value on error
5874	UnescapeHTML will unescape HTML entities in a given string and print a warning if verbose mode is enabled
5875	WrapHTML wraps given string with HTML tags and escapes attribute quotes.
5876	WrapHTMLF creates a closure to wrap HTML content with specified tag and attributes
5877	ReapChildren waits for child process exit signals and reaps them safely using a lock.
5878	SdNotify sends a state update to the systemd socket and returns an error if it fails
5879	NewAuthenticator initializes a new authenticator with a store and policy, setting up tokens and clients.
5880	Endpoint method handles authentication requests for authorization, token, and revocation using HTTP handlers and returns appropriate responses based on the request path.
5881	Unique will return unique bson.ObjectIds from the input slice.
5882	Contains checks if a given ID exists within a list of BSON ObjectIDs and returns a boolean result.
5883	Includes checks if all elements of subset are in all and returns true if so.
5884	Require checks model flags and logs them.
5885	Enqueue adds a new job to the store with the given data and delay returns the created job and any errors
5886	A constructs and returns an Authorizer using a Matcher and Handler, panicking if either is nil.
5887	Run will return an Authorizer instance with specified Enforcers.
5888	And combines two authorizers, returning a new authorizer that applies both matchers and handlers sequentially.
5889	Or combines two Authorizers, returning true or the first non-nil Enforcer result from them.
5890	Enqueue adds a job to the queue and returns it along with any errors
5891	Callback creates a new fire.Callback with a tracer tag, enqueues a job based on the controller's store, and responds with an empty object if required.
5892	NewWatcher creates and returns a Watcher instance with initialized streams and manager.
5893	Watcher.Add registers a new stream, initializes the model, checks for existing streams, saves the stream, opens it, handles events, and broadcasts them.
5894	Action method returns a fire.Action with GET method and a callback to handle connections.
5895	Write checks if operation is create update or delete
5896	Operation.String will return a string representation of the operation type or empty string if unknown
5897	Query method constructs a MongoDB query document using the selector and filters from the context.
5898	Respond encodes a value to JSON and writes it to the ResponseWriter, returning any errors encountered.
5899	EnsureApplication checks or creates an application in a store, returning its key and any validation error.
5900	EnsureFirstUser checks if a user exists, creates it if not, and returns an error if validation fails
5901	Callback method constructs and returns a fire.Callback instance based on operation type.
5902	OpenStream initializes a new Stream with given parameters and opens it asynchronously.
5903	Close will lock the mutex, set the closed flag, and close the current change stream if it exists.
5904	AddTokenIndexes adds token indexes to indexer based on conditions
5905	GetTokenData returns token details such as type, scope, expiration, application, and user ID.
5906	SetTokenData assigns token details to the Token struct.
5907	ValidSecret checks if the secret matches the stored hash using bcrypt.
5908	HashSecret generates a bcrypt hash from the application's secret and saves it, clearing the original secret.
5909	ValidPassword checks if the given password matches the user's hashed password.
5910	HashPassword will hash the user's password and save it, clearing the original password on success or returning an error
5911	MustCreateStore creates a Store instance from a URI or panics if it fails.
5912	CreateStore establishes a MongoDB session from a URI and returns a Store object or an error.
5913	C method returns MongoDB collection based on model name
5914	NewAssetServer creates a handler to serve files from a specified directory with a given prefix.
5915	DefaultGrantStrategy checks if scope is empty and returns an error if not
5916	DefaultTokenData returns user ID from resource owner or nil
5917	GenerateToken creates a JWT token with claims based on policy settings and returns it as a string.
5918	ParseToken will validate a JWT token and return its claims along with a flag indicating if it's expired and any encountered error
5919	fire.C creates and returns an Enforcer object
5920	MustGet retrieves a field's value from a model struct or panics if the field doesn't exist.
5921	MustSet updates a model's field with a given value, panicking if the field does not exist.
5922	NewGroup creates a new Group instance with empty controllers and actions maps.
5923	Add controllers to Group, preparing each and checking for duplicates.
5924	Endpoint handles HTTP requests, routes them to appropriate controllers or actions, and returns responses.
5925	Add method adds an index to the indexer for a given model, uniqueness flag, expiration duration, and fields.
5926	AddRaw method appends a collection and its corresponding index to the indexer's list.
5927	Ensure will create or update indexes in the database based on the provided store's configuration.
5928	NewCatalog creates a new catalog with given models and returns it
5929	Add models to catalog, panic if model already exists
5930	All will return all models from the catalog
5931	Visualize will generate a graph representation of catalog models and their relationships using DOT language syntax.
5932	NewErrorReporter creates a function to report errors with stack trace to given writer.
5933	EnsureIndexes ensures model indexes for the given store and returns an error if any issues arise.
5934	E will return an error created from a formatted string and arguments using Safe
5935	Compose combines multiple handlers into a single chain, applying each middleware sequentially.
5936	Includes checks if all elements of subset are in all
5937	Intersect returns common elements from two lists
5938	E constructs an Error instance with given reason and retry flag
5939	RootTracer wraps an HTTP handler to trace requests, replacing IDs and logging details.
5940	NewTracerFromRequest creates a tracer from an HTTP request and span name.
5941	NewTracer initializes a new tracer with a root span and an empty spans slice.
5942	Push adds a new span to the tracer's stack with the given name and parent context.
5943	Last will return the last span or root if spans are empty
5944	Tracer.Tag sets a tag on the last item with a given key and value
5945	Tracer's Log method logs a key-value pair using the last tracer's LogKV method.
5946	Context method adds tracer's span to given context.
5947	Pop removes the last span from the tracer's stack, finishes it, and resizes the stack.
5948	Finish will close all spans and the root span if specified
5949	NewPool creates a new Pool instance with initialized maps for tasks and queues, and a closed channel.
5950	Add method adds a task to pool checks for existing tasks saves the task updates the queue saves the queue
5951	Run method starts all queues and tasks in a pool
5952	NewBodyLimiter returns a BodyLimiter struct wrapping the original request body with a maximum byte reader
5953	LimitBody sets or resets a request's body size limit
5954	C creates a new Callback instance with a matcher and handler, panicking if either is nil. The handler logs tracing information before and after calling the original handler.
5955	Only returns a matcher function that checks if the given context's operation is in the list of allowed operations
5956	BasicAuthorizer checks HTTP basic auth credentials against a map and returns a callback or access denied error.
5957	ModelValidator returns a callback to validate models ensuring they implement ValidatableModel and pass validation.
5958	TimestampValidator sets created/updated timestamps on model operations.
5959	RelationshipValidator checks model relationships and returns callbacks for validation.
5960	Inspect will distribute jobs among workers to process object groups and collect secrets
5961	NewRule creates a new rule with the given name and match pattern returning a Rule object and an error if the pattern is invalid.
5962	AddUnmatch will compile a regular expression from a string and add it to the Rule's Unmatch list returning an error if compilation fails
5963	Run will execute a rule on content returning matching lines and their numbers
5964	NewSecret creates a new secret with the given object, rule, line number, and line content
5965	NewObject creates an Object instance with limited content length and initializes its fields.
5966	SetMetadata updates an object's metadata with a key, value, and attributes, updating primary key hash if needed.
5967	GetMetadata retrieves a metadata value by key from an Object, returning the value and an error if the key does not exist.
5968	GetMetadataAll retrieves all metadata values as a map for the given object.
5969	SetRule sets a regex rule on Exception and returns error if invalid
5970	SetObject compiles a regular expression from a given string and assigns it to the Exception's Object field, returning an error if compilation fails.
5971	SetNline updates exception's line number and returns nil
5972	SetContent sets the exception's content using a regular expression and returns an error if compilation fails
5973	Run checks if exception matches secret based on rule object nline content
5974	AddRule adds a new rule to the Seekret instance and enables it if specified
5975	LoadRulesFromFile reads rules from a YAML file and adds them to the Seekret instance with optional default enabled status.
5976	LoadRulesFromDir will load rules from a directory and set default enabled status for each rule file an error will be returned if any issue occurs
5977	DefaultRulesPath returns the path to the default rules directory, prioritizing an environment variable.
5978	EnableRule will enable a rule in the rule list and return an error if the rule does not exist
5979	DisableRule will disable a rule by name and return an error if unsuccessful
5980	EnableRuleByRegexp enables a rule by regexp in Seekret's rule list and returns the count of modified rules.
5981	DisableRuleByRegexp disables a rule using a regular expression and returns the number of rules disabled.
5982	LoadObjects appends objects from a source to the Seekret's object list returning an error if loading fails
5983	GroupObjectsByMetadata groups objects by metadata key in Seekret's object list.
5984	GroupObjectsByPrimaryKeyHash returns a map of objects grouped by primary key hash from the Seekret object list
5985	AddException will add an exception to the Seekret's list.
5986	LoadExceptionsFromFile reads exceptions from a YAML file and adds them to the Seekret instance.
5987	printPlainResults prints each result's source, string, error, and other exported fields
5988	printJsonResults converts results to JSON and prints it to stdout with proper formatting
5989	NewXor64Source creates a new Xor64Source instance with the given seed.
5990	xor64 applies bitwise XOR operations to its input and returns the result
5991	next method updates state and returns the next 64-bit value using XOR operation
5992	Seed sets the initial state of the Xor64Source with a given or default seed.
5993	NewFrameSet will create a FrameSet from a frame range string and return it along with any errors encountered during processing.
5994	handleMatch processes different types of frame matches and appends unique frames to rangePtr, handling errors for invalid inputs.
5995	Index method returns frame's position using rangePtr's Index method
5996	Frame will return the frame value at the specified index and an error if the index is out of bounds
5997	HasFrame checks if a frame exists within the FrameSet's range.
5998	FrameRangePadded returns padded frame range string
5999	Normalize will return a new FrameSet with normalized range pointer
6000	FramesToFrameRange converts a list of frames to a string representation, handling sorting, z-filling, and consecutive ranges efficiently.
6001	frameRangeMatches checks if a given frame range string matches predefined patterns and returns a slice of matched substrings or an error if parsing fails
6002	toRange generates a sequence of numbers from start to end with a given step
6003	NewWorkManager initializes and returns a workManager instance with appropriate file options based on global Options settings.
6004	processSources will process input directories or sequences, find matching file sequences, and send them to output sequences handling errors appropriately
6005	isInputDone checks if input directories or sequences are nil, returning true if both are nil
6006	closeInputs will close input directories and sequences if they are not nil
6007	load will send paths to respective channels based on whether they are directories or sequential files
6008	loadRecursive will traverse paths recursively adding directories to a channel and skipping hidden directories based on options.
6009	preparePaths processes paths to filter directories and detect file sequences, returning them separately.
6010	PadFrameRange will pad each frame range in a string with zeros based on a given padding number
6011	zfillString pads a string with zeros to a specified minimum width
6012	zfillInt will return a zero-filled integer string based on the specified width
6013	NewInclusiveRange creates a new InclusiveRange object with the given start, end, and step values, adjusting the step if it's zero to ensure proper iteration direction.
6014	String method returns a string representation of InclusiveRange including start, end, and step values.
6015	InclusiveRange's End method returns cached end value if available, otherwise calculates it based on range parameters and caching the result.
6016	Len method calculates and caches the length of an inclusive range.
6017	Min will return the lower bound of the inclusive range.
6018	Max will return the larger of two integers, Start or End
6019	Contains checks if a value is within an inclusive range based on its closest calculated value.
6020	closestInRange returns the closest value within a specified range considering the step size
6021	Index returns the index of a value within an inclusive range or -1 if not found
6022	String method for InclusiveRanges returns a comma-separated string representation of its blocks
6023	InclusiveRanges Len calculates total length of all blocks
6024	Start returns the start value of the first block or 0 if no blocks exist
6025	InclusiveRanges' End method returns the end value of the last block or 0 if blocks are nil.
6026	Min returns the smallest inclusive range from the InclusiveRanges slice.
6027	Max will return the maximum value from InclusiveRanges and its blocks
6028	numRanges returns the count of blocks in InclusiveRanges
6029	rangeAt will return an InclusiveRange from the InclusiveRanges list based on the given index or nil if the index is out of bounds
6030	Append adds a new inclusive range to the list.
6031	AppendUnique adds unique values to InclusiveRanges based on start, end, and step.
6032	Contains checks if a value exists within any block of inclusive ranges returns true if found otherwise false
6033	Index will find the value in inclusive ranges and return its global index or -1 if not found
6034	FrameRange returns the frame range of a file sequence or an empty string if the frame set is nil.
6035	FrameRangePadded returns padded frame range or empty string if frame set is nil
6036	Index retrieves frame path from file sequence or returns original string if frame set is nil.
6037	SetDirname updates the directory name with a trailing separator if missing
6038	SetPadding updates the padding characters and zfill for a file sequence
6039	SetPaddingStyle updates padding style and applies it to FileSequence
6040	SetExt updates file extension ensuring it starts with a dot
6041	SetFrameRange updates the file sequence's frame set with a new frame range string and returns any errors encountered during parsing.
6042	Len returns the number of frames in the sequence, or 1 if no frames exist
6043	FileSequence's String method returns a formatted string combining directory, basename, frame set, padding char, and extension.
6044	Copy method returns a new FileSequence object with the same values as the original.
6045	NewClient creates a new client instance with the given URL, TLS setting, and headers.
6046	UnmarshalXML will decode XML data into a Header struct, returning an error if parsing fails.
6047	UnmarshalXML will parse XML content into a struct and handle SOAP Faults
6048	Call sends a SOAP request with the given parameters and returns any errors encountered during the process.
6049	JSONDoc loads JSON data from a file or HTTP and returns it as a RawMessage or an error.
6050	AddLoader adds a new loader to a chain based on a doc matcher and loader function
6051	JSONSpec reads a JSON file and returns its analyzed Document or an error.
6052	Embedded will return a Document object and an error if either JSON unmarshalling fails
6053	Spec parses a specification file and returns its Document representation or an error.
6054	Analyzed will return a Document and an error based on the input JSON data and version.
6055	Expanded will return an expanded document and an error if expansion fails
6056	ResetDefinitions will reset the document's definitions to their original state and return the updated document
6057	Pristine returns a new Document after analysis
6058	OpenDb attempts to open a GeoIP database from a list of possible paths, returning an error if none are successful.
6059	GetOrg returns the organization name for a given IP address
6060	GetRegion retrieves the country and region codes for a given IP address using a GeoIP database, returning empty strings if the database is nil or the lookup fails.
6061	GetRegionName converts country and region codes to a region name using C bindings, returning an empty string if not found.
6062	GetCountry retrieves the country code and netmask for a given IP address using the GeoIP database.
6063	NewRotatingFileHandler creates a rotating file handler with specified file name, maximum bytes, and backup count returns the handler and an error if any
6064	Close will close the file descriptor and return an error if it fails
6065	Level's String method returns its corresponding log level as a string.
6066	New will create and initialize a Logger instance with specified handler, flag, and buffer pool.
6067	Close method locks handler, closes it, then unlocks lock
6068	SetLoggerLevelByName sets logger level based on name input.
6069	Logger's Output formats log message based on flags and calls handler to write it.
6070	OutputJson formats log data into JSON and writes it using a logger handler.
6071	Print logs using trace level.
6072	Logger's Println method outputs trace level log message with given arguments.
6073	Debug logs arguments with level debug using logger's Output method
6074	Logger's Debugln method outputs debug-level messages with newline formatting.
6075	Logger's Error method outputs a formatted error message with level 2.
6076	Logger's Errorln method outputs an error level log message with newline.
6077	Logger's Info method outputs formatted info level message.
6078	Infoln logs informational messages with the specified arguments.
6079	Warn logs a warning message with the given arguments.
6080	Warnln logs a warning message with the given arguments.
6081	NewStreamHandler initializes a StreamHandler with a writer and returns it.
6082	Right will append padding to the right of a string until it reaches a specified length
6083	New creates a new API instance with metadata
6084	setupMetadata constructs a metadata resource map removing specific prefixes from path patterns
6085	recordTypes records parameter types from a data type recursively
6086	appendSorted adds a parameter to a sorted list of parameters and returns the updated list
6087	parseDataType determines data type based on class and constructs appropriate DataType object
6088	parseParam analyzes path, updates param, determines data type, and returns updated action parameter
6089	newParam creates a new ActionParam based on given parameters and data type.
6090	toGoReturnTypeName generates a Go return type name based on the input name and whether it's a slice or not
6091	toGoTypeName maps input names to Go types, handling special cases and splitting names containing "::".
6092	prettify converts an object to a pretty-printed JSON string or its default representation if serialization fails
6093	isBuiltInType checks if a given name is a built-in type and returns true if it is
6094	MatchHref checks if href or href/ matches any path pattern in Action.
6095	Substitute will replace path variables with their corresponding values and return the resulting string and a list of used variables, or an empty string and a list of missing variables if any.
6096	MarshalJSON reads file content and returns JSON representation.
6097	writeMultipartParams recursively adds fields to a multipart writer based on a nested APIParams structure, handling strings and nested structures with optional prefixes.
6098	PerformRequest sends HTTP request, signs it if Auth is set, returns response or error.
6099	PerformRequestWithContext sends an HTTP request with a given context and signs it using authentication if available, returning the response or an error
6100	LoadResponse reads HTTP response, parses JSON, handles Location header, returns parsed data or error
6101	ScheduleLocator returns a new instance of ScheduleLocator with Href set to href and API reference
6102	TemplateLocator constructs a new locator with the given href and API reference.
6103	fetchDetails populates SSHConfig with details from environment arrays and servers
6104	buildAliases generates SSH alias strings from configuration and options.
6105	serverArray retrieves server instances based on the given name and returns them
6106	server retrieves a server instance by name from the API and returns it or fails if not found
6107	toPackageName converts version string to package name by replacing dots with underscores and removing trailing zeros
6108	loadFile will return the contents of a file and an error if the file cannot be found or read
6109	main sets up a CLI app parses command line executes command handles response and errors sets appropriate exit status
6110	runCommand executes a command on a client and returns a response or an error based on the command type and flags
6111	CreateJSONResponse will return an HTTP response with a JSON body and a status code of 200 after removing any UTF-8 Byte Order Mark from the input byte slice.
6112	AccountLocator constructs an AccountLocator object from href and API instance
6113	AccountGroupLocator constructs a new locator with the given href and API reference.
6114	AlertLocator constructs a new instance with the provided href and API reference
6115	AlertSpecLocator returns an instance of AlertSpecLocator with Href set to href and api as its parent
6116	AuditEntryLocator returns a new instance of AuditEntryLocator with Href set to href and API set to api
6117	BackupLocator creates a new locator with the given href and API reference
6118	ChildAccountLocator constructs a new instance with the provided href and API reference.
6119	CloudLocator will create a new CloudLocator instance with the provided href and API reference.
6120	CloudAccountLocator returns a new instance of CloudAccountLocator with Href set to href and API set to api
6121	CookbookLocator returns a new instance of CookbookLocator with the given href and API reference
6122	CookbookAttachmentLocator constructs a new locator from href and API instance
6123	CredentialLocator constructs a new locator with href and API reference.
6124	DatacenterLocator constructs a new instance with the given href and API reference.
6125	DeploymentLocator constructs a new instance with the given href and API reference.
6126	HealthCheckLocator will create and return a new HealthCheckLocator instance with the provided href and API reference.
6127	IdentityProviderLocator returns a new instance with Href set to href and API reference.
6128	ImageLocator creates an ImageLocator instance with the given href and API reference.
6129	InputLocator constructs an InputLocator instance with the provided href and API reference.
6130	InstanceLocator creates a new instance locator for the given href and API.
6131	InstanceTypeLocator returns a new instance type locator with the given href and API reference.
6132	IpAddressLocator will create and return a new instance of itself with the provided href and API reference.
6133	IPAddressBindingLocator will return a new instance with the provided href and API reference
6134	MonitoringMetricLocator creates a new instance with the given href and API reference
6135	MultiCloudImageLocator creates a new instance with the provided href and API reference
6136	MultiCloudImageMatcherLocator constructs a new instance with Href and API references
6137	MultiCloudImageSettingLocator returns a new instance of MultiCloudImageSettingLocator with Href set to the input href and api set to the receiver API instance
6138	NetworkLocator constructs a new instance with Href set to href and API reference.
6139	NetworkGatewayLocator returns a new instance initialized with href and api
6140	NetworkOptionGroupLocator constructs a new instance with the given href and API reference
6141	NetworkOptionGroupAttachmentLocator constructs a new locator with the given href and API instance.
6142	OAuth2Locator constructs an OAuth2Locator instance with the given href and API reference.
6143	PermissionLocator returns a new PermissionLocator instance with the given href and API reference.
6144	PlacementGroupLocator returns a new instance with Href set to href and API reference.
6145	PreferenceLocator constructs a new locator with the given href and API instance.
6146	PublicationLocator constructs a new locator with the given href and API instance.
6147	PublicationLineageLocator returns a new locator for the given href and API instance
6148	RecurringVolumeAttachmentLocator constructs a new locator with the given href and API instance.
6149	RepositoryLocator constructs a new instance with Href and API reference
6150	RepositoryAssetLocator creates a new locator for the given href and API instance.
6151	ResourceGroupLocator returns a new locator for the given href and API instance
6152	RightScriptLocator constructs a new locator with href and API reference.
6153	RightScriptAttachmentLocator returns a new locator with the provided href and API instance
6154	RouteLocator creates a new locator for the given href and API instance
6155	RouteTableLocator will return a new instance with Href set to href and API reference
6156	RunnableBindingLocator constructs a new locator from href and API instance.
6157	SchedulerLocator creates a new instance with Href set to href and API reference.
6158	SecurityGroupLocator returns a new instance initialized with href and API reference.
6159	SecurityGroupRuleLocator constructs a locator object from href and API instance.
6160	ServerLocator returns a new instance of ServerLocator with Href set to href and API set to api
6161	ServerArrayLocator creates a new instance with href and API reference.
6162	ServerTemplateLocator creates a new instance with Href and API reference.
6163	ServerTemplateMultiCloudImageLocator constructs a new instance with href and API reference.
6164	SessionLocator creates a new instance of SessionLocator with the given href and API reference.
6165	SshKeyLocator creates a new SSH key locator with the given href and API instance.
6166	API's SubnetLocator method returns a new SubnetLocator instance with the provided href and API reference.
6167	TagLocator constructs a new TagLocator instance with the given href and API reference.
6168	TaskLocator returns a new instance of TaskLocator with the provided href and API reference
6169	UserLocator returns a new UserLocator instance with the provided href and API reference.
6170	UserDataLocator constructs a new UserDataLocator instance with the given href and API reference.
6171	VolumeLocator creates a new VolumeLocator instance with the given href and API reference.
6172	VolumeAttachmentLocator constructs a new locator with the given href and API reference.
6173	VolumeSnapshotLocator constructs a new locator using href and API reference.
6174	VolumeTypeLocator constructs a new locator from href and API instance.
6175	RegisterCommands registers action commands using a registrar.
6176	ShowCommandHelp will display help for a given command and return an error if unsuccessful
6177	ShowAPIActions will display API actions based on the command and return an error if unsuccessful
6178	ShowHelp displays help for a command based on parsed flags and actions.
6179	ParseCommandAndFlags will parse command and flags from input string and return CommandTarget, parsed flags, and an error if any.
6180	validateFlagValue checks if the flag value matches the specified regex, is non-blank, or is among the valid values, returning an error if any condition fails
6181	buildQuery merges multiple APIParams into a single one, appending duplicate keys with their corresponding values.
6182	buildPayload combines multiple APIParams into a single flattened APIParams object, returning an error if normalization fails
6183	shortenPattern will return a shortened pattern and a boolean indicating if it was shortened based on resource actions and patterns
6184	cleanDescription removes unnecessary lines from a document based on a specific keyword and returns the cleaned version.
6185	fileExists checks if a file exists and returns true if it does
6186	AnalysisSnapshotLocator returns a new instance with Href set to href and API reference.
6187	BudgetAlertLocator constructs a new instance with the given href and API reference.
6188	CloudBillLocator constructs a new instance with href and API reference
6189	CloudBillMetricLocator creates a new instance with Href set to href and API reference.
6190	api.CurrentUserLocator creates a new CurrentUserLocator instance with the given href and api reference
6191	InstanceCombinationLocator constructs a new instance with Href and API references.
6192	InstanceMetricLocator constructs a new instance with Href and API references.
6193	InstanceUsagePeriodLocator will return an instance of locator with href and API reference
6194	PatternLocator creates a new instance of PatternLocator with the given href and API reference.
6195	ReservedInstanceLocator constructs a new locator with the given href and API reference
6196	ReservedInstancePurchaseLocator returns a new instance with Href set to href and API reference.
6197	ScenarioLocator constructs a new instance with the given href and API reference.
6198	ScheduledReportLocator constructs a new instance with the provided href and API reference.
6199	TempInstancePriceLocator will return a new instance of TempInstancePriceLocator with the given href and API reference
6200	UserSettingLocator creates a new locator for user settings using the given href and API instance.
6201	readAllAsync reads all data from a file asynchronously returning a pointer to a byte slice and a channel signaling when the read is complete
6202	extractArg will return the value of a named argument and the remaining arguments
6203	write will append data to an output file and close it
6204	AppliedPolicyLocator returns a new instance of AppliedPolicyLocator with the given href and API.
6205	ApprovalLocator constructs an approval locator object with the given href and API instance.
6206	IncidentLocator returns an incident locator object with the provided href and API instance.
6207	PolicyTemplateLocator constructs a new locator with the given href and API reference.
6208	PublishedTemplateLocator returns a new PublishedTemplateLocator instance with the given href and API reference.
6209	DebugCookbookPathLocator returns a new instance of itself with the provided href and API reference.
6210	DockerControlLocator constructs a new instance with href and API reference.
6211	EnvLocator creates a new instance of EnvLocator with Href set to href and API set to api.
6212	LoginControlLocator creates a new instance with href and API reference.
6213	ProcLocator returns a new instance of ProcLocator with the given href and API reference.
6214	Rl10Locator returns a new instance of Rl10Locator with the provided href and API reference
6215	TSSLocator creates a new instance of TSSLocator with the given href and API reference
6216	TSSControlLocator returns a new TSSControlLocator instance with the given href and API reference
6217	TSSPluginLocator constructs a new instance with Href and API reference.
6218	NewAngularWriter creates a new AngularWriter instance with predefined template functions and parses the angularTmpl, returning an error if parsing fails.
6219	angularTmpl.Execute will render a resource template to a writer and return an error if it fails
6220	path will return a formatted string based on action's path patterns and variables
6221	mandatory checks if a parameter is mandatory for a given action
6222	New creates a new API instance with the given host and authenticator.
6223	FromCommandLine constructs an API client from command-line options, handling various authentication methods and flags.
6224	CanAuthenticate checks authentication and returns error if failed
6225	Encrypt will return an encrypted string and an error if encryption fails
6226	Decrypt will return a decrypted string and an error if decryption fails
6227	guessType infers a type based on API references and media types, prioritizing media type information when available.
6228	addType checks for type collisions and updates API accordingly
6229	extractCmdLineParams extracts command line parameters based on data type and constructs nested parameter structures.
6230	NewMetadataWriter initializes templates with functions for metadata writing and returns a MetadataWriter instance or an error.
6231	WriteHeader executes template to write header to writer.
6232	WriteMetadata executes a template to write API metadata to a writer.
6233	location will return metadata field based on ActionParam Location
6234	New will create and return a new API instance using the provided host and authenticator
6235	fromAPI initializes an API struct with metadata generated from the input API.
6236	BuildRequest constructs a new HTTP request using API metadata and parameters.
6237	setupMetadata will create a map of resource metadata using keys from cac.GenMetadata
6238	NewDisplayer reads HTTP response body, parses JSON if possible, and returns a Displayer object.
6239	ApplySingleExtract applies an extract to a Displayer and returns an error if the result is not a single value
6240	ApplyExtract will parse a JSON response using a selector and return either a raw or JSON-formatted output based on the js flag. An error will be returned if parsing fails.
6241	ApplyHeaderExtract retrieves the specified header from the response and assigns it to RawOutput, returning an error if the header is missing.
6242	Output will return a formatted JSON string or the original raw output based on prettify flag
6243	NewAPIAnalyzer initializes APIAnalyzer with resource map, attribute types, and raw types map
6244	Analyze API resources to generate APIDescriptor
6245	AnalyzeAliases updates parameters, status codes, and access rules for aliased API actions.
6246	LocatorFunc checks if "Links" attribute exists and returns a locator function if it does.
6247	ParseRoute processes routes to extract path patterns and HTTP methods based on moniker or custom routes.
6248	isDeprecated checks if a path contains "/api/session" but not "/api/sessions".
6249	isQueryParam checks if query parameter is valid
6250	isPathParam checks if a path parameter matches any variable in given path patterns
6251	fetchAuditEntries retrieves audit entries from a client filtered by email and returns them along with any errors encountered.
6252	formatTime will return a formatted time string in UTC timezone
6253	printAudits will iterate over audit entries and print their updated time, user email, and summary
6254	extractUnique returns unique AuditEntry from newEntries based on href comparison with oldEntries
6255	getHref extracts the self-link href from an AuditEntry.
6256	fail will print a formatted error message to stdout and exit with status 1 if the input format does not end with a newline
6257	parameters constructs a string representation of action parameters including mandatory and optional ones.
6258	paramsInitializer constructs API parameters based on action, location, and variable name
6259	commandLine will return a formatted string representing the command line arguments
6260	toVerb converts the first letter of a string to uppercase and the rest to lowercase, appending "Raw" if the input is "GET" or "POST".
6261	escapeBackticks replaces backticks in a string with escaped backticks
6262	AccountPreferenceLocator constructs an instance with href and API reference.
6263	ApplicationLocator constructs a new instance with the given href and API reference.
6264	API.EndUserLocator returns an EndUserLocator struct with Href set to href and API instance.
6265	NotificationRuleLocator returns a new locator for the given href and API instance
6266	UserPreferenceLocator creates a new instance with Href set to href and API reference.
6267	UserPreferenceInfoLocator creates a new locator with the given href and API instance
6268	LoadConfig reads a configuration file, decrypts sensitive fields, and returns a ClientConfig object or an error.
6269	CreateConfig reads user input to update or create a configuration file.
6270	fromAPI configures an API object using values from another API instance and returns it
6271	HostFromLogin will modify the host prefix based on certain conditions and return the updated host string
6272	AnalyzeParam processes parameter details and returns an ActionParam object with relevant attributes.
6273	AnalyzeAttribute processes attribute details and returns an ActionParam object with parsed data and type information.
6274	AnalyzeType determines the data type based on the input type definition and query string, handling various cases like structs, collections, and custom types, returning the appropriate data type or an error if invalid.
6275	CreateType generates a new object data type from a query and attributes, returning it and any errors encountered.
6276	Ref will return a definition based on a reference key or nil if not found
6277	Ref.Type returns a string representing the type based on "$ref" or "type" key, or empty if neither is present.
6278	Required method returns list of required fields from reference or empty list if not set
6279	Ref.ID returns the reference ID after trimming the prefix "#/definitions/" if present
6280	Service method returns the first tag or operation ID without fragment, or empty string if none available
6281	Method returns operation ID after splitting on "#" or empty string if "#" not present
6282	NewTypeRegistry creates a new TypeRegistry instance with initialized NamedTypes and InlineTypes maps.
6283	GetNamedType retrieves a named type from the registry using its Go-style name.
6284	CreateNamedType will add a new named type to the registry and return it, panicking if a type with the same name already exists
6285	CreateInlineType will add a new object data type to the registry and return it
6286	FinalizeTypeNames appends named types to inline types and finalizes type names in API descriptor.
6287	Merge will combine two APIDescriptors, checking version and resolving conflicts in resource and type names, then updating the receiver with the merged data.
6288	FinalizeTypeNames organizes API descriptor's type names to avoid clashes with resource names, ensures uniqueness, and initializes resource and type names.
6289	uniqueTypeName generates a unique type name based on the given prefix and appends an incrementing number until it finds a non-taken name
6290	MandatoryParams filters mandatory action parameters from a list.
6291	HasOptionalParams checks if any action parameters are optional.
6292	MakeUniq will generate a unique string based on a base name and a list of used strings, appending incrementing indices until a unique name is found.
6293	NewClientWriter creates a ClientWriter with parsed templates and returns it or an error
6294	WriteHeader method executes header template with package, version, time, JSON flags and writer, returning execution error.
6295	WriteResourceHeader will write a header to the writer with the given resource name
6296	WriteType will generate and write Go struct declaration based on object fields to writer
6297	WriteResource will execute a template to write a resource to a writer and return an error if it fails
6298	WithTrail appends a trail to evaluation context and returns it.
6299	AnalyzeEndpoint processes API endpoint details, extracts resource information, analyzes parameters and responses, and constructs an action definition.
6300	NetworkInterfaceLocator constructs a new locator using the href and API instance.
6301	NetworkInterfaceAttachmentLocator returns a new instance initialized with href and API reference
6302	UnmarshalJSON will parse JSON time string to RubyTime struct and return error if parsing fails
6303	ExecutionLocator returns an instance of ExecutionLocator with Href set to href and API reference.
6304	NotificationLocator creates a new locator for the given href and API instance.
6305	OperationLocator returns an OperationLocator object with Href set to href and API set to api
6306	ScheduledActionLocator returns a pointer to a new instance of ScheduledActionLocator initialized with href and api.
6307	NewBasicAuthenticator creates an authenticator using a builder and signer.
6308	NewSSAuthenticator wraps an authenticator with SSAuthenticator if it's not already wrapped.
6309	newCookieSigner creates a new cookie signer with the given login request builder, account ID, and client.
6310	Sign method refreshes cookie signer's authentication if needed, adds cookies to request, and sets account header.
6311	CanAuthenticate checks if authentication is possible for a given host using a cookie signer.
6312	refresh updates cookies and refresh time on successful authentication response
6313	Sign method sets Authorization header with Bearer token and optionally X-Account header with account ID if it's not zero.
6314	Sign method sets X-RLL-Secret header and returns nil
6315	Sign request using authenticator, refresh session if needed, set headers and hosts.
6316	SetHost updates the host based on specific rules for subdomains.
6317	CanAuthenticate checks user preferences via API and returns error if authentication fails
6318	extractRedirectURL will parse the Location header from an HTTP response to extract the redirect URL and return it along with any parsing errors
6319	buildURL constructs a URL using the provided host and path, defaulting to HTTPS unless Insecure is true
6320	GetAction will find and return an action by its name from a resource's actions list or nil if not found
6321	HasLink checks if a resource has a link with a specific name.
6322	findMatches searches for path patterns matching a given href and returns them
6323	NewPB creates an HTTPClient from ParamBlock settings, applying defaults where necessary and copying values to prevent side effects.
6324	newVariableDumpClient creates a new HTTP client with specific configurations for dumping requests and responses.
6325	newRawClient creates a custom HTTP client with specified options
6326	DoHidden sends a hidden request and returns the response or an error.
6327	Do sends HTTP request and returns response or error
6328	doImp sends HTTP request, logs details, dumps request/response based on conditions, handles errors, and returns response.
6329	getClientWithoutTimeout returns a new HTTP client without timeout settings from the original dumpClient.
6330	dumpRequest logs or returns HTTP request details based on dump format.
6331	writeHeaders appends HTTP headers to a buffer after filtering based on dump format and hidden headers
6332	copyHiddenHeaders will create a copy of the input map and return it
6333	validateCommandLine checks command options and flags for correctness
6334	APIClient will create a command client based on the given name and command line parameters, returning an error if the client is not supported.
6335	RegisterClientCommands registers commands for various APIs on the kingpin application.
6336	Interactive sets up logging to stderr for error level messages.
6337	toPattern converts verb and path to PathPattern with variables and regex.
6338	WithClientIP adds client IP to context if provided.
6339	ClientIP retrieves IP from context and returns it
6340	NewProducer creates a new producer with default configuration values and returns it along with any errors encountered.
6341	StartProducer creates a new producer and starts it returns the producer and any error encountered
6342	Producer's Start method initializes the producer with concurrency control and starts worker goroutines.
6343	Stop will stop the producer and notify all pending requests with an error.
6344	Publish sends a message to the producer's topic and returns any errors encountered
6345	PublishTo sends a message to a topic on a producer and handles errors.
6346	NewLocalEngine creates a new local engine instance with default timeouts if not specified, initializes channels, and starts a goroutine to run the engine.
6347	validate checks if the topic and channel of ConsumerConfig are non-empty returning an error if they are empty
6348	defaults sets default values for consumer config properties
6349	NewConsumer creates a new consumer instance using configuration, validates it, sets default values, initializes channels and fields, and returns the consumer and any errors encountered.
6350	StartConsumer initializes a new consumer with given config starts it and returns the consumer instance or error
6351	Start method starts a consumer if it hasn't started yet and runs it concurrently.
6352	RateLimit will throttle message flow based on specified limit returning a new channel with limited messages per second
6353	RawResponse.Write sends response data to a writer and returns an error if it fails
6354	ReadResponse reads a response from a reader and returns a parsed response or an error.
6355	backoff calculates and returns a jittered backoff duration based on the attempt number, minimum, and maximum durations using a hardcoded coefficient
6356	String method returns a human-readable representation of a FrameType enum
6357	NewConsulEngine initializes and returns a new ConsulEngine instance with default values if not specified.
6358	ParseMessageID converts a hexadecimal string to a MessageID and returns it along with any parsing errors.
6359	MessageID WriteTo writes its value to an io.Writer as a zero-padded hexadecimal string and returns the number of bytes written and any error encountered
6360	NewMessage constructs a new message object with the given ID, body, and command channel.
6361	`Finish` method on `Message` panics if already called, sends finish command, recovers from panic, and closes channel.
6362	Requeue will requeue a message with a specified timeout, panic if already completed, defer recovery, send request, and set cmdChan to nil.
6363	ReadCommand reads a command from a reader and returns a parsed Command or an error if the command is invalid.
6364	funcMapMaker constructs a template FuncMap from various sources, combining them into a single map.
6365	Funcs updates the template's function map and returns the modified template.
6366	Execute will render a template and write its result to response writer setting content type if necessary returns error if any
6367	RegisterPath checks if path exists and adds it to fs.paths if not already present. Returns error if path not found.
6368	AssetFileSystem will return the content of an asset file or an error if the file is not found
6369	Glob will return matching file paths based on a given pattern and an error if any occurs
6370	NameSpace method returns a new instance of AssetFileSystem for the given namespace.
6371	New initializes a Render instance with default configurations and paths.
6372	RegisterViewPath registers view paths from given strings, resolving absolute or relative paths and adding them to render's ViewPaths and AssetFileSystem.
6373	SetAssetFS updates the AssetFileSystem with paths from ViewPaths and registers them.
6374	Layout returns a Template instance with specified render and layout values
6375	Funcs method updates template functions and returns modified template.
6376	Execute template with given name, context, request, and writer
6377	RegisterFuncMap adds a function to the render's FuncMap under a given name.
6378	Asset method retrieves file content from asset file system.
6379	NewPlainClient creates a new plain client instance with identity, username, and password.
6380	Create will initialize a new uploader with the given URL headers and configuration returning a writer-closer and an error if initialization fails
6381	Open sends an HTTP GET request to the specified URL using the provided or default configuration and returns the response body and any errors encountered.
6382	Sign applies default service signature to HTTP request using keys.
6383	Sign method sets security token, creates HMAC signature, encodes it, and adds authorization header to HTTP request.
6384	Readdir reads directory entries from a file and returns them as FileInfo slices along with an error if any occurs.
6385	Find will search for nodes matching a given path expression and return them.
6386	Lex converts an XPath string to a channel of tokens
6387	MustParseXML will parse XML from a reader and panic if there's an error, returning the parsed tree node otherwise
6388	ParseXML will parse XML from a reader and return a tree structure along with any errors encountered during parsing.
6389	Call method checks argument count based on LastArgOpt and returns result or error.
6390	Parse converts a string to an XPathExec object and returns it along with any parsing errors.
6391	MustParse will execute a given XPath expression and panic if it encounters an error
6392	XPathExec's Exec method executes an XPath expression on a given node with optional options, returning the result and any errors encountered.
6393	XPathExec.ExecBool will execute an XPath expression on a node and return a boolean value or an error if the result cannot be converted to a boolean
6394	ExecNum will execute an XPath expression on a tree node and return a numeric result or an error if the result cannot be converted to a number
6395	XPathExec.ExecNode will execute XPath on a node and return a NodeSet or an error if the result cannot be converted to a NodeSet
6396	MustExec executes XPath expression on node and panics if error occurs returning result otherwise
6397	ParseExec will execute a parsed expression on a given tree node and options, returning the result and any errors encountered during execution.
6398	CreateNode adds a new XML element or node to the current element based on the options provided and returns the created node.
6399	GetChildren returns a slice of children nodes from XMLEle.
6400	GetAttrs will return a slice of attributes from XMLEle
6401	`ResValue recursively concatenates the result values of child elements of an XML element.`
6402	Parse will return a syntax tree and an error if parsing fails
6403	GetToken returns the token from XMLNode based on its type
6404	ResValue returns the value of an XML node based on its type.
6405	Exec will execute a parser node on a tree node and return a result or an error
6406	Num's String method returns its string representation or "Infinity" for infinite values
6407	Num method converts string to float64 and returns it as Num type or NaN on error
6408	BuildNS constructs a slice of NS from an XML element, filtering out default namespace declarations and sorting them.
6409	GetAttribute retrieves an XML attribute by local name and namespace returns the attribute and a boolean indicating success
6410	GetAttributeVal retrieves attribute value from element and checks if it exists
6411	GetAttrValOrEmpty retrieves attribute value or empty string if not found
6412	FindNodeByPos recursively searches for a node at a given position within a tree structure.
6413	Marshal will serialize a tree node to an IO writer and return an error if serialization fails
6414	MarshalStr converts a tree node to a JSON string and returns it along with any errors encountered during the process.
6415	NewLexer initializes a Lexer with reader, tokenizer, and parsing options.
6416	NewLexerString creates a lexer from a string with specified options
6417	Split will tokenize and split a string based on POSIX rules or custom delimiters returning a slice of strings and an error
6418	Register method locks registry, checks for no code or duplicate error, marks error as registered, and stores it by code.
6419	Get retrieves an ErrDescriptor from the registry using a given code and returns it.
6420	GetAll will return all ErrDescriptors from the registry with a read lock
6421	From will convert an error to a custom Error type or use FromGRPC if it's not already an Error.
6422	Descriptor converts an error to an ErrDescriptor with default values if not found.
6423	GetAttributes extracts attributes from an error or returns empty attributes.
6424	HTTPStatusCode returns the corresponding HTTP status code based on the given type.
6425	HTTPStatusCode returns the HTTP status code from an error or 500 if the error type is unknown.
6426	HTTPStatusToType converts an HTTP status to its corresponding Type.
6427	ToHTTP sets headers and encodes errors to JSON in HTTP responses.
6428	toImpl converts an Error to an impl struct, creating a new one if necessary
6429	MetadataFromIncomingContext extracts and returns metadata from the incoming context.
6430	MetadataFromOutgoingContext extracts and returns metadata from the outgoing context.
6431	TokenFromMetadata retrieves a token from metadata and returns it or an error if not found
6432	TokenFromIncomingContext retrieves token from metadata extracted from incoming context
6433	OutgoingContextWithToken adds a token to a context and returns it.
6434	KeyFromMetadata extracts the first key from metadata or returns an error if no key is present.
6435	KeyFromIncomingContext extracts metadata from a context and returns a key with an error if extraction fails.
6436	OutgoingContextWithKey adds a key-value pair to the outgoing context's metadata
6437	IDFromMetadata extracts the first "id" value from metadata, returning an error if absent or empty.
6438	IDFromIncomingContext extracts metadata from incoming context and retrieves ID.
6439	OutgoingContextWithID adds an ID to a context using metadata.
6440	ServiceInfoFromMetadata extracts service name, version, and address from metadata.
6441	ServiceInfoFromIncomingContext extracts service info from incoming context.
6442	OutgoingContextWithServiceInfo adds service info to ctx
6443	LimitFromMetadata retrieves the "limit" value from metadata and returns it as a uint64, or 0 if not present.
6444	OffsetFromMetadata retrieves the offset from metadata and returns it as a uint64, or an error if the offset is missing or invalid.
6445	LimitAndOffsetFromIncomingContext retrieves limit and offset from metadata in incoming context, returning them along with any errors encountered.
6446	OutgoingContextWithLimitAndOffset returns a new context with optional limit and offset metadata.
6447	before determines if one schedule item ends before another starts, considering timestamps if available.
6448	New creates a new error instance with formatted message and attributes
6449	WithNamespace adds a namespace field to the given context and returns it.
6450	Wrap will create a new Namespaced object with the given context and namespaces.
6451	WithField method updates or adds a field to a Namespaced object's logger, handling namespace key specially.
6452	WithFields method adds fields to a logger interface and returns a new Namespaced logger instance
6453	Format will replace placeholders in a string with corresponding values from a map and return the formatted string or the original string if there's an error
6454	fix will return a non-nil value by dereferencing pointers and converting other types to strings
6455	GRPCCode maps a Type to its corresponding gRPC status code.
6456	GRPCCodeToType maps gRPC status codes to custom types.
6457	GRPCCode converts an error to gRPC status code
6458	FromGRPC converts gRPC error to custom Error type
6459	ToGRPC converts an error to gRPC error with attributes if applicable.
6460	IsEnabled checks if a namespace is enabled based on its presence or absence in a list of allowed namespaces, returning true if the namespace is explicitly enabled or if a wildcard (*) is present.
6461	Set assigns new namespaces to the ns object and locks/unlocks access during the operation.
6462	Cause will return the underlying error or create a new one from the cause attribute if available.
6463	parseCode converts a string to an integer and returns it as a Code type, defaulting to 0 on error
6464	UnaryServerInterceptor applies a conversion function to gRPC errors before returning them
6465	StreamServerInterceptor applies a conversion function to a gRPC stream handler.
6466	UnaryClientInterceptor returns a unary client interceptor that applies a conversion function to the RPC call result.
6467	StreamClientInterceptor creates a gRPC client interceptor that applies a conversion function to errors.
6468	Interceptor creates a gRPC client interceptor that retries streams based on settings.
6469	Wrap will return a log interface using a logger.
6470	NewCounter creates a counter with specified bucket size and retention duration, initializing buckets accordingly.
6471	NewRedisCounter creates a new Redis counter with specified client, key, bucket size, and retention duration.
6472	NewLimiter creates a new limiter with given counter, duration, and limit.
6473	WithInsecure sets the allowInsecure field to true in TokenCredentials.
6474	WithTokenFunc creates a new TokenCredentials instance with a given token function and key.
6475	GetRequestMetadata retrieves authentication metadata from context or token function.
6476	FieldsFromIncomingContext extracts log fields from incoming context.
6477	String method returns type description as a string.
6478	UnmarshalText converts text to a Type and assigns it to t, returning an error if conversion fails
6479	fromString will convert a string to a corresponding Type and return an error if the string is invalid
6480	Start initializes a goroutine to log memory statistics at specified intervals.
6481	NewSimple initializes a new simple queue with a condition variable for synchronization.
6482	Wrap will return a Filtered struct with the provided logger and filters
6483	WithFilters adds new filters to a Filtered instance and returns the updated instance.
6484	WithField applies filters to a value before adding it to a log entry
6485	Filtered.WithFields applies filters to log fields and returns a new Filtered instance with the filtered values.
6486	FilterSensitive filters out sensitive keys in a map using a case-insensitive comparison and returns a filtered map.
6487	SliceFilter applies a filter to each element of a slice.
6488	MapFilter applies a filter to each value in a map and returns the filtered map
6489	RestrictFilter applies a filter to a specific field name returning the filtered value or original value if the field does not match.
6490	LowerCaseFilter applies a lower case transformation to keys before filtering them
6491	newBatchPoints creates a BatchPoints object from a configuration or panics if invalid
6492	NewSinglePointWriter creates a new SinglePointWriter instance with the given logger and writer.
6493	Write will add a point to a batch and write it using the writer
6494	WithScalingInterval sets scaling interval for batching writer
6495	NewBatchingWriter creates a new BatchingWriter instance with specified options and returns it.
6496	Write batches of points to a writer, handling concurrency and scaling.
6497	MustParseLevel parses a log level from a string or logs an error if invalid.
6498	New creates a new Stream instance with the given buffer size and setup function.
6499	SetLogger sets the logger for the stream.
6500	CloseRecv will close the receive buffer and unlock the mutex
6501	Stats returns sent and dropped packet counts from a stream.
6502	Run starts a streaming process handling receive and send operations, logging errors and managing context cancellation.
6503	ServerOptions returns gRPC server options with logging interceptors.
6504	ClientOptions returns gRPC dial options with unary and stream interceptors using provided logger.
6505	UnaryServerInterceptor logs method calls and durations, handling errors gracefully.
6506	StreamServerInterceptor logs RPC server streams, measures duration, and handles errors.
6507	UnaryClientInterceptor logs gRPC calls with duration and errors.
6508	StreamClientInterceptor logs RPC client streams and handles errors.
6509	defaults method sets default values for BufferSize and Prefix fields in Config struct
6510	Flush will execute batch processing asynchronously and reset the batch variable
6511	New creates a Handler with Writer and UseColor based on environment variables.
6512	HandleLog processes log entries, formats them with optional colors, and writes them to a writer.
6513	New initializes a new random interface using a given seed.
6514	Names returns a list of parameter names from a URI template.
6515	String method returns formatted performance data
6516	RenderPerfdata will concatenate performance data into a single string with a prefix indicating the start of perfdata.
6517	Exit logs a status and message then exits with the given status code
6518	NewCheckWithOptions creates a new check instance with optional status policy applied
6519	AddResult updates check's results and status based on new status and message
6520	AddResultf formats a message using a status and variable arguments then adds it to Check's results
6521	String method returns formatted check status and performance data
6522	Exitf formats a message and adds it to the check result before finishing
6523	Criticalf logs critical messages using Exitf
6524	Unknownf logs an unknown error message with the given format and arguments
6525	NewDefaultStatusPolicy returns a default status policy with predefined severity levels.
6526	NewStatusPolicy creates a new status policy from a list of statuses ensuring all default statuses are included or returns an error if any are missing.
6527	ParseRange will return a Range object and an error if the input string is not a valid range definition
6528	Check will determine if a value is within a range and return whether to alert based on if it's inside or outside
6529	CheckInt checks if an integer value is within the Range.
6530	CheckUint64 checks if a uint64 value falls within the Range's bounds.
6531	NewClient initializes a new HTTP client with TLS configuration based on the provided ClientConfig and constructs an API URL.
6532	GetKeyMeta retrieves key metadata from storage using a client's method.
6533	GetKeysInDirMeta retrieves keys metadata from a specified directory path and returns them along with any errors encountered during the process.
6534	getKeyContent fetches key content from a storage service and returns it as a string or an error
6535	GetJobSummariesForProject fetches job summaries for a project and returns them along with any errors encountered
6536	GetJobsForProject retrieves job details for a specified project name from the client, returning a list of jobs and any errors encountered.
6537	GetJob fetches a job detail by ID from a client and returns it or an error.
6538	CreateJob will create a job and return its summary and an error if it fails
6539	CreateOrUpdateJob updates or creates a job and returns its summary and any errors.
6540	DeleteJob sends a delete request to the server for a job with the given ID.
6541	JobSummary extracts essential details from jobImportResult to create a JobSummary object.
6542	GetSystemInfo retrieves system info from client and returns it along with any errors encountered.
6543	DateTime method parses RFC3339 formatted timestamp string and returns the corresponding time.Time value.
6544	GetAllProjects retrieves all project summaries from the client and returns them along with any errors encountered.
6545	GetProject retrieves a project by name from the client and returns it along with any errors encountered.
6546	CreateProject sends a POST request to create a new project and returns the created project and any errors encountered.
6547	DeleteProject will delete a project by name and return an error if it fails
6548	SetProjectConfig updates project configuration and returns an error
6549	NewClient creates a new client instance with username and password.
6550	NewClientbyToken creates a new client using a token.
6551	SetDepth updates the client's depth with the given integer value converted to a string.
6552	ListDatacenters fetches datacenters from the client's URL and returns them along with any errors encountered
6553	CreateDatacenter sends a POST request to create a datacenter and returns the created datacenter and any errors encountered
6554	GetDatacenter fetches datacenter details by URL and returns it along with any errors encountered.
6555	UpdateDataCenter sends a PATCH request to update data center properties and returns the updated data center object and any errors encountered.
6556	DeleteDatacenter sends a DELETE request to remove a datacenter and returns the response headers and an error.
6557	WaitTillProvisioned will wait up to 300 seconds for a request to complete and returns an error if it times out.
6558	ListFirewallRules fetches firewall rules for a given data center, server, and NIC ID, returning the rules and any errors encountered.
6559	GetFirewallRule fetches a firewall rule using dcID, serverID, nicID, and fwID returning the rule or an error
6560	CreateFirewallRule sends a POST request to create a firewall rule and returns the created rule or an error.
6561	UpdateFirewallRule updates firewall rule properties and returns updated rule and error
6562	DeleteFirewallRule sends a DELETE request to remove a firewall rule and returns the response headers and any errors.
6563	ListLoadbalancers fetches load balancers from the client's URL and returns them along with any errors encountered.
6564	GetLoadbalancer fetches a load balancer by ID and returns it along with any errors encountered.
6565	UpdateLoadbalancer updates load balancer properties and returns updated load balancer and error.
6566	DeleteLoadbalancer sends a DELETE request to remove a load balancer and returns the response headers and any errors encountered.
6567	ListBalancedNics retrieves balanced NICs using client's URL and returns them along with any errors encountered.
6568	AssociateNic sends a POST request to associate a NIC and returns the Nic object and any errors encountered
6569	GetBalancedNic fetches a balanced NIC from the client and returns it along with any errors encountered
6570	DeleteBalancedNic will delete a balanced NIC and return the response header and an error if the request fails
6571	ListLans fetches LAN data for a given client and returns it along with any errors encountered during the request.
6572	GetLan will fetch LAN details from the client's API and return the Lan object along with any errors encountered
6573	DeleteLan will delete a LAN and return the HTTP headers and an error if failed
6574	ListNics sends a GET request to retrieve network interfaces and returns them along with any errors encountered
6575	CreateNic sends a POST request to create a network interface and returns the created NIC object and an error.
6576	GetNic fetches Nic details using client's URL and returns the Nic object or an error
6577	UpdateNic sends a PATCH request to update a NIC and returns the updated NIC and an error.
6578	DeleteNic sends a DELETE request to remove a NIC and returns the response header and any errors encountered.
6579	ListSnapshots retrieves snapshots from the client's URL and returns them along with any errors encountered.
6580	GetSnapshot retrieves a snapshot by ID and returns it along with any errors encountered.
6581	DeleteSnapshot sends a delete request to remove a snapshot and returns the response headers and any errors encountered
6582	UpdateSnapshot sends a PATCH request to update a snapshot and returns the updated snapshot or an error
6583	ListIPBlocks will fetch IP blocks from the client's URL and return them along with any errors encountered
6584	ReserveIPBlock sends a POST request to reserve an IP block and returns the reserved block and any errors encountered
6585	GetIPBlock fetches an IP block by ID and returns it along with any errors encountered during the process.
6586	UpdateIPBlock will update an IP block and return the updated block along with any errors encountered
6587	ReleaseIPBlock deletes an IP block and returns the HTTP header and error.
6588	ListVolumes fetches volumes using client's depth and returns them or an error
6589	GetVolume retrieves a volume by its ID and depth returns a Volume object and an error
6590	UpdateVolume sends a PATCH request to update a volume's properties and returns the updated volume or an error.
6591	CreateVolume sends a POST request to create a volume and returns the created volume or an error
6592	DeleteVolume sends a DELETE request to remove a volume and returns the response header and any errors encountered.
6593	CreateSnapshot sends a POST request to create a snapshot and returns the created snapshot or an error
6594	RestoreSnapshot sends a POST request to restore a snapshot and returns the response headers and any errors.
6595	ListServers will fetch servers from a given data center ID and return them along with any errors encountered during the request.
6596	GetServer retrieves a Server object from the client using dcid and srvid parameters and returns it along with any errors encountered.
6597	DeleteServer sends a DELETE request to remove a server and returns the response header and any errors.
6598	ListAttachedCdroms fetches images using client's depth and pretty settings returns images or error
6599	AttachCdrom sends a POST request to attach a CD-ROM and returns the response image or an error
6600	GetAttachedCdrom retrieves an image using a URL and returns it along with any errors encountered.
6601	DetachCdrom sends a DELETE request to detach a CD-ROM and returns the response headers and any errors encountered.
6602	ListAttachedVolumes fetches volumes for a given DCID and SRVID returning a Volumes object and an error
6603	AttachVolume sends a POST request to attach a volume and returns the attached Volume object or an error.
6604	GetAttachedVolume fetches volume details from server and returns Volume object or error.
6605	DetachVolume will delete a volume and return the response header and an error
6606	StartServer sends a POST request to start a server and returns the response headers and any errors encountered.
6607	ListLocations fetches locations from the server and returns them along with any errors encountered
6608	GetRegionalLocations fetches regional locations using a client and returns them or an error.
6609	GetLocation fetches a location using a client's depth and pretty settings, returning the parsed Location object and any errors encountered.
6610	GetContractResources fetches contract resources from the server and returns them along with any errors encountered
6611	ListImages will fetch images from the client's URL and return them along with any errors encountered.
6612	GetImage fetches an image using its ID and returns it along with any errors encountered during the request.
6613	PrintHeaders will print each header key and its first value from the response.
6614	ListGroups retrieves groups from the server and returns them along with any errors encountered.
6615	GetGroup retrieves a group by ID and returns it along with any errors encountered during the process.
6616	CreateGroup sends a POST request to create a group and returns the created group and any errors encountered.
6617	UpdateGroup updates a group and returns the updated group and an error
6618	DeleteGroup sends a DELETE request to remove a group and returns the response headers and any errors encountered.
6619	ListShares retrieves shares for a group ID and returns them along with any errors.
6620	GetShare constructs a URL to fetch share details and returns the parsed response or an error.
6621	AddShare sends a POST request to add a share and returns the response or an error
6622	UpdateShare updates a share object and returns it along with any errors encountered
6623	DeleteShare will send a DELETE request to remove a share and return the response headers and an error
6624	ListGroupUsers fetches users from a group using an API endpoint and returns them along with any errors encountered.
6625	AddUserToGroup adds a user to a group and returns the updated user and any errors
6626	DeleteUserFromGroup removes user from group returns HTTP headers and error
6627	ListUsers will fetch users from the API and return them along with any errors encountered
6628	GetUser fetches user data from API and returns User object and error
6629	CreateUser sends a POST request to create a user and returns the created user and an error
6630	UpdateUser updates user details and returns updated user object or error
6631	DeleteUser sends a DELETE request to remove a user and returns the response headers and any errors encountered
6632	ListResources fetches resources from the server and returns them or an error
6633	GetResourceByType fetches a resource by type and ID, returning it and any errors encountered.
6634	ListResourcesByType fetches resources of a specific type from the API and returns them along with any errors encountered.
6635	ListRequests fetches requests from the server and returns them along with any errors encountered
6636	GetRequest fetches a request by ID and returns it along with any errors encountered during the process.
6637	GetRequestStatus fetches request status from server and returns it along with error
6638	Close method releases mutex and closes file returning any errors
6639	GetSerializableArgument retrieves the original or serialized value from SerializableMeta or SerializableMetaInterface, returning it as an interface{}.
6640	BoolVar sets a boolean flag with a default value and usage message
6641	Bool creates a new boolean flag with the specified name, default value, and usage message.
6642	IntVar sets integer flag p to value with description usage
6643	Int creates a new integer flag with the given name, initial value, and usage.
6644	Int64Var sets an integer flag and associates it with a variable
6645	Int64 returns a pointer to an int64 value from environment flags with given name, default value, and usage description.
6646	UintVar sets a uint flag in the environment with a given name, default value, and usage description.
6647	Uint returns a pointer to a uint flag initialized with the given name, value, and usage.
6648	Uint64Var sets the value of a flag and its usage
6649	Uint64 returns a pointer to a uint64 value from environment flags with given name, default value, and usage.
6650	StringVar sets a string variable in the environment flags with a given name, initial value, and usage description.
6651	String returns a pointer to a string flag
6652	Float64Var sets a float64 variable in the environment flags with a given name, initial value, and usage message.
6653	Float64 sets a default float64 value for a flag
6654	DurationVar sets a duration variable in the environment flags
6655	Duration sets a duration flag and returns its address
6656	Parse environment variables and set them as flags.
6657	WriteStringToFile will write text to a file specified by path and return an error if it fails
6658	ReadFileToString will open a file, read its first line, and return it as a string with any errors encountered during the process.
6659	LineReader will return a channel of strings and an error from reading lines from the input reader.
6660	LineReaderFrom returns a channel reading lines from a file or an error if the file does not exist.
6661	FileExists checks if a file exists at the given path and returns true if it does.
6662	FileExistsInPath checks if a file exists in the system path by looking up its executable path and returns true if found.
6663	GetPathParts returns directory path, file name, and absolute path from a given path, correcting it if necessary.
6664	GetThisPathParts returns directory path, file name, and absolute path from executable file
6665	RandomString generates a random string of specified length using cryptographically secure randomness.
6666	ParseAddress extracts protocol and path from an address or returns an error if invalid.
6667	HomeDir returns the current user's home directory, caching the result for future calls.
6668	IsTCPPortAvailable checks if a TCP port is available by attempting to listen on it and returns true if successful.
6669	RandomTCPPort will return a random TCP port or -1 if none available
6670	HashString computes a hash value for a given key using a specified number of buckets.
6671	Context retrieves session from request metadata and returns response or error.
6672	Token method returns OAuth2 token from session data or an error if parsing fails
6673	NewDaemon initializes a new daemon with default options and sets PostgreSQL connection parameters.
6674	Close method stops server and closes PostgreSQL, debug listener, and tracer closer returning any errors encountered.
6675	NewAccessTokenContext adds an access token to a context and returns it
6676	AccessTokenFromContext extracts an access token from context returning it and whether it exists.
6677	RandomAccessToken generates a random access token using SHA-3 hashing and returns it as a hexadecimal string.
6678	Init configures logger based on environment and options returns logger and error
6679	Load will return a dictionary and an error if the file is not properly formatted
6680	Start initializes a session with given credentials and returns it along with any errors encountered.
6681	Get retrieves a session from storage using an access token, returning a protobuf session or an error if not found or invalid.
6682	List retrieves sessions from storage based on pagination and expiration criteria.
6683	Exists checks if a record exists using an access token and returns a boolean indicating its existence along with any errors encountered.
6684	Abandon will check if session exists and return bool and error based on success or failure
6685	SetValue updates a session's bag with a new key-value pair and returns the updated bag or an error
6686	Delete session from database based on criteria returns affected rows or error
6687	Setup will execute SQL queries to create schema, table, and indexes in the database and return an error if any step fails
6688	TearDown will drop a schema and return an error if it fails
6689	initJaeger initializes Jaeger tracing with given service, node, agent address, and logger, returning a tracer, closer, and error.
6690	Usage prints help message to errorWriter for Japanese Morphological Analyzer
6691	Build will construct a DoubleArray from a list of keywords assigning sequential IDs starting from 1 an error will be returned if no keywords are provided
6692	Read will deserialize a binary stream into a DoubleArray object, returning it along with any errors encountered during the process.
6693	Get retrieves a node from the cluster by key returning the node and a boolean indicating success.
6694	ExternalNodes returns nodes except the listen node
6695	GetOther returns a Node and a boolean indicating if the node's client is not nil after filtering by access token and address.
6696	GoString returns a JSON representation of the Cluster object
6697	Scan decodes Bag from byte slice or returns error for unsupported types
6698	Bag's Value method encodes the bag to a byte slice and returns it or an error
6699	Has checks if key exists in Bag and returns bool
6700	WriteTo method serializes an IndexTable to a Writer, returns the number of bytes written and any errors encountered
6701	ReadIndexTable reads an index table from a reader and returns it along with any errors encountered during the process.
6702	New creates an ActionBar with an Admin and sets up routes for switching mode and inline editing.
6703	RegisterAction adds an action to the ActionBar's global actions list.
6704	`Actions method adds actions to ActionBar and returns it.`
6705	Render method processes actions, sets user context, prepares data, and renders the ActionBar template.
6706	FuncMap returns a map of functions for rendering edit buttons
6707	EditMode checks if the admin context is in edit mode
6708	SwitchMode sets cookie, gets referrer, and redirects based on URL query.
6709	controller.InlineEdit will write the rendered "action_bar/inline_edit" to the context's writer
6710	Error method returns formatted error message
6711	ParseFile opens a file and returns machines, macros, and an error if the file cannot be opened or parsed.
6712	FindMachine searches for a named machine in a file, returning it or a default if not found.
6713	New creates a Kace instance from a map of initialisms and returns it along with any errors encountered during creation.
6714	Camel will convert a string to camel case using the Kace instance's transformation rules.
6715	Pascal will convert a string to Pascal case using the receiver's transformation rules
6716	Snake method converts string to snake case using kace instance
6717	SnakeUpper converts a string to snake_case and returns it.
6718	Kebab converts a string to kebab case using a delimiter.
6719	KebabUpper converts string to kebab case and uppercased
6720	isPathSafe checks if a URL path is safe by parsing it, unescaping it, checking for ".." and matching against a whitelist pattern, returning an error if any condition fails
6721	Start records the request's start time and details.
6722	ParseAuthHeaders extracts authentication credentials from HTTP headers or query parameters, returning them as AuthCreds or an error if invalid.
6723	Tracer sets the tracer for a client and returns an error if it fails
6724	HTTPClient sets client parameter using provided http.Client
6725	BasicAuth sets up basic authentication for a client with given username and password.
6726	BearerAuth sets bearer authentication for a client and returns an error if it fails
6727	CookieJar sets the cookie jar on the client and returns an error if it fails
6728	SanitizerEnabled sets whether sanitization is enabled on a client and returns a ClientParam to apply this setting.
6729	OpenFile opens a file at the given endpoint with optional parameters and returns a ReadSeekCloser or an error if the operation fails.
6730	RoundTrip executes a request using a given function returning a response and any errors encountered.
6731	SetAuthHeader sets the Authorization header if authentication details exist.
6732	FileName extracts filename from Content-Disposition header returns empty if not found or parse error
6733	newBuffersFromFiles creates a slice of fileBuffers from a slice of Files
6734	newFileBuffer creates a buffer that reads from a file and caches the data
6735	rewind updates fileBuffer's Reader to use cache and File.Reader
6736	ConvertResponse processes a response and returns it or wraps any errors encountered.
6737	Set will assign a boolean value to o.Value and mark it as defined with source as "override" an error will be returned if conversion fails
6738	WriteAnswer sets BoolOption's value based on input interface, returns error if type mismatch
6739	StringifyValue determines how BoolOption's String method returns its value or details.
6740	TriggerIncidentKey will return an incident key and an error after triggering with a description and key
6741	TriggerWithDetails will call trigger with description and details returning incidentKey and error
6742	TriggerIncidentKeyWithDetails will call trigger with description, key, and details and return incidentKey and error
6743	Merge combines two structs by copying values from src to dst using reflection.
6744	setSource updates nested structs/maps/arrays/slices with source file information recursively
6745	convertString will convert a string to a specified type and return an error if conversion fails
6746	Do starts a transaction, executes a function, and commits or rolls back based on success.
6747	NewFile creates a new file and returns it as an io.Writer, removing any existing file first.
6748	internalRun will execute requests within a given duration using a semaphore to manage concurrency and return the results
6749	Row's String method returns a formatted string representation of its fields.
6750	Tabulate will convert ResultSet to Row based on Timestamp, Error, Threads, RequestTime, calculating ElapsedTime, TotalRequests, TotalFailures, TotalSuccess, TotalTimeouts, and AvgRequestTime.
6751	AmazonRequest will send a GET request to www.amazon.co.uk and return an error if the request fails or the status code is not 200
6752	WriteTabularData formats tabular data from a result set based on a given interval and writes it to a writer.
6753	Reduce will sort the results and distribute them into buckets based on the given interval, returning a slice of ResultSets
6754	NewSemaphore creates a semaphore with a given capacity and ramp-up duration. If ramp-up is less than 1, it initializes the semaphore with the specified capacity; otherwise, it starts a goroutine to manage the semaphore's capacity over time.
6755	Release decrements the semaphore count, ensuring no resize occurs during operation.
6756	Resize adjusts semaphore capacity safely copying values.
6757	AddOutput appends an output container to Bench's outputs list
6758	RunBenchmarks sets request, runs benchmarks, processes results.
6759	parseBool will return a boolean and an error if the input byte slice is not of correct length or contains invalid boolean values
6760	checkInteger validates ASN.1 integers ensuring they are minimally encoded
6761	parseInt64 converts byte slice to int64 and handles errors for invalid integers or overflow
6762	parseInt32 converts byte slice to int32, validating integer size and returning error if out of range
6763	parseBigInt will return a BigInt representation of bytes and an error if parsing fails
6764	parseBitString converts ASN.1 bit strings to Go's native representation, handling errors for invalid padding and length.
6765	parseObjectIdentifier extracts ASN.1 object identifiers from bytes returning parsed integers and an error if parsing fails
6766	parseBase128Int will return a base 128 integer the amount of bytes read and an error if the integer is too large
6767	parseGeneralizedTime will return a parsed time and an error if the input time string does not match the specified format
6768	parsePrintableString converts bytes to string if all characters are printable otherwise returns error
6769	isPrintable checks if a byte is printable
6770	parseSequenceOf will return a slice of values and an error if the sequence is not properly formatted
6771	invalidLength checks if the specified offset and length exceed the bounds of a slice
6772	setDefaultValue sets a default value to a variable if it's optional and has a default value
6773	UnmarshalWithParams will unmarshal JSON data into a Go struct based on provided parameters returning the remaining bytes and an error if parsing fails
6774	parseFieldParameters processes a comma-separated string to set various parameters in fieldParameters struct.
6775	getUniversalType will return a tag number, whether it's compound, and a boolean indicating success based on the input type.
6776	DecodeString decodes a base32 encoded string and returns the decoded bytes or an error if the input is invalid
6777	MailNotifier retrieves a mail notifier model from MongoDB or returns an error if not found.
6778	SaveMailNotifier saves a mail notifier to MongoDB and returns an error if the operation fails
6779	RegisterProvider will register a new provider with a given name and factory an error will be logged if the provider is already registered
6780	InitDb initializes user table and logs error if failed
6781	Until repeatedly calls f every period until stopCh is closed.
6782	logPanic logs the recovered panic and its call stack
6783	MongoDb's User method retrieves a user by username from the database, returning the user and an error if the user does not exist.
6784	Users method retrieves users based on filter criteria returns list of users and error if any
6785	SaveUser will save or update a user in MongoDB and return an error if it fails
6786	DeleteUser removes a user by username from MongoDB and returns an error if unsuccessful.
6787	LoadCACertFile will load a CA certificate file and return a CertPool or an error if it fails
6788	NewAuth creates an Auth instance with optional options and sets the authentication error handler.
6789	ValidateRequest checks TLS cert chain and ensures the first peer cert matches the first verified chain leaf.
6790	Process validates HTTP request, checks OU and CN, handles errors.
6791	ValidateCN checks if the verified cert's CN matches any allowed CNs, returning an error if it doesn't match any.
6792	ValidateOU checks if the verified cert's OU matches any allowed OUs and returns an error if it doesn't
6793	KeyLen calculates the bit length of a uint64 integer.
6794	DefaultConfig initializes a Vault client with default settings and returns a new configuration object.
6795	New will create a cert signer instance and validate its vault client configuration returning an error if invalid
6796	New will create a VaultFactory instance from a given configuration and validate required fields, returning an error if any field is missing.
6797	DefaultServiceConfig initializes a service config with a default vault client pointing to localhost:8200.
6798	NewService initializes a service with a Vault client and returns it or an error if the client is missing.
6799	Delete will unmount a PKI backend if it exists using a Vault client and return an error if unsuccessful
6800	IsNoVaultHandlerDefined checks if the error indicates no vault handler is defined
6801	New will initialize a new Service instance with VaultClient and PKIMountpoint configurations, returning an error if any required fields are missing
6802	Create method saves role configuration to Vault with parameters and returns error if failed
6803	CreateJob returns a Config struct with default values.
6804	Run will execute worker after ensuring lock is acquired, panicking on any errors encountered
6805	newWatcher initializes a watcher with directory notification and initial paths, returning the watcher instance.
6806	Start initializes a notification channel for watcher. If already initialized, returns it. Starts watching if auto-watch is enabled.
6807	Stop will close the notify\_chan and add\_chan channels of the Watcher instance.
6808	Active checks if Watcher has any paths defined
6809	Watcher.Add will add paths to monitor based on auto_watch setting and notification channel.
6810	watcher watches paths for changes and sends notifications through a channel
6811	Watching method returns a list of paths being watched
6812	State method returns the notification state of watched paths
6813	Store will set the error in the request's context if it is configured and non-nil.
6814	Get retrieves an error from the request context and returns it
6815	Catch will wrap an HTTP handler to catch errors and pass them to a custom handler
6816	Try wraps a handler to store errors in context
6817	Recover middleware catches panics and stores them with their stack trace.
6818	main sends HTTP GET request to fetch streaming data logs it and counts the chunks until EOF
6819	SyncHandler returns an HTTP handler that handles synchronization for a given struct.
6820	connect handles HTTP requests, selects transport based on headers, performs non-blocking connect, sends initial ping, manages ping loop, and waits for connection closure.
6821	send method sends an update using the connection's transport and ensures thread safety with a mutex.
6822	NumConnections returns the number of connections in the state.
6823	Push attempts to set state to 'pushing' and starts a goroutine if successful; otherwise, it marks as 'queued' and returns false.
6824	gopush updates JSON state, calculates changes, sends notifications to subscribers, and handles queue throttling.
6825	NewOutForward creates OutForward instance with connected loggers and sends empty logs.
6826	Run will process input, manage tail files, and handle events or errors accordingly
6827	New initializes Fluent with default values if not provided and returns it along with any connection errors.
6828	Fluent's Close method will close the connection and unlock the mutex if it exists, returning any errors encountered.
6829	IsReconnecting checks if Fluent instance is reconnecting.
6830	connect method resolves server address, handles both IPv4 and IPv6 formats, attempts TCP connection, records errors, and logs connection details.
6831	Notification creates a notifier with title, message, timeout, and empty sound path.
6832	NullNotification creates a notifier with default values and returns it
6833	New will create a new Identity instance using options to configure it
6834	Issue will create a new identity using options and set the issuer to the current identity
6835	Subject sets the subject name in a configuration option
6836	PrivateKey sets a private key on a configuration object.
6837	NotBefore sets a not-before time on a configuration option.
6838	NotAfter sets the notAfter field of a configuration object to the given time value.
6839	IssuingCertificateURL appends a list of strings to the issuing certificate URL field in the configuration and returns an option function.
6840	OCSPServer adds one or more OCSP servers to configuration.
6841	New initializes a Telegram bot API client with the given API key, retrieves the bot's user information, removes any existing webhook, and starts an update loop.
6842	NewWithWebhook initializes a Telegram bot API, sets up a webhook, and returns the bot instance, update handler, and any errors encountered.
6843	TelegramBotAPI.Close will close the connection if it's not already closed and wait for all goroutines to finish
6844	GetMe retrieves user information from Telegram API returning a UserResponse or an error
6845	RunBot starts a Telegram bot using the provided API key, handles updates, and shuts down gracefully on SIGINT or SIGTERM.
6846	RunBotOnWebhook starts a bot on a webhook server handling updates with provided bot function.
6847	NewOutgoingMessage constructs an outgoing message with default parse mode.
6848	NewOutgoingLocation creates a new location message for a recipient with specified latitude and longitude.
6849	NewOutgoingVenue creates a new outgoing venue message for Telegram.
6850	NewOutgoingVideo creates a new video message object for Telegram bot API
6851	NewOutgoingVideoResend creates a new OutgoingVideo message for resending a video to a specified recipient using the TelegramBotAPI.
6852	NewOutgoingPhoto constructs a new OutgoingPhoto message with specified parameters.
6853	NewOutgoingPhotoResend creates a new outgoing photo message with the given recipient and file ID
6854	NewOutgoingSticker creates a new outgoing sticker message with the given recipient, file name, and reader.
6855	NewOutgoingStickerResend creates and returns a new OutgoingSticker object for sending a sticker to a recipient using a given file ID.
6856	NewOutgoingVoice creates a new outgoing voice message with the given recipient, file name, and reader.
6857	NewOutgoingVoiceResend creates a new OutgoingVoice message with the given recipient and file ID.
6858	NewOutgoingAudio creates an OutgoingAudio instance with TelegramBotAPI, Recipient, fileName, and reader.
6859	NewOutgoingAudioResend creates an OutgoingAudio message with the given recipient and file ID.
6860	NewOutgoingDocument creates an OutgoingDocument instance with specified parameters.
6861	NewOutgoingDocumentResend creates a new document message to be sent
6862	NewOutgoingForward creates a new OutgoingForward object for Telegram bot API.
6863	NewOutgoingChatAction creates a new OutgoingChatAction instance with the given recipient and chat action.
6864	NewOutgoingUserProfilePhotosRequest creates a new outgoing user profile photos request with the given user ID.
6865	NewOutgoingKickChatMember creates a new outgoing kick chat member object
6866	NewOutgoingUnbanChatMember creates a new outgoing unban chat member request
6867	NewOutgoingCallbackQueryResponse creates a new OutgoingCallbackQueryResponse instance for handling callback queries in Telegram bot API.
6868	NewInlineQueryAnswer creates a new inline query answer with the given API, query ID, and results.
6869	Type method returns message type based on non-nil field
6870	Type method returns the type of update based on the non-nil field
6871	Recipient's MarshalJSON method returns JSON representation of channel or chat ID based on type.
6872	querystring method constructs a URL parameter map from outgoingSetWebhook fields
6873	getBaseQueryString constructs a query string based on recipient type and ID
6874	getBaseQueryString constructs a URL query string from outgoing message parameters.
6875	querystring method constructs a URL query string from OutgoingAudio fields.
6876	querystring method returns a querystring with base query parameters and optional caption
6877	querystring constructs a URL query string from the OutgoingUserProfilePhotosRequest fields
6878	querystring constructs a URL query string from outgoing video properties
6879	querystring method constructs a URL query string from outgoing voice data, including duration if specified.
6880	NewInlineQueryResultArticle creates an article query result with ID, title, and text.
6881	NewInlineQueryResultPhoto creates an InlineQueryResultPhoto object with the given parameters
6882	NewInlineQueryResultGif creates a new InlineQueryResultGif object with the specified parameters.
6883	NewInlineQueryResultMpeg4Gif creates a new Mpeg4Gif inline query result with specified ID, MPEG4 URL, and thumbnail URL.
6884	NewInlineQueryResultVideo constructs a new InlineQueryResultVideo object with specified parameters.
6885	Send sends a request to fetch user profile photos and returns the response or an error
6886	Send chat action using API and validate response.
6887	Send sends an inline query answer and returns an error if unsuccessful
6888	Send method sends a chat member kick request and checks the response for errors.
6889	Send sends an unban chat member request and returns an error if the request fails or the response is invalid
6890	Send sends a callback query response and returns an error if it fails
6891	NewAPIClient initializes a new APIClient with default HTTPClient if none provided sets up configuration and services returns the client
6892	BeforeInsert sets CreatedAt and UpdatedAt to current time and returns nil
6893	ColumnName will return a quoted column name optionally prefixed with table name using dialect's quoting mechanism
6894	New creates a new database connection and returns it along with any errors encountered
6895	From will return a new From instance for the given struct type or panic if the argument is not a struct
6896	`Where method on DB struct returns a Condition object with applied WHERE clause using provided condition and arguments.`
6897	OrderBy method on DB struct returns a Condition instance for ordering table by specified column and order
6898	Limit will set the limit for the query and return the condition object
6899	Offset method sets the offset for the database query and returns a Condition object
6900	JoinCondition will return a join condition object for the given table on the database
6901	Count will return a Function object representing the COUNT SQL function with the specified column argument, or panic if more than one column is provided.
6902	Update will modify a database record and return the count of affected rows along with any errors encountered during the process
6903	Delete method deletes objects from database, returns affected rows and error if any.
6904	Begin starts a transaction on the database and locks the mutex.
6905	Commit transaction on DB instance, lock mutex, check if tx exists, commit tx, reset tx, return error
6906	Quote will return a quoted string using the database dialect's quoting method.
6907	SetLogOutput sets logger to specified writer or default logger
6908	selectToSlice fetches data from SQL rows and converts it to a slice of structs, handling pointers and nested structures.
6909	selectToValue fetches data from rows into a value of type t, handling pointer indirection, and returns the result or an error
6910	fieldIndexByName will return the index(es) of a field by its name recursively within nested structs, or nil if not found
6911	columns method returns a comma-separated string of column names based on input type and table name
6912	tagsFromField extracts options from a struct field's tag, skipping if marked to skip.
6913	hasSkipTag checks if a struct field has a skip tag and returns true if it does
6914	hasPKTag checks if a field has a 'pk' tag in its tags.
6915	isAutoIncrementable checks if a struct field type is auto-incrementable
6916	collectFieldIndexes will recursively collect field indexes based on type and skip conditions returning all valid path indexes
6917	findPKIndex will recursively search for primary key tags in struct fields and return their indices.
6918	sizeFromTag extracts size from tag or returns default value
6919	columnFromTag retrieves a column name from a struct field's tag or converts the field name to snake case
6920	defaultFromTag extracts a default value from a struct tag and formats it according to the database dialect.
6921	appendQueryByCondOrExpr will add a WHERE clause to the condition and return the updated condition
6922	And method appends AND condition to query
6923	appendQueryByCondOrExpr appends OR condition to query and returns updated Condition
6924	Like appends a LIKE query to Condition and returns it
6925	Between will append a BETWEEN query to Condition and return itself
6926	OrderBy appends sorting conditions to a query and returns the modified Condition object
6927	Limit sets a limit on the condition and returns the updated condition
6928	Offset will modify the condition's query by adding an offset and return the updated condition
6929	SetFormat sets the logger's format using a template and returns an error if parsing fails
6930	Print logs with start time, duration, and query using template logger
6931	nullLogger's Print method returns nil without performing any action.
6932	Quote will return a MySQL quoted string by escaping backticks
6933	SQLType determines the PostgreSQL data type based on the input value and whether it's nullable.
6934	New creates an archive from a file based on its extension.
6935	Disconnect method will disconnect the host handle and set it to invalid if it's not already canceled or invalid
6936	nextNetworkAdapterID will find the next available network adapter ID from VMX configuration
6937	totalNetworkAdapters calculates the highest numbered ethernet adapter from a VMX configuration map
6938	RemoveAllNetworkAdapters removes all network adapters from VMX file and returns an error if any step fails
6939	RemoveNetworkAdapter removes a network adapter from the VM's vmx file and returns an error if the operation fails or the VM is running.
6940	NetworkAdapters will return a list of network adapters and an error if any step fails
6941	newArchive creates an Archive instance from a given path and optional password, parsing the 7z list output.
6942	GetFileReader searches for a file in an archive and returns its reader or an error if not found
6943	ExtractToWriter extracts a file from an archive to a writer, returning an error if the process fails
6944	ExtractToFile creates a file at dstPath and extracts the named archive entry to it.
6945	SharedFoldersParentDir retrieves the shared folders parent directory path from a guest and returns it as a string along with any encountered errors.
6946	Name returns the snapshot's display name or an error if failed
6947	Description will return the snapshot description and an error if it fails to retrieve
6948	cleanupSnapshot releases a VIX handle if it's valid and sets it to invalid
6949	BusTypeFromID returns a BusType based on the ID prefix, or vmx.Unknown if none match.
6950	Read will load VMX file data unmarshal it into a VirtualMachine model and update vmxfile's model field returning any errors encountered
6951	Write VMXFile to disk marshalling model data and handling errors
6952	NewVirtualMachine initializes a new VM instance from a VMX file and returns it along with any errors encountered during initialization.
6953	Vcpus retrieves VM vcpus count and returns it along with an error if any.
6954	VmxPath retrieves VMX file path from handle, returns string or error.
6955	MemorySize returns VM's memory size and error if retrieval fails
6956	ReadOnly checks VM's read-only status and returns a bool and error.
6957	InVMTeam checks VM's team status and returns a bool and error.
6958	PowerState method retrieves VM power state or returns error
6959	ToolsState fetches the VM's tools state and returns it along with any errors encountered.
6960	IsRunning checks if VM is running and returns bool and error
6961	GuestOS retrieves VM's guest OS name and returns it or an error.
6962	cleanupVM releases the VM handle if it's valid
6963	updateVMX updates VMX settings, checks if VM is running, reads/writes VMX file, handles errors
6964	SetMemorySize adjusts VM's memory size ensuring divisibility by 4 and updates VMX model accordingly.
6965	SetNumberVcpus sets the number of virtual CPUs ensuring it's at least 1 and updates the VMX model accordingly.
6966	SetDisplayName updates VM's display name and returns error if update fails
6967	SetAnnotation updates VMX model's annotation field with given text.
6968	SetVirtualHwVersion updates VM's virtual hardware version and compatibility model.
6969	Error will return a formatted string containing error text, code, and operation
6970	Errorf formats an error message and wraps it.
6971	traceableError's Error method returns a string combining the original error message and stack trace frames.
6972	stackFrame's string method returns a formatted string representation of the stack frame.
6973	newStackFrame creates a stack frame from program counter details.
6974	captureStack captures stack frames skipping some and limiting depth returning them or an error
6975	parseFuncName extracts package path and function signature from input function name using regex
6976	Stack will log an error along with its stack trace
6977	StackWithCaller logs error with stack trace and caller package info if available
6978	responseWriterBinder's Write method executes before functions then writes to the underlying writer.
6979	ResponseStatus returns the HTTP status code from the response writer.
6980	httpResponseStruct will return the http.response struct from the given value or its nested ResponseWriter field
6981	SetDetectedContentType sets the Content-Type header if it's not already set and returns the detected content type
6982	New method initializes ServerError with HTTP status and message.
6983	New method initializes DBError instance with HTTPCode, Errno, Message, and DBName fields.
6984	New method initializes ValidationError with specified message, sets HTTPCode to BadRequest and Errno to 0, then returns the modified instance.
6985	NotFoundError's New method initializes an instance with a message, sets HTTPCode to 404, Errno to 0, and returns it.
6986	StrLength validates string length and returns it or panics if invalid
6987	StrLenIn checks if a string's length matches specified values and returns it or panics with validation errors.
6988	StrIn checks if a string field matches any allowed values and returns it or panics with an error if not.
6989	GetEmail validates email from struct field and returns it or panics on invalid format.
6990	MostSpecificType returns the most specific type from a list or an error if none are provided.
6991	FullTypeHierarchy will generate a hierarchy of types from a given highest-level type to its root parent type returning the URIs of all types in the hierarchy
6992	SortTypes sorts types alphabetically and returns them or an error if not hierarchical
6993	redisStore's Delete method removes a key from Values map and refreshes the store, returning any error encountered
6994	Set method updates Redis store with key-value pairs and returns the updated store along with any errors encountered.
6995	refresh updates Redis store values and expiration time for a session ID returns error if operation fails
6996	Get retrieves a Redis store by session ID and returns it along with any errors encountered during retrieval.
6997	redisProvider.Destroy removes a session from Redis and returns any errors encountered.
6998	UpExpire sets expiration time for a session ID in Redis and returns an error if failed.
6999	Use appends a router handler to the handlers stack
7000	ServeHTTP processes HTTP requests, sets response headers, recovers from panics, calls handler functions, and manages context pool.
7001	Use adds middleware to the router group and returns the router object
7002	Group will return a new RouterGroup with combined handlers and calculated absolute path
7003	Run initializes server settings, parses command-line flags, sets up routing, starts a graceful HTTP server, and logs errors or shutdown messages.
7004	create initializes a new Engine instance with default settings and returns it
7005	Redirect will send an HTTP redirect response to the client with the specified URL and status code
7006	Ok method in Context struct sets written flag logs warning if already written marshals response and sends OK status
7007	Fail handles errors by logging, setting response status, and writing JSON error response.
7008	ResStatus sets response status and returns written bytes or error if already written
7009	Next method in Context increments index and calls next handler if response isn't written and more handlers exist.
7010	GetSession retrieves the session from context data if it exists and implements IStore interface.
7011	getBodyJSON reads request body JSON or form data and parses it into a map.
7012	SetSession sets session data with a key and values, generates a SID and token, stores them, and updates cookies accordingly.
7013	FreshSession updates session expiration and returns any errors encountered.
7014	DeleteSession removes session data, destroys it, and clears the cookie.
7015	contextWriter's Write method marks context as written and returns the result of ResponseWriter's Write method.
7016	WriteHeader sets written flag and calls ResponseWriter's WriteHeader method
7017	New creates a new client instance with a PEM path and optional configuration functions returning the client or an error
7018	setAllowLargeResults updates client settings for large results temp table name and result flattening returns nil
7019	connect will authenticate and initialize a BigQuery service using JWT and return it along with any errors encountered
7020	InsertRow inserts a row into BigQuery and returns an error if it fails.
7021	AsyncQuery sends a paginated query to the server asynchronously.
7022	Query sends a dataset/project/query to a server and returns results and column names or an error.
7023	stdPagedQuery executes a BigQuery query, processes results in pages, and returns the data along with headers and any errors encountered.
7024	largeDataPagedQuery executes a BigQuery query, handles pagination, and returns results or errors.
7025	pagedQuery connects to a service, handles large results, and returns paginated data or an error.
7026	pageOverJob fetches query results in pages, handling pagination and sending rows to a channel.
7027	Count will execute a query to count rows in a specified table and return the result as an integer
7028	work will process arguments to fetch URLs recursively up to a specified depth and return crawl results
7029	subworker runs a job and handles panics by logging them and setting the result and error accordingly
7030	worker manages jobs in a loop, updates Worker_id, processes jobs, and handles termination.
7031	supervisor manages job flow in Pool: handling new jobs, sending to workers, completing jobs, and providing stats until stopped.
7032	Run starts a worker pool and supervisor if not already started
7033	Add function adds a job to the pool and waits until it's added.
7034	Wait will block until it can acquire a worker from the pool.
7035	Results will return all completed jobs and reset the job completion list
7036	WaitForJob waits for a job to complete from a pool and returns it or nil if no more results are available.
7037	Status method returns pool's stats or empty stats if supervisor isn't started
7038	WrapHTTPHandlerFunc converts an HTTP handler to a custom handler.
7039	WebSocketHandlerFunc converts a WebSocket handler to an HTTP handler
7040	StaticFile returns a static file object with content type set based on filename
7041	PreloadFile reads a file and returns its content and headers, setting the content type based on the filename extension.
7042	InitHtmlTemplates parses HTML templates based on a pattern and returns an error if parsing fails.
7043	InitTextTemplates parses a glob pattern to initialize text templates and returns an error if parsing fails
7044	Html creates a new template with specified content type and character set returns it or panics if templates are not initialized
7045	Text creates a new template with specified content type and character set
7046	InitWatcher initializes a watcher for file changes matching a pattern and invokes callbacks for events or errors.
7047	CloseWatcher sends close signals to all watchers and then closes the watcher.
7048	Find searches for a path and returns URL values, handler func, and view or nil if not found.
7049	Add method adds a new route to Routers with associated handler and view, ensuring thread safety.
7050	NewRouters initializes and returns a new Routers instance with a map and a linked list.
7051	NewServerMux creates a new ServerMux instance with default settings.
7052	err handles errors using ErrorHandle if set
7053	HandleFunc adds a router and handler to the server mux
7054	handleError logs errors and sets response status and data based on error type
7055	Redirect updates HTTP response status and data with given code and URL
7056	InitPProf sets up pprof endpoints on the server mux with optional custom prefix.
7057	StartSession initializes a session using a factory function and returns an error.
7058	combinations will generate all possible combinations of a given size from a list and send them through a channel
7059	repeated_combinations generates all combinations of selecting `select_num` elements from `list` using goroutines and channels, buffering up to `buf` results.
7060	permutations generates all possible permutations of a given list with a specified number of elements using a channel buffer size
7061	repeated_permutations generates all permutations of a given list with a specified number of selections using goroutines and channels
7062	gformat processes a format string and replaces placeholders with values from a map, returning the new format string and parameters.
7063	Errorm formats a string with arguments and returns an error.
7064	Fprintm formats and prints to writer using a map of arguments.
7065	Printm formats a string with a map of arguments using gformat and prints it to stdout.
7066	Sprintm formats a string using a template and a map of arguments then returns the result
7067	Validate checks password against requirements returning validity and error message
7068	MakeRequirements calculates password strength requirements based on total length and character types.
7069	sanityCheck verifies password requirements and returns validity and error message
7070	password will generate a garbled sequence based on strength requirements and return it along with any errors
7071	NewPassword generates a password based on given requirements or defaults to Medium if none provided, returns error if requirements fail validation.
7072	NewPasswords generates n random passwords based on given requirements or defaults to Medium if none provided, returning them along with any validation errors.
7073	addNums appends random numbers to a string until it reaches the desired length
7074	punctuate will add a specified number of randomly chosen punctuation marks to a given string, alternating between appending and prepending
7075	deprecated_init initializes Stdin based on input parameters or stdin mode
7076	ParamSet.Param updates parameter value by name
7077	ParamSet's Parse method decodes JSON data from its reader into a map, then unmarshals specific fields based on a params map, returning an error if any step fails.
7078	Unmarshal will decode JSON from reader into given variable and return error if decoding fails
7079	GetDefaultHTTPClient creates and returns an HTTP client with the specified timeout.
7080	DeviceInfo retrieves device details using API endpoint, returns device info, error response, and any other error encountered.
7081	DevicePresence sends a POST request to check device presence and returns response or error.
7082	NotificationStatus fetches notification status for a given push ID and returns the status, error response, and any errors encountered.
7083	DeleteNotification deletes a notification and returns success/error objects along with any errors encountered.
7084	NotifyDevice sends a notification to a device and returns the response and any errors encountered.
7085	Assert checks if a condition is true, logs error details if false, and fails the test.
7086	CreateFile creates a new file with specified filename and size, writes a buffer to it, and returns an error if any step fails
7087	AddError appends an error message to FormErrors instance.
7088	AddFieldError adds an error to the specified field in FormErrors.
7089	HasErrors checks if there are any errors or field errors in the form.
7090	NewError creates a new FormErrors instance with the given error message.
7091	NewFieldError creates a new FormErrors instance and adds a field error
7092	ChainHandlers will apply a list of middleware functions to an HTTP handler in reverse order and return the final handler
7093	FinalHandler wraps an HTTP handler and returns it unchanged.
7094	MD5Hasher.Hash will return a truncated hexadecimal string representation of the input reader's content or an error if the content cannot be read
7095	IsHash checks if a given string is a valid MD5 hash based on its length and characters.
7096	WithBaseDir sets the file find function to join paths with a given directory.
7097	WithFileFindFunc sets a file finding function in options
7098	WithTemplateFromFiles sets file mapping for a template option
7099	WithTemplatesFromFiles will set template files in options and return an option function
7100	WithTemplateFromStrings sets template strings for a given name and returns an Option.
7101	WithTemplatesFromStrings will set templates from strings in options
7102	WithFunction associates a function with a name and returns an option to modify options.
7103	WithFunctions adds functions to a template's FuncMap and returns an Option.
7104	WithDelims sets opening and closing delimiters for options.
7105	New initializes templates with options and returns them along with any errors encountered.
7106	RespondWithStatus will render a template with data and write it to w with the specified status and content type.
7107	RespondTemplate calls RespondTemplateWithStatus with a default status code of 0
7108	Respond sends a response using the template and data with a status code of 0.
7109	RenderTemplate will execute a template and return its rendered string or an error if the template is unknown or execution fails.
7110	New will create a new server instance with the given handler and options
7111	ServeUDP sets server address and serves connection.
7112	Shutdown method closes the server and returns any errors encountered
7113	QuicHeadersHandler wraps HTTP handler to set QUIC headers before serving request
7114	GetRequestIPs extracts IP addresses from HTTP request headers and returns them as a comma-separated string.
7115	DomainRedirectHandler will redirect requests to a specified domain using HTTP or HTTPS based on conditions and headers.
7116	New initializes Servers with default values and applies options.
7117	Add method to Servers struct adds a new server with the given name, address, and srv Server instance.
7118	TCPAddr retrieves a server's TCP address by its name.
7119	UDPAddr returns the UDP address of a server by name, locking the servers mutex during the search.
7120	Close will wait for all servers to finish closing gracefully
7121	Shutdown servers concurrently, log errors, wait for completion.
7122	TLSListener's Accept method returns a net.Conn and error after handling TLS connection setup.
7123	NewStaticFilesHandler returns an HTTP handler to serve static files from a filesystem under a specified prefix, delegating unmatched requests to another handler.
7124	ServeHTTP handles HTTP requests, authenticates them, processes post-auth logic, and serves responses based on authentication status.
7125	MarshalJSON will convert Options to JSON byte array and error if conversion fails
7126	UnmarshalJSON will convert JSON data to Options struct fields and return an error if parsing fails
7127	MarshalYAML converts Options to YAML-compatible interface and error
7128	UnmarshalYAML will parse YAML data into options and set the corresponding fields in the Options struct.
7129	NewHandler wraps an HTTP handler to log requests and responses using a specified logger.
7130	WithPanicResponse sets panic response body and content type for handler
7131	WithPanicResponseHandler sets the panic response handler for an HTTP handler.
7132	New will create a new Handler with the given http.Handler and apply any provided options.
7133	ServeHTTP handles HTTP requests, recovering from panics and logging details.
7134	NewContextFunc returns a function that retrieves values from a map based on keys, returning nil if the key does not exist
7135	NewMapErrorRegistry creates a new MapErrorRegistry instance with provided or empty error and handler maps.
7136	AddError to MapErrorRegistry checks if error or handler already registered and adds new error if not, returns error if already registered
7137	AddMessageError will add a new error message to the registry and return it along with any errors encountered
7138	MustAddError will add an error to the registry or panic if it fails
7139	MustAddMessageError adds a message error to registry or panics on failure.
7140	AddHandler registers an error handler for a given error code returns an error if the handler or code already exists
7141	MustAddHandler will add a handler to the registry or panic if there's an error
7142	Handler will return a handler function based on the given code from the registry.
7143	New creates a new Client instance with default values.
7144	Client's Request forwards to RequestContext with default context.
7145	JSONContext sends a JSON request and unmarshals the response to a struct.
7146	StreamContext sends a request and returns the response body and content type or an error.
7147	Stream sends HTTP request using client and returns response data content type and error.
7148	JSONUnmarshal will unmarshal JSON data into a Go value and return an error if there's a syntax or type mismatch, including line and column information.
7149	ServeTCP starts a TCP server using the provided listener, optionally enabling TLS and keep-alive, then serves HTTP requests until closed gracefully.
7150	ServeTCP will start serving TCP connections on the given listener and return any errors encountered
7151	Shutdown will stop the server gracefully and return an error if any occurs
7152	HandleMethods processes HTTP requests using method handlers or returns allowed methods and an error response for unsupported methods.
7153	NewSetHeadersHandler returns a handler that sets headers before calling the original handler
7154	New will create and return a new Server instance with the given root directory, directory path, and options. If no options are provided, it will use default options.
7155	HashedPath computes a hashed path or returns the original path if hashing fails
7156	New creates a new Service instance with default logger and applies optional configurations, setting a memory store if none provided.
7157	HTMLHandler returns an HTTP handler that checks maintenance status before serving requests
7158	Service's Status returns its store's status as a boolean and error.
7159	StatusHandler retrieves maintenance status logs error or sends internal server error response
7160	OnHandler processes HTTP requests, logs maintenance status changes, and returns appropriate JSON responses.
7161	OffHandler logs errors and toggles maintenance mode, responding accordingly.
7162	`MarshalJSON converts PostIRCMessageRequest to JSON format.`
7163	MarshalJSON method converts PostArtifactRequest to JSON format
7164	`MarshalJSON will convert a PostArtifactResponse object to JSON format and return the byte array and any errors encountered during the process.`
7165	`MarshalJSON will serialize HookChangedMessage to JSON and return the byte slice and error if serialization fails`
7166	`MarshalJSON will serialize TriggerHookRequest to JSON`
7167	TriggerHookResponse's MarshalJSON method returns JSON byte array and error if marshalling fails
7168	UnmarshalJSON appends JSON data to TriggerHookResponse and returns an error if the response is nil
7169	`MarshalJSON will convert LaunchInfo to JSON format and return the byte array and error if any.`
7170	`MarshalJSON converts Var to JSON using the underlying json.RawMessage type.`
7171	Var1's MarshalJSON method returns JSON-encoded data or an error if encoding fails.
7172	`MarshalJSON will convert Var3 to JSON format and return the byte array along with any errors encountered during conversion.`
7173	Time.MarshalJSON will convert a Time object to a JSON-formatted byte slice and return an error if the year is out of the valid range.
7174	UnmarshalJSON parses JSON data into a Time object handling fractional seconds implicitly.
7175	Write method for ReadWriteSeeker to write data to buffer and update position.
7176	`Seek` updates `ReadWriteSeeker` position based on offset and whence, returning new position or error.
7177	Read will read from a buffer and return the number of bytes read and an error if EOF is reached
7178	`MarshalJSON converts LaunchSpecsResponse to JSON bytes.`
7179	RegionLaunchSpec's MarshalJSON method returns JSON representation or error
7180	GenerateCode processes API definitions, generates Go code, and saves it to specified directories, handling errors and formatting source files accordingly.
7181	postPopulate updates APIEntry's URLs based on Input/Output values
7182	CreateTemporaryCredentials generates temporary credentials from permanent ones with specified duration and scopes.
7183	setURL constructs a full URL using a client's base URL, route, and query parameters, returning the parsed URL or an error.
7184	SignRequest sets the Authorization header using Hawk credentials and returns an error if the process fails
7185	APICall sends a request with a payload, method, route, and query parameters, returning the response and a CallSummary or an error.
7186	SignedURL generates a signed URL with the given route, query parameters, and duration using the client's credentials.
7187	HawkSignatureAuthenticationResponse's MarshalJSON method returns JSON byte array and error if marshaling fails
7188	bmw256 will hash input data using the BMW256 algorithm and return the 32-byte hash result
7189	NewCubeHash initializes a CubeHash struct with predefined values from iv array.
7190	cubehash256 will hash data using CubeHash algorithm and return a 256-bit hash value
7191	Sum will compute the hash of input data using multiple algorithms and return the final result
7192	squeeze processes state to generate output using Blake2b algorithm.
7193	reducedSqueezeRow0 squeezes state into rowOut using reduced-round Blake2b transformation
7194	reducedDuplexRow1 updates state using input and outputs result to rowOut
7195	NewReaderByteCodeLoader initializes a new ReaderByteCodeLoader instance with default flags and provided parser and compiler.
7196	LoadReader will parse and compile reader data returning bytecode and handling errors.
7197	NewV3 creates a UUID version 3 using the given namespace and name.
7198	txLiteral updates state's argument with current operation's arg and advances state
7199	txFetchSymbol retrieves a symbol from state based on current operation's argument and advances the state
7200	txMarkRaw converts st.sa to raw string if it's not already and advances st
7201	txUnmarkRaw converts st.sa to a string if it's a raw string type and advances st
7202	txPrint handles printing arguments safely, escaping HTML when necessary, and advancing state.
7203	txPrintRaw processes a state object, appending a string representation of its argument to the output or warning if the argument is nil.
7204	NewLoopVar creates a new LoopVar instance with specified index and array values.
7205	txMakeArray will create an array from stack elements and store it in state variable sa an error will be raised if start index is greater than or equal to end index
7206	txFunCallOmni will execute a function or macro based on the type of variable in the state an error will be returned if the variable is neither a function nor a macro
7207	DumpAST toggles AST dumping based on boolean input
7208	DumpByteCode toggles the byte code dump flag based on the input boolean value
7209	Optimize bytecode by replacing print operations with constants and noops.
7210	NewFuncDepot creates a new FuncDepot instance with the given namespace and initializes its method map.
7211	Get retrieves a function from the FuncDepot by key and returns its reflect.Value and existence status.
7212	Set assigns a value to a key in FuncDepot's depot map using reflection.
7213	NewFileTemplateFetcher returns a new FileTemplateFetcher instance with absolute paths and an error if any path is invalid.
7214	LastModified returns the last modified time of a file path and updates cache if necessary.
7215	Reader opens file and returns io.Reader or error
7216	Bytes method returns file content as byte slice and error if reading fails
7217	NewState initializes and returns a new state object with default values and sets up initial mark and frame stacks.
7218	PushFrame adds a new frame to the state's stack and returns it.
7219	PopFrame removes the top frame from the state's stack and returns it, adjusting the stack size accordingly.
7220	CurrentFrame retrieves the top frame from the state's stack or returns nil if empty.
7221	Warnf will write a warning message to st.warn using the specified format and arguments
7222	AppendOutputString will write a string to st's output buffer
7223	Popmark will remove and return the top integer from the markstack of the State object
7224	CurrentMark returns the top mark from the stack or 0 if empty
7225	LoadByteCode will return bytecode and an error for a given key
7226	Reset will initialize state's indices and stacks then push mark and frame.
7227	DeclareVar adds a variable to the stack and returns its position
7228	GetLvar retrieves a local variable from the stack and returns its value or an error.
7229	SetLvar updates the local variable at index i with value v in the frame's stack.
7230	NewByteCode initializes a new ByteCode object with current timestamp, empty name, nil operation list, and version 1.0.
7231	Append will add an operation to the bytecode list
7232	AppendOp adds an operation to ByteCode and returns it
7233	String method returns bytecode details as a formatted string
7234	NewCachedByteCodeLoader initializes a new cached byte code loader with specified cache, cache level, fetcher, parser, and compiler.
7235	Load bytecode from cache or fetch, validate, and store it.
7236	NewFileCache initializes a new FileCache instance with the specified directory and returns it along with any errors encountered.
7237	GetCachePath will return a cache path by cleaning the input key and joining it with the directory.
7238	Get retrieves cached data for a key, decoding it from a file.
7239	Set will save an entity to cache with a given key and handle errors during directory creation and file operations
7240	Delete key from FileCache and return error if removal fails
7241	Get retrieves cached entity by key or returns error if cache miss
7242	MemoryCache.Set stores a CacheEntity under a given key and returns no error
7243	MemoryCache.Delete removes a key from the cache and returns no error
7244	NewStringLexer creates a lexer for parsing strings with custom tags.
7245	NewReaderLexer creates a lexer for reading from an input reader with custom tag delimiters.
7246	NewV4 generates a random UUID v4 and returns it.
7247	Parse will convert a Kolonish template to an AST and return it along with any errors encountered
7248	ParseReader will parse a reader into an AST and return it along with any errors encountered
7249	Visit method returns a channel for traversing AST nodes.
7250	String method returns a formatted string representation of AST nodes.
7251	Run bytecode on VM, reset state, load functions and variables, execute operations until end.
7252	DefaultParser sets the parser based on the syntax argument, defaulting to TTerse if not specified.
7253	DefaultLoader sets up caching and template fetching based on arguments, returning an error if setup fails.
7254	DefaultVM initializes a new VM with the loader from the Xslate instance and assigns it to the Xslate's VM field.
7255	Get retrieves a value from Args using a key and returns it along with a boolean indicating if the key exists.
7256	NewHTTPSource reads HTTP response body creates an HTTPSource instance sets LastModifiedTime from header or current time returns the source and any error
7257	NewStringByteCodeLoader initializes a StringByteCodeLoader with flags, parser, and compiler.
7258	LoadString parses a string template into AST and then compiles it to bytecode, optionally dumping both.
7259	Get retrieves a value from a map using a key, returning the value and a boolean indicating whether it exists.
7260	NewOp creates an operation with type and optional argument returns an Op object
7261	op.MarshalBinary converts an operation to a binary format including opcode, arguments, and comments.
7262	UnmarshalBinary reads binary data and populates struct fields, handling different types of arguments and comments.
7263	ArgInt converts an operation's argument to an integer
7264	ArgString returns a string representation of o.uArg, converting it to a string if necessary.
7265	AppendOp adds an operation to the bytecode context and returns the modified bytecode.
7266	Compile AST to ByteCode, optimize, and return.
7267	NewV5 creates a UUID v5 from a namespace and name, setting the version to 5.
7268	LexSymbolList's Sort method sorts symbols using a custom sorter and returns the sorted list.
7269	LexSymbolSorter's Less method returns true if symbol at index i has higher priority than symbol at index j
7270	Swap will swap elements in the list based on indices i and j
7271	Copy method creates a new LexSymbolSet with the same symbols as the original.
7272	Set assigns a symbol to the lexer's map and resets the sorted list.
7273	GetSortedList sorts symbols in the LexSymbolSet based on priority and returns a sorted list.
7274	Top will return the top element of the stack or an error if the stack is empty
7275	Resize will adjust the capacity of the stack to the specified size copying existing elements
7276	Extend stack size by given value
7277	Grow the stack automatically to a minimum size.
7278	Get from stack returns element at index or error if out of range
7279	Set will update the stack at index i with value v resizing the buffer if necessary an error will be returned if the index is invalid
7280	Push adds a value to the stack resizing it if necessary.
7281	Pop removes the top element from the stack and returns it, returning nil if the stack is empty
7282	String method for Stack returns a formatted string representation of stack elements.
7283	GetHostIPs retrieves IP addresses from network interfaces excluding docker interfaces returning them and any encountered errors
7284	GetPrivateHostIPs retrieves and filters private IPv4 addresses from all host IPs.
7285	IsPrivate checks if an IP address is within any listed private networks and returns true if it is.
7286	Environ collects environment variables from flags and returns them as a slice.
7287	envget checks environment variable existence and returns its value if exists
7288	flagAsEnv converts a string to uppercase prepends EnvPrefix replaces dots and hyphens with underscores returns the transformed string
7289	NewPolicy initializes a default policy with minimum and maximum length requirements and character pools.
7290	CreateRandom generates a random byte slice from a given byte slice and length
7291	Shuffle will randomly reorder the elements in a byte slice.
7292	Generate will create a password based on given policy and return it along with any errors encountered
7293	ExecutableFolder returns the path to the executable's folder and an error if it fails
7294	Ignore will add error ignore functions to a sentinel and return an error if already started
7295	Sigs sets shutdown signals for a sentinel and returns an option.
7296	Logf sets log function on Sentinel and returns an Option.
7297	Errorf sets an error formatting function on a Sentinel and returns an Option.
7298	New creates a Sentinel instance applying options and setting default values for shutdown signals and error logging functions.
7299	Run starts Sentinel, runs server functions, listens for shutdown signals, and handles errors.
7300	Shutdown will execute all registered functions with a timeout and return the first error encountered.
7301	ShutdownIgnore checks if an error should be ignored based on Sentinel's configuration.
7302	Register adds server and shutdown functions to Sentinel and appends ignore error functions returning any errors encountered.
7303	Mux registers a listener with options to create and manage a Netmux instance.
7304	HTTP sets up and starts an HTTP server with given listener and handler, applying optional configurations and registering it with Sentinel.
7305	IgnoreError returns a function that checks if an error matches the given error.
7306	IgnoreNetOpError checks if an error is due to a closed network connection and returns true if so.
7307	convertAndAppendContextFuncs will take a slice of context functions and additional values, converting non-context functions to context-compatible ones and appending them to the original slice, returning the updated slice or an error if invalid types are encountered
7308	router configures HTTP routes based on services and returns a new Mux router.
7309	buildInfoHandler responds with "build-info" when accessed via HTTP GET request
7310	Encode converts input values to JSON byte slice and handles struct pointers.
7311	Json will return a Martini handler to decode JSON from a request body and validate it against a struct, returning any errors encountered.
7312	validateAndMap will invoke validation on obj, combine errors from context, map errors and obj to context, and optionally map obj to ifacePtr
7313	Count method returns total number of errors from Overall and Fields fields.
7314	Header will return a map of allowed HTTP headers based on the input origin and options.
7315	PreflightHeader checks origin, method, and headers, setting appropriate CORS headers.
7316	IsOriginAllowed checks if an origin matches any allowed patterns.
7317	Allow sets CORS headers based on request options.
7318	Renderer will return a Martini handler to render templates with options and charset
7319	AcceptLanguages String method returns a string representation of languages and their quality values
7320	Languages handler maps parsed Accept-Language header values to context
7321	Prefix middleware removes specified prefix from URL path or returns 404 if prefix does not match.
7322	Basic will return an HTTP handler to authenticate requests using username and password.
7323	UpdateUser updates session with user's unique ID and returns no error
7324	GetById will fetch a user by ID from the database and return an error if the user does not exist
7325	AddressToAccountId converts a Stellar address to an AccountId and returns it along with any errors encountered during the conversion process.
7326	MutateChangeTrust updates the trust line for an asset and returns an error if the operation is invalid
7327	MutateChangeTrust will update a ChangeTrustOp's limit from a Limit instance and return an error if parsing fails.
7328	Trust constructs a ChangeTrustBuilder with credit asset and optional limit arguments
7329	RemoveTrust constructs a ChangeTrustBuilder with asset credit and limit "0", appending additional mutators.
7330	MutatePayment updates payment or path payment operation amounts and assets based on credit amount values.
7331	MutatePayment updates payment destination based on operation type and returns an error if operation type is unexpected
7332	MutatePayment updates payment or path payment operation amounts and assets based on NativeAmount, returning an error if the operation type is unexpected or parsing fails.
7333	MutatePayment updates a payment operation with max amount, path, and send asset from given values and returns an error if any step fails
7334	MutateAccountMerge sets account ID for destination.
7335	MustParse will parse a string to Int64 and panic on error
7336	Parse will convert a string to an Int64 and return it along with an error if parsing fails
7337	String converts an Int64 to a float string with 7 decimal places
7338	CreateOffer constructs a new offer with the given rate and amount.
7339	CreatePassiveOffer constructs a passive offer using a rate and amount, returning a ManageOfferBuilder result.
7340	UpdateOffer constructs a ManageOfferBuilder with specified parameters.
7341	DeleteOffer creates a ManageOfferBuilder to manage an offer deletion.
7342	ManageOffer initializes a builder with passive offer status and applies mutations.
7343	Mutate applies mutations to offer or operation based on mutator type.
7344	MutateManageOffer will modify the offer's amount based on its type and parse the new amount from the receiver. An error is returned if the operation type is unexpected or parsing fails.
7345	MutateManageOffer updates the offer ID in a ManageOfferOp object if it matches the expected type, returning an error otherwise.
7346	MutateManageOffer will modify the offer object based on its type and return an error if the operation is unexpected or fails to convert the asset or parse the price.
7347	MutateOperation sets the source account of an operation to the given address or seed and returns an error if setting fails
7348	Price's String method returns a formatted string representation of the price with up to 7 decimal places.
7349	Transaction applies mutators to a transaction builder and returns it.
7350	Mutate applies transaction mutations to the builder, updating the transaction or setting an error if any mutation fails.
7351	Hash calculates the transaction hash using NetworkID, EnvelopeTypeTx, and TX fields.
7352	HashHex returns the hash of a transaction as a hexadecimal string and an error if hashing fails
7353	Sign will add signers to the transaction builder and return a new envelope builder
7354	MutateTransaction will add an allow trust operation to the transaction builder and return an error if there's an issue
7355	MutateTransaction will update transaction body with change trust operation and return error if any
7356	MutateTransaction will add a create account operation to the transaction builder and return any errors encountered during the process.
7357	MutateTransaction adjusts transaction fee and network ID if zero values are set
7358	MutateTransaction updates transaction with inflation operation and returns error if any.
7359	MutateTransaction updates transaction builder with manage data operation and returns error
7360	MutateTransaction updates transaction builder based on offer type and returns error.
7361	MutateTransaction updates transaction memo with hash value.
7362	MutateTransaction updates the transaction memo with the MemoID value and returns an error if the conversion fails.
7363	MutateTransaction updates the transaction memo with a MemoReturn value and returns any errors encountered
7364	MutateTransaction will update a transaction's memo with a text value and return an error if the memo exceeds the maximum length
7365	MutateTransaction updates TransactionBuilder's NetworkID with Network's ID and returns no error
7366	MutateTransaction updates transaction builder with payment or path payment operation based on PathPayment flag returns error if any.
7367	MutateTransaction will add a new operation to the transaction builder and return an error if there's an issue
7368	MutateTransaction updates the transaction's sequence number with the given sequence and returns no error.
7369	MutateTransaction updates the transaction's source account with the given address or seed and returns an error if the operation fails
7370	Scan method assigns input value to Int64 variable and returns error if value is invalid
7371	`InitialState retrieves the initial state entry for a given key from the bundle changes.`
7372	Changes returns ledger entry changes for a given target up to max integer.
7373	StateAfter returns the latest ledger entry for a given key and operation index, handling creation, removal, update, and unexpected state entries.
7374	changes filters ledger entry changes based on target key and maximum operations
7375	MustDecode will decode the source string to byte array or panic if error occurs
7376	Encode will take a version byte and source data, encode them with a checksum, and return the encoded string or an error
7377	MustEncode encodes a versioned byte slice to a string or panics on error
7378	checkValidVersionByte checks if the version byte is valid and returns an error if it's not
7379	Checksum calculates CRC16 checksum and returns it as byte slice.
7380	Validate checks if the provided data matches the expected checksum and returns an error if they do not match.
7381	LedgerKey retrieves the ledger key based on the change type.
7382	checkPlausible verifies if all characters in prefix are valid base32 alphabets
7383	Address method returns encoded account ID based on its type or panics if unknown type
7384	accountId.Equals checks if two accounts have the same type and value, returning true if they do and false otherwise.
7385	SetAddress sets the account ID from a base32 encoded string returning an error if invalid
7386	ToXdrObject converts an Asset to XDR object based on its properties and returns the appropriate XDR asset type along with any errors encountered during conversion.
7387	Through appends an asset to the Path field of a PayWithPath instance and returns the updated instance.
7388	PayWith creates a PayWithPath struct with the given asset and maximum amount
7389	continuedFraction will convert a string price to an xdr.Price using continued fraction approximation, returning an error if parsing fails or no valid approximation is found
7390	Mutate applies transaction envelope mutations to the builder, initializing it first.
7391	MutateTX applies mutators to transaction envelope builder's child and updates error if any.
7392	Bytes method returns transaction envelope bytes and error if any
7393	Base64 will convert transaction envelope to base64 string and return it along with any errors
7394	MutateTransactionEnvelope updates transaction envelope and returns error if any.
7395	MutateSetOptions sets the home domain on a SetOptionsOp and returns an error if the domain is too long
7396	MutateSetOptions sets the inflation destination on a SetOptionsOp object using the InflationDest's value and returns an error if the account ID cannot be set.
7397	MutateSetOptions sets the master weight on a SetOptionsOp object and returns any errors encountered
7398	MutateSetOptions sets the signer's weight and public key on the operation object and returns an error if the account ID cannot be set.
7399	SetThresholds assigns pointers to low, medium, and high values to a new Thresholds struct.
7400	MutateSetOptions sets thresholds on o based on m's Low, Medium, and High values returning an error if any conversion fails
7401	MutateSetOptions updates the SetOptionsOp with the given SetFlag ensuring it's valid.
7402	MutateSetOptions updates the clear flags of a set options operation with a valid flag or returns an error if the flag is invalid.
7403	MutateCreateAccount updates the destination account ID with the provided address or seed.
7404	MutateCreateAccount sets StartingBalance on CreateAccountOp using parsed Amount from NativeAmount.
7405	Random generates a new Full keypair using a random seed.
7406	Master generates a keypair from a network passphrase and panics on error.
7407	Parse will return a KP object and an error based on whether the input is a valid address or seed
7408	MustParse will parse addressOrSeed to KP or panic if it fails
7409	MutateAllowTrust sets the authorize field of AllowTrustOp to the value of the Authorize instance and returns no error
7410	MutateAllowTrust sets the asset code on an AllowTrustOp object based on its length and returns an error if the length is invalid
7411	MutateAllowTrust updates the trustor's account ID with the given address.
7412	ToAsset converts AllowTrustOpAsset to Asset based on its Type and panics on unexpected types.
7413	SetNative updates Asset to native type returning error if creation fails
7414	Asset's String method returns a formatted string based on its type and extracted components.
7415	Equals checks if two assets are equal based on their type and properties.
7416	MustExtract will extract data from an asset and panic if an error occurs
7417	Unmarshal reads data from reader r into variable v and returns the number of bytes read and any errors encountered
7418	Marshal will write data from a value to a writer using XDR encoding and return the number of bytes written or an error
7419	ValidEnum checks if the given integer is a valid enum value for CryptoKeyType.
7420	NewPublicKey initializes a new public key with the given type and value, returning it and any errors encountered.
7421	MustEd25519 will panic if Ed25519 is not set and return the Ed25519 value otherwise
7422	NewNodeId creates a new node ID from a public key and returns it along with any errors encountered
7423	NewAccountId generates an AccountId from a PublicKey created with the given CryptoKeyType and value.
7424	ValidEnum checks if v is a valid enum value for AssetType.
7425	ArmForSwitch returns asset type name and a flag indicating if it's valid
7426	NewAsset creates an asset based on type and value, returning an error if the value is invalid.
7427	MustAlphaNum4 will return an AssetAlphaNum4 value or panic if not set
7428	GetAlphaNum4 will return an AssetAlphaNum4 value and a boolean indicating success based on the asset type.
7429	MustAlphaNum12 will return the AlphaNum12 value of an asset or panic if it's not set
7430	GetAlphaNum12 retrieves AlphaNum12 asset if available
7431	ValidEnum checks if v is a valid enum value.
7432	ValidEnum checks if a value exists in the ledgerEntryTypeMap
7433	ValidEnum checks if the input integer is a valid enum value for AccountFlags.
7434	NewAccountEntryExt creates an AccountEntryExt instance with the given value and returns it along with any errors encountered.
7435	ValidEnum checks if v is a valid TrustLineFlag
7436	NewTrustLineEntryExt initializes a TrustLineEntryExt struct with a version and value, handling specific cases for version 0.
7437	ValidEnum checks if v is a valid OfferEntryFlags value
7438	NewOfferEntryExt creates an OfferEntryExt instance with a given integer value and an interface, returning the result and any potential error.
7439	NewDataEntryExt initializes a DataEntryExt struct with a value and returns it along with any errors encountered
7440	NewLedgerEntryData creates a new LedgerEntryData based on the type and validates the input value.
7441	NewLedgerEntryExt creates a new ledger entry with the given integer and value returns the result and any error encountered
7442	ValidEnum checks if a given integer is a valid enum value for EnvelopeType
7443	ValidEnum checks if v is a valid OperationType enum value.
7444	ArmForSwitch returns asset type based on switch value or "-" and false if unknown type
7445	NewAllowTrustOpAsset creates an AllowTrustOpAsset based on asset type and value, returning an error if the value is invalid
7446	MustAssetCode4 returns the asset code or panics if it's not set
7447	GetAssetCode4 returns asset code 4 and whether it was successfully retrieved
7448	MustAssetCode12 returns the asset code as a 12-byte array, panicking if it's not set.
7449	GetAssetCode12 returns AssetCode12 and true if armName matches, otherwise returns zero values and false
7450	NewOperationBody creates an operation body based on the given type and value, setting the appropriate field in the result and validating the input.
7451	MustCreateAccountOp returns the CreateAccountOp from OperationBody or panics if it's not set.
7452	GetCreateAccountOp returns a CreateAccountOp instance and a boolean indicating success based on the operation type.
7453	MustPaymentOp will return a PaymentOp from OperationBody or panic if it's not set
7454	GetPaymentOp retrieves payment operation based on type and returns it along with a boolean indicating success.
7455	MustPathPaymentOp returns the PathPaymentOp from OperationBody or panics if not set.
7456	GetPathPaymentOp retrieves a PathPaymentOp from an OperationBody if its type matches, returning it along with a boolean indicating success.
7457	MustManageOfferOp will return the ManageOfferOp value from OperationBody or panic if not set
7458	GetManageOfferOp retrieves ManageOfferOp from OperationBody based on Type.
7459	MustCreatePassiveOfferOp returns a CreatePassiveOfferOp from OperationBody or panics if not set
7460	GetCreatePassiveOfferOp will return a CreatePassiveOfferOp instance and a boolean indicating success based on the operation type and arm name.
7461	MustSetOptionsOp will return the SetOptionsOp from OperationBody or panic if not set
7462	GetSetOptionsOp returns a SetOptionsOp instance and a boolean indicating success based on the operation type.
7463	MustChangeTrustOp returns ChangeTrustOp from OperationBody or panics if not set
7464	GetChangeTrustOp extracts ChangeTrustOp from OperationBody based on type
7465	MustAllowTrustOp will return AllowTrustOp value or panic if it's not set
7466	GetAllowTrustOp retrieves AllowTrustOp from OperationBody if armName matches.
7467	MustDestination retrieves and returns the destination account ID from the operation body, panicking if it's not set.
7468	GetDestination returns an account ID and a boolean indicating if the destination is valid based on the operation type.
7469	MustManageDataOp retrieves and returns ManageDataOp from OperationBody, panicking if not set.
7470	GetManageDataOp retrieves ManageDataOp from OperationBody if armName matches.
7471	ValidEnum checks if a value is a valid enum in MemoType.
7472	ArmForSwitch returns a memo type string and a boolean indicating success
7473	NewMemo creates a memo object based on type and validates input value
7474	MustText returns text from Memo or panics if not set
7475	GetText retrieves text from memo if type matches "Text".
7476	MustId returns the ID value from Memo, panicking if not set
7477	GetId retrieves the ID from Memo if the arm name matches "Id".
7478	MustHash will return the hash value or panic if it's not set
7479	GetHash retrieves a hash result and a flag indicating if the hash was successfully obtained
7480	MustRetHash retrieves hash from memo or panics if not set
7481	NewTransactionExt creates a new transaction extension with a version and value, returning it or an error if invalid.
7482	ValidEnum checks if v is a valid enum value for CreateAccountResultCode.
7483	ArmForSwitch returns an empty string and true for success or default cases
7484	NewCreateAccountResult sets up a CreateAccountResult based on the given code and value, returning any errors encountered.
7485	ValidEnum checks if a value exists in the payment result code map
7486	ArmForSwitch checks payment result and returns empty string and true for success or default cases
7487	NewPaymentResult initializes a PaymentResult with a code and value, returning it along with any errors encountered.
7488	ValidEnum checks if a value exists in the path payment result code map
7489	ArmForSwitch returns a message and a boolean indicating success based on the PathPaymentResultCode.
7490	NewPathPaymentResult creates a new PathPaymentResult based on the code and value provided, setting the appropriate field and validating the type of value.
7491	MustNoIssuer returns the asset or panics if no issuer is set
7492	GetNoIssuer returns an asset and a boolean indicating if the issuer is absent
7493	ValidEnum checks if v is a valid ManageOfferResultCode.
7494	ValidEnum checks if v is a valid enum value in manageOfferEffectMap.
7495	ArmForSwitch returns a status message and a boolean indicating success based on the switch value
7496	NewManageOfferSuccessResultOffer constructs a success result offer based on the effect and validates the value type.
7497	ArmForSwitch returns success message and true for successful offer management otherwise empty string and true
7498	NewManageOfferResult initializes a ManageOfferResult based on the provided code and value, setting the appropriate fields or returning an error if the value type is incorrect.
7499	ValidEnum checks if v is a valid SetOptionsResultCode enum value
7500	ArmForSwitch returns an empty string and true for success or default cases
7501	NewSetOptionsResult initializes a SetOptionsResult with a given code and value, returning it along with any potential error.
7502	ValidEnum checks if v is a valid ChangeTrustResultCode
7503	ArmForSwitch returns an empty string and true for successful change trust operations.
7504	NewChangeTrustResult initializes a ChangeTrustResult with a code and returns it along with any errors.
7505	ValidEnum checks if v is a valid AllowTrustResultCode enum value.
7506	ArmForSwitch returns empty string and true for any AllowTrustResultCode
7507	NewAllowTrustResult initializes an AllowTrustResult with a given code and returns it along with any errors encountered
7508	ValidEnum checks if v is a valid enum value for AccountMergeResultCode.
7509	ArmForSwitch returns a string and a boolean indicating success based on the switch value
7510	NewAccountMergeResult initializes an account merge result with a given code and value, setting the source account balance if successful, returning an error otherwise.
7511	MustSourceAccountBalance will return the source account balance or panic if not set
7512	GetSourceAccountBalance retrieves source account balance from result if arm name matches.
7513	ValidEnum checks if the given integer is a valid enum value for InflationResultCode.
7514	ArmForSwitch returns a string and a boolean indicating success based on the inflation result code.
7515	NewInflationResult initializes an InflationResult based on the provided code and value, setting the appropriate fields or returning an error if the value type is incorrect.
7516	MustPayouts returns the payouts from an InflationResult or panics if not set
7517	GetPayouts retrieves payouts based on the inflation result's code and returns them along with a success flag.
7518	ValidEnum checks if v is a valid enum value for ManageDataResultCode
7519	ArmForSwitch returns an empty string and true for success or any other case
7520	NewManageDataResult initializes a ManageDataResult based on the given code and returns it along with any error encountered
7521	ValidEnum checks if a given integer is a valid enum value in OperationResultCode.
7522	ArmForSwitch returns result type and success flag based on operation type
7523	NewOperationResultTr creates an OperationResultTr based on OperationType and validates the input value.
7524	MustCreateAccountResult will return the CreateAccountResult from OperationResultTr or panic if it's not set
7525	GetCreateAccountResult returns the CreateAccountResult and a boolean indicating success based on the operation type.
7526	MustPaymentResult returns the payment result from OperationResultTr or panics if not set
7527	GetPaymentResult retrieves payment result from operation result based on type.
7528	MustPathPaymentResult will panic if PathPaymentResult is not set and return it otherwise
7529	GetPathPaymentResult retrieves the PathPaymentResult from OperationResultTr based on the type and returns it along with a boolean indicating success.
7530	MustManageOfferResult returns the ManageOfferResult from OperationResultTr or panics if it's not set
7531	GetManageOfferResult extracts a ManageOfferResult from OperationResultTr based on ArmForSwitch result.
7532	MustCreatePassiveOfferResult will return a ManageOfferResult or panic if CreatePassiveOfferResult is not set
7533	MustSetOptionsResult will panic if SetOptionsResult is not set and return it otherwise
7534	GetSetOptionsResult retrieves SetOptionsResult from OperationResultTr based on ArmForSwitch result.
7535	MustChangeTrustResult returns ChangeTrustResult from OperationResultTr panicking if not set
7536	GetChangeTrustResult returns a ChangeTrustResult and a boolean indicating success based on the operation type.
7537	MustAllowTrustResult will return AllowTrustResult from OperationResultTr or panic if it's not set
7538	GetAllowTrustResult retrieves AllowTrustResult from OperationResultTr based on type.
7539	MustAccountMergeResult will return the account merge result from the operation result or panic if it's not set
7540	GetAccountMergeResult returns an account merge result and a boolean indicating success based on operation type
7541	MustInflationResult will panic if InflationResult is not set and return it otherwise
7542	GetInflationResult retrieves inflation result from operation based on type and returns it along with a flag indicating success.
7543	MustManageDataResult returns the ManageDataResult from OperationResultTr or panics if it's not set.
7544	GetManageDataResult retrieves ManageDataResult from OperationResultTr based on armName, returning it and a boolean indicating success.
7545	ArmForSwitch returns a string and a boolean based on the operation result code.
7546	NewOperationResult initializes an OperationResult based on code and value, returning it and an error if invalid.
7547	MustTr will return the Tr value from OperationResult or panic if it's not set
7548	GetTr retrieves Tr result from OperationResult based on ArmName.
7549	ValidEnum checks if v is a valid enum value for TransactionResultCode
7550	ArmForSwitch returns a status message and a flag based on the transaction result code
7551	NewTransactionResultResult constructs a transaction result based on code and value, handling success and failure cases.
7552	MustResults will return the operation results or panic if not set
7553	GetResults extracts operation results from transaction result if arm name matches "Results".
7554	NewTransactionResultExt initializes a TransactionResultExt with a value and returns it along with any error encountered.
7555	NewStellarValueExt initializes a StellarValueExt struct with a given integer and interface, returning an error if invalid.
7556	NewLedgerHeaderExt constructs a LedgerHeaderExt instance from an integer and an interface, returning the result and any error encountered during construction.
7557	ValidEnum checks if v is a valid enum value for LedgerUpgradeType.
7558	ArmForSwitch returns a ledger upgrade type and a flag indicating if it's valid
7559	NewLedgerUpgrade initializes a LedgerUpgrade based on type and validates the value.
7560	MustNewLedgerVersion returns the new ledger version or panics if it's not set
7561	GetNewLedgerVersion returns the new ledger version and a flag indicating success based on the upgrade type.
7562	MustNewBaseFee will panic if arm NewBaseFee is not set and return the new base fee value otherwise
7563	GetNewBaseFee will return the new base fee and a boolean indicating success based on the ledger upgrade type.
7564	MustNewMaxTxSetSize will return the new maximum transaction set size from the ledger upgrade or panic if not set
7565	GetNewMaxTxSetSize retrieves the new maximum transaction set size from the ledger upgrade result.
7566	ArmForSwitch returns a string representation and a boolean indicating if the switch value matches a known ledger entry type.
7567	NewLedgerKey initializes a LedgerKey based on the type and validates the provided value.
7568	ValidEnum checks if v is a valid enum value for BucketEntryType
7569	ArmForSwitch returns entry type and arm status based on switch value
7570	NewBucketEntry creates a new bucket entry based on type and validates the value accordingly.
7571	MustLiveEntry retrieves a live entry from a bucket or panics if it's not set.
7572	GetLiveEntry returns a ledger entry and a boolean indicating success based on the bucket entry type.
7573	MustDeadEntry returns the LedgerKey from BucketEntry or panics if it's not set.
7574	GetDeadEntry returns a ledger key and a boolean indicating if it's a dead entry based on the bucket type
7575	NewTransactionHistoryEntryExt creates a new transaction history entry with a value and returns it or an error
7576	ArmForSwitch returns a switch result or an empty string with a flag indicating success
7577	NewTransactionHistoryResultEntryExt creates a new transaction history result entry with an integer value and an interface value returns the created entry and an error if any
7578	NewLedgerHeaderHistoryEntryExt initializes a LedgerHeaderHistoryEntryExt struct with a version and value, returning it and any errors encountered.
7579	NewScpHistoryEntry creates a new SCP history entry from version and value, returns entry and error if invalid.
7580	ValidEnum checks if a given integer is a valid enum value for LedgerEntryChangeType
7581	ArmForSwitch returns a string indicating the type of ledger entry change and a boolean flag indicating success.
7582	NewLedgerEntryChange creates a new ledger entry change based on type and validates the value accordingly.
7583	MustCreated returns the created ledger entry or panics if it's not set.
7584	GetCreated returns a ledger entry and a boolean indicating if it was created based on the arm name
7585	MustUpdated will return the updated ledger entry or panic if it's not set
7586	GetUpdated retrieves updated ledger entry if available.
7587	MustRemoved will panic if removed is not set and return the removed LedgerKey
7588	GetRemoved will return the removed ledger key and a boolean indicating if it was removed
7589	MustState returns the state of the ledger entry or panics if it's not set
7590	GetState retrieves the state from a ledger entry change if the arm name matches.
7591	NewTransactionMeta creates a new transaction meta object with the given version and value, validating the value type and setting the operations field accordingly.
7592	MustOperations will return operations or panic if not set
7593	GetOperations retrieves operations metadata based on switch arm name.
7594	ValidEnum checks if a given integer is a valid enum value.
7595	ValidEnum checks if v is a valid IP address type enum value.
7596	ArmForSwitch returns IP address type and a boolean indicating success based on input switch value
7597	NewPeerAddressIp creates a new peer address IP based on type and value, returning it and any errors encountered.
7598	MustIpv4 returns IPv4 address as a byte array or panics if not set.
7599	GetIpv4 extracts IPv4 address from peer address if available.
7600	MustIpv6 will return the IPv6 address of a peer or panic if it's not set.
7601	GetIpv6 retrieves IPv6 address from PeerAddressIp based on type and returns it along with a boolean flag indicating success.
7602	ValidEnum checks if a given integer is a valid enum value for MessageType.
7603	ArmForSwitch returns a message type string and a boolean indicating success based on input switch value
7604	NewStellarMessage creates a StellarMessage based on MessageType and validates the value accordingly.
7605	MustError will return the error from StellarMessage and panic if it's not set
7606	GetError returns an error from a StellarMessage if its type corresponds to an error arm.
7607	MustHello returns the Hello value from StellarMessage or panics if not set.
7608	GetHello retrieves a Hello message from a StellarMessage based on its type, returning the message and a boolean indicating success.
7609	MustAuth will return the authentication value from StellarMessage and panic if it's not set
7610	GetAuth retrieves authentication details from a Stellar message.
7611	MustDontHave will panic if arm DontHave is not set otherwise it returns the DontHave value
7612	GetDontHave retrieves a message's dont-have data and indicates success.
7613	MustPeers returns peers or panics if not set
7614	GetPeers returns a list of peer addresses and a boolean indicating success based on the message type.
7615	MustTxSetHash will return the transaction set hash from the Stellar message or panic if it's not set
7616	GetTxSetHash retrieves the TxSetHash from StellarMessage if the arm name matches.
7617	MustTxSet will return the transaction set from the StellarMessage or panic if it's not set
7618	GetTxSet returns the transaction set and a flag indicating success based on the message type
7619	MustTransaction returns the transaction envelope or panics if it's not set
7620	GetTransaction extracts transaction data from StellarMessage based on its type.
7621	MustQSetHash retrieves the QSetHash from StellarMessage and panics if it's not set.
7622	GetQSetHash retrieves the QSetHash from a StellarMessage if the arm name matches.
7623	MustQSet returns the Quorum Set from a Stellar Message or panics if it's not set
7624	GetQSet retrieves QuorumSet from StellarMessage if type matches.
7625	MustEnvelope returns the envelope or panics if it's not set
7626	StellarMessage.GetEnvelope returns the envelope and a boolean indicating if it was successful
7627	MustGetScpLedgerSeq will return the SCP ledger sequence or panic if not set.
7628	GetGetScpLedgerSeq returns SCP ledger sequence and a boolean indicating success.
7629	ArmForSwitch returns a switch version and a boolean indicating success based on the input integer.
7630	NewAuthenticatedMessage constructs an AuthenticatedMessage based on version and value, returning an error if the value type does not match.
7631	ValidEnum checks if v is a valid enum value for ScpStatementType.
7632	ArmForSwitch returns a string representation and a boolean indicating if the switch case is valid
7633	NewScpStatementPledges creates a new ScpStatementPledges object based on the given type and value, returning an error if the value does not match the expected type.
7634	MustPrepare returns the prepared statement or panics if not set
7635	GetPrepare will return a prepared statement and whether it exists based on the statement type
7636	MustConfirm will return the confirmed value or panic if not set
7637	GetConfirm retrieves the confirmation statement and its validity based on the switch type.
7638	MustExternalize returns the externalized value of ScpStatementPledges or panics if it's not set.
7639	GetExternalize retrieves Externalize from ScpStatementPledges if available.
7640	MustNominate returns the nomination value or panics if it's not set
7641	GetNominate returns a nomination result and a boolean indicating success based on the statement type.
7642	SafeUnmarshalBase64 will unmarshal Base64 encoded data into a destination object and ensure all input is consumed, returning an error if not.
7643	SafeUnmarshal will unmarshal data into dest and return an error if the input is not fully consumed or if there's an unmarshalling error
7644	SendAmount calculates total bought amount for the first asset in offers or last offer's amount if no offers exist.
7645	LoadAccount fetches an account by ID using HTTP GET and decodes the response.
7646	SequenceForAccount retrieves account sequence number from server and converts it to xdr.SequenceNumber.
7647	SubmitTransaction sends a transaction envelope XDR to the server and returns a response or an error
7648	Equals checks if two LedgerKeys are equivalent based on their types and specific fields.
7649	SetAccount updates the key with a new account ID and returns an error if it fails
7650	SetData updates key with account and name returning error if failed
7651	SetOffer sets an offer key on a ledger account and returns an error if the operation fails
7652	SetTrustline updates key with a new trustline entry and returns an error if failed
7653	CHDBuilder's Add method appends a key-value pair to its respective slices.
7654	tryHash checks if entries in a bucket have unique hashes and updates the hash table accordingly
7655	HashIndexFromKey calculates hash index from key using hasher and returns it modulo buckets
7656	ReadInt will return a uint64 integer from the slice reader using little-endian byte order
7657	Read reads data from a reader and returns a mapped file or an error
7658	Get retrieves a value from a hash table using a key and returns it or nil if the key is not found
7659	Iterate will return an iterator or nil if no keys exist
7660	Write method for CHD struct to serialize data to writer
7661	RegisterDatasources registers mapnik datasources from a given path and returns an error if registration fails.
7662	RegisterFonts will register fonts from a given path and return an error if registration fails
7663	New creates a new Map object with specified dimensions and returns a pointer to it
7664	NewSized creates a new Map object with specified width and height.
7665	Load stylesheet into Map object, returning error if unsuccessful
7666	Resize method resizes the map to new dimensions and updates its width and height properties.
7667	Free will release the memory associated with the map object
7668	SRS will return the spatial reference system of a map as a string
7669	ZoomAll will call mapnik_map_zoom_all on the Map's underlying map object and return any errors encountered.
7670	ZoomTo sets map's zoom level to specified bounding box coordinates.
7671	Render map to image with optional scale and format, returning byte slice or error
7672	RenderImage will generate an image from a map with optional scaling, returning an NRGBA image or an error if rendering fails.
7673	RenderToFile will save map to file using specified options and path returns error if rendering fails
7674	SetBufferSize sets the buffer size of the map object
7675	Search will send a request and return responses or an error
7676	Get retrieves a connection from a blocking pool, closing it if expired, creating a new one if needed, or timing out if no connection is available.
7677	put method adds connection to pool or closes it if pool is closed or connection is unusable
7678	MonoToStereoF32 converts mono audio to stereo by duplicating each sample and updating the buffer's channel count.
7679	BitCrush reduces audio sample rate by shifting samples and rounding.
7680	NormalizeMax normalizes the audio buffer data by dividing each element by the maximum absolute value found
7681	Gain adjusts audio buffer values by a multiplier and returns an error if the buffer is invalid
7682	MonoDownmix converts multi-channel audio to mono by averaging channel values.
7683	Quantize adjusts audio buffer samples to specified bit depth using rounding.
7684	PCMScale adjusts audio buffer data based on bit depth and returns an error if the buffer is invalid.
7685	StereoPan adjusts the balance of a stereo audio buffer based on the pan value, returning an error if the input is invalid.
7686	Leader returns the current leader string while holding the lock
7687	IsLeader checks if candidate is leader safely using lock
7688	NewResponse creates a new response object with specified client ID, redirect URI, user ID, expiration, and code.
7689	GetRequestID retrieves the request ID from the context or returns an error if not available.
7690	Log method calculates duration, checks filter, sets color code, formats message, and prints to writer.
7691	SendMailSSL sends an email using SSL/TLS and handles errors during connection, authentication, sending, and closing.
7692	Send email using SMTP with specified message details.
7693	WaitForIt will establish a TCP connection to a specified host and port, wait for it to become available within a given timeout period, and then attempt to ping it using HTTP if the scheme supports it. If any step fails, an error will be returned.
7694	Get reads a configuration file or data, unmarshals it, and retrieves a specific environment's configuration, returning an error if any step fails.
7695	initConfig initializes configuration settings from a specified or default file, searching in home and local directories, and reading environment variables.
7696	WritePluginResultsToDatabase inserts or updates plugin results in the database based on sample ID.
7697	NewAuthController creates an AuthController instance with a UserManager and web.Config.
7698	Authenticate will validate user credentials, generate JWT token, and return it in response
7699	NewOAuth2Controller initializes and returns a new OAuth2Controller instance.
7700	Refresh token endpoint validates parameters, parses JWT, generates new access token, and returns it.
7701	Token handles OAuth2 authorization requests, validates parameters, decodes code, generates tokens, and returns them.
7702	Logging middleware logs HTTP requests with client details, latency, response length, and status code.
7703	SingleFile returns an HTTP handler to serve a single file.
7704	Write data to response writer and update length
7705	Hijack will return a net.Conn, bufio.ReadWriter, and an error if the ResponseWriter does not implement http.Hijacker
7706	NewMongo creates a new Mongo instance from a configuration file and environment, establishing a connection to the MongoDB server and verifying its reachability.
7707	Disconnect MongoDB client and log error if failed
7708	New creates a new Table instance with specified fields and initializes Rows and fieldSizes maps.
7709	PrintTable creates a table from fields and rows then prints it
7710	PrintHorizontal will print a table from a map with keys and values
7711	PrintRow creates a table from fields and row data then prints it
7712	AddRow will add a new row to the table formatting the values as strings
7713	Print will display table rows and footer if present, handling markdown formatting and header visibility
7714	Table.String generates a formatted table string based on rows and footer with optional markdown support and header hiding.
7715	getHead will return a string representation of the table header
7716	rowString constructs a table row from a map of field-value pairs
7717	fieldString will add spaces to align a string within a table based on its field size
7718	stringTableDash returns a dash representation based on Markdown flag
7719	printMarkdownDash generates markdown dashes based on field sizes and prints them
7720	stringMarkdownDash will generate a markdown dash row based on field sizes
7721	HashPassword will generate a password hash using the provided password and salt returning the hash and any errors encountered
7722	EncodeOAuth2Code generates a secure OAuth2 authorization code using client ID, redirect URI, user ID, and shared key.
7723	DecodeOAuth2Code verifies and decodes an OAuth2 token to extract response data.
7724	NewServer creates a new server instance with config from file and sets up logging based on configuration.
7725	Start server, handle TLS/HTTP, manage shutdown, log status.
7726	Stop will stop the server if it's started and log an appropriate message otherwise
7727	NewLoggingServeMux creates a new logging serve mux with the given configuration.
7728	Handler retrieves handler from serveMux
7729	Handle method sets up logging for HTTP requests using a pattern and handler.
7730	HandleFunc adds a handler to the LoggingServeMux for a given pattern.
7731	Init initializes a Database instance, tests connection, creates Elasticsearch client, checks index existence, and creates index if it doesn't exist. Returns error if any step fails.
7732	`WaitForConnection attempts to establish a connection to Elasticsearch within a specified timeout, retrying every second until successful or the timeout is reached.`
7733	StoreFileInfo stores file info in Elasticsearch using provided plugins and returns the index response or error.
7734	StorePluginResults stores plugin results in Elasticsearch, updating existing documents or creating new ones.
7735	CamelCase converts a string to camel case by capitalizing the first letter of each chunk separated by non-alphanumeric characters.
7736	Getopt retrieves an environment variable's value or returns a default if unset.
7737	Getopts returns user input or environment variable value or default value
7738	GetSHA256 calculates the SHA-256 hash of a file and returns it as a hexadecimal string.
7739	RunCommand executes a command and returns its output or an error if it times out.
7740	RemoveDuplicates removes duplicate strings from a slice and returns the result.
7741	Unzip extracts files from a zip archive to a specified target directory returning an error if extraction fails
7742	SliceContainsString checks if a string is contained within any string in a list and returns true if it is found.
7743	NewSMTP creates an SMTP client from a configuration file and returns it along with any errors encountered during the process.
7744	SendMail sends an email using SMTP and returns any errors encountered.
7745	GetEnvironment returns configuration based on environment name or nil if not found
7746	GetSMTP retrieves an SMTP configuration from source based on the given environment and returns it along with any errors encountered.
7747	GetConfig extracts server configuration from source based on environment.
7748	GetEnvironment retrieves configuration for a specified environment from the Environment struct, returning the configuration or nil if not found.
7749	GetMongo retrieves MongoDB configuration from source based on environment.
7750	TokenHandler wraps HTTP handlers to validate JWT tokens, allowing access only to authorized requests or root path.
7751	Receive will process an incoming XMPP stanza and return a parsed InMsg or an error
7752	Send will send an OutMsg over XMPP and return the number of bytes sent and an error if any
7753	allBoshReleaseNames returns a list of unique BOSH release names from two releases.
7754	AddedProperty updates the DeltaJob's AddedProperties map with the given name and property.
7755	RemovedProperty updates DeltaJob's RemovedProperties map with the given name and property
7756	AddDeltaJob appends a DeltaJob to Result's DeltaJob slice
7757	Concatenate DeltaJob from another Result to current Result
7758	Read will open a local file and return a reader-closer or an error if unsuccessful
7759	Pull will download a release from a given location and return the filename and an error if the release cannot be pulled
7760	BuildJob will marshal job metadata to JSON, create job files, write monit and spec files, and return an error if any step fails.
7761	LoadBoshRelease reads a BOSH release file from a repository and returns the parsed release or an error.
7762	readBoshRelease reads a BOSH release from a reader and returns the parsed BoshRelease object and any errors encountered
7763	readBoshRelease reads a BOSH release from a reader and decodes YAML files into manifest structures
7764	readBoshJob reads a BOSH job manifest from a reader and returns it along with any errors encountered
7765	NewRequest creates a new HTTP request with authentication set.
7766	PushCloudConfig sends a manifest to BOSH and returns an error if unsuccessful.
7767	Generate will process input file and create Go structs based on data, then write them to disk.
7768	CreateNewRecord will initialize a new record with the given property and YAML data, splitting the property by "." and setting the record's fields accordingly.
7769	NewShowCmd creates a new ShowCmd instance with the given release repo and release name.
7770	All will print BoshReleases from either a Pivnet or standard release file and return an error if loading fails
7771	GetDefaultTaskImageResource returns a default image resource configuration for a Concourse pipeline.
7772	AddRawJob will add a raw job to the pipeline's jobs list
7773	AddGroup appends a group config to the pipeline's groups list
7774	GetResourceByName will return a resource config for a given name or nil if not found
7775	AddRawResource will add a raw resource to the pipeline's resources list
7776	AddResource appends a new resource config to the pipeline's resources list.
7777	AddGithubResource adds a GitHub resource to the pipeline
7778	AddBoshIOResource adds a resource to the pipeline with the specified name and source
7779	AddBoshDeploymentResource adds a Bosh deployment resource to the pipeline
7780	AddGitResource adds a git resource to the pipeline
7781	allJobNames returns a list of unique job names from two releases.
7782	NewDeploymentManifestFromFile reads a deployment manifest file and returns a DeploymentManifest object
7783	NewDeploymentManifest parses byte slice into DeploymentManifest struct
7784	AddRemoteRelease appends a new release to the deployment manifest and returns an error if any issues occur
7785	AddRemoteStemcell will add a new stemcell to the deployment manifest
7786	Tag will retrieve a tag value from the deployment manifest based on the provided key.
7787	RemoveTag deletes a tag from the deployment manifest by its key
7788	LoadPivnetRelease pulls a release from a repository, initializes a PivnetRelease object, reads the release data, and returns it along with any errors encountered.
7789	BoshReleaseOrEmpty retrieves a Bosh release by name or returns an empty one if not found
7790	readPivnetRelease reads BOSH releases from a zip file and stores them in r.BoshRelease
7791	decodeYaml reads YAML from a reader and unmarshals it into a given interface, returning any errors encountered.
7792	NewZipWalker initializes a new zip walker with the given zip file path and returns it.
7793	NewDiffCmd initializes a DiffCmd struct with release repository and two releases.
7794	All will generate and print a diff result between two releases and return an error if any step fails
7795	Job method creates a differ instance, computes differences, prints results, and returns any errors encountered.
7796	New will create a differ instance based on the file extension and load the corresponding release type, returning an error if the files cannot be loaded or if they have mismatched extensions
7797	StructName determines the struct name based on index and package name, considering parent elements and properties.
7798	TypeName returns the type name of a record element based on its index and properties.
7799	NewTgzWalker creates a new tgzWalker instance with the given pkgReader and initializes callbacks map
7800	NewBackoff initializes a new backoff instance with specified strategy, start duration, and limit duration, then resets it and returns the pointer to the backoff instance.
7801	Reset method resets backoff counter and durations.
7802	NewExponential creates a new exponential backoff instance with given start and limit durations.
7803	NewExponentialFullJitter creates a new backoff strategy with exponential full jitter algorithm.
7804	NewLinear creates a linear backoff strategy with given start and limit durations.
7805	GetLineSize calculates the size of a line on a Sapin based on its floor and line number
7806	GetMaxSize returns the maximum size based on line size calculations.
7807	compute will generate a sapin tree and print it to the console
7808	WithTimeout sets timeout on PostAppsParams and returns it
7809	WithContext sets the context for PostAppsParams and returns it.
7810	WithHTTPClient sets the HTTP client and returns the updated PostAppsParams object.
7811	WithBody sets the body for PostAppsParams and returns the updated object
7812	WithTimeout sets the timeout on GetAppsAppParams and returns it.
7813	WithContext sets the context on GetAppsAppParams and returns it
7814	WithHTTPClient sets the HTTP client and returns the modified object
7815	WithApp sets the app parameter and returns the modified GetAppsAppParams object
7816	UnmarshalBinary will unmarshal JSON data from byte slice into RouteWrapper instance and return error if failed
7817	WithTimeout sets timeout on GetAppsParams and returns it
7818	WithContext sets the context for GetAppsParams and returns it
7819	WithHTTPClient sets HTTP client for GetAppsParams and returns it.
7820	WithTimeout sets timeout on DeleteAppsAppParams and returns it
7821	WithContext sets the context for DeleteAppsAppParams and returns it
7822	WithHTTPClient sets HTTP client for DeleteAppsAppParams and returns it
7823	WithApp sets the app parameter and returns the modified object
7824	WithTimeout sets the timeout on PatchAppsAppRoutesRouteParams and returns it
7825	WithContext sets the context for the PatchAppsAppRoutesRouteParams object and returns it.
7826	WithHTTPClient sets the HTTP client for the route parameters and returns the updated object.
7827	WithApp sets the app parameter and returns the modified object
7828	WithBody sets the body parameter and returns the updated PatchAppsAppRoutesRouteParams instance
7829	WithRoute sets route on PatchAppsAppRoutesRouteParams and returns it
7830	WithTimeout sets timeout on PostAppsAppRoutesParams and returns it
7831	WithContext sets the context for PostAppsAppRoutesParams and returns it
7832	WithHTTPClient sets HTTP client on PostAppsAppRoutesParams and returns it.
7833	WithApp sets the app parameter and returns the modified object
7834	WithBody sets the body on PostAppsAppRoutesParams and returns it
7835	WithTimeout sets timeout on PutAppsAppRoutesRouteParams and returns it
7836	WithContext sets the request context and returns the modified object.
7837	WithApp sets the app parameter and returns the updated PutAppsAppRoutesRouteParams instance.
7838	WithBody sets the body for PutAppsAppRoutesRouteParams and returns the updated object
7839	WithRoute sets the route on PutAppsAppRoutesRouteParams and returns it.
7840	WithTimeout sets the timeout for GetAppsAppRoutesParams and returns the updated params
7841	WithContext sets the context for GetAppsAppRoutesParams and returns it.
7842	WithHTTPClient sets the HTTP client and returns the modified params
7843	WithApp sets app on GetAppsAppRoutesParams and returns it
7844	WithTimeout sets timeout on PatchAppsAppParams and returns it
7845	WithContext sets the context for PatchAppsAppParams and returns it.
7846	WithHTTPClient sets HTTP client and returns the updated object
7847	WithApp sets the app parameter on PatchAppsAppParams and returns the instance
7848	WithBody sets the body of PatchAppsAppParams and returns the updated instance
7849	WithTimeout sets timeout on PutAppsAppParams and returns it
7850	WithContext sets the context for PutAppsAppParams and returns it
7851	WithApp sets the app field and returns the modified PutAppsAppParams object
7852	WithBody sets the body of PutAppsAppParams and returns the updated instance
7853	UnmarshalJSON reads JSON data into Task and TaskAllOf1 structs, returning an error if parsing fails
7854	MarshalJSON method returns JSON representation of Task struct and error if marshaling fails
7855	Validate checks task fields for errors and returns them if present
7856	GetRanges will return IP networks for given IPs and CIDRs an error will be returned if the CIDR lengths are invalid
7857	WithTimeout sets timeout on GetAppsAppRoutesRouteParams and returns it
7858	WithContext sets the context on GetAppsAppRoutesRouteParams and returns it
7859	WithHTTPClient sets the HTTP client for GetAppsAppRoutesRouteParams and returns it.
7860	WithApp sets app on GetAppsAppRoutesRouteParams and returns it
7861	WithRoute sets route on GetAppsAppRoutesRouteParams and returns it
7862	New initializes a new instance of Functions with given transport and formats returning it
7863	SetTransport updates transport for all components.
7864	WithTimeout sets the timeout on DeleteAppsAppRoutesRouteParams and returns it.
7865	WithContext sets the request context and returns the updated object.
7866	WithHTTPClient sets HTTP client for DeleteAppsAppRoutesRouteParams and returns it
7867	WithApp sets the app parameter on the route parameters and returns the updated object
7868	WithRoute sets the route parameter and returns the updated object.
7869	WithTimeout sets timeout on GetTasksParams and returns it
7870	WithContext sets the context for GetTasksParams and returns it.
7871	WithHTTPClient sets the HTTP client for GetTasksParams and returns it.
7872	NewValueStore initializes a new ValueStore instance with given parameters and returns it along with any errors encountered.
7873	Close method locks store, shuts it down, closes handler channel, then unlocks store.
7874	SetBackend updates the server's backend service safely using mutex locking.
7875	Ring method returns a ring.Ring object while ensuring thread safety through RLock and RUnlock.
7876	GetLocalID returns the local ID of the server while ensuring thread safety through RLock and RUnlock.
7877	GetListenAddr returns the local node's address from the server's ring after acquiring a read lock.
7878	Startup initializes ReplGroupStore's ring server and returns an error if it fails.
7879	shutdownFinished waits 10ms then closes ShutdownComplete channel
7880	Stop will stop the server and return an error if it's already stopped
7881	Exit method stops server backend and sets stopped flag.
7882	SelfUpgrade checks if server can upgrade to given version and returns success status and error message if any.
7883	SoftwareVersion returns the current software version of the server.
7884	Shutdown will release resources and return an error if it fails
7885	Rant will fetch a rant and its comments using a given ID, returning the models and any encountered errors
7886	Profile fetches user details and content based on username.
7887	Search will fetch rant models based on a search term and return them or an error if unsuccessful
7888	Surprise method fetches a rant model from an API endpoint and returns it or an error if unsuccessful.
7889	WeeklyRants fetches weekly rants from API and returns them or an error
7890	getUserId retrieves user ID from API and returns it or error
7891	Shutdown will stop the ring server and stores, logging errors and handling context cancellation.
7892	FExists checks if a file exists and returns a boolean result
7893	outbound method handles sending messages over a connection, logging errors and shutting down on shutdown signal
7894	parse reads messages from a pool, parses them, logs errors, and forwards them to Inbound
7895	Group will create a new group with the given domain, name, and members
7896	Groups method retrieves groups from domain returning list of groups or error
7897	GetGroup fetches group details from domain, parses member accounts, and returns a Group object or error.
7898	Reticence will truncate a string to a specified length, removing trailing punctuation and replacing with ellipsis if necessary
7899	CheckPassword checks if password length is within limits and contains only graphic characters, returning an error if not.
7900	CleanUrl cleans a URL and checks its validity within specified length limits, returning an error if any issues arise.
7901	NewParameter creates a new parameter with the given name and value.
7902	MakeParams creates a Params struct with a map and slice initialized based on fieldCount.
7903	Parse method populates Params with field values from pvalue, handling slices and aliases.
7904	Email will generate and return an email address using the forwarder's name and domain name.
7905	Forwarder creates a new Forwarder instance with specified Domain, Name, and To properties
7906	Forwarders retrieves a list of forwarders from the domain's CGP and returns them as Forwarder objects, handling errors appropriately.
7907	GetForwarder retrieves a forwarder for a domain and returns it along with an error if the request fails.
7908	New creates a new CGP instance with the given URL, user, and password
7909	EscapeCommaSeparated will return a comma-separated string where each element is URL-encoded and commas are replaced with a specific sequence.
7910	Alias method returns a new Alias instance linked to the account with the specified name.
7911	Alias.Email constructs and returns an email address using its Name and account's Domain's Name.
7912	Aliases will return a list of aliases and an error if the request fails
7913	RealName retrieves the real name from account settings and returns it along with any errors encountered.
7914	Account.Email returns a formatted email address combining Name and Domain.Name
7915	Account method returns an Account object initialized with Domain and Name fields.
7916	Accounts retrieves all accounts from a domain and returns them along with any errors encountered.
7917	Exists checks if domain exists returning bool and error
7918	Aliases method retrieves domain aliases and returns them as a list or an error
7919	Domain method returns a new Domain instance associated with CGP and given name.
7920	Domains will return a list of domains and an error if the request fails
7921	New will create and return an error with debug stack and additional information
7922	Wrap will return an error with additional context and information
7923	mergeIn updates error information and combines public message parts.
7924	wrappedErrStr returns the error message of the wrapped error or an empty string if there is no wrapped error
7925	concatArgs will concatenate variable arguments into a single string without the trailing newline
7926	MailingList method returns a new MailingList instance associated with the given domain and name
7927	Subscriber method creates and returns a new Subscriber instance associated with a MailingList.
7928	Subscribers retrieves a list of subscribers from the mailing list's domain and returns them along with any errors encountered during the process.
7929	MailingLists retrieves mailing lists from the domain's CGP and returns them along with any errors encountered.
7930	NewByteKeyItem creates a new byte key item and returns its pointer
7931	CompareBytes will compare two byte slices and return the result of the comparison.
7932	CompareInt will compare two integer key items and return their difference
7933	Malloc allocates memory and returns a pointer to it, optionally incrementing allocation stats.
7934	Free will release memory at pointer p and increment free count if debugging is enabled
7935	Stats retrieves memory allocation statistics and returns them as a string.
7936	FreeOSMemory releases OS memory and returns an error if unsuccessful.
7937	Add method adds an item to a segment and updates relevant statistics and pointers
7938	NewSegment creates a new segment with randomized properties and returns it.
7939	Assemble combines multiple segments into a skiplist and updates the builder's store.
7940	CompareNodeTable will compare two pointers and return their difference as an integer.
7941	New creates a new NodeTable with hash and key equality functions, initializes fast and slow hash tables, inserts it into a database buffer, and returns the table.
7942	Stats method returns formatted string with node table statistics
7943	MemoryInUse calculates total memory usage based on item size and hash table counts
7944	Get will return a pointer to a value based on a key from a NodeTable or nil if not found
7945	Update will modify or insert a node in the table and return whether updated and the old pointer.
7946	Remove will delete a key from NodeTable and return success status and pointer to the deleted node.
7947	Close will reset counters, clear hash tables, allocate buffer, delete node table from database, and free buffer.
7948	MemoryInUse calculates total memory usage across database instances.
7949	debugMarkFree sets node's data to free block content
7950	Seek will move the iterator to the specified byte slice and skip unwanted items
7951	Next advances the iterator, increments count, skips unwanted items, and refreshes if needed.
7952	Refresh iterator to next item if valid
7953	Close iterator resources including snapshot, buffer, and underlying iterator
7954	NewIterator creates a new iterator from a snapshot and returns it. If the snapshot is not open, it returns nil.
7955	SeekFirst initializes MergeIterator to the first valid node by iterating through its sub-iterators.
7956	Next advances the MergeIterator to the next item, updating its current node and re-balancing the heap if necessary.
7957	Seek checks iterators, appends valid nodes to heap, initializes heap, moves to next item, returns if any iterator found item
7958	Keys method returns a slice of byte slices containing keys from a linked list
7959	Remove will delete a node from the list using a key and return the deleted node or nil if not found
7960	Add will add a node to the head of the NodeList.
7961	NewWithConfig creates a Skiplist instance with a given configuration, handling memory management based on architecture and config settings.
7962	FreeNode will free a node in the skiplist and increment the node frees count in stats.
7963	MakeBuf creates an ActionBuffer with initialized predecessors and successors arrays.
7964	Skiplist's Size method returns total size of an item and its sub-items.
7965	NewLevel determines the next level for a skiplist based on a random function and updates the skiplist's level atomically.
7966	Insert will add an item to the skiplist and return true if successful
7967	Insert2 inserts an item into a skiplist using random levels and returns the inserted node and a flag indicating if it was new.
7968	Insert3 inserts an item into a skiplist and returns the inserted node and a success flag.
7969	Delete node from skiplist if found using compare function.
7970	deleteNode from Skiplist using barrier token and stats
7971	GetRangeSplitItems will split a skiplist into multiple ranges based on the given number of ways and return the items in each range
7972	Bytes method returns byte slice representation of Item data.
7973	ItemSize calculates the size of an item based on its data length and returns it as an integer.
7974	KVFromBytes extracts key-value pairs from byte slice and returns them
7975	CompareKV compares two key-value pairs and returns their comparison result.
7976	Emit sends an event body to all handlers asynchronously and returns the number of handlers triggered.
7977	UnregisterHandler removes a handler from the controller's list and returns an error if the handler is not found
7978	IsHandlerRegistered checks if a handler is registered for a given name.
7979	CompareNitro compares two Nitro pointers based on their id field and returns the difference as an integer.
7980	DefaultConfig initializes a Config with default settings and returns it.
7981	Delete method on Writer deletes byte slice returning success status
7982	GetNode retrieves a node from the store using a byte slice, checks existence, and returns it or nil.
7983	SetKeyComparator updates Config's key comparison functions.
7984	UseMemoryMgmt sets memory management functions for amd64 architecture
7985	NewWithConfig creates a new Nitro instance with the given configuration and initializes its internal structures.
7986	MemoryInUse returns total memory usage by summing up aggregated store stats and snapshots memory usage
7987	Close will shut down Nitro instance, wait for snapshots, release resources, and manually free nodes if needed.
7988	NewWriter creates a new writer, adds it to the list, initializes context, starts collection worker, and optionally free worker.
7989	SnapshotSize calculates the size of a Snapshot struct pointed to by p in bytes.
7990	Encode will write a snapshot's sequence number to a buffer and then to a writer, returning an error if there isn't enough space or writing fails.
7991	Decode reads 4 bytes from reader to set snapshot's sequence number.
7992	Open will increment refCount and return true if it was non-zero, otherwise false
7993	CompareSnapshot will compare two Snapshot objects and return the difference between their sn fields
7994	GC will run garbage collection if it's not already running
7995	GetSnapshots retrieves all snapshots from Nitro's snapshots storage.
7996	MemoryInUse calculates total memory usage by iterating over database instances.
7997	CompareBS will return the difference between two BarrierSession seqno values
7998	Acquire will return a BarrierSession and retry until it's active or nil if not.
7999	Release decreases barrier session's live count and handles cleanup if necessary.
8000	FlushSession updates session object reference and sequence number atomically.
8001	Apply updates the StatsReport with data from another Stats instance, including node distribution, conflicts, soft deletes, allocations, frees, and memory usage.
8002	AddInt64 updates src integer value atomically based on whether it's local or not
8003	AddUint64 updates src with val using atomic operation if s.isLocal is false
8004	Merge will combine statistics from another Stats object into the current one, resetting counters in the source.
8005	GetStats retrieves statistics from a skiplist and returns them in a report.
8006	NewIterator creates a new iterator for the skiplist with the given compare function and buffer.
8007	SeekFirst sets iterator to first element
8008	SeekWithCmp checks if an item exists using comparison functions and updates iterator state accordingly.
8009	Seek method updates iterator state based on search result and returns whether item was found.
8010	Valid checks if iterator is still valid after reaching tail.
8011	It will soft-delete the current item, call delete helper, move to the next item, and set deleted flag.
8012	Next advances the iterator to the next item, handling deletions and updating pointers.
8013	Init initializes SkuM1SmallBuilder registers it with skurepo using SkuName
8014	FromURL replaces substrings in a URL and returns the modified URL.
8015	ToURL converts a folder path to a URL by replacing specified substrings.
8016	TupleHeader.Size calculates total size based on version, field count, and field size.
8017	WriteTo method encodes TupleHeader to binary format and writes it to Writer returning written bytes and error if any
8018	Static serves static files from a directory with optional options like logging and index files.
8019	Read configuration file and parse lines into sections and key-value pairs
8020	Del method removes a key from a section in Config if it exists and deletes the section if empty.
8021	WriteTo method saves config to file with proper formatting and returns error if failed
8022	checkSection trims whitespace from input, checks if it's a section header, returns stripped text and validity flag
8023	checkLine parses a line into key-value pairs and returns them along with a boolean indicating success
8024	checkComment determines if a line starts with any comment prefix
8025	NewResponseWrapper creates a new ResponseWrapper instance wrapping an http.ResponseWriter.
8026	Hijack method returns a net.Conn, bufio.ReadWriter, and error if the wrapped ResponseWriter is a Hijacker
8027	CloseNotify returns a channel that notifies when the response body is closed
8028	DateFormat returns a functional option to set the date format in options
8029	Logger wraps HTTP handler to log requests and responses.
8030	GetAvailableInventory retrieves inventory using a poller for registered SKUs.
8031	Expiration sets token expiration duration.
8032	Claimer sets a claims parser function for JWT token options.
8033	Issuer sets the token's issuer option.
8034	User sets the user token option
8035	Password sets the token option to store a password.
8036	Extractor sets the extractor option for token parsing.
8037	TokenGenerator creates an HTTP handler that generates JWT tokens based on authentication and authorization checks.
8038	Token retrieves a token from HTTP request context or returns empty string.
8039	Claims extracts JWT claims from HTTP request context or returns nil if not present.
8040	Token's String method returns its value or "EOF" based on type, truncating long values.
8041	NewLexer creates a new lexer with the given name, input, and handler.
8042	run will execute lexer states until no more states are available
8043	emit will create a token from the current lexer state and call the handler if the position has changed
8044	skipWhitespace will advance lexer past whitespace characters and ignore them
8045	next method advances lexer position and returns next rune or EOF
8046	LineNum returns the current line number based on the position in the input
8047	Offset calculates the column position of the lexer's current position within its input string.
8048	errorf logs an error message with file name, line number, and offset using the lexer's handler function
8049	lexText processes lexer input to identify and emit tokens based on specific prefixes or characters, handling comments, packages, types, and more until reaching EOF.
8050	lexComment skips whitespace, finds next newline, emits comment token, skips more whitespace, returns lexText state
8051	New creates a new tuple type with given namespace and name and returns it
8052	AddVersion updates a tuple type with new versions and maps field names to their indices.
8053	Contains checks if a field exists in a tuple type
8054	Offset retrieves field's offset and existence from TupleType
8055	TupleType.Versions returns a slice of versions based on the number of versions and their values.
8056	SetPrivateMeta updates the private metadata of a task with a given name and value
8057	SetPublicMeta updates task metadata with a given name and value.
8058	GetRedactedVersion will return a redacted version of the task object while holding a read lock on the mutex.
8059	Equal checks if two Task instances are equal based on their ID, Timestamp, Expires, Status, Profile, and CallerName fields.
8060	HTTP wraps a handler to only allow specified HTTP methods and returns an error response for unsupported methods.
8061	PutUint8 will write a uint8 value to buffer and return bytes written and error if any
8062	PutInt8 will write an int8 value to the buffer and return the number of bytes written and an error if any occurs
8063	PutUint16 will add a uint16 value to the buffer and return the number of bytes written and an error if the value is out of range
8064	PutInt16 will store an int16 value in a buffer and return the number of bytes written and an error if the operation fails
8065	PutUint32 will write a uint32 value to the buffer and return the number of bytes written and an error if the value exceeds the maximum allowed size
8066	PutInt32 will store an int32 value in the buffer and return the number of bytes written and an error if the operation fails
8067	PutUint64 will store a uint64 value in the buffer, determine its size, and update the offsets map, returning the number of bytes written and any errors encountered.
8068	PutInt64 writes an int64 to the buffer and returns the number of bytes written and any errors encountered
8069	NewPackageList creates a new package list with a mutex for synchronization.
8070	PutFloat32 writes a float32 to buffer and returns bytes written and error
8071	Classic creates a new Martini router and middleware stack returns a pointer to ClassicMartini
8072	Languages sets languages option in options struct
8073	Session sets session option
8074	Data extracts ContextValue from http request context or returns empty if not found
8075	URL constructs a full URL path based on given components, ensuring proper formatting and concatenation.
8076	Size returns terminal width and height, initializing termsize if needed, or an error if not initialized.
8077	GetRequestIDFromTaskResponse extracts the request ID from a task response's metadata.
8078	PutString method in TupleBuilder appends a string to buffer along with its type code and size, returning the number of bytes written and any errors encountered
8079	LoadDirectory will recursively load files from a directory using a parser, handling subdirectories and filtering by file extension.
8080	LoadFile opens a file, reads its contents, converts them to a string, and then uses a parser to load the data into a Package, returning any errors encountered during the process.
8081	LoadPackage will parse package details using a parser and return a Package object along with any errors encountered.
8082	NewDecoder creates a new decoder using a registry, reader, default max size, and buffer.
8083	NewDecoderSize creates a new decoder with a registry, max size, buffer, and reader.
8084	Panic will wrap an HTTP handler to log panics and send an internal server error response
8085	DeployVApp returns a VApp and an error based on fake data
8086	UnDeployVApp returns a task element and an error based on fake data
8087	Auth method returns an authentication error for the FakeVCDClient.
8088	QueryTemplate returns a fake VApp template record and an error based on client configuration.
8089	NewEncoder initializes a new encoder with a writer, buffer, and byte slice.
8090	Getter sets the nonce getter option
8091	Setter assigns a nonce setter to options and returns an option.
8092	Age sets the duration for an option and returns it.
8093	Nonce middleware generates, validates, and cleans up nonces using provided options.
8094	NonceValueFromRequest extracts nonce status from request context or returns default if not set
8095	StoreNonce will call a nonce setter function from context and return any error it encounters
8096	PutFloat32Array will write a float32 array to buffer and return bytes written and error if any
8097	PutFloat64Array writes a float64 array to the buffer with appropriate type codes and lengths, returning the number of bytes written and any errors encountered.
8098	Do sends HTTP request and returns response and error.
8099	NewLease initializes a Lease object with given parameters.
8100	Delete method processes HTTP request to delete lease, updates task collection, restocks inventory on success, logs error on failure.
8101	Post handles HTTP requests to create or update a lease returning status code and response data.
8102	ReStock method updates task based on available SKUs or marks it unavailable.
8103	Procurement method processes SKU to create and log task details.
8104	InitFromHTTPRequest reads JSON from HTTP request body and unmarshals it into Lease object setting ProcurementMeta to empty map if nil.
8105	Is checks if the tuple matches the given type based on hash values.
8106	Offset returns the byte offset of a field within a tuple or an error if the field does not exist or has an invalid index.
8107	WriteTo method writes tuple data to writer returning total bytes written and error
8108	PutTuple will store a tuple and its size in buffer, returning the number of bytes written and an error if the tuple exceeds buffer capacity
8109	WriteString writes content to the response writer.
8110	NotFound sets response status to 404 and sends message
8111	Run method starts task, updates status, emits signal, polls, listens, and decorates process handler.
8112	NewWaitGroup creates a new WaitGroup with a specified throttle value.
8113	Add will increment the outstanding count and wait if it exceeds throttle until completed signal received.
8114	Wait will block until all tasks have completed.
8115	Gzip middleware wraps HTTP handlers to compress responses using gzip if accepted by client.
8116	New creates a new InnkeeperClient instance with the given URI, user, and password.
8117	Render's Error method sets HTTP status and writes the first message to response.
8118	Renderer returns a handler to render templates with options and context.
8119	NewClient creates a new PDClient instance with the given API key, URL, and client implementation.
8120	GetTask sends a GET request to fetch a task by ID and parses the JSON response into a TaskResponse object.
8121	WriteImageToHTTP encodes an image to PNG and writes it to HTTP response with appropriate headers.
