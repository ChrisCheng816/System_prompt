0	NewSTM executes a transactional operation using the provided client and application function, optionally prefetching data before applying changes.
1	first returns the lowest revision number from the read set.
2	cmps constructs a list of revision comparison conditions for keys in writeSet.
3	NewSTMRepeatable creates a repeatable STM transaction using the provided client and application function.
4	NewSTMSerializable creates a serializable STM transaction.
5	NewSTMReadCommitted creates a new STM transaction with read-committed isolation level and abort context.
6	NewCertPool reads CA files and adds certificates to a pool.
7	NewCert reads certificate and key files, parses them using a provided or default function, and returns a TLS certificate.
8	Pause will set the peer's state to paused and stop both message readers.
9	Resume will unblock message readers and allow processing to continue.
10	pick selects the appropriate channel to write a raft message based on its type.
11	post sends HTTP POST request asynchronously and waits for response or cancellation.
12	newTxnResp constructs a transaction response based on the request type and recursively handles nested transactions.
13	applyCompare checks if key-value pairs match specified conditions in a read view.
14	OpCompact creates a CompactOp instance with the given revision and applies any provided CompactOption functions.
15	NewPriorityQueue creates a priority queue with the given etcd client and key prefix.
16	Enqueue adds a value to the priority queue with a specified key and priority.
17	NewLeaderStats returns a new LeaderStats with the given ID.
18	Succ updates follower stats with success count and latency metrics.
19	Fail increments the failure count in follower stats.
20	delete removes a watcher and returns the number of remaining broadcasts.
21	startStreamWriter initializes a stream writer with logger, IDs, peer status, follower stats, and Raft instance, then starts it in a goroutine.
22	checkStreamSupport verifies if a version supports a specific stream type.
23	maybeUpdate updates progress if n is greater than Match and resumes if updated; Next is set to n+1. Returns true if updated.
24	IsPaused checks if progress is paused based on its state.
25	needSnapshotAbort checks if snapshot state requires aborting based on match and pending snapshot.
26	add appends an inflight request ID to the buffer, handling wrap-around and growth.
27	growBuf doubles the buffer size or sets it to 1 if empty, ensuring it doesn't exceed max size.
28	freeTo frees up to 'to' inflights and adjusts the buffer accordingly.
29	SaveDBFrom saves db snapshot from reader to file. If file exists, it returns without error. Logs save duration and byte count.
30	DBFilePath checks directory and returns snapshot db file path or error.
31	Set initializes UniqueStringsValue from a comma-separated string.
32	NewUniqueStringsValue creates a new UniqueStringsValue instance from a comma-separated string of unique values.
33	UniqueStringsFromFlag retrieves unique strings from a flag's value.
34	UniqueStringsMapFromFlag retrieves unique string values from a flag set using the specified flag name.
35	Percentiles calculates and returns percentiles of given numbers.
36	VerifyBootstrap checks server config for local member, matching cluster, duplicates, and unset URLs.
37	VerifyJoinExisting checks if the server config can join an existing cluster.
38	hasLocalMember checks if the server's name exists in its initial peer URLs map.
39	advertiseMatchesCluster checks if the initial peer URLs match the advertised peer URLs, returning an error if they do not.
40	ReqTimeout calculates the total request timeout duration.
41	getStatus retrieves the raft status and updates progress if the node is the leader.
42	GetDefaultHost retrieves the default IP address by checking routes and prioritizing IPv4. If not found, it sorts and tries other families until a valid host is chosen or an error occurs.
43	getIfaceAddr retrieves network address information for a given interface index and address family.
44	getIfaceLink retrieves Netlink message for specified interface index.
45	lsCommandFunc lists files/directories based on CLI options.
46	printLs prints directory contents based on user output preference.
47	rPrint recursively prints keys of nodes with optional path formatting based on context flags.
48	NewLeaseRenewerCommand creates a cobra command for lease renewal with flags.
49	Read reads a raft snapshot from a file, validates its integrity, and returns it.
50	GetCipherSuite returns the cipher suite ID for a given name, or false if not found.
51	post sends a POST request to a picker and processes the response.
52	send modifies raft message terms based on message type and appends it to msgs slice.
53	sendHeartbeat sends a heartbeat message to a follower with the minimum matched index.
54	bcastAppend sends append messages to all peers except itself.
55	bcastHeartbeat broadcasts a heartbeat with the last pending request context or nil
56	tickElection increments election timer and promotes node if eligible.
57	tickHeartbeat manages heartbeat and election timeouts, transferring leadership if necessary.
58	stepCandidate handles raft messages based on their type and updates the state accordingly.
59	restore updates raft log with snapshot data if conditions met.
60	promotable returns true if the raft instance's id has a corresponding peer in its peers map.
61	checkQuorumActive determines if the raft node has enough active quorum members.
62	increaseUncommittedSize increases the uncommitted size of the Raft log based on the given entries, ensuring it does not exceed the maximum allowed size.
63	reduceUncommittedSize reduces the uncommitted size based on new entries, ensuring it doesn't go below zero.
64	newPeriodic initializes a Periodic struct with logger, clock, duration, revgetter, compactable, and context.
65	Pause will set the periodic task to paused state.
66	Resume will unblock periodic execution.
67	Lock acquires ownership of the mutex using etcd transactions, waiting if necessary until it can do so.
68	NewLocker creates a sync.Locker using lockerMutex and NewMutex.
69	NewFIFOScheduler creates a scheduler that manages tasks in FIFO order using channels and a condition variable to control execution flow.
70	Schedule adds job to pending queue if scheduler is running.
71	Stop cancels the FIFO operation and waits for it to complete.
72	NewServer initializes a new Server instance with logging, network settings, and proxy mappings.
73	StartServe starts a gRPC server listening on the specified address and handles incoming connections.
74	Stop logs server stop events and gracefully shuts down the gRPC server.
75	Transport handles streaming requests and responses using RPC protocol.
76	RegisterInterruptHandler adds a handler to the list.
77	HandleInterrupts registers handlers for SIGINT and SIGTERM signals and runs them when received.
78	OpGet creates an Op object with specified key and options, ensuring exclusive use of WithPrefix or WithFromKey.
79	OpDelete creates an operation to delete data with options.
80	OpPut creates an operation to put a key-value pair with optional parameters.
81	OpTxn creates a new transaction operation based on comparisons and conditional operations.
82	WithFromKey sets default key and end values for operation.
83	withTop returns a list of OpOptions to sort and limit results based on target and order.
84	Exist checks if any .wal files exist in the given directory.
85	searchIndex finds the last WAL file name with an index less than or equal to the given index.
86	isValidSeq checks if sequence numbers in WAL filenames are consecutive.
87	NewListener creates a network listener with TLS wrapping.
88	TLSInfo.cafiles returns a slice containing the trusted CA file path if specified.
89	ServerConfig generates TLS configuration for servers, handling client authentication and CA files.
90	ClientConfig generates a TLS client configuration based on TLSInfo.
91	newTLSKeepaliveListener wraps a listener with TLS keep-alive configuration.
92	applyV2Request processes V2 requests based on their method.
93	NewRoleCommand creates a Cobra command for role management.
94	roleAddCommandFunc adds a role using the provided name and displays the result.
95	roleGetCommandFunc retrieves a role by name using the Auth.RoleGet method and displays the result.
96	roleGrantPermissionCommandFunc grants permission to a role based on the arguments provided.
97	roleRevokePermissionCommandFunc revokes permission for a role using the provided arguments and displays the result.
98	NewCluster creates a new cluster instance with the specified number of nodes.
99	NewClusterByConfig initializes a cluster using configuration.
100	HTTPMembers constructs a list of client members from cluster members, including peer and client URLs based on TLS info.
101	waitLeader identifies the cluster leader by checking member states and ensuring linearizability through key retrievals.
102	waitNoLeader waits until no member leads.
103	isMembersEqual checks if two member slices are equal after sorting and removing IDs.
104	listenGRPC sets up gRPC listener and bridge.
105	NewClientV3 initializes a gRPC client with TLS and custom dial options.
106	Clone creates a deep copy of the member.
107	Close stops all server components gracefully.
108	Stop logs and closes a member, resetting its server closers.
109	checkLeaderTransition waits until the leader transitions away from its previous value and returns the new leader.
110	Restart restarts a member by creating new listeners and launching it.
111	Terminate logs member termination details, closes it, and removes data directory if specified.
112	Metric retrieves the value of a specific metric from a client URL.
113	InjectPartition cuts peer connections between member and others in testing.
114	RecoverPartition repairs peer connections between a member and others.
115	NewClusterV3 initializes and returns a new ClusterV3 instance.
116	ParseWithDefaults parses jwt options using defaults if not provided.
117	Parse configures JWT options from a map.
118	Key retrieves the appropriate key based on the JWT signing method.
119	fill sets response header fields using values from header instance.
120	add registers a new watcher if it is up-to-date or creates a mock event if it's behind.
121	Watch registers a new watcher with the stream, ensuring unique IDs and valid ranges.
122	newFileEncoder creates an encoder for writing to a file, using the current offset and previous CRC value.
123	purgeFile deletes old files in a directory based on a maximum count and interval, sending purged filenames to a channel.
124	Set splits a comma-separated string into slice and assigns to ss.
125	NewStringsValue creates a new StringsValue instance from a string.
126	StringsFromFlag retrieves a list of strings from a command-line flag.
127	Cluster extracts the first two segments from a version string.
128	NewPageWriter creates a PageWriter to write pages to an io.Writer.
129	watch registers a new watcher for a given key and returns it along with any stored events.
130	notify sends an event to all watchers interested in the modified path.
131	clone returns a new watcherHub with the same event history.
132	isHidden determines if the keyPath is hidden relative to watchPath.
133	createEtcdLogFile creates an etcd log file.
134	runEtcd starts the etcd server or proxy, handling errors and readiness notifications.
135	stopEtcd stops the etcd server gracefully using a signal, or forcefully after 5 seconds.
136	handle_SIGQUIT_ETCD_AND_REMOVE_DATA_AND_STOP_AGENT stops etcd, removes data, and stops the agent.
137	LimitListener limits the number of concurrent connections to a listener using a channel.
138	allowMethod checks if the HTTP method matches any allowed methods; if not, it sets the Allow header and returns false.
139	NewWatchServer creates a new watch server with etcd configuration details.
140	FiltersFromRequest extracts filter functions based on watch request types.
141	newPipelineHandler creates an HTTP handler for pipeline operations.
142	checkClusterCompatibilityFromHeader verifies cluster compatibility based on header information and logs warnings or errors accordingly.
143	KeyExists checks if a key exists in etcd using clientv3.
144	KeyMissing checks if the given key is missing in etcd.
145	ValidateSecureEndpoints verifies HTTPS endpoints using TLSInfo and returns a list of secure endpoints or errors encountered during verification.
146	putNewKV inserts a new key-value pair into etcd with a lease.
147	newUniqueEphemeralKey generates a unique ephemeral key with a given prefix.
148	NewUpdateDirCommand returns a CLI command to update an existing directory.
149	updatedirCommandFunc updates a directory key with TTL.
150	handleBackup performs a backup of a member's data and WALs to specified directories, optionally including v3 metadata.
151	saveDB copies database state from source to destination, updating indices and removing specific buckets.
152	NewWatchCommand creates a Cobra command for performing watch operations with various configurable options.
153	NewV3 initializes a new Manager with a logger.
154	Save creates a consistent state snapshot of etcd.
155	Status calculates and returns the integrity, size, and key count of a BoltDB database at the specified path.
156	Restore configures and restores an etcd cluster from a snapshot.
157	NewAuthStore initializes a new AuthStore with the given parameters.
158	NewTokenProvider creates a TokenProvider based on the given tokenOpts and logger.
159	MendPeer resumes paused peer connections by ID.
160	removePeer stops and removes a known or unknown remote peer from Transport.
161	ActivePeers returns the count of active peers in transport.
162	resolveTCPAddrDefault resolves a TCP address by default resolver and returns a TCPAddr object.
163	resolveTCPAddrs resolves TCP addresses from URLs, handling parsing and resolution errors.
164	urlsEqual checks if two URL lists are equal after resolving TCP addresses and sorting.
165	URLStringsEqual checks if two slices of URLs are equal after parsing them from strings, using zap logger for logging.
166	NewLeaseCommand creates a Cobra command for lease management.
167	NewLeaseGrantCommand creates a Cobra command for granting leases.
168	leaseGrantCommandFunc grants a lease with a specified time-to-live and displays the response.
169	NewLeaseRevokeCommand creates a Cobra command to revoke leases.
170	leaseRevokeCommandFunc revokes a lease using the provided ID and displays the response.
171	NewLeaseTimeToLiveCommand creates a cobra command for getting lease info.
172	leaseTimeToLiveCommandFunc processes lease TTL command with options and displays response.
173	NewLeaseListCommand creates a Cobra command to list active leases.
174	leaseListCommandFunc retrieves and displays lease information using the provided command context.
175	NewLeaseKeepAliveCommand creates a Cobra command to keep leases alive.
176	leaseKeepAliveCommandFunc handles keeping a lease alive, displaying responses until expiration or revocation.
177	NewAlarmCommand creates a Cobra command for managing alarms.
178	alarmDisarmCommandFunc handles the disarm command, ensuring no arguments are passed, and displays the result.
179	alarmListCommandFunc lists alarms using a command and displays the response.
180	Flags retrieves a list of configuration flags for Etcd.
181	EmbedConfig constructs an etcd configuration using URLs and settings from the Etcd struct.
182	PPProfHandlers returns a map of HTTP handlers for profiling endpoints using Go's pprof package.
183	NewBackendQuota initializes a quota based on the server's configuration.
184	NewClusterProxy initializes a cluster proxy with gRPC resolver.
185	NewHandler returns an HTTP handler for managing leases with a wait channel.
186	TimeToLiveHTTP sends a lease renewal request to the server and returns the response.
187	newWatcherBatch creates a batch of watchers for the given events, ensuring each watcher is notified only once based on its minimum revision.
188	add watcher to group; register intervals; manage watchers efficiently.
189	contains checks if the watcher group has a watcher for the specified key or intersects with the given range.
190	delete removes a watcher from the group, updating associated intervals.
191	choose selects up to maxWatchers watchers from the watcherGroup. If not enough, it chooses all.
192	watcherSetByKey combines key-specific watchers with range-based watchers, returning a unified watcher set.
193	Compare determines the relative order of two intervals based on their begin and end times.
194	successor finds the next node in order by traversing the binary search tree.
195	updateMax updates the maximum value in the interval tree.
196	visit recursively checks intervals against a node's interval and its children.
197	Delete removes an interval from the tree and fixes up the structure if necessary.
198	Insert will add a new interval to the IntervalTree.
199	rotateLeft performs a left rotation on interval nodes in an IntervalTree, updating parent pointers and max values accordingly.
200	replaceParent updates the parent pointers and restructures the interval tree when replacing one node with another.
201	MaxHeight calculates the maximum height of an interval tree based on its length.
202	Visit traverses interval tree and applies visitor to each overlapping interval.
203	find interval node matching given interval
204	Find searches for interval ivl in the tree and returns its IntervalValue or nil if not found.
205	Intersects checks if an interval tree intersects with a given interval.
206	Contains checks if an interval tree contains a given interval.
207	Stab retrieves all intervals that overlap with input interval iv and returns them. If no overlapping intervals exist, it returns nil.
208	Union updates IntervalTree with intervals from another tree and a new interval.
209	NewExactReadCloser wraps an io.ReadCloser with a total byte count.
210	NewElection creates a new Election instance with the given session and key prefix.
211	ResumeElection creates a new Election instance with specified parameters.
212	Proclaim updates leader key value only if current session is leader.
213	Resign revokes leadership by deleting leader key if session exists
214	Leader retrieves the current leader from etcd.
215	Observe starts watching for election events and returns a channel to receive responses.
216	check triggers alarm if quota is exceeded.
217	NewExecWatchCommand creates a CLI command to watch a key and execute a command on change.
218	execWatchCommandFunc executes a command when a key changes in etcd.
219	NewListener creates a new listener using the given URL and TLS information.
220	NewRoundTripper creates a timeout transport for HTTP round trips.
221	createPostRequest constructs a POST HTTP request with specified URL, path, body, content type, and headers.
222	checkPostResponse validates HTTP response based on status code and body content, handling specific errors like version incompatibility or cluster ID mismatch.
223	serverVersion retrieves the server's version from HTTP headers, handling backward compatibility with etcd 2.0.
224	checkVersionCompatibility verifies compatibility between server and cluster versions.
225	setPeerURLsHeader sets the X-PeerURLs header on an HTTP request with URLs.
226	addRemoteFromRequest extracts remote server information from HTTP headers and adds it to the transporter.
227	NewKeysAPIWithPrefix creates a new KeysAPI instance with a specific prefix.
228	TTLDuration converts TTL to a duration in seconds.
229	SetPflagsFromEnv sets flags from environment variables based on a given prefix.
230	FlagToEnv converts a flag name to its corresponding environment variable name.
231	excerpt extracts a substring with specified prefix and suffix lengths.
232	passConfChange checks if the entry type is ConfigChange and returns a message.
233	printInternalRaftRequest prints details of an internal Raft request.
234	listEntriesType processes raft entries based on type and applies filters before printing or decoding them using a specified command.
235	newLog creates a new raftLog instance with unlimited size.
236	newLogWithSize initializes a raftLog instance with given storage, logger, and maxNextEntsSize, setting up unstable and committed/applied pointers based on storage indices.
237	findConflict identifies the first log entry that conflicts with the given entries and returns its index.
238	nextEnts retrieves the next batch of unapplied entries from the log.
239	allEntries retrieves all log entries from raftLog, retrying on compaction errors.
240	slice retrieves a portion of log entries within specified bounds, handling both stable and unstable segments.
241	NewSession creates a session with a client, handling lease management and context cancellation.
242	Close closes the session, revoking it within its TTL.
243	WithTTL sets session TTL if positive.
244	WithLease returns a SessionOption to set the leaseID in sessionOptions.
245	addRequest handles adding read requests to the queue if they're not already pending.
246	recvAck updates the read index for a message and returns the total number of acknowledgments received.
247	advance processes messages in the read queue, returning matching read index statuses and updating the queues accordingly.
248	lastPendingRequestCtx retrieves the last pending request context from the queue
249	Start initializes and runs various goroutines for an Etcd server.
250	start initializes configuration defaults and prepares server components before running.
251	Process handles Raft messages, rejects from removed members, and steps them otherwise.
252	ReportSnapshot forwards snapshot status to the report.
253	MoveLeader transfers leadership in etcd between members, waits for confirmation, and logs the process.
254	TransferLeadership transfers leadership to the most connected node if the current node is a leader in a multi-node cluster.
255	configure applies a Raft configuration change, waits for it to apply, and returns the updated membership list or any errors encountered.
256	sync sends a synchronization request to etcd server using a proposed proposal within a specified timeout.
257	publish attempts to publish attributes to etcd using raft, handling retries and errors.
258	applyEntryNormal applies V3 requests to the server if they haven't been applied before.
259	applyConfChange processes configuration changes in etcd server.
260	monitorVersions monitors etcd versions and updates cluster version accordingly.
261	goAttach schedules a function to run asynchronously after ensuring the server hasn't stopped.
262	NewRoundrobinBalanced creates a round-robin balanced picker for gRPC load balancing.
263	Pick selects a subconnection for RPC and logs its outcome.
264	NewTLSListener creates a TLS-enabled listener from an existing net.Listener.
265	acceptLoop manages TLS connections, handling handshakes and distributing established connections using a wait group and context.
266	SetEndpoints updates ResolverGroup's endpoints and notifies resolvers about the new addresses.
267	Target retrieves the target endpoint based on resolver group ID.
268	Target constructs a target URL using the given ID and endpoint.
269	Build creates a new Resolver for the given target and registers it with the resolver group.
270	Handle processes HTTP requests based on method type.
271	NewElectionCommand creates a Cobra command for performing election operations with optional flags.
272	nodeToMember converts a NodeExtern to a Member struct.
273	NewTmpBackend creates a temporary backend with specified batch interval and limit, returning the backend instance and its path.
274	newRevision creates a new Revision instance with logging, clock, retention, revision getter, and compactor.
275	Run starts a goroutine to periodically compact revisions based on retention settings.
276	Pause marks the revision as paused.
277	Resume will unblock the revision's paused state allowing further operations.
278	voteRespMsgType returns the corresponding response message type for a given vote-related message type. If the input is not a recognized vote message, it panics.
279	DescribeMessage formats a message string based on its fields and entries.
280	DescribeEntry formats an entry using a formatter or default formatting.
281	DescribeEntries formats a list of entries using a formatter.
282	SetLogger sets the global logger using a mutex lock to ensure thread safety.
283	GetLogger retrieves the current logger instance.
284	maybeFirstIndex calculates next index based on snapshot.
285	maybeLastIndex returns the last index or snapshot index if available.
286	maybeTerm retrieves the term for a given index or indicates if it's out of range.
287	shrinkEntriesArray reduces the size of the entries array when possible.
288	SaveSnap saves the snapshot to the WAL and Snapshotter, then releases the lock.
289	New initializes a new client instance with the provided configuration or returns an error if no endpoints are available.
290	NewCtxClient creates a new Client with a cancellable context.
291	NewFromURL creates a new client from a given URL.
292	Close cancels client operations, closes watcher, lease, resolver group, and connection.
293	Endpoints returns a copy of client's endpoint list.
294	SetEndpoints updates client endpoints and resolver group.
295	Sync synchronizes the client's endpoints with the member list.
296	dialSetupOpts sets up gRPC dial options based on client configuration and credentials.
297	Dial creates a gRPC client connection to the specified endpoint using direct dialing credentials.
298	dialWithBalancer establishes a gRPC connection using a balancer.
299	dial establishes a gRPC connection to a target server using specified credentials and options.
300	WithRequireLeader adds leader requirement metadata to the context.
301	roundRobinQuorumBackoff implements a backoff strategy that waits for a configurable duration after completing a round-robin quorum check.
302	isHaltErr determines if the given error indicates the operation should halt based on the context and error code.
303	NewLease wraps a clientv3 Lease with a prefix.
304	IsCreate checks if the event type is put and the create revision matches the modification revision.
305	Err returns an error based on WatchResponse's state.
306	IsProgressNotify checks if WatchResponse indicates progress notification.
307	RequestProgress sends a progress request on the watcher's gRPC stream or retries if the context is done or the stream is closed.
308	nextResume retrieves the first non-nil watcher stream from the resuming queue.
309	dispatchEvent processes a gRPC WatchResponse and broadcasts or unicast the response based on the event type and watch ID.
310	broadcastResponse sends a response to all subscribers or closes their streams if done
311	unicastResponse sends a response to a specific watch ID or drops it if the stream is closed.
312	joinSubstreams waits for all substreams to finish.
313	toPB converts a watch request to a Protocol Buffers message.
314	toPB converts progress request to protocol buffer watch request.
315	Contains checks if a value exists in an unsafe set.
316	ContainsAll checks if an unsafeSet includes all specified strings.
317	Equals checks if two sets contain the same elements.
318	Values retrieves all string values from the unsafe set.
319	Copy creates a new unsafe set with the same elements.
320	Sub returns a new set containing elements in us but not in other.
321	v2MembersURL prepends the default V2 members prefix to the given URL's path.
322	NewMigrateCommand creates a Cobra command for migrating keys between stores.
323	publishEntries processes raft entries and commits them or updates configuration accordingly.
324	openWAL opens a WAL for the raft node using a snapshot.
325	replayWAL replays the Write-Ahead Log for the raft node.
326	stop HTTP, closes channels, and stops the raft node.
327	NewWatchCommand creates a cobra command for watching events on keys or prefixes.
328	InitialState returns initial Raft state from memory storage.
329	SetHardState updates the hard state in MemoryStorage.
330	Entries retrieves a range of entries from MemoryStorage.
331	Term retrieves the term at index i from the memory storage, handling compacted and unavailable cases.
332	LastIndex retrieves the last index from MemoryStorage.
333	FirstIndex retrieves the first index in MemoryStorage.
334	Snapshot method returns the current snapshot.
335	ApplySnapshot updates the memory storage with a valid snapshot.
336	Compact reduces the storage size by removing entries before the specified index.
337	Unreachable updates the index of picked URL if it matches the given URL.
338	NewEndpointCommand creates a Cobra command for managing endpoint-related subcommands.
339	epHealthCommandFunc checks health of etcd endpoints using CLI flags.
340	NewElectCommand creates a Cobra command for leader election.
341	NewDefragCommand creates a cobra command for defragmenting etcd storage.
342	RegisterBuilder registers a balancer builder with given configuration.
343	Builder constructs a new load balancer with the given ClientConn.
344	recordTransition updates connectivity state counters and evaluates new state based on counts.
345	doSerialize checks auth, executes get, and validates token revision.
346	send processes a WatchResponse, filtering events and updating state accordingly.
347	post sends a watch response or cancels after a timeout.
348	OriginAllowed checks if the origin is allowed based on CORS settings.
349	IsHostWhitelisted checks if the host is whitelisted.
350	Valids returns a sorted list of valid string values from SelectiveStringValue.
351	NewSelectiveStringsValue creates a SelectiveStringsValue instance with a set of valid strings.
352	NewKV wraps a KV client with a specified prefix.
353	NewURLsValue parses a comma-separated list of URLs and returns a new URLsValue instance.
354	URLsFromFlag retrieves URLs from flag set using specified flag name.
355	servePeers starts serving peer traffic using gRPC and HTTP over TLS if enabled.
356	NewStore initializes a new store with given parameters.
357	appendMarkTombstone appends tombstone mark to byte slice if valid.
358	IsDirWriteable checks if the specified directory is writable by attempting to create and remove a temporary file within it.
359	TouchDirAll creates a directory if it doesn't exist and checks if it's writable.
360	CreateDirAll creates a new directory and ensures it's empty.
361	ZeroToEnd truncates file to current position and preallocates space.
362	Open retrieves a file from filePipeline's filec or an error from errc.
363	NewRaftLoggerFromZapCore creates a Raft logger using Zap core and syncer.
364	NewConfig generates a clientv3.Config based on YAML file content.
365	RegisterElectionHandler registers an election handler using gRPC and a serve multiplexer.
366	UpdateCapability updates enabled capabilities based on version.
367	NewLockCommand creates a Cobra command to acquire a named lock with optional TTL.
368	tick invokes the Tick method on raftNode while holding the tickMu mutex.
369	advanceTicks advances the raft node's ticks by a given number.
370	NewAuthCommand creates a Cobra command for enabling or disabling authentication.
371	authEnableCommandFunc enables authentication by creating root role and granting it to user.
372	authDisableCommandFunc disables authentication when executed.
373	RetryKVClient returns a retryable KV client using the provided Client connection.
374	RetryLeaseClient creates a lease client using a retry mechanism.
375	RetryClusterClient returns a retry wrapper for a ClusterClient.
376	RetryMaintenanceClient creates a retry wrapper for MaintenanceClient.
377	RetryAuthClient returns a retrying AuthClient using the given Client's connection.
378	NewSetDirCommand creates a CLI command for setting directory properties.
379	Enter method ensures only a specified number of clients can proceed by using etcd's watch functionality.
380	Leave leaves the barrier by deleting the key and waiting for others.
381	HandleBasic sets up HTTP handlers for various paths on the given mux.
382	WriteError logs and responds with appropriate HTTP error based on input error type.
383	MemberByName retrieves a cluster member by name, ensuring uniqueness.
384	PeerURLs returns a sorted slice of peer URLs from all members in the Raft cluster.
385	ValidateConfigurationChange checks if a Raft cluster's configuration change is valid based on the current members and their URLs.
386	AddMember safely adds a new member to the Raft cluster, updating storage, backend, and logs.
387	RemoveMember removes a member from the RaftCluster by ID, updating store, backend, and logs accordingly.
388	ValidateClusterAndAssignIDs checks if cluster members match and assigns IDs accordingly.
389	Keep updates available revisions for tree index entries.
390	closeRequireLeader closes all leader-required channels and updates keepAlives.
391	resetRecv resets the receiver's lease keep-alive stream.
392	recvKeepAlive handles lease keep-alive responses, updating TTL and sending updates to channels.
393	deadlineLoop manages keep-alive leases, expiring and cleaning up those that exceed their deadline.
394	sendKeepAliveLoop sends keep-alive requests for expired leases to the given LeaseKeepAliveClient stream.
395	NewKV initializes a new leasing KV store and returns it along with a close function and session wait function.
396	rescind deletes a lease if its revision is older than the given revision.
397	LeaseValue creates a Compare object for lease key comparison.
398	ValueBytes retrieves byte value from target union.
399	WithRange sets the RangeEnd field to end byte array.
400	WithPrefix updates RangeEnd with prefix of Key.
401	mustInt64 converts an interface to int64, panicking if not possible.
402	mustInt64orLeaseID converts input to int64, preferring LeaseID if possible.
403	Next returns the next batch of service updates from the gRPC watcher.
404	getJournalWriteSyncer creates a new journal writer for logging.
405	newKV creates a new key-value node with given path, value, index, parent, expiration, and store.
406	newDir constructs a directory node with specified properties.
407	Read retrieves the node's value or returns an error if it's a directory.
408	Write updates the node's value and modified index if it's not a directory.
409	List returns a slice of child nodes if the current node is a directory; otherwise, it returns an error.
410	GetChild retrieves a child node by name. Returns error if node is not a directory or child does not exist.
411	Add method adds a child node to the current directory if it doesn't already exist.
412	Remove deletes a directory or file, optionally recursively, and invokes a callback.
413	Compare checks if node's value and index match previous values. Returns true if they do, and indicates which type of mismatch occurred if they don't.
414	Clone creates a deep copy of the directory or file node.
415	isConnectedToQuorumSince checks if at least half plus one member is connected to the quorum.
416	isConnectedSince checks if the transport has been active since the specified time for the given remote ID.
417	numConnectedSince counts the number of members connected since a given time.
418	longestConnected finds the member with the longest active connection time.
419	isTornEntry checks if data contains a zeroed sector, indicating a torn write.
420	StartMockServersOnNetwork initializes mock servers based on the specified network type.
421	StartAt initializes and starts a gRPC server at the specified index if it's not already running.
422	StopAt stops the gRPC server at the specified index and cleans up related resources.
423	Stop iterates over mock servers, stopping each one, and waits for all to complete.
424	NewCheckCommand creates a Cobra command for checking etcd cluster properties.
425	NewCheckPerfCommand creates a Cobra command for checking etcd cluster performance.
426	NewCheckDatascaleCommand creates a Cobra command to check data scale.
427	NewGetCommand creates a Cobra command for retrieving keys or ranges of keys with various options.
428	NewGetCommand defines a CLI command to retrieve a key's value with optional sorting and quorum requirements.
429	PickPeerURL selects a random peer URL from a member's list.
430	HandleMetricsHealth sets up HTTP handlers for metrics and health checks.
431	NewRemoveCommand returns a CLI command for removing keys or directories.
432	rmCommandFunc deletes a key or directory recursively.
433	checkIntervals validates intervals in requests, ensuring no duplicates or overlaps.
434	ReportEventReceived decrements pending events gauge and increments total events counter by n.
435	RegisterKVHandler registers a gRPC handler for KV service using the provided connection.
436	RegisterWatchHandler registers a gRPC handler for watching events using the provided client connection.
437	RegisterLeaseHandler registers a handler for lease-related RPCs using gRPC.
438	RegisterClusterHandler registers a gRPC handler for the Cluster service on the given ServeMux using the provided client connection.
439	RegisterMaintenanceHandler registers a maintenance handler using gRPC.
440	RegisterAuthHandler registers an authentication handler on the given gRPC server.
441	startEtcd starts an etcd server, registers an interrupt handler, waits for it to join the cluster, and returns channels for stop notifications and errors.
442	identifyDataDirOrDie checks a directory's contents and returns its type or dies on error.
443	openLast opens the last WAL file in the specified directory.
444	gotLeader resets leader channel if it's not empty.
445	lostNotify returns a channel indicating leader loss.
446	newGRPCProxyCommand creates a Cobra command for grpc-proxy with a start subcommand.
447	NewMemberCommand creates a Cobra command for managing member-related subcommands.
448	NewMemberAddCommand creates a Cobra command for adding a member to a cluster.
449	NewMemberRemoveCommand creates a Cobra command to remove a member from the cluster.
450	NewMemberUpdateCommand creates a Cobra command to update a cluster member.
451	NewMemberListCommand creates a cobra command for listing cluster members.
452	memberAddCommandFunc adds a new member to the cluster, validates arguments, handles URLs, and updates configuration accordingly.
453	memberRemoveCommandFunc handles removing a member using the provided member ID.
454	memberUpdateCommandFunc updates a member's peer URLs using the provided member ID.
455	memberListCommandFunc retrieves and displays member list using provided command context.
456	Open initializes a WAL instance at the specified directory path using the given snapshot.
457	OpenForRead opens a WAL file for reading using the given snapshot index.
458	Verify checks the consistency of a WAL directory against a given snapshot.
459	Close closes the WAL file and its associated locks.
460	notify sends events to watcher if they meet certain conditions.
461	Remove closes the event channel and executes the removal function if set.
462	mkPathDepth constructs a hierarchical path using a given node path and depth, ensuring proper formatting and prefixing.
463	mkV2Node converts an etcd v3 KeyValue to a v2 store NodeExtern.
464	prevKeyFromPuts retrieves the previous key-value pair from a transaction response with a non-zero create revision.
465	NewWeightedReport creates a new weighted report using the given report and precision.
466	NewURLsMapFromStringMap creates a map of URLs from a string map using a separator.
467	String returns a sorted, comma-separated list of URL pairs from the map.
468	URLs returns sorted list of all URLs from the map.
469	parse parses a comma-separated list into a map of keys to lists of values.
470	NewClientHandler sets up an HTTP handler for etcd server interactions.
471	writeKeyEvent handles writing key events to HTTP response.
472	writeKeyError logs and handles key errors, sending appropriate responses.
473	getUint64 retrieves a uint64 value from URL form data using a specified key.
474	getBool extracts a boolean from form data using the specified key.
475	waitDeletes watches for deletions of keys under a prefix until none remain or ctx cancels.
476	AddOutputPaths updates zap configuration with additional output paths, ensuring no duplicates and sorting them.
477	NewConfig creates a new configuration instance with default values.
478	PeerURLsMapAndToken generates a URL map and token based on configuration settings, handling discovery and static configurations.
479	GetDNSClusterNames retrieves DNS cluster names using SRV records for HTTPS and HTTP services.
480	checkBindURLs validates URLs used for binding, ensuring they use IPs or localhost.
481	GetCluster retrieves cluster node addresses using DNS SRV and TCP resolution.
482	GetClient fetches service URLs using DNS SRV records and constructs SRVClients.
483	GetSRVService constructs an SRV service name based on the given inputs.
484	ReadDir reads directory contents, filters by extension if specified, and returns sorted names.
485	compact performs a compaction on etcd using the specified revision.
486	defrag defragments a cluster endpoint with a timeout and handles errors.
487	NewUserCommand creates a Cobra command for managing users.
488	userAddCommandFunc handles adding a user with optional interactive password input.
489	userGetCommandFunc fetches and displays user details using the provided username.
490	userChangePasswordCommandFunc changes the password for a specified user.
491	addEvent inserts event into history queue updates lastIndex and startIndex returns the event.
492	scan retrieves an event based on the given key and index in the event history.
493	clone returns a deep copy of the event history.
494	openSnapshotBackend renames a snapshot file and opens a backend with the new path.
495	openBackend opens a backend database at the specified path, with a timeout and logging.
496	recoverSnapshotBackend restores the snapshot backend using the given snapshot data.
497	NewUpdateCommand defines a CLI command for updating keys.
498	updateCommandFunc updates a key-value pair with an optional TTL using the KeysAPI.
499	frontAndBack retrieves the first and last items from a stats queue.
500	Insert adds a RequestStats to the stats queue, managing size and overflow.
501	Rate calculates per-second processing and bandwidth rates from stats queue.
502	Clear resets the statsQueue's state.
503	UniqueStrings generates a slice of unique random strings of specified length.
504	RandomStrings generates a slice of random strings.
505	IsKeyNotFound checks if the error indicates a key not being found.
506	IsRoleNotFound checks if the error message matches a regular expression indicating a role not found.
507	IsUserNotFound checks if the error indicates a user not found issue.
508	JoinCluster initializes a discovery instance and joins a cluster using the provided configuration.
509	GetCluster retrieves cluster information using discovery URL and proxy URL.
510	newProxyFunc creates a proxy function from a given URL, logging the operation if a logger is provided.
511	isSafeRetry determines if a retry is safe based on the error type and retry policy.
512	withRetryPolicy returns a retryOption that applies the given retry policy to the options object.
513	withAuthRetry returns a retryOption with applyFunc setting o.retryAuth to retryAuth.
514	withMax returns a retryOption that sets the maximum number of retries.
515	withBackoff returns a retryOption with its applyFunc set to set the given backoffFunc on the options object.
516	RecvAppendReq updates server state and tracks request stats.
517	SendAppendReq updates server stats by becoming leader, inserting request stats, and incrementing send count.
518	merge combines bucket buffers, sorts them, and removes duplicate keys, keeping the most recent updates.
519	deleteRevKey deletes a key only if its revision matches the given value
520	isMemberBootstrapped checks if a cluster member is bootstrapped by verifying its client URLs.
521	GetClusterFromRemotePeers fetches cluster info from remote peers using HTTP.
522	getClusterFromRemotePeers fetches and processes cluster members from remote peers to form a Raft cluster.
523	getRemotePeerURLs retrieves and sorts URLs of remote peers in a Raft cluster.
524	getVersions retrieves versions for all cluster members using RaftCluster.
525	decideClusterVersion determines the highest compatible cluster version among members using their versions.
526	getVersion fetches and parses the version information from a set of peer URLs.
527	NewTimeoutDetector creates a TimeoutDetector instance with a maximum duration and initializes a record map.
528	Reset clears timeout records in detector.
529	Observe checks if a duration has exceeded maxDuration since last observation.
530	NewPeerHandler constructs an HTTP handler for peer communication.
531	put updates the key index with a new revision, ensuring it's newer than the current one. If not, it panics.
532	`tombstone` updates key index generations and handles unexpected states.
533	get retrieves revisions based on a given revision number.
534	Since returns revisions from the key index starting from the given revision.
535	keep updates key index generations by removing unnecessary tombstones.
536	findGeneration searches for the generation containing the specified revision.
537	cancelWatcher removes a watcher from various collections and decrements counters.
538	syncWatchersLoop continuously synchronizes watchers with the store, adjusting wait duration based on sync progress.
539	syncVictimsLoop continuously moves victims and updates watcher states until stopped.
540	moveVictims moves victims to unsynced or synced based on their minRev and currentRev.
541	kvsToEvents converts key-value pairs to events based on watcher group membership and tombstones.
542	notify sends watch notifications to watchers and handles slow watchers by moving them to a separate batch.
543	isOpFuncCalled checks if any func option contains the specified operation name.
544	UnsafePut calls unsafePut on batchTx to store key-value pair without transaction safety checks.
545	UnsafeSeqPut inserts a key-value pair into bucketName without checking for duplicates.
546	UnsafeRange retrieves a range of keys from a bucket without checking for consistency.
547	UnsafeDelete deletes a key from a bucket, logging errors if they occur.
548	UnsafeForEach applies a visitor function to each key-value pair in a bucket.
549	Commit locks batchTx, commits changes, then unlocks.
550	CommitAndStop commits the transaction and stops further operations.
551	Renew renews the lease identified by id and returns its new TTL or an error if the lease is expired or the lessor is not primary.
552	Attach adds items to a lease identified by id.
553	revokeExpiredLeases revokes up to half the rate-limited number of expired leases if the lessor is primary and handles them through a non-blocking send to expiredC or retries later.
554	checkpointScheduledLeases schedules checkpoints for due leases in batches.
555	expireExists checks if any lease has expired and returns the relevant lease and a boolean indicating if expiration was handled.
556	findExpiredLeases retrieves up to 'limit' expired leases.
557	refresh extends the lease duration by a specified amount.
558	forever sets lease expiry to never expire.
559	Keys returns the item keys from lease state.
560	Remaining calculates the time until lease expiry.
561	NewCompactionCommand creates a cobra command for compacting etcd event history.
562	compactionCommandFunc executes a compaction operation on etcd.
563	NewPutCommand creates a Cobra command for putting a key-value pair into a store.
564	putCommandFunc executes a PUT operation using the provided key and value, handling the response and any errors.
565	NewHandler creates an HTTP handler for reverse proxying requests.
566	NewReadonlyHandler wraps an HTTP handler to make it read-only.
567	NewSetCommand defines a CLI command for setting key-value pairs with options.
568	setCommandFunc sets a key-value pair with options like TTL and previous values using the KeysAPI.
569	waitOnLastRev checks if last revision is released. If not, it waits for its release.
570	GetDefaultInterfaces returns an error indicating default host support is not available on the current OS and architecture.
571	NewSnapshotCommand creates a cobra command for managing etcd snapshots.
572	NewMoveLeaderCommand creates a Cobra command for transferring leadership in an etcd cluster.
573	transferLeadershipCommandFunc transfers leadership to another member using move-leader command.
574	OpenDir opens a directory at the specified path and returns a file descriptor.
575	NewRemoveDirCommand returns a CLI command to remove directories or key-value pairs.
576	rmdirCommandFunc deletes a directory or key using the KeysAPI.
577	NewDelCommand creates a Cobra command for deleting keys with options like prefix, prev-kv, and from-key.
578	delCommandFunc deletes a resource based on command-line arguments.
579	NewExpect creates an ExpectProcess for the given command name and arguments, using the current system environment if none provided.
580	NewExpectWithEnv creates a new Expect process with specified name, arguments, and environment variables.
581	ExpectFunc waits for lines matching a condition and returns the first match.
582	Expect will call ExpectFunc with a callback that checks if the input string contains the specified substring.
583	LineCount returns the current count stored in ExpectProcess.
584	Signal sends a signal to the process being expected.
585	keyFunc generates a key from a RangeRequest protobuf message by marshalling it to a byte slice and converting to a string.
586	Add inserts a RangeResponse into the cache based on the RangeRequest's key and revision, updating the LRU and cached ranges accordingly.
587	Get fetches cache entry for request; removes if compacted or not found.
588	Invalidate removes cached data within specified key range by updating LRU and cached ranges.
589	Compact updates the compacted revision if the input revision is newer.
590	NewUniqueURLsWithExceptions creates a set of unique URLs, allowing specified exceptions.
591	UniqueURLsFromFlag retrieves unique URLs from a flag set.
592	UniqueURLsMapFromFlag retrieves a map of unique URLs from flag set.
593	Hold creates a lease on the barrier key using the client and returns any error encountered.
594	Release deletes the barrier key from the client.
595	Wait checks if a key exists using etcd client.
596	NewLockRacerCommand creates a Cobra command for performing a lock race operation.
597	ElectionTimeout returns the election timeout duration in milliseconds.
598	DialEtcdGRPCServer establishes a gRPC connection to an etcd server with optional TLS configuration.
599	CreateEtcdClientConfig constructs a client configuration for etcd based on member details.
600	CreateEtcdClient creates a new etcd client using the provided options.
601	CheckCompact verifies if etcd compaction occurred at the expected revision.
602	Defrag attempts to defragment etcd using a client created from Member's endpoint within a timeout.
603	RevHash calculates the revision and hash using gRPC.
604	Rev retrieves the current revision number from etcd.
605	Compact etcd client at given revision within specified timeout.
606	IsLeader checks if the member's ID matches the leader's ID in etcd.
607	WriteHealthKey creates an etcd client, sets a health key, and handles errors.
608	SaveSnapshot removes old snapshot, creates new one, logs details, and updates member info.
609	RestoreSnapshot removes old data directories and restores etcd from a snapshot.
610	NewWatcher wraps a clientv3.Watcher with a prefix and a stop channel.
611	NewRawNode initializes a Raft node based on config and peers.
612	Campaign triggers a Raft election heartbeat.
613	Propose sends a proposal to the Raft node.
614	ProposeConfChange proposes a configuration change to the Raft node.
615	ApplyConfChange applies a configuration change to the Raft node.
616	Step processes raft messages; ignores local ones, returns error for unknown peers.
617	Ready returns the current state of a Raft node.
618	WithProgress applies a visitor function to each peer and learner progress in the Raft node.
619	ReportUnreachable sends an unreachable message to the Raft node.
620	ReportSnapshot updates Raft snapshot status.
621	TransferLeader sends a transfer leader message to the specified node.
622	ReadIndex submits a read-only request to the raft node.
623	printcURL prints out the cURL command equivalent for an HTTP request.
624	StartNode initializes a Raft node with given configuration and peers, applying initial configuration entries.
625	RestartNode creates a new node with a Raft instance and starts it in a goroutine.
626	Tick sends a signal when the node is ready to process, or logs a warning if the node is blocked.
627	MustSync checks if the hard states need synchronization based on term and vote changes.
628	NewGRPC17Health initializes a new GRPC17Health instance with the given endpoints, timeout, and dial function. It sets up channels and a health check loop to monitor the health of the endpoints.
629	NeedUpdate checks if address list needs updating based on connection status.
630	dflSignal resets the signal handler for the given syscall signal to default behavior.
631	New creates a new store with the specified namespaces and real-time clock.
632	Index returns the current index value from the store.
633	Get retrieves a node's event based on the path, optionally recursively and sorted. It updates stats and reports success or failure accordingly.
634	Create implements node creation logic in store, handling locking, statistics, and notifications.
635	Set updates or creates a node with a new value and optional expiration.
636	getCompareFailCause returns the cause of a compare failure based on node and comparison details.
637	Delete removes a node from the store recursively if specified.
638	walk traverses the tree at nodePath, applying walkFunc to each component.
639	internalGet retrieves a node from the store using its path.
640	DeleteExpiredKeys removes keys from store that have expired based on cutoff time.
641	checkDir checks if a directory exists under a given parent node and creates it if it doesn't. Returns the node or an error if not a directory.
642	Save will marshal the store's clone to JSON.
643	Recovery restores the store's state from JSON and cleans up expired keys.
644	Next increments the generator's suffix and combines it with the prefix to produce a unique ID.
645	NewMakeMirrorCommand creates a Cobra command for making mirrors in etcd clusters.
646	NewZapCoreLoggerBuilder returns a function to configure a LoggerBuilder with a zap.Logger, core, and write syncer.
647	NewSyncer creates a new Syncer instance with the provided client, prefix, and revision.
648	DropPort adds firewall rules to drop incoming and outgoing TCP traffic on the specified port.
649	SetLatency adjusts network latency settings using `tc` command for specified interfaces.
650	RemoveLatency deletes network latency settings for default interfaces.
651	NewTxnCommand creates a Cobra command for processing transactions interactively.
652	txnCommandFunc handles interactive transaction commands using Cobra.
653	New creates a Compactor based on the specified mode, using a logger, retention period, revision getter, and compactable interface.
654	printResponseKey formats and prints the response based on the specified format.
655	RegisterLockHandler registers a gRPC handler for lock service using the provided connection.
656	grpcHandlerFunc returns an HTTP handler that serves gRPC requests using grpcServer, or passes them to otherHandler otherwise.
657	addCORSHeader sets necessary headers for Cross-Origin Resource Sharing.
658	fallback generates a list of get operations based on input lease operations, excluding gets and adding corresponding range gets.
659	IDFromString converts a hexadecimal string to an ID type.
660	release closes file and deletes lock file
661	EncodedSize calculates the total encoded size of a ValueStruct considering its value, expiration, and metadata lengths.
662	Decode reads values from byte slice into fields.
663	NewMergeIterator creates a MergeIterator to merge multiple Iterators in sorted order, optionally reversing the sort direction.
664	initHeap initializes the heap with valid iterators from s.all.
665	Valid checks if MergeIterator is valid.
666	Key returns the first key from the merge iterator or nil if empty.
667	Value returns the first ValueStruct from the merge iterator's heap, or an empty struct if the heap is empty.
668	Next advances the merge iterator to the next valid item.
669	Seek iterates over all iterators, seeking each to the given key, then initializes a heap.
670	Close closes all iterators in MergeIterator and wraps any errors.
671	Encode encodes the Fid, Len, and Offset fields of valuePointer into the given byte slice.
672	Decode extracts header information from buffer.
673	encodeEntry serializes an Entry object into a buffer along with its CRC32 checksum.
674	SetEntry sets the entry in the write batch, committing if necessary.
675	Set inserts a key-value pair into the write batch with optional metadata.
676	SetWithTTL adds an entry with expiration to the WriteBatch.
677	Delete key from write batch; commit transaction on error.
678	commit commits the transaction and starts a new one, handling errors and synchronization.
679	Flush commits the write batch, discards the transaction, and waits for completion before returning any error.
680	Error retrieves any error encountered during batch write operations.
681	getMemTables retrieves mutable and immutable memtables from DB, increments their references, and returns a cleanup function to decrement them.
682	writeRequests handles writing multiple requests to the database's value log and memtable.
683	ensureRoomForWrite manages memory by flushing data to disk if necessary.
684	writeLevel0Table reads keys from an iterator, filters out those with a specific prefix, adds them to a table builder, and then writes the resulting table to a writer.
685	handleFlushTask manages database flush tasks, handling memtable updates, file creation, and syncing directories.
686	flushMemtable handles flushing memtables to disk, retrying on failure.
687	calculateSize calculates LSM and Vlog sizes for specified directories and sets them using expvar.
688	Size returns the LSM and Vlog sizes of the database.
689	Next increments sequence number, leasing if necessary, and returns current value.
690	Release releases the sequence number back to the database.
691	KeySplits returns sorted list of keys from DB tables matching given prefix.
692	Flatten runs concurrent compactions to consolidate database levels.
693	Mmap maps a file or device to memory, allowing for efficient access and manipulation.
694	Madvise advises the kernel about access patterns to improve performance based on whether readahead is enabled or not.
695	setDiscardTs updates the discard timestamp in a thread-safe manner.
696	hasConflict checks if there's any commit after the read timestamp in the transaction.
697	Set will store a key-value pair in the transaction.
698	SetWithMeta adds a new entry with metadata to the transaction.
699	Delete removes key from transaction.
700	Get retrieves an item from the transaction database using the specified key. If the item exists and is not deleted or expired, it returns the item; otherwise, it returns an error.
701	CommitWith commits the transaction and runs a callback with the result in a separate goroutine.
702	View executes a transactional function within a database session.
703	Update applies a transaction function to a database with managed transactions disabled.
704	Seek advances block iterator to find first key greater than or equal to given key. If not found, sets error to EOF.
705	SeekToLast moves iterator to last element, setting error to nil.
706	parseKV updates blockIterator's key and val fields with data from current position, handling buffer resizing and validation.
707	NewIterator creates and initializes a new iterator over the table's entries, optionally in reverse order.
708	seekFrom locates the index of the given key in the block index and seeks to the appropriate block using the seekHelper method. If the key is not found, it sets the error to io.EOF.
709	seekForPrev seeks the previous item for a given key in the iterator.
710	Value retrieves the current value from the iterator.
711	Seek moves the iterator to the specified key in the appropriate direction based on its reversed state.
712	NewConcatIterator creates a ConcatIterator that iterates over multiple tables' iterators in sequence, optionally reversing their order.
713	Valid checks if the current iterator position is valid.
714	Next advances the iterator to the next valid element or end.
715	Close iterates over iterators and closes them, returning the first error encountered wrapped with "ConcatIterator".
716	OpenExistingFile opens an existing file with read-write or read-only access based on the given flags. If sync is set, it uses asynchronous file opening.
717	Copy creates a new byte slice containing a copy of the input slice.
718	KeyWithTs prepends the inverse of a timestamp to a key.
719	ParseTs will parse a timestamp from a byte key and return the parsed timestamp.
720	ParseKey will remove the last 8 bytes from the input key if it's not nil.
721	SameKey checks if two byte slices have the same parsed key.
722	FixedDuration converts duration to a fixed-format string with hours, minutes, and seconds.
723	NewCloser creates a Closer with a wait group initialized to the initial count.
724	NewThrottle creates a Throttle with a buffered channel for limiting concurrent operations.
725	Do sends a signal to the throttle's channel and increments the wait group.
726	Done handles errors and ensures throttle completion.
727	Finish waits for all tasks to complete and then closes channels.
728	SetDiscardTs updates the discard timestamp for the database when not using managed transactions.
729	openReadOnly opens the log file in read-only mode and maps it.
730	iterate reads log entries starting from a given offset, applying a function to each, handling transactions, and returning the last valid offset.
731	sortedFids returns a sorted slice of file IDs not marked for deletion.
732	write writes requests to a value log, flushing to disk when necessary.
733	populateDiscardStats retrieves and parses discard stats from the database, updating vlog.lfDiscardStats accordingly.
734	Backup streams database logs to writer starting from specified version.
735	ToList retrieves a list of KV pairs from an iterator based on a given key.
736	produceRanges generates and sends ranges for streaming keys.
737	produceKVs processes key-value pairs within a specified range and sends them through a channel.
738	Orchestrate will manage goroutines to process key-value pairs from a Badger database, generate KV lists, and stream them to an output channel while handling errors asynchronously.
739	NewStream creates a new stream instance, checking for managed transactions first.
740	NewStreamAt creates a new stream at the given read timestamp.
741	DecrRef decrements reference count and cleans up resources if last reference.
742	ParseFileID extracts a numeric ID from a filename suffix, returning it as a uint64.
743	PrintHistogram prints histograms of key and value sizes in bytes using the provided key prefix.
744	newSizeHistogram creates a new size histogram with specified bins for keys and values.
745	buildHistogram builds a histogram of key and value sizes for items matching a given prefix in the database.
746	printHistogram prints formatted statistics and distribution of values in a histogram.
747	Initialize watermark channel and event logger; start processing goroutine.
748	Begin updates the last index and sends a mark signal with the new index.
749	BeginMany initializes watermarks for multiple indices and starts processing them.
750	Done sends a completion signal with the given index
751	DoneMany sends a completion signal to markCh.
752	SetDoneUntil updates the doneUntil field atomically.
753	WaitForMark waits for a watermark index or context cancellation.
754	Encode will serialize header fields into binary format.
755	Decode reads the header fields from buf and updates the header object.
756	NewTableBuilder creates a new Builder for constructing tables with buffered key and value storage.
757	keyDiff calculates the difference between two keys, returning the unique suffix.
758	Add inserts a key-value pair into the builder, managing blocks based on a restart interval.
759	blockIndex generates a byte slice representing the index of blocks.
760	Finish constructs a bloom filter from keys read from the buffer, appends it to the builder's data, and returns the final byte slice.
761	Errorf logs an error message using the specified format and values.
762	Infof logs formatted information using the Options struct's Logger field.
763	DecrRef decrements the reference count and resets the arena if zero.
764	NewSkiplist creates a new skiplist with the given arena size.
765	Put inserts or updates a key-value pair in the SkipList, potentially increasing its height.
766	Get retrieves the value associated with a key in a skiplist, returning a ValueStruct. If the key is not found or doesn't match, it returns an empty ValueStruct.
767	Key retrieves the key at the current position in the Iterator.
768	Value retrieves the current value from the iterator's list arena using its offset and size.
769	Next advances the iterator to the next item.
770	Prev moves iterator to previous key in list.
771	Seek finds the nearest item in the list that is not less than the target.
772	SeekForPrev seeks to the previous element in the iterator's list that is less than or equal to the target byte slice.
773	NewUniIterator creates a new UniIterator for the Skiplist, optionally reversing the iteration order.
774	Next moves through items in UniIterator based on its reversed state.
775	Seek advances iterator to position at or after key, depending on iteration direction.
776	asChanges converts Manifest tables to a list of creation changes.
777	rewrite closes the manifest file pointer, rewrites the manifest, updates creations, and resets deletions.
778	validate checks that tables within a levelHandler are correctly ordered.
779	acquireDirectoryLock acquires a lock on a directory by creating a temporary file that is automatically deleted when all references are closed.
780	release releases the directory lock guard by closing the handle and resetting the path.
781	AssertTruef logs a fatal error if the condition is false.
782	Wrapf wraps an error with a formatted message, optionally including debug details.
783	initTables initializes the handler's tables, calculates total size, and sorts them based on conditions.
784	deleteTables removes specified tables from handler's collection.
785	tryAddLevel0Table attempts to add a new level-0 table to the handler if the number of tables hasn't reached the stall limit. It ensures thread safety by locking during the operation.
786	getTableForKey retrieves tables based on a key, handling both level 0 and greater levels.
787	get retrieves the latest value struct for a given key from levelHandler's tables.
788	overlappingTables finds the number of tables that overlap with the given key range.
789	String returns a human-readable representation of the Item.
790	KeyCopy copies the item's key to dst safely.
791	ValueSize calculates the size of the item's value in bytes.
792	NewKeyIterator creates an iterator over keys with the given prefix.
793	Valid checks if the iterator's item key has the specified prefix.
794	ValidForPrefix checks if current item's key is valid and starts with the given prefix.
795	Close closes the iterator, ensuring all resources are properly released.
796	parseItem parses the next item from the iterator, skipping badger keys, old versions, and deleted items.
797	Seek updates the iterator's state based on the given key, handling prefix and reverse options.
798	GetMergeOperator initializes a new merge operator with the provided function and duration.
799	Get retrieves merged data from database using RLock.
800	compareAndAdd updates ranges in compact status if they do not overlap and returns whether compaction was performed.
801	newArena initializes a new arena with capacity n, reserving position 0.
802	putNode calculates the aligned offset for a new node in an arena based on its height.
803	getNode retrieves a node pointer at a given offset in the arena buffer.
804	getKey retrieves a byte slice from a buffer at a given offset and size.
805	getVal reads a value from a buffer at a specified offset and size, returning it as a ValueStruct.
806	getNodeOffset calculates the offset of a node within an arena's buffer.
807	init creates global expvar counters and maps for tracking disk I/O, memory usage, and other metrics.
808	revertToManifest checks manifest files and deletes unused ones.
809	dropTree deletes all tables and updates the manifest.
810	dropPrefix removes keys with the specified prefix from levels.
811	isLevel0Compactable checks if level 0 has enough tables for compaction.
812	doCompact initiates compaction for a specified level in the BadgerDB, handling table selection and execution while logging progress and errors.
813	get retrieves the latest value for a given key across multiple levels, considering timestamps and versions.
814	seekTotal retrieves all accounts from a BadgerDB transaction, calculates their total balance, and checks if it matches the expected value.
815	findFirstInvalidTxn recursively finds the first invalid timestamp in a database by checking midpoints between low and high timestamps.
816	Create initializes a new snapshot sink for version 1 snapshots in memory.
817	List retrieves metadata for any snapshots stored in memory.
818	Open retrieves the latest snapshot metadata and contents by ID.
819	Write method copies data from a byte slice to an internal contents stream, updating the size metadata.
820	NewFileSnapshotStoreWithLogger creates a new FileSnapshotStore with optional logging and permission checks.
821	NewFileSnapshotStore creates a new FileSnapshotStore with optional logging to specified or default stderr.
822	snapshotName generates a unique name for a snapshot using term, index, and current timestamp.
823	Create creates a new snapshot using FileSnapshotStore.
824	List returns up to retain number of SnapshotMetas.
825	getSnapshots reads directory contents, filters out non-directory and temporary files, reads metadata, validates versions, sorts, and returns snapshot metadata.
826	readMeta reads metadata from a snapshot file.
827	Open opens a file snapshot and verifies its integrity using CRC64.
828	ReapSnapshots deletes old snapshots beyond the retention limit.
829	Write method implements io.Writer for FileSnapshotSink.
830	Close finalizes and moves the snapshot directory while handling errors.
831	Cancel cancels the file snapshot sink.
832	finalize flushes buffered data, syncs to disk, closes file, sets file size and CRC.
833	FileSnapshotSink.writeMeta saves snapshot metadata to a JSON file.
834	NewNetworkTransportWithConfig initializes a NetworkTransport using the provided NetworkTransportConfig.
835	setupStreamContext initializes stream context with cancel functionality
836	getStreamContext provides thread-safe access to the stream context.
837	SetHeartbeatHandler assigns a callback function to handle heartbeats.
838	CloseStreams releases all connections in the pool and cancels existing streams.
839	Close shuts down the network transport.
840	getPooledConn acquires a connection from the pool for the given server address.
841	getConnFromAddressProvider retrieves a connection from the address provider based on server ID and target address.
842	getConn retrieves a network connection to a target server address, either from a pool or by dialing a new one.
843	returnConn adds connection back to pool or releases it if pool is full or shutdown.
844	listen accepts connections on a network stream, handling each in a separate goroutine while implementing exponential backoff on failures.
845	handleConn manages network connections, reads commands, handles them, and flushes responses.
846	handleCommand processes incoming RPC commands, decodes them, and dispatches them to the appropriate handler or sends a heartbeat response.
847	decodeResponse decodes the RPC response and returns an error if any.
848	sendRPC sends an RPC request over the given connection.
849	newNetPipeline initializes a network pipeline with transport and connection.
850	decodeResponses reads responses from inprogressCh, decodes them, and responds back. It handles timeouts and shutdowns gracefully.
851	AppendEntries sends an RPC request and waits for the response or shutdown.
852	Close shuts down the pipeline and releases the connection.
853	NewObserver creates a new Observer instance with specified channel, blocking mode, and filter function.
854	RegisterObserver adds an observer to the Raft instance.
855	DeregisterObserver removes an observer from the raft's list of observers.
856	observe sends data to all blocking and non-blocking observers based on their filters.
857	NewInmemStore creates a new memory store with log and key-value maps.
858	FirstIndex retrieves the first index from an InmemStore.
859	LastIndex retrieves the highest index stored in InmemStore.
860	GetLog fetches log entry from InmemStore by index. If not found, returns ErrLogNotFound.
861	StoreLog calls StoreLogs with a single log.
862	StoreLogs updates InmemStore's logs map with new entries, tracking low and high indices.
863	DeleteRange removes entries within a specified key range from InmemStore, adjusting lowIndex and highIndex accordingly.
864	Set updates key-value pair in memory store safely using lock.
865	Get retrieves value associated with key from InmemStore. Returns error if key not found.
866	SetUint64 stores a uint64 value in the InmemStore.
867	GetUint64 retrieves a uint64 value using a byte key from an in-memory store.
868	NewLogCache creates a log cache with a specified capacity and underlying storage.
869	Connect adds a peer transport to the InmemTransport's peers map.
870	Disconnect removes a peer and closes associated pipelines.
871	DisconnectAll disconnects all peers and closes pipelines.
872	Respond sends a response or error over a channel.
873	Open returns a snapshot reader if available.
874	vote updates votes count or notifies depending on leader status and quorum size.
875	notifyAll submits votes to verifyFutures after clearing the waiting notifications.
876	cleanNotify removes a verification future from the notify map and unlocks the lock.
877	LastContact retrieves the last contact time of a follower.
878	setLastContact updates the last contact timestamp safely
879	replicate manages Raft log replication to followers, handling heartbeats, triggers, and random timeouts for efficient state synchronization.
880	pipelineReplicate manages log replication to a follower using a pipeline, handling sends, stops, and timeouts.
881	pipelineSend creates and sends an append entries request using the Raft protocol, updating the next index on success.
882	pipelineDecode decodes responses from the pipeline, handles stale terms, updates last contact, and manages replication state until stopped.
883	setupAppendEntries prepares AppendEntries request for replication.
884	setPreviousLog sets the previous log entry and term for Raft.AppendEntriesRequest.
885	setNewLogs appends logs to the Raft entry request up to the maximum allowed entries or the last index.
886	appendStats measures and increments RPC-related metrics for Raft replication.
887	handleStaleTerm stops replication when a peer has a newer term and notifies followers to step down.
888	AppendEntries appends entries to the remote server's log and sends RPC response.
889	RequestVote sends RPC request to the target server to vote.
890	InstallSnapshot handles snapshot installation in transport layer.
891	EncodePeer encodes peer address for raft server.
892	DecodePeer converts byte slice to raft server address.
893	AppendEntries appends entries to the Raft log and returns an AppendFuture.
894	ReadPeersJSON reads a list of peers from a JSON file and converts it to a configuration object.
895	ReadConfigJSON parses a JSON file into a configuration object.
896	NewTCPTransport initializes a TCP transport with specified parameters.
897	NewTCPTransportWithLogger creates a TCP transport with logging enabled.
898	newTCPTransportWithConfig creates a TCP transport with specified config.
899	Dial connects to the server address using TCP with the specified timeout.
900	Accept implements net.Listener interface for TCP connections.
901	Addr returns the stream's address.
902	restoreSnapshot restores the state of the Raft instance from the latest available snapshot.
903	BootstrapCluster initiates cluster bootstrapping with the given configuration.
904	Leader returns the current leader's address.
905	Apply submits a command to Raft for execution and returns a future indicating when the command has been applied or an error occurred.
906	Barrier creates a barrier log entry and waits for it to be applied within the specified timeout or until Raft shuts down. If successful, it returns the log entry's future.
907	VerifyLeader sends a verification request to the raft leader and waits for a response or shutdown.
908	AddVoter adds a new voter server to the Raft cluster.
909	RemoveServer updates the server configuration by removing a specified server.
910	Shutdown stops the Raft instance if it hasn't already been stopped.
911	Snapshot creates a snapshot future and sends it to the user snapshot channel or responds with shutdown error if Raft is shutting down.
912	Restore applies a snapshot and waits for replication.
913	String returns a human-readable representation of the Raft node.
914	LastContact returns the time of the last contact with a Raft peer.
915	Logf logs using adapter's log method with printf formatting.
916	utility function to check if node exists in raftNodes slice.
917	LeaderPlus returns up to n leader raft nodes plus other nodes.
918	WaitTilUptoDate waits for all cluster nodes to apply the latest Raft index within a timeout.
919	assertLogEntryEqual checks if two raft log entries are equal and logs errors if they differ.
920	runFSM manages state transitions and snapshots for a Raft instance.
921	Clone creates a copy of the configuration with servers appended.
922	Clone creates a deep copy of the configurations.
923	hasVote checks if the server with the given ID in the configuration has voting rights.
924	checkConfiguration validates a server configuration ensuring unique IDs and addresses, and includes at least one voter.
925	nextConfiguration updates the cluster configuration based on the change request.
926	encodePeers serializes peer information from configuration into MsgPack format.
927	decodePeers decodes a buffer containing peer information using MsgPack and returns a Configuration object with Server details.
928	encodeConfiguration encodes a Configuration object into MsgPack format.
929	decodeConfiguration decodes the input byte slice into a Configuration struct using MsgPack format.
930	goFunc runs a function concurrently while managing goroutine lifecycle.
931	getLastIndex returns the maximum of lastLogIndex and lastSnapshotIndex after locking.
932	getLastEntry returns the index and term of the last entry in raft state.
933	checkRPCHeader validates RPC headers against supported versions.
934	setLeader updates the leader address in a thread-safe manner and notifies observers if the leader changes.
935	requestConfigChange submits a configuration change request with an optional timeout.
936	run manages Raft state transitions in a loop.
937	runFollower manages a Raft follower's state, handling RPCs and transitioning to candidate on heartbeat failure or shutdown.
938	liveBootstrap applies the initial Raft configuration to the system.
939	runCandidate manages the candidate state in Raft, handling RPCs, votes, and election timeouts.
940	runLeader manages the leader state, handles replication, and transitions on leadership loss.
941	startStopReplication manages Raft leader's replication state by adding or removing followers' replication goroutines.
942	configurationChangeChIfStable returns a channel for configuration changes if Raft is stable.
943	verifyLeader checks if current node is the leader and triggers heartbeats.
944	checkLeaderLease verifies if followers respond within lease timeout, logs warnings if not, and returns maximum response time.
945	restoreUserSnapshot restores a user snapshot to the Raft system, updating the FSM and metadata accordingly.
946	appendConfigurationEntry updates the cluster configuration based on the provided request and logs the change accordingly.
947	dispatchLogs applies logs to the Raft leader, updates state, and notifies replicas.
948	processLogs applies logs sequentially starting from the last applied index.
949	processLog handles different types of logs, forwarding commands to the FSM and responding to futures accordingly.
950	processRPC processes incoming RPC requests by handling AppendEntries, RequestVote, InstallSnapshot commands or returning an error for unexpected commands.
951	processHeartbeat handles incoming RPCs, ignoring them if Raft is shutting down and processing AppendEntriesRequests specifically.
952	setLastContact updates the last contact timestamp atomically
953	persistVote saves the last vote term and candidate to stable storage.
954	setCurrentTerm updates the Raft node's current term and persists it to disk.
955	setState updates Raft state, clears leader, notifies observers on change.
956	getCommitIndex is a thread-safe method to retrieve the current commit index.
957	recalculate updates commitIndex based on majority matchIndexes and notifies commitCh.
958	randomTimeout generates a timeout channel after a random duration between 0 and minVal.
959	generateUUID creates a version 4 UUID based on random numbers.
960	decodeMsgPack deserializes a MsgPack-encoded byte buffer into the specified Go structure.
961	encodeMsgPack encodes the input interface using msgpack format and returns a buffer containing the encoded data along with any encoding error.
962	backoff calculates exponential backoff duration based on the given base, round, and limit.
963	newApplySource creates a new apply source with a hash-based seed.
964	reset initializes applySource's rnd field with a new random number generator using its seed value.
965	DefaultConfig returns a default configuration for the system.
966	ValidateConfig checks if the given configuration meets all required criteria.
967	runSnapshots manages snapshots triggered by interval or user request, logging errors and responding accordingly.
968	shouldSnapshot returns true if the difference between the last log index and the last snapshot index is greater than or equal to the snapshot threshold.
969	takeSnapshot creates a snapshot of the current state and persists it, ensuring no config changes are in progress.
970	compactLogs removes old raft logs, keeping only recent ones and those up to a snapshot index.
971	WebpackCheck checks if the local webpack.config.js matches the latest template and replaces it if necessary.
972	New creates a genny generator based on options.
973	UnixSocket creates a new HTTP server listening on a UNIX socket at the specified address.
974	Get retrieves an ErrorHandler based on the status code, returning a default handler if none found.
975	PanicHandler recovers from panics in the next handler, logs them, and emits events.
976	partialFeeder generates a partial template name and retrieves it using TemplatesBox.
977	New initializes an Engine with default template engines and content type.
978	WriteTo method writes message to writer and returns number of bytes written and any error encountered.
979	Send sends an email using SMTP.
980	NewSMTPSender creates a new SMTP sender using the provided host, port, user, and password.
981	Param retrieves a parameter value from the context's parameters using a given key.
982	Set stores key-value pairs in d's data map safely.
983	Value fetches the value associated with the given key from the context's data map or underlying context if not found.
984	Redirect sends a redirect response to the client, handling URL paths and formatting arguments.
985	File retrieves a file from a multipart form request.
986	MarshalJSON serializes the DefaultContext data excluding self-reference.
987	New creates a new genny group with API templates.
988	New creates and initializes a new App instance with default configurations and middleware.
989	DeprecrationsCheck checks for deprecated usage in Go files and logs warnings.
990	List method returns an error indicating resource implementation is missing.
991	Render outputs the template to the writer using the specified data.
992	Save saves the session using the request and response objects.
993	GetOnce retrieves the value associated with name from Session.Values, removes it, and returns the value or nil if not found.
994	Set assigns a value to a session's Values map using the provided name.
995	Clear removes all session values from the Session object.
996	getSession retrieves or creates a session for the HTTP request.
997	New creates a generator with options, validates them, and runs a file generation function.
998	New generates a new generator with npm validation and template transformations.
999	New generates a genny generator based on options, validating them and setting up templates and transformers.
1000	NewMessage creates and configures a new Message instance with optional settings, setting header, charset, and encoding accordingly.
1001	Reset clears the message's header and attachments.
1002	SetHeader updates the header field with given value(s).
1003	SetHeaders iterates over a map setting each header using SetHeader method.
1004	SetAddressHeader updates the header field with formatted address.
1005	FormatAddress formats an email address with an optional name.
1006	SetDateHeader updates the specified header field with the formatted date.
1007	FormatDate converts a time to a RFC1123Z formatted string.
1008	SetBody sets the message's content type, body, and optional settings.
1009	SetPartEncoding returns a PartSetting to set encoding on part.
1010	SetHeader updates the Header field of file f with the given map.
1011	SetCopyFunc sets the CopyFunc field of file instances.
1012	AttachReader attaches a file reader to the message with specified settings.
1013	Attach adds a file attachment to the message with specified settings.
1014	EmbedReader adds a file from an io.Reader to Message's embedded files with optional settings.
1015	Embed method adds a file to Message's embedded list using filename and optional settings.
1016	ValidateTemplates validates templates using provided validators.
1017	PlushValidator checks if a file has a valid .plush extension and parses its content.
1018	Validate checks and sets default values for options before returning any errors.
1019	LoadPlugins loads available plugins and registers their commands for handling events.
1020	WriteHeader updates response status and calls WriteHeader on ResponseWriter.
1021	Write updates response size and forwards byte slice to ResponseWriter.
1022	Flush flushes any buffered data to the underlying writer if it implements http.Flusher.
1023	CloseNotify returns a channel that notifies when the response writer is closed.
1024	Run performs an update check and prompts user before proceeding, displaying any warnings encountered during the process.
1025	onlyRelevantFiles filters files based on their path and extension, skipping directories and non-Go files.
1026	GoTemplateEngine executes Go templates with optional helpers and returns the rendered string or error.
1027	GET registers a new route with the specified path and handler.
1028	Redirect creates a GET route that redirects requests from 'from' path to 'to' path with the specified status.
1029	ANY registers handler for all HTTP methods on a given path.
1030	buildRouteName constructs a route name from a path by processing each segment and applying singularization rules.
1031	New creates a group of generators based on the provided options.
1032	NewDialer creates a new Dialer instance with specified connection details.
1033	Dial connects to an SMTP server at the given address, optionally upgrading to TLS, authenticating, and returning a SendCloser.
1034	DialAndSend establishes connection and sends messages.
1035	Set assigns a slice of strings to a key in the Flash data structure.
1036	Add appends a value to the slice associated with a key in the Flash data.
1037	persist saves flash data to a session using JSON serialization.
1038	newFlash retrieves flash data from session and initializes Flash struct.
1039	Get retrieves cookie value by name, returns error if not found.
1040	Sets a cookie with specified name, value, and max age.
1041	SetWithExpirationTime sets a cookie with expiration time on response.
1042	Delete sets an expired cookie for the specified name to remove it.
1043	NewMessage creates a new message with default values.
1044	NewFromData creates a message from render data.
1045	New creates a message from context data and sets the context.
1046	CloseNotify returns a channel that receives a value when the event source is closed.
1047	NewEventSource initializes an EventSource object with the given http.ResponseWriter, setting necessary headers for streaming.
1048	NewSimpleWithContext creates a Simple instance with logging and cancellation support.
1049	Register adds a handler to the Simple instance under a given name, ensuring it doesn't overwrite an existing handler.
1050	Start initializes a background worker with logging and context management.
1051	Stop logs a message and cancels the worker.
1052	Perform executes a job using its associated handler, logging errors and completion.
1053	PerformAt executes job at specified time t.
1054	PerformIn schedules job execution after delay or on context cancelation.
1055	String returns a pretty-printed JSON representation of this RouteInfo.
1056	Alias adds aliases to RouteInfo and handles them in router.
1057	Name updates the PathName of RouteInfo based on its App's routes and method, ensuring it ends with "Path".
1058	BuildPathHelper generates a route helper function that constructs URLs based on provided options.
1059	New creates a new generator based on the provided options and applies transformers for specific providers.
1060	New initializes a generator with options and runs construction functions.
1061	RegisterCustomDecoder registers custom decoders for specified types and fields
1062	Replace replaces middleware in the stack.
1063	Routes returns the routes for an app, using the root's routes if available.
1064	WrapBuffaloHandler wraps a Buffalo handler with a new router, returning its route info.
1065	PackageJSONCheck updates package.json if it differs from the latest Buffalo template.
1066	match checks if the import path starts with any key and replaces it with the corresponding value.
1067	Send sends messages through the sender, returning an error if any message fails.
1068	Last checks if the last part of options matches the given ID.
1069	Stop cancels the application and logs non-canceled errors.
1070	DepEnsure manages package dependencies based on app configuration.
1071	String returns a formatted representation of build information.
1072	New creates a new genny generator based on options.
1073	AddBody appends rendered content to message bodies.
1074	AddBodies adds bodies using specified renderers to the message.
1075	AddAttachment adds a new attachment to the Message.
1076	AddEmbedded attaches an embedded attachment with a reader to a message.
1077	SetHeader updates the message's header with the specified field and value.
1078	New initializes a new genny group with options, validates them, and adds various generators based on the provided configurations.
1079	New initializes a new genny Generator with specified options and transforms templates.
1080	New generates a new genny Generator based on Options.
1081	Cleanup function runs rollback operations and deletes files.
1082	MDTemplateEngine processes input using markdown and templates, handling plain text content specially.
1083	Update modifies or creates a ConfigMap based on provided updates and saves it using a Kubernetes client.
1084	FilterChanges filters PR changes and updates configmaps accordingly.
1085	getLabelsFromREMatches extracts labels from regex matches, prepending the second element and trimming spaces.
1086	getLabelsFromGenericMatches extracts matching labels from generic matches.
1087	Start initializes the Agent with configurations and monitors them for updates, reloading if necessary.
1088	Subscribe adds a new subscription to Agent's list.
1089	Config retrieves agent's configuration.
1090	Set updates agent's config; notifies subscribers about changes after a delay.
1091	IsMember checks user membership in organization
1092	ListIssueComments retrieves issue comments from fake client
1093	ListPullRequestComments retrieves comments from fake client
1094	ListReviews retrieves reviews from fake client.
1095	ListIssueEvents returns mock issue events
1096	CreateComment adds a comment to an issue and updates the fake client's state accordingly.
1097	CreateReview appends a new review to FakeClient's Reviews map.
1098	CreateCommentReaction appends comment reaction to fake client
1099	CreateIssueReaction records reactions for issues
1100	DeleteComment removes a comment from fake client's issue comments.
1101	delete stale comments from an issue based on a condition
1102	GetPullRequest retrieves pull request by number or errors
1103	GetPullRequestChanges retrieves mock data
1104	GetRef returns test reference for fake client.
1105	DeleteRef appends deleted reference to list
1106	GetSingleCommit retrieves a single commit by SHA.
1107	CreateStatus updates or adds a GitHub status for a given SHA.
1108	ListStatuses retrieves the list of statuses for a given reference.
1109	GetCombinedStatus retrieves combined status from FakeClient.
1110	GetRepoLabels returns fake labels for a repository.
1111	GetIssueLabels retrieves labels for a GitHub issue.
1112	AddLabel attempts to add a label to an issue and checks for existing labels before adding it. If the label already exists or cannot be added, it returns an error.
1113	RemoveLabel removes a label from an issue if it hasn't been removed before.
1114	FindIssues returns mock issues
1115	AssignIssue assigns users to an issue, handling missing users gracefully.
1116	GetFile fetches file content from remote storage based on organization, repository, file name, and commit reference. If commit is empty, it defaults to 'master'. Returns byte slice or error if file not found.
1117	ListTeams returns predefined teams
1118	ListTeamMembers returns team members based on team ID and role.
1119	IsCollaborator checks if a user is a collaborator of a repository.
1120	ListCollaborators returns fake collaborators
1121	ClearMilestone sets milestone to zero.
1122	SetMilestone sets milestone number or returns error
1123	ListMilestones retrieves milestones from map
1124	ListPRCommits retrieves PR commits from a fake client using a key.
1125	GetRepoProjects retrieves repository projects using a fake client.
1126	GetOrgProjects retrieves projects for a given organization from a fake client.
1127	GetProjectColumns retrieves columns by project ID
1128	CreateProjectCard adds a project card to the specified column and returns it.
1129	DeleteProjectCard removes a project card from its column.
1130	MoveProjectCard moves a project card from one column to another in a fake GitHub client.
1131	CreateDatabaseClient creates an InfluxDB client using configuration details.
1132	Push sends a data point to InfluxDB.
1133	NewProwJobWithAnnotation constructs a ProwJob with specified annotations.
1134	NewProwJob initializes a ProwJob with specified spec and labels.
1135	NewPresubmit creates a ProwJob for a presubmit job based on PR details.
1136	PresubmitSpec converts a Presubmit and Refs into a ProwJobSpec.
1137	PostsubmitSpec generates a ProwJobSpec from a postsubmit configuration and references.
1138	PeriodicSpec constructs a ProwJobSpec from a Periodic configuration with a periodic job type.
1139	BatchSpec creates a ProwJobSpec for batch presubmits.
1140	PartitionActive separates ProwJobs into pending and triggered channels based on their status.
1141	ProwJobFields extracts relevant fields from a ProwJob for logging purposes.
1142	ClusterToCtx maps an in-cluster context to the default alias or returns the original cluster name.
1143	AddCommand will add a given Command to the Commands slice of PluginHelp.
1144	Get retrieves a ProwJob object
1145	Watch invokes a watch action on FakeProwJobs with given options.
1146	Delete removes a ProwJob from the fake client.
1147	Patch mocks base method
1148	MergeMethod determines the merge type for a given repository based on organization and repository name.
1149	Query constructs a search query string based on repository criteria.
1150	ForRepo checks if a given repository is included in the query based on organization and repository name.
1151	OrgExceptionsAndRepos returns org exceptions and repos based on tide queries.
1152	QueryMap creates a new query map with the given queries.
1153	ForRepo retrieves tide queries for a specific repository, caching results.
1154	Validate checks for conflicts between required, optional, and conditional contexts in TideContextPolicy.
1155	GetTideContextPolicy generates policies for Tide context checks based on options, branch protection, and Prow jobs.
1156	IsOptional checks if a context is optional or required based on policy settings.
1157	MissingRequiredContexts identifies contexts required but not present in input list.
1158	ValidateWebhook validates incoming webhook requests and returns parsed data or an error.
1159	HelpProvider returns help information about the needs-rebase plugin, which manages the 'needs-rebase' label on Pull Requests based on their mergeability.
1160	HandleEvent processes GitHub pull request events, checks mergeability, and takes action based on labels.
1161	HandleAll checks all open PRs across enabled repositories and updates their status based on conditions.
1162	NewDryRunProwJobClient creates a new ProwJob client for dry runs.
1163	Create method in dryRunProwJobClient struct.
1164	Update method for ProwJob in dryRunProwJobClient.
1165	UpdateStatus updates ProwJob status.
1166	Delete implements ProwJobClient interface.
1167	DeleteCollection implements Kubernetes client interface.
1168	Get retrieves a ProwJob using the dryRunProwJobClient.
1169	List retrieves the ProwJobs matching the given label selector.
1170	Watch returns a watch.Interface for dry-run Prow jobs.
1171	Patch modifies a ProwJob resource using the specified patch type and data.
1172	hasSynced checks if all informers have synced; waits if not.
1173	Starts a pipeline controller with specified number of workers until stopped.
1174	runWorker continuously processes work items from a queue, invoking reconciliation and handling errors appropriately.
1175	fromKey extracts three components from a key separated by slashes.
1176	enqueueKey adds objects to the work queue based on their type and namespace.
1177	finalState checks if the ProwJob state is completed or not.
1178	description returns a human-readable description based on condition message or reason, falling back to a given string.
1179	prowJobStatus determines the state of a Prow job based on its conditions and timestamps.
1180	pipelineMeta constructs metadata object for a ProwJob based on labels and annotations.
1181	sourceURL retrieves the source URL for a Prow job, defaulting to the repo link if not specified.
1182	makePipelineGitResource constructs a PipelineResource for Git from a ProwJob.
1183	makePipelineRun creates a PipelineRun from a ProwJob and PipelineResource.
1184	matchingConfigs filters plugins.RequireMatchingLabel based on org, repo, branch, and label.
1185	SuggestCodeChange provides a code change suggestion based on linting problems using regular expressions and handlers.
1186	ServeExternalPluginHelp registers a handler on the given mux for external plugin help requests.
1187	protect updates branch protection settings based on configuration and completed repositories.
1188	UpdateOrg updates repositories based on organization configuration.
1189	UpdateRepo checks if a GitHub repo is archived and updates its branches based on the provided configuration.
1190	UpdateBranch updates the protection status of a GitHub branch.
1191	LoadConfig unmarshals JSON config into Options.
1192	Run initializes Kubernetes client and starts artifact uploader controller.
1193	Start loads secrets from paths and monitors them in separate goroutines.
1194	reloadSecret continuously checks and reloads secrets from a specified path.
1195	GetSecret fetches secret data at specified path.
1196	setSecret updates the Agent's secrets map with a new secret value
1197	GetTokenGenerator returns a function that retrieves a secret from a specified path.
1198	New creates a History instance, optionally loading existing data from a specified path.
1199	Records history of actions with timestamps.
1200	ServeHTTP responds with JSON-encoded history records or an empty object on error.
1201	Flush writes history records to GCS.
1202	AllRecords returns all records grouped by keys.
1203	MakeCommand creates a Cobra command for downloading a coverage profile file.
1204	CheckFlags compiles regex patterns for comment counting.
1205	ReceiveComment processes comments and assigns points based on matchers.
1206	NewController initializes a controller with the given parameters.
1207	Controller.Run starts a worker loop to process items from a queue.
1208	runWorker manages the worker's lifecycle, processing items until none are left.
1209	New initializes a LocalGit instance with a temporary directory and sets up a git client with credentials.
1210	MakeFakeRepo initializes a fake git repository.
1211	AddCommit adds specified files to a local Git repository commit.
1212	CheckoutNewBranch creates a new git branch in the specified repository.
1213	Checkout checks out a specific commit or branch in a local git repository.
1214	RevParse retrieves the commit hash for a given commit-like reference in a local Git repository.
1215	CleanAll cleans up all resources of specified or default regions using given session.
1216	optionsForRepo checks a configuration for a matching repository and returns the corresponding Lgtm settings. If no match is found, it returns an empty Lgtm object.
1217	getChangedFiles retrieves the list of changed file paths for a specified GitHub pull request.
1218	loadReviewers collects unique reviewers from file approvals using a repository owner interface.
1219	NewController initializes a Controller with project details and kube client.
1220	SaveLastSync updates the last sync timestamp in a temporary file and renames it to the fallback location.
1221	Sync processes changes for instances, updates last update time, and saves the sync status.
1222	AddFlags adds event-related flags to cobra command.
1223	SetFlags initializes the plugin's matcher based on its description.
1224	ReceiveIssueEvent processes an issue event and returns a Point if it matches the plugin's matcher.
1225	Upload queues and processes multiple file uploads concurrently, aggregating any encountered errors.
1226	FileUploadWithMetadata uploads a file with associated metadata using an object handle.
1227	DataUploadWithMetadata uploads data to storage with associated metadata.
1228	HasLabel checks if the specified label exists in the given list of labels.
1229	ImageTooBig checks if the image at url exceeds 10MB based on Content-Length header.
1230	LevelFromPermissions determines the permission level based on the given repository permissions.
1231	PermissionsFromLevel maps a repository permission level to its corresponding permissions.
1232	newProwJobs creates a Prow jobs wrapper with a client and namespace.
1233	GetApplicable retrieves blockers applicable to the specified organization, repository, and branch, sorting them by number.
1234	serve sets up HTTP handlers for logging and metrics, then starts the server.
1235	NewCountPlugin creates a cobra command to count events and issues, applying various filters and loggers.
1236	ReceiveComment appends a fake issue event to comments received by the plugin.
1237	updateMetrics periodically logs disk usage metrics.
1238	LogStatus logs the current resources managed by Ranch.
1239	SyncConfig parses config and syncs resources using Ranch's Storage.
1240	Metric retrieves resource metrics based on type.
1241	FormatURL takes a URL, checks its validity, and formats it into a Markdown image link. An error is returned if the URL is invalid or empty.
1242	runAndSkipJobs executes requested jobs and skips specified jobs while handling overlapping contexts and aggregating errors.
1243	validateContextOverlap checks if any presubmit jobs have overlapping contexts between toRun and toSkip lists, returning an error if so.
1244	RunRequested starts builds for requested presubmit jobs and aggregates any errors encountered.
1245	skipRequested updates GitHub status for jobs that have been requested to be skipped.
1246	Match checks if an event is labeled with a specific label.
1247	Match checks if the event name is "unlabeled" and the label matches the Event's label.
1248	AddFlags adds flags to FlagSet fs for GitHubOptions o.
1249	AddFlagsWithoutDefaultGitHubTokenPath adds flags without default GitHub token path to FlagSet.
1250	Validate checks GitHub options, ensuring URIs are valid and paths are set correctly.
1251	GitHubClientWithLogFields creates a GitHub client with optional logging fields and token generation.
1252	GitHubClient returns a GitHub client using secret agent and dry run flag.
1253	GitClient initializes a new Git client with credentials obtained from a GitHub client.
1254	toMap converts coverage list to a map by coverage name.
1255	findChanges identifies significant coverage changes between two lists.
1256	CreateDatabase initializes a MySQL database connection and migrates schema.
1257	ShouldReport determines whether to report based on job type and agent.
1258	Report submits ProwJob results using the configured reporter.
1259	MarkComplete deletes keys from firstSeen that weren't marked, logs any swept resources, and returns their count.
1260	NewJobAgent initializes a JobAgent with Kubernetes client, pod log clients, and configuration.
1261	Start initiates periodic updates using tryUpdate.
1262	Jobs returns the jobs managed by the agent.
1263	ProwJobs returns the job agent's prow jobs safely.
1264	GetProwJob retrieves a Prow job by its ID.
1265	GetJobLog retrieves logs for a specified Prow job based on its agent type.
1266	unionStrings combines two slices of strings into a single slice without duplicates.
1267	Apply combines two policies by selecting or merging their attributes.
1268	GetOrg retrieves org by name and applies policy. If not found, default policy is used.
1269	GetRepo retrieves a repo from org, applying policy.
1270	GetBranch retrieves a branch by name, applying policies and checking protection.
1271	GetPolicy retrieves the policy for a specified branch, applying Prow requirements and validation rules.
1272	UpdateIssueEvents fetches and updates issue events from a repository using a database and client interface.
1273	enqueueKey adds objects to workqueue after converting them to keys.
1274	prowJobStatus determines the ProwJob state based on the build status conditions.
1275	buildEnv constructs environment variables for a Prow job.
1276	Adds missing arguments from raw environment to template instantiation spec.
1277	Add environment variables from rawEnv to c.Env if not already present.
1278	injectSource updates build spec with source references from ProwJob.
1279	injectedSteps constructs containers for a job spec with sidecar, init upload, and entrypoint based on decoration config.
1280	determineTimeout calculates the build timeout based on the build spec, decoration config, or default value.
1281	makeBuild creates a new build from a ProwJob, injecting environment, source, and timeout.
1282	newLabels creates SQL labels from GitHub labels for a given issue and repository.
1283	newAssignees creates a list of SQL Assignees from GitHub users for a given issue and repository.
1284	NewIssueComment creates a new SQL comment object from a GitHub issue comment.
1285	messageFilter generates a filter based on commit messages and presubmit triggers.
1286	IsSuccess checks if build was successful.
1287	IsFailure checks if build result indicates failure or instability.
1288	IsAborted checks if the build was aborted.
1289	ProwJobID extracts the Prow job ID from build actions.
1290	BuildID retrieves the build ID from job parameters.
1291	CrumbRequest fetches CSRF token and field from Jenkins API.
1292	measure calculates and records latency and request count for API calls.
1293	GetSkipMetrics sends a GET request to the specified path and returns the response body.
1294	Get sends HTTP GET request to specified path and reads response body.
1295	request sends an HTTP request to the server using the specified method, path, and parameters. It handles retries and measures performance metrics.
1296	doRequest sends an HTTP request with optional authentication headers.
1297	getJobName constructs a job name based on the ProwJobSpec details.
1298	getBuildPath constructs the Jenkins build path from the Prow job spec.
1299	GetJobInfo retrieves job information from the API.
1300	JobParameterized checks if any job property has parameter definitions.
1301	EnsureBuildableJob waits for a Prow job to appear and becomes parameterized before launching a build.
1302	LaunchBuild submits a build request to the Prow API with optional parameters
1303	Build starts a new build from a ProwJob specification.
1304	BuildFromSpec constructs a job from a ProwJobSpec and launches it.
1305	GetEnqueuedBuilds retrieves enqueued Jenkins builds matching specified queries.
1306	Abort stops a specified job's build process.
1307	PresubmitToJobSpec converts presubmit configuration to job specification.
1308	PostsubmitToJobSpec converts a postsubmit configuration to a job specification.
1309	PeriodicToJobSpec converts a periodic configuration to a job specification.
1310	GetBuildID fetches the build ID from the specified URL or generates a new one.
1311	listGcsObjects retrieves and lists GCS object prefixes matching a specified delimiter and prefix under a given bucket.
1312	FindBaseProfile searches GCS for the most recent successful prowjob build and retrieves the coverage profile.
1313	sortBuilds converts a list of string builds into integers, sorts them in descending order, and filters out non-integer values.
1314	GetAll retrieves all AWS EC2 regions from the session.
1315	NewEventClient creates a new event client for GitHub events.
1316	PruneComments removes comments based on a given predicate, keeping only those not matching the predicate.
1317	FormatResponse generates a formatted response string with specified details.
1318	FormatSimpleResponse generates a formatted response with a mention, message, and bot info.
1319	FormatICResponse formats the issue comment response with raw data.
1320	FormatResponseRaw formats the raw response body by quoting it and then calling FormatResponse with the formatted body.
1321	Validate checks options for GCS upload requirements.
1322	Encode converts options to a JSON string.
1323	RegisterIssueHandler adds issue handling functions and help providers to plugins.
1324	RegisterIssueCommentHandler adds handlers and help for issue comments.
1325	RegisterPullRequestHandler associates a PR handler with a name and help provider.
1326	RegisterStatusEventHandler associates a status event handler with its name and help provider.
1327	RegisterPushEventHandler associates a name with a push event handler and its help provider.
1328	RegisterReviewEventHandler associates a review event handler with its help provider.
1329	RegisterReviewCommentEventHandler registers a handler for review comments with associated help.
1330	RegisterGenericCommentHandler registers a comment handler and its help provider.
1331	NewAgent constructs an Agent using provided configuration and client agents.
1332	InitializeCommentPruner sets up the comment pruner client for the specified organization, repository, and pull request.
1333	CommentPruner returns the comment pruner event client or an error if it hasn't been initialized.
1334	Load reads a YAML config file and sets it in the ConfigAgent.
1335	Config method returns configuration.
1336	Set updates the configuration of ConfigAgent using a mutex lock.
1337	Start initializes the ConfigAgent and periodically reloads its configuration from the specified path.
1338	GenericCommentHandlers retrieves comment handlers for a given owner and repository.
1339	IssueHandlers retrieves issue handlers based on owner and repo.
1340	IssueCommentHandlers retrieves comment handlers for a given owner and repository.
1341	PullRequestHandlers retrieves PR handlers based on owner/repo.
1342	ReviewEventHandlers retrieves review event handlers for a given owner and repository.
1343	ReviewCommentEventHandlers returns a map of event handlers for review comments in a given repository.
1344	StatusEventHandlers returns the status event handlers for the given owner and repository.
1345	PushEventHandlers retrieves event handlers for specified owner and repo.
1346	EventsForPlugin returns the list of events associated with a plugin name based on predefined handlers.
1347	insertLink updates or inserts the view URL in GCS metadata.
1348	HelpProvider generates help information for the cherrypick plugin, detailing its usage and restrictions.
1349	getPatch retrieves a patch file for a pull request and saves it locally.
1350	releaseNoteFromParentPR extracts and formats a release note from a PR body.
1351	ValidatePayload checks if the payload's signature matches using HMAC-SHA1.
1352	PayloadSignature generates a SHA-1 HMAC signature for the given payload using the specified key.
1353	updateString updates have to want if they differ, panicking if have is nil.
1354	updateBool updates the value of 'have' to match 'want' if they differ, returning true if updated.
1355	configureOrgMeta updates organization metadata based on desired settings.
1356	configureTeamRepos configures GitHub team repositories based on desired permissions.
1357	ShouldReport checks if ProwJob has non-empty Pub/Sub project and topic labels.
1358	Run uploads targets to GCS or simulates upload if DryRun is enabled.
1359	Format appends default fields to log entry before formatting it.
1360	FindLabels filters issue labels using a regular expression.
1361	AddFlags adds custom flags to the flag set, including a log path option.
1362	NewAgent initializes a new Agent with GitHub OAuth configuration and logger.
1363	HandleLogin generates an HTTP handler for login requests.
1364	HandleLogout handles user logout by clearing cookies and redirecting.
1365	serverError logs and responds with a 500 error message for the specified action.
1366	FromItem updates ResourcesConfigObject from a common.Item.
1367	GetItems returns all resources in the collection.
1368	SetItems converts objects to ResourcesConfigObject pointers and assigns them to Items.
1369	UnmarshalText deserializes text to a valid repo permission level.
1370	IsAssignee checks if the login matches any assignee's login in the issue.
1371	IsAuthor checks if the issue's author matches the given login.
1372	HasLabel checks if an issue has a specific label, ignoring case sensitivity.
1373	Branch extracts the branch or tag name from the reference.
1374	truncate shortens a string if it exceeds a maximum length, adding ellipsis in the middle.
1375	reportStatus updates GitHub status based on Prow job details.
1376	parseIssueComments processes Prow job comments, filtering and aggregating entries based on conditions.
1377	Helper function to generate a comment for a failed Prow job based on a template and test entries.
1378	Config returns a new lenses.LensConfig instance
1379	Callback processes artifacts and returns a string.
1380	FormatRecord formats a record into a human-readable string.
1381	Namespace sets the namespace field nc value.
1382	NewFakeClient creates a fake client for testing purposes.
1383	NewClientInCluster creates a Kubernetes client using in-cluster credentials.
1384	NewClientFromFile reads cluster data from a file and creates a new Client.
1385	NewClient creates a new Client instance using TLS configuration from cluster credentials.
1386	ReplaceConfigMap updates or creates a ConfigMap in the specified namespace.
1387	GetDiskUsage calculates disk usage statistics for a given path.
1388	GetATime retrieves access time for a file or uses a default time if an error occurs.
1389	RegisterLens registers a new lens in the system with validation.
1390	GetLens retrieves the lens by name or returns an error if it doesn't exist.
1391	LastNLines fetches the last 'n' lines of an artifact using chunked retrieval.
1392	NewClient creates a client with a token generator for Slack.
1393	WriteMessage sends a message to a specified channel using the client's URL values.
1394	MarkAndSweep marks and deletes NAT gateways based on the provided session, account, region, and set.
1395	ListAll retrieves all NAT gateways for an account and region.
1396	NewClient creates a new client with the specified URL and owner, configures the dialer and HTTP transport, and returns the client.
1397	Acquire acquires a resource of specified type, state, and destination, adding it to storage if acquired successfully.
1398	AcquireWait attempts to acquire a resource repeatedly until it becomes available or the context is canceled.
1399	AcquireByState acquires resources by state, updates storage, and returns them.
1400	ReleaseAll releases all resources held by the client to the destination.
1401	ReleaseOne releases a single resource to the specified destination.
1402	UpdateAll updates the state of all resources in storage, handling errors and returning a combined error if any occur.
1403	SyncAll retrieves resources, updates their states, and stores them, accumulating and returning any errors encountered.
1404	UpdateOne updates a resource's state and user data based on its name.
1405	Metric retrieves a metric based on the type.
1406	HasResource checks if client has any resources.
1407	DialContext attempts to establish a connection using a dialer with retries based on the specified parameters.
1408	NewDashboardAgent creates a new DashboardAgent instance.
1409	QueryPullRequests fetches pull requests from GitHub using a GraphQL query, handling pagination and logging the rate limit usage.
1410	GetHeadContexts fetches and processes PR head commit statuses from GitHub.
1411	ConstructSearchQuery generates a search query for PRs authored by a specific user across multiple repositories.
1412	NewBundledStates initializes a new BundledStates instance with the provided description and empty states map.
1413	ReceiveEvent updates state based on event and returns if state has changed.
1414	ages calculates the age of active states in the bundle at a given time.
1415	Percentile calculates the duration at the given percentile for bundled states.
1416	NewMetrics initializes a Metrics struct with ClientMetrics containing Requests, RequestRetries, and RequestLatency, along with ResyncPeriod.
1417	NewDiskCache returns a new http.RoundTripper with disk caching.
1418	NewMemCache returns a memcached RoundTripper.
1419	NewFromCache creates a RoundTripper that caches responses and limits concurrency.
1420	ProwV1 returns a fake ProwV1 interface.
1421	Prow returns a fake ProwV1Interface implementation for testing purposes.
1422	NewOwners creates a new instance of Owners with specified log, files, repository, and seed value.
1423	GetApprovers maps each owner to their approvers using a repository.
1424	GetAllPotentialApprovers returns a sorted list of unique potential approvers.
1425	GetReverseMap constructs a reverse mapping of approvers to owning files.
1426	temporaryUnapprovedFiles returns a set of files that have not been approved by any of the given approvers.
1427	KeepCoveringApprovers filters potential approvers based on unapproved files and returns a set of kept approvers.
1428	GetSuggestedApprovers suggests approvers based on unapproved files and a reverse map until all requirements are met.
1429	GetOwnersSet retrieves the unique set of owners for files managed by the Owners object.
1430	GetShuffledApprovers returns a shuffled list of potential approvers.
1431	String returns markdown link representation of this approval.
1432	IntersectSetsCase returns the case-insensitive intersection of two sets.
1433	NewApprovers initializes a new instance of Approvers with the given Owners.
1434	AddLGTMer adds or updates LGTM approval for a user on a specific reference.
1435	RemoveApprover removes an approver by login.
1436	AddAssignees adds the list of user logins as assignees.
1437	GetCurrentApproversSetCased returns a set of current approvers' logins in lowercase.
1438	GetFilesApprovers returns a map of files to their approvers, considering both current and potential cases.
1439	NoIssueApprovers returns a map of users who have no issue approvals.
1440	UnapprovedFiles identifies files without any approvers.
1441	GetFiles constructs a list of approved and unapproved files based on approvers.
1442	IsApproved checks if requirements are met or manually approved.
1443	ListApprovals returns a list of current approvals for each approver.
1444	ListNoIssueApprovals returns a list of approvals without issues
1445	GenerateTemplate generates a template using the given templ and data, returning the resulting string or an error.
1446	writeTemplate renders a template file to an output path with optional data and formatting.
1447	Labels combines default and repository labels into a single sorted list without duplicates.
1448	LabelsForTarget filters labels by target and sorts them by name.
1449	LoadConfig loads configuration from a YAML file and validates it.
1450	loadLabels concurrently fetches labels for multiple repositories using a goroutine pool.
1451	kill logs the repository and label information, then returns an update indicating the resource is dead.
1452	create logs the creation of a label for a repository and returns an update object.
1453	classifyLabels recursively classifies labels based on their attributes and updates three maps accordingly.
1454	linkify converts text to a URL-friendly format
1455	NewCache returns a new Cache instance with trimmed disk root.
1456	KeyToPath converts a cache key to its corresponding disk path.
1457	ensureDir creates directory if it doesn't exist.
1458	Put stores content in cache, optionally verifying SHA256 hash.
1459	Get opens file for key using handler if exists.
1460	Delete removes the cache entry by key.
1461	NewGCSArtifact creates a new GCSArtifact instance with specified properties.
1462	Size retrieves the size of the GCS artifact.
1463	ReadAll reads and returns the entire content of the GCS artifact.
1464	ReadTail reads the last n bytes of a GCSArtifact.
1465	gzipped checks if the GCS artifact's content encoding is gzip.
1466	optionsForRepo retrieves repository-specific or organization-wide configuration based on the provided org and repo names. If not found, it returns a default configuration.
1467	List retrieves ProwJobs based on a label selector.
1468	ProwJobs creates a new ProwJobNamespaceLister instance for a given namespace.
1469	List retrieves all ProwJobs in a namespace based on a label selector.
1470	RunsAgainstAllBranch checks if there are no branches to skip or include.
1471	Intersects checks if two Branchers share any branches or intersect based on their run conditions.
1472	ShouldRun determines if the matcher should run based on file changes.
1473	RunsAgainstChanges checks if any of the changes match the regular expression pattern.
1474	CouldRun checks if the postsubmit brancher should run for a given base reference.
1475	ShouldRun determines whether postsubmit should run based on baseRef and changes.
1476	CouldRun checks if the presubmit job should run based on the branch.
1477	ShouldRun determines if presubmit checks should run based on base ref, changes, and flags.
1478	GetPresubmit retrieves the presubmit job for the given repository and name.
1479	SetPresubmits updates the presubmit jobs for a job config.
1480	SetPostsubmits updates JobConfig's Postsubmits with copied values and validates regexes.
1481	AllPresubmits filters presubmits based on repository names.
1482	AllPostsubmits filters postsubmits based on provided repos or returns all if empty.
1483	AllPeriodics returns a slice of Periodic objects
1484	ClearCompiledRegexes clears regex fields in presubmits.
1485	Empty checks if SimpleConfig has no approvers, reviewers, required reviewers, or labels.
1486	NewClient initializes a client for managing GitHub repositories using Git and GitHub APIs.
1487	ExpandAlias resolves an alias to a set of repository names using normalized login.
1488	ExpandAliases expands aliases in a set of logins and returns the updated set.
1489	ParseFullConfig parses the full configuration from byte data.
1490	ParseSimpleConfig parses a YAML-encoded byte slice into a SimpleConfig object.
1491	decodeOwnersMdConfig reads a YAML configuration file and parses its header into the given SimpleConfig object.
1492	findOwnersForFile traverses up directories from the given path, checking regex patterns in ownerMap to return the first matching directory. If no match, it returns an empty string.
1493	FindApproverOwnersForFile retrieves the approver owners for a given file path using the repository owners' log and approvers list.
1494	FindReviewersOwnersForFile retrieves the reviewers' owners for a given file path.
1495	FindLabelsForFile retrieves labels associated with a specific file path from repository owners' entries.
1496	IsNoParentOwners checks if a given path has no parent owners.
1497	Ratio calculates the coverage percentage.
1498	FromPayload deserializes the event payload into PeriodicProwJobEvent.
1499	ToMessage serializes the Prow job event into a pubsub message.
1500	UnmarshalText validates and sets the privacy setting from text input.
1501	compileApplicableBlockades filters and compiles blockades applicable to the given organization and repository.
1502	calculateBlocks categorizes pull request changes based on blockades and returns summaries.
1503	MergeMultipleProfiles merges multiple cover.Profiles into one.
1504	AddFlags adds command-line options to fs for Options.
1505	processNextItem retrieves next item from queue, processes Prow job logs, uploads them to GCS, and marks task as done.
1506	handleErr handles errors from log uploads, retrying up to five times before giving up.
1507	AggregateFilter combines multiple filters into a single filter that runs each in sequence until one returns true.
1508	FilterPresubmits filters presubmit jobs based on branch, changes, and filter criteria, returning those to trigger and skip.
1509	MakeCommand defines a Cobra command for filtering Go coverage files.
1510	Push appends an IssueEvent to the EventTimeHeap.
1511	Pop removes and returns the minimum element of the heap.
1512	NewFakeOpenPluginWrapper creates a new wrapper for a fake open plugin
1513	ReceiveIssue adds a fake "opened" event if the issue isn't already marked as open, then passes the issue to the plugin.
1514	Validate checks options for a git syncer, ensuring source root, log, and unique refs are specified.
1515	Complete populates Options with Git refs and key files.
1516	Set parses and stores the input value as a format template.
1517	ensure checks if the binary exists, installs it if not.
1518	output runs a command and captures its output.
1519	projects retrieves up to 'max' project IDs using gcloud command.
1520	selectProject selects a GCP project based on user input or defaults to the current project. If the project is not accessible, it ensures the user has permission.
1521	createCluster creates a new Kubernetes cluster with user-provided or default settings.
1522	createContext selects or creates a GKE cluster based on user input.
1523	contextConfig loads Kubernetes client configuration or installs required tools.
1524	selectContext selects a Kubernetes context based on user input or predefined options.
1525	applyCreate executes a kubectl create command with dry-run and applies the result.
1526	determineSkippedPresubmits filters out presubmits based on whether their contexts are already triggered.
1527	Dispatch processes issues and events, converts them to points, and pushes them to InfluxDB.
1528	CreateIssue creates a new GitHub issue with the specified parameters.
1529	CreateStatus creates a repository status update.
1530	forEachPR iterates over all pages of PRs, applying a transformation function to each PR and handling errors based on options.
1531	GetCollaborators retrieves the list of users who have access to the specified repository.
1532	GetCombinedStatus retrieves the combined GitHub repository status for a given reference.
1533	GetIssues retrieves issues from a GitHub repository.
1534	GetRepoLabels retrieves labels for a specified repository.
1535	GetUser retrieves GitHub user details by login.
1536	checkConfigValidity verifies if necessary flags are set and authenticates gcloud service account.
1537	createSystemdLogfile captures systemd journal logs for a specified service and outputs them to a file.
1538	createFullSystemdLogfile captures system logs from journalctl and saves them to a file in the specified directory.
1539	createSystemdLogfiles records journalctl logs for specified services and optionally creates a full log file.
1540	prepareLogfiles collects and copies relevant log files to the specified directory based on the cloud provider and configuration options.
1541	writeSuccessMarkerFile creates an empty file in GCS to indicate success.
1542	MakeCommand creates a Cobra command for summarizing coverage profiles in JUnit XML format.
1543	warnDeprecated checks if it's time to log a deprecation warning based on a frequency. If so, it updates the timestamp and logs the message.
1544	Describe returns a string describing the requirement to match labels on PRs or issues in a GitHub repository.
1545	TriggerFor finds the trigger matching the organization or repository. Returns empty trigger if none found.
1546	EnabledReposForPlugin identifies repositories enabled for a specific plugin.
1547	EnabledReposForExternalPlugin finds organizations and repositories where a specific external plugin is enabled.
1548	Sets default values for ConfigUpdater's Maps field.
1549	validatePlugins returns an error if there are unknown or duplicated plugins in the configuration.
1550	ShouldReport checks if a ProwJob should be reported based on its state and Gerrit metadata.
1551	Run clones Git refs, executes commands, and records results.
1552	PathForRefs constructs the source directory path based on repository references.
1553	gitCtxForRefs creates a git context for the given refs.
1554	commandsForBaseRef generates a series of git clone and fetch commands based on the provided references and user configuration.
1555	gitTimestampEnvs generates environment variables setting Git author and committer dates to the given timestamp.
1556	gitRevParse retrieves the current Git commit hash.
1557	`commandsForPullRefs generates Git commands to fetch and merge pull requests.`
1558	ProduceCovList aggregates coverage profiles into a single CoverageList object. Each profile's blocks are summarized and added to the list.
1559	popRandom removes a random element from a set and returns it.
1560	resolve resolves experimental Kubernetes options.
1561	ProwJobClientset returns a clientset for prow jobs in the specified namespace.
1562	ProwJobClient creates a Prow job client based on whether dry run is enabled.
1563	InfrastructureClusterClient retrieves Kubernetes client based on context and dry-run mode.
1564	BuildClusterClients constructs Kubernetes pod clients for specified contexts and namespace.
1565	Age calculates the duration since ActiveState started.
1566	ReceiveEvent updates state based on event.
1567	ReceiveEvent updates state based on event match.
1568	Active checks if all states within MultiState are active.
1569	Age calculates the minimum age among all states at a given time.
1570	ReceiveEvent processes an event for each state in MultiState and updates the states accordingly. It returns the updated MultiState and whether any state changed.
1571	ProwJobs creates a ProwJobInformer for watching prow jobs in a specific namespace.
1572	ItemToResourcesConfig extracts ResourcesConfig from an Item or returns an error if not possible.
1573	Copy creates a deep copy of a TypeToResources instance.
1574	MakeCommand creates a Cobra command for aggregating Go coverage files.
1575	incrementNumPendingJobs increments the count of pending jobs for the specified job in the controller.
1576	setPreviousReportState updates the previous report state for a Prow job.
1577	SyncMetrics gathers metrics for Prow jobs.
1578	DumpProfile writes profiling data from multiple profiles to the given writer.
1579	blocksEqual checks if two ProfileBlocks have equal start/end columns/lines and number of statements.
1580	NewProwJobInformer creates a filtered ProwJob informer using a client and specified parameters.
1581	NewFilteredProwJobInformer creates a shared informer for ProwJob resources with specified list and watch functions.
1582	New returns a new Spyglass instance.
1583	Lenses retrieves configured lenses based on match cache entries, filters out empty matches, and sorts them by priority.
1584	JobPath determines the GCS path for a given source URL.
1585	RunPath returns the GCS path for the given source.
1586	ExtraLinks retrieves extra links from Spyglass using started.json artifact.
1587	needDemux identifies external plugins that match the given event type and repository
1588	demuxExternal handles external plugins by dispatching events concurrently and logging errors or successes.
1589	dispatch sends HTTP POST request to specified endpoint with given payload and headers.
1590	AddFlags adds state-related flags to cmd.
1591	CheckFlags initializes states for the plugin.
1592	ReceiveIssueEvent processes issue events and returns data points based on event details.
1593	Load loads Prow configuration, finalizes job config, validates component and job configs.
1594	loadConfig loads Prow and job configurations, merging them if necessary.
1595	yamlToConfig reads YAML config from a file and updates job paths.
1596	ReadFileMaybeGZIP reads a file, decompressing it if it's GZIP compressed.
1597	finalizeJobConfig sets default values and validates regexes for job configurations.
1598	validateComponentConfig ensures Plank's JobURLPrefix and JobURLPrefixConfig are consistent and valid.
1599	ConfigPath returns the configuration file path, defaulting to a specified value until a certain date.
1600	ValidateController parses job and report templates, checks concurrency settings, and returns an error if any validation fails.
1601	Set default values for JobBase fields in ProwConfig.
1602	SetPresubmitRegexes compiles trigger and rerun command regexes for each presubmit job.
1603	setBrancherRegexes compiles regexes for branches and skip-branches.
1604	SetPostsubmitRegexes updates branch and change regexes for postsubmits.
1605	Body method generates HTML content based on artifacts and resource directory.
1606	NewBoskosHandler initializes a ServeMux to handle various Boskos API endpoints.
1607	ErrorToStatus maps an error to an appropriate HTTP status code.
1608	DumpProfile writes coverage profile data to specified destination or stdout.
1609	LoadProfile loads coverage profiles from a file or stdin.
1610	NewClient creates a new Git client instance.
1611	SetCredentials updates client's credentials with user and token generator.
1612	Checkout logs attempt and executes git checkout command with specified commitlike parameter, returning error if unsuccessful.
1613	CheckoutNewBranch creates and checks out a new git branch with the given name.
1614	Merge attempts to merge a commit and aborts on failure.
1615	CheckoutPullRequest fetches and checks out a pull request from a Git repository using the provided number.
1616	Config sets the specified Git configuration key-value pair.
1617	retryCmd runs a command up to three times, doubling the sleep duration on failure.
1618	LabelsAndAnnotationsForSpec generates Kubernetes labels and annotations for Prow jobs based on the given spec and additional labels/annotations.
1619	ProwJobToPod converts a Prow job to a Kubernetes pod specification.
1620	CloneLogPath returns the path to the cloned log directory.
1621	cloneEnv encodes clone options into environment variables.
1622	sshVolume generates a Kubernetes volume and mount configuration for SSH keys stored in a secret.
1623	InjectEntrypoint modifies container command to include entrypoint config and mounts.
1624	PlaceEntrypoint creates a container to copy an entrypoint script from a specified volume mount.
1625	kubeEnv converts environment vars to Kubernetes env vars.
1626	Client creates a Kubernetes client based on options and environment.
1627	handle updates GitHub issue labels based on event details.
1628	SendHook posts a JSON payload to a webhook with GitHub headers and checks the response.
1629	janitorClean runs a cleanup command for a given resource using the specified flags.
1630	janitor manages resources, applying cleanup function and updating Boskos accordingly.
1631	PullServer runs and handles config updates.
1632	specToStarted converts job spec to Started object.
1633	Run processes options and uploads data to GCS.
1634	hasPRChanged checks if a pull request event indicates a change.
1635	UpdateIssues fetches and processes GitHub issues using a client, updating the local database accordingly.
1636	handleReviewEvent processes GitHub review events using plugin components.
1637	findAssociatedIssue extracts an issue number from the body text using a regular expression based on the organization's name.
1638	optionsForRepo retrieves configuration options for a repository based on organization and repository names.
1639	localOnlyMain registers handlers for the specified HTTP multiplexer.
1640	Computes total covered and all statements in coverage list.
1641	Subset creates a new CoverageList containing only items whose name starts with the specified prefix.
1642	ListDirectories retrieves unique directories from coverage names in the list.
1643	readRequest reads an HTTP request body and converts it to an AdmissionRequest object.
1644	handle processes HTTP requests by reading them and writing responses.
1645	writeResponse processes an AdmissionRequest, makes a decision, constructs a response, and writes it to the provided writer.
1646	onlyUpdateStatus checks if an AdmissionRequest updates the status subresource or has equivalent specs, returning an appropriate AdmissionResponse.
1647	convertSuiteMeta transforms gcs SuitesMeta into resultstore Suite.
1648	NewHealth starts a health server on a specified port.
1649	ServeReady registers a handler for /healthz/ready endpoint.
1650	NewController initializes and starts a Controller with various dependencies.
1651	newExpectedContext creates a new expected context with the given string and default state and description.
1652	contextsToStrings converts context objects to strings.
1653	filterSubpools filters subpools based on initialization and filtering criteria using goroutines.
1654	filterSubpool filters out PRs from subpool based on filterPR condition.
1655	poolPRMap creates a PR map from a subpool map.
1656	unsuccessfulContexts filters out successful and optional contexts, identifying those that fail or are missing required ones.
1657	accumulate organizes pull requests based on their presubmit job results, categorizing them into successes, pendings, or nones.
1658	tryMerge attempts to merge using a provided function, retrying on certain errors up to a maximum number of times.
1659	prChanges returns a ChangedFilesProvider that fetches and caches pull request changes from GitHub.
1660	prune updates the change cache with the next changes and resets the next cache.
1661	dividePool organizes pull requests and ProwJobs into subpools based on repository and branch.
1662	AggregateProfiles aggregates multiple coverage profiles into a single profile.
1663	countToBoolean converts coverage profiles to boolean values.
1664	NewStorage initializes a Storage instance with a PersistenceLayer and loads resources from a file if specified.
1665	AddResource adds resource to Storage's resources set.
1666	DeleteResource removes a resource from storage.
1667	UpdateResource updates the resource information in storage.
1668	GetResource retrieves a resource by name.
1669	GetResources retrieves sorted resources from storage.
1670	SyncResources updates the storage resources based on the provided data, adding new ones and deleting old ones as necessary.
1671	ParseConfig parses configuration file and extracts resources.
1672	problemsInFiles checks each file in the input map for Bazel syntax issues and returns a map of files with their corresponding problems.
1673	NewPodLogArtifact constructs a new PodLogArtifact instance with validation.
1674	CanonicalLink constructs the canonical link for pod logs.
1675	ReadAt reads data from the specified offset in the pod log artifact.
1676	ReadAll retrieves pod logs within size limit.
1677	ReadAtMost reads up to n bytes from the job log.
1678	ReadTail fetches the last 'n' bytes from a job's log.
1679	newProblems removes lint problems marked with a specific comment tag from the given map of file-line-problem pairs.
1680	problemsInFiles analyzes Git repo files for linting issues and generates review comments.
1681	undoPreset removes specified environment variables, volumes, and volume mounts from a Kubernetes pod based on a given preset and labels.
1682	undoes pre-submit configurations for given presets
1683	yamlBytesStripNulls removes lines containing key: null from YAML byte slice.
1684	monitorDiskAndEvict checks disk usage and evicts cache entries when free space falls below a threshold.
1685	difference computes the difference between two orgRepoConfig instances, updating repositories and exceptions accordingly.
1686	union combines two orgRepoConfig instances by updating org exceptions and adding repos not covered by existing org exceptions.
1687	clearStaleComments deletes stale release note comments on GitHub pull requests.
1688	determineReleaseNoteLabel processes a release note body to return an appropriate label.
1689	getReleaseNote extracts and trims the release note from the given body text using regex.
1690	NewClient initializes a new Client with a Boskos client and an empty resource map.
1691	Acquire acquires resources based on type, state, and destination, handling potential failures by releasing previously acquired resources.
1692	ReleaseOne releases a resource and its associated leased resources.
1693	UpdateAll updates state for all clients.
1694	GetGitHubClient creates a GitHub client using the provided token.
1695	GetUsername retrieves the GitHub username using the client.
1696	CreateTokenHandler reads a token stream, authenticates with GitHub, retrieves the username, and initializes a TokenHandler with the client, username, and InfluxDB instance.
1697	CreateTokenHandlers generates a slice of TokenHandler instances from the given token files.
1698	String returns a human-readable representation of jobIdentifier.
1699	TerminateOlderPresubmitJobs cancels older presubmit jobs based on job identifiers and updates their status.
1700	PushMetrics periodically pushes metrics from Prometheus gatherer to specified endpoint until interrupted.
1701	RateLimiter creates a named rate-limiting queue for the specified controller using exponential backoff and bucket limiting.
1702	checkExistingStatus fetches and logs the DCO status for a given commit.
1703	checkExistingLabels checks if DCO yes/no labels exist on a GitHub issue.
1704	handle checks PR's commit messages, status, and labels, then takes appropriate action based on the results.
1705	MarkdownSHAList generates a markdown-formatted list of commits from a repository.
1706	PathForSpec constructs the log path based on the job specification type.
1707	AliasForSpec returns the alias for the specified job type.
1708	RootForSpec determines the root directory for logs based on the job specification type.
1709	NewSingleDefaultRepoPathBuilder creates a builder function to generate repository paths based on organization and repository names. If the organization and repository match the defaults, it returns an empty string; otherwise, it formats the path using underscores.
1710	NewExplicitRepoPathBuilder returns a function that constructs repository paths for explicit organizations and repositories.
1711	RegisterSourceOrDie registers a new IssueSource or panics if it already exists.
1712	CreateAndSync initializes IssueCreator and generates/syncs issues from various sources.
1713	loadCache fetches user details, valid labels, collaborators, and populates the issue cache.
1714	setIntersect finds common elements between two slices and categorizes them into filtered and removed lists.
1715	sync checks for existing issues with the same ID, creates a new issue if none exists, and handles collaborators and labels.
1716	GetAWSCreds retrieves AWS credentials from a resource's UserData if it matches the expected type.
1717	stopper creates a channel to handle graceful shutdown on interrupt or termination signals.
1718	newPipelineConfig initializes a pipeline configuration with client and informer.
1719	KubeClient retrieves a Kubernetes client using master URL and config.
1720	ProwJobClient returns a client for interacting with Prow jobs using the provided master URL and kubeconfig.
1721	resolveSymLink reads a symlink and returns its resolved path.
1722	readJSON reads JSON data from a storage bucket and unmarshals it into the provided data structure.
1723	listSubDirs lists all subdirectories under the specified GCS bucket with the given prefix.
1724	list all objects with a specific prefix in a GCS bucket
1725	listBuildIDs extracts build IDs from Google Cloud Storage bucket paths
1726	FilterProfilePaths filters profiles based on whether their file names match any of the given paths, including or excluding them based on the include flag.
1727	LoadSecrets loads multiple secrets from specified paths into a map.
1728	LoadSingleSecret reads and trims whitespace from a secret file at the given path.
1729	Set parses a string to a boolean and updates the Bool object.
1730	NewOpener creates a GCS client using optional credentials.
1731	IsNotExist checks if the given error indicates the non-existence of an object or resource.
1732	LogClose logs an error if closing the provided closer fails.
1733	Writer opens a GCS writer or creates a local file.
1734	InitGitHubOAuthConfig initializes the GitHub OAuth config with a cookie store.
1735	deltaDisplayed calculates the percentage difference between new and base ratios.
1736	Generate a table of code coverage changes and check if any ratio falls below a threshold.
1737	ContentForGitHubPost generates a GitHub post content from coverage reports, checking if coverage is low.
1738	AddFlags adds authentication and scanning options to the command.
1739	CheckFlags validates and normalizes organization and project flags for the client.
1740	getGitHubClient initializes and returns a GitHub client using either a token or a file.
1741	limitsCheckAndWait checks GitHub rate limits and sleeps accordingly.
1742	FetchIssues fetches GitHub issues updated after a specified time and sends them through a channel.
1743	hasID checks if an issue event with a specific ID exists in the list.
1744	FetchIssueEvents retrieves and sends issue events for a given issue ID to a channel.
1745	isPRChanged checks if a pull request event represents a change.
1746	NewFetcher initializes a Fetcher with channels for issues and events/comments.
1747	fetchRecentIssues retrieves and pushes issues updated after last fetch.
1748	fetchRecentEventsAndComments retrieves and pushes recent events and comments from the database.
1749	Fetch retrieves recent issues, events, and comments from the database.
1750	Issues fetches and processes a limited number of flaky jobs into issues.
1751	Title returns the job title including the number of recent failures.
1752	Labels generates a list of job labels including test signatures.
1753	ReadHTTP attempts to fetch data from a URL up to 5 times, doubling the delay between retries on server errors.
1754	String returns a sorted string representation of lines by timestamp.
1755	NewJobSpec constructs a JobSpec from ProwJobSpec.
1756	ResolveSpecFromEnv retrieves a JobSpec from an environment variable or returns an error if not set or malformed.
1757	EnvForSpec generates environment variables for a job specification.
1758	EnvForType returns the appropriate environment variables for a given Prow job type.
1759	getRevisionFromRef extracts the revision from PR refs or base SHA/ref.
1760	GetRevisionFromSpec retrieves revision from job spec's refs or extra refs.
1761	helpProvider constructs a PluginHelp object with a description of the merge commit blocker plugin.
1762	load reads a configuration file, parsing lines and populating prefix, path, and file information.
1763	loadPaths reads paths from reader, ignoring comments and empty lines, and stores them in Group.Paths map.
1764	Match checks if path matches any group criteria.
1765	CreateDatabase initializes InfluxDB connection and manages series data.
1766	mergeTags combines two maps of tags, prioritizing extraTags.
1767	tagsToWhere generates a SQL WHERE clause from a map of tags.
1768	Push adds a new point to InfluxDB batch.
1769	artifact creates and returns a new PodLogArtifact object.
1770	serve starts an HTTP server on port 8080 serving Prometheus metrics.
1771	gather periodically syncs metrics or shuts down on signal.
1772	makeRequest converts a policy into a GitHub branch protection request.
1773	makeReviews constructs GitHub's RequiredPullRequestReviews from branch protection policies.
1774	Header generates the header template for lenses using artifacts and resource directory.
1775	Callback processes artifacts and extracts log lines based on request parameters.
1776	logLinesAll reads all log lines from an artifact and returns them as a string slice.
1777	executeTemplate parses a template file and executes it with given data, returning the rendered result or an error message.
1778	DeepCopyObject creates a deep copy of the resource object or returns nil if the copy fails.
1779	FromItem converts an item to a resource object.
1780	SetItems converts input objects to ResourceObjects and assigns them to Items.
1781	DeepCopyObject creates a deep copy of the resource collection or returns nil if the copy fails.
1782	useContext sets the current Kubernetes context.
1783	currentContext retrieves the current kubectl context.
1784	command runs a command with the given binary and arguments, returning the command and its arguments as a slice.
1785	describeCluster fetches and validates details of a Kubernetes cluster using gcloud.
1786	Set adds a value to the slice.
1787	parseXML unmarshals XML body into gcsDir, adjusting names and filtering based on object path.
1788	Render outputs HTML directory listing for Google Cloud Storage path.
1789	Render outputs file or directory details as HTML grid item.
1790	Render generates a URL for a resource and passes it to htmlGridItem for rendering.
1791	Printf appends a nonce before logging the formatted message.
1792	NewClient initializes a Client with handlers for multiple Gerrit instances.
1793	SetReview updates a Gerrit review with a message and labels.
1794	GetBranchRevision fetches the revision of a specified branch in a Gerrit project.
1795	queryAllChanges retrieves all gerrit changes across projects.
1796	NewTypeFilterWrapperPlugin wraps a Plugin, initializing it with an empty pass filter.
1797	AddFlags adds ignore flags for pull requests and issues to cmd.
1798	CheckFlags verifies that either pull-requests or issues are ignored, not both.
1799	AddFlags injects KubernetesClientOptions flags into fs.
1800	Validate checks if the kubeConfig file exists.
1801	Client provides a Kubernetes client based on options.
1802	newCRDClient initializes a Kubernetes CRD client with specified type and configuration.
1803	createRESTConfig generates a REST configuration for Kubernetes based on the provided kubeconfig and type.
1804	registerResource registers a custom resource definition using the provided configuration and type.
1805	newDummyClient creates a new dummy client with given type.
1806	Update updates or returns error if object not found.
1807	TrustedPullRequest checks if the author is a trusted user or if the PR has the 'ok-to-test' label.
1808	buildAll filters presubmit jobs based on PR changes and runs them, skipping some as needed.
1809	Run executes job steps and handles interruptions, logging results and uploading artifacts.
1810	AddConfig adds configuration resources to the storage.
1811	DeleteConfig deletes a configuration.
1812	UpdateConfig updates configuration resources.
1813	GetConfig retrieves resources configuration by name.
1814	GetConfigs retrieves all resource configurations from storage.
1815	SyncConfigs updates or deletes resource configurations based on differences between current and new sets.
1816	addKnownTypes registers ProwJob types with the given scheme.
1817	NewController initializes a Controller with specified parameters.
1818	Run handles reconciliation of statuses on changes or stop signal.
1819	addedBlockingPresubmits identifies new or modified blocking presubmits across repositories.
1820	removedBlockingPresubmits identifies and logs removed blocking presubmits between two configurations.
1821	migratedBlockingPresubmits identifies and logs migrations of blocking presubmits between two configurations.
1822	Load loads configuration using environment variable or command-line flags.
1823	canExecuteConcurrently checks if a ProwJob can start based on concurrency limits.
1824	getJenkinsJobs filters incomplete ProwJobs to create BuildQueryParams.
1825	terminateDupes cancels duplicate presubmit jobs, keeping the most recent one and optionally aborting Jenkins builds.
1826	Throttle controls request rate limiting by setting up or disabling a ticker based on token limits.
1827	NewClientWithFields initializes a new client with specified fields, token function, GraphQL endpoint, and base URLs.
1828	NewClient initializes a client using token provider and GraphQL endpoint.
1829	NewDryRunClient initializes a dry-run client for GraphQL operations.
1830	NewFakeClient creates a fake client with logging and standard time settings.
1831	request sends an HTTP request and parses the response body into the given struct.
1832	requestRaw sends an HTTP request and returns the response status code, body, and any errors encountered.
1833	getUserData fetches user data and sets botName and email.
1834	readPaginatedResultsWithValues fetches paginated results from API endpoint.
1835	UpdatePullRequest updates a pull request's details on GitHub.
1836	getLabels retrieves labels from a GitHub API endpoint.
1837	stateCannotBeChangedOrOriginalError wraps original error if it contains specific message prefix.
1838	IsMergeable checks if a pull request is mergeable by repeatedly fetching its details until it reaches a decision or exceeds the maximum number of tries.
1839	Token retrieves an OAuth2 token from the source.
1840	ListArtifacts retrieves artifact names from GCS, appending "build-log.txt" if not found.
1841	KeyToJob extracts job name and build ID from source string.
1842	prowToGCS converts Prow key to GCS path by fetching job details and validating URL prefix.
1843	FetchArtifacts retrieves artifacts for a given source, pod, and list of artifact names, including a build log if needed.
1844	DeepCopy creates a deep copy of DecorationConfig.
1845	DeepCopy creates a deep copy of the GCS configuration.
1846	DeepCopy creates a deep copy of JenkinsSpec.
1847	DeepCopy creates a deep copy of ProwJob.
1848	DeepCopy creates a deep copy of ProwJobList.
1849	DeepCopy creates a deep copy of ProwJobSpec.
1850	DeepCopy creates a deep copy of ProwJobStatus.
1851	DeepCopy creates a deep copy of Pull.
1852	DeepCopy creates a deep copy of Refs.
1853	DeepCopy creates a deep copy of UtilityImages.
1854	upload creates a new test run in the Result Store and returns its URL.
1855	ApplyDefault merges two DecorationConfig instances, preferring non-nil values from the first or defaulting to the second.
1856	Validate checks utility images and GCS configuration for completeness.
1857	ApplyDefault merges two UtilityImages structs, prioritizing non-empty fields from the second.
1858	ApplyDefault merges two GCSConfiguration structs, preferring values from the first unless it's nil.
1859	Validate checks GCS configuration for valid path strategy and default org/repo when needed.
1860	ClusterAlias returns the cluster alias.
1861	NewResource creates a new resource with the specified properties.
1862	NewResourcesFromConfig creates a list of resources from a configuration entry.
1863	UserDataFromMap creates a UserData instance from a map.
1864	Set adds a new value to CommaSeparatedStrings if not already set.
1865	UnmarshalJSON deserializes JSON data into UserData.
1866	Extract loads content for the given ID and unmarshals it into the specified output structure.
1867	Set serializes input to YAML and stores it under specified ID.
1868	Update updates user data based on the non-empty values from the new UserData object.
1869	ToMap converts user data to a map.
1870	FromMap populates UserData from a map using Store method.
1871	ItemToResource converts an Item interface to a Resource, returning an error if not possible.
1872	Run clones Git refs using multiple workers, logs results, and handles SSH keys and fingerprints.
1873	addSSHKeys starts an SSH agent, parses its output, and adds SSH keys from specified paths to the agent.
1874	Issues fetches top clusters based on data URL and creates corresponding issues.
1875	loadClusters parses JSON input, filters clusters, aggregates failing builds, and calculates totals.
1876	parseTriageData parses JSON input and validates required keys before populating a triageData struct with BuildIndexers for jobs.
1877	topClusters selects the top N clusters based on their total builds.
1878	topJobsFailed returns the top 'count' jobs with the most failed builds.
1879	Title returns formatted failure cluster details.
1880	Labels method returns a list of labels for cluster tests.
1881	New creates a new Cron instance.
1882	QueuedJobs returns a list of jobs that have been triggered and resets their triggered flag.
1883	HasJob checks if a cron job with the specified name exists.
1884	addJob adds a new cron job with the specified name and cron expression, triggering it immediately if the cron expression starts with @every.
1885	removeJob deletes a specified cron job from the system.
1886	UpdateComments updates comments for an issue or pull request based on the latest comment time.
1887	GatherProwJobMetrics counts ProwJob metrics by job, type, and state, updating Prometheus metrics accordingly.
1888	optionOrDefault returns the default value if option is zero.
1889	newGCSJobSource parses GCS source URL and extracts job details.
1890	artifacts retrieves artifacts from Google Cloud Storage using a job source and handles retries on errors.
1891	canonicalLink constructs the canonical URL for a GCS job source by joining the link prefix, bucket, and job prefix.
1892	jobPath constructs the full path for accessing a job in Google Cloud Storage based on the bucket and job prefix.
1893	targetURL constructs a URL based on configuration settings or parses a base URL to create a query for a pull request.
1894	newBuildConfig initializes a build configuration with a Kubernetes client and starts a shared informer for builds.
1895	NewClient initializes a GitHub client with OAuth2 authentication and configures it for issue, pull request, repository, and user services.
1896	retry attempts an operation multiple times, handling rate limits and other errors before giving up.
1897	depaginate handles pagination for GitHub API calls.
1898	NewHelpAgent constructs a HelpAgent with logging and plugin dependencies.
1899	GeneratePluginHelp creates a help object containing plugin information based on agent configuration.
1900	getPullCommitHash extracts commit hash from pull request string.
1901	listJobBuilds retrieves all job builds from a storage bucket based on given prefixes.
1902	getPRBuildData fetches and processes build data from multiple sources concurrently.
1903	getGCSDirsForPR retrieves GCS directories for a given PR based on configuration.
1904	imageDeleteFromDisk removes image files from disk based on fingerprint.
1905	doNetworksCreate starts and deletes a network if starting fails.
1906	networkLoadByName retrieves a network by its name from the state and constructs a network object.
1907	Transaction wraps a database transaction with NodeTx functionality.
1908	ForLocalInspectionWithPreparedStmts prepares db statements for local inspection.
1909	Sets default timeout for cluster's database driver context.
1910	Transaction runs a function within a read lock on the cluster.
1911	Acquire exclusive lock on cluster db with timeout.
1912	ExitExclusive releases the exclusive lock and runs a transaction.
1913	Close closes all statements in the cluster and then closes the database connection.
1914	TxCommit attempts to commit a transaction, ignoring duplicate commits or rollbacks.
1915	ParseRemote extracts the remote and name from the given raw string, using the default remote if not found.
1916	GetContainerServer fetches a container server by name from configuration.
1917	GetImageServer retrieves the image server for the specified remote.
1918	initAppArmor detects and initializes AppArmor settings based on system capabilities and configurations.
1919	appArmorCanStack checks if AppArmor supports stacking domains with version 1.2 or higher.
1920	containerDeviceAdd adds a new device to a specified container.
1921	profileDeviceAdd adds a new device to a container's profile if it doesn't already exist.
1922	ensureImageAliases manages image aliases on LXD server by adding and removing them based on provided list.
1923	GetExistingAliases filters image aliases based on provided list.
1924	String provides a human-readable description of the operation's status code.
1925	ImagesGetExpired retrieves fingerprints of expired images based on expiry duration.
1926	ImageSourceInsert inserts image source details into the database.
1927	ImageSourceGet retrieves image source details based on image ID.
1928	ImageExists checks if an image with the specified fingerprint exists in the given project or default project.
1929	ImageGet retrieves image details based on project, fingerprint, and public status.
1930	ImageGetFromAnyProject retrieves image details based on its fingerprint from the database.
1931	imageFill populates an image object with details from the database.
1932	ImageLocate finds an online node with the specified image fingerprint.
1933	ImageAssociateNode associates a node with an image.
1934	ImageDelete removes image from database by ID.
1935	ImageAliasesGet retrieves image aliases for a project.
1936	ImageAliasGet retrieves the ID, fingerprint, and description of an image alias based on project and name.
1937	ImageAliasRename updates an image alias's name in the database.
1938	ImageAliasDelete deletes an image alias within a transactional context, handling project defaults.
1939	ImageAliasesMove updates image_id in images_aliases table.
1940	ImageAliasAdd adds an alias to an image in the specified project.
1941	ImageAliasUpdate updates the alias of a cluster image.
1942	ImageLastAccessUpdate updates the last use date of an image in the database.
1943	ImageLastAccessInit updates image cache status and access date.
1944	ImageUpdate updates cluster image details and properties in transaction.
1945	ImageInsert inserts an image into the cluster's database with various properties and associations.
1946	ImageGetPools retrieves storage pool IDs for a given image fingerprint.
1947	ImageGetPoolNamesFromIDs retrieves pool names from IDs using SQL query.
1948	ImageUploadedAt updates the upload date of a specific image in the database.
1949	ImagesGetOnCurrentNode retrieves images on the current node.
1950	ImagesGetByNodeID retrieves images associated with a specific node ID.
1951	ImageGetNodesWithImage retrieves nodes having a specific image.
1952	ImageGetNodesWithoutImage retrieves nodes without a specific image.
1953	Add will append a new task to Group with the given function and schedule, returning a pointer to the added task.
1954	Start initiates concurrent execution of tasks within a group using context cancellation.
1955	zfsIsEnabled checks if ZFS is installed on the system.
1956	zfsToolVersionGet retrieves the installed version of zfsutils-linux package using dpkg-query command.
1957	zfsModuleVersionGet retrieves the version of the ZFS kernel module.
1958	zfsPoolVolumeCreate creates a ZFS volume with specified properties and dataset.
1959	zfsPoolVolumeExists checks if a ZFS dataset exists.
1960	NetworkIDsNotPending retrieves IDs of non-pending networks from the database.
1961	NetworkConfigAdd invokes networkConfigAdd with transaction context.
1962	NetworkNodeJoin inserts or updates network node information.
1963	NetworkCreatePending checks if a network exists, creates it if not, and adds a node-specific configuration if it does.
1964	NetworkCreated marks the network state as created.
1965	NetworkErrored marks the cluster's network state as errored.
1966	NetworkGet retrieves details about a network by its name.
1967	networkNodes retrieves node names associated with a specified network ID.
1968	NetworkGetInterface retrieves the network ID and details for a given device name.
1969	NetworkConfigGet retrieves network configuration settings for a given ID.
1970	NetworkCreate inserts a new network record and associates it with the cluster.
1971	NetworkUpdate updates a cluster's network configuration.
1972	NetworkUpdateDescription updates the network's description in the database.
1973	NetworkConfigClear deletes network configuration entries for a given network and node.
1974	NetworkDelete removes a network entry by name.
1975	NetworkRename updates the name of a network in the database.
1976	GetContainers retrieves all containers using LXD protocol.
1977	GetContainersFull retrieves all container details from LXD server.
1978	GetContainer retrieves container details from LXD.
1979	CreateContainerFromBackup creates a container from a backup with optional pool support.
1980	CreateContainer sends a POST request to create a container and handles container-only migration if needed.
1981	CreateContainerFromImage creates a container using an image from a source.
1982	UpdateContainer sends a PUT request to update a container's properties.
1983	RenameContainer renames a container using the provided name and new container details.
1984	ExecContainer executes commands in a container and handles input/output streams.
1985	GetContainerFile fetches a file from a container using LXD protocol.
1986	CreateContainerFile sends a POST request to create or update a file inside a container.
1987	DeleteContainerFile removes a file from a specified container using LXD's REST API.
1988	GetContainerSnapshotNames retrieves all snapshot names for a given container.
1989	GetContainerSnapshots retrieves all snapshots of a specified container from LXD.
1990	GetContainerSnapshot retrieves a snapshot of a container by name.
1991	CreateContainerSnapshot creates a snapshot of a container and returns the operation object.
1992	MigrateContainerSnapshot sends a POST request to migrate a container snapshot.
1993	UpdateContainerSnapshot updates a snapshot of a container using PUT request.
1994	GetContainerState retrieves the state of a container by name.
1995	UpdateContainerState updates the state of a container using its name, new state data, and ETag.
1996	GetContainerLogfiles retrieves the log file paths for a specified container.
1997	GetContainerLogfile fetches the specified logfile for a container.
1998	GetContainerMetadata retrieves metadata for a specified container.
1999	SetContainerMetadata updates the metadata for a specific LXD container.
2000	GetContainerTemplateFiles retrieves the template files associated with a specific container.
2001	CreateContainerTemplateFile creates a new container template file.
2002	DeleteContainerTemplateFile removes a container template file from the LXD protocol if the required API extension is available.
2003	ConsoleContainer establishes a WebSocket connection for a container's console session.
2004	GetContainerConsoleLog retrieves the console log for a specific container using LXD protocol.
2005	DeleteContainerConsoleLog deletes the console log for a specified container.
2006	GetContainerBackups retrieves container backups from the LXD protocol.
2007	GetContainerBackup retrieves a container backup from the server.
2008	CreateContainerBackup sends a POST request to create a backup for a specified container.
2009	RenameContainerBackup sends a POST request to rename a container backup.
2010	DeleteContainerBackup deletes a backup of a specified container on the server.
2011	GetContainerBackupFile retrieves a backup file for a container.
2012	RsyncSend uses websocket for bi-directional data transfer during file synchronization.
2013	patches.GetNames extracts names from a list of patches.
2014	patchRenameCustomVolumeLVs renames custom LVM volumes in all pools.
2015	patchLvmNodeSpecificConfigKeys updates LVM-specific config keys across all nodes.
2016	GetHTTPClient retrieves the HTTP client used by the ProtocolLXD instance.
2017	do sends HTTP requests, adding Macaroon headers if necessary.
2018	RawQuery performs a raw HTTP request to the LXD server.
2019	RawWebsocket retrieves a raw websocket connection using the specified path.
2020	RawOperation sends raw HTTP request to LXD server.
2021	ProfileToAPI converts a Profile object to an api.Profile struct.
2022	Profiles retrieves the list of profiles associated with a specified project or the default project if none exists.
2023	ProfileGet retrieves the ID and details of a profile in a specified project or default if not enabled.
2024	ProfilesGet retrieves API profiles for specified names in a given project.
2025	ProfileConfig retrieves configuration settings for a specified profile within a project, handling cases where the profile or project does not exist.
2026	ProfileConfigClear deletes configuration related to a specific profile ID from multiple tables.
2027	ProfileConfigAdd inserts configuration into the database for a given profile.
2028	ProfileContainersGet retrieves container names associated with a specified project and profile.
2029	ProfileCleanupLeftover deletes unused profiles and their related configurations from the database.
2030	ProfilesExpandConfig merges multiple profiles' configurations into a single config, prioritizing the given config.
2031	ProfilesExpandDevices combines device configurations from multiple profiles with specific device overrides.
2032	GetServer fetches the LXD server details, populates missing fields, caches the result, and returns it along with the ETag.
2033	UpdateServer sends a PUT request to update the LXD server configuration.
2034	HasExtension checks if the LXD protocol supports a specific extension.
2035	GetServerResources retrieves the server's resource information from the LXD protocol.
2036	UseProject sets the project field to the specified name.
2037	sqliteOpen opens a SQLite database at the specified path with a timeout and exclusive transaction locking mode.
2038	Rebalance adds a new database node to the Raft cluster if possible.
2039	Promote will promote a node to a database node by joining its Raft cluster.
2040	Purge removes a node from the database by clearing and then removing it.
2041	List retrieves cluster member information based on state transactions.
2042	Count retrieves the total number of nodes in the cluster using a transaction.
2043	Enabled checks if the node has any Raft addresses configured and returns true if so.
2044	membershipCheckNodeStateForBootstrapOrJoin verifies node's state before bootstrapping or joining a cluster.
2045	membershipCheckClusterStateForBootstrapOrJoin checks if cluster state is consistent during bootstrap or join.
2046	membershipCheckClusterStateForAccept checks if adding a new node with given details would violate any existing nodes' properties.
2047	membershipCheckClusterStateForLeave checks if a node can leave the cluster based on its container and image presence and whether it's the last node.
2048	membershipCheckNoLeftoverClusterCert checks for leftover cluster certificates in the specified directory.
2049	ConfigLoad loads the configuration from the database and validates it using SafeLoad.
2050	Replace updates the configuration with new values and returns the updated configuration as strings.
2051	Patch updates config values with a given patch map.
2052	HTTPSAddress retrieves the HTTPS address from a database transaction.
2053	CertificatesGet retrieves all certificate information from the database.
2054	CertificateGet retrieves certificate info by fingerprint from database.
2055	CertSave inserts a certificate into the database.
2056	CertDelete deletes a certificate by its fingerprint.
2057	CertUpdate updates certificate details in the database.
2058	createDevLxdlListener creates a Unix domain socket listener at dir/devlxd/sock, removing any stale sockets first.
2059	Servers returns the list of servers in the Raft cluster if the current instance is the leader.
2060	Shutdown stops the raft instance and ensures it shuts down gracefully or times out.
2061	raftNetworkTransport creates a new Raft network transport with the given parameters.
2062	raftConfig scales Raft timeouts based on network latency and sets snapshot parameters.
2063	raftMaybeBootstrap checks if Raft needs re-initialization and performs it if necessary.
2064	CPUResource returns a CPU resource description based on system threads.
2065	MemoryResource reads memory stats from /proc/meminfo and calculates used and total memory in bytes.
2066	GetOperationUUIDs fetches and parses operation UUIDs from LXD protocol.
2067	GetOperations retrieves all LXD operations.
2068	GetOperation retrieves a LXD operation by UUID.
2069	GetOperationWebsocket constructs the websocket URL for a given operation and retrieves it using the protocol's websocket method.
2070	tryMount attempts to mount src filesystem at dst with retries on failure.
2071	lxdUsesPool checks if a storage pool uses a specific disk pool and driver.
2072	ProjectURIs retrieves URIs for projects matching specified filters using SQL queries.
2073	ProjectList filters and retrieves project details based on the provided criteria.
2074	ProjectGet retrieves a project by name, handling cases where no or multiple projects match.
2075	ProjectExists checks if a project with the given name exists.
2076	ProjectCreate inserts a new project into the database and its configuration.
2077	ProjectUsedByRef retrieves project references by filtering criteria.
2078	ProjectRename renames a project in the database and checks if exactly one row was affected.
2079	ProjectDelete deletes a project from the cluster and verifies exactly one row was affected.
2080	PasswordCheck verifies if the provided password matches the stored hash using scrypt.
2081	LoadCert loads TLS certificate info from specified directory based on cluster existence.
2082	WriteCert saves certificate files to specified directory with given prefix.
2083	NewDaemon initializes and returns a new Daemon instance.
2084	DefaultDaemon creates and returns a new Daemon instance with default configuration and OS settings.
2085	AllowProjectPermission checks if the user has the required permission for a project.
2086	checkTrustedClient verifies if the client making the HTTP request is authenticated and authorized.
2087	Authenticate validates HTTP requests based on TLS certificates and authentication headers, returning whether the request is authorized, the username, and the authentication method used.
2088	State creates a new state object for the daemon.
2089	UnixSocket returns the path to the Unix socket used by the daemon.
2090	Stop shuts down the daemon, handling endpoints, tasks, cluster, database, and gateway gracefully.
2091	setupExternalAuthentication configures external authentication for the daemon using the provided endpoint, public key, expiry, and domains. It sets up the necessary clients, keys, and authorizers for secure communication.
2092	initializeDbObject initializes the local database for LXD, handles renaming, and applies necessary patches.
2093	WriteJSON encodes the given body to JSON format and writes it to the response writer, optionally capturing and logging the output if debugging is enabled.
2094	EtagHash generates a SHA-256 hash of JSON-encoded data and returns it as a hexadecimal string.
2095	EtagCheck validates If-Match header against data's ETag hash. Returns error if they don't match.
2096	HTTPClient creates an HTTP client configured with TLS and custom proxy settings.
2097	IsRecursionRequest checks if HTTP request contains non-zero recursion value.
2098	GetListeners retrieves inherited network listeners based on environment variables.
2099	internalSQLGet retrieves SQL data based on specified parameters.
2100	internalSQLPost processes SQL queries through HTTP requests, handling transactions and responses accordingly.
2101	PublicKey returns the PEM-encoded certificate from CertInfo.
2102	PrivateKey extracts and encodes the private key from CertInfo's KeyPair.
2103	Fingerprint generates and returns the fingerprint of the certificate.
2104	GenCert creates a certificate and key file at the specified paths.
2105	PrintServerInfo prints detailed information about the LXD container server's environment.
2106	LaunchContainers launches specified number of containers in batches, optionally starting and freezing them.
2107	CreateContainers launches multiple containers in batches and measures the total time taken.
2108	GetContainers filters and returns containers where userConfigKey is true.
2109	StartContainers starts multiple containers concurrently using batches.
2110	setQueryParam updates the query parameter in a URI and returns the updated URI.
2111	GetImages retrieves all images from the LXD protocol.
2112	GetImageFile calls GetPrivateImageFile with empty project.
2113	GetImageSecret retrieves the secret associated with an image using its fingerprint.
2114	GetPrivateImage retrieves a private image from LXD using its fingerprint and optional secret.
2115	GetPrivateImageFile retrieves a private image file using LXD protocol.
2116	GetImageAliases retrieves all image aliases from LXD protocol.
2117	tryCopyImage attempts to copy an image from multiple URLs, handling aliases for older servers.
2118	CopyImage copies an image from one server to another using LXD protocol.
2119	UpdateImage sends a PUT request to update an image using its fingerprint.
2120	DeleteImage sends a DELETE request to remove an image by its fingerprint.
2121	RefreshImage refreshes the image using its fingerprint.
2122	CreateImageAlias creates an image alias using the provided details.
2123	UpdateImageAlias updates LXD image alias.
2124	RenameImageAlias updates an image alias using a POST request.
2125	DeleteImageAlias removes an image alias.
2126	Open opens a SQLite database file located at dir/local.db.
2127	EnsureSchema updates the LXD database schema by running migration scripts and hooks.
2128	FilesystemDetect identifies the type of filesystem at the given path.
2129	Schema creates a new schema from updates and applies fresh schema changes.
2130	updateFromV37 migrates configuration from core.https_address to cluster.https_address in a single transaction.
2131	ArchitectureGetLocal retrieves local machine architecture.
2132	NewController creates a new MAAS controller client connected to the specified URL, using the given API key and machine name.
2133	CreateContainer creates a new container with the given name and interfaces, linking them to subnets.
2134	DefinedContainer checks if a container is defined.
2135	UpdateContainer updates the network interfaces for a container in MAAS based on the provided interfaces.
2136	RenameContainer updates the name of a container by sending a PUT request to the server.
2137	DeleteContainer deletes a container.
2138	Add will append an update to the schema's updates list.
2139	ensureSchemaTableExists checks if a schema table exists and creates it if not.
2140	queryCurrentVersion retrieves and validates the highest recorded schema version from the database, addressing specific version gaps.
2141	ensureUpdatesAreApplied applies pending database schema updates sequentially.
2142	checkSchemaVersionsHaveNoHoles checks if schema versions are sequential without gaps.
2143	checkAllUpdatesAreApplied verifies that applied schema updates match expected version levels.
2144	formatSQL formats SQL statements by adding newlines before commas after UNIQUE constraints.
2145	GetAllXattr retrieves all extended attributes for a given path, ensuring consistency between calls.
2146	GetErrno extracts the underlying errno from various error types, returning it along with a boolean indicating success.
2147	Uname retrieves the system's uname information.
2148	RegisterStmt adds a SQL statement to stmts and returns its index.
2149	PrepareStmts prepares SQL statements from a map and returns them indexed by their codes.
2150	NewGateway initializes a Gateway instance with database, certificate, and optional configurations.
2151	DialFunc returns a dialer function for connecting to a gateway using either memory or network dialing.
2152	Shutdown stops the gateway and its components safely.
2153	Sync dumps the gateway's database to disk if the server is running.
2154	Reset resets the gateway's database and certificate information.
2155	LeaderAddress retrieves the address of the Raft leader or contacts a Raft node to get it.
2156	waitLeadership waits for the RAFT node to become leader within a timeout.
2157	currentRaftNodes retrieves the list of Raft nodes from the gateway.
2158	cachedRaftNodes retrieves cached Raft node addresses from the database within a transaction.
2159	dqliteMemoryDial creates a DialFunc for connecting to a dqlite database using a memory listener.
2160	DqliteLog formats and logs messages based on their severity level.
2161	MetadataAsMap converts response metadata to a map
2162	MetadataAsOperation converts response metadata to operation struct
2163	MetadataAsStringSlice converts Response metadata to a string slice.
2164	MetadataAsStruct unmarshals JSON metadata into target struct.
2165	Load reads CSV data from a file and adds records to the report.
2166	Write creates or truncates a CSV report file and writes records to it.
2167	AddRecord appends a new record to the CSV report with timestamp, duration, label, and success status.
2168	LoadConfig loads configuration settings from a YAML file.
2169	SaveConfig saves the configuration to a file after removing static remotes and marshalling it to YAML.
2170	Get reads a file from a specified path within a chroot environment.
2171	ConfigPath constructs the full path to a configuration file based on given subdirectories.
2172	ServerCertPath constructs the path to the server certificate file based on the remote identifier.
2173	NewConfig initializes a Config struct with default values if specified.
2174	checkForPreDumpSupport determines if pre-dump support is enabled based on container configuration and sets the maximum number of iterations.
2175	preDumpLoop performs a CRIU pre-dump, sends the dump, reads stats, and determines if it's the final pre-dump based on memory page skipping.
2176	newRoot creates a root Cobra command for LXD code generation.
2177	APIExtensionsCount returns the total number of API extensions, potentially artificially bumped.
2178	SelectURIs executes a SQL statement, retrieves column values using a formatter function, and returns a slice of formatted URIs.
2179	SelectStrings executes a SQL query to retrieve string values and returns them as a slice.
2180	scanSingleColumn executes a SQL query on a transaction and scans each row using a custom scan function.
2181	LazyHandler processes lazy functions in a Record's context, evaluating them and handling errors.
2182	Callers retrieves stack traces for the caller's callers.
2183	name returns the function name at the given program counter
2184	TrimBelow removes elements from the start of the trace until it finds the specified call.
2185	TrimAbove removes calls above the specified call in the trace.
2186	TrimBelowName removes all traces from the beginning until it finds the first trace with the specified name. If no such trace exists, it returns an empty Trace.
2187	TrimAboveName removes elements from trace until it finds specified name or becomes empty.
2188	TrimRuntime removes the last frame from the trace until it encounters a frame outside the Go runtime.
2189	GetCaps retrieves the security capability value as bytes from the given path's extended attributes.
2190	SetCaps applies POSIX capabilities to a file at the specified path for the given user.
2191	Read tracks progress while reading from the underlying reader.
2192	Supported checks if quota control is supported for a given path.
2193	GetProject retrieves the project ID from the given path using ioctl.
2194	SetProject updates the project ID for a given path using ioctl.
2195	DeleteProject unsets project from path and quota
2196	GetProjectUsage retrieves the disk usage for a specified project ID at a given path using system call.
2197	SetProjectQuota updates the project quota using the specified path, ID, and byte count.
2198	backupLoadByName retrieves a backup by name and project, loading its associated container.
2199	backupCreate creates a new backup in the state and storage.
2200	Rename renames a backup and updates its database record.
2201	Delete initiates the deletion process for the backup.
2202	backupFixStoragePool updates the storage pool in backup files.
2203	Count executes a SQL query to return the number of rows in a specified table that match optional WHERE clause conditions.
2204	CountAll retrieves row counts for each table in the database.
2205	InitTLSConfig initializes a TLS configuration with specific cipher suites and protocol version.
2206	copyContainerThinpool creates a snapshot and assigns a new UUID to the container's thinpool.
2207	copyContainerLv copies or creates a container LV from a source to a target.
2208	copyContainer copies a container from source to target using LVM, handling thinpool snapshots or full copies based on storage settings.
2209	copyVolume copies a volume from a source to a target mount point.
2210	GetPrivateImage returns error for private images not supported.
2211	GetPrivateImageFile returns error for private images not supported by SimpleStreams protocol.
2212	GetImageAliasNames retrieves image alias names using simplestreams.
2213	ProtoRecv reads a binary message from a WebSocket connection and unmarshals it into a protocol buffer message.
2214	ProtoSend sends a protobuf message over a websocket connection.
2215	ProtoSendControl sends a control message over WebSocket indicating success or failure along with an error message if any.
2216	Read mirrors input until 'q' after escape is detected; disconnects console.
2217	doContainersGetFromNode fetches containers from a specified node using a project-specific client within a timeout period.
2218	Retry attempts to execute function f up to 5 times, logging errors and retrying if they are retriable.
2219	IsRetriableError checks if the given error is retryable based on specific SQLite and disk I/O error messages.
2220	AppArmorProfile reads and returns the current AppArmor profile.
2221	StoragePoolVolumeCreate creates a BTRFS storage volume on a storage pool.
2222	ContainerStorageReady checks if Btrfs subvolume is ready for container storage.
2223	ContainerCreateFromImage creates a BTRFS subvolume for a container using an image.
2224	ContainerSnapshotRename renames a BTRFS snapshot within a storage pool.
2225	ContainerSnapshotCreateEmpty creates an empty BTRFS snapshot volume.
2226	btrfsSubVolumesDelete deletes all sub-subvolumes under a specified Btrfs subvolume before deleting the subvolume itself.
2227	isBtrfsSubVolume checks if the specified path is a Btrfs subvolume.
2228	SelectConfig retrieves configuration settings from a database table based on a query condition.
2229	UpdateConfig updates or deletes config values in a specified SQL table based on input map.
2230	deleteConfig deletes rows from a specified SQL table where keys match the provided slice.
2231	FormatSection formats a section header and indented content, adding a separator if necessary.
2232	GetProjects retrieves all projects from the LXD protocol if the "projects" extension is enabled.
2233	GetProject retrieves project details from LXD server.
2234	CreateProject sends a POST request to create a project if the "projects" extension is enabled.
2235	UpdateProject updates a LXD project using its name, new settings, and ETag.
2236	RenameProject renames an existing project using the provided name and settings.
2237	Read retries reading until no error occurs or specific errors like EAGAIN or EINTR are encountered.
2238	Writer's Write method retries on EAGAIN and EINTR until successful.
2239	NewCanceler initializes a new canceler with a request channel map.
2240	Cancelable checks if there are any cancel requests waiting.
2241	Cancel cancels all requests and returns an error if not cancelable.
2242	CancelableDownload sends HTTP request and allows canceling it through a channel.
2243	clusterGet retrieves cluster information and returns it as a JSON response.
2244	clusterGetMemberConfig retrieves configuration keys for storage pools and networks in a cluster.
2245	clusterPutDisable disables clustering and resets the cluster database.
2246	tryClusterRebalance attempts to rebalance a cluster by connecting to the leader node and sending a rebalance request.
2247	internalClusterPostRebalance redirects non-leader requests to the cluster leader and promotes a spare node if available.
2248	internalClusterPostPromote promotes new raft nodes in a cluster.
2249	Filters extracts and sorts filters from package based on entity prefix.
2250	Parse extracts struct fields from an AST package and returns a mapping object.
2251	findStruct retrieves a struct type from a given scope based on its name.
2252	parseStruct extracts fields from a Go struct type, including those from nested structs.
2253	GetProfileNames retrieves all profile names from the LXD server.
2254	GetProfiles retrieves all LXD profiles.
2255	GetProfile retrieves a LXD profile by name and returns its data along with an ETag.
2256	CreateProfile sends a POST request to create a new profile.
2257	UpdateProfile updates the specified LXD profile with the given details.
2258	RenameProfile sends a POST request to rename a profile.
2259	Load creates a new Map from a schema and a set of string values, updating it accordingly.
2260	Dump returns a map of schema values excluding defaults and hidden fields.
2261	GetRaw retrieves the raw value associated with the specified name using the schema's default value if it doesn't exist.
2262	GetString retrieves a string value from Map using a key after asserting its type.
2263	GetBool retrieves a boolean value from m using name after asserting its key type.
2264	GetInt64 retrieves an int64 value from a map with type assertion.
2265	update updates the map with new values and returns the list of updated keys or an error
2266	set updates a map's value for a given key, validating and optionally transforming it before storing.
2267	DoesSchemaTableExist checks if a specific schema table exists within a SQLite database transaction.
2268	selectSchemaVersions retrieves sorted version numbers from the schema table using a database transaction.
2269	selectTablesSQL retrieves SQL statements for tables, views, and indexes from a SQLite database using a transaction.
2270	createSchemaTable creates a table for storing schema versions.
2271	insertSchemaVersion inserts a new schema version into the database transaction.
2272	NewState initializes a new State object with various components.
2273	containerLXCUnload removes finalizers and releases resources for the container.
2274	containerLXCInstantiate creates a new LXC container instance from given arguments.
2275	initStorage initializes the container's storage if not already done.
2276	OnNetworkUp updates device name and sets up host VETH device.
2277	setupHostVethDevice configures LXC host VETH device with network settings.
2278	getLxcState retrieves container state or defaults to FROZEN on timeout.
2279	StorageStartSensitive starts sensitive storage operations for a container.
2280	deviceExistsInDevicesFolder checks if a device file exists in the devices folder based on the given prefix and path.
2281	createDiskDevice handles disk device creation logic for LXC containers.
2282	setNetworkRoutes configures network routes for a given device based on its configuration.
2283	Path returns the container's path based on its name and project.
2284	maasInterfaces gathers network interface details for LXC containers using MAAS.
2285	getSystemHandler returns a log handler based on syslog configuration and debug mode.
2286	findNvidiaMinor retrieves the NVIDIA GPU device minor number from /proc/driver/nvidia/gpus/<pci>/information or falls back to findNvidiaMinorOld().
2287	GetLogger configures logger with syslog, logfile, verbosity, and custom handler.
2288	SetLogger replaces the current logger with a new one and returns a function to restore the original logger.
2289	WaitRecord waits for a log record from ch or times out after duration timeout.
2290	AddContext adds logging context to the given logger if possible.
2291	NewDottedVersion parses a version string into its major, minor, and optional patch components.
2292	Parse extracts version number from a string.
2293	String returns a human-readable representation of the DottedVersion.
2294	Compare compares two dotted versions based on major, minor, and patch.
2295	projectCreateDefaultProfile adds a default profile to the database for the specified project.
2296	projectChange updates project settings while validating configurations and handling feature toggles.
2297	projectIsEmpty checks if the project has no users other than the default profile.
2298	GetCertificateFingerprints retrieves and parses certificate fingerprints from LXD protocol.
2299	GetCertificates retrieves all certificates from the LXD protocol.
2300	GetCertificate retrieves the certificate using its fingerprint and returns it along with its ETag.
2301	CreateCertificate sends a POST request to create a certificate.
2302	UpdateCertificate updates the LXD protocol's certificate using the provided fingerprint and new details.
2303	DeleteCertificate sends a DELETE request to remove a certificate by fingerprint.
2304	Retrieve container metadata templates based on project and name.
2305	Handle POST/PUT requests for container metadata templates, ensuring uniqueness and writing new templates.
2306	containerMetadataTemplatesDelete handles deletion of container metadata templates.
2307	getContainerTemplatePath constructs the full path to a template file based on container path and filename.
2308	Error returns a formatted string describing the error based on its name, value, and reason.
2309	Error returns a formatted string describing zero or multiple errors.
2310	add appends an Error with the given name, value, and reason to the ErrorList.
2311	UpdateSchema updates the schemas for both cluster and node databases.
2312	doProfileUpdateCluster updates cluster nodes' profiles, handling failures gracefully.
2313	doProfileUpdateContainer updates a container's profile based on new arguments and profiles retrieved from the cluster.
2314	getProfileContainersInfo retrieves container information for a specific profile in a database transaction.
2315	GetNetworkNames retrieves the list of network names from the LXD protocol.
2316	GetNetworks retrieves all available LXD networks from the server.
2317	GetNetwork retrieves the details of a specific network and its ETag.
2318	GetNetworkLeases retrieves the network lease information for a given network name.
2319	GetNetworkState retrieves the state of a network by name.
2320	CreateNetwork sends a POST request to create a network if the "network" extension is supported.
2321	UpdateNetwork updates a LXD network's configuration if the server supports it.
2322	RenameNetwork updates the name of a network using LXD protocol.
2323	Open opens a connection to a dqlite database.
2324	URLEncode encodes a URL path and query parameters
2325	IsUnixSocket checks if the given path points to a Unix socket file.
2326	HostPath adjusts a given path for use within a snap environment.
2327	FileMove renames or copies then deletes oldPath to newPath.
2328	DirCopy recursively copies a directory tree from source to destination.
2329	Function to check if a map contains any of the specified string keys.
2330	TextEditor opens a temporary or provided file in the user's preferred text editor and returns its updated content.
2331	WriteTempFile creates a temporary file with specified directory, prefix, and content, returning its path or error.
2332	RenderTemplate recursively renders a template string using the given context.
2333	Every creates a Schedule that returns a fixed interval after skipping the first call if specified.
2334	StoragePoolMount checks if LVM storage pool needs mounting based on its source configuration.
2335	Dump generates a SQL dump of a given schema, optionally including data.
2336	dumpTable extracts data from a SQL table and generates corresponding INSERT statements.
2337	ProjectHasProfiles checks if a project has any associated profiles.
2338	ProjectNames retrieves the names of all projects from the database.
2339	ProjectMap retrieves a mapping of project IDs to names from the database.
2340	ProjectHasImages checks if images feature is enabled for a project.
2341	ProjectUpdate updates project details and config in database.
2342	GetCluster retrieves cluster info from LXD server.
2343	UpdateCluster updates the LXD protocol's cluster configuration if clustering extensions are available.
2344	GetClusterMemberNames retrieves the cluster member names from LXD.
2345	GetClusterMembers retrieves cluster member information from the LXD protocol.
2346	GetClusterMember retrieves cluster member details by name.
2347	RenameClusterMember updates a cluster member's details.
2348	Disconnect removes the event listener from the global list and stops handling events.
2349	CompareVersions compares two version tuples and returns an integer indicating their relationship.
2350	HasClientCertificate checks if client certificate files exist.
2351	GenerateClientCertificate checks if client cert exists; if not, it generates one at specified paths.
2352	LoadModule loads a kernel module if it's not already loaded.
2353	Parse constructs an AST package from the specified Go package name.
2354	PprofAddress returns the address of the pprof listener or an empty string if not found.
2355	PprofUpdateAddress updates the address for the pprof endpoint.
2356	NewMethod initializes a Method struct with provided parameters and retrieves packages.
2357	Generate method based on its kind and write to buffer.
2358	fillSliceReferenceField fills a slice reference field in the buffer using the specified method and filter.
2359	StoragePoolID retrieves the ID of a storage pool by its name from the database.
2360	StoragePoolIDsNotPending retrieves IDs of non-pending storage pools.
2361	StoragePoolNodeJoin adds a node to a storage pool in the database.
2362	StoragePoolNodeJoinCeph joins a Ceph node to a storage pool, copying its volumes and configurations.
2363	StoragePoolConfigAdd calls storagePoolConfigAdd with transaction context.
2364	StoragePoolCreatePending creates or updates a storage pool pending on a specific node.
2365	StoragePoolCreated updates the state of a storage pool to created.
2366	StoragePoolErrored marks a storage pool as errored.
2367	StoragePoolNodeConfigs retrieves configuration for nodes where a storage pool is defined.
2368	StoragePoolsGetDrivers retrieves distinct storage pool drivers from the database.
2369	StoragePoolGetID retrieves the ID of a storage pool by name.
2370	StoragePoolGet retrieves details of a storage pool by its name.
2371	storagePoolNodes retrieves node names associated with a storage pool.
2372	StoragePoolConfigGet retrieves configuration for a specific storage pool.
2373	StoragePoolCreate inserts a new storage pool into the database.
2374	storagePoolConfigAdd inserts configuration values for a storage pool into the database.
2375	StoragePoolUpdate updates the description and config of a storage pool.
2376	StoragePoolConfigClear clears the configuration for the specified storage pool and node.
2377	StoragePoolDelete deletes a storage pool by name and returns the deleted pool details.
2378	StoragePoolVolumesGetNames retrieves volume names from the database for a given pool ID and node ID.
2379	StoragePoolVolumesGet retrieves volumes from a specific storage pool for a given project and node IDs.
2380	StoragePoolNodeVolumesGet retrieves volumes of specific types from a cluster's storage pool.
2381	storagePoolVolumesGet retrieves volumes based on project, pool ID, node ID, and volume types.
2382	StoragePoolVolumesGetType retrieves names of volumes of a specific type in a project within a storage pool.
2383	StoragePoolVolumeSnapshotsGetType retrieves snapshots of a specific type and name from a storage pool.
2384	StoragePoolNodeVolumesGetType retrieves the types of volumes for a specific storage pool node.
2385	StoragePoolVolumeGetType retrieves type-specific details for a storage volume.
2386	StoragePoolNodeVolumeGetType retrieves the type of the specified volume on the node in the default project.
2387	StoragePoolNodeVolumeGetTypeByProject retrieves the type of volume for the given project and node.
2388	StoragePoolVolumeUpdate updates the configuration and description of a storage pool volume.
2389	StoragePoolVolumeDelete deletes a volume from the specified storage pool.
2390	StoragePoolVolumeRename renames a storage volume in a cluster.
2391	storagePoolVolumeReplicateIfCeph replicates volume changes across Ceph nodes if necessary.
2392	StoragePoolVolumeCreate inserts a new volume in the cluster.
2393	StoragePoolVolumeGetTypeID retrieves the ID of a storage volume based on project, name, type, pool ID, and node ID.
2394	StoragePoolNodeVolumeGetTypeID retrieves the type ID for a specific volume on a node within a cluster.
2395	StoragePoolVolumeTypeToName converts a volume type to its corresponding name or returns an error.
2396	DevicesAdd inserts new devices into the database with their configurations.
2397	Devices retrieves device information based on project and query name.
2398	Patches retrieves the list of patch names from the database.
2399	PatchesMarkApplied inserts a record indicating a patch has been applied.
2400	entityType generates a type name based on package and entity names, capitalizing the entity and optionally prefixing with the package name.
2401	entityPost formats an entity name for posting.
2402	stmtCodeVar generates a variable name based on entity, kind, and optional filters.
2403	destFunc constructs a function string that appends specified fields from a struct slice to another slice.
2404	CompareConfigs identifies differences between two configuration maps, excluding specified keys. Returns an error if any non-excluded keys have different values.
2405	CopyConfig creates a deep copy of the input configuration map.
2406	NewNotifier creates a notifier that notifies other cluster members about state changes.
2407	Events sets up periodic updates of LXD event listeners and schedules them every second.
2408	eventsConnect establishes an event listener at a specified address using TLS credentials.
2409	StoragePoolInit initializes the storage core and returns any errors encountered.
2410	getAAProfileContent generates an AppArmor profile based on the provided container's configuration and state.
2411	AALoadProfile loads AppArmor profiles for containers, ensuring they match the latest content.
2412	AADestroy unloads AppArmor profiles for a given container if necessary.
2413	AAParseProfile runs AppArmor parse command if available.
2414	getSystemHandler returns a log handler based on syslog configuration.
2415	NotifyUpgradeCompleted sends a PATCH request to inform nodes about completed upgrades.
2416	KeepUpdated schedules a task to update state every 5 minutes.
2417	maybeUpdate checks if the node needs updating based on its clustering status and triggers an update if necessary.
2418	NewServer initializes a new client with authentication details.
2419	StartStatusCheck periodically checks server status and flushes cache if changed.
2420	SyncProjects updates RBAC resources based on configured ProjectsFunc and synchronizes the project map.
2421	AddProject adds a new project with a unique ID and updates both RBAC resources and the project map.
2422	DeleteProject removes a project from server resources.
2423	RenameProject renames an existing project by adding a new one with the specified name and removing the old one.
2424	IsAdmin checks if the specified username has admin privileges based on cached permissions.
2425	HasPermission checks if a user has a specific permission for a given project.
2426	rsyncSend sends files over WebSocket using specified arguments.
2427	rsyncSendSetup sets up a connection using rsync over a Unix socket, executes rsync command, and returns the command, connection, and stderr pipe.
2428	tlsClientConfig generates a TLS configuration using the provided certificate information, including setting up the root CAs and configuring the server name.
2429	tlsCheckCert verifies the TLS certificate against trusted certificates and returns true if the connection is secure.
2430	internalClusterContainerMovedPost creates mount point for container after moving it within the cluster.
2431	containerPostCreateContainerMountPoint creates mount points for a container and its snapshots after creation.
2432	Contains checks if a device exists under a key, comparing using deviceEquals. Returns true if found and equal, false otherwise.
2433	Update compares two lists of devices and returns three maps of devices to remove, add, and update, along with a list of keys that have changed between the two lists.
2434	DeviceNames returns a sorted list of device names from the given Devices collection.
2435	Infof logs formatted messages using Log.Info.
2436	Debugf logs debug messages using a formatted string.
2437	Warnf logs formatted warning messages if Log is not nil.
2438	Errorf formats error message using Sprintf and logs it if Log is not nil.
2439	Critf logs critical messages using a specified format.
2440	eventForward forwards events based on their type and metadata.
2441	StorageProgressReader wraps a reader with progress tracking using the given operation and key.
2442	StorageProgressWriter wraps a writer with progress tracking functionality using an operation object.
2443	GetLSBRelease retrieves OS release info from /etc/os-release or /usr/lib/os-release.
2444	Reset generates Go code with specified package name and imports, writing to a file or stdout.
2445	Append adds a code snippet to a specified file or standard output.
2446	ContainerToArgs converts a Container object into ContainerArgs.
2447	ContainerNames retrieves the names of regular containers within a specified project.
2448	ContainerNodeAddress retrieves the address of a container's node given its project and name.
2449	ContainersListByNodeAddress lists containers by node address for a given project.
2450	ContainerListExpanded retrieves expanded container details including profiles.
2451	ContainersByNodeName retrieves a map of container names to node names for a given project.
2452	SnapshotIDsAndNames retrieves IDs and names of snapshots matching a given prefix from the database.
2453	ContainerNodeList retrieves containers running on the local node.
2454	ContainerNodeProjectList retrieves container list based on project and node.
2455	ContainerRemove removes a container from a project within a transaction.
2456	ContainerProjectAndName retrieves the project and name of a container using its ID from the database.
2457	ContainerConfigClear deletes configuration data for a specified container from multiple tables in a database transaction.
2458	ContainerConfigGet retrieves the configuration value for a specific container ID and key from the database.
2459	ContainerConfigRemove deletes the configuration entry for a specific container.
2460	ContainerSetStateful updates the statefulness of a container in the database.
2461	ContainerProfilesInsert inserts profiles for a container, applying them in order.
2462	ContainerProfiles retrieves the profiles associated with a specific container ID from the database.
2463	ContainerConfig retrieves configuration settings for a specific container by ID.
2464	ContainerSetState updates the container's power state in the database.
2465	ContainerUpdate updates a container's details in the database.
2466	ContainerLastUsedUpdate updates the last use date of a container with the given ID.
2467	ContainerGetSnapshots retrieves snapshots for a given container.
2468	ContainerGetSnapshotsFull retrieves snapshots of a container using specified filters.
2469	ContainerNextSnapshot finds the next snapshot number based on the given project, name, and pattern.
2470	ContainerPool retrieves the storage pool name for a given project and container name.
2471	ContainerGetBackup retrieves backup information for a specified container within a project.
2472	ContainerGetBackups retrieves backup names for a specified container in a project.
2473	ContainerBackupCreate inserts a new backup record into the database.
2474	ContainerBackupRemove deletes the specified container backup from the database.
2475	ContainerBackupRename updates the container backup's name in the database.
2476	ContainerBackupsGetExpired fetches expired container backups.
2477	DefaultOS initializes a new OS struct with default directory paths and sets up an Inotify watch with invalid file descriptor and empty target map.
2478	Init initializes various system components and configurations.
2479	GetWebsocket retrieves the websocket connection using the operation ID and secret.
2480	Refresh updates the operation's data with the latest version from the repository.
2481	CancelTarget cancels the associated target operation if it exists.
2482	GetTarget retrieves the associated target operation's API.
2483	Configure and start HTTP servers for various endpoints based on configuration.
2484	Down stops all listeners and tomb.
2485	serveHTTP binds a server to a listener and logs the action.
2486	closeListener on kind will close the associated listener and remove it from the endpoints.
2487	activatedListeners filters and categorizes systemd listeners based on their type, applying TLS where necessary.
2488	CandidServer retrieves API URL, key, expiry, and domains from configuration.
2489	RBACServer extracts configuration details for RBAC server and agent from Config instance.
2490	AutoUpdateInterval returns the auto-update interval duration based on configuration settings.
2491	MAASController retrieves the MAAS controller URL and API key from configuration.
2492	OfflineThreshold returns the offline threshold duration from config.
2493	ConfigGetString retrieves a string value from the cluster's configuration using the provided key.
2494	ConfigGetBool retrieves a boolean value from cluster configuration.
2495	ConfigGetInt64 retrieves an int64 value for a given key from cluster config.
2496	ClusterAddress returns the cluster address from listeners.
2497	Debug logs messages with file, line, and function details.
2498	RestServer initializes an HTTP server with routes for API endpoints and custom handlers.
2499	projectParam extracts project parameter from HTTP request or defaults to "default".
2500	queryParam retrieves the value of a query parameter from an HTTP request.
2501	newDb creates a Cobra command for database-related code generation.
2502	Description returns a human-readable string describing each OperationType.
2503	Permission returns the required permission level for the operation type.
2504	OperationsUUIDs retrieves UUIDs of operations for a specific node from the database.
2505	OperationNodes retrieves distinct node addresses for a given project.
2506	OperationByUUID retrieves an operation by its UUID.
2507	OperationAdd inserts or updates an operation record in the database.
2508	OperationRemove deletes a row from operations table based on UUID.
2509	operations retrieves operations from the database based on the provided WHERE clause and arguments.
2510	expireLogsTask schedules daily execution of log expiration operation.
2511	absPath constructs the absolute path relative to the lxd package directory.
2512	Keys returns a sorted list of schema keys.
2513	Defaults returns a map of default values from the schema.
2514	mustGetKey retrieves a key from the schema by name, panicking if it doesn't exist.
2515	asserts that the specified key's type matches the expected type
2516	validate ensures the given value conforms to the key's type and constraints.
2517	GetStoragePoolVolumes retrieves storage volume information for a specified pool.
2518	GetStoragePoolVolume retrieves a storage pool volume's details.
2519	CreateStoragePoolVolume sends a POST request to create a storage pool volume.
2520	CreateStoragePoolVolumeSnapshot creates a snapshot of a storage pool volume.
2521	GetStoragePoolVolumeSnapshots retrieves the snapshots of a specified storage pool volume.
2522	GetStoragePoolVolumeSnapshot retrieves a storage pool volume snapshot.
2523	UpdateStoragePoolVolumeSnapshot updates the specified storage pool volume snapshot with new data.
2524	MigrateStoragePoolVolume migrates a storage pool volume using the LXD protocol.
2525	MoveStoragePoolVolume moves a storage pool volume between pools or returns an error if the operation is not supported.
2526	UpdateStoragePoolVolume updates a storage pool volume with new parameters.
2527	DeleteStoragePoolVolume deletes a storage pool volume if the server has the required "storage" API extension.
2528	RenameStoragePoolVolume renames a storage pool volume on the LXD server.
2529	doStoragePoolCreateInternal creates or updates a storage pool based on the provided configuration and handles notifications accordingly.
2530	containerGetParentAndSnapshotName extracts parent and snapshot name from container name, returns them along with a boolean indicating success.
2531	containerLoadFromAllProjects retrieves all containers across projects.
2532	containerLoadNodeAll fetches all containers on nodes.
2533	containerLoadNodeProjectAll retrieves all containers in a specific project.
2534	heartbeatNode sends a heartbeat request to a specified address using TLS encryption.
2535	dotPrefixMatch checks if the shorter string is a prefix match of the longer string when split by '.'.
2536	ContainerMount checks if a ZFS container is mounted based on its project, name, and privilege status.
2537	ContainerStorageReady checks if ZFS filesystem exists for a given container.
2538	AskChoice prompts the user to choose from a list of options until a valid selection is made.
2539	AskInt asks the user for an integer input within a specified range; invalid inputs prompt retries until a valid response is given.
2540	AskString prompts the user for a string, validates it, and returns the valid input or the default answer.
2541	AskPassword prompts the user to enter their password twice; if they match, it returns the password; otherwise, it asks again.
2542	AskPasswordOnce prompts user for password once and returns it.
2543	askQuestion prompts user with question and returns their answer.
2544	readAnswer reads input from stdin, trims newline and whitespace, and uses a default value if empty.
2545	profilePost updates or renames a profile while validating its name and ensuring uniqueness.
2546	profileDelete deletes a specified profile from the cluster if it's not in use.
2547	IsRootDiskDevice checks if the given device is the root disk device.
2548	GetRootDiskDevice identifies and returns the root disk device from a map of devices, ensuring only one is present. If none found, it returns an error.
2549	ForwardedResponse creates a new forwarded response object.
2550	ForwardedResponseIfTargetIsRemote forwards HTTP requests to remote targets when possible.
2551	ForwardedResponseIfContainerIsRemote forwards the HTTP response if the container is remote.
2552	ForwardedOperationResponse creates a response object for an operation in a specific project.
2553	Done marks progress renderer as complete and prints message.
2554	Update prints a status message to the terminal with optional formatting and truncation.
2555	Warn logs a status message with a timeout, truncating it if necessary.
2556	UpdateProgress updates progress indicator text.
2557	UpdateOp updates progress renderer based on operation metadata.
2558	updateFromV6 migrates ZFS pool configurations from global to per-node settings.
2559	localCreateListener creates a Unix socket listener at the specified path, ensuring it's not already running and setting appropriate access permissions for the given group.
2560	NewStmt constructs a new statement object with specified parameters and configuration.
2561	Generate method processes different kinds of statements and calls respective handler methods.
2562	RegisterStmt registers SQL statement with buffer.
2563	httpsLXD creates an HTTPS LXD connection using the provided URL and arguments, handling authentication and TLS settings.
2564	IsActive checks if container status is neither stopped nor error.
2565	RaftNodeAddress retrieves the address of a node by its ID from the database.
2566	RaftNodeFirst inserts or updates the first raft node entry.
2567	RaftNodeAdd inserts or updates a node address in the raft_nodes table.
2568	RaftNodeDelete deletes object from raft_nodes table.
2569	RaftNodesReplace updates the raft_nodes table by replacing existing entries.
2570	initCGroup checks if specified cgroup controllers exist and logs warnings if not.
2571	sqliteDirectAccess configures SQLite connection for direct access with WAL mode enabled and specific PRAGMAs set.
2572	ContainerGet retrieves a container by project and name.
2573	ContainerID retrieves the ID of a container given its project and name.
2574	ContainerExists checks if a container exists in a specified project by its name and returns a boolean indicating its existence along with any encountered error.
2575	ContainsFields checks if all specified fields exist in the mapping with matching names and types.
2576	FieldByName returns the pointer to the Field with the given name, or nil if not found.
2577	FieldColumnName retrieves the column name for the specified field in the mapping.
2578	FilterFieldByName retrieves a field by name and validates its type.
2579	ColumnFields returns a list of fields of type column, excluding specified fields.
2580	ScalarFields returns a list of fields configured for joining.
2581	RefFields returns slice and map fields from mapping.
2582	Column method returns the column name for a field.
2583	ZeroValue returns the zero value for a Field based on its type.
2584	FieldColumns concatenates column names from given fields into a comma-separated string.
2585	FieldArgs constructs a comma-separated list of field names and types.
2586	FieldParams converts field names to lowercase and joins them with commas.
2587	FieldCriteria generates SQL WHERE clause criteria based on field objects.
2588	initDataClusterApply applies or updates LXD cluster configuration based on input settings.
2589	JsonFormatEx generates a JSON formatted byte slice based on record properties.
2590	formatLogfmtValue converts an interface to a logfmt-formatted string.
2591	ResolveTarget resolves the target cluster member's address or returns an error if not found.
2592	ProgressWriter tracks progress while writing to a writer.
2593	updateNodeVersion updates the version of a node in the database.
2594	selectNodesVersions retrieves node versions from the database.
2595	GetArchitectures retrieves local architecture and its personalities.
2596	RuntimeLiblxcVersionAtLeast checks if the liblxc version is at least the specified major, minor, and micro versions.
2597	GetExecPath retrieves the executable path using LXD_EXEC_PATH or falls back to /proc/self/exe.
2598	Connect establishes a connection to an LXD server using TLS credentials and optional notification settings.
2599	ConnectIfContainerIsRemote connects to remote containers using their addresses.
2600	ConnectIfVolumeIsRemote connects to remote volumes if necessary.
2601	SetupTrust connects to a target LXD node, encodes a certificate, and adds it to the trust store if not already present.
2602	GetStoragePools fetches storage pools using ProtocolLXD.
2603	GetStoragePool retrieves storage pool details by name.
2604	CreateStoragePool checks for necessary extensions and creates a storage pool via LXD API.
2605	UpdateStoragePool updates storage pool details on the LXD protocol.
2606	DeleteStoragePool deletes the storage pool with the specified name if the "storage" extension is available.
2607	GetStoragePoolResources fetches resources for a storage pool.
2608	initDirs initializes the necessary directories with specified permissions.
2609	Config retrieves the node's configuration as a map.
2610	UpdateConfig updates the configuration using the provided transaction.
2611	Config retrieves cluster configuration from the database.
2612	UpdateConfig updates the cluster configuration using the provided transaction.
2613	storagePoolClusterConfigForEtag removes specific keys from the input configuration map and returns the updated map.
2614	GetEvents initializes and returns a new EventListener.
2615	LogfmtFormat returns a log format that formats records using the logfmt encoding.
2616	StorageVolumeNodeAddresses retrieves addresses of nodes associated with a specific storage volume.
2617	StorageVolumeNodeGet retrieves the node name associated with a given volume ID.
2618	StorageVolumeConfigGet retrieves configuration settings for a specific storage volume.
2619	StorageVolumeDescriptionGet retrieves the description of a storage volume by ID.
2620	StorageVolumeIsAvailable checks if a storage volume is available in the specified pool.
2621	StorageVolumeDescriptionUpdate updates the description of a storage volume using its ID.
2622	StorageVolumeConfigAdd inserts config entries for a given volume in the database.
2623	StorageVolumeConfigClear deletes the configuration associated with a specified storage volume from the database.
2624	storageVolumeIDsGet retrieves IDs of storage volumes matching specified criteria from the database.
2625	StorageVolumeCleanupImages deletes unused image volumes from the database based on their fingerprints.
2626	StorageVolumeMoveToLVMThinPoolNameKey updates and deletes configuration keys related to LVM thin pool name.
2627	L formats and appends text to buffer before calling N method.
2628	code formats the buffer's bytes as source code and returns it.
2629	Pretty formats JSON input with indentation.
2630	NetworkPublicKey returns the public key from the certificate.
2631	NetworkPrivateKey returns the private key of the certificate for the endpoints.
2632	NetworkCert retrieves the network certificate stored in Endpoints.
2633	NetworkAddress returns the network address of the specified listener.
2634	NetworkUpdateAddress updates the network address for Endpoints.
2635	NetworkUpdateCert updates the network certificate and reconfigures listeners.
2636	networkCreateListener sets up a TLS-enabled TCP listener at the specified address.
2637	Accept wraps Listener.Accept, upgrades connection to TLS using listener's configuration.
2638	Config updates the TLS configuration for the listener.
2639	IsOffline checks if a node is offline based on its heartbeat and a given threshold.
2640	NodeByAddress retrieves a node's info by its address.
2641	NodePendingByAddress retrieves the pending node info by its address.
2642	NodeByName retrieves a node by its name, returning an error if none or multiple matching nodes exist.
2643	NodeName retrieves the unique name associated with the given node ID from the database.
2644	NodeAddress retrieves the unique address for a node using its ID from the database.
2645	NodeIsOutdated checks if any node has a newer version than the current node.
2646	NodesCount returns the number of nodes in the cluster.
2647	NodeRename renames a node in the cluster if it doesn't already exist under the new name.
2648	Retrieve nodes based on pending status and additional conditions.
2649	NodeAdd inserts or updates a node's details in the transaction.
2650	NodePending updates the 'pending' status of a node in the database.
2651	NodeUpdate updates a node's details in the database.
2652	NodeRemove deletes a node from the database by ID.
2653	NodeHeartbeat updates the heartbeat timestamp for a node in the database.
2654	NodeIsEmpty checks if a node has any containers, images, or custom volumes. If so, it returns a message listing them. Otherwise, it returns nil.
2655	NodeClear removes container records and related image data from the database.
2656	NodeOfflineThreshold calculates the cluster offline threshold duration.
2657	NodeUpdateVersion updates node's version in database and checks if exactly one row was affected.
2658	Transaction executes a database transaction, rolling back on error and committing otherwise.
2659	rollback rolls back a database transaction due to an error.
2660	ProfileURIs retrieves URIs of profiles matching specified filters.
2661	ProfileGet retrieves a profile by project and name, returning an error if none or multiple match.
2662	ProfileExists checks if a profile exists in the cluster transaction.
2663	ProfileConfigRef retrieves configuration references based on project and/or name filters. Returns a nested map indexed by project, name, key, and value.
2664	ProfileUsedByRef retrieves profiles matching project and/or name filters, returning a nested map indexed by project and name.
2665	ProfileCreate inserts a new profile into the database and associated references.
2666	ProfileRename updates the cluster's profile name.
2667	ProfileDelete deletes a project's profile and verifies exactly one row was affected.
2668	ServerTLSConfig generates TLS configuration for server using provided certificate information.
2669	NetworkInterfaceAddress returns the first non-loopback IP address found.
2670	IsAddressCovered checks if one IP address covers another, considering both host and port.
2671	SelectObjects executes a SQL query and stores the results in the destination using a callback function.
2672	DeleteObject deletes a record from a specified SQL table by ID and returns true if exactly one row was deleted.
2673	loop manages the execution of a task with scheduling and context handling.
2674	IsTerminal checks if the file descriptor corresponds to a terminal. Returns true if it does.
2675	socketUnixListen creates a Unix domain socket listener at the given path.
2676	socketUnixRemoveStale removes a stale Unix socket file at the specified path.
2677	socketUnixSetPermissions sets the permissions of a Unix socket file to the specified mode.
2678	socketUnixSetOwnership sets the ownership of a Unix socket based on the provided group or current GID.
2679	utility function to check if Ceph OSD pool exists.
2680	cephOSDPoolDestroy deletes an OSD pool in Ceph.
2681	cephRBDVolumeExists checks if a RBD volume exists in Ceph.
2682	cephRBDSnapshotProtect protects a RBD snapshot, returning nil if it's already protected or on success.
2683	cephRBDCloneCreate clones a RBD volume from a specified snapshot to another pool and volume.
2684	cephRBDSnapshotListClones lists RBD snapshots' clones.
2685	cephRBDVolumeMarkDeleted moves an RBD volume to a deleted state by renaming it in the specified Ceph pool.
2686	cephRBDVolumeUnmarkDeleted renames a deleted RBD volume by removing a suffix.
2687	cephRBDVolumeRename renames a Ceph RBD volume within a specified pool and cluster.
2688	cephRBDVolumeSnapshotRename renames a Ceph RBD snapshot from the old name to the new name.
2689	cephRBDSnapshotDelete removes a RBD snapshot using the specified parameters.
2690	cephRBDVolumeCopy copies a RBD volume from an old name to a new name on a Ceph cluster using a specified user.
2691	cephRBDVolumeListSnapshots retrieves the list of snapshots for a given Ceph RBD volume.
2692	getRBDSize parses and validates the RBD volume size, returning it in bytes or a default value if invalid.
2693	getRBDFilesystem retrieves the filesystem type for RBD volumes or defaults to ext4.
2694	copyWithoutSnapshotsFull creates a non-sparse RBD copy of a storage volume from one container to another without snapshots.
2695	copyWithoutSnapshotsSparse creates a sparse copy of a Ceph RBD volume without snapshots.
2696	GetConfigCmd retrieves Pachyderm's authentication configuration in JSON or YAML format.
2697	SetConfigCmd sets Pachyderm's authentication configuration using a specified file or stdin.
2698	NewSharder returns a new Sharder instance.
2699	NewRouter creates a new router instance.
2700	renewUserCredentials extends the TTL of a user's authentication token using an admin token.
2701	NewLocalClient creates a local client at the specified root directory.
2702	AddSpanToAnyExisting creates a new span or uses existing one, tags it, and returns updated context.
2703	InstallJaegerTracerFromEnv installs a Jaeger tracer based on environment variables.
2704	UnaryClientInterceptor creates a gRPC client interceptor for OpenTracing.
2705	StreamClientInterceptor creates a gRPC stream client interceptor using OpenTracing for tracing.
2706	UnaryServerInterceptor creates a gRPC server interceptor for OpenTracing.
2707	StreamServerInterceptor creates a gRPC server interceptor for OpenTracing.
2708	CloseAndReportTraces closes the global tracer if it implements io.Closer.
2709	newWriter initializes a new Writer for handling objects with specified context, client, prefix, and buffer settings.
2710	For sets the MaxElapsedTime field b value.
2711	Log logs request, response, error, and duration at appropriate level; starts goroutine to report metric.
2712	Format applies a custom formatting function to log entry.
2713	NewGRPCLogWriter creates a new GRPCLogWriter instance with the specified logger and source.
2714	Read reads or generates a Config object from a JSON file.
2715	Write serializes config to JSON and saves it to a specified or default path.
2716	Read reads bytes from the readWriter and unmarshals them into the given proto.Message. Returns any error encountered during the process.
2717	Write marshals a protocol buffer message and writes its bytes using WriteBytes.
2718	NewReadWriter creates a new ReadWriter instance using the provided ReadWriter.
2719	RunGitHookServer starts a server at the given address, connects to etcd, initializes a git hook, and listens on a specific port.
2720	newLoggingPipe creates a logging pipe with client and server readers/writers.
2721	Read reads data from logging connection.
2722	Write writes bytes to the connection's writer returning the number of bytes written and any error encountered.
2723	Accept mocks net.Listener's method.
2724	Close closes the listener's connection channel.
2725	errorf creates an error with a specific code and formatted message.
2726	InitWithKube initializes a ServiceEnv with Kubernetes configuration and starts kube client initialization.
2727	GetEtcdClient returns the etcd client after ensuring it's connected and initialized.
2728	GetKubeClient waits for Kubernetes connection and returns clientset
2729	NewHasher creates a new Hasher instance with specified job and pipeline moduli.
2730	HashJob calculates the hash of a job using adler32 checksum and returns it modulo JobModulus.
2731	HashPipeline computes a hash value for a pipeline using Adler-32 checksum.
2732	Status retrieves worker statuses from clients.
2733	Cancel cancels a job across multiple worker clients based on filters.
2734	Conns retrieves gRPC client connections for workers based on etcd entries.
2735	Clients creates clients from connections using the provided parameters.
2736	NewClient initializes a gRPC connection using an environment variable and returns a client.
2737	RunFixedArgs validates command-line arguments before running a specified function.
2738	RunBoundedArgs enforces argument count limits on a cobra command.
2739	Run adapts a command-line handler to cobra's signature, ensuring errors trigger exit.
2740	ErrorAndExit formats and prints an error message to stderr before exiting the program.
2741	ParseCommit extracts repository and commit ID from argument.
2742	ParseBranch constructs a pfs.Branch from a commit argument.
2743	ParseFile parses a repository and file path into a pfs.File object.
2744	Set appends a string to RepeatedStringArg.
2745	SetDocsUsage sets custom help and usage templates for a cobra command.
2746	makeCronCommits creates commits on a Pachyderm repository at specified intervals defined by a cron schedule.
2747	Writer adds a tracing span before calling Client.Writer.
2748	TracingObjClient.Reader adds a span to a given context before calling the underlying client's Reader method.
2749	Delete traces and removes a resource.
2750	Walk traverses objects under a given prefix and applies a function to each.
2751	Exists checks if a tracing object exists using a provider.
2752	GetBlock generates a new Block with the given hash.
2753	Health checks server readiness.
2754	split extracts directory path and file name from given path.
2755	ValidatePath checks if the given path contains only printable ASCII characters and no globbing characters.
2756	MatchDatum checks if all filters match any datum path or hash.
2757	NewCacheServer creates a new cache server instance.
2758	authorizePipelineOp authorizes a pipeline operation based on input and output repositories.
2759	sudo executes a function with elevated privileges using a cached superuser token.
2760	Set default values for pipeline parameters including image, branch, name, cron schedule, git URL, output branch, cache size, resource requests, max queue size, and datum tries.
2761	incrementGCGeneration increments the garbage collection generation key in etcd.
2762	NewDebugServer initializes a new DebugServer instance.
2763	Health checks the API client's connectivity using gRPC.
2764	newObjBlockAPIServer creates a new objBlockAPIServer instance with the given directory and client.
2765	watchGC continuously monitors the etcd client for changes to the garbage collection generation key and updates the server's generation accordingly.
2766	splitKey appends generation to key, optionally splitting it at prefixLength
2767	NewWriter initializes a tab writer with a header and returns a Writer instance.
2768	Write writes data to a buffer, flushing when full.
2769	PrintRepoHeader prints the appropriate header based on authentication status.
2770	PrintRepoInfo outputs repository information in a formatted string.
2771	PrintDetailedRepoInfo prints detailed repository information using a template.
2772	PrintBranch writes the branch name and head commit ID to the writer. If no head, it writes a dash.
2773	PrintCommitInfo outputs commit details to writer.
2774	PrintDetailedCommitInfo prints detailed commit information using a Go template.
2775	PrintFileInfo outputs file info to writer in a formatted table.
2776	PrintDetailedFileInfo prints formatted file info using a Go template.
2777	Add appends ancestors count to the input string separated by tilde.
2778	RetryNotify repeatedly attempts an operation with exponential backoff, notifying on failures until successful or stopped.
2779	Get retrieves data from cache using ID, filters it, and copies to writer.
2780	Delete removes the item from the cache using its ID.
2781	PrintJobInfo outputs formatted job information to writer w based on jobInfo details and timestamp format.
2782	PrintPipelineInfo outputs pipeline details to writer.
2783	PrintWorkerStatus outputs worker status details to writer.
2784	PrintDetailedJobInfo prints detailed information about a job using a template.
2785	PrintDetailedPipelineInfo prints detailed information about a pipeline using a Go template.
2786	PrintDatumInfo outputs the datum info in a formatted string.
2787	PrintDetailedDatumInfo outputs detailed information about a datum in a structured tabular format.
2788	PrintFile outputs file details to writer.
2789	ShorthandInput generates a shorthand representation of the pps client input.
2790	Retrieve retrieves AWS credentials from Vault, updates lease, and renews periodically.
2791	IsExpired checks if vault credentials have expired based on lease duration and last renewal time.
2792	NewBranch creates a new branch with the specified repository and name.
2793	NewCommit creates a new pfs.Commit with the specified repo name and commit ID.
2794	NewCommitProvenance creates a new CommitProvenance with specified repo, branch, and commit IDs.
2795	NewFile creates a new pfs.File with the specified repo name, commit ID, and path.
2796	CreateRepo wraps PfsAPIClient.CreateRepo method.
2797	InspectRepo fetches info about a repository using the PFS API.
2798	ListRepo retrieves information about all repositories.
2799	DeleteRepo deletes a repository using the API client.
2800	BuildCommit creates a new commit in the specified repository branch, linking it to the given parent commit and using the provided tree object hash. The new commit details are returned.
2801	StartCommitParent initiates a new commit based on the specified parent commit in the given repository and branch, returning the details of the newly created commit.
2802	FinishCommit completes a commit in the specified repository using the API client.
2803	InspectCommit retrieves detailed information about a specific commit in a repository, filtering by its state.
2804	BlockCommit checks out the commit and returns its info if it's finished.
2805	ListCommit retrieves a list of commits for a given repository within a specified range.
2806	ListCommitF retrieves commits from a repository using a callback function.
2807	ListCommitByRepo retrieves commit history for a specific repository.
2808	CreateBranch creates a new branch in the specified repository, optionally setting its head and provenance.
2809	InspectBranch retrieves details of a specific branch within a repository.
2810	ListBranch retrieves branch information for a specified repository.
2811	SetBranch sets a branch's commit via CreateBranch.
2812	DeleteBranch removes a branch from the repository with optional force flag.
2813	DeleteCommit deletes a specific commit in a repository.
2814	FlushCommit flushes commits to the specified repositories and returns a commit info iterator.
2815	FlushCommitF sends commits to a PFS API client and processes commit info using a callback function.
2816	FlushCommitAll commits multiple commits to repositories and returns commit information.
2817	SubscribeCommit subscribes to commit events for a specific repository and branch, returning an iterator over commit info.
2818	SubscribeCommitF subscribes to commit events on a specified repository and branch, invoking a callback function for each received commit info.
2819	PutObjectAsync asynchronously puts objects identified by tags.
2820	PutObject uploads data to an object store using the provided reader and tags.
2821	PutObjectSplit uploads an object split into chunks using gRPC.
2822	GetObject retrieves an object using its hash and writes it to a writer.
2823	GetObjectReader fetches an object reader using a hash.
2824	GetObjects fetches and streams objects to a writer based on given parameters.
2825	TagObject applies tags to an object identified by its hash.
2826	ListObject calls the provided function for each object received from the ObjectAPIClient.
2827	InspectObject fetches object info using the provided hash.
2828	GetTag fetches a tag from the API client and writes it to the provided writer.
2829	GetTagReader retrieves a tag reader for the specified tag.
2830	ListTag calls a callback function for each tag response received from the server.
2831	Compact compacts the object store.
2832	NewPutFileClient creates a PutFileClient using the APIClient's PfsAPIClient.
2833	PutFileOverwrite uploads file content to storage, overwriting existing content at specified index.
2834	Close closes the gRPC client connection.
2835	CopyFile method copies a file from source repository to destination repository using PFS API client.
2836	GetFile retrieves a file from a repository and streams it to a writer.
2837	GetFileReader retrieves a file reader from the API for a specified repository, commit, path, and byte range.
2838	GetFileReadSeeker fetches a readable and seekable file from a repository at a specific commit.
2839	InspectFile retrieves file information from the specified repository and commit.
2840	ListFile retrieves file information from a repository commit.
2841	ListFileHistory retrieves file history for a specific path in a repository at a given commit ID.
2842	ListFileF iterates over file information using a callback function.
2843	Walk traverses files in a repository using a callback function.
2844	DeleteFile deletes the specified file from the repository.
2845	Write asynchronously to a buffer, flushing when full.
2846	Close flushes buffer and waits for response from server.
2847	PrettyPrintVersionNoAdditional formats the version number without additional information.
2848	recursiveBlockQuoteExamples recursively formats command examples with block quotes.
2849	errMissingField returns an error response indicating a missing required field.
2850	validateFields checks for unknown fields in logical request data based on framework schema.
2851	putConfig stores the given config in the logical storage under 'config'.
2852	getConfig retrieves and decodes the configuration from storage.
2853	Serve starts gRPC servers on specified ports with optional TLS and custom registration functions.
2854	NewPuller creates a Puller with channels for errors and tracking pipes.
2855	PullTree downloads files from a hash tree using multiple goroutines and limits concurrency.
2856	Push uploads files from a directory to Pachyderm, optionally overwriting existing files.
2857	PushObj uploads files from a Pachyderm commit to an object store.
2858	PushFile uploads a file to Pachyderm, skipping existing chunks.
2859	Dump writes a debug dump of the API client to the given writer.
2860	Profile captures a debug profile for a specified duration and writes it to the given writer.
2861	Binary fetches binary data from the API client and writes it to the given writer.
2862	RegisterCacheStats registers cache statistics with Prometheus.
2863	wait blocks until counter value reaches or exceeds n
2864	RunWorkload submits multiple jobs using a worker and checks their success.
2865	createRepo creates a new repository, starts its initial commit, and tracks both.
2866	advanceCommit manages worker's progress by advancing or starting commits based on criteria.
2867	RandString generates a random string of specified length using a given random source.
2868	NewReader creates a new reader with specified random source and byte count.
2869	iterDir iterates over each key-value pair in a BoltDB bucket recursively.
2870	FSSize returns the total size of the filesystem represented by the dbHashTree's root node.
2871	Diff computes the difference between two hash trees, applying a callback function to nodes at differing paths.
2872	Serialize writes the dbHashTree to the writer using Protocol Buffers.
2873	Deserialize reads data from a reader and deserializes it into a BoltDB hash tree structure.
2874	Copy creates a deep copy of the hash tree by serializing it to a pipe and deserializing it back.
2875	Destroy closes the hash tree and removes its file.
2876	PutFileOverwrite overwrites the file at the given path with new objects and updates the overwrite index.
2877	PutDirHeaderFooter updates or inserts a directory's header and footer in the database.
2878	PutFileHeaderFooter stores file header and footer in database.
2879	deleteDir deletes entries under a specified BoltDB directory.
2880	NewReader creates a Reader with the given input stream and filter.
2881	Read reads bytes from pbr, filters them using filter if not nil, then returns a MergeNode containing the key and value.
2882	NewWriter initializes and returns a Writer to write Protocol Buffers data to an io.Writer.
2883	Write merges a node, updates size info, and writes key-value pairs with indexes.
2884	Copy reads from reader and writes to writer until EOF or error.
2885	Index serializes writer's indices to a byte slice.
2886	GetRangeFromIndex finds the byte range for a given prefix in a protobuf stream.
2887	NewFilter creates a filter function that checks if a key belongs to a specific tree.
2888	PathToTree converts a file path to a tree structure.
2889	Merge combines multiple readers into a single writer by merging their outputs.
2890	Hash computes the hash of the tree by canonicalizing its contents within a BoltDB transaction.
2891	IsGlob checks if the pattern matches any file using Unix shell-style wildcards.
2892	GlobLiteralPrefix extracts the literal prefix from a glob pattern.
2893	GetHashTreeObject retrieves the hash tree object from Pachyderm client.
2894	GetHashTreeTag retrieves the hash tree tag from Pachyderm.
2895	PutHashTree serializes a hash tree and uploads it to Pachyderm using the provided client.
2896	NewChildCursor creates a cursor at a given path in a BoltDB transaction, returning it.
2897	Next advances cursor to next key-value pair returning bytes or nil.
2898	NewOrdered initializes a new Ordered structure with a cleaned root directory and sets up initial node structures.
2899	MkdirAll creates directories recursively starting from the deepest level.
2900	PutDir cleans the path, creates a directory node, and puts it in the ordered structure.
2901	Serialize serializes Ordered's data structure using MergeNode.
2902	NewUnordered creates and returns a new unordered data structure using the specified root directory.
2903	Ordered returns a new instance of Ordered with paths sorted alphabetically.
2904	revokeUserCredentials revokes a user's credentials using an admin token.
2905	NewAPIServer creates a new gRPC API server using the provided version and options.
2906	String formats a version number from protocol buffer data.
2907	getPipelineInfo retrieves pipeline info from etcd and updates client auth token.
2908	removeStr removes a string from a slice and returns true if successful.
2909	PublicCertToPEM converts a TLS certificate to PEM format.
2910	GenerateSelfSignedCert creates a self-signed TLS certificate for the provided address and name.
2911	ActivateCmd activates Pachyderm's auth system, setting up the first cluster admin.
2912	DeactivateCmd deletes all ACLs, tokens, and admins, and deactivates Pachyderm auth, prompting confirmation before proceeding.
2913	LoginCmd creates a Cobra command to authenticate with Pachyderm using either a GitHub token or a one-time password.
2914	LogoutCmd defines a Cobra command to log out of Pachyderm by clearing the session token.
2915	WhoamiCmd prints the current user's Pachyderm identity and session details.
2916	CheckCmd creates a Cobra command to verify user access to a repository based on provided scope.
2917	GetCmd creates a Cobra command to retrieve ACL or user access for a repository.
2918	SetScopeCmd creates a Cobra command to set user access scope for a repository.
2919	ListAdminsCmd creates a Cobra command to list cluster admins, handling metrics and port forwarding options.
2920	ModifyAdminsCmd creates a command to add or remove cluster admins based on user input.
2921	GetAuthTokenCmd creates a Cobra command to retrieve an authentication token for a specified user.
2922	UseAuthTokenCmd creates a Cobra command for reading a Pachyderm auth token from stdin and writing it to the current user's Pachyderm config file.
2923	Cmds generates a list of Cobra command objects for managing authentication in a Pachyderm cluster.
2924	ParseScope converts a string to a Scope enum, ignoring case sensitivity. Returns an error if the scope is unrecognized.
2925	IsErrNotActivated checks if the error indicates that the resource is not activated.
2926	IsErrPartiallyActivated checks if the error message contains the partially activated status.
2927	IsErrNotSignedIn checks if the error message contains the not signed-in status message.
2928	IsErrBadToken checks if the given error contains the message indicating a bad token.
2929	IsErrNotAuthorized checks if the error message contains the unauthorized message.
2930	IsErrInvalidPrincipal checks if the error message contains specific patterns indicating an invalid principal format.
2931	IsErrTooShortTTL checks if the error message indicates the provided time-to-live is less than the existing token's TTL.
2932	NewDatumFactory returns a DatumFactory based on the input type.
2933	NewCollection initializes a new Collection object with specified parameters.
2934	Path returns the full path by joining prefix and key.
2935	getIndexPath retrieves the index path for a given value and index.
2936	getMultiIndexPaths retrieves multiple index paths for the given value based on the specified index and key.
2937	Upsert inserts or updates a value in a collection based on a condition.
2938	get retrieves an etcd entry by key.
2939	List iterates over collection items, unmarshals them using provided message type, and applies callback function to each key.
2940	Watch creates a new etcd watcher with specified options.
2941	WatchByIndex creates a watcher to track changes at a specific index in a collection.
2942	WatchOne creates a new watcher for a single key in the collection.
2943	WatchOneF watches a single key in etcd and calls a callback function on each event or context cancellation.
2944	Get retrieves the file associated with the specified key from the cache. If the key does not exist, it returns an error.
2945	Keys retrieves sorted cache keys.
2946	Clear removes all cache keys from disk.
2947	NewHTTPServer creates an HTTP server with routes for file, service, login, logout, and not found handlers.
2948	NewDeployServer creates a new Kubernetes API server.
2949	Export pulls Docker images based on options and exports them to a writer.
2950	Import loads Docker image from input stream, tags it, and pushes to specified registries.
2951	DatumTagPrefix generates a deterministic prefix using SHA-256 hashing to ensure uniqueness based on input salt.
2952	NewPFSInput creates a new PFS input for the specified repository and glob pattern.
2953	NewPFSInputOpts creates a new input options object for PFS.
2954	NewJobInput creates a new job input with repo name, commit ID, and glob pattern.
2955	NewPipelineInput creates a new pps.PipelineInput using repoName and glob.
2956	CreateJob submits a new job using the specified pipeline and output commit.
2957	ListJob retrieves job information for a given pipeline and commit range.
2958	ListJobF iterates over job information using a callback function.
2959	FlushJob sends flush requests to specified pipelines and processes job info using a callback function.
2960	FlushJobAll submits jobs for each commit to the specified pipelines.
2961	DeleteJob deletes a job using its ID.
2962	StopJob stops a job using the provided job ID.
2963	RestartDatum restarts the datum for the given job ID and filters.
2964	ListDatum retrieves datum information from a job using pagination.
2965	ListDatumF lists datum info for a job using a callback function.
2966	InspectDatum retrieves information about a specific datum within a job.
2967	Next retrieves the next log message or indicates iteration end due to error.
2968	InspectPipeline retrieves information about a specified pipeline.
2969	ListPipeline retrieves pipeline information using APIClient.
2970	DeletePipeline deletes a pipeline with optional force flag.
2971	StartPipeline initiates a pipeline using the API client.
2972	StopPipeline stops a pipeline.
2973	RerunPipeline triggers a pipeline rerun with optional commit inclusion/exclusion.
2974	CreatePipelineService creates or updates a pipeline service with specified details.
2975	GetDatumTotalTime calculates the total processing time from stats.
2976	Mount mounts an NFS server at the specified mount point using the given client and options.
2977	NewBufPool creates a buffer pool with the given size.
2978	StorageRootFromEnv retrieves the storage root directory from environment variables, adjusting for specific backend requirements.
2979	BlockPathFromEnv constructs the storage path for a block from environment variables.
2980	NewGoogleClient creates a Google Cloud Storage client for the specified bucket.
2981	NewGoogleClientFromSecret creates a Google client from secret files or environment variables.
2982	NewGoogleClientFromEnv creates a new Google Cloud client using environment variables for bucket and credentials.
2983	NewMicrosoftClientFromSecret creates a Microsoft client using secrets from files or returns an error if they're missing.
2984	NewMicrosoftClientFromEnv creates a MicrosoftClient from environment variables.
2985	NewMinioClientFromSecret creates a new MinIO client using secrets from files.
2986	NewMinioClientFromEnv creates a new MinIO client using environment variables.
2987	NewAmazonClientFromSecret creates an Amazon client using secrets for region, bucket, and credentials.
2988	NewAmazonClientFromEnv creates a new Amazon client using environment variables for configuration.
2989	NewClientFromURLAndSecret creates a client based on the object store URL and secret.
2990	ParseURL extracts the bucket and object from the given URL string.
2991	NewClientFromEnv initializes a storage client based on the environment variable.
2992	NewExponentialBackOffConfig creates a backoff strategy with aggressive settings.
2993	Close closes the BackoffReadCloser, adding a tracing span.
2994	Close closes BackoffWriteCloser, ignoring ignorable errors.
2995	IsRetryable checks if the error is retryable either due to network issues or based on client-specific criteria. Returns false if the error is nil.
2996	RunStdin reads from stdin and executes the command with the given arguments.
2997	RunIODirPath executes a command in a specified directory, capturing and merging standard error outputs.
2998	NewAuthServer initializes and starts an authentication server.
2999	expiredClusterAdminCheck checks if admin access is required and validates it.
3000	getOneTimePassword generates and stores a new OTP for a given user with optional expiration.
3001	hashToken generates a SHA-256 hash of the input token as a hexadecimal string.
3002	getAuthToken extracts the authentication token from context metadata.
3003	canonicalizeSubjects processes each subject concurrently to obtain their canonical form.
3004	Matches checks if the actual string matches the expected regular expression pattern.
3005	OneOfMatches verifies if any actual string matches the expected regex pattern.
3006	Equal checks if two values are equal and reports failure using tb.
3007	NotEqual asserts that two values are not equal, reporting a failure if they are.
3008	oneOfEquals checks if an element is present in a slice, considering pointers.
3009	NoneEquals verifies that none of the actuals match the expected value, failing the test if they do.
3010	NoError asserts that no error occurred, reporting an error message if one was found.
3011	NoErrorWithinT asserts that a function does not return an error within a specified duration. If an error occurs or the operation times out, it logs a fatal error with a custom message.
3012	NoErrorWithinTRetry waits up to t duration for function f to succeed without returning an error. If f fails within the timeout, it logs an error message and marks the test as failed.
3013	YesError asserts that an error is received when none is expected.
3014	NotNil asserts that the given object is not nil.
3015	Nil checks if the object is nil or a channel/slice type and panics if not.
3016	False asserts that a condition is false; otherwise, it fails the test.
3017	NewSTM creates a new STM transaction.
3018	NewDryrunSTM creates a dry-run STM transaction.
3019	newSTMRepeatable creates an STM and runs it repeatedly until successful.
3020	newSTMSerializable initializes a STM Serializable object and runs it with the given apply function and dryrun flag.
3021	newSTMReadCommitted starts a read-committed STM transaction.
3022	commit resets read set and returns STM commit response.
3023	Pipelines creates a new collection for etcd pipelines.
3024	Jobs creates and returns a collection for managing etcd-based jobs.
3025	NewTicker creates a Ticker that sends tick events at exponentially increasing intervals until stopped.
3026	nodeToMap updates or deletes keys in the map based on etcd node values.
3027	ServiceAccount creates a new v1 ServiceAccount resource with specified options.
3028	ClusterRole constructs a new ClusterRole instance with specified options.
3029	RoleBinding creates a new RoleBinding object
3030	GetSecretEnvVars constructs environment variables based on storage backend and predefined mappings.
3031	PachdService creates a Kubernetes Service with NodePort type exposing multiple ports for different services.
3032	GithookService creates a LoadBalancer service for Git hook events.
3033	EtcdDeployment creates an etcd deployment with specified CPU, memory, and volume configurations.
3034	EtcdStorageClass generates a StorageClass resource based on the provided options and backend type.
3035	EtcdVolume creates a Kubernetes PersistentVolume specification based on the specified backend and options.
3036	EtcdNodePortService creates a Kubernetes Service with NodePort type for etcd, using either default or local port based on input.
3037	EtcdHeadlessService creates a headless Kubernetes Service for etcd peers.
3038	EtcdStatefulSet generates a Kubernetes StatefulSet manifest for deploying etcd with specified options.
3039	DashDeployment creates a Kubernetes Deployment resource for a dashboard service.
3040	DashService creates a Kubernetes Service for a dashboard application.
3041	WriteSecret creates a Kubernetes Secret from the given data and encodes it using the specified encoder.
3042	GoogleSecret creates a secret map containing bucket and credential information
3043	WriteDashboardAssets encodes dashboard service and deployment assets using the provided encoder.
3044	WriteLocalAssets encodes assets to a local backend and writes them along with a secret to a specified host path.
3045	WriteCustomAssets handles custom assets based on specified backends and options.
3046	WriteAmazonAssets writes assets to Amazon S3 using different credentials sources.
3047	WriteGoogleAssets uploads assets to Google Cloud Storage and writes secrets.
3048	WriteMicrosoftAssets encodes assets using Microsoft backend and writes a secret.
3049	Images returns a list of images used by the system.
3050	AddRegistry prepends the registry to the image name.
3051	withCanonicalRandomizationFactor adjusts the randomization factor to ensure it's within the [0, 1] range.
3052	Reset resets the exponential backoff interval and start time.
3053	incrementCurrentInterval updates the current interval using exponential backoff logic, ensuring it does not exceed the maximum interval.
3054	NewBlockAPIServer initializes a block storage API server based on the specified backend.
3055	LocalStorage initializes local storage client and returns it along with a Storage instance.
3056	deleteJob updates pipeline job counts and deletes a job.
3057	writeXML sets headers, encodes XML data, and logs errors.
3058	clean1_7HashtreePath cleans up a hash tree path by ensuring it starts with a slash and normalizes it using pathlib.Clean before appending a default root.
3059	NewFromAddress initializes a new APIClient with the specified address and optional configurations.
3060	getUserMachineAddrAndOpts retrieves the user's machine address and options based on environment variables or configuration.
3061	NewInCluster creates a new APIClient instance using environment variables for the service host and port.
3062	Close shuts down the API client and its port forwarder.
3063	DeleteAll deactivates and deletes resources using API clients.
3064	SetMaxConcurrentStreams sets the max concurrent streams limit for c.
3065	WithContext creates a new APIClient with the specified context.
3066	NewDLock returns a new distributed lock implementation using etcd.
3067	DatumID generates a unique ID based on file paths and hashes from input data.
3068	runUserErrorHandlingCode executes user-defined error handling commands within a specified context and logs the execution time and outcome.
3069	HashDatum generates a hash for a given pipeline and input data.
3070	HashDatum15 computes a hash based on pipeline info and input data, ensuring consistency despite potential map order variations.
3071	Status returns the worker's status information.
3072	Cancel cancels the job if it matches the request's job ID and data filters.
3073	mergeStats combines two ProcessStats objects, adding their durations and byte counts.
3074	mergeChunk merges data chunks based on merge criteria and logs the process duration.
3075	IsCommitNotFoundErr checks if the error indicates that the specified Git commit was not found.
3076	IsCommitDeletedErr checks if the error indicates a deleted commit.
3077	IsCommitFinishedErr checks if the error indicates that a commit operation has finished.
3078	IsRepoNotFoundErr checks if the error message matches the repository not found pattern.
3079	IsBranchNotFoundErr checks if the error matches the regex for "branch not found".
3080	IsFileNotFoundErr checks if the error matches a file not found pattern.
3081	Version retrieves the client's API version.
3082	validateRepoName ensures the repository name adheres to specified character constraints.
3083	newDriver initializes a new driver instance with the provided environment and configuration.
3084	inspectCommit checks authorization and waits for commit dependencies before returning info.
3085	scratchCommitPrefix constructs the prefix for scratch commits based on the repository name and commit ID.
3086	scratchFilePrefix constructs a file path based on commit and file details.
3087	getTreeForFile retrieves the hash tree for a given file or creates a new one if none exists.
3088	provenantOnInput checks if there is any provenance other than the spec repo.
3089	nodeToFileInfo converts a commit info and hashtree node to file info.
3090	fileHistory retrieves and processes file history up to a specified number of commits.
3091	upsertPutFileRecords updates or inserts put file records for a given file.
3092	ReadRow reads a single row from a pgdump file, handling headers and footers.
3093	NewReporter initializes a Reporter with a cluster ID and Kubernetes client, starting a goroutine to report metrics.
3094	ReportUserAction reports user actions with start and finish times or errors.
3095	FinishReportAndFlushUserAction logs user actions with start time or error status.
3096	Read data from multiple sources until EOF or no more refs.
3097	ActivateCmd creates a Cobra command to activate Pachyderm enterprise features using an activation code and optional expiration timestamp.
3098	GetStateCmd checks if the Pachyderm cluster has enterprise features activated and prints its state and expiration.
3099	Cmds generates Cobra command objects for enterprise-related features in Pachyderm.
3100	NewConfiguration initializes a Configuration object based on the input interface type.
3101	Repos creates a collection from an etcd client.
3102	PutFileRecords creates a collection for storing file records in etcd.
3103	Commits creates a collection for storing commit information in an etcd database.
3104	Branches creates a collection of branch info from an etcd client and repository.
3105	OpenCommits creates a collection for managing commits in etcd.
3106	NewDAG constructs a directed acyclic graph (DAG) from a map of node IDs to parent IDs.
3107	NewNode creates a new node in the DAG and updates its parent-child relationships.
3108	Sorted will return a topologically sorted list of nodes in the DAG.
3109	Leaves returns a slice of leaf node identifiers in the DAG.
3110	Ancestors returns all ancestor nodes for given ID in DAG.
3111	Descendants finds all nodes reachable from the given node id.
3112	Ghosts returns a list of nodes with no parent in the DAG.
3113	NewPortForwarder initializes a Kubernetes port forwarder with default namespace or specified one.
3114	Run starts a port forwarder for the specified Kubernetes pod.
3115	RunForDaemon starts port forwarding for the daemon using specified or default ports.
3116	RunForSAMLACS starts port forwarding for SAML ACS on the given or default local port.
3117	RunForDashUI starts port forwarding for Dash UI to the specified local port or default if zero.
3118	RunForDashWebSocket starts a port forwarder for Dash WebSocket traffic.
3119	RunForPFS starts port forwarding for Pachyderm.
3120	RunForS3Gateway starts port forwarding for the S3 gateway on the specified local port.
3121	Lock method sets and writes PID file path for PortForwarder.
3122	Close stops the port forwarder and shuts down all associated channels.
3123	Unmarshal deserializes event value based on template and key.
3124	UnmarshalPrev deserializes previous event data.
3125	MakeWatcher creates a new Watcher using provided channels for events and notifications.
3126	CheckType verifies if the value's type matches the template's type, returning an error if they don't match or if the template is nil.
3127	NewPool creates a new Pool instance that watches Kubernetes endpoints for a specific service.
3128	Do uses a pool to manage gRPC client connections.
3129	Close closes the connection pool, closing each connection and returning the first error encountered.
3130	buildImage builds a Docker image using the specified client, repository, context directory, Dockerfile, and destination tag.
3131	pushImage tags and pushes a Docker image from sourceTag to destTag using the provided client and authentication configuration.
3132	newMinioClient initializes a MinIO client for a specified endpoint, credentials, and bucket.
3133	newMinioClientV2 creates a MinIO client v2 instance with specified parameters.
3134	newMinioWriter creates a writer for uploading data to MinIO using a pipe and goroutine.
3135	Close closes the minio writer pipe and waits for any errors.
3136	PipelineRepo extracts the repository name from the pipeline object.
3137	PipelineRcName generates a Kubernetes-compatible pipeline resource configuration name from a given name and version.
3138	GetRequestsResourceListFromPipeline retrieves resource list from pipeline info.
3139	GetLimitsResourceListFromPipeline retrieves resource limits from a pipeline specification.
3140	getNumNodes retrieves the number of Kubernetes nodes available.
3141	GetExpectedNumWorkers calculates expected number of workers based on Kubernetes client and parallelism specification.
3142	GetExpectedNumHashtrees calculates the expected number of hashtrees based on the given spec.
3143	FailPipeline updates the specified pipeline's state to failure and records the reason in etcd.
3144	JobInput updates input commit IDs using provenance information.
3145	PipelineReqFromInfo creates a CreatePipelineRequest from PipelineInfo.
3146	NewPipelineManifestReader creates a reader for pipeline manifests from file or stdin.
3147	NextCreatePipelineRequest reads next create pipeline request from decoder.
3148	DescribeSyntaxError generates a detailed syntax error message for JSON parsing issues.
3149	UpdateJobState updates the state and counts of a job in the pipelines collection and the job's details in the jobs collection.
3150	New generates a UUID using exponential backoff and returns it as a string.
3151	Code returns the HTTP status code or OK if the error is nil.
3152	NewHTTPError creates a new HTTPError instance with the given code and formatted message.
3153	NewStorage creates a new storage instance with the given client and prefix.
3154	DeleteAll walks through storage objects with given prefix and deletes them.
3155	Chunk splits byte data into chunks of specified size.
3156	ChunkReader reads data from reader r in chunks, applying function f to each chunk. Returns total bytes read or error.
3157	NewStreamingBytesReader creates a reader from a streaming client with cancellation support.
3158	WriteToStreamingBytesServer reads from reader and writes to streamingBytesServer using a buffer.
3159	WriteFromStreamingBytesClient reads data from a streaming client and writes it to a writer until EOF.
3160	NewSidecarAPIServer initializes and returns a new Sidecar APIServer instance.
3161	NewEnterpriseServer initializes a new enterprise API server with the specified environment and etcd prefix.
3162	validateActivationCode verifies the validity of an activation code by checking its signature, expiration, and format.
3163	Activate validates the activation code and updates the enterprise token record with the expiration time.
3164	Deactivate will stop Pachyderm and clean up enterprise token.
3165	lookExtensions appends file extension to path if not already present
3166	Start starts a command process, handling file descriptors and context cancellation.
3167	CombinedOutput runs command and captures both stdout and stderr.
3168	StdinPipe creates a pipe connected to the command's standard input.
3169	StdoutPipe sets up a pipe for command standard output.
3170	dedupEnvCase removes duplicate environment variable keys, considering case sensitivity based on the input flag.
3171	InputName recursively finds the name of the first non-nil Pfs, Cross, or Union element in the input.
3172	Sorts inputs based on their names in cross or union operations
3173	InputBranches extracts PFS, Cron, and Git branches from input and returns them as pfs.Branch objects.
3174	ValidateGitCloneURL checks if the given Git clone URL is valid and follows specific formats.
3175	containsEmpty checks if there's an empty string in the input slice.
3176	NewAPIServer creates a new admin API server instance.
3177	Ago calculates the duration since a given timestamp in a human-readable format.
3178	TimeDifference calculates the human-readable duration between two timestamps.
3179	Duration converts a protocol buffer duration to a human-readable string.
3180	InspectCluster retrieves cluster info using AdminAPIClient.
3181	Extract calls the provided function for each operation received from the admin API client.
3182	ExtractAll retrieves all operations from the API client.
3183	ExtractWriter serializes admin operations to a protobuf writer.
3184	ExtractURL extracts a URL using an admin API client, handling GRPC errors and unexpected responses.
3185	ExtractPipeline extracts a pipeline using the AdminAPIClient.
3186	Restore sends admin operations to a client.
3187	RestoreReader sends restore operations to the admin API client from the reader.
3188	RestoreFrom restores objects using another API client.
3189	RestoreURL restores a backup using a URL.
3190	IgnoreTypes creates a comparison option to ignore specified types.
3191	AppendEllipsis adds or updates ellipsis in textList based on diffStats.
3192	IsType determines if a given type matches a specified function signature.
3193	NameOf extracts the method name from a reflection value.
3194	PointerOf converts a reflect.Value to a Pointer.
3195	String method converts an EditScript to a human-readable string representation.
3196	stats calculates statistics for an edit script, counting identities, unique X's, Y's, and modifications.
3197	connect calculates the path between two points using a given equality function and appends movement instructions based on comparisons.
3198	EquateNaNs returns comparison options to treat NaN values as equal for float64 and float32 types.
3199	Index returns the ith element of the path, or an empty step if out of bounds.
3200	Key returns the common key or -1 if not present.
3201	String method formats the diff report of defaultReporter.
3202	FormatType formats the given type and text node according to the options.
3203	formatMapKey converts a reflect value to a formatted key string while eliding types and avoiding stringer interfaces.
3204	formatString formats a string using a quoted or raw format based on its content.
3205	formatHex converts a uint64 number to a hexadecimal string with padding based on its value.
3206	formatPointer formats a pointer value from a reflect.Value, applying deterministic formatting for testing.
3207	Visit checks if a pointer has been visited before, marking it as visited if not.
3208	Retrieves the unexported field value from a struct using reflection.
3209	insert recursively adds a name to the field tree.
3210	matchPrefix checks if the field tree matches the given path prefix.
3211	canonicalName retrieves the canonical name of a field within a struct, considering nested structs and handling selection strings.
3212	FilterPath applies a filter function to an option and returns a new option.
3213	normalizeOption flattens options and returns the first if only one, otherwise returns all flattened options.
3214	flattenOptions merges two Option slices recursively.
3215	CanFormatDiffSlice determines if a diff slice can be formatted based on options and node properties.
3216	formatASCII converts non-ASCII characters in a string to dots.
3217	coalesceAdjacentEdits groups consecutive edits based on their type.
3218	SortKeys sorts the given reflect values and removes duplicates.
3219	FormatDiff formats the difference between two values recursively.
3220	coalesceAdjacentRecords aggregates similar report records into groups based on their differences.
3221	Diff compares two values and returns their differences, ensuring consistency between difference and equality outcomes.
3222	statelessCompare performs a comparison step without saving/restoring the current path or results.
3223	sanitizeValue normalizes reflect values, creating new instances where necessary.
3224	Check panics if the same transformer appears more than once consecutively in the path.
3225	makeAddressable ensures a reflect.Value can be addressed by creating a new one if necessary.
3226	Marshal serializes fields using an encoder based on their type.
3227	String method returns key-value pair as a string.
3228	Set assigns a tag to a span.
3229	Inject span context into carrier using text map writer.
3230	Extract extracts span context from text map carrier.
3231	ToLogRecord converts LogData to LogRecord with appropriate timestamp and fields.
3232	New creates a new tracer instance with default propagators
3233	StartSpan mocks base method
3234	RegisterInjector mocks Tracer method
3235	RegisterExtractor adds an extractor to MockTracer for a given format.
3236	Inject mocks base method
3237	Extract retrieves a span context from a carrier using a given format.
3238	ContextWithSpan adds a span to a context using activeSpanKey.
3239	Set adds a tag with the given key and value to the span.
3240	Set adds a tag with the given name and value to the span.
3241	SetTag adds a boolean tag to the given span.
3242	SetString sets the tag's string value in the given OpenTracing span.
3243	EmitString sets key, ValueKind, and ValueString fields of MockKeyValue instance.
3244	EmitLazyLogger populates mock fields from LazyLogger value.
3245	RunAPIChecks runs API checks using the provided tracer and options.
3246	CheckBaggageValues sets the CheckBaggageValues option for the API check suite.
3247	CheckExtract sets the CheckExtract option in APICheckSuite.
3248	CheckInject sets the CheckInject option for APICheckSuite.
3249	CheckEverything configures an APICheckSuite to enable baggage values, extraction, and injection checks.
3250	UseProbe sets the Probe field of APICheckSuite's opts to the provided APICheckProbe.
3251	WithBaggageItem adds a key-value pair to the Baggage field of MockSpanContext.
3252	Tags mocks base method
3253	Tag retrieves the value associated with key k from MockSpan's tags map.
3254	Logs returns a copy of recorded log entries.
3255	Context retrieves the SpanContext from MockSpan safely.
3256	SetTag updates the tag for the mock span based on the key and value provided.
3257	SetBaggageItem updates the SpanContext's baggage item for MockSpan.
3258	BaggageItem retrieves the value of a baggage item using a key from the span context.
3259	Finish locks, sets FinishTime to current time, unlocks, and records span.
3260	FinishWithOptions updates span finish time and logs records.
3261	String method provides a string representation of MockSpan details.
3262	LogFields logs fields with a timestamp.
3263	logFieldsWithTimestamp logs fields with a timestamp in the mock span.
3264	LogKV logs key-value pairs as fields, handling errors gracefully.
3265	LogEvent logs an event with a string field.
3266	LogEventWithPayload logs an event with a payload using structured fields.
3267	SetOperationName updates the OperationName field of MockSpan and returns it.
3268	registriesDirPath returns the path to the registries directory based on the provided system context.
3269	loadAndMergeConfig reads YAML files from a directory, merges their configurations, and returns a consolidated registry configuration.
3270	ParseReference parses a string as an image reference returning its structured form.
3271	NewReference creates an ImageReference from a Docker reference.
3272	CheckAuth verifies Docker credentials using a GET request to the registry endpoint.
3273	doHTTP performs HTTP request using TLS transport.
3274	detectPropertiesHelper detects Docker properties by pinging the registry over HTTPS or HTTP, handling TLS settings and checking for V1 support.
3275	detectProperties detects properties once and caches the result.
3276	getExtensionsSignatures retrieves and decodes extension signatures for a Docker image.
3277	NewTransport configures an HTTP transport with custom dialer settings.
3278	readRegistryConf reads the container registries configuration file.
3279	GetRegistries retrieves the list of registries from system context configuration.
3280	GetInsecureRegistries retrieves the list of insecure registries from system context.
3281	RegistriesConfPath returns the path to the registries configuration file based on the context.
3282	NewOptionalBool returns an OptionalBool representing whether the input boolean is true or false.
3283	changeState updates the policy context state if it matches the expected value.
3284	Destroy changes the policy context's state from ready to destroying, then to destroyed.
3285	policyIdentityLogName generates a log name using the transport and policy configuration identity from the image reference.
3286	requirementsForImageRef fetches policy requirements for a given image reference based on transport scopes, configuration identity, and namespace, returning default policies if none match.
3287	ParseImageName parses a string as an image name returning its reference.
3288	BlobInfoFromOCI1Descriptor converts an OCI1 descriptor to blob info.
3289	OCI1FromManifest parses OCI manifest to struct.
3290	OCI1FromComponents constructs an OCI1 image from components.
3291	newReference validates Docker references, ensuring they don't contain both tags and digests simultaneously.
3292	tagOrDigest returns the digest or tag of a Docker reference.
3293	updateEmbeddedDockerReference updates the embedded Docker reference if allowed and necessary.
3294	isTTY checks if the writer is a terminal.
3295	copyUpdatedConfigAndManifest updates the image configuration and manifest, then copies them to the destination.
3296	createProgressBar creates a progress bar for copying blobs with a formatted label.
3297	copyConfig copies image configuration from source to destination while verifying integrity.
3298	diffIDComputationGoroutine computes the diff ID asynchronously and sends the result or error to a channel.
3299	computeDiffID computes the digest of a stream after optionally decompressing it.
3300	compressGoroutine reads from src and writes compressed data to dest using gzip.
3301	newDockerClient creates a Docker client with the specified system context. If the context is nil or does not specify a Docker daemon host, the default host is used. The client's HTTP transport configuration depends on the URL scheme. For Unix sockets, no transport configuration is needed. For HTTP, a custom HTTP client is created. For HTTPS, a TLS-configured HTTP client is used.
3302	defaultPolicyPath returns the signature policy path based on the system context. If not specified, it defaults to the system's default policy path.
3303	NewPolicyFromFile reads policy data from a file and creates a Policy object.
3304	NewPolicyFromBytes parses JSON data into a Policy object.
3305	newPolicyRequirementFromJSON parses JSON data into a PolicyRequirement based on its type.
3306	newPRSignedBy creates a new PR signed by a specific identity.
3307	newPRSignedByKeyPath creates a new PRSignedBy object using a key path and identity.
3308	newPRSignedByKeyPath generates a policy requirement based on the specified key type, path, and signed identity.
3309	newPRSignedByKeyData creates a new PRSignedBy object using the provided key data and signed identity.
3310	NewPRSignedByKeyData creates and returns a new PRSignedByKeyData instance based on the provided key type, data, and identity.
3311	IsValid checks if sbKeyType is valid.
3312	newPRSignedBaseLayer creates a signed base layer policy reference.
3313	newPolicyReferenceMatchFromJSON creates a policy reference match from JSON data.
3314	newPRMExactReference parses a Docker reference and validates it before creating a PRM exact reference object.
3315	newPRMExactRepository creates a new PRM exact repository instance from Docker repository string.
3316	newImageSource resolves an image reference and constructs a storage image source with its metadata.
3317	getBlobAndLayerID fetches a blob and its corresponding layer ID based on the given blob info.
3318	computeID calculates image ID based on manifest and blob diff IDs.
3319	PutManifest saves the manifest blob and verifies its digest if available.
3320	PutSignatures appends signatures to storageImageDestination.
3321	newImage creates a new image from a source.
3322	newImageSource creates an ImageSource from an OCI archive reference; cleans up on error.
3323	LoadManifestDescriptor extracts OCI archive and loads manifest descriptor.
3324	Close cleans up the temporary directory and closes the unpacked source.
3325	append adds unique strings to ordered set.
3326	isMultiImage checks if the image has multiple components based on its manifest MIME type
3327	lockPath acquires a lock on the given path, ensuring thread-safe reference counting.
3328	unlockPath unlocks the mutex associated with a given path and decrements its reference count. If the reference count reaches zero, it deletes the path from the map.
3329	view runs a function within a BoltDB transaction, ensuring the cache is locked during execution.
3330	update applies a transactional function to a BoltDB cache.
3331	uncompressedDigest retrieves the uncompressed digest from the BoltDB transaction if it exists.
3332	appendReplacementCandidates appends replacement candidates from a BoltDB bucket based on a given digest.
3333	indexExists checks if the OCI index file exists at the specified path.
3334	createSignature signs a Docker manifest using GPG
3335	ParseReference extracts directory and image from reference and returns new image reference.
3336	NewReference constructs a new OCI image reference from directory and image strings.
3337	getIndex reads and decodes an OCI image index from a JSON file.
3338	LoadManifestDescriptor retrieves the manifest descriptor from an OCI reference.
3339	blobPath constructs the path to a blob using its digest and optionally a shared directory.
3340	SignDockerManifest signs a Docker manifest using the provided mechanism and key identity.
3341	VerifyDockerManifestSignature checks if a Docker manifest's signature matches the expected values.
3342	newOpenshiftClient creates a new OpenShift client using the provided reference.
3343	doRequest sends an HTTP request with optional authentication and logs details about the request and response.
3344	getImage retrieves an image from OpenShift using the provided image stream image name.
3345	convertDockerImageReference constructs a new image reference based on the client's Docker reference and input parts.
3346	ensureImageIsResolved resolves Docker image reference from OpenShift ImageStream.
3347	newImageDestination creates an ImageDestination for uploading images to OpenShift using the specified context and reference.
3348	newUntrustedSignature creates an untrusted signature for a Docker manifest.
3349	MarshalJSON serializes the untrusted signature into JSON format.
3350	UnmarshalJSON handles JSON unmarshalling with strict validation, converting format errors to signature errors.
3351	verifyAndExtractSignature verifies a signature using a mechanism, checks its validity against rules, and extracts relevant information.
3352	RewriteReference modifies a container image reference by replacing a specified prefix with a location. If the prefix matches, it updates the reference and logs the change; otherwise, it returns an error indicating an invalid prefix.
3353	getV1Registries constructs a list of registries from the given configuration, applying search, block, and insecure flags accordingly.
3354	getConfigPath determines the configuration path based on the provided SystemContext.
3355	GetRegistries fetches registry configurations from the system context, loads them, processes, and caches the results.
3356	readRegistryConf reads configuration file content from the specified path.
3357	Manifest returns image manifest details.
3358	ConfigUpdate updates the config and annotations fields of tarballReference.
3359	parseImageAndDockerReference extracts two named references from image and string inputs.
3360	parseDockerReferences parses two Docker image references from strings.
3361	ListNames returns a sorted list of non-deprecated transport names.
3362	NewReference creates an ImageReference from an image and repository string, handling tags and resolving paths.
3363	signaturePath constructs the path to the signature file based on the manifest directory and the index.
3364	ValidateImageName checks if the image name is valid using a regular expression.
3365	SplitPathAndImage splits a reference into path and image based on OS
3366	ValidateOCIPath checks if the OCI reference path contains invalid colons based on the OS.
3367	ValidateScope checks if the given scope is valid based on OS and cleans it.
3368	BlobInfoFromSchema2Descriptor converts a Schema2Descriptor to a BlobInfo descriptor.
3369	Schema2FromManifest converts manifest bytes to a schema2 object.
3370	Schema2FromComponents constructs a new schema version 2 object from components.
3371	Modify authentication settings for a system context.
3372	RemoveAuthentication removes authentication details for a given registry.
3373	RemoveAllAuthentication clears authentication settings in system context.
3374	readJSONFile reads a Docker configuration file and returns its parsed content, handling both legacy and modern formats.
3375	modifyJSON edits a JSON file using a provided editor function. If changes are made, it saves the updated content back to the file.
3376	findAuthentication retrieves authentication details from a JSON file, prioritizing credential helpers and normalizing entries before returning Docker authentication details or an empty string if not found.
3377	NewDestination creates a new destination writer for handling repository tags and blobs.
3378	AddRepoTags appends repoTags to d's list.
3379	writeLegacyLayerMetadata generates metadata for legacy Docker image layers based on descriptors.
3380	sendSymlink creates a tar file header for a symlink and writes it using d.tar.WriteHeader.
3381	sendBytes sends a file represented by a byte slice to a specified path using sendFile.
3382	sendFile sends a file as a tar archive through the destination's writer, verifying the copied size matches the expected size.
3383	Commit closes the tar archive associated with the destination.
3384	imageMatchesRepo determines if the image's repository matches the provided reference.
3385	resolveImage fetches storage image by ID or reference name/digest, validates, and sets default digest.
3386	Transport creates a new image transport using the storage reference.
3387	StringWithinTransport generates a string representation of a storage reference within transport context.
3388	PolicyConfigurationNamespaces generates a list of namespaces based on the storage reference's properties.
3389	GzipDecompressor decompresses the given reader using gzip.
3390	Bzip2Decompressor returns a ReadCloser that decompresses data read from the input reader using Bzip2 algorithm.
3391	XzDecompressor reads and decompresses data from an input reader.
3392	DetectCompression detects compression format in input stream and returns decompression function and reader.
3393	newImageDestination creates a new Docker image destination from reference.
3394	mountBlob attempts to mount a blob from a source repository to the destination, handling cases where mounting fails by starting an upload instead.
3395	bicTransportScope returns a BICTransportScope with Opaque set to the domain of the ref.
3396	newBICLocationReference constructs a BIC location reference from a Docker reference.
3397	parseBICLocationReference parses a BIC location reference into a named reference.
3398	NewSourceFromStream reads a stream into a temporary file, decompresses it, and returns a Source object.
3399	readTarComponent reads a tar component from a specified path and returns its contents as bytes.
3400	ensureCachedDataIsPresent caches data by reading and parsing manifest.json and config, then preparing layer data.
3401	loadTarManifest reads a tar file and extracts a list of ManifestItems from it.
3402	Close removes tar file path on close if configured.
3403	newImageDestination creates a new Docker image destination using a pipe and starts a goroutine to handle image loading.
3404	imageLoadGoroutine loads an image using Docker's ImageLoad API.
3405	NewReference creates a new OCI image reference from a file and image name.
3406	createOCIRef creates a temporary OCI reference from an image.
3407	createUntarTempDir creates a temporary directory and untars an OCI archive into it.
3408	destructivelyPrioritizeReplacementCandidatesWithMax sorts candidates and returns up to maxCandidates prioritized replacements.
3409	newImageDestination creates a new image destination for storing OSTree images in a temporary directory.
3410	resolveExistingPathToFullyExplicit converts a relative or symbolic path to its absolute and cleaned form.
3411	newImageDestination creates or overwrites a container image directory with specified version.
3412	isDirEmpty checks if the specified directory is empty.
3413	removeDirContents deletes all files and subdirectories within the specified path.
3414	GetRepositoryTags retrieves Docker image repository tags using pagination.
3415	DefaultCache determines a location for the blob info cache, creates necessary directories, and returns a BoltDB or memory cache.
3416	uncompressedDigestLocked retrieves the uncompressed digest from cache or returns empty if not found.
3417	Close cleans up temp dir and closes unpacked destination.
3418	PutManifest forwards manifest data to unpacked destination.
3419	Commit saves committed changes to OCI archive image destination by tarring the temp directory.
3420	tarDirectory creates a tar file of the directory at src and saves it to dst.
3421	ParseStoreReference parses a storage reference into a structured storageReference object, handling various formats and validations.
3422	chooseDigestFromManifestList selects the appropriate digest from a manifest list based on system context and platform requirements.
3423	ChooseManifestInstance selects a digest from a manifest list.
3424	manifestSchema1FromComponents creates a generic manifest from schema1 components.
3425	manifestDigest retrieves or computes the manifest digest for a Docker image source.
3426	deleteImage deletes an image from a Docker registry.
3427	Schema1FromComponents constructs a Schema1 image from its components.
3428	initialize validates the schema layers and history, unmarshalling V1 compatibility data.
3429	ToSchema2Config converts schema 1 image to schema 2 format, handling version compatibility and populating missing fields.
3430	Digest calculates the digest of a manifest after verifying its signature if it's a Docker v2 signed image.
3431	MatchesDigest verifies if the manifest's digest matches the expected digest.
3432	NormalizedMIMEType normalizes MIME types based on specific conditions and defaults to DockerV2Schema1SignedMediaType if unrecognized.
3433	FromBlob creates a Manifest from a blob based on its MIME type.
3434	NewReference resolves a path to an image reference.
3435	layerPath returns the file path for a given layer digest.
3436	signaturePath returns the path to the signature file at the given index.
3437	New creates a pool of workers with the specified constructor and number of workers.
3438	NewFunc creates a pool with n workers, each processing tasks using the given function.
3439	ProcessTimed processes a job with a timeout, handling request and response channels.
3440	SetSize adjusts the pool's worker count based on input 'n', adding or removing workers accordingly.
3441	GetSize returns the current size of the worker pool.
3442	TL returns the top-left corner of a rectangle as a point.
3443	BR calculates the bottom-right corner point of a rectangle.
3444	CVBox converts Box2D to C's CvBox2D.
3445	Points converts a cvBox to a slice of Point2D32f.
3446	FOURCC generates a four-character code from individual bytes.
3447	Merge combines four images into one using cvMerge.
3448	Split divides an image into its blue, green, red, and alpha channels.
3449	AddWeighted combines two images using weighted sums.
3450	And applies logical AND operation on two images with an optional mask.
3451	AndWithMask performs bitwise AND operation on two images using a mask.
3452	AndScalar applies scalar operation to image src and stores result in dst.
3453	AndScalarWithMask applies a scalar operation on src image using mask, storing result in dst.
3454	Or combines two images dst using src1 and src2.
3455	OrWithMask applies a bitwise OR operation between src1 and src2, using mask to select bits, storing result in dst.
3456	OrScalar applies OR operation between src and value to dst with no mask.
3457	OrScalarWithMask applies bitwise OR operation on src and value using mask, storing result in dst.
3458	AddWithMask performs addition on two images using a mask.
3459	AddScalar calls AddScalarWithMask without mask.
3460	AddScalarWithMask adds a scalar to src image using mask and stores result in dst image.
3461	Subtract calls SubtractWithMask without a mask.
3462	SubtractWithMask performs subtraction on images using a mask.
3463	SubScalar subtracts a scalar value from each pixel of src and stores the result in dst.
3464	SubScalarWithMask subtracts a scalar from src using mask and stores result in dst.
3465	SubScalarRev subtracts scalar from src image and stores result in dst image without mask.
3466	SubScalarWithMaskRev subtracts a scalar from images using a mask.
3467	AbsDiff calculates the absolute difference between two images and stores it in a third image.
3468	AbsDiffScalar calculates the absolute difference between an image and a scalar value, storing the result in another image.
3469	MeanStdDevWithMask calculates mean and standard deviation using a mask.
3470	CreateSeq initializes a sequence object with specified flags and element size.
3471	Push appends an element to a sequence.
3472	Pop removes an element from the sequence using a C function.
3473	PushFront adds an element to the front of a sequence.
3474	PopFront removes the first element from the sequence using the C library.
3475	GetElemAt retrieves element at specified index as unsafe pointer.
3476	RemoveAt removes item at specified index from sequence.
3477	Delay returns an Option to set the delay on a Config object.
3478	BackOffDelay calculates exponential backoff delay based on attempt count and configuration.
3479	Error logs all non-nil errors with attempt numbers.
3480	Arguments appends the args to the RequestBuilder's args slice.
3481	BodyString sets the request body to a string.
3482	BodyBytes sets the request body to bytes read from the given byte slice.
3483	Body sets the request body.
3484	Option sets key-value pairs in RequestBuilder's opts map.
3485	Header adds a new header to the request builder and returns itself.
3486	Send sends the HTTP request built by RequestBuilder.
3487	Exec sends a request using the builder's configuration and decodes the response into the given struct.
3488	Next retrieves the next message from the subscription response.
3489	Cancel cancels the subscription output.
3490	FileList retrieves the first file from the specified directory.
3491	Cat reads the content at the specified path.
3492	List retrieves links for a given path by executing a request.
3493	Pin adds a file or directory to the shell's pin list recursively.
3494	Pins lists all pinned items in the shell and their info.
3495	Version retrieves the version and commit information from the shell.
3496	SwarmPeers retrieves swarm peer connection information.
3497	SwarmConnect connects to a swarm using the specified address(es).
3498	DagPutOptions applies multiple settings to a DagPutSettings instance.
3499	Pin sets the Pin field opts value.
3500	Kind sets the Kind field opts value.
3501	Hash sets the Hash field opts value.
3502	AddDir adds a directory to the shell recursively and returns its hash.
3503	Publish sends a request to publish a value under a specified node.
3504	PublishWithDetails publishes content with details including hash, key, lifetimes, and TTL.
3505	ResolveValue retrieves a value based on key or bind variables, handling nulls and lists.
3506	GenerateQuery constructs SQL query by replacing placeholders with values from bindVariables and extras.
3507	EncodeValue encodes a query parameter value to SQL format, handling tuples specially.
3508	Lex tokenizes input stream, skipping comments if allowed.
3509	skipStatement will advance the tokenizer until it encounters a semicolon or EOF.
3510	reset clears the Tokenizer's state by setting its fields to their initial values.
3511	Preview determines SQL statement type based on its first word and content.
3512	NewPlanValue converts an Expr into a PlanValue recursively, handling different types like SQLVal, ListArg, ValTuple, and NullVal.
3513	Utility function to check if string exists in values slice.
3514	NewTrackedBuffer creates a TrackedBuffer for formatting nodes with a given formatter.
3515	NewStringArena creates a new arena for strings with pre-allocated buffer.
3516	NewString creates a new string from byte slice or returns original string if buffer overflows.
3517	SpaceLeft calculates remaining capacity in StringArena buffer.
3518	ParseStrictDDL parses SQL string into structured Statement object using strict DDL rules.
3519	ParseNext parses the next statement using a tokenizer. It handles semicolons and EOF. Errors or partial DDLs are returned accordingly.
3520	Append formats a SQLNode into a buffer.
3521	ExprFromValue converts a sqltypes.Value to its corresponding AST expression.
3522	Backtick wraps input string in backticks, escaping inner backticks
3523	NewValue creates a new Value based on the provided type and byte slice.
3524	String method returns a string representation of the Value object.
3525	EncodeSQL encodes a value to SQL format using a binary writer.
3526	EncodeSQL encodes multiple rows of values into SQL syntax.
3527	EncodeSQL encodes tuple equality list to SQL based on column count.
3528	WalkStatement traverses SQL statements and applies normalization based on their type.
3529	WalkSelect traverses a SQL query's select clause, converting values and comparisons.
3530	BindVariablesEqual checks if two maps of bind variables are equal.
3531	New initializes JWTMiddleware with user-defined options or defaults.
3532	JWTMiddleware checks JWT token validity; calls next handler if valid.
3533	FromAuthHeader extracts token from Authorization header
3534	FromParameter creates a token extractor from URL query parameters.
3535	FromFirst returns a TokenExtractor that uses the first non-empty token from a list of extractors.
3536	getHelloPacket constructs an RPC message with subscription options for each topic in myTopics.
3537	NewFloodsubWithProtocols initializes a Floodsub PubSub instance with specified protocols.
3538	NewFloodSub creates a FloodSub pub-sub instance with the FloodSub protocol.
3539	NewLRUBlacklist creates a new LRU blacklist with the given capacity.
3540	NewRandomSub creates a PubSub instance using a RandomSubRouter.
3541	NewGossipSub initializes a new PubSub using a GossipSubRouter.
3542	NewPubSub initializes a new pub-sub system with given options and routes.
3543	WithValidateThrottle sets up throttle validation on PubSub instance.
3544	WithBlacklist sets the blacklist option for PubSub.
3545	handleRemoveSubscription cancels a subscription and cleans up related resources.
3546	handleAddSubscription manages subscription requests by adding them to the PubSub's topics and notifying subscribers.
3547	announce sends subscription options to peers or schedules retries if the queue is full.
3548	notifySubs notifies subscribers about a new message on specific topics.
3549	seenMessage checks if a message ID has been seen before.
3550	subscribedToMsg checks if a message's topic IDs match any of the subscriber's topics.
3551	msgID constructs a message ID using sender's address and sequence number from a protocol buffer message.
3552	pushMsg validates and processes incoming messages, handling blacklisting, signatures, and concurrency.
3553	validate ensures messages pass signature and topic validations before forwarding them.
3554	validateSingleTopic checks if message validation can proceed within throttle limits; if so, it validates the message and logs throttling if necessary.
3555	getValidators retrieves validators associated with the message's topics.
3556	Subscribe creates a subscription using a topic descriptor.
3557	SubscribeByTopicDescriptor subscribes to a topic using its descriptor with specified options.
3558	GetTopics retrieves topics asynchronously.
3559	Publish sends a message to a topic with optional signing.
3560	ListPeers retrieves peer IDs for a given topic.
3561	WithValidatorTimeout returns a ValidatorOpt to set the timeout on addValReq.
3562	WithValidatorConcurrency sets the concurrency level for validator.
3563	RegisterTopicValidator registers a validator for a topic.
3564	UnregisterTopicValidator removes a validator for a specified topic.
3565	DefaultMetricPrefix prepends "tchannel." to the given metric name and tags.
3566	MetricWithPrefix generates a metric name with a given prefix and name, appending relevant tags based on the name's prefix.
3567	NewClient initializes a new client using a channel and service name, optionally setting a host port.
3568	Call sends a request using the client's channel and handles the response or error accordingly.
3569	CallPeer initiates a peer call with the specified service name and method, wrapping the call with additional functionality.
3570	CallSC initiates a remote procedure call over TChannel and handles the response.
3571	ReadResponse parses a TChannel call to create an HTTP response object.
3572	tchanResponseWriter.writeHeaders serializes response status and headers to a write buffer and flushes it to the underlying writer.
3573	ResponseWriter creates a new http.ResponseWriter from tchannel.ArgWritable and returns a finish function to complete the response.
3574	ReadHeaders reads headers from a reader and returns them as a map.
3575	NewTCPRawRelay initializes a TCP raw relay.
3576	NewClient initializes a new TChannel client with specified configurations and options.
3577	Advertise registers services with TChannel and starts advertising loop.
3578	Handle inbound TChannel call, parse JSON headers and arguments, invoke handler, send response.
3579	Start initializes and runs a TChannel server.
3580	Port returns the port number from the server's host-port string.
3581	SetStrategy updates the score calculator and recalculates scores for all peers.
3582	Add adds a peer to the list if it doesn't exist, updates its score, and returns the peer.
3583	GetNew selects a new peer from the list, avoiding previously chosen ones, and returns it or an error if no new peers are available.
3584	Get retrieves a peer from the list, preferring new ones unless none available, then choosing from the list.
3585	Remove hostPort from peer list.
3586	Copy creates a read-safe copy of peers by host-port.
3587	Len returns the count of peers in the list, ensuring thread safety with RLock.
3588	exists checks if a peer exists in the list by hostPort and returns its score and presence status
3589	getPeerScore retrieves peer score and existence flag based on hostPort.
3590	onPeerChange updates peer score if changed
3591	updatePeer updates the score of a peer in the peer list.
3592	getConn retrieves a connection from either inbound or outbound list based on the index.
3593	GetConnection retrieves or creates a connection for the peer using a lock to ensure exclusive access.
3594	getConnectionRelay gets a connection or creates a new one with specific context settings.
3595	canRemove checks if all connections are closed by verifying the sum of inbound, outbound, and sc counts equals zero.
3596	addConnection appends a new active connection to the peer's list and notifies listeners.
3597	removeConnection removes a connection from the peer's connections list.
3598	connectionCloseStateChange updates peer state upon connection close; notifies observers if connection was active and removed.
3599	Connect establishes a connection using the channel at the given host port within the specified context.
3600	BeginCall initiates a remote procedure call to a service method, handling connection and validation.
3601	NumConnections returns the number of inbound and outbound connections for the peer.
3602	NumPendingOutbound returns the total number of pending outbound connections for the peer.
3603	isEphemeralHostPort determines if a host port is ephemeral based on its value being empty, equal to a specific ephemeral port, or ending with ":0".
3604	Get retrieves the value associated with key using context ctx; returns error if key is invalid or not found.
3605	Set updates kvHandler's vals map with key-value pair and returns count header.
3606	ClearAll clears all key-value pairs if admin.
3607	NewChannel creates a new channel with the given service name and options.
3608	Serve starts listening on a network listener and handles incoming connections.
3609	ListenAndServe starts listening on the specified hostport and serves incoming connections using the Channel.
3610	Register adds a handler to a channel's sub-channel.
3611	PeerInfo returns the local peer information.
3612	GetSubChannel retrieves or adds a subchannel for a service and applies options.
3613	serve manages incoming connections, handling backoffs and registering them asynchronously.
3614	Ping checks connectivity to a remote host through a channel.
3615	StatsTags returns common stats tags for the channel.
3616	Connect establishes a new connection using the provided context and host port, handling various states and errors.
3617	exchangeUpdated updates channel peer info based on connection details.
3618	updatePeer updates peer information and notifies relevant components.
3619	addConnection adds a connection to the channel if it's active and in the correct state.
3620	removeClosedConn removes a closed connection from the channel's mutable connections map.
3621	connectionCloseStateChange updates channel state based on connection close events and notifies when closed.
3622	State returns the current state of the channel.
3623	NewReader retrieves a Reader from the pool and sets its reader field.
3624	ReadUint16 reads two bytes from the reader and returns them as a big-endian uint16. If an error occurs or fewer than two bytes are read, it returns 0.
3625	ReadString reads up to n bytes from the reader and returns them as a string.
3626	ReadLen16String reads a string with length specified by the next 16 bits.
3627	Register is defined on Behavior. It registers both Thrift and JSON on the given channel.
3628	Run executes a series of requests across multiple levels and validates the trace.
3629	Get retrieves a relayTimer from the pool or creates a new one if none available.
3630	Put adds relayTimer to pool unless verifying correctness.
3631	Start begins a relay timer with specified duration and properties, ensuring it hasn't been started before.
3632	Release marks a timer as released and returns it to the pool.
3633	NewLogger creates a Logger instance with a writer and optional LogFields.
3634	NewTCPFrameRelay creates a TCP frame relay with specified destinations and modification function.
3635	tallyTags aggregates known tags into a map for easy access.
3636	Isolated clones the peers of a sub-channel and assigns them a new strategy.
3637	Isolated checks if the subchannel's peers have changed since it was last checked.
3638	Register adds a handler method to the SubChannel.
3639	GetHandlers retrieves the registered handlers for a subchannel.
3640	StatsTags appends subchannel tag to top channel stats.
3641	registerNewSubChannel adds a new service subscription channel and returns it along with a boolean indicating if it was added.
3642	get retrieves a SubChannel by serviceName; returns it along with a boolean indicating if it was found.
3643	getOrAdd retrieves a SubChannel for a service; if not found, it adds a new one.
3644	Discover retrieves the host ports for a given service name.
3645	Start initiates client listening and HTTP serving.
3646	listen sets up the HTTP server and starts listening on the specified port.
3647	WriteRequest encodes HTTP request into TChannel format.
3648	ReadRequest creates an HTTP request from TChannel arguments.
3649	NewReadBufferWithSize creates a buffer for reading bytes with specified size.
3650	ReadByte reads a single byte from the buffer, handling errors and empty cases.
3651	ReadBytes reads up to n bytes from the buffer, returning them as a slice. If the end of the buffer is reached before n bytes are read, it returns an error.
3652	ReadString reads up to n bytes from the buffer and converts them to a string.
3653	ReadUint16 reads two bytes from buffer and converts them to a uint16 value.
3654	ReadUint32 reads a 4-byte sequence from the buffer and converts it to a uint32 using big-endian encoding.
3655	ReadUint64 reads an unsigned 64-bit integer from the buffer.
3656	ReadUvarint reads an unsigned variable-length integer from the buffer.
3657	ReadLen8String reads a byte indicating length and then reads that many bytes as a string.
3658	ReadLen16String reads a 16-bit unsigned integer and returns a string of that length.
3659	FillFrom reads up to n bytes from ior into r.buffer.
3660	Wrap sets buffer remaining and err fields.
3661	WriteSingleByte writes a single byte to the buffer, handling errors and buffer full conditions.
3662	WriteBytes writes a byte slice to a buffer if there's enough space reserved.
3663	WriteUint16 writes a uint16 value to the buffer.
3664	WriteUint32 writes a 32-bit unsigned integer to the buffer using big-endian encoding.
3665	WriteUint64 writes a uint64 value to the buffer using big-endian encoding.
3666	WriteUvarint writes an unsigned variable-length integer to a buffer.
3667	WriteString appends a string to the buffer without copying it twice.
3668	WriteLen8String writes an 8-bit length-prefixed string to w.
3669	WriteLen16String writes a 16-bit length-prefixed string to the buffer.
3670	DeferByte removes and returns the first byte reference, setting error if buffer is full.
3671	DeferBytes defers n bytes from the buffer and returns a reference to them.
3672	FlushTo writes the dirty buffer to the provided writer and returns the number of bytes written or error.
3673	Reset resets the write buffer and clears any errors.
3674	Wrap assigns input byte slice to buffer and sets remaining to same slice.
3675	Update updates the Uint16Ref value with n using BigEndian encoding.
3676	Update updates the Uint32Ref with a new uint32 value.
3677	Update updates the reference with the big-endian encoded value of n.
3678	Update copies byte slice b to ref if it's not nil.
3679	UpdateString updates the BytesRef content with the given string.
3680	ArgReader begins an argument and returns the reader.
3681	finish updates checksum and flags based on whether more fragments exist.
3682	newWritableChunk creates a new writable chunk with given checksum and contents.
3683	writeAsFits writes up to remaining capacity of writableChunk, updates checksum and size.
3684	newFragmentingWriter initializes a new fragmenting writer.
3685	ArgWriter starts argument writing on w.
3686	BeginArgument starts a new argument, handling states and requesting fragments if needed.
3687	Write writes data to a fragmenting writer, handling partial writes and flushing fragments as needed.
3688	Flush finishes current chunk and fragment, sends it, creates new ones, and resets writer.
3689	Close handles the end of data fragments.
3690	handleCallRes forwards peer frame or returns true on error.
3691	Arg2Reader reads arg2 using arg1 reader
3692	handleError processes error frames from the connection, logs them, and forwards them to the outbound handler.
3693	doneReading updates stats and handles errors for outbound calls.
3694	newFragment creates a new writable fragment from the given initial state and checksum.
3695	flushFragment sends a frame over a connection, handling errors and updating payload size
3696	failed logs writer failure and updates error state.
3697	arg1Reader returns an ArgReader for the first argument, skipping pre-argument processing.
3698	arg2Reader returns an ArgReader for the second argument of a request-response pair.
3699	arg3Reader returns an ArgReader for the third argument, handling pre- and post-processing.
3700	argReader creates a reader for request arguments, transitioning states and handling errors.
3701	recvNextFragment reads the next fragment from the peer, handling initial fragments and parsing messages.
3702	releasePreviousFragment releases the previous fragment and sets it to nil.
3703	failed logs the error and updates r.err if not already set.
3704	parseInboundFragment reads a frame and extracts its contents, checksum, and flags into a readableFragment.
3705	NewContext creates a new Context with a cancel function using tchannel.
3706	WithHeaders wraps context with specified headers.
3707	Performs periodic health checks on a connection, logs failures, and closes the connection if too many consecutive failures occur.
3708	SetTimeout updates the Timeout field of ContextBuilder.
3709	AddHeader adds a header key-value pair to ContextBuilder's Headers map.
3710	SetHeaders updates Headers and marks replaceParentHeaders in ContextBuilder.
3711	SetConnectTimeout updates the ConnectTimeout field of cb.
3712	SetRetryOptions updates the RetryOptions field of ContextBuilder.
3713	SetTimeoutPerAttempt updates the TimeoutPerAttempt field of RetryOptions within ContextBuilder.
3714	SetParentContext assigns the parent context to cb.
3715	Build constructs a ContextWithHeaders from the CallOptions, incomingCall, RetryOptions, ConnectTimeout, hideListeningOnOutbound, TracingDisabled, ParentContext, Timeout, and getHeaders.
3716	overrideHeaders updates headers based on CallOptions fields.
3717	Read reads all data from the helper's reader into bs and returns any error encountered.
3718	ReadJSON decodes JSON data from an underlying reader into a given interface.
3719	NewArgWriter creates a new ArgWriteHelper instance.
3720	Write calls the provided function after writing bytes to the writer.
3721	WriteJSON encodes data to JSON using writer.
3722	Register registers a handler for pprof via TChannel.
3723	Count calculates the number of active items after subtracting tombstones.
3724	Get retrieves relay item by id; returns item and existence flag.
3725	Add associates a relay item with a unique ID in the relay items map.
3726	Entomb marks a relay item as tombstoned after a delay.
3727	NewRelayer initializes a Relayer instance with specified Channel and Connection parameters.
3728	Relay processes frames based on their type, handling non-call requests or forwarding them if needed.
3729	Receive processes incoming frames and manages call states.
3730	handleNonCallReq processes non-call requests using appropriate maps, remaps IDs, receives frames, handles failures, and marks completion.
3731	addRelayItem creates a new relay item and adds it to either inbound or outbound based on isOriginator flag, setting timeout accordingly.
3732	failRelayItem marks a relay item as failed, stops its timeout, and sends an error if applicable.
3733	WriteStruct serializes a Thrift struct to an IO writer.
3734	ReadStruct reads a Thrift struct from an io.Reader using a protocol reader and returns an error if any occurs.
3735	EnsureEmpty reads from an input stream until EOF, returning an error if any data is found after the specified stage.
3736	NewServer initializes and starts a server with optional configurations.
3737	Advertise initializes and starts a Hyperbahn client with provided hosts.
3738	handleCallReqContinue forwards peer frame; returns true if successful.
3739	dispatchInbound handles receiving and processing inbound RPC calls, logging, reading methods, updating stats, and managing cancellations.
3740	CallOptions constructs a new CallOptions instance using properties from InboundCall.
3741	Response returns the InboundCallResponse or marks it as failed if the original request had an error.
3742	SendSystemError handles system errors, updates state, releases previous fragment, and sends error message.
3743	SetApplicationError marks an inbound call response as having an application error if the state is valid.
3744	Arg2Writer is defined on InboundCallResponse.
3745	doneSending marks the end of sending, updates stats, cancels context, and shuts down if no errors.
3746	newState initializes a State with typedefs and parseState.
3747	rootType recursively resolves the type definition based on includes and typedefs.
3748	checkInclude splits the type name, updates the type, retrieves the include, and returns the updated state, type, and include.
3749	isResultPointer checks if the result type is a pointer.
3750	goType returns the Go type string based on the Thrift type.
3751	goTypePrefix determines the Go type prefix based on the Thrift type name and value types.
3752	NewContext creates a new context with the specified timeout using a builder pattern.
3753	newIncomingContext creates a new context with a timeout for handling incoming calls.
3754	CurrentCall retrieves the current incoming call from context or returns nil.
3755	New creates a new random number generator.
3756	Health checks the system's health and returns a status.
3757	Headers retrieves request headers from context. Returns nil if no headers found.
3758	ResponseHeaders retrieves response headers from context.
3759	SetResponseHeaders updates respHeaders in context if exists, else panics.
3760	Child returns a new context containing a copy of the original headers.
3761	Wrap creates a ContextWithHeaders from a given context, adding headers if available or creating an empty one if not.
3762	WrapWithHeaders adds a headers container to a context.
3763	WithoutHeaders removes headers from a given context.
3764	Notify sends an error notification if not already notified.
3765	forwardPeerFrame forwards frames prioritizing ctx errors, non-blocking recvCh, and errCh errors.
3766	recvPeerFrame receives a peer frame prioritizing context errors over other errors.
3767	recvPeerFrameOfType receives a peer frame of a specific type and processes it accordingly.
3768	shutdown ensures safe cleanup of messageExchange by preventing multiple calls.
3769	newMessageExchangeSet initializes a new message exchange set with the given logger and name.
3770	addExchange adds a message exchange to the set if it's not shutdown and not a duplicate.
3771	newExchange creates a new message exchange within the set.
3772	deleteExchange removes msgID from exchanges or expiredExchanges and returns whether it was found and timed out.
3773	removeExchange deletes a message exchange by ID and logs errors if called repeatedly.
3774	expireExchange removes timed-out/cancelled/blackholed exchanges and records them
3775	forwardPeerFrame forwards a peer frame to the appropriate message exchange.
3776	copyExchanges creates a copy of message exchanges and returns a flag indicating shutdown status.
3777	stopExchanges shuts down the message exchanges with an error if not already done.
3778	NewFrame creates a Frame with a buffer and splits it into header and payload sections.
3779	ReadBody processes the frame header and reads the specified payload from the reader.
3780	WriteOut writes the frame's header and data to the given writer.
3781	CanRetry determines if an error can be retried based on its type and specific codes. Returns false if RetryNever or bad request.
3782	HasRetries checks if retries are allowed for the given error based on the request state's retry options.
3783	SinceStart calculates the duration since a request started or returns a fallback value.
3784	AddSelectedPeer adds the host and port to the selected peers map.
3785	RunWithRetry runs a function with retry logic based on provided options.
3786	ChecksumSize returns the size of the checksum based on its type.
3787	New creates a new Checksum from the pool and resets it.
3788	parseTemplates loads multiple template files into Template objects.
3789	NewStringSliceFlag creates a new flag for a string slice.
3790	withStateFuncs adds goType function to template funcs using data from td.
3791	IntrospectOthers returns a map of service names to channel info for other channels based on the given options.
3792	ReportInfo constructs ChannelInfo based on channel details.
3793	IntrospectState returns the runtime state of peers in the list.
3794	IntrospectState returns runtime states of subchannels based on options.
3795	IntrospectState retrieves runtime state information for a peer based on options provided.
3796	IntrospectState gathers runtime details about the connection based on provided options.
3797	IntrospectState returns runtime state of relayer.
3798	IntrospectState retrieves the state of relay items based on options.
3799	IntrospectState retrieves the runtime state of the message exchange set, including optional details about individual exchanges.
3800	NewContext creates a new tchannel context with headers and returns it along with a cancel function.
3801	WriteResponse handles sending responses over TChannel based on the given resp struct.
3802	Wrap wraps a Handler, processing inbound calls, reading arguments, handling requests, writing responses, and handling errors.
3803	initFromOpenTracing injects the OpenTracing span context into the zipkin format.
3804	startOutboundSpan starts an outbound RPC tracing span.
3805	intToIP4 converts an integer to a dotted quad IP address format.
3806	servicePeerToHostPort converts a peer's IP and port to a host:port string
3807	NewStatsdReporter initializes a statsd reporter with the given address and prefix.
3808	UnmarshalText updates ToS value based on input text or returns error.
3809	Push adds a peer score to the heap.
3810	Pop removes and returns the minimum element from the peer heap.
3811	updatePeer updates the position of a peer score in the heap.
3812	removePeer removes the specified peer from the heap using its index.
3813	pushPeer adds a peer score to the heap with a randomized order.
3814	addPeer adds a peer score to the heap and swaps it with a random element.
3815	NewClient initializes a new TChan client for a specified service.
3816	Add will return a Peer for the given hostPort, creating it if necessary. If a Peer already exists, it will return that instead.
3817	Get retrieves peer by hostPort. Returns peer and true if found, else nil and false.
3818	WithTimeout returns an option to set the timeout duration.
3819	Methods returns a sorted list of service methods.
3820	InheritedMethods returns a sorted list of method names inherited by the service.
3821	Arguments retrieves the method's arguments as Field objects.
3822	ArgList generates a comma-separated list of method arguments including context.
3823	CallList generates a list of arguments for method invocation based on request structure.
3824	RetType returns the return type of the method as a string, appending "error" if no return type exists.
3825	WrapResult wraps the result variable based on whether it's a pointer or not.
3826	ReturnWith constructs a response string including both response and error names if method has return values.
3827	Declaration returns the field's declaration as a string.
3828	startIdleSweep creates an idleSweep instance and starts it.
3829	start initiates the idle connection checker.
3830	Stop method stops the idle connections poller and logs the event.
3831	ResolveWithGoPath searches for a file using GOPATH candidates and returns its path or an error if not found.
3832	setExtends resolves service dependencies by extending them with base services from the same or included files.
3833	register adds a handler to the handlerMap.
3834	NewClient initializes a client based on hosts and options, handling external, multi-client, or single scenarios.
3835	ListenIP retrieves the IP address of the interface used for listening.
3836	Close closes the listener and waits for references to finish.
3837	Read arguments v2 from channel reader
3838	WriteArgs sends two byte arrays over a TChannel call and receives two byte arrays in response.
3839	Call initiates a remote procedure call using TChannel and sends arguments.
3840	CallSC initiates a call to a sub-channel method with arguments and retrieves response bytes and outbound call details.
3841	CallV2 initiates a TChannel call using provided arguments and returns the response or error.
3842	NewRealRelay creates a new real relay instance using the provided services.
3843	NewServer initializes a new TChannel server with a registrar.
3844	RegisterHealthHandler registers a health handler function with Server's metaHandler.
3845	Handle processes incoming RPC calls by dispatching them to appropriate handlers.
3846	MetricsKey returns the key for system error codes used in metrics.
3847	NewSystemError creates a new SystemError instance with the given code and formatted message.
3848	NewWrappedSystemError wraps an error with a system error code and message.
3849	Error returns a formatted string describing the system error.
3850	GetContextError maps context errors to custom errors.
3851	GetSystemErrorCode retrieves system error code from given error. Returns expected error code or unexpected if error is nil.
3852	ping sends a ping request over the connection and waits for a response.
3853	handlePingRes forwards peer frame; returns true if error occurs.
3854	handlePingReq processes incoming ping requests, responding with a pong if the connection is active.
3855	SendSystemError logs and sends a system error message over a connection.
3856	connectionError handles errors during connections, logs them, stops health checks, and notifies exchanges.
3857	withStateLock locks the state before executing a function and unlocks it afterward.
3858	withStateRLock acquires a read lock on stateMut and executes function f safely.
3859	readFrames reads and processes incoming frames, handling errors and releasing resources appropriately.
3860	writeFrames handles sending frames over the connection's sendCh channel, updating activity logs and releasing resources. It drains remaining frames before closing the network connection upon stop signal.
3861	hasPendingCalls returns if there are any pending calls on the connection.
3862	checkExchanges manages connection states based on various conditions.
3863	closeNetwork closes the underlying network connection and stops health checks.
3864	getLastActivityTime retrieves the last activity time recorded in nanoseconds since epoch.
3865	Validate checks each method in the service for errors.
3866	logFailedRegistrationRetry logs the failure of Hyperbahn client registration based on consecutive failures.
3867	initialAdvertise retries sending an advertise message until successful or max attempts reached.
3868	Service extracts the service name from the payload.
3869	TTL calculates the time-to-live duration from payload bytes.
3870	SetTTL updates the TTL field in Payload using big-endian encoding.
3871	finishesCall checks if the call has finished based on the message type and payload flags.
3872	Flat returns a sorted list of unique strings from various string slices within PlatformStrings.
3873	Map applies a function to each element of PlatformStrings, collecting errors and filtering empty results.
3874	MapSlice applies a transformation function to slices within nested maps, collecting errors.
3875	GetProtoConfig retrieves the ProtoConfig extension from a Config.
3876	MapExprStrings applies a function to each string in a Bazel expression recursively.
3877	FlattenExpr simplifies expressions by extracting platform strings and squashing them into a list.
3878	makePlatformStringsExpr constructs a Bazel expression based on platform-specific strings, handling generic, OS, architecture, and platform variations.
3879	String returns a platform description based on OS and Arch.
3880	Find recursively searches up from a given directory until it finds a workspace file or reaches the root.
3881	runGazelle executes Gazelle in specified mode on given directories.
3882	restoreBuildFilesInRepo restores build files in the repository by walking through directories.
3883	FixLoads updates load statements in a file based on known loads and rules.
3884	fixLoad adjusts the load rules based on the provided kinds and known kinds, ensuring consistency.
3885	newLoadIndex calculates the next available index for rules based on the given order.
3886	removeLegacyGoRepository removes the go_repository rule from the file if it exists.
3887	Compare will return an integer indicating the relative order of two versions.
3888	ParseVersion parses a version string into its constituent components.
3889	EmptyFile creates a new File instance with the given path and package.
3890	LoadWorkspaceFile reads a file at the given path and package, then loads workspace data from it.
3891	LoadMacroFile reads macro data from a file and returns it.
3892	EmptyMacroFile creates a new macro file at the specified path and loads its data.
3893	LoadData parses a build file at the given path and package name, then scans its AST.
3894	LoadWorkspaceData parses and scans Bazel workspace data at a given path and package name.
3895	LoadMacroData parses Bazel macro data from the given path and package definition.
3896	ScanAST scans the AST body of a Bazel file.
3897	ScanASTBody scans the AST body of a Bazel file and extracts relevant information into a File struct.
3898	MatchBuildFileName searches for a specific build file in a directory and returns its path if found.
3899	SyncMacroFile updates or appends a macro function statement from one file to another.
3900	MacroName returns the macro's name or an empty string if not available.
3901	Sync processes file loads and rules, updating statements based on changes.
3902	Format returns formatted file content after syncing.
3903	Save saves the formatted file content to a specified path.
3904	HasDefaultVisibility checks if any file rule specifies default visibility for packages.
3905	NewLoad constructs a new Load object with the specified module name and initializes its symbols map.
3906	Symbols retrieves a sorted list of symbols from the Load instance.
3907	Has checks if a symbol exists in Load's symbols map.
3908	Add adds a symbol to Load's symbols map if it doesn't exist, initializing it with an Ident.
3909	Remove removes a symbol from Load's symbols map if it exists.
3910	Insert adds Load to File at specified index.
3911	NewRule creates a new rule with the specified kind and name.
3912	SetKind updates the Kind field and marks r as updated.
3913	AttrKeys retrieves sorted attribute keys based on priority.
3914	Attr retrieves the expression for the attribute with the given key.
3915	AttrString retrieves the string value associated with a key from the rule's attributes.
3916	AttrStrings retrieves string values from a rule's attributes.
3917	DelAttr removes the attribute from Rule and marks it as updated.
3918	SetAttr updates or adds an attribute to Rule with the given key and value, setting updated flag.
3919	PrivateAttrKeys returns sorted keys of private attributes for the rule.
3920	SetPrivateAttr updates the private attribute of Rule using key-value pair.
3921	Insert inserts rule r into file f at the end.
3922	IsEmpty checks if rule attributes match non-empty attributes in info.
3923	CheckInternalVisibility adjusts visibility based on path, adding "__subpackages__" if internal is found.
3924	New creates a new label with the specified repository, package, and name.
3925	Rel computes the relative label for a package within a repository.
3926	Equal checks if two labels are identical based on their components.
3927	Contains checks if one label's package path is a prefix of another's, given both labels are absolute.
3928	generateFromPath walks through directory tree rooted at rootPath, finds .proto files, and outputs their relative paths and associated labels.
3929	shouldCall decides whether to call based on relation and update mode.
3930	shouldUpdate decides if an update should occur based on the visit mode and relationship status.
3931	shouldVisit checks if a relationship should be visited based on the update mode and relationships to update.
3932	SquashRules merges rules from two sources into a destination rule, handling conflicts and comments.
3933	Run client connects to Unix socket, retries if not available, copies data from connection to stderr, logs elapsed time.
3934	UpdateRepo fetches and constructs a repository object from a given import path.
3935	NewRemoteCache initializes a RemoteCache with known repositories.
3936	Remote retrieves the remote and VCS for a given root path from the remote cache.
3937	get retrieves a value from the remote cache map, handling readiness and errors.
3938	ensure will fetch and cache a value for a given key, ensuring it's loaded only once.
3939	RelBaseName retrieves the relative base name from a given path, considering prefixes and roots.
3940	Clone creates a deep copy of the configuration.
3941	IsValidBuildFileName checks if a given build file name is valid according to the Config.
3942	check verifies if any tagLine group matches the given config, OS, and architecture.
3943	fileNameInfo extracts metadata about a file based on its path and filename.
3944	otherFileInfo retrieves and processes file information, including tags.
3945	protoFileInfo parses a protocol buffer file to extract file and package information.
3946	AddRule adds a rule to the index if it's importable.
3947	Collects embeddings for all rules and builds import index.
3948	builds an import index from rule records
3949	IsSelfImport checks if the import label matches the result's label or embedded labels.
3950	applyKindMappings applies kind mappings to load info, appending or merging as necessary.
3951	appendOrMergeKindMapping updates or adds a kind mapping in the given slice.
3952	RuleName generates a rule name from given identifiers, defaulting to "root_proto".
3953	buildPackages processes protobuf files to create packages based on configuration options and modes.
3954	selectPackage selects a single Package from a map based on the directory and relative path, handling cases with one or multiple packages and providing an error for directories containing multiple proto packages.
3955	generateProto creates a proto_library rule based on the provided ProtoConfig, Package, and visibility setting.
3956	generateEmpty filters out non-empty proto_library rules based on known files.
3957	ImportRepoRules reads a dependency lock file and converts it into a list of import rules.
3958	MergeRules merges generated rules with existing rules based on file paths and macro names.
3959	GenerateRule creates a new rule for the given repository with attributes based on its properties.
3960	FindExternalRepo resolves the path to an external repository given its root and name, handling symbolic links and validating the result as a directory.
3961	ListRepositories lists all repositories in a workspace and its directives.
3962	migrateLibraryEmbed updates Go rules by replacing 'library' attribute with 'embed'.
3963	migrateGrpcCompilers updates the kind and compilers attribute of specific rules in a file.
3964	squashCgoLibrary converts cgo_library to go_library or merges them.
3965	removeLegacyProto deletes legacy proto rules and filegroups if not in default mode or should fix is disabled.
3966	removeLegacyGazelle removes the 'gazelle' rule from the specified file if present.
3967	selectPackage selects a buildable Go package based on configuration and directory.
3968	AddBuiltin adds a builtin resolver to metaResolver.
3969	Maps package relations to their kinds.
3970	Resolver looks up built-in resolver based on rule kind and package relation.
3971	sortExprLabels sorts labels in a Bazel expression list alphabetically.
3972	checkRulesGoVersion verifies that the rules_go version is compatible with Gazelle. If not, it logs a warning to update the version in the WORKSPACE file.
3973	Preprocess tags for goConfig instance, setting "gc" tag to true.
3974	setBuildTags adds build tags to goConfig, ignoring negations.
3975	splitValue splits a comma-separated string into trimmed parts.
3976	copyGoModToTemp copies go.mod to a temporary directory.
3977	findGoTool returns the path to the Go tool executable, prioritizing GOROOT if set. Adjusts for Windows executables.
3978	isBuildable checks if the Go package has a buildable Go file or non-empty proto sources.
3979	startServer starts the server process with the given arguments.
3980	watchDir monitors directory events and records file writes using the provided callback function.
3981	listDirs lists all directories under the given directory and collects any errors encountered during traversal.
3982	shouldIgnore determines if a file path should be ignored based on specific conditions.
3983	recordWrite sets the specified path in dirSet to true while ensuring thread safety.
3984	getAndClearWrittenDirs locks the mutex, retrieves keys from the map, clears the map, and returns the keys as a slice.
3985	CombineHandlers chains multiple HTTP request handlers together.
3986	VerifyContentType ensures HTTP requests have the correct content type.
3987	VerifyMimeType ensures the request's content type matches the expected MIME type.
3988	VerifyBasicAuth checks HTTP Basic Auth credentials.
3989	VerifyJSONRepresenting creates an HTTP handler to validate JSON representation of an object.
3990	VerifyFormKV checks if form key has specified values.
3991	RespondWithProto creates an HTTP handler that responds with a protobuf-encoded message and optional headers.
3992	RegisterFailHandlerWithT sets global fail handler for Gomega with testing helper.
3993	EventuallyWithOffset creates an asynchronous assertion to check a condition repeatedly until it passes or times out, adjusting interval and offset as specified.
3994	ConsistentlyWithOffset creates an asynchronous assertion that checks a condition repeatedly until it passes or times out, using specified intervals and an offset.
3995	Expect creates a new Assertion instance using the actual value and testing wrapper.
3996	Eventually asserts that actual satisfies predicate within timeout and interval.
3997	Consistently repeatedly evaluates an assertion until it passes or times out, using specified intervals.
3998	TimeoutCloser wraps a closer with a timeout.
3999	TimeoutReader wraps an input reader to return an error after a specified duration.
4000	TimeoutWriter wraps a writer with a timeout.
4001	Nest recursively nests errors within an aggregate or nested structure, updating their paths accordingly.
4002	SetMockService initializes mock services for Cache, Plan, Platform, etc., and assigns them to servicemanager fields.
4003	FindMachineByIdOrAddress retrieves a machine by ID or address.
4004	Write data to response writer and flush if possible.
4005	Hijack extracts net.Conn from ResponseWriter if possible.
4006	ListDeploys retrieves deploy data based on filters and pagination.
4007	AddAll adds routes for version, path, handler, and all HTTP methods to DelayedRouter.
4008	samlRequestTimeout retrieves the request timeout value from the provided scheme data.
4009	RegisterHandler registers an HTTP handler for a given path and method at version "1.0".
4010	RegisterHandlerVersion registers a handler version with specified path and method.
4011	Check runs each checker, optionally filtering by name, recording duration and success/failure status.
4012	DiscoverRepositoryPath checks for a git repository starting from the given directory and moves up until it finds one or reaches the root. If not found, it returns an error indicating the repository was not discovered.
4013	OpenRepository opens a git repository at the given path.
4014	RemoteURL retrieves the URL of a remote named 'name' from a repository's configuration file.
4015	List retrieves all apps matching the label selector from the indexer.
4016	Apps returns an AppNamespaceLister for the specified namespace.
4017	List retrieves applications based on namespace and selector criteria.
4018	StreamJSONResponse streams JSON response from http.Response to io.Writer.
4019	DropDatabase deletes the specified database from the session.
4020	Collection returns a new Collection instance for the given name within the Storage session's database.
4021	SetLogger updates the logger field in Target.
4022	Error logs the given error value using the target's logger.
4023	Errorf logs formatted error messages; includes stack traces if present.
4024	Fatal logs a message and panics if logger is not nil.
4025	Debugf logs debug messages using a mutex-protected logger.
4026	GetStdLogger retrieves the standard logger associated with Target.
4027	Namespace retrieves the cluster namespace from custom data or defaults to 'tsuru'.
4028	recreateContainers restarts containers on specified nodes.
4029	checkProvisioner verifies if the provisioner is set to Docker or empty; if so, it calls checkDocker.
4030	checkDocker verifies configuration for Docker, basic settings, scheduler, router, and cluster.
4031	checkScheduler validates Docker configuration settings, deprecating old options and warning or errors based on current defaults.
4032	checkRouter validates docker router configuration settings.
4033	Available checks if the unit's status is started, starting, or in error.
4034	Get fetches the provisioner by name, returning it or an error if unknown.
4035	Registry collects all provisioners from the provisioners slice.
4036	Error returns the string representation of the error including the reason or nested error.
4037	validateVersion checks if the current version meets or exceeds the minimum supported version.
4038	ReadTarget retrieves the current target or sets it from default files.
4039	WriteTarget updates the target file with the given string.
4040	WriteOnTargetList adds a new target to a list if it doesn't already exist.
4041	Conn opens a connection to the database using the provided configuration.
4042	Apps creates and ensures a unique index on the "name" field of the "apps" collection.
4043	PoolsConstraints creates a collection for pool constraints with unique indexes on poolexpr and field.
4044	Users creates a collection for users with a unique email index.
4045	SAMLRequests creates and indexes a collection for storing SAML requests.
4046	AppLogCollection returns a Collection instance for the app's log storage based on the given appName.
4047	CreateAppLogCollection creates a new log collection for the given app name.
4048	LogsCollections retrieves all log collections from storage.
4049	ArchiveBuildCmds generates commands to build an app archive.
4050	ArchiveDeployCmds generates deployment commands for an application using an archive URL.
4051	DeployCmds generates deployment commands for an app.
4052	runWithAgentCmds constructs a command array for tsuru_unit_agent using app details and configuration values.
4053	newApps creates an apps instance with a REST client and namespace.
4054	Commit saves Docker container as image, tags it, and pushes to registry.
4055	processTags removes duplicates and trims whitespace from input tags.
4056	aggregateContainersBy aggregates container counts by host address using a MongoDB pipeline.
4057	chooseNodeToAdd selects a host to run a container based on app and process.
4058	chooseContainerToRemove selects a node based on criteria and retrieves a container ID to remove from that node.
4059	Get retrieves a router by name.
4060	Default returns the default router plan's name, or an error if none found.
4061	Store updates or inserts a router app entry in the database based on the app name.
4062	TsuruV1 returns a fake implementation of the TsuruV1 API interface.
4063	Tsuru returns a fake Tsuru API interface for testing.
4064	NewAppInformer initializes a new AppSharedIndexInformer.
4065	NewFilteredAppInformer creates a shared informer for Tsuru apps with filtering options.
4066	Watch invokes a fake watch action on apps with specified options.
4067	Patch applies a JSON patch to an application resource.
4068	NewSharedInformerFactory initializes a factory for shared informers with a default resync period.
4069	NewFilteredSharedInformerFactory creates a new SharedInformerFactory with the specified client, namespace, resync duration, and list options tweak function.
4070	Proxy method returns an error indicating service proxy unavailability.
4071	UnbindUnit unregisters the specified unit from the service instance.
4072	Create inserts a new plan with validation checks.
4073	Remove deletes the specified plan from storage.
4074	ensureDefault creates a default plan if none exist based on configuration settings.
4075	DeleteInstance destroys a service instance if not bound.
4076	ToInfo converts a service instance to detailed information.
4077	Update updates the service instance based on provided data and executes associated actions.
4078	BindApp binds an application to the service instance and executes a series of actions including database binding, endpoint setting, environment variable update, and unit binding.
4079	BindUnit binds a unit to a service instance and updates the database accordingly.
4080	UnbindApp unbinds an application from a service instance.
4081	Status retrieves the service instance's production endpoint status.
4082	ProxyInstance proxies requests to a service's production endpoint after validating the path and method.
4083	Inc increases the quota for an application within the storage system.
4084	SetLimit updates or validates the quota limit for an application.
4085	Set updates the usage of a quota for an application, checking limits and returning errors if exceeded.
4086	Get retrieves the quota for the specified application.
4087	RemoveImage removes an image from a Docker registry based on its name and tag.
4088	RemoveAppImages deletes Docker images for a given application from a registry.
4089	Create creates a new platform, validates it, inserts it into storage, builds it, and handles errors by rolling back.
4090	List retrieves enabled or all platform instances based on the provided flag.
4091	FindByName retrieves platform details by name.
4092	Update platform options, handle file input, update disabled status.
4093	Remove platform and associated resources.
4094	Rollback updates platform image and sets update flag for related applications
4095	GetPoolByName retrieves a pool by name from the database.
4096	Manager returns the configured repository manager or a fallback.
4097	Register adds a repository manager to a global map.
4098	start starts the bind-syncer goroutine, running at intervals until shutdown.
4099	Shutdown stops the bindSyncer gracefully or cancels on context expiration.
4100	GetForProvisioner retrieves a Builder based on the provisioner type, defaulting to Docker or Kubernetes if not found.
4101	get retrieves a Builder by name or returns an error if not found.
4102	Registry returns a list of builders from the global registry.
4103	RegisterQueueTask registers a task with the queue using a Docker provisioner.
4104	Apps creates and returns an informer for applications.
4105	DeepCopy creates a deep copy of the App instance.
4106	DeepCopy creates a deep copy of AppList.
4107	DeepCopy creates a deep copy of AppSpec.
4108	Write sends data to LogWriter; returns length or error.
4109	ResetPassword resets a user's password using a valid token and sends the new password via email.
4110	addKnownTypes registers custom types with the Kubernetes runtime scheme.
4111	Register adds a Shutdownable to a list after acquiring a lock.
4112	Do shuts down all registered services gracefully.
4113	ListImagesOrDefault retrieves images or defaults to a basic image name.
4114	MigrateAppsCRDs provisions applications across Kubernetes namespaces based on pool configurations, handling potential errors gracefully.
4115	Register adds a migration function without transaction support.
4116	RegisterOptional registers a migration function optionally.
4117	Run executes commands based on provided arguments.
4118	Units retrieves the provisioned units for the application.
4119	MarshalJSON serializes the app details into JSON format.
4120	AcquireApplicationLockWait attempts to acquire a lock on an application and waits until it succeeds or times out.
4121	ReleaseApplicationLock attempts to release a lock on an app name after multiple retries with increasing delays.
4122	GetByName retrieves an application by its name.
4123	AddUnits adds new units to an application.
4124	SetUnitStatus updates the status of a specific unit within an application.
4125	UpdateNodeStatus updates node status using node data and returns results for each unit.
4126	available returns true if any unit of the application is available.
4127	Grant adds a team to an application and updates database accordingly.
4128	Revoke removes a team's access to an application, updating permissions and database accordingly.
4129	GetTeams retrieves the teams associated with the app.
4130	setEnv updates application environment variables and logs public ones.
4131	getEnv retrieves an environment variable by name, returning an error if it's not found.
4132	validateNew checks if the app name is valid before calling validate.
4133	validate checks pool and plan validity for the application.
4134	InstanceEnvs retrieves environment variables for a specific service and instance.
4135	Run command in isolated mode or check availability before execution.
4136	GetUnits retrieves all units associated with the application.
4137	GetUUID generates or retrieves the UUID for the application.
4138	Envs combines environment variables from App and ServiceEnvs into a single map.
4139	SetEnvs updates the application's environment variables based on the provided arguments, validates each variable, and restarts units if required.
4140	UnsetEnvs removes specified environment variables from an application and updates the database.
4141	AddCName adds CNAMEs to the application.
4142	Log saves application logs to the database.
4143	LastLogs retrieves recent logs based on specified lines and filter criteria.
4144	List retrieves applications based on filters, applying status conditions and loading cached addresses.
4145	Swap two applications' routers and CNames, rebuilding routes and updating the database.
4146	Start initializes and runs a process or app, handling logging and provisioning.
4147	GetDbDriver retrieves a database driver by name or returns an error if unknown.
4148	GetCurrentDbDriver retrieves the current database driver or initializes it if necessary.
4149	NewForConfig initializes a Clientset using a rest.Config.
4150	GetAppFromUnitID retrieves the application associated with the given unit ID.
4151	NewPipeline creates a new Pipeline with copies of the given actions to ensure isolation.
4152	Result retrieves the final result from the pipeline's actions.
4153	DecodeJsonPayload reads JSON payload from request body and decodes it into v.
4154	UrlFor constructs a URL for the given path with optional query parameters.
4155	GetCorsInfo retrieves CORS information from request headers.
4156	CorsMiddleware wraps a handler to add CORS support based on allowed origins, methods, and headers.
4157	MiddlewareFunc wraps handler to record response details
4158	WriteHeader sets response status code and flags header written status.
4159	MakeRouter initializes a router with given routes and starts it.
4160	AppFunc handles incoming requests, finds matching routes, sets parameters, and executes user-defined handlers.
4161	escapedPath extracts the path part of a URL by splitting it at the first '?' character.
4162	escapedPathExp validates and normalizes a URL path expression
4163	start initializes the router's trie and index structures, populating them with routes and enabling optional compression.
4164	ofFirstDefinedRoute returns the first defined route match based on index.
4165	findRouteFromURL retrieves the best route match for a given HTTP method and URL.
4166	ContentTypeCheckerMiddleware checks and validates the Content-Type and charset of incoming requests before passing them to the next handler. If invalid, it returns a 415 Unsupported Media Type error.
4167	CloseNotify provides a channel to receive notifications when the client connection has closed.
4168	Wrap HTTP requests in Apache-style access logs.
4169	executeTextTemplate executes a text template using the provided access log utility.
4170	RemoteUser retrieves the remote user from access log environment.
4171	ApacheQueryString returns the raw query string from the URL or an empty string if none exists.
4172	StartTime retrieves the START_TIME from u's environment.
4173	ApacheRemoteAddr extracts and returns the IP address from the RemoteAddr field.
4174	ResponseTime retrieves the ELAPSED_TIME from accessLogUtil's environment.
4175	Wrap handler with JSON indentation middleware.
4176	EncodeJson encodes JSON with indentation using writer's prefix and indent.
4177	WriteHeader sends HTTP response header with status code.
4178	MakePath constructs a URL path from template using parameters.
4179	RecoverMiddleware wraps a handler to catch panics, logs them, and sends appropriate responses.
4180	WrapMiddlewares applies a list of middleware functions to a handler.
4181	MiddlewareFunc enables gzip compression for requests.
4182	`WriteHeader sets the response headers, including Vary and Content-Encoding if applicable.`
4183	Hijack extracts the underlying connection from a response writer.
4184	Write compresses or writes data based on the gzip status.
4185	MiddlewareFunc wraps handler with basic authentication and authorization checks.
4186	printDebug recursively prints debug information about a node and its children at different levels.
4187	AddRoute adds a route to the Trie using HTTP method and path expression.
4188	printDebug prints the Trie structure in a debug-friendly format.
4189	FindRoutes searches for routes matching httpMethod and path, returning them as Match objects.
4190	FindRoutesAndPathMatched searches for routes matching HTTP method and path, returning matched routes and path status.
4191	FindRoutesForPath finds all routes matching the given path using a trie.
4192	Use adds the middleware functions to the API stack.
4193	MakeHandler creates an HTTP handler from an API's application function, wrapping it with middlewares.
4194	MiddlewareFunc adds X-Powered-By header to responses.
4195	StatusMiddleware logs request status and response times.
4196	GetStatus retrieves the current status of the middleware including uptime, response counts, and averages.
4197	MiddlewareFunc wraps a handler with JSONP support.
4198	Flush sends response data immediately if headers haven't been written yet.
4199	AccessLogJsonMiddleware logs JSON access records for each request handled by the middleware.
4200	Fetch retrieves an S3 object, skipping if unchanged, and decompressing gzipped files.
4201	sanityCheck verifies the presence of either the current or legacy environment variable and prints its value if found, returning true; otherwise, it returns false.
4202	release manages connection closure with a timeout and waits for active listeners to finish.
4203	fetchLoop continuously fetches data with a minimum interval.
4204	forkLoop continuously forks a command until it succeeds.
4205	Init checks path and interval, updates hash.
4206	Fetch retrieves updated file content if it has changed since last fetch.
4207	Fetch retrieves data from HTTP URL, checks status, and updates if necessary.
4208	NewConfig initializes a Kafka consumer configuration.
4209	Validate checks Sarama config correctness.
4210	NewClient initializes a Kafka client with given addresses and configuration.
4211	AsyncClose asynchronously closes the partition consumer.
4212	Close asynchronously closes the consumer.
4213	MarkOffset updates the consumer's state if the new offset is greater than the current one.
4214	NewConsumer initializes a Kafka consumer using specified addresses, group ID, topics, and configuration.
4215	MarkOffsets updates offsets for subscribed topics using information from OffsetStash.
4216	ResetOffset updates consumer's subscription offset.
4217	Close closes the consumer and its resources.
4218	hbLoop manages the heartbeat loop for Consumer, handling errors and stopping conditions.
4219	twLoop refreshes metadata periodically, handles errors, and exits on stop or dying signals.
4220	cmLoop handles committing offsets at intervals or on shutdown.
4221	fetchOffsets retrieves Kafka consumer group offsets for specified topics and partitions.
4222	MarkOffset updates partition offset with metadata.
4223	ResetOffset updates partition offset based on message details.
4224	Offsets returns the offsets stored in the stash.
4225	Actual retrieves the current cluster state by comparing it with the cached actual state. If the cache is empty, it fetches the latest cluster details from the cloud provider and updates the cache before returning the result.
4226	Expected calculates and caches the expected cluster state based on server pool configuration.
4227	Delete removes an instance group and associated resources.
4228	GetReconciler creates a reconciler based on the cluster's cloud provider.
4229	GetVersion retrieves the application's version details.
4230	GetVersionJSON converts version info to a JSON string.
4231	Actual method updates resource group details based on immutable cluster state.
4232	Expected calculates the expected cluster state based on the given immutable state.
4233	CreateCmd generates a Cobra command for creating a Kubicorn API model from a profile.
4234	NewUbuntuCluster initializes a new Ubuntu cluster with control plane and node machine sets configured for Azure.
4235	ProviderConfig parses the raw JSON string from the cluster spec and returns a ControlPlaneProviderConfig object.
4236	SetProviderConfig updates Cluster's API with marshaled provider configuration.
4237	MachineProviderConfigs extracts provider configurations from cluster's machine sets.
4238	SetMachineProviderConfigs updates or logs warnings for unmatched provider configurations.
4239	NewCluster creates a new Cluster instance with specified name.
4240	DeployControllerCmd creates a command to deploy a controller for a given cluster.
4241	NewRetrier creates a new retrier instance with specified retries, sleep time, and retryable condition.
4242	RunRetry handles retries with signal handling and timeout.
4243	MustGenerateRandomBytes generates and returns random bytes, panicking on failure.
4244	ExplainCmd returns a Cobra command to explain cluster state.
4245	TimeOrderedUUID generates a UUID ordered by timestamp.
4246	GetConfigCmd generates a cobra command to manage Kubernetes configuration by pulling a kubeconfig file from a cluster.
4247	RunAnnotated executes a task asynchronously and logs activity.
4248	ListCmd creates a Cobra command to list available states with options for no headers.
4249	NewUbuntuCluster creates a new Kubernetes cluster configuration with Ubuntu nodes.
4250	EditCmd defines a cobra command for editing a cluster state.
4251	RemoveKey deletes the specified SSH key from the keyring.
4252	RemoveKeyUsingFile deletes the key from the keyring using the provided public key file.
4253	Actual method retrieves firewall resource details from DigitalOcean API and updates cluster configuration accordingly.
4254	Expected returns a new cluster object representing the expected state of the firewall.
4255	Apply applies firewall changes based on actual vs expected resources
4256	Delete removes a firewall resource from the cluster.
4257	DeleteCmd creates a Cobra command for deleting a Kubernetes cluster.
4258	NewStateStore initializes and returns a cluster storer based on the specified state store option.
4259	Commit updates JSON store with cluster info and commits changes to Git repository.
4260	ApplyCmd creates a Cobra command to apply cluster resources to a cloud.
4261	ExpandPath expands relative paths like '.' and '~' to their absolute equivalents.
4262	CompletionCmd generates completion code for bash and zsh shells.
4263	AdoptCmd defines a cobra command for adopting a Kubernetes cluster.
4264	StrEnvDef retrieves environment variable or uses default value
4265	IntEnvDef retrieves integer environment variable; returns default if unset or invalid.
4266	BoolEnvDef retrieves the boolean value from environment variable env or returns the default value def.
4267	readFromFS reads the contents of a file from the filesystem, handling tilde expansion for paths.
4268	VersionCmd creates and returns a cobra command for verifying Kubicorn's version.
4269	NewSignalHandler creates a handler to listen for OS interrupts or kills within a specified timeout.
4270	Register starts a goroutine handling signals and timeouts.
4271	NewUbuntuCluster creates a Kubernetes cluster on ECS with specified configurations for master and node nodes.
4272	BeginningOfHour returns the start time of the current hour.
4273	BeginningOfDay returns the start time of the day for the given Now instance.
4274	BeginningOfWeek calculates the start of the week based on a configurable day.
4275	BeginningOfMonth returns the first day of the month for the given date.
4276	BeginningOfQuarter calculates the start date of the current quarter.
4277	BeginningOfYear returns the start of the current year.
4278	EndOfMinute calculates the end time of the current minute.
4279	EndOfHour calculates the end time of the hour.
4280	EndOfDay returns the last moment of the current day.
4281	EndOfWeek calculates the end of the week from the beginning of the week.
4282	EndOfMonth calculates the last day of the current month.
4283	EndOfQuarter calculates the last moment of the current quarter.
4284	EndOfYear calculates the last moment of the current year.
4285	MustParse parses multiple strings to a time value or panics on failure.
4286	Between checks if Now's time is between two specified times.
4287	ParseInLocation converts strings to time.Time using a specific location.
4288	MustParse converts strings to time.Time using current time as reference.
4289	MustParseInLocation parses strings to time.Time using specified location.
4290	Between checks if the current time falls within two specified times.
4291	NewChannelMemoryBackend creates a new channel memory backend with specified size.
4292	Start launches the processing goroutine if not already running.
4293	Flush sends an event to trigger backend flushing and waits for completion.
4294	Stop shuts down the channel memory backend and waits for all operations to complete.
4295	Formatted returns formatted record string.
4296	Message returns the formatted message with redacted arguments.
4297	SetBackend updates logger's backend and marks it as initialized.
4298	MustGetLogger retrieves a logger or panics if it cannot.
4299	Reset initializes the backend sequence number, sets the default formatter, and configures the current time function.
4300	IsEnabledFor checks if logging is enabled at a specified level for a logger's module.
4301	Criticalf logs critical messages using fmt.Sprintf.
4302	Warningf logs formatted warning messages using the specified format string and arguments.
4303	Noticef logs formatted messages at the NOTICE level.
4304	Infof logs formatted info messages using INFO level.
4305	SetFormatter locks formatter, sets def to f, then unlocks.
4306	MustStringFormatter returns a Formatter instance or panics on failure.
4307	formatFuncName extracts and formats package or function name based on given verb.
4308	Log is part of the backendFormatter interface.
4309	LogLevel converts a string to a corresponding Level, or returns an error if invalid.
4310	AddModuleLevel wraps a Backend to add module-level logging functionality if not already present.
4311	GetLevel retrieves the log level for a module, using a default of DEBUG if none is specified.
4312	SetLevel updates the module's level in l.
4313	IsEnabledFor checks if a given log level is enabled for a specific module.
4314	MultiLogger creates a multi-backend logger with module levels.
4315	Log multiplies the log message across backends enabled at the specified level.
4316	GetLevel implements Logger. Returns highest log level among backends.
4317	Sets logging level for each backend in multiLogger.
4318	IsEnabledFor checks if any backend in multiLogger is enabled for given level and module.
4319	ConvertColors converts integer colors to string sequences with optional bold formatting.
4320	NewSyslogBackend creates a new SyslogBackend instance with the specified prefix and logs at CRITICAL level.
4321	NewSyslogBackendPriority creates a new SyslogBackend with specified prefix and priority.
4322	SetBackend configures and returns a LeveledBackend with the specified backends.
4323	NewCommander creates a Commander instance with specified top-level flags, name, and default output/error streams.
4324	Execute matches command name and executes it with parsed flags.
4325	explain generates usage instructions for a command-line tool.
4326	explainGroup outputs a description of command group and its subcommands.
4327	explain prints command usage and flags.
4328	dealias recursively resolves command aliases.
4329	Execute runs a command with arguments using the default commander.
4330	LoadFromData creates a temporary file from byte data and loads configuration.
4331	LoadFromReader reads a configuration file from the given reader and returns it or an error.
4332	ReloadData reloads configuration data from an io.Reader, overwriting current in-memory data.
4333	AppendFiles appends files to the configuration file.
4334	.GetKeyList retrieves keys from a specified section of a configuration file. If the section is empty, it defaults to the 'DEFAULT' section. The method handles locking when in BlockMode and filters out any empty keys before returning the list.
4335	SaveConfigData serializes a ConfigFile object into the specified output writer.
4336	SaveConfigFile saves the given configuration to a file.
4337	Find creates a Selection using a CSS selector.
4338	FindByXPath returns a Selection based on XPath query.
4339	FindByLink creates a new Selection object based on the link text.
4340	FindByLabel creates a Selection object using the session and label text.
4341	FindByName returns a Selection for the item matching the given name.
4342	FindByClass creates a Selection by finding elements with the specified class.
4343	FindByID constructs a Selection for a given ID.
4344	First returns the first Selection matching the CSS selector.
4345	FirstByXPath returns the first Selection matching the XPath selector.
4346	FirstByLink creates a Selection from the first element matching the given link text.
4347	FirstByLabel creates a Selection based on the first label match.
4348	FirstByName returns the first Selection matching the given name.
4349	All appends a CSS selector to the selectable's selectors and returns a MultiSelection object.
4350	AllByXPath appends an XPath selector to s.selectors and returns a MultiSelection.
4351	AllByLink constructs a MultiSelection with session and selectors appended for link matching.
4352	AllByLabel creates a MultiSelection based on label text.
4353	AllByName creates a MultiSelection filtering by name.
4354	AllByClass appends a class selector to the session's selectors and returns a MultiSelection.
4355	AllByID constructs a MultiSelection for all items matching an ID.
4356	FindForAppium returns a Selection instance for Appium.
4357	Timeout returns an Option to set the timeout duration on a config.
4358	ChromeOptions adds an option to the ChromeOptions map.
4359	JoinPage creates a new Page instance with the specified URL and optional configurations.
4360	Destroy destroys the page's session.
4361	Reset clears cookies and storage then navigates to about:blank.
4362	Navigate updates the browser session's URL and handles errors.
4363	GetCookies retrieves all cookies from the session and converts them to http.Cookie objects.
4364	SetCookie updates the session's cookie with the provided http.Cookie.
4365	DeleteCookie removes a cookie from the session with the given name.
4366	ClearCookies removes all cookies from the session.
4367	URL retrieves the session's URL.
4368	Size sets the dimensions of the window associated with the Page instance.
4369	Screenshot saves the current page's screenshot to the specified file.
4370	Title retrieves the page's title from the session.
4371	HTML retrieves the HTML source of the page.
4372	PopupText retrieves the alert text from the session.
4373	EnterPopupText sets the alert text in the session
4374	ConfirmPopup accepts an alert and returns an error if it fails.
4375	CancelPopup dismisses an alert in the page's session or returns an error if it fails.
4376	SwitchToParentFrame switches the session to its parent frame or returns an error.
4377	SwitchToRootFrame switches browser context to the root frame.
4378	NextWindow cycles to the next window in the session
4379	CloseWindow deletes the active window session.
4380	WindowCount returns the count of available windows.
4381	LogTypes retrieves the log types from the session.
4382	MoveMouseBy moves the mouse cursor by the specified offset in pixels.
4383	DoubleClick simulates a double-click action using the session.
4384	Click handles different types of click events on a page.
4385	Click executes the click action on each selected element, returning an error if any click fails.
4386	DoubleClick moves mouse to and double-clicks each selected element.
4387	Fill clears and sets text for each selected element.
4388	Tap triggers touch events based on the type of tap on selected elements.
4389	Touch processes different touch events and applies them to selected elements.
4390	FlickFinger performs a touch flick gesture on a selected UI element at specified offsets and speed.
4391	ScrollFinger scrolls the selected element by specified offsets using touch gesture.
4392	NewCapabilities constructs a Capabilities object with the specified features added via With method.
4393	JSON converts capabilities to a JSON string.
4394	HaveTitle returns a Gomega matcher for checking if the Title property matches the expected value.
4395	HaveURL checks if the URL matches the expected value.
4396	HavePopupText creates a matcher to check popup text content
4397	HaveLoggedError creates a matcher to check if specified warning or severe messages have been logged in a browser context.
4398	Text retrieves the text of the selected element.
4399	Active checks if the selected element matches the active element.
4400	Attribute retrieves the specified attribute from the selection.
4401	CSS retrieves the value of a specified CSS property.
4402	Selected checks if the element is selected.
4403	Visible checks if selection elements are displayed.
4404	Enabled checks if Selection has state IsEnabled set to "enabled".
4405	HaveCount creates a Gomega matcher to check if the element count matches the expected value.
4406	HaveAttribute returns a Gomega matcher checking if the specified attribute has the expected value.
4407	EdgeDriver creates a WebDriver instance for Microsoft Edge on Windows.
4408	Selendroid creates a WebDriver instance for Android apps using a JAR file.
4409	SwitchToFrame selects an element and switches the session to its frame.
4410	Count returns the number of selected elements.
4411	EqualsElement checks if two selections have the same single element.
4412	MouseToElement moves mouse to selected element or returns error
4413	loggingMiddleware logs incoming HTTP requests to the reverse proxy.
4414	chainHandlers combines multiple middleware functions into a single handler.
4415	HTTPReverseProxy starts a reverse proxy server with optional middleware and logs the port it's running on.
4416	Installer.CheckInstallation checks each binary's version against a specified range and validates it.
4417	CheckVersion verifies if the given version of a binary matches the required semver range.
4418	GetVersionForBinary retrieves the version of a specified binary using its command-line interface.
4419	getUser fetches user details from the server using HTTP GET request.
4420	login authenticates user and returns user details on success.
4421	loginHandler handles user login by validating credentials and redirecting accordingly.
4422	logoutHandler resets user session and redirects to home.
4423	viewHandler renders login template with user and error data.
4424	Run starts the HTTP server for the user service client.
4425	WithRequest updates Interaction's Request field, logs warning if JSON-formatted object detected.
4426	WillRespondWith updates the Response field with the given response.
4427	isJSONFormattedObject determines if the input is a JSON-formatted object.
4428	ByUsername retrieves user by username, returns error if not found.
4429	ByID retrieves a user by their ID. If not found, it returns an error.
4430	UserLogin handles user authentication requests, validates credentials, and responds accordingly.
4431	newClient initializes a PactClient with setup services and a timeout duration.
4432	NewClient initializes a PactClient with mock services.
4433	ListServers retrieves and returns a list of mock servers managed by the Pact client.
4434	UpdateMessagePact validates request, executes command, captures output, and returns error if any.
4435	PublishPacts publishes pacts using the provided request.
4436	getPort extracts the port number from a raw URL, defaulting to 443 for HTTPS and 80 otherwise.
4437	getAddress extracts the host part from a raw URL.
4438	sanitiseRubyResponse cleans up a Ruby response by removing comments, specific commands, and extra newlines.
4439	Publish sends a Pact request using the client, validating the request first.
4440	FindPortInRange parses a port string or range, returning the first usable port or an error if none are available.
4441	EachLike creates a new matcher that requires at least minRequired items matching content.
4442	Term creates a new matcher using regular expressions.
4443	UnmarshalJSON converts JSON to MapMatcher.
4444	objectToString converts an object to a JSON string if it's not already a string.
4445	match constructs a Matcher based on the given type and parameters.
4446	AddMessage appends a new Message to Pact's MessageInteractions and returns it.
4447	AddInteraction sets up Pact and adds a new Interaction to its list.
4448	Teardown stops the Pact server and updates the server field.
4449	Verify runs an integration test using pact interactions and validates them.
4450	stateHandlerMiddleware handles requests to setup state and passes other requests to the next handler.
4451	VerifyMessageProviderRaw sets up a temporary HTTP server to verify a message provider using Pact.
4452	VerifyMessageConsumerRaw verifies a message using a consumer handler and updates the Pact accordingly.
4453	VerifyProvider mocks base method
4454	NewService mocks base method
4455	Setup initializes channels and starts monitoring goroutines for service management.
4456	monitors new services and updates process map accordingly
4457	removeServiceMonitor starts a monitor to handle completed commands, signaling processes and updating process map.
4458	List returns a map of service IDs to their corresponding exec.Cmd instances.
4459	Command creates an exec.Cmd with service manager's command details.
4460	call makes an HTTP request with the given method, URL, and content.
4461	DeleteInteractions clears interaction records in the mock service.
4462	MockService records interactions via POST request.
4463	WritePact logs debug info, validates input, sets default mode, constructs pact data, and sends POST request.
4464	ExpectsToReceive sets the Description field p value.
4465	WithMetadata sets the Metadata field p value.
4466	AsType sets the Type field p value based on interface t.
4467	UserLogin handles login requests, validates credentials, and responds accordingly.
4468	Region returns the AWS region based on domain or environment variable.
4469	New creates and returns a new S3 instance with the specified domain and keys.
4470	Bucket returns a new Bucket pointer for the specified S3 bucket name.
4471	PutWriter writes data to a bucket at a given path with headers and config.
4472	bucketURL constructs a URL for accessing a resource in an S3-compatible storage system, considering versioning and path style configurations.
4473	SetLogger configures the global logger with specified output, prefix, flags, and debug mode.
4474	InstanceKeys retrieves AWS credentials from the EC2 metadata service and returns them as Keys.
4475	EnvKeys retrieves AWS credentials from the environment variables.
4476	Sign will sign the HTTP request using the bucket's credentials
4477	getAWSKeys retrieves AWS credentials either from environment or instance metadata.
4478	homeDir retrieves the user's home directory using environment or shell evaluation.
4479	ACL sets the x-amz-acl header in HTTP request if provided.
4480	putPart uploads a part of a file to a server, verifying its integrity.
4481	abort cancels a multipart upload by sending a DELETE request
4482	growPartSize determines if increasing a partition's size is feasible based on remaining capacity.
4483	CheckDisallowed verifies that all environment variables starting with prefix are allowed based on provided specification. Returns error if any unknown variable is found.
4484	Process handles prefix and spec, setting values from environment or defaults.
4485	MustProcess panics if Process returns an error.
4486	toTypeDescription generates a human-readable description of the given reflect.Type, handling arrays, slices, maps, pointers, structs, and primitive types.
4487	Usage outputs command-line usage information as a formatted table.
4488	Usagef formats configuration usage based on a template and outputs it to a writer.
4489	Usaget gathers information based on prefix and spec then executes template on output.
4490	Scan converts database value to Go time.Time.
4491	Value returns the driver value for the Time instance.
4492	NewTime creates a new Time object with specified Time and Valid values.
4493	TimeFromPtr converts a nullable time pointer to a custom Time type.
4494	ValueOrZero returns the time value or zero if not valid.
4495	MarshalJSON serializes valid time values; otherwise, it returns null.
4496	SetValid updates the Time field and marks it as valid.
4497	Ptr returns a pointer to the time.Time value if valid, otherwise returns nil.
4498	NewBool creates a Bool instance with specified null boolean values.
4499	BoolFromPtr converts a pointer to a boolean value.
4500	UnmarshalJSON parses JSON data to a nullable boolean value.
4501	UnmarshalText parses text representation of boolean value.
4502	MarshalJSON serializes the boolean value as JSON.
4503	SetValid updates the Bool field and marks it as valid.
4504	NewString creates a new String instance with the given string and validity flag.
4505	UnmarshalJSON handles JSON unmarshalling for custom string types.
4506	MarshalText converts valid string to byte slice.
4507	UnmarshalText sets string value from text data.
4508	SetValid updates the String field and marks it as valid.
4509	StringFromPtr converts a string pointer to a custom String type.
4510	MarshalJSON serializes string as JSON, handling invalid values gracefully.
4511	NewInt creates a new Int struct with the given int64 value and validity flag.
4512	IntFromPtr converts a pointer to an int64 to an Int value.
4513	UnmarshalJSON parses JSON data into integer or null integer values.
4514	MarshalText converts integer to text representation.
4515	SetValid updates the Int64 field and marks Valid as true.
4516	UnmarshalText parses text to set Int value and validity.
4517	MarshalText serializes boolean value to text format.
4518	SetValid updates the Float64 field and marks Valid as true.
4519	MarshalJSON serializes valid time values.
4520	UnmarshalJSON parses JSON data into a float or valid flag.
4521	UnmarshalText converts text to a nullable float.
4522	MarshalJSON serializes float value or returns null/unsupported error.
4523	newGossipChannel creates a new gossip channel instance.
4524	GossipUnicast sends a unicast gossip message to a specific peer.
4525	GossipBroadcast relays a gossip update to other members of the channel.
4526	Send broadcasts gossip data using the relay method.
4527	SendDown sends gossip data down a connection using the appropriate sender.
4528	gobEncode serializes a sequence of items into a byte buffer using Gob encoding.
4529	newTokenBucket initializes a new token bucket with given capacity and refill interval.
4530	wait ensures token bucket has enough tokens before proceeding.
4531	capacityToken calculates the last refill time for the token bucket.
4532	PrefixRangeEnd returns the largest byte sequence lexicographically less than the input prefix. If no such sequence exists, it returns the empty byte sequence.
4533	newLocalPeer creates a new local peer with an actor loop.
4534	getConnections retrieves a snapshot of the current connections for a local peer.
4535	createConnection establishes a TCP connection between peers.
4536	doAddConnection handles adding a connection asynchronously.
4537	startLocalConnection initializes and starts a local connection using the provided parameters.
4538	SendProtocolMsg sends a message over the connection and handles errors by shutting down the connection.
4539	NewStatus constructs a status object from a router instance.
4540	makePeerStatusSlice generates a list of peer statuses from the given peers.
4541	makeUnicastRouteStatusSlice creates a list of unicast route statuses from a routes object.
4542	makeBroadcastRouteStatusSlice converts route data to a slice of broadcast statuses.
4543	makeLocalConnectionStatusSlice generates a slice of local connection statuses from the given connection maker.
4544	makeTrustedSubnetsSlice converts IPNet slice to string slice.
4545	Range processes a request to retrieve a range of keys from the store.
4546	Put stores data in etcd using a proposal request and handles context cancellation or store shutdown.
4547	DeleteRange handles etcd delete requests asynchronously.
4548	Txn handles etcd transactions, proposing them and handling responses or errors.
4549	Compact method is not implemented in etcdStore.
4550	proposeInternalRaftRequest sends an internal Raft request to the store and registers it for pending requests.
4551	applyCompare compares values in etcd using specified criteria and returns revision number and boolean indicating success.
4552	Descriptions returns a slice of PeerDescription structs containing details about each peer in the Peers set.
4553	OnGC adds a callback to the peers' GC notification list.
4554	OnInvalidateShortIDs appends a callback to peers' invalidation list.
4555	chooseShortID selects an available short ID for peers or returns false if none are available.
4556	fetchWithDefault retrieves a peer by name, increments its reference count, and adds it to the cache if not already present.
4557	Fetch retrieves the peer by name.
4558	fetchAndAddRef locks peers, retrieves a peer by name, increments localRefCount if peer exists, then returns the peer.
4559	FetchByShortID retrieves a peer using its short ID.
4560	GarbageCollect locks Peers, performs garbage collection, then unlocks and notifies pending notifications.
4561	newRoutes initializes a routes manager with channels for recalculating, waiting, and actions.
4562	OnChange registers a callback function to be executed when routes change.
4563	Unicast retrieves the next hop for a given peer name, returning it along with a boolean indicating if the peer was found.
4564	UnicastAll retrieves the next hop for a given peer.
4565	Broadcast retrieves or calculates peer names for broadcasting.
4566	BroadcastAll returns all peers reachable via the given route name.
4567	NewPeer creates a new peer instance with given name, UID, and logger.
4568	Register updates the Peer's gossip field asynchronously.
4569	ReadFrom reads data from the peer's receive channel, copying it into b and setting remote address. Returns the number of bytes read, remote address, and any error encountered.
4570	WriteTo sends data to a peer using gossip unicast.
4571	LocalAddr returns the local address of the peer using its name and UID.
4572	OnGossip processes gossip buffer and returns a single packet.
4573	OnGossipBroadcast handles gossip broadcasts by decoding packets and sending them to a receive channel.
4574	OnGossipUnicast processes unicast gossip messages.
4575	NewDefaultServer initializes a default mesh server with specified configurations and starts it.
4576	PeerNameFromUserInput converts user input to a fixed-length peer name using SHA-256.
4577	bytes converts a peer name to its byte representation using hexadecimal decoding.
4578	NewRouter initializes a new router with the given configuration and components.
4579	sendAllGossip sends gossips to all connected clients via their respective channels.
4580	sendAllGossipDown sends down gossip messages to all connected clients via their respective channels.
4581	broadcastTopologyUpdate broadcasts topology updates to peers.
4582	OnGossipUnicast handles unexpected topology gossip unicast messages.
4583	OnGossipBroadcast processes topology updates received via gossip and returns updated peer information.
4584	Gossip constructs and returns topology gossip data from router peers.
4585	OnGossip processes gossip updates and applies topology changes.
4586	Encode serializes topology gossip data into byte slices.
4587	newState initializes a new state object with a peer name and an empty map.
4588	Merge combines two gossip data sets.
4589	mergeReceived updates the local state with received data from peers, filtering out duplicates.
4590	mergeComplete updates the peer set and returns the new state.
4591	OnGossipBroadcast processes gossip updates and returns newSurrogateGossipData.
4592	OnGossip checks if the update is already known and stores it if not, ensuring duplicates are ignored.
4593	generateKeyPair generates a public-private key pair using the Curve25519 algorithm.
4594	formSessionKey generates a session key using Diffie-Hellman and hashes it with a secret key.
4595	newTCPCryptoState initializes a TCP crypto state with optional outbound flag.
4596	Send encodes and sends message using encoder.
4597	Send will send a message over TCP using a length prefix.
4598	Send will encrypt and send a message using the encryptedTCPSender's session key and advance the nonce.
4599	Receive decodes a message using the receiver's decoder.
4600	Receive reads a length prefix then data from TCP receiver.
4601	Receive method reads encrypted message, decrypts it using secretbox, advances state, and returns plaintext.
4602	newPeer creates a peer instance with logging and action handling.
4603	incr increments peer state and broadcasts update if sender is configured.
4604	Gossip copies peer's state and logs it.
4605	OnGossipUnicast processes a unicast gossip message from a peer, decodes it, merges the state, and logs the completion status.
4606	makeRaftPeer generates a raft peer from a network address.
4607	String returns a human-readable representation of a Peer.
4608	forEachConnectedPeer iterates over connected peers based on criteria and executes a function on each.
4609	parsePeerUID parses a peer UID from a string and returns it as a PeerUID type.
4610	Swap will swap elements i and j in a slice of peers.
4611	Implements sort.Interface and sorts list of peers by name.
4612	doIntro performs protocol negotiation and key exchange based on the connection and parameters.
4613	filterV1Features extracts safe features from the input map based on allowed protocol V1 keys.
4614	newConnectionMaker initializes a new connection maker instance for managing peer connections.
4615	connectionAborted updates the state of a target when a connection is aborted.
4616	newGossipSender initializes a new gossip sender with message creation functions, a sender interface, and channels for controlling the sender's operation.
4617	Send updates gossip data using Merge method.
4618	Broadcast sends gossip data from srcName to all peers, merging with existing data if present.
4619	Flush sends a flush request to the gossip sender and waits for the response.
4620	Sender retrieves or creates a gossip sender for a channel.
4621	Flush sends logs to all gossip senders.
4622	findMainPath retrieves the file path where the main function is defined, skipping test runners.
4623	Create generates a new channel for the given client ID.
4624	Send sends a message to a specified client.
4625	SendJSON sends a JSON-encoded value to a specified client using a given context.
4626	remapError changes "xmpp" service name to "channel" in APIError.
4627	NamespacedContext adds a namespace to the given context.
4628	protoToItem converts a Memcache protobuf response item to a Go Item.
4629	singleError extracts the first error from a MultiError if present, otherwise returns the original error.
4630	Get retrieves an item from the cache using the provided key, returning an error if the key is missing.
4631	GetMulti retrieves multiple items from memcache using the specified keys.
4632	Delete invokes DeleteMulti with a single key and returns any errors encountered.
4633	DeleteMulti deletes multiple keys from memcache.
4634	Increment updates the value associated with the given key by adding the specified delta, initializing if necessary.
4635	IncrementExisting increments a counter identified by 'key' by 'delta', returning the new value.
4636	set updates memcache items with values and policies, handling expiration and CAS conflicts.
4637	Get retrieves item using key, unmarshals it into v, and returns item.
4638	Stats retrieves memcache statistics from the server.
4639	Flush sends a flush request to memcache service.
4640	Run the function `f` in the background using the provided context and send a request to start it.
4641	List retrieves modules using a gRPC call.
4642	SetNumInstances updates number of instances in specified module and version.
4643	Versions retrieves the versions of the specified module.
4644	DefaultVersion retrieves the default version for a specified module.
4645	Start initializes and starts a module with optional version.
4646	StopModule sends a request to stop a module with optional parameters.
4647	Ancestor clones q and sets its ancestor field to ancestor, returning the modified query or an error if ancestor is nil.
4648	EventualConsistency clones Query and sets eventual consistency flag.
4649	Project clones query and sets projection fields.
4650	Distinct clones query and sets distinct flag to true.
4651	DistinctOn clones query and sets distinctOn fields to specified values.
4652	KeysOnly clones the Query instance and sets keysOnly to true.
4653	Limit sets the query limit and validates it.
4654	Offset updates the query's offset, validating it before setting.
4655	BatchSize sets the query's batch size to 'size' and validates it.
4656	Start method clones the query and sets the start cursor if valid.
4657	End method updates query's end cursor if valid.
4658	Count executes a query to determine the total number of matching entities, adjusting for offset and limit.
4659	Run executes a query and returns an iterator over the results.
4660	Next retrieves the next key and entity, loading it into dst if not keysOnly.
4661	Cursor retrieves the compiled cursor for the current iterator position.
4662	String returns a URL-safe base64 encoded string representation of the cursor.
4663	DecodeCursor decodes a cursor string into a pb.CompiledCursor object.
4664	saveEntity converts entity data to Protocol Buffers format.
4665	Namespace validates the input namespace and returns a new context with the namespace applied.
4666	typeof retrieves the type of a variable or function based on its name from configuration.
4667	dot retrieves a field or method from a type, considering embedded types.
4668	joinFunc generates a function signature from input and output parameter lists.
4669	validPropertyName checks if the property name is valid according to certain rules.
4670	getStructCodec retrieves a struct codec for a given type, ensuring thread safety with a mutex.
4671	LoadStruct loads properties into a struct.
4672	SaveStruct converts the source struct to a list of properties.
4673	ServingURL constructs a URL for serving images from Google App Engine's blobstore, optionally resizing or cropping based on provided options.
4674	DeleteServingURL deletes a serving URL for a blob key.
4675	CurrentOAuth fetches user info based on OAuth token and scopes.
4676	OAuthConsumerKey retrieves the OAuth consumer key from the server.
4677	String method formats user email or federated identity.
4678	LoginURL invokes LoginURLFederated without specifying federation details.
4679	LoginURLFederated generates a federated login URL for the given destination and identity.
4680	LogoutURL generates a logout URL for the given destination.
4681	insertContext inserts a context parameter into an AST call expression.
4682	NewClient initializes a client with a given host and HTTP client, adding necessary headers and handling URL schemes.
4683	NewContext creates a new context with overridden call, log, and app ID.
4684	NewRemoteContext creates a remote context using the given host and HTTP client.
4685	Debugf logs debug messages using internal logging at level 0.
4686	guestbookKey generates a key for accessing the default guestbook entity in the datastore.
4687	toRetryParameters converts RetryOptions to TaskQueueRetryParameters.
4688	NewPOSTTask creates a new POST task with specified path and form-encoded parameters.
4689	ParseRequestHeaders extracts task details from HTTP headers.
4690	Add submits a task to the task queue and returns the updated task.
4691	AddMulti submits multiple tasks to a task queue.
4692	Delete removes a task from a specified queue, handling errors appropriately.
4693	DeleteMulti deletes multiple tasks from a specified queue.
4694	Lease acquires tasks from a queue using a specified lease time and maximum number of tasks. If successful, it returns the leased tasks; otherwise, it returns an error.
4695	LeaseByTag acquires leases for tasks based on a tag.
4696	Purge deletes all tasks from the specified task queue or the default queue if none is given.
4697	ModifyLease updates ETA and lease time for a task in a queue.
4698	QueueStats fetches statistics for task queues by name.
4699	IsTimeoutError checks if the error indicates a timeout, either from context expiration or implementing the IsTimeout method. Returns false if error is nil.
4700	Func registers a new function with a unique key and validates its signature.
4701	Task method validates and encodes function arguments before creating a task.
4702	RequestHeaders retrieves headers from context or returns an error if not found.
4703	WithContext adds a request to the parent context.
4704	WithAPICallFunc overrides API call functionality in a given context.
4705	APICall invokes an RPC using the specified service and method.
4706	ModuleHostname retrieves the hostname for a specified module, version, and instance.
4707	AccessToken retrieves an access token with specified scopes.
4708	PublicCertificates fetches public certificates for applications.
4709	ServiceAccount retrieves the name of the service account using gRPC.
4710	SignBytes signs the given bytes using the app identity service and returns the key name and signature.
4711	fetch retrieves data from a blob store at a specified offset.
4712	seek adjusts the reader's position within its buffer.
4713	multiKeyToProto converts application keys to protocol buffer references.
4714	referenceValueToKey converts a reference value to a key.
4715	keyToReferenceValue converts a Key to a protobuf ReferenceValue with path elements.
4716	Put saves a value to the store under a specified key, handling errors appropriately.
4717	PutMulti saves multiple entities to the datastore using the provided keys and source data.
4718	Delete deletes a single key using DeleteMulti.
4719	DeleteMulti deletes multiple keys in the datastore.
4720	Run the specified command with input/output redirection and return an error if it fails.
4721	Next retrieves the next record from the query result, handling errors and offset logic recursively.
4722	protoToAppLogs converts protocol buffer log lines to application logs.
4723	protoToRecord converts a RequestLog protobuf to a Record struct.
4724	Constructs a query request using parameters and context, returning a result object encapsulating the request and any associated error.
4725	run reads logs using internal call, converts them to records, and updates request offset.
4726	Current extracts user info from HTTP headers, returning a User object or nil if neither email nor federated identity is present.
4727	IsAdmin checks if the incoming request is from an admin user based on headers. Returns true if the header indicates admin status.
4728	isErrFieldMismatch checks if the error is a datastore field mismatch error.
4729	Stat retrieves information about a blob using its key.
4730	Send sets the X-AppEngine-BlobKey header and Content-Type if not already set.
4731	UploadURL generates a URL for uploading data, optionally configuring max upload sizes and bucket.
4732	Delete invokes DeleteMulti to remove a single blob key.
4733	DeleteMulti deletes multiple blobs by key.
4734	NewReader creates a new reader for a blob key using the given context.
4735	Handle registers an HTTP handler for XMPP messages.
4736	Send sends XMPP messages to multiple recipients and checks response statuses.
4737	Invite sends an XMPP invite request from one user to another.
4738	Send sends XMPP presence updates.
4739	GetPresence checks user availability based on XMPP protocol.
4740	GetPresenceMulti fetches presence status for multiple JIDs, handling errors and mapping presence values.
4741	newStructFLS creates a new FieldLoadSaver for a given struct pointer.
4742	SaveStruct extracts fields from the given struct, ignoring metadata.
4743	Namespaces retrieves the list of all namespaces using a query.
4744	Kinds retrieves all kind keys from the database.
4745	RunInTransaction executes a function within a database transaction, retrying on concurrent access errors up to a specified number of attempts.
4746	imports checks if a file has an import statement for a specified path.
4747	importSpec searches for an import spec with the given path in the file and returns it.
4748	declImports checks if a given import path exists in the import declarations of an AST node.
4749	isPkgDot checks if the expression is a selector expression where the X part matches the given package and the Sel part matches the given name.
4750	isTopName checks if the given expression is an identifier with the specified name and no object associated.
4751	isName checks if the given expression is an identifier with the specified name.
4752	isCall checks if the expression is a call to the specified package and function.
4753	refersTo checks if node n refers to the same identifier x.
4754	isEmptyString checks if the given expression is an empty string literal.
4755	countUses counts how many times an identifier is used within a given scope.
4756	assignsTo checks if variable x is assigned within the given scope.
4757	newPkgDot constructs a package selector expression for the given position, package, and name.
4758	renameTop renames top-level identifiers in an AST from old to new.
4759	matchLen calculates the length of the longest common prefix between two strings.
4760	deleteImport removes an import statement from a Go file.
4761	rewriteImport updates import paths in an AST node.
4762	DefaultTicket initializes and returns a default ticket string based on environment and app details.
4763	flushLog attempts to send pending logs to the log service, handling any errors by rescuing them.
4764	withDeadline creates a new context with a specified deadline.
4765	KeepAlive sends a request to get socket name using gRPC.
4766	applyTransaction applies a transaction to a protocol buffer message using a setter function.
4767	analyze checks for a main package and collects import information based on given tags.
4768	buildContext constructs a new build context with default settings and additional build tags.
4769	synthesizeMain creates a unique main Go file name and adds it to a tar archive.
4770	findInGopath searches for a directory within GOPATH and returns its path or an error if not found.
4771	copyTree recursively copies files and directories from srcDir to dstDir using tar.Writer.
4772	copyFile copies the contents of a source file to a destination within a tar archive.
4773	checkMain checks if Go package contains a main function and lists app files.
4774	isMain checks if a given function declaration represents the main function.
4775	readFile checks if the specified file contains a main function and returns true if it does.
4776	initField navigates through nested fields using indices, creating pointers as needed, and returns the final field's value.
4777	loadEntity loads data from protobuf entity into a Go struct.
4778	validIndexNameOrDocID returns if the input string is a valid index name or document ID according to certain rules.
4779	Open creates a new Index instance with the specified name.
4780	Put inserts a single document into an index under a given ID. If successful, returns the inserted ID.
4781	Get retrieves the document with the specified ID and loads it into the destination.
4782	Delete invokes DeleteMulti with single ID.
4783	DeleteMulti deletes multiple documents from the index based on provided IDs.
4784	Search creates an Iterator to search the index with given query and options.
4785	fetchMore retrieves more results if there are none left.
4786	Iterator.Next retrieves the next document ID and loads data into a destination object.
4787	Facets retrieves facet results from an iterator.
4788	DefaultBucketName retrieves the default GCS bucket name using an RPC call.
4789	valid checks if Key is valid recursively.
4790	Equal checks if two keys are equivalent by comparing their kind, stringID, intID, appID, and namespace fields, recursively traversing parent pointers until both keys are exhausted or a mismatch is found.
4791	root returns the top-level key by traversing up the parent chain.
4792	marshal appends a representation of key to buffer b.
4793	String returns a human-readable representation of Key, marshaling it to a buffer first.
4794	Encode converts a Key to its base64 encoded protobuf string representation.
4795	DecodeKey decodes a base64-encoded string into a Key object.
4796	NewIncompleteKey generates a new Key with incomplete information based on the provided context, kind, and parent.
4797	NewKey creates a new Key with the specified kind, IDs, and optional parent.
4798	AllocateIDs allocates a range of IDs for a specified kind and parent, returning the low and high bounds.
4799	IsOverQuota checks if the error indicates hitting a quota limit.
4800	ClassicContextFromContext retrieves an appengine.Context from a netcontext.Context, returning an error if not found.
4801	Send sends a message using the specified context.
4802	SendToAdmins sends a message to admins using the given context.
4803	Failures returns the total number of test failures in the report.
4804	decodeFieldNumberAndTyp3 decodes a field number and type from a byte slice using uvarint and returns the values along with any errors encountered.
4805	checkTyp3 validates whether the given Typ3 matches the expected type based on reflection and field options, returning an error if they do not match.
4806	decodeTyp3 reads the first byte of typ3 data to determine its type and returns it along with the number of bytes read.
4807	NewPrefixBytes creates a PrefixBytes instance from a byte slice.
4808	getLengthStr determines the length of a type in hexadecimal or indicates it's a variable.
4809	collectImplementers_nolock populates info.Implementers with concrete types implementing info.Type.
4810	checkConflictsInPrio_nolock checks for conflicts in priority for each type info and returns an error if any type conflicts with others not in the priority list.
4811	constructConcreteType creates a concrete type value based on TypeInfo preferences.
4812	MarshalBinaryLengthPrefixedWriter serializes an object to a binary format with a length prefix and writes it to a writer.
4813	MarshalBinaryBare serializes an object using binary format.
4814	UnmarshalBinaryLengthPrefixed decodes a prefixed byte slice into a value.
4815	UnmarshalBinaryBare decodes binary data into a Go value using reflection.
4816	MustMarshalJSON panics if JSON marshaling fails.
4817	MustUnmarshalJSON deserializes JSON bytes to a Go value, panicking on error.
4818	MarshalJSONIndent marshals JSON with indentation using the specified prefix and indent.
4819	newDataReader wraps an io.Reader with a buffered reader.
4820	Read filters out Telnet control characters and sequences from input data.
4821	ListenAndServeTLS starts a TLS server on the specified address using the given certificate and key files.
4822	Produce invokes the producer function with the given context, name, and arguments, returning a handler.
4823	PromoteHandlerFunc wraps a HandlerFunc to create a new Handler with additional I/O pipes and arguments.
4824	Serve starts a server listening on the given listener and handles requests using the provided handler.
4825	Serve listens for incoming connections on a given listener and handles them using a specified handler.
4826	Fail outputs error message and usage then exits.
4827	WriteUsage generates a command-line usage message for Parser.
4828	WriteHelp outputs parser's help information to writer.
4829	MustParse creates a new parser, parses flags, and handles errors or help/version requests before returning the parser.
4830	Parse populates the given destination structures with data parsed from flags.
4831	walkFields recursively visits all fields in a struct, applying a visitor function.
4832	Parse processes command-line arguments for help, version, or further processing.
4833	setSlice populates a slice field with parsed values from a string slice.
4834	canParse checks if a type can be parsed, considering pointers and slices.
4835	isBoolean determines if a type is boolean or pointer to boolean.
4836	NewFromMap constructs a tree from a key-value map.
4837	Insert adds a value to the tree under a given string key and returns the old value if it existed.
4838	Delete removes a key from a tree and returns its value.
4839	DeletePrefix removes all nodes with keys starting with the given prefix and returns the number of deleted nodes.
4840	deletePrefix removes nodes matching a given prefix recursively.
4841	Get searches for a value in a tree using a key and returns the value and a boolean indicating success.
4842	LongestPrefix retrieves the longest matching key and value from a tree based on the input string.
4843	Minimum finds the minimum node in the tree returning its key, value, and existence status.
4844	WalkPrefix traverses Tree nodes matching given prefix and applies fn recursively.
4845	recursiveWalk applies a function to each node's leaf value recursively.
4846	ToMap converts tree to a map using Walk method.
4847	checkip determines the type of IP address and calculates its numeric representation along with an index based on configuration.
4848	readuint32 reads a little-endian 32-bit unsigned integer from a file at a specified position.
4849	readuint128 reads a 128-bit unsigned integer from a file at a given position, converting it from little-endian to big-endian format.
4850	function initializes IP2Location record with message data.
4851	Printrecord prints details of an IP2Location record.
4852	Main scales a graphic context, draws a gopher, and returns an output file name.
4853	SaveToPdfFile saves the PDF document to a file path.
4854	CubicCurveTo adds a cubic Bézier curve to the path p.
4855	ArcTo adds an arc to the path from the current point to the endpoint using center coordinates, radii, and angles.
4856	String converts path components to a human-readable format.
4857	VerticalFlip applies vertical flip transformation to the Path object.
4858	NewGlyphCache initializes a new GlyphCacheImp with a map of rune glyph mappings.
4859	Fetch retrieves a glyph from the cache, rendering it if necessary.
4860	renderGlyph generates a Glyph object containing the path and width of a rendered glyph character using the specified font.
4861	Copy creates a deep copy of a Glyph.
4862	Fill draws the glyph at position (x, y) using the GraphicContext and returns the width.
4863	Main draws a line and an ellipse on a graphic context and returns the output filename.
4864	Draw draws a line between two points using the provided graphic context.
4865	Paint renders a series of spans using vertex and color buffers.
4866	SetColor updates painter's color based on input RGBA values.
4867	NewPainter initializes a new Painter with empty vertices and colors slices.
4868	GetStringBounds calculates bounds of a string in pixels using current font settings.
4869	Recalculate scale based on font size and DPI.
4870	SetFont updates the Font field of Current in GraphicContext.
4871	ClearRect clears the rectangle area on the graphic context with a mask.
4872	drawString renders text using specified font mode and calculates width.
4873	newGroup creates a new SVG group based on drawType attributes and attaches it to the GraphicContext.
4874	newMask creates a new SVG mask with specified dimensions and attaches it to the GraphicContext.
4875	embedSvgFont adds SVG fonts to the graphic context based on the given text.
4876	TraceQuad recursively traces a Bézier quad curve using a flattening algorithm, converting it into a series of straight lines.
4877	GetFontName retrieves the formatted font name from ContextStack.
4878	NewStackGraphicContext initializes a new StackGraphicContext with default settings.
4879	NewFolderFontCache initializes a cache for fonts in a specified folder.
4880	NewSyncFolderFontCache creates a cache for fonts in the specified folder.
4881	Main draws a gopher on the graphic context and returns the output file name.
4882	NewPdf creates a new PDF document with specified orientation, unit, and size.
4883	clearRect clears a rectangular area on a graphic context with white color.
4884	NewGraphicContext creates a new GraphicContext using a PDF document and sets its DPI.
4885	Clear resets the graphic context to its initial state.
4886	GetStringBounds calculates bounds for a given string based on font metrics.
4887	CreateStringPath sets the position and draws a string path on the PDF.
4888	FillStringAt creates a path for text at position (x, y).
4889	SetStrokeColor updates stroke color on gc's stack and pdf context.
4890	SetFillColor updates fill color in graphic context.
4891	SetLineDash updates the line dash pattern in the graphic context.
4892	SetLineWidth updates LineWidth in both StackGraphicContext and pdf.
4893	Main draws "Hello World" on the graphic context and returns the output file name.
4894	Draw renders a rounded rectangle with bold italic text at specified coordinates.
4895	SaveToPngFile saves an image to a PNG file.
4896	LoadFromPngFile loads an image from a PNG file.
4897	Resource constructs a file path for resources based on the given parameters.
4898	Output constructs a file path based on the given name and extension.
4899	Main generates a PostScript image of a tiger and saves it to a file.
4900	Draw opens a PostScript file and interprets its contents using the given GraphicContext.
4901	Main draws a droid and returns an output filename.
4902	Bubble draws a bubble shape using quadratic curves on a graphic context.
4903	Dash draws a dash pattern on a graphic context.
4904	CubicCurve draws a cubic Bezier curve on the given GraphicContext.
4905	FillStroke draws a stroke on a graphic context.
4906	FillStyle draws a styled rectangle with wheels on a graphics context.
4907	PathTransform draws a scaled arc centered at (x,y) with specified dimensions.
4908	Star draws a star shape at given coordinates using GraphicContext.
4909	Draw renders various shapes and images on a graphic context.
4910	ConvertPath converts a drawing path to PDF using specified components.
4911	Main draws lines with different caps and joins, then saves the image.
4912	Draw draws a thick and thin line on a graphic context.
4913	DrawContour draws a contour path based on truetype points.
4914	Flatten converts a path into simpler components using a flattener.
4915	Clear erases the entire image area in the GraphicContext.
4916	ClearRect method sets a uniform color on a rectangular area in the graphic context's image.
4917	DrawImage applies a transformation to an image using a specified filter.
4918	Draws a gopher image within a framed area and saves it as an output file.
4919	Draw renders a PNG image within a framed area, scaling and rotating it as needed.
4920	Draw draws a droid on the given GraphicContext at position (x,y).
4921	ChecksumString32S computes checksum for a string using a seed.
4922	ChecksumString64S calculates checksum for a string using a seed.
4923	NewS32 initializes a new XXHash32 instance with a given seed and resets it.
4924	NewS64 initializes a new XXHash64 instance with the specified seed.
4925	round64 rounds up the input value to the nearest multiple of 64 using bitwise operations.
4926	Checksum32S computes a 32-bit checksum using the SipHash algorithm.
4927	Checksum64S calculates a 64-bit checksum using either a short or full algorithm based on input length.
4928	getStage retrieves current stage and functions to advance or reset it.
4929	New initializes and returns a new Glg instance with default logger configurations.
4930	Get ensures Glg instance is initialized once and returns it.
4931	SetMode updates the logger's mode and calls updateMode for each entry.
4932	SetPrefix updates the tag of the logger associated with PRINT key in Glg instance.
4933	GetCurrentMode retrieves the current mode of a logger at a given level.
4934	InitWriter resets writer for each logger in Glg.
4935	SetWriter updates logger's writer field and mode.
4936	SetLevelColor updates the color function for a specific log level.
4937	SetLevelWriter updates the writer for a given level in Glg.
4938	AddStdLevel adds a standard level to Glg with specified tag, mode, and color setting.
4939	EnableColor enables color logging for all logger levels in Glg.
4940	EnableLevelColor enables color for specified log level.
4941	DisableLevelColor disables color for specified log level in Glg instance.
4942	RawString extracts a raw string from byte data
4943	TagStringToLevel retrieves log level from tag string using map, returns 255 if not found.
4944	Println outputs values to the logger with a newline.
4945	Fatal logs a message and exits with status 1, handling errors gracefully.
4946	Fatalf logs a fatal error message, handles any errors, and then panics with an exit code of 1.
4947	isModeEnable checks if the specified mode is enabled.
4948	CaptureMetrics captures metrics from HTTP handler
4949	get retrieves a value from a data structure using a key and position, updating values along the way.
4950	Save encodes the Cedar data structure using the specified format and writes it to the output writer.
4951	SaveToFile writes Cedar data to a file specified by fileName.
4952	Load decodes data from reader based on dataType into Cedar instance.
4953	LoadFromFile reads data from a file and loads it into Cedar using Load method.
4954	Key retrieves the key for the given ID using a custom algorithm.
4955	Value retrieves the integer value associated with the given ID, following redirection rules if necessary.
4956	Delete removes a key from a data structure using a custom algorithm.
4957	Set parses and validates a version string.
4958	Compare compares two versions recursively and then uses pre-release comparison if necessary.
4959	Slice converts version numbers to a slice of integers.
4960	BumpMajor increments the Major version number and resets Minor, Patch, PreRelease, and Metadata fields.
4961	BumpMinor increments the minor version number and resets patch, pre-release, and metadata fields.
4962	BumpPatch increments the Patch version and resets PreRelease and Metadata.
4963	validateIdentifier checks if the input identifier conforms to the semver format.
4964	newStream initializes a new stream with buffered events and replay capability.
4965	addSubscriber adds a new subscriber to the stream and returns it.
4966	New creates a new Server instance with default settings.
4967	Close stops all streams and cleans up resources.
4968	CreateStream creates a new stream if it doesn't exist and returns it.
4969	RemoveStream removes a stream by ID.
4970	StreamExists returns true if a stream with the given ID exists.
4971	Publish sends an event to a stream identified by id after processing it.
4972	NewClient initializes a new HTTP client with specified URL and headers.
4973	Subscribe listens for events on a stream and processes them using a handler function.
4974	SubscribeChan subscribes to a stream and sends events to a channel.
4975	SubscribeRaw registers a handler to receive raw events.
4976	Unsubscribe sends a signal to stop listening on the event channel.
4977	NewEventStreamReader creates a reader for parsing event streams from an input stream.
4978	ReadEvent reads an event from the stream or returns EOF if no more events are available.
4979	HTTPHandler handles streaming requests, sending events to clients via Server-Sent Events (SSE).
4980	Add will append an Event to the log, setting its ID and timestamp based on current index.
4981	Replay sends events from EventLog to Subscriber after a certain event ID.
4982	readKey reads a private key from the specified path.
4983	writeKey writes an ECDSA private key to the specified path in PEM format.
4984	anyKey reads or generates a cryptographic key based on the filename.
4985	sameDir joins existing directory with new filename.
4986	printAccount prints account details to writer.
4987	tmpl executes a Go template with the provided data and writes the result to the writer.
4988	printUsage outputs the usage template to the writer.
4989	FromRequest extracts and validates the client's IP address from HTTP headers or remote address.
4990	Execute ClearParams command using cdp.
4991	Do executes a disable command using cdp.
4992	Do executes the RemoveDOMStorageItem command using the provided parameters.
4993	Do executes the command to set DOM storage item.
4994	DeliverPushMessageParams executes the push message delivery command.
4995	Do executes the dispatch sync event command with the provided parameters.
4996	Execute the InspectWorker command using the provided parameters.
4997	Do executes the command to set force update on page load.
4998	Execute SkipWaiting command using provided parameters in the context.
4999	Execute the start worker command with the provided parameters in the given context.
5000	Do executes the stop all workers command.
5001	Do stops the worker process with the specified parameters.
5002	Do executes the unregister command with the provided parameters.
5003	Execute the update registration command using the provided parameters.
5004	Execute the bind command using the provided parameters.
5005	Do executes the unbind command.
5006	Error provides details about an encountered exception including text and location.
5007	Execute release animations command with parameters.
5008	Execute SeekAnimations command using Chrome DevTools Protocol.
5009	Execute the "SetPaused" command using the provided parameters.
5010	Execute the SetPlaybackRate command using the provided parameters.
5011	Execute timing setting command using provided parameters.
5012	Execute leak detection preparation command using CDP.
5013	Do executes the JavaScript memory purge command using the Chrome DevTools Protocol.
5014	Do executes the command to suppress pressure notifications.
5015	Do executes the simulate pressure notification command using the provided parameters.
5016	WithSamplingInterval sets the SamplingInterval field p value.
5017	WithSuppressRandomness sets the SuppressRandomness field p value.
5018	Execute StartSampling command using provided parameters.
5019	Do executes the StopSampling command using the provided context.
5020	Execute ClearDeviceOrientationOverride command via cdp.
5021	Do executes the command to set device orientation override.
5022	Execute StartViolationsReport command with given parameters.
5023	Do executes the StopViolationsReport command using the cdp.Execute method.
5024	String returns a human-readable name for the modifier.
5025	WithNodeID sets the NodeID field p value.
5026	WithBackendNodeID sets the BackendNodeID field p value.
5027	WithObjectID sets the ObjectID field p value.
5028	WithFetchRelatives updates the FetchRelatives field p value.
5029	Do executes the SetTimeDomain command using the provided parameters.
5030	WithClipRect updates ClipRect field p value.
5031	Execute ReleaseSnapshot command using provided parameters.
5032	Execute ClearObjectStore command using provided parameters.
5033	Do executes the delete database command using the specified parameters.
5034	Execute delete object store entries command with parameters.
5035	WithKeyRange updates the KeyRange field of p to the provided value.
5036	Do executes the command to set the sampling interval using the provided parameters.
5037	Do executes the Start command using the CDP library.
5038	WithCallCount updates the CallCount field of p.
5039	WithDetailed sets the Detailed field p value.
5040	Execute precise coverage command using provided parameters.
5041	Execute a command to start type profiling in the given context.
5042	Do executes the stop precise coverage command using cdp.
5043	Do executes the stop type profile command.
5044	Do executes the set ignore certificate errors command with the provided parameters.
5045	Execute the AddInspectedHeapObject command with the provided parameters.
5046	Do executes the garbage collection command using cdp.
5047	WithSamplingInterval updates SamplingInterval field p value.
5048	Execute the start tracking heap objects command with the provided parameters.
5049	WithReportProgress updates ReportProgress field p value.
5050	Execute StopTrackingHeapObjects command with parameters.
5051	WithReportProgress updates the ReportProgress field of p.
5052	Do executes the TakeHeapSnapshot command using the provided parameters.
5053	WithBrowserContextID sets the BrowserContextID field p value.
5054	Do executes the GrantPermissions command with the provided parameters.
5055	WithBrowserContextID sets the BrowserContextID field p value.
5056	Execute ResetPermissions command using provided parameters.
5057	Do executes the crash command using the provided context.
5058	Do executes the crash GPU process command using cdp.
5059	WithQuery updates the Query field of GetHistogramsParams.
5060	WithTargetID sets the TargetID field p value.
5061	Do executes the set window bounds command using the provided parameters.
5062	WithImage updates the Image field of p to the given value.
5063	Execute CommandSetDockTile with the given parameters.
5064	Do executes the delete cache command using Execute method.
5065	Do executes the DeleteEntry command using the provided parameters.
5066	WithPathFilter updates PathFilter field p value.
5067	Do discards search results using the specified parameters.
5068	Execute the focus command using the provided parameters in the given context.
5069	Execute the MarkUndoableState command using the provided context.
5070	WithIncludeUserAgentShadowDOM updates the IncludeUserAgentShadowDOM field in PerformSearchParams.
5071	Do executes the redo command using the provided context.
5072	Execute RemoveAttribute command using provided parameters.
5073	Do executes the RemoveNode command using the provided parameters.
5074	Execute the request to get child nodes using the provided parameters in the given context.
5075	WithNodeID updates the NodeID field p value.
5076	WithBackendNodeID sets the BackendNodeID field p value.
5077	WithExecutionContextID sets the ExecutionContextID field p value.
5078	Do executes the command to set attribute value using the provided parameters.
5079	WithName updates the Name field p's value.
5080	Do executes the set attributes as text command with the provided parameters.
5081	Do executes the CommandSetFileInputFiles with the given parameters.
5082	Execute the SetInspectedNode command using the provided parameters.
5083	Execute the command to set node value using the provided parameters.
5084	ExecuteCommand executes the specified command with the given parameters.
5085	Execute the undo command using the Chrome DevTools Protocol.
5086	Execute the force pseudo state command with the given parameters.
5087	Execute the command to set effective property value for node.
5088	Execute the StartRuleUsageTracking command using the Chrome DevTools Protocol.
5089	Execute Close command using CDP.
5090	Execute ClearDataForOrigin command using provided parameters.
5091	Execute the command to track cache storage for origin.
5092	Execute tracks indexed DB for the given origin using Chrome DevTools Protocol.
5093	Execute the untrack cache storage for origin command using the provided parameters.
5094	Execute the UntrackIndexedDBForOrigin command with the provided parameters.
5095	Execute command to hide highlight using Chrome DevTools Protocol.
5096	Execute HighlightFrame command using Chrome DevTools Protocol.
5097	WithNodeID sets the NodeID field p value.
5098	WithBackendNodeID sets the BackendNodeID field p value.
5099	WithObjectID updates the ObjectID field p's value.
5100	WithSelector updates the Selector field of p with the given value.
5101	Execute HighlightNode command using Chrome DevTools Protocol.
5102	Execute the highlight quad command using the provided parameters.
5103	Execute the HighlightRect command using the provided parameters.
5104	WithHighlightConfig updates the HighlightConfig field p value.
5105	Execute the set inspect mode command using the provided parameters in the given context.
5106	Do executes the command to show ad highlights.
5107	WithMessage updates the Message field of p.
5108	Do executes the set paused in debugger message command.
5109	Execute the command to show or hide debug borders.
5110	Execute the command to set the FPS counter based on the parameters.
5111	Execute the CommandSetShowPaintRects command using the provided parameters.
5112	Execute the SetShowScrollBottleneckRects command using the provided parameters.
5113	ExecuteCommand executes the hit test borders command with the given parameters.
5114	Execute the viewport size set command on resize.
5115	Execute ClearBrowserCache command using Chrome DevTools Protocol.
5116	Execute ClearBrowserCookies command using Chrome DevTools Protocol.
5117	WithErrorReason updates the ErrorReason field p value.
5118	WithRawResponse updates the RawResponse field p value.
5119	WithURL updates the URL field p value.
5120	WithMethod sets the Method field p value.
5121	WithPostData updates the PostData field p value.
5122	WithHeaders updates the Headers field of p and returns it.
5123	WithAuthChallengeResponse sets the AuthChallengeResponse field p value.
5124	Execute the intercepted request using Chrome DevTools Protocol.
5125	WithURL sets the URL field p value.
5126	WithDomain updates the Domain field of p to the specified value.
5127	WithPath updates the Path field of p with the given value.
5128	Do executes the delete cookies command using the Chrome DevTools Protocol.
5129	WithConnectionType updates the ConnectionType field of p to connectionType.
5130	Do emulates network conditions using Chrome DevTools Protocol.
5131	Execute the enable command using the provided parameters in the given context.
5132	WithUrls sets the Urls field p value.
5133	Execute ReplayXHR command with given parameters.
5134	Execute the command to set blocked URLs.
5135	Do executes the bypass service worker command with the given parameters.
5136	Execute the set cache disabled command using the provided parameters in the given context.
5137	WithURL sets the URL field p value.
5138	WithDomain updates the Domain field of SetCookieParams p.
5139	WithPath updates the Path field of p to the specified value.
5140	WithSecure sets the Secure field p value.
5141	WithHTTPOnly sets the HTTPOnly field p value.
5142	WithSameSite updates the SameSite field of p to the given value and returns p.
5143	WithExpires sets the Expires field p value.
5144	Do executes the command to set cookies using the provided parameters.
5145	Execute command to set data size limits for testing.
5146	Do executes the SetExtraHTTPHeaders command using the provided parameters.
5147	Execute command to intercept requests.
5148	Do executes ClearDeviceMetricsOverride command.
5149	Execute ClearGeolocationOverride command using cdp.
5150	Execute ResetPageScaleFactor command via CDP.
5151	Do executes the set focus emulation enabled command with the given parameters.
5152	Do executes the CPU throttling rate setting command.
5153	WithColor sets the Color field p value.
5154	Execute the command to set default background color override.
5155	WithScale sets the Scale field p value.
5156	WithDontSetVisibleSize sets the DontSetVisibleSize field p value.
5157	WithScreenOrientation sets the ScreenOrientation field p value.
5158	Do executes the command to override device metrics using the provided parameters.
5159	Execute the SetScrollbarsHidden command using the provided parameters in the given context.
5160	Execute the SetDocumentCookieDisabled command using the provided parameters.
5161	Execute the command to set touch events for mouse.
5162	Execute emulated media command with given parameters.
5163	WithLatitude sets the Latitude field p value.
5164	WithLongitude updates the Longitude field of SetGeolocationOverrideParams.
5165	WithAccuracy sets the Accuracy field p value.
5166	Execute the geolocation override command with the specified parameters.
5167	Do executes the set page scale factor command using the provided parameters.
5168	Do disables script execution based on the parameters provided.
5169	WithMaxTouchPoints updates the MaxTouchPoints field of SetTouchEmulationEnabledParams.
5170	Execute touch emulation with the given parameters in the specified context.
5171	WithBudget sets the Budget field p value.
5172	WithMaxVirtualTimeTaskStarvationCount sets the MaxVirtualTimeTaskStarvationCount field p value.
5173	WithWaitForNavigation sets the WaitForNavigation field p value.
5174	WithAcceptLanguage sets the AcceptLanguage field p value.
5175	WithPlatform sets the Platform field p value.
5176	Do executes the UserAgentOverride command using the provided parameters.
5177	DispatchKeyEventParams dispatches a key event to the Chrome DevTools Protocol.
5178	Do executes the insert text command using the provided parameters.
5179	WithButtons updates the Buttons field p value.
5180	Dispatch mouse event using Chrome DevTools Protocol.
5181	Execute the dispatch touch event command with the provided parameters.
5182	Execute emulates touch from mouse event parameters.
5183	Execute the command to set ignore input events with the provided parameters.
5184	Execute pinch gesture using Chrome DevTools Protocol.
5185	WithXOverscroll updates the XOverscroll field p value.
5186	WithYOverscroll updates the YOverscroll field p's value.
5187	Do executes the SynthesizeScrollGesture command using the provided parameters.
5188	Do executes the tap gesture synthesis command with the provided parameters.
5189	Domain returns the domain part of the method type.
5190	WithDepth updates the Depth field in GetEventListenersParams.
5191	Execute RemoveDOMBreakpoint command using Chrome DevTools Protocol.
5192	WithTargetName sets the TargetName field p value.
5193	Execute the RemoveEventListenerBreakpoint command using the provided parameters.
5194	Execute RemoveInstrumentationBreakpoint command using CDP.
5195	Execute RemoveXHRBreakpoint command using cdp.
5196	Execute the SetDOMBreakpoint command using the provided parameters.
5197	Execute the command to set event listener breakpoint using provided parameters.
5198	Do executes the set instrumentation breakpoint command with the given parameters.
5199	Execute command to set XHR breakpoint with parameters.
5200	WithExecutor adds an Executor to a context.
5201	Execute runs a method using the Executor stored in the context, or returns an error if none is present.
5202	AttributeValue retrieves the value of a named attribute from a node's attributes map.
5203	xpath constructs the XPath expression for a node based on its attributes and parent relationships.
5204	String returns a human-readable string representation of the node type.
5205	Execute the CommandSetSinkToUse with the specified parameters in the given context.
5206	Do executes the StartTabMirroring command with the given parameters.
5207	Do executes the stop casting command using the provided parameters.
5208	Execute the StartObserving command with the provided parameters in the given context.
5209	Execute the stop observing command using the provided parameters.
5210	Do executes the recording command with the given parameters.
5211	Do executes ClearEvents command with parameters.
5212	WithObjectID sets the ObjectID field p value.
5213	WithArguments sets the Arguments field p value.
5214	WithExecutionContextID updates the ExecutionContextID field p value.
5215	WithObjectGroup sets the ObjectGroup field p value.
5216	Do discards console entries using Chrome DevTools Protocol.
5217	WithContextID sets the ContextID field p value.
5218	WithOwnProperties sets the OwnProperties field p value.
5219	WithGeneratePreview updates the GeneratePreview field of GetPropertiesParams.
5220	WithExecutionContextID sets the ExecutionContextID field p value.
5221	WithObjectGroup updates ObjectGroup field p value.
5222	Execute the release object command using the provided parameters.
5223	Do executes ReleaseObjectGroup command using cdp.Execute.
5224	Execute the command to run if waiting for debugger.
5225	Do executes the custom object formatter enabled command with the given parameters.
5226	Execute the command to set the maximum call stack size to capture.
5227	Do executes the terminate execution command.
5228	Execute AddBinding command using provided parameters.
5229	Execute RemoveBinding command using provided parameters.
5230	Do executes the end command.
5231	Execute the Clock Sync Marker command with the provided parameters.
5232	WithBufferUsageReportingInterval sets the BufferUsageReportingInterval field p value.
5233	WithNoDisplayUpdates updates the NoDisplayUpdates field p value.
5234	WithScreenshot sets the Screenshot field p value.
5235	Do executes the BringToFront command using the Chrome DevTools Protocol.
5236	WithClip sets the Clip field p value.
5237	WithFromSurface sets the FromSurface field p value.
5238	WithWorldName sets the WorldName field p value.
5239	WithGrantUniveralAccess sets the GrantUniveralAccess field p value.
5240	Execute the ResetNavigationHistory command using the Chrome DevTools Protocol.
5241	WithPromptText updates the PromptText field p value.
5242	Do executes the JavaScript dialog command using the Chrome DevTools Protocol.
5243	WithReferrer updates the Referrer field p value.
5244	WithTransitionType updates the TransitionType field of NavigateParams.
5245	WithFrameID updates FrameID in NavigateParams.
5246	Execute NavigateToHistoryEntry command using cdp library.
5247	WithLandscape updates the Landscape field p value.
5248	WithDisplayHeaderFooter updates the DisplayHeaderFooter field of PrintToPDFParams.
5249	WithPrintBackground sets the PrintBackground field p value.
5250	WithScale updates the Scale field of PrintToPDFParams.
5251	WithPaperWidth updates the PaperWidth field p value.
5252	WithPaperHeight updates PaperHeight in PrintToPDFParams.
5253	WithIgnoreInvalidPageRanges sets the IgnoreInvalidPageRanges field p value.
5254	WithFooterTemplate updates the FooterTemplate field of p.
5255	WithPreferCSSPageSize sets the PreferCSSPageSize field p value.
5256	WithScriptToEvaluateOnLoad sets the ScriptToEvaluateOnLoad field p value.
5257	Do executes the Reload command using the provided parameters in the given context.
5258	Execute the remove script command to evaluate on new document.
5259	Do sends a screencast frame ack command.
5260	Execute the ad-blocking setting command with the given parameters.
5261	Execute CSP bypass command using provided parameters.
5262	Execute the set font families command with the provided parameters.
5263	Execute command to set font sizes based on parameters.
5264	Execute the document content set command using the provided parameters.
5265	WithDownloadPath sets the DownloadPath field p value.
5266	Execute command to set download behavior with given parameters.
5267	Execute lifecycle events enabled command with parameters.
5268	WithFormat updates the Format field of p to the given value and returns a pointer to p.
5269	WithMaxWidth updates the MaxWidth field p value.
5270	WithMaxHeight sets the MaxHeight field p value.
5271	WithEveryNthFrame sets the EveryNthFrame field p value.
5272	Execute the StartScreencast command using the provided parameters.
5273	Do executes the stop loading command.
5274	Execute the set web lifecycle state command with parameters.
5275	Execute StopScreencast command using cdp.
5276	Execute the Produce Compilation Cache command with the given parameters.
5277	Execute the AddCompilationCache command using the provided parameters.
5278	Do executes ClearCompilationCache command using cdp.Execute.
5279	WithGroup updates the Group field of GenerateTestReportParams.
5280	Execute waits for debugger to attach.
5281	Execute ActivateTarget command with given parameters.
5282	WithBindingName updates the BindingName field p's value.
5283	Execute the DevTools protocol command with the given parameters.
5284	WithBrowserContextID sets the BrowserContextID field p value.
5285	WithSessionID updates the SessionID field p value.
5286	Do executes the DetachFromTarget command using the provided parameters.
5287	ExecuteCommand executes the dispose browser context command.
5288	WithSessionID updates the SessionID field p value.
5289	Do executes the SendMessageToTarget command using the provided parameters.
5290	Do executes the set auto attach command with the provided parameters.
5291	Do executes the SetDiscoverTargets command using the provided parameters.
5292	Execute the set remote locations command with the provided parameters.
5293	WithPatterns sets the Patterns field p value.
5294	WithHandleAuthRequests sets the HandleAuthRequests field p value.
5295	Execute the FailRequest command using the provided parameters.
5296	WithBody updates the Body field of p to the provided body string.
5297	WithResponsePhrase updates the ResponsePhrase field of p.
5298	Execute the fulfill request command with the given parameters.
5299	WithURL updates the URL field of ContinueRequestParams.
5300	WithMethod updates the Method field p value.
5301	WithPostData updates the PostData field of p.
5302	WithHeaders updates Headers field of p and returns pointer to p.
5303	Do executes the ContinueRequest command using the provided parameters.
5304	Do executes the ContinueWithAuth command using the provided parameters.
5305	Do executes the ContinueToLocation command with the provided parameters.
5306	WithIncludeCommandLineAPI updates the IncludeCommandLineAPI field in EvaluateOnCallFrameParams.
5307	Execute Pause command using Chrome DevTools Protocol.
5308	Execute PauseOnAsyncCall command using CDP.
5309	Execute the remove breakpoint command using the provided parameters in the given context.
5310	Execute the resume command using the provided context.
5311	Do executes the set async call stack depth command with the given parameters.
5312	Execute command to set blackbox patterns using provided parameters.
5313	Execute command to set blackboxed ranges with given parameters.
5314	WithURL sets the URL field p value.
5315	WithURLRegex sets the URLRegex field p value.
5316	WithScriptHash updates the ScriptHash field of SetBreakpointByURLParams.
5317	WithColumnNumber updates the ColumnNumber field p value.
5318	WithCondition updates the Condition field of p to the given value.
5319	Execute the set breakpoints active command with the given parameters.
5320	Do executes the set pause on exceptions command with the given parameters.
5321	Do executes a command to set return value using the provided parameters in the context.
5322	WithDryRun sets the DryRun field p value.
5323	Do executes the command to skip all pauses with the provided parameters.
5324	Do executes the command to set variable values using the provided parameters.
5325	WithBreakOnAsyncCall updates the BreakOnAsyncCall field p value.
5326	Execute StepInto command using Chrome DevTools Protocol.
5327	Execute StepOut command using Chrome DevTools Protocol.
5328	Do executes the step-over command via CDP.
5329	Listen calls the ListenF function if it's not nil.
5330	ListenClose is part of the NotifyBundle struct.
5331	Connected invokes the ConnectedF callback if not nil
5332	Disconnected triggers a callback if set.
5333	OpenedStream calls the OpenedStreamF callback if it's not nil.
5334	ClosedStream calls ClosedStreamF if it's not nil.
5335	WithNoDial adds a value to a context indicating no dialing is needed for a given reason.
5336	GetNoDial retrieves whether no dialing is enabled and the reason if applicable.
5337	WithDialPeerTimeout adds a dial peer timeout value to the given context.
5338	Open opens a connection using the underlying driver and wraps it based on its capabilities.
5339	Prevpos calculates the previous position in a fixed-size ring buffer, handling edge cases like invalid indices or empty buffers.
5340	Last returns the index of the last readable item or -1 if empty.
5341	DeleteMostRecentBytes reduces the readable count by 'n' bytes in FixedSizeRingBuf.
5342	NewFloat64RingBuf creates a new ring buffer for float64 values.
5343	TwoContig splits ring buffer data into two contiguous slices based on readable extent.
5344	Earliest retrieves the earliest value from the ring buffer.
5345	Values concatenates two contiguous slices of float64 values from a ring buffer.
5346	NewAtomicFixedSizeRingBuf initializes a ring buffer with fixed-size slices.
5347	Reset clears the buffer's state.
5348	NewPointerRingBuf creates a new ring buffer with the specified number of elements.
5349	TwoContig returns two contiguous slices from a ring buffer.
5350	NumPage returns the total number of pages in the document.
5351	Font retrieves the specified font resource from the page's resources.
5352	Width returns the width of a character in a font.
5353	Encoder determines the text encoding based on font properties.
5354	Interpret executes a stream of operations on a stack using a custom parser.
5355	Open opens a file and returns a Reader or an error.
5356	NewReader creates a new reader for the given file and size, delegating to NewReaderEncrypted with no encryption key.
5357	NewReaderEncrypted creates a new encrypted PDF reader from the given source, size, and password function, validating headers and trailers.
5358	Trailer returns the trailer data associated with the Reader.
5359	Kind determines the type of the Value.
5360	newBuffer creates a buffer for reading from a reader at a specified offset.
5361	Paginate limits the number of records returned based on perPage and page parameters.
5362	CascadeDelete recursively deletes referenced documents based on the given configuration.
5363	cascadeDeleteWithConfig updates or removes documents based on relation type and configuration.
5364	cascadeSaveWithConfig updates documents based on relation type and configuration.
5365	MapFromCascadeProperties constructs a nested map from cascade properties and a document.
5366	Connect establishes a MongoDB connection using the provided configuration or URL.
5367	lowerInitial converts the first character of the input string to lowercase.
5368	Find constructs a ResultSet based on a query for a collection.
5369	RawInformationQuery sends an XML IQ query and returns the ID.
5370	NewClient establishes a secure connection to a server using TLS or plain text based on configuration.
5371	Close closes the client connection if it exists.
5372	startTLSIfRequired initiates TLS connection if required and updates the stream features accordingly.
5373	startStream initiates XML stream with server and decodes features.
5374	IsEncrypted checks if the client connection is encrypted using TLS.
5375	Recv processes incoming XMPP stanzas and returns them as structured data.
5376	Send constructs and sends an XML message stanza over a connection.
5377	SendOrg sends an organization name over a connection.
5378	SendKeepAlive sends a keep-alive message over the client's connection.
5379	SendHtml sends HTML formatted message through connection.
5380	nextStart retrieves the next start element from the XML decoder.
5381	JoinProtectedMUC sends a presence request to join a protected MUC room with optional history settings.
5382	LeaveMUC sends an unavailable presence message to the specified JID.
5383	AttachBuffer attaches a buffer to a message as an attachment.
5384	Attach attaches a file to the message.
5385	Inline attaches a file inline.
5386	AddHeader appends a new header to the message and returns it.
5387	Tolist combines To, Cc, and Bcc into a single list.
5388	Bytes returns the message as a byte slice.
5389	Send sends an email using the given SMTP server address, authentication, message source, recipient list, and message body.
5390	GetHeader retrieves the header value by name.
5391	GetHeaderValues returns all decoded values associated with a given header name. If no header exists, it returns an empty slice.
5392	SetHeader updates envelope's header with UTF-8 encoded values.
5393	AddHeader adds a header to the envelope with UTF-8 encoded value.
5394	DeleteHeader removes a header from the envelope.
5395	AddressList retrieves the email addresses from the envelope's header based on the given key.
5396	Clone creates a deep copy of the envelope.
5397	ReadEnvelope reads MIME parts from a reader and converts them into an envelope.
5398	EnvelopeFromPart constructs an envelope from a part, handling multipart, binary, and text bodies.
5399	parseTextOnlyBody parses the content of a part into either plain text or HTML, handling character sets and conversions accordingly.
5400	parseMultiPartBody parses a multipart body and extracts text, HTML, attachments, inlines, and other parts into an Envelope.
5401	matchHTMLBodyPart checks if the part is an HTML body part without attachment disposition.
5402	ensureCommaDelimitedAddresses normalizes whitespace in email addresses while respecting quoted strings and domain boundaries.
5403	Date sets the date field p value.
5404	From sets the from field to a new mail address.
5405	Subject sets the mail's subject.
5406	To adds a recipient to the email being built.
5407	ToAddrs sets the recipient addresses in the mail builder.
5408	CC appends a new email address to the cc list in the MailBuilder.
5409	CCAddrs adds email addresses to the cc field of MailBuilder.
5410	ReplyTo sets the replyTo field to a new mail address.
5411	Header adds a name-value pair to the mail's header.
5412	AddAttachment adds a new attachment to the mail builder.
5413	AddFileAttachment attaches a file from the given path to the mail builder.
5414	AddInline adds an inline part to the mail builder.
5415	Equals checks if two mail builders are equal using reflection.
5416	Encode serializes Part to writer.
5417	encodeHeader serializes part header fields to the buffer with proper encoding and formatting.
5418	encodeContent encodes part content using specified transfer encoding.
5419	selectTransferEncoding determines the most suitable transfer encoding based on the content's binary characteristics and whether to quote line breaks.
5420	setParameterValue updates a map's key with a non-empty value.
5421	NewBase64Cleaner creates a new Base64Cleaner to read from an io.Reader while collecting errors.
5422	decodeToUTF8Base64Header converts header values to UTF-8 base64 encoding.
5423	parseMediaType extracts media type and parameters from content type string, handling various formatting issues.
5424	fixMangledMediaType fixes a malformed media type by ensuring each parameter is correctly formatted and removing duplicates or invalid parameters.
5425	detectMultipartMessage checks if a message has a multipart content type, considering only multipart/mixed types valid.
5426	detectBinaryBody checks if the body is binary based on headers and content type.
5427	BreadthMatchFirst searches for a part matching the given matcher using a breadth-first search approach.
5428	BreadthMatchAll finds all parts matching the given matcher using a breadth-first search approach.
5429	DepthMatchFirst traverses the tree depth-first using a matcher to find a match.
5430	DepthMatchAll recursively finds all parts matching the given matcher.
5431	ToASCII normalizes a string to ASCII by removing non-spacing marks and mapping Latin special characters.
5432	NewPart creates a new Part with the given content type.
5433	AddChild appends or replaces child part in the Part hierarchy.
5434	TextContent checks if part content type is text or multipart.
5435	setupHeaders reads the header from a reader, sets the ContentType, and processes additional content-related headers.
5436	setupContentHeaders sets up content headers based on media parameters and HTTP headers.
5437	convertFromDetectedCharset detects and applies the correct character encoding to the input reader.
5438	Clone creates a deep copy of a Part, copying its children recursively.
5439	ReadParts reads parts of a message from the input reader, handling both multipart and single-part content types.
5440	parseParts recursively parses MIME parts from a reader, handling headers, boundaries, and content decoding.
5441	UUID generates a version 4 UUID string.
5442	NewQPCleaner creates a QPCleaner using the provided reader.
5443	Error returns the formatted error message with severity.
5444	addError appends an Error with the given name and formatted detail to Part's Errors slice.
5445	addWarning appends a warning with a formatted message to the part's errors.
5446	Wrap wraps a slice of strings into a single byte slice, breaking lines at max width and preserving spaces.
5447	ConvertToUTF8String converts byte slice to UTF-8 string using specified charset.
5448	JoinAddress concatenates email addresses into a single string, separated by commas.
5449	Printf formats and outputs text to markdown object.
5450	EnvelopeToMarkdown converts email envelope to markdown format.
5451	FormatPart recursively formats and prints MIME parts with indentation.
5452	newBoundaryReader creates a reader for parsing multipart messages based on a boundary string.
5453	boundaryReader reads data from its underlying reader, buffering up to the specified size and handling boundaries based on a newline prefix.
5454	Next reads the next part from the boundary, handling delimiters and terminators.
5455	Parse extracts an object from buf starting at offset.
5456	Assign assigns a value to a symbol based on its type.
5457	NewRClient initializes a new RClient without authentication.
5458	NewRClientWithAuth creates a new RClient with authentication.
5459	Register adds a custom generator for the given identifier.
5460	Fuzz mutates fields of struct pointers to random values.
5461	findFakeFunctionFor returns a fake function based on the input kind.
5462	Apply applies all given Option functions to the Options instance, returning the first error encountered.
5463	ToOption converts Options to a functional Option.
5464	waitThenClose closes channel after context is done.
5465	send attempts to send a QueryEvent through a channel, handling context cancellation.
5466	NewMovingAverage returns a new MovingAverage based on the given age parameter. If no age or AVG_METRIC_AGE is provided, it returns a SimpleEWMA. Otherwise, it returns a VariableEWMA with a decay factor calculated from the age.
5467	Set updates VariableEWMA value, increments count after warmup period.
5468	calcKeys50 generates cryptographic keys using PBKDF2 with HMAC-SHA256.
5469	getKeys retrieves encryption keys from a buffer or calculates them if not cached.
5470	checkPassword validates password against checksum and key.
5471	parseFileEncryptionRecord parses file encryption record from buffer.
5472	parseEncryptionBlock reads encryption block from buffer, verifies version and password if required.
5473	newArchive50 creates a new archive reader with the given password and buffer size.
5474	Reads data from cipherBlockReader, buffers it, and returns it until EOF or error occurs.
5475	ReadByte reads a single byte from the underlying reader, handling buffer refills and errors.
5476	newCipherBlockReader initializes a reader for block cipher operations.
5477	newAesDecryptReader creates a reader for decrypting data using AES-CBC.
5478	limitByteReader limits the number of bytes read from the given reader to n.
5479	Mode determines the file mode based on attributes and OS type.
5480	nextBlockInFile reads the next block of data from the packed file and validates its header.
5481	next advances to the next file block header, skipping any remaining data in the current block.
5482	Read reads from the packed file, handling EOF by moving to the next block until the end is reached.
5483	Read reads from the underlying reader, checks checksum if EOF occurs, and returns error if invalid checksum.
5484	Next reads the next file header from the archive, handling encryption, compression, and checksums.
5485	NewReader creates a new Reader from an input stream and a password, handling buffering and file-specific reading.
5486	OpenReader opens a volume with the specified name and password, returning a ReadCloser and any error encountered.
5487	getV3Filter parses bytecode to return a VM filter or error.
5488	init initializes the decoder with a reader and optional reset.
5489	readBlockHeader initializes decoding process based on bit flag.
5490	readCodeLengthTable updates Huffman table based on input bits and modifies code lengths accordingly.
5491	shrinkStates reduces memory usage by reorganizing state blocks.
5492	expandStates expands the state slice by allocating units and updating indices accordingly.
5493	pushByte adds a byte to the subAllocator's states and returns an offset.
5494	succByte calculates the successor byte for a given index in a subAllocator's states array.
5495	succContext retrieves the successor context based on the given index.
5496	calcAes30Params generates AES-30 key and IV using SHA-1 hash and custom parameters.
5497	parseDosTime converts a DOS timestamp into a Go time.Time object
5498	decodeName decodes a UTF-8 encoded byte slice into a UTF-16 string using specific encoding rules.
5499	readExtTimes reads extended file times from a buffer.
5500	readBlockHeader reads and validates archive header.
5501	newArchive15 creates a new archive reader with password encryption.
5502	readFilter5Data reads a variable-length integer from a bit reader.
5503	writeByte appends a byte to the window's buffer.
5504	copyBytes copies bytes from the window buffer.
5505	read reads data from a circular buffer into a byte slice, handling wrap-around and copying leftover data.
5506	queueFilter adds a new filter block to the reader's queue.
5507	processFilters applies filters to data in decodeReader until all filters are processed or an error occurs.
5508	fill populates the filter blocks queue by decoding the input stream.
5509	Reads data from a buffer, processes filters, and updates totals.
5510	readFull reads exactly len(buf) bytes from r into buf, returning an error if fewer bytes are read.
5511	findSig reads a buffer to detect the signature prefix and returns the version or an error if no signature is found.
5512	execute runs a series of VM commands until completion or max limit.
5513	newVM creates a new VM instance from memory.
5514	limitBitReader wraps a bitReader to limit its usage to 'n' bits before returning 'err'.
5515	readUint32 reads a variable-length unsigned integer from rarBitReader.
5516	step3 removes a derivational suffix from a word if present.
5517	Stem reduces a word to its base form, optionally ignoring stopwords.
5518	step6 removes accents from specific characters in a word based on certain conditions.
5519	step5 removes the last rune if any of the specified suffixes are found.
5520	step2a checks if the word ends with specific suffixes and removes them if it does.
5521	step4 removes "н" from word's end, or superlative ending, or soft sign.
5522	Stem will return the stemmed form of the input word based on the specified language and whether stop words should be removed.
5523	step1c replaces 'y' or 'Y' with 'i' in word RS if preceded by a non-vowel, except if it's the first letter.
5524	step3 applies stemming rules to a word based on its suffixes, modifying the word according to specified patterns.
5525	function checks if word is stopword using switch statement.
5526	capitalizeYUI capitalizes specific vowels in a word based on their neighbors.
5527	step2 processes word forms by removing or replacing suffixes based on rules, returning true if changes were made.
5528	step3 removes specific suffixes from a word and handles special cases based on those suffixes.
5529	step0 removes possessive suffixes from words.
5530	VnvSuffix identifies suffix start in word using vowel function. Returns position after suffix or word length.
5531	step1 removes suffixes from a word based on specific rules.
5532	step2a removes specific suffixes from a word if they meet certain conditions.
5533	removePerfectiveGerundEnding removes perfective gerund endings from a word if they follow 'а' or 'я' in RV.
5534	removeAdjectivalEnding removes adjectives and their associated participles from a given word.
5535	step2b removes specific suffixes from a word, modifying it according to certain rules.
5536	step4 will modify the word based on specific rules related to French grammar and return whether any changes were made.
5537	step5 processes words by removing specific suffixes based on conditions.
5538	Stem trims down words to their root form, excluding short and stop words.
5539	Stem reduces word to its base form, skipping short words and stops.
5540	isStopWord checks if a word is a common stop word in Norwegian.
5541	Function checks if a word is a common stop word in Swedish.
5542	New creates a SnowballWord instance from a string input.
5543	RemoveLastNRunes removes the last n runes from the word and resets R1 and R2.
5544	resetR1R2 resets R1start, R2start, RVstart to rsLen if they exceed it.
5545	slice returns a slice of runes from start to stop indices, clamping them within bounds.
5546	FitsInR1 checks if a word fits within a specific range based on its R1 start position and length.
5547	FitsInR2 checks if word fits within R2 range.
5548	FitsInRV checks if word fits within reverse vocabulary bounds.
5549	FirstPrefix checks if any of the given prefixes match the start of RS and returns the first matching prefix along with its runes.
5550	HasSuffixRunes checks if the word has a specified suffix starting from index 0 to the end.
5551	FirstSuffixIfIn checks for suffixes within specified positions and returns the first valid one along with its runes.
5552	RemoveFirstSuffixIfIn checks if any suffix exists starting at startPos and removes it if found.
5553	RemoveFirstSuffix removes the first matching suffix from the word and returns it along with its rune representation. If no suffix matches, it returns an empty string and nil.
5554	FirstSuffix finds the first matching suffix in the word.
5555	preprocess normalizes and capitalizes a word according to snowball rules, identifying and marking specific regions.
5556	step0 removes specific suffixes from a word based on certain conditions.
5557	step1b processes a word using specific rules for suffix removal and replacement.
5558	step2b removes certain suffixes from a word based on specific rules.
5559	capitalizeYs capitalizes 'y' to 'Y' in word RS if it's at the start or preceded by a lowercase vowel.
5560	uncapitalizeYs converts all uppercase 'Y' characters to lowercase 'y' in a given word.
5561	stemSpecialWord stems certain special words based on predefined cases.
5562	isShortWord determines if a word is considered short based on its R1 start position and ending syllable.
5563	step1a processes snowball stemming rules for suffixes like "sses" and "ies".
5564	Set stores a key-value pair specific to the current goroutine.
5565	Get fetches the value associated with key for the current goroutine ID; returns nil if not found.
5566	Cleanup removes data associated with the current goroutine ID.
5567	getValues retrieves the current goroutine's values safely.
5568	linkGRs stores parent data in a global map using the current goroutine ID as the key.
5569	unlinkGRs deletes the current goroutine ID from the data map while holding the lock.
5570	AppUri constructs the URI for the given app name and path using the provided configuration.
5571	CurlAppWithTimeout executes an app curl with a specified timeout.
5572	CurlApp invokes the AppCurler to execute a curl command for the specified application.
5573	CurlAppRoot fetches the root URL of the specified application using the given configuration.
5574	GetTags extracts tags from a string based on a prefix and optional terminators.
5575	GetTagsAsUniqueStrings extracts unique tags from a string using a prefix and optional terminator.
5576	isTerminator checks if the character is a terminator or whitespace/non-printable.
5577	uniquify removes duplicates from a list of strings and returns the unique elements.
5578	New returns a Gin middleware that applies location settings to HTTP requests.
5579	Get retrieves the url.URL stored under key in gin.Context. Returns nil if not found or type assertion fails.
5580	GenerateRSAKeyPair generates RSA private and public keys with the given bit size using the provided source reader. If the bit size is less than 512, it returns an error.
5581	Verify checks RSA signature validity using PKCS#1 v1.5 padding.
5582	Encrypt uses RSA PKCS1v15 encryption to encrypt the data.
5583	Sign signs the message using RSA PKCS1v15 with SHA256.
5584	GetPublic retrieves the public key from the RSA private key, initializing it if necessary.
5585	Decrypt uses RSA PKCS1v15 to decrypt data.
5586	UnmarshalRsaPrivateKey parses PKCS#1 private key bytes into RSA private key struct.
5587	GenerateKeyPair generates a private/public key pair using the specified type and bit size.
5588	GenerateKeyPairWithReader generates a private/public key pair based on the specified type and source reader.
5589	GenerateEKeyPair generates an elliptic curve key pair and returns a public key and a function to compute the shared secret.
5590	UnmarshalPublicKey converts protocol buffer data to a public key.
5591	MarshalPublicKey converts public key to protobuf format.
5592	UnmarshalPrivateKey parses private key data using Protocol Buffers and returns the corresponding PrivateKey object.
5593	MarshalPrivateKey converts a private key to a protobuf message and marshals it to bytes.
5594	KeyEqual checks if two keys are equal by comparing their byte representations and errors.
5595	GenerateECDSAKeyPair generates a key pair using a specified curve.
5596	GenerateECDSAKeyPairWithCurve creates an ECDSA key pair using the specified curve and source reader.
5597	ECDSAKeyPairFromKey extracts a private and public key pair from an ecdsa.PrivateKey.
5598	UnmarshalECDSAPrivateKey parses ECDSA private key from DER format.
5599	UnmarshalECDSAPublicKey parses ECDSA public key from PKIX data.
5600	Equals checks if two ECDSA private keys are equal by comparing their D values.
5601	Sign hashes the data and uses ECDSA to sign it, returning the signature in ASN.1 format.
5602	Equals checks if two ECDSA public keys are equal based on their X and Y coordinates.
5603	Verify checks ECDSA signature validity.
5604	GenerateSecp256k1Key generates a secp256k1 private and public key from a source reader.
5605	UnmarshalSecp256k1PrivateKey deserializes secp256k1 private key.
5606	UnmarshalSecp256k1PublicKey parses secp256k1 public key data.
5607	Equals checks if two Secp256k1 private keys are equal.
5608	Sign computes a signature for data using secp256k1 private key.
5609	Equals checks if two Secp256k1 public keys are equal.
5610	Verify checks if the signature matches the data using secp256k1 public key.
5611	Raw returns the raw bytes of the Ed25519 private key.
5612	Sign uses Ed25519 to sign a message.
5613	Equals checks if two Ed25519 public keys are equal.
5614	Verify checks the signature of data using Ed25519 public key.
5615	UnmarshalEd25519PublicKey deserializes ed25519 public key data.
5616	UnmarshalEd25519PrivateKey parses raw ed25519 private key data.
5617	EditScriptForStrings computes the edit script between two strings using specified options.
5618	EditScriptForMatrix generates an edit script for transforming one matrix to another using specified operations.
5619	WriteMatrix prints a formatted matrix to the given writer using source and target runes.
5620	New creates a new Lockfile instance from an absolute path, returning an error if the path is not absolute.
5621	GetOwner reads a lockfile to find its owner process.
5622	TryLock attempts to acquire a lock on a file using a temporary file and checks ownership.
5623	Unlock releases ownership of a lockfile if the current process owns it.
5624	NewBase initializes a new Base instance with optional configurations applied.
5625	SetFallbackLogger updates or shuts down the fallback logger.
5626	AddLogger manages loggers based on initialization state and hooks.
5627	LogWithTime logs messages with timestamps and optional attributes, handling initialization and hooks.
5628	Log records a message at a specified level with attributes.
5629	Warnm calls Warningm on Base with given message and arguments.
5630	NewTemplateWithFuncMap generates a Template with different LogLevel-specific FuncMaps.
5631	Execute runs the template at the given level and returns the rendered string.
5632	NewTemplateMsg creates a new template message with attributes.
5633	NewLogAdapterFor returns a new LogAdapter with the given base logger and attributes. If no attributes are provided, it uses default attributes.
5634	SetAttr sets the attribute key to value in la.attrs.
5635	LogWithTime processes logs with timestamps and attributes, filtering based on log levels.
5636	Log method merges attributes before calling base logger.
5637	Dbgm calls Debugm to log a message with attributes.
5638	NewAttrsFromMap creates a new Attrs object from a map of attributes.
5639	NewAttrsFromAttrs combines multiple Attrs objects into a single Attrs object.
5640	MergeAttrs merges another Attrs object's attributes into the current one.
5641	SetAttr updates the attribute value for a given key, handling functions by storing their type instead.
5642	GetAttr retrieves the attribute value for the given key using a read lock.
5643	RemoveAttr removes the attribute with the given key from the Attrs struct.
5644	Attrs returns the attributes using their keys.
5645	Debugm logs debug message using current default logger.
5646	Infom logs a message with attributes using a default logger.
5647	Warningm calls curDefault.Warningm to log a warning message.
5648	Errm returns an error using the provided message format and arguments.
5649	Errorm formats and returns an error using the current default implementation.
5650	Fatalm logs a fatal error message using curDefault's logging method.
5651	Dief exits the program with the given exit code after logging the message.
5652	Diem logs an error message with a given exit code and attributes.
5653	ToLogLevel converts a log level string to its corresponding LogLevel enum value.
5654	CallErr executes a function returning an error safely using a call queue and error channel.
5655	New constructs a StackdriverHook using provided options; validates required fields; sets defaults; returns hook or error.
5656	Fire logs an entry using Stackdriver's API or agent based on availability.
5657	Levels sets logrus levels for StackdriverHook.
5658	ProjectID sets the projectID field of StackdriverHook.
5659	EntriesService sets the EntriesService option for StackdriverHook.
5660	LoggingService sets the StackdriverHook's service to the logging entries.
5661	ErrorService sets the errorService field sh value.
5662	HTTPClient configures StackdriverHook with logging and error reporting services.
5663	MonitoredResource sets the monitored resource for StackdriverHook.
5664	ErrorReportingLogName sets the errorReportingLogName field of sh to name.
5665	Labels sets the labels field on a StackdriverHook instance.
5666	PartialSuccess sets the partialSuccess field sh value.
5667	GoogleComputeCredentials sets up OAuth2 credentials using a service account's metadata scopes.
5668	NewEncoder initializes and returns an Encoder using a custom Emitter from the Codec.
5669	NewDecoder creates a Decoder from a given io.Reader using the codec's parser.
5670	NewStreamEncoder creates a new stream encoder using the provided writer and codec's emitter.
5671	Codec's NewStreamDecoder creates and returns a StreamDecoder using its parser on the given reader.
5672	Register adds a new codec to the registry for a given mimetype.
5673	Registry.Unregister removes a codec for the given MIME type.
5674	Lookup retrieves codec for given mimetype from Registry using mutex lock.
5675	Codecs returns the codecs registered in the registry.
5676	Type extracts the type part from an error message.
5677	Install registers an adapter for type conversion, ensuring non-nil encode/decode functions and clearing the struct cache afterward.
5678	AdapterOf retrieves an adapter for a given type from a store.
5679	AppendDuration appends a human-readable representation of a time.Duration to a byte slice.
5680	fmtInt converts a number to a string using provided buffer.
5681	NewDecoder creates a decoder from an input reader using an internal parser.
5682	NewStreamDecoder creates a new stream decoder using the given reader.
5683	Unmarshal decodes JSON-encoded byte slice b to value pointed to by v using objconv package.
5684	String method converts type to its string representation.
5685	zeroValueOf retrieves or caches the zero value for a given type.
5686	NewValueParser returns a new ValueParser instance with initial value.
5687	ParseTag parses a tag string and returns a structured Tag object.
5688	NewEncoder initializes and returns an object conversion encoder for the given writer.
5689	NewStreamEncoder initializes and returns a StreamEncoder for writing objects to an io.Writer.
5690	NewPrettyEncoder initializes and returns a pretty-printing encoder for the given writer.
5691	NewPrettyStreamEncoder creates a new stream encoder that outputs pretty-printed data to the specified writer.
5692	Marshal serializes an object v into a byte slice b.
5693	NewEncoder creates a new encoder with the given emitter, panicking if it's nil.
5694	EncodeArray encodes array values using emitter.
5695	EncodeMap encodes a map using the specified number of elements or until the end marker is encountered.
5696	NewStreamEncoder validates and returns a new StreamEncoder with the given Emitter.
5697	Open opens the encoder for writing arrays.
5698	Close closes the encoder, emitting array end if not oneshot.
5699	Encode encodes value v to stream with checks on count and emits array next if not one-shot.
5700	newStructType constructs a structType from a reflect.Type, caching results in a map. It skips anonymous and non-exported fields, adding others to the structType's fields slice and mapping them by name.
5701	lookup retrieves or creates a struct type entry in the cache.
5702	clear empties the struct type cache.
5703	CheckUint64Bounds checks if v exceeds max and returns an error if so, indicating overflow for type t.
5704	CheckInt64Bounds checks if v is within the inclusive min and exclusive max bounds for type t, returning an error if out of range.
5705	NewDecoder creates a new Decoder instance using the provided Parser, panicking if it's nil.
5706	Decode function decodes data into Go value using reflection.
5707	DecodeArray decodes array values using a given function.
5708	DecodeMap decodes a map using a given decoding function.
5709	NewStreamDecoder creates a new StreamDecoder using the given parser, panicking if the parser is nil.
5710	Len returns the number of unread bytes in StreamDecoder.
5711	Err returns the error from StreamDecoder, or nil if it's at the end.
5712	Decode reads from stream and decodes values, handling array parsing and counting.
5713	Encoder creates a new StreamEncoder based on parsed type.
5714	init sets default logging flags based on environment variable LOGFLAGS.
5715	LevelFromString converts a string to a log level.
5716	NewBackend initializes a Backend with writer and optional options.
5717	callsite retrieves the caller's file and line number based on the provided flag.
5718	print logs messages with timestamps, levels, tags, and optional file/line information.
5719	Logger creates a new logger instance for a subsystem.
5720	Trace logs messages at the trace level if enabled.
5721	Tracef logs a trace message if the level allows it.
5722	Debug logs debug-level messages if enabled.
5723	Debugf logs debug messages if the level allows it.
5724	Info logs informational messages if the level is set to Info or lower.
5725	Infof logs informational messages if the level allows.
5726	Warn logs warning messages if the current level allows it.
5727	Warnf logs warnings at or above warning level.
5728	Error logs messages at or above the error level.
5729	Errorf logs error messages if the log level is at or above Error.
5730	Critical logs messages at critical level or higher.
5731	Criticalf logs critical messages if the current level allows it.
5732	Level returns the current logging level of the slog instance.
5733	SetLevel updates the log level atomically.
5734	Concat combines two permissions into a new permission with combined denied and allowed roles.
5735	HasPermission checks if the given roles have the required permissions.
5736	ConcatPermissioner combines multiple Permissioner instances into a single one.
5737	HasPermission checks if all permissioners have the specified permission mode for the given roles.
5738	Register defines a new role or overwrites an existing one.
5739	NewPermission creates a new permission instance with default allowed and denied roles.
5740	Get checks if Checker definition exists for given name. Returns Checker and existence flag.
5741	isPtrFromHeap checks if the given address points to data on the heap.
5742	IsPtr determines if the given address points to a valid memory location within the process's heap or modules.
5743	FindObject retrieves an object from the process's heap based on its address, returning the object and its size if it's valid.
5744	ForEachObject applies a function to each object in the process's memory pages.
5745	ForEachRoot applies a function to each root, stopping if false is returned.
5746	Addr converts an Object to a core.Address.
5747	Size retrieves the size of an object in the process's heap.
5748	Type retrieves the type and rank of an object from the process's type heap.
5749	ForEachRootPtr applies a function to each root pointer in a process.
5750	edges1 traverses data structures to find pointers and applies a function to them.
5751	setHeapPtr updates the heap pointer for a process.
5752	findHeapInfo retrieves heap info for a given address by calculating indices and accessing the page table.
5753	allocHeapInfo calculates the heap info for a given address.
5754	construct the runtime name based on the DWARF type information
5755	readRuntimeConstants reads runtime constants from Go's DWARF records and updates the process' rtConstants map.
5756	add appends a new entry with min, max, and f to funcTab's entries list.
5757	sort will order the entries in funcTab based on their minimum value.
5758	find searches for a function entry based on program counter address.
5759	read decodes variable-length integers to populate a table entry with program counter values.
5760	readVarint reads a variable-length integer from memory at address 'a' using process 'core'. It returns the decoded integer value and the number of bytes read.
5761	useLine constructs the usage line for a cobra command, including parent commands and optional flags.
5762	commandPath recursively builds a command path from nested Cobra commands.
5763	readCore reads and processes core files to create Go and Core process objects.
5764	typeName determines the type name of an object based on its size and repetition count.
5765	fieldName constructs a field name based on process, object, and offset.
5766	typeFieldName returns the field name based on type and offset.
5767	FindFunc retrieves the function at the given address from the process's function table.
5768	Core initializes a Process object by reading DWARF and runtime information.
5769	Region's Address method retrieves a pointer's address safely, ensuring it's a pointer type before accessing its address.
5770	Int reads an integer from a region if it's valid
5771	Uintptr returns a uintptr value from memory address.
5772	Cast creates a new region with the specified type.
5773	Deref returns the value pointed to by a pointer region. If the region is not a pointer or points to an unsafe.Pointer, it panics.
5774	Uint64 reads a 64-bit unsigned integer from region
5775	Uint32 reads a 4-byte unsigned integer from region
5776	Int32 returns an int32 value after validating type
5777	Uint16 reads a uint16 value from region r.
5778	Uint8 reads an 8-bit unsigned integer from the region
5779	String method converts region to human-readable format.
5780	SlicePtr converts a slice type to a pointer type.
5781	SliceLen returns the length of a slice region.
5782	Field retrieves the specified field from a region and updates its offset.
5783	ReadUint8 retrieves an 8-bit unsigned integer from a process's memory at a specified address.
5784	ReadUint16 reads a 16-bit unsigned integer from the process's memory at the given address.
5785	ReadUint32 retrieves a 32-bit unsigned integer from the process's memory at the specified address, handling endianness and mapping resolution.
5786	ReadUint64 reads a 64-bit unsigned integer from the process's memory at the specified address.
5787	ReadInt8 converts uint8 to int8 from memory address.
5788	ReadInt16 reads a 16-bit integer from memory address a.
5789	ReadInt32 reads a 32-bit integer from memory at the specified address.
5790	ReadInt64 converts a uint64 read from address a to int64.
5791	ReadUintptr reads a uintptr value from the process's memory at the given address, handling both 32-bit and 64-bit architectures.
5792	ReadPtr reads an address value from memory at the specified location.
5793	ReadCString reads a null-terminated C string from a given address.
5794	Source returns the name and offset of the mapping's source file.
5795	findMapping retrieves a mapping from a nested page table based on an address.
5796	Max returns the larger of two addresses.
5797	Returns the smaller of two addresses.
5798	Align will adjust the address to the nearest multiple of x.
5799	initializes the data structure by building a spanning tree and mapping objects to vertices
5800	calculate computes the immediate dominator tree for vertices in a directed graph.
5801	eval finds the label of the node by compressing its path.
5802	compress reduces the DOM tree by collapsing nodes based on their ancestor relationships and semicolon values.
5803	link sets ancestor of vertex w to v in ltDom.
5804	reverses dominator tree by swapping in and out edges
5805	calcSize calculates the total size of objects reachable from a process using dominator tree traversal.
5806	objField constructs a field name based on object offset and type information.
5807	Readable checks if a process has a mapping for a given address.
5808	ReadableN checks if 'n' bytes starting at 'a' can be read from process 'p'.
5809	splitMappingsAt splits memory mappings at a given address, creating a new mapping if necessary.
5810	DynamicType returns the dynamic type of an interface value.
5811	Create initializes a Btrfs filesystem image and mounts it.
5812	Resolve extracts IP address from URL's host.
5813	Equal checks if two tokens are equivalent based on their type and value.
5814	newDefaultClassifier initializes a new token classifier with predefined rune classes.
5815	Lexer.Next returns the next word token or skips comments, returning an error on unknown token types.
5816	NewTokenizer creates a Tokenizer from an input reader with a default classifier.
5817	Split reads a string using a lexer and returns a slice of substrings. If an error occurs, it returns an empty slice and the error. If the end of the file is reached, it returns the slice of substrings and no error.
5818	Between extracts substring between specified delimiters. Returns empty string if not found or invalid.
5819	BetweenF creates a closure that checks if a string is between two given strings.
5820	Camelize converts string to camel case using regex.
5821	Capitalize capitalizes the first letter and lowercases the rest.
5822	CharAt returns the character at the specified index of the string or an empty string if out of bounds.
5823	CharAtF returns a closure that retrieves a character at a specified index from a given string.
5824	ChompLeft removes a given prefix from a string if it exists.
5825	ChompLeftF creates a closure that removes a specified prefix from a string.
5826	ChompRight removes a specified suffix from the right end of a string if it exists.
5827	ChompRightF generates a function that removes a specified suffix from a string.
5828	ClassifyF creates a closure that applies Classify to its argument.
5829	Clean removes extra spaces from start/end of input string.
5830	Dasherize converts a string to dash-separated format.
5831	EscapeHTML escapes HTML special characters in a string, optionally logging a warning.
5832	DecodeHTMLEntities decodes HTML entities in a string
5833	EnsurePrefixF creates a closure that ensures a given string has a specified prefix.
5834	EnsureSuffixF creates a closure that ensures a given string ends with a specified suffix.
5835	Humanize converts a string to a more readable format by replacing underscores with spaces, removing trailing '_id', and capitalizing the first letter.
5836	Iif returns truthy if condition is true, otherwise returns falsey.
5837	IndexOf finds the position of a substring within a string, starting from a specified index.
5838	IsLower checks if the string contains only lowercase alphabetic characters.
5839	IsUpper checks if the string contains only uppercase alphabetic characters.
5840	Left returns the leftmost n characters of the string, or the rightmost n characters if n is negative.
5841	LeftF returns a function that trims the left side of a string to a specified length.
5842	Letters converts a string into a slice of its individual characters.
5843	Lines splits input string s into lines, normalizing CRLF to LF.
5844	Map applies a transformation to each element in the input array using the provided iterator function and returns the transformed array.
5845	Match uses regular expression to check if s matches pattern.
5846	tasks defines project tasks for Go projects including install, lint, readme, and test.
5847	Pad pads the input string with the specified character until it reaches the desired length.
5848	PadF creates a new function that pads strings with a given character to a specified length.
5849	PadLeft pads a string with a specified character on the left to reach a minimum length.
5850	PadLeftF returns a function that pads a string with a character on the left to a specified length.
5851	PadRightF returns a function that pads strings on the right with a specified character until they reach a given length.
5852	Pipe applies a series of functions to a string sequentially.
5853	QuoteItems applies strconv.Quote to each element of arr
5854	ReplaceF creates a closure that replaces substrings in a given string.
5855	ReplacePatternF generates a closure to replace occurrences of a pattern with a replacement in a given string.
5856	Reverse reverses the characters in the input string.
5857	RightF returns a closure that trims the right side of a string to a specified length.
5858	Slice extracts a substring from a given string based on start and end indices. If end is negative, it calculates the index from the end of the string. If both indices are out of bounds, it returns an empty string.
5859	SliceF returns a function that slices a string from start to end.
5860	SliceContains checks if a slice contains a given value.
5861	SliceIndexOf finds index of val in slice or -1 if not found.
5862	Slugify converts text to a lowercase, dash-separated slug.
5863	StripPunctuation removes punctuation from a string and normalizes whitespace.
5864	StripTags removes specified HTML tags from a string.
5865	Substr extracts a substring from a given string based on index and length.
5866	SubstrF generates a function that extracts a substring starting at 'index' with length 'n'.
5867	TemplateWithDelimiters replaces placeholders in a string with corresponding values from a map using custom delimiters.
5868	ToArgv splits a string into arguments, handling quotes and escapes.
5869	ToBool converts a string to boolean by checking if it equals "true", "yes", "on", or "1".
5870	ToBoolOr converts string to boolean or returns default if conversion fails.
5871	ToIntOr converts string to integer or returns default value on error.
5872	ToFloat32Or converts a string to a float32, returning a default value if parsing fails.
5873	ToFloat64Or converts string to float64, returning default if conversion fails.
5874	UnescapeHTML converts HTML entities back to plain text
5875	WrapHTML wraps the input string in HTML tags with attributes.
5876	WrapHTMLF creates a closure to wrap HTML content with specified tag and attributes.
5877	ReapChildren listens for child process exit signals and cleans them up using a lock to ensure safe reaping.
5878	SdNotify sends a notification message to systemd about the current service state.
5879	NewAuthenticator initializes a new Authenticator with a Store and Policy.
5880	Endpoint handles OAuth2 requests and routes them to appropriate handlers.
5881	Unique returns the unique bson.ObjectId values from the input slice.
5882	Contains checks if a list of bson.ObjectId includes a specific id.
5883	Includes checks if all elements of subset are contained within all.
5884	Require checks each flag against model m.
5885	Enqueue adds a new job to the queue with optional delay.
5886	A constructs an Authorizer using a Matcher and Handler, tracing execution.
5887	Return an Authorizer with the given Enforcers.
5888	And combines two authorizers by checking their matchers and merging their handlers.
5889	Or combines two Authorizers, returning the result of the first successful Matcher and Handler.
5890	Enqueue adds a job to a queue after copying the store.
5891	Callback creates a new callback with specified parameters and enqueues a job based on the context's store.
5892	NewWatcher initializes a new Watcher with a manager.
5893	Watcher manages streams, handling events and broadcasting updates.
5894	Action method returns a new action with a GET method and a callback that handles the connection.
5895	Write returns if operation is create, update, or delete.
5896	String returns the string representation of an operation type.
5897	Query constructs a MongoDB query using context's selector and filters.
5898	Respond encodes and sends a value as JSON using the response writer.
5899	EnsureApplication checks if an application exists, creates it if missing, and returns its key.
5900	EnsureFirstUser checks if a user exists in the database; if not, it creates a new user with the given details.
5901	Callback constructs and returns a fire.Callback based on operation type.
5902	OpenStream creates a new stream with a given store, model, token, receiver, and manager function. It opens the stream asynchronously and returns the stream object.
5903	Close method sets a flag and closes the current change stream.
5904	AddTokenIndexes adds token indexes to the indexer based on type, application, user, and optionally expires at.
5905	GetTokenData retrieves token data including type, scope, expiration, application, and user IDs.
5906	SetTokenData updates token fields with given values.
5907	ValidSecret checks if the provided secret matches the stored hash.
5908	HashSecret generates a hash from the application's secret and saves it, then clears the original secret.
5909	ValidPassword checks if the provided password matches the user's stored hash.
5910	HashPassword generates a bcrypt hash for User's password and clears it.
5911	MustCreateStore creates a Store instance from a URI or panics on failure.
5912	CreateStore initializes a new Store using the given MongoDB URI.
5913	C retrieves the MongoDB collection for a given model from the SubStore.
5914	NewAssetServer returns an http.Handler serving static files from the given directory under the specified URL path.
5915	DefaultGrantStrategy validates the given OAuth2 scope and returns an error if invalid.
5916	DefaultTokenData returns token data for the given resource owner.
5917	GenerateToken creates a JWT token using policy details and signs it with a secret.
5918	ParseToken verifies JWT token validity and extracts claims.
5919	E creates a new enforcer with the given name, matcher, and handler.
5920	MustGet retrieves the value of a specified field from the model struct, panicking if the field does not exist.
5921	MustSet updates the specified field of the model struct.
5922	NewGroup creates a new Group with initialized controllers and actions maps.
5923	Add adds multiple controllers to the group, preparing each before adding it to the map.
5924	Endpoint handles HTTP requests for a group resource, routing them to appropriate controllers or actions based on the URL path.
5925	Add creates a new index on a given model based on specified fields with options like uniqueness and expiration.
5926	Adds raw index to collection.
5927	Ensure checks and ensures the existence of all raw indexes within the given store.
5928	NewCatalog creates a new catalog containing the specified models.
5929	Add adds one or more models to the catalog, ensuring no duplicates based on plural name.
5930	All returns all models in the catalog.
5931	Visualize returns the Graphviz DOT code for visualizing the catalog's models and their relationships.
5932	NewErrorReporter outputs formatted error logs to a writer.
5933	EnsureIndexes creates and ensures the model indexes for the store.
5934	E formats an error message using fmt.Errorf and then applies Safe to it.
5935	Compose chains multiple middleware functions into a single http.Handler.
5936	Includes checks if all elements of subset are contained within all.
5937	Intersect finds the common elements between two input lists.
5938	E creates and returns an Error instance with the given reason and retry flag.
5939	RootTracer wraps an HTTP handler, traces requests, replaces IDs, and logs details.
5940	NewTracerFromRequest starts a span from HTTP request context and returns a Tracer instance.
5941	NewTracer creates a new Tracer instance with a root span and an empty spans slice.
5942	Push adds a new tracing span with the given name to the tracer.
5943	Last returns the most recent span or the root if none exist.
5944	Tag adds a tag to the last item in the tracer.
5945	Log records a key-value pair by delegating to the last tracer.
5946	Context adds the tracer's span to the given context.
5947	Pop will remove and finish the last tracer span.
5948	Finish closes all spans in tracer; if root, also close root span.
5949	NewPool initializes a task pool with maps for tasks and queues, and a channel to track closure.
5950	Add task to pool, ensuring uniqueness and updating queue.
5951	Run starts all queues and tasks in the pool.
5952	NewBodyLimiter limits HTTP request body size.
5953	LimitBody adjusts the request's body size limit using a BodyLimiter.
5954	C creates a new Callback with the given name, matcher, and handler. The handler is called within a traced context. If the handler returns an error, it is returned immediately. Otherwise, the trace is finished and nil is returned.
5955	Only creates a matcher that allows operations listed in the input.
5956	BasicAuthorizer validates HTTP basic auth credentials against provided map.
5957	ModelValidator returns a callback to validate models, ensuring they implement ValidatableModel and pass validation.
5958	TimestampValidator ensures correct handling of timestamps during model creation and updates.
5959	RelationshipValidator validates relationships between models in a catalog, excluding certain fields, and returns a callback that verifies these relationships.
5960	Inspect runs parallel workers to check secret lists.
5961	NewRule creates a new rule with the given name and match pattern, compiling the match pattern into a regular expression and initializing the rule's enabled status to false.
5962	AddUnmatch adds a new unmatch pattern to the rule.
5963	Process content to find lines matching rules while excluding those matching exceptions, returning results with line numbers.
5964	NewSecret creates a new Secret instance with specified object, rule, line number, and line content.
5965	NewObject creates a new Object with limited content length.
5966	SetMetadata updates object's metadata with key, value, and attributes; handles primary key update if needed.
5967	GetMetadata retrieves the value for a given key from Object's metadata, returning an error if the key does not exist.
5968	GetMetadataAll retrieves all metadata attributes from the object.
5969	SetRule compiles the input rule into a regular expression and assigns it to x.Rule.
5970	SetObject compiles a case-insensitive regular expression from the input object string and assigns it to x.Object.
5971	SetNline sets the Nline field x value.
5972	SetContent compiles a case-insensitive regular expression from the input content and assigns it to x's Content field.
5973	Run checks if a secret matches all specified rules and conditions.
5974	AddRule will add a rule to Seekret's rule list, enabling it if specified.
5975	LoadRulesFromFile reads rules from a YAML file and adds them to Seekret.
5976	LoadRulesFromDir loads all rule files from the specified directory.
5977	DefaultRulesPath returns the default path to the rules file, either from an environment variable or a default directory.
5978	EnableRule enables a rule by name.
5979	DisableRule disables a rule in the rule list.
5980	EnableRuleByRegexp enables a rule by its regular expression name.
5981	DisableRuleByRegexp disables rules matching a given regular expression.
5982	LoadObjects appends objects from a source to the Seekret's object list.
5983	GroupObjectsByMetadata groups objects by metadata key.
5984	GroupObjectsByPrimaryKeyHash groups objects by primary key hash using GroupObjectsByPrimaryKeyHash from models package.
5985	AddException will add a model Exception to the exceptionList of Seekret.
5986	LoadExceptionsFromFile reads exceptions from a YAML file and adds them to the Seekret instance.
5987	printPlainResults prints details of each result in plain text format.
5988	printJsonResults converts results to indented JSON and prints it to stdout.
5989	NewXor64Source initializes and returns a new Xor64Source with the given seed.
5990	xor64 applies bitwise XOR operations to a 64-bit unsigned integer with shifts and returns the result.
5991	next advances the Xor64 source and returns the new value.
5992	Seed initializes the Xor64Source with a given or default seed.
5993	NewFrameSet creates a FrameSet from a given frame range string by processing match slices and adding them to the frame set.
5994	handleMatch parses a frame match string and appends unique frames to rangePtr based on the match type and parameters.
5995	Index retrieves frame's index from FrameSet.
5996	Frame returns the integer value at the specified index or an error.
5997	HasFrame checks if a frame is within the FrameSet's range.
5998	FrameRangePadded pads frame range with specified padding and returns it as a string.
5999	Normalize returns a new FrameSet with normalized rangePtr.
6000	FramesToFrameRange converts a list of frames into a compact string representation.
6001	frameRangeMatches parses a frame range string into individual frame ranges, handling padding and commas.
6002	toRange generates a sequence of integers from start to end with a specified step.
6003	NewWorkManager initializes a work manager with options to process all files or sequences.
6004	processSources scans directories and sequences for matching file patterns, formatting and finding sequences on disk, and sending results through channels.
6005	isInputDone checks if all input directories and sequences are processed.
6006	closeInputs closes input directories and sequences safely.
6007	load processes a list of paths, separating them into directories and sequences, then distributes them to respective channels.
6008	loadRecursive recursively loads paths, skipping hidden directories and adding valid ones to channels for further processing.
6009	preparePaths processes input paths, filtering directories and detecting file sequences.
6010	PadFrameRange pads each segment in a comma-separated list of frame ranges to the specified width.
6011	zfillString pads a string with zeros on the left to reach the specified width, preserving any leading sign.
6012	zfillInt pads an integer with leading zeros to a specified width.
6013	NewInclusiveRange creates a new InclusiveRange object with calculated step.
6014	String returns a human-readable representation of InclusiveRange.
6015	End returns the cached end of the inclusive range, recalculating if necessary.
6016	Len calculates and caches the number of elements within the inclusive range.
6017	Min returns the lower bound of the inclusive range.
6018	Max returns the greater of the start or end values in InclusiveRange.
6019	Contains checks if a value falls within an inclusive range.
6020	closestInRange returns the closest integer to value within the inclusive range [start, end] considering the specified step size.
6021	Index finds the index of a value within an inclusive range or returns -1 if out of bounds.
6022	String returns a human-readable representation of InclusiveRanges.
6023	Len calculates the total length of inclusive ranges.
6024	Start returns the start index of the first block in InclusiveRanges. If no blocks exist, it returns 0.
6025	End returns the end value of the last block in InclusiveRanges.
6026	Min returns the minimum value from inclusive ranges.
6027	Max returns the maximum value from InclusiveRanges.
6028	numRanges returns the total count of blocks in the InclusiveRanges object.
6029	rangeAt retrieves the inclusive range at a specified index if valid.
6030	Append adds a new InclusiveRange to l.
6031	AppendUnique adds non-overlapping ranges to InclusiveRanges.
6032	Contains checks if value is within any inclusive ranges in l.
6033	Index finds the local index of a value within inclusive ranges, adjusted by previously seen values. Returns -1 if not found.
6034	FrameRange returns the frame range of the FileSequence
6035	FrameRangePadded returns a padded frame range string for the FileSequence.
6036	Index retrieves frame path based on index.
6037	SetDirname ensures directory ends with separator and sets it.
6038	SetPadding updates the padChar field and recalculates zfill based on padChars.
6039	SetPaddingStyle updates padding style and recalculates padding chars.
6040	SetExt updates the file extension to ensure it starts with a dot.
6041	SetFrameRange validates and sets the FrameRange field.
6042	Len returns the number of frames in the sequence or 1 if no frame set exists.
6043	String returns a formatted string representation of the FileSequence.
6044	Copy creates a new FileSequence from the current sequence.
6045	NewClient constructs a new Client instance with URL, TLS, and header options.
6046	UnmarshalXML parses XML content into Header's Content field.
6047	UnmarshalXML processes XML data into Body structure, handling Fault or Content elements.
6048	Call sends a SOAP request with the given parameters and processes the response.
6049	JSONDoc loads JSON data from a file or URL
6050	AddLoader registers a new document loader with a matching predicate.
6051	JSONSpec reads a JSON file at the given path and returns its analyzed document.
6052	Embedded converts JSON to Document struct.
6053	Spec loads a specification file from a given path and returns its parsed Document.
6054	Analyzed processes JSON or YAML data to create a Document object based on the specified version.
6055	Expanded creates a Document with expanded Swagger specification.
6056	ResetDefinitions resets the Definitions map in Document to its original state.
6057	Pristine analyzes and returns a new Document instance.
6058	OpenDb opens a GeoIP database file and returns a pointer to a GeoIP struct. If no files are provided, it uses default paths. It sets the character set to UTF-8 before returning.
6059	GetOrg retrieves the organization name associated with the specified IP address.
6060	GetRegion retrieves the country and region codes for a given IP address using a GeoIP database.
6061	GetRegionName retrieves the region name based on country and region codes using GeoIP library.
6062	GetCountry retrieves the country code and netmask for a given IP address using GeoIP database.
6063	NewRotatingFileHandler creates a rotating file handler with a maximum byte limit and backup count.
6064	Close closes the file descriptor if it's open.
6065	String method returns log level as string.
6066	New creates a new logger instance.
6067	Close stops the Logger's handler.
6068	SetLevelByName updates Logger's level based on name.
6069	Output formats log messages with optional timestamp, level, and caller info.
6070	OutputJson formats and outputs log messages in JSON format based on specified flags and call depth.
6071	Print outputs trace-level log messages.
6072	Println outputs a trace level log message.
6073	Debug outputs debug-level log messages.
6074	Debugln outputs debug level messages with a newline.
6075	Error logs formatted arguments at error level.
6076	Errorln logs error messages with a specific level.
6077	Info logs informational messages at level 2.
6078	Infoln outputs information at level Info.
6079	Warn logs warning messages with the specified arguments.
6080	Warnln outputs a warning message with a newline.
6081	NewStreamHandler creates a new stream handler for writing to an io.Writer.
6082	Right pads a string to the right with another string until it reaches the desired length.
6083	New constructs a new API instance with the specified host and authenticator.
6084	setupMetadata generates a unified metadata resource map by removing specific prefixes from path patterns.
6085	recordTypes records types and their fields recursively
6086	appendSorted appends a new action parameter to the list and sorts it by name.
6087	parseDataType determines the data type of a parameter based on its class and constructs the appropriate data type object.
6088	parseParam analyzes a parameter's data type and creates a new parameter object.
6089	newParam constructs an ActionParam from the given path and parameter map.
6090	toGoReturnTypeName formats Go return type name with optional slice prefix.
6091	toGoTypeName maps MongoDB data types to Go types, handling specific cases like "String" and "Integer".
6092	prettify formats JSON output with indentation or fallbacks to default string representation.
6093	function checks if input string matches any built-in type.
6094	MatchHref checks if the given href matches any of the action's path patterns exactly.
6095	Substitute substitutes path variables with their corresponding values, returning the formatted pattern and a list of used variables. If any variables are missing, it returns an empty string and a list of those variables.
6096	MarshalJSON converts file content to JSON.
6097	writeMultipartParams recursively constructs multipart form data from nested API parameters.
6098	PerformRequest sends an authenticated HTTP request using the API's client.
6099	PerformRequestWithContext sends HTTP request using client with optional authentication.
6100	LoadResponse reads HTTP response, parses JSON, handles Location header. Returns parsed data or error.
6101	ScheduleLocator creates a new instance with Href and api values.
6102	TemplateLocator creates a new TemplateLocator instance with the specified Href and API reference.
6103	fetchDetails retrieves server details from API and populates SSHConfig.
6104	buildAliases generates SSH alias commands based on input configuration.
6105	serverArray retrieves and returns the instances of the specified server array.
6106	Retrieve and return the instance details of the specified server using the API client.
6107	toPackageName converts a version string to a package name by replacing dots with underscores and removing trailing zeros.
6108	loadFile reads the content of a file into memory and returns it as a byte slice.
6109	main function parses command line, executes command, handles responses, and sets exit status accordingly.
6110	runCommand executes the specified command on the client and returns the response or error.
6111	CreateJSONResponse creates an HTTP response with the provided JSON body.
6112	AccountLocator creates an AccountLocator instance with Href set to href and API reference.
6113	AccountGroupLocator creates a new locator for the given href.
6114	AlertLocator creates an AlertLocator with Href set to href and API set to api.
6115	AlertSpecLocator creates a new instance with Href set to href and API set to api.
6116	AuditEntryLocator creates a new instance with Href and API reference.
6117	BackupLocator creates a new BackupLocator instance with Href set to href and API reference.
6118	ChildAccountLocator creates a new locator with href and api.
6119	CloudLocator returns a CloudLocator with Href set to href and other values from api.
6120	CloudAccountLocator creates a new locator for a cloud account.
6121	CookbookLocator creates a new locator with href and API reference.
6122	CookbookAttachmentLocator creates a new locator for a cookbook attachment.
6123	CredentialLocator returns a new CredentialLocator with Href set to href and API set to api.
6124	DatacenterLocator creates a new DatacenterLocator instance with Href and API references.
6125	DeploymentLocator creates a new DeploymentLocator instance with Href set to href and API reference.
6126	HealthCheckLocator constructs a new locator with Href and API reference.
6127	IdentityProviderLocator returns an IdentityProviderLocator with Href set to href and other fields from api.
6128	ImageLocator creates a new ImageLocator with Href set to href and API set to api.
6129	InputLocator creates an InputLocator instance with Href set to href and API set to api.
6130	InstanceLocator creates a new instance locator from href and api.
6131	InstanceTypeLocator creates a new instance with Href set to href and API reference.
6132	IPAddressLocator creates a new instance with Href set to href and API reference.
6133	IPAddressBindingLocator constructs a new instance with Href and API values.
6134	MonitoringMetricLocator creates a new instance with Href and API reference.
6135	MultiCloudImageLocator returns a MultiCloudImageLocator with Href set to href and API set to api.
6136	MultiCloudImageMatcherLocator creates a new locator for the given href.
6137	MultiCloudImageSettingLocator creates a new instance with Href and API values.
6138	NetworkLocator creates a new NetworkLocator with Href set to href and API set to api.
6139	NetworkGatewayLocator creates a new NetworkGatewayLocator instance with Href and api values.
6140	NetworkOptionGroupLocator creates a new instance with Href and api values.
6141	NetworkOptionGroupAttachmentLocator creates a new instance with Href and API values.
6142	Oauth2Locator creates an Oauth2Locator instance with Href set to href and API reference.
6143	PermissionLocator returns a new PermissionLocator instance with Href set to href and API set to api.
6144	PlacementGroupLocator creates a new locator for the given href.
6145	PreferenceLocator creates a new PreferenceLocator with Href set to href and API set to api.
6146	PublicationLocator creates a new locator for a publication based on the given href.
6147	PublicationLineageLocator returns a new locator for the given href.
6148	RecurringVolumeAttachmentLocator creates a new locator with Href and API values.
6149	RepositoryLocator creates a new locator for the given href.
6150	RepositoryAssetLocator creates a new locator with Href set to href and API set to api.
6151	ResourceGroupLocator returns a new instance with Href set to href and API context preserved.
6152	RightScriptLocator creates a new locator with the given href and API instance.
6153	RightScriptAttachmentLocator creates a new locator with href and API reference.
6154	RouteLocator returns a new RouteLocator with Href set to href and other values from api.
6155	RouteTableLocator creates a new locator for the route table using the given href.
6156	RunnableBindingLocator creates a new locator with Href and API.
6157	SchedulerLocator creates a new SchedulerLocator instance with Href and API references.
6158	SecurityGroupLocator creates a new locator with Href and API values.
6159	SecurityGroupRuleLocator creates a new locator for a security group rule using href and API.
6160	ServerLocator creates a new ServerLocator instance with the given href and API reference.
6161	ServerArrayLocator creates a new ServerArrayLocator instance with Href and api values.
6162	ServerTemplateLocator creates a new instance with Href and API references.
6163	ServerTemplateMultiCloudImageLocator creates a new instance with Href and API values.
6164	SessionLocator creates a new session locator with the given href and API instance.
6165	SshKeyLocator creates a new instance of SshKeyLocator with Href and api values.
6166	SubnetLocator creates a locator for a subnet using its href.
6167	TagLocator returns a TagLocator instance with Href set to href and other fields from api.
6168	TaskLocator creates a new TaskLocator instance with Href set to href and API set to api.
6169	UserLocator creates a new UserLocator instance with Href set to href and API reference.
6170	UserDataLocator creates a new UserDataLocator instance with Href and api values.
6171	VolumeLocator creates a new VolumeLocator object with the given href and API reference.
6172	VolumeAttachmentLocator creates a new locator for the specified href.
6173	VolumeSnapshotLocator creates a new locator for the specified href.
6174	VolumeTypeLocator creates a new locator with the given href and API reference.
6175	RegisterCommands registers action commands using APICommandRegistrar.
6176	ShowCommandHelp displays help information for a given command.
6177	ShowAPIActions displays actions related to a specific API command.
6178	ShowHelp displays command usage and flags based on parsed input.
6179	ParseCommandAndFlags processes command and flags to return target, parsed parameters, and error.
6180	validateFlagValue checks if the flag value matches the specified regexp, is non-blank, and is within the valid values list, returning an error if any condition fails.
6181	buildQuery merges multiple sets of API parameters into a single flattened map.
6182	buildPayload aggregates multiple APIParams into a single flattened payload.
6183	shortenPattern trims the suffix from the pattern if it matches any action path pattern in the resource, replacing variables with placeholders.
6184	cleanDescription removes unnecessary lines from a document based on a specific keyword.
6185	function to check if a file exists
6186	AnalysisSnapshotLocator creates a new instance with Href and API values.
6187	BudgetAlertLocator creates a new BudgetAlertLocator instance with Href and API values.
6188	CloudBillLocator creates a new instance with Href and API.
6189	CloudBillMetricLocator creates a new locator for the given href.
6190	CurrentUserLocator creates a new locator for the current user at the given href.
6191	InstanceCombinationLocator creates a new instance with Href and API values.
6192	InstanceMetricLocator creates a new locator with href and API instance.
6193	InstanceUsagePeriodLocator creates a new locator with Href and API references.
6194	PatternLocator creates a new PatternLocator instance with Href set to href and API set to api.
6195	ReservedInstanceLocator creates a new instance with Href set to href and API reference.
6196	ReservedInstancePurchaseLocator creates a new locator for API's reserved instance purchase.
6197	ScenarioLocator returns a ScenarioLocator with Href set to href and other values from api.
6198	ScheduledReportLocator creates a new locator for a scheduled report.
6199	TempInstancePriceLocator creates a new locator for a temporary instance price.
6200	UserSettingLocator creates a new UserSettingLocator instance with Href set to href and API reference.
6201	readAllAsync reads file contents asynchronously and returns them along with a channel signaling completion.
6202	extractArg extracts the value of a named argument from a list of command-line arguments and returns it along with the remaining arguments.
6203	write appends byte slice to output file with newline.
6204	AppliedPolicyLocator creates a new instance with Href set to href and api reference.
6205	ApprovalLocator creates an ApprovalLocator instance with Href set to href and API set to api.
6206	IncidentLocator creates an IncidentLocator instance with Href and API references.
6207	PolicyTemplateLocator creates a new locator with the given href and API reference.
6208	PublishedTemplateLocator constructs a new locator with the given href and API instance.
6209	DebugCookbookPathLocator creates a new instance with Href and API values.
6210	DockerControlLocator creates a new locator with href and api values.
6211	EnvLocator creates an EnvLocator instance with Href and api.
6212	LoginControlLocator creates a new locator with href and API reference.
6213	ProcLocator returns a ProcLocator with Href set to href and its other values originating from this API.
6214	Rl10Locator creates a new Rl10Locator instance with Href set to href and API reference.
6215	TSSLocator creates a new TSSLocator instance with the given href and API reference.
6216	TSSControlLocator creates a new instance with Href and API references.
6217	TSSPluginLocator creates a new TSSPluginLocator instance with Href set to href and API reference.
6218	NewAngularWriter initializes a new AngularWriter with a template containing specific functions.
6219	WriteResource renders a resource using Angular templates.
6220	Path constructs a formatted path string from action's path patterns and variables.
6221	mandatory checks if a parameter is mandatory for a given action.
6222	New initializes a new API client with authentication and host configuration.
6223	FromCommandLine creates an API client based on command-line arguments.
6224	CanAuthenticate checks if authentication is possible for the API host.
6225	Encrypts text using AES encryption and returns base64-encoded result.
6226	Decrypt decodes Base64, then uses AES CFB mode to decrypt the input text.
6227	guessType infers the data type based on reference ID and definition attributes.
6228	addType updates API with new object data type, handling collisions by renaming or using existing type based on field count.
6229	extractCmdLineParams extracts command-line parameters from a data type hierarchy, handling basic, array, and object types recursively.
6230	NewMetadataWriter initializes a MetadataWriter with templates and functions.
6231	WriteHeader renders metadata header template to writer.
6232	WriteMetadata outputs API metadata using a template to the given writer.
6233	location returns the metadata type for the given action parameter location.
6234	New creates a new API client using the given host and authenticator.
6235	fromAPI converts rsapi.API to internal API with generated metadata.
6236	BuildRequest constructs an HTTP request for a specified resource and action using given parameters.
6237	setupMetadata initializes a resource map using metadata generated by cac.
6238	NewDisplayer reads HTTP response and creates a Displayer instance.
6239	ApplySingleExtract processes a JSON extract, ensuring it returns a single value or handling errors accordingly.
6240	ApplyExtract applies a JSON selector to the displayer's body and returns the selected values, optionally formatting them as JSON.
6241	ApplyHeaderExtract retrieves the specified header from the response or returns an error if it's missing.
6242	Output formats JSON or raw string based on prettify flag.
6243	NewAPIAnalyzer initializes a new API analyzer with given resources and attribute types.
6244	Analyze generates an APIDescriptor from raw resources and types.
6245	AnalyzeAliases updates method details for aliases in APIAnalyzer.
6246	LocatorFunc generates a locator function based on attributes, returning a specific API call if "Links" are found.
6247	ParseRoute extracts HTTP methods and paths from given routes and constructs PathPattern objects.
6248	isDeprecated checks if the path refers to a deprecated session API endpoint.
6249	isQueryParam checks if query parameter matches specific criteria.
6250	function checks if parameter matches any variable in given path patterns.
6251	fetchAuditEntries retrieves audit entries from the API filtered by email, using tomorrow and yesterday as date range limits.
6252	formatTime converts a time.Time to a formatted string in UTC.
6253	printAudits prints formatted audit entries.
6254	extractUnique filters out duplicate AuditEntry objects based on their href values.
6255	getHref extracts the self-link href from an audit entry.
6256	fail logs formatted error message and exits
6257	parameters constructs a string representation of action parameters including optional ones.
6258	paramsInitializer constructs API parameters based on action and location.
6259	commandLine constructs a command line string from os.Args.
6260	Converts text to verb form by capitalizing the first letter and appending "Raw" if it's "GET" or "POST".
6261	escapeBackticks escapes backticks in a string by adding them between backtick pairs.
6262	AccountPreferenceLocator creates a new locator with the given href and API context.
6263	ApplicationLocator returns an ApplicationLocator with Href set to href and API set to api.
6264	EndUserLocator creates a new locator with the given href and API reference.
6265	NotificationRuleLocator creates a new locator for notification rules.
6266	UserPreferenceLocator constructs a new locator with the given href and API instance.
6267	UserPreferenceInfoLocator creates a new locator with href and API.
6268	LoadConfig reads a JSON config file and decrypts sensitive information.
6269	CreateConfig reads user input to update or create a configuration file.
6270	fromAPI converts a remote server API to a local API.
6271	HostFromLogin modifies the input host string based on specific conditions and returns the modified host.
6272	AnalyzeParam generates an action parameter based on input details.
6273	AnalyzeAttribute generates an ActionParam from an attribute map.
6274	AnalyzeType determines the data type of a given definition, handling various cases including file uploads, built-in types, collections, structs, and hashes.
6275	CreateType analyzes attributes to generate a structured object data type.
6276	Ref retrieves the Definition associated with the given reference key. If the reference is not found, it returns nil.
6277	Type returns the type of the reference.
6278	Required checks if "required" key exists in map and returns its value as a slice of strings.
6279	ID returns the reference ID without prefix if present.
6280	Service returns the first tag or operation ID without fragment from the Endpoint.
6281	Method extracts the method name from the operation ID if it contains a hash symbol.
6282	NewTypeRegistry initializes a new TypeRegistry with maps for named and inline types.
6283	GetNamedType retrieves a type from the registry using a Go-friendly name.
6284	CreateNamedType creates a new ObjectDataType with a unique name in the registry.
6285	CreateInlineType generates a new Go type and registers it in the registry.
6286	FinalizeTypeNames updates the API descriptor with inline types from the type registry.
6287	Merge combines two APIDescriptors, checking for version conflicts and duplicate resources/types, then merging them.
6288	Finalize type names for API descriptor, ensuring uniqueness and avoiding clashes with resource names.
6289	uniqueTypeName generates a unique type name by appending a number to a prefix, ensuring it's not already in use in the descriptor.
6290	MandatoryParams returns a slice of mandatory action parameters.
6291	HasOptionalParams checks if any action parameter is optional.
6292	MakeUniq generates a unique name based on the given base and list of used names.
6293	NewClientWriter initializes templates for generating client code.
6294	WriteHeader renders the header template for a client writer, taking package, version, time, and JSON flags, and writing to the given writer.
6295	WriteResourceHeader writes a header to resource file.
6296	WriteType generates a Go struct declaration from ObjectDataType fields.
6297	WriteResource writes a resource to a writer using a template.
6298	WithTrail appends a trail to the EvalCtx and returns it.
6299	AnalyzeEndpoint processes API endpoint details and constructs action objects.
6300	NetworkInterfaceLocator creates a new locator for the given href.
6301	NetworkInterfaceAttachmentLocator creates a new locator for the given href and API.
6302	UnmarshalJSON parses JSON string to Ruby Time format.
6303	ExecutionLocator creates a new locator with href and API reference.
6304	NotificationLocator creates a new NotificationLocator instance with Href set to href and api as its parent.
6305	OperationLocator creates a new OperationLocator instance with Href and api values.
6306	ScheduledActionLocator creates a new locator for scheduled actions using the given href.
6307	NewBasicAuthenticator creates a new Authenticator using the given username, password, and account ID.
6308	NewSSAuthenticator wraps an existing authenticator unless it's already wrapped.
6309	newCookieSigner creates an authenticator using a login request builder and account ID, with a refresh time set two minutes ago.
6310	Sign adds authentication cookies to the request if necessary.
6311	CanAuthenticate checks if authentication can be performed for the given host using the signer's client and builder.
6312	refresh updates cookie signer's cookies and expiration based on response.
6313	Sign adds authentication headers to HTTP requests.
6314	Sign adds authentication header to HTTP request.
6315	Sign authenticates HTTP requests using an authenticator and refreshes the session if necessary.
6316	SetHost updates a's host based on host input, adjusting prefix and suffix accordingly.
6317	CanAuthenticate checks if the host can authenticate using the given account ID and preferences.
6318	extractRedirectURL parses the redirect URL from HTTP response's Location header if status code indicates redirection.
6319	buildURL constructs and returns the full URL using the specified host and path, defaulting to HTTPS unless insecure mode is enabled.
6320	GetAction returns the Action with the specified name or nil if it doesn't exist.
6321	HasLink checks if a link with the specified name exists in the resource's Links map.
6322	findMatches finds patterns matching a given href
6323	NewPB creates an HTTP client with customized settings from ParamBlock.
6324	newVariableDumpClient creates a new HTTP client with custom behaviors.
6325	newRawClient creates a custom HTTP client with specified transport settings.
6326	DoHidden sends a hidden HTTP request and returns the response.
6327	Do makes a request using doImp method.
6328	doImp sends HTTP request, logs details, dumps request/response based on context.
6329	getClientWithoutTimeout clones and modifies an HTTP client, setting a zero timeout for response headers while preserving other settings.
6330	dumpRequest handles HTTP requests by logging or returning them based on format.
6331	writeHeaders filters and formats HTTP headers, writing them to a buffer.
6332	copyHiddenHeaders copies hidden headers from one map to another.
6333	validateCommandLine checks command-line options for setup, actions, json, help, or rl10 flags; otherwise, it validates account, host, and login info.
6334	APIClient creates a command client based on the given name and command line arguments.
6335	RegisterClientCommands registers commands for different APIs on the application.
6336	Interactive sets up error logging to stderr using log15.
6337	toPattern generates a PathPattern object based on HTTP method and path, extracting variables from the path.
6338	WithClientIP adds client IP to context if non-nil.
6339	ClientIP retrieves the client IP address from the context.
6340	NewProducer creates a new producer with the specified configuration.
6341	StartProducer initializes and starts a producer with given config.
6342	Start initializes producer with goroutines based on concurrency limit.
6343	Stop stops the producer and waits for all pending requests to complete.
6344	Publish sends a message to the producer's topic.
6345	PublishTo sends a message to a topic using a producer, handling timeouts and ensuring the producer is still active before sending.
6346	NewLocalEngine initializes a local engine with default timeouts if not specified, starts its goroutine, and returns it.
6347	validate ensures ConsumerConfig has non-empty topic and channel.
6348	Set default values for consumer configuration timeouts and limits.
6349	NewConsumer creates a new consumer with the given configuration or an error.
6350	StartConsumer initializes and starts a consumer with given config.
6351	Start begins consumer operation if not already running, launching goroutine for run method.
6352	RateLimit limits the rate at which messages are passed through based on a given limit.
6353	Write will serialize and write the raw response to a bufio.Writer.
6354	ReadResponse reads a response from a reader, parsing it based on its content.
6355	backoff calculates the next backoff duration based on the current attempt number and min/max limits, applying a hardcoded coefficient and jitter.
6356	String returns the string representation of the frame type.
6357	NewConsulEngine initializes a ConsulEngine with default configurations if necessary.
6358	ParseMessageID extracts a message ID from a hexadecimal string.
6359	WriteTo converts the message ID to a hexadecimal string and writes it to the writer.
6360	NewMessage creates a new message with the specified ID, body, and command channel.
6361	Finish completes message processing and ensures it's not called again.
6362	Requeue requeues a message if it's not complete, handles async connection closure, and sends a request with a timeout.
6363	ReadCommand parses a command from input reader and executes corresponding action.
6364	funcMapMaker combines multiple function maps into a single FuncMap for templates.
6365	Funcs sets the funcMap field tmpl value.
6366	Execute renders template and sets content type.
6367	RegisterPath adds a new path to AssetFileSystem only if it doesn't already exist.
6368	Asset reads file content from paths until found; returns error if not found.
6369	Glob searches for files matching a pattern across multiple paths.
6370	NameSpace initializes or retrieves a namespaced filesystem interface.
6371	New initializes a Render instance with provided config and view paths.
6372	RegisterViewPath registers view paths in render and updates asset file system accordingly.
6373	SetAssetFS registers view paths with assetFS and assigns it to AssetFileSystem.
6374	Layout returns a Template with specified name and current render context.
6375	Funcs method updates the FuncMap of the Template instance.
6376	Execute renders a template based on the given name, context, request, and writer.
6377	RegisterFuncMap adds a function to Render's FuncMap.
6378	Asset fetches the content of the specified asset file.
6379	NewPlainClient creates a plain client with identity, username, and password.
6380	Create initializes and returns an io.WriteCloser for uploading data to a specified URL with custom headers and configuration. If no config is provided, it uses default settings.
6381	Open sends a GET request to the specified URL using the provided configuration.
6382	Sign calls DefaultService.Sign method to sign the HTTP request using the provided keys.
6383	Sign adds AWS signature headers to HTTP request
6384	Readdir reads directory entries from File, returning os.FileInfos or io.EOF.
6385	Find searches for nodes matching the given path expression in the tree.
6386	Lex tokenizes XPath expressions asynchronously.
6387	MustParseXML parses XML from a reader, panicking on error.
6388	ParseXML reads an XML document from a reader and constructs a tree structure.
6389	Call invokes the wrapped function with the provided context and arguments based on the specified argument options.
6390	Parse converts an XPath expression to an executable form.
6391	MustParse parses an XPath expression or panics on error.
6392	XPathExec executes XPath expressions on XML trees with options.
6393	ExecBool executes an XPath expression and returns its boolean value.
6394	ExecNum executes an XPath expression and returns the numeric result.
6395	ExecNode executes XPath on a tree node and returns a set of nodes or an error.
6396	MustExec executes the XPath expression on the given node and panics if an error occurs.
6397	ParseExec parses the expression string and executes it on the given tree with options.
6398	CreateNode constructs a new XML element or node based on options and appends it to the current parent.
6399	GetChildren retrieves all child nodes from XML element.
6400	GetAttrs retrieves all attributes of the XML element as tree nodes.
6401	ResValue recursively collects all non-comment child text content.
6402	Parse uses a lexer to tokenize input and constructs a Node hierarchy based on parsing rules.
6403	GetToken retrieves token based on node type.
6404	ResValue retrieves the value from an XMLNode based on its NodeType.
6405	Exec evaluates a parser Node within a given XML tree context, applying filters and returning the result or an error.
6406	String returns a human-readable representation of a number.
6407	Num converts a string to a floating-point number or returns NaN on error.
6408	BuildNS constructs a slice of NS from XML element attributes, excluding empty xmlns entries.
6409	GetAttribute retrieves an attribute from an element based on local and namespace strings.
6410	GetAttributeVal retrieves the attribute value for the given element if it exists.
6411	GetAttrValOrEmpty retrieves the attribute value or returns empty if not found.
6412	FindNodeByPos recursively searches for a node at a given position within a tree structure.
6413	Marshal encodes a tree node to an I/O writer.
6414	MarshalStr converts a tree node to a string representation.
6415	NewLexer creates a Lexer from a reader with optional POSIX and whitespace splitting.
6416	NewLexerString creates a lexer for a given string with specified options.
6417	Split parses a string into substrings based on delimiter characters.
6418	Register locks registry, checks for no code or duplicate error, marks error as registered, and stores it.
6419	Get fetches an error descriptor by its code.
6420	GetAll retrieves all ErrDescriptors from the registry.
6421	Converts an error to a custom Error type or uses FromGRPC method.
6422	Descriptor retrieves or creates a default ErrDescriptor from an error.
6423	GetAttributes retrieves attributes from the given error if it implements the Error interface. If not, it returns empty attributes.
6424	HTTPStatusCode maps a type to its corresponding HTTP status code.
6425	HTTPStatusCode returns the HTTP status code from the error, defaulting to InternalServerError if not found.
6426	HTTPStatusToType maps HTTP status codes to internal error types.
6427	ToHTTP handles HTTP responses for errors, setting appropriate headers and encoding them in JSON.
6428	Converts error to implementation struct.
6429	MetadataFromIncomingContext extracts metadata from incoming context.
6430	MetadataFromOutgoingContext extracts metadata from outgoing context.
6431	TokenFromMetadata extracts a token from metadata; if not found, returns an error.
6432	TokenFromIncomingContext extracts token from metadata retrieved from incoming context.
6433	OutgoingContextWithToken adds a token to the context metadata.
6434	KeyFromMetadata retrieves the first value associated with the "key" field from the given metadata map, returning an error if the key is missing or empty.
6435	KeyFromIncomingContext retrieves key from metadata extracted from incoming context.
6436	OutgoingContextWithKey creates a new context with merged metadata containing the specified key-value pair.
6437	IDFromMetadata extracts the ID from the given metadata, returning an error if not found or empty.
6438	IDFromIncomingContext extracts ID from incoming context metadata.
6439	OutgoingContextWithID creates a new context with merged metadata containing the given ID.
6440	ServiceInfoFromMetadata extracts service info from metadata.
6441	ServiceInfoFromIncomingContext extracts service info from metadata in incoming context.
6442	OutgoingContextWithServiceInfo adds service info metadata to ctx.
6443	LimitFromMetadata retrieves the limit value from metadata as a uint64.
6444	OffsetFromMetadata retrieves the offset value from metadata.
6445	LimitAndOffsetFromIncomingContext extracts limit and offset from request metadata.
6446	OutgoingContextWithLimitAndOffset adds limit and offset to context metadata if non-zero.
6447	before determines if one schedule item ends before another starts.
6448	New creates a new error instance using the given attributes.
6449	WithNamespace adds a namespace field to the log context.
6450	Wrap creates a Namespaced object with the given context and namespaces.
6451	WithField updates or adds a field to the Namespaced logger interface.
6452	WithFields adds fields to the logger's context.
6453	Format applies the given format to the provided attributes, returning the formatted string or the original format on error.
6454	fix converts interface values to their underlying types or strings, handling pointers recursively.
6455	GRPCCode maps the Type enum to corresponding gRPC status codes.
6456	GRPCCodeToType maps gRPC status codes to custom error types.
6457	GRPCCode extracts gRPC status code from an error
6458	FromGRPC converts a gRPC error to a custom Error type.
6459	ToGRPC converts an error to a gRPC error, preserving attributes and error codes when possible.
6460	IsEnabled checks if a namespace is enabled based on rules.
6461	Set updates the namespaces slice in ns.
6462	Cause extracts the underlying error from an error object.
6463	parseCode converts a string to an integer and returns it as a Code type.
6464	UnaryServerInterceptor applies a conversion function to gRPC server errors.
6465	StreamServerInterceptor creates a gRPC stream interceptor that applies a conversion function to the handler.
6466	UnaryClientInterceptor is a unary client interceptor for gRPC calls.
6467	StreamClientInterceptor applies a conversion function to errors returned by gRPC streamers.
6468	Interceptor creates a gRPC stream client interceptor using provided settings.
6469	Wrap creates a logrusEntryWrapper that wraps a logger.
6470	NewCounter creates a new counter with specified bucket size and retention period.
6471	NewRedisCounter creates a Redis-based counter
6472	NewLimiter creates a new rate limiter
6473	WithInsecure returns a TokenCredentials instance with insecure flag enabled.
6474	WithTokenFunc creates a TokenCredentials instance using a key and a token transformation function.
6475	GetRequestMetadata retrieves request metadata including authentication tokens.
6476	FieldsFromIncomingContext extracts logging fields from incoming context.
6477	String returns the string representation of the error type.
6478	UnmarshalText deserializes text into a Type.
6479	fromString converts a string to a specific Type based on predefined cases.
6480	Start initializes a goroutine that logs memory stats at intervals.
6481	NewSimple creates a new simpleQueue instance with a condition variable for synchronization.
6482	Wrap applies filters to a logger before returning it.
6483	WithFilters appends filters to the filters field and returns a new Filtered instance.
6484	WithField applies filters to a key-value pair and returns a new Filtered instance.
6485	WithFields applies filters to log fields and returns a new Filtered instance.
6486	FilterSensitive filters out sensitive keys in a map using a custom elided value.
6487	SliceFilter applies a given filter to each element of a slice within a map.
6488	MapFilter applies a filter to each value in a map within a FilterFunc.
6489	RestrictFilter applies a filter to a specific field in a data structure.
6490	LowerCaseFilter applies lowercase transformation to keys before filtering.
6491	newBatchPoints creates a BatchPoints instance using the given configuration.
6492	NewSinglePointWriter creates a SinglePointWriter using provided logger and writer.
6493	Write adds a point to batch points and writes them.
6494	WithScalingInterval sets the scaling interval for the writer.
6495	NewBatchingWriter creates a new BatchingWriter with the given options, initializing its logger, writer, and default settings.
6496	Write adds a point to a batching writer, handling channel creation and scaling as needed.
6497	MustParseLevel parses log level or logs error if parsing fails.
6498	New creates a new Stream instance with a specified buffer size and setup function.
6499	SetLogger updates Stream's logger.
6500	CloseRecv closes the receive buffer.
6501	Stats retrieves the number of sent and dropped packets from the Stream.
6502	Run starts a goroutine to receive messages and handles context cancellation and deadline exceeded errors.
6503	ServerOptions configures gRPC server options with logging interceptors.
6504	ClientOptions configures gRPC client options with logging interceptors.
6505	UnaryServerInterceptor logs gRPC calls with method, duration, and error details.
6506	StreamServerInterceptor logs gRPC streams with method, duration, and errors.
6507	UnaryClientInterceptor logs gRPC client calls, measures duration, and handles errors.
6508	StreamClientInterceptor logs gRPC client stream events.
6509	Set default values for Config struct fields.
6510	Flush sends batched data asynchronously and resets the batch.
6511	New creates a Handler instance that determines whether to use color based on environment variables.
6512	HandleLog processes log entries, formatting them with colors and sorting fields before writing to the handler's writer.
6513	New creates a new TTNRandom instance using the provided seed.
6514	Names extracts names from URI template parts based on certain conditions.
6515	String formats performance datum into a detailed string representation.
6516	RenderPerfdata formats performance data into a single string.
6517	Exit prints an error message and exits the program with the given status.
6518	NewCheckWithOptions configures a new check instance with custom status policy if provided.
6519	AddResult updates the check's results and status based on the new status and message.
6520	AddResultf formats a message and adds it with a status to Check results.
6521	String returns a human-readable representation of the check's status and performance data.
6522	Exitf formats a message, adds result, and finishes check.
6523	Criticalf logs critical messages using the Exitf method.
6524	Unknownf logs an unknown error message using the specified format.
6525	NewDefaultStatusPolicy initializes a default status policy with predefined severity levels.
6526	NewStatusPolicy generates a new status policy from a list of statuses.
6527	ParseRange converts a string representation of a range into a Range object.
6528	Check returns true if value is within the range's bounds and alerts based on whether alerts are configured to trigger inside the range.
6529	CheckInt checks if an integer value falls within a range.
6530	CheckUint64 checks if a uint64 value satisfies the range.
6531	NewClient initializes a new HTTP client with SSL configuration and constructs a full API URL based on the provided config.
6532	GetKeyMeta retrieves metadata for a key at the specified path.
6533	GetKeysInDirMeta retrieves metadata for keys in a specified directory.
6534	GetKeyContent fetches PGP key content from the specified storage path.
6535	GetJobSummariesForProject retrieves summaries of jobs for a given project.
6536	GetJobsForProject retrieves job details for a specific project.
6537	GetJob retrieves a specific job by its ID.
6538	CreateJob imports a job for creation.
6539	CreateOrUpdateJob creates or updates a job based on the provided JobDetail.
6540	DeleteJob deletes a job using its ID.
6541	JobSummary creates a new job summary from the import result.
6542	GetSystemInfo retrieves system information.
6543	DateTime parses RFC3339 formatted string to time.Time.
6544	GetAllProjects retrieves summaries of all projects.
6545	GetProject retrieves a project by its name.
6546	CreateProject creates a new project using the provided details.
6547	DeleteProject deletes the specified project using a helper method.
6548	SetProjectConfig updates the configuration for a specified project.
6549	NewClient initializes a client with username and password.
6550	NewClientbyToken creates a new client using a token.
6551	SetDepth updates the depth field of the client object.
6552	ListDatacenters retrieves datacenter information from the client.
6553	CreateDatacenter creates a new datacenter using the provided details.
6554	GetDatacenter retrieves datacenter information using its ID.
6555	UpdateDataCenter updates properties of a data center.
6556	DeleteDatacenter deletes the datacenter with the given ID.
6557	WaitTillProvisioned waits up to 5 minutes for a request to complete before timing out.
6558	ListFirewallRules retrieves firewall rules for a specific network interface.
6559	GetFirewallRule retrieves a firewall rule by its identifiers.
6560	CreateFirewallRule sends a POST request to create a firewall rule.
6561	UpdateFirewallRule updates the properties of a specific firewall rule.
6562	DeleteFirewallRule deletes a firewall rule using client's HTTP DELETE method.
6563	ListLoadbalancers retrieves load balancer details for a given DCID.
6564	GetLoadbalancer retrieves a load balancer's details.
6565	UpdateLoadbalancer updates properties of a load balancer.
6566	DeleteLoadbalancer removes a load balancer and returns the response headers.
6567	ListBalancedNics retrieves network interface controller details.
6568	AssociateNic associates a network interface card with a load balancer.
6569	GetBalancedNic retrieves network information for a balanced NIC.
6570	DeleteBalancedNic deletes a balanced NIC using client.
6571	ListLans retrieves LAN details based on the data center ID.
6572	GetLan fetches details for a LAN resource using specified identifiers.
6573	DeleteLan deletes a LAN using its DCID and LANID.
6574	ListNics retrieves network interface details for the specified data center and server ID.
6575	CreateNic creates a new network interface on the server.
6576	GetNic fetches network interface details using provided IDs.
6577	UpdateNic updates the network interface configuration for a specific NIC identified by dcid, srvid, and nicid.
6578	DeleteNic deletes a network interface card with the specified IDs.
6579	ListSnapshots retrieves a list of snapshots from the server.
6580	GetSnapshot retrieves details for a specific snapshot.
6581	DeleteSnapshot deletes a snapshot by ID and returns the HTTP headers.
6582	UpdateSnapshot updates properties of a snapshot.
6583	ListIPBlocks retrieves all IP blocks from the client's database.
6584	ReserveIPBlock submits a new IP block reservation request and returns the reserved block or an error.
6585	GetIPBlock retrieves an IP block using its ID.
6586	UpdateIPBlock updates properties of an IP block identified by ID.
6587	ReleaseIPBlock deletes the IP block with the specified ID and returns the response headers.
6588	ListVolumes retrieves all Volumes at the specified数据中心.
6589	GetVolume retrieves a Volume by ID using the Client.
6590	UpdateVolume updates properties of a volume identified by dcid and volid.
6591	CreateVolume sends a POST request to create a volume.
6592	DeleteVolume deletes a volume using its DCID and volume ID.
6593	CreateSnapshot creates a snapshot of the specified volume with a given name and description.
6594	RestoreSnapshot sends a POST request to restore a snapshot with the given ID.
6595	ListServers retrieves the list of servers for the specified DCID.
6596	GetServer retrieves server details by ID.
6597	DeleteServer deletes a server in a data center and returns the response headers.
6598	ListAttachedCdroms retrieves attached CD-ROM images using the client.
6599	AttachCdrom attaches a CD-ROM image to a virtual machine.
6600	GetAttachedCdrom retrieves the attached CD-ROM image details.
6601	DetachCdrom detaches a CD-ROM from a virtual machine.
6602	ListAttachedVolumes retrieves volumes attached to a given DCID and SRVID.
6603	AttachVolume sends a POST request to attach a volume to a service and returns the response.
6604	GetAttachedVolume fetches details about a specific attached volume using its IDs.
6605	DetachVolume detaches a volume from a server and returns the HTTP response header.
6606	StartServer sends a POST request to start the server with the given IDs.
6607	ListLocations retrieves locations from the client with specified depth and pretty format.
6608	GetRegionalLocations fetches regional locations data for the specified ID.
6609	GetLocation retrieves location details by ID.
6610	GetContractResources fetches resources associated with contracts.
6611	ListImages retrieves images from the client.
6612	GetImage fetches an image by ID.
6613	PrintHeaders prints each header key-value pair from the response.
6614	ListGroups retrieves all groups from the client's URL.
6615	GetGroup retrieves group details by ID.
6616	CreateGroup creates a new group using the specified details.
6617	UpdateGroup updates group details by sending a PUT request to the server.
6618	DeleteGroup deletes a group identified by groupid.
6619	ListShares retrieves details about shares associated with a group ID.
6620	GetShare fetches details about a shared resource within a group.
6621	AddShare creates a new share for a specified group and resource.
6622	UpdateShare updates a share object for a given group and resource ID.
6623	DeleteShare removes a share from a group and returns the response headers.
6624	ListGroupUsers retrieves users within a specified group.
6625	AddUserToGroup adds a user to a specified group.
6626	DeleteUserFromGroup removes user from group using HTTP DELETE method.
6627	ListUsers retrieves the list of users from the server.
6628	GetUser retrieves user details by ID.
6629	CreateUser creates a new user with specified details.
6630	UpdateUser updates user details based on userid.
6631	DeleteUser removes a user by ID and returns response headers.
6632	ListResources retrieves a list of resources.
6633	GetResourceByType fetches a resource by type and ID.
6634	ListResourcesByType fetches resources of a specific type from the server.
6635	ListRequests retrieves the list of requests from the server.
6636	GetRequest retrieves details for a specific request using its ID.
6637	GetRequestStatus retrieves the status of a request at the specified path.
6638	Close closes the file associated with the writer.
6639	GetSerializableArgument retrieves the original or deserialized value based on availability.
6640	BoolVar sets a boolean flag p with name, initial value, and usage.
6641	Bool creates and returns a pointer to a boolean flag with the given name, default value, and usage message.
6642	IntVar sets integer flag p to value.
6643	Int retrieves an integer value from environment flags.
6644	Int64Var sets an integer variable p with name, value, and usage.
6645	Int64 returns an int64 flag from EnvironmentFlags with the given name, value, and usage.
6646	UintVar sets the value of a uint variable p using EnvironmentFlags.
6647	Uint retrieves a uint value from environment flags.
6648	Uint64Var assigns a variable to an environment flag.
6649	Uint64 retrieves a uint64 value from environment flags with specified name and usage.
6650	StringVar sets a string flag in EnvironmentFlags.
6651	String returns the string representation of a flag.
6652	Float64Var sets the p variable's value using EnvironmentFlags.Float64Var.
6653	Float64 retrieves a float value from environment flags.
6654	DurationVar registers a duration flag with a specified name, default value, and usage message.
6655	Duration retrieves a duration flag from environment flags.
6656	Parse cleans environment vars and sets them as flags.
6657	WriteStringToFile writes a given text to a file at the specified path.
6658	ReadFileToString reads a file and returns its content as a string.
6659	LineReader reads lines from a reader asynchronously using a channel.
6660	LineReaderFrom creates a reader that yields lines from the specified path.
6661	FileExists checks if a file exists at the given path.
6662	FileExistsInPath checks if the executable file exists in the system's PATH.
6663	GetPathParts extracts directory, filename, and absolute path from given path.
6664	GetThisPathParts retrieves directory, file name, and absolute path of the executable.
6665	RandomString generates a random string of specified length using cryptographically secure random numbers.
6666	ParseAddress extracts protocol and path from network address string.
6667	HomeDir returns the current user's home directory.
6668	IsTCPPortAvailable checks if the specified TCP port is available on localhost. Returns true if the port is within the valid range and not already in use.
6669	RandomTCPPort finds a random available TCP port within a specified range.
6670	HashString generates a hash value for a given key within a specified number of buckets.
6671	Context retrieves session information using an access token from the request metadata.
6672	Token constructs an oauth2.Token from Session data.
6673	NewDaemon initializes a Daemon with options, sets PostgreSQL connection parameters, and configures default values if not specified.
6674	Close stops the daemon's server and resources gracefully.
6675	NewAccessTokenContext adds an access token to a context.
6676	AccessTokenFromContext retrieves the access token from the context if it exists.
6677	RandomAccessToken generates a random access token using SHA-3 hashing.
6678	Init configures and initializes a logger based on environment and options.
6679	Load loads a dictionary from a zip file.
6680	Start creates a new session entity and saves it using save method. It returns the session or an error.
6681	Get retrieves a session using the provided access token.
6682	List retrieves sessions from storage based on pagination and expiration criteria.
6683	Exists checks if a storage record exists using the given access token.
6684	Abandon deletes a session using the provided access token and returns true if successful.
6685	SetValue updates the session's bag with a new key-value pair.
6686	Delete deletes user sessions based on criteria.
6687	Setup creates a database schema and table for storing access tokens with indexes.
6688	TearDown drops the database schema.
6689	initJaeger initializes Jaeger tracing with specified service, node, and agent address, returning the tracer and closer.
6690	Usage prints help message to error writer.
6691	Build creates a new DoubleArray from a slice of keywords, assigning sequential IDs.
6692	Read reads binary data from reader into a DoubleArray.
6693	Get retrieves node k from cluster. Returns nil and false if out of bounds.
6694	ExternalNodes returns all nodes except the one listening on the cluster.
6695	GetOther retrieves another node based on access token if it exists and meets certain conditions.
6696	GoString provides a JSON representation of the Cluster.
6697	Scan decodes the source into the Bag using Gob encoding.
6698	Value encodes the Bag using gob and returns its byte representation.
6699	Has checks if a key exists in the bag.
6700	WriteTo implements io.Writer for IndexTable, encoding Dup using gob.
6701	ReadIndexTable reads an IndexTable from the given reader, handling errors gracefully.
6702	New initializes an ActionBar with an Admin and sets up routes for switching mode and inline editing.
6703	RegisterAction adds an action to ActionBar's GlobalActions and updates actions.
6704	Create a new ActionBar instance with combined actions from existing and input.
6705	Render the ActionBar view with user context and actions.
6706	FuncMap returns a template function map for rendering edit buttons.
6707	EditMode checks if the action bar is in edit mode.
6708	SwitchMode switches the application mode based on URL query and redirects to referrer.
6709	InlineEdit renders inline_edit template using provided context.
6710	Error returns the formatted error message including filename, line number, and message.
6711	ParseFile opens a file and parses its contents into machines and macros.
6712	FindMachine retrieves a machine by name or returns a default if none found.
6713	New creates a Kace instance using a case-insensitive trie from a map of initialisms.
6714	Camel converts a string to camel case using a specified transformation table.
6715	Pascal converts snake_case to PascalCase using the transformer t.
6716	Snake converts a string to snake_case using a helper function.
6717	SnakeUpper converts a string to snake case with uppercase delimiters.
6718	Kebab converts a string to kebab-case using a delimiter.
6719	KebabUpper converts a string to kebab case with uppercase letters
6720	isPathSafe validates the safety of a URL path by checking for relative paths and whitelist patterns.
6721	Start initializes WriterTracer with request details.
6722	ParseAuthHeaders extracts authentication credentials from HTTP headers or query parameters.
6723	Tracer sets the tracer for the client using the provided function.
6724	HTTPClient sets the client field c value.
6725	BasicAuth sets up basic authentication for a client with given username and password.
6726	BearerAuth returns a ClientParam that sets the auth field of a Client to a bearerAuth with the given token.
6727	CookieJar sets the cookie jar for the client.
6728	SanitizerEnabled returns a ClientParam to set the sanitizerEnabled field of c.
6729	OpenFile opens a remote file using the specified endpoint and parameters.
6730	RoundTrip executes a round trip using a given function and returns a response object.
6731	SetAuthHeader updates the Authorization header if authentication information is set.
6732	FileName extracts the file name from Content-Disposition header.
6733	newBuffersFromFiles creates buffers from a list of files.
6734	newFileBuffer creates a buffered reader that caches data.
6735	rewind updates Reader to read from cache then File.
6736	ConvertResponse wraps or reads errors from the response object.
6737	Set converts string to BoolOption Value, updates Source and Defined fields.
6738	WriteAnswer assigns value to BoolOption if valid, otherwise returns error.
6739	String returns a human-readable representation of the BoolOption based on the StringifyValue flag.
6740	TriggerIncidentKey calls trigger with description, key, and an empty map.
6741	TriggerWithDetails sends an incident with a description and details to a trigger service.
6742	TriggerIncidentKeyWithDetails generates an incident key based on description, key, and additional details.
6743	Merge combines two structures using reflection.
6744	setSource recursively sets the source for structs, maps, arrays, and slices.
6745	convertString converts a source string to a target type specified by the destination interface.
6746	Do starts a transaction, executes a function, and commits or rolls back based on success.
6747	NewFile creates or recreates a file for writing.
6748	internalRun executes concurrent requests within a timed duration and collects results.
6749	String method constructs a detailed string representation of a Row object.
6750	Tabulate converts ResultSet to Row based on elapsed time and request statistics.
6751	AmazonRequest makes a GET request to Amazon's UK site and closes the response body.
6752	WriteTabularData outputs tabulated data from result set based on interval.
6753	Reduce divides the results into buckets based on a given time interval.
6754	NewSemaphore creates a semaphore with limited capacity and optional ramp-up behavior.
6755	Release decrements the semaphore count.
6756	Resize changes the capacity of a semaphore safely.
6757	AddOutput appends an output container with specified interval, writer, and output function to Bench's outputs.
6758	Run benchmarks using the provided request function and process the results.
6759	parseBool converts ASN.1 DER-encoded boolean to Go's bool type.
6760	checkInteger verifies if the ASN.1 encoded integer is minimally encoded.
6761	parseInt64 converts bytes to an int64, handling errors and overflow.
6762	parseInt32 parses bytes representing an integer into a 32-bit signed integer.
6763	parseBigInt converts byte array to big.Int, handling negative numbers.
6764	parseBitString converts ASN.1 BitString to Go's bitstring type.
6765	parseObjectIdentifier extracts an ASN.1 object identifier from bytes and returns it as a slice of integers.
6766	parseBase128Int parses a base-128 encoded integer from ASN.1 data, checking for overflow.
6767	parseGeneralizedTime parses ASN.1 generalized time format bytes into a time.Time object, validating the parsed time against the original input.
6768	parsePrintableString converts byte array to printable string if valid.
6769	isPrintable checks if a byte is printable according to certain rules.
6770	parseSequenceOf parses a byte sequence into a slice of values based on their ASN.1 tags.
6771	invalidLength checks if adding length to offset exceeds sliceLength.
6772	setDefaultValue sets v's value to its default if it's optional and has a defined default value.
6773	UnmarshalWithParams decodes JSON data using custom parsing parameters.
6774	parseFieldParameters parses the given string into field parameters based on specified tags and flags.
6775	getUniversalType returns ASN.1 type tag number and whether it's compound based on the Go reflection type.
6776	DecodeString decodes Base32-encoded strings.
6777	MailNotifier retrieves a mail notifier from MongoDB.
6778	SaveMailNotifier updates or inserts mail notifier information.
6779	RegisterProvider registers authentication providers, ensuring each name is unique.
6780	InitDb initializes the user table and logs any errors encountered.
6781	Until repeatedly executes a function until stopped or crashed.
6782	logPanic logs details about a recovered panic, including call stack information.
6783	User retrieves a user by their username from MongoDB.
6784	Users retrieves users based on a filter from MongoDB.
6785	SaveUser updates or inserts a user document in MongoDB.
6786	DeleteUser deletes the specified user's record from the database.
6787	LoadCACertFile loads the CA certificate file and appends it to a CertPool.
6788	NewAuth creates an Auth instance with optional custom settings.
6789	ValidateRequest checks if the TLS request is valid.
6790	Process validates HTTP request's TLS certificate against allowed OUs and CNs, returning an error if validation fails.
6791	ValidateCN checks if the verified certificate's CommonName matches any allowed CNs and returns an error if it doesn't.
6792	ValidateOU checks if the certificate's OU matches any allowed OU.
6793	KeyLen calculates the number of bits needed to represent a given unsigned integer.
6794	DefaultConfig initializes and returns a Vault configuration with a local client.
6795	New creates a certSigner instance with the given config, validates the VaultClient dependency, and returns it or an error.
6796	New initializes a VaultFactory with the given configuration, ensuring non-empty vault address and admin token.
6797	DefaultServiceConfig initializes a Vault client and configures a ServiceConfig with it.
6798	NewService creates a new service instance with the provided configuration, validating the Vault client.
6799	Delete unmounts the PKI backend for the given cluster.
6800	IsNoVaultHandlerDefined checks if the error indicates no vault handler is defined for the specified route.
6801	New initializes a Service with VaultClient and PKIMountpoint from config.
6802	Create generates a new role in Vault with the given parameters.
6803	CreateJob returns a Config with default values for all fields except RuntimeProcessingFrequency and SummaryBuffer.
6804	Run method ensures lock and starts worker, panicking on failure.
6805	newWatcher initializes a Watcher with optional directory notifications and initial paths.
6806	Start initializes and returns a channel for receiving notifications. If already started, returns existing channel; otherwise, starts new watcher goroutine.
6807	Stop closes notification and addition channels for the Watcher.
6808	Active checks if Watcher has active paths.
6809	Add adds paths to the watcher's list of paths to monitor. If auto-watch is enabled, it starts watching them immediately.
6810	watch waits for updates on watched paths and sends notifications via sndch channel.
6811	Watching returns a list of paths currently being watched.
6812	State returns the current state of notifications.
6813	Store captures and stores error in http request context if present.
6814	Get extracts error from request context if present
6815	Catch middleware captures errors from next handler and passes them to error handler h.
6816	Try wraps an HTTP handler to store errors.
6817	Recover middleware recovers from panics, stores panic information, and continues handling requests.
6818	main fetches data from a server using HTTP GET and logs the received data sizes.
6819	SyncHandler creates an HTTP handler for syncing a Go struct.
6820	connect handles HTTP requests, choosing appropriate transport, sending initial ping, and managing connection state.
6821	send locks sendingMut and forwards update to transport's send method.
6822	NumConnections returns the number of connections.
6823	Push attempts to start a push operation; if successful, it runs asynchronously.
6824	gopush manages state updates, ensuring consistency and notifying subscribers.
6825	NewOutForward initializes a forwarder connecting to multiple config servers and sends test data.
6826	Run starts tailing a log file and processes new entries.
6827	New initializes a Fluent instance with default values and connects to the server.
6828	Close closes the connection if it exists.
6829	IsReconnecting checks if Fluent is reconnecting.
6830	connect establishes a TCP connection to the server using the Fluent instance's configuration.
6831	Notification creates a new notifier with specified title, message, timeout, and empty icon path.
6832	NullNotification creates a notifier with null implementation using the provided title and message.
6833	New creates an Identity instance with specified options.
6834	Issue creates a new identity with given options.
6835	Subject sets the subject field c value.
6836	PrivateKey sets the priv field c value.
6837	NotBefore sets the notBefore field c value.
6838	NotAfter sets the notAfter field c value.
6839	IssuingCertificateURL appends values to c.issuingCertificateURL.
6840	OCSPServer appends values to c's ocspServer field.
6841	New initializes a new Telegram bot API client.
6842	NewWithWebhook initializes a Telegram bot API with a webhook and returns a handler to process incoming updates.
6843	Close closes the Telegram bot API gracefully.
6844	GetMe retrieves information about the bot itself.
6845	RunBot starts a Telegram bot using the provided API key and bot function.
6846	RunBotOnWebhook starts a bot on a webhook server and handles incoming updates using the provided bot function.
6847	NewOutgoingMessage constructs a new outgoing message object for Telegram bot API.
6848	NewOutgoingLocation creates a new OutgoingLocation message with the given recipient and coordinates.
6849	NewOutgoingVenue creates a new outgoing venue message with the given parameters.
6850	NewOutgoingVideo creates a new OutgoingVideo message with the specified recipient, file name, and reader.
6851	NewOutgoingVideoResend creates a new outgoing video message to resend.
6852	NewOutgoingPhoto creates a new outgoing photo message.
6853	NewOutgoingPhotoResend creates a new outgoing photo message for resending.
6854	NewOutgoingSticker creates a new outgoing sticker message.
6855	NewOutgoingStickerResend creates a new outgoing sticker message to resend an existing sticker identified by fileID to a specified recipient.
6856	NewOutgoingVoice creates a new outgoing voice message.
6857	NewOutgoingVoiceResend creates a new outgoing voice message with the given recipient and file ID.
6858	NewOutgoingAudio creates a new audio message for sending.
6859	NewOutgoingAudioResend creates a new OutgoingAudio message for resending an audio file to a recipient using TelegramBotAPI.
6860	NewOutgoingDocument creates a new document message for Telegram.
6861	NewOutgoingDocumentResend creates a new outgoing document message to resend using the Telegram bot API.
6862	NewOutgoingForward creates a new OutgoingForward instance for forwarding messages in Telegram.
6863	NewOutgoingChatAction creates a new OutgoingChatAction instance for the given recipient and chat action.
6864	NewOutgoingUserProfilePhotosRequest creates a new request to fetch user profile photos using the Telegram bot API.
6865	NewOutgoingKickChatMember creates a new outgoing kick chat member request.
6866	NewOutgoingUnbanChatMember creates a new outgoing unban chat member request.
6867	NewOutgoingCallbackQueryResponse creates a new outgoing callback query response.
6868	NewInlineQueryAnswer constructs an InlineQueryAnswer struct for TelegramBotAPI. Takes a queryID and slice of InlineQueryResult. Returns a pointer to InlineQueryAnswer.
6869	Type determines the message type based on its content.
6870	Type determines the type of update based on its content.
6871	MarshalJSON serializes recipient ID based on channel or chat type.
6872	querystring constructs a querystring from outgoingSetWebhook's URL field.
6873	getBaseQueryString constructs a query string based on the recipient type.
6874	getBaseQueryString constructs the base query parameters for an outgoing message.
6875	querystring constructs a URL query string from the OutgoingAudio fields.
6876	querystring constructs a querystring from base query parameters and adds optional caption parameter if present.
6877	querystring constructs a URL query string from the request parameters.
6878	querystring constructs a URL query string from OutgoingVideo properties.
6879	querystring constructs a URL query string from the outgoing voice call's properties.
6880	NewInlineQueryResultArticle creates a new inline query result article with specified ID, title, and text.
6881	NewInlineQueryResultPhoto creates a new inline query result photo with the given ID, photo URL, and thumbnail URL.
6882	NewInlineQueryResultGif constructs a new inline query result for GIFs with specified ID, GIF URL, and thumbnail URL.
6883	NewInlineQueryResultMpeg4Gif constructs a new inline query result for a MPEG-4 GIF.
6884	NewInlineQueryResultVideo constructs an inline query result video object with specified parameters.
6885	Send sends a request to retrieve user profile photos and returns the response or an error.
6886	Send sends a chat action and checks response.
6887	Send sends the inline query answer.
6888	Send sends a request to kick a chat member and checks the response.
6889	Send sends an unban chat member request and checks the response.
6890	Send sends a callback query response using the API.
6891	NewAPIClient initializes a new APIClient with the provided Configuration.
6892	BeforeInsert updates CreatedAt and UpdatedAt fields to current timestamp.
6893	ColumnName returns the quoted column name, optionally prefixed with the quoted table name.
6894	New initializes a DB connection using a specified dialect and data source name.
6895	From creates a new From instance from the given struct or pointer.
6896	Where appends a SQL condition to the query and returns a Condition object.
6897	OrderBy constructs a query condition for ordering results based on specified table, column, and order.
6898	Limit sets the limit for a query condition.
6899	Offset creates a new condition with the specified offset.
6900	Join creates a new join condition for the given table.
6901	Count constructs a COUNT SQL function with specified column arguments.
6902	Update updates the object in the database and returns the number of affected rows.
6903	Delete method removes objects from database using primary keys, handling hooks before and after deletion.
6904	Begin starts a database transaction.
6905	Commit locks database, checks for active transaction, commits it, and resets transaction pointer.
6906	Quote returns a quoted version of s using the database dialect's quoting rules
6907	SetLogOutput configures the logger's output destination based on the provided writer. If no writer is provided, it defaults to a standard logger.
6908	selectToSlice reads rows from a database query and maps them to a slice of structs.
6909	selectToValue scans SQL rows into a Go value, handling pointer types.
6910	fieldIndexByName recursively searches a struct's fields for a specified column name and returns its path as indices.
6911	columns generates SQL column names based on input interfaces.
6912	tagsFromField extracts tags from a struct field's tag string.
6913	hasSkipTag checks if the given struct field has a specific tag indicating it should be skipped.
6914	hasPKTag checks if a struct field has the 'pk' tag in its tags.
6915	isAutoIncrementable checks if the given field's type is auto-incrementable.
6916	collectFieldIndexes recursively collects field indexes based on type and index criteria.
6917	findPKIndex recursively searches struct fields to locate primary key index based on tags.
6918	sizeFromTag extracts the size value from the specified field's tag in the DB struct.
6919	columnFromTag extracts column name from struct field tag or converts field name to snake case.
6920	defaultFromTag extracts and formats the default value from a struct field's tag.
6921	Where appends a WHERE clause using condition or expression.
6922	And appends an AND condition to the query.
6923	Or appends an OR condition to the query.
6924	Like appends a query to c with type Like and argument arg.
6925	Between appends a BETWEEN query to c using from and to values.
6926	OrderBy appends ordering to query.
6927	Limit appends a query to condition with limit value.
6928	Offset appends a query to c with the specified offset.
6929	SetFormat parses and sets the format for the templateLogger.
6930	Print logs a templated message with optional arguments and duration.
6931	Print method in nullLogger struct does nothing.
6932	Quote adds backticks to a MySQL identifier, escaping any existing backticks.
6933	SQLType determines the PostgreSQL SQL type based on the Go type and options.
6934	New creates a new Archive instance from the given file, supporting both .zip and .tar formats.
6935	Disconnect disconnects the host handle and sets it to invalid.
6936	nextNetworkAdapterID finds the next available network adapter ID in a VM's configuration.
6937	totalNetworkAdapters calculates the maximum network adapter number from VMX configuration.
6938	RemoveAllNetworkAdapters removes all network adapters from the VM's VMX file.
6939	RemoveNetworkAdapter disables a network adapter on a virtual machine by editing its VMX configuration file.
6940	NetworkAdapters retrieves network adapters from a VMX file.
6941	newArchive creates a new archive object from a given path and password.
6942	GetFileReader retrieves a file reader from an archive using the specified name.
6943	ExtractToWriter extracts the specified file from the archive and writes its contents to the given writer.
6944	ExtractToFile extracts file named 'name' from archive to 'dstPath'.
6945	SharedFoldersParentDir retrieves the parent directory of shared folders for a guest.
6946	Name retrieves the snapshot's display name.
6947	Description retrieves the snapshot's description.
6948	cleanupSnapshot releases the snapshot handle if it's valid.
6949	BusTypeFromID determines the VMX bus type based on the ID prefix.
6950	Read reads VMX data from a file and unmarshals it into a VirtualMachine model.
6951	Write VMX file from model data.
6952	NewVirtualMachine initializes a VM instance from a VIX handle and VMX file path.
6953	Vcpus retrieves the number of virtual CPUs for a VM.
6954	VmxPath retrieves the VMX file path using the Vix API.
6955	MemorySize retrieves the memory size of a VM.
6956	ReadOnly checks if a VM is read-only.
6957	InVMTeam checks if VM is part of a team.
6958	PowerState retrieves the power state of a VM.
6959	ToolsState retrieves the VM's tools state, returning an error if unsuccessful.
6960	IsRunning checks if the VM is running.
6961	GuestOS retrieves VM guest OS info.
6962	cleanupVM releases the VM handle and invalidates it.
6963	updateVMX updates VMX settings after ensuring the VM is powered off.
6964	SetMemorySize updates VM's memory size ensuring divisibility by 4.
6965	SetNumberVcpus updates VM's number of virtual CPUs with validation.
6966	SetDisplayName updates VM's DisplayName using updateVMX.
6967	SetAnnotation updates VM's annotation using updateVMX.
6968	SetVirtualHwVersion updates VM's hardware version and compatibility.
6969	Error method returns formatted string containing VIX error details.
6970	Errorf formats an error message using fmt.Errorf and wraps it.
6971	Error returns the string representation of the traceable error including stack frames.
6972	string representation of stack frame.
6973	newStackFrame constructs a stack frame from program counter info.
6974	captureStack retrieves stack frames up to a specified depth, skipping a given number of initial frames.
6975	parseFuncName extracts package path and function signature from full function name.
6976	Stack logs the error along with the current stack trace.
6977	StackWithCaller logs the error along with a stack trace and caller package information.
6978	Write calls before functions then delegates to Writer.Write.
6979	ResponseStatus retrieves the HTTP response status from a writer.
6980	httpResponseStruct recursively extracts the ResponseWriter field from a nested struct until it finds an http.response type or returns the original value.
6981	SetDetectedContentType sets or returns the response's content type based on input data.
6982	New initializes a ServerError with a message and default values.
6983	New initializes a new DBError instance with given database name and message.
6984	New creates a new validation error with the specified message.
6985	New creates a new NotFoundError instance with the specified message.
6986	StrLength checks if the string length matches the specified number and panics if not.
6987	StrLenIn validates if the string length matches specified values.
6988	StrIn checks if the input string matches any of the given options and panics with an error if not.
6989	GetEmail validates the email format from the given parameter and returns it if valid.
6990	MostSpecificType returns the most specific type from a list of types. If the list is empty, it returns an error.
6991	FullTypeHierarchy generates a type hierarchy starting from the highest level type.
6992	SortTypes sorts the input slice of strings if they form a valid hierarchy, otherwise returns an error.
6993	Delete removes a key from redisStore and refreshes it.
6994	Set stores key-value pairs in Redis and returns a store object.
6995	refresh updates Redis store with values and expiration.
6996	Get retrieves all values for a given Redis store ID.
6997	Destroy is part of the RedisProvider interface.
6998	UpExpire sets an expiration time for a session ID in Redis.
6999	Use adds router handler h to the stack.
7000	ServeHTTP processes HTTP requests through a stack of handlers, setting headers and recovering from panics.
7001	Use appends middleware to Handlers and returns the RouterGroup.
7002	Group creates a new RouterGroup with combined handlers and calculated absolute path.
7003	Run starts the server with parsed command-line parameters and graceful shutdown.
7004	create initializes and returns a new Engine instance.
7005	Redirect sends HTTP response with status code and location header.
7006	Ok writes a successful JSON response using the provided data.
7007	Fail handles errors by logging them, setting response status, and writing JSON error format.
7008	ResStatus writes the response status code to the context.
7009	Next advances to the next handler if not yet written and available.
7010	GetSession retrieves the session from context data if it exists and is of type IStore.
7011	GetBodyJSON reads and parses JSON or form-encoded request body into ctx.BodyJSON.
7012	SetSession manages session data and cookies.
7013	FreshSession invalidates the session identified by the key
7014	DeleteSession removes user session data, destroys it, and clears the associated HTTP cookie.
7015	Write updates written status and calls ResponseWriter's Write method.
7016	WriteHeader sets written flag and calls ResponseWriter's WriteHeader method.
7017	New initializes a Client with the specified PEM path and optional configurations, returning a pointer to the Client or nil if an error occurs.
7018	setAllowLargeResults updates client settings for large results handling.
7019	connect establishes a BigQuery client using JWT authentication.
7020	InsertRow inserts a single row into BigQuery.
7021	AsyncQuery asynchronously queries data from the specified dataset and project using the provided query string, sending results through the data channel.
7022	Query performs a paged query on the specified dataset and project using the given query string.
7023	stdPagedQuery performs a paginated query on BigQuery and processes the results.
7024	largeDataPagedQuery executes a BigQuery query in pages and processes the results using a channel.
7025	pagedQuery performs paginated queries on a dataset using a client connection.
7026	pageOverJob fetches query results in pages, sending rows and headers to channels until complete.
7027	Count returns the total number of rows in the specified dataset table within the given dataset and project.
7028	work recursively fetches URLs based on depth and returns crawl results.
7029	subworker executes a job, handling panics and storing results.
7030	worker manages jobs for a pool, assigning IDs and signaling completion.
7031	supervisor manages job lifecycle and communication channels within a pool.
7032	Run starts the worker pool, ensuring it doesn't start if already running.
7033	Add submits a job to the pool with a function and arguments.
7034	Wait blocks until all work items have been processed.
7035	Results returns a slice of completed jobs from the pool and clears the job completion list.
7036	WaitForJob waits for a job to complete or returns nil if no more jobs are available.
7037	Status retrieves statistics from the pool's stats channel or returns a zeroed struct if the supervisor isn't running.
7038	WrapHTTPHandlerFunc wraps an HTTP handler function with context support.
7039	WebSocketHandlerFunc adapts a WebSocket handler function into an HTTP handler.
7040	StaticFile creates a new staticFile instance with content type and header.
7041	PreloadFile reads a file and returns its content type and body wrapped in a preloadFile struct.
7042	InitHtmlTemplates loads HTML templates from a pattern.
7043	InitTextTemplates parses the given pattern to initialize text templates.
7044	Html creates and returns a new HTML template with specified content type and character set.
7045	Text creates a new template with specified content type and character set.
7046	InitWatcher initializes a watcher for file system events matching a given pattern.
7047	CloseWatcher closes all watchers and then closes the watcher itself.
7048	Find searches path in Routers.locked map or linked list, returning associated values if found.
7049	Add method adds a new route to the routers with associated handler and view.
7050	NewRouters initializes a Routers instance with a map and a linked list.
7051	NewServerMux creates a new ServerMux with a default handler for not found requests.
7052	err handles errors using the registered handler if available.
7053	HandleFunc adds a route handler to ServerMux.
7054	handleError handles errors during request processing by setting response status and data accordingly.
7055	Redirect sets response status and data
7056	InitPProf registers pprof endpoints on the server mux with optional custom prefix.
7057	StartSession initializes a session using a factory function.
7058	combinations generates all possible combinations of select_num elements from the input list using a recursive approach.
7059	repeated_combinations generates all combinations of selecting 'select_num' elements from 'list', using a buffered channel 'c' to store results.
7060	permutations generates all possible permutations of a given list of integers with a specified number of selections and buffer size.
7061	repeated_permutations generates all possible permutations of a given list with repetition allowed.
7062	gformat formats a string using placeholders from a map of arguments, replacing them with corresponding values. Returns the formatted string and a list of parameters used in formatting.
7063	Errorm constructs and returns a formatted error from a template and arguments.
7064	Fprintm formats a map and prints it to w using the given format string.
7065	Printm formats and prints a message using a template and arguments.
7066	Sprintm formats a string using a map of arguments.
7067	Validate checks if a password meets specified strength requirements and returns validation status along with a message.
7068	MakeRequirements evaluates password strength requirements based on its content.
7069	sanityCheck verifies password strength requirements; returns validity status and error message if any requirement fails.
7070	password generates a random password meeting specified strength requirements.
7071	NewPassword generates a secure password based on given requirements or defaults to medium strength.
7072	NewPasswords generates n random passwords based on the specified strength requirements.
7073	addNums appends random numbers to a string until it reaches the desired digit count.
7074	punctuate adds a random number of punctuation marks to a string.
7075	deprecated_init sets Stdin based on command-line parameters or standard input.
7076	Param sets the value for a parameter in p.
7077	Parse reads parameter values from JSON input.
7078	Unmarshal decodes JSON from reader into value.
7079	GetDefaultHTTPClient initializes and returns a default HTTP client with specified timeout.
7080	DeviceInfo retrieves device details from the server.
7081	DevicePresence checks the presence of devices using their IDs.
7082	NotificationStatus fetches the notification status using the provided push ID.
7083	DeleteNotification deletes a notification by its ID using the Pushy API.
7084	NotifyDevice sends a notification to a device using Pushy API.
7085	Assert checks a condition and logs an error with caller info if false.
7086	CreateFile creates a file with the specified name and size, initializing it with zero bytes.
7087	AddError will add a new error message to the FormErrors list.
7088	AddFieldError will add an error to the specified field in FormErrors.
7089	HasErrors checks if there are any form errors or field-specific errors present.
7090	NewError creates a new FormErrors instance and adds the given error message.
7091	NewFieldError adds a field error to FormErrors and returns it.
7092	ChainHandlers chains multiple HTTP handlers together.
7093	FinalHandler wraps a handler without modification.
7094	Hash reads from a reader and returns an MD5 hash string. If the hash length is less than specified, it returns an empty string.
7095	IsHash verifies if a string is a valid MD5 hash.
7096	WithBaseDir sets the base directory for file paths in options.
7097	WithFileFindFunc sets the fileFindFunc option to the provided function.
7098	WithTemplateFromFiles adds a template from files to options.
7099	WithTemplatesFromFiles sets templates from files in Options.
7100	WithTemplateFromStrings adds a template to Options.
7101	WithTemplatesFromStrings creates an Option to set templates from string slices in Options.
7102	WithFunction adds a function to Options under the given name.
7103	WithFunctions adds functions to Options.
7104	WithDelims sets the delimOpen and delimClose fields of Options.
7105	New creates a new Templates instance with customizable options.
7106	RespondWithStatus renders a template and writes its content to the HTTP response with specified status.
7107	RespondTemplate responds with a template using default status.
7108	Respond sends a response with the given template and data.
7109	RenderTemplate renders a template with given data and returns the rendered string or error.
7110	New creates a Server using handler and Options.
7111	ServeUDP configures server address from UDP connection and serves using server instance.
7112	Shutdown stops the server gracefully.
7113	QuicHeadersHandler wraps HTTP handler to set QUIC headers.
7114	GetRequestIPs retrieves client IP addresses from HTTP request headers.
7115	DomainRedirectHandler creates a handler that redirects requests to the specified domain and port.
7116	New creates a Servers instance with default logger and recover handler, applying any provided options.
7117	Add will add a new server with the given name and address to the servers list.
7118	TCPAddr retrieves the TCP address for a server by its name.
7119	UDPAddr retrieves the UDP address for a server by name.
7120	Close stops all servers concurrently, waits for them to finish, and handles panics.
7121	Shutdown shuts down all servers concurrently and waits for them to finish.
7122	TLSListener's Accept method accepts TCP connections, sets keep-alive, reads initial byte, and wraps in TLS server if byte is 22.
7123	NewStaticFilesHandler creates a handler that serves static files from the given filesystem with the specified prefix, delegating to another handler if the file is not found.
7124	ServeHTTP handles HTTP requests for AuthHandler.
7125	MarshalJSON serializes Options to JSON format.
7126	UnmarshalJSON deserializes JSON data into Options.
7127	MarshalYAML serializes options to YAML format.
7128	UnmarshalYAML deserializes YAML data into options.
7129	NewHandler wraps an HTTP handler with logging functionality, recording request details and response status.
7130	WithPanicResponse sets panic response details on handler.
7131	WithPanicResponseHandler sets the panicResponseHandler field of Handler.
7132	New creates a Handler with a given http.Handler and optional configurations.
7133	ServeHTTP handles HTTP requests, recovering from panics and notifying about them.
7134	NewContextFunc creates a closure that retrieves values from a map based on keys.
7135	NewMapErrorRegistry creates a MapErrorRegistry instance with optional error and handler maps.
7136	Adds an error to the registry if not already registered.
7137	AddMessageError registers a new error message by code; returns an error if already registered.
7138	MustAddError panics if adding an error to the registry fails.
7139	MustAddMessageError panics if adding a message error fails
7140	Adds a handler to the registry if not already registered.
7141	MustAddHandler adds a handler for an error code; panics on failure.
7142	Handler retrieves an error handling function based on the provided error code from the registry.
7143	New creates a new Client with specified endpoint and error registry.
7144	Request sends an HTTP request using the specified method, path, query parameters, body, and acceptable content types.
7145	JSONContext sends a request with JSON content and parses the response.
7146	StreamContext sends a request using ctx and returns the response body and content type.
7147	Stream sends HTTP request using given method, path, query, body, and accepts headers; it returns response data, content type, and error.
7148	JSONUnmarshal decodes JSON data into the given interface, handling syntax and type errors with line and column details.
7149	ServeTCP starts an HTTP server on the given TCP listener, optionally enabling TLS.
7150	ServeTCP delegates TCP serving to the underlying server instance.
7151	Shutdown gracefully stops the server.
7152	HandleMethods processes HTTP requests based on method handlers, returning appropriate responses or errors.
7153	NewSetHeadersHandler returns a handler that sets specified headers before calling the original handler.
7154	New creates a new Server instance with default or provided Options.
7155	HashedPath returns the hashed path of the given path using the server's hasher, or the original path if no hasher is set. If hashing fails, it attempts to hash the path from the filename.
7156	New creates a Service instance with default logger and memory store, applying provided options.
7157	HTMLHandler wraps h to serve HTML content based on maintenance status.
7158	Status retrieves the service's operational status from its store.
7159	StatusHandler responds with the service's maintenance status or an error.
7160	OnHandler handles maintenance state changes and responds accordingly.
7161	OffHandler toggles maintenance mode off and returns success or error response.
7162	MarshalJSON serializes the PostIRCMessageRequest object to JSON.
7163	MarshalJSON converts PostArtifactRequest to JSON format.
7164	MarshalJSON serializes post artifact response using JSON format.
7165	MarshalJSON serializes HookChangedMessage as JSON.
7166	MarshalJSON serializes the trigger hook request to JSON.
7167	MarshalJSON serializes the trigger hook response as JSON.
7168	UnmarshalJSON appends JSON data to TriggerHookResponse.
7169	MarshalJSON serializes launch information using JSON format.
7170	MarshalJSON converts Var to JSON format recursively.
7171	MarshalJSON serializes Var1 as JSON.
7172	MarshalJSON serializes Var3 as JSON.
7173	MarshalJSON formats the time as a string in JSON.
7174	UnmarshalJSON parses JSON data to a time.Time value.
7175	Write writes data to the buffer at the current position, resizing if necessary. Returns the number of bytes written and any error. Updates the position accordingly.
7176	Seek updates the position within the buffer based on offset and whence, returning the new position or an error if negative.
7177	Read reads data from buffer; updates position; returns count and error.
7178	MarshalJSON serializes launch specifications response to JSON.
7179	MarshalJSON serializes RegionLaunchSpec as JSON.
7180	GenerateCode creates Go code for API definitions, including packages, types, and functions.
7181	postPopulate assigns schema URLs to API entries based on input and output fields.
7182	CreateTemporaryCredentials generates temporary credentials from permanent ones with a specified duration and optional scopes.
7183	setURL constructs a full URL from a base URL, route, and optional query parameters.
7184	SignRequest signs an HTTP request using Hawk authentication.
7185	APICall sends a request using the given payload, method, route, and query parameters, returning the response and a CallSummary object.
7186	SignedURL generates a signed URL with Hawk authentication.
7187	MarshalJSON serializes the hawk signature authentication response.
7188	bmw256 computes a 256-bit hash using the BMW algorithm on the given input.
7189	NewCubeHash initializes a CubeHash struct with values from iv array.
7190	cubehash256 computes the 256-bit hash of the input data using the CubeHash algorithm.
7191	Sum calculates multiple hashes of input data using Blake256, Keccak256, Cubehash256, Lyra2, Skein, and BMW256 algorithms.
7192	squeeze processes the input state array to generate output bytes using Blake2b hashing.
7193	reducedSqueezeRow0 squeezes rows from state into rowOut using reduced-round Blake2b.
7194	reducedDuplexRow1 applies a reduced-round transformation to a state using input from rowIn and outputs the result to rowOut.
7195	NewReaderByteCodeLoader creates a new loader using the given parser and compiler.
7196	LoadReader parses and compiles bytecode from a reader.
7197	NewV3 generates a new UUID version 3 based on the given namespace and name.
7198	txLiteral assigns the current operation's argument to st.sa and advances the state.
7199	txFetchSymbol fetches a symbol from state based on current operation argument.
7200	converts state's sa to raw string if necessary then advances state
7201	txUnmarkRaw converts st.sa to string if it's not already, then advances st.
7202	txPrint outputs the argument of a state object, handling nil and escaping HTML if necessary.
7203	txPrintRaw appends the raw representation of an argument to the state's output string and advances the state.
7204	NewLoopVar creates a new LoopVar instance for iterating over an array.
7205	txMakeArray creates an array from stack elements between two marks.
7206	txFunCallOmni handles different types of variable calls based on their reflection kind.
7207	DumpAST toggles the MaskDumpAST flag based on the boolean input.
7208	DumpByteCode toggles the MaskDumpByteCode flag based on the boolean input.
7209	Optimize bytecode by replacing certain operations.
7210	NewFuncDepot returns a FuncDepot for the specified namespace.
7211	Get retrieves function value by key from FuncDepot; returns reflect.Value and boolean indicating existence.
7212	Set stores the value v under key in FuncDepot's depot map using reflection.
7213	NewFileTemplateFetcher converts a list of relative paths to absolute paths and returns a FileTemplateFetcher instance.
7214	LastModified returns the last modified time of the file source.
7215	Reader opens the file at s.Path and returns its io.Reader.
7216	Bytes reads all bytes from the file source reader.
7217	NewState initializes a new interpreter state with default settings.
7218	PushFrame adds a new frame to the stack and returns it.
7219	PopFrame removes and processes the top frame from the state's stack.
7220	CurrentFrame retrieves the top frame from the state.
7221	Warnf formats a warning message and writes it to st.warn.
7222	AppendOutputString appends a string to the state's output buffer.
7223	Popmark removes and returns the top integer from the mark stack.
7224	CurrentMark retrieves the current mark value from the state's mark stack.
7225	LoadByteCode retrieves bytecode associated with the given key.
7226	Reset initializes state by clearing indices, references, and stacks.
7227	DeclareVar adds a variable to the frame's stack and returns its index.
7228	GetLvar retrieves a local variable from the frame's stack at a given index.
7229	SetLvar sets the i-th element of f.stack to v.
7230	NewByteCode creates a new ByteCode instance with current timestamp, empty name, no operations, and version 1.0.
7231	Append will add an operation to the bytecode's instruction list.
7232	AppendOp appends a new operation to ByteCode and returns it.
7233	String returns a human-readable representation of the bytecode.
7234	NewCachedByteCodeLoader initializes a cached bytecode loader with specified fetcher, parser, compiler, and caching strategy.
7235	Load bytecode from cache or fetch, validate, and store if necessary.
7236	NewFileCache creates a new FileCache instance with the specified directory.
7237	GetCachePath generates a cache path based on the given key.
7238	Get retrieves a cached entity from disk using a key, handling errors and decoding with Gob.
7239	Set stores CacheEntity in file using gob encoding.
7240	Delete removes the specified file cache entry.
7241	Get retrieves CacheEntity by key; returns error if cache miss.
7242	Set stores CacheEntity under key in MemoryCache, overwriting existing entry.
7243	Delete removes a key-value pair from the cache.
7244	NewStringLexer creates a lexer for parsing strings with custom tags.
7245	NewReaderLexer creates a lexer from a reader with specified symbol set and tag delimiters.
7246	NewV4 generates a version 4 UUID.
7247	Parse converts byte array to AST using ParseString.
7248	ParseReader reads input from an io.Reader and parses it into an AST.
7249	Visit returns a channel for visiting nodes in the AST.
7250	String converts AST nodes to a formatted string representation.
7251	Run executes bytecode in VM, managing state and variables.
7252	DefaultParser sets the Parser based on the Syntax argument.
7253	DefaultLoader initializes the Xslate loader with cache and template settings.
7254	DefaultVM initializes a new VM with the loader from tx and assigns it to tx.VM.
7255	Get retrieves the value associated with the key from Args. If the key does not exist, it returns nil and false.
7256	NewHTTPSource reads an HTTP response body, creates an HTTPSource object, and sets its LastModifiedTime based on the response header or current time.
7257	NewStringByteCodeLoader creates a loader for byte code from strings using the given parser and compiler.
7258	LoadString parses and compiles a string template into bytecode.
7259	Get retrieves value associated with key in map, converting non-string keys to strings. Returns value and existence boolean.
7260	NewOp creates an Op instance with the specified OpType and optional arguments.
7261	MarshalBinary converts an operation to a binary format.
7262	UnmarshalBinary parses binary data into operation type, handler, arguments, and optional comments.
7263	ArgInt converts o.uArg to an integer.
7264	ArgString returns the argument as a string, converting if necessary.
7265	AppendOp appends a virtual machine operation to the context's bytecode.
7266	Compile converts an AST to bytecode using a context and optimizer.
7267	NewV5 generates a UUID version 5 using the given namespace and name.
7268	Sort will sort a list of lexical symbols in ascending order.
7269	Lexical symbol sorter implements interface and compares symbols based on their priority.
7270	Swap will exchange two elements in a list within LexSymbolSorter.
7271	Copy creates a deep copy of a LexSymbolSet.
7272	Set updates or adds a symbol to the set with a type and priority.
7273	GetSortedList sorts the lex symbol list based on priority and length.
7274	Top retrieves the top element from a stack, returning an error if empty.
7275	Resize changes the stack's capacity to the specified size.
7276	Extend will increase the stack's size by the specified number.
7277	Grow ensures the stack's capacity meets or exceeds the minimum size.
7278	Get retrieves element at index i from stack. Returns error if index is out of range.
7279	Set updates the stack at index i with value v, resizing if necessary.
7280	Push adds a value to the stack if there's space, resizing if necessary.
7281	Pop removes and returns the top item from the stack, or nil if empty.
7282	String returns a formatted string representation of stack elements.
7283	GetHostIPs retrieves all non-docker interface IPs.
7284	GetPrivateHostIPs filters out non-private IPv4 addresses from host IPs.
7285	IsPrivate checks if the IP address is in any of the predefined private networks. Returns false if the IP is not private.
7286	Environ collects all flags from FlagSet and converts them to environment variables.
7287	getenv checks if an environment variable exists and returns its value.
7288	flagAsEnv converts a flag name to uppercase, prepends an environment prefix, and replaces dots and hyphens with underscores.
7289	NewPolicy returns a default policy configuration for validating passwords.
7290	CreateRandom generates a slice of random bytes from a given byte slice.
7291	Shuffle randomly reorders byte slice elements.
7292	Generate creates a password based on given policy parameters.
7293	ExecutableFolder returns the folder containing the executable.
7294	Ignore appends error ignore functions to Sentinel's ignore list.
7295	Sigs sets shutdown signals for a Sentinel instance.
7296	Logf sets the log function f on Sentinel s.
7297	Errorf sets the errf field of Sentinel using a provided function.
7298	New initializes a Sentinel struct with default values and applies provided options. If options fail, it returns an error. Ensures shutdown signals and error handling functions are set before returning the Sentinel instance.
7299	Run starts a sentinel service, handling server functions and graceful shutdown.
7300	Shutdown runs all registered shutdown functions with a timeout and returns the first error encountered.
7301	ShutdownIgnore checks if err should be ignored based on s.ignoreErrors functions.
7302	Register adds server and shutdown functions to Sentinel.
7303	Mux creates a new netmux instance for a given listener, registering it with the sentinel.
7304	HTTP starts an HTTP server using the given listener and handler, applying optional configurations and registering it with the sentinel.
7305	IgnoreError creates a function that checks if errors match.
7306	IgnoreNetOpError checks if the error is a network operation error indicating a closed connection.
7307	convertAndAppendContextFuncs converts and appends interface functions to a slice of context error funcs.
7308	router constructs an HTTP router with routes for services and handles health checks.
7309	buildInfoHandler responds with "build-info" to HTTP requests.
7310	Encode converts Go values to JSON.
7311	Json parses JSON from HTTP request body into struct, validates it, and sets values on ifacePtr.
7312	validateAndMap validates obj using Martini's validation middleware, combines errors, maps obj and optionally ifacePtr to context.
7313	Count returns the total number of errors in Overall and Fields combined.
7314	Header constructs a map of CORS headers based on the allowed origins, methods, and options.
7315	PreflightHeader generates CORS headers based on allowed origins, methods, and headers.
7316	IsOriginAllowed checks if the given origin matches any of the allowed patterns. Returns true if allowed.
7317	Allow sets CORS headers based on request method and origin.
7318	Renderer creates a Martini handler for rendering templates with options.
7319	String method formats accept languages as a comma-separated list.
7320	Languages middleware sets context map with parsed accept languages from request header.
7321	Prefix middleware trims the request path based on the given prefix or returns 404 if not found.
7322	Basic generates an HTTP handler that checks for basic authentication credentials.
7323	UpdateUser updates the session with the user's unique ID.
7324	GetById fetches user record from database using specified ID. Returns error if not found.
7325	AddressToAccountId converts a Stellar address to an account ID.
7326	MutateChangeTrust updates the trust line for non-native assets.
7327	MutateChangeTrust updates the trust limit on an operation.
7328	Trust constructs a transaction to issue a trust asset with optional limits.
7329	RemoveTrust constructs a trust change with specified parameters.
7330	MutatePayment adjusts payment or path payment operations based on credit amount details.
7331	MutatePayment updates payment destination based on operation type
7332	MutatePayment updates payment or path payment operation based on the input amount.
7333	MutatePayment updates payment details based on input object.
7334	MutateAccountMerge updates the destination account ID in the builder.
7335	MustParse parses a string and panics if it fails.
7336	Parse converts a string to an xdr.Int64 using big.Rat for precise arithmetic.
7337	String converts an Int64 to a string representation.
7338	CreateOffer constructs a new offer using a rate and amount.
7339	CreatePassiveOffer builds a passive offer using the given rate and amount.
7340	UpdateOffer updates the specified offer with new rate and amount.
7341	DeleteOffer creates a ManageOfferBuilder for removing an offer.
7342	ManageOffer initializes a builder with passive offer status and mutates it with additional properties.
7343	Mutate applies a series of mutations to manage offer or operation based on the mutator type.
7344	MutateManageOffer updates offer amount based on operation type
7345	MutateManageOffer updates the offer ID in a ManageOfferOp object.
7346	MutateManageOffer updates the selling, buying, and price fields of an offer based on the rate.
7347	MutateOperation sets the source account of an operation using the address or seed of the SourceAccount instance.
7348	String method converts Price to a floating-point number string.
7349	Transaction builds a transaction by applying a series of mutators followed by default settings.
7350	Mutate applies transactional mutations to the builder's transaction object.
7351	Hash generates a transaction hash using NetworkID, EnvelopeTypeTx, and TX. If any step fails, it returns an empty byte array and the error.
7352	HashHex converts transaction hash to hexadecimal string.
7353	Sign signs a transaction with given signers.
7354	MutateTransaction adds an allow trust operation to the transaction builder.
7355	MutateTransaction adds a change trust operation to the transaction builder.
7356	MutateTransaction appends a create account operation to the transaction builder.
7357	MutateTransaction adjusts transaction fee and network ID based on builder content.
7358	MutateTransaction adds inflation operation to transaction builder.
7359	MutateTransaction adds a manage data operation to the transaction builder if no errors occurred.
7360	MutateTransaction modifies transaction builder based on offer type.
7361	MutateTransaction updates a transaction builder's memo with a hash value.
7362	MutateTransaction updates TransactionBuilder's memo with MemoID value.
7363	MutateTransaction sets the memo return value on the transaction builder.
7364	MutateTransaction updates TransactionBuilder with memo text.
7365	MutateTransaction updates TransactionBuilder's NetworkID.
7366	MutateTransaction modifies the transaction builder based on payment type and appends the operation.
7367	MutateTransaction appends a new operation to the transaction builder.
7368	MutateTransaction updates the transaction's sequence number.
7369	MutateTransaction updates the source account on a transaction builder.
7370	Scan assigns integer value to Int64 variable.
7371	InitialState retrieves the initial state from bundle changes.
7372	Changes returns ledger entry changes for a target up to max int32.
7373	StateAfter retrieves the last ledger entry change for a given key and operation index.
7374	changes filters ledger entry changes based on target key and maximum operations.
7375	MustDecode decodes a versioned byte slice from a source string or panics on error.
7376	Encode encodes data with a version byte, payload, and checksum using Base32 encoding.
7377	MustEncode encodes data using a specific version and panics on error.
7378	checkValidVersionByte returns error if the version byte is neither AccountID nor Seed.
7379	Checksum calculates CRC-16 checksum for input data and returns it as a byte slice.
7380	Validate checks if the data's checksum matches the expected value.
7381	LedgerKey returns the key associated with the ledger entry change.
7382	checkPlausible verifies all runes in prefix are part of the base32 alphabet; otherwise, it exits with an error.
7383	Address returns the encoded account ID based on the key type.
7384	Equals checks if two AccountIds are equivalent based on their types and values. For Ed25519 keys, it compares the key values directly; otherwise, it panics for unknown types.
7385	SetAddress decodes and validates an address, setting it on aid.
7386	ToXdrObject converts an Asset to an XDR object based on its properties.
7387	Through appends asset to Path in PayWithPath.
7388	PayWith constructs a PayWithPath instance with specified asset and maximum amount.
7389	continuedFraction calculates the XDR price using a continued fraction approximation method.
7390	Apply transaction envelope mutations sequentially.
7391	MutateTX applies multiple mutations to the transaction envelope builder's child.
7392	Bytes marshals the transaction envelope to bytes.
7393	Base64 encodes bytes from TransactionEnvelopeBuilder.
7394	MutateTransactionEnvelope modifies the TransactionEnvelopeBuilder's transaction envelope.
7395	MutateSetOptions sets the HomeDomain field on o to m, validating length first.
7396	MutateSetOptions sets the InflationDest field of xdr.SetOptionsOp using m's value.
7397	MutateSetOptions sets the MasterWeight field o value.
7398	MutateSetOptions modifies o's Signer field with m's Weight and PublicKey.
7399	SetThresholds creates a new Thresholds object with specified low, medium, and high values.
7400	MutateSetOptions updates threshold settings on o based on m values.
7401	MutateSetOptions modifies the SetFlags field of o with m's value.
7402	MutateSetOptions updates ClearFlags in SetOptionsOp based on input flag.
7403	MutateCreateAccount updates the destination account ID based on the address or seed.
7404	MutateCreateAccount updates the StartingBalance of a CreateAccountOp.
7405	Random generates a new Full keypair using a random seed.
7406	Master generates a keypair from a network passphrase.
7407	Parse attempts to decode a seed or address returning a KP instance.
7408	MustParse parses an address or seed string and panics on failure.
7409	MutateAllowTrust updates o's Authorize field with m's Value.
7410	MutateAllowTrust sets the asset type and code based on the length of m.Code.
7411	MutateAllowTrust updates the trustor's account ID on the AllowTrust operation.
7412	ToAsset creates an asset from AllowTrustOpAsset based on its type.
7413	SetNative initializes Asset with native type.
7414	String returns a human-readable representation of the asset.
7415	Equals compares two assets based on their type and properties.
7416	MustExtract extracts asset data and panics on error.
7417	Unmarshal reads data from io.Reader and unmarshals it into the provided value, returning the number of bytes read and any error encountered.
7418	Marshal serializes the given value using XDR format and writes it to the writer.
7419	ValidEnum checks if the enum value is valid.
7420	NewPublicKey creates a new public key based on type and value.
7421	MustEd25519 retrieves the Ed25519 value from a PublicKey or panics if not set.
7422	NewNodeId generates a NodeId from a public key created with the specified CryptoKeyType and value.
7423	NewAccountId generates a new AccountId from a public key of the specified type and value.
7424	ValidEnum checks if an integer value represents a valid enum in the AssetType context.
7425	ArmForSwitch determines the asset type based on the switch value.
7426	NewAsset creates an asset based on its type and value.
7427	MustAlphaNum4 panics if asset's AlphaNum4 is unset; otherwise, it returns the value.
7428	GetAlphaNum4 retrieves the AlphaNum4 asset if available.
7429	MustAlphaNum12 returns the AssetAlphaNum12 value, panicking if it's not set.
7430	GetAlphaNum12 retrieves AlphaNum12 asset details if available.
7431	ValidEnum checks if a value is a valid enum in the ThresholdIndexes map.
7432	ValidEnum checks if the given integer value is a valid enum in LedgerEntryType.
7433	ValidEnum checks if the integer value is a valid enum in AccountFlags.
7434	NewAccountEntryExt creates an AccountEntryExt instance with specified values.
7435	ValidEnum checks if a value is a valid enum for TrustLineFlags.
7436	NewTrustLineEntryExt creates a new TrustLineEntryExt instance with V set to v.
7437	ValidEnum checks if an integer is a valid enum value for OfferEntryFlags.
7438	NewOfferEntryExt creates an OfferEntryExt instance with V set to v.
7439	NewDataEntryExt creates a new DataEntryExt instance with integer v and interface value.
7440	NewLedgerEntryData creates a LedgerEntryData based on type and value.
7441	NewLedgerEntryExt creates a LedgerEntryExt instance with V set to v.
7442	ValidEnum checks if the given enum value is supported.
7443	ValidEnum checks if the given int32 is a valid OperationType enum value.
7444	ArmForSwitch determines asset type based on input integer and returns corresponding code or "-" along with boolean flag.
7445	NewAllowTrustOpAsset creates an AllowTrustOpAsset based on asset type and value.
7446	MustAssetCode4 returns the asset code or panics if not set.
7447	GetAssetCode4 retrieves the AssetCode4 asset based on the operation type.
7448	MustAssetCode12 returns the asset code 12 byte array or panics if not set.
7449	GetAssetCode12 retrieves the asset code for type 12.
7450	NewOperationBody creates an OperationBody based on the operation type and associated value.
7451	MustCreateAccountOp returns the CreateAccountOp value or panics if not set.
7452	GetCreateAccountOp retrieves the create account operation if applicable
7453	MustPaymentOp retrieves the payment operation or panics if not set.
7454	GetPaymentOp retrieves payment operation based on switch type.
7455	MustPathPaymentOp retrieves PathPaymentOp from OperationBody or panics if not set.
7456	GetPathPaymentOp retrieves PathPaymentOp from OperationBody if available.
7457	MustManageOfferOp panics if arm ManageOfferOp is not set; otherwise, returns its value.
7458	GetManageOfferOp retrieves the manage offer operation if applicable.
7459	MustCreatePassiveOfferOp panics if CreatePassiveOfferOp is not set.
7460	GetCreatePassiveOfferOp retrieves the create passive offer operation if applicable.
7461	MustSetOptionsOp retrieves the SetOptionsOp from OperationBody or panics if not set.
7462	GetSetOptionsOp retrieves SetOptionsOp from OperationBody based on Type.
7463	MustChangeTrustOp returns the ChangeTrustOp value from OperationBody, panicking if not set.
7464	GetChangeTrustOp retrieves the change trust operation if applicable.
7465	MustAllowTrustOp returns the AllowTrustOp value or panics if not set.
7466	GetAllowTrustOp retrieves the AllowTrustOp operation body if applicable.
7467	MustDestination retrieves the destination account ID from OperationBody, panicking if not set.
7468	GetDestination retrieves the account ID and validation status for the destination.
7469	MustManageDataOp retrieves ManageDataOp from OperationBody or panics if not set.
7470	GetManageDataOp retrieves the manage data operation based on the switch type.
7471	ValidEnum checks if the given integer is a valid enum value for MemoType.
7472	ArmForSwitch returns a string and boolean based on input integer.
7473	NewMemo creates a new memo object based on type and validates the input value accordingly.
7474	MustText returns the text value from Memo, panicking if not set.
7475	GetText retrieves text from a memo based on its type.
7476	MustId retrieves the memoized ID, panicking if not set.
7477	GetId retrieves the ID from Memo if available.
7478	MustHash retrieves a hash value or panics if not set.
7479	GetHash retrieves the hash value associated with a memo object based on its type.
7480	MustRetHash panics if arm RetHash is not set and returns it otherwise.
7481	NewTransactionExt creates a new transaction extension with a given integer and value.
7482	ValidEnum checks if v is a valid CreateAccountResultCode enum value.
7483	ArmForSwitch determines if account creation was successful based on the switch value.
7484	NewCreateAccountResult initializes a new CreateAccountResult instance based on the given code and value.
7485	ValidEnum checks if the payment result code is valid.
7486	ArmForSwitch prepares payment result for switch processing based on its code.
7487	NewPaymentResult initializes a PaymentResult based on the given code and value.
7488	ValidEnum checks if the given integer value is a valid enum in PathPaymentResultCode.
7489	ArmForSwitch converts PathPaymentResult to switch format.
7490	NewPathPaymentResult constructs a PathPaymentResult based on the given code and value.
7491	MustNoIssuer returns the asset value of NoIssuer or panics if not set
7492	GetNoIssuer retrieves the asset and flag indicating if issuer is absent.
7493	ValidEnum checks if the given integer is a valid enum value for ManageOfferResultCode.
7494	ValidEnum checks if the offer effect enum value is valid.
7495	ArmForSwitch determines if an offer should be armed based on its effect.
7496	NewManageOfferSuccessResultOffer creates a success result based on the manage offer effect and value.
7497	ArmForSwitch returns success status based on switch value.
7498	NewManageOfferResult creates a manage offer result based on the given code and value.
7499	ValidEnum checks if the given integer is a valid Enum value.
7500	ArmForSwitch checks switch code and returns success status.
7501	NewSetOptionsResult creates a new SetOptionsResult instance with given code and value.
7502	ValidEnum checks if the given integer is a valid enum value for ChangeTrustResultCode.
7503	ArmForSwitch processes switch codes and returns success status.
7504	NewChangeTrustResult creates a new ChangeTrustResult instance based on the given code and value.
7505	ValidEnum checks if v is a valid AllowTrustResultCode enum value.
7506	ArmForSwitch determines if trust was granted based on the switch value.
7507	NewAllowTrustResult creates a new AllowTrustResult instance based on the provided code and value.
7508	ValidEnum checks if the given integer is a valid enum value.
7509	ArmForSwitch determines the source account balance based on merge result code.
7510	NewAccountMergeResult creates an account merge result based on the given code and value.
7511	MustSourceAccountBalance returns the source account balance or panics if not set.
7512	GetSourceAccountBalance retrieves the balance from the source account if available.
7513	ValidEnum checks if the given value is a valid inflation result code.
7514	ArmForSwitch determines whether payouts can be made based on inflation result code.
7515	NewInflationResult creates an inflation result based on the given code and value.
7516	MustPayouts returns the inflation payouts or panics if not set
7517	GetPayouts retrieves inflation payouts based on switch code.
7518	ValidEnum checks if a value is valid for the ManageDataResultCode enum.
7519	ArmForSwitch prepares data for switching based on result code.
7520	NewManageDataResult creates a new ManageDataResult instance with the given code and value.
7521	ValidEnum checks if the integer is a valid Operation Result Code enum value.
7522	ArmForSwitch returns the operation result type based on the switch parameter.
7523	NewOperationResultTr initializes an OperationResultTr based on the operation type and value.
7524	MustCreateAccountResult retrieves the CreateAccountResult from OperationResultTr or panics if not set.
7525	GetCreateAccountResult retrieves the create account result based on operation type.
7526	MustPaymentResult returns the payment result or panics if not set
7527	GetPaymentResult retrieves payment result based on operation type.
7528	MustPathPaymentResult panics if PathPaymentResult is not set; otherwise, returns it.
7529	GetPathPaymentResult fetches the payment result for a given operation type.
7530	MustManageOfferResult panics if arm ManageOfferResult is not set and returns it otherwise.
7531	GetManageOfferResult retrieves the manage offer result based on operation type.
7532	MustCreatePassiveOfferResult panics if CreatePassiveOfferResult is not set; otherwise, returns it.
7533	MustSetOptionsResult returns the SetOptionsResult value or panics if not set.
7534	GetSetOptionsResult retrieves the SetOptionsResult from OperationResultTr based on Type.
7535	MustChangeTrustResult returns the ChangeTrustResult value or panics if not set.
7536	GetChangeTrustResult retrieves the ChangeTrustResult based on operation type.
7537	MustAllowTrustResult returns AllowTrustResult from OperationResultTr or panics if not set.
7538	GetAllowTrustResult retrieves AllowTrustResult if available.
7539	MustAccountMergeResult panics if AccountMergeResult is not set, otherwise returns it.
7540	GetAccountMergeResult retrieves the account merge result based on operation type.
7541	MustInflationResult panics if inflation result is not set, otherwise returns it
7542	GetInflationResult retrieves inflation result based on operation type.
7543	MustManageDataResult returns the ManageDataResult value or panics if not set.
7544	GetManageDataResult retrieves manage data result based on operation type.
7545	ArmForSwitch returns a string based on the operation result code.
7546	NewOperationResult creates an OperationResult based on the given code and value.
7547	MustTr panics if arm Tr is not set; otherwise, it returns the Tr value.
7548	GetTr retrieves the Tr value if arm name matches "Tr".
7549	ValidEnum checks if the given value is a valid enum in the TransactionResultCode map.
7550	ArmForSwitch processes transaction outcomes and returns corresponding status strings.
7551	NewTransactionResultResult creates a transaction result based on the given code and value.
7552	MustResults returns the transaction results or panics if not set
7553	GetResults retrieves the operation results based on the transaction code.
7554	NewTransactionResultExt creates a new transaction result with an integer and interface value.
7555	NewStellarValueExt creates a new StellarValueExt instance with given values.
7556	NewLedgerHeaderExt initializes a LedgerHeaderExt instance with given values.
7557	ValidEnum checks if the ledger upgrade type enum value is valid.
7558	ArmForSwitch determines the ledger upgrade type based on input sw.
7559	NewLedgerUpgrade creates a LedgerUpgrade based on type and value.
7560	MustNewLedgerVersion returns the new ledger version or panics if not set.
7561	GetNewLedgerVersion retrieves the new ledger version based on the upgrade type.
7562	MustNewBaseFee retrieves the new base fee from the ledger upgrade or panics if not set.
7563	GetNewBaseFee retrieves the new base fee based on the upgrade type.
7564	MustNewMaxTxSetSize retrieves the NewMaxTxSetSize from u, panicking if not set.
7565	GetNewMaxTxSetSize retrieves the new maximum transaction set size for the ledger upgrade.
7566	ArmForSwitch returns the type of ledger entry for the given switch value.
7567	NewLedgerKey creates a LedgerKey based on type and value.
7568	ValidEnum checks if a value is a valid enum in the bucket entry type map.
7569	ArmForSwitch determines bucket entry type and returns corresponding string and boolean flag.
7570	NewBucketEntry creates a BucketEntry based on the type and value provided.
7571	MustLiveEntry returns the live entry value or panics if not set.
7572	GetLiveEntry retrieves the live ledger entry if available.
7573	MustDeadEntry retrieves the ledger key of a bucket entry, panicking if it's not set.
7574	GetDeadEntry retrieves the ledger key for a dead entry if applicable.
7575	NewTransactionHistoryEntryExt creates a new TransactionHistoryEntryExt instance with V set to v.
7576	ArmForSwitch returns arm name based on switch value.
7577	NewTransactionHistoryResultEntryExt creates a new TransactionHistoryResultEntryExt instance with specified values.
7578	NewLedgerHeaderHistoryEntryExt creates a new LedgerHeaderHistoryEntryExt instance with V set to v.
7579	NewScpHistoryEntry creates a new ScpHistoryEntry instance with given version and value.
7580	ValidEnum checks if a given integer is a valid enum value for LedgerEntryChangeType.
7581	ArmForSwitch determines the action based on ledger entry change type.
7582	NewLedgerEntryChange creates a new LedgerEntryChange based on type and value.
7583	MustCreated panics if arm Created is not set; otherwise, it returns the created value.
7584	GetCreated returns the created ledger entry if applicable.
7585	MustUpdated panics if arm Updated is not set and returns the updated value otherwise.
7586	GetUpdated returns the updated ledger entry if available.
7587	MustRemoved retrieves the removed ledger key or panics if not set.
7588	GetRemoved checks if the ledger entry change represents a removal and returns the removed key if so.
7589	MustState panics if the ledger entry state is not set; otherwise, it returns the state.
7590	GetState retrieves the state from the ledger entry change if applicable.
7591	NewTransactionMeta creates transaction metadata based on input values.
7592	MustOperations returns a slice of OperationMeta from TransactionMeta, panicking if unset.
7593	GetOperations retrieves operations metadata for a transaction based on its switch value.
7594	ValidEnum checks if an integer value is a valid enum in the ErrorCode.
7595	ValidEnum checks if the given integer is a valid enum value.
7596	ArmForSwitch returns IP address type based on switch value.
7597	NewPeerAddressIp creates a PeerAddressIp instance based on the given type and value.
7598	MustIpv4 returns the IPv4 address as a 4-byte array, panicking if not set.
7599	GetIpv4 retrieves the IPv4 address if available; otherwise, it returns false.
7600	MustIpv6 panics if IPv6 is not set; otherwise, it returns the IPv6 value.
7601	GetIpv6 retrieves IPv6 address if available.
7602	ValidEnum checks if a value is a valid message type enum.
7603	ArmForSwitch maps switch values to corresponding message types.
7604	NewStellarMessage creates a StellarMessage based on the message type and its corresponding value.
7605	MustError panics if arm Error is not set and returns it otherwise.
7606	GetError retrieves the error from the StellarMessage if it exists.
7607	MustHello retrieves the Hello value from StellarMessage, panicking if it's not set.
7608	GetHello retrieves the hello message if available.
7609	MustAuth retrieves the authentication value or panics if not set.
7610	GetAuth retrieves authentication details based on message type.
7611	MustDontHave retrieves the DontHave value from the StellarMessage, panicking if it's not set.
7612	GetDontHave retrieves the value of 'DontHave' based on the message type.
7613	MustPeers returns the peers of a stellar message or panics if not set.
7614	StellarMessage.GetPeers retrieves peer addresses if arm name matches "Peers".
7615	MustTxSetHash panics if arm TxSetHash is not set; otherwise, it returns its value.
7616	GetTxSetHash retrieves the transaction set hash for a Stellar message.
7617	MustTxSet retrieves the transaction set from StellarMessage or panics if not set.
7618	GetTxSet retrieves the transaction set if the arm name matches "TxSet".
7619	MustTransaction retrieves the transaction envelope from the Stellar message, panicking if not set.
7620	StellarMessage.GetTransaction retrieves transaction envelope if arm name matches.
7621	MustQSetHash retrieves the QSetHash value from StellarMessage or panics if not set.
7622	GetQSetHash retrieves QSetHash from StellarMessage based on type.
7623	MustQSet panics if arm QSet is not set and returns the QSet otherwise.
7624	StellarMessage.GetQSet retrieves the Quorum Set based on the message type.
7625	MustEnvelope returns the envelope from StellarMessage or panics if it's not set.
7626	GetEnvelope retrieves the SCP envelope if the message type corresponds.
7627	MustGetScpLedgerSeq retrieves the SCP ledger sequence number from the message, panicking if not set.
7628	GetGetScpLedgerSeq retrieves SCP ledger sequence number based on message type.
7629	ArmForSwitch returns version and status based on switch input.
7630	NewAuthenticatedMessage creates an AuthenticatedMessage based on the given Uint32 and value.
7631	ValidEnum checks if the provided value is a valid enum for ScpStatementType.
7632	ArmForSwitch determines SCP statement type for switch operation.
7633	NewScpStatementPledges creates SCP statement pledges based on type and value.
7634	MustPrepare retrieves the SCP statement preparation or panics if not set.
7635	GetPrepare retrieves the prepare statement for a SCP pledge based on its type.
7636	MustConfirm retrieves the confirmed value or panics if not set.
7637	GetConfirm retrieves the confirmation statement for a SCP pledge.
7638	MustExternalize retrieves the externalize value or panics if not set.
7639	GetExternalize checks if SCP statement type corresponds to externalization and returns it if so.
7640	MustNominate retrieves the nomination value or panics if not set.
7641	GetNominate returns nomination if arm name is Nominate.
7642	SafeUnmarshalBase64 safely decodes base64 data into dest, ensuring full consumption.
7643	SafeUnmarshal safely parses data into dest, ensuring all input is consumed.
7644	SendAmount calculates the total amount bought in successful path payments using the first asset bought in offers.
7645	LoadAccount fetches details for a specified account using its ID.
7646	SequenceForAccount loads account and returns its sequence number.
7647	SubmitTransaction submits a transaction envelope XDR and decodes the response.
7648	Equals checks if two LedgerKeys are equivalent based on their types and specific fields.
7649	SetAccount updates the key's account field with the provided AccountId.
7650	SetData updates key with new account and name, returning error if failed.
7651	SetOffer sets the Offer field key value.
7652	SetTrustline updates the key with a new trustline entry.
7653	Add will add a key-value pair to CHDBuilder.
7654	tryHash updates a hash table with new entries, checking for duplicates and updating indices.
7655	HashIndexFromKey computes the hash index for a given key using a hasher function and bucket count.
7656	ReadInt reads a little-endian 32-bit unsigned integer from the slice.
7657	Read reads all bytes from the reader and maps them to a CHD structure.
7658	Get retrieves a value from a hash table using a key.
7659	Iterate method returns an Iterator instance for CHD.
7660	Write serializes CHD data to an io.Writer using binary encoding.
7661	RegisterDatasources registers mapnik datasources from a given path.
7662	RegisterFonts registers font files from the specified path with Mapnik.
7663	New returns a new Map instance with specified width and height.
7664	NewSized creates a new Map instance with specified dimensions.
7665	Load stylesheet into mapnik map.
7666	Resize resizes the map dimensions and updates m's width and height.
7667	Free releases resources associated with the Map instance.
7668	SRS retrieves the spatial reference system from map m.
7669	ZoomAll adjusts the map's zoom level to fit all features.
7670	ZoomTo updates the map's zoom level based on the given bounding box coordinates.
7671	Render maps content to image based on options.
7672	RenderImage scales and renders a map to an NRGBA image.
7673	RenderToFile renders the map to a file with specified options.
7674	SetBufferSize sets the buffer size for map m using C API.
7675	Search sends a request and reads responses from devices within a timeout period.
7676	Get retrieves a connection from the blocking pool or times out after a specified duration.
7677	put adds a connection to the blocking pool if possible.
7678	MonoToStereoF32 converts mono audio buffer to stereo by duplicating each sample.
7679	BitCrush reduces audio sample rate by crushing amplitude.
7680	NormalizeMax scales the audio buffer so its maximum absolute value is 1.
7681	Gain adjusts the audio buffer's data by multiplying each value with the given factor.
7682	MonoDownmix converts a multi-channel audio buffer to mono by averaging channel data.
7683	Quantize adjusts audio buffer values to specified bit depth.
7684	PCMScale adjusts audio buffer data according to bit depth.
7685	StereoPan adjusts the balance of a stereo audio buffer based on the pan value.
7686	Leader returns the current leader of the follower.
7687	IsLeader checks if the candidate is the leader.
7688	NewResponse creates a new Response struct with specified client ID, redirect URI, user ID, expiration, and code.
7689	GetRequestID retrieves the request ID from the context or returns an error if not present.
7690	Log formats and outputs the monitorable writer's data based on options and conditions.
7691	SendMailSSL establishes an SSL connection to an SMTP server, authenticates if needed, and sends an email message.
7692	Send sends an email message using SMTP.
7693	WaitForIt waits for a TCP or HTTP service to become available at the specified host and port within a given timeout period.
7694	Get retrieves configuration based on input source and environment.
7695	initConfig sets up configuration using Viper, reading from a specified file or default locations, and enabling environment variable overrides.
7696	WritePluginResultsToDatabase inserts or updates plugin results in the RethinkDB database based on the sample ID.
7697	NewAuthController creates a new authentication controller using the provided user manager and configuration.
7698	Authenticate handles HTTP requests to authenticate users and returns JSON web tokens.
7699	NewOAuth2Controller creates a new OAuth2Controller instance with the provided configuration and application manager.
7700	OAuth2Controller handles token refresh requests, validating refresh tokens and issuing new access tokens.
7701	Token generates JWT access and refresh tokens from authorization code.
7702	Logging wraps HTTP handler to log request details.
7703	SingleFile serves a file at the specified path.
7704	Write data to response writer and update length.
7705	Hijack attempts to hijack the connection if ResponseWriter implements http.Hijacker interface; otherwise, it returns an error.
7706	NewMongo initializes a MongoDB client with connection details from a configuration file and verifies its connectivity.
7707	Disconnect closes MongoDB connection gracefully handling potential errors.
7708	New creates a new table with specified fields.
7709	PrintTable prints a table with specified fields and rows.
7710	PrintHorizontal prints a horizontal table from a map.
7711	PrintRow prints a table row with specified fields and data.
7712	AddRow inserts a new formatted row into the table.
7713	Print outputs table rows and footer, handling markdown and headers.
7714	String renders table as markdown or text based on Markdown flag.
7715	getHead constructs a header row from table fields.
7716	rowString constructs a formatted string representation of a table row.
7717	fieldString pads a value to match a specified width based on predefined field sizes.
7718	stringTableDash returns the dash representation of the table based on its markdown flag
7719	printMarkdownDash prints a markdown table row separator.
7720	stringMarkdownDash generates a markdown dash row based on table fields.
7721	HashPassword generates a secure password hash using the provided password and salt.
7722	EncodeOAuth2Code generates an OAuth2 code using client ID, redirect URI, user ID, and shared key.
7723	DecodeOAuth2Code verifies and decodes the OAuth2 code using the shared key.
7724	NewServer initializes a new HTTP server with logging configured based on the given filename and environment.
7725	Start initializes and runs a server on a specified port, handling SSL if configured.
7726	Stop signals server shutdown or logs error if already stopped.
7727	NewLoggingServeMux creates a new LoggingServeMux instance.
7728	Handler retrieves handler and pattern from serveMux.
7729	Handle adds logging middleware to HTTP handlers using LoggingServeMux.
7730	HandleFunc adds logging before calling handler on LoggingServeMux.
7731	Init initializes the Elasticsearch connection and creates the index if it doesn't exist.
7732	WaitForConnection attempts to establish a connection to Elasticsearch within a specified timeout. It retries until successful or times out.
7733	StoreFileInfo stores file information in Elasticsearch using provided plugins and sample data.
7734	StorePluginResults updates or creates plugin results in Elasticsearch based on the provided data.
7735	CamelCase converts the input string to camel case format.
7736	Getopt retrieves environment variable or default value
7737	Getopts retrieves the first non-empty value from userInput, envVar, or dfault.
7738	GetSHA256 computes the SHA256 hash of the file named 'name'
7739	RunCommand executes the given command with optional context and returns its output or error. If context times out, it returns a timeout error.
7740	RemoveDuplicates removes duplicate strings from a slice and returns the unique elements.
7741	Unzip extracts files from the given archive to the specified target directory.
7742	SliceContainsString checks if any element in the list contains the substring 'a'.
7743	NewSMTP initializes an SMTP client using configuration from a file, handling SSL based on settings.
7744	SendMail sends an email using SMTP.
7745	Get environment configuration by name. If not found, return nil.
7746	GetSMTP retrieves SMTP configuration from source based on environment.
7747	GetConfig retrieves configuration settings based on source and environment.
7748	Get environment configuration by name, return nil if not found.
7749	GetMongo retrieves the MongoDB configuration from a source for a given environment.
7750	TokenHandler wraps an HTTP handler with JWT authentication, allowing access only to protected routes.
7751	Receive processes incoming XMPP stanzas and returns parsed messages.
7752	Send sends an outgoing message.
7753	allBoshReleaseNames collects unique BOSH release names from two releases.
7754	AddedProperty adds a property to DeltaJob's AddedProperties map.
7755	RemovedProperty adds a removed property to DeltaJob's map.
7756	AddDeltaJob appends the DeltaJob to Result's DeltaJob slice.
7757	Concatenate DeltaJob from another Result instance.
7758	Read opens the local copy of a release file.
7759	Pull downloads a release from a location and caches it locally.
7760	BuildJob creates job files and writes metadata.
7761	LoadBoshRelease reads a BOSH release from the given repository at the specified path.
7762	readBoshRelease reads a BOSH release from a reader and returns its manifest.
7763	readBoshRelease parses BOSH release files from a reader.
7764	readBoshJob reads a BOSH job manifest from a tarball reader and decodes it into an enaml JobManifest object.
7765	NewRequest creates a new HTTP request with authentication.
7766	PushCloudConfig sends cloud config manifest to BOSH server and handles response.
7767	Generate processes a job manifest to create Go structs and writes them to disk.
7768	CreateNewRecord splits property by "." and initializes a Record with its elements, length, original property, and YAML manifest.
7769	NewShowCmd creates a ShowCmd instance with a release repository and release version.
7770	All prints BOSH releases to writer based on file extension.
7771	GetDefaultTaskImageResource constructs an ImageResource using default values.
7772	AddRawJob adds a raw job configuration to the pipeline's jobs list.
7773	AddGroup will add a group configuration with specified name and jobs to the pipeline.
7774	GetResourceByName retrieves a resource config by name from ConcoursePipeline. Returns nil if not found.
7775	AddRawResource appends a raw resource config to the pipeline's resources.
7776	AddResource adds a resource configuration to ConcoursePipeline.
7777	AddGithubResource adds a GitHub resource to the pipeline.
7778	AddBoshIOResource adds a BOSH I/O resource with the given name and source to the pipeline.
7779	AddBoshDeploymentResource adds a bosh deployment resource to the pipeline.
7780	AddGitResource adds a Git resource with the specified name and source to the pipeline.
7781	allJobNames collects unique job names from two BOSH releases.
7782	NewDeploymentManifestFromFile reads deployment manifest from file and creates new DeploymentManifest instance.
7783	NewDeploymentManifest creates a DeploymentManifest object from YAML bytes.
7784	AddRemoteRelease appends a new remote release to the deployment manifest.
7785	AddRemoteStemcell adds a new stemcell to DeploymentManifest.
7786	Tag retrieves the value associated with a key from Tags map.
7787	RemoveTag deletes a tag from the deployment manifest.
7788	LoadPivnetRelease pulls a Pivnet release from a repository and reads it into a PivnetRelease object.
7789	BoshReleaseOrEmpty returns the Bosh release named `name` or an empty one if it doesn't exist.
7790	readPivnetRelease extracts BOSH releases from a ZIP file.
7791	decodeYaml reads YAML data from reader and unmarshals it into value
7792	NewZipWalker creates a new walker for a ZIP file with specified callbacks for matching entries.
7793	NewDiffCmd creates a new DiffCmd instance for comparing two releases using a release repository.
7794	All computes the difference between two releases and prints it to the writer.
7795	Job generates a diff report for specified release job and outputs it to writer.
7796	New creates a differ instance based on the release type.
7797	StructName generates a struct name based on index, package name, and properties.
7798	TypeName determines the type name based on index and properties.
7799	NewTgzWalker creates a new tgz walker with the given package reader and empty callbacks map.
7800	NewBackoff initializes a new Backoff instance with specified strategy, start duration, and limit duration.
7801	Reset resets the backoff counter and duration
7802	NewExponential creates a new Backoff instance using exponential strategy with specified start and limit durations.
7803	NewExponentialFullJitter creates a backoff strategy using exponential full jitter.
7804	NewLinear creates a backoff with linear strategy.
7805	GetLineSize calculates the size of a line based on floor and line numbers.
7806	GetMaxSize retrieves the maximum size based on line size calculations.
7807	compute draws a sapin Christmas tree based on its size.
7808	WithTimeout sets timeout using SetTimeout method.
7809	WithContext sets the Context field o value.
7810	WithHTTPClient sets the HTTP client for PostAppsParams.
7811	WithBody sets the Body field o value.
7812	WithTimeout sets the timeout on GetAppsAppParams.
7813	WithContext sets the Context field o value.
7814	WithHTTPClient sets the HTTPClient field o value.
7815	WithApp sets the app field to the given value on GetAppsAppParams.
7816	UnmarshalBinary deserializes JSON to RouteWrapper.
7817	WithTimeout sets timeout on GetAppsParams.
7818	WithContext sets the Context field o value.
7819	WithHTTPClient sets the HTTPClient field o value using SetHTTPClient method.
7820	WithTimeout sets timeout on DeleteAppsAppParams.
7821	WithContext sets the Context field o value.
7822	WithHTTPClient sets the HTTPClient field o value using SetHTTPClient method.
7823	WithApp sets the app parameter's value.
7824	WithTimeout sets timeout on PatchAppsAppRoutesRouteParams.
7825	WithContext sets the Context field o value.
7826	WithHTTPClient sets the HTTPClient field o value using SetHTTPClient method.
7827	WithApp sets the App field o value.
7828	WithBody sets the body field o value.
7829	WithRoute sets the Route field o value.
7830	WithTimeout sets timeout on PostAppsAppRoutesParams.
7831	WithContext sets the context for the PostAppsAppRoutesParams.
7832	WithHTTPClient sets the HTTPClient field o value using SetHTTPClient method.
7833	WithApp sets the App field to app on o.
7834	WithBody sets body on PostAppsAppRoutesParams and returns it.
7835	WithTimeout sets the timeout for route parameters.
7836	WithContext sets the Context field o value.
7837	WithApp sets the app field o value.
7838	WithBody sets the body field o value.
7839	WithRoute sets the route parameter on PutAppsAppRoutesRouteParams.
7840	WithTimeout sets the timeout duration for GetAppsAppRoutesParams.
7841	WithContext sets the Context field o value.
7842	WithHTTPClient sets the HTTPClient field o value using SetHTTPClient method.
7843	WithApp sets the App field o value.
7844	WithTimeout applies the timeout to PatchAppsAppParams.
7845	WithContext sets the Context field o value.
7846	WithHTTPClient sets the HTTP client for the PatchAppsAppParams object.
7847	WithApp sets the app field o value.
7848	WithBody sets the body field of PatchAppsAppParams.
7849	WithTimeout sets timeout using SetTimeout method on o.
7850	WithContext sets the Context field o value.
7851	WithApp sets the App field o value.
7852	WithBody sets the body field to the given AppWrapper object.
7853	UnmarshalJSON deserializes JSON data into a Task object.
7854	MarshalJSON serializes task data including NewTask and TaskAllOf1.
7855	Validate validates the Task's NewTask and TaskAllOf1 fields using the provided formats, collecting any errors and returning them as a CompositeValidationError if present.
7856	GetRanges assigns CIDR lengths based on IP type, validates them, and returns parsed CIDR ranges.
7857	WithTimeout sets the timeout for route params.
7858	WithContext sets the Context field o value.
7859	WithHTTPClient sets HTTP client for GetAppsAppRoutesRouteParams.
7860	WithApp sets the app parameter on GetAppsAppRoutesRouteParams.
7861	WithRoute sets the Route field o value.
7862	New initializes a Functions client with specified transport and formats.
7863	SetTransport updates transport for c and its nested components.
7864	WithTimeout sets the timeout on the route parameters object.
7865	WithContext sets the ctx field o value.
7866	WithHTTPClient sets the HTTPClient field o value using SetHTTPClient method.
7867	WithApp sets the app field o value.
7868	WithRoute sets the route parameter on o.
7869	WithTimeout sets the timeout for GetTasksParams.
7870	WithContext sets the Context field o value.
7871	WithHTTPClient sets the HTTPClient field o value.
7872	NewValueStore initializes a new ValueStore instance with the given address, concurrency level, TLS configuration, and gRPC dial options. It sets up channels for handling asynchronous requests and responses for lookups, reads, writes, and deletes, and starts goroutines to manage these streams.
7873	Close shuts down the store and waits for handlers to finish.
7874	SetBackend locks o then sets its backend field to backend before unlocking o.
7875	Ring returns the server's ring.
7876	GetLocalID retrieves the local ID of the server.
7877	GetListenAddr returns the listening address of the server's local node.
7878	Startup initializes ring server connector if not already running.
7879	shutdownFinished waits then signals server shutdown completion
7880	Stop stops the server and ensures proper cleanup.
7881	Exit stops the server gracefully.
7882	SelfUpgrade performs server self-upgrade with version check.
7883	SoftwareVersion retrieves the current software version.
7884	Shutdown locks groupStore before calling shutdown method and then unlocks it.
7885	Rant retrieves a rant and its comments using its ID.
7886	Profile retrieves the user's profile and content based on the username.
7887	Search retrieves RantModels matching a search term.
7888	Surprise fetches a rant from the server and decodes it.
7889	WeeklyRants fetches weekly rants from an API endpoint.
7890	getUserId fetches the user ID for a given username via an API call. Returns the user ID if successful, otherwise an error.
7891	Shutdown stops the ReplValueStore gracefully, closing server channels and stores.
7892	Function checks if file exists using os.Stat().
7893	Handle outbound messages on the connection.
7894	parse reads messages from a pool, parses them, logs errors, and forwards them.
7895	Group creates a new group with the specified domain, name, and members.
7896	Groups retrieves all groups from the domain.
7897	GetGroup retrieves group information from the domain.
7898	Reticence truncates a string after a certain length, removing punctuation and "..." if necessary.
7899	CheckPassword ensures the password length is within min and max, contains only graphic characters, returning an error otherwise.
7900	CleanUrl cleans the URL and checks its validity within given length constraints.
7901	NewParameter creates a new parameter with the given name and value.
7902	MakeParams creates a new Params object with specified field count.
7903	Parse populates the struct fields from a reflect.Value based on field tags and parameters.
7904	Email constructs and returns the email address using the forwarder's name and domain name.
7905	Forwarder creates a new Forwarder instance with specified domain, name, and target.
7906	Forwarders retrieves all forwarders associated with the domain.
7907	GetForwarder retrieves the forwarder details for the specified domain.
7908	New creates a new CGP instance with the provided URL, user, and password.
7909	EscapeCommaSeparated escapes each string in input, replacing commas with other characters for CSV formatting.
7910	Alias creates a new Alias instance with the given name and associated account.
7911	Email constructs and returns the email address using the alias's name and domain.
7912	Aliases returns the account's aliases.
7913	RealName retrieves the real name associated with the account's email.
7914	Email constructs and returns the email address using account name and domain.
7915	Account creates a new account associated with a domain.
7916	Accounts retrieves all accounts from domain.
7917	Exists checks if a domain settings exist via SOAP request.
7918	Aliases retrieves compacted domain aliases.
7919	Domain creates a new Domain instance with the given name and associates it with cgp.
7920	Domains retrieves all domains from CGP request.
7921	New creates a new error instance with stack trace, no cause, non-retryable status, given information, and optional public messages.
7922	Wrap wraps an error with additional information and public message.
7923	mergeIn updates error info and concatenates public message parts.
7924	wrappedErrStr returns the error message of the wrapped error or empty if no error is present.
7925	concatArgs joins variadic arguments into a single string without the final newline.
7926	MailingList creates a new mailing list associated with a domain.
7927	Subscriber creates a new subscriber instance associated with a mailing list.
7928	Subscribers retrieves the mailing list's subscribers.
7929	MailingLists retrieves all mailing lists within the specified domain.
7930	NewByteKeyItem creates a new byte key item and returns it as an unsafe pointer.
7931	CompareBytes compares two byteKeyItems using bytes.Compare.
7932	CompareInt compares two integer key items.
7933	Malloc allocates memory using C's mm_malloc and tracks allocations if Debug is enabled.
7934	Free releases memory at the given pointer.
7935	Stats returns system statistics as a formatted string.
7936	FreeOSMemory releases OS memory and returns an error if unsuccessful.
7937	Add inserts an item into the segment at a random level.
7938	NewSegment creates a new segment with random initialization.
7939	Assemble constructs a SkipList from multiple Segments, merging their nodes and statistics.
7940	CompareNodeTable compares two unsafe pointers.
7941	New creates a NodeTable with custom hash and key equality functions, registers it with a database instance.
7942	Stats returns formatted statistics about the node table's hash tables and memory usage.
7943	MemoryInUse calculates total memory usage based on item size and counts of fast and slow hash tables.
7944	Get retrieves a pointer from the NodeTable using a byte key, returning a decoded pointer if found.
7945	Update key's pointer in NodeTable, insert if not found.
7946	Remove key from NodeTable, update hash tables accordingly.
7947	Close resets counters and clears hash tables, then deletes the NodeTable instance from database instances.
7948	MemoryInUse calculates total memory usage by iterating through database instances.
7949	debugMarkFree updates node's data with free block content based on its level.
7950	Seek advances iterator to first entry >= key.
7951	Next advances the iterator, counts iterations, skips unwanted items, and refreshes based on rate.
7952	Refresh updates the iterator to point to the current item.
7953	Close releases resources used by the Iterator instance.
7954	NewIterator creates a new Iterator for the given snapshot.
7955	SeekFirst seeks the first valid node across multiple iterators and initializes the merge iterator.
7956	Next retrieves the next node from a merge iterator.
7957	Seek implements MergeIterator.Seek. This method iterates through each iterator, seeking the item and adding valid nodes to a heap, then initializes the heap and moves to the next element. It returns true if any iterator found the item.
7958	Keys retrieves all keys from the linked list as byte slices.
7959	Remove removes a node from NodeList using its key. Returns the removed node or nil if not found.
7960	Add adds a node to the head of the NodeList.
7961	NewWithConfig initializes a Skiplist with a given configuration.
7962	FreeNode releases a node from the skip list and updates stats.
7963	MakeBuf creates a new ActionBuffer with initialized predecessors and successors.
7964	Size calculates the total size of the node and its items in the SkipList.
7965	NewLevel determines the next level for a skiplist based on random chance and atomic operations.
7966	Insert adds an item to a skiplist using a comparison function and action buffer.
7967	Insert2 inserts an item into the skiplist using a custom comparison function and random level generator. It returns the inserted node and a boolean indicating success.
7968	Insert3 inserts an item into a skiplist at the specified level, handling conflicts and updating pointers atomically.
7969	Delete removes an item from the skiplist using the compare function and updates statistics.
7970	DeleteNode removes a node from the skiplist using a barrier token.
7971	GetRangeSplitItems splits items in a skiplist across multiple ways based on their level nodes count.
7972	Bytes returns a slice of bytes from the item's data.
7973	ItemSize calculates the size of an item based on its data length.
7974	KVFromBytes extracts key-value pairs from byte slices.
7975	CompareKV compares two key-value pairs based on their values.
7976	Emit sends events to all handlers asynchronously and returns the count.
7977	UnregisterHandler removes event handler from controller's map safely using mutex lock.
7978	IsHandlerRegistered checks if a handler is registered in the controller
7979	CompareNitro compares two Nitro instances based on their id field.
7980	DefaultConfig initializes a Config with default values including a key comparator, file type, memory management flag, and refresh rate.
7981	Delete removes bytes from the writer's buffer.
7982	GetNode retrieves a node from the store based on the given byte slice.
7983	SetKeyComparator configures key comparison functions for cfg.
7984	UseMemoryMgmt configures memory management functions for amd64 architecture.
7985	NewWithConfig initializes a Nitro instance with the given configuration.
7986	MemoryInUse calculates total memory usage by summing up storage stats and snapshots.
7987	Close shuts down Nitro by waiting for snapshots, acquiring GC ownership, closing channels, freeing memory, and cleaning up iterators.
7988	`NewWriter creates a new writer, adds it to the list, initializes its context, starts collection and free workers.`
7989	SnapshotSize calculates the total size of a snapshot structure in bytes.
7990	Encode serializes snapshot data to writer.
7991	Decode reads snapshot data from reader into buffer.
7992	Open increments reference count if greater than zero.
7993	CompareSnapshot compares two Snapshot pointers based on their sn field.
7994	GC runs garbage collection if not already running.
7995	GetSnapshots retrieves all snapshots using iterator.
7996	MemoryInUse calculates total memory usage by iterating through instances.
7997	CompareBS compares two BarrierSession pointers based on their seqno field.
7998	Acquire acquires a barrier session or retries if already active.
7999	Release decrements the live count of a barrier session and performs cleanup if necessary.
8000	FlushSession updates the session with a new reference and increments sequence number.
8001	Apply updates the statistics report based on the provided stats object.
8002	AddInt64 adds val to src if s is local, otherwise uses atomic operation.
8003	AddUint64 adds val to src using atomic operation if not local.
8004	Merge combines statistics from another Stats instance.
8005	GetStats retrieves and returns statistics report for the skiplist.
8006	NewIterator creates a new iterator for SkipList using specified compare function and buffer.
8007	SeekFirst sets iterator to first element in sequence.
8008	SeekWithCmp searches for item using comparison functions and updates iterator state accordingly.
8009	Seek updates iterator to point to item or first greater item, returning whether found.
8010	Valid checks if iterator is still valid after reaching tail.
8011	Delete marks the current item as soft-deleted and moves to the next item.
8012	Next advances the iterator to the next valid item, handling deletions and refreshing paths as needed.
8013	Init initializes SkuM1SmallBuilder and registers it with skurepo.
8014	FromURL replaces parts of a URL based on predefined replacements.
8015	ToURL converts a folder path to a URL by replacing specified substrings.
8016	Size calculates the total size of the tuple header based on its version, field size, and count.
8017	WriteTo encodes and writes TupleHeader fields to the writer.
8018	Static serves static files from a directory with optional prefix and index handling.
8019	Read reads configuration from a file and sets values accordingly.
8020	Del removes a key from a specified section in the config. If the section becomes empty, it also deletes the section.
8021	WriteTo saves the configuration to a file with sections and key-value pairs.
8022	checkSection trims a line and checks if it's a valid section; returns the section name and a flag.
8023	checkLine splits line into key-value pair; returns trimmed key, value, and success flag.
8024	checkComment returns true if the input line starts with any of the defined comment prefixes.
8025	NewResponseWrapper creates a response wrapper using an HTTP response recorder.
8026	Hijack extracts a net.Conn from a wrapped http.ResponseWriter.
8027	CloseNotify returns a channel that receives a value when the underlying writer is closed.
8028	DateFormat creates an Option to set the dateFormat field.
8029	Logger middleware logs HTTP requests and responses.
8030	GetAvailableInventory fetches inventory using SkuBuilder registry and starts polling for registered SKUs.
8031	Expiration creates a TokenOpt to set the expiration duration on options.
8032	Claimer returns a token option to set the claimer function used to customize JWT claims.
8033	Issuer creates a TokenOpt to set the issuer field.
8034	User sets the user option in TokenOpt.
8035	Password returns a TokenOpt to set the password on options.
8036	Extractor assigns a request extractor to the TokenOpt's options.
8037	TokenGenerator creates a middleware handler to authenticate requests using JWT and pass them to the next handler.
8038	Token retrieves the authentication token from the request context.
8039	Claims retrieves JWT claims from HTTP request context, returning nil if not present.
8040	Token's String method returns a formatted string representation based on token type and value length.
8041	NewLexer creates a new Lexer instance for parsing input strings with a given handler.
8042	run executes lexical analysis until no more states are available.
8043	emit generates and emits a new token if the lexer's position has changed.
8044	skipWhitespace advances lexer past any whitespace characters.
8045	next advances Lexer to the next rune and returns it.
8046	LineNum calculates the line number based on the current position in the input.
8047	Offset calculates the column position of the Lexer's current position.
8048	errorf logs an error message with file name, line number, and offset.
8049	lexText processes input text using a lexer, transitioning between states based on specific prefixes or characters encountered.
8050	lexComment skips whitespace, processes comments, and emits TokenComment before continuing text parsing.
8051	New creates a new tuple with the given namespace and name.
8052	AddVersion appends version fields to the tuple type and updates field index.
8053	Contains checks if a field exists within a tuple type.
8054	Offset retrieves the offset of a field in a tuple type.
8055	Versions returns a slice of versions for the tuple type.
8056	SetPrivateMeta adds or updates a private metadata entry in Task.
8057	SetPublicMeta updates the MetaData map with the given name and value.
8058	GetRedactedVersion returns a redacted version of the task.
8059	Equal checks if two tasks have identical ID, Timestamp, Expires, Status, Profile, and CallerName.
8060	HTTP restricts access to handler based on allowed verbs.
8061	PutUint8 writes a uint8 value to the buffer at the specified field.
8062	PutInt8 writes an int8 value to the buffer at the specified field.
8063	PutUint16 adds a 16-bit unsigned integer to the buffer at the specified field.
8064	PutInt16 writes an int16 value to the buffer at the specified field.
8065	PutUint32 writes a uint32 value to buffer at specified field.
8066	PutInt32 writes an int32 value to TupleBuilder buffer at specified field.
8067	PutUint64 writes a uint64 value to buffer based on its size.
8068	PutInt64 adds an int64 value to the buffer at the specified field, handling different bit sizes and type codes.
8069	NewPackageList returns a new thread-safe package list.
8070	PutFloat32 adds a float32 field to the TupleBuilder buffer.
8071	New Martini router with middleware and routes
8072	Languages returns an Option to set languages in options.
8073	Session sets the session field o value.
8074	Data retrieves ContextValue from http request context.
8075	URL constructs a new URL based on the given components and context.
8076	Size returns terminal width and height or an error if not initialized.
8077	GetRequestIDFromTaskResponse extracts the request ID from the task response metadata.
8078	PutString adds a string field to the buffer with appropriate encoding.
8079	LoadDirectory recursively loads all entity files in a directory using the provided parser.
8080	LoadFile opens a file and uses a parser to load its contents into a package.
8081	LoadPackage parses package using provided parser.
8082	NewDecoder creates a Decoder to read encoded data from an io.Reader using a specified Registry.
8083	NewDecoderSize creates a Decoder with a specified max size, registry, and reader.
8084	Panic wraps an HTTP handler to log panics, providing a stack trace and custom error messages.
8085	DeployVApp returns fake VApp and error.
8086	UnDeployVApp simulates the undeployment of a vApp and returns a task or an error.
8087	Auth authenticates the user with the given username and password, returning an error if authentication fails.
8088	QueryTemplate retrieves a vApp template from a fake VCD client.
8089	NewEncoder initializes and returns a versionOneEncoder for encoding messages to an io.Writer.
8090	Getter sets the getter field o value.
8091	Setter creates an Option with a setter function.
8092	Age returns an Option to set the age on options.
8093	Nonce wraps an HTTP handler, adding request validation using nonces.
8094	NonceValueFromRequest extracts nonce status from HTTP request context.
8095	StoreNonce handles nonce setting via context key, invoking appropriate setter function if available.
8096	PutFloat32Array writes a float32 array to buffer with variable length encoding.
8097	PutFloat64Array writes a float64 array to buffer.
8098	Do mocks base method
8099	NewLease initializes a Lease struct with a task manager and available SKUs.
8100	Delete handles HTTP request to delete lease.
8101	Post processes HTTP requests to manage lease tasks, returning created status or error.
8102	ReStock updates SKU task or marks it unavailable.
8103	Procurement retrieves or creates a task based on SKU availability.
8104	Parse HTTP request body into Lease struct. Initialize ProcurementMeta if nil.
8105	Is checks if a tuple matches a given type based on header hashes.
8106	Offset retrieves the field index of a tuple or returns an error.
8107	WriteTo implements io.Writer.To for Tuple. It writes both header and data to the writer.
8108	PutTuple writes a tuple to the buffer at the specified position, handling different data sizes and updating offsets accordingly.
8109	WriteString sends content to ResponseWriter as byte slice.
8110	NotFound sets 404 status and writes message to response.
8111	Run starts the agent's task poller and listens for polls, handling process completion.
8112	NewWaitGroup creates a new WaitGroup with the given throttle value.
8113	Add increments the count of outstanding tasks; if above throttle limit, waits for completion before incrementing.
8114	Wait blocks until all tasks have completed.
8115	Gzip wraps an HTTP handler to compress responses using gzip when requested.
8116	New creates a new InnkeeperClient instance with URI, User, and Password.
8117	Write HTTP error response with status and optional message.
8118	Renderer creates a handler that compiles templates based on options and renders them.
8119	NewClient returns a new PDClient instance with the specified API key, URL, and HTTP client.
8120	GetTask fetches a task using its ID and parses the response.
8121	WriteImageToHTTP encodes an image to PNG and writes it to an HTTP response.
